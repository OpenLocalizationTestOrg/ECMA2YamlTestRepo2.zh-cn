### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Execution.ProjectInstance
  id: ProjectInstance
  children:
  - Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  - Microsoft.Build.Execution.ProjectInstance.#ctor(System.String)
  - Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Execution.ProjectInstance.AddItem(System.String,System.String)
  - Microsoft.Build.Execution.ProjectInstance.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.Build.Execution.ProjectInstance.Build
  - Microsoft.Build.Execution.ProjectInstance.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Execution.ProjectInstance.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Execution.ProjectInstance.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Execution.ProjectInstance.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)
  - Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)
  - Microsoft.Build.Execution.ProjectInstance.DeepCopy
  - Microsoft.Build.Execution.ProjectInstance.DeepCopy(System.Boolean)
  - Microsoft.Build.Execution.ProjectInstance.DefaultTargets
  - Microsoft.Build.Execution.ProjectInstance.Directory
  - Microsoft.Build.Execution.ProjectInstance.EvaluateCondition(System.String)
  - Microsoft.Build.Execution.ProjectInstance.ExpandString(System.String)
  - Microsoft.Build.Execution.ProjectInstance.FullPath
  - Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance)
  - Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemInstance)
  - Microsoft.Build.Execution.ProjectInstance.GetItems(System.String)
  - Microsoft.Build.Execution.ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude(System.String,System.String)
  - Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectMetadataInstance)
  - Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance,System.String)
  - Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemInstance,System.String)
  - Microsoft.Build.Execution.ProjectInstance.GetProperty(System.String)
  - Microsoft.Build.Execution.ProjectInstance.GetPropertyValue(System.String)
  - Microsoft.Build.Execution.ProjectInstance.GetPropertyValueEscaped(Microsoft.Build.Execution.ProjectPropertyInstance)
  - Microsoft.Build.Execution.ProjectInstance.GlobalProperties
  - Microsoft.Build.Execution.ProjectInstance.InitialTargets
  - Microsoft.Build.Execution.ProjectInstance.IsImmutable
  - Microsoft.Build.Execution.ProjectInstance.ItemDefinitions
  - Microsoft.Build.Execution.ProjectInstance.Items
  - Microsoft.Build.Execution.ProjectInstance.ItemTypes
  - Microsoft.Build.Execution.ProjectInstance.ProjectFileLocation
  - Microsoft.Build.Execution.ProjectInstance.Properties
  - Microsoft.Build.Execution.ProjectInstance.RemoveItem(Microsoft.Build.Execution.ProjectItemInstance)
  - Microsoft.Build.Execution.ProjectInstance.RemoveProperty(System.String)
  - Microsoft.Build.Execution.ProjectInstance.SetProperty(System.String,System.String)
  - Microsoft.Build.Execution.ProjectInstance.Targets
  - Microsoft.Build.Execution.ProjectInstance.ToolsVersion
  - Microsoft.Build.Execution.ProjectInstance.ToProjectRootElement
  - Microsoft.Build.Execution.ProjectInstance.UpdateStateFrom(Microsoft.Build.Execution.ProjectInstance)
  langs:
  - csharp
  name: ProjectInstance
  nameWithType: ProjectInstance
  fullName: Microsoft.Build.Execution.ProjectInstance
  type: Class
  summary: "表示一个项目实例。"
  remarks: "克隆项目时，将导致此类的实例。 构造函数是内部以要求用户从现有的项目创建项目实例。       新项目实例是不可变，，区别在于实例项可以在其中添加，并且在其上设置实例属性。 项目实例很有用，因为它们会修改并生成若干次，而不影响原始的项目。       允许此类或任意位置及其各组成部分的任何引用了<xref:Microsoft.Build.Construction>或<xref:Microsoft.Build.Evaluation>对象。</xref:Microsoft.Build.Evaluation> </xref:Microsoft.Build.Construction>       不公开项目实例目标、 主机服务和任务注册表。"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{FullPath} #Targets={TargetsCount} DefaultTargets={(DefaultTargets == null) ? System.String.Empty : System.String.Join(";", DefaultTargets.ToArray())} ToolsVersion={Toolset.ToolsVersion} InitialTargets={(InitialTargets == null) ? System.String.Empty : System.String.Join(";", InitialTargets.ToArray())} #GlobalProperties={globalProperties.Count} #Properties={properties.Count} #ItemTypes={items.ItemTypes.Count} #Items={items.Count}")]

      public class ProjectInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement)'
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ProjectInstance(ProjectRootElement)
  nameWithType: ProjectInstance.ProjectInstance(ProjectRootElement)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(ProjectRootElement)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "创建一个新的项目实例并从给定的项目根目录位置，使用默认的项目集合对其进行初始化。"
  remarks: "没有中间<xref:Microsoft.Build.Evaluation.Project>创建对象。</xref:Microsoft.Build.Evaluation.Project> 这是一个项目将无法生成，但不是显示或编辑的情况下很有用。"
  syntax:
    content: public ProjectInstance (Microsoft.Build.Construction.ProjectRootElement xml);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "项目根元素。"
  overload: Microsoft.Build.Execution.ProjectInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ProjectInstance(String)
  nameWithType: ProjectInstance.ProjectInstance(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "创建一个新的项目实例并从给定的项目文件，使用默认的项目集合对其进行初始化。"
  remarks: "没有中间<xref:Microsoft.Build.Evaluation.Project>创建对象。</xref:Microsoft.Build.Evaluation.Project> 这是一个项目将无法生成，但不是显示或编辑的情况下很有用。"
  syntax:
    content: public ProjectInstance (string projectFile);
    parameters:
    - id: projectFile
      type: System.String
      description: "项目文件的名称。"
  overload: Microsoft.Build.Execution.ProjectInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ProjectInstance(String,IDictionary<String,String>,String)
  nameWithType: ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "创建一个新的项目实例并从给定的项目文件，使用给定的全局属性、 工具版本和默认的项目集合对其进行初始化。"
  remarks: "没有中间<xref:Microsoft.Build.Evaluation.Project>创建对象。</xref:Microsoft.Build.Evaluation.Project> 这是一个项目将无法生成，但不是显示或编辑的情况下很有用。"
  syntax:
    content: public ProjectInstance (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: projectFile
      type: System.String
      description: "项目文件的名称。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要使用的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "工具版本。"
  overload: Microsoft.Build.Execution.ProjectInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: ProjectInstance.ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "创建一个新的项目实例并从给定的项目根目录位置，使用给定的全局属性、 的工具版本和项目集合对其进行初始化。"
  remarks: "没有中间<xref:Microsoft.Build.Evaluation.Project>创建对象。</xref:Microsoft.Build.Evaluation.Project> 这是一个项目将无法生成，但不是显示或编辑的情况下很有用。"
  syntax:
    content: public ProjectInstance (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "项目根元素"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要使用的全局属性。 可能为 null。"
    - id: toolsVersion
      type: System.String
      description: "工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目集合"
  overload: Microsoft.Build.Execution.ProjectInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ProjectInstance(String,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "创建一个新的项目实例并从给定的项目文件，使用给定的全局属性、 的工具版本和项目集合对其进行初始化。"
  remarks: "没有中间<xref:Microsoft.Build.Evaluation.Project>创建对象。</xref:Microsoft.Build.Evaluation.Project> 这是一个项目将无法生成，但不是显示或编辑的情况下很有用。"
  syntax:
    content: public ProjectInstance (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: projectFile
      type: System.String
      description: "项目文件的名称。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要使用的全局属性。 可能为 null。"
    - id: toolsVersion
      type: System.String
      description: "工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目集合"
  overload: Microsoft.Build.Execution.ProjectInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection)
  nameWithType: ProjectInstance.ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "创建一个新的项目实例并从给定的项目根目录位置，使用给定的全局属性、 的工具版本和项目集合对其进行初始化"
  remarks: "没有中间<xref:Microsoft.Build.Evaluation.Project>创建对象。</xref:Microsoft.Build.Evaluation.Project> 这是一个项目将无法生成，但不是显示或编辑的情况下很有用。"
  syntax:
    content: public ProjectInstance (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "项目根元素。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要使用的全局属性。 可能为 null。"
    - id: toolsVersion
      type: System.String
      description: "工具版本。 可能为 null。"
    - id: subToolsetVersion
      type: System.String
      description: "子工具集版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目集合。"
  overload: Microsoft.Build.Execution.ProjectInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ProjectInstance(String,IDictionary<String,String>,String,String,ProjectCollection)
  nameWithType: ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String,String,ProjectCollection)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "创建一个新的项目实例并从给定的项目文件，使用给定的全局属性、 的工具版本、 子工具集版本和项目集合对其进行初始化。"
  remarks: "没有中间<xref:Microsoft.Build.Evaluation.Project>创建对象。</xref:Microsoft.Build.Evaluation.Project> 这是一个项目将无法生成，但不是显示或编辑的情况下很有用。"
  syntax:
    content: public ProjectInstance (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: projectFile
      type: System.String
      description: "项目文件的名称。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要使用的全局属性。 可能为 null。"
    - id: toolsVersion
      type: System.String
      description: "工具版本。 可能为 null。"
    - id: subToolsetVersion
      type: System.String
      description: "子工具集版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目集合。"
  overload: Microsoft.Build.Execution.ProjectInstance.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.AddItem(System.String,System.String)
  id: AddItem(System.String,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: AddItem(String,String)
  nameWithType: ProjectInstance.AddItem(String,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.AddItem(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "将具有任何元数据的项添加到项目。"
  remarks: "我们不需要 ProjectItemInstance 若要确保我们还没有已由另一个 ProjectInstance 使用。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectItemInstance AddItem (string itemType, string evaluatedInclude);
    parameters:
    - id: itemType
      type: System.String
      description: "要添加的项的项类型。"
    - id: evaluatedInclude
      type: System.String
      description: "计算的 Include 特性的项。"
    return:
      type: Microsoft.Build.Execution.ProjectItemInstance
      description: "返回新的项。"
  overload: Microsoft.Build.Execution.ProjectInstance.AddItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: ProjectInstance.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Execution.ProjectInstance.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "将具有给定元数据的项添加到项目。"
  remarks: "我们不需要 ProjectItemInstance 若要确保我们还没有已由另一个 ProjectInstance 使用。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectItemInstance AddItem (string itemType, string evaluatedInclude, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,string>> metadata);
    parameters:
    - id: itemType
      type: System.String
      description: "要添加的项的项类型。"
    - id: evaluatedInclude
      type: System.String
      description: "计算的 Include 特性的项。"
    - id: metadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: "项的元数据。"
    return:
      type: Microsoft.Build.Execution.ProjectItemInstance
      description: "返回新的项。"
  overload: Microsoft.Build.Execution.ProjectInstance.AddItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build
  id: Build
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build()
  nameWithType: ProjectInstance.Build()
  fullName: Microsoft.Build.Execution.ProjectInstance.Build()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用记录器的项目集合生成项目的默认的目标。"
  syntax:
    content: public bool Build ();
    parameters: []
    return:
      type: System.Boolean
      description: "如果生成成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build(IEnumerable<ILogger>)
  nameWithType: ProjectInstance.Build(IEnumerable<ILogger>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用给定的记录器生成项目的默认目标。"
  remarks: "如果任何提供的记录器已附加到日志记录服务，则引发 InvalidOperationException。"
  syntax:
    content: public bool Build (System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要用于生成的记录器。 可能为 null。"
    return:
      type: System.Boolean
      description: "如果生成成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: ProjectInstance.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用给定的记录器和远程记录器生成项目的默认目标。"
  remarks: "如果任何提供的记录器已附加到日志记录服务，则引发 InvalidOperationException。"
  syntax:
    content: public bool Build (System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要用于生成的记录器。 可能为 null。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "要用于生成的远程记录器。 可能为 null。"
    return:
      type: System.Boolean
      description: "如果生成成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build(String,IEnumerable<ILogger>)
  nameWithType: ProjectInstance.Build(String,IEnumerable<ILogger>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String,IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用给定的记录器生成项目的给定的目标。"
  remarks: "如果任何提供的记录器已附加到日志记录服务，则引发 InvalidOperationException。"
  syntax:
    content: public bool Build (string target, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: target
      type: System.String
      description: "要生成的目标。 可能为 null。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要用于生成的记录器。 可能为 null。"
    return:
      type: System.Boolean
      description: "如果生成成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>)
  nameWithType: ProjectInstance.Build(String[],IEnumerable<ILogger>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String[],IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用给定的记录器生成项目的给定的目标。"
  remarks: "如果任何提供的记录器已附加到日志记录服务，则引发 InvalidOperationException。"
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: targets
      type: System.String[]
      description: "要生成的目标。 可能为 null。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要用于生成的记录器。 可能为 null。"
    return:
      type: System.Boolean
      description: "如果生成成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: ProjectInstance.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用给定的记录器和远程记录器生成项目的给定的目标。"
  remarks: "如果任何提供的记录器已附加到日志记录服务，则引发 InvalidOperationException。"
  syntax:
    content: public bool Build (string target, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: target
      type: System.String
      description: "要生成的目标。 可能为 null。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要用于生成的记录器。 可能为 null。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "要用于生成的远程记录器。 可能为 null。"
    return:
      type: System.Boolean
      description: "如果生成成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>,IDictionary<String,TargetResult>)
  nameWithType: ProjectInstance.Build(String[],IEnumerable<ILogger>,IDictionary<String,TargetResult>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String[],IEnumerable<ILogger>,IDictionary<String,TargetResult>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用指定的记录器生成目标的列表。 目标可能为 null。 记录器可能为 null。"
  remarks: "如果任何提供的记录器已附加到我们已传递的日志记录服务，将引发 InvalidOperationException。"
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, out System.Collections.Generic.IDictionary<string,Microsoft.Build.Execution.TargetResult> targetOutputs);
    parameters:
    - id: targets
      type: System.String[]
      description: "要生成的目标的列表。 可能为 null。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要用于生成目标的记录器的枚举的列表。"
    - id: targetOutputs
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}
      description: "目标生成的输出。"
    return:
      type: System.Boolean
      description: "如果成功，失败 false 则返回 true。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: ProjectInstance.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用给定的记录器和远程记录器生成项目的给定的目标。"
  remarks: "如果任何提供的记录器已附加到日志记录服务，则引发 InvalidOperationException。"
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: targets
      type: System.String[]
      description: "要生成的目标。 可能为 null。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要用于生成的记录器。 可能为 null。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "要用于生成的远程记录器。 可能为 null。"
    return:
      type: System.Boolean
      description: "如果生成成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>,IDictionary<String,TargetResult>)
  nameWithType: ProjectInstance.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>,IDictionary<String,TargetResult>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>,IDictionary<String,TargetResult>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "生成给定的目标与给定的目标输出和使用给定的记录器和远程记录器。"
  remarks: "如果任何提供的记录器已附加到日志记录服务，则引发 InvalidOperationException。"
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers, out System.Collections.Generic.IDictionary<string,Microsoft.Build.Execution.TargetResult> targetOutputs);
    parameters:
    - id: targets
      type: System.String[]
      description: "要生成的目标。 可能为 null。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要用于生成的记录器。 可能为 null。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "要用于生成的远程记录器。 可能为 null。"
    - id: targetOutputs
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}
      description: "目标输出中。"
    return:
      type: System.Boolean
      description: "如果生成成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.DeepCopy
  id: DeepCopy
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: DeepCopy()
  nameWithType: ProjectInstance.DeepCopy()
  fullName: Microsoft.Build.Execution.ProjectInstance.DeepCopy()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "在其中创建此项目，所有内容的独立的深层克隆。 克隆具有与原始相同的可变性。 用于编译单个文件或保留生成之间的生成结果很有用。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance DeepCopy ();
    parameters: []
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "创建此项目独立的深层克隆。"
  overload: Microsoft.Build.Execution.ProjectInstance.DeepCopy*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.DeepCopy(System.Boolean)
  id: DeepCopy(System.Boolean)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: DeepCopy(Boolean)
  nameWithType: ProjectInstance.DeepCopy(Boolean)
  fullName: Microsoft.Build.Execution.ProjectInstance.DeepCopy(Boolean)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "使用指定的可变性，创建此项目，所有内容独立的深层克隆。 用于编译单个文件或保留生成之间的生成结果很有用。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance DeepCopy (bool isImmutable);
    parameters:
    - id: isImmutable
      type: System.Boolean
      description: "标志，指示克隆可变性。"
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "使用指定的可变性返回此项目中，独立的深层克隆。"
  overload: Microsoft.Build.Execution.ProjectInstance.DeepCopy*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.DefaultTargets
  id: DefaultTargets
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: DefaultTargets
  nameWithType: ProjectInstance.DefaultTargets
  fullName: Microsoft.Build.Execution.ProjectInstance.DefaultTargets
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取或设置此项目的默认目标列表。"
  remarks: "如果未显式不指定任何目标，则会生成默认目标。"
  syntax:
    content: public System.Collections.Generic.List<string> DefaultTargets { get; }
    return:
      type: System.Collections.Generic.List{System.String}
      description: "返回此项目的默认目标的列表。"
  overload: Microsoft.Build.Execution.ProjectInstance.DefaultTargets*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Directory
  id: Directory
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Directory
  nameWithType: ProjectInstance.Directory
  fullName: Microsoft.Build.Execution.ProjectInstance.Directory
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: '获取项目根目录。 用于相对路径和生成期间设置的当前目录的计算。 永远不会为 null︰ 未从磁盘中加载的项目使用从生成开始时间的当前目录。'
  syntax:
    content: public string Directory { get; }
    return:
      type: System.String
      description: "返回项目根目录下，从不会是 null。 在生成开始时，未从磁盘中加载的项目返回当前目录。"
  overload: Microsoft.Build.Execution.ProjectInstance.Directory*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.EvaluateCondition(System.String)
  id: EvaluateCondition(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: EvaluateCondition(String)
  nameWithType: ProjectInstance.EvaluateCondition(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.EvaluateCondition(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "通过展开项和属性，使用的当前项和可用，然后执行逻辑求值的属性作为条件计算所提供的字符串。"
  remarks: "这是用于即时窗口。       不会展开裸机元数据表达式。"
  syntax:
    content: public bool EvaluateCondition (string condition);
    parameters:
    - id: condition
      type: System.String
      description: "要扩展的字符串。"
    return:
      type: System.Boolean
      description: "如果字符串的计算结果为 true; 则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.EvaluateCondition*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.ExpandString(System.String)
  id: ExpandString(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ExpandString(String)
  nameWithType: ProjectInstance.ExpandString(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.ExpandString(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "通过展开项和属性，使用的当前项和可用的属性的计算结果所提供的字符串。"
  remarks: "这很有用，对于某些主机，或调试器即时窗口。       不会展开裸机元数据表达式。"
  syntax:
    content: public string ExpandString (string unexpandedValue);
    parameters:
    - id: unexpandedValue
      type: System.String
      description: "要扩展的字符串。"
    return:
      type: System.String
      description: "返回扩展的字符串值。"
  overload: Microsoft.Build.Execution.ProjectInstance.ExpandString*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.FullPath
  id: FullPath
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: FullPath
  nameWithType: ProjectInstance.FullPath
  fullName: Microsoft.Build.Execution.ProjectInstance.FullPath
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取项目文件的完整路径。 用于日志记录。"
  syntax:
    content: public string FullPath { get; }
    return:
      type: System.String
      description: "返回项目文件的完整路径。 如果该项目永远不会名称为，返回 null。"
  overload: Microsoft.Build.Execution.ProjectInstance.FullPath*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance)
  id: GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetEvaluatedItemIncludeEscaped(ProjectItemDefinitionInstance)
  nameWithType: ProjectInstance.GetEvaluatedItemIncludeEscaped(ProjectItemDefinitionInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(ProjectItemDefinitionInstance)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取转义的计算提供的项定义的 Include 特性的值。"
  syntax:
    content: public static string GetEvaluatedItemIncludeEscaped (Microsoft.Build.Execution.ProjectItemDefinitionInstance item);
    parameters:
    - id: item
      type: Microsoft.Build.Execution.ProjectItemDefinitionInstance
      description: "要进行计算并转义项定义。"
    return:
      type: System.String
      description: "返回计算转义提供的项定义的 Include 特性的值。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemInstance)
  id: GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetEvaluatedItemIncludeEscaped(ProjectItemInstance)
  nameWithType: ProjectInstance.GetEvaluatedItemIncludeEscaped(ProjectItemInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(ProjectItemInstance)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取所提供的项的 Include 特性的计算，转义值。"
  syntax:
    content: public static string GetEvaluatedItemIncludeEscaped (Microsoft.Build.Execution.ProjectItemInstance item);
    parameters:
    - id: item
      type: Microsoft.Build.Execution.ProjectItemInstance
      description: "要计算和转义的项。"
    return:
      type: System.String
      description: "返回计算转义所提供的项的 Include 特性的值。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetItems(System.String)
  id: GetItems(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetItems(String)
  nameWithType: ProjectInstance.GetItems(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetItems(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取指定类型的此项目中的所有项。 这是只读的列表。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Execution.ProjectItemInstance> GetItems (string itemType);
    parameters:
    - id: itemType
      type: System.String
      description: "要检索的项的项类型。"
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Execution.ProjectItemInstance}
      description: "返回指定类型的此项目中的所有项。 如果不存在，则返回空列表。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude(System.String,System.String)
  id: GetItemsByItemTypeAndEvaluatedInclude(System.String,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetItemsByItemTypeAndEvaluatedInclude(String,String)
  nameWithType: ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude(String,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取指定类型的此项目中的所有项和计算包含值。 这是只读的列表。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<Microsoft.Build.Execution.ProjectItemInstance> GetItemsByItemTypeAndEvaluatedInclude (string itemType, string evaluatedInclude);
    parameters:
    - id: itemType
      type: System.String
      description: "要检索的项的项类型。"
    - id: evaluatedInclude
      type: System.String
      description: "要检索的项计算的包括成本"
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Execution.ProjectItemInstance}
      description: "返回指定类型的此项目中的所有项和计算包含值。 如果不存在，则返回一个空集合。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectMetadataInstance)
  id: GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectMetadataInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectMetadataInstance)
  nameWithType: ProjectInstance.GetMetadataValueEscaped(ProjectMetadataInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(ProjectMetadataInstance)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取提供元数据的转义的值。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Execution.ProjectMetadataInstance metadatum);
    parameters:
    - id: metadatum
      type: Microsoft.Build.Execution.ProjectMetadataInstance
      description: "若要对其进行转义元数据。"
    return:
      type: System.String
      description: "返回提供的元数据的转义的值。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance,System.String)
  id: GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectItemDefinitionInstance,String)
  nameWithType: ProjectInstance.GetMetadataValueEscaped(ProjectItemDefinitionInstance,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(ProjectItemDefinitionInstance,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取元数据的转义的值与提供的项定义的提供的名称。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Execution.ProjectItemDefinitionInstance item, string name);
    parameters:
    - id: item
      type: Microsoft.Build.Execution.ProjectItemDefinitionInstance
      description: "要提供元数据值的项定义。"
    - id: name
      type: System.String
      description: "元数据名称。"
    return:
      type: System.String
      description: "返回具有提供的名称的提供的项定义的元数据的转义的值。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemInstance,System.String)
  id: GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemInstance,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectItemInstance,String)
  nameWithType: ProjectInstance.GetMetadataValueEscaped(ProjectItemInstance,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(ProjectItemInstance,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取具有所提供的名称的元数据的转义的值上提供的项。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Execution.ProjectItemInstance item, string name);
    parameters:
    - id: item
      type: Microsoft.Build.Execution.ProjectItemInstance
      description: "要提供元数据值的项。"
    - id: name
      type: System.String
      description: "元数据名称。"
    return:
      type: System.String
      description: "返回具有提供的名称的元数据的转义的值上提供的项。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetProperty(String)
  nameWithType: ProjectInstance.GetProperty(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetProperty(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取具有给定名称的属性。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectPropertyInstance GetProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: "要检索的属性的名称。"
    return:
      type: Microsoft.Build.Execution.ProjectPropertyInstance
      description: "返回具有给定名称的属性。 如果不存在属性具有该名称，返回 null。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetPropertyValue(System.String)
  id: GetPropertyValue(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetPropertyValue(String)
  nameWithType: ProjectInstance.GetPropertyValue(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetPropertyValue(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取具有给定名称的属性的值。"
  remarks: "此方法不区分具有空字符串值的属性和没有具有给定名称的属性。"
  syntax:
    content: public string GetPropertyValue (string name);
    parameters:
    - id: name
      type: System.String
      description: "要检索其值的属性的名称。"
    return:
      type: System.String
      description: "返回具有给定名称的属性的值。 如果不存在属性具有该名称，则返回空字符串。 返回的值具有任何转义的字符序列。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetPropertyValue*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GetPropertyValueEscaped(Microsoft.Build.Execution.ProjectPropertyInstance)
  id: GetPropertyValueEscaped(Microsoft.Build.Execution.ProjectPropertyInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GetPropertyValueEscaped(ProjectPropertyInstance)
  nameWithType: ProjectInstance.GetPropertyValueEscaped(ProjectPropertyInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetPropertyValueEscaped(ProjectPropertyInstance)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取所提供的属性的转义的值。"
  syntax:
    content: public static string GetPropertyValueEscaped (Microsoft.Build.Execution.ProjectPropertyInstance property);
    parameters:
    - id: property
      type: Microsoft.Build.Execution.ProjectPropertyInstance
      description: "要对其进行转义的属性。"
    return:
      type: System.String
      description: "返回所提供的属性的转义的值。"
  overload: Microsoft.Build.Execution.ProjectInstance.GetPropertyValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.GlobalProperties
  id: GlobalProperties
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: GlobalProperties
  nameWithType: ProjectInstance.GlobalProperties
  fullName: Microsoft.Build.Execution.ProjectInstance.GlobalProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "如果有的话，请获取此项目，将使用已计算的全局属性的字典。"
  remarks: "Read only collection.  \n  \n Traverses project references.  \n  \n This is the publicly exposed getter, that translates into a read-only dead IDictionary\\<string, string>."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> GlobalProperties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "返回此项目已使用计算的全局属性的字典。"
  overload: Microsoft.Build.Execution.ProjectInstance.GlobalProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.InitialTargets
  id: InitialTargets
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: InitialTargets
  nameWithType: ProjectInstance.InitialTargets
  fullName: Microsoft.Build.Execution.ProjectInstance.InitialTargets
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "对于项目以及所有其导入，深度优先获取初始目标列表。 在任何其他目标之前，会生成这些目标。"
  syntax:
    content: public System.Collections.Generic.List<string> InitialTargets { get; }
    return:
      type: System.Collections.Generic.List{System.String}
      description: "返回的项目和所有其导入，深度优先的初始目标的列表。"
  overload: Microsoft.Build.Execution.ProjectInstance.InitialTargets*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.IsImmutable
  id: IsImmutable
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: IsImmutable
  nameWithType: ProjectInstance.IsImmutable
  fullName: Microsoft.Build.Execution.ProjectInstance.IsImmutable
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取一个标志，指示项目实例不可变。 创建实例时，将永久设置此标志。"
  syntax:
    content: public bool IsImmutable { get; }
    return:
      type: System.Boolean
      description: "返回的标志。"
  overload: Microsoft.Build.Execution.ProjectInstance.IsImmutable*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.ItemDefinitions
  id: ItemDefinitions
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ItemDefinitions
  nameWithType: ProjectInstance.ItemDefinitions
  fullName: Microsoft.Build.Execution.ProjectInstance.ItemDefinitions
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "在项目中，项类型进行键控中获取项定义一个只读的字典。"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Microsoft.Build.Execution.ProjectItemDefinitionInstance> ItemDefinitions { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectItemDefinitionInstance}
      description: "在项目中，项类型进行键控返回项定义一个只读的字典。"
  overload: Microsoft.Build.Execution.ProjectInstance.ItemDefinitions*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Items
  id: Items
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Items
  nameWithType: ProjectInstance.Items
  fullName: Microsoft.Build.Execution.ProjectInstance.Items
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取此项目中的所有项。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Execution.ProjectItemInstance> Items { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Execution.ProjectItemInstance}
      description: "返回此项目中的所有项。"
  overload: Microsoft.Build.Execution.ProjectInstance.Items*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.ItemTypes
  id: ItemTypes
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ItemTypes
  nameWithType: ProjectInstance.ItemTypes
  fullName: Microsoft.Build.Execution.ProjectInstance.ItemTypes
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取此项目中的所有项类型。"
  syntax:
    content: public System.Collections.Generic.ICollection<string> ItemTypes { get; }
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "返回此项目中的所有项类型。"
  overload: Microsoft.Build.Execution.ProjectInstance.ItemTypes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.ProjectFileLocation
  id: ProjectFileLocation
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ProjectFileLocation
  nameWithType: ProjectInstance.ProjectFileLocation
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectFileLocation
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取原始文件本身的位置。 决不会为 null。"
  syntax:
    content: public Microsoft.Build.Construction.ElementLocation ProjectFileLocation { get; }
    return:
      type: Microsoft.Build.Construction.ElementLocation
      description: "返回原始文件的位置。 从不返回 null。"
  overload: Microsoft.Build.Execution.ProjectInstance.ProjectFileLocation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Properties
  id: Properties
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Properties
  nameWithType: ProjectInstance.Properties
  fullName: Microsoft.Build.Execution.ProjectInstance.Properties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "获取此项目中的所有属性。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Execution.ProjectPropertyInstance> Properties { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Execution.ProjectPropertyInstance}
      description: "返回此项目中的所有属性。"
  overload: Microsoft.Build.Execution.ProjectInstance.Properties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.RemoveItem(Microsoft.Build.Execution.ProjectItemInstance)
  id: RemoveItem(Microsoft.Build.Execution.ProjectItemInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: RemoveItem(ProjectItemInstance)
  nameWithType: ProjectInstance.RemoveItem(ProjectItemInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.RemoveItem(ProjectItemInstance)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "如果存在，请从项目中移除的项。 如果它存在，则返回 false 否则，则返回 true。"
  syntax:
    content: public bool RemoveItem (Microsoft.Build.Execution.ProjectItemInstance item);
    parameters:
    - id: item
      type: Microsoft.Build.Execution.ProjectItemInstance
      description: "要删除的项目。"
    return:
      type: System.Boolean
      description: "如果该项已在移除; 之前存在，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.RemoveItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.RemoveProperty(System.String)
  id: RemoveProperty(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: RemoveProperty(String)
  nameWithType: ProjectInstance.RemoveProperty(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.RemoveProperty(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "删除具有给定名称的属性。 如果属性具有值 （可能为空字符串），否则为 false，则返回 true。"
  syntax:
    content: public bool RemoveProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: "要删除的属性名称。"
    return:
      type: System.Boolean
      description: "如果该属性以前在移除; 之前的值 （可能是空字符串），则返回 truefalse 否则为。"
  overload: Microsoft.Build.Execution.ProjectInstance.RemoveProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.SetProperty(System.String,System.String)
  id: SetProperty(System.String,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: SetProperty(String,String)
  nameWithType: ProjectInstance.SetProperty(String,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.SetProperty(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "向项目添加具有指定的名称和值的属性。 将任何属性覆盖具有相同名称已在属性集合。"
  remarks: "我们不需要 ProjectPropertyInstance 若要确保我们还没有已由另一个 ProjectPropertyInstance 使用。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectPropertyInstance SetProperty (string name, string evaluatedValue);
    parameters:
    - id: name
      type: System.String
      description: "要添加的属性的名称。"
    - id: evaluatedValue
      type: System.String
      description: "要添加的属性计算所得的值。"
    return:
      type: Microsoft.Build.Execution.ProjectPropertyInstance
      description: "返回新的属性。"
  overload: Microsoft.Build.Execution.ProjectInstance.SetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.Targets
  id: Targets
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: Targets
  nameWithType: ProjectInstance.Targets
  fullName: Microsoft.Build.Execution.ProjectInstance.Targets
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "此项目中，通过所有目标中获取的枚举。 此集合是只读的。"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Microsoft.Build.Execution.ProjectTargetInstance> Targets { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectTargetInstance}
      description: "通过此项目中的所有目标中返回的枚举。"
  overload: Microsoft.Build.Execution.ProjectInstance.Targets*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.ToolsVersion
  id: ToolsVersion
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ToolsVersion
  nameWithType: ProjectInstance.ToolsVersion
  fullName: Microsoft.Build.Execution.ProjectInstance.ToolsVersion
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "如果有的话，请获取此项目，将使用已计算的工具版本。"
  remarks: "结果不一定是项目标记上的工具版本相同如果任何;它可能已从外部指定，例如与 /tv 交换机。"
  syntax:
    content: public string ToolsVersion { get; }
    return:
      type: System.String
      description: "如果有，则返回此项目，将使用已计算的工具版本。"
  overload: Microsoft.Build.Execution.ProjectInstance.ToolsVersion*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.ToProjectRootElement
  id: ToProjectRootElement
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: ToProjectRootElement()
  nameWithType: ProjectInstance.ToProjectRootElement()
  fullName: Microsoft.Build.Execution.ProjectInstance.ToProjectRootElement()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "此 ProjectInstance 的内容创建 ProjectRootElement。"
  syntax:
    content: public Microsoft.Build.Construction.ProjectRootElement ToProjectRootElement ();
    parameters: []
    return:
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "返回表示此实例 ProjectRootElement。"
  overload: Microsoft.Build.Execution.ProjectInstance.ToProjectRootElement*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Execution.ProjectInstance.UpdateStateFrom(Microsoft.Build.Execution.ProjectInstance)
  id: UpdateStateFrom(Microsoft.Build.Execution.ProjectInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  langs:
  - csharp
  name: UpdateStateFrom(ProjectInstance)
  nameWithType: ProjectInstance.UpdateStateFrom(ProjectInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.UpdateStateFrom(ProjectInstance)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Execution
  summary: "替换的项目状态<> *1>， <> </> *1> 和<xref:Microsoft.Build.Execution.ProjectInstance.Items*>与从指定<xref href=&quot;Microsoft.Build.Execution.ProjectInstance&quot;> </xref>。</xref:Microsoft.Build.Execution.ProjectInstance.Items*>"
  syntax:
    content: public void UpdateStateFrom (Microsoft.Build.Execution.ProjectInstance projectState);
    parameters:
    - id: projectState
      type: Microsoft.Build.Execution.ProjectInstance
      description: "<xref uid=&quot;langword_csharp_ProjectInstance&quot; name=&quot;ProjectInstance&quot; href=&quot;&quot;> </xref>从进行更新。"
  overload: Microsoft.Build.Execution.ProjectInstance.UpdateStateFrom*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectInstance(ProjectRootElement)
  nameWithType: ProjectInstance.ProjectInstance(ProjectRootElement)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(ProjectRootElement)
- uid: Microsoft.Build.Construction.ProjectRootElement
  parent: Microsoft.Build.Construction
  isExternal: false
  name: ProjectRootElement
  nameWithType: ProjectRootElement
  fullName: Microsoft.Build.Construction.ProjectRootElement
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectInstance(String)
  nameWithType: ProjectInstance.ProjectInstance(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectInstance(String,IDictionary<String,String>,String)
  nameWithType: ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String)
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: ProjectInstance.ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.ProjectCollection
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectCollection
  nameWithType: ProjectCollection
  fullName: Microsoft.Build.Evaluation.ProjectCollection
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectInstance(String,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection)
  nameWithType: ProjectInstance.ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection)
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectInstance(String,IDictionary<String,String>,String,String,ProjectCollection)
  nameWithType: ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String,String,ProjectCollection)
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectInstance(String,IDictionary<String,String>,String,String,ProjectCollection)
- uid: Microsoft.Build.Execution.ProjectInstance.AddItem(System.String,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: AddItem(String,String)
  nameWithType: ProjectInstance.AddItem(String,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.AddItem(String,String)
- uid: Microsoft.Build.Execution.ProjectItemInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectItemInstance
  nameWithType: ProjectItemInstance
  fullName: Microsoft.Build.Execution.ProjectItemInstance
- uid: Microsoft.Build.Execution.ProjectInstance.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: ProjectInstance.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Execution.ProjectInstance.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,String>>
  nameWithType: IEnumerable<KeyValuePair<String,String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.Build
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build()
  nameWithType: ProjectInstance.Build()
  fullName: Microsoft.Build.Execution.ProjectInstance.Build()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build(IEnumerable<ILogger>)
  nameWithType: ProjectInstance.Build(IEnumerable<ILogger>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(IEnumerable<ILogger>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ILogger>
  nameWithType: IEnumerable<ILogger>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Framework.ILogger>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Framework.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: ProjectInstance.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ForwardingLoggerRecord>
  nameWithType: IEnumerable<ForwardingLoggerRecord>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Logging.ForwardingLoggerRecord
    name: ForwardingLoggerRecord
    nameWithType: ForwardingLoggerRecord
    fullName: ForwardingLoggerRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build(String,IEnumerable<ILogger>)
  nameWithType: ProjectInstance.Build(String,IEnumerable<ILogger>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String,IEnumerable<ILogger>)
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>)
  nameWithType: ProjectInstance.Build(String[],IEnumerable<ILogger>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String[],IEnumerable<ILogger>)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: ProjectInstance.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>,IDictionary<String,TargetResult>)
  nameWithType: ProjectInstance.Build(String[],IEnumerable<ILogger>,IDictionary<String,TargetResult>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String[],IEnumerable<ILogger>,IDictionary<String,TargetResult>)
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,TargetResult>
  nameWithType: IDictionary<String,TargetResult>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Execution.TargetResult>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Execution.TargetResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Execution.TargetResult
    name: TargetResult
    nameWithType: TargetResult
    fullName: TargetResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: ProjectInstance.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: Microsoft.Build.Execution.ProjectInstance.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord},System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.TargetResult}@)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>,IDictionary<String,TargetResult>)
  nameWithType: ProjectInstance.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>,IDictionary<String,TargetResult>)
  fullName: Microsoft.Build.Execution.ProjectInstance.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>,IDictionary<String,TargetResult>)
- uid: Microsoft.Build.Execution.ProjectInstance.DeepCopy
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: DeepCopy()
  nameWithType: ProjectInstance.DeepCopy()
  fullName: Microsoft.Build.Execution.ProjectInstance.DeepCopy()
- uid: Microsoft.Build.Execution.ProjectInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectInstance
  nameWithType: ProjectInstance
  fullName: Microsoft.Build.Execution.ProjectInstance
- uid: Microsoft.Build.Execution.ProjectInstance.DeepCopy(System.Boolean)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: DeepCopy(Boolean)
  nameWithType: ProjectInstance.DeepCopy(Boolean)
  fullName: Microsoft.Build.Execution.ProjectInstance.DeepCopy(Boolean)
- uid: Microsoft.Build.Execution.ProjectInstance.DefaultTargets
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: DefaultTargets
  nameWithType: ProjectInstance.DefaultTargets
  fullName: Microsoft.Build.Execution.ProjectInstance.DefaultTargets
- uid: System.Collections.Generic.List{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: List<String>
  nameWithType: List<String>
  fullName: System.Collections.Generic.List<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.Directory
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Directory
  nameWithType: ProjectInstance.Directory
  fullName: Microsoft.Build.Execution.ProjectInstance.Directory
- uid: Microsoft.Build.Execution.ProjectInstance.EvaluateCondition(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: EvaluateCondition(String)
  nameWithType: ProjectInstance.EvaluateCondition(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.EvaluateCondition(String)
- uid: Microsoft.Build.Execution.ProjectInstance.ExpandString(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ExpandString(String)
  nameWithType: ProjectInstance.ExpandString(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.ExpandString(String)
- uid: Microsoft.Build.Execution.ProjectInstance.FullPath
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: FullPath
  nameWithType: ProjectInstance.FullPath
  fullName: Microsoft.Build.Execution.ProjectInstance.FullPath
- uid: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped(ProjectItemDefinitionInstance)
  nameWithType: ProjectInstance.GetEvaluatedItemIncludeEscaped(ProjectItemDefinitionInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(ProjectItemDefinitionInstance)
- uid: Microsoft.Build.Execution.ProjectItemDefinitionInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectItemDefinitionInstance
  nameWithType: ProjectItemDefinitionInstance
  fullName: Microsoft.Build.Execution.ProjectItemDefinitionInstance
- uid: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Execution.ProjectItemInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped(ProjectItemInstance)
  nameWithType: ProjectInstance.GetEvaluatedItemIncludeEscaped(ProjectItemInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped(ProjectItemInstance)
- uid: Microsoft.Build.Execution.ProjectInstance.GetItems(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetItems(String)
  nameWithType: ProjectInstance.GetItems(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetItems(String)
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Execution.ProjectItemInstance}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectItemInstance>
  nameWithType: ICollection<ProjectItemInstance>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Execution.ProjectItemInstance>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Execution.ProjectItemInstance>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Execution.ProjectItemInstance
    name: ProjectItemInstance
    nameWithType: ProjectItemInstance
    fullName: ProjectItemInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude(System.String,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetItemsByItemTypeAndEvaluatedInclude(String,String)
  nameWithType: ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude(String,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude(String,String)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Execution.ProjectItemInstance}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ProjectItemInstance>
  nameWithType: IEnumerable<ProjectItemInstance>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Execution.ProjectItemInstance>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Execution.ProjectItemInstance>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Execution.ProjectItemInstance
    name: ProjectItemInstance
    nameWithType: ProjectItemInstance
    fullName: ProjectItemInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectMetadataInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetMetadataValueEscaped(ProjectMetadataInstance)
  nameWithType: ProjectInstance.GetMetadataValueEscaped(ProjectMetadataInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(ProjectMetadataInstance)
- uid: Microsoft.Build.Execution.ProjectMetadataInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectMetadataInstance
  nameWithType: ProjectMetadataInstance
  fullName: Microsoft.Build.Execution.ProjectMetadataInstance
- uid: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemDefinitionInstance,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetMetadataValueEscaped(ProjectItemDefinitionInstance,String)
  nameWithType: ProjectInstance.GetMetadataValueEscaped(ProjectItemDefinitionInstance,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(ProjectItemDefinitionInstance,String)
- uid: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(Microsoft.Build.Execution.ProjectItemInstance,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetMetadataValueEscaped(ProjectItemInstance,String)
  nameWithType: ProjectInstance.GetMetadataValueEscaped(ProjectItemInstance,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped(ProjectItemInstance,String)
- uid: Microsoft.Build.Execution.ProjectInstance.GetProperty(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetProperty(String)
  nameWithType: ProjectInstance.GetProperty(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetProperty(String)
- uid: Microsoft.Build.Execution.ProjectPropertyInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectPropertyInstance
  nameWithType: ProjectPropertyInstance
  fullName: Microsoft.Build.Execution.ProjectPropertyInstance
- uid: Microsoft.Build.Execution.ProjectInstance.GetPropertyValue(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetPropertyValue(String)
  nameWithType: ProjectInstance.GetPropertyValue(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetPropertyValue(String)
- uid: Microsoft.Build.Execution.ProjectInstance.GetPropertyValueEscaped(Microsoft.Build.Execution.ProjectPropertyInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetPropertyValueEscaped(ProjectPropertyInstance)
  nameWithType: ProjectInstance.GetPropertyValueEscaped(ProjectPropertyInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.GetPropertyValueEscaped(ProjectPropertyInstance)
- uid: Microsoft.Build.Execution.ProjectInstance.GlobalProperties
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GlobalProperties
  nameWithType: ProjectInstance.GlobalProperties
  fullName: Microsoft.Build.Execution.ProjectInstance.GlobalProperties
- uid: Microsoft.Build.Execution.ProjectInstance.InitialTargets
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: InitialTargets
  nameWithType: ProjectInstance.InitialTargets
  fullName: Microsoft.Build.Execution.ProjectInstance.InitialTargets
- uid: Microsoft.Build.Execution.ProjectInstance.IsImmutable
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: IsImmutable
  nameWithType: ProjectInstance.IsImmutable
  fullName: Microsoft.Build.Execution.ProjectInstance.IsImmutable
- uid: Microsoft.Build.Execution.ProjectInstance.ItemDefinitions
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ItemDefinitions
  nameWithType: ProjectInstance.ItemDefinitions
  fullName: Microsoft.Build.Execution.ProjectInstance.ItemDefinitions
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectItemDefinitionInstance}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ProjectItemDefinitionInstance>
  nameWithType: IDictionary<String,ProjectItemDefinitionInstance>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Execution.ProjectItemDefinitionInstance>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Execution.ProjectItemDefinitionInstance>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Execution.ProjectItemDefinitionInstance
    name: ProjectItemDefinitionInstance
    nameWithType: ProjectItemDefinitionInstance
    fullName: ProjectItemDefinitionInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.Items
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Items
  nameWithType: ProjectInstance.Items
  fullName: Microsoft.Build.Execution.ProjectInstance.Items
- uid: Microsoft.Build.Execution.ProjectInstance.ItemTypes
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ItemTypes
  nameWithType: ProjectInstance.ItemTypes
  fullName: Microsoft.Build.Execution.ProjectInstance.ItemTypes
- uid: System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.ProjectFileLocation
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectFileLocation
  nameWithType: ProjectInstance.ProjectFileLocation
  fullName: Microsoft.Build.Execution.ProjectInstance.ProjectFileLocation
- uid: Microsoft.Build.Construction.ElementLocation
  parent: Microsoft.Build.Construction
  isExternal: false
  name: ElementLocation
  nameWithType: ElementLocation
  fullName: Microsoft.Build.Construction.ElementLocation
- uid: Microsoft.Build.Execution.ProjectInstance.Properties
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Properties
  nameWithType: ProjectInstance.Properties
  fullName: Microsoft.Build.Execution.ProjectInstance.Properties
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Execution.ProjectPropertyInstance}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectPropertyInstance>
  nameWithType: ICollection<ProjectPropertyInstance>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Execution.ProjectPropertyInstance>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Execution.ProjectPropertyInstance>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Execution.ProjectPropertyInstance
    name: ProjectPropertyInstance
    nameWithType: ProjectPropertyInstance
    fullName: ProjectPropertyInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.RemoveItem(Microsoft.Build.Execution.ProjectItemInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: RemoveItem(ProjectItemInstance)
  nameWithType: ProjectInstance.RemoveItem(ProjectItemInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.RemoveItem(ProjectItemInstance)
- uid: Microsoft.Build.Execution.ProjectInstance.RemoveProperty(System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: RemoveProperty(String)
  nameWithType: ProjectInstance.RemoveProperty(String)
  fullName: Microsoft.Build.Execution.ProjectInstance.RemoveProperty(String)
- uid: Microsoft.Build.Execution.ProjectInstance.SetProperty(System.String,System.String)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: SetProperty(String,String)
  nameWithType: ProjectInstance.SetProperty(String,String)
  fullName: Microsoft.Build.Execution.ProjectInstance.SetProperty(String,String)
- uid: Microsoft.Build.Execution.ProjectInstance.Targets
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Targets
  nameWithType: ProjectInstance.Targets
  fullName: Microsoft.Build.Execution.ProjectInstance.Targets
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectTargetInstance}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ProjectTargetInstance>
  nameWithType: IDictionary<String,ProjectTargetInstance>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Execution.ProjectTargetInstance>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Execution.ProjectTargetInstance>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Execution.ProjectTargetInstance
    name: ProjectTargetInstance
    nameWithType: ProjectTargetInstance
    fullName: ProjectTargetInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Execution.ProjectInstance.ToolsVersion
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ToolsVersion
  nameWithType: ProjectInstance.ToolsVersion
  fullName: Microsoft.Build.Execution.ProjectInstance.ToolsVersion
- uid: Microsoft.Build.Execution.ProjectInstance.ToProjectRootElement
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ToProjectRootElement()
  nameWithType: ProjectInstance.ToProjectRootElement()
  fullName: Microsoft.Build.Execution.ProjectInstance.ToProjectRootElement()
- uid: Microsoft.Build.Execution.ProjectInstance.UpdateStateFrom(Microsoft.Build.Execution.ProjectInstance)
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: UpdateStateFrom(ProjectInstance)
  nameWithType: ProjectInstance.UpdateStateFrom(ProjectInstance)
  fullName: Microsoft.Build.Execution.ProjectInstance.UpdateStateFrom(ProjectInstance)
- uid: Microsoft.Build.Execution.ProjectInstance.#ctor*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectInstance
  nameWithType: ProjectInstance.ProjectInstance
- uid: Microsoft.Build.Execution.ProjectInstance.AddItem*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: AddItem
  nameWithType: ProjectInstance.AddItem
- uid: Microsoft.Build.Execution.ProjectInstance.Build*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Build
  nameWithType: ProjectInstance.Build
- uid: Microsoft.Build.Execution.ProjectInstance.DeepCopy*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: DeepCopy
  nameWithType: ProjectInstance.DeepCopy
- uid: Microsoft.Build.Execution.ProjectInstance.DefaultTargets*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: DefaultTargets
  nameWithType: ProjectInstance.DefaultTargets
- uid: Microsoft.Build.Execution.ProjectInstance.Directory*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Directory
  nameWithType: ProjectInstance.Directory
- uid: Microsoft.Build.Execution.ProjectInstance.EvaluateCondition*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: EvaluateCondition
  nameWithType: ProjectInstance.EvaluateCondition
- uid: Microsoft.Build.Execution.ProjectInstance.ExpandString*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ExpandString
  nameWithType: ProjectInstance.ExpandString
- uid: Microsoft.Build.Execution.ProjectInstance.FullPath*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: FullPath
  nameWithType: ProjectInstance.FullPath
- uid: Microsoft.Build.Execution.ProjectInstance.GetEvaluatedItemIncludeEscaped*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped
  nameWithType: ProjectInstance.GetEvaluatedItemIncludeEscaped
- uid: Microsoft.Build.Execution.ProjectInstance.GetItems*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetItems
  nameWithType: ProjectInstance.GetItems
- uid: Microsoft.Build.Execution.ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetItemsByItemTypeAndEvaluatedInclude
  nameWithType: ProjectInstance.GetItemsByItemTypeAndEvaluatedInclude
- uid: Microsoft.Build.Execution.ProjectInstance.GetMetadataValueEscaped*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetMetadataValueEscaped
  nameWithType: ProjectInstance.GetMetadataValueEscaped
- uid: Microsoft.Build.Execution.ProjectInstance.GetProperty*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetProperty
  nameWithType: ProjectInstance.GetProperty
- uid: Microsoft.Build.Execution.ProjectInstance.GetPropertyValue*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetPropertyValue
  nameWithType: ProjectInstance.GetPropertyValue
- uid: Microsoft.Build.Execution.ProjectInstance.GetPropertyValueEscaped*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GetPropertyValueEscaped
  nameWithType: ProjectInstance.GetPropertyValueEscaped
- uid: Microsoft.Build.Execution.ProjectInstance.GlobalProperties*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: GlobalProperties
  nameWithType: ProjectInstance.GlobalProperties
- uid: Microsoft.Build.Execution.ProjectInstance.InitialTargets*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: InitialTargets
  nameWithType: ProjectInstance.InitialTargets
- uid: Microsoft.Build.Execution.ProjectInstance.IsImmutable*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: IsImmutable
  nameWithType: ProjectInstance.IsImmutable
- uid: Microsoft.Build.Execution.ProjectInstance.ItemDefinitions*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ItemDefinitions
  nameWithType: ProjectInstance.ItemDefinitions
- uid: Microsoft.Build.Execution.ProjectInstance.Items*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Items
  nameWithType: ProjectInstance.Items
- uid: Microsoft.Build.Execution.ProjectInstance.ItemTypes*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ItemTypes
  nameWithType: ProjectInstance.ItemTypes
- uid: Microsoft.Build.Execution.ProjectInstance.ProjectFileLocation*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ProjectFileLocation
  nameWithType: ProjectInstance.ProjectFileLocation
- uid: Microsoft.Build.Execution.ProjectInstance.Properties*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Properties
  nameWithType: ProjectInstance.Properties
- uid: Microsoft.Build.Execution.ProjectInstance.RemoveItem*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: RemoveItem
  nameWithType: ProjectInstance.RemoveItem
- uid: Microsoft.Build.Execution.ProjectInstance.RemoveProperty*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: RemoveProperty
  nameWithType: ProjectInstance.RemoveProperty
- uid: Microsoft.Build.Execution.ProjectInstance.SetProperty*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: SetProperty
  nameWithType: ProjectInstance.SetProperty
- uid: Microsoft.Build.Execution.ProjectInstance.Targets*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: Targets
  nameWithType: ProjectInstance.Targets
- uid: Microsoft.Build.Execution.ProjectInstance.ToolsVersion*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ToolsVersion
  nameWithType: ProjectInstance.ToolsVersion
- uid: Microsoft.Build.Execution.ProjectInstance.ToProjectRootElement*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: ToProjectRootElement
  nameWithType: ProjectInstance.ToProjectRootElement
- uid: Microsoft.Build.Execution.ProjectInstance.UpdateStateFrom*
  parent: Microsoft.Build.Execution.ProjectInstance
  isExternal: false
  name: UpdateStateFrom
  nameWithType: ProjectInstance.UpdateStateFrom
