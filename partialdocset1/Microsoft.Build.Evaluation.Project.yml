### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Evaluation.Project
  id: Project
  children:
  - Microsoft.Build.Evaluation.Project.#ctor
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  - Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  - Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  - Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  - Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  - Microsoft.Build.Evaluation.Project.Build
  - Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  - Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String)
  - Microsoft.Build.Evaluation.Project.Build(System.String[])
  - Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  - Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  - Microsoft.Build.Evaluation.Project.ConditionedProperties
  - Microsoft.Build.Evaluation.Project.CreateProjectInstance
  - Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  - Microsoft.Build.Evaluation.Project.DirectoryPath
  - Microsoft.Build.Evaluation.Project.DisableMarkDirty
  - Microsoft.Build.Evaluation.Project.EvaluationCounter
  - Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  - Microsoft.Build.Evaluation.Project.FullPath
  - Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  - Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  - Microsoft.Build.Evaluation.Project.GetItems(System.String)
  - Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  - Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  - Microsoft.Build.Evaluation.Project.GetLogicalProject
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  - Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  - Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  - Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  - Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  - Microsoft.Build.Evaluation.Project.GlobalProperties
  - Microsoft.Build.Evaluation.Project.Imports
  - Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  - Microsoft.Build.Evaluation.Project.IsBuildEnabled
  - Microsoft.Build.Evaluation.Project.IsDirty
  - Microsoft.Build.Evaluation.Project.ItemDefinitions
  - Microsoft.Build.Evaluation.Project.Items
  - Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  - Microsoft.Build.Evaluation.Project.ItemTypes
  - Microsoft.Build.Evaluation.Project.MarkDirty
  - Microsoft.Build.Evaluation.Project.ProjectCollection
  - Microsoft.Build.Evaluation.Project.ProjectFileLocation
  - Microsoft.Build.Evaluation.Project.Properties
  - Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  - Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  - Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  - Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  - Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  - Microsoft.Build.Evaluation.Project.Save
  - Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  - Microsoft.Build.Evaluation.Project.Save(System.String)
  - Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  - Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  - Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  - Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  - Microsoft.Build.Evaluation.Project.SkipEvaluation
  - Microsoft.Build.Evaluation.Project.SubToolsetVersion
  - Microsoft.Build.Evaluation.Project.Targets
  - Microsoft.Build.Evaluation.Project.ToolsVersion
  - Microsoft.Build.Evaluation.Project.Xml
  langs:
  - csharp
  name: Project
  nameWithType: Project
  fullName: Microsoft.Build.Evaluation.Project
  type: Class
  summary: "表示具有设计时语义的项目。 此类可以加载项目文件、 编辑项的属性和生成项目。"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{FullPath} EffectiveToolsVersion={ToolsVersion} #GlobalProperties={data.globalProperties.Count} #Properties={data.Properties.Count} #ItemTypes={data.ItemTypes.Count} #ItemDefinitions={data.ItemDefinitions.Count} #Items={data.Items.Count} #Targets={data.Targets.Count}")]

      public class Project
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor
  id: '#ctor'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project()
  nameWithType: Project.Project()
  fullName: Microsoft.Build.Evaluation.Project.Project()
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个空的项目使用的全局项目集合的全局属性和默认的工具版本。"
  remarks: "此项目将添加到全局项目集合，当它被提供的完整路径给源项目文件中，通常通过保存该项目。"
  syntax:
    content: public Project ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement)
  nameWithType: Project.Project(ProjectRootElement)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个空的项目，并对其使用给定的项目根和全局项目集合全局属性和默认的工具版本进行计算。"
  remarks: "此项目或给定的项目根提供源项目文件的完整路径时，此项目将添加到全局项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "要用于评估的 ProjectRootElement。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectCollection)
  nameWithType: Project.Project(ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个空的项目使用给定的项目集合的全局属性和默认的工具版本。"
  remarks: "此项目将添加到给定的项目集合，当它被提供的完整路径给源项目文件中，通常通过保存该项目。"
  syntax:
    content: public Project (Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "新项目将添加到项目集合。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String)
  nameWithType: Project.Project(String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并从给定的源项目文件以及全局项目集合的全局属性和默认工具版本对其进行计算。"
  remarks: "项目将添加到全局项目集合。       如果在计算此源项目文件的项目集合中已一个项目，将引发 InvalidOperationException。 可能会引发与 IO 相关的异常。"
  syntax:
    content: public Project (string projectFile);
    parameters:
    - id: projectFile
      type: System.String
      description: "要计算的源项目文件。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions:
  - type: Microsoft.Build.Exceptions.InvalidProjectFileException
    commentId: T:Microsoft.Build.Exceptions.InvalidProjectFileException
    description: "如果评估失败。"
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  id: '#ctor(System.Xml.XmlReader)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader)
  nameWithType: Project.Project(XmlReader)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并从给定的 XML 读取器读取的源代码的计算结果。 使用全局项目集合的全局属性和默认的工具版本计算源代码。"
  remarks: "此项目将添加到全局项目集合，当它被提供的完整路径给源项目文件中，通常通过保存该项目。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "从中读取项目源代码的 Xml 读取器。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个空的项目并对其使用给定的项目根进行计算以及与给定的全局属性和给定的工具版本。"
  remarks: "此项目或给定的项目根提供源项目文件的完整路径时，此项目将添加到全局项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "要使用进行评估的项目根。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个空的项目，则还进行评估与给定的项目集合和给定的全局属性和给定的工具版本。"
  remarks: "当它被提供的完整路径给源项目文件中，通常通过保存该项目，项目将添加到指定的项目集合。"
  syntax:
    content: public Project (System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "用于计算项目的工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目集合的新项目将添加到。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String)
  nameWithType: Project.Project(String,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并从给定的源项目文件以及给定的全局属性和给定的工具版本对其进行计算。"
  remarks: "项目将添加到全局项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。 可能会引发与 IO 相关的异常。"
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: projectFile
      type: System.String
      description: "源项目文件，要进行求值的路径。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并从给定的 XML 读取器读取的源代码的计算结果。 源代码是使用给定的全局属性计算和给定的工具版本。"
  remarks: "此项目将添加到全局项目集合，当它被提供的完整路径给源项目文件中，通常通过保存该项目。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "从中读取项目源代码的 Xml 读取器。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并对其使用给定的项目根进行计算以及与给定的全局属性和给定的工具版本。"
  remarks: "此项目或给定的项目根提供源项目文件的完整路径时，此项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "要使用进行评估的项目根。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并从给定的源项目文件以及给定的全局属性和给定的工具版本对其进行计算。"
  remarks: "项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。 可能会引发与 IO 相关的异常。"
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: projectFile
      type: System.String
      description: "源项目文件，要进行求值的路径。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "全局属性。 可能为 null。"
    - id: toolsVersion
      type: System.String
      description: "工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。 可能不为空。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并从给定的 XML 读取器读取的源代码的计算结果。 源代码是使用给定的全局属性计算和给定的工具版本。"
  remarks: "此项目或给定的项目根提供源项目文件的完整路径时，此项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "从中读取项目源代码的 Xml 读取器。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。 可能不为空。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并对其使用给定的项目根进行计算将使用给定的全局属性，给定的工具版本，并提供负载设置。"
  remarks: "此项目或给定的项目根提供源项目文件的完整路径时，此项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "要使用进行评估的项目根。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。 可能不为空。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "要用于评估负载设置。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并对其进行计算，利用给定的源项目文件和给定的全局属性，给定的工具版本和给定的加载设置。"
  remarks: "项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。 可能会引发与 IO 相关的异常。"
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: projectFile
      type: System.String
      description: "源项目文件，要进行求值的路径。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。 可能不为空。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "要用于评估负载设置。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并从给定的 XML 读取器读取的源代码的计算结果。 源代码是使用给定的全局属性计算和给定的工具版本。"
  remarks: "此项目或给定的项目根提供源项目文件的完整路径时，此项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "从中读取项目源代码的 Xml 读取器。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。 可能不为空。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "要用于评估负载设置。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目和对其使用给定的项目根进行计算和使用给定的全局属性、 工具和子工具集版本中，项目集合，并加载设置。"
  remarks: "此项目或给定的项目根提供源项目文件的完整路径时，此项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (Microsoft.Build.Construction.ProjectRootElement xml, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xml
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "要使用进行评估的项目根。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
    - id: subToolsetVersion
      type: System.String
      description: "要使用进行评估的子工具集版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。 可能不为空。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "要用于评估负载设置。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并对其进行计算，利用给定的源项目文件和给定的全局属性、 工具和子工具集版本、 项目集合和加载设置。"
  remarks: "项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。 可能会引发与 IO 相关的异常。"
  syntax:
    content: public Project (string projectFile, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: projectFile
      type: System.String
      description: "源项目文件，要进行求值的路径。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "工具版本。 可能为 null。"
    - id: subToolsetVersion
      type: System.String
      description: "子工具集版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。 可能不为空。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "要用于评估负载设置。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  id: '#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)'
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  type: Constructor
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "构造一个项目并从给定的 XML 读取器读取的源代码的计算结果。 使用给定的全局属性、 工具和子工具集版本、 项目集合和负载设置来计算源代码。"
  remarks: "此项目或给定的项目根提供源项目文件的完整路径时，此项目将添加到给定的项目集合。       如果评估失败，将引发 InvalidProjectFileException。 如果已存在一个等效的项目将引发 InvalidOperationException 加载项目集合中。"
  syntax:
    content: public Project (System.Xml.XmlReader xmlReader, System.Collections.Generic.IDictionary<string,string> globalProperties, string toolsVersion, string subToolsetVersion, Microsoft.Build.Evaluation.ProjectCollection projectCollection, Microsoft.Build.Evaluation.ProjectLoadSettings loadSettings);
    parameters:
    - id: xmlReader
      type: System.Xml.XmlReader
      description: "从中读取项目源代码的 Xml 读取器。"
    - id: globalProperties
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "要计算的全局属性。 可能为 null，这种情况下，将使用包含项目集合的全局属性。"
    - id: toolsVersion
      type: System.String
      description: "要计算的工具版本。 可能为 null。"
    - id: subToolsetVersion
      type: System.String
      description: "要使用进行评估的子工具集版本。 可能为 null。"
    - id: projectCollection
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "项目的项目集合添加到。 可能不为空。"
    - id: loadSettings
      type: Microsoft.Build.Evaluation.ProjectLoadSettings
      description: "要用于评估负载设置。"
  overload: Microsoft.Build.Evaluation.Project.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  id: AddItem(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItem(String,String)
  nameWithType: Project.AddItem(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将具有任何元数据的项添加到项目。"
  remarks: "可以在以后添加任何元数据。 如果已的通配符表达式包括新的项，则不会修改项目源。       评估将尽最大努力上的发生。 在新项目之后对项目源中定义的项可能用于评估。 评估仅此项目。 不会影响其他可能依赖于它的项。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItem (string itemType, string unevaluatedInclude);
    parameters:
    - id: itemType
      type: System.String
      description: "所添加项的项类型。"
    - id: unevaluatedInclude
      type: System.String
      description: "包含要添加的项的属性。"
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "返回添加的项。"
  overload: Microsoft.Build.Evaluation.Project.AddItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将具有给定元数据的项添加到项目。"
  remarks: "元数据可能为 null，表示没有元数据。       评估将尽最大努力上的发生。 在新项目之后对项目源中定义的项可能用于评估。 评估仅此项目。 不会影响其他可能依赖于它的项。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItem (string itemType, string unevaluatedInclude, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,string>> metadata);
    parameters:
    - id: itemType
      type: System.String
      description: "所添加项的项类型。"
    - id: unevaluatedInclude
      type: System.String
      description: "包含要添加的项的属性。"
    - id: metadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: "所添加项的元数据。"
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "返回添加的项。"
  overload: Microsoft.Build.Evaluation.Project.AddItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  id: AddItemFast(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItemFast(String,String)
  nameWithType: Project.AddItemFast(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将具有任何元数据的项添加到项目。  不会尝试看到现有通配符是否已匹配新的项，除非它是项组中的第一个项。  不会尝试找到附近相似的项目的新项。"
  remarks: "将该项追加到第一个项组，其中不能有条件，但没有子级或其第一个子级是相同类型的项。       最大程度地计算结果:-与所有项将展开。 可能使用新的项下面的 XML 中定义的项，即使它们不是在实际计算。       评估仅此项目。 不会影响其他可能依赖于它的项。       这是一种便于理解它未必会保留完全自我一致的状态中的项目之前重新评估。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItemFast (string itemType, string unevaluatedInclude);
    parameters:
    - id: itemType
      type: System.String
      description: "要添加的项类型。"
    - id: unevaluatedInclude
      type: System.String
      description: "要添加到项而言未计算的 Include 特性。"
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "返回添加的项目项的列表。"
  overload: Microsoft.Build.Evaluation.Project.AddItemFast*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  id: AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将某个项与其元数据添加到项目。 元数据可能为 null，指示没有元数据。 不会尝试看到现有通配符是否已匹配新的项，除非它是项组中的第一个项。 不会尝试找到附近相似的项目的新项。"
  remarks: "将该项追加到第一个项组，其中不能有条件，但没有子级或其第一个子级是相同类型的项。       最大程度地计算结果:-与所有项将展开。 可能使用新的项下面的 XML 中定义的项，即使它们不是在实际计算。       评估仅此项目。 其他可能依赖于它的项不受影响。       这是一种便于理解它未必会保留完全自我一致的状态中的项目之前重新评估。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem> AddItemFast (string itemType, string unevaluatedInclude, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,string>> metadata);
    parameters:
    - id: itemType
      type: System.String
      description: "要添加的项类型。"
    - id: unevaluatedInclude
      type: System.String
      description: "要添加到项而言未计算的 Include 特性。"
    - id: metadata
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
      description: "要添加的元数据。"
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
      description: "返回添加的项目项的列表。"
  overload: Microsoft.Build.Evaluation.Project.AddItemFast*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  id: AllEvaluatedItemDefinitionMetadata
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取在评估过程中遇到的所有项定义元数据。"
  remarks: "项元数据读取的第二个计算传递过程中。 不同于 ItemDefinitions 属性返回的元数据，此元数据已经过排序，并包括随后具有相同名称和项类型中重写任何元数据。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectMetadata> AllEvaluatedItemDefinitionMetadata { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectMetadata}
      description: "返回计算过程中遇到的所有项定义元数据。 这不包括其条件计算结果不为 true，任何元素，也不自上次评估以来添加的任何项定义元数据。"
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  id: AllEvaluatedItems
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取在评估过程中遇到的所有项的枚举器。 这些读取的第三个计算传递过程。"
  remarks: "与这些项属性返回的项目，不同这些相对于进行排序计算，而不仅仅是相对于相同的项类型的项排序过程中遇到的所有其他项。       在某些应用程序，此完成相互排序非常重要和这样主机可以使用此属性。       枚举不包括其条件计算结果不为 true，任何元素，也不包括自上次评估以来添加的任何项。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> AllEvaluatedItems { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "返回一个枚举器在评估过程中遇到的所有项。 这些读取的第三个计算传递过程。"
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  id: AllEvaluatedProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取在评估过程中遇到的所有属性。"
  remarks: "在第一次计算传递期间读取这些属性。 不同于属性属性返回的属性，这些排序，并包括随后中被重写一个同名的任何属性。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty> AllEvaluatedProperties { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
      description: "返回计算过程中遇到的所有属性。 这不包括任何属性的条件计算结果不为 true，也不自上次评估以来添加的任何属性。"
  overload: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build
  id: Build
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build()
  nameWithType: Project.Build()
  fullName: Microsoft.Build.Evaluation.Project.Build()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，使用默认目标。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build ();
    parameters: []
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  id: Build(Microsoft.Build.Framework.ILogger)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(ILogger)
  nameWithType: Project.Build(ILogger)
  fullName: Microsoft.Build.Evaluation.Project.Build(ILogger)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，使用默认目标和给定的记录器。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (Microsoft.Build.Framework.ILogger logger);
    parameters:
    - id: logger
      type: Microsoft.Build.Framework.ILogger
      description: "要在生成期间使用的记录器。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(IEnumerable<ILogger>)
  nameWithType: Project.Build(IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，使用默认目标和给定的记录器。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "针对要在生成期间使用的所有记录器的枚举器。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String)
  id: Build(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String)
  nameWithType: Project.Build(String)
  fullName: Microsoft.Build.Evaluation.Project.Build(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，生成给定的目标。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (string target);
    parameters:
    - id: target
      type: System.String
      description: "要生成的目标。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[])
  id: Build(System.String[])
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[])
  nameWithType: Project.Build(String[])
  fullName: Microsoft.Build.Evaluation.Project.Build(String[])
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，生成给定的目标。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (string[] targets);
    parameters:
    - id: targets
      type: System.String[]
      description: "要生成的目标的数组。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，使用默认目标和给定的记录器，并远程记录器。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要在生成期间使用的记录器。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "要在生成期间使用的远程记录器。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String,IEnumerable<ILogger>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，生成给定的目标和使用给定的记录器。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (string target, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: target
      type: System.String
      description: "要生成的目标。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要在生成期间使用的记录器。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，生成给定的目标和使用给定的记录器。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers);
    parameters:
    - id: targets
      type: System.String[]
      description: "要生成的目标。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要在生成期间使用的记录器。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，生成给定的目标和使用给定的记录器和远程记录器。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (string target, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: target
      type: System.String
      description: "要生成的目标。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要在生成期间使用的记录器。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "要在生成期间使用的远程记录器。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  id: Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "生成此项目，生成给定的目标并使用给定的记录器和远程记录器。"
  remarks: "若要设置或获取虚拟项以进行生成，显式克隆项目实例，并生成它。 此方法不会修改项目对象。"
  syntax:
    content: public bool Build (string[] targets, System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger> loggers, System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord> remoteLoggers);
    parameters:
    - id: targets
      type: System.String[]
      description: "要生成的目标。"
    - id: loggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
      description: "要在生成期间使用的记录器。"
    - id: remoteLoggers
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
      description: "要在生成期间使用的远程记录器。"
    return:
      type: System.Boolean
      description: "如果成功，则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.Build*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties
  id: ConditionedProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
  fullName: Microsoft.Build.Evaluation.Project.ConditionedProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取用于评估找到有关属性、 属性组、 导入的条件的属性的可能的属性值的集合和时间的。"
  remarks: 'For example, if the following conditions existed on properties in a project: Condition="''$(Configuration)&#124;$(Platform)'' == ''Debug&#124;x86''" Condition="''$(Configuration)'' == ''Release''" the table would be populated with { "Configuration", { "Debug", "Release" }} { "Platform", { "x86" }} This collection is used by Visual Studio to determine the configurations defined in the project'
  syntax:
    content: public System.Collections.Generic.IDictionary<string,System.Collections.Generic.List<string>> ConditionedProperties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
      description: "返回用于评估找到有关属性、 属性组、 导入的条件的属性的可能的属性值的集合和时间的。 该集合是采用规范格式。 条目的名称是要进行求值的属性的名称和值是可能的属性值的列表。"
  overload: Microsoft.Build.Evaluation.Project.ConditionedProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance
  id: CreateProjectInstance
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: CreateProjectInstance()
  nameWithType: Project.CreateProjectInstance()
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "创建一个项目实例基于此项目，但完全断开。"
  remarks: "可以使用为独立生成。 如果有必要，以便原始项目标记为未修改，将创建该实例，先计算原始的项目。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance ();
    parameters: []
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "返回项目实例。"
  overload: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  id: CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: CreateProjectInstance(ProjectInstanceSettings)
  nameWithType: Project.CreateProjectInstance(ProjectInstanceSettings)
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance(ProjectInstanceSettings)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "创建一个项目实例基于此项目，但完全断开。"
  remarks: "可以使用为独立生成。 如果有必要，以便原始项目标记为未修改，将创建该实例，先计算原始的项目。"
  syntax:
    content: public Microsoft.Build.Execution.ProjectInstance CreateProjectInstance (Microsoft.Build.Execution.ProjectInstanceSettings settings);
    parameters:
    - id: settings
      type: Microsoft.Build.Execution.ProjectInstanceSettings
      description: "确定是否创建的项目实例是不可变，以及它是否包含查找表以提高性能。"
    return:
      type: Microsoft.Build.Execution.ProjectInstance
      description: "返回项目实例。"
  overload: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath
  id: DirectoryPath
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
  fullName: Microsoft.Build.Evaluation.Project.DirectoryPath
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取此项目的根目录。"
  syntax:
    content: public string DirectoryPath { get; }
    return:
      type: System.String
      description: "返回此项目的根目录。 根目录从不会是 null;内存中项目在项目加载时使用的当前目录。"
  overload: Microsoft.Build.Evaluation.Project.DirectoryPath*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  id: DisableMarkDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
  fullName: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取或设置一个标志确定是否<xref:Microsoft.Build.Evaluation.Project.MarkDirty*>暂时禁用。</xref:Microsoft.Build.Evaluation.Project.MarkDirty*> 这样，例如，要不获取标记为已更新的重新评估因此项目设置的全局属性。"
  syntax:
    content: public bool DisableMarkDirty { get; set; }
    return:
      type: System.Boolean
      description: "返回一个标志确定是否<xref uid=&quot;langword_csharp_MarkDirty&quot; name=&quot;MarkDirty&quot; href=&quot;&quot;></xref>暂时禁用。"
  overload: Microsoft.Build.Evaluation.Project.DisableMarkDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter
  id: EvaluationCounter
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
  fullName: Microsoft.Build.Evaluation.Project.EvaluationCounter
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取一个数字，每次重新计算该项目时即会递增。"
  remarks: "此值应与以前的值以确定是否重新计算项目进行比较。 不应该用于确定该项目已重新评估，因为它可被多个为给定的重新评估递增的次数。"
  syntax:
    content: public int EvaluationCounter { get; }
    return:
      type: System.Int32
      description: "返回递增的值。"
  overload: Microsoft.Build.Evaluation.Project.EvaluationCounter*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  id: ExpandString(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ExpandString(String)
  nameWithType: Project.ExpandString(String)
  fullName: Microsoft.Build.Evaluation.Project.ExpandString(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "通过展开项和属性计算给定的字符串。 就像在项目文件的末尾找到它的计算的字符串。"
  remarks: "足够最大努力评估时，可以使用此方法。"
  syntax:
    content: public string ExpandString (string unexpandedValue);
    parameters:
    - id: unexpandedValue
      type: System.String
      description: "要计算的字符串。"
    return:
      type: System.String
      description: "返回计算的字符串。"
  overload: Microsoft.Build.Evaluation.Project.ExpandString*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.FullPath
  id: FullPath
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: FullPath
  nameWithType: Project.FullPath
  fullName: Microsoft.Build.Evaluation.Project.FullPath
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取或设置项目源文件的完整路径。"
  remarks: "在项目集合中的项目上设置此属性重命名该项目。"
  syntax:
    content: public string FullPath { get; set; }
    return:
      type: System.String
      description: "返回到项目源代码文件的完整路径。 如果未从磁盘加载项目，则返回空字符串。"
  overload: Microsoft.Build.Evaluation.Project.FullPath*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  id: GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetEvaluatedItemIncludeEscaped(ProjectItem)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取计算，转义所提供的项的 Include 特性的值。"
  syntax:
    content: public static string GetEvaluatedItemIncludeEscaped (Microsoft.Build.Evaluation.ProjectItem item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "要计算和转义的项。"
    return:
      type: System.String
      description: "返回计算转义所提供的项的 Include 特性的值。"
  overload: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  id: GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取转义的计算提供的项定义的 Include 特性的值。"
  syntax:
    content: public static string GetEvaluatedItemIncludeEscaped (Microsoft.Build.Evaluation.ProjectItemDefinition item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItemDefinition
      description: "要进行计算并转义项定义。"
    return:
      type: System.String
      description: "返回的 Include 特性的值。"
  overload: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItems(System.String)
  id: GetItems(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItems(String)
  nameWithType: Project.GetItems(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItems(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取给定的项类型的项目中的所有项。 如果没有任何故障，则返回空列表。 使用 AddItem 或 RemoveItem 修改此项目中的项。"
  remarks: "使用 AddItem 或 RemoveItem 修改此项目中的项。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItems (string itemType);
    parameters:
    - id: itemType
      type: System.String
      description: "要检索的项类型。"
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "返回给定的项类型的项目中的所有项。 如果没有具有给定的项名称的项，则返回空列表。"
  overload: Microsoft.Build.Evaluation.Project.GetItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  id: GetItemsByEvaluatedInclude(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItemsByEvaluatedInclude(String)
  nameWithType: Project.GetItemsByEvaluatedInclude(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取具有给定计算的 Include 特性的所有项。"
  remarks: "例如，此方法可能返回包含计算的 Include 特性&quot;component.cpp&quot;的所有项。 通常会返回零个或一个项。 但是，可能有多个项具有相同的路径和不同的项类型，或即使使用相同的项类型。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItemsByEvaluatedInclude (string evaluatedInclude);
    parameters:
    - id: evaluatedInclude
      type: System.String
      description: "计算的 Include 特性。"
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "返回具有给定计算的 Include 特性的所有项。"
  overload: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  id: GetItemsIgnoringCondition(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetItemsIgnoringCondition(String)
  nameWithType: Project.GetItemsIgnoringCondition(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: '获取给定类型的项目中的所有项，其条件属性的计算结果为 true。 这是只读的列表︰ 使用 AddItem 或 RemoveItem 来修改此项目中的项。'
  remarks: "这是只读的列表。 使用 AddItem 或 RemoveItem 修改此项目中的项。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> GetItemsIgnoringCondition (string itemType);
    parameters:
    - id: itemType
      type: System.String
      description: "要检索的项类型。"
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "无论其条件属性的计算结果为 true，请在项目中的给定类型中返回所有项。"
  overload: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject
  id: GetLogicalProject
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetLogicalProject()
  nameWithType: Project.GetLogicalProject()
  fullName: Microsoft.Build.Evaluation.Project.GetLogicalProject()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取可枚举的所有元素在&quot;逻辑项目&quot;。 为从单一的结果的 MSBuild 文件中获取而言未计算项目定义的逻辑项目内联的原始的 MSBuild 项目清单文件的所有导入的文本。"
  remarks: "逻辑项目被定义为而言未计算的项目获取包括内联的结果的单个 MSBuild 文件从原始的 MSBuild 项目清单文件的所有导入的文本。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<Microsoft.Build.Construction.ProjectElement> GetLogicalProject ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Construction.ProjectElement}
      description: "&quot;逻辑项目&quot;中的所有元素都返回的枚举器。"
  overload: Microsoft.Build.Evaluation.Project.GetLogicalProject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectMetadata)
  nameWithType: Project.GetMetadataValueEscaped(ProjectMetadata)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectMetadata)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取提供元数据的转义的值。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectMetadata metadatum);
    parameters:
    - id: metadatum
      type: Microsoft.Build.Evaluation.ProjectMetadata
      description: "若要对其进行转义元数据。"
    return:
      type: System.String
      description: "获取提供元数据的转义的值。"
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectItem,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItem,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItem,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取具有所提供的名称的元数据的转义的值上提供的项。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectItem item, string name);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "项元数据是对其进行转义。"
    - id: name
      type: System.String
      description: "要对其进行转义的元数据名称。"
    return:
      type: System.String
      description: "获取具有所提供的名称的元数据的转义的值上提供的项。"
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  id: GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetMetadataValueEscaped(ProjectItemDefinition,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取具有所提供的名称的元数据的转义的值上提供的项定义。"
  syntax:
    content: public static string GetMetadataValueEscaped (Microsoft.Build.Evaluation.ProjectItemDefinition item, string name);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItemDefinition
      description: "项定义其元数据是对其进行转义。"
    - id: name
      type: System.String
      description: "要对其进行转义的元数据名称。"
    return:
      type: System.String
      description: "在提供的项定义返回具有提供的名称的元数据的转义的值。"
  overload: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  id: GetProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetProperty(String)
  nameWithType: Project.GetProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.GetProperty(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取具有指定的名称的项目中的任何属性。"
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectProperty GetProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: "要检索的属性的名称。"
    return:
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "返回具有指定的名称的项目中的任何属性。 如果，存在返回 null 没有该名称的属性。"
  overload: Microsoft.Build.Evaluation.Project.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  id: GetPropertyValue(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetPropertyValue(String)
  nameWithType: Project.GetPropertyValue(String)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValue(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "此项目中获取给定属性的值。"
  remarks: "具有值为空字符串的属性和任何属性根本不能区分此方法。 若要确定是否使用在所有项目中为设置属性，请使用 GetProperty(name)。"
  syntax:
    content: public string GetPropertyValue (string name);
    parameters:
    - id: name
      type: System.String
      description: "检索其值的属性名称。"
    return:
      type: System.String
      description: "返回此项目中的给定属性的值。 如果不存在该名称的任何属性，则返回空字符串。 返回字符串之前，转义序列都被转换。"
  overload: Microsoft.Build.Evaluation.Project.GetPropertyValue*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  id: GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GetPropertyValueEscaped(ProjectProperty)
  nameWithType: Project.GetPropertyValueEscaped(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(ProjectProperty)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取所提供的属性的转义的值。"
  syntax:
    content: public static string GetPropertyValueEscaped (Microsoft.Build.Evaluation.ProjectProperty property);
    parameters:
    - id: property
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "要对其进行转义的属性。"
    return:
      type: System.String
      description: "返回所提供的属性的转义的值。"
  overload: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties
  id: GlobalProperties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
  fullName: Microsoft.Build.Evaluation.Project.GlobalProperties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取用于此项目的求值的全局属性的字典。"
  remarks: "This is the publicly exposed getter, that translates into a read-only dead IDictionary\\<string, string>.  \n  \n In order to easily tell when we're dirtied, setting and removing global properties is done with <xref:Microsoft.Build.Evaluation.Project.SetGlobalProperty%2A> and <xref:Microsoft.Build.Evaluation.Project.RemoveGlobalProperty%2A>."
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> GlobalProperties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "返回的字典的用于此项目的求值的全局属性。"
  overload: Microsoft.Build.Evaluation.Project.GlobalProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Imports
  id: Imports
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Imports
  nameWithType: Project.Imports
  fullName: Microsoft.Build.Evaluation.Project.Imports
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取分配给此项目的评估的所有文件的列表。"
  remarks: "此项目的项目根目录不包括。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport> Imports { get; }
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
      description: "向此项目的评估中返回提供的所有文件的列表。       每个项的名称是导致要导入文件的导入元素。 每个项的值是项目的导入的项目根。 导入其条件被评估为 false 的特性不包含的元素。"
  overload: Microsoft.Build.Evaluation.Project.Imports*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  id: ImportsIncludingDuplicates
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
  fullName: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "如果导入已导入多个时间，请获取重复导入的列表。 但是，仅第一个导入已在计算中使用。"
  syntax:
    content: public System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport> ImportsIncludingDuplicates { get; }
    return:
      type: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
      description: "返回重复导入的列表。"
  overload: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  id: IsBuildEnabled
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
  fullName: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取或设置一个属性，选择是否可以生成的目标和任务的此项目。"
  remarks: "可以出于安全目的使用。 默认情况下，新的项目具有相同的 IsBuildEnabled 设置作为包含它的父项目集合。 当 IsBuildEnabled 为 false 时，此项目上的生成方法失败。"
  syntax:
    content: public bool IsBuildEnabled { get; set; }
    return:
      type: System.Boolean
      description: "如果可以生成的目标和此项目的任务; 则返回 truefalse 否则为。"
  overload: Microsoft.Build.Evaluation.Project.IsBuildEnabled*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.IsDirty
  id: IsDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: IsDirty
  nameWithType: Project.IsDirty
  fullName: Microsoft.Build.Evaluation.Project.IsDirty
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取一个属性，指示此项目是否被修改，因此必须重新计算。"
  remarks: "项目已修改，并且基础项目源代码，包括对的更改导入文件时必须重新计算。 此外将修改项目必须会重新计算，如果项目工具集更改。"
  syntax:
    content: public bool IsDirty { get; }
    return:
      type: System.Boolean
      description: "返回一个属性，该值指示此项目是否已修改，因此必须重新计算。"
  overload: Microsoft.Build.Evaluation.Project.IsDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions
  id: ItemDefinitions
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
  fullName: Microsoft.Build.Evaluation.Project.ItemDefinitions
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "在此项目中的项类型进行键控获取的项定义的字典。"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Microsoft.Build.Evaluation.ProjectItemDefinition> ItemDefinitions { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItemDefinition}
      description: "在此项目中的项类型进行键控返回的字典的项定义。"
  overload: Microsoft.Build.Evaluation.Project.ItemDefinitions*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Items
  id: Items
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Items
  nameWithType: Project.Items
  fullName: Microsoft.Build.Evaluation.Project.Items
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取可枚举的所有项在此项目中的项类型的组排序。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> Items { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "通过在此项目中，排序的项类型的组内的所有项返回的枚举。"
  overload: Microsoft.Build.Evaluation.Project.Items*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  id: ItemsIgnoringCondition
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
  fullName: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取可枚举的所有项在此项目中的项类型的组排序。"
  remarks: "可以用于显示所有项，即使它们不在当前配置中生成的一部分。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem> ItemsIgnoringCondition { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
      description: "通过此项目中，排序的项类型，包括的项的条件计算结果为 false，或包含在其条件的计算结果为 false 的项组的组内的所有项返回的枚举。"
  overload: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ItemTypes
  id: ItemTypes
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ItemTypes
  nameWithType: Project.ItemTypes
  fullName: Microsoft.Build.Evaluation.Project.ItemTypes
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取此项目中的所有项类型的枚举。"
  syntax:
    content: public System.Collections.Generic.ICollection<string> ItemTypes { get; }
    return:
      type: System.Collections.Generic.ICollection{System.String}
      description: "通过此项目中的所有项类型中返回的枚举。 这是一个有序的集合。"
  overload: Microsoft.Build.Evaluation.Project.ItemTypes*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.MarkDirty
  id: MarkDirty
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: MarkDirty()
  nameWithType: Project.MarkDirty()
  fullName: Microsoft.Build.Evaluation.Project.MarkDirty()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将此项目标记为已修改。"
  remarks: "很少需要显式调用此方法，因为自动影响项目的所有编辑将其都标记为已修改。       但是，有时，必须调用此方法。 例如，项目可能具有其条件取决于磁盘存在的文件的导入元素。 如果该文件不存在在评估时，并创建它时评估后，则项目必须显式标记为已修改。       <xref:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary%2A>方法使用此属性来确定是否需要评估。</xref:Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary%2A>"
  syntax:
    content: public void MarkDirty ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.MarkDirty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection
  id: ProjectCollection
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
  fullName: Microsoft.Build.Evaluation.Project.ProjectCollection
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取包含此项目的项目集合。"
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectCollection ProjectCollection { get; }
    return:
      type: Microsoft.Build.Evaluation.ProjectCollection
      description: "返回的项目集合，其中包含此项目，永远不会为 null。"
  overload: Microsoft.Build.Evaluation.Project.ProjectCollection*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  id: ProjectFileLocation
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
  fullName: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "源位置文件本身中没有任何特定的内容。 如果不指定文件名称，这是一个空的位置。 这是具有没有位置合法大小写。"
  syntax:
    content: public Microsoft.Build.Construction.ElementLocation ProjectFileLocation { get; }
    return:
      type: Microsoft.Build.Construction.ElementLocation
      description: "返回原始的文件位置或空位置。"
  overload: Microsoft.Build.Evaluation.Project.ProjectFileLocation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Properties
  id: Properties
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Properties
  nameWithType: Project.Properties
  fullName: Microsoft.Build.Evaluation.Project.Properties
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "此项目中的所有属性获取一个枚举器。 这是一个无序的集合。"
  syntax:
    content: public System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty> Properties { get; }
    return:
      type: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
      description: "返回此项目中的所有属性的枚举器。 由于属性的计算所示，这是一个无序的集合。"
  overload: Microsoft.Build.Evaluation.Project.Properties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  id: ReevaluateIfNecessary
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ReevaluateIfNecessary()
  nameWithType: Project.ReevaluateIfNecessary()
  fullName: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "重新评估要合并的任何更改的项目。"
  remarks: "仅在它标记为已修改，则进行重新计算项目。 重新评估包含对项目源代码所做的所有更改。       如果评估失败，将引发 InvalidProjectFileException。"
  syntax:
    content: public void ReevaluateIfNecessary ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  id: RemoveGlobalProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveGlobalProperty(String)
  nameWithType: Project.RemoveGlobalProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "移除一个全局属性，并将项目标记为已修改。"
  syntax:
    content: public bool RemoveGlobalProperty (string name);
    parameters:
    - id: name
      type: System.String
      description: "要删除的全局属性的名称。"
    return:
      type: System.Boolean
      description: "如果设置全局属性的值，则返回 true。"
  overload: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  id: RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveItem(ProjectItem)
  nameWithType: Project.RemoveItem(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItem(ProjectItem)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "从项目中移除一个项。 要删除的项必须存在于项目中，并且必须不是源自导入的文件。"
  remarks: "如果包含项的项组变为空，则它也将移除。       如果该项源自于通配符或分号分隔的表达式，该表达式是第一次扩展到多个项。       项目已更新，但重新计算之后才会进行任何进一步评估。 例如，如果项删除类型为&quot;i&quot;，&quot;j&quot;从评估&quot;@(i)&quot;重新评估之前不会对其进行修改。"
  syntax:
    content: public bool RemoveItem (Microsoft.Build.Evaluation.ProjectItem item);
    parameters:
    - id: item
      type: Microsoft.Build.Evaluation.ProjectItem
      description: "要删除的项目。"
    return:
      type: System.Boolean
      description: "如果项存在于此计算的项目; 则返回 true否则为 false。 通常此方法返回 true，因为如果请求的项不存在，该方法将引发异常。 如果该项是仅在 ItemsIgnoringCondition 集合中存在，但是，该方法返回 false。"
  overload: Microsoft.Build.Evaluation.Project.RemoveItem*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  id: RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveItems(IEnumerable<ProjectItem>)
  nameWithType: Project.RemoveItems(IEnumerable<ProjectItem>)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItems(IEnumerable<ProjectItem>)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "从项目中移除所有给定的项，除非它们源自于导入的项目中。"
  remarks: "如果某项源自于导入的项目，则只需跳过。"
  syntax:
    content: public void RemoveItems (System.Collections.Generic.IEnumerable<Microsoft.Build.Evaluation.ProjectItem> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem}
      description: "要删除的项。"
  overload: Microsoft.Build.Evaluation.Project.RemoveItems*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  id: RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: RemoveProperty(ProjectProperty)
  nameWithType: Project.RemoveProperty(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.RemoveProperty(ProjectProperty)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "从项目中移除一个属性。 要删除的属性必须存在于项目中，并且必须不是源自导入的文件。"
  remarks: "如果包含属性的属性组变为空，则它也将移除。       项目已更新，但重新计算之后才会进行任何进一步评估。 例如，如果删除了&quot;p&quot;，计算从&quot;$（p）&quot;的&quot;q&quot;才会修改重新评估。"
  syntax:
    content: public bool RemoveProperty (Microsoft.Build.Evaluation.ProjectProperty property);
    parameters:
    - id: property
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "要删除的属性。"
    return:
      type: System.Boolean
      description: "如果属性是此计算的项目; 中存在，则返回 true否则为 false。"
  overload: Microsoft.Build.Evaluation.Project.RemoveProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save
  id: Save
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save()
  nameWithType: Project.Save()
  fullName: Microsoft.Build.Evaluation.Project.Save()
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将项目保存到文件系统中，如果使用默认字符编码的修改。"
  syntax:
    content: public void Save ();
    parameters: []
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  id: Save(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(TextWriter)
  nameWithType: Project.Save(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.Save(TextWriter)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将项目保存到提供的文本编写器，指示修改项目。 使用文本编写器的字符编码，并将标记为未修改的项目。"
  syntax:
    content: public void Save (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "要保存到项目的文本编写器。"
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.String)
  id: Save(System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(String)
  nameWithType: Project.Save(String)
  fullName: Microsoft.Build.Evaluation.Project.Save(String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将项目保存到文件系统中，如果修改或如果项目源代码的路径发生更改，则使用默认字符编码。"
  syntax:
    content: public void Save (string path);
    parameters:
    - id: path
      type: System.String
      description: "对项目源代码路径。"
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  id: Save(System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(Encoding)
  nameWithType: Project.Save(Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(Encoding)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将项目保存到文件系统中，如果使用给定的字符编码的修改。"
  syntax:
    content: public void Save (System.Text.Encoding encoding);
    parameters:
    - id: encoding
      type: System.Text.Encoding
      description: "用于保存项目的字符编码。"
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  id: Save(System.String,System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Save(String,Encoding)
  nameWithType: Project.Save(String,Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(String,Encoding)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将项目保存到文件系统中，如果修改或如果项目源代码的路径发生更改，则使用给定的字符编码。"
  syntax:
    content: public void Save (string path, System.Text.Encoding encoding);
    parameters:
    - id: path
      type: System.String
      description: "对项目源代码路径。"
    - id: encoding
      type: System.Text.Encoding
      description: "用于保存项目的字符编码。"
  overload: Microsoft.Build.Evaluation.Project.Save*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  id: SaveLogicalProject(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SaveLogicalProject(TextWriter)
  nameWithType: Project.SaveLogicalProject(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.SaveLogicalProject(TextWriter)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "将保存的&quot;逻辑&quot;或&quot;预处理过的&quot;项目文件，包括所有导入的文件，就像它们构成了单个文件。"
  syntax:
    content: public void SaveLogicalProject (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "保存项目文件编写器。"
  overload: Microsoft.Build.Evaluation.Project.SaveLogicalProject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  id: SetGlobalProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SetGlobalProperty(String,String)
  nameWithType: Project.SetGlobalProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetGlobalProperty(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "计算项目后，请设置全局属性。 值发生更改，如果项目将被标记为需要重新计算。"
  syntax:
    content: public bool SetGlobalProperty (string name, string escapedValue);
    parameters:
    - id: name
      type: System.String
      description: "要设置的全局属性的名称。"
    - id: escapedValue
      type: System.String
      description: "全局属性的新值。"
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果的值发生更改，否则，返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.Build.Evaluation.Project.SetGlobalProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  id: SetProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SetProperty(String,String)
  nameWithType: Project.SetProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetProperty(String,String)
  type: Method
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "设置或将具有给定名称和值的属性添加到项目。 如果它不是源自在导入的文件，请将属性的值覆盖具有相同的名称。"
  remarks: "如果不没有具有给定名称的任何属性，更新具有给定名称具有本身或其属性组中，任何条件的最后一个的现有属性，除非它来源于导入的文件。       第一个属性组中不带条件，在最后一个现有属性组之后，其他的项目开始时创建属性组如有必要，否则，将新属性添加。       评估将尽最大努力上的发生。 以下新的属性项目源中定义的属性可能用于评估。 计算此属性。 其他可能依赖于它的属性不受影响。"
  syntax:
    content: public Microsoft.Build.Evaluation.ProjectProperty SetProperty (string name, string unevaluatedValue);
    parameters:
    - id: name
      type: System.String
      description: "要设置的属性名称。"
    - id: unevaluatedValue
      type: System.String
      description: "属性的新而言未计算的值。"
    return:
      type: Microsoft.Build.Evaluation.ProjectProperty
      description: "返回的属性。"
  overload: Microsoft.Build.Evaluation.Project.SetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation
  id: SkipEvaluation
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
  fullName: Microsoft.Build.Evaluation.Project.SkipEvaluation
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取或设置一个标志确定是否临时禁用 ReevaluateIfNecessary。 这需要进行大量读取和写入到项目中，主机时很有用，并希望临时牺牲性能的正确性。"
  syntax:
    content: public bool SkipEvaluation { get; set; }
    return:
      type: System.Boolean
      description: "返回一个标志确定是否临时禁用 ReevaluateIfNecessary。"
  overload: Microsoft.Build.Evaluation.Project.SkipEvaluation*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  id: SubToolsetVersion
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
  fullName: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "如果有的话，请获取 SubToolsetVersion 属性的值。 此值已合并在一起的 ToolsVersion 特性，以确定此项目的工具集属性的值。"
  syntax:
    content: public string SubToolsetVersion { get; }
    return:
      type: System.String
      description: "返回 SubToolsetVersion 属性值。 如果该属性不存在，则返回空字符串。"
  overload: Microsoft.Build.Evaluation.Project.SubToolsetVersion*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Targets
  id: Targets
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Targets
  nameWithType: Project.Targets
  fullName: Microsoft.Build.Evaluation.Project.Targets
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取在此项目中，由目标名称键控的所有目标字典。"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,Microsoft.Build.Execution.ProjectTargetInstance> Targets { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectTargetInstance}
      description: "在此项目中，由目标名称键控返回的字典的所有目标。 在此集合中不包括重写的目标。 此字典是只读的。"
  overload: Microsoft.Build.Evaluation.Project.Targets*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion
  id: ToolsVersion
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
  fullName: Microsoft.Build.Evaluation.Project.ToolsVersion
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "如果有的话，请获取此项目，将使用已计算的工具版本。"
  remarks: "设置由构造函数。 这不一定与项目标记上的工具版本相同如果任何;它可能已从外部指定，例如使用命令行上 /tv 开关。 可以从<xref:Microsoft.Build.Evaluation.Project.Xml%2A>.</xref:Microsoft.Build.Evaluation.Project.Xml%2A>获取与项目标记上的实际的工具版本 创建项目后，不能更改的工具版本。"
  syntax:
    content: public string ToolsVersion { get; }
    return:
      type: System.String
      description: "如果有的话，请获取此项目，将使用已计算的工具版本。"
  overload: Microsoft.Build.Evaluation.Project.ToolsVersion*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Evaluation.Project.Xml
  id: Xml
  parent: Microsoft.Build.Evaluation.Project
  langs:
  - csharp
  name: Xml
  nameWithType: Project.Xml
  fullName: Microsoft.Build.Evaluation.Project.Xml
  type: Property
  assemblies:
  - Microsoft.Build
  namespace: Microsoft.Build.Evaluation
  summary: "获取与此项目关联的根项目。 决不会为 null"
  remarks: "没有方法来设置此属性。 如果你有一个新的项目根目录，评估到新项目。"
  syntax:
    content: public Microsoft.Build.Construction.ProjectRootElement Xml { get; }
    return:
      type: Microsoft.Build.Construction.ProjectRootElement
      description: "返回与此项目，决不会为 null 关联的根项目。"
  overload: Microsoft.Build.Evaluation.Project.Xml*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.Build.Exceptions.InvalidProjectFileException
  parent: Microsoft.Build.Exceptions
  isExternal: false
  name: InvalidProjectFileException
  nameWithType: InvalidProjectFileException
  fullName: Microsoft.Build.Exceptions.InvalidProjectFileException
- uid: Microsoft.Build.Evaluation.Project.#ctor
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project()
  nameWithType: Project.Project()
  fullName: Microsoft.Build.Evaluation.Project.Project()
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement)
  nameWithType: Project.Project(ProjectRootElement)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement)
- uid: Microsoft.Build.Construction.ProjectRootElement
  parent: Microsoft.Build.Construction
  isExternal: false
  name: ProjectRootElement
  nameWithType: ProjectRootElement
  fullName: Microsoft.Build.Construction.ProjectRootElement
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectCollection)
  nameWithType: Project.Project(ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectCollection)
- uid: Microsoft.Build.Evaluation.ProjectCollection
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectCollection
  nameWithType: ProjectCollection
  fullName: Microsoft.Build.Evaluation.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String)
  nameWithType: Project.Project(String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader)
  nameWithType: Project.Project(XmlReader)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String)
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String)
  nameWithType: Project.Project(String,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.ProjectLoadSettings
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectLoadSettings
  nameWithType: ProjectLoadSettings
  fullName: Microsoft.Build.Evaluation.ProjectLoadSettings
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(Microsoft.Build.Construction.ProjectRootElement,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(ProjectRootElement,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(String,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.#ctor(System.Xml.XmlReader,System.Collections.Generic.IDictionary{System.String,System.String},System.String,System.String,Microsoft.Build.Evaluation.ProjectCollection,Microsoft.Build.Evaluation.ProjectLoadSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  nameWithType: Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
  fullName: Microsoft.Build.Evaluation.Project.Project(XmlReader,IDictionary<String,String>,String,String,ProjectCollection,ProjectLoadSettings)
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem(String,String)
  nameWithType: Project.AddItem(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String)
- uid: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ProjectItem>
  nameWithType: IList<ProjectItem>
  fullName: System.Collections.Generic.IList<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AddItem(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItem(String,String,IEnumerable<KeyValuePair<String,String>>)
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,String>>
  nameWithType: IEnumerable<KeyValuePair<String,String>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast(String,String)
  nameWithType: Project.AddItemFast(String,String)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String)
- uid: Microsoft.Build.Evaluation.Project.AddItemFast(System.String,System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  nameWithType: Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
  fullName: Microsoft.Build.Evaluation.Project.AddItemFast(String,String,IEnumerable<KeyValuePair<String,String>>)
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectMetadata}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectMetadata>
  nameWithType: ICollection<ProjectMetadata>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectMetadata>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectMetadata>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectMetadata
    name: ProjectMetadata
    nameWithType: ProjectMetadata
    fullName: ProjectMetadata
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedItems
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectItem>
  nameWithType: ICollection<ProjectItem>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
  fullName: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties
- uid: System.Collections.Generic.ICollection{Microsoft.Build.Evaluation.ProjectProperty}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<ProjectProperty>
  nameWithType: ICollection<ProjectProperty>
  fullName: System.Collections.Generic.ICollection<Microsoft.Build.Evaluation.ProjectProperty>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<Microsoft.Build.Evaluation.ProjectProperty>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectProperty
    name: ProjectProperty
    nameWithType: ProjectProperty
    fullName: ProjectProperty
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build()
  nameWithType: Project.Build()
  fullName: Microsoft.Build.Evaluation.Project.Build()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Build.Evaluation.Project.Build(Microsoft.Build.Framework.ILogger)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(ILogger)
  nameWithType: Project.Build(ILogger)
  fullName: Microsoft.Build.Evaluation.Project.Build(ILogger)
- uid: Microsoft.Build.Framework.ILogger
  parent: Microsoft.Build.Framework
  isExternal: false
  name: ILogger
  nameWithType: ILogger
  fullName: Microsoft.Build.Framework.ILogger
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(IEnumerable<ILogger>)
  nameWithType: Project.Build(IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ILogger>
  nameWithType: IEnumerable<ILogger>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Framework.ILogger>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Framework.ILogger>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Framework.ILogger
    name: ILogger
    nameWithType: ILogger
    fullName: ILogger
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String)
  nameWithType: Project.Build(String)
  fullName: Microsoft.Build.Evaluation.Project.Build(String)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[])
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[])
  nameWithType: Project.Build(String[])
  fullName: Microsoft.Build.Evaluation.Project.Build(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.Build.Evaluation.Project.Build(System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ForwardingLoggerRecord>
  nameWithType: IEnumerable<ForwardingLoggerRecord>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Logging.ForwardingLoggerRecord>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Logging.ForwardingLoggerRecord
    name: ForwardingLoggerRecord
    nameWithType: ForwardingLoggerRecord
    fullName: ForwardingLoggerRecord
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String,IEnumerable<ILogger>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String,System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String,IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: Microsoft.Build.Evaluation.Project.Build(System.String[],System.Collections.Generic.IEnumerable{Microsoft.Build.Framework.ILogger},System.Collections.Generic.IEnumerable{Microsoft.Build.Logging.ForwardingLoggerRecord})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  nameWithType: Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
  fullName: Microsoft.Build.Evaluation.Project.Build(String[],IEnumerable<ILogger>,IEnumerable<ForwardingLoggerRecord>)
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
  fullName: Microsoft.Build.Evaluation.Project.ConditionedProperties
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.List{System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,List<String>>
  nameWithType: IDictionary<String,List<String>>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.List<System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Collections.Generic.List<System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance()
  nameWithType: Project.CreateProjectInstance()
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance()
- uid: Microsoft.Build.Execution.ProjectInstance
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectInstance
  nameWithType: ProjectInstance
  fullName: Microsoft.Build.Execution.ProjectInstance
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance(Microsoft.Build.Execution.ProjectInstanceSettings)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance(ProjectInstanceSettings)
  nameWithType: Project.CreateProjectInstance(ProjectInstanceSettings)
  fullName: Microsoft.Build.Evaluation.Project.CreateProjectInstance(ProjectInstanceSettings)
- uid: Microsoft.Build.Execution.ProjectInstanceSettings
  parent: Microsoft.Build.Execution
  isExternal: false
  name: ProjectInstanceSettings
  nameWithType: ProjectInstanceSettings
  fullName: Microsoft.Build.Execution.ProjectInstanceSettings
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
  fullName: Microsoft.Build.Evaluation.Project.DirectoryPath
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
  fullName: Microsoft.Build.Evaluation.Project.DisableMarkDirty
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
  fullName: Microsoft.Build.Evaluation.Project.EvaluationCounter
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Build.Evaluation.Project.ExpandString(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ExpandString(String)
  nameWithType: Project.ExpandString(String)
  fullName: Microsoft.Build.Evaluation.Project.ExpandString(String)
- uid: Microsoft.Build.Evaluation.Project.FullPath
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: FullPath
  nameWithType: Project.FullPath
  fullName: Microsoft.Build.Evaluation.Project.FullPath
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped(ProjectItem)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItem)
- uid: Microsoft.Build.Evaluation.ProjectItem
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectItem
  nameWithType: ProjectItem
  fullName: Microsoft.Build.Evaluation.ProjectItem
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  nameWithType: Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
  fullName: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped(ProjectItemDefinition)
- uid: Microsoft.Build.Evaluation.ProjectItemDefinition
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectItemDefinition
  nameWithType: ProjectItemDefinition
  fullName: Microsoft.Build.Evaluation.ProjectItemDefinition
- uid: Microsoft.Build.Evaluation.Project.GetItems(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItems(String)
  nameWithType: Project.GetItems(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItems(String)
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsByEvaluatedInclude(String)
  nameWithType: Project.GetItemsByEvaluatedInclude(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude(String)
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsIgnoringCondition(String)
  nameWithType: Project.GetItemsIgnoringCondition(String)
  fullName: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition(String)
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetLogicalProject()
  nameWithType: Project.GetLogicalProject()
  fullName: Microsoft.Build.Evaluation.Project.GetLogicalProject()
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Construction.ProjectElement}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ProjectElement>
  nameWithType: IEnumerable<ProjectElement>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Construction.ProjectElement>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Construction.ProjectElement>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Construction.ProjectElement
    name: ProjectElement
    nameWithType: ProjectElement
    fullName: ProjectElement
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectMetadata)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectMetadata)
  nameWithType: Project.GetMetadataValueEscaped(ProjectMetadata)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectMetadata)
- uid: Microsoft.Build.Evaluation.ProjectMetadata
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectMetadata
  nameWithType: ProjectMetadata
  fullName: Microsoft.Build.Evaluation.ProjectMetadata
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItem,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectItem,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItem,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItem,String)
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(Microsoft.Build.Evaluation.ProjectItemDefinition,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped(ProjectItemDefinition,String)
  nameWithType: Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
  fullName: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped(ProjectItemDefinition,String)
- uid: Microsoft.Build.Evaluation.Project.GetProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetProperty(String)
  nameWithType: Project.GetProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.GetProperty(String)
- uid: Microsoft.Build.Evaluation.ProjectProperty
  parent: Microsoft.Build.Evaluation
  isExternal: false
  name: ProjectProperty
  nameWithType: ProjectProperty
  fullName: Microsoft.Build.Evaluation.ProjectProperty
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValue(String)
  nameWithType: Project.GetPropertyValue(String)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValue(String)
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValueEscaped(ProjectProperty)
  nameWithType: Project.GetPropertyValueEscaped(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped(ProjectProperty)
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
  fullName: Microsoft.Build.Evaluation.Project.GlobalProperties
- uid: Microsoft.Build.Evaluation.Project.Imports
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Imports
  nameWithType: Project.Imports
  fullName: Microsoft.Build.Evaluation.Project.Imports
- uid: System.Collections.Generic.IList{Microsoft.Build.Evaluation.ResolvedImport}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<ResolvedImport>
  nameWithType: IList<ResolvedImport>
  fullName: System.Collections.Generic.IList<Microsoft.Build.Evaluation.ResolvedImport>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<Microsoft.Build.Evaluation.ResolvedImport>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ResolvedImport
    name: ResolvedImport
    nameWithType: ResolvedImport
    fullName: ResolvedImport
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
  fullName: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
  fullName: Microsoft.Build.Evaluation.Project.IsBuildEnabled
- uid: Microsoft.Build.Evaluation.Project.IsDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsDirty
  nameWithType: Project.IsDirty
  fullName: Microsoft.Build.Evaluation.Project.IsDirty
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
  fullName: Microsoft.Build.Evaluation.Project.ItemDefinitions
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Evaluation.ProjectItemDefinition}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ProjectItemDefinition>
  nameWithType: IDictionary<String,ProjectItemDefinition>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Evaluation.ProjectItemDefinition>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Evaluation.ProjectItemDefinition>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Evaluation.ProjectItemDefinition
    name: ProjectItemDefinition
    nameWithType: ProjectItemDefinition
    fullName: ProjectItemDefinition
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.Items
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Items
  nameWithType: Project.Items
  fullName: Microsoft.Build.Evaluation.Project.Items
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
  fullName: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.ItemTypes
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemTypes
  nameWithType: Project.ItemTypes
  fullName: Microsoft.Build.Evaluation.Project.ItemTypes
- uid: System.Collections.Generic.ICollection{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<String>
  nameWithType: ICollection<String>
  fullName: System.Collections.Generic.ICollection<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.MarkDirty
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: MarkDirty()
  nameWithType: Project.MarkDirty()
  fullName: Microsoft.Build.Evaluation.Project.MarkDirty()
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
  fullName: Microsoft.Build.Evaluation.Project.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
  fullName: Microsoft.Build.Evaluation.Project.ProjectFileLocation
- uid: Microsoft.Build.Construction.ElementLocation
  parent: Microsoft.Build.Construction
  isExternal: false
  name: ElementLocation
  nameWithType: ElementLocation
  fullName: Microsoft.Build.Construction.ElementLocation
- uid: Microsoft.Build.Evaluation.Project.Properties
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Properties
  nameWithType: Project.Properties
  fullName: Microsoft.Build.Evaluation.Project.Properties
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ReevaluateIfNecessary()
  nameWithType: Project.ReevaluateIfNecessary()
  fullName: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary()
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveGlobalProperty(String)
  nameWithType: Project.RemoveGlobalProperty(String)
  fullName: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty(String)
- uid: Microsoft.Build.Evaluation.Project.RemoveItem(Microsoft.Build.Evaluation.ProjectItem)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItem(ProjectItem)
  nameWithType: Project.RemoveItem(ProjectItem)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItem(ProjectItem)
- uid: Microsoft.Build.Evaluation.Project.RemoveItems(System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem})
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItems(IEnumerable<ProjectItem>)
  nameWithType: Project.RemoveItems(IEnumerable<ProjectItem>)
  fullName: Microsoft.Build.Evaluation.Project.RemoveItems(IEnumerable<ProjectItem>)
- uid: System.Collections.Generic.IEnumerable{Microsoft.Build.Evaluation.ProjectItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ProjectItem>
  nameWithType: IEnumerable<ProjectItem>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Build.Evaluation.ProjectItem>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<Microsoft.Build.Evaluation.ProjectItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Build.Evaluation.ProjectItem
    name: ProjectItem
    nameWithType: ProjectItem
    fullName: ProjectItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty(Microsoft.Build.Evaluation.ProjectProperty)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveProperty(ProjectProperty)
  nameWithType: Project.RemoveProperty(ProjectProperty)
  fullName: Microsoft.Build.Evaluation.Project.RemoveProperty(ProjectProperty)
- uid: Microsoft.Build.Evaluation.Project.Save
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save()
  nameWithType: Project.Save()
  fullName: Microsoft.Build.Evaluation.Project.Save()
- uid: Microsoft.Build.Evaluation.Project.Save(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(TextWriter)
  nameWithType: Project.Save(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.Save(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: Microsoft.Build.Evaluation.Project.Save(System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(String)
  nameWithType: Project.Save(String)
  fullName: Microsoft.Build.Evaluation.Project.Save(String)
- uid: Microsoft.Build.Evaluation.Project.Save(System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(Encoding)
  nameWithType: Project.Save(Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(Encoding)
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: Microsoft.Build.Evaluation.Project.Save(System.String,System.Text.Encoding)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save(String,Encoding)
  nameWithType: Project.Save(String,Encoding)
  fullName: Microsoft.Build.Evaluation.Project.Save(String,Encoding)
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject(System.IO.TextWriter)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SaveLogicalProject(TextWriter)
  nameWithType: Project.SaveLogicalProject(TextWriter)
  fullName: Microsoft.Build.Evaluation.Project.SaveLogicalProject(TextWriter)
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetGlobalProperty(String,String)
  nameWithType: Project.SetGlobalProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetGlobalProperty(String,String)
- uid: Microsoft.Build.Evaluation.Project.SetProperty(System.String,System.String)
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetProperty(String,String)
  nameWithType: Project.SetProperty(String,String)
  fullName: Microsoft.Build.Evaluation.Project.SetProperty(String,String)
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
  fullName: Microsoft.Build.Evaluation.Project.SkipEvaluation
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
  fullName: Microsoft.Build.Evaluation.Project.SubToolsetVersion
- uid: Microsoft.Build.Evaluation.Project.Targets
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Targets
  nameWithType: Project.Targets
  fullName: Microsoft.Build.Evaluation.Project.Targets
- uid: System.Collections.Generic.IDictionary{System.String,Microsoft.Build.Execution.ProjectTargetInstance}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,ProjectTargetInstance>
  nameWithType: IDictionary<String,ProjectTargetInstance>
  fullName: System.Collections.Generic.IDictionary<System.String,Microsoft.Build.Execution.ProjectTargetInstance>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,Microsoft.Build.Execution.ProjectTargetInstance>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: Microsoft.Build.Execution.ProjectTargetInstance
    name: ProjectTargetInstance
    nameWithType: ProjectTargetInstance
    fullName: ProjectTargetInstance
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
  fullName: Microsoft.Build.Evaluation.Project.ToolsVersion
- uid: Microsoft.Build.Evaluation.Project.Xml
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Xml
  nameWithType: Project.Xml
  fullName: Microsoft.Build.Evaluation.Project.Xml
- uid: Microsoft.Build.Evaluation.Project.#ctor*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Project
  nameWithType: Project.Project
- uid: Microsoft.Build.Evaluation.Project.AddItem*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItem
  nameWithType: Project.AddItem
- uid: Microsoft.Build.Evaluation.Project.AddItemFast*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AddItemFast
  nameWithType: Project.AddItemFast
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItemDefinitionMetadata*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItemDefinitionMetadata
  nameWithType: Project.AllEvaluatedItemDefinitionMetadata
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedItems
  nameWithType: Project.AllEvaluatedItems
- uid: Microsoft.Build.Evaluation.Project.AllEvaluatedProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: AllEvaluatedProperties
  nameWithType: Project.AllEvaluatedProperties
- uid: Microsoft.Build.Evaluation.Project.Build*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Build
  nameWithType: Project.Build
- uid: Microsoft.Build.Evaluation.Project.ConditionedProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ConditionedProperties
  nameWithType: Project.ConditionedProperties
- uid: Microsoft.Build.Evaluation.Project.CreateProjectInstance*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: CreateProjectInstance
  nameWithType: Project.CreateProjectInstance
- uid: Microsoft.Build.Evaluation.Project.DirectoryPath*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DirectoryPath
  nameWithType: Project.DirectoryPath
- uid: Microsoft.Build.Evaluation.Project.DisableMarkDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: DisableMarkDirty
  nameWithType: Project.DisableMarkDirty
- uid: Microsoft.Build.Evaluation.Project.EvaluationCounter*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: EvaluationCounter
  nameWithType: Project.EvaluationCounter
- uid: Microsoft.Build.Evaluation.Project.ExpandString*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ExpandString
  nameWithType: Project.ExpandString
- uid: Microsoft.Build.Evaluation.Project.FullPath*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: FullPath
  nameWithType: Project.FullPath
- uid: Microsoft.Build.Evaluation.Project.GetEvaluatedItemIncludeEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetEvaluatedItemIncludeEscaped
  nameWithType: Project.GetEvaluatedItemIncludeEscaped
- uid: Microsoft.Build.Evaluation.Project.GetItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItems
  nameWithType: Project.GetItems
- uid: Microsoft.Build.Evaluation.Project.GetItemsByEvaluatedInclude*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsByEvaluatedInclude
  nameWithType: Project.GetItemsByEvaluatedInclude
- uid: Microsoft.Build.Evaluation.Project.GetItemsIgnoringCondition*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetItemsIgnoringCondition
  nameWithType: Project.GetItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.GetLogicalProject*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetLogicalProject
  nameWithType: Project.GetLogicalProject
- uid: Microsoft.Build.Evaluation.Project.GetMetadataValueEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetMetadataValueEscaped
  nameWithType: Project.GetMetadataValueEscaped
- uid: Microsoft.Build.Evaluation.Project.GetProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetProperty
  nameWithType: Project.GetProperty
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValue*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValue
  nameWithType: Project.GetPropertyValue
- uid: Microsoft.Build.Evaluation.Project.GetPropertyValueEscaped*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GetPropertyValueEscaped
  nameWithType: Project.GetPropertyValueEscaped
- uid: Microsoft.Build.Evaluation.Project.GlobalProperties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: GlobalProperties
  nameWithType: Project.GlobalProperties
- uid: Microsoft.Build.Evaluation.Project.Imports*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Imports
  nameWithType: Project.Imports
- uid: Microsoft.Build.Evaluation.Project.ImportsIncludingDuplicates*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ImportsIncludingDuplicates
  nameWithType: Project.ImportsIncludingDuplicates
- uid: Microsoft.Build.Evaluation.Project.IsBuildEnabled*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsBuildEnabled
  nameWithType: Project.IsBuildEnabled
- uid: Microsoft.Build.Evaluation.Project.IsDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: IsDirty
  nameWithType: Project.IsDirty
- uid: Microsoft.Build.Evaluation.Project.ItemDefinitions*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemDefinitions
  nameWithType: Project.ItemDefinitions
- uid: Microsoft.Build.Evaluation.Project.Items*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Items
  nameWithType: Project.Items
- uid: Microsoft.Build.Evaluation.Project.ItemsIgnoringCondition*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemsIgnoringCondition
  nameWithType: Project.ItemsIgnoringCondition
- uid: Microsoft.Build.Evaluation.Project.ItemTypes*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ItemTypes
  nameWithType: Project.ItemTypes
- uid: Microsoft.Build.Evaluation.Project.MarkDirty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: MarkDirty
  nameWithType: Project.MarkDirty
- uid: Microsoft.Build.Evaluation.Project.ProjectCollection*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectCollection
  nameWithType: Project.ProjectCollection
- uid: Microsoft.Build.Evaluation.Project.ProjectFileLocation*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ProjectFileLocation
  nameWithType: Project.ProjectFileLocation
- uid: Microsoft.Build.Evaluation.Project.Properties*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Properties
  nameWithType: Project.Properties
- uid: Microsoft.Build.Evaluation.Project.ReevaluateIfNecessary*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ReevaluateIfNecessary
  nameWithType: Project.ReevaluateIfNecessary
- uid: Microsoft.Build.Evaluation.Project.RemoveGlobalProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveGlobalProperty
  nameWithType: Project.RemoveGlobalProperty
- uid: Microsoft.Build.Evaluation.Project.RemoveItem*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItem
  nameWithType: Project.RemoveItem
- uid: Microsoft.Build.Evaluation.Project.RemoveItems*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveItems
  nameWithType: Project.RemoveItems
- uid: Microsoft.Build.Evaluation.Project.RemoveProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: RemoveProperty
  nameWithType: Project.RemoveProperty
- uid: Microsoft.Build.Evaluation.Project.Save*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Save
  nameWithType: Project.Save
- uid: Microsoft.Build.Evaluation.Project.SaveLogicalProject*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SaveLogicalProject
  nameWithType: Project.SaveLogicalProject
- uid: Microsoft.Build.Evaluation.Project.SetGlobalProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetGlobalProperty
  nameWithType: Project.SetGlobalProperty
- uid: Microsoft.Build.Evaluation.Project.SetProperty*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SetProperty
  nameWithType: Project.SetProperty
- uid: Microsoft.Build.Evaluation.Project.SkipEvaluation*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SkipEvaluation
  nameWithType: Project.SkipEvaluation
- uid: Microsoft.Build.Evaluation.Project.SubToolsetVersion*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: SubToolsetVersion
  nameWithType: Project.SubToolsetVersion
- uid: Microsoft.Build.Evaluation.Project.Targets*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Targets
  nameWithType: Project.Targets
- uid: Microsoft.Build.Evaluation.Project.ToolsVersion*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: ToolsVersion
  nameWithType: Project.ToolsVersion
- uid: Microsoft.Build.Evaluation.Project.Xml*
  parent: Microsoft.Build.Evaluation.Project
  isExternal: false
  name: Xml
  nameWithType: Project.Xml
