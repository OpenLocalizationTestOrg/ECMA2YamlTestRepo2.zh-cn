### YamlMime:ManagedReference
items:
- uid: System.Configuration.SettingsProvider
  id: SettingsProvider
  children:
  - System.Configuration.SettingsProvider.#ctor
  - System.Configuration.SettingsProvider.ApplicationName
  - System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  - System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  langs:
  - csharp
  name: SettingsProvider
  nameWithType: SettingsProvider
  fullName: System.Configuration.SettingsProvider
  type: Class
  summary: "充当用于派生应用程序设置体系结构中的自定义设置提供程序的基类。"
  remarks: "设置提供程序定义用于存储在应用程序设置体系结构中使用的配置数据的机制。 .NET Framework 包含一个默认设置提供程序， <xref:System.Configuration.LocalFileSettingsProvider>，它存储到本地文件系统的配置数据。</xref:System.Configuration.LocalFileSettingsProvider> 但是，你可以通过从抽象 SettingsProvider 类派生来创建备用存储机制。 包装类使用的访问接口确定的修饰<xref:System.Configuration.SettingsProviderAttribute>。</xref:System.Configuration.SettingsProviderAttribute>的包装类 如果此属性未提供，默认情况下， <xref:System.Configuration.LocalFileSettingsProvider>，使用。</xref:System.Configuration.LocalFileSettingsProvider>       当你创建自定义设置提供程序，最小时，必须提供用于三个方法的此类的实现: <xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>、<xref:System.Configuration.SettingsProvider.SetPropertyValues%2A>和<xref:System.Configuration.SettingsProvider.ApplicationName%2A>。</xref:System.Configuration.SettingsProvider.ApplicationName%2A> </xref:System.Configuration.SettingsProvider.SetPropertyValues%2A> </xref:System.Configuration.SettingsProvider.GetPropertyValues%2A>       对于客户端应用程序，你可以添加多标准化的功能自定义提供程序通过还实现<xref:System.Configuration.IApplicationSettingsProvider>接口。</xref:System.Configuration.IApplicationSettingsProvider> 此接口镜像方法中找到<xref:System.Configuration.ApplicationSettingsBase>类，该类主要版本控制支持。</xref:System.Configuration.ApplicationSettingsBase>       通常情况下，你应设计设置提供程序单一实例，以避免存储资源争用。 提供程序也应该是线程安全，因为它们可以通过从单个应用程序域中的多个包装实例或不同域中的多个应用程序同时调用。       在最小值、 设置提供程序必须识别三个特性-<xref:System.Configuration.ApplicationScopedSettingAttribute>， <xref:System.Configuration.UserScopedSettingAttribute>，和<xref:System.Configuration.DefaultSettingValueAttribute>。</xref:System.Configuration.DefaultSettingValueAttribute> </xref:System.Configuration.UserScopedSettingAttribute> </xref:System.Configuration.ApplicationScopedSettingAttribute> 可以应用于应用程序设置的属性的完整列表，请参阅[的应用程序设置属性](~/add/includes/ajax-current-ext-md.md)。 自定义设置提供程序应解决按以下方式应用于设置属性的属性︰ 1。  如果提供程序可以满足所暗示属性的请求，显然应该这样做。      2.  如果提供程序无法完成请求，它应以无提示方式忽略它。      3.  如果两个或多个属性发生冲突;例如，使用这两个<xref:System.Configuration.ApplicationScopedSettingAttribute>并且<xref:System.Configuration.UserScopedSettingAttribute>; 提供程序应引发一种<xref:System.Configuration.ConfigurationException>。</xref:System.Configuration.ConfigurationException></xref:System.Configuration.UserScopedSettingAttribute></xref:System.Configuration.ApplicationScopedSettingAttribute>正在修饰的属性"
  syntax:
    content: 'public abstract class SettingsProvider : System.Configuration.Provider.ProviderBase'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  implements: []
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.#ctor
  id: '#ctor'
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: SettingsProvider()
  nameWithType: SettingsProvider.SettingsProvider()
  fullName: System.Configuration.SettingsProvider.SettingsProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "初始化的实例<xref href=&quot;System.Configuration.SettingsProvider&quot;></xref>类。"
  remarks: "这是此抽象类此默认受保护构造函数。 派生自定义设置提供程序不需要提供的显式构造函数，因为<xref:System.Configuration.Provider.ProviderBase.Initialize%2A>方法通常会执行所有的初始化。</xref:System.Configuration.Provider.ProviderBase.Initialize%2A>       客户端代码通常不会不直接实例化设置提供程序;相反，使用以下过程设置提供程序查找特定的设置属性︰ 1。  调用<xref:System.ComponentModel.Component.GetService%2A>方法的当前<xref:System.ComponentModel.Component>或<xref:System.ComponentModel.ISite>返回到当前<xref:System.Configuration.ISettingsProviderService>.</xref:System.Configuration.ISettingsProviderService>的引用</xref:System.ComponentModel.ISite></xref:System.ComponentModel.Component></xref:System.ComponentModel.Component.GetService%2A>      2.  调用<xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>方法<xref:System.Configuration.ISettingsProviderService>在返回设置提供程序的第一步中检索。</xref:System.Configuration.ISettingsProviderService> </xref:System.Configuration.ISettingsProviderService.GetSettingsProvider%2A>"
  syntax:
    content: protected SettingsProvider ();
    parameters: []
  overload: System.Configuration.SettingsProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.ApplicationName
  id: ApplicationName
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
  fullName: System.Configuration.SettingsProvider.ApplicationName
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取或设置当前正在运行的应用程序的名称。"
  remarks: "应用程序名称和<xref:System.Configuration.Provider.ProviderBase.Name%2A>属性帮助消除在不同的应用程序中命名的设置属性同样的歧义。</xref:System.Configuration.Provider.ProviderBase.Name%2A>"
  syntax:
    content: public abstract string ApplicationName { get; set; }
    return:
      type: System.String
      description: "A <xref:System.String>，其中包含应用程序的短的名称，不包含的完整路径或扩展，例如， `SimpleAppSettings`。</xref:System.String>"
  overload: System.Configuration.SettingsProvider.ApplicationName*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  id: GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "返回指定的应用程序实例和设置属性组的属性值的设置的集合。"
  remarks: "必须实现 GetPropertyValues 方法来处理特殊设置，这些标记与<xref:System.Configuration.SpecialSettingAttribute>，以及协调应用程序和用户设置。</xref:System.Configuration.SpecialSettingAttribute>"
  syntax:
    content: public abstract System.Configuration.SettingsPropertyValueCollection GetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyCollection collection);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref>描述当前的应用程序使用。"
    - id: collection
      type: System.Configuration.SettingsPropertyCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyCollection&quot;> </xref>包含其值是要检索的设置属性组。"
    return:
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref>包含指定的设置属性组的值。"
  overload: System.Configuration.SettingsProvider.GetPropertyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  id: SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.SettingsProvider
  langs:
  - csharp
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "设置指定组的属性设置的值。"
  remarks: "<xref:System.Configuration.ApplicationSettingsBase>包含<xref:System.Configuration.ApplicationSettingsBase.Save%2A>方法，调用以保留所有其设置属性的值。</xref:System.Configuration.ApplicationSettingsBase.Save%2A></xref:System.Configuration.ApplicationSettingsBase> 此方法通过所有设置提供程序与其设置属性，并为每个调用 SetPropertyValues 方法都枚举<xref:System.Configuration.SettingsProvider>执行实际的序列化操作。</xref:System.Configuration.SettingsProvider>       应考虑到了安全性实现 SetPropertyValues 方法︰ 只有完全受信任的代码应允许更新应用程序设置。 应允许部分受信任的代码更新仅用户应用程序设置。 不受信任的代码通常不允许更新应用程序设置。      -使用配额应被视为抵御资源攻击由部分受信任的应用程序。"
  syntax:
    content: public abstract void SetPropertyValues (System.Configuration.SettingsContext context, System.Configuration.SettingsPropertyValueCollection collection);
    parameters:
    - id: context
      type: System.Configuration.SettingsContext
      description: "A <xref href=&quot;System.Configuration.SettingsContext&quot;> </xref>描述当前应用程序使用情况。"
    - id: collection
      type: System.Configuration.SettingsPropertyValueCollection
      description: "A <xref href=&quot;System.Configuration.SettingsPropertyValueCollection&quot;> </xref>表示要设置的属性设置的组。"
  overload: System.Configuration.SettingsProvider.SetPropertyValues*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: System.Configuration.Provider.ProviderBase
- uid: System.Configuration.SettingsProvider.#ctor
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SettingsProvider()
  nameWithType: SettingsProvider.SettingsProvider()
  fullName: System.Configuration.SettingsProvider.SettingsProvider()
- uid: System.Configuration.SettingsProvider.ApplicationName
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
  fullName: System.Configuration.SettingsProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.SettingsProvider.GetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyCollection)
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  nameWithType: SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
  fullName: System.Configuration.SettingsProvider.GetPropertyValues(SettingsContext,SettingsPropertyCollection)
- uid: System.Configuration.SettingsPropertyValueCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyValueCollection
  nameWithType: SettingsPropertyValueCollection
  fullName: System.Configuration.SettingsPropertyValueCollection
- uid: System.Configuration.SettingsContext
  parent: System.Configuration
  isExternal: false
  name: SettingsContext
  nameWithType: SettingsContext
  fullName: System.Configuration.SettingsContext
- uid: System.Configuration.SettingsPropertyCollection
  parent: System.Configuration
  isExternal: false
  name: SettingsPropertyCollection
  nameWithType: SettingsPropertyCollection
  fullName: System.Configuration.SettingsPropertyCollection
- uid: System.Configuration.SettingsProvider.SetPropertyValues(System.Configuration.SettingsContext,System.Configuration.SettingsPropertyValueCollection)
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  nameWithType: SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
  fullName: System.Configuration.SettingsProvider.SetPropertyValues(SettingsContext,SettingsPropertyValueCollection)
- uid: System.Configuration.SettingsProvider.#ctor*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SettingsProvider
  nameWithType: SettingsProvider.SettingsProvider
- uid: System.Configuration.SettingsProvider.ApplicationName*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: ApplicationName
  nameWithType: SettingsProvider.ApplicationName
- uid: System.Configuration.SettingsProvider.GetPropertyValues*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: GetPropertyValues
  nameWithType: SettingsProvider.GetPropertyValues
- uid: System.Configuration.SettingsProvider.SetPropertyValues*
  parent: System.Configuration.SettingsProvider
  isExternal: false
  name: SetPropertyValues
  nameWithType: SettingsProvider.SetPropertyValues
