### YamlMime:ManagedReference
items:
- uid: System.UnhandledExceptionEventArgs
  id: UnhandledExceptionEventArgs
  children:
  - System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  - System.UnhandledExceptionEventArgs.ExceptionObject
  - System.UnhandledExceptionEventArgs.IsTerminating
  langs:
  - csharp
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs
  fullName: System.UnhandledExceptionEventArgs
  type: Class
  summary: "在任何应用程序域中不会对其进行处理的异常时引发的事件提供数据。"
  remarks: "UnhandledExceptionEventArgs 提供对异常对象和一个标志，指示是否正在终止公共语言运行时访问。 UnhandledExceptionEventArgs 是传入的参数之一<xref:System.UnhandledExceptionEventHandler>为<xref:System.AppDomain.UnhandledException?displayProperty=fullName>事件。</xref:System.AppDomain.UnhandledException?displayProperty=fullName> </xref:System.UnhandledExceptionEventHandler>       有关事件处理程序委托的详细信息，请参阅[事件](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class UnhandledExceptionEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  id: '#ctor(System.Object,System.Boolean)'
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.UnhandledExceptionEventArgs&quot;></xref>与异常对象和一个公共语言运行时终止标志的类。"
  syntax:
    content: public UnhandledExceptionEventArgs (object exception, bool isTerminating);
    parameters:
    - id: exception
      type: System.Object
      description: "未处理的异常。"
    - id: isTerminating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果运行时是否即将终止;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.UnhandledExceptionEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  id: ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取未经处理的异常对象。"
  remarks: "此属性返回类型<xref:System.Object>而不是一个派生自<xref:System.Exception>.</xref:System.Exception></xref:System.Object>的对象 虽然公共语言规范中需要的所有异常类型都派生<xref:System.Exception>，则可能的方法引发异常不从<xref:System.Exception>.</xref:System.Exception>派生的对象</xref:System.Exception>从 你可以执行以下操作来处理此异常:-应用<xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute>特性与<xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName>值`true`到包含事件处理程序的程序集。</xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute.WrapNonExceptionThrows%2A?displayProperty=fullName> </xref:System.Runtime.CompilerServices.RuntimeCompatibilityAttribute> 此包装不派生自的所有异常<xref:System.Exception>类<xref:System.Runtime.CompilerServices.RuntimeWrappedException>对象。</xref:System.Runtime.CompilerServices.RuntimeWrappedException> </xref:System.Exception> 然后，可以安全地强制转换 （在 C# 中) 或将此属性返回的对象转换 （在 Visual Basic)<xref:System.Exception>对象，并检索从原始的异常对象<xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName>属性。</xref:System.Runtime.CompilerServices.RuntimeWrappedException.WrappedException%2A?displayProperty=fullName> </xref:System.Exception> 请注意一些编译器，如 C# 和 Visual Basic 编译器，自动将应用此属性。      -将对象强制转换到此属性返回<xref:System.Exception>对象。</xref:System.Exception>"
  example:
  - "The following example demonstrates the <xref:System.AppDomain.UnhandledException> event. It defines an event handler, `MyHandler`, that is invoked whenever an unhandled exception is thrown in the default application domain. It then throws two exceptions. The first is handled by a **try/catch** block. The second is unhandled and invokes the `MyHandle` routine before the application terminates.  \n  \n [!code-cs[AppDomain_UnhandledException#1](~/add/codesnippet/csharp/p-system.unhandledexcept_1.cs)]\n [!code-vb[AppDomain_UnhandledException#1](~/add/codesnippet/visualbasic/p-system.unhandledexcept_1.vb)]\n [!code-cpp[AppDomain_UnhandledException#1](~/add/codesnippet/cpp/p-system.unhandledexcept_1.cpp)]"
  syntax:
    content: public object ExceptionObject { get; }
    return:
      type: System.Object
      description: "未经处理的异常对象中。"
  overload: System.UnhandledExceptionEventArgs.ExceptionObject*
  exceptions: []
  platform:
  - net462
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  id: IsTerminating
  parent: System.UnhandledExceptionEventArgs
  langs:
  - csharp
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "指示公共语言运行时是否即将终止。"
  remarks: "从.NET Framework 2.0 版开始，此属性返回`true`对于大多数未经处理的异常，除非应用程序兼容性标志，用于恢复为 1.0 和 1.1 版的行为。 原因是最线程，包括线程池线程中未经处理的异常将可以继续当然，这通常会导致应用终止。 有关详细信息，包括列表的情况下在其中运行时不会终止，请参阅[托管线程中的异常](~/add/includes/ajax-current-ext-md.md)。      ## 以下规则适用于.NET framework 1.0 和 1.1 版的版本信息︰ 此属性返回`true`接收在中，但未由应用程序的主线程异常时。 此属性也会返回`true`如果非托管的线程正在执行托管的代码，并且收到未处理的异常。 最后，此属性返回`false`的线程池线程和应用程序创建的因为 1.0 和 1.1 版中的此类线程中捕获未经处理的异常，并忽略它们的托管的线程。"
  syntax:
    content: public bool IsTerminating { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果运行时是否即将终止;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.UnhandledExceptionEventArgs.IsTerminating*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.UnhandledExceptionEventArgs.#ctor(System.Object,System.Boolean)
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs(Object,Boolean)
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
  fullName: System.UnhandledExceptionEventArgs.UnhandledExceptionEventArgs(Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.UnhandledExceptionEventArgs.ExceptionObject
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
  fullName: System.UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
  fullName: System.UnhandledExceptionEventArgs.IsTerminating
- uid: System.UnhandledExceptionEventArgs.#ctor*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: UnhandledExceptionEventArgs
  nameWithType: UnhandledExceptionEventArgs.UnhandledExceptionEventArgs
- uid: System.UnhandledExceptionEventArgs.ExceptionObject*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: ExceptionObject
  nameWithType: UnhandledExceptionEventArgs.ExceptionObject
- uid: System.UnhandledExceptionEventArgs.IsTerminating*
  parent: System.UnhandledExceptionEventArgs
  isExternal: false
  name: IsTerminating
  nameWithType: UnhandledExceptionEventArgs.IsTerminating
