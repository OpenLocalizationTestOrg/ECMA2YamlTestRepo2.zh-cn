### YamlMime:ManagedReference
items:
- uid: System.Globalization.HebrewCalendar
  id: HebrewCalendar
  children:
  - System.Globalization.HebrewCalendar.#ctor
  - System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.HebrewCalendar.AlgorithmType
  - System.Globalization.HebrewCalendar.Eras
  - System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  - System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  - System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  - System.Globalization.HebrewCalendar.HebrewEra
  - System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.MaxSupportedDateTime
  - System.Globalization.HebrewCalendar.MinSupportedDateTime
  - System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.HebrewCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: HebrewCalendar
  nameWithType: HebrewCalendar
  fullName: System.Globalization.HebrewCalendar
  type: Class
  summary: "表示希伯来历。"
  remarks: "希伯来历识别两个纪元︰ B.C.E. （在之前基督纪元中） 到 a.m. （拉丁语系&quot;Anno Mundi&quot;，这意味着&quot;世界的年份&quot;）。 HebrewCalendar 类的此实现可识别当前纪元 （上午） 和希伯来年份 5343 至 5999 (即公历 1583年至 2239)。      1> [!NOTE]&1;> 在.NET Framework 中使用 HebrewCalendar 类和其他日历类的信息，请参阅[使用日历](~/add/includes/ajax-current-ext-md.md)。       在通过 19、 第三、 6、 8、 11、 14 整除的年份结束每个 19 年周期，17，和 19 年是闰年。 平年可能有 353 到 355 天，具体取决于犹太人假日的位置。 闰年可以有 383 到 385 天。       希伯来历具有 12 个月在平年，在闰年 13 个月: |GetMonth 值 （平年） |GetMonth 值 （闰年） |月 |天数在平年 |闰年中的天 |  |------------------------------------|----------------------------------|-----------|--------------------------|------------------------|  | 1 | 1 | תשרי (Tishrei) | 30 | 30 |  | 2 | 2 | חשון (Cheshvan) | 29/30 | 29/30 |  | 3 | 3 | כסלו (Kislev) | 29/30 | 29/30 |  | 4 | 4 | טבת （tevet 月） | 29 | 29 |  | 5 | 5 | שבט (Shevat) | 30 | 30 |  | 6 |-| אדר （闰阿达尔） | 29 |-|  |-| 6 | אדר א (闰阿达尔 Alef) |-| 30 |  |-| 7 | אדר ב （闰阿达尔月） |-| 29 |  | 7 | 8 |ניסן (Nissan) | 30 | 30 |  | 8 |9 | אייר (Iyar) | 29 | 29 |  | 9 | 10 | סיון (Sivan) | 30 | 30 |  | 10 | 11 | תמוז (Tamuz) | 29 | 29 |  | 11 | 12 | אב (Av) | 30 | 30 |  | 12 | 13 | אלול (Elul) | 29 | 29 |      在 Cheshvan 和 Kislev 天数而异的犹太人假日放置。 在闰年，闰阿达尔被取代通过闰阿达尔 Alef 使用 30 天和闰阿达尔月 29 天。 闰阿达尔 Alef 被视为的闰月。 天; leap 闰阿达尔 Alef 及其所有被视为闰阿达尔月中的日期的最后一天也就是说，<xref:System.Globalization.HebrewCalendar.IsLeapDay%2A>方法返回`true`这些天。</xref:System.Globalization.HebrewCalendar.IsLeapDay%2A>       日期到公元 2001 年 1 月 1 日 在公历日历相当于该年的第六个天提别月 5761 A.M. 在希伯来历。       每个<xref:System.Globalization.CultureInfo>支持一组的日历。</xref:System.Globalization.CultureInfo> <xref:System.Globalization.CultureInfo.Calendar%2A>属性返回区域性的默认日历和<xref:System.Globalization.CultureInfo.OptionalCalendars%2A>属性返回一个包含所有支持的区域性的日历数组。</xref:System.Globalization.CultureInfo.OptionalCalendars%2A> </xref:System.Globalization.CultureInfo.Calendar%2A> 若要更改使用的<xref:System.Globalization.CultureInfo>，应用程序应设置此<xref:System.Globalization.DateTimeFormatInfo.Calendar%2A>属性<xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName>为新的<xref:System.Globalization.Calendar>。</xref:System.Globalization.Calendar></xref:System.Globalization.CultureInfo.DateTimeFormat%2A?displayProperty=fullName></xref:System.Globalization.DateTimeFormatInfo.Calendar%2A></xref:System.Globalization.CultureInfo>的日历"
  example:
  - "The following example creates a file that contains the date ranges supported by the HebrewCalendar class, and displays the number of days in each month of the year 5772.  \n  \n [!code-cs[System.Globalization.HebrewCalendar.Class#1](~/add/codesnippet/csharp/t-system.globalization.h_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar.Class#1](~/add/codesnippet/visualbasic/t-system.globalization.h_1.vb)]  \n  \n The example instantiates a HebrewCalendar object and makes it the current calendar of a Hebrew (Israel) <xref:System.Globalization.CultureInfo> object. It then makes Hebrew (Israel) the current thread culture. This causes the common language runtime to interpret all dates and times in relation to the Hebrew calendar."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class HebrewCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.#ctor
  id: '#ctor'
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: HebrewCalendar()
  nameWithType: HebrewCalendar.HebrewCalendar()
  fullName: System.Globalization.HebrewCalendar.HebrewCalendar()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "初始化的新实例<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>类。"
  syntax:
    content: public HebrewCalendar ();
    parameters: []
  overload: System.Globalization.HebrewCalendar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: HebrewCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.HebrewCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回一个<xref:System.DateTime>，它是指定的指定<xref:System.DateTime>。</xref:System.DateTime>离开的月数</xref:System.DateTime>"
  remarks: "此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>       日部分的生成<xref:System.DateTime>如果结果的日期不是有效的一天中生成月份影响。</xref:System.DateTime> 它将更改为在生成每年的生成的每月最后一个有效的一天。 <xref:System.DateTime>如果外部的指定<xref:System.DateTime>。</xref:System.DateTime>年，则结果月份影响</xref:System.DateTime>生成的年份部分 此实现支持仅当前纪元。 因此，<xref:System.ArgumentException>如果结果年份外部的指定<xref:System.DateTime>。</xref:System.DateTime>纪元，则引发</xref:System.ArgumentException> 时间的日部分的生成<xref:System.DateTime>与指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>       例如，如果指定的月份是 Av，包含 30 天，指定的日期是该月 30 日和的值`months`参数为 5，则结果年份是一个指定的年份，结果月份是 tevet 月，和结果的日期是 29 日，即 tevet 月的最后一天。       如果值`months`参数是负数，<xref:System.DateTime>早于指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>生成       <xref:System.DateTime.Kind%2A>属性的返回<xref:System.DateTime>值始终等于<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>属性`time`通过调用的参数<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如以下示例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/m-system.globalization.h_20_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#5  ](~/add/codesnippet/csharp/m-system.globalization.h_20_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hebrew calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_20_2.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_20_2.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_20_2.cpp)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>要向其中添加`months`。</xref:System.DateTime>"
    - id: months
      type: System.Int32
      description: "要添加的月份数。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>添加指定的月数到指定<xref:System.DateTime>。</xref:System.DateTime>而产生</xref:System.DateTime>"
  overload: System.Globalization.HebrewCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "生成<xref:System.DateTime>超出支持的范围。</xref:System.DateTime>"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code>小于-120,000 或大于 120,000。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: HebrewCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.HebrewCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回一个<xref:System.DateTime>，它是指定的指定<xref:System.DateTime>。</xref:System.DateTime>离开的年数</xref:System.DateTime>"
  remarks: "此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>       日部分的生成<xref:System.DateTime>如果结果的日期不是有效的一天中生成月份影响。</xref:System.DateTime> 它将更改为在生成每年的生成的每月最后一个有效的一天。 例如，Cheshvan 可以有 29 或 30 天，具体取决于犹太人假日的位置。 假设 Cheshvan 具有的当前年份中的 30 天和下一年中的 29。 如果指定的日期是在当前年份的 Cheshvan 的 30 天和的值`years`为 1，则得到的日期将在下一年中的 Cheshvan 29 日。       所生成的月份部分<xref:System.DateTime>如果结果月份不是生成的年份中的有效月份影响。</xref:System.DateTime> 它将更改为所得年份中最后一个有效的月份。 例如，如果中的每个月`time`参数是闰年第 13 个月和的值`years`是 1，在随后出现的月份<xref:System.DateTime>是在下一年，即非-闰年第 12 个月。</xref:System.DateTime> 请注意，即使不会更改的月份部分，它可能仍然引用到不同的月份。 例如，闰阿达尔月是闰年，在第 7 个月，但 Nissan 是第 7 个月共同点数年时间。       此实现支持仅当前纪元。 因此，<xref:System.ArgumentException>如果结果年份外部的指定<xref:System.DateTime>。</xref:System.DateTime>纪元，则引发</xref:System.ArgumentException>       时间的日部分的生成<xref:System.DateTime>与指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>       如果`years`为负，<xref:System.DateTime>早于指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>生成       <xref:System.DateTime.Kind%2A>属性的返回<xref:System.DateTime>值始终等于<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>属性`time`通过调用的参数<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如以下示例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/m-system.globalization.h_6_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#8  ](~/add/codesnippet/csharp/m-system.globalization.h_6_1.cs)]"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hebrew calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_6_2.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_6_2.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_6_2.cpp)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>要向其中添加`years`。</xref:System.DateTime>"
    - id: years
      type: System.Int32
      description: "若要添加的年份数。"
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>添加指定的到指定<xref:System.DateTime>。</xref:System.DateTime>的年数而产生</xref:System.DateTime>"
  overload: System.Globalization.HebrewCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "生成<xref:System.DateTime>超出支持的范围。</xref:System.DateTime>"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: HebrewCalendar.AlgorithmType
  fullName: System.Globalization.HebrewCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。"
  remarks: ''
  example:
  - "The following example uses reflection to instantiate each <xref:System.Globalization.Calendar> type found in the .NET Framework and displays the value of its <xref:System.Globalization.Calendar.AlgorithmType%2A> property.  \n  \n [!code-cs[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/csharp/p-system.globalization.h_6_1.cs)]\n [!code-vb[System.Globalization.Calendar.AlgorithmType#1](~/add/codesnippet/visualbasic/p-system.globalization.h_6_1.vb)]"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "始终返回<xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;> </xref>。"
  overload: System.Globalization.HebrewCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.Eras
  id: Eras
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: Eras
  nameWithType: HebrewCalendar.Eras
  fullName: System.Globalization.HebrewCalendar.Eras
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取中的纪元列表<xref href=&quot;System.Globalization.HebrewCalendar&quot;> </xref>。"
  remarks: '希伯来历识别两个纪元︰ B.C.E. （在之前基督纪元中） 到 a.m. （拉丁语系&quot;Anno Mundi&quot;，这意味着&quot;世界的年份&quot;）。 此实现的<xref:System.Globalization.HebrewCalendar>类识别当前纪元 （上午）。</xref:System.Globalization.HebrewCalendar> 此属性始终返回包含仅有一个元素的数组。'
  syntax:
    content: public override int[] Eras { get; }
    return:
      type: System.Int32[]
      description: "表示中的纪元的整数的数组<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>类型。 返回值始终是数组，其中包含一个元素等于<xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;> </xref>。"
  overload: System.Globalization.HebrewCalendar.Eras*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: HebrewCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定<xref:System.DateTime>.</xref:System.DateTime>中的每月天数"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hebrew calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_8_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_8_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_8_1.cpp)]"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个从 1 到 30 的整数，表示在指定<xref:System.DateTime>。</xref:System.DateTime>每月的某"
  overload: System.Globalization.HebrewCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: HebrewCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回在指定<xref:System.DateTime>。</xref:System.DateTime>星期几"
  remarks: "<xref:System.DayOfWeek>值如下: |DayOfWeek 值 |星期几 |  |---------------------|-----------------|  |星期日 | יום ראשון (赎罪 Rishon) |  |星期一 | יום שני (赎罪 Sheni) |  |星期二 | יום שלישי (赎罪 Shlishi) |  |星期三 | יום רביעי (赎罪 Reviee) |  |星期四 | יום חמישי (赎罪 Chamishi) |  |星期五 | יום שישי (赎罪 Shishi) |  |星期六 | שבת (Shabat) |</xref:System.DayOfWeek>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hebrew calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_7_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_7_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_7_1.cpp)]"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.DayOfWeek
      description: "一个<xref:System.DayOfWeek>值，它表示日期中的指定<xref:System.DateTime>。</xref:System.DateTime>星期几</xref:System.DayOfWeek>"
  overload: System.Globalization.HebrewCalendar.GetDayOfWeek*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: HebrewCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回在指定<xref:System.DateTime>。</xref:System.DateTime>年的某一天"
  remarks: "每年的日期被指从该年度的第一天的天数。 例如，第一个月的第一天的 GetDayOfYear 返回 1，和上个月的最后一天的 GetDayOfYear 这一年，这是相同的值由<xref:System.Globalization.HebrewCalendar.GetDaysInYear%2A>.</xref:System.Globalization.HebrewCalendar.GetDaysInYear%2A>返回总天数       此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hebrew calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_18_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_18_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_18_1.cpp)]"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "从 1 到 385 的整数，表示的年份中的指定<xref:System.DateTime>。</xref:System.DateTime>的日期"
  overload: System.Globalization.HebrewCalendar.GetDayOfYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>早于 1583 在公历日历年 9 月 17，或大于<xref:System.Globalization.HebrewCalendar.MaxSupportedDateTime*>。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: HebrewCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定纪元中的指定年份的指定月份的天数。"
  remarks: "例如，此方法返回 29 或 30 Cheshvan，具体取决于犹太人假日的位置。       此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>"
  example:
  - "The following code example calls `GetDaysInMonth` for the second month in each of five years in each era.  \n  \n [!code-cs[System.Globalization.HebrewCalendar.GetDaysInMonth#1](~/add/codesnippet/csharp/5dbfbdd4-f075-4989-90c3-_1.cs)]\n [!code-cpp[System.Globalization.HebrewCalendar.GetDaysInMonth#1](~/add/codesnippet/cpp/5dbfbdd4-f075-4989-90c3-_1.cpp)]\n [!code-vb[System.Globalization.HebrewCalendar.GetDaysInMonth#1](~/add/codesnippet/visualbasic/5dbfbdd4-f075-4989-90c3-_1.vb)]"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "一个从 1 到 13 的整数，表示的月份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。 Specify either <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_Calendar.Eras[Calendar.CurrentEra]&quot; name=&quot;Calendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Int32
      description: "指定纪元中的指定年份中指定的月份的天数。"
  overload: System.Globalization.HebrewCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code><code>month</code>，或<code>era</code>超出了由当前支持的范围<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: HebrewCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定纪元中指定年份中的天数。"
  remarks: "例如，此方法返回一个整数 353 与 355 之间或 383 与 385 之间，具体取决于犹太人假日放置和具体取决于是否`year`是否为闰年。       此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>"
  example:
  - "The following code example calls `GetDaysInYear` for five years in each era.  \n  \n [!code-cpp[System.Globalization.HebrewCalendar_GetDaysInYear#1](~/add/codesnippet/cpp/m-system.globalization.h_15_1.cpp)]\n [!code-cs[System.Globalization.HebrewCalendar_GetDaysInYear#1](~/add/codesnippet/csharp/m-system.globalization.h_15_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_GetDaysInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.h_15_1.vb)]"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。 Specify either <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_HebrewCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;HebrewCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Int32
      description: "指定纪元中的指定年份的天数。"
  overload: System.Globalization.HebrewCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>或<code>era</code>超出了由当前支持的范围<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  id: GetEra(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetEra(DateTime)
  nameWithType: HebrewCalendar.GetEra(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetEra(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回在指定<xref:System.DateTime>。</xref:System.DateTime>纪元"
  remarks: '希伯来历识别两个纪元︰ B.C.E. （在之前基督纪元中） 到 a.m. （拉丁语系&quot;Anno Mundi&quot;，这意味着&quot;世界的年份&quot;）。 此实现的<xref:System.Globalization.HebrewCalendar>类识别当前纪元 （上午） 和希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>'
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hebrew calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_2_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_2_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_2_1.cpp)]"
  syntax:
    content: public override int GetEra (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个整数，表示在指定<xref:System.DateTime>。</xref:System.DateTime>纪元 返回值始终是<xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;> </xref>。"
  overload: System.Globalization.HebrewCalendar.GetEra*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: HebrewCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算指定的年和纪元的闰月。"
  remarks: "在日历中支持闰月的概念，在某个特定的月份之后或在每一年中的任何月份之后发生的闰月。 例如，<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法返回一个数字，介于 1 和 13，该值指示指定的日期与关联的月份。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> 如果一年中，在第八个和第 9 个月之间存在闰月<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法闰第八个月的 9 和 10 第 9 个月的第八个月份返回 8。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>"
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "每一年。"
    - id: era
      type: System.Int32
      description: "纪元。 Specify either <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_HebrewCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;HebrewCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Int32
      description: "一个正整数，该值指示指定的纪元年份中的闰月。 返回值为 7，如果<code> year </code>和<code> era </code>参数指定闰年，则为 0，如果年不是闰年。"
  overload: System.Globalization.HebrewCalendar.GetLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>era</code>is not <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_HebrewCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;HebrewCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>.       -或-<code>year</code>小于希伯来日历年，份 5343 或大于希伯来日历年 5999。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: HebrewCalendar.GetMonth(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "在指定<xref:System.DateTime>。</xref:System.DateTime>中返回的月份"
  remarks: ''
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hebrew calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_5_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_5_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_5_1.cpp)]"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个从 1 到 13 的整数，表示指定<xref:System.DateTime>.</xref:System.DateTime>中的每个月"
  overload: System.Globalization.HebrewCalendar.GetMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>是小于<xref:System.Globalization.HebrewCalendar.MinSupportedDateTime*>或大于<xref:System.Globalization.HebrewCalendar.MaxSupportedDateTime*>。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: HebrewCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回指定纪元中指定年份中的月数。"
  remarks: "此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>"
  example:
  - "The following code example calls `GetMonthsInYear` for five years in each era.  \n  \n [!code-vb[System.Globalization.HebrewCalendar.GetMonthsInYear#1](~/add/codesnippet/visualbasic/m-system.globalization.h_11_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar.GetMonthsInYear#1](~/add/codesnippet/cpp/m-system.globalization.h_11_1.cpp)]\n [!code-cs[System.Globalization.HebrewCalendar.GetMonthsInYear#1](~/add/codesnippet/csharp/m-system.globalization.h_11_1.cs)]"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。 Specify either <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_HebrewCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;HebrewCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Int32
      description: "指定纪元中的指定年份中的月数。 返回值在平年或 13 闰年中的为任一 12。"
  overload: System.Globalization.HebrewCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>或<code>era</code>超出了由当前支持的范围<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: HebrewCalendar.GetYear(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回年份中指定<xref:System.DateTime>值。</xref:System.DateTime>"
  remarks: "此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>"
  example:
  - "The following code example displays the values of several components of a <xref:System.DateTime> in terms of the Hebrew calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/csharp/m-system.globalization.h_10_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/visualbasic/m-system.globalization.h_10_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_AddGet#1](~/add/codesnippet/cpp/m-system.globalization.h_10_1.cpp)]"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个整数，表示的年份中指定<xref:System.DateTime>值。</xref:System.DateTime>"
  overload: System.Globalization.HebrewCalendar.GetYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>超出了由当前支持的范围<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.HebrewEra
  id: HebrewEra
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: HebrewEra
  nameWithType: HebrewCalendar.HebrewEra
  fullName: System.Globalization.HebrewCalendar.HebrewEra
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "表示当前纪元。 此字段为常数。"
  remarks: "此字段的值为 1。       希伯来历识别两个纪元︰ B.C.E. （在之前基督纪元中） 到 a.m. （拉丁语系&quot;Anno Mundi&quot;，这意味着&quot;世界的年份&quot;）。 此实现的<xref:System.Globalization.HebrewCalendar>类识别当前纪元 （上午）。</xref:System.Globalization.HebrewCalendar>"
  syntax:
    content: public static readonly int HebrewEra;
    return:
      type: System.Int32
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: HebrewCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定纪元中指定的日期是否为闰日。"
  remarks: "此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>       在通过 19、 第三、 6、 8、 11、 14 整除的年份结束每个 19 年周期，17，和 19 年是闰年。 平年可能有 353 到 355 天，具体取决于犹太人假日的位置。 闰年可以有 383 到 385 天。       闰日是仅在闰年中发生了一天。 在希伯来历，天 leap 闰阿达尔 Alef 及其所有被视为闰阿达尔月中的日期的最后一天。"
  example:
  - "The following code example calls `IsLeapDay` for the last day of the second month (February) for five years in each of the eras.  \n  \n [!code-vb[System.Globalization.HebrewCalendar.IsLeapDay#1](~/add/codesnippet/visualbasic/38cad6f1-3b2e-4eba-a2c2-_1.vb)]\n [!code-cs[System.Globalization.HebrewCalendar.IsLeapDay#1](~/add/codesnippet/csharp/38cad6f1-3b2e-4eba-a2c2-_1.cs)]\n [!code-cpp[System.Globalization.HebrewCalendar.IsLeapDay#1](~/add/codesnippet/cpp/38cad6f1-3b2e-4eba-a2c2-_1.cpp)]"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "一个从 1 到 13 的整数，表示的月份。"
    - id: day
      type: System.Int32
      description: "一个从 1 到 30 的整数，表示日期。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。 Specify either <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_HebrewCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;HebrewCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>.."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的日期是闰日，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.HebrewCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code><code>month</code>， <code>day</code>，或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: HebrewCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定纪元中的指定年份中的指定的月份是否为闰月。"
  remarks: "此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>       在通过 19、 第三、 6、 8、 11、 14 整除的年份结束每个 19 年周期，17，和 19 年是闰年。 平年可能有 353 到 355 天，具体取决于犹太人假日的位置。 闰年可以有 383 到 385 天。       闰月是仅在闰年中发生的整月。 在希伯来历中，闰阿达尔月是唯一的闰月。"
  example:
  - "The following code example calls `IsLeapMonth` for all the months in five years in the current era.  \n  \n [!code-cpp[System.Globalization.HebrewCalendar.IsLeapMonth#1](~/add/codesnippet/cpp/d066565d-c7e6-4287-a20b-_1.cpp)]\n [!code-cs[System.Globalization.HebrewCalendar.IsLeapMonth#1](~/add/codesnippet/csharp/d066565d-c7e6-4287-a20b-_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar.IsLeapMonth#1](~/add/codesnippet/visualbasic/d066565d-c7e6-4287-a20b-_1.vb)]"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "一个从 1 到 13 的整数，表示的月份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。 Specify either <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_HebrewCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;HebrewCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的月份是闰月;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.HebrewCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code><code>month</code>，或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: HebrewCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定纪元中的指定的年份是否为闰年。"
  remarks: "此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>       在通过 19、 第三、 6、 8、 11、 14 整除的年份结束每个 19 年周期，17，和 19 年是闰年。 平年可能有 353 到 355 天，具体取决于犹太人假日的位置。 闰年可以有 383 到 385 天。"
  example:
  - "The following code example calls `IsLeapYear` for five years in each of the eras.  \n  \n [!code-cs[System.Globalization.HebrewCalendar.IsLeapYear#1](~/add/codesnippet/csharp/m-system.globalization.h_1_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar.IsLeapYear#1](~/add/codesnippet/visualbasic/m-system.globalization.h_1_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar.IsLeapYear#1](~/add/codesnippet/cpp/m-system.globalization.h_1_1.cpp)]"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。 Specify either <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_HebrewCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;HebrewCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的年是闰年，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.HebrewCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.MaxSupportedDateTime
  id: MaxSupportedDateTime
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: MaxSupportedDateTime
  nameWithType: HebrewCalendar.MaxSupportedDateTime
  fullName: System.Globalization.HebrewCalendar.MaxSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取最新的日期和时间受<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>类型。"
  remarks: ''
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.h_5_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.h_5_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.h_5_1.cpp)]"
  syntax:
    content: public override DateTime MaxSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最新的日期和时间受<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>类型，这等同于 9 月，29，2239 公元的那一刻 在公历日历中。"
  overload: System.Globalization.HebrewCalendar.MaxSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.MinSupportedDateTime
  id: MinSupportedDateTime
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: MinSupportedDateTime
  nameWithType: HebrewCalendar.MinSupportedDateTime
  fullName: System.Globalization.HebrewCalendar.MinSupportedDateTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取最早的日期和时间受<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>类型。"
  remarks: "Microsoft Visual Basic 表示作为上支持的<xref:System.DateTime>类型，即公元 0001 年 1 月 1 日</xref:System.DateTime>的最小日期的指定时间的一天的时间 但是，<xref:System.Globalization.HebrewCalendar>类型不支持该最小日期。</xref:System.Globalization.HebrewCalendar> 因此，如果调用方法，以设置使用当前日历时间的格式，但未指定的格式说明符，则格式设置将使用 ISO 8601 可排序的 (&quot;s&quot;) 日期/时间模式而不是默认常规 (&quot;G&quot;) 日期/时间模式格式说明符的格式说明符。 有关详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example gets the minimum value and the maximum value of the calendar.  \n  \n [!code-cs[System.Globalization.HebrewCalendar_MinMax#1](~/add/codesnippet/csharp/p-system.globalization.h_4_1.cs)]\n [!code-vb[System.Globalization.HebrewCalendar_MinMax#1](~/add/codesnippet/visualbasic/p-system.globalization.h_4_1.vb)]\n [!code-cpp[System.Globalization.HebrewCalendar_MinMax#1](~/add/codesnippet/cpp/p-system.globalization.h_4_1.cpp)]"
  syntax:
    content: public override DateTime MinSupportedDateTime { get; }
    return:
      type: System.DateTime
      description: "最早的日期和时间受<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>类型，等效于年 1 月，1，1583 公元的那一刻 在公历日历中。"
  overload: System.Globalization.HebrewCalendar.MinSupportedDateTime*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: HebrewCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回<xref:System.DateTime>它被设置为指定的日期和指定纪元中的时间。</xref:System.DateTime>"
  remarks: "都传递很有用，因为它可以将当前日历中的任何日期转换为公历日期。 公历日期可以随后用于，例如，比较不同日历中的日期或在特定日历中创建等效的日期。       此实现的<xref:System.Globalization.HebrewCalendar>类识别希伯来年份 5343 至 5999 (即公历 1583年至 2239)。</xref:System.Globalization.HebrewCalendar>"
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "一个从 1 到 13 的整数，表示的月份。"
    - id: day
      type: System.Int32
      description: "一个从 1 到 30 的整数，表示日期。"
    - id: hour
      type: System.Int32
      description: "一个从 0 到 23 之间的整数，表示小时。"
    - id: minute
      type: System.Int32
      description: "从 0 到 59 之间的整数，表示分钟。"
    - id: second
      type: System.Int32
      description: "从 0 到 59 之间的整数，表示第二个。"
    - id: millisecond
      type: System.Int32
      description: "从 0 到 999 之间的整数，表示毫秒。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。 Specify either <xref href=&quot;System.Globalization.HebrewCalendar.HebrewEra&quot;></xref> or <xref uid=&quot;langword_csharp_HebrewCalendar.Eras[Calendar.CurrentEra]&quot; name=&quot;HebrewCalendar.Eras[Calendar.CurrentEra]&quot; href=&quot;&quot;></xref>."
    return:
      type: System.DateTime
      description: "<xref:System.DateTime>，设置为指定的日期和时间以当前纪元。</xref:System.DateTime>"
  overload: System.Globalization.HebrewCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code><code>month</code>，<code>day</code>或<code>era</code>超出了由当前支持的范围<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>对象。       -或-<code>hour</code>小于 0 或大于 23。       -或-<code>minute</code>小于 0 或大于 59。       -或-<code>second</code>小于 0 或大于 59。       -或-<code>millisecond</code>小于 0 或大于 999。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: HebrewCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.HebrewCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "将指定的年份转换为四位数年份，通过使用<xref:System.Globalization.HebrewCalendar.TwoDigitYearMax*>属性来确定相应的纪元。</xref:System.Globalization.HebrewCalendar.TwoDigitYearMax*>"
  remarks: "ToFourDigitYear 方法使用`year`参数，<xref:System.Globalization.HebrewCalendar.TwoDigitYearMax%2A>属性，并且要计算的 4 位数年份年份。</xref:System.Globalization.HebrewCalendar.TwoDigitYearMax%2A> 通过查找的唯一匹配项来确定世纪`year`该 100 年范围内的参数。 例如，如果<xref:System.Globalization.HebrewCalendar.TwoDigitYearMax%2A>设置为 5729，则 100 年范围是从 5630 为 5729。</xref:System.Globalization.HebrewCalendar.TwoDigitYearMax%2A> 因此，值为 30 被解释为 5630，而值为 29 被解释为 5729。       如果<xref:System.Globalization.HebrewCalendar.TwoDigitYearMax%2A>属性具有特殊值 99、 ToFourDigitYear 方法将忽略区域中的设置和语言选项控制面板中，并返回的值`year`参数保持不变。</xref:System.Globalization.HebrewCalendar.TwoDigitYearMax%2A>       ToFourDigitYear 支持两位数年份或四位数年份。 将两位数年份值 (小于 100) 传递会导致方法的值转换为一个四位数字值根据<xref:System.Globalization.HebrewCalendar.TwoDigitYearMax%2A>值，该值表示相应的纪元。</xref:System.Globalization.HebrewCalendar.TwoDigitYearMax%2A> 如果应用程序提供在 ToFourDigitYear 到了受支持的日历的范围内的四位数年份值，该方法将返回实际的输入的值。 如果应用程序提供一个四位数字值超出了支持的日历，或者它提供了负值，则该方法将引发异常。"
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "一个从 0 到 99 或希伯来 5343 到 5999 的日历年 4 位数字的两位数年份。"
    return:
      type: System.Int32
      description: "如果<code> year </code>参数是两位数年份，返回值是相应的四位数年份。 如果<code> year </code>参数为四位数年份时，返回的值保持不变<code> year </code>参数。"
  overload: System.Globalization.HebrewCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>小于 0。       -<code>year</code>是小于<xref:System.Globalization.HebrewCalendar.MinSupportedDateTime*>或大于<xref:System.Globalization.HebrewCalendar.MaxSupportedDateTime*>。"
  platform:
  - net462
- uid: System.Globalization.HebrewCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.HebrewCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: HebrewCalendar.TwoDigitYearMax
  fullName: System.Globalization.HebrewCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取或设置可以用两位数年份表示的 100 年范围内的最后一年。"
  remarks: "TwoDigitYearMax 属性允许将两位数年份正确转换为四位数年份。 例如，如果此属性设置为 5729，100 年范围是从 5630 年为 5729。 因此，为 30 的 2 位值被解释为 5630，而 29 一个 2 位数字值被解释为 5729。       此属性的初始值被派生自控制面板的区域和语言选项部分中的设置。 如果初始系统设置更改你的应用程序的生命周期内<xref:System.Globalization.HebrewCalendar>类不会自动检测更改。</xref:System.Globalization.HebrewCalendar>       这两个特殊值 99 使<xref:System.Globalization.HebrewCalendar.ToFourDigitYear%2A>方法以忽略系统设置并返回指定的年保持不变。</xref:System.Globalization.HebrewCalendar.ToFourDigitYear%2A>"
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "可以用两位数年份表示的 100 年范围内的最后一年。"
  overload: System.Globalization.HebrewCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前<xref href=&quot;System.Globalization.HebrewCalendar&quot;></xref>对象是只读的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中，希伯来日历年值是小于 5343 但不是 99，或年份值大于 5999。"
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.HebrewCalendar.#ctor
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: HebrewCalendar()
  nameWithType: HebrewCalendar.HebrewCalendar()
  fullName: System.Globalization.HebrewCalendar.HebrewCalendar()
- uid: System.Globalization.HebrewCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: HebrewCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.HebrewCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.HebrewCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: HebrewCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.HebrewCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.HebrewCalendar.AlgorithmType
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: HebrewCalendar.AlgorithmType
  fullName: System.Globalization.HebrewCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.HebrewCalendar.Eras
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: Eras
  nameWithType: HebrewCalendar.Eras
  fullName: System.Globalization.HebrewCalendar.Eras
- uid: System.Int32[]
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32[]
  spec.csharp:
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.HebrewCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: HebrewCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.HebrewCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: HebrewCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.HebrewCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: HebrewCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.HebrewCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: HebrewCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.HebrewCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: HebrewCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.HebrewCalendar.GetEra(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetEra(DateTime)
  nameWithType: HebrewCalendar.GetEra(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetEra(DateTime)
- uid: System.Globalization.HebrewCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: HebrewCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.HebrewCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: HebrewCalendar.GetMonth(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetMonth(DateTime)
- uid: System.Globalization.HebrewCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: HebrewCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.HebrewCalendar.GetYear(System.DateTime)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: HebrewCalendar.GetYear(DateTime)
  fullName: System.Globalization.HebrewCalendar.GetYear(DateTime)
- uid: System.Globalization.HebrewCalendar.HebrewEra
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: HebrewEra
  nameWithType: HebrewCalendar.HebrewEra
  fullName: System.Globalization.HebrewCalendar.HebrewEra
- uid: System.Globalization.HebrewCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: HebrewCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.HebrewCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: HebrewCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.HebrewCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: HebrewCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.HebrewCalendar.MaxSupportedDateTime
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: HebrewCalendar.MaxSupportedDateTime
  fullName: System.Globalization.HebrewCalendar.MaxSupportedDateTime
- uid: System.Globalization.HebrewCalendar.MinSupportedDateTime
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: HebrewCalendar.MinSupportedDateTime
  fullName: System.Globalization.HebrewCalendar.MinSupportedDateTime
- uid: System.Globalization.HebrewCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: HebrewCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.HebrewCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.HebrewCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: HebrewCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.HebrewCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.HebrewCalendar.TwoDigitYearMax
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: HebrewCalendar.TwoDigitYearMax
  fullName: System.Globalization.HebrewCalendar.TwoDigitYearMax
- uid: System.Globalization.HebrewCalendar.#ctor*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: HebrewCalendar
  nameWithType: HebrewCalendar.HebrewCalendar
- uid: System.Globalization.HebrewCalendar.AddMonths*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: AddMonths
  nameWithType: HebrewCalendar.AddMonths
- uid: System.Globalization.HebrewCalendar.AddYears*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: AddYears
  nameWithType: HebrewCalendar.AddYears
- uid: System.Globalization.HebrewCalendar.AlgorithmType*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: HebrewCalendar.AlgorithmType
- uid: System.Globalization.HebrewCalendar.Eras*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: Eras
  nameWithType: HebrewCalendar.Eras
- uid: System.Globalization.HebrewCalendar.GetDayOfMonth*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: HebrewCalendar.GetDayOfMonth
- uid: System.Globalization.HebrewCalendar.GetDayOfWeek*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: HebrewCalendar.GetDayOfWeek
- uid: System.Globalization.HebrewCalendar.GetDayOfYear*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: HebrewCalendar.GetDayOfYear
- uid: System.Globalization.HebrewCalendar.GetDaysInMonth*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: HebrewCalendar.GetDaysInMonth
- uid: System.Globalization.HebrewCalendar.GetDaysInYear*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: HebrewCalendar.GetDaysInYear
- uid: System.Globalization.HebrewCalendar.GetEra*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetEra
  nameWithType: HebrewCalendar.GetEra
- uid: System.Globalization.HebrewCalendar.GetLeapMonth*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: HebrewCalendar.GetLeapMonth
- uid: System.Globalization.HebrewCalendar.GetMonth*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetMonth
  nameWithType: HebrewCalendar.GetMonth
- uid: System.Globalization.HebrewCalendar.GetMonthsInYear*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: HebrewCalendar.GetMonthsInYear
- uid: System.Globalization.HebrewCalendar.GetYear*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: GetYear
  nameWithType: HebrewCalendar.GetYear
- uid: System.Globalization.HebrewCalendar.IsLeapDay*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: HebrewCalendar.IsLeapDay
- uid: System.Globalization.HebrewCalendar.IsLeapMonth*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: HebrewCalendar.IsLeapMonth
- uid: System.Globalization.HebrewCalendar.IsLeapYear*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: HebrewCalendar.IsLeapYear
- uid: System.Globalization.HebrewCalendar.MaxSupportedDateTime*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: MaxSupportedDateTime
  nameWithType: HebrewCalendar.MaxSupportedDateTime
- uid: System.Globalization.HebrewCalendar.MinSupportedDateTime*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: MinSupportedDateTime
  nameWithType: HebrewCalendar.MinSupportedDateTime
- uid: System.Globalization.HebrewCalendar.ToDateTime*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: HebrewCalendar.ToDateTime
- uid: System.Globalization.HebrewCalendar.ToFourDigitYear*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: HebrewCalendar.ToFourDigitYear
- uid: System.Globalization.HebrewCalendar.TwoDigitYearMax*
  parent: System.Globalization.HebrewCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: HebrewCalendar.TwoDigitYearMax
