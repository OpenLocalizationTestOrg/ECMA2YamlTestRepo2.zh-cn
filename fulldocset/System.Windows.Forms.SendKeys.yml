### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.SendKeys
  id: SendKeys
  children:
  - System.Windows.Forms.SendKeys.Flush
  - System.Windows.Forms.SendKeys.Send(System.String)
  - System.Windows.Forms.SendKeys.SendWait(System.String)
  langs:
  - csharp
  name: SendKeys
  nameWithType: SendKeys
  fullName: System.Windows.Forms.SendKeys
  type: Class
  summary: "提供将击键发送到应用程序的方法。"
  remarks: "使用 SendKeys 发送键击和击键组合到活动的应用程序。 此类不能实例化。 将击键发送到的类，并立即继续执行程序的流，请使用<xref:System.Windows.Forms.SendKeys.Send%2A>.</xref:System.Windows.Forms.SendKeys.Send%2A> 若要等待启动的键击任何进程，请使用<xref:System.Windows.Forms.SendKeys.SendWait%2A>。</xref:System.Windows.Forms.SendKeys.SendWait%2A>       每个键是由一个或多个字符表示。 若要指定单个键盘字符，使用该字符本身。 例如，若要表示字母 A，请将&quot;A&quot;的字符串传递给方法。 若要表示多个字符，附加到它之前每增加一个字符。 若要表示字母 A、 B 和 C，请将参数指定为&quot;ABC&quot;。       加号 （+）、 脱字号 (^)、 百分号 （%）、 波形符 （~） 和括号 （） 具有到 SendKeys 的特殊含义。 若要指定这些字符之一，请将其括在大括号 （{}） 内。 例如，若要指定加号，使用&quot;{+}&quot;。 若要指定大括号字符、 使用&quot;{{}&quot;和&quot;{}}&quot;。 方括号 ([]) 具有到 SendKeys，没有特殊含义，但必须将它们括在大括号中。 在其他应用程序，方括号有可能会很明显，动态数据交换 (DDE) 发生时具有特殊含义。      1> [!CAUTION]&1;> 如果你的应用程序旨在用于全球各种键盘，使用<xref:System.Windows.Forms.SendKeys.Send%2A>可能会产生不可预知的结果，应当避免。</xref:System.Windows.Forms.SendKeys.Send%2A>       若要指定在按下一个键，如 ENTER 或选项卡上，以及密钥表示操作，而不是字符，不显示的字符使用下表中的代码。      |密钥 |代码 |  |---------|----------|  |退格符 |{退格符}，{BS} 或 {BKSP} |  |中断 |{中断} |  |CAPS LOCK |{CAPSLOCK} |  |DEL 或 DELETE |{删除} 或 {DEL} |  |向下箭头 |{向下} |  |结束 |{结束} |  |输入 |{输入} 或 ~ |  |ESC |{ESC} |  |帮助 |{帮助} |  |主页 |{主页} |  |单元或插入 |{插入} 或 {单元} |  |向的左键 |{LEFT} |  |NUM LOCK |{NUMLOCK} |  |向下翻页 |{PGDN} |  |向上翻页 |{PGUP} |  |打印屏幕 |{PRTSC}（保留供将来使用） |  |右箭头 |{RIGHT} |  |SCROLL LOCK |{SCROLLLOCK} |  |选项卡 |{选项卡} |  |向上键 |{最多} |  |F1 |{F1} |  |F2 |{F2} |  |F3 |{F3} |  |F4 |{F4} |  |F5 |{F5} |  |F6 |{F6} |  |F7 |{F7} |  |F8 |{F8} |  |F9 |{F9} |  |F10 |{F10} |  |F11 |{F11} |  |F12 |{F12} |  |F13 |{F13} |  |F14 |{F14} |  |F15 |{F15} |  |F16 |{F16} |  |键盘添加 |{添加} |  |数字键盘减号 |{减去} |  |数字键盘乘号 |{乘} |  |数字键盘除号 |{划分} |      若要指定结合 SHIFT、 CTRL 和 ALT 键的任意组合的密钥，在前面使用一个或多个以下的代码的键代码。      |密钥 |代码 |  |---------|----------|  |SHIFT | + |  |CTRL | ^ |  |ALT | %|      若要指定 SHIFT、 CTRL 和 ALT 的任意组合当按下了几个其他键按住，将这些密钥的代码在括号中。 例如，若要指定以按住 SHIFT 并按下 E 和 C，使用&quot;+ (EC)&quot;。 若要指定以按住 SHIFT 并按 E 下跟 C 而无需 shift 键，使用&quot;+ EC&quot;。       若要指定重复键，使用窗体 {密钥号}。 你必须放置键和数字之间留一个空格。 例如，{左 42} 表示 42 时间; 同时按左箭头键{h 10} 意味着的按 H 10 倍。      1> [!NOTE]&1;> 由于没有激活其他应用程序的托管的方法，你可以使用当前应用程序中的此类，或者使用本机 Windows 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。      1> [!NOTE] 1> SendKeys 类已更新为.NET Framework 3.0，从而可用于在 Windows Vista 运行的应用程序。 增强的安全性的 Windows Vista （称为用户帐户控件或 UAC） 可防止在按预期方式工作从以前的实现。   >> SendKeys 类是容易遭受某些开发人员不得不解决的计时问题。 更新后的实现仍然容易计时问题，但速度稍微快一些，可能需要更改解决方法。 SendKeys 类先尝试使用以前的实现，并且如果失败，使用新的实现。 因此，SendKeys 类可能以不同方式行为，在不同操作系统上。 此外，当 SendKeys 类使用的新实现，<xref:System.Windows.Forms.SendKeys.SendWait%2A>方法不会等到消息被处理后发送到另一个进程。</xref:System.Windows.Forms.SendKeys.SendWait%2A>   >> 如果你的应用程序依赖于一致的行为，无论操作系统，你可以强制 SendKeys 类通过将以下应用程序设置添加到 app.config 文件中使用的新实现。   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> 若要强制 SendKeys 类以使用以前的实现，使用值`&quot;JournalHook&quot;`相反。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Windows.Forms.SendKeys.Send%2A> method. To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/t-system.windows.forms.s_16_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/t-system.windows.forms.s_16_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/t-system.windows.forms.s_16_1.vb)]"
  syntax:
    content: public class SendKeys
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Flush
  id: Flush
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "处理当前在消息队列中的所有 Windows 消息。"
  remarks: "使用刷新等待处理的键击和其他操作系统的消息的消息队列应用程序。 这是等效于调用<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>直到没有任何要处理的多个密钥。</xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=fullName>      1> [!NOTE]&1;> 由于没有激活其他应用程序的托管的方法，你可以使用当前应用程序中的此类，或者使用本机 Windows 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。"
  syntax:
    content: public static void Flush ();
    parameters: []
  overload: System.Windows.Forms.SendKeys.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  id: Send(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将击键发送到活动的应用程序。"
  remarks: "每个键是由一个或多个字符表示。 若要指定单个键盘字符，使用该字符本身。 例如，若要表示字母 A，请将&quot;A&quot;的字符串传递给方法。 若要表示多个字符，附加到它之前每增加一个字符。 若要表示字母 A、 B 和 C，请将参数指定为&quot;ABC&quot;。       加号 （+）、 脱字号 (^)、 百分号 （%）、 波形符 （~） 和括号 （） 具有特殊含义到<xref:System.Windows.Forms.SendKeys>。</xref:System.Windows.Forms.SendKeys> 若要指定这些字符之一，请将其括在大括号 （{}） 内。 例如，若要指定加号，使用&quot;{+}&quot;。 若要指定大括号字符、 使用&quot;{{}&quot;和&quot;{}}&quot;。 方括号 ([]) 具有到没有特殊含义<xref:System.Windows.Forms.SendKeys>，但你必须将它们括在大括号中。</xref:System.Windows.Forms.SendKeys> 在其他应用程序，方括号有可能会很明显，动态数据交换 (DDE) 发生时具有特殊含义。      1> [!CAUTION]&1;> 如果你的应用程序旨在用于全球各种键盘，发送的使用可能会产生不可预知的结果，应当避免。       若要指定在按下一个键，如 ENTER 或选项卡上，以及密钥表示操作，而不是字符，不显示的字符使用下表中的代码。      |密钥 |代码 |  |---------|----------|  |退格符 |{退格符}，{BS} 或 {BKSP} |  |中断 |{中断} |  |CAPS LOCK |{CAPSLOCK} |  |DEL 或 DELETE |{删除} 或 {DEL} |  |向下箭头 |{向下} |  |结束 |{结束} |  |输入 |{输入} 或 ~ |  |ESC |{ESC} |  |帮助 |{帮助} |  |主页 |{主页} |  |单元或插入 |{插入} 或 {单元} |  |向的左键 |{LEFT} |  |NUM LOCK |{NUMLOCK} |  |向下翻页 |{PGDN} |  |向上翻页 |{PGUP} |  |打印屏幕 |{PRTSC}（保留供将来使用） |  |右箭头 |{RIGHT} |  |SCROLL LOCK |{SCROLLLOCK} |  |选项卡 |{选项卡} |  |向上键 |{最多} |  |F1 |{F1} |  |F2 |{F2} |  |F3 |{F3} |  |F4 |{F4} |  |F5 |{F5} |  |F6 |{F6} |  |F7 |{F7} |  |F8 |{F8} |  |F9 |{F9} |  |F10 |{F10} |  |F11 |{F11} |  |F12 |{F12} |  |F13 |{F13} |  |F14 |{F14} |  |F15 |{F15} |  |F16 |{F16} |  |键盘添加 |{添加} |  |数字键盘减号 |{减去} |  |数字键盘乘号 |{乘} |  |数字键盘除号 |{划分} |      若要指定结合 SHIFT、 CTRL 和 ALT 键的任意组合的密钥，在前面使用一个或多个以下的代码的键代码。      |密钥 |代码 |  |---------|----------|  |SHIFT | + |  |CTRL | ^ |  |ALT | %|      若要指定 SHIFT、 CTRL 和 ALT 的任意组合当按下了几个其他键按住，将这些密钥的代码在括号中。 例如，若要指定以按住 SHIFT 并按下 E 和 C，使用&quot;+ (EC)&quot;。 若要指定以按住 SHIFT 并按 E 下跟 C 而无需 shift 键，使用&quot;+ EC&quot;。       若要指定重复键，使用窗体 {密钥号}。 你必须放置键和数字之间留一个空格。 例如，{左 42} 表示 42 时间; 同时按左箭头键{h 10} 意味着的按 H 10 倍。      1> [!NOTE]&1;> 由于没有激活其他应用程序的托管的方法，你可以使用当前应用程序中的此类，或者使用本机 Windows 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。      1> [!NOTE] 1><xref:System.Windows.Forms.SendKeys>类已更新为.NET Framework 3.0，从而可用于在 Windows Vista 运行的应用程序。</xref:System.Windows.Forms.SendKeys> 增强的安全性的 Windows Vista （称为用户帐户控件或 UAC） 可防止在按预期方式工作从以前的实现。   >><xref:System.Windows.Forms.SendKeys>类是容易遭受某些开发人员不得不解决的计时问题。</xref:System.Windows.Forms.SendKeys> 更新后的实现仍然容易计时问题，但速度稍微快一些，可能需要更改解决方法。 <xref:System.Windows.Forms.SendKeys>类先尝试使用以前的实现，并且如果失败，使用新的实现。</xref:System.Windows.Forms.SendKeys> 因此，<xref:System.Windows.Forms.SendKeys>类在不同操作系统上行为可能不同。</xref:System.Windows.Forms.SendKeys> 此外，当<xref:System.Windows.Forms.SendKeys>类使用的新实现，<xref:System.Windows.Forms.SendKeys.SendWait%2A>方法不会等到消息被处理后发送到另一个进程。</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys>   >> 如果你的应用程序依赖于一致的行为，无论操作系统，你可以强制<xref:System.Windows.Forms.SendKeys>类通过将以下应用程序设置添加到 app.config 文件中使用的新实现。</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> 强制<xref:System.Windows.Forms.SendKeys>类以使用以前的实现，请使用值`&quot;JournalHook&quot;`相反。</xref:System.Windows.Forms.SendKeys>"
  example:
  - "The following code example demonstrates how to use the Send method.To run the example, paste the following code in a form called Form1 containing a button called Button1. Ensure the click events are associated with their event-handling methods in this example. The button control's <xref:System.Windows.Forms.Control.TabIndex%2A> property should be set to 0. When the example is running, double-click the form to trigger the button's click event.  \n  \n [!code-cs[System.Windows.Forms.SendKeys#1](~/add/codesnippet/csharp/m-system.windows.forms.s_9_1.cs)]\n [!code-cpp[System.Windows.Forms.SendKeys#1](~/add/codesnippet/cpp/m-system.windows.forms.s_9_1.cpp)]\n [!code-vb[System.Windows.Forms.SendKeys#1](~/add/codesnippet/visualbasic/m-system.windows.forms.s_9_1.vb)]"
  syntax:
    content: public static void Send (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "要发送的击键字符串。"
  overload: System.Windows.Forms.SendKeys.Send*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有活动应用程序发送到的键击。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keys</code>不表示有效的键击"
  platform:
  - net462
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  id: SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  langs:
  - csharp
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "活动的应用程序，发送给定的键，然后等待要处理的消息。"
  remarks: "使用 SendWait 来向活动应用程序发送击键或的击键组合并等待击键消息被处理。 此方法可用于将击键发送到应用程序并等待通过击键完成启动任何进程。 这可能很重要，如果在你的应用程序可以继续之前，必须完成其他应用程序。      1> [!NOTE]&1;> 由于没有激活其他应用程序的托管的方法，你可以使用当前应用程序中的此类，或者使用本机 Windows 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。      1> [!NOTE] 1><xref:System.Windows.Forms.SendKeys>类已更新为.NET Framework 3.0，从而可用于在 Windows Vista 运行的应用程序。</xref:System.Windows.Forms.SendKeys> 增强的安全性的 Windows Vista （称为用户帐户控件或 UAC） 可防止在按预期方式工作从以前的实现。   >><xref:System.Windows.Forms.SendKeys>类是容易遭受某些开发人员不得不解决的计时问题。</xref:System.Windows.Forms.SendKeys> 更新后的实现仍然容易计时问题，但速度稍微快一些，可能需要更改解决方法。 <xref:System.Windows.Forms.SendKeys>类先尝试使用以前的实现，并且如果失败，使用新的实现。</xref:System.Windows.Forms.SendKeys> 因此，<xref:System.Windows.Forms.SendKeys>类在不同操作系统上行为可能不同。</xref:System.Windows.Forms.SendKeys> 此外，当<xref:System.Windows.Forms.SendKeys>类使用的新实现，SendWait 方法不会等到消息被处理后发送到另一个进程。</xref:System.Windows.Forms.SendKeys>   >> 如果你的应用程序依赖于一致的行为，无论操作系统，你可以强制<xref:System.Windows.Forms.SendKeys>类通过将以下应用程序设置添加到 app.config 文件中使用的新实现。</xref:System.Windows.Forms.SendKeys>   >> `<appSettings>` >> `<add key=&quot;SendKeys&quot; value=&quot;SendInput&quot;/>` >> `</appSettings>` >> 强制<xref:System.Windows.Forms.SendKeys>类以使用以前的实现，请使用值`&quot;JournalHook&quot;`相反。</xref:System.Windows.Forms.SendKeys>"
  syntax:
    content: public static void SendWait (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "要发送的击键字符串。"
  overload: System.Windows.Forms.SendKeys.SendWait*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.SendKeys.Flush
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush()
  nameWithType: SendKeys.Flush()
  fullName: System.Windows.Forms.SendKeys.Flush()
- uid: System.Windows.Forms.SendKeys.Send(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send(String)
  nameWithType: SendKeys.Send(String)
  fullName: System.Windows.Forms.SendKeys.Send(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.SendKeys.SendWait(System.String)
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait(String)
  nameWithType: SendKeys.SendWait(String)
  fullName: System.Windows.Forms.SendKeys.SendWait(String)
- uid: System.Windows.Forms.SendKeys.Flush*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Flush
  nameWithType: SendKeys.Flush
- uid: System.Windows.Forms.SendKeys.Send*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: Send
  nameWithType: SendKeys.Send
- uid: System.Windows.Forms.SendKeys.SendWait*
  parent: System.Windows.Forms.SendKeys
  isExternal: false
  name: SendWait
  nameWithType: SendKeys.SendWait
