### YamlMime:ManagedReference
items:
- uid: System.Windows.ComponentResourceKey
  id: ComponentResourceKey
  children:
  - System.Windows.ComponentResourceKey.#ctor
  - System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)
  - System.Windows.ComponentResourceKey.Assembly
  - System.Windows.ComponentResourceKey.Equals(System.Object)
  - System.Windows.ComponentResourceKey.GetHashCode
  - System.Windows.ComponentResourceKey.ResourceId
  - System.Windows.ComponentResourceKey.ToString
  - System.Windows.ComponentResourceKey.TypeInTargetAssembly
  langs:
  - csharp
  name: ComponentResourceKey
  nameWithType: ComponentResourceKey
  fullName: System.Windows.ComponentResourceKey
  type: Class
  summary: "定义或引用基于在外部程序集，以及其他标识符的类名称的资源键。"
  remarks: "有关[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]信息，请参阅[ComponentResourceKey 标记扩展](~/add/includes/ajax-current-ext-md.md)。       此类实现可用于创建基于中程序集以及一个标识符类型的键的对象类型。 因为你定义或引用的类型，不需要请求的特定<xref:System.Windows.ResourceDictionary>，和中的程序集，每个不同由其 ComponentResourceKey 类型可以存在多个组的资源。</xref:System.Windows.ResourceDictionary>       有两种方法来定义 ComponentResourceKey。       如果你想易于访问的键，可以在控件类代码返回 ComponentResourceKey，使用的<xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A>外部资源程序集和一种<xref:System.Windows.ComponentResourceKey.ResourceId%2A>。</xref:System.Windows.ComponentResourceKey.ResourceId%2A>中</xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A>构造上定义的静态属性 密钥可以用于通过交换原始外部资源程序集的一个自定义的程序集中定义控件的备用默认样式。 你还可以定义命名的资源部分中的较大控件样式或模板来公开自定义入口点。 这是特别有用，如果你正在为您的控件定义主题资源字典。       你还可以使用[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] [ComponentResourceKey 标记扩展](../Topic/ComponentResourceKey%20Markup%20Extension.md)in 详细语法直接创建密钥的松散实例。 这是你想要声明与得难于发现自定义其他程序集的专用资源的情况下很有用。      <a name=&quot;xamlTextUsage_ComponentResourceKey&quot;></a># # XAML 文本使用情况，请参阅备注"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.ComponentResourceKeyConverter))]

      public class ComponentResourceKey : System.Windows.ResourceKey
  inheritance:
  - System.Windows.Markup.MarkupExtension
  - System.Windows.ResourceKey
  implements: []
  inheritedMembers:
  - System.Windows.ResourceKey.ProvideValue(System.IServiceProvider)
  platform:
  - net462
- uid: System.Windows.ComponentResourceKey.#ctor
  id: '#ctor'
  parent: System.Windows.ComponentResourceKey
  langs:
  - csharp
  name: ComponentResourceKey()
  nameWithType: ComponentResourceKey.ComponentResourceKey()
  fullName: System.Windows.ComponentResourceKey.ComponentResourceKey()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.ComponentResourceKey&quot;></xref>类。"
  remarks: "默认构造函数通常不使用，因为<xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A>值和<xref:System.Windows.ComponentResourceKey.ResourceId%2A>值所需的正确初始化。</xref:System.Windows.ComponentResourceKey.ResourceId%2A> </xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A> 默认构造函数存在主要是为了支持[ComponentResourceKey 标记扩展](~/add/includes/ajax-current-ext-md.md)命名的参数形式的 XAML 用法。"
  syntax:
    content: public ComponentResourceKey ();
    parameters: []
  overload: System.Windows.ComponentResourceKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)
  id: '#ctor(System.Type,System.Object)'
  parent: System.Windows.ComponentResourceKey
  langs:
  - csharp
  name: ComponentResourceKey(Type,Object)
  nameWithType: ComponentResourceKey.ComponentResourceKey(Type,Object)
  fullName: System.Windows.ComponentResourceKey.ComponentResourceKey(Type,Object)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.ComponentResourceKey&quot;> </xref> ，并指定<xref:System.Type>，它定义了密钥，并要使用与其他资源标识符的对象。</xref:System.Type>"
  remarks: "此构造函数存在两个方案，其中最重要的第一个方案:-创建<xref:System.Windows.ComponentResourceKey>，然后公开作为自定义控件类的公共静态字段</xref:System.Windows.ComponentResourceKey>的支持 这简化了对其自己通过模板中定义的资源的控件的访问`{x:Static}`模板属性值的用法。      -支持[ComponentResourceKey 标记扩展](~/add/includes/ajax-current-ext-md.md)位置参数形式，这是一种方法可用于引用组件资源的第三方的 XAML 用法。"
  example:
  - "The following example creates a <xref:System.Windows.ComponentResourceKey> that is then exposed as a static key of a control class to provide a style customization entry point.  \n  \n [!code-cs[CorePseudocode#CRKCode](~/add/codesnippet/csharp/CorePseudocode/corepseudocode.cs#crkcode)]\n [!code-vb[CorePseudocode#CRKCode](~/add/codesnippet/visualbasic/corepseudocode/corepseudocode.vb#crkcode)]"
  syntax:
    content: public ComponentResourceKey (Type typeInTargetAssembly, object resourceId);
    parameters:
    - id: typeInTargetAssembly
      type: System.Type
      description: "定义的资源键的类型。"
    - id: resourceId
      type: System.Object
      description: "唯一标识符来区分这<xref href=&quot;System.Windows.ComponentResourceKey&quot;></xref>与其他关联`typeInTargetAssembly`类型。"
  overload: System.Windows.ComponentResourceKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ComponentResourceKey.Assembly
  id: Assembly
  parent: System.Windows.ComponentResourceKey
  langs:
  - csharp
  name: Assembly
  nameWithType: ComponentResourceKey.Assembly
  fullName: System.Windows.ComponentResourceKey.Assembly
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取指示哪些程序集的字典查找与此密钥关联的值的程序集对象。"
  syntax:
    content: public override System.Reflection.Assembly Assembly { get; }
    return:
      type: System.Reflection.Assembly
      description: "检索到的程序集，作为反射类。"
  overload: System.Windows.ComponentResourceKey.Assembly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ComponentResourceKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.ComponentResourceKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ComponentResourceKey.Equals(Object)
  fullName: System.Windows.ComponentResourceKey.Equals(Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "确定所提供的对象是否等于当前<xref href=&quot;System.Windows.ComponentResourceKey&quot;> </xref>。"
  remarks: "两个键是否相等，如果它们都具有相同的值为所有其立即可设置属性 (<xref:System.Windows.ComponentResourceKey.ResourceId%2A>， <xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A>)。</xref:System.Windows.ComponentResourceKey.TypeInTargetAssembly%2A> </xref:System.Windows.ComponentResourceKey.ResourceId%2A>"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "要与当前比较对象<xref href=&quot;System.Windows.ComponentResourceKey&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果对象相等，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.ComponentResourceKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ComponentResourceKey.GetHashCode
  id: GetHashCode
  parent: System.Windows.ComponentResourceKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ComponentResourceKey.GetHashCode()
  fullName: System.Windows.ComponentResourceKey.GetHashCode()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回此哈希代码<xref href=&quot;System.Windows.ComponentResourceKey&quot;> </xref>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "一个 32 位有符号的整数值。"
  overload: System.Windows.ComponentResourceKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ComponentResourceKey.ResourceId
  id: ResourceId
  parent: System.Windows.ComponentResourceKey
  langs:
  - csharp
  name: ResourceId
  nameWithType: ComponentResourceKey.ResourceId
  fullName: System.Windows.ComponentResourceKey.ResourceId
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置要将此密钥与其他人与此类型关联区分开来的唯一标识符。"
  remarks: "有关[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]信息，请参阅[ComponentResourceKey 标记扩展](~/add/includes/ajax-current-ext-md.md)。       通常情况下，该字符串用于 ResourceId 值符合[XamlName 语法](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlTextUsage_2&quot;></a># # XAML 文本使用情况，请参阅备注"
  example:
  - "The following example shows how to use the ResourceId to differentiate this key from others associated with this type.  \n  \n [!code-xml[ColorPicker_snip#SliderStyle](~/add/codesnippet/xaml/ColorPickerLib/Themes/generic.xaml#sliderstyle)]"
  syntax:
    content: public object ResourceId { get; set; }
    return:
      type: System.Object
      description: "唯一的标识符。 通常，这是一个字符串。"
  overload: System.Windows.ComponentResourceKey.ResourceId*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ComponentResourceKey.ToString
  id: ToString
  parent: System.Windows.ComponentResourceKey
  langs:
  - csharp
  name: ToString()
  nameWithType: ComponentResourceKey.ToString()
  fullName: System.Windows.ComponentResourceKey.ToString()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取的字符串表示形式<xref href=&quot;System.Windows.ComponentResourceKey&quot;> </xref>。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "字符串表示形式。"
  overload: System.Windows.ComponentResourceKey.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.ComponentResourceKey.TypeInTargetAssembly
  id: TypeInTargetAssembly
  parent: System.Windows.ComponentResourceKey
  langs:
  - csharp
  name: TypeInTargetAssembly
  nameWithType: ComponentResourceKey.TypeInTargetAssembly
  fullName: System.Windows.ComponentResourceKey.TypeInTargetAssembly
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置<xref:System.Type>，它定义的资源键。</xref:System.Type>"
  remarks: "有关[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]信息，请参阅[ComponentResourceKey 标记扩展](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Windows.ComponentResourceKey>自定义组件使用元素可以定义从外部程序集，基于目标的程序集中包含的类型的访问的资源键。</xref:System.Windows.ComponentResourceKey> 自定义组件通常定义必须在资源所在的程序集的新类型。 通常这些类型没有其他实现，以满足一种<xref:System.Windows.ComponentResourceKey>。</xref:System.Windows.ComponentResourceKey>的查找要求仅存在类型      <a name=&quot;xamlTextUsage_3&quot;></a># # XAML 文本使用情况，请参阅备注"
  example:
  - "The following example shows how to define a <xref:System.Windows.ComponentResourceKey> including TypeInTargetAssembly and <xref:System.Windows.ComponentResourceKey.ResourceId%2A> using the [ComponentResourceKey Markup Extension](../Topic/ComponentResourceKey%20Markup%20Extension.md). This resource can then be placed in an external assembly and accessed by a key usage that requests the resource using an analogous <xref:System.Windows.ComponentResourceKey> in the request.  \n  \n [!code-xml[ColorPicker_snip#SliderStyle](~/add/codesnippet/xaml/ColorPickerLib/Themes/generic.xaml#sliderstyle)]"
  syntax:
    content: public Type TypeInTargetAssembly { get; set; }
    return:
      type: System.Type
      description: "定义的资源键的类型。"
  overload: System.Windows.ComponentResourceKey.TypeInTargetAssembly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.ResourceKey
  isExternal: false
  name: System.Windows.ResourceKey
- uid: System.Windows.ComponentResourceKey.#ctor
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: ComponentResourceKey()
  nameWithType: ComponentResourceKey.ComponentResourceKey()
  fullName: System.Windows.ComponentResourceKey.ComponentResourceKey()
- uid: System.Windows.ComponentResourceKey.#ctor(System.Type,System.Object)
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: ComponentResourceKey(Type,Object)
  nameWithType: ComponentResourceKey.ComponentResourceKey(Type,Object)
  fullName: System.Windows.ComponentResourceKey.ComponentResourceKey(Type,Object)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.ComponentResourceKey.Assembly
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: Assembly
  nameWithType: ComponentResourceKey.Assembly
  fullName: System.Windows.ComponentResourceKey.Assembly
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Windows.ComponentResourceKey.Equals(System.Object)
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: Equals(Object)
  nameWithType: ComponentResourceKey.Equals(Object)
  fullName: System.Windows.ComponentResourceKey.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.ComponentResourceKey.GetHashCode
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: GetHashCode()
  nameWithType: ComponentResourceKey.GetHashCode()
  fullName: System.Windows.ComponentResourceKey.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.ComponentResourceKey.ResourceId
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: ResourceId
  nameWithType: ComponentResourceKey.ResourceId
  fullName: System.Windows.ComponentResourceKey.ResourceId
- uid: System.Windows.ComponentResourceKey.ToString
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: ToString()
  nameWithType: ComponentResourceKey.ToString()
  fullName: System.Windows.ComponentResourceKey.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.ComponentResourceKey.TypeInTargetAssembly
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: TypeInTargetAssembly
  nameWithType: ComponentResourceKey.TypeInTargetAssembly
  fullName: System.Windows.ComponentResourceKey.TypeInTargetAssembly
- uid: System.Windows.ComponentResourceKey.#ctor*
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: ComponentResourceKey
  nameWithType: ComponentResourceKey.ComponentResourceKey
- uid: System.Windows.ComponentResourceKey.Assembly*
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: Assembly
  nameWithType: ComponentResourceKey.Assembly
- uid: System.Windows.ComponentResourceKey.Equals*
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: Equals
  nameWithType: ComponentResourceKey.Equals
- uid: System.Windows.ComponentResourceKey.GetHashCode*
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: GetHashCode
  nameWithType: ComponentResourceKey.GetHashCode
- uid: System.Windows.ComponentResourceKey.ResourceId*
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: ResourceId
  nameWithType: ComponentResourceKey.ResourceId
- uid: System.Windows.ComponentResourceKey.ToString*
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: ToString
  nameWithType: ComponentResourceKey.ToString
- uid: System.Windows.ComponentResourceKey.TypeInTargetAssembly*
  parent: System.Windows.ComponentResourceKey
  isExternal: false
  name: TypeInTargetAssembly
  nameWithType: ComponentResourceKey.TypeInTargetAssembly
