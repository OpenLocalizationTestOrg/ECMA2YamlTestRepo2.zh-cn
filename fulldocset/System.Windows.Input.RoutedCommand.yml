### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.RoutedCommand
  id: RoutedCommand
  children:
  - System.Windows.Input.RoutedCommand.#ctor
  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  - System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  - System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  - System.Windows.Input.RoutedCommand.CanExecuteChanged
  - System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  - System.Windows.Input.RoutedCommand.InputGestures
  - System.Windows.Input.RoutedCommand.Name
  - System.Windows.Input.RoutedCommand.OwnerType
  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  - System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  langs:
  - csharp
  name: RoutedCommand
  nameWithType: RoutedCommand
  fullName: System.Windows.Input.RoutedCommand
  type: Class
  summary: "定义实现一个命令<xref:System.Windows.Input.ICommand>和元素树之内进行路由。</xref:System.Windows.Input.ICommand>"
  remarks: "The <xref:System.Windows.Input.RoutedCommand.Execute%2A> and <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> methods on a RoutedCommand do not contain the application logic for the command as is the case with a typical <xref:System.Windows.Input.ICommand>, but rather, these methods raise events that traverse the element tree looking for an object with a <xref:System.Windows.Input.CommandBinding>.  The event handlers attached to the <xref:System.Windows.Input.CommandBinding> contain the command logic.  \n  \n The <xref:System.Windows.Input.RoutedCommand.Execute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewExecuted> and <xref:System.Windows.Input.CommandManager.Executed> events.  The <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method raises the <xref:System.Windows.Input.CommandManager.PreviewCanExecute> and <xref:System.Windows.Input.CommandManager.CanExecute> events.  \n  \n<a name=\"xamlAttributeUsage_RoutedCommand\"></a>   \n## XAML Attribute Usage  \n \\<*object* *property*=\"*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object* *property*=\"*predefinedClassName*.*predefinedCommandName*\"/>  \n  \n \\- or -  \n  \n \\<*object* *property*=\"{ *customClassName*.*customCommandName*}\"/>  \n  \n<a name=\"xamlValues_RoutedCommand\"></a>   \n## XAML Values  \n *predefinedClassName*  \n One of the predefined command classes.  \n  \n *predefinedCommandName*  \n One of the predefined commands.  \n  \n *customClassName*  \n A custom class which contains the custom command. Custom classes generally require an `xlmns` prefix mapping; see [XAML Namespaces and Namespace Mapping for WPF XAML](~/add/includes/ajax-current-ext-md.md).  \n  \n *customCommandName*  \n A custom command."
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter("System.Windows.Input.CommandConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      [System.Windows.Markup.ValueSerializer("System.Windows.Input.CommandValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      public class RoutedCommand : System.Windows.Input.ICommand
  inheritance:
  - System.Object
  implements:
  - System.Windows.Input.ICommand
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor
  id: '#ctor'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand()
  nameWithType: RoutedCommand.RoutedCommand()
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>类。"
  syntax:
    content: public RoutedCommand ();
    parameters: []
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  id: '#ctor(System.String,System.Type)'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand(String,Type)
  nameWithType: RoutedCommand.RoutedCommand(String,Type)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>使用指定的名称和所有者类型的类。"
  syntax:
    content: public RoutedCommand (string name, Type ownerType);
    parameters:
    - id: name
      type: System.String
      description: "用于序列化的声明的名称。"
    - id: ownerType
      type: System.Type
      description: "正在注册命令的类型。"
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ownerType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  id: '#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)'
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: RoutedCommand(String,Type,InputGestureCollection)
  nameWithType: RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>类具有指定的名称、 所有者类型和手势的集合。"
  syntax:
    content: public RoutedCommand (string name, Type ownerType, System.Windows.Input.InputGestureCollection inputGestures);
    parameters:
    - id: name
      type: System.String
      description: "用于序列化的声明的名称。"
    - id: ownerType
      type: System.Type
      description: "正在注册命令类型。"
    - id: inputGestures
      type: System.Windows.Input.InputGestureCollection
      description: "默认使用此命令关联的输入的笔势。"
  overload: System.Windows.Input.RoutedCommand.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "the length of <code>name</code> is zero  \n  \n \\- or -  \n  \n <code>ownerType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  id: CanExecute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: CanExecute(Object,IInputElement)
  nameWithType: RoutedCommand.CanExecute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.CanExecute(Object,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "确定是否这<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>可以在其当前状态下执行。"
  remarks: "如果确定的实际逻辑<xref:System.Windows.Input.RoutedCommand>可以执行对当前命令目标不包含 CanExecute 方法中，而是 CanExecute 引发<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>哪些隧道和向上遍历元素树寻找具有一种<xref:System.Windows.Input.CommandBinding>。</xref:System.Windows.Input.CommandBinding>的对象的事件</xref:System.Windows.Input.CommandManager.CanExecute></xref:System.Windows.Input.CommandManager.PreviewCanExecute></xref:System.Windows.Input.RoutedCommand>  如果<xref:System.Windows.Input.CommandBinding>该<xref:System.Windows.Input.RoutedCommand>找到，则<xref:System.Windows.Input.CanExecuteRoutedEventHandler>附加到<xref:System.Windows.Input.CommandBinding>称为。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CanExecuteRoutedEventHandler> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandBinding>  这些处理程序提供用于确定是否的编程逻辑<xref:System.Windows.Input.RoutedCommand>可以或不执行。</xref:System.Windows.Input.RoutedCommand>       <xref:System.Windows.Input.CommandManager.PreviewCanExecute>并<xref:System.Windows.Input.CommandManager.PreviewExecuted>在<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</xref:System.Windows.Input.ICommandSource.CommandTarget%2A>上引发了事件</xref:System.Windows.Input.CommandManager.PreviewExecuted></xref:System.Windows.Input.CommandManager.PreviewCanExecute>  如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>未对设置<xref:System.Windows.Input.ICommandSource>、<xref:System.Windows.Input.CommandManager.PreviewCanExecute>和<xref:System.Windows.Input.CommandManager.CanExecute>具有键盘焦点的元素上引发事件。</xref:System.Windows.Input.CommandManager.CanExecute> </xref:System.Windows.Input.CommandManager.PreviewCanExecute> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.ICommandSource.CommandTarget%2A>"
  example:
  - "The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \n  \n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the CanExecute method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n If the CanExecute method returns `true`, then the control is enabled; otherwise, the control is disable.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandcanexecutechanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandcanexecutechanged)]"
  syntax:
    content: public bool CanExecute (object parameter, System.Windows.IInputElement target);
    parameters:
    - id: parameter
      type: System.Object
      description: "用户定义数据类型。"
    - id: target
      type: System.Windows.IInputElement
      description: "命令目标中。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此命令可执行对当前的命令目标;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.RoutedCommand.CanExecute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>target</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged
  id: CanExecuteChanged
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: CanExecuteChanged
  nameWithType: RoutedCommand.CanExecuteChanged
  fullName: System.Windows.Input.RoutedCommand.CanExecuteChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "当命令管理器检测到命令源的更改时发生。 这些更改通常会影响是否对当前的命令目标应执行该命令。"
  remarks: "<xref:System.Windows.Input.RoutedCommand>侦听<xref:System.Windows.Input.CommandManager.RequerySuggested>事件，这由<xref:System.Windows.Input.CommandManager>.</xref:System.Windows.Input.CommandManager>引发</xref:System.Windows.Input.CommandManager.RequerySuggested></xref:System.Windows.Input.RoutedCommand> <xref:System.Windows.Input.CommandManager.RequerySuggested>满足条件时将引发事件，可能会更改是否应执行该命令，如键盘焦点的变化。</xref:System.Windows.Input.CommandManager.RequerySuggested>  当命令收到<xref:System.Windows.Input.CommandManager.RequerySuggested>事件，它会发出 CanExecuteChanged 事件。</xref:System.Windows.Input.CommandManager.RequerySuggested>  通常情况下，命令源将侦听此事件和查询<xref:System.Windows.Input.RoutedCommand>通过<xref:System.Windows.Input.RoutedCommand.CanExecute%2A>方法。</xref:System.Windows.Input.RoutedCommand.CanExecute%2A> </xref:System.Windows.Input.RoutedCommand>  如果无法执行该命令作为其命令绑定的一部分，大多数命令源会禁用本身。  此示例是当<xref:System.Windows.Controls.MenuItem>用本身灰色出时无法执行该命令。</xref:System.Windows.Controls.MenuItem>       在某些情况下，<xref:System.Windows.Input.CommandManager>不知道的条件可更改要执行的命令的功能的更改。</xref:System.Windows.Input.CommandManager>  在这些情况下，你可以强制执行<xref:System.Windows.Input.CommandManager>到引发<xref:System.Windows.Input.CommandManager.RequerySuggested>通过调用的事件<xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>方法，这反过来导致<xref:System.Windows.Input.RoutedCommand>引发 CanExecuteChanged 事件。</xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A> </xref:System.Windows.Input.CommandManager.RequerySuggested> </xref:System.Windows.Input.CommandManager>"
  example:
  - "The following example is a <xref:System.Windows.Input.ICommand.CanExecuteChanged> event handler from a custom implementation of <xref:System.Windows.Input.ICommandSource>.  \n  \n `this.Command` in this example is the <xref:System.Windows.Input.ICommandSource.Command%2A> property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not `null`, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If the command is a <xref:System.Windows.Input.RoutedCommand>, then the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.CanExecute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n If the <xref:System.Windows.Input.RoutedCommand.CanExecute%2A> method returns `true`, then the control is enabled; otherwise, the control is disabled.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandcanexecutechanged)]\n [!code-vb[ImplementICommandSource#ImplementICommandCanExecuteChanged](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandcanexecutechanged)]"
  syntax:
    content: public event EventHandler CanExecuteChanged;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  id: Execute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: Execute(Object,IInputElement)
  nameWithType: RoutedCommand.Execute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.Execute(Object,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "执行<xref href=&quot;System.Windows.Input.RoutedCommand&quot;></xref>当前命令目标上。"
  remarks: "执行的实际逻辑<xref:System.Windows.Input.RoutedCommand>未包含在 Execute 方法。</xref:System.Windows.Input.RoutedCommand>  执行引发<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>事件，哪些隧道和向上遍历元素树，查找具有一种<xref:System.Windows.Input.CommandBinding>。</xref:System.Windows.Input.CommandBinding>的对象</xref:System.Windows.Input.CommandManager.Executed></xref:System.Windows.Input.CommandManager.PreviewExecuted>  如果<xref:System.Windows.Input.CommandBinding>该<xref:System.Windows.Input.RoutedCommand>找到，则<xref:System.Windows.Input.ExecutedRoutedEventHandler>附加到<xref:System.Windows.Input.CommandBinding>称为。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.ExecutedRoutedEventHandler> </xref:System.Windows.Input.RoutedCommand> </xref:System.Windows.Input.CommandBinding>  这些处理程序提供执行<xref:System.Windows.Input.RoutedCommand>.</xref:System.Windows.Input.RoutedCommand>的编程逻辑       <xref:System.Windows.Input.CommandManager.PreviewExecuted>并<xref:System.Windows.Input.CommandManager.Executed>在<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>.</xref:System.Windows.Input.ICommandSource.CommandTarget%2A>上引发了事件</xref:System.Windows.Input.CommandManager.Executed></xref:System.Windows.Input.CommandManager.PreviewExecuted>  如果<xref:System.Windows.Input.ICommandSource.CommandTarget%2A>未对设置<xref:System.Windows.Input.ICommandSource>、<xref:System.Windows.Input.CommandManager.PreviewExecuted>和<xref:System.Windows.Input.CommandManager.Executed>具有键盘焦点的元素上引发事件。</xref:System.Windows.Input.CommandManager.Executed> </xref:System.Windows.Input.CommandManager.PreviewExecuted> </xref:System.Windows.Input.ICommandSource> </xref:System.Windows.Input.ICommandSource.CommandTarget%2A>"
  example:
  - "The following example is from a custom implementation of <xref:System.Windows.Input.ICommandSource> sample.  \n  \n `this.Command` in this example is the Command property on the <xref:System.Windows.Input.ICommandSource>.  If the command is not null, the command is cast to a <xref:System.Windows.Input.RoutedCommand>.  If it is a <xref:System.Windows.Input.RoutedCommand>, then the Execute method is called passing the <xref:System.Windows.Input.ICommandSource.CommandTarget%2A> and the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  If the command is not a <xref:System.Windows.Input.RoutedCommand>, it is cast to an <xref:System.Windows.Input.ICommand> and the <xref:System.Windows.Input.ICommand.Execute%2A> method is called passing the <xref:System.Windows.Input.ICommandSource.CommandParameter%2A>.  \n  \n [!code-cs[ImplementICommandSource#ImplementICommandExecute](~/add/codesnippet/csharp/ImplementICommandSource/CommandSlider.cs#implementicommandexecute)]\n [!code-vb[ImplementICommandSource#ImplementICommandExecute](~/add/codesnippet/visualbasic/implementicommandsource/commandslider.vb#implementicommandexecute)]"
  syntax:
    content: public void Execute (object parameter, System.Windows.IInputElement target);
    parameters:
    - id: parameter
      type: System.Object
      description: "用户定义的参数传递到处理程序。"
    - id: target
      type: System.Windows.IInputElement
      description: "从此处开始查找命令处理程序元素。"
  overload: System.Windows.Input.RoutedCommand.Execute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>target</code>is not a <xref href=&quot;System.Windows.UIElement&quot;></xref> or <xref href=&quot;System.Windows.ContentElement&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.InputGestures
  id: InputGestures
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
  fullName: System.Windows.Input.RoutedCommand.InputGestures
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取的集合<xref href=&quot;System.Windows.Input.InputGesture&quot;></xref>与此命令关联的对象。"
  remarks: ''
  example:
  - "The following example shows how to add a new <xref:System.Windows.Input.MouseGesture> to a <xref:System.Windows.Input.RoutedCommand>.  \n  \n [!code-cs[commandlibrarysnippets#MouseBindingAddedCommand](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#mousebindingaddedcommand)]\n [!code-vb[commandlibrarysnippets#MouseBindingAddedCommand](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#mousebindingaddedcommand)]"
  syntax:
    content: public System.Windows.Input.InputGestureCollection InputGestures { get; }
    return:
      type: System.Windows.Input.InputGestureCollection
      description: "输入的笔势。"
  overload: System.Windows.Input.RoutedCommand.InputGestures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.Name
  id: Name
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: Name
  nameWithType: RoutedCommand.Name
  fullName: System.Windows.Input.RoutedCommand.Name
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取命令的名称。"
  remarks: "可以使用此属性，引用时<xref:System.Windows.Input.RoutedCommand>中[!INCLUDE[TLA#tla_titlexaml](~/add/includes/ajax-current-ext-md.md)]。</xref:System.Windows.Input.RoutedCommand>"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "命令的名称。"
  overload: System.Windows.Input.RoutedCommand.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.OwnerType
  id: OwnerType
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
  fullName: System.Windows.Input.RoutedCommand.OwnerType
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取注册使用命令的类型。"
  syntax:
    content: public Type OwnerType { get; }
    return:
      type: System.Type
      description: "命令所有者的类型。"
  overload: System.Windows.Input.RoutedCommand.OwnerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  id: System#Windows#Input#ICommand#CanExecute(System.Object)
  isEii: true
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: System.Windows.Input.ICommand.CanExecute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "有关此成员的说明，请参阅<xref:System.Windows.Input.ICommand.CanExecute*>。</xref:System.Windows.Input.ICommand.CanExecute*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Windows.Input.RoutedCommand>实例被强制转换为<xref:System.Windows.Input.ICommand>接口。</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.RoutedCommand>"
  syntax:
    content: bool ICommand.CanExecute (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "此命令使用的数据。  如果该命令不需要传递数据，该对象可以设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以执行此命令;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  id: System#Windows#Input#ICommand#Execute(System.Object)
  isEii: true
  parent: System.Windows.Input.RoutedCommand
  langs:
  - csharp
  name: System.Windows.Input.ICommand.Execute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "有关此成员的说明，请参阅<xref:System.Windows.Input.ICommand.Execute*>。</xref:System.Windows.Input.ICommand.Execute*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Windows.Input.RoutedCommand>实例被强制转换为<xref:System.Windows.Input.ICommand>接口。</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.RoutedCommand>"
  example:
  - "See Also  \n  \n <xref:System.Windows.Input.RoutedCommand.Execute%2A>"
  syntax:
    content: void ICommand.Execute (object parameter);
    parameters:
    - id: parameter
      type: System.Object
      description: "此命令使用的数据。  如果该命令不需要传递数据，该对象可以设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Input.RoutedCommand.#ctor
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand()
  nameWithType: RoutedCommand.RoutedCommand()
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand()
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand(String,Type)
  nameWithType: RoutedCommand.RoutedCommand(String,Type)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Input.RoutedCommand.#ctor(System.String,System.Type,System.Windows.Input.InputGestureCollection)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand(String,Type,InputGestureCollection)
  nameWithType: RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
  fullName: System.Windows.Input.RoutedCommand.RoutedCommand(String,Type,InputGestureCollection)
- uid: System.Windows.Input.InputGestureCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputGestureCollection
  nameWithType: InputGestureCollection
  fullName: System.Windows.Input.InputGestureCollection
- uid: System.Windows.Input.RoutedCommand.CanExecute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecute(Object,IInputElement)
  nameWithType: RoutedCommand.CanExecute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.CanExecute(Object,IInputElement)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.RoutedCommand.CanExecuteChanged
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecuteChanged
  nameWithType: RoutedCommand.CanExecuteChanged
  fullName: System.Windows.Input.RoutedCommand.CanExecuteChanged
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Input.RoutedCommand.Execute(System.Object,System.Windows.IInputElement)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Execute(Object,IInputElement)
  nameWithType: RoutedCommand.Execute(Object,IInputElement)
  fullName: System.Windows.Input.RoutedCommand.Execute(Object,IInputElement)
- uid: System.Windows.Input.RoutedCommand.InputGestures
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
  fullName: System.Windows.Input.RoutedCommand.InputGestures
- uid: System.Windows.Input.RoutedCommand.Name
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Name
  nameWithType: RoutedCommand.Name
  fullName: System.Windows.Input.RoutedCommand.Name
- uid: System.Windows.Input.RoutedCommand.OwnerType
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
  fullName: System.Windows.Input.RoutedCommand.OwnerType
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute(System.Object)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.CanExecute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.CanExecute(Object)
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute(System.Object)
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.Execute(Object)
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
  fullName: System.Windows.Input.RoutedCommand.System.Windows.Input.ICommand.Execute(Object)
- uid: System.Windows.Input.RoutedCommand.#ctor*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: RoutedCommand
  nameWithType: RoutedCommand.RoutedCommand
- uid: System.Windows.Input.RoutedCommand.CanExecute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: CanExecute
  nameWithType: RoutedCommand.CanExecute
- uid: System.Windows.Input.RoutedCommand.Execute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Execute
  nameWithType: RoutedCommand.Execute
- uid: System.Windows.Input.RoutedCommand.InputGestures*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: InputGestures
  nameWithType: RoutedCommand.InputGestures
- uid: System.Windows.Input.RoutedCommand.Name*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: Name
  nameWithType: RoutedCommand.Name
- uid: System.Windows.Input.RoutedCommand.OwnerType*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: OwnerType
  nameWithType: RoutedCommand.OwnerType
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#CanExecute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.CanExecute
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.CanExecute
- uid: System.Windows.Input.RoutedCommand.System#Windows#Input#ICommand#Execute*
  parent: System.Windows.Input.RoutedCommand
  isExternal: false
  name: System.Windows.Input.ICommand.Execute
  nameWithType: RoutedCommand.System.Windows.Input.ICommand.Execute
