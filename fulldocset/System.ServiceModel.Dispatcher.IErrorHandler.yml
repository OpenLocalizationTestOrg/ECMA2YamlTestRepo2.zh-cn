### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IErrorHandler
  id: IErrorHandler
  children:
  - System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  - System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  langs:
  - csharp
  name: IErrorHandler
  nameWithType: IErrorHandler
  fullName: System.ServiceModel.Dispatcher.IErrorHandler
  type: Interface
  summary: "允许实施者对返回给调用方错误消息进行控制，还可以选择执行自定义错误处理，例如日志记录。"
  remarks: "若要显式控制应用程序的行为会引发异常时，实现 IErrorHandler 接口，并将其添加到<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>的<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>属性。</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> IErrorHandler 可以显式控制生成的 SOAP 错误，决定是否将其发送回客户端，然后执行相关联的任务，例如日志记录。 错误处理程序调用顺序添加到<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>属性。</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       实现<xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>方法可控制返回到客户端的错误消息。</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>       实现<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>方法，以确保错误相关行为，包括错误日志记录，以确保故障快速、 关闭应用程序中，依次类推。</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>      1> [!NOTE]&1;> 由于<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>方法可以从许多不同的位置有不能确保哪些线程方法调用的调用。</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A> 不依赖于<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>操作线程上调用的方法。</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       所有<xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>发送响应消息之前，首先调用实现。</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 当所有<xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>实现已调用并返回，并且如果`fault`为非`null`，发送回客户端根据操作协定。</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 如果`fault`是`null`在调用所有实现后，响应消息由<xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>属性值。</xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=fullName>      1> [!NOTE]&1;> 可能会发生异常后所有<xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A>实现调用和响应消息传递到通道。</xref:System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault%2A> 如果通道异常发生 （例如，序列化消息的难度） IErrorHandler 对象会收到通知。 在这种情况下，还应确保你的开发环境将捕获并向用户显示此类异常或利用跟踪来发现问题。 有关跟踪的详细信息，请参阅[解决应用程序中使用跟踪](~/add/includes/ajax-current-ext-md.md)。       响应消息发送，所有后<xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>实现相同的顺序进行调用。</xref:System.ServiceModel.Dispatcher.IErrorHandler.HandleError%2A>       通常，IErrorHandler 实现添加到<xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>上的服务 （及在双工通信的情况下客户端） 的属性。</xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A>       可以向运行时添加 IErrorHandler，通过实现行为 (任一<xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>， <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName>， <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName>，或<xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName>对象) 和行为以编程方式使用，从配置文件或自定义特性附加你 IErrorHandler。</xref:System.ServiceModel.Description.IOperationBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IContractBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=fullName> </xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=fullName>       有关使用行为来修改运行时的详细信息，请参阅[配置和扩展的运行时带有行为](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates a service that implements IErrorHandler that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the IErrorHandler implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n```  \n  \n<configuration>  \n  <system.serviceModel>  \n    <services>  \n      <service   \n        name=\"Microsoft.WCF.Documentation.SampleService\"  \n        behaviorConfiguration=\"metaAndErrors\">  \n        <host>  \n          <baseAddresses>  \n            <add baseAddress=\"http://localhost:8080/SampleService\"/>  \n          </baseAddresses>  \n        </host>  \n        <endpoint  \n          address=\"\"  \n          binding=\"wsHttpBinding\"  \n          contract=\"Microsoft.WCF.Documentation.ISampleService\"  \n         />  \n        <endpoint  \n          address=\"mex\"  \n          binding=\"mexHttpBinding\"  \n          contract=\"IMetadataExchange\"  \n         />  \n      </service>  \n    </services>  \n    <behaviors>  \n      <serviceBehaviors>  \n        <behavior name=\"metaAndErrors\">  \n          <serviceDebug includeExceptionDetailInFaults=\"true\"/>  \n          <serviceMetadata httpGetEnabled=\"true\"/>  \n          <enforceGreetingFaults />  \n        </behavior>  \n      </serviceBehaviors>  \n    </behaviors>  \n    <extensions>  \n      <behaviorExtensions>  \n        <add   \n          name=\"enforceGreetingFaults\"   \n          type=\"Microsoft.WCF.Documentation.EnforceGreetingFaultBehavior, HostApplication, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null\"  \n        />  \n      </behaviorExtensions>  \n    </extensions>  \n  </system.serviceModel>  \n</configuration>  \n```"
  syntax:
    content: public interface IErrorHandler
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  id: HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "启用错误相关处理并返回一个值，该值指示调度程序中止会话和在某些情况下的实例上下文。"
  remarks: "HandleError 方法用于实现错误相关行为，例如错误日志记录、 系统通知、 关闭应用程序和等等，并返回一个值，指定是否已正确处理该异常。      1> [!NOTE]&1;> 因为 HandleError 方法可以从许多不同的位置有不能确保哪些线程方法调用的调用。 不依赖操作线程上调用的 HandleError 方法。       所有<xref:System.ServiceModel.Dispatcher.IErrorHandler>实现调用。</xref:System.ServiceModel.Dispatcher.IErrorHandler> 默认情况下 (当返回的值是`false`)，如果没有异常，调度程序将中止任何会话，并中止<xref:System.ServiceModel.InstanceContext>如果<xref:System.ServiceModel.InstanceContextMode><xref:System.ServiceModel.InstanceContextMode>.</xref:System.ServiceModel.InstanceContextMode>之外的任何</xref:System.ServiceModel.InstanceContextMode></xref:System.ServiceModel.InstanceContext>  异常被视为未处理，并且任何状态被视为已损坏。       返回`true`从 HandleError 以防止此默认行为。 如果任何错误处理程序返回`true`它指示[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]，则可以安全地继续使用与失败的请求关联的状态。       如果没有错误处理程序返回`true`从 HandleError 方法将异常认为是未处理且默认响应适用，可能会导致中止<xref:System.ServiceModel.InstanceContext?displayProperty=fullName>和通道上的会话通道或<xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>属性未设置为<xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName>.</xref:System.ServiceModel.InstanceContextMode?displayProperty=fullName></xref:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode%2A?displayProperty=fullName>通信时</xref:System.ServiceModel.InstanceContext?displayProperty=fullName>       `error`参数不`null`和包含已引发的异常对象。"
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool HandleError (Exception error);
    parameters:
    - id: error
      type: System.Exception
      description: "在处理期间引发的异常。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]不应中止会话 （如果有） 和实例上下文，如果实例上下文不是<xref href=&quot;System.ServiceModel.InstanceContextMode&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  id: ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  langs:
  - csharp
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "允许的自定义创建&lt;xref:System.ServiceModel.FaultException%601&gt;返回从服务方法的过程中的异常。"
  remarks: "实现 ProvideFault 方法可创建的自定义错误消息，就会归还客户端。  ProvideFault 方法将始终会为异常会导致操作，除外，在 WCF 运行时识别视为尤其是致命错误异常，并重新引发的异常自身时调用。 当调用了所有 ProvideFault 实现时，错误消息发送回客户端 (如果`fault`为非`null`)。 如果`fault`参数是`null`默认错误发送到客户端。      1> [!NOTE]&1;> 导致处理错误的入站的消息时会提供此方法从<xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>属性。</xref:System.ServiceModel.OperationContext.RequestContext%2A?displayProperty=fullName>      1> [!NOTE]&1;> 因为 ProvideFault 方法可以从许多不同的位置有不能确保哪些线程方法调用的调用。 不依赖于 ProvideFault 操作线程上调用的方法。"
  example:
  - "The following code example demonstrates a service that implements <xref:System.ServiceModel.Dispatcher.IErrorHandler> that returns only <xref:System.ServiceModel.FaultException%601> of type `GreetingFault` when a service method throws a managed exception.  \n  \n [!code-vb[IErrorHandler#6](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#6)]\n [!code-cs[IErrorHandler#6](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#6)]  \n  \n The following code example shows how to use a service behavior to add the <xref:System.ServiceModel.Dispatcher.IErrorHandler> implementation to the <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A> property.  \n  \n [!code-vb[IErrorHandler#7](~/add/codesnippet/visualbasic/ierrorhandler.client/ierrorhandler.vb#7)]\n [!code-cs[IErrorHandler#7](~/add/codesnippet/csharp/ierrorhandler.client/ierrorhandler.cs#7)]  \n  \n The following code example shows how to configure the service to load the service behavior using an application configuration file. For more details about how to expose a service behavior in a configuration file, see <xref:System.ServiceModel.Description.IServiceBehavior>.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public void ProvideFault (Exception error, System.ServiceModel.Channels.MessageVersion version, ref System.ServiceModel.Channels.Message fault);
    parameters:
    - id: error
      type: System.Exception
      description: "<xref:System.Exception>服务操作过程中引发的对象。</xref:System.Exception>"
    - id: version
      type: System.ServiceModel.Channels.MessageVersion
      description: "消息的 SOAP 版本。"
    - id: fault
      type: System.ServiceModel.Channels.Message
      description: "&lt;Xref:System.ServiceModel.Channels.Message?displayProperty=fullName&gt;返回到客户端或服务，在双工情况下的对象。"
  overload: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(System.Exception)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError(Exception)
  nameWithType: IErrorHandler.HandleError(Exception)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.HandleError(Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(System.Exception,System.ServiceModel.Channels.MessageVersion,System.ServiceModel.Channels.Message@)
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault(Exception,MessageVersion,Message)
  nameWithType: IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
  fullName: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault(Exception,MessageVersion,Message)
- uid: System.ServiceModel.Channels.MessageVersion
  parent: System.ServiceModel.Channels
  isExternal: true
  name: MessageVersion
  nameWithType: MessageVersion
  fullName: System.ServiceModel.Channels.MessageVersion
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IErrorHandler.HandleError*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: HandleError
  nameWithType: IErrorHandler.HandleError
- uid: System.ServiceModel.Dispatcher.IErrorHandler.ProvideFault*
  parent: System.ServiceModel.Dispatcher.IErrorHandler
  isExternal: false
  name: ProvideFault
  nameWithType: IErrorHandler.ProvideFault
