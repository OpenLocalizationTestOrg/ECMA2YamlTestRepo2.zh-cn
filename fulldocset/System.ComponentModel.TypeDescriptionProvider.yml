### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.TypeDescriptionProvider
  id: TypeDescriptionProvider
  children:
  - System.ComponentModel.TypeDescriptionProvider.#ctor
  - System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  - System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  - System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  - System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  - System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  langs:
  - csharp
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
  type: Class
  summary: "提供补充元数据向<xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>。"
  remarks: "TypeDescriptionProvider 类动态扩展通过添加、 修改或隐藏如属性、 属性和事件的特征与类型或对象关联的类型信息。 可以有多个提供到单个<xref:System.ComponentModel.TypeDescriptor>.</xref:System.ComponentModel.TypeDescriptor>的元数据的类型说明提供程序类       有两种方法将关联与 TypeDescriptionProvider <xref:System.ComponentModel.TypeDescriptor>:-在设计时，当目标类可以分配相应<xref:System.ComponentModel.TypeDescriptionProviderAttribute>标记。</xref:System.ComponentModel.TypeDescriptionProviderAttribute> </xref:System.ComponentModel.TypeDescriptor>      -在运行时，当其中一个的<xref:System.ComponentModel.TypeDescriptor.AddProvider%2A>方法<xref:System.ComponentModel.TypeDescriptor>可以调用类。</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptor.AddProvider%2A> 这些重载的方法需要目标对象或其类的类型。       TypeDescriptionProvider 类依赖于相同类型，会在构造过程中提供的父对象。 这允许派生自的类<xref:System.ComponentModel.CustomTypeDescriptor>有选择地重写方法。</xref:System.ComponentModel.CustomTypeDescriptor>       根据需要，将对性能的自定义的类型信息的影响降至最低仅生成 TypeDescriptionProvider 的实例。       此类不能被继承。"
  syntax:
    content: public abstract class TypeDescriptionProvider
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>类。"
  remarks: "此构造函数等效于调用的其他<xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29>构造函数的参数值`null`。</xref:System.ComponentModel.TypeDescriptionProvider.%23ctor%28System.ComponentModel.TypeDescriptionProvider%29>"
  syntax:
    content: protected TypeDescriptionProvider ();
    parameters: []
  overload: System.ComponentModel.TypeDescriptionProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  id: '#ctor(System.ComponentModel.TypeDescriptionProvider)'
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.TypeDescriptionProvider&quot;></xref>类使用的父类型说明提供。"
  remarks: "如果`parent`参数是`null`，所有<xref:System.ComponentModel.TypeDescriptionProvider>方法将返回默认值。</xref:System.ComponentModel.TypeDescriptionProvider> 否则为所有<xref:System.ComponentModel.TypeDescriptionProvider>方法会将对方法的委托`parent`。</xref:System.ComponentModel.TypeDescriptionProvider>       下表显示的默认返回值<xref:System.ComponentModel.TypeDescriptionProvider>方法。</xref:System.ComponentModel.TypeDescriptionProvider>      |方法 |默认返回值 |  |------------|--------------------------|  |<xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>|`null`|  |<xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A>|新创建的对象，通过对<xref:System.Activator.CreateInstance%2A>方法的调用。 |  |<xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A>|<xref:System.ComponentModel.CustomTypeDescriptor>类的默认实例。 |  |<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>|<xref:System.ComponentModel.CustomTypeDescriptor>类的默认实例。 |  |<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>|`objectType`第一个参数。 |</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> </xref:System.ComponentModel.CustomTypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.CustomTypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor%2A> </xref:System.Activator.CreateInstance%2A> </xref:System.ComponentModel.TypeDescriptionProvider.CreateInstance%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetCache%2A>"
  syntax:
    content: protected TypeDescriptionProvider (System.ComponentModel.TypeDescriptionProvider parent);
    parameters:
    - id: parent
      type: System.ComponentModel.TypeDescriptionProvider
      description: "父类型说明提供程序。"
  overload: System.ComponentModel.TypeDescriptionProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  id: CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建可替换为另一种数据类型的对象。"
  remarks: "<xref:System.IServiceProvider>指定的`provider`参数传入<xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=fullName>方法的<xref:System.ComponentModel.TypeDescriptor>类。</xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptor.CreateInstance%2A?displayProperty=fullName> </xref:System.IServiceProvider> 如果`provider`不`null`，服务提供商可以由类型说明提供程序用于获取有关创建调用的附加上下文。       CreateInstance 方法是`virtual`和默认情况下，返回的结果<xref:System.Activator.CreateInstance%2A?displayProperty=fullName>方法如果`provider`是`null`。</xref:System.Activator.CreateInstance%2A?displayProperty=fullName> 如果`provider`是`null`，此方法将调用父提供程序的 CreateInstance 方法。"
  syntax:
    content: public virtual object CreateInstance (IServiceProvider provider, Type objectType, Type[] argTypes, object[] args);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "可选的服务提供程序中。"
    - id: objectType
      type: System.Type
      description: "要创建的对象类型。 此参数不<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: argTypes
      type: System.Type[]
      description: "表示要传递给对象的构造函数的参数类型的类型的可选数组。 此数组可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或长度为零。"
    - id: args
      type: System.Object[]
      description: "要传递给对象的构造函数的参数值的可选数组。"
    return:
      type: System.Object
      description: "替代<xref:System.Object>.</xref:System.Object>"
  overload: System.ComponentModel.TypeDescriptionProvider.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  id: GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取每个对象访问的缓存，作为<xref:System.Collections.IDictionary>的键/值对。</xref:System.Collections.IDictionary>"
  remarks: "A<xref:System.ComponentModel.TypeDescriptor>可能需要执行对集合的元数据的复杂操作。</xref:System.ComponentModel.TypeDescriptor> 由于类型不卸载域的整个生命周期<xref:System.ComponentModel.TypeDescriptor>类将自动缓存基于类型这些操作的结果。</xref:System.ComponentModel.TypeDescriptor> 但是，某些操作使用实时对象实例。 这些操作不能缓存内<xref:System.ComponentModel.TypeDescriptor>类，因为缓存它们将阻止对象被垃圾回收。</xref:System.ComponentModel.TypeDescriptor> 相反，<xref:System.ComponentModel.TypeDescriptor>类允许为每个对象缓存，作为访问<xref:System.Collections.IDictionary>的键/值对，以在对象上存在。</xref:System.Collections.IDictionary> </xref:System.ComponentModel.TypeDescriptor> 调用 GetCache 方法返回此缓存的实例。 GetCache 方法将返回`null`如果对象不支持的缓存。       默认值<xref:System.ComponentModel.TypeDescriptionProvider>由<xref:System.ComponentModel.TypeDescriptor>检查对象是否实现已就位的组件<xref:System.ComponentModel.Design.IDictionaryService>接口。</xref:System.ComponentModel.Design.IDictionaryService> </xref:System.ComponentModel.TypeDescriptor> </xref:System.ComponentModel.TypeDescriptionProvider> 如果对象是，它使用字典服务来存储对象的缓存。 否则，它返回的对象`null`。 其他类型说明提供程序可能会提供自己在本文中的实现。 例如，依赖项对象只可以附加类型<xref:System.Collections.IDictionary>.</xref:System.Collections.IDictionary>的属性"
  syntax:
    content: public virtual System.Collections.IDictionary GetCache (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "要为其获取缓存对象。"
    return:
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>如果所提供的对象支持缓存; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IDictionary>"
  overload: System.ComponentModel.TypeDescriptionProvider.GetCache*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  id: GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "给定的对象中获取扩展的自定义类型描述符。"
  remarks: "扩展的类型描述符是的提供属性的其他对象添加到此对象，但不实际对象定义的自定义类型描述符。 例如，在[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]组件模型对象实现<xref:System.ComponentModel.IExtenderProvider>接口可以将属性附加到驻留在相同的逻辑容器中的其他对象。</xref:System.ComponentModel.IExtenderProvider> 重载<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法不返回提供这些额外的扩展属性的类型描述符。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> GetExtendedTypeDescriptor 方法返回这些扩展的属性的集。 <xref:System.ComponentModel.TypeDescriptor>将自动合并这两个属性集合的结果。</xref:System.ComponentModel.TypeDescriptor> 虽然[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]组件模型支持仅扩展的属性，GetExtendedTypeDescriptor 可用于扩展的属性，以及事件，如果类型说明提供程序支持它。       GetExtendedTypeDescriptor 是`virtual`和默认情况下，将返回自定义类型描述符返回空结果，如果未不传递任何父提供程序。 如果传递了父提供程序，该方法将调用父提供程序的 GetExtendedTypeDescriptor 方法。"
  syntax:
    content: public virtual System.ComponentModel.ICustomTypeDescriptor GetExtendedTypeDescriptor (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "要为其获取的扩展的类型描述符对象。"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref>可以为该对象提供扩展元数据。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  id: GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取指定对象的扩展程序提供程序。"
  syntax:
    content: protected virtual System.ComponentModel.IExtenderProvider[] GetExtenderProviders (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "要获取扩展程序提供程序的对象。"
    return:
      type: System.ComponentModel.IExtenderProvider[]
      description: "扩展程序提供程序的数组<code> instance </code>。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  id: GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取指定组件的名称或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果该组件没有名称。"
  syntax:
    content: public virtual string GetFullComponentName (object component);
    parameters:
    - id: component
      type: System.Object
      description: "指定的组件。"
    return:
      type: System.String
      description: "指定组件的名称。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  id: GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "针对执行正常反射给定的对象。"
  remarks: "<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是较低级别版本<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 如果可以找到一个对象，没有自定义类型描述符<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>调用以执行与对象的正常反射。</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>       如果已调用使用而不是一种类型的实例的类型描述符成员，请使用此方法重载。"
  syntax:
    content: public Type GetReflectionType (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "类型的实例 (不应为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>)。"
    return:
      type: System.Type
      description: "此的反射类型<code> instance </code>。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  id: GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "针对执行正常反射类型。"
  remarks: "<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是较低级别版本<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 如果可以找到一个对象，没有自定义类型描述符<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>调用以执行与对象的正常反射。</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>       如果已调用而不是实例使用的类型的类型描述符成员，请使用此方法重载。"
  syntax:
    content: public Type GetReflectionType (Type objectType);
    parameters:
    - id: objectType
      type: System.Type
      description: "为其检索对象的类型<xref href=&quot;System.Reflection.IReflect&quot;> </xref>。"
    return:
      type: System.Type
      description: "此的反射类型<code> objectType </code>。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  id: GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetReflectionType(Type,Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "执行与给定的对象具有给定类型的正常反射。"
  remarks: "<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法是较低级别版本<xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A>方法。</xref:System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor%2A> </xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 如果可以找到一个对象，没有自定义类型描述符<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>调用以执行与对象的正常反射。</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>"
  syntax:
    content: public virtual Type GetReflectionType (Type objectType, object instance);
    parameters:
    - id: objectType
      type: System.Type
      description: "为其检索对象的类型<xref href=&quot;System.Reflection.IReflect&quot;> </xref>。"
    - id: instance
      type: System.Object
      description: "类型的实例。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Type
      description: "此的反射类型<code> objectType </code>。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  id: GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将反射类型转换为是运行时类型。"
  remarks: "GetRuntimeType 方法可反转<xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A>方法将反射类型转换回运行时类型。</xref:System.ComponentModel.TypeDescriptionProvider.GetReflectionType%2A> 使用 GetRuntimeType 方法优于使用<xref:System.Type.UnderlyingSystemType%2A>属性，它在早期版本中用于返回的运行时类型。</xref:System.Type.UnderlyingSystemType%2A>"
  syntax:
    content: public virtual Type GetRuntimeType (Type reflectionType);
    parameters:
    - id: reflectionType
      type: System.Type
      description: "要转换为其等效的运行时类型。"
    return:
      type: System.Type
      description: "A<xref:System.Type>表示的运行时等效项<code> reflectionType </code>。</xref:System.Type>"
  overload: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reflectionType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  id: GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "给定的对象中获取自定义类型描述符。"
  syntax:
    content: public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "类型的实例。 可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果将任何实例不传递给<xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>。"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref> ，可以提供类型的元数据。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>instance</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  id: GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取给定类型的自定义类型描述符。"
  syntax:
    content: public System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType);
    parameters:
    - id: objectType
      type: System.Type
      description: "为其检索类型描述符的对象的类型。"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref> ，可以提供类型的元数据。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  id: GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: GetTypeDescriptor(Type,Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取给定的类型和对象的自定义类型描述符。"
  remarks: "此方法的原型为`virtual`并且，如果未不传递任何父提供程序，则默认情况下，返回了空的描述符。 如果传递了父提供程序，该方法将调用父提供程序的 GetTypeDescriptor 方法。"
  syntax:
    content: public virtual System.ComponentModel.ICustomTypeDescriptor GetTypeDescriptor (Type objectType, object instance);
    parameters:
    - id: objectType
      type: System.Type
      description: "为其检索类型描述符的对象的类型。"
    - id: instance
      type: System.Object
      description: "类型的实例。 可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果将任何实例不传递给<xref href=&quot;System.ComponentModel.TypeDescriptor&quot;> </xref>。"
    return:
      type: System.ComponentModel.ICustomTypeDescriptor
      description: "<xref href=&quot;System.ComponentModel.ICustomTypeDescriptor&quot;> </xref> ，可以提供类型的元数据。"
  overload: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  id: IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  langs:
  - csharp
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取一个值，该值指示指定的类型是否兼容的类型说明和其链类型说明提供程序。"
  syntax:
    content: public virtual bool IsSupportedType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要测试兼容性的类型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> type </code>兼容的类型说明和其链类型说明提供程序; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.TypeDescriptionProvider.IsSupportedType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider()
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider()
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider()
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor(System.ComponentModel.TypeDescriptionProvider)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider(TypeDescriptionProvider)
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
  fullName: System.ComponentModel.TypeDescriptionProvider.TypeDescriptionProvider(TypeDescriptionProvider)
- uid: System.ComponentModel.TypeDescriptionProvider
  parent: System.ComponentModel
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider
  fullName: System.ComponentModel.TypeDescriptionProvider
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance(System.IServiceProvider,System.Type,System.Type[],System.Object[])
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: CreateInstance(IServiceProvider,Type,Type[],Object[])
  nameWithType: TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
  fullName: System.ComponentModel.TypeDescriptionProvider.CreateInstance(IServiceProvider,Type,Type[],Object[])
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetCache(Object)
  nameWithType: TypeDescriptionProvider.GetCache(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetCache(Object)
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtendedTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor(Object)
- uid: System.ComponentModel.ICustomTypeDescriptor
  parent: System.ComponentModel
  isExternal: false
  name: ICustomTypeDescriptor
  nameWithType: ICustomTypeDescriptor
  fullName: System.ComponentModel.ICustomTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtenderProviders(Object)
  nameWithType: TypeDescriptionProvider.GetExtenderProviders(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders(Object)
- uid: System.ComponentModel.IExtenderProvider[]
  parent: System.ComponentModel
  isExternal: false
  name: IExtenderProvider
  nameWithType: IExtenderProvider
  fullName: System.ComponentModel.IExtenderProvider[]
  spec.csharp:
  - uid: System.ComponentModel.IExtenderProvider
    name: IExtenderProvider
    nameWithType: IExtenderProvider
    fullName: IExtenderProvider[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetFullComponentName(Object)
  nameWithType: TypeDescriptionProvider.GetFullComponentName(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName(Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Type)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType(Type,Object)
  nameWithType: TypeDescriptionProvider.GetReflectionType(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetReflectionType(Type,Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetRuntimeType(Type)
  nameWithType: TypeDescriptionProvider.GetRuntimeType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Object)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Type)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type)
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(System.Type,System.Object)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor(Type,Object)
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
  fullName: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor(Type,Object)
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(System.Type)
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: IsSupportedType(Type)
  nameWithType: TypeDescriptionProvider.IsSupportedType(Type)
  fullName: System.ComponentModel.TypeDescriptionProvider.IsSupportedType(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.TypeDescriptionProvider.#ctor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: TypeDescriptionProvider
  nameWithType: TypeDescriptionProvider.TypeDescriptionProvider
- uid: System.ComponentModel.TypeDescriptionProvider.CreateInstance*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: CreateInstance
  nameWithType: TypeDescriptionProvider.CreateInstance
- uid: System.ComponentModel.TypeDescriptionProvider.GetCache*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetCache
  nameWithType: TypeDescriptionProvider.GetCache
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtendedTypeDescriptor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtendedTypeDescriptor
  nameWithType: TypeDescriptionProvider.GetExtendedTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.GetExtenderProviders*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetExtenderProviders
  nameWithType: TypeDescriptionProvider.GetExtenderProviders
- uid: System.ComponentModel.TypeDescriptionProvider.GetFullComponentName*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetFullComponentName
  nameWithType: TypeDescriptionProvider.GetFullComponentName
- uid: System.ComponentModel.TypeDescriptionProvider.GetReflectionType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetReflectionType
  nameWithType: TypeDescriptionProvider.GetReflectionType
- uid: System.ComponentModel.TypeDescriptionProvider.GetRuntimeType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetRuntimeType
  nameWithType: TypeDescriptionProvider.GetRuntimeType
- uid: System.ComponentModel.TypeDescriptionProvider.GetTypeDescriptor*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: GetTypeDescriptor
  nameWithType: TypeDescriptionProvider.GetTypeDescriptor
- uid: System.ComponentModel.TypeDescriptionProvider.IsSupportedType*
  parent: System.ComponentModel.TypeDescriptionProvider
  isExternal: false
  name: IsSupportedType
  nameWithType: TypeDescriptionProvider.IsSupportedType
