### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.Registry
  id: Registry
  children:
  - Microsoft.Win32.Registry.ClassesRoot
  - Microsoft.Win32.Registry.CurrentConfig
  - Microsoft.Win32.Registry.CurrentUser
  - Microsoft.Win32.Registry.DynData
  - Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.LocalMachine
  - Microsoft.Win32.Registry.PerformanceData
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  - Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  - Microsoft.Win32.Registry.Users
  langs:
  - csharp
  name: Registry
  nameWithType: Registry
  fullName: Microsoft.Win32.Registry
  type: Class
  summary: "提供<xref href=&quot;Microsoft.Win32.RegistryKey&quot;></xref>表示 Windows 注册表中的根键的对象和<xref uid=&quot;langword_csharp_static&quot; name=&quot;static&quot; href=&quot;&quot;></xref>方法，以访问键/值对。"
  remarks: "此类提供的一套标准的根项在运行 Windows 的计算机上的注册表中找到。 注册表是有关应用程序、 用户和默认系统设置信息的存储功能。 例如，应用程序可以使用注册表来存储需要后关闭应用程序时，保留的信息，并在重新加载应用程序时访问该相同信息。 例如，你可以存储颜色首选项、 的屏幕位置或窗口的大小。 你可以通过将信息存储在注册表中的其他位置来控制此数据用于每个用户。       基或根<xref:Microsoft.Win32.RegistryKey>实例公开的`Registry`类描述子项和注册表中的值的基本存储机制。</xref:Microsoft.Win32.RegistryKey> 所有项都是只读的因为注册表依赖于它们存在。 通过公开的键`Registry`是︰<xref:Microsoft.Win32.Registry.CurrentUser>存储有关用户首选项的信息。</xref:Microsoft.Win32.Registry.CurrentUser>       <xref:Microsoft.Win32.Registry.LocalMachine>存储为本地计算机的配置信息。</xref:Microsoft.Win32.Registry.LocalMachine>       <xref:Microsoft.Win32.Registry.ClassesRoot>存储有关类型 （类） 的信息和它们的属性。</xref:Microsoft.Win32.Registry.ClassesRoot>       <xref:Microsoft.Win32.Registry.Users>存储有关默认用户配置的信息。</xref:Microsoft.Win32.Registry.Users>       <xref:Microsoft.Win32.Registry.PerformanceData>将存储软件组件的性能的信息。</xref:Microsoft.Win32.Registry.PerformanceData>       <xref:Microsoft.Win32.Registry.CurrentConfig>存储非特定于用户的硬件信息。</xref:Microsoft.Win32.Registry.CurrentConfig>       <xref:Microsoft.Win32.Registry.DynData>将动态数据存储。</xref:Microsoft.Win32.Registry.DynData>       一旦你确定要在其下存储/检索注册表中的信息的根密钥，你可以使用<xref:Microsoft.Win32.RegistryKey>类来添加或删除子项，和操作给定键的值。</xref:Microsoft.Win32.RegistryKey>       硬件设备可以将信息放在使用自动插接口注册表中。 安装设备驱动程序软件可以通过写入标准 Api 在注册表中放置信息。      ## 用于获取文件和设置值中的.NET Framework 2.0 版的静态方法，注册表类还包含`static`<xref:Microsoft.Win32.Registry.GetValue%2A>和<xref:Microsoft.Win32.Registry.SetValue%2A>方法以设置，并从注册表项中检索值。</xref:Microsoft.Win32.Registry.SetValue%2A> </xref:Microsoft.Win32.Registry.GetValue%2A> 这些方法都将打开和关闭注册表项的每个其进行使用，因此它们不会执行的时间以及在类似方法<xref:Microsoft.Win32.RegistryKey>类，当你访问大量值时。</xref:Microsoft.Win32.RegistryKey>       <xref:Microsoft.Win32.RegistryKey>类还提供了让你可以设置注册表项，以进行检索之前，测试值的数据类型并删除项的 Windows 访问控制安全性的方法。</xref:Microsoft.Win32.RegistryKey>"
  example:
  - "This section contains two code examples. The first example demonstrates root keys, and the second example demonstrates the `static`<xref:Microsoft.Win32.Registry.GetValue%2A> and <xref:Microsoft.Win32.Registry.SetValue%2A> methods.  \n  \n Example 1  \n  \n The following code example demonstrates how to retrieve the subkeys of the HKEY_USERS key, and print their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in `RegistryKey` to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_1.vb)]  \n  \n Example 2  \n  \n The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/t-microsoft.win32.registry_2.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/t-microsoft.win32.registry_2.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/t-microsoft.win32.registry_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class Registry
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.ClassesRoot
  id: ClassesRoot
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "定义文档和与这些类型关联的属性的类型 （或类）。 此字段读取的 Windows 注册表基项 HKEY_CLASSES_ROOT。"
  remarks: "常规应用程序和 OLE 应用程序使用此项下存储的数据。 此密钥还通过将存储 DDE 和 OLE 的支持信息提供向后的兼容性 Windows 3.1 注册数据库。 文件查看器和用户界面扩展将其 OLE 类标识符存储在此密钥，并在此注册表项注册处理服务器。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-vb[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_4_1.vb)]\n [!code-cpp[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_4_1.cpp)]\n [!code-cs[Classic Registry.ClassesRoot Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_4_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey ClassesRoot;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentConfig
  id: CurrentConfig
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含与不是特定于用户的硬件相关的配置信息。 此字段读取的 Windows 注册表基项 HKEY_CURRENT_CONFIG。"
  remarks: "此成员映射到<xref:Microsoft.Win32.Registry.LocalMachine>.</xref:Microsoft.Win32.Registry.LocalMachine>中的子项       使用此成员的示例是存储不同的服务器名称，具体取决于是否系统连接到网络其数据的应用程序。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_1_1.cpp)]\n [!code-vb[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_1_1.vb)]\n [!code-cs[Classic Registry.CurrentConfig Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_1_1.cs)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentConfig;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.CurrentUser
  id: CurrentUser
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含有关当前用户首选项的信息。 此字段读取的 Windows 注册表基项 HKEY_CURRENT_USER"
  remarks: "存储在此项的信息包括的环境变量和关于程序组、 颜色、 打印机、 网络连接和应用程序首选项的数据的设置。 此密钥，使得易于建立当前用户的设置。 此密钥，在软件供应商存储的当前的特定于用户的首选项，要在其应用程序中使用。 Microsoft，例如，创建要用于每个应用程序创建其自己的 Microsoft 密钥下的子项及其应用程序 HKEY_CURRENT_USER\\Software\\Microsoft 项。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cpp[Classic Registry.CurrentUser Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_6_1.cpp)]\n [!code-cs[Classic Registry.CurrentUser Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_6_1.cs)]\n [!code-vb[Classic Registry.CurrentUser Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_6_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey CurrentUser;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.DynData
  id: DynData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含动态注册表数据。 此字段读取的 Windows 注册表基项 HKEY_DYN_DATA。"
  remarks: "Windows 98/Windows Me 注册表支持静态数据 （这存储在注册表中的磁盘） 和动态数据 （这会更改通常情况下，例如性能统计信息）。 此动态数据区域是可以远程和本地运行的 Win32 应用程序允许虚拟设备驱动程序 (VxDs) 提供实时数据的机制。 它还允许系统监视器在远程 Windows 98/Windows Me 系统上提供性能统计信息。       VxDs 并不仅限于性能数据。 它们可以提供他们想要将传递从 0 循环到最低的 3 环高效而不独占 CPU 任何的数据。 注册表支持通过将存储指向返回一个值 （或多个值） 的函数的动态数据。 当注册表调用查询值与键相关联动态，调用函数以返回所需的值。      1> [!NOTE] 1> 动态密钥引入在 Microsoft Windows 95 中以处理动态注册表数据。 支持仅在 Windows 98/Windows me。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can return no results, since there might not be dynamic data available, or you might not be running Windows 98/ME. Using this key may cause an error on other systems.  \n  \n [!code-vb[Classic Registry.DynData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_3_1.vb)]\n [!code-cs[Classic Registry.DynData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_3_1.cs)]\n [!code-cpp[Classic Registry.DynData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_3_1.cpp)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey DynData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "要添加。"
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "操作系统不支持动态数据;也就是说，它不 Windows 98、 Windows 98 Second Edition 或 Windows Millennium Edition (Windows Me)。"
  platform:
  - net462
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  id: GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "检索与指定的注册表项中的指定名称关联的值。 如果在指定键未找到的名称，将返回你提供的默认值或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果指定的键不存在。"
  remarks: "The string `valueName` is not case-sensitive.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To retrieve this unnamed value, specify either `null` or the empty string (\"\") for `valuName`.  \n  \n Valid root names are HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" accesses key/value pairs for the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root.  \n  \n When the <xref:Microsoft.Win32.RegistryKey.GetValue%2A> method retrieves expandable string values (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), it expands environment strings using data from the local environment. If a value containing expandable references to environment variables has been stored as a string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), rather than as an expandable string (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), <xref:Microsoft.Win32.RegistryKey.GetValue%2A> does not expand it. You can expand such a string after it has been retrieved by calling the <xref:System.Environment.ExpandEnvironmentVariables%2A?displayProperty=fullName> method.  \n  \n> [!NOTE]\n>  The recommended way to retrieve data from HKEY_PERFORMANCE_DATA is to use the <xref:System.Diagnostics.PerformanceCounter> class rather than the <xref:Microsoft.Win32.RegistryKey.GetValue%2A?displayProperty=fullName> method.  \n  \n The GetValue and <xref:Microsoft.Win32.Registry.SetValue%2A> methods open and close registry keys each time they are used, so they do not perform as well as the methods of the <xref:Microsoft.Win32.RegistryKey> class if you access a large number of values.  \n  \n <xref:Microsoft.Win32.RegistryKey> also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_14_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_14_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_14_1.cpp)]"
  syntax:
    content: public static object GetValue (string keyName, string valueName, object defaultValue);
    parameters:
    - id: keyName
      type: System.String
      description: "项，以有效的注册表根，如&quot;HKEY_CURRENT_USER&quot;开头的完整的注册表路径。"
    - id: valueName
      type: System.String
      description: "名称/值对的名称。"
    - id: defaultValue
      type: System.Object
      description: "如果返回的值`valueName`不存在。"
    return:
      type: System.Object
      description: "<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果通过指定的子项<code> keyName </code>不存在; 否则，与关联的值<code> valueName </code>，或<code> defaultValue </code>如果<code> valueName </code>找不到。"
  overload: Microsoft.Win32.Registry.GetValue*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有读取注册表项所需的权限。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref> ，该字符串包含指定值已标记为删除。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>才会开始具有有效的注册表根。"
  platform:
  - net462
- uid: Microsoft.Win32.Registry.LocalMachine
  id: LocalMachine
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含本地计算机的配置数据。 此字段读取的 Windows 注册表基项 HKEY_LOCAL_MACHINE。"
  remarks: "`LocalMachine`包含五个键︰ 硬件描述中计算机的物理硬件、 设备驱动程序的方式使用该硬件，和映射和链接，用户模式代码的内核模式驱动程序的相关的数据。 此密钥中的所有数据进行重新都创建每次启动系统。 说明子项描述的实际计算机硬件。 DeviceMap 子项包含特定于特定类的驱动程序的格式的其他数据。 ResourceMap 子项描述哪些设备驱动程序声明哪些硬件资源。 Windows NT 诊断程序 (Winmsdp.exe) 可以报告其内容以易于理解的形式。       SAM 目录服务的用户和组帐户，以及在 Windows 2000 Server 域的安全信息的数据库 （SAM 是安全帐户管理器，称为目录服务数据库）。       安全包含本地安全策略，例如，特定的用户权限。 只能由 Windows 2000 安全子系统使用此密钥。       软件每台计算机软件数据库。 此项包含有关与各种项的其他配置数据一起在本地计算机上安装软件的数据。       系统控件系统启动、 设备驱动程序加载、 Windows 2000 服务和操作系统行为。       按照约定，如果在存在相似的数据<xref:Microsoft.Win32.Registry.CurrentUser>LocalMachine 中的数据在<xref:Microsoft.Win32.Registry.CurrentUser>优先。</xref:Microsoft.Win32.Registry.CurrentUser> </xref:Microsoft.Win32.Registry.CurrentUser> 但是，在此注册表项的值可以还扩展 （而不是替换） Registry.LocalMachine 中的数据。 此外，某些项 （例如加载项的设备驱动程序） 将毫无意义，如果它们在 Registry.LocalMachine 外部发生。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.LocalMachine Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_0_1.cs)]\n [!code-cpp[Classic Registry.LocalMachine Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_0_1.cpp)]\n [!code-vb[Classic Registry.LocalMachine Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_0_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey LocalMachine;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.PerformanceData
  id: PerformanceData
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含软件组件的性能的信息。 此字段读取的 Windows 注册表基项 HKEY_PERFORMANCE_DATA。"
  remarks: "每个软件组件会创建其对象，它在已安装，并执行时将计数器数据时的计数器的键。 你可以访问此数据，如像访问任何其他注册表数据，使用<xref:Microsoft.Win32.RegistryKey>函数。</xref:Microsoft.Win32.RegistryKey>       尽管你使用注册表收集性能数据，数据不存储在注册表数据库。 相反，使用此密钥访问注册表会导致系统从相应的系统对象管理器收集的数据。       若要从本地系统中获取性能数据，请使用<xref:Microsoft.Win32.RegistryKey.GetValue%2A>方法，与 Registry.PerformanceData 键。</xref:Microsoft.Win32.RegistryKey.GetValue%2A> 第一次调用将打开 （您不必显式第一次打开此项） 的密钥。 但是，请务必使用<xref:Microsoft.Win32.RegistryKey.Close%2A>方法来关闭项的句柄，在完成后获得性能数据。</xref:Microsoft.Win32.RegistryKey.Close%2A> 用户无法安装或删除的软件组件，在使用其性能数据时。       若要从远程系统获取性能数据，必须使用<xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A>方法，与远程系统和 Registry.PerformanceData 密钥的计算机名称。</xref:Microsoft.Win32.RegistryKey.OpenRemoteBaseKey%2A> 此呼叫会检索表示远程系统的性能数据的密钥。 若要检索的数据，调用<xref:Microsoft.Win32.RegistryKey.GetValue%2A>使用此密钥，而不是 Registry.PerformanceData 密钥。</xref:Microsoft.Win32.RegistryKey.GetValue%2A>      1> [!NOTE] 1> Windows Server 2003 上，用户必须至少属于性能监视器用户组才能访问此基项的子项。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key. Note that this example can often return no results, since there might be no performance data.  \n  \n [!code-cs[Classic Registry.PerformanceData Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_2_1.cs)]\n [!code-cpp[Classic Registry.PerformanceData Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_2_1.cpp)]\n [!code-vb[Classic Registry.PerformanceData Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_2_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey PerformanceData;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  id: SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "在指定的注册表项上设置指定的名称/值对。 如果指定的键不存在，则创建它。"
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues to have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores 64-bit integers as strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>). To store 64-bit numbers as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> values, use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload of <xref:Microsoft.Win32.Registry.SetValue%2A> stores all string values as <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> objects, even if they contain expandable references to environment variables. To save string values as expandable strings (<xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>), use the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload.  \n  \n This overload is equivalent to calling the <xref:Microsoft.Win32.Registry.SetValue%28System.String%2CSystem.String%2CSystem.Object%2CMicrosoft.Win32.RegistryValueKind%29> method overload with <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/m-microsoft.win32.regist_8_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/m-microsoft.win32.regist_8_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/m-microsoft.win32.regist_8_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value);
    parameters:
    - id: keyName
      type: System.String
      description: "项，以有效的注册表根，如&quot;HKEY_CURRENT_USER&quot;开头的完整的注册表路径。"
    - id: valueName
      type: System.String
      description: "名称/值对的名称。"
    - id: value
      type: System.Object
      description: "要存储的值。"
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>才会开始具有有效的注册表根。       -或-<code>keyName</code>长于允许的最大长度 （255 个字符）。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref>是只读的并因此无法写入; 例如，它是根级别节点。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有创建或修改注册表项所需的权限。"
  platform:
  - net462
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  id: SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
  type: Method
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "在指定的注册表项，使用指定的注册表数据类型上设置的名称/值对。 如果指定的键不存在，则创建它。"
  remarks: "Starting with the [!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)], the `valueName` parameter is no longer restricted to a maximum of 255 characters; however, the `keyName` parameter continues have the 255-character restriction.  \n  \n Because many values can be stored in each key in the registry, you must use the `valueName` parameter to specify the particular value you want to set.  \n  \n> [!NOTE]\n>  A registry key can contain one value that is not associated with any name. When this unnamed value is displayed in the registry editor, the string \"(Default)\" appears instead of a name. To set this unnamed value, specify either `null` or the empty string (\"\") for `valueName`.  \n  \n If `valueName` does not exist in the key, it is created and the associated value is set to `value`.  \n  \n If `keyName` specifies a subkey that does not exist, the subkey is created in the specified root. For example, in Visual Basic the string \"HKEY_CURRENT_USER\\MyTestKey\" creates the subkey \"MyTestKey\" in the HKEY_CURRENT_USER root. The string \"HKEY_CURRENT_USER\\MyTestKey\\Key2\\Key3\" creates the nested subkeys \"MyTestKey\", \"MyTestKey\\Key2\", and \"MyTestKey\\Key2\\Key3\".  \n  \n Valid root names include HKEY_CURRENT_USER, HKEY_LOCAL_MACHINE, HKEY_CLASSES_ROOT, HKEY_USERS, HKEY_PERFORMANCE_DATA, HKEY_CURRENT_CONFIG, and HKEY_DYN_DATA.  \n  \n> [!NOTE]\n>  The <xref:Microsoft.Win32.Registry.SetValue%2A> method opens a registry key, sets the value, and closes the key each time it is called. If you need to modify a large number of values, the <xref:Microsoft.Win32.RegistryKey.SetValue%2A?displayProperty=fullName> method might provide better performance. The <xref:Microsoft.Win32.RegistryKey> class also provides methods that allow you to add an access control list (ACL) to a registry key, to test the data type of a value before retrieving it, and to delete keys.  \n  \n If the type of the specified `value` does not match the specified `valueKind`, and the data cannot be converted, <xref:System.ArgumentException> is thrown. For example, you can store a <xref:System.Int64?displayProperty=fullName> as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, but only if its value is less than the maximum value of a <xref:System.Int32?displayProperty=fullName>. You cannot store a single string value as a <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>.  \n  \n> [!NOTE]\n>  If boxed values are passed for <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName> or <xref:Microsoft.Win32.RegistryValueKind?displayProperty=fullName>, the conversion is done using the invariant culture.  \n  \n> [!NOTE]\n>  On Windows 98 and Windows Millennium Edition (Windows Me), the registry is not Unicode, and not all Unicode characters are valid for all code pages. A Unicode character that is invalid for the current code page is replaced by the best available match. No exception is thrown."
  example:
  - "The following code example stores values of several data types in an example key, creating the key as it does so, and then retrieves and displays the values. The example demonstrates storing and retrieving the default (nameless) name/value pair, and the use of `defaultValue` when a name/value pair does not exist.  \n  \n [!code-cs[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/csharp/7747259a-b475-4eec-8a66-_1.cs)]\n [!code-vb[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/visualbasic/7747259a-b475-4eec-8a66-_1.vb)]\n [!code-cpp[Microsoft.Win32.Registry.GetSet#1](~/add/codesnippet/cpp/7747259a-b475-4eec-8a66-_1.cpp)]"
  syntax:
    content: public static void SetValue (string keyName, string valueName, object value, Microsoft.Win32.RegistryValueKind valueKind);
    parameters:
    - id: keyName
      type: System.String
      description: "项，以有效的注册表根，如&quot;HKEY_CURRENT_USER&quot;开头的完整的注册表路径。"
    - id: valueName
      type: System.String
      description: "名称/值对的名称。"
    - id: value
      type: System.Object
      description: "要存储的值。"
    - id: valueKind
      type: Microsoft.Win32.RegistryValueKind
      description: "要存储数据时使用的注册表数据类型。"
  overload: Microsoft.Win32.Registry.SetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>keyName</code>才会开始具有有效的注册表根。       -或-<code>keyName</code>长于允许的最大长度 （255 个字符）。       -的一种<code>value</code>与由指定的注册表数据类型不匹配<code>valueKind</code>，因此可能不会正确转换该数据。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<xref href=&quot;Microsoft.Win32.RegistryKey&quot;> </xref>是只读的并因此无法写入; 例如，是一个根级别节点，或不具有写访问权限打开的注册表项。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有创建或修改注册表项所需的权限。"
  platform:
  - net462
- uid: Microsoft.Win32.Registry.Users
  id: Users
  parent: Microsoft.Win32.Registry
  langs:
  - csharp
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
  type: Field
  assemblies:
  - mscorlib
  namespace: Microsoft.Win32
  summary: "包含有关默认用户配置的信息。 此字段读取的 Windows 注册表基项 HKEY_USERS。"
  remarks: "此项包含计算机的每个用户一个分支。 如果用户未更改首选项，默认配置被提供对本地计算机上的新用户和默认当前用户。 因为 Windows 98 / 我还支持 Registry.Users，应用程序可以访问特定于用户的信息在 Windows 2000 下的相同方式。 每个用户的信息存储在单独的文件，可以将存储在本地或网络服务器上。 Windows 98 / 我可以将此文件复制到用户的当前系统，以便设置可以从一台计算机之间移动与该用户。"
  example:
  - "The following example demonstrates how to retrieve the subkeys of this key, and prints their names to the screen. Use the <xref:Microsoft.Win32.RegistryKey.OpenSubKey%2A> method to create an instance of the particular subkey of interest. You can then use other operations in <xref:Microsoft.Win32.RegistryKey> to manipulate that key.  \n  \n [!code-cs[Classic Registry.Users Example#1](~/add/codesnippet/csharp/f-microsoft.win32.regist_5_1.cs)]\n [!code-cpp[Classic Registry.Users Example#1](~/add/codesnippet/cpp/f-microsoft.win32.regist_5_1.cpp)]\n [!code-vb[Classic Registry.Users Example#1](~/add/codesnippet/visualbasic/f-microsoft.win32.regist_5_1.vb)]"
  syntax:
    content: public static readonly Microsoft.Win32.RegistryKey Users;
    return:
      type: Microsoft.Win32.RegistryKey
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: Microsoft.Win32.Registry.ClassesRoot
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: ClassesRoot
  nameWithType: Registry.ClassesRoot
  fullName: Microsoft.Win32.Registry.ClassesRoot
- uid: Microsoft.Win32.RegistryKey
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryKey
  nameWithType: RegistryKey
  fullName: Microsoft.Win32.RegistryKey
- uid: Microsoft.Win32.Registry.CurrentConfig
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentConfig
  nameWithType: Registry.CurrentConfig
  fullName: Microsoft.Win32.Registry.CurrentConfig
- uid: Microsoft.Win32.Registry.CurrentUser
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: CurrentUser
  nameWithType: Registry.CurrentUser
  fullName: Microsoft.Win32.Registry.CurrentUser
- uid: Microsoft.Win32.Registry.DynData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: DynData
  nameWithType: Registry.DynData
  fullName: Microsoft.Win32.Registry.DynData
- uid: Microsoft.Win32.Registry.GetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue(String,String,Object)
  nameWithType: Registry.GetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.GetValue(String,String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Win32.Registry.LocalMachine
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: LocalMachine
  nameWithType: Registry.LocalMachine
  fullName: Microsoft.Win32.Registry.LocalMachine
- uid: Microsoft.Win32.Registry.PerformanceData
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: PerformanceData
  nameWithType: Registry.PerformanceData
  fullName: Microsoft.Win32.Registry.PerformanceData
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object)
  nameWithType: Registry.SetValue(String,String,Object)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object)
- uid: Microsoft.Win32.Registry.SetValue(System.String,System.String,System.Object,Microsoft.Win32.RegistryValueKind)
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue(String,String,Object,RegistryValueKind)
  nameWithType: Registry.SetValue(String,String,Object,RegistryValueKind)
  fullName: Microsoft.Win32.Registry.SetValue(String,String,Object,RegistryValueKind)
- uid: Microsoft.Win32.RegistryValueKind
  parent: Microsoft.Win32
  isExternal: false
  name: RegistryValueKind
  nameWithType: RegistryValueKind
  fullName: Microsoft.Win32.RegistryValueKind
- uid: Microsoft.Win32.Registry.Users
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: Users
  nameWithType: Registry.Users
  fullName: Microsoft.Win32.Registry.Users
- uid: Microsoft.Win32.Registry.GetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: GetValue
  nameWithType: Registry.GetValue
- uid: Microsoft.Win32.Registry.SetValue*
  parent: Microsoft.Win32.Registry
  isExternal: false
  name: SetValue
  nameWithType: Registry.SetValue
