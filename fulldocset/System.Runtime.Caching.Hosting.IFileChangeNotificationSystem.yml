### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem
  id: IFileChangeNotificationSystem
  children:
  - System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)
  - System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)
  langs:
  - csharp
  name: IFileChangeNotificationSystem
  nameWithType: IFileChangeNotificationSystem
  fullName: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem
  type: Interface
  summary: "定义了如何公开自定义<xref href=&quot;System.Runtime.Caching.FileChangeMonitor&quot;></xref>向缓存实现的对象。"
  remarks: "在 ASP.NET 中，IFileChangeNotificationSystem 接口提供对内部的文件更改通知管理的访问。       IFileChangeNotificationSystem 接口用于在内部的<xref:System.Runtime.Caching.HostFileChangeMonitor>类。</xref:System.Runtime.Caching.HostFileChangeMonitor>       ASP.NET 缓存实现运行时在 ASP.NET 应用程序域中，实现通过 IFileChangeNotificationSystem 接口<xref:System.Runtime.Caching.ObjectCache.Host%2A>属性。</xref:System.Runtime.Caching.ObjectCache.Host%2A> <xref:System.Runtime.Caching.HostFileChangeMonitor>类检测此属性，并使用 ASP.NET 文件更改通知系统来收回基于文件更改通知的缓存条目。</xref:System.Runtime.Caching.HostFileChangeMonitor>       在非 ASP.NET 应用程序，没有实现自定义的 IFileChangeNotificationSystem 接口任何主机环境。 因此，<xref:System.Runtime.Caching.HostFileChangeMonitor>类使用<xref:System.IO.FileSystemWatcher>的 CLR 类。</xref:System.IO.FileSystemWatcher> </xref:System.Runtime.Caching.HostFileChangeMonitor>"
  syntax:
    content: public interface IFileChangeNotificationSystem
  implements: []
  platform:
  - net462
- uid: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)
  id: StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)
  parent: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem
  langs:
  - csharp
  name: StartMonitoring(String,OnChangedCallback,Object,DateTimeOffset,Int64)
  nameWithType: IFileChangeNotificationSystem.StartMonitoring(String,OnChangedCallback,Object,DateTimeOffset,Int64)
  fullName: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(String,OnChangedCallback,Object,DateTimeOffset,Int64)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching.Hosting
  summary: "注册一个文件路径以监视与主机环境。"
  remarks: "此方法使用由自定义缓存对象和自定义更改实现主机环境的监视器<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>接口，以便注册以使用主机环境进行监视的文件路径。</xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem> StartMonitoring 方法调用的实施者<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>接口，以便注册的文件或用于更改监视的目录。</xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem>"
  syntax:
    content: public void StartMonitoring (string filePath, System.Runtime.Caching.OnChangedCallback onChangedCallback, out object state, out DateTimeOffset lastWriteTime, out long fileSize);
    parameters:
    - id: filePath
      type: System.String
      description: "目录或文件用于监视更改的完全限定的物理路径。"
    - id: onChangedCallback
      type: System.Runtime.Caching.OnChangedCallback
      description: "实现方法的引用<xref href=&quot;System.Runtime.Caching.OnChangedCallback&quot;></xref>委托。 监视的文件或目录发生更改时，宿主环境的实现<xref href=&quot;System.Runtime.Caching.Hosting.IFileChangeNotificationSystem&quot;></xref>接口通过调用来引发事件<xref href=&quot;System.Runtime.Caching.OnChangedCallback&quot;></xref>类。"
    - id: state
      type: System.Object
      description: "由主机环境提供的状态。 缓存实现和自定义更改监视器应将状态的值视为不透明。 但是，状态必须存储，以便可以将它发送给主机环境时的缓存实现调用<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring*>方法。</xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring*>"
    - id: lastWriteTime
      type: System.DateTimeOffset
      description: "此方法返回时，包含上次的日期和发生写入操作的时间`filePath`。 此参数传递时未经初始化。 从主机环境时返回此参数。"
    - id: fileSize
      type: System.Int64
      description: "此方法返回时，包含所监视的总大小`filePath`。 此参数传递时未经初始化。 从主机环境时返回此参数。"
  overload: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)
  id: StopMonitoring(System.String,System.Object)
  parent: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem
  langs:
  - csharp
  name: StopMonitoring(String,Object)
  nameWithType: IFileChangeNotificationSystem.StopMonitoring(String,Object)
  fullName: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(String,Object)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching.Hosting
  summary: "结束更改监视。"
  remarks: "必须由自定义缓存和正在停止监视文件路径和目录以释放由宿主环境的自定义更改监视器调用 StopMonitoring 方法。"
  syntax:
    content: public void StopMonitoring (string filePath, object state);
    parameters:
    - id: filePath
      type: System.String
      description: "文件或要停止监视文件夹的路径。 这应匹配到的早期调用中传递一个文件路径值<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring*>方法。</xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring*>"
    - id: state
      type: System.Object
      description: "在以前调用期间最初由主机环境提供的状态信息<xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring*>方法。</xref:System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring*>"
  overload: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(System.String,System.Runtime.Caching.OnChangedCallback,System.Object@,System.DateTimeOffset@,System.Int64@)
  parent: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem
  isExternal: false
  name: StartMonitoring(String,OnChangedCallback,Object,DateTimeOffset,Int64)
  nameWithType: IFileChangeNotificationSystem.StartMonitoring(String,OnChangedCallback,Object,DateTimeOffset,Int64)
  fullName: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring(String,OnChangedCallback,Object,DateTimeOffset,Int64)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Caching.OnChangedCallback
  parent: System.Runtime.Caching
  isExternal: false
  name: OnChangedCallback
  nameWithType: OnChangedCallback
  fullName: System.Runtime.Caching.OnChangedCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(System.String,System.Object)
  parent: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem
  isExternal: false
  name: StopMonitoring(String,Object)
  nameWithType: IFileChangeNotificationSystem.StopMonitoring(String,Object)
  fullName: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring(String,Object)
- uid: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StartMonitoring*
  parent: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem
  isExternal: false
  name: StartMonitoring
  nameWithType: IFileChangeNotificationSystem.StartMonitoring
- uid: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem.StopMonitoring*
  parent: System.Runtime.Caching.Hosting.IFileChangeNotificationSystem
  isExternal: false
  name: StopMonitoring
  nameWithType: IFileChangeNotificationSystem.StopMonitoring
