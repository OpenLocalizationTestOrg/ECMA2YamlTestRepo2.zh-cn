### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.NameObjectCollectionBase
  id: NameObjectCollectionBase
  children:
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.Count
  - System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  - System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  - System.Collections.Specialized.NameObjectCollectionBase.Keys
  - System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: NameObjectCollectionBase
  nameWithType: NameObjectCollectionBase
  fullName: System.Collections.Specialized.NameObjectCollectionBase
  type: Class
  summary: "提供<xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;></xref>基类的集合关联<xref:System.String>密钥和<xref:System.Object>可通过键或索引访问的值。</xref:System.Object> </xref:System.String>"
  remarks: "此类的基础结构是一个哈希表。       每个元素是一个键/值对。       NameObjectCollectionBase 的容量是 NameObjectCollectionBase 能够容纳的元素数。 当元素添加到 NameObjectCollectionBase 时，自动增加容量通过重新分配所需的方式。       哈希代码提供程序分配 NameObjectCollectionBase 实例中的键的哈希代码。 默认哈希代码提供程序为<xref:System.Collections.CaseInsensitiveHashCodeProvider>。</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比较器确定两个键是否相等。 默认比较器是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       在.NET Framework 1.0 版中，此类使用区分区域性的字符串比较。 但是，在.NET Framework 1.1 和更高版本中，此类使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>比较字符串时。</xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> 有关如何区域性影响比较和排序的详细信息，请参阅[执行不区分区域性的字符串操作](~/add/includes/ajax-current-ext-md.md)。       `null`允许作为键或值。      1> [!CAUTION]&1;><xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A>方法之间没有区别`null`返回这是因为找不到指定的键和`null`因为与键关联的值返回这`null`。</xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A>"
  example:
  - "The following code example shows how to implement and use the NameObjectCollectionBase class.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase#1](~/add/codesnippet/cpp/t-system.collections.spe_0_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase#1](~/add/codesnippet/csharp/t-system.collections.spe_0_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase#1](~/add/codesnippet/visualbasic/t-system.collections.spe_0_1.vb)]"
  syntax:
    content: 'public abstract class NameObjectCollectionBase : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable'
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase()
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新实例<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>为空的类。"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>是元素的数目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以容纳。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 如元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>时调整操作       哈希代码提供程序分配中的键的哈希代码<xref:System.Collections.Specialized.NameObjectCollectionBase>实例。</xref:System.Collections.Specialized.NameObjectCollectionBase> 默认哈希代码提供程序为<xref:System.Collections.CaseInsensitiveHashCodeProvider>。</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比较器确定两个键是否相等。 默认比较器是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       此构造函数是 o （1） 操作。"
  syntax:
    content: protected NameObjectCollectionBase ();
    parameters: []
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)
  id: '#ctor(System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(IEqualityComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新实例<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>类为空，具有默认初始容量，并使用指定<xref:System.Collections.IEqualityComparer>对象。</xref:System.Collections.IEqualityComparer>"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>对象是元素的数目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以容纳。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 如元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>时调整操作       <xref:System.Collections.IEqualityComparer>对象将比较器和哈希代码提供程序结合起来。</xref:System.Collections.IEqualityComparer>  哈希代码提供程序分配<xref:System.Collections.Specialized.NameObjectCollectionBase>.</xref:System.Collections.Specialized.NameObjectCollectionBase>中的键的哈希代码  比较器确定两个键是否相等。       此构造函数是 o （1） 操作。"
  syntax:
    content: protected NameObjectCollectionBase (System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>对象，用于确定两个键是否相等，并为集合中生成的键的哈希代码。</xref:System.Collections.IEqualityComparer>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(Int32)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新实例<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>类为空，具有指定的初始容量，并使用默认哈希代码提供程序和默认比较器。"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>是元素的数目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以容纳。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 如元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>时调整操作       哈希代码提供程序分配中的键的哈希代码<xref:System.Collections.Specialized.NameObjectCollectionBase>实例。</xref:System.Collections.Specialized.NameObjectCollectionBase> 默认哈希代码提供程序为<xref:System.Collections.CaseInsensitiveHashCodeProvider>。</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比较器确定两个键是否相等。 默认比较器是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       此构造函数是 O (`n`) 操作，其中`n`是`capacity`。"
  syntax:
    content: protected NameObjectCollectionBase (int capacity);
    parameters:
    - id: capacity
      type: System.Int32
      description: "大概项数， <xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>实例最初可以包含。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>小于零。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(IHashCodeProvider,IComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IHashCodeProvider,IComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新实例<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>类为空，具有默认初始容量，并使用指定的哈希代码提供程序和指定的比较器。"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>是元素的数目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以容纳。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 如元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>时调整操作       哈希代码提供程序分配中的键的哈希代码<xref:System.Collections.Specialized.NameObjectCollectionBase>实例。</xref:System.Collections.Specialized.NameObjectCollectionBase> 默认哈希代码提供程序为<xref:System.Collections.CaseInsensitiveHashCodeProvider>。</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比较器确定两个键是否相等。 默认比较器是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       此构造函数是 o （1） 操作。"
  syntax:
    content: protected NameObjectCollectionBase (System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer);
    parameters:
    - id: hashProvider
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> ，将提供中的所有键的哈希代码<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>可用于确定两个键是否相等。</xref:System.Collections.IComparer>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)
  id: '#ctor(System.Int32,System.Collections.IEqualityComparer)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(Int32,IEqualityComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32,IEqualityComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32,IEqualityComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新实例<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>类为空，具有指定的初始容量，并使用指定<xref:System.Collections.IEqualityComparer>对象。</xref:System.Collections.IEqualityComparer>"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>对象是元素的数目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以容纳。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 如元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>时调整操作       <xref:System.Collections.IEqualityComparer>对象将比较器和哈希代码提供程序结合起来。</xref:System.Collections.IEqualityComparer>  哈希代码提供程序分配<xref:System.Collections.Specialized.NameObjectCollectionBase>.</xref:System.Collections.Specialized.NameObjectCollectionBase>中的键的哈希代码  比较器确定两个键是否相等。       此构造函数是 O (`n`) 操作，其中`n`是`capacity`参数。"
  syntax:
    content: protected NameObjectCollectionBase (int capacity, System.Collections.IEqualityComparer equalityComparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "大概项数， <xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>最初可以包含对象。"
    - id: equalityComparer
      type: System.Collections.IEqualityComparer
      description: "<xref:System.Collections.IEqualityComparer>对象，用于确定两个键是否相等，并为集合中生成的键的哈希代码。</xref:System.Collections.IEqualityComparer>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>小于零。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(SerializationInfo,StreamingContext)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(SerializationInfo,StreamingContext)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新实例<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>是可序列化并使用指定的类<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>和&lt;xref:System.Runtime.Serialization.StreamingContext?displayProperty=fullName&gt;。"
  remarks: "此构造函数是 o （1） 操作。"
  syntax:
    content: protected NameObjectCollectionBase (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>包含序列化新所必需的信息的对象<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A &lt;xref:System.Runtime.Serialization.StreamingContext?displayProperty=fullName&gt;对象，其中包含的源和目标与新关联的序列化流<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  id: '#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)'
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "初始化的新实例<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>类为空，具有指定的初始容量并使用指定的哈希代码提供程序和指定的比较器。"
  remarks: "容量<xref:System.Collections.Specialized.NameObjectCollectionBase>是元素的数目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以容纳。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 如元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>，自动增加容量通过重新分配在内部数组所需的方式。</xref:System.Collections.Specialized.NameObjectCollectionBase>       如果可以估计集合的大小，指定的初始容量，则无需执行大量的大小将元素添加到<xref:System.Collections.Specialized.NameObjectCollectionBase>。</xref:System.Collections.Specialized.NameObjectCollectionBase>时调整操作       哈希代码提供程序分配中的键的哈希代码<xref:System.Collections.Specialized.NameObjectCollectionBase>实例。</xref:System.Collections.Specialized.NameObjectCollectionBase> 默认哈希代码提供程序为<xref:System.Collections.CaseInsensitiveHashCodeProvider>。</xref:System.Collections.CaseInsensitiveHashCodeProvider>       比较器确定两个键是否相等。 默认比较器是<xref:System.Collections.CaseInsensitiveComparer>.</xref:System.Collections.CaseInsensitiveComparer>       此构造函数是 O (`n`) 操作，其中`n`是`capacity`。"
  syntax:
    content: protected NameObjectCollectionBase (int capacity, System.Collections.IHashCodeProvider hashProvider, System.Collections.IComparer comparer);
    parameters:
    - id: capacity
      type: System.Int32
      description: "大概项数， <xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>实例最初可以包含。"
    - id: hashProvider
      type: System.Collections.IHashCodeProvider
      description: "<xref href=&quot;System.Collections.IHashCodeProvider&quot;> </xref> ，将提供中的所有键的哈希代码<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
    - id: comparer
      type: System.Collections.IComparer
      description: "<xref:System.Collections.IComparer>可用于确定两个键是否相等。</xref:System.Collections.IComparer>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>capacity</code>小于零。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  id: BaseAdd(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseAdd(String,Object)
  nameWithType: NameObjectCollectionBase.BaseAdd(String,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(String,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "将添加一个具有指定的键和值转换为项<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "如果<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>已经等于容量的容量<xref:System.Collections.Specialized.NameObjectCollectionBase>增加通过自动重新分配在内部数组和现有元素被复制到新数组中，在添加新的元素之前。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>       如果<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>小于容量，此方法为 o （1） 运算。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A> 如果容量需要增加以容纳新元素，此方法会成为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses BaseAdd to create a new <xref:System.Collections.Specialized.NameObjectCollectionBase> with elements from an <xref:System.Collections.IDictionary>.  \n  \n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1](~/add/codesnippet/visualbasic/08f4bd55-361e-4a55-bdc1-_1.vb)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1](~/add/codesnippet/cpp/08f4bd55-361e-4a55-bdc1-_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseAdd#1](~/add/codesnippet/csharp/08f4bd55-361e-4a55-bdc1-_1.cs)]"
  syntax:
    content: protected void BaseAdd (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>添加的条目键</xref:System.String> 键可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>添加的项的值</xref:System.Object> 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是只读的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  id: BaseClear
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseClear()
  nameWithType: NameObjectCollectionBase.BaseClear()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "移除所有项从<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>是设置为零，并且集合的元素对其他对象的引用也被释放。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>       此方法为 o （1） 运算。"
  example:
  - "The following code example uses BaseClear to remove all elements from a <xref:System.Collections.Specialized.NameObjectCollectionBase>.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1](~/add/codesnippet/csharp/m-system.collections.spe_13_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1](~/add/codesnippet/visualbasic/m-system.collections.spe_13_1.vb)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseClear#1](~/add/codesnippet/cpp/m-system.collections.spe_13_1.cpp)]"
  syntax:
    content: protected void BaseClear ();
    parameters: []
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseClear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是只读的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  id: BaseGet(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGet(Int32)
  nameWithType: NameObjectCollectionBase.BaseGet(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取指定索引处的项的值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "此方法为 o （1） 运算。"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey%2A> and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A> to get specific keys and values.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/cpp/m-system.collections.spe_24_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/csharp/m-system.collections.spe_24_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/visualbasic/m-system.collections.spe_24_1.vb)]"
  syntax:
    content: protected object BaseGet (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要获取的值的从零开始的索引。"
    return:
      type: System.Object
      description: "<xref:System.Object>，表示指定索引处的项的值。</xref:System.Object>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGet*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出的索引集合的有效范围。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  id: BaseGet(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGet(String)
  nameWithType: NameObjectCollectionBase.BaseGet(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取具有指定键的第一个条目的值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "如果集合包含具有指定键的多个条目，此方法将返回仅的第一个条目。 若要使用相同的键获取后续项的值，请使用枚举器循环访问集合并对键进行比较。      1> [!CAUTION] 1> 此方法返回`null`在以下情况︰ 1） 如果找不到指定的键;，2） 如果找到指定的键，其关联的值为`null`。 此方法不区分两种情况。       此方法为 o （1） 运算。"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey%2A> and BaseGet to get specific keys and values.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/cpp/m-system.collections.spe_41_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/csharp/m-system.collections.spe_41_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/visualbasic/m-system.collections.spe_41_1.vb)]"
  syntax:
    content: protected object BaseGet (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>要获取的项键。</xref:System.String> 键可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Object
      description: "<xref:System.Object>，具有指定键，表示第一个条目的值，如果找到; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Object>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  id: BaseGetAllKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGetAllKeys()
  nameWithType: NameObjectCollectionBase.BaseGetAllKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "返回<xref:System.String>数组，其中包含中的所有键<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。</xref:System.String>"
  remarks: "此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses BaseGetAllKeys and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues%2A> to get an array of the keys or an array of the values.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/csharp/m-system.collections.spe_38_1.cs)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/cpp/m-system.collections.spe_38_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/visualbasic/m-system.collections.spe_38_1.vb)]"
  syntax:
    content: protected string[] BaseGetAllKeys ();
    parameters: []
    return:
      type: System.String[]
      description: "A<xref:System.String>数组，其中包含中的所有键<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。</xref:System.String>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  id: BaseGetAllValues
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGetAllValues()
  nameWithType: NameObjectCollectionBase.BaseGetAllValues()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "返回<xref:System.Object>数组，其中包含中的所有值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。</xref:System.Object>"
  remarks: "此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys%2A> and BaseGetAllValues to get an array of the keys or an array of the values.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/csharp/m-system.collections.spe_32_1.cs)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/cpp/m-system.collections.spe_32_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGetAll#1](~/add/codesnippet/visualbasic/m-system.collections.spe_32_1.vb)]"
  syntax:
    content: protected object[] BaseGetAllValues ();
    parameters: []
    return:
      type: System.Object[]
      description: "<xref:System.Object>数组，其中包含中的所有值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。</xref:System.Object>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  id: BaseGetAllValues(System.Type)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGetAllValues(Type)
  nameWithType: NameObjectCollectionBase.BaseGetAllValues(Type)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(Type)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "返回包含中的所有值的指定类型的数组<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  syntax:
    content: protected object[] BaseGetAllValues (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>，它表示要返回的数组类型。</xref:System.Type>"
    return:
      type: System.Object[]
      description: "包含中的所有值的指定类型的数组<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>type</code>不是有效<xref:System.Type>。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  id: BaseGetKey(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseGetKey(Int32)
  nameWithType: NameObjectCollectionBase.BaseGetKey(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取指定索引处的项的键<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "此方法为 o （1） 运算。"
  example:
  - "The following code example uses BaseGetKey and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseGet%2A> to get specific keys and values.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/cpp/3cf5a014-1166-4fdc-b41d-_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/csharp/3cf5a014-1166-4fdc-b41d-_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseGet#1](~/add/codesnippet/visualbasic/3cf5a014-1166-4fdc-b41d-_1.vb)]"
  syntax:
    content: protected string BaseGetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要获取的键的从零开始的索引。"
    return:
      type: System.String
      description: "A <xref:System.String>，表示指定索引处的项的键。</xref:System.String>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出的索引集合的有效范围。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  id: BaseHasKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseHasKeys()
  nameWithType: NameObjectCollectionBase.BaseHasKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例都包含其键不是的条目<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  remarks: "此方法为 o （1） 运算。"
  example:
  - "The following code example uses BaseHasKeys to determine if the collection contains keys that are not `null`.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1](~/add/codesnippet/cpp/m-system.collections.spe_17_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1](~/add/codesnippet/visualbasic/m-system.collections.spe_17_1.vb)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys#1](~/add/codesnippet/csharp/m-system.collections.spe_17_1.cs)]"
  syntax:
    content: protected bool BaseHasKeys ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例都包含其键不是的条目<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  id: BaseRemove(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseRemove(String)
  nameWithType: NameObjectCollectionBase.BaseRemove(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(String)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "移除具有指定键的项<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "如果<xref:System.Collections.Specialized.NameObjectCollectionBase>不具有指定键，包含的元素<xref:System.Collections.Specialized.NameObjectCollectionBase>保持不变。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> 不引发异常。       在由连续的元素，如列表，集合中移除的元素下面的元素的元素将上移以占据空出的位置。 如果集合具有索引，则移动的元素的索引也将更新。 此行为不适用于元素按概念划分为不同存储桶，如哈希表的集合。       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses BaseRemove and <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt%2A> to remove elements from a <xref:System.Collections.Specialized.NameObjectCollectionBase>.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/csharp/6fd86396-bc06-4c0a-8ef5-_1.cs)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/cpp/6fd86396-bc06-4c0a-8ef5-_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/visualbasic/6fd86396-bc06-4c0a-8ef5-_1.vb)]"
  syntax:
    content: protected void BaseRemove (string name);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>要移除的项键。</xref:System.String> 键可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是只读的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  id: BaseRemoveAt(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseRemoveAt(Int32)
  nameWithType: NameObjectCollectionBase.BaseRemoveAt(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "中移除的指定索引处的项<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "在由连续的元素，如列表，集合中移除的元素下面的元素的元素将上移以占据空出的位置。 如果集合具有索引，则移动的元素的索引也将更新。 此行为不适用于元素按概念划分为不同存储桶，如哈希表的集合。       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseRemove%2A> and BaseRemoveAt to remove elements from a <xref:System.Collections.Specialized.NameObjectCollectionBase>.  \n  \n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/csharp/c118a875-5132-4e70-b0e9-_1.cs)]\n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/cpp/c118a875-5132-4e70-b0e9-_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseRemove#1](~/add/codesnippet/visualbasic/c118a875-5132-4e70-b0e9-_1.vb)]"
  syntax:
    content: protected void BaseRemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要移除的项的从零开始的索引。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出的索引集合的有效范围。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是只读的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  id: BaseSet(System.Int32,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseSet(Int32,Object)
  nameWithType: NameObjectCollectionBase.BaseSet(Int32,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(Int32,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "设置指定索引位置处的项的值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "此方法为 o （1） 运算。"
  example:
  - "The following code example uses <xref:System.Collections.Specialized.NameObjectCollectionBase.BaseSet%2A> to set the value of a specific element.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/cpp/2287b31c-3439-4899-9c69-_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/visualbasic/2287b31c-3439-4899-9c69-_1.vb)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/csharp/2287b31c-3439-4899-9c69-_1.cs)]"
  syntax:
    content: protected void BaseSet (int index, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "要设置的项的从零开始的索引。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>，表示要设置的项的新值。</xref:System.Object> 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseSet*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是只读的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>超出的索引集合的有效范围。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  id: BaseSet(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: BaseSet(String,Object)
  nameWithType: NameObjectCollectionBase.BaseSet(String,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(String,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "设置具有指定键的第一个条目的值<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例，如果找到; 否则为将添加一个具有指定的键和值转换为项<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "如果集合包含具有指定键的多个条目，此方法会设置仅的第一个条目。 若要使用相同的密钥设置后续项的值，请使用枚举器循环访问集合并对键进行比较。       此方法为 o （1） 运算。"
  example:
  - "The following code example uses BaseSet to set the value of a specific element.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/cpp/3574a9bc-5d60-40e9-a4ae-_1.cpp)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/visualbasic/3574a9bc-5d60-40e9-a4ae-_1.vb)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.BaseSet#1](~/add/codesnippet/csharp/3574a9bc-5d60-40e9-a4ae-_1.cs)]"
  syntax:
    content: protected void BaseSet (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "<xref:System.String>要设置的项键。</xref:System.String> 键可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>，表示要设置的项的新值。</xref:System.Object> 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.BaseSet*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "集合是只读的。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.Count
  id: Count
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: Count
  nameWithType: NameObjectCollectionBase.Count
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取中包含的键/值对的数目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "容量是元素的数目，<xref:System.Collections.Specialized.NameObjectCollectionBase>可以存储。</xref:System.Collections.Specialized.NameObjectCollectionBase> 计数是其实是<xref:System.Collections.Specialized.NameObjectCollectionBase>.</xref:System.Collections.Specialized.NameObjectCollectionBase>的元素的数目       容量始终是大于或等于计数。 如果计数超出添加元素时的容量，通过在复制旧元素和添加新的元素之前重新分配在内部数组自动增大容量。       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "中包含的键/值对的数目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: NameObjectCollectionBase.GetEnumerator()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "返回的枚举数循环访问<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>。"
  remarks: "此枚举器返回的字符串形式的集合的键。       `foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A>  在此位置上，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，则枚举数将失效且不可恢复，而且其行为是不确定。       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是线程安全的过程。  若要确保枚举过程中的线程安全性，可以锁定在整个枚举期间的集合。  若要允许访问集合以进行读取和写入的多个线程，则必须实现自己的同步。       此方法为 o （1） 运算。"
  syntax:
    content: public virtual System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>为<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: NameObjectCollectionBase.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "实现<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;></xref>接口，并返回序列化所需的数据<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
  remarks: "此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  syntax:
    content: public virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "A <xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>包含序列化所需的信息的对象<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "A<xref:System.Runtime.Serialization.StreamingContext>对象，其中包含的源和目标与关联的序列化流<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: NameObjectCollectionBase.IsReadOnly
  fullName: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例是只读的。"
  remarks: "集合是只读的不允许添加、 移除或修改元素的集合在创建后。       集合是只读的是只是一个集合与防止集合; 进行修改的包装因此，如果对基础集合进行更改，只读集合将反映这些更改。       检索此属性的值是一个 o （1） 操作。"
  example:
  - "The following code example creates a read-only collection.  \n  \n [!code-cpp[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1](~/add/codesnippet/cpp/p-system.collections.spe_25_1.cpp)]\n [!code-cs[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1](~/add/codesnippet/csharp/p-system.collections.spe_25_1.cs)]\n [!code-vb[System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly#1](~/add/codesnippet/visualbasic/p-system.collections.spe_25_1.vb)]"
  syntax:
    content: protected bool IsReadOnly { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例是只读的; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys
  id: Keys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: Keys
  nameWithType: NameObjectCollectionBase.Keys
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Keys
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取<xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>实例，其中包含中的所有键<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。</xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>"
  remarks: "检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: public virtual System.Collections.Specialized.NameObjectCollectionBase.KeysCollection Keys { get; }
    return:
      type: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
      description: "A<xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>实例，其中包含中的所有键<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例。</xref:System.Collections.Specialized.NameObjectCollectionBase.KeysCollection>"
  overload: System.Collections.Specialized.NameObjectCollectionBase.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
  id: OnDeserialization(System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: OnDeserialization(Object)
  nameWithType: NameObjectCollectionBase.OnDeserialization(Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "实现<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;></xref>接口，并引发反序列化完成时，反序列化事件。"
  remarks: "尽管 OnDeserialization 方法不是对 COM 客户端默认情况下可见的则继承<xref:System.Collections.Specialized.NameObjectCollectionBase>类可以公开它，并且可以在 COM 客户端导致意外行为。</xref:System.Collections.Specialized.NameObjectCollectionBase>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  syntax:
    content: public virtual void OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "反序列化事件源。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>关联与当前对象<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>实例无效。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "将复制整个<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>到兼容的一维<xref:System.Array>，从目标数组的指定索引处开始。</xref:System.Array>"
  remarks: "指定的数组必须具有兼容类型。       此方法使用<xref:System.Array.Copy%2A?displayProperty=fullName>要复制的元素。</xref:System.Array.Copy%2A?displayProperty=fullName>       尽管 ICollection.CopyTo 方法不是对 COM 客户端默认情况下可见的则继承<xref:System.Collections.Specialized.NameObjectCollectionBase>类可以公开它，并且可以在 COM 客户端导致意外行为。</xref:System.Collections.Specialized.NameObjectCollectionBase>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>。</xref:System.Collections.Specialized.NameObjectCollectionBase.Count%2A>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "一维<xref:System.Array>，它是从复制的元素的目标<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;> </xref>。</xref:System.Array> <xref:System.Array>必须具有从零开始的索引。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "中的从零开始索引`array`复制开始处。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多维的。       -源中的元素的数目<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>大于从的可用空间<code>index</code>到目标的末尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "源类型<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>无法自动转换为目标的类型<code> array </code>。"
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取一个值，该值指示是否访问<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>对象已同步 （线程安全）。"
  remarks: "A<xref:System.Collections.Specialized.NameObjectCollectionBase>不同步对象。</xref:System.Collections.Specialized.NameObjectCollectionBase> 派生的类可以提供的同步的版本<xref:System.Collections.Specialized.NameObjectCollectionBase>使用<xref:System.Collections.ICollection.SyncRoot%2A>属性。</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.Specialized.NameObjectCollectionBase>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       下面的代码示例演示如何锁定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>属性在整个枚举期间。</xref:System.Collections.ICollection.SyncRoot%2A>       [!code-cs[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/csharp/cfdb0c87-90d1-4db2-b260-_1.cs)][!code-cpp[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/cpp/cfdb0c87-90d1-4db2-b260-_1.cpp)][!code-vb[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/visualbasic/cfdb0c87-90d1-4db2-b260-_1.vb) ]检索此属性的值是一项 o （1） 操作。    "
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果访问<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>对象已同步 （线程安全）; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.Specialized.NameObjectCollectionBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取可以用于对访问进行同步的对象<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>对象。"
  remarks: "派生的类可以提供自己的同步的版本<xref:System.Collections.Specialized.NameObjectCollectionBase>类使用<xref:System.Collections.ICollection.SyncRoot%2A>属性。</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.Specialized.NameObjectCollectionBase> 同步代码必须在执行操作<xref:System.Collections.ICollection.SyncRoot%2A>属性<xref:System.Collections.Specialized.NameObjectCollectionBase>对象，不是直接对<xref:System.Collections.Specialized.NameObjectCollectionBase>对象。</xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.Specialized.NameObjectCollectionBase> </xref:System.Collections.ICollection.SyncRoot%2A> 这可确保正确地执行操作的从其他对象派生的集合。 具体地说，这样可保持正确的同步，与可能同时对修改其他线程<xref:System.Collections.Specialized.NameObjectCollectionBase>对象。</xref:System.Collections.Specialized.NameObjectCollectionBase>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       下面的代码示例演示如何锁定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整个枚举期间。</xref:System.Collections.ICollection.SyncRoot%2A>       [!code-cs[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/csharp/240bf954-5c3e-40ea-821a-_1.cs)][!code-cpp[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/cpp/240bf954-5c3e-40ea-821a-_1.cpp)][!code-vb[System.Collections.Specialized.NameObjectCollectionBase#2](~/add/codesnippet/visualbasic/240bf954-5c3e-40ea-821a-_1.vb) ]检索此属性的值是一项 o （1） 操作。    "
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "可以用于对访问进行同步的对象<xref href=&quot;System.Collections.Specialized.NameObjectCollectionBase&quot;></xref>对象。"
  overload: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: true
  name: System.Runtime.Serialization.SerializationException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase()
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase()
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IEqualityComparer)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(IEqualityComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(IEqualityComparer)
- uid: System.Collections.IEqualityComparer
  parent: System.Collections
  isExternal: true
  name: IEqualityComparer
  nameWithType: IEqualityComparer
  fullName: System.Collections.IEqualityComparer
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(Int32)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(IHashCodeProvider,IComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(IHashCodeProvider,IComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(IHashCodeProvider,IComparer)
- uid: System.Collections.IHashCodeProvider
  parent: System.Collections
  isExternal: false
  name: IHashCodeProvider
  nameWithType: IHashCodeProvider
  fullName: System.Collections.IHashCodeProvider
- uid: System.Collections.IComparer
  parent: System.Collections
  isExternal: true
  name: IComparer
  nameWithType: IComparer
  fullName: System.Collections.IComparer
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IEqualityComparer)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(Int32,IEqualityComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32,IEqualityComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32,IEqualityComparer)
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(SerializationInfo,StreamingContext)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(SerializationInfo,StreamingContext)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor(System.Int32,System.Collections.IHashCodeProvider,System.Collections.IComparer)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.NameObjectCollectionBase(Int32,IHashCodeProvider,IComparer)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseAdd(String,Object)
  nameWithType: NameObjectCollectionBase.BaseAdd(String,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseClear()
  nameWithType: NameObjectCollectionBase.BaseClear()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseClear()
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGet(Int32)
  nameWithType: NameObjectCollectionBase.BaseGet(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(Int32)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGet(String)
  nameWithType: NameObjectCollectionBase.BaseGet(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGet(String)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllKeys()
  nameWithType: NameObjectCollectionBase.BaseGetAllKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllValues()
  nameWithType: NameObjectCollectionBase.BaseGetAllValues()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllValues(Type)
  nameWithType: NameObjectCollectionBase.BaseGetAllValues(Type)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetKey(Int32)
  nameWithType: NameObjectCollectionBase.BaseGetKey(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(Int32)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseHasKeys()
  nameWithType: NameObjectCollectionBase.BaseHasKeys()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseRemove(String)
  nameWithType: NameObjectCollectionBase.BaseRemove(String)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(String)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseRemoveAt(Int32)
  nameWithType: NameObjectCollectionBase.BaseRemoveAt(Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(Int32)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseSet(Int32,Object)
  nameWithType: NameObjectCollectionBase.BaseSet(Int32,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(Int32,Object)
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseSet(String,Object)
  nameWithType: NameObjectCollectionBase.BaseSet(String,Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.BaseSet(String,Object)
- uid: System.Collections.Specialized.NameObjectCollectionBase.Count
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Count
  nameWithType: NameObjectCollectionBase.Count
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Count
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: NameObjectCollectionBase.GetEnumerator()
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: NameObjectCollectionBase.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: IsReadOnly
  nameWithType: NameObjectCollectionBase.IsReadOnly
  fullName: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Keys
  nameWithType: NameObjectCollectionBase.Keys
  fullName: System.Collections.Specialized.NameObjectCollectionBase.Keys
- uid: System.Collections.Specialized.NameObjectCollectionBase.KeysCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameObjectCollectionBase+KeysCollection
  nameWithType: NameObjectCollectionBase+KeysCollection
  fullName: System.Collections.Specialized.NameObjectCollectionBase+KeysCollection
- uid: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: OnDeserialization(Object)
  nameWithType: NameObjectCollectionBase.OnDeserialization(Object)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(Object)
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.Specialized.NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.Specialized.NameObjectCollectionBase.#ctor*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: NameObjectCollectionBase
  nameWithType: NameObjectCollectionBase.NameObjectCollectionBase
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseAdd*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseAdd
  nameWithType: NameObjectCollectionBase.BaseAdd
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseClear*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseClear
  nameWithType: NameObjectCollectionBase.BaseClear
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGet*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGet
  nameWithType: NameObjectCollectionBase.BaseGet
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllKeys
  nameWithType: NameObjectCollectionBase.BaseGetAllKeys
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetAllValues
  nameWithType: NameObjectCollectionBase.BaseGetAllValues
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseGetKey
  nameWithType: NameObjectCollectionBase.BaseGetKey
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseHasKeys
  nameWithType: NameObjectCollectionBase.BaseHasKeys
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemove*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseRemove
  nameWithType: NameObjectCollectionBase.BaseRemove
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseRemoveAt
  nameWithType: NameObjectCollectionBase.BaseRemoveAt
- uid: System.Collections.Specialized.NameObjectCollectionBase.BaseSet*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: BaseSet
  nameWithType: NameObjectCollectionBase.BaseSet
- uid: System.Collections.Specialized.NameObjectCollectionBase.Count*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Count
  nameWithType: NameObjectCollectionBase.Count
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetEnumerator
  nameWithType: NameObjectCollectionBase.GetEnumerator
- uid: System.Collections.Specialized.NameObjectCollectionBase.GetObjectData*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: GetObjectData
  nameWithType: NameObjectCollectionBase.GetObjectData
- uid: System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: IsReadOnly
  nameWithType: NameObjectCollectionBase.IsReadOnly
- uid: System.Collections.Specialized.NameObjectCollectionBase.Keys*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: Keys
  nameWithType: NameObjectCollectionBase.Keys
- uid: System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: OnDeserialization
  nameWithType: NameObjectCollectionBase.OnDeserialization
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.CopyTo
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: NameObjectCollectionBase.System.Collections.ICollection.SyncRoot
