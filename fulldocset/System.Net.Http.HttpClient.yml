### YamlMime:ManagedReference
items:
- uid: System.Net.Http.HttpClient
  id: HttpClient
  children:
  - System.Net.Http.HttpClient.#ctor
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  - System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  - System.Net.Http.HttpClient.BaseAddress
  - System.Net.Http.HttpClient.CancelPendingRequests
  - System.Net.Http.HttpClient.DefaultRequestHeaders
  - System.Net.Http.HttpClient.DeleteAsync(System.String)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  - System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Dispose(System.Boolean)
  - System.Net.Http.HttpClient.GetAsync(System.String)
  - System.Net.Http.HttpClient.GetAsync(System.Uri)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  - System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStreamAsync(System.String)
  - System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  - System.Net.Http.HttpClient.GetStringAsync(System.String)
  - System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  - System.Net.Http.HttpClient.MaxResponseContentBufferSize
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  - System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  - System.Net.Http.HttpClient.Timeout
  langs:
  - csharp
  name: HttpClient
  nameWithType: HttpClient
  fullName: System.Net.Http.HttpClient
  type: Class
  summary: "提供用于发送 HTTP 请求和接收来自通过 URI 确认的资源的 HTTP 响应的基类。"
  remarks: "HttpClient 类实例，充当要发送的 HTTP 请求的会话。 HttpClient 实例是应用于该实例执行的所有请求的设置的集合。 此外，每个 HttpClient 实例使用其自己的连接池，隔离它与由其他 HttpClient 实例执行请求的请求。       HttpClient 还可充当基类更具体的 HTTP 客户端。 示例将提供特定于 Facebook web 服务的其他方法 FacebookHttpClient (GetFriends 方法，例如)。       默认情况下，<xref:System.Net.HttpWebRequest>将用于向服务器发送请求。</xref:System.Net.HttpWebRequest> 此行为可以修改通过在构造函数重载采用之一中指定不同的通道<xref:System.Net.Http.HttpMessageHandler>实例作为参数。</xref:System.Net.Http.HttpMessageHandler> 如果身份验证或缓存等功能是必需的<xref:System.Net.Http.WebRequestHandler>可以用于配置设置和实例可以传递给构造函数。</xref:System.Net.Http.WebRequestHandler> 返回的处理程序可传递到一个构造函数重载采用<xref:System.Net.Http.HttpMessageHandler>参数。</xref:System.Net.Http.HttpMessageHandler>       如果使用 HttpClient 和相关的类中的应用<xref:System.Net.Http>命名空间打算下载大量数据 （50 兆字节或更多），则应用程序应流式传输的下载文件并不使用的默认缓冲。</xref:System.Net.Http> 如果使用的默认缓冲，则客户端内存使用情况将变得很大，可能会显著导致性能下降。       下面的方法是线程安全︰ 1。  <xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>2。</xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>  <xref:System.Net.Http.HttpClient.DeleteAsync%2A>3。</xref:System.Net.Http.HttpClient.DeleteAsync%2A>  <xref:System.Net.Http.HttpClient.GetAsync%2A>4。</xref:System.Net.Http.HttpClient.GetAsync%2A>  <xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>5。</xref:System.Net.Http.HttpClient.GetByteArrayAsync%2A>  <xref:System.Net.Http.HttpClient.GetStreamAsync%2A>6。</xref:System.Net.Http.HttpClient.GetStreamAsync%2A>  <xref:System.Net.Http.HttpClient.GetStringAsync%2A>7。</xref:System.Net.Http.HttpClient.GetStringAsync%2A>  <xref:System.Net.Http.HttpClient.PostAsync%2A>8。</xref:System.Net.Http.HttpClient.PostAsync%2A>  <xref:System.Net.Http.HttpClient.PutAsync%2A>9。</xref:System.Net.Http.HttpClient.PutAsync%2A> <xref:System.Net.Http.HttpClient.SendAsync%2A>HttpClient 是用于一次实例化和重新使用应用程序的整个生存期。</xref:System.Net.Http.HttpClient.SendAsync%2A> 实例化 HttpClient 类，为每个请求，则将耗尽重度负载下可用的插槽数。 这将导致 SocketException 错误。 下面是使用 HttpClient 正确示例。      ```c#   public class GoodController : ApiController   {       // OK       private static readonly HttpClient HttpClient;          static GoodController()       {           HttpClient = new HttpClient();       }   }      ```"
  example:
  - '[!code-cs[System.Net.Http.HttpClient#1](~/add/codesnippet/csharp/t-system.net.http.httpcl_1_1.cs)]'
  syntax:
    content: 'public class HttpClient : System.Net.Http.HttpMessageInvoker'
  inheritance:
  - System.Object
  - System.Net.Http.HttpMessageInvoker
  implements: []
  inheritedMembers:
  - System.Net.Http.HttpMessageInvoker.Dispose
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor
  id: '#ctor'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient()
  nameWithType: HttpClient.HttpClient()
  fullName: System.Net.Http.HttpClient.HttpClient()
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "初始化的新实例<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>类。"
  syntax:
    content: public HttpClient ();
    parameters: []
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  id: '#ctor(System.Net.Http.HttpMessageHandler)'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient(HttpMessageHandler)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "初始化的新实例<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>与特定的处理程序类。"
  remarks: "如果`null`为指定`handler`参数，<xref:System.Net.Http.WebRequestHandler>用作传输处理程序。</xref:System.Net.Http.WebRequestHandler>"
  syntax:
    content: public HttpClient (System.Net.Http.HttpMessageHandler handler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "要用于发送请求的 HTTP 处理程序堆栈。"
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  id: '#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)'
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: HttpClient(HttpMessageHandler,Boolean)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler,Boolean)
  type: Constructor
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "初始化的新实例<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>与特定的处理程序类。"
  syntax:
    content: public HttpClient (System.Net.Http.HttpMessageHandler handler, bool disposeHandler);
    parameters:
    - id: handler
      type: System.Net.Http.HttpMessageHandler
      description: "<xref href=&quot;System.Net.Http.HttpMessageHandler&quot;> </xref>负责处理 HTTP 响应消息。"
    - id: disposeHandler
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果内部处理程序应由 dispose （），释放的<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果你想要重用内部处理程序。"
  overload: System.Net.Http.HttpClient.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.BaseAddress
  id: BaseAddress
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
  fullName: System.Net.Http.HttpClient.BaseAddress
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "获取或设置基址的统一资源标识符 (URI) 发送请求时使用的 Internet 资源。"
  remarks: "发送时<xref:System.Net.Http.HttpRequestMessage>与相对的 Uri，对消息 Uri 将添加到 BaseAddress 属性来创建绝对 Uri。</xref:System.Net.Http.HttpRequestMessage>"
  syntax:
    content: public Uri BaseAddress { get; set; }
    return:
      type: System.Uri
      description: "基址的统一资源标识符 (URI) 发送请求时使用的 Internet 资源。"
  overload: System.Net.Http.HttpClient.BaseAddress*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.CancelPendingRequests
  id: CancelPendingRequests
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: CancelPendingRequests()
  nameWithType: HttpClient.CancelPendingRequests()
  fullName: System.Net.Http.HttpClient.CancelPendingRequests()
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "取消此实例上所有挂起的请求。"
  remarks: "调用此方法后<xref:System.Net.Http.HttpClient>实例仍可以用于执行其他请求。</xref:System.Net.Http.HttpClient>"
  syntax:
    content: public void CancelPendingRequests ();
    parameters: []
  overload: System.Net.Http.HttpClient.CancelPendingRequests*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders
  id: DefaultRequestHeaders
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "获取与每个请求应发送的标题。"
  remarks: "此属性上设置的标头无需再次设置请求消息。"
  syntax:
    content: public System.Net.Http.Headers.HttpRequestHeaders DefaultRequestHeaders { get; }
    return:
      type: System.Net.Http.Headers.HttpRequestHeaders
      description: "应与每个请求发送的标题。"
  overload: System.Net.Http.HttpClient.DefaultRequestHeaders*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)
  id: DeleteAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(String)
  nameWithType: HttpClient.DeleteAsync(String)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作，DELETE 请求发送到指定的 Uri。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发送请求消息<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>实例。"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  id: DeleteAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(Uri)
  nameWithType: HttpClient.DeleteAsync(Uri)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作，DELETE 请求发送到指定的 Uri。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发送请求消息<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>实例。"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  id: DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(String,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作向指定的 Uri 的取消标记发送 DELETE 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (string requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发送请求消息<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>实例。"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  id: DeleteAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: DeleteAsync(Uri,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作向指定的 Uri 的取消标记发送 DELETE 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> DeleteAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.DeleteAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发送请求消息<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>实例。"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HttpClient.Dispose(Boolean)
  fullName: System.Net.Http.HttpClient.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "释放由非托管的资源<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>并可根据需要释放托管资源。"
  remarks: "此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Net.Http.HttpClient>引用。</xref:System.Net.Http.HttpClient> 此方法调用`Dispose()`每个引用对象的方法。       当调用此方法时，<xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>调用方法以中止所有挂起的请求。</xref:System.Net.Http.HttpClient.CancelPendingRequests%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>版本仅到非托管资源。"
  overload: System.Net.Http.HttpClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String)
  id: GetAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String)
  nameWithType: HttpClient.GetAsync(String)
  fullName: System.Net.Http.HttpClient.GetAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送到指定 Uri 的 GET 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)
  id: GetAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri)
  nameWithType: HttpClient.GetAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送到指定 Uri 的 GET 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "向指定的 Uri 作为异步操作的 HTTP 完成选项发送 GET 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成基于`completionOption`参数读取部分或全部 （包括内容） 的响应后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "HTTP 完成选项值，该值指示操作应视为时完成。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送到指定的 Uri 的取消标记中，作为异步操作。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "向指定的 Uri 作为异步操作的 HTTP 完成选项发送 GET 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成基于`completionOption`参数读取部分或全部 （包括内容） 的响应后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "HTTP 完成选项值，该值指示操作应视为时完成。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送到指定的 Uri 的取消标记中，作为异步操作。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(String,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送到指定的 Uri 的 HTTP 完成选项和取消标记，以异步操作。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成基于`completionOption`参数读取部分或全部 （包括内容） 的响应后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (string requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "HTTP 完成选项值，该值指示操作应视为时完成。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetAsync(Uri,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送到指定的 Uri 的 HTTP 完成选项和取消标记，以异步操作。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成基于`completionOption`参数读取部分或全部 （包括内容） 的响应后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> GetAsync (Uri requestUri, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "HTTP 完成选项值，该值指示操作应视为时完成。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  id: GetByteArrayAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetByteArrayAsync(String)
  nameWithType: HttpClient.GetByteArrayAsync(String)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送给指定 Uri 并以异步操作中的字节数组形式返回响应正文。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后在读取整个响应正文。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetByteArrayAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  id: GetByteArrayAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetByteArrayAsync(Uri)
  nameWithType: HttpClient.GetByteArrayAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送给指定 Uri 并以异步操作中的字节数组形式返回响应正文。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后在读取整个响应正文。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<byte[]> GetByteArrayAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.Byte[]}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetByteArrayAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  id: GetStreamAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStreamAsync(String)
  nameWithType: HttpClient.GetStreamAsync(String)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送给指定 Uri 并在异步操作中流的形式返回响应正文。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后在读取整个响应正文。</xref:System.Threading.Tasks.Task%601> 此方法不缓冲流。"
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetStreamAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  id: GetStreamAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStreamAsync(Uri)
  nameWithType: HttpClient.GetStreamAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送给指定 Uri 并在异步操作中流的形式返回响应正文。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后在读取整个响应正文。</xref:System.Threading.Tasks.Task%601> 此方法不缓冲流。"
  syntax:
    content: public System.Threading.Tasks.Task<System.IO.Stream> GetStreamAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetStreamAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)
  id: GetStringAsync(System.String)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStringAsync(String)
  nameWithType: HttpClient.GetStringAsync(String)
  fullName: System.Net.Http.HttpClient.GetStringAsync(String)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送给指定 Uri 并以异步操作中的字符串形式返回响应正文。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后在读取整个响应正文。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<string> GetStringAsync (string requestUri);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  id: GetStringAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: GetStringAsync(Uri)
  nameWithType: HttpClient.GetStringAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStringAsync(Uri)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "将 GET 请求发送给指定 Uri 并以异步操作中的字符串形式返回响应正文。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后在读取整个响应正文。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<string> GetStringAsync (Uri requestUri);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    return:
      type: System.Threading.Tasks.Task{System.String}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.GetStringAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  id: MaxResponseContentBufferSize
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "获取或设置的最大读取响应内容时要缓冲的字节数。"
  remarks: "应用程序可以 MaxResponseContentBufferSize 属性设置为较低的值，将读取响应时要缓冲的响应的大小限制。 如果响应内容的大小大于 MaxResponseContentBufferSize 属性，将引发异常。"
  syntax:
    content: public long MaxResponseContentBufferSize { get; set; }
    return:
      type: System.Int64
      description: "最大读取响应内容时要缓冲的字节数。 此属性的默认值为 2 千兆字节。"
  overload: System.Net.Http.HttpClient.MaxResponseContentBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的大小小于或等于零。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已在当前实例上启动操作。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放当前实例。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  id: PostAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(String,HttpContent)
  nameWithType: HttpClient.PostAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送到指定 Uri 的 POST 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (string requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    - id: content
      type: System.Net.Http.HttpContent
      description: "发送到服务器的 HTTP 请求内容。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(Uri,HttpContent)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送到指定 Uri 的 POST 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (Uri requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    - id: content
      type: System.Net.Http.HttpContent
      description: "发送到服务器的 HTTP 请求内容。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作中发送 POST 请求的取消标记。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    - id: content
      type: System.Net.Http.HttpContent
      description: "发送到服务器的 HTTP 请求内容。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PostAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作中发送 POST 请求的取消标记。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PostAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    - id: content
      type: System.Net.Http.HttpContent
      description: "发送到服务器的 HTTP 请求内容。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.PostAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  id: PutAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(String,HttpContent)
  nameWithType: HttpClient.PutAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作，PUT 请求发送到指定的 Uri。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (string requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    - id: content
      type: System.Net.Http.HttpContent
      description: "发送到服务器的 HTTP 请求内容。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(Uri,HttpContent)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作，PUT 请求发送到指定的 Uri。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (Uri requestUri, System.Net.Http.HttpContent content);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    - id: content
      type: System.Net.Http.HttpContent
      description: "发送到服务器的 HTTP 请求内容。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送 PUT 请求的取消标记。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (string requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.String
      description: "发送到 Uri 请求。"
    - id: content
      type: System.Net.Http.HttpContent
      description: "发送到服务器的 HTTP 请求内容。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  id: PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: PutAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送 PUT 请求的取消标记。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象将在完成读取整个响应 （包括内容） 后。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> PutAsync (Uri requestUri, System.Net.Http.HttpContent content, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: requestUri
      type: System.Uri
      description: "发送到 Uri 请求。"
    - id: content
      type: System.Net.Http.HttpContent
      description: "发送到服务器的 HTTP 请求内容。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "可以使用由其他对象或线程用以接收取消通知取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.PutAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>requestUri</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  id: SendAsync(System.Net.Http.HttpRequestMessage)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送 HTTP 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后读取包括内容的整个响应。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "要发送的 HTTP 请求消息。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发送请求消息<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>实例。"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,HttpCompletionOption)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送 HTTP 请求。"
  remarks: "不会阻止此操作。 根据值`completionOption`参数、 返回<xref:System.Threading.Tasks.Task%601>一旦响应一旦可用或读取包括内容的整个响应对象将完成。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "要发送的 HTTP 请求消息。"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "操作应完成时 （响应一旦可用时，就会立即或在读取整个响应内容之后）。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发送请求消息<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>实例。"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送 HTTP 请求。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后读取包括内容的整个响应。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "要发送的 HTTP 请求消息。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "要取消操作的取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发送请求消息<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>实例。"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  id: SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  type: Method
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "作为异步操作发送 HTTP 请求。"
  remarks: "不会阻止此操作。 根据值`completionOption`参数、 返回<xref:System.Threading.Tasks.Task%601>一旦响应一旦可用或读取包括内容的整个响应对象将完成。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync (System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpCompletionOption completionOption, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: request
      type: System.Net.Http.HttpRequestMessage
      description: "要发送的 HTTP 请求消息。"
    - id: completionOption
      type: System.Net.Http.HttpCompletionOption
      description: "操作应完成时 （响应一旦可用时，就会立即或在读取整个响应内容之后）。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "要取消操作的取消标记。"
    return:
      type: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
      description: "表示异步操作的任务对象。"
  overload: System.Net.Http.HttpClient.SendAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>request</code> was <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已发送请求消息<xref href=&quot;System.Net.Http.HttpClient&quot;></xref>实例。"
  - type: System.Net.Http.HttpRequestException
    commentId: T:System.Net.Http.HttpRequestException
    description: "由于网络连接、 DNS 失败、 服务器证书验证或超时等基础问题请求失败。"
  platform:
  - net462
- uid: System.Net.Http.HttpClient.Timeout
  id: Timeout
  parent: System.Net.Http.HttpClient
  langs:
  - csharp
  name: Timeout
  nameWithType: HttpClient.Timeout
  fullName: System.Net.Http.HttpClient.Timeout
  type: Property
  assemblies:
  - System.Net.Http
  namespace: System.Net.Http
  summary: "获取或设置请求超时前等待的时间跨度。"
  remarks: "默认值是 100,000 毫秒 （100 秒）。       若要设置无限超时，设置到<xref:System.Threading.Timeout.InfiniteTimeSpan>。</xref:System.Threading.Timeout.InfiniteTimeSpan>的属性值       域名系统 (DNS) 查询可能需要最多为 15 秒为单位返回或超时。 如果你的请求包含需要解析的主机名，并且您将超时设置为一个值小于 15 秒，则可能需要 15 秒或更之前<xref:System.Net.WebException>引发来指示你的请求超时。</xref:System.Net.WebException>       相同的超时将适用于所有请求使用此<xref:System.Net.Http.HttpClient>实例。</xref:System.Net.Http.HttpClient>  您还可以设置不同的使用的各个请求的超时<xref:System.Threading.CancellationTokenSource>任务。</xref:System.Threading.CancellationTokenSource> 请注意，只有较短的两个超时将应用。"
  syntax:
    content: public TimeSpan Timeout { get; set; }
    return:
      type: System.TimeSpan
      description: "请求超时之前等待的时间跨度。"
  overload: System.Net.Http.HttpClient.Timeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的超时值是小于或等于零，而不是<xref:System.Threading.Timeout.InfiniteTimeSpan>.</xref:System.Threading.Timeout.InfiniteTimeSpan>"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已在当前实例上启动操作。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放当前实例。"
  platform:
  - net462
references:
- uid: System.Net.Http.HttpMessageInvoker
  isExternal: false
  name: System.Net.Http.HttpMessageInvoker
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Net.Http.HttpRequestException
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestException
  nameWithType: HttpRequestException
  fullName: System.Net.Http.HttpRequestException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Net.Http.HttpClient.#ctor
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient()
  nameWithType: HttpClient.HttpClient()
  fullName: System.Net.Http.HttpClient.HttpClient()
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient(HttpMessageHandler)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler)
- uid: System.Net.Http.HttpMessageHandler
  parent: System.Net.Http
  isExternal: false
  name: HttpMessageHandler
  nameWithType: HttpMessageHandler
  fullName: System.Net.Http.HttpMessageHandler
- uid: System.Net.Http.HttpClient.#ctor(System.Net.Http.HttpMessageHandler,System.Boolean)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient(HttpMessageHandler,Boolean)
  nameWithType: HttpClient.HttpClient(HttpMessageHandler,Boolean)
  fullName: System.Net.Http.HttpClient.HttpClient(HttpMessageHandler,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Http.HttpClient.BaseAddress
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
  fullName: System.Net.Http.HttpClient.BaseAddress
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.Http.HttpClient.CancelPendingRequests
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: CancelPendingRequests()
  nameWithType: HttpClient.CancelPendingRequests()
  fullName: System.Net.Http.HttpClient.CancelPendingRequests()
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
  fullName: System.Net.Http.HttpClient.DefaultRequestHeaders
- uid: System.Net.Http.Headers.HttpRequestHeaders
  parent: System.Net.Http.Headers
  isExternal: false
  name: HttpRequestHeaders
  nameWithType: HttpRequestHeaders
  fullName: System.Net.Http.Headers.HttpRequestHeaders
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(String)
  nameWithType: HttpClient.DeleteAsync(String)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.Http.HttpResponseMessage>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.Http.HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(Uri)
  nameWithType: HttpClient.DeleteAsync(Uri)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri)
- uid: System.Net.Http.HttpClient.DeleteAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(String,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(String,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Net.Http.HttpClient.DeleteAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync(Uri,CancellationToken)
  nameWithType: HttpClient.DeleteAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.DeleteAsync(Uri,CancellationToken)
- uid: System.Net.Http.HttpClient.Dispose(System.Boolean)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HttpClient.Dispose(Boolean)
  fullName: System.Net.Http.HttpClient.Dispose(Boolean)
- uid: System.Net.Http.HttpClient.GetAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String)
  nameWithType: HttpClient.GetAsync(String)
  fullName: System.Net.Http.HttpClient.GetAsync(String)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri)
  nameWithType: HttpClient.GetAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri)
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption)
- uid: System.Net.Http.HttpCompletionOption
  parent: System.Net.Http
  isExternal: false
  name: HttpCompletionOption
  nameWithType: HttpCompletionOption
  fullName: System.Net.Http.HttpCompletionOption
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,HttpCompletionOption)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.String,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(String,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(String,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.GetAsync(System.Uri,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync(Uri,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.GetAsync(Uri,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync(String)
  nameWithType: HttpClient.GetByteArrayAsync(String)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(String)
- uid: System.Threading.Tasks.Task{System.Byte[]}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Byte>
  nameWithType: Task<Byte>
  fullName: System.Threading.Tasks.Task<System.Byte[]>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetByteArrayAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync(Uri)
  nameWithType: HttpClient.GetByteArrayAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetByteArrayAsync(Uri)
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync(String)
  nameWithType: HttpClient.GetStreamAsync(String)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(String)
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.IO.Stream>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: Stream
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetStreamAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync(Uri)
  nameWithType: HttpClient.GetStreamAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStreamAsync(Uri)
- uid: System.Net.Http.HttpClient.GetStringAsync(System.String)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync(String)
  nameWithType: HttpClient.GetStringAsync(String)
  fullName: System.Net.Http.HttpClient.GetStringAsync(String)
- uid: System.Threading.Tasks.Task{System.String}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<String>
  nameWithType: Task<String>
  fullName: System.Threading.Tasks.Task<System.String>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.Http.HttpClient.GetStringAsync(System.Uri)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync(Uri)
  nameWithType: HttpClient.GetStringAsync(Uri)
  fullName: System.Net.Http.HttpClient.GetStringAsync(Uri)
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
  fullName: System.Net.Http.HttpClient.MaxResponseContentBufferSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(String,HttpContent)
  nameWithType: HttpClient.PostAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent)
- uid: System.Net.Http.HttpContent
  parent: System.Net.Http
  isExternal: false
  name: HttpContent
  nameWithType: HttpContent
  fullName: System.Net.Http.HttpContent
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(Uri,HttpContent)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent)
- uid: System.Net.Http.HttpClient.PostAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(String,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PostAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PostAsync(Uri,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(String,HttpContent)
  nameWithType: HttpClient.PutAsync(String,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent)
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(Uri,HttpContent)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent)
- uid: System.Net.Http.HttpClient.PutAsync(System.String,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(String,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(String,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(String,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.PutAsync(System.Uri,System.Net.Http.HttpContent,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync(Uri,HttpContent,CancellationToken)
  nameWithType: HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
  fullName: System.Net.Http.HttpClient.PutAsync(Uri,HttpContent,CancellationToken)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage)
- uid: System.Net.Http.HttpRequestMessage
  parent: System.Net.Http
  isExternal: false
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: System.Net.Http.HttpRequestMessage
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,HttpCompletionOption)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,CancellationToken)
- uid: System.Net.Http.HttpClient.SendAsync(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpCompletionOption,System.Threading.CancellationToken)
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  nameWithType: HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
  fullName: System.Net.Http.HttpClient.SendAsync(HttpRequestMessage,HttpCompletionOption,CancellationToken)
- uid: System.Net.Http.HttpClient.Timeout
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Timeout
  nameWithType: HttpClient.Timeout
  fullName: System.Net.Http.HttpClient.Timeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.Http.HttpClient.#ctor*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: HttpClient
  nameWithType: HttpClient.HttpClient
- uid: System.Net.Http.HttpClient.BaseAddress*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: BaseAddress
  nameWithType: HttpClient.BaseAddress
- uid: System.Net.Http.HttpClient.CancelPendingRequests*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: CancelPendingRequests
  nameWithType: HttpClient.CancelPendingRequests
- uid: System.Net.Http.HttpClient.DefaultRequestHeaders*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DefaultRequestHeaders
  nameWithType: HttpClient.DefaultRequestHeaders
- uid: System.Net.Http.HttpClient.DeleteAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: DeleteAsync
  nameWithType: HttpClient.DeleteAsync
- uid: System.Net.Http.HttpClient.Dispose*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Dispose
  nameWithType: HttpClient.Dispose
- uid: System.Net.Http.HttpClient.GetAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetAsync
  nameWithType: HttpClient.GetAsync
- uid: System.Net.Http.HttpClient.GetByteArrayAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetByteArrayAsync
  nameWithType: HttpClient.GetByteArrayAsync
- uid: System.Net.Http.HttpClient.GetStreamAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStreamAsync
  nameWithType: HttpClient.GetStreamAsync
- uid: System.Net.Http.HttpClient.GetStringAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: GetStringAsync
  nameWithType: HttpClient.GetStringAsync
- uid: System.Net.Http.HttpClient.MaxResponseContentBufferSize*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: MaxResponseContentBufferSize
  nameWithType: HttpClient.MaxResponseContentBufferSize
- uid: System.Net.Http.HttpClient.PostAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PostAsync
  nameWithType: HttpClient.PostAsync
- uid: System.Net.Http.HttpClient.PutAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: PutAsync
  nameWithType: HttpClient.PutAsync
- uid: System.Net.Http.HttpClient.SendAsync*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: SendAsync
  nameWithType: HttpClient.SendAsync
- uid: System.Net.Http.HttpClient.Timeout*
  parent: System.Net.Http.HttpClient
  isExternal: false
  name: Timeout
  nameWithType: HttpClient.Timeout
