### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.Serialization.ExpressionContext
  id: ExpressionContext
  children:
  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  - System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  - System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  - System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  - System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  - System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  langs:
  - csharp
  name: ExpressionContext
  nameWithType: ExpressionContext
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext
  type: Class
  summary: "提供了一种传递序列化程序之间的上下文状态。 此类不能被继承。"
  remarks: "ExpressionContext 放置在上下文堆栈，并包含序列化期间最相关的表达式。 下面的 C# 代码演示赋值。      ```   button1.Text = &quot;Hello&quot;;   ```序列化期间，多个序列化程序负责创建这一条语句。 这些序列化程序之一是负责创建&quot;Hello&quot;。 有该序列化程序可能需要知道它在其中创建它的表达式的上下文的场合。 在前面的示例中，不需要此上下文。 下面的 C# 代码演示在该环境的知识是必要的情况。      ```   button1.Text = rm.GetString(&quot;button1_Text&quot;);   ```在这种情况下，负责创建资源表达式序列化程序需要通知的目标对象的名称。 为此，可以使用 ExpressionContext 类。 在每个序列化程序创建的表达式和调用序列化程序来处理作为一个整体的语句的较小部分时，序列化程序上下文在堆栈上推送表达式上下文。 每个表达式上下文都具有一个父属性，在堆栈上查找下一步的表达式上下文。 这提供了一种可方便遍历功能。"
  syntax:
    content: public sealed class ExpressionContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)'
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionContext(CodeExpression,Type,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Design.Serialization.ExpressionContext&quot;></xref>与给定的表达式和所有者的类。"
  syntax:
    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner);
    parameters:
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "给定的代码表达式。"
    - id: expressionType
      type: System.Type
      description: "给定的代码表达式的类型。"
    - id: owner
      type: System.Object
      description: "给定的代码表达式的所有者。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  id: '#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)'
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionContext(CodeExpression,Type,Object,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Design.Serialization.ExpressionContext&quot;></xref>类与当前值。"
  syntax:
    content: public ExpressionContext (System.CodeDom.CodeExpression expression, Type expressionType, object owner, object presetValue);
    parameters:
    - id: expression
      type: System.CodeDom.CodeExpression
      description: "给定的代码表达式。"
    - id: expressionType
      type: System.Type
      description: "给定的代码表达式的类型。"
    - id: owner
      type: System.Object
      description: "给定的代码表达式的所有者。"
    - id: presetValue
      type: System.Object
      description: "给定的代码表达式的预设值。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>expression</code>, <code>expressionType</code>, or <code>owner</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  id: Expression
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: Expression
  nameWithType: ExpressionContext.Expression
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取此上下文中表示的表达式。"
  syntax:
    content: public System.CodeDom.CodeExpression Expression { get; }
    return:
      type: System.CodeDom.CodeExpression
      description: "此上下文中表示的表达式。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  id: ExpressionType
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取<xref:System.Type>的表达式。</xref:System.Type>"
  remarks: "你可以使用<xref:System.ComponentModel.Design.Serialization.ExpressionContext>以确定将分配给该表达式时，是否需要强制转换。</xref:System.ComponentModel.Design.Serialization.ExpressionContext>"
  syntax:
    content: public Type ExpressionType { get; }
    return:
      type: System.Type
      description: "<xref:System.Type>的表达式。</xref:System.Type>"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  id: Owner
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: Owner
  nameWithType: ExpressionContext.Owner
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取拥有此表达式的对象。"
  remarks: "如果表达式是对的属性引用<xref:System.Windows.Forms.Control.Text%2A>实例的属性<xref:System.Windows.Forms.Button>调用`button1`，所有者返回`button1`。</xref:System.Windows.Forms.Button> </xref:System.Windows.Forms.Control.Text%2A>"
  syntax:
    content: public object Owner { get; }
    return:
      type: System.Object
      description: "拥有此表达式的对象。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  id: PresetValue
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  langs:
  - csharp
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取表达式的预设的值。"
  remarks: "包含预设的值的表达式，应存在。 例如，如果表达式是属性引用表达式引用<xref:System.Windows.Forms.Control.Controls%2A>属性<xref:System.Windows.Forms.Button>，PresetValue 属性包含的实例<xref:System.Windows.Forms.Control.Controls%2A>属性。</xref:System.Windows.Forms.Control.Controls%2A> </xref:System.Windows.Forms.Button> </xref:System.Windows.Forms.Control.Controls%2A> 这是因为该属性是只读的和预先设置的对象，以包含一个值。 另一方面，如属性<xref:System.Windows.Forms.Control.Text%2A>或<xref:System.Windows.Forms.Control.Visible%2A>没有预设的值，因此 PresetValue 属性返回`null`。</xref:System.Windows.Forms.Control.Visible%2A> </xref:System.Windows.Forms.Control.Text%2A>       下面的 C# 代码演示如何序列化程序可以使用此信息来指导序列化。       [C#]     ```   Padding p = new Padding();   p.Left = 5;   button1.Padding = p;      button1.Padding.Left = 5;   ```的序列化程序<xref:System.Windows.Forms.Padding>结构需要如果它应生成第一个或第二个窗体获悉。</xref:System.Windows.Forms.Padding> 默认情况下，生成第一个窗体。 如果没有，第二种形式将仅生成<xref:System.ComponentModel.Design.Serialization.ExpressionContext>包含 PresetValue 上下文堆栈上相等的值<xref:System.Windows.Forms.Padding>当前正在序列化。</xref:System.Windows.Forms.Padding> </xref:System.ComponentModel.Design.Serialization.ExpressionContext>"
  syntax:
    content: public object PresetValue { get; }
    return:
      type: System.Object
      description: "此表达式的预设的值或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不分配。"
  overload: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object)
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext(CodeExpression,Type,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object)
- uid: System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor(System.CodeDom.CodeExpression,System.Type,System.Object,System.Object)
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext(CodeExpression,Type,Object,Object)
  nameWithType: ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionContext(CodeExpression,Type,Object,Object)
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Expression
  nameWithType: ExpressionContext.Expression
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Expression
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Owner
  nameWithType: ExpressionContext.Owner
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.Owner
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
  fullName: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.#ctor*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionContext
  nameWithType: ExpressionContext.ExpressionContext
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Expression*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Expression
  nameWithType: ExpressionContext.Expression
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.ExpressionType*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: ExpressionType
  nameWithType: ExpressionContext.ExpressionType
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.Owner*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: Owner
  nameWithType: ExpressionContext.Owner
- uid: System.ComponentModel.Design.Serialization.ExpressionContext.PresetValue*
  parent: System.ComponentModel.Design.Serialization.ExpressionContext
  isExternal: false
  name: PresetValue
  nameWithType: ExpressionContext.PresetValue
