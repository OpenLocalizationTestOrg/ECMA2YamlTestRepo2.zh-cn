### YamlMime:ManagedReference
items:
- uid: System.Drawing.Imaging.ImageAttributes
  id: ImageAttributes
  children:
  - System.Drawing.Imaging.ImageAttributes.#ctor
  - System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable
  - System.Drawing.Imaging.ImageAttributes.ClearColorKey
  - System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearColorMatrix
  - System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearGamma
  - System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearNoOp
  - System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearOutputChannel
  - System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile
  - System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearRemapTable
  - System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.ClearThreshold
  - System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.Clone
  - System.Drawing.Imaging.ImageAttributes.Dispose
  - System.Drawing.Imaging.ImageAttributes.Finalize
  - System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])
  - System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)
  - System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  - System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)
  - System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetNoOp
  - System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)
  - System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)
  - System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])
  - System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)
  - System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)
  - System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)
  - System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)
  - System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)
  langs:
  - csharp
  name: ImageAttributes
  nameWithType: ImageAttributes
  fullName: System.Drawing.Imaging.ImageAttributes
  type: Class
  summary: "包含有关在呈现过程中如何操作位图和图元文件颜色的信息。"
  remarks: "ImageAttributes 对象维护多个颜色调整设置，包括颜色调整矩阵、 灰度调整矩阵、 灰度校正值、 颜色映射表和颜色阈值的值。 呈现过程中，颜色可以更正、 变暗，变亮，并且删除。 若要应用此类操作，初始化 ImageAttributes 对象，并将传递该 ImageAttributes 对象的路径 (的路径以及<xref:System.Drawing.Image>) 到<xref:System.Drawing.Graphics.DrawImage%2A>方法。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Image>"
  example:
  - "The following example takes an image that is all one color (0.2, 0.0, 0.4, 1.0) and doubles the red component adds 0.2 to the red, green, and blue components  \n  \n The following illustration shows the original image on the left and the transformed image on the right.  \n  \n ![Colors](~/add/media/colortrans1.png \"Colors\")  \n  \n The code in the following example uses the following steps to perform the recoloring:  \n  \n1.  Initialize a <xref:System.Drawing.Imaging.ColorMatrix> object.  \n  \n2.  Create an ImageAttributes object and pass the <xref:System.Drawing.Imaging.ColorMatrix> object to the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> method of the ImageAttributes object.  \n  \n3.  Pass the ImageAttributes object to the <xref:System.Drawing.Graphics.DrawImage%2A> method of a <xref:System.Drawing.Graphics> object.  \n  \n [!code-vb[System.Drawing.RecoloringImages#21](~/add/codesnippet/visualbasic/t-system.drawing.imaging_5_1.vb)]\n [!code-cs[System.Drawing.RecoloringImages#21](~/add/codesnippet/csharp/t-system.drawing.imaging_5_1.cs)]"
  syntax:
    content: 'public sealed class ImageAttributes : ICloneable, IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.#ctor
  id: '#ctor'
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ImageAttributes()
  nameWithType: ImageAttributes.ImageAttributes()
  fullName: System.Drawing.Imaging.ImageAttributes.ImageAttributes()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "初始化的新实例<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;></xref>类。"
  syntax:
    content: public ImageAttributes ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable
  id: ClearBrushRemapTable
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearBrushRemapTable()
  nameWithType: ImageAttributes.ClearBrushRemapTable()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除此画笔颜色重新映射表<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;></xref>对象。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的一个颜色重新映射表、 位图类别中，不同的颜色重新映射表和仍为画笔类别的不同的颜色重新映射表。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定为画笔类别任何调整设置，默认设置应用于画笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定默认重新映射表将红色转换为绿色，并指定 1.8 默认伽玛值。 如果调用<xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A>方法，默认重新映射表 （红色为绿色） 和默认伽玛值 (1.8) 将不会应用于画笔。</xref:System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable%2A> 如果你更高版本调用 ClearBrushRemapTable 方法时，画笔类别不会还原为默认重新映射表;相反，画笔类别都包含没有重新映射表。 同样，画笔类别将恢复为默认伽玛值。相反，画笔类别都包含没有伽玛值。"
  syntax:
    content: public void ClearBrushRemapTable ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey
  id: ClearColorKey
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearColorKey()
  nameWithType: ImageAttributes.ClearColorKey()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorKey()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "为默认类别清除颜色键 （透明范围）。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别的一个颜色键、 位图类别中，不同的颜色键和仍为钢笔类别不同的颜色键。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  syntax:
    content: public void ClearColorKey ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearColorKey*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)
  id: ClearColorKey(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearColorKey(ColorAdjustType)
  nameWithType: ImageAttributes.ClearColorKey(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorKey(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "为指定类别清除颜色键 （透明范围）。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别的一个颜色键、 位图类别中，不同的颜色键和仍为钢笔类别不同的颜色键。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定使任何颜色与 200 到 255 之间的红色组件透明，默认颜色键并指定 1.8 默认伽玛值。 如果你通过调用设置钢笔类别的颜色键<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法、 默认颜色键和默认伽玛值将不会应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> 如果稍后要清除的钢笔颜色键通过调用<xref:System.Drawing.Imaging.ImageAttributes.ClearColorKey%2A>方法，钢笔类别不会还原为默认颜色键; 相反，钢笔类别将具有任何颜色键。</xref:System.Drawing.Imaging.ImageAttributes.ClearColorKey%2A> 同样，钢笔类别将恢复为默认伽玛值。相反，钢笔类别都包含没有伽玛值。"
  syntax:
    content: public void ClearColorKey (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其清除颜色键的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearColorKey*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix
  id: ClearColorMatrix
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearColorMatrix()
  nameWithType: ImageAttributes.ClearColorMatrix()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除默认类别的颜色调整矩阵。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别的不同的颜色调整矩阵。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定钢笔类别任何调整设置，则默认设置应用于钢笔类别。"
  syntax:
    content: public void ClearColorMatrix ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)
  id: ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearColorMatrix(ColorAdjustType)
  nameWithType: ImageAttributes.ClearColorMatrix(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除指定类别的颜色调整矩阵。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别的不同的颜色调整矩阵。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定钢笔类别任何调整设置，则默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定的颜色调整矩阵和灰度值为默认类别。 如果你通过调用设置钢笔类别的颜色调整矩阵<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法，默认颜色调整矩阵将不应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> 如果你更高版本调用来清除钢笔颜色调整矩阵<xref:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix%2A>方法，钢笔类别不会还原到默认调整矩阵; 相反，钢笔类别就可以不调整矩阵。</xref:System.Drawing.Imaging.ImageAttributes.ClearColorMatrix%2A> 同样，钢笔类别将恢复为默认伽玛值。相反，钢笔类别都包含没有伽玛值。"
  syntax:
    content: public void ClearColorMatrix (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其清除颜色调整矩阵的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma
  id: ClearGamma
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearGamma()
  nameWithType: ImageAttributes.ClearGamma()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearGamma()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "禁用灰度校正为默认类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别伽玛值、 位图类别中，另一个伽玛值和仍为钢笔类别另一个伽玛值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  syntax:
    content: public void ClearGamma ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearGamma*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)
  id: ClearGamma(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearGamma(ColorAdjustType)
  nameWithType: ImageAttributes.ClearGamma(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearGamma(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "禁用灰度校正为指定类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别伽玛值、 位图类别中，另一个伽玛值和仍为钢笔类别另一个伽玛值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定钢笔类别任何调整设置，则默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定了伽玛值和为默认类别的颜色调整矩阵。 如果你设置钢笔类别的伽玛值通过调用<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法，默认伽玛值将不应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> 如果你更高版本清除钢笔伽玛值通过调用<xref:System.Drawing.Imaging.ImageAttributes.ClearGamma%2A>方法，钢笔类别不会还原为默认伽玛值，而是，钢笔类别将不伽玛值。</xref:System.Drawing.Imaging.ImageAttributes.ClearGamma%2A> 同样，钢笔类别不会还原到默认颜色调整矩阵;相反，钢笔类别都包含没有颜色调整矩阵。"
  syntax:
    content: public void ClearGamma (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定将禁用灰度校正的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearGamma*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp
  id: ClearNoOp
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearNoOp()
  nameWithType: ImageAttributes.ClearNoOp()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearNoOp()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除<xref uid=&quot;langword_csharp_NoOp&quot; name=&quot;NoOp&quot; href=&quot;&quot;></xref>设置为默认类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别伽玛值、 位图类别中，另一个伽玛值和仍为钢笔类别另一个伽玛值。       你可以通过调用来禁用为默认类别的颜色调整<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> 更高版本，则可以通过调用恢复为默认类别的颜色调整<xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A> 然后，将返回到已存在的对<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>.</xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>调用之前设置此颜色调整"
  syntax:
    content: public void ClearNoOp ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearNoOp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)
  id: ClearNoOp(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearNoOp(ColorAdjustType)
  nameWithType: ImageAttributes.ClearNoOp(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearNoOp(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除<xref uid=&quot;langword_csharp_NoOp&quot; name=&quot;NoOp&quot; href=&quot;&quot;></xref>设置为指定类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别伽玛值、 位图类别中，另一个伽玛值和仍为钢笔类别另一个伽玛值。       你可以通过调用来禁用某些类别的颜色调整<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A> 更高版本，则可以通过调用来恢复该类别的颜色调整<xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.ClearNoOp%2A> 然后，将返回到已存在的对<xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>.</xref:System.Drawing.Imaging.ImageAttributes.SetNoOp%2A>调用之前设置此颜色调整"
  syntax:
    content: public void ClearNoOp (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，为其指定的类别<xref uid=&quot;langword_csharp_NoOp&quot; name=&quot;NoOp&quot; href=&quot;&quot;></xref>清除设置。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearNoOp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel
  id: ClearOutputChannel
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearOutputChannel()
  nameWithType: ImageAttributes.ClearOutputChannel()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除 CMYK （青色-洋红色-黄色-黑色） 输出通道设置为默认类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别输出通道和位图类别的不同的输出通道。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定位图类别任何调整设置，默认设置应用于位图类别。"
  syntax:
    content: public void ClearOutputChannel ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)
  id: ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearOutputChannel(ColorAdjustType)
  nameWithType: ImageAttributes.ClearOutputChannel(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除 （青色-洋红色-黄色-黑色） 输出通道设置为指定类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别输出通道和位图类别的不同的输出通道。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定位图类别任何调整设置，默认设置应用于位图类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定输出通道和为默认类别调整矩阵。 如果你通过调用上设置了位图类别输出通道<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法，则默认输出通道不会应用于位图。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 如果你更高版本清除位图通过调用的输出通道<xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel%2A>方法，位图类别不会还原为默认输出通道; 相反，位图类别将具有任何输出通道设置。</xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannel%2A> 同样，位图类别不会还原到默认颜色调整矩阵;相反，位图类别都包含没有颜色调整矩阵。"
  syntax:
    content: public void ClearOutputChannel (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其清除输出通道设置的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile
  id: ClearOutputChannelColorProfile
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearOutputChannelColorProfile()
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除输出通道颜色配置文件设置为默认类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的输出通道配置文件和位图类别的不同的输出通道配置文件。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定位图类别任何调整设置，默认设置应用于位图类别。"
  syntax:
    content: public void ClearOutputChannelColorProfile ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)
  id: ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearOutputChannelColorProfile(ColorAdjustType)
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除输出通道颜色配置文件设置为指定类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的输出通道配置文件和位图类别的不同的输出通道配置文件。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定位图类别任何调整设置，默认设置应用于位图类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定的输出通道配置文件和默认类别调整矩阵。 如果你通过调用上设置了位图类别的输出通道配置文件<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法，则默认输出通道配置文件将不应用于位图。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> 如果你更高版本清除位图输出通道配置文件，通过调用<xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile%2A>方法，位图类别不会还原为默认输出通道配置文件; 相反，位图类别将具有任何输出通道配置文件设置。</xref:System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile%2A> 同样，位图类别不会还原到默认颜色调整矩阵;相反，位图类别都包含没有颜色调整矩阵。"
  syntax:
    content: public void ClearOutputChannelColorProfile (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其清除输出通道配置文件设置的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable
  id: ClearRemapTable
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearRemapTable()
  nameWithType: ImageAttributes.ClearRemapTable()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearRemapTable()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除颜色重新映射表为默认类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别重新映射表、 位图类别中，另一个重新映射表和仍为钢笔类别不同重新映射表。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  syntax:
    content: public void ClearRemapTable ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)
  id: ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearRemapTable(ColorAdjustType)
  nameWithType: ImageAttributes.ClearRemapTable(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearRemapTable(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除指定类别的颜色重新映射表。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别重新映射表、 位图类别中，另一个重新映射表和仍为钢笔类别不同重新映射表。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果永远不会指定钢笔类别任何调整设置，则默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定重新映射表和为默认类别伽玛值。 如果你通过调用设置钢笔类别重新映射表<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法，默认重新映射表将不应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A> 如果稍后通过调用清除钢笔重新映射表<xref:System.Drawing.Imaging.ImageAttributes.ClearRemapTable%2A>方法，钢笔类别不会还原为默认重新映射表; 相反，钢笔类别就可以不重新映射表。</xref:System.Drawing.Imaging.ImageAttributes.ClearRemapTable%2A> 同样，钢笔类别将恢复为默认伽玛值。相反，钢笔类别都包含没有伽玛值。"
  syntax:
    content: public void ClearRemapTable (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其清除重新映射表的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold
  id: ClearThreshold
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearThreshold()
  nameWithType: ImageAttributes.ClearThreshold()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearThreshold()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除默认类别的阈值值。"
  remarks: "阈值是一个介于 0 到 1，指定每个颜色组件的分界点。 例如，假设的阈值设置为 0.7，并且假设呈现一种颜色的红色、 绿色和蓝色分量 230、 50，分别为和 220。 红色的组件 (230) 大于 0.7 x 255, 因此红色组件将更改为 255 （最大亮度）。 绿色的组件 (50) 小于 0.7 x 255,，因此绿色组件将更改为 0。 蓝色分量 (220) 大于 0.7 x 255, 因此蓝色组件将更改为 255。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别阈值、 针对位图类别中，一个不同的阈值和仍为钢笔类别一个不同的阈值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  syntax:
    content: public void ClearThreshold ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.ClearThreshold*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)
  id: ClearThreshold(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: ClearThreshold(ColorAdjustType)
  nameWithType: ImageAttributes.ClearThreshold(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearThreshold(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "清除指定类别的阈值值。"
  remarks: "阈值是一个介于 0 到 1，指定每个颜色组件的分界点。 例如，假设的阈值设置为 0.7，并且假设呈现一种颜色的红色、 绿色和蓝色分量 230、 50，分别为和 220。 红色的组件 (230) 大于 0.7x55，因此红色组件将更改为 255 （最大亮度）。 绿色的组件 (50) 小于 0.7 x 255,，因此绿色组件将更改为 0。 蓝色分量 (220) 大于 0.7 x 255, 因此蓝色组件将更改为 255。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别阈值、 针对位图类别中，一个不同的阈值和仍为钢笔类别一个不同的阈值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定的阈值和默认类别的伽玛值。 如果你通过调用设置为钢笔类别阈值<xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A>方法，默认阈值将不应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A> 如果稍后通过调用清除钢笔阈值<xref:System.Drawing.Imaging.ImageAttributes.ClearThreshold%2A>方法，钢笔类别不会还原为默认阈值; 相反，钢笔类别将具有无阈值。</xref:System.Drawing.Imaging.ImageAttributes.ClearThreshold%2A> 同样，钢笔类别将恢复为默认伽玛值。相反，钢笔类别都包含没有伽玛值。"
  syntax:
    content: public void ClearThreshold (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定将清除阈值的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.ClearThreshold*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.Clone
  id: Clone
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: Clone()
  nameWithType: ImageAttributes.Clone()
  fullName: System.Drawing.Imaging.ImageAttributes.Clone()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "创建此的精确副本<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;></xref>对象。"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;> </xref>此类创建的对象强制转换为对象。"
  overload: System.Drawing.Imaging.ImageAttributes.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.Dispose
  id: Dispose
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: Dispose()
  nameWithType: ImageAttributes.Dispose()
  fullName: System.Drawing.Imaging.ImageAttributes.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "释放所有资源由此<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;></xref>对象。"
  remarks: "在完成使用<xref:System.Drawing.Imaging.ImageAttributes>.</xref:System.Drawing.Imaging.ImageAttributes>时调用的 Dispose Dispose 方法离开<xref:System.Drawing.Imaging.ImageAttributes>中不可用状态。</xref:System.Drawing.Imaging.ImageAttributes> 调用 Dispose 后，必须释放对所有引用<xref:System.Drawing.Imaging.ImageAttributes>以便垃圾回收器才能回收的内存，<xref:System.Drawing.Imaging.ImageAttributes>占用。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes> 有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.Drawing.Imaging.ImageAttributes>。</xref:System.Drawing.Imaging.ImageAttributes>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Drawing.Imaging.ImageAttributes>对象的`Finalize`方法。</xref:System.Drawing.Imaging.ImageAttributes>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.Finalize
  id: Finalize
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: Finalize()
  nameWithType: ImageAttributes.Finalize()
  fullName: System.Drawing.Imaging.ImageAttributes.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "允许该对象尝试释放资源并在被垃圾回收回收之前执行其他清理操作。"
  syntax:
    content: ~ImageAttributes ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)
  id: GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: GetAdjustedPalette(ColorPalette,ColorAdjustType)
  nameWithType: ImageAttributes.GetAdjustedPalette(ColorPalette,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(ColorPalette,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "调整根据指定类别的调整设置调色板中的颜色。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别的颜色重新映射表、 位图类别中，不同的颜色重新映射表和仍为钢笔类别的不同的颜色重新映射表。       在调用 GetAdjustedPalette 方法时，你可以指定用于调整的调色板颜色调整类别。 例如，如果你通过<xref:System.Drawing.Imaging.ColorAdjustType>GetAdjustedPalette 方法中，使用位图类别的调整设置以调整的调色板颜色。</xref:System.Drawing.Imaging.ColorAdjustType>"
  syntax:
    content: public void GetAdjustedPalette (System.Drawing.Imaging.ColorPalette palette, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: palette
      type: System.Drawing.Imaging.ColorPalette
      description: "A <xref href=&quot;System.Drawing.Imaging.ColorPalette&quot;> </xref>输入，其中包含要进行调整的调色板并在输出时包含已调整的调色板。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定其调整设置将应用于调色板的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])
  id: SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetBrushRemapTable(ColorMap[])
  nameWithType: ImageAttributes.SetBrushRemapTable(ColorMap[])
  fullName: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(ColorMap[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "画笔类别的设置颜色重新映射表。"
  remarks: "颜色重新映射表是一个数组<xref:System.Drawing.Imaging.ColorMap>结构。</xref:System.Drawing.Imaging.ColorMap> 每个<xref:System.Drawing.Imaging.ColorMap>结构具有两个<xref:System.Drawing.Color>对象︰ 一个指定旧的颜色，另一个指定相应的新颜色。</xref:System.Drawing.Color> </xref:System.Drawing.Imaging.ColorMap> 呈现过程中，重新映射表中的旧颜色之一匹配的任何颜色将变为对应的新颜色。       调用 SetBrushRemapTable 方法具有相同的效果与传入<xref:System.Drawing.Imaging.ColorAdjustType>到<xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A>方法。</xref:System.Drawing.Imaging.ImageAttributes.SetRemapTable%2A> </xref:System.Drawing.Imaging.ColorAdjustType> 指定重新映射表适用于使用画笔填充的图元文件中的项。       此方法旨在仅用于图元文件。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Creates a single-element <xref:System.Drawing.Imaging.ColorMap> array that holds red as the old color and green as the new color.  \n  \n2.  Passes this array to a newly created <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#1](~/add/codesnippet/cpp/03cb420b-6413-4b57-9e9e-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#1](~/add/codesnippet/csharp/03cb420b-6413-4b57-9e9e-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#1](~/add/codesnippet/visualbasic/03cb420b-6413-4b57-9e9e-_1.vb)]"
  syntax:
    content: public void SetBrushRemapTable (System.Drawing.Imaging.ColorMap[] map);
    parameters:
    - id: map
      type: System.Drawing.Imaging.ColorMap[]
      description: "数组<xref href=&quot;System.Drawing.Imaging.ColorMap&quot;></xref>对象。"
  overload: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)
  id: SetColorKey(System.Drawing.Color,System.Drawing.Color)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorKey(Color,Color)
  nameWithType: ImageAttributes.SetColorKey(Color,Color)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorKey(Color,Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置为默认类别的颜色键。"
  remarks: "此方法设置的上限和下限的颜色键的值，以便可以透明进行的颜色范围。 任何具有每个相应的各个组件之间的高和较低的颜色键其三个组件 （红色、 绿色、 蓝色） 的颜色由透明。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别的颜色键、 位图类别中，不同的颜色键和仍为钢笔类别不同的颜色键。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%28System.Drawing.Color%2CSystem.Drawing.Color%2CSystem.Drawing.Imaging.ColorAdjustType%29> method.
  syntax:
    content: public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh);
    parameters:
    - id: colorLow
      type: System.Drawing.Color
      description: "低颜色键值。"
    - id: colorHigh
      type: System.Drawing.Color
      description: "高颜色键值。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorKey*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)
  id: SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorKey(Color,Color,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorKey(Color,Color,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorKey(Color,Color,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "为指定类别设置颜色键 （透明范围）。"
  remarks: "此方法设置的上限和下限的颜色键的值，以便可以透明进行的颜色范围。 任何具有每个相应的各个组件之间的高和较低的颜色键其三个组件 （红色、 绿色、 蓝色） 的颜色由透明。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别的颜色键、 位图类别中，不同的颜色键和仍为钢笔类别不同的颜色键。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定为默认类别的调整设置的集合。 如果你通过将传递设置钢笔类别的颜色键<xref:System.Drawing.Imaging.ColorAdjustType>到<xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A>方法，无默认调整设置将应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> </xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> that uses the file Circle.bmp and draws it to the screen.  \n  \n2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets its color key by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetColorKey%2A> method.  \n  \n3.  Draws the image to the screen using the color key of the <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#2](~/add/codesnippet/cpp/71066d96-794d-4f7b-950a-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#2](~/add/codesnippet/csharp/71066d96-794d-4f7b-950a-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#2](~/add/codesnippet/visualbasic/71066d96-794d-4f7b-950a-_1.vb)]"
  syntax:
    content: public void SetColorKey (System.Drawing.Color colorLow, System.Drawing.Color colorHigh, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: colorLow
      type: System.Drawing.Color
      description: "低颜色键值。"
    - id: colorHigh
      type: System.Drawing.Color
      description: "高颜色键值。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其设置颜色键的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorKey*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)
  id: SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrices(ColorMatrix,ColorMatrix)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置颜色调整矩阵和灰度调整矩阵为默认类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的调整矩阵、 针对位图类别中，另一个调整矩阵和钢笔类别的另一个调整矩阵。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       调用 SetColorMatrices 方法等效于调用<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName>方法并传入<xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>为`flags`参数。</xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName> </xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName> <xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>指定所有颜色 （包括灰色） 都调整通过颜色调整矩阵，不灰度调整矩阵。</xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName> 因此，传递给此方法的灰度调整矩阵不起作用。"
  syntax:
    content: public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "颜色调整矩阵。"
    - id: grayMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "灰度调整矩阵。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrices*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  id: SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置颜色调整矩阵和灰度调整矩阵为默认类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的调整矩阵、 针对位图类别中，另一个调整矩阵和钢笔类别的另一个调整矩阵。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  syntax:
    content: public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "颜色调整矩阵。"
    - id: grayMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "灰度调整矩阵。"
    - id: flags
      type: System.Drawing.Imaging.ColorMatrixFlag
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorMatrixFlag&quot;> </xref> ，它指定的图像和将受颜色调整和灰度调整矩阵的颜色的类型。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrices*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  id: SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置颜色调整矩阵和灰度调整矩阵为指定类别。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的调整矩阵、 针对位图类别中，另一个调整矩阵和钢笔类别的另一个调整矩阵。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定为默认类别的调整设置的集合。 如果通过将传递设置颜色-调整矩阵和灰度调整矩阵为钢笔类别<xref:System.Drawing.Imaging.ColorAdjustType>到<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%2A>方法，无默认调整设置将应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrices%2A> </xref:System.Drawing.Imaging.ColorAdjustType>"
  syntax:
    content: public void SetColorMatrices (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrix grayMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "颜色调整矩阵。"
    - id: grayMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "灰度调整矩阵。"
    - id: mode
      type: System.Drawing.Imaging.ColorMatrixFlag
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorMatrixFlag&quot;> </xref> ，它指定的图像和将受颜色调整和灰度调整矩阵的颜色的类型。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其设置颜色调整和灰度调整矩阵的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrices*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)
  id: SetColorMatrix(System.Drawing.Imaging.ColorMatrix)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrix(ColorMatrix)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "默认类别的设置颜色调整矩阵。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别的不同的颜色调整矩阵。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       调用 SetColorMatrix 方法等效于调用<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName>方法并传入<xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>为`flags`参数。</xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName> </xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%2CSystem.Drawing.Imaging.ColorMatrixFlag%29?displayProperty=fullName> <xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>指定所有颜色 （包括灰色） 通过颜色调整矩阵都调整</xref:System.Drawing.Imaging.ColorMatrixFlag?displayProperty=fullName>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Creates a rectangle image that has all the color values set to 128, producing a rectangle that is filled with a solid medium-gray color. The code then draws this rectangle image to the screen.  \n  \n2.  Creates a <xref:System.Drawing.Imaging.ColorMatrix> and sets its <xref:System.Drawing.Drawing2D.Matrix> location to 1.75, which emphasizes the red component of the image.  \n  \n3.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and calls the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> method.  \n  \n4.  Draws the image (a second rectangle) to the screen using the <xref:System.Drawing.Imaging.ColorMatrix> just set in the <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n Note that the second rectangle has the color red emphasized.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#3](~/add/codesnippet/cpp/177ae5c1-d9d6-4cf6-ac7b-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#3](~/add/codesnippet/csharp/177ae5c1-d9d6-4cf6-ac7b-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#3](~/add/codesnippet/visualbasic/177ae5c1-d9d6-4cf6-ac7b-_1.vb)]"
  syntax:
    content: public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "颜色调整矩阵。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  id: SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "默认类别的设置颜色调整矩阵。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别的不同的颜色调整矩阵。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%28System.Drawing.Imaging.ColorMatrix%29> method.
  syntax:
    content: public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag flags);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "颜色调整矩阵。"
    - id: flags
      type: System.Drawing.Imaging.ColorMatrixFlag
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorMatrixFlag&quot;> </xref> ，它指定的图像和将受颜色调整矩阵的颜色的类型。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  id: SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "指定类别的设置颜色调整矩阵。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别的颜色调整矩阵、 位图类别中，不同的颜色调整矩阵和仍为钢笔类别的不同的颜色调整矩阵。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定为默认类别的调整设置的集合。 如果你通过将传递设置钢笔类别的颜色调整矩阵<xref:System.Drawing.Imaging.ColorAdjustType>到<xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A>方法，无默认调整设置将应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetColorMatrix%2A> </xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - "The following code example demonstrates how to use the SetColorMatrix method. To run this example, paste the code into a Windows Form and call `RotateColors` from the form's <xref:System.Windows.Forms.Control.Paint> event-handling method, passing `e` as <xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.RotateColors#1](~/add/codesnippet/visualbasic/90629bc4-1375-4e58-926d-_1.vb)]\n [!code-cs[System.Drawing.RotateColors#1](~/add/codesnippet/csharp/90629bc4-1375-4e58-926d-_1.cs)]"
  syntax:
    content: public void SetColorMatrix (System.Drawing.Imaging.ColorMatrix newColorMatrix, System.Drawing.Imaging.ColorMatrixFlag mode, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: newColorMatrix
      type: System.Drawing.Imaging.ColorMatrix
      description: "颜色调整矩阵。"
    - id: mode
      type: System.Drawing.Imaging.ColorMatrixFlag
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorMatrixFlag&quot;> </xref> ，它指定的图像和将受颜色调整矩阵的颜色的类型。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其设置颜色调整矩阵的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.SetColorMatrix*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)
  id: SetGamma(System.Single)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetGamma(Single)
  nameWithType: ImageAttributes.SetGamma(Single)
  fullName: System.Drawing.Imaging.ImageAttributes.SetGamma(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置伽玛值为默认类别。"
  remarks: "典型值为`gamma`参数都是从 1.0 到 2.2; 但是，从 0.1 到 5.0 的值无法证明在某些情况下有用。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别伽玛值、 位图类别中，另一个伽玛值和仍为钢笔类别另一个伽玛值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       常用的范围之外的伽玛值可能对于旧 CRT 监视器，或者异常的照明条件，如工业环境或窗口会显示中的监视器。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. In addition, you need to change the image file path to a path and image name valid on your system. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> that uses the file Camera.jpg and draws it to the screen using the default value for gamma.  \n  \n2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets its gamma to 2.2 by calling the <xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> method.  \n  \n3.  Draws the image (a second camera) to the screen using the gamma value just set in the <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#4](~/add/codesnippet/cpp/m-system.drawing.imaging_4_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#4](~/add/codesnippet/csharp/m-system.drawing.imaging_4_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#4](~/add/codesnippet/visualbasic/m-system.drawing.imaging_4_1.vb)]"
  syntax:
    content: public void SetGamma (float gamma);
    parameters:
    - id: gamma
      type: System.Single
      description: "灰度校正值。"
  overload: System.Drawing.Imaging.ImageAttributes.SetGamma*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)
  id: SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetGamma(Single,ColorAdjustType)
  nameWithType: ImageAttributes.SetGamma(Single,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetGamma(Single,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置伽玛值为指定类别。"
  remarks: "典型值为`gamma`参数都是从 1.0 到 2.2; 但是，从 0.1 到 5.0 的值无法证明在某些情况下有用。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别伽玛值、 位图类别中，另一个伽玛值和仍为钢笔类别另一个伽玛值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定为默认类别的调整设置的集合。 如果你通过将传递设置钢笔类别的伽玛值<xref:System.Drawing.Imaging.ColorAdjustType>到<xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A>方法，无默认调整设置将应用于钢笔。</xref:System.Drawing.Imaging.ImageAttributes.SetGamma%2A> </xref:System.Drawing.Imaging.ColorAdjustType>       常用的范围之外的伽玛值可能对于旧 CRT 监视器，或者异常的照明条件，如工业环境或窗口会显示中的监视器。"
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetGamma%28System.Single%29> method.
  syntax:
    content: public void SetGamma (float gamma, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: gamma
      type: System.Single
      description: "灰度校正值。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;></xref>指定为其设置伽玛值的类别的枚举。"
  overload: System.Drawing.Imaging.ImageAttributes.SetGamma*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp
  id: SetNoOp
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetNoOp()
  nameWithType: ImageAttributes.SetNoOp()
  fullName: System.Drawing.Imaging.ImageAttributes.SetNoOp()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "关闭颜色调整为默认类别。 你可以调用<> *1> 方法恢复在调用前已存在的颜色调整设置<> *1> 方法。"
  remarks: "<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别伽玛值、 位图类别中，另一个伽玛值和仍为钢笔类别另一个伽玛值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> that uses the file Camera.jpg.  \n  \n2.  Sets the gamma value of the <xref:System.Drawing.Imaging.ImageAttributes> object to 0.25.  \n  \n3.  Draws the image to the screen.  \n  \n4.  Calls the SetNoOp method.  \n  \n5.  Draws the image (a second camera) to the screen; however, because the SetNoOp method was called, the gamma setting defaults to a value of 1.0 and the image is drawn to the screen with the default gamma setting.  \n  \n Note that the image on the left is very washed out (gamma of 0.25) and the image on the right has more contrast (gamma of 1.0).  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#5](~/add/codesnippet/cpp/m-system.drawing.imaging_0_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#5](~/add/codesnippet/csharp/m-system.drawing.imaging_0_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#5](~/add/codesnippet/visualbasic/m-system.drawing.imaging_0_1.vb)]"
  syntax:
    content: public void SetNoOp ();
    parameters: []
  overload: System.Drawing.Imaging.ImageAttributes.SetNoOp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)
  id: SetNoOp(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetNoOp(ColorAdjustType)
  nameWithType: ImageAttributes.SetNoOp(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetNoOp(ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "关闭颜色调整为指定类别。 你可以调用<> *1> 方法恢复在调用前已存在的颜色调整设置<> *1> 方法。"
  remarks: '<xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，可以指定为默认类别伽玛值、 位图类别中，另一个伽玛值和仍为钢笔类别另一个伽玛值。'
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetNoOp> method.
  syntax:
    content: public void SetNoOp (System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定颜色更正已关闭的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.SetNoOp*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)
  id: SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetOutputChannel(ColorChannelFlag)
  nameWithType: ImageAttributes.SetOutputChannel(ColorChannelFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(ColorChannelFlag)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置 CMYK （青色-洋红色-黄色-黑色） 输出通道为默认类别。"
  remarks: "你可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法将图像转换为 CMYK 色彩空间并检查之一 CMYK 颜色通道的强度。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 例如，假设你创建的<xref:System.Drawing.Imaging.ImageAttributes>对象，并将到<xref:System.Drawing.Imaging.ColorChannelFlag>。</xref:System.Drawing.Imaging.ColorChannelFlag>其位图输出通道</xref:System.Drawing.Imaging.ImageAttributes> 如果传递的路径<xref:System.Drawing.Imaging.ImageAttributes>对象传递给<xref:System.Drawing.Graphics.DrawImage%2A>方法，计算每个像素的蓝绿色部分，并且在呈现的图像中的每个像素的阴影属于灰色指示其青色通道的强度。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Imaging.ImageAttributes> 同样，你可以呈现指示洋红色，黄色，和黑色通道强度的图像。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别输出通道和位图类别的不同的输出通道。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定位图类别任何调整设置，默认设置应用于位图类别。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> method. To run this example, paste the following code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `ShowOutputChannels`, passing `e` as<xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.Misc3#4](~/add/codesnippet/visualbasic/9ad3adf3-ee86-4369-8698-_1.vb)]\n [!code-cs[System.Drawing.Misc3#4](~/add/codesnippet/csharp/9ad3adf3-ee86-4369-8698-_1.cs)]"
  syntax:
    content: public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags);
    parameters:
    - id: flags
      type: System.Drawing.Imaging.ColorChannelFlag
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorChannelFlag&quot;> </xref> ，指定输出通道。"
  overload: System.Drawing.Imaging.ImageAttributes.SetOutputChannel*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)
  id: SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置 CMYK （青色-洋红色-黄色-黑色） 输出通道为指定类别。"
  remarks: "你可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法将图像转换为 CMYK 色彩空间并检查之一 CMYK 颜色通道的强度。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 例如，假设你创建的<xref:System.Drawing.Imaging.ImageAttributes>对象，并将到<xref:System.Drawing.Imaging.ColorChannelFlag>。</xref:System.Drawing.Imaging.ColorChannelFlag>其位图输出通道</xref:System.Drawing.Imaging.ImageAttributes> 如果传递的路径<xref:System.Drawing.Imaging.ImageAttributes>对象传递给<xref:System.Drawing.Graphics.DrawImage%2A>方法，计算每个像素的蓝绿色部分，并且在呈现的图像中的每个像素的阴影属于灰色指示其青色通道的强度。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Imaging.ImageAttributes> 同样，你可以呈现指示洋红色，黄色，和黑色通道强度的图像。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别输出通道和位图类别的不同的输出通道。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定位图类别任何调整设置，默认设置应用于位图类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定为默认类别的调整设置的集合。 如果你通过将传递设置输出通道为位图类别<xref:System.Drawing.Imaging.ColorAdjustType>SetOutputChannel 方法中，无默认调整设置将应用于位图。</xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - "The following code example demonstrates how to use the SetOutputChannel method. To run this example, paste the following code into a Windows Form. Handle the form's <xref:System.Windows.Forms.Control.Paint> event and call `ShowOutputChannels`, passing `e` as<xref:System.Windows.Forms.PaintEventArgs>.  \n  \n [!code-vb[System.Drawing.Misc3#4](~/add/codesnippet/visualbasic/980f8f9a-f561-44e4-94f4-_1.vb)]\n [!code-cs[System.Drawing.Misc3#4](~/add/codesnippet/csharp/980f8f9a-f561-44e4-94f4-_1.cs)]"
  syntax:
    content: public void SetOutputChannel (System.Drawing.Imaging.ColorChannelFlag flags, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: flags
      type: System.Drawing.Imaging.ColorChannelFlag
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorChannelFlag&quot;> </xref> ，指定输出通道。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其设置输出通道的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.SetOutputChannel*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)
  id: SetOutputChannelColorProfile(System.String)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetOutputChannelColorProfile(String)
  nameWithType: ImageAttributes.SetOutputChannelColorProfile(String)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(String)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置输出通道颜色配置文件为默认类别。"
  remarks: "你可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>和<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>将图像转换为 CMYK （青色-洋红色-黄色-黑色） 色彩空间和检查的其中一个 CMYK 强度方法颜色通道。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 例如，假设你编写代码来执行以下步骤︰ 1。  创建<xref:System.Drawing.Image>.</xref:System.Drawing.Image>      2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象。</xref:System.Drawing.Imaging.ImageAttributes>      3.  传递<xref:System.Drawing.Imaging.ColorChannelFlag>到<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>对象。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> </xref:System.Drawing.Imaging.ColorChannelFlag>      4.  传递到一个颜色配置文件的路径名称<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>对象。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>      5.  路径传递<xref:System.Drawing.Image>和<xref:System.Drawing.Imaging.ImageAttributes>对象添加到<xref:System.Drawing.Graphics.DrawImage%2A>方法。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Image>       [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]将使用颜色配置文件来计算在图中，每个像素的蓝绿色部分，每个像素中呈现的图像将喜欢的灰色指示其青色通道的强度。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别输出通道颜色配置文件和不同的输出通道颜色配置文件为位图类别。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定位图类别任何调整设置，默认设置应用于位图类别。"
  syntax:
    content: public void SetOutputChannelColorProfile (string colorProfileFilename);
    parameters:
    - id: colorProfileFilename
      type: System.String
      description: "颜色配置文件路径名称。 如果颜色配置文件位于 %SystemRoot%\\System32\\Spool\\Drivers\\Color 目录中，此参数可以为的文件名称。 否则，此参数必须是完全限定的路径名称。"
  overload: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)
  id: SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetOutputChannelColorProfile(String,ColorAdjustType)
  nameWithType: ImageAttributes.SetOutputChannelColorProfile(String,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(String,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "指定类别的设置输出通道颜色配置文件。"
  remarks: "你可以使用<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>和<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>将图像转换为 CMYK （青色-洋红色-黄色-黑色） 色彩空间和检查的其中一个 CMYK 强度方法颜色通道。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> 例如，假设你编写代码来执行以下步骤︰ 1。  创建<xref:System.Drawing.Image>.</xref:System.Drawing.Image>      2.  创建<xref:System.Drawing.Imaging.ImageAttributes>对象。</xref:System.Drawing.Imaging.ImageAttributes>      3.  传递<xref:System.Drawing.Imaging.ColorChannelFlag>到<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>对象。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannel%2A> </xref:System.Drawing.Imaging.ColorChannelFlag>      4.  传递到一个颜色配置文件的路径名称<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法<xref:System.Drawing.Imaging.ImageAttributes>对象。</xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>      5.  路径传递<xref:System.Drawing.Image>和<xref:System.Drawing.Imaging.ImageAttributes>对象添加到<xref:System.Drawing.Graphics.DrawImage%2A>方法。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Imaging.ImageAttributes> </xref:System.Drawing.Image>       [!INCLUDE[ndptecgdiplus](~/add/includes/ndptecgdiplus-md.md)]将使用颜色配置文件来计算在图中，每个像素的蓝绿色部分，每个像素中呈现的图像将喜欢的灰色指示其青色通道的强度。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别输出通道颜色配置文件和不同的输出通道颜色配置文件为位图类别。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定位图类别任何调整设置，默认设置应用于位图类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定为默认类别的调整设置的集合。 如果通过将传递设置输出通道颜色配置文件为位图类别<xref:System.Drawing.Imaging.ColorAdjustType>到<xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A>方法，无默认调整设置将应用于位图。</xref:System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile%2A> </xref:System.Drawing.Imaging.ColorAdjustType>"
  syntax:
    content: public void SetOutputChannelColorProfile (string colorProfileFilename, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: colorProfileFilename
      type: System.String
      description: "颜色配置文件路径名称。 如果颜色配置文件位于 %SystemRoot%\\System32\\Spool\\Drivers\\Color 目录中，此参数可以为的文件名称。 否则，此参数必须是完全限定的路径名称。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其设置输出通道颜色配置文件的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])
  id: SetRemapTable(System.Drawing.Imaging.ColorMap[])
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetRemapTable(ColorMap[])
  nameWithType: ImageAttributes.SetRemapTable(ColorMap[])
  fullName: System.Drawing.Imaging.ImageAttributes.SetRemapTable(ColorMap[])
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "默认类别的设置颜色重新映射表。"
  remarks: "颜色重新映射表是一个数组<xref:System.Drawing.Imaging.ColorMap>结构。</xref:System.Drawing.Imaging.ColorMap> 每个<xref:System.Drawing.Imaging.ColorMap>结构具有两个<xref:System.Drawing.Color>对象︰ 一个指定旧的颜色，另一个指定相应的新颜色。</xref:System.Drawing.Color> </xref:System.Drawing.Imaging.ColorMap> 呈现过程中，重新映射表中的旧颜色之一匹配的任何颜色将变为对应的新颜色。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定默认类别、 位图类别的颜色重新映射表和仍为钢笔类别的不同的颜色重新映射表颜色重新映射。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Creates an image (a red circle), saves it as Circle2.jpg, opens that image, and draws it to the screen.  \n  \n2.  Creates a color map that maps the color red to the color green.  \n  \n3.  Draws the image created earlier to the screen again, but this time using the color map.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#6](~/add/codesnippet/cpp/de604fe6-6d67-4cfb-bb54-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#6](~/add/codesnippet/csharp/de604fe6-6d67-4cfb-bb54-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#6](~/add/codesnippet/visualbasic/de604fe6-6d67-4cfb-bb54-_1.vb)]"
  syntax:
    content: public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map);
    parameters:
    - id: map
      type: System.Drawing.Imaging.ColorMap[]
      description: "类型的颜色对数组<xref href=&quot;System.Drawing.Imaging.ColorMap&quot;> </xref>。 每个颜色对包含现有的颜色 （第一个值） 和它将映射到 （第二个值） 的颜色。"
  overload: System.Drawing.Imaging.ImageAttributes.SetRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)
  id: SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetRemapTable(ColorMap[],ColorAdjustType)
  nameWithType: ImageAttributes.SetRemapTable(ColorMap[],ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetRemapTable(ColorMap[],ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "指定类别的设置颜色重新映射表。"
  remarks: "颜色重新映射表是一个数组<xref:System.Drawing.Imaging.ColorMap>结构。</xref:System.Drawing.Imaging.ColorMap> 每个<xref:System.Drawing.Imaging.ColorMap>结构具有两个<xref:System.Drawing.Color>对象︰ 一个指定旧的颜色，另一个指定相应的新颜色。</xref:System.Drawing.Color> </xref:System.Drawing.Imaging.ColorMap> 呈现过程中，重新映射表中的旧颜色之一匹配的任何颜色将变为对应的新颜色。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定默认类别、 位图类别的颜色重新映射表和仍为钢笔类别的不同的颜色重新映射表颜色重新映射。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定为默认类别的调整设置的集合。 如果你通过将传递设置钢笔类别的颜色重新映射表<xref:System.Drawing.Imaging.ColorAdjustType>SetRemapTable 方法中，无默认调整设置将应用于钢笔。</xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - For a code example, see the [SetRemapTable(ColorMap\[\])](assetId:///M:System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])?qualifyHint=False&autoUpgrade=False) method.
  syntax:
    content: public void SetRemapTable (System.Drawing.Imaging.ColorMap[] map, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: map
      type: System.Drawing.Imaging.ColorMap[]
      description: "类型的颜色对数组<xref href=&quot;System.Drawing.Imaging.ColorMap&quot;> </xref>。 每个颜色对包含现有的颜色 （第一个值） 和它将映射到 （第二个值） 的颜色。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其设置颜色重新映射表的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.SetRemapTable*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)
  id: SetThreshold(System.Single)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetThreshold(Single)
  nameWithType: ImageAttributes.SetThreshold(Single)
  fullName: System.Drawing.Imaging.ImageAttributes.SetThreshold(Single)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置为默认类别的阈值 （透明范围）。"
  remarks: "阈值是一个介于 0 到 1，指定每个颜色组件的分界点。 例如，假设的阈值设置为 0.7，并且假设呈现一种颜色的红色、 绿色和蓝色分量 230、 50，分别为和 220。 红色的组件 (230) 大于 0.7 x 255, 因此红色组件将更改为 255 （最大亮度）。 绿色的组件 (50) 小于 0.7 x 255,，因此绿色组件将更改为 0。 蓝色分量 (220) 大于 0.7 x 255, 因此蓝色组件将更改为 255。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别阈值、 针对位图类别中，阈值和仍为钢笔类别一个不同的阈值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> and draws it to the screen.  \n  \n2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets its threshold by using the <xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%2A> method.  \n  \n3.  Draws the image to the screen by using the threshold of the <xref:System.Drawing.Imaging.ImageAttributes> object.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#7](~/add/codesnippet/cpp/m-system.drawing.imaging_1_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#7](~/add/codesnippet/csharp/m-system.drawing.imaging_1_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#7](~/add/codesnippet/visualbasic/m-system.drawing.imaging_1_1.vb)]"
  syntax:
    content: public void SetThreshold (float threshold);
    parameters:
    - id: threshold
      type: System.Single
      description: "指定的阈值的实数。"
  overload: System.Drawing.Imaging.ImageAttributes.SetThreshold*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)
  id: SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetThreshold(Single,ColorAdjustType)
  nameWithType: ImageAttributes.SetThreshold(Single,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetThreshold(Single,ColorAdjustType)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置为指定类别的阈值 （透明范围）。"
  remarks: "阈值是一个介于 0 到 1，指定每个颜色组件的分界点。 例如，假设的阈值设置为 0.7，并且假设呈现一种颜色的红色、 绿色和蓝色分量 230、 50，分别为和 220。 红色的组件 (230) 大于 0.7 x 255, 因此红色组件将更改为 255 （最大亮度）。 绿色的组件 (50) 小于 0.7 x 255,，因此绿色组件将更改为 0。 蓝色分量 (220) 大于 0.7 x 255, 因此蓝色组件将更改为 255。       <xref:System.Drawing.Imaging.ImageAttributes>对象维护的五个调整类别的颜色和灰度设置︰ 默认、 位图、 画笔、 笔、 和文本。</xref:System.Drawing.Imaging.ImageAttributes> 例如，你可以指定为默认类别阈值、 针对位图类别中，阈值和仍为钢笔类别一个不同的阈值。       默认颜色调整和灰度调整设置适用于不具有其自己的调整设置的所有类别。 例如，如果你永远不会指定钢笔类别任何调整设置，默认设置应用于钢笔类别。       只要你指定的颜色调整或某些类别的灰度调整设置，默认调整设置将不再适用于该类别。 例如，假设你指定为默认类别的调整设置的集合。 如果你通过将传递设置钢笔类别的阈值<xref:System.Drawing.Imaging.ColorAdjustType>SetThreshold 方法中，无默认调整设置将应用于钢笔。</xref:System.Drawing.Imaging.ColorAdjustType>"
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetThreshold%28System.Single%29> method.
  syntax:
    content: public void SetThreshold (float threshold, System.Drawing.Imaging.ColorAdjustType type);
    parameters:
    - id: threshold
      type: System.Single
      description: "一个阈值的值介于 0.0 到 1.0，用作一个断点将映射到最多或最小值的颜色进行排序。"
    - id: type
      type: System.Drawing.Imaging.ColorAdjustType
      description: "一个元素<xref href=&quot;System.Drawing.Imaging.ColorAdjustType&quot;> </xref> ，指定为其设置颜色阈值的类别。"
  overload: System.Drawing.Imaging.ImageAttributes.SetThreshold*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)
  id: SetWrapMode(System.Drawing.Drawing2D.WrapMode)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetWrapMode(WrapMode)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置环绕模式用于决定如何磁贴纹理到一个形状，或到形状的边界。 当纹理小于它所填充的形状时填写某个形状上平铺纹理。"
  remarks: "调用 SetWrapMode 方法等效于调用<xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%2CSystem.Drawing.Color%29>并传递<xref:System.Drawing.Color.Black%2A?displayProperty=fullName>为`color`参数。</xref:System.Drawing.Color.Black%2A?displayProperty=fullName> </xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%2CSystem.Drawing.Color%29> <xref:System.Drawing.Color.Black%2A?displayProperty=fullName>指定呈现图像外部的像素的颜色。</xref:System.Drawing.Color.Black%2A?displayProperty=fullName> 此颜色是可见的如果模式参数设置为<xref:System.Drawing.Drawing2D.WrapMode>和源矩形传递给<xref:System.Drawing.Graphics.DrawImage%2A>方法大于图像本身。</xref:System.Drawing.Graphics.DrawImage%2A> </xref:System.Drawing.Drawing2D.WrapMode>"
  example:
  - "The following code example is designed for use with Windows Forms, and it requires <xref:System.Windows.Forms.PaintEventArgs>`e`, which is a parameter of the <xref:System.Windows.Forms.Control.Paint> event handler. The code performs the following actions:  \n  \n1.  Opens an <xref:System.Drawing.Image> from the Circle3.jpg file (a small, red-filled circle) and draws it to the screen.  \n  \n2.  Creates an <xref:System.Drawing.Imaging.ImageAttributes> object and sets the <xref:System.Drawing.Drawing2D.WrapMode> enumeration to <xref:System.Drawing.Drawing2D.WrapMode>.  \n  \n3.  Creates a <xref:System.Drawing.TextureBrush> using the image from the Circle3.jpg file.  \n  \n4.  Draws a rectangle to the screen that is filled with the small, red-filled circles.  \n  \n [!code-cpp[System.Drawing.ClassicImaging.ImageAttributes#8](~/add/codesnippet/cpp/1dc37210-933f-4e57-8209-_1.cpp)]\n [!code-cs[System.Drawing.ClassicImaging.ImageAttributes#8](~/add/codesnippet/csharp/1dc37210-933f-4e57-8209-_1.cs)]\n [!code-vb[System.Drawing.ClassicImaging.ImageAttributes#8](~/add/codesnippet/visualbasic/1dc37210-933f-4e57-8209-_1.vb)]"
  syntax:
    content: public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode);
    parameters:
    - id: mode
      type: System.Drawing.Drawing2D.WrapMode
      description: "一个元素<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;> </xref> ，它指定如何重复的图像副本用于平铺区域。"
  overload: System.Drawing.Imaging.ImageAttributes.SetWrapMode*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)
  id: SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetWrapMode(WrapMode,Color)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode,Color)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode,Color)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置环绕模式和用于决定如何跨一个形状上，或到形状的边界平铺纹理的颜色。 当纹理小于它所填充的形状时填写某个形状上平铺纹理。"
  remarks: ''
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29> method.
  syntax:
    content: public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color);
    parameters:
    - id: mode
      type: System.Drawing.Drawing2D.WrapMode
      description: "一个元素<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;> </xref> ，它指定如何重复的图像副本用于平铺区域。"
    - id: color
      type: System.Drawing.Color
      description: "<xref href=&quot;System.Drawing.Imaging.ImageAttributes&quot;> </xref>对象，它指定呈现图像外部的像素的颜色。 此颜色是可见的如果模式参数设置为<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;></xref>和源矩形传递给<xref:System.Drawing.Graphics.DrawImage*>大于图像本身。</xref:System.Drawing.Graphics.DrawImage*>"
  overload: System.Drawing.Imaging.ImageAttributes.SetWrapMode*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)
  id: SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)
  parent: System.Drawing.Imaging.ImageAttributes
  langs:
  - csharp
  name: SetWrapMode(WrapMode,Color,Boolean)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode,Color,Boolean)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode,Color,Boolean)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing.Imaging
  summary: "设置环绕模式和用于决定如何跨一个形状上，或到形状的边界平铺纹理的颜色。 当纹理小于它所填充的形状时填写某个形状上平铺纹理。"
  remarks: ''
  example:
  - For a code example, see the <xref:System.Drawing.Imaging.ImageAttributes.SetWrapMode%28System.Drawing.Drawing2D.WrapMode%29> method.
  syntax:
    content: public void SetWrapMode (System.Drawing.Drawing2D.WrapMode mode, System.Drawing.Color color, bool clamp);
    parameters:
    - id: mode
      type: System.Drawing.Drawing2D.WrapMode
      description: "一个元素<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;> </xref> ，它指定如何重复的图像副本用于平铺区域。"
    - id: color
      type: System.Drawing.Color
      description: "一个 color 对象，指定呈现图像外部的像素的颜色。 此颜色是可见的如果模式参数设置为<xref href=&quot;System.Drawing.Drawing2D.WrapMode&quot;></xref>和源矩形传递给<xref:System.Drawing.Graphics.DrawImage*>大于图像本身。</xref:System.Drawing.Graphics.DrawImage*>"
    - id: clamp
      type: System.Boolean
      description: "此参数不起作用。 Set it to <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Drawing.Imaging.ImageAttributes.SetWrapMode*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Drawing.Imaging.ImageAttributes.#ctor
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ImageAttributes()
  nameWithType: ImageAttributes.ImageAttributes()
  fullName: System.Drawing.Imaging.ImageAttributes.ImageAttributes()
- uid: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearBrushRemapTable()
  nameWithType: ImageAttributes.ClearBrushRemapTable()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable()
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorKey()
  nameWithType: ImageAttributes.ClearColorKey()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorKey()
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorKey(ColorAdjustType)
  nameWithType: ImageAttributes.ClearColorKey(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorKey(ColorAdjustType)
- uid: System.Drawing.Imaging.ColorAdjustType
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorAdjustType
  nameWithType: ColorAdjustType
  fullName: System.Drawing.Imaging.ColorAdjustType
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorMatrix()
  nameWithType: ImageAttributes.ClearColorMatrix()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix()
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorMatrix(ColorAdjustType)
  nameWithType: ImageAttributes.ClearColorMatrix(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearGamma()
  nameWithType: ImageAttributes.ClearGamma()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearGamma()
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearGamma(ColorAdjustType)
  nameWithType: ImageAttributes.ClearGamma(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearGamma(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearNoOp()
  nameWithType: ImageAttributes.ClearNoOp()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearNoOp()
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearNoOp(ColorAdjustType)
  nameWithType: ImageAttributes.ClearNoOp(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearNoOp(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannel()
  nameWithType: ImageAttributes.ClearOutputChannel()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel()
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannel(ColorAdjustType)
  nameWithType: ImageAttributes.ClearOutputChannel(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannelColorProfile()
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile()
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannelColorProfile(ColorAdjustType)
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearRemapTable()
  nameWithType: ImageAttributes.ClearRemapTable()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearRemapTable()
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearRemapTable(ColorAdjustType)
  nameWithType: ImageAttributes.ClearRemapTable(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearRemapTable(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearThreshold()
  nameWithType: ImageAttributes.ClearThreshold()
  fullName: System.Drawing.Imaging.ImageAttributes.ClearThreshold()
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearThreshold(ColorAdjustType)
  nameWithType: ImageAttributes.ClearThreshold(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.ClearThreshold(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.Clone
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Clone()
  nameWithType: ImageAttributes.Clone()
  fullName: System.Drawing.Imaging.ImageAttributes.Clone()
- uid: System.Drawing.Imaging.ImageAttributes.Dispose
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Dispose()
  nameWithType: ImageAttributes.Dispose()
  fullName: System.Drawing.Imaging.ImageAttributes.Dispose()
- uid: System.Drawing.Imaging.ImageAttributes.Finalize
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Finalize()
  nameWithType: ImageAttributes.Finalize()
  fullName: System.Drawing.Imaging.ImageAttributes.Finalize()
- uid: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(System.Drawing.Imaging.ColorPalette,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: GetAdjustedPalette(ColorPalette,ColorAdjustType)
  nameWithType: ImageAttributes.GetAdjustedPalette(ColorPalette,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette(ColorPalette,ColorAdjustType)
- uid: System.Drawing.Imaging.ColorPalette
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorPalette
  nameWithType: ColorPalette
  fullName: System.Drawing.Imaging.ColorPalette
- uid: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(System.Drawing.Imaging.ColorMap[])
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetBrushRemapTable(ColorMap[])
  nameWithType: ImageAttributes.SetBrushRemapTable(ColorMap[])
  fullName: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable(ColorMap[])
- uid: System.Drawing.Imaging.ColorMap[]
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorMap
  nameWithType: ColorMap
  fullName: System.Drawing.Imaging.ColorMap[]
  spec.csharp:
  - uid: System.Drawing.Imaging.ColorMap
    name: ColorMap
    nameWithType: ColorMap
    fullName: ColorMap[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorKey(Color,Color)
  nameWithType: ImageAttributes.SetColorKey(Color,Color)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorKey(Color,Color)
- uid: System.Drawing.Color
  parent: System.Drawing
  isExternal: false
  name: Color
  nameWithType: Color
  fullName: System.Drawing.Color
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey(System.Drawing.Color,System.Drawing.Color,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorKey(Color,Color,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorKey(Color,Color,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorKey(Color,Color,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrices(ColorMatrix,ColorMatrix)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix)
- uid: System.Drawing.Imaging.ColorMatrix
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorMatrix
  nameWithType: ColorMatrix
  fullName: System.Drawing.Imaging.ColorMatrix
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag)
- uid: System.Drawing.Imaging.ColorMatrixFlag
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorMatrixFlag
  nameWithType: ColorMatrixFlag
  fullName: System.Drawing.Imaging.ColorMatrixFlag
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrices(ColorMatrix,ColorMatrix,ColorMatrixFlag,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrix(ColorMatrix)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix)
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag)
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(System.Drawing.Imaging.ColorMatrix,System.Drawing.Imaging.ColorMatrixFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetColorMatrix(ColorMatrix,ColorMatrixFlag,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetGamma(Single)
  nameWithType: ImageAttributes.SetGamma(Single)
  fullName: System.Drawing.Imaging.ImageAttributes.SetGamma(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma(System.Single,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetGamma(Single,ColorAdjustType)
  nameWithType: ImageAttributes.SetGamma(Single,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetGamma(Single,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetNoOp()
  nameWithType: ImageAttributes.SetNoOp()
  fullName: System.Drawing.Imaging.ImageAttributes.SetNoOp()
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp(System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetNoOp(ColorAdjustType)
  nameWithType: ImageAttributes.SetNoOp(ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetNoOp(ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannel(ColorChannelFlag)
  nameWithType: ImageAttributes.SetOutputChannel(ColorChannelFlag)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(ColorChannelFlag)
- uid: System.Drawing.Imaging.ColorChannelFlag
  parent: System.Drawing.Imaging
  isExternal: false
  name: ColorChannelFlag
  nameWithType: ColorChannelFlag
  fullName: System.Drawing.Imaging.ColorChannelFlag
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(System.Drawing.Imaging.ColorChannelFlag,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  nameWithType: ImageAttributes.SetOutputChannel(ColorChannelFlag,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannel(ColorChannelFlag,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannelColorProfile(String)
  nameWithType: ImageAttributes.SetOutputChannelColorProfile(String)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(System.String,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannelColorProfile(String,ColorAdjustType)
  nameWithType: ImageAttributes.SetOutputChannelColorProfile(String,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile(String,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[])
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetRemapTable(ColorMap[])
  nameWithType: ImageAttributes.SetRemapTable(ColorMap[])
  fullName: System.Drawing.Imaging.ImageAttributes.SetRemapTable(ColorMap[])
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable(System.Drawing.Imaging.ColorMap[],System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetRemapTable(ColorMap[],ColorAdjustType)
  nameWithType: ImageAttributes.SetRemapTable(ColorMap[],ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetRemapTable(ColorMap[],ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetThreshold(Single)
  nameWithType: ImageAttributes.SetThreshold(Single)
  fullName: System.Drawing.Imaging.ImageAttributes.SetThreshold(Single)
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold(System.Single,System.Drawing.Imaging.ColorAdjustType)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetThreshold(Single,ColorAdjustType)
  nameWithType: ImageAttributes.SetThreshold(Single,ColorAdjustType)
  fullName: System.Drawing.Imaging.ImageAttributes.SetThreshold(Single,ColorAdjustType)
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetWrapMode(WrapMode)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode)
- uid: System.Drawing.Drawing2D.WrapMode
  parent: System.Drawing.Drawing2D
  isExternal: false
  name: WrapMode
  nameWithType: WrapMode
  fullName: System.Drawing.Drawing2D.WrapMode
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetWrapMode(WrapMode,Color)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode,Color)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode,Color)
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode(System.Drawing.Drawing2D.WrapMode,System.Drawing.Color,System.Boolean)
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetWrapMode(WrapMode,Color,Boolean)
  nameWithType: ImageAttributes.SetWrapMode(WrapMode,Color,Boolean)
  fullName: System.Drawing.Imaging.ImageAttributes.SetWrapMode(WrapMode,Color,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Drawing.Imaging.ImageAttributes.#ctor*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ImageAttributes
  nameWithType: ImageAttributes.ImageAttributes
- uid: System.Drawing.Imaging.ImageAttributes.ClearBrushRemapTable*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearBrushRemapTable
  nameWithType: ImageAttributes.ClearBrushRemapTable
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorKey*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorKey
  nameWithType: ImageAttributes.ClearColorKey
- uid: System.Drawing.Imaging.ImageAttributes.ClearColorMatrix*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearColorMatrix
  nameWithType: ImageAttributes.ClearColorMatrix
- uid: System.Drawing.Imaging.ImageAttributes.ClearGamma*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearGamma
  nameWithType: ImageAttributes.ClearGamma
- uid: System.Drawing.Imaging.ImageAttributes.ClearNoOp*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearNoOp
  nameWithType: ImageAttributes.ClearNoOp
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannel*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannel
  nameWithType: ImageAttributes.ClearOutputChannel
- uid: System.Drawing.Imaging.ImageAttributes.ClearOutputChannelColorProfile*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearOutputChannelColorProfile
  nameWithType: ImageAttributes.ClearOutputChannelColorProfile
- uid: System.Drawing.Imaging.ImageAttributes.ClearRemapTable*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearRemapTable
  nameWithType: ImageAttributes.ClearRemapTable
- uid: System.Drawing.Imaging.ImageAttributes.ClearThreshold*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: ClearThreshold
  nameWithType: ImageAttributes.ClearThreshold
- uid: System.Drawing.Imaging.ImageAttributes.Clone*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Clone
  nameWithType: ImageAttributes.Clone
- uid: System.Drawing.Imaging.ImageAttributes.Dispose*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Dispose
  nameWithType: ImageAttributes.Dispose
- uid: System.Drawing.Imaging.ImageAttributes.Finalize*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: Finalize
  nameWithType: ImageAttributes.Finalize
- uid: System.Drawing.Imaging.ImageAttributes.GetAdjustedPalette*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: GetAdjustedPalette
  nameWithType: ImageAttributes.GetAdjustedPalette
- uid: System.Drawing.Imaging.ImageAttributes.SetBrushRemapTable*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetBrushRemapTable
  nameWithType: ImageAttributes.SetBrushRemapTable
- uid: System.Drawing.Imaging.ImageAttributes.SetColorKey*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorKey
  nameWithType: ImageAttributes.SetColorKey
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrices*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrices
  nameWithType: ImageAttributes.SetColorMatrices
- uid: System.Drawing.Imaging.ImageAttributes.SetColorMatrix*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetColorMatrix
  nameWithType: ImageAttributes.SetColorMatrix
- uid: System.Drawing.Imaging.ImageAttributes.SetGamma*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetGamma
  nameWithType: ImageAttributes.SetGamma
- uid: System.Drawing.Imaging.ImageAttributes.SetNoOp*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetNoOp
  nameWithType: ImageAttributes.SetNoOp
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannel*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannel
  nameWithType: ImageAttributes.SetOutputChannel
- uid: System.Drawing.Imaging.ImageAttributes.SetOutputChannelColorProfile*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetOutputChannelColorProfile
  nameWithType: ImageAttributes.SetOutputChannelColorProfile
- uid: System.Drawing.Imaging.ImageAttributes.SetRemapTable*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetRemapTable
  nameWithType: ImageAttributes.SetRemapTable
- uid: System.Drawing.Imaging.ImageAttributes.SetThreshold*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetThreshold
  nameWithType: ImageAttributes.SetThreshold
- uid: System.Drawing.Imaging.ImageAttributes.SetWrapMode*
  parent: System.Drawing.Imaging.ImageAttributes
  isExternal: false
  name: SetWrapMode
  nameWithType: ImageAttributes.SetWrapMode
