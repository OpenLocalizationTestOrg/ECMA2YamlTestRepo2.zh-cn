### YamlMime:ManagedReference
items:
- uid: System.Runtime.InteropServices.ICustomMarshaler
  id: ICustomMarshaler
  children:
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  - System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  - System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  langs:
  - csharp
  name: ICustomMarshaler
  nameWithType: ICustomMarshaler
  fullName: System.Runtime.InteropServices.ICustomMarshaler
  type: Interface
  summary: "提供用于处理方法调用的自定义包装。"
  remarks: "封送处理程序提供的功能的旧和新的接口之间的桥梁。 自定义封送处理提供了以下好处:-它使客户端应用程序被设计为可与旧接口以实现新接口的服务器与一同使用。      -它使客户端生成的应用程序可以使用新接口用于实现旧接口的服务器。       如果你有一个接口，这带来了不同的封送处理行为或以不同的方式公开到组件对象模型 (COM)，你可以设计而不是使用互操作封送处理程序自定义封送处理程序。 通过使用自定义封送处理程序，你可以尽量减少新的.NET Framework 组件和现有的 COM 组件之间的区别。       例如，假设你正在开发的托管的接口名`INew`。 当通过标准的 COM 可调用包装 (CCW) 情况下，向 COM 公开此接口时，它与托管接口具有相同的方法，并使用互操作封送处理程序中内置的封送处理规则。 现在，假设的已知 COM 接口调用`IOld`已经提供了与相同的功能`INew`接口。 通过设计时自定义封送处理程序，你可以提供的非托管的实现`IOld`，只需将调用委托给的托管实现`INew`接口。 因此，自定义封送处理程序作为托管和非托管接口之间的桥梁。      1> [!NOTE]&1;> 调用从托管到非托管代码仅支持调度的接口上的代码时，不会调用自定义封。      ## 定义封送处理类型之前可以生成自定义封送处理程序，你必须定义将被封送托管和非托管接口。 通常，这些接口执行相同的功能，但以不同的方式公开给托管和非托管对象。       托管的编译器生成的元数据，从托管的接口，并生成接口看起来像任何其他托管的接口。 下面的示例演示一个典型的接口。       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/cpp/t-system.runtime.interop_8_1.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/csharp/t-system.runtime.interop_8_1.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_1.vb) ]定义在接口定义语言 (IDL) 的非托管的类型和使用 Microsoft 接口定义语言 (MIDL) 编译器进行编译。     你的库语句中定义该接口，并将其分配使用通用唯一标识符 (UUID) 属性的接口 ID，如以下示例所示。      ```    [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library OldLib {        [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]        interface IOld : IUnknown            HRESULT OldMethod();   }   ```MIDL 编译器将产生多个输出文件。 如果接口在 Old.idl 中定义的定义输出文件 Old_i.c`const`变量与接口标识符 (IID) 的接口，如以下示例所示。      ```   const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};   ```Midl，也会产生 Old.h 文件。 它包含可以在 c + + 源代码中包括的接口的 c + + 定义。      ## 实现 ICustomMarshaler 接口你自定义封送处理程序必须实现 ICustomMarshaler 接口可提供向运行时相应的包装。       下面的 C# 代码显示由所有自定义封必须实现的基接口。       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/cpp/t-system.runtime.interop_8_2.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/csharp/t-system.runtime.interop_8_2.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_2.vb) ] ICustomMarshaler 接口包含提供转换支持、 清理支持以及有关数据要封送处理信息的方法。          |类型的操作 |ICustomMarshaler 方法 |说明 |  |-----------------------|-----------------------------|-----------------|  |（从本机托管代码） 的转换 |<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|将指向本机数据的封送到托管对象。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> 此方法返回的自定义运行时可调用包装 (RCW)，但可以封送作为参数传递的非托管的接口。 封送处理程序应返回该类型的自定义 RCW 的实例。 |  |（从托管到本机代码） 的转换 |<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|将托管的对象封送到本机数据的指针。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> 此方法返回的自定义 COM 可调用包装 (CCW) 可以封送作为参数传递的托管的接口。 封送处理程序应返回该类型的自定义的 CCW 的实例。 |  |清理 （的本机代码） |<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|使封送处理程序以进行清除<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法返回的本机数据 (CCW)。 |  |清理 （的托管代码） |<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|使封送处理程序以进行清除<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法返回的托管数据 (RCW)。 |  |（有关本机代码） 的信息 |<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|返回要封送处理的非托管数据的大小。 |     # # # 转换<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName>将指向本机数据的封送到托管对象。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A> 此方法返回的自定义运行时可调用包装 (RCW)，但可以封送作为参数传递的非托管的接口。 封送处理程序应返回该类型的自定义 RCW 的实例。       <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName>将托管的对象封送到本机数据的指针。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=fullName> 此方法返回的自定义 COM 可调用包装 (CCW) 可以封送作为参数传递的托管的接口。 封送处理程序应返回该类型的自定义的 CCW 的实例。      ### 清理<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>使封送处理程序以进行本机数据 (CCW) 返回的清除<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>方法。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=fullName>       <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>使该封送处理清理返回托管数据 (RCW)<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>方法。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A></xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=fullName>      ### 大小信息<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>返回要封送处理的非托管数据的大小。</xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=fullName>      ## 实现除了实现 ICustomMarshaler 接口 GetInstance 方法，必须实现自定义封`static`调用方法`GetInstance`接受<xref:System.String>作为参数并具有返回类型为 ICustomMarshaler。</xref:System.String> 这`static`由公共语言运行时的 COM 互操作层，若要实例化自定义封送处理程序的实例调用方法。 字符串传递给`GetInstance`是该方法可用于自定义返回自定义封送处理程序 cookie。      ```   static ICustomMarshaler *GetInstance(String *pstrCookie);   ```# # 将应用于 MarshalAsAttribute 使用自定义封送处理程序，你必须将应用<xref:System.Runtime.InteropServices.MarshalAsAttribute>属性设为的参数或字段的正封送。</xref:System.Runtime.InteropServices.MarshalAsAttribute>       你还必须传递<xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>枚举值到<xref:System.Runtime.InteropServices.MarshalAsAttribute>构造函数。</xref:System.Runtime.InteropServices.MarshalAsAttribute> </xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> 此外，还必须指定<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>字段的命名参数，则下列选项之一:- <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>（必需）︰ 自定义封送处理程序的程序集限定名称。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> </xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 名称应包含的命名空间和类的自定义封送处理程序。 如果在使用中的程序集未定义自定义封送处理程序，必须指定在其中定义程序集的名称。          1> [!NOTE]&1;> 可以使用<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>字段而不是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>字段。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> </xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>将可以更轻松地指定的类型。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>      - <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie>（可选）︰ 传递给自定义封送处理程序的 cookie。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> Cookie 可用于向封送处理程序中提供的其他信息。 例如，如果同一封送处理程序用于提供大量的包装，cookie 将标识特定的包装。 Cookie 传递给`GetInstance`封送处理程序方法。       <xref:System.Runtime.InteropServices.MarshalAsAttribute>特性标识自定义封送处理程序，使其可以激活适当的包装。</xref:System.Runtime.InteropServices.MarshalAsAttribute> 然后，公共语言运行时的互操作服务检查该属性，并创建要封送处理的自变量 （参数或字段） 需求的自定义封送处理程序的第一个时间。       然后，运行时调用<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>和<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>上激活正确的包装，以处理调用自定义封送处理程序的方法。</xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> </xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>      ## 使用自定义封送处理程序时自定义封送处理程序已完成，你可以将其用作自定义包装为特定类型。 下面的示例演示的定义`IUserData`托管的接口︰ [!code-cpp [System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/cpp/t-system.runtime.interop_8_3.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/csharp/t-system.runtime.interop_8_3.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_3.vb) ]在以下示例中，`IUserData`接口使用`NewOldMarshaler`自定义封送处理程序以启用非托管客户端应用程序传递`IOld`接口`DoSomeStuff`方法。     托管的说明`DoSomeStuff`方法采用`INew`接口，如前面的示例中所示，而非托管的版本的`DoSomeStuff`采用`IOld`的接口指针，如下面的示例中所示。      ```   [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]   library UserLib {        [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]        interface IUserData : IUnknown            HRESULT DoSomeStuff(IUnknown* pIOld);   }   ```通过导出的托管的定义生成的类型库`IUserData`而不是标准定义此示例中所示的非托管定义。 <xref:System.Runtime.InteropServices.MarshalAsAttribute>应用于属性`INew`自变量中的托管定义`DoSomeStuff`方法指示的参数使用了自定义封送处理程序，如以下示例所示。</xref:System.Runtime.InteropServices.MarshalAsAttribute>       [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/cpp/t-system.runtime.interop_8_4.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/csharp/t-system.runtime.interop_8_4.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_4.vb)][!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/cpp/t-system.runtime.interop_8_5.cpp)][!code-cs[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/csharp/t-system.runtime.interop_8_5.cs)][!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/add/codesnippet/visualbasic/t-system.runtime.interop_8_5.vb) ]在前面的示例中，第一个参数提供给<xref:System.Runtime.InteropServices.MarshalAsAttribute>属性是<xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName>枚举值`UnmanagedType.CustomMarshaler`。</xref:System.Runtime.InteropServices.UnmanagedType?displayProperty=fullName> </xref:System.Runtime.InteropServices.MarshalAsAttribute>                      第二个参数是<xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>字段，它提供的自定义封送处理程序的程序集限定名称。</xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> 此名称组成的命名空间和类的自定义封送处理程序 (`MarshalType=&quot;MyCompany.NewOldMarshaler&quot;`)。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ICustomMarshaler
  implements: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  id: CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "当不再需要将执行必要的托管数据的清理。"
  syntax:
    content: public void CleanUpManagedData (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "要销毁的托管的对象。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  id: CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "当不再需要将执行必要的非托管数据的清理。"
  syntax:
    content: public void CleanUpNativeData (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "指向要销毁的非托管数据的指针。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  id: GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "返回要封送本机数据的大小。"
  syntax:
    content: public int GetNativeDataSize ();
    parameters: []
    return:
      type: System.Int32
      description: "以字节为单位，本机数据的大小。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  id: MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "将托管的数据转换为非托管数据。"
  syntax:
    content: public IntPtr MarshalManagedToNative (object ManagedObj);
    parameters:
    - id: ManagedObj
      type: System.Object
      description: "要转换的托管的对象。"
    return:
      type: System.IntPtr
      description: "指向托管对象的 COM 视图的指针。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  id: MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  langs:
  - csharp
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.InteropServices
  summary: "将非托管的数据转换为托管的数据。"
  syntax:
    content: public object MarshalNativeToManaged (IntPtr pNativeData);
    parameters:
    - id: pNativeData
      type: System.IntPtr
      description: "指向要包装的非托管数据的指针。"
    return:
      type: System.Object
      description: "一个表示 COM 数据的托管的视图的对象。"
  overload: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData(Object)
  nameWithType: ICustomMarshaler.CleanUpManagedData(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData(IntPtr)
  nameWithType: ICustomMarshaler.CleanUpNativeData(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize()
  nameWithType: ICustomMarshaler.GetNativeDataSize()
  fullName: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative(Object)
  nameWithType: ICustomMarshaler.MarshalManagedToNative(Object)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(Object)
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged(IntPtr)
  nameWithType: ICustomMarshaler.MarshalNativeToManaged(IntPtr)
  fullName: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(IntPtr)
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpManagedData
  nameWithType: ICustomMarshaler.CleanUpManagedData
- uid: System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: CleanUpNativeData
  nameWithType: ICustomMarshaler.CleanUpNativeData
- uid: System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: GetNativeDataSize
  nameWithType: ICustomMarshaler.GetNativeDataSize
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalManagedToNative
  nameWithType: ICustomMarshaler.MarshalManagedToNative
- uid: System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged*
  parent: System.Runtime.InteropServices.ICustomMarshaler
  isExternal: false
  name: MarshalNativeToManaged
  nameWithType: ICustomMarshaler.MarshalNativeToManaged
