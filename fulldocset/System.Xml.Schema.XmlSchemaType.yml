### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.XmlSchemaType
  id: XmlSchemaType
  children:
  - System.Xml.Schema.XmlSchemaType.#ctor
  - System.Xml.Schema.XmlSchemaType.BaseSchemaType
  - System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType
  - System.Xml.Schema.XmlSchemaType.Datatype
  - System.Xml.Schema.XmlSchemaType.DerivedBy
  - System.Xml.Schema.XmlSchemaType.Final
  - System.Xml.Schema.XmlSchemaType.FinalResolved
  - System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)
  - System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)
  - System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)
  - System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)
  - System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)
  - System.Xml.Schema.XmlSchemaType.IsMixed
  - System.Xml.Schema.XmlSchemaType.Name
  - System.Xml.Schema.XmlSchemaType.QualifiedName
  - System.Xml.Schema.XmlSchemaType.TypeCode
  langs:
  - csharp
  name: XmlSchemaType
  nameWithType: XmlSchemaType
  fullName: System.Xml.Schema.XmlSchemaType
  type: Class
  summary: "所有简单类型和复杂类型的基类。"
  remarks: ''
  example:
  - See the <xref:System.Xml.Schema.XmlSchemaSimpleType> class and the <xref:System.Xml.Schema.XmlSchemaComplexType> class for an example using this class.
  syntax:
    content: 'public class XmlSchemaType : System.Xml.Schema.XmlSchemaAnnotated'
  inheritance:
  - System.Object
  - System.Xml.Schema.XmlSchemaObject
  - System.Xml.Schema.XmlSchemaAnnotated
  implements: []
  inheritedMembers:
  - System.Xml.Schema.XmlSchemaAnnotated.Annotation
  - System.Xml.Schema.XmlSchemaAnnotated.Id
  - System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes
  - System.Xml.Schema.XmlSchemaObject.LineNumber
  - System.Xml.Schema.XmlSchemaObject.LinePosition
  - System.Xml.Schema.XmlSchemaObject.Namespaces
  - System.Xml.Schema.XmlSchemaObject.Parent
  - System.Xml.Schema.XmlSchemaObject.SourceUri
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.#ctor
  id: '#ctor'
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: XmlSchemaType()
  nameWithType: XmlSchemaType.XmlSchemaType()
  fullName: System.Xml.Schema.XmlSchemaType.XmlSchemaType()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新实例<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;></xref>类。"
  syntax:
    content: public XmlSchemaType ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaType.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.BaseSchemaType
  id: BaseSchemaType
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: BaseSchemaType
  nameWithType: XmlSchemaType.BaseSchemaType
  fullName: System.Xml.Schema.XmlSchemaType.BaseSchemaType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取编译后对象类型或内置 XML 架构定义语言 (XSD) 数据类型、 simpleType 元素或 complexType 元素。 这是后架构编译信息集属性。"
  remarks: "该复杂类型被派生自基值指定的类型。 基础值必须是 QName。      1> [!IMPORTANT]&1;> BaseSchemaType 属性已过时，并已替换为<xref:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType%2A>属性。</xref:System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType%2A>"
  syntax:
    content: public object BaseSchemaType { get; }
    return:
      type: System.Object
      description: "内置 XSD 数据类型、 simpleType 元素或 complexType 元素。"
  overload: System.Xml.Schema.XmlSchemaType.BaseSchemaType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType
  id: BaseXmlSchemaType
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: BaseXmlSchemaType
  nameWithType: XmlSchemaType.BaseXmlSchemaType
  fullName: System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取此架构类型的基类型编译后值。"
  remarks: "BaseXmlSchemaType 属性始终具有一个值，因为所有架构类型都具有基类型。 在架构编译，使其架构编译信息集的一部分时设置此值。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaType BaseXmlSchemaType { get; }
    return:
      type: System.Xml.Schema.XmlSchemaType
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;> </xref>对象，表示此架构类型的基类型。"
  overload: System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.Datatype
  id: Datatype
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: Datatype
  nameWithType: XmlSchemaType.Datatype
  fullName: System.Xml.Schema.XmlSchemaType.Datatype
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取复杂类型的数据类型编译后值。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaDatatype Datatype { get; }
    return:
      type: System.Xml.Schema.XmlSchemaDatatype
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaDatatype&quot;> </xref>架构编译后值。"
  overload: System.Xml.Schema.XmlSchemaType.Datatype*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.DerivedBy
  id: DerivedBy
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: DerivedBy
  nameWithType: XmlSchemaType.DerivedBy
  fullName: System.Xml.Schema.XmlSchemaType.DerivedBy
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取此元素已从其基类型派生的方式的编译后信息。"
  remarks: "下表显示了此属性可包含的值。      |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>值 |说明 |  |----------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|指定任何派生方法。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过替换派生。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过扩展而派生。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过限制派生。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|派生的列表。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|由联合派生。 |</xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaDerivationMethod DerivedBy { get; }
    return:
      type: System.Xml.Schema.XmlSchemaDerivationMethod
      description: "一个有效<xref href=&quot;System.Xml.Schema.XmlSchemaDerivationMethod&quot;></xref>值。"
  overload: System.Xml.Schema.XmlSchemaType.DerivedBy*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.Final
  id: Final
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: Final
  nameWithType: XmlSchemaType.Final
  fullName: System.Xml.Schema.XmlSchemaType.Final
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置指示是否允许进一步派生的类型派生的最后一个属性。"
  remarks: "下表显示的值，此属性可以包含简单类型。      |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>值 |说明 |  |----------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|重写架构`blockDefault`设置，允许通过限制、 扩展或替换进行任何进行派生。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|不指定任何派生方法。</xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> 这是默认值。 派生规则，将从架构 blockDefault 设置。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过替换派生的类型不能替换。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过扩展而派生的类型不能替换。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过限制派生的类型不能替换。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|`#all`.</xref:System.Xml.Schema.XmlSchemaDerivationMethod></xref:System.Xml.Schema.XmlSchemaDerivationMethod></xref:System.Xml.Schema.XmlSchemaDerivationMethod></xref:System.Xml.Schema.XmlSchemaDerivationMethod> 通过任何派生方法派生的类型不能替换。 |      下表显示了此属性可包含复杂类型的值。      |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>值 |说明 |  |----------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------|  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|重写架构`blockDefault`设置，允许通过限制、 扩展或替换进行任何进行派生。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|不指定任何派生方法。</xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> </xref:System.Xml.Schema.XmlSchemaDerivationMethod> 这是默认值。 派生规则会从架构`blockDefault`设置。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过替换派生的类型不能替换。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过扩展而派生的类型不能替换。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|通过限制派生的类型不能替换。 |  |<xref:System.Xml.Schema.XmlSchemaDerivationMethod>|`#all`.</xref:System.Xml.Schema.XmlSchemaDerivationMethod></xref:System.Xml.Schema.XmlSchemaDerivationMethod></xref:System.Xml.Schema.XmlSchemaDerivationMethod></xref:System.Xml.Schema.XmlSchemaDerivationMethod> 通过任何派生方法派生的类型不能替换。 |"
  syntax:
    content: public System.Xml.Schema.XmlSchemaDerivationMethod Final { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaDerivationMethod
      description: "一个有效<xref href=&quot;System.Xml.Schema.XmlSchemaDerivationMethod&quot;></xref>值。 默认值是<xref href=&quot;System.Xml.Schema.XmlSchemaDerivationMethod&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaType.Final*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.FinalResolved
  id: FinalResolved
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: FinalResolved
  nameWithType: XmlSchemaType.FinalResolved
  fullName: System.Xml.Schema.XmlSchemaType.FinalResolved
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取的编译后值<xref:System.Xml.Schema.XmlSchemaType.Final*>属性。</xref:System.Xml.Schema.XmlSchemaType.Final*>"
  remarks: "此值指示如何的类型是受限制类型扩展通过限制时。 如果类型标记为`final`，此类型不能进行扩展。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaDerivationMethod FinalResolved { get; }
    return:
      type: System.Xml.Schema.XmlSchemaDerivationMethod
      description: "编译后值的<xref:System.Xml.Schema.XmlSchemaType.Final*>属性。</xref:System.Xml.Schema.XmlSchemaType.Final*> 默认值是<xref uid=&quot;langword_csharp_finalDefault&quot; name=&quot;finalDefault&quot; href=&quot;&quot;></xref>属性的值<xref uid=&quot;langword_csharp_schema&quot; name=&quot;schema&quot; href=&quot;&quot;></xref>元素。"
  overload: System.Xml.Schema.XmlSchemaType.FinalResolved*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)
  id: GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: GetBuiltInComplexType(XmlTypeCode)
  nameWithType: XmlSchemaType.GetBuiltInComplexType(XmlTypeCode)
  fullName: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(XmlTypeCode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回<xref href=&quot;System.Xml.Schema.XmlSchemaComplexType&quot;> </xref> ，它表示指定的复杂类型的内置复杂类型。"
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetBuiltInComplexType (System.Xml.Schema.XmlTypeCode typeCode);
    parameters:
    - id: typeCode
      type: System.Xml.Schema.XmlTypeCode
      description: "之一<xref href=&quot;System.Xml.Schema.XmlTypeCode&quot;></xref>表示复杂类型的值。"
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaComplexType&quot;> </xref>表示内置的复杂类型。"
  overload: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)
  id: GetBuiltInComplexType(System.Xml.XmlQualifiedName)
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: GetBuiltInComplexType(XmlQualifiedName)
  nameWithType: XmlSchemaType.GetBuiltInComplexType(XmlQualifiedName)
  fullName: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(XmlQualifiedName)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回<xref href=&quot;System.Xml.Schema.XmlSchemaComplexType&quot;></xref>表示内置的复杂类型的限定名称由指定的复杂类型。"
  syntax:
    content: public static System.Xml.Schema.XmlSchemaComplexType GetBuiltInComplexType (System.Xml.XmlQualifiedName qualifiedName);
    parameters:
    - id: qualifiedName
      type: System.Xml.XmlQualifiedName
      description: "<xref:System.Xml.XmlQualifiedName>的复杂类型。</xref:System.Xml.XmlQualifiedName>"
    return:
      type: System.Xml.Schema.XmlSchemaComplexType
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaComplexType&quot;> </xref>表示内置的复杂类型。"
  overload: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlQualifiedName>参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlQualifiedName>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)
  id: GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: GetBuiltInSimpleType(XmlTypeCode)
  nameWithType: XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode)
  fullName: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回<xref href=&quot;System.Xml.Schema.XmlSchemaSimpleType&quot;> </xref> ，它表示指定的简单类型的内置简单类型。"
  remarks: "你无法直接序列化的内置类型。 如果需要序列化的类型，创建派生自的内置类型的新简单类型和序列化的简单类型。"
  example:
  - "The following example shows how to create the type and add it to the schema.  \n  \n [!code-vb[XmlSchemaType#1](~/add/codesnippet/visualbasic/9673f94d-cae3-4f8a-93ad-_1.vb)]\n [!code-cs[XmlSchemaType#1](~/add/codesnippet/csharp/9673f94d-cae3-4f8a-93ad-_1.cs)]"
  syntax:
    content: public static System.Xml.Schema.XmlSchemaSimpleType GetBuiltInSimpleType (System.Xml.Schema.XmlTypeCode typeCode);
    parameters:
    - id: typeCode
      type: System.Xml.Schema.XmlTypeCode
      description: "之一<xref href=&quot;System.Xml.Schema.XmlTypeCode&quot;></xref>表示的简单类型的值。"
    return:
      type: System.Xml.Schema.XmlSchemaSimpleType
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSimpleType&quot;> </xref>表示内置简单类型。"
  overload: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)
  id: GetBuiltInSimpleType(System.Xml.XmlQualifiedName)
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: GetBuiltInSimpleType(XmlQualifiedName)
  nameWithType: XmlSchemaType.GetBuiltInSimpleType(XmlQualifiedName)
  fullName: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(XmlQualifiedName)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回<xref href=&quot;System.Xml.Schema.XmlSchemaSimpleType&quot;> </xref> ，它表示由限定的名称指定的简单类型的内置简单类型。"
  remarks: "你无法直接序列化的内置类型。 如果需要序列化的类型，创建派生自的内置类型的新简单类型和序列化的简单类型。"
  example:
  - "The following example shows how to create the type and add it to the schema.  \n  \n [!code-vb[XmlSchemaType#1](~/add/codesnippet/visualbasic/ef089bf4-b246-469c-b6a4-_1.vb)]\n [!code-cs[XmlSchemaType#1](~/add/codesnippet/csharp/ef089bf4-b246-469c-b6a4-_1.cs)]"
  syntax:
    content: public static System.Xml.Schema.XmlSchemaSimpleType GetBuiltInSimpleType (System.Xml.XmlQualifiedName qualifiedName);
    parameters:
    - id: qualifiedName
      type: System.Xml.XmlQualifiedName
      description: "<xref:System.Xml.XmlQualifiedName>的简单类型。</xref:System.Xml.XmlQualifiedName>"
    return:
      type: System.Xml.Schema.XmlSchemaSimpleType
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSimpleType&quot;> </xref>表示内置简单类型。"
  overload: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlQualifiedName>参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlQualifiedName>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)
  id: IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: IsDerivedFrom(XmlSchemaType,XmlSchemaType,XmlSchemaDerivationMethod)
  nameWithType: XmlSchemaType.IsDerivedFrom(XmlSchemaType,XmlSchemaType,XmlSchemaDerivationMethod)
  fullName: System.Xml.Schema.XmlSchemaType.IsDerivedFrom(XmlSchemaType,XmlSchemaType,XmlSchemaDerivationMethod)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回一个值，该值指示是否指定的派生的架构类型派生自指定的基本架构类型"
  remarks: ''
  example:
  - "The following is an example of the IsDerivedFrom method.  \n  \n```c#  \nXmlSchemaType xsdInteger = XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer);  \nXmlSchemaType xsdPositiveInteger = XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger);  \n  \n// true  \nConsole.WriteLine(XmlSchemaType.IsDerivedFrom(xsdPositiveInteger, xsdInteger, XmlSchemaDerivationMethod.None));  \n  \n// false  \nConsole.WriteLine(XmlSchemaType.IsDerivedFrom(xsdPositiveInteger, xsdInteger, XmlSchemaDerivationMethod.Restriction));  \n```  \n  \n```vb#  \nDim xsdInteger As XmlSchemaType = XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.Integer)  \nDim xsdPositiveInteger As XmlSchemaType = XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode.PositiveInteger)  \n  \n' True  \nConsole.WriteLine(XmlSchemaType.IsDerivedFrom(xsdPositiveInteger, xsdInteger, XmlSchemaDerivationMethod.None))  \n  \n' False  \nConsole.WriteLine(XmlSchemaType.IsDerivedFrom(xsdPositiveInteger, xsdInteger, XmlSchemaDerivationMethod.Restriction))  \n```"
  syntax:
    content: public static bool IsDerivedFrom (System.Xml.Schema.XmlSchemaType derivedType, System.Xml.Schema.XmlSchemaType baseType, System.Xml.Schema.XmlSchemaDerivationMethod except);
    parameters:
    - id: derivedType
      type: System.Xml.Schema.XmlSchemaType
      description: "派生<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;></xref>测试。"
    - id: baseType
      type: System.Xml.Schema.XmlSchemaType
      description: "基<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;></xref>测试派生<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;></xref>针对。"
    - id: except
      type: System.Xml.Schema.XmlSchemaDerivationMethod
      description: "之一<xref href=&quot;System.Xml.Schema.XmlSchemaDerivationMethod&quot;></xref>表示要从测试中排除的类型派生方法的值。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果派生的类型派生自基类型;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaType.IsDerivedFrom*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.IsMixed
  id: IsMixed
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: IsMixed
  nameWithType: XmlSchemaType.IsMixed
  fullName: System.Xml.Schema.XmlSchemaType.IsMixed
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置一个值，该值指示此类型是否具有混合内容模型。 此属性才是有效的复杂类型中。"
  remarks: "此虚方法是在派生类中重写。"
  syntax:
    content: public virtual bool IsMixed { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该类型具有混合内容模型;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaType.IsMixed*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.Name
  id: Name
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: Name
  nameWithType: XmlSchemaType.Name
  fullName: System.Xml.Schema.XmlSchemaType.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置类型的名称。"
  remarks: "World Wide Web Consortium (W3C) XML 命名空间规范中定义，名称必须是无冒号名称 (NCName)。 如果指定，名称必须是唯一的而所有`simpleType`和`complexType`元素。"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "类型的名称。"
  overload: System.Xml.Schema.XmlSchemaType.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.QualifiedName
  id: QualifiedName
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: QualifiedName
  nameWithType: XmlSchemaType.QualifiedName
  fullName: System.Xml.Schema.XmlSchemaType.QualifiedName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取从生成的类型的完全限定的名称<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref>此类型的属性。 这是后架构编译属性。"
  syntax:
    content: public System.Xml.XmlQualifiedName QualifiedName { get; }
    return:
      type: System.Xml.XmlQualifiedName
      description: "<xref:System.Xml.XmlQualifiedName>从生成的类型为<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref>此类型的属性。</xref:System.Xml.XmlQualifiedName>"
  overload: System.Xml.Schema.XmlSchemaType.QualifiedName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaType.TypeCode
  id: TypeCode
  parent: System.Xml.Schema.XmlSchemaType
  langs:
  - csharp
  name: TypeCode
  nameWithType: XmlSchemaType.TypeCode
  fullName: System.Xml.Schema.XmlSchemaType.TypeCode
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取<xref href=&quot;System.Xml.Schema.XmlTypeCode&quot;></xref>的类型。"
  syntax:
    content: public System.Xml.Schema.XmlTypeCode TypeCode { get; }
    return:
      type: System.Xml.Schema.XmlTypeCode
      description: "之一<xref href=&quot;System.Xml.Schema.XmlTypeCode&quot;></xref>值。"
  overload: System.Xml.Schema.XmlSchemaType.TypeCode*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.Schema.XmlSchemaAnnotated
  isExternal: false
  name: System.Xml.Schema.XmlSchemaAnnotated
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xml.Schema.XmlSchemaType.#ctor
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: XmlSchemaType()
  nameWithType: XmlSchemaType.XmlSchemaType()
  fullName: System.Xml.Schema.XmlSchemaType.XmlSchemaType()
- uid: System.Xml.Schema.XmlSchemaType.BaseSchemaType
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: BaseSchemaType
  nameWithType: XmlSchemaType.BaseSchemaType
  fullName: System.Xml.Schema.XmlSchemaType.BaseSchemaType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: BaseXmlSchemaType
  nameWithType: XmlSchemaType.BaseXmlSchemaType
  fullName: System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType
- uid: System.Xml.Schema.XmlSchemaType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaType
  nameWithType: XmlSchemaType
  fullName: System.Xml.Schema.XmlSchemaType
- uid: System.Xml.Schema.XmlSchemaType.Datatype
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: Datatype
  nameWithType: XmlSchemaType.Datatype
  fullName: System.Xml.Schema.XmlSchemaType.Datatype
- uid: System.Xml.Schema.XmlSchemaDatatype
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaDatatype
  nameWithType: XmlSchemaDatatype
  fullName: System.Xml.Schema.XmlSchemaDatatype
- uid: System.Xml.Schema.XmlSchemaType.DerivedBy
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: DerivedBy
  nameWithType: XmlSchemaType.DerivedBy
  fullName: System.Xml.Schema.XmlSchemaType.DerivedBy
- uid: System.Xml.Schema.XmlSchemaDerivationMethod
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaDerivationMethod
  nameWithType: XmlSchemaDerivationMethod
  fullName: System.Xml.Schema.XmlSchemaDerivationMethod
- uid: System.Xml.Schema.XmlSchemaType.Final
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: Final
  nameWithType: XmlSchemaType.Final
  fullName: System.Xml.Schema.XmlSchemaType.Final
- uid: System.Xml.Schema.XmlSchemaType.FinalResolved
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: FinalResolved
  nameWithType: XmlSchemaType.FinalResolved
  fullName: System.Xml.Schema.XmlSchemaType.FinalResolved
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.Schema.XmlTypeCode)
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: GetBuiltInComplexType(XmlTypeCode)
  nameWithType: XmlSchemaType.GetBuiltInComplexType(XmlTypeCode)
  fullName: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(XmlTypeCode)
- uid: System.Xml.Schema.XmlSchemaComplexType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaComplexType
  nameWithType: XmlSchemaComplexType
  fullName: System.Xml.Schema.XmlSchemaComplexType
- uid: System.Xml.Schema.XmlTypeCode
  parent: System.Xml.Schema
  isExternal: false
  name: XmlTypeCode
  nameWithType: XmlTypeCode
  fullName: System.Xml.Schema.XmlTypeCode
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(System.Xml.XmlQualifiedName)
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: GetBuiltInComplexType(XmlQualifiedName)
  nameWithType: XmlSchemaType.GetBuiltInComplexType(XmlQualifiedName)
  fullName: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType(XmlQualifiedName)
- uid: System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.Schema.XmlTypeCode)
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: GetBuiltInSimpleType(XmlTypeCode)
  nameWithType: XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode)
  fullName: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(XmlTypeCode)
- uid: System.Xml.Schema.XmlSchemaSimpleType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSimpleType
  nameWithType: XmlSchemaSimpleType
  fullName: System.Xml.Schema.XmlSchemaSimpleType
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(System.Xml.XmlQualifiedName)
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: GetBuiltInSimpleType(XmlQualifiedName)
  nameWithType: XmlSchemaType.GetBuiltInSimpleType(XmlQualifiedName)
  fullName: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType(XmlQualifiedName)
- uid: System.Xml.Schema.XmlSchemaType.IsDerivedFrom(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaDerivationMethod)
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: IsDerivedFrom(XmlSchemaType,XmlSchemaType,XmlSchemaDerivationMethod)
  nameWithType: XmlSchemaType.IsDerivedFrom(XmlSchemaType,XmlSchemaType,XmlSchemaDerivationMethod)
  fullName: System.Xml.Schema.XmlSchemaType.IsDerivedFrom(XmlSchemaType,XmlSchemaType,XmlSchemaDerivationMethod)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Schema.XmlSchemaType.IsMixed
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: IsMixed
  nameWithType: XmlSchemaType.IsMixed
  fullName: System.Xml.Schema.XmlSchemaType.IsMixed
- uid: System.Xml.Schema.XmlSchemaType.Name
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: Name
  nameWithType: XmlSchemaType.Name
  fullName: System.Xml.Schema.XmlSchemaType.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Schema.XmlSchemaType.QualifiedName
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: QualifiedName
  nameWithType: XmlSchemaType.QualifiedName
  fullName: System.Xml.Schema.XmlSchemaType.QualifiedName
- uid: System.Xml.Schema.XmlSchemaType.TypeCode
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: TypeCode
  nameWithType: XmlSchemaType.TypeCode
  fullName: System.Xml.Schema.XmlSchemaType.TypeCode
- uid: System.Xml.Schema.XmlSchemaType.#ctor*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: XmlSchemaType
  nameWithType: XmlSchemaType.XmlSchemaType
- uid: System.Xml.Schema.XmlSchemaType.BaseSchemaType*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: BaseSchemaType
  nameWithType: XmlSchemaType.BaseSchemaType
- uid: System.Xml.Schema.XmlSchemaType.BaseXmlSchemaType*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: BaseXmlSchemaType
  nameWithType: XmlSchemaType.BaseXmlSchemaType
- uid: System.Xml.Schema.XmlSchemaType.Datatype*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: Datatype
  nameWithType: XmlSchemaType.Datatype
- uid: System.Xml.Schema.XmlSchemaType.DerivedBy*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: DerivedBy
  nameWithType: XmlSchemaType.DerivedBy
- uid: System.Xml.Schema.XmlSchemaType.Final*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: Final
  nameWithType: XmlSchemaType.Final
- uid: System.Xml.Schema.XmlSchemaType.FinalResolved*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: FinalResolved
  nameWithType: XmlSchemaType.FinalResolved
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInComplexType*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: GetBuiltInComplexType
  nameWithType: XmlSchemaType.GetBuiltInComplexType
- uid: System.Xml.Schema.XmlSchemaType.GetBuiltInSimpleType*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: GetBuiltInSimpleType
  nameWithType: XmlSchemaType.GetBuiltInSimpleType
- uid: System.Xml.Schema.XmlSchemaType.IsDerivedFrom*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: IsDerivedFrom
  nameWithType: XmlSchemaType.IsDerivedFrom
- uid: System.Xml.Schema.XmlSchemaType.IsMixed*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: IsMixed
  nameWithType: XmlSchemaType.IsMixed
- uid: System.Xml.Schema.XmlSchemaType.Name*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: Name
  nameWithType: XmlSchemaType.Name
- uid: System.Xml.Schema.XmlSchemaType.QualifiedName*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: QualifiedName
  nameWithType: XmlSchemaType.QualifiedName
- uid: System.Xml.Schema.XmlSchemaType.TypeCode*
  parent: System.Xml.Schema.XmlSchemaType
  isExternal: false
  name: TypeCode
  nameWithType: XmlSchemaType.TypeCode
