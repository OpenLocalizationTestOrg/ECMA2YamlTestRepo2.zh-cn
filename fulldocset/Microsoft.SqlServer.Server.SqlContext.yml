### YamlMime:ManagedReference
items:
- uid: Microsoft.SqlServer.Server.SqlContext
  id: SqlContext
  children:
  - Microsoft.SqlServer.Server.SqlContext.IsAvailable
  - Microsoft.SqlServer.Server.SqlContext.Pipe
  - Microsoft.SqlServer.Server.SqlContext.TriggerContext
  - Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  langs:
  - csharp
  name: SqlContext
  nameWithType: SqlContext
  fullName: Microsoft.SqlServer.Server.SqlContext
  type: Class
  summary: "表示调用方的上下文中，它提供对访问的抽象<xref href=&quot;Microsoft.SqlServer.Server.SqlPipe&quot;> </xref>， <xref href=&quot;Microsoft.SqlServer.Server.SqlTriggerContext&quot;> </xref>，和<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>对象。 此类不能被继承。"
  remarks: "SqlContext 对象可用来获取触发器上下文 （对于在触发器中执行的代码） 和管道对象 （如果可用，如存储过程中）。 此外可以用于获取<xref:System.Security.Principal.WindowsIdentity>对象，表示调用的客户端的 Microsoft Windows 标识，如果在客户端验证服务器使用集成身份验证。</xref:System.Security.Principal.WindowsIdentity>"
  example:
  - "The following example creates a new <xref:Microsoft.SqlServer.Server.SqlDataRecord> and its <xref:Microsoft.SqlServer.Server.SqlMetaData>. The example then marks the beginning of a result set using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsStart%2A> method, sends records with example data back to the client using the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsRow%2A> method, and marks the end of the result set with the <xref:Microsoft.SqlServer.Server.SqlPipe.SendResultsEnd%2A> method.  \n  \n [!code-vb[DataWorks SqlPipe.SendResultsRow#1](~/add/codesnippet/visualbasic/t-microsoft.sqlserver.se_11_1.vb)]\n [!code-cs[DataWorks SqlPipe.SendResultsRow#1](~/add/codesnippet/csharp/t-microsoft.sqlserver.se_11_1.cs)]"
  syntax:
    content: public sealed class SqlContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  id: IsAvailable
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
  fullName: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "指定是否在 SQL Server 内运行调用的代码和可访问上下文连接。"
  remarks: "如果此属性返回 false，所有其他<xref:Microsoft.SqlServer.Server.SqlContext>成员引发<xref:System.InvalidOperationException>如果使用。</xref:System.InvalidOperationException> </xref:Microsoft.SqlServer.Server.SqlContext>       如果此属性返回 false，任何尝试打开连接对象具有&quot;上下文连接 = true&quot;连接字符串中无法正常工作。       此属性是只读的。       当使用 ADO.NET，数据访问的如果一种代码可能会运行 （使用公共语言运行时集成） 的 SQL Server 内部和外部 SQL Server，此属性可以用于检查上下文连接是否可用。"
  syntax:
    content: public static bool IsAvailable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>上下文连接是否可用以及其他<xref href=&quot;Microsoft.SqlServer.Server.SqlContext&quot;></xref>可以访问成员。"
  overload: Microsoft.SqlServer.Server.SqlContext.IsAvailable*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe
  id: Pipe
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: Pipe
  nameWithType: SqlContext.Pipe
  fullName: Microsoft.SqlServer.Server.SqlContext.Pipe
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "获取管道对象，它允许调用方发送结果集、 消息和执行返回到客户端的命令的结果。"
  remarks: "如果从外部的 SQL Server，调用<xref:System.NotSupportedException>引发。</xref:System.NotSupportedException>       此属性是只读的。"
  syntax:
    content: public static Microsoft.SqlServer.Server.SqlPipe Pipe { get; }
    return:
      type: Microsoft.SqlServer.Server.SqlPipe
      description: "实例<xref href=&quot;Microsoft.SqlServer.Server.SqlPipe&quot;></xref>如果管道不可用，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果在上下文中调用在管道不可用 （例如，在用户定义函数）。"
  overload: Microsoft.SqlServer.Server.SqlContext.Pipe*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  id: TriggerContext
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
  fullName: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "获取用于包含的信息是什么原因导致触发器激发，和已更新的列映射提供调用方的触发器上下文。"
  remarks: "<xref:Microsoft.SqlServer.Server.SqlTriggerContext>对象只能从在公共语言运行时触发器检索。</xref:Microsoft.SqlServer.Server.SqlTriggerContext>       如果从 SQL Server 外部访问 TriggerContext 属性时<xref:System.NotSupportedException>引发。</xref:System.NotSupportedException>       此属性是只读的。"
  syntax:
    content: public static Microsoft.SqlServer.Server.SqlTriggerContext TriggerContext { get; }
    return:
      type: Microsoft.SqlServer.Server.SqlTriggerContext
      description: "实例<xref href=&quot;Microsoft.SqlServer.Server.SqlTriggerContext&quot;></xref>触发器上下文是否可用，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果之外的触发器调用的调用。"
  overload: Microsoft.SqlServer.Server.SqlContext.TriggerContext*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  id: WindowsIdentity
  parent: Microsoft.SqlServer.Server.SqlContext
  langs:
  - csharp
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
  fullName: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  type: Property
  assemblies:
  - System.Data
  namespace: Microsoft.SqlServer.Server
  summary: "调用方的 Microsoft Windows 标识。"
  remarks: "在 SQL Server 的公共语言运行时 (CLR) 代码始终调用进程帐户的上下文中。 如果需要进行执行而不 SQL Server 进程标识使用调用用户的标识操作的代码，应通过此属性获取的模拟令牌。 获取之后<xref:System.Security.Principal.WindowsIdentity>对象，调用方可以模拟客户端帐户并代表它们执行操作。</xref:System.Security.Principal.WindowsIdentity>       如果从外部的 SQL Server，调用<xref:System.NotSupportedException>引发。</xref:System.NotSupportedException>       只有程序集标记为`EXTERNAL_ACCESS`或`UNSAFE`权限可以访问此属性。       此属性是只读的。"
  example:
  - "The following example shows how to get the Windows identity of the calling client and impersonate the client. See \"Impersonation Sample\" in SQL Server Books Online for an example of impersonation using the WindowsIdentity property.  \n  \n [!code-cs[DataWorks SqlContext.WindowsIdentity Sample#1](~/add/codesnippet/csharp/p-microsoft.sqlserver.se_6_1.cs)]\n [!code-vb[DataWorks SqlContext.WindowsIdentity Sample#1](~/add/codesnippet/visualbasic/p-microsoft.sqlserver.se_6_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity WindowsIdentity { get; }
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "A <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>实例代表调用方的 Windows 标识或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果客户端进行身份验证使用 SQL Server 身份验证。"
  overload: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
  fullName: Microsoft.SqlServer.Server.SqlContext.IsAvailable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: Pipe
  nameWithType: SqlContext.Pipe
  fullName: Microsoft.SqlServer.Server.SqlContext.Pipe
- uid: Microsoft.SqlServer.Server.SqlPipe
  parent: Microsoft.SqlServer.Server
  isExternal: false
  name: SqlPipe
  nameWithType: SqlPipe
  fullName: Microsoft.SqlServer.Server.SqlPipe
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
  fullName: Microsoft.SqlServer.Server.SqlContext.TriggerContext
- uid: Microsoft.SqlServer.Server.SqlTriggerContext
  parent: Microsoft.SqlServer.Server
  isExternal: false
  name: SqlTriggerContext
  nameWithType: SqlTriggerContext
  fullName: Microsoft.SqlServer.Server.SqlTriggerContext
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
  fullName: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: Microsoft.SqlServer.Server.SqlContext.IsAvailable*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: IsAvailable
  nameWithType: SqlContext.IsAvailable
- uid: Microsoft.SqlServer.Server.SqlContext.Pipe*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: Pipe
  nameWithType: SqlContext.Pipe
- uid: Microsoft.SqlServer.Server.SqlContext.TriggerContext*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: TriggerContext
  nameWithType: SqlContext.TriggerContext
- uid: Microsoft.SqlServer.Server.SqlContext.WindowsIdentity*
  parent: Microsoft.SqlServer.Server.SqlContext
  isExternal: false
  name: WindowsIdentity
  nameWithType: SqlContext.WindowsIdentity
