### YamlMime:ManagedReference
items:
- uid: System.Threading.WaitOrTimerCallback
  id: WaitOrTimerCallback
  langs:
  - csharp
  name: WaitOrTimerCallback
  nameWithType: WaitOrTimerCallback
  fullName: System.Threading.WaitOrTimerCallback
  type: Delegate
  summary: "表示的方法时要调用<xref:System.Threading.WaitHandle>发出信号或超时。</xref:System.Threading.WaitHandle>"
  remarks: "WaitOrTimerCallback 表示你想要在已注册的等待句柄超时时，或处于有信号状态时执行的回调方法。 通过将你的回调方法传递给 WaitOrTimerCallback 构造函数创建委托。 你的方法必须具有此处所示的签名。       通过传递 WaitOrTimerCallback 委托和<xref:System.Threading.WaitHandle>到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName>。</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=fullName></xref:System.Threading.WaitHandle>创建已注册的等待句柄 你的回调方法执行每次<xref:System.Threading.WaitHandle>超时或处于有信号状态。</xref:System.Threading.WaitHandle>       [Visual Basic]&1;> [!NOTE]&1;> Visual Basic 用户可以省略 WaitOrTimerCallback 构造函数中，而只需使用`AddressOf`运算符时将回调方法传递给<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>.</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> Visual Basic 会自动调用正确的委托构造函数。       如果你想要将信息传递给你的回调方法，创建包含所需的信息的对象，并将其传递到<xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>当你创建的已注册的等待句柄。</xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> 执行回调方法时，每次`state`参数包含此对象。       有关使用回调方法以同步线程池线程的详细信息，请参阅[托管线程池](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to use the WaitOrTimerCallback delegate to represent a callback method that is executed when a wait handle is signaled.  \n  \n The example also shows how to use the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method to execute a specified callback method when a specified wait handle is signaled. In this example, the callback method is `WaitProc` and the wait handle is an <xref:System.Threading.AutoResetEvent>.  \n  \n The example defines a `TaskInfo` class to hold the information that is passed to the callback when it executes. The example creates a `TaskInfo` object and assigns it some string data. The <xref:System.Threading.RegisteredWaitHandle> that is returned by the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method is assigned to the `Handle` field of the `TaskInfo` object, so that the callback method has access to the <xref:System.Threading.RegisteredWaitHandle>.  \n  \n In addition to the `TaskInfo` object, the call to the <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> method specifies the <xref:System.Threading.AutoResetEvent> the task waits on, a WaitOrTimerCallback delegate that represents the `WaitProc` callback method, a one-second timeout interval, and multiple callbacks.  \n  \n When the main thread signals the <xref:System.Threading.AutoResetEvent> by calling its <xref:System.Threading.EventWaitHandle.Set%2A> method, the WaitOrTimerCallback delegate is invoked. The `WaitProc` method tests <xref:System.Threading.RegisteredWaitHandle> to determine whether a timeout occurred. If the callback was invoked because the wait handle was signaled, the `WaitProc` method unregisters the <xref:System.Threading.RegisteredWaitHandle>, stopping further callbacks. In the case of a timeout, the task continues waiting. The `WaitProc` method ends by printing a message to the console.  \n  \n [!code-cs[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/csharp/t-system.threading.waito_1.cs)]\n [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/cpp/t-system.threading.waito_1.cpp)]\n [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/add/codesnippet/visualbasic/t-system.threading.waito_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public delegate void WaitOrTimerCallback(object state, bool timedOut);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
