### YamlMime:ManagedReference
items:
- uid: System.Security.PermissionSet
  id: PermissionSet
  children:
  - System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  - System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  - System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.Assert
  - System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  - System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  - System.Security.PermissionSet.Copy
  - System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  - System.Security.PermissionSet.Count
  - System.Security.PermissionSet.Demand
  - System.Security.PermissionSet.Deny
  - System.Security.PermissionSet.Equals(System.Object)
  - System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  - System.Security.PermissionSet.GetEnumerator
  - System.Security.PermissionSet.GetEnumeratorImpl
  - System.Security.PermissionSet.GetHashCode
  - System.Security.PermissionSet.GetPermission(System.Type)
  - System.Security.PermissionSet.GetPermissionImpl(System.Type)
  - System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsEmpty
  - System.Security.PermissionSet.IsReadOnly
  - System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  - System.Security.PermissionSet.IsSynchronized
  - System.Security.PermissionSet.IsUnrestricted
  - System.Security.PermissionSet.PermitOnly
  - System.Security.PermissionSet.RemovePermission(System.Type)
  - System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  - System.Security.PermissionSet.RevertAssert
  - System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  - System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  - System.Security.PermissionSet.SyncRoot
  - System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.PermissionSet.ToString
  - System.Security.PermissionSet.ToXml
  - System.Security.PermissionSet.Union(System.Security.PermissionSet)
  langs:
  - csharp
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
  type: Class
  summary: "表示可以包含许多不同类型的权限的集合。"
  remarks: "PermissionSet 可用于执行在多个不同的权限的操作作为一个组。"
  example:
  - "The following code example demonstrates the use of the PermissionSet class and members.  \n  \n [!code-cs[System.Security.PermissionSet#1](~/add/codesnippet/csharp/t-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#1](~/add/codesnippet/visualbasic/t-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#1](~/add/codesnippet/cpp/t-system.security.permis_22_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class PermissionSet : System.Collections.ICollection, System.Runtime.Serialization.IDeserializationCallback, System.Security.ISecurityEncodable, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Security.ISecurityEncodable
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新实例<xref href=&quot;System.Security.PermissionSet&quot;></xref>使用指定的类<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  remarks: "`Unrestricted`状态允许实现的所有权限<xref:System.Security.Permissions.IUnrestrictedPermission>接口，而`None`不都允许任何权限。</xref:System.Security.Permissions.IUnrestrictedPermission>       使用<xref:System.Security.PermissionSet.AddPermission%2A>上一个空<xref:System.Security.PermissionSet>来更详细地定义一组。</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet.AddPermission%2A>"
  example:
  - "The following code example shows the use of the PermissionSet constructor to create a permission set with a permission state of <xref:System.Security.Permissions.PermissionState>. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#2](~/add/codesnippet/csharp/d6be246c-3ec7-45d0-bd17-_1.cs)]\n [!code-vb[System.Security.PermissionSet#2](~/add/codesnippet/visualbasic/d6be246c-3ec7-45d0-bd17-_1.vb)]\n [!code-cpp[System.Security.PermissionSet#2](~/add/codesnippet/cpp/d6be246c-3ec7-45d0-bd17-_1.cpp)]"
  syntax:
    content: public PermissionSet (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "指定对资源的权限集的访问权限的枚举值之一。"
  overload: System.Security.PermissionSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code>参数不是有效<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  id: '#ctor(System.Security.PermissionSet)'
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新实例<xref href=&quot;System.Security.PermissionSet&quot;></xref>类初始值摘自<code> permSet </code>参数。"
  remarks: "新的<xref:System.Security.PermissionSet>包含指定<xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet>中包含的权限的副本</xref:System.Security.PermissionSet>      1> [!NOTE]&1;> 这相当于<xref:System.Security.PermissionSet.Copy%2A>时`permSet`参数不是`null`。</xref:System.Security.PermissionSet.Copy%2A>"
  syntax:
    content: public PermissionSet (System.Security.PermissionSet permSet);
    parameters:
    - id: permSet
      type: System.Security.PermissionSet
      description: "从中获取新的值集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>来创建一个空<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  id: AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "添加到指定的权限<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "添加权限已作为相同类型的权限是否存在于<xref:System.Security.PermissionSet>，新的权限是现有的权限对象和指定的权限对象的联合。</xref:System.Security.PermissionSet> 例如，如果实现的权限<xref:System.Security.Permissions.IUnrestrictedPermission>添加到<xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>，生成的联合是原始`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the AddPermission method to add a permission to a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#3](~/add/codesnippet/csharp/m-system.security.permis_25_1.cs)]\n [!code-vb[System.Security.PermissionSet#3](~/add/codesnippet/visualbasic/m-system.security.permis_25_1.vb)]\n [!code-cpp[System.Security.PermissionSet#3](~/add/codesnippet/cpp/m-system.security.permis_25_1.cpp)]"
  syntax:
    content: public System.Security.IPermission AddPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "要添加的权限。"
    return:
      type: System.Security.IPermission
      description: "添加的权限中已存在相同类型的任何权限的并集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.AddPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此方法叫做从<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  id: AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "添加到指定的权限<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "AddPermissionImpl 方法是实现<xref:System.Security.PermissionSet.AddPermission%2A>方法。</xref:System.Security.PermissionSet.AddPermission%2A>       添加权限已作为相同类型的权限是否存在于<xref:System.Security.PermissionSet>，新的权限是现有的权限对象和指定的权限对象的联合。</xref:System.Security.PermissionSet> 例如，如果实现的权限<xref:System.Security.Permissions.IUnrestrictedPermission>添加到<xref:System.Security.Permissions.PermissionState><xref:System.Security.PermissionSet>，生成的联合是原始`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet></xref:System.Security.Permissions.PermissionState> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission AddPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "要添加的权限。"
    return:
      type: System.Security.IPermission
      description: "添加的权限中已存在相同类型的任何权限的并集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<code> perm </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.AddPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此方法叫做从<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Assert
  id: Assert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "声明调用代码可以访问受权限请求通过调用此方法的代码，即使在堆栈中的高级调用方不具备访问该资源的权限的资源。 使用断言可能会造成安全漏洞。"
  remarks: "这是断言在同一时间范围内的多个权限，因为只有一个断言可处于活动状态的帧的唯一方法。 断言唯一有效的授予权限。 调用<xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>或<xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName>方法来取消 active Assert。</xref:System.Security.CodeAccessPermission.RevertAll%2A?displayProperty=fullName> </xref:System.Security.CodeAccessPermission.RevertAssert%2A?displayProperty=fullName>      1> [!CAUTION]&1;> 调用断言方法中删除的调用链中的所有代码必须都授予指定的资源的访问权的要求，因为它可以打开安全漏洞如果使用不当。 因此，它应谨慎使用。"
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.PermissionSet.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "<xref href=&quot;System.Security.PermissionSet&quot;> </xref>实例断言尚未授予断言代码。       -或者-已存在用于当前帧的活动断言。"
  platform:
  - net462
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  id: ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Security.PermissionSet&quot;></xref>包含不派生自的权限<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example shows the use of the ContainsNonCodeAccessPermissions method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#9](~/add/codesnippet/csharp/m-system.security.permis_8_1.cs)]\n [!code-vb[System.Security.PermissionSet#9](~/add/codesnippet/visualbasic/m-system.security.permis_8_1.vb)]\n [!code-cpp[System.Security.PermissionSet#9](~/add/codesnippet/cpp/m-system.security.permis_8_1.cpp)]"
  syntax:
    content: public bool ContainsNonCodeAccessPermissions ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Security.PermissionSet&quot;></xref>包含不派生自的权限<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  id: ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "将转换编码<xref href=&quot;System.Security.PermissionSet&quot;></xref>从到另一种 XML 编码格式的一种 XML 编码格式。"
  remarks: "不要使用此方法。"
  syntax:
    content: public static byte[] ConvertPermissionSet (string inFormat, byte[] inData, string outFormat);
    parameters:
    - id: inFormat
      type: System.String
      description: '一个字符串，表示以下编码格式之一︰ ASCII、 Unicode 或二进制文件。 可能的值为&quot;XMLASCII&quot;或&quot;XML&quot;、&quot;XMLUNICODE&quot;和&quot;BINARY&quot;。'
    - id: inData
      type: System.Byte[]
      description: "XML 编码的权限集。"
    - id: outFormat
      type: System.String
      description: '一个字符串，表示以下编码格式之一︰ ASCII、 Unicode 或二进制文件。 可能的值为&quot;XMLASCII&quot;或&quot;XML&quot;、&quot;XMLUNICODE&quot;和&quot;BINARY&quot;。'
    return:
      type: System.Byte[]
      description: "加密的权限集与指定的输出格式。"
  overload: System.Security.PermissionSet.ConvertPermissionSet*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "在所有情况下。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Copy
  id: Copy
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "创建一份<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "一份<xref:System.Security.PermissionSet>表示对资源与原始对象相同的访问。</xref:System.Security.PermissionSet> 对副本所做的更改不影响原始的权限集。"
  example:
  - "The following code example shows the use of the Copy method to create a copy of a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#20](~/add/codesnippet/csharp/m-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#20](~/add/codesnippet/visualbasic/m-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#20](~/add/codesnippet/cpp/m-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual System.Security.PermissionSet Copy ();
    parameters: []
    return:
      type: System.Security.PermissionSet
      description: "一份<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "将集的权限对象复制到指定的位置中<xref:System.Array>。</xref:System.Array>"
  syntax:
    content: public virtual void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "要将复制到目标数组。"
    - id: index
      type: System.Int32
      description: "要开始将复制 （从零开始） 的数组中的起始位置。"
  overload: System.Security.PermissionSet.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>array</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> array </code>参数具有多个维度。"
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code> index </code>参数的值的范围超出<code> array </code>参数。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Count
  id: Count
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取权限集中包含的权限对象数。"
  remarks: "在`None`或`Unrestricted`状态这将返回零，因为不使用任何实际的权限对象实例。"
  example:
  - "The following code example shows the use of the Count property to get the number of permission objects in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#5](~/add/codesnippet/csharp/p-system.security.permis_23_1.cs)]\n [!code-vb[System.Security.PermissionSet#5](~/add/codesnippet/visualbasic/p-system.security.permis_23_1.vb)]\n [!code-cpp[System.Security.PermissionSet#5](~/add/codesnippet/cpp/p-system.security.permis_23_1.cpp)]"
  syntax:
    content: public virtual int Count { get; }
    return:
      type: System.Int32
      description: "中包含的权限对象的数目<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Demand
  id: Demand
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "强制<xref:System.Security.SecurityException>如果尚未授予调用堆栈中的所有高级调用方指定的当前实例的权限，则在运行时。</xref:System.Security.SecurityException>"
  remarks: "在使用按需<xref:System.Security.PermissionSet>以确保所有调用方在一个操作集中具有所有权限。</xref:System.Security.PermissionSet>       调用此方法的代码的权限不会检查;检查开始从该代码的直接调用方，并在堆栈中向上继续进行。 调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。 需要时才会成功没有<xref:System.Security.SecurityException>引发。</xref:System.Security.SecurityException>       如果<xref:System.Security.PermissionSet>包含不是继承自的权限<xref:System.Security.CodeAccessPermission>、`Demand`以及调用方法的这些权限。</xref:System.Security.CodeAccessPermission> </xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the Demand method to demand all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#4](~/add/codesnippet/csharp/m-system.security.permis_17_1.cs)]\n [!code-vb[System.Security.PermissionSet#4](~/add/codesnippet/visualbasic/m-system.security.permis_17_1.vb)]\n [!code-cpp[System.Security.PermissionSet#4](~/add/codesnippet/cpp/m-system.security.permis_17_1.cpp)]"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.PermissionSet.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "中的调用链的调用方没有所需的权限。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Deny
  id: Deny
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "会导致任何<xref:System.Security.PermissionSet.Demand*>经过的调用代码的权限具有交集的权限包含在当前类型的<xref href=&quot;System.Security.PermissionSet&quot;></xref>失败。</xref:System.Security.PermissionSet.Demand*>"
  remarks: "此方法会阻止调用堆栈中的高级调用方通过调用此方法的代码，访问受保护的资源，即使这些调用方已被授予权限来访问它。 调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。       拒绝可以限制了编程人员的责任或帮助防止出现意外的安全漏洞，因为它有助于防止拒绝调用从用于访问被拒绝的权限所保护的资源的方法。 如果一个方法调用拒绝对权限，并且<xref:System.Security.PermissionSet.Demand%2A>为该权限调用方的调用堆栈中较低级别调用，在到达拒绝时，该安全检查将失败。</xref:System.Security.PermissionSet.Demand%2A>       拒绝的权限，因为不能成功对该权限的请求未被授予为忽略。"
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.PermissionSet.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "拒绝的以前调用已经限制当前堆栈帧的权限。"
  platform:
  - net462
- uid: System.Security.PermissionSet.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "确定是否指定<xref href=&quot;System.Security.PermissionSet&quot;></xref>或<xref href=&quot;System.Security.NamedPermissionSet&quot;></xref>对象是否等于当前<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "相等性由包含在由指定的权限集的权限`obj`。 `obj`可以是<xref:System.Security.PermissionSet>对象或<xref:System.Security.NamedPermissionSet>对象。</xref:System.Security.NamedPermissionSet> </xref:System.Security.PermissionSet> 如果`obj`是<xref:System.Security.NamedPermissionSet>，忽略的名称和描述。</xref:System.Security.NamedPermissionSet>       有关详细信息，请参阅<xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>。</xref:System.Object.Equals%28System.Object%29?displayProperty=fullName>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与当前比较的对象<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的对象是否等于当前<xref href=&quot;System.Security.PermissionSet&quot;></xref>对象; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "重新构造具有指定状态的 XML 编码的安全对象。"
  remarks: ''
  example:
  - "The following code example shows the use of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_21_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_21_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_21_1.cpp)]"
  syntax:
    content: public virtual void FromXml (System.Security.SecurityElement et);
    parameters:
    - id: et
      type: System.Security.SecurityElement
      description: "编码用于重新构造安全对象的 XML。"
  overload: System.Security.PermissionSet.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>et</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> et </code>参数不是有效的权限元素。       -或- <code> et </code>不支持参数的版本号。"
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumerator
  id: GetEnumerator
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "返回集的权限的枚举数。"
  remarks: "可以使用枚举作为索引访问各个权限集内的对象。"
  example:
  - "The following code example shows the use of the GetEnumerator method to list all the permissions in a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#18](~/add/codesnippet/csharp/m-system.security.permis_5_1.cs)]\n [!code-vb[System.Security.PermissionSet#18](~/add/codesnippet/visualbasic/m-system.security.permis_5_1.vb)]\n [!code-cpp[System.Security.PermissionSet#18](~/add/codesnippet/cpp/m-system.security.permis_5_1.cpp)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "对象的权限集的枚举器。"
  overload: System.Security.PermissionSet.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  id: GetEnumeratorImpl
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "返回集的权限的枚举数。"
  remarks: "GetEnumeratorImpl 方法是实现<xref:System.Security.PermissionSet.GetEnumerator%2A>方法。</xref:System.Security.PermissionSet.GetEnumerator%2A>"
  syntax:
    content: protected virtual System.Collections.IEnumerator GetEnumeratorImpl ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "对象的权限集的枚举器。"
  overload: System.Security.PermissionSet.GetEnumeratorImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetHashCode
  id: GetHashCode
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取的哈希代码<xref href=&quot;System.Security.PermissionSet&quot;></xref>是适合在哈希算法和数据结构，如哈希表中使用的对象。"
  remarks: "因此，不应使用的哈希代码来比较两个相同的权限集的两个实例的哈希代码可能不同，<xref:System.Security.PermissionSet>对象。</xref:System.Security.PermissionSet>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的哈希代码<xref href=&quot;System.Security.PermissionSet&quot;></xref>对象。"
  overload: System.Security.PermissionSet.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  id: GetPermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "如果它存在于集中，获取指定类型的权限对象。"
  remarks: "该方法返回`null`为`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 尽管`Unrestricted`<xref:System.Security.PermissionSet>有效地包含所有权限，它不具有任何实际的实例，以返回。</xref:System.Security.PermissionSet>"
  syntax:
    content: public System.Security.IPermission GetPermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "所需的权限对象的类型。"
    return:
      type: System.Security.IPermission
      description: "由指定的类型的权限对象的副本<code> permClass </code>参数中包含<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不存在。"
  overload: System.Security.PermissionSet.GetPermission*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  id: GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "如果它存在于集中，获取指定类型的权限对象。"
  remarks: "GetPermissionImpl 方法是实现<xref:System.Security.PermissionSet.GetPermission%2A>方法。</xref:System.Security.PermissionSet.GetPermission%2A>       该方法返回`null`为`Unrestricted` <xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet> 尽管`Unrestricted`<xref:System.Security.PermissionSet>有效地包含所有权限，它不具有任何实际的实例，以返回。</xref:System.Security.PermissionSet>"
  syntax:
    content: protected virtual System.Security.IPermission GetPermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "权限对象的类型。"
    return:
      type: System.Security.IPermission
      description: "权限对象，由指定的类型的一份<code> permClass </code>参数，包含在<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不存在。"
  overload: System.Security.PermissionSet.GetPermissionImpl*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  id: Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "创建并返回的权限集，它是当前的交集<xref href=&quot;System.Security.PermissionSet&quot;></xref>和指定<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "两个权限集的交集是描述组的二者共同描述的操作的权限集。 具体而言，它表示的最低权限，这样的任何请求都会通过这两个权限设置还传递它们的交集。       对于每个类型的两个集合中存在的权限，这些权限的两个实例都将使用权限的`Intersect`方法; 生成的权限包含在生成<xref:System.Security.PermissionSet>。</xref:System.Security.PermissionSet> 从结果集不存在的唯一一种方法的两个集的权限类型。"
  example:
  - "The following code example shows the use of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#12](~/add/codesnippet/csharp/m-system.security.permis_10_1.cs)]\n [!code-vb[System.Security.PermissionSet#12](~/add/codesnippet/visualbasic/m-system.security.permis_10_1.vb)]\n [!code-cpp[System.Security.PermissionSet#12](~/add/codesnippet/cpp/m-system.security.permis_10_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Intersect (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "权限集与当前相交<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
    return:
      type: System.Security.PermissionSet
      description: "表示当前的交集的新权限集<xref href=&quot;System.Security.PermissionSet&quot;></xref>和指定的目标。 此对象是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果交集为空。"
  overload: System.Security.PermissionSet.Intersect*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsEmpty
  id: IsEmpty
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Security.PermissionSet&quot;></xref>为空。"
  remarks: "A<xref:System.Security.PermissionSet>可以为空，并且如果这些权限已在完全受限制状态中尚未包含实例的权限。</xref:System.Security.PermissionSet> 权限已在完全受限制的状态中如果其`IsSubsetOf`方法返回`true`时`null`作为参数传递。"
  syntax:
    content: public bool IsEmpty ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Security.PermissionSet&quot;></xref>空; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsReadOnly
  id: IsReadOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取一个值，该值指示集合是否只读的。"
  remarks: "A<xref:System.Security.PermissionSet>不能为只读的因此此属性始终为`false`。</xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the value returned by the IsReadOnly property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#7](~/add/codesnippet/csharp/p-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#7](~/add/codesnippet/visualbasic/p-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#7](~/add/codesnippet/cpp/p-system.security.permis_22_1.cpp)]"
  syntax:
    content: public virtual bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  id: IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "确定是否当前<xref href=&quot;System.Security.PermissionSet&quot;></xref>是指定的子集<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "A<xref:System.Security.PermissionSet>为目标的子集<xref:System.Security.PermissionSet>如果所有要求，对于都成功<xref:System.Security.PermissionSet>也都成功的目标。</xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> </xref:System.Security.PermissionSet> 也就是说，目标至少包含的子集中包含的权限。"
  example:
  - "The following code example shows the use of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#11](~/add/codesnippet/csharp/m-system.security.permis_12_1.cs)]\n [!code-vb[System.Security.PermissionSet#11](~/add/codesnippet/visualbasic/m-system.security.permis_12_1.vb)]\n [!code-cpp[System.Security.PermissionSet#11](~/add/codesnippet/cpp/m-system.security.permis_12_1.cpp)]"
  syntax:
    content: public bool IsSubsetOf (System.Security.PermissionSet target);
    parameters:
    - id: target
      type: System.Security.PermissionSet
      description: "设置将要测试子集关系的权限。 它必须是<xref href=&quot;System.Security.PermissionSet&quot;></xref>或<xref href=&quot;System.Security.NamedPermissionSet&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前<xref href=&quot;System.Security.PermissionSet&quot;></xref>是的子集<code> target </code>参数; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.PermissionSet.IsSubsetOf*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsSynchronized
  id: IsSynchronized
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取一个值，该值指示是否保证此集合是线程安全。"
  remarks: "<xref:System.Security.PermissionSet>并不自动处理线程的安全，因此此属性始终为`false`。</xref:System.Security.PermissionSet>       支持<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>所需的此方法"
  example:
  - "The following code example shows the value returned by the IsSynchronized property. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#6](~/add/codesnippet/csharp/p-system.security.permis_30_1.cs)]\n [!code-vb[System.Security.PermissionSet#6](~/add/codesnippet/visualbasic/p-system.security.permis_30_1.vb)]\n [!code-cpp[System.Security.PermissionSet#6](~/add/codesnippet/cpp/p-system.security.permis_30_1.cpp)]"
  syntax:
    content: public virtual bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "确定是否<xref href=&quot;System.Security.PermissionSet&quot;></xref>是<xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;> </xref>。"
  remarks: "`Unrestricted` <xref:System.Security.PermissionSet>有效地包含实现的所有权限<xref:System.Security.Permissions.IUnrestrictedPermission>接口。</xref:System.Security.Permissions.IUnrestrictedPermission> </xref:System.Security.PermissionSet>"
  example:
  - "The following code example shows the use of the IsUnrestricted method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#19](~/add/codesnippet/csharp/m-system.security.permis_1_1.cs)]\n [!code-vb[System.Security.PermissionSet#19](~/add/codesnippet/visualbasic/m-system.security.permis_1_1.vb)]\n [!code-cpp[System.Security.PermissionSet#19](~/add/codesnippet/cpp/m-system.security.permis_1_1.cpp)]"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <xref href=&quot;System.Security.PermissionSet&quot;></xref> is <xref uid=&quot;langword_csharp_Unrestricted&quot; name=&quot;Unrestricted&quot; href=&quot;&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Security.PermissionSet.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.PermitOnly
  id: PermitOnly
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "会导致任何<xref:System.Security.PermissionSet.Demand*>任何经过调用代码<xref href=&quot;System.Security.PermissionSet&quot;> </xref> ，它是不的子集当前<xref href=&quot;System.Security.PermissionSet&quot;></xref>失败。</xref:System.Security.PermissionSet.Demand*>"
  remarks: "PermitOnly 是类似于<xref:System.Security.PermissionSet.Deny%2A>，因为同时导致堆栈审核失败时它们原本应该成功。</xref:System.Security.PermissionSet.Deny%2A> 差异在于<xref:System.Security.PermissionSet.Deny%2A>指定权限将导致堆栈审核失败，但 PermitOnly 指定不会导致堆栈审核失败的唯一权限。</xref:System.Security.PermissionSet.Deny%2A> 调用此方法，以确保你的代码可以用于访问指定的资源。       PermitOnly 忽略未授予因为不能成功对该权限的要求的权限。 但是，如果在调用的低级代码堆栈更高版本调用<xref:System.Security.PermissionSet.Demand%2A>对该权限<xref:System.Security.SecurityException>堆栈审核达到尝试调用 PermitOnly 代码时引发。</xref:System.Security.SecurityException> </xref:System.Security.PermissionSet.Demand%2A> 这是因为调用 PermitOnly 的代码未被授予权限，即使它为该权限调用 PermitOnly 也是如此。 调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。"
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.PermissionSet.PermitOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  id: RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "从集内移除特定类型的权限。"
  remarks: "> [!IMPORTANT]1> 你不能删除不受限制的权限集的权限。 权限集仍然无限制后尝试删除权限，而不引发异常。       下面的 C# 代码尝试删除<xref:System.Security.Permissions.FileIOPermission>从`FullTrust`设置权限，但不是删除该权限。</xref:System.Security.Permissions.FileIOPermission>      ```   PolicyLevel myPol = PolicyLevel.CreateAppDomainLevel();   PermissionSet myPermSet = myPol.GetNamedPermissionSet(&quot;FullTrust&quot;);   myPermSet.RemovePermission(typeof(FileIOPermission));   ```"
  example:
  - "The following code example shows the use of the RemovePermission method to remove a <xref:System.Security.Permissions.FileIOPermission> from a permission set. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#15](~/add/codesnippet/csharp/m-system.security.permis_22_1.cs)]\n [!code-vb[System.Security.PermissionSet#15](~/add/codesnippet/visualbasic/m-system.security.permis_22_1.vb)]\n [!code-cpp[System.Security.PermissionSet#15](~/add/codesnippet/cpp/m-system.security.permis_22_1.cpp)]"
  syntax:
    content: public System.Security.IPermission RemovePermission (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "要删除的权限类型。"
    return:
      type: System.Security.IPermission
      description: "从集中删除该权限。"
  overload: System.Security.PermissionSet.RemovePermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此方法叫做从<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  id: RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "从集内移除特定类型的权限。"
  remarks: "RemovePermissionImpl 方法是实现<xref:System.Security.PermissionSet.RemovePermission%2A>方法。</xref:System.Security.PermissionSet.RemovePermission%2A>      1> [!IMPORTANT]&1;> 你不能删除不受限制的权限集的权限。 权限集仍然无限制后尝试删除权限，而不引发异常。"
  syntax:
    content: protected virtual System.Security.IPermission RemovePermissionImpl (Type permClass);
    parameters:
    - id: permClass
      type: System.Type
      description: "要删除的权限的类型。"
    return:
      type: System.Security.IPermission
      description: "从集中删除该权限。"
  overload: System.Security.PermissionSet.RemovePermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此方法叫做从<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.RevertAssert
  id: RevertAssert
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以前所有的原因<xref:System.Security.CodeAccessPermission.Assert*>当前帧被移除，不再会生效。</xref:System.Security.CodeAccessPermission.Assert*>"
  remarks: "如果没有任何<xref:System.Security.CodeAccessPermission.Assert%2A>当前帧，<xref:System.ExecutionEngineException>引发。</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.PermissionSet.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不再具有以前<xref:System.Security.CodeAccessPermission.Assert*>当前帧。</xref:System.Security.CodeAccessPermission.Assert*>"
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  id: SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "将权限设置为<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，替换同一类型的任何现有权限。"
  remarks: "此方法可以删除从同一类型的任何现有权限对象<xref:System.Security.PermissionSet>，并替换与`perm`参数。</xref:System.Security.PermissionSet> 如果实现的权限<xref:System.Security.Permissions.IUnrestrictedPermission>上设置<xref:System.Security.PermissionSet>即<xref:System.Security.Permissions.PermissionState>，生成<xref:System.Security.PermissionSet>不再`Unrestricted`。</xref:System.Security.PermissionSet> </xref:System.Security.Permissions.PermissionState> </xref:System.Security.PermissionSet> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  example:
  - "The following code example shows the use of the SetPermission method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#16](~/add/codesnippet/csharp/m-system.security.permis_14_1.cs)]\n [!code-vb[System.Security.PermissionSet#16](~/add/codesnippet/visualbasic/m-system.security.permis_14_1.vb)]\n [!code-cpp[System.Security.PermissionSet#16](~/add/codesnippet/cpp/m-system.security.permis_14_1.cpp)]"
  syntax:
    content: public System.Security.IPermission SetPermission (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "要设置的权限。"
    return:
      type: System.Security.IPermission
      description: "设置的权限。"
  overload: System.Security.PermissionSet.SetPermission*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此方法叫做从<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  id: SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "将权限设置为<xref href=&quot;System.Security.PermissionSet&quot;> </xref>，替换同一类型的任何现有权限。"
  remarks: "SetPermissionImpl 方法是实现<xref:System.Security.PermissionSet.SetPermission%2A>方法。</xref:System.Security.PermissionSet.SetPermission%2A>       此方法可以删除从同一类型的任何现有权限对象<xref:System.Security.PermissionSet>，并替换与`perm`参数。</xref:System.Security.PermissionSet> 如果实现的权限<xref:System.Security.Permissions.IUnrestrictedPermission>上设置<xref:System.Security.PermissionSet>即<xref:System.Security.Permissions.PermissionState>，生成<xref:System.Security.PermissionSet>不再`Unrestricted`。</xref:System.Security.PermissionSet> </xref:System.Security.Permissions.PermissionState> </xref:System.Security.PermissionSet> </xref:System.Security.Permissions.IUnrestrictedPermission>"
  syntax:
    content: protected virtual System.Security.IPermission SetPermissionImpl (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "要设置的权限。"
    return:
      type: System.Security.IPermission
      description: "设置的权限。"
  overload: System.Security.PermissionSet.SetPermissionImpl*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此方法叫做从<xref href=&quot;System.Security.ReadOnlyPermissionSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.PermissionSet.SyncRoot
  id: SyncRoot
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取当前集合的根对象。"
  remarks: "支持<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>所需的此方法"
  example:
  - "The following code example shows the use of SyncRoot property to get the root object of the current collection. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#8](~/add/codesnippet/csharp/p-system.security.permis_29_1.cs)]\n [!code-vb[System.Security.PermissionSet#8](~/add/codesnippet/visualbasic/p-system.security.permis_29_1.vb)]\n [!code-cpp[System.Security.PermissionSet#8](~/add/codesnippet/cpp/p-system.security.permis_29_1.cpp)]"
  syntax:
    content: public virtual object SyncRoot { get; }
    return:
      type: System.Object
      description: "当前集合的根对象。"
  overload: System.Security.PermissionSet.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "在整个对象图形已经反序列化时运行。"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "启动回调的对象。 当前未实现此参数的功能。"
  overload: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToString
  id: ToString
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "返回的字符串表示形式<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "字符串表示可在调试查看<xref:System.Security.PermissionSet>.</xref:System.Security.PermissionSet>的状态"
  example:
  - "The following code example shows the use of the ToString method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#10](~/add/codesnippet/csharp/m-system.security.permis_16_1.cs)]\n [!code-vb[System.Security.PermissionSet#10](~/add/codesnippet/visualbasic/m-system.security.permis_16_1.vb)]\n [!code-cpp[System.Security.PermissionSet#10](~/add/codesnippet/cpp/m-system.security.permis_16_1.cpp)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "表示形式<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.ToXml
  id: ToXml
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "创建安全对象及其当前状态的 XML 编码。"
  remarks: ''
  example:
  - "The following code example shows the use of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#17](~/add/codesnippet/csharp/m-system.security.permis_2_1.cs)]\n [!code-vb[System.Security.PermissionSet#17](~/add/codesnippet/visualbasic/m-system.security.permis_2_1.vb)]\n [!code-cpp[System.Security.PermissionSet#17](~/add/codesnippet/cpp/m-system.security.permis_2_1.cpp)]"
  syntax:
    content: public virtual System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "安全对象，包括任何状态信息的 XML 编码。"
  overload: System.Security.PermissionSet.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  id: Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  langs:
  - csharp
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "创建<xref href=&quot;System.Security.PermissionSet&quot;> </xref> ，它是当前的联合<xref href=&quot;System.Security.PermissionSet&quot;></xref>和指定<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  remarks: "对联合的结果是调用的<xref:System.Security.PermissionSet>，表示由当前<xref:System.Security.PermissionSet>的指定<xref:System.Security.PermissionSet>。</xref:System.Security.PermissionSet>所表示的所有操作以及</xref:System.Security.PermissionSet>表示的所有操作</xref:System.Security.PermissionSet>都 如果设置为`Unrestricted`，联合是`Unrestricted`以及。"
  example:
  - "The following code example shows the use of the Union method. This code example is part of a larger example provided for the <xref:System.Security.PermissionSet> class.  \n  \n [!code-cs[System.Security.PermissionSet#13](~/add/codesnippet/csharp/m-system.security.permis_26_1.cs)]\n [!code-vb[System.Security.PermissionSet#13](~/add/codesnippet/visualbasic/m-system.security.permis_26_1.vb)]\n [!code-cpp[System.Security.PermissionSet#13](~/add/codesnippet/cpp/m-system.security.permis_26_1.cpp)]"
  syntax:
    content: public System.Security.PermissionSet Union (System.Security.PermissionSet other);
    parameters:
    - id: other
      type: System.Security.PermissionSet
      description: "权限集构成并集与当前<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
    return:
      type: System.Security.PermissionSet
      description: "表示同时兼具当前一个新权限集<xref href=&quot;System.Security.PermissionSet&quot;></xref>和指定<xref href=&quot;System.Security.PermissionSet&quot;> </xref>。"
  overload: System.Security.PermissionSet.Union*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Security.PermissionSet.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionState)
  nameWithType: PermissionSet.PermissionSet(PermissionState)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.PermissionSet.#ctor(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet(PermissionSet)
  nameWithType: PermissionSet.PermissionSet(PermissionSet)
  fullName: System.Security.PermissionSet.PermissionSet(PermissionSet)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.PermissionSet.AddPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission(IPermission)
  nameWithType: PermissionSet.AddPermission(IPermission)
  fullName: System.Security.PermissionSet.AddPermission(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.PermissionSet.AddPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl(IPermission)
  nameWithType: PermissionSet.AddPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.AddPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.Assert
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert()
  nameWithType: PermissionSet.Assert()
  fullName: System.Security.PermissionSet.Assert()
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions()
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions()
  fullName: System.Security.PermissionSet.ContainsNonCodeAccessPermissions()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.PermissionSet.ConvertPermissionSet(System.String,System.Byte[],System.String)
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet(String,Byte[],String)
  nameWithType: PermissionSet.ConvertPermissionSet(String,Byte[],String)
  fullName: System.Security.PermissionSet.ConvertPermissionSet(String,Byte[],String)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PermissionSet.Copy
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy()
  nameWithType: PermissionSet.Copy()
  fullName: System.Security.PermissionSet.Copy()
- uid: System.Security.PermissionSet.CopyTo(System.Array,System.Int32)
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: PermissionSet.CopyTo(Array,Int32)
  fullName: System.Security.PermissionSet.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.PermissionSet.Count
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
  fullName: System.Security.PermissionSet.Count
- uid: System.Security.PermissionSet.Demand
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand()
  nameWithType: PermissionSet.Demand()
  fullName: System.Security.PermissionSet.Demand()
- uid: System.Security.PermissionSet.Deny
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny()
  nameWithType: PermissionSet.Deny()
  fullName: System.Security.PermissionSet.Deny()
- uid: System.Security.PermissionSet.Equals(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals(Object)
  nameWithType: PermissionSet.Equals(Object)
  fullName: System.Security.PermissionSet.Equals(Object)
- uid: System.Security.PermissionSet.FromXml(System.Security.SecurityElement)
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: PermissionSet.FromXml(SecurityElement)
  fullName: System.Security.PermissionSet.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.PermissionSet.GetEnumerator
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: PermissionSet.GetEnumerator()
  fullName: System.Security.PermissionSet.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl()
  nameWithType: PermissionSet.GetEnumeratorImpl()
  fullName: System.Security.PermissionSet.GetEnumeratorImpl()
- uid: System.Security.PermissionSet.GetHashCode
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode()
  nameWithType: PermissionSet.GetHashCode()
  fullName: System.Security.PermissionSet.GetHashCode()
- uid: System.Security.PermissionSet.GetPermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission(Type)
  nameWithType: PermissionSet.GetPermission(Type)
  fullName: System.Security.PermissionSet.GetPermission(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Security.PermissionSet.GetPermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl(Type)
  nameWithType: PermissionSet.GetPermissionImpl(Type)
  fullName: System.Security.PermissionSet.GetPermissionImpl(Type)
- uid: System.Security.PermissionSet.Intersect(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect(PermissionSet)
  nameWithType: PermissionSet.Intersect(PermissionSet)
  fullName: System.Security.PermissionSet.Intersect(PermissionSet)
- uid: System.Security.PermissionSet.IsEmpty
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty()
  nameWithType: PermissionSet.IsEmpty()
  fullName: System.Security.PermissionSet.IsEmpty()
- uid: System.Security.PermissionSet.IsReadOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
  fullName: System.Security.PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf(PermissionSet)
  nameWithType: PermissionSet.IsSubsetOf(PermissionSet)
  fullName: System.Security.PermissionSet.IsSubsetOf(PermissionSet)
- uid: System.Security.PermissionSet.IsSynchronized
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
  fullName: System.Security.PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted()
  nameWithType: PermissionSet.IsUnrestricted()
  fullName: System.Security.PermissionSet.IsUnrestricted()
- uid: System.Security.PermissionSet.PermitOnly
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly()
  nameWithType: PermissionSet.PermitOnly()
  fullName: System.Security.PermissionSet.PermitOnly()
- uid: System.Security.PermissionSet.RemovePermission(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission(Type)
  nameWithType: PermissionSet.RemovePermission(Type)
  fullName: System.Security.PermissionSet.RemovePermission(Type)
- uid: System.Security.PermissionSet.RemovePermissionImpl(System.Type)
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl(Type)
  nameWithType: PermissionSet.RemovePermissionImpl(Type)
  fullName: System.Security.PermissionSet.RemovePermissionImpl(Type)
- uid: System.Security.PermissionSet.RevertAssert
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert()
  nameWithType: PermissionSet.RevertAssert()
  fullName: System.Security.PermissionSet.RevertAssert()
- uid: System.Security.PermissionSet.SetPermission(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission(IPermission)
  nameWithType: PermissionSet.SetPermission(IPermission)
  fullName: System.Security.PermissionSet.SetPermission(IPermission)
- uid: System.Security.PermissionSet.SetPermissionImpl(System.Security.IPermission)
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl(IPermission)
  nameWithType: PermissionSet.SetPermissionImpl(IPermission)
  fullName: System.Security.PermissionSet.SetPermissionImpl(IPermission)
- uid: System.Security.PermissionSet.SyncRoot
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
  fullName: System.Security.PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Security.PermissionSet.ToString
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString()
  nameWithType: PermissionSet.ToString()
  fullName: System.Security.PermissionSet.ToString()
- uid: System.Security.PermissionSet.ToXml
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml()
  nameWithType: PermissionSet.ToXml()
  fullName: System.Security.PermissionSet.ToXml()
- uid: System.Security.PermissionSet.Union(System.Security.PermissionSet)
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union(PermissionSet)
  nameWithType: PermissionSet.Union(PermissionSet)
  fullName: System.Security.PermissionSet.Union(PermissionSet)
- uid: System.Security.PermissionSet.#ctor*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet.PermissionSet
- uid: System.Security.PermissionSet.AddPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermission
  nameWithType: PermissionSet.AddPermission
- uid: System.Security.PermissionSet.AddPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: AddPermissionImpl
  nameWithType: PermissionSet.AddPermissionImpl
- uid: System.Security.PermissionSet.Assert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Assert
  nameWithType: PermissionSet.Assert
- uid: System.Security.PermissionSet.ContainsNonCodeAccessPermissions*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ContainsNonCodeAccessPermissions
  nameWithType: PermissionSet.ContainsNonCodeAccessPermissions
- uid: System.Security.PermissionSet.ConvertPermissionSet*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ConvertPermissionSet
  nameWithType: PermissionSet.ConvertPermissionSet
- uid: System.Security.PermissionSet.Copy*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Copy
  nameWithType: PermissionSet.Copy
- uid: System.Security.PermissionSet.CopyTo*
  parent: System.Security.PermissionSet
  isExternal: false
  name: CopyTo
  nameWithType: PermissionSet.CopyTo
- uid: System.Security.PermissionSet.Count*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Count
  nameWithType: PermissionSet.Count
- uid: System.Security.PermissionSet.Demand*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Demand
  nameWithType: PermissionSet.Demand
- uid: System.Security.PermissionSet.Deny*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Deny
  nameWithType: PermissionSet.Deny
- uid: System.Security.PermissionSet.Equals*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Equals
  nameWithType: PermissionSet.Equals
- uid: System.Security.PermissionSet.FromXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: FromXml
  nameWithType: PermissionSet.FromXml
- uid: System.Security.PermissionSet.GetEnumerator*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumerator
  nameWithType: PermissionSet.GetEnumerator
- uid: System.Security.PermissionSet.GetEnumeratorImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetEnumeratorImpl
  nameWithType: PermissionSet.GetEnumeratorImpl
- uid: System.Security.PermissionSet.GetHashCode*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetHashCode
  nameWithType: PermissionSet.GetHashCode
- uid: System.Security.PermissionSet.GetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermission
  nameWithType: PermissionSet.GetPermission
- uid: System.Security.PermissionSet.GetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: GetPermissionImpl
  nameWithType: PermissionSet.GetPermissionImpl
- uid: System.Security.PermissionSet.Intersect*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Intersect
  nameWithType: PermissionSet.Intersect
- uid: System.Security.PermissionSet.IsEmpty*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsEmpty
  nameWithType: PermissionSet.IsEmpty
- uid: System.Security.PermissionSet.IsReadOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsReadOnly
  nameWithType: PermissionSet.IsReadOnly
- uid: System.Security.PermissionSet.IsSubsetOf*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSubsetOf
  nameWithType: PermissionSet.IsSubsetOf
- uid: System.Security.PermissionSet.IsSynchronized*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsSynchronized
  nameWithType: PermissionSet.IsSynchronized
- uid: System.Security.PermissionSet.IsUnrestricted*
  parent: System.Security.PermissionSet
  isExternal: false
  name: IsUnrestricted
  nameWithType: PermissionSet.IsUnrestricted
- uid: System.Security.PermissionSet.PermitOnly*
  parent: System.Security.PermissionSet
  isExternal: false
  name: PermitOnly
  nameWithType: PermissionSet.PermitOnly
- uid: System.Security.PermissionSet.RemovePermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermission
  nameWithType: PermissionSet.RemovePermission
- uid: System.Security.PermissionSet.RemovePermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RemovePermissionImpl
  nameWithType: PermissionSet.RemovePermissionImpl
- uid: System.Security.PermissionSet.RevertAssert*
  parent: System.Security.PermissionSet
  isExternal: false
  name: RevertAssert
  nameWithType: PermissionSet.RevertAssert
- uid: System.Security.PermissionSet.SetPermission*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermission
  nameWithType: PermissionSet.SetPermission
- uid: System.Security.PermissionSet.SetPermissionImpl*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SetPermissionImpl
  nameWithType: PermissionSet.SetPermissionImpl
- uid: System.Security.PermissionSet.SyncRoot*
  parent: System.Security.PermissionSet
  isExternal: false
  name: SyncRoot
  nameWithType: PermissionSet.SyncRoot
- uid: System.Security.PermissionSet.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.PermissionSet
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: PermissionSet.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Security.PermissionSet.ToString*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToString
  nameWithType: PermissionSet.ToString
- uid: System.Security.PermissionSet.ToXml*
  parent: System.Security.PermissionSet
  isExternal: false
  name: ToXml
  nameWithType: PermissionSet.ToXml
- uid: System.Security.PermissionSet.Union*
  parent: System.Security.PermissionSet
  isExternal: false
  name: Union
  nameWithType: PermissionSet.Union
