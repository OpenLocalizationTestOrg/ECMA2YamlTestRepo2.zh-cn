### YamlMime:ManagedReference
items:
- uid: System.Net.ServicePoint
  id: ServicePoint
  children:
  - System.Net.ServicePoint.Address
  - System.Net.ServicePoint.BindIPEndPointDelegate
  - System.Net.ServicePoint.Certificate
  - System.Net.ServicePoint.ClientCertificate
  - System.Net.ServicePoint.CloseConnectionGroup(System.String)
  - System.Net.ServicePoint.ConnectionLeaseTimeout
  - System.Net.ServicePoint.ConnectionLimit
  - System.Net.ServicePoint.ConnectionName
  - System.Net.ServicePoint.CurrentConnections
  - System.Net.ServicePoint.Expect100Continue
  - System.Net.ServicePoint.IdleSince
  - System.Net.ServicePoint.MaxIdleTime
  - System.Net.ServicePoint.ProtocolVersion
  - System.Net.ServicePoint.ReceiveBufferSize
  - System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  - System.Net.ServicePoint.SupportsPipelining
  - System.Net.ServicePoint.UseNagleAlgorithm
  langs:
  - csharp
  name: ServicePoint
  nameWithType: ServicePoint
  fullName: System.Net.ServicePoint
  type: Class
  summary: "提供对 HTTP 连接的连接管理。"
  remarks: "ServicePoint 类处理连接到 Internet 资源基于传递中资源的统一资源标识符 (URI) 的主机信息。 与资源的初始连接确定 ServicePoint 对象维护，然后对该资源的所有后续请求的共享的信息。       ServicePoint 对象由<xref:System.Net.ServicePointManager>类，并创建，如有必要，通过<xref:System.Net.ServicePointManager.FindServicePoint%2A?displayProperty=fullName>方法。</xref:System.Net.ServicePointManager.FindServicePoint%2A?displayProperty=fullName> </xref:System.Net.ServicePointManager> ServicePoint 对象永远不会直接创建，但所始终创建和管理的<xref:System.Net.ServicePointManager>类。</xref:System.Net.ServicePointManager> 可以创建的 ServicePoint 对象的最大数目设置<xref:System.Net.ServicePointManager.MaxServicePoints%2A?displayProperty=fullName>属性。</xref:System.Net.ServicePointManager.MaxServicePoints%2A?displayProperty=fullName>       每个 ServicePoint 对象维护其连接，对 Internet 资源直到空闲时间超过指定的时间<xref:System.Net.ServicePoint.MaxIdleTime%2A>属性。</xref:System.Net.ServicePoint.MaxIdleTime%2A> 当超过 ServicePoint<xref:System.Net.ServicePoint.MaxIdleTime%2A>值，它可以回收到另一个连接。</xref:System.Net.ServicePoint.MaxIdleTime%2A> 默认值<xref:System.Net.ServicePoint.MaxIdleTime%2A>由设置<xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName>属性。</xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName> </xref:System.Net.ServicePoint.MaxIdleTime%2A>       当<xref:System.Net.ServicePoint.ConnectionLeaseTimeout%2A>属性设置为一个值，而-1 之后它服务下一个请求, 指定的时间到期后，关闭活动 ServicePoint 连接。</xref:System.Net.ServicePoint.ConnectionLeaseTimeout%2A> 这是适用于应用程序就是默认情况下不需要无限期，打开的活动连接。      1> [!NOTE]&1;> 高负载情况下，某些应用程序可能用完在线程池，这可能导致系统性能低下 （如高和变量事务时间） 的可用线程。 请参阅[http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp](http://msdn.microsoft.com/library/default.asp?url=/library/dnpag/html/scalenetchapt17.asp)提供大量可以进行若要解决此问题的配置更改。"
  example:
  - "The following code example creates a ServicePoint object that connects to the URI www.contoso.com.  \n  \n [!code-cpp[System.Net.ServicePoint#1](~/add/codesnippet/cpp/t-system.net.servicepoint_1.cpp)]\n [!code-vb[System.Net.ServicePoint#1](~/add/codesnippet/visualbasic/t-system.net.servicepoint_1.vb)]\n [!code-cs[System.Net.ServicePoint#1](~/add/codesnippet/csharp/t-system.net.servicepoint_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.CompilerServices.FriendAccessAllowed]

      public class ServicePoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Address
  id: Address
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Address
  nameWithType: ServicePoint.Address
  fullName: System.Net.ServicePoint.Address
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取服务器的统一资源标识符 (URI) 这<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象连接到。"
  remarks: ''
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#2](~/add/codesnippet/cpp/p-system.net.servicepoin_3_1.cpp)]\n [!code-vb[System.Net.ServicePoint#2](~/add/codesnippet/visualbasic/p-system.net.servicepoin_3_1.vb)]\n [!code-cs[System.Net.ServicePoint#2](~/add/codesnippet/csharp/p-system.net.servicepoin_3_1.cs)]"
  syntax:
    content: public Uri Address { get; }
    return:
      type: System.Uri
      description: "实例<xref:System.Uri>类，该类包含 Internet 服务器的 URI 此<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象连接到。</xref:System.Uri>"
  overload: System.Net.ServicePoint.Address*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Net.ServicePoint&quot;> </xref>是在主机模式下。"
  platform:
  - net462
- uid: System.Net.ServicePoint.BindIPEndPointDelegate
  id: BindIPEndPointDelegate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
  fullName: System.Net.ServicePoint.BindIPEndPointDelegate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "指定要将本地相关联的委托<xref:System.Net.IPEndPoint>与<xref href=&quot;System.Net.ServicePoint&quot;> </xref>。</xref:System.Net.IPEndPoint>"
  remarks: "一些负载平衡技术需要客户端使用特定本地 IP 地址和端口号，而不是<xref:System.Net.IPAddress.Any?displayProperty=fullName>(或<xref:System.Net.IPAddress.IPv6Any?displayProperty=fullName>的 Internet 协议版本 6) 和暂时端口</xref:System.Net.IPAddress.IPv6Any?displayProperty=fullName></xref:System.Net.IPAddress.Any?displayProperty=fullName> 你 BindIPEndPointDelegate 可以满足此要求。"
  syntax:
    content: public System.Net.BindIPEndPoint BindIPEndPointDelegate { get; set; }
    return:
      type: System.Net.BindIPEndPoint
      description: "一个委托，用于强制<xref href=&quot;System.Net.ServicePoint&quot;></xref>使用一个特定的本地 Internet 协议 (IP) 地址和端口号。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePoint.BindIPEndPointDelegate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Certificate
  id: Certificate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Certificate
  nameWithType: ServicePoint.Certificate
  fullName: System.Net.ServicePoint.Certificate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取此收到的证书<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  remarks: "尽管<xref:System.Net.ServicePoint>对象可能会使对 Internet 资源的多个连接，它可以维护只有一个证书。</xref:System.Net.ServicePoint>"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_1_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_1_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_1_1.cs)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate Certificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "实例<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;></xref>类，其中包含的安全证书接收此<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  overload: System.Net.ServicePoint.Certificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ClientCertificate
  id: ClientCertificate
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
  fullName: System.Net.ServicePoint.ClientCertificate
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取发送到服务器的最后一个客户端证书。"
  remarks: ''
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_19_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_19_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_19_1.cs)]"
  syntax:
    content: public System.Security.Cryptography.X509Certificates.X509Certificate ClientCertificate { get; }
    return:
      type: System.Security.Cryptography.X509Certificates.X509Certificate
      description: "<xref href=&quot;System.Security.Cryptography.X509Certificates.X509Certificate&quot;> </xref>包含最后一个客户端证书的公共值的对象发送到服务器。"
  overload: System.Net.ServicePoint.ClientCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.CloseConnectionGroup(System.String)
  id: CloseConnectionGroup(System.String)
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: CloseConnectionGroup(String)
  nameWithType: ServicePoint.CloseConnectionGroup(String)
  fullName: System.Net.ServicePoint.CloseConnectionGroup(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "从这中移除指定的连接组<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  remarks: "连接组将一组请求与一个特定连接或一组的连接相关联。 此方法中删除，并关闭属于指定的连接组的所有连接。"
  syntax:
    content: public bool CloseConnectionGroup (string connectionGroupName);
    parameters:
    - id: connectionGroupName
      type: System.String
      description: "包含要关闭并从此服务点中删除的连接的连接组名称。"
    return:
      type: System.Boolean
      description: "A<xref:System.Boolean>值，该值指示是否已关闭的连接组。</xref:System.Boolean>"
  overload: System.Net.ServicePoint.CloseConnectionGroup*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout
  id: ConnectionLeaseTimeout
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
  fullName: System.Net.ServicePoint.ConnectionLeaseTimeout
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置的毫秒数之后活动<xref href=&quot;System.Net.ServicePoint&quot;></xref>关闭连接。"
  remarks: "你可以使用此属性以确保<xref:System.Net.ServicePoint>对象的活动连接不会保留打开无限期。</xref:System.Net.ServicePoint> 此属性适用于方案应删除并定期，如负载平衡方案重新建立连接。       默认情况下，当<xref:System.Net.FtpWebRequest.KeepAlive%2A>是`true`对于请求，<xref:System.Net.ServicePoint.MaxIdleTime%2A>属性设置为关闭的超时值<xref:System.Net.ServicePoint>由于无活动的连接。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.FtpWebRequest.KeepAlive%2A> 如果<xref:System.Net.ServicePoint>具有活动连接，<xref:System.Net.ServicePoint.MaxIdleTime%2A>有影响，并且连接无限期地保持打开。</xref:System.Net.ServicePoint.MaxIdleTime%2A> </xref:System.Net.ServicePoint>       当 ConnectionLeaseTimeout 属性设置为-1，并且指定的时间过后，活动以外的值<xref:System.Net.ServicePoint>为请求提供服务通过设置后关闭连接<xref:System.Net.FtpWebRequest.KeepAlive%2A>到`false`中该请求。</xref:System.Net.FtpWebRequest.KeepAlive%2A> </xref:System.Net.ServicePoint>       设置此值将影响所有连接由<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint>"
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-cs[NCLServicePoint#1](~/add/codesnippet/csharp/p-system.net.servicepoin_15_1.cs)]\n [!code-vb[NCLServicePoint#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_15_1.vb)]\n [!code-cpp[NCLServicePoint#1](~/add/codesnippet/cpp/p-system.net.servicepoin_15_1.cpp)]"
  syntax:
    content: public int ConnectionLeaseTimeout { get; set; }
    return:
      type: System.Int32
      description: "A <xref:System.Int32>，它指定的毫秒数的活动<xref href=&quot;System.Net.ServicePoint&quot;></xref>连接会保持打开。</xref:System.Int32> 默认值为-1，这样活动<xref href=&quot;System.Net.ServicePoint&quot;></xref>连接继续无限期地连接。 将此属性设置为 0，以强制<xref href=&quot;System.Net.ServicePoint&quot;></xref>连接为请求提供服务后将其关闭。"
  overload: System.Net.ServicePoint.ConnectionLeaseTimeout*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "为集运算指定的值是小于-1 的负数。"
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionLimit
  id: ConnectionLimit
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
  fullName: System.Net.ServicePoint.ConnectionLimit
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置允许对此连接的最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  remarks: "ConnectionLimit 属性设置的最大连接数<xref:System.Net.ServicePoint>对象可以对 Internet 资源。</xref:System.Net.ServicePoint> ConnectionLimit 属性的值设置为值<xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A?displayProperty=fullName>属性时<xref:System.Net.ServicePoint>创建对象; 后续更改为<xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A>对现有没有影响<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A> </xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.DefaultConnectionLimit%2A?displayProperty=fullName>"
  example:
  - "The following code example uses the ConnectionLimit property to check the maximum number of connections that the <xref:System.Net.ServicePoint> object can make to the specified Uniform Resource Identifier (URI).  \n  \n [!code-cpp[System.Net.ServicePoint#4](~/add/codesnippet/cpp/p-system.net.servicepoin_6_1.cpp)]\n [!code-vb[System.Net.ServicePoint#4](~/add/codesnippet/visualbasic/p-system.net.servicepoin_6_1.vb)]\n [!code-cs[System.Net.ServicePoint#4](~/add/codesnippet/csharp/p-system.net.servicepoin_6_1.cs)]"
  syntax:
    content: public int ConnectionLimit { get; set; }
    return:
      type: System.Int32
      description: "允许对此连接的最大数<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  overload: System.Net.ServicePoint.ConnectionLimit*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "连接限制为等于或小于 0。"
  platform:
  - net462
- uid: System.Net.ServicePoint.ConnectionName
  id: ConnectionName
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
  fullName: System.Net.ServicePoint.ConnectionName
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取连接名。"
  remarks: "如果<xref:System.Net.ServicePoint>对象使用构造<xref:System.Uri>对象 (<xref:System.Net.ServicePointManager.FindServicePoint%2A>或<xref:System.Net.ServicePointManager.FindServicePoint%2A>方法，例如)，则该 ConnectionName 属性表示<xref:System.Uri.Scheme%2A>属性<xref:System.Uri>使用的对象。</xref:System.Uri> </xref:System.Uri.Scheme%2A> </xref:System.Net.ServicePointManager.FindServicePoint%2A> </xref:System.Net.ServicePointManager.FindServicePoint%2A> </xref:System.Uri> </xref:System.Net.ServicePoint>       如果<xref:System.Net.ServicePoint>对象从网络主机和端口构造，ConnectionName 属性包含一个字符串，表示主机和网络端口</xref:System.Net.ServicePoint> 如果从主机和端口，仅在构造时设置的 ConnectionName 属性<xref:System.Net.WebRequest>对象具有相同<xref:System.Net.WebRequest.ConnectionGroupName%2A>值可以使用此<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> </xref:System.Net.WebRequest.ConnectionGroupName%2A> </xref:System.Net.WebRequest>"
  example:
  - >-
    [!code-cpp[System.Net.ServicePoint#4](~/add/codesnippet/cpp/p-system.net.servicepoin_0_1.cpp)]
     [!code-vb[System.Net.ServicePoint#4](~/add/codesnippet/visualbasic/p-system.net.servicepoin_0_1.vb)]
     [!code-cs[System.Net.ServicePoint#4](~/add/codesnippet/csharp/p-system.net.servicepoin_0_1.cs)]
  syntax:
    content: public string ConnectionName { get; }
    return:
      type: System.String
      description: "A <xref:System.String>，它表示连接名称。</xref:System.String>"
  overload: System.Net.ServicePoint.ConnectionName*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.CurrentConnections
  id: CurrentConnections
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
  fullName: System.Net.ServicePoint.CurrentConnections
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取与此关联的打开连接数<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  remarks: "CurrentConnections 属性包含与此关联的打开 Internet 连接数<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> CurrentConnections 的值不能超出<xref:System.Net.ServicePoint.ConnectionLimit%2A>.</xref:System.Net.ServicePoint.ConnectionLimit%2A>"
  example:
  - "The following code example uses the CurrentConnections property to determine the number of open Internet connections associated with this <xref:System.Net.ServicePoint> object.  \n  \n [!code-cpp[System.Net.ServicePoint#2](~/add/codesnippet/cpp/p-system.net.servicepoin_2_1.cpp)]\n [!code-vb[System.Net.ServicePoint#2](~/add/codesnippet/visualbasic/p-system.net.servicepoin_2_1.vb)]\n [!code-cs[System.Net.ServicePoint#2](~/add/codesnippet/csharp/p-system.net.servicepoin_2_1.cs)]"
  syntax:
    content: public int CurrentConnections { get; }
    return:
      type: System.Int32
      description: "与此关联的打开连接数<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。"
  overload: System.Net.ServicePoint.CurrentConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.Expect100Continue
  id: Expect100Continue
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
  fullName: System.Net.ServicePoint.Expect100Continue
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置<xref:System.Boolean>值，该值确定是否 100-继续使用行为。</xref:System.Boolean>"
  remarks: "当此属性设置为`true`，客户端请求使用`POST`方法应该可以接收 100-继续从要指示客户端应发送要发布的数据的服务器的响应。 此机制允许客户端以避免通过网络发送大量数据时的服务器，根据请求标头，想要拒绝请求。       例如，假定 Expect100Continue 属性是`false`。 当请求发送到服务器时，它包括数据。 如果在读取请求标头之后, 在服务器要求身份验证和发送的 401 响应，客户端必须重新发送具有正确的身份验证标头的数据。       如果 Expect100Continue 属性为`true`，请求标头发送到服务器。 如果服务器不拒绝了请求，则将发送一个 100-继续响应信号可以传输数据。 如果如下所示前面的示例中，服务器需要身份验证，将它发送的 401 响应，客户端没有不必要地传输数据。       更改此属性的值不会影响现有连接。 仅会影响在更改后创建的新连接。       Expect 100-继续行为完全部分所述 IETF RFC 2616 10.1.1 一起提供。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#9](~/add/codesnippet/cpp/p-system.net.servicepoin_4_1.cpp)]\n [!code-vb[System.Net.ServicePoint#9](~/add/codesnippet/visualbasic/p-system.net.servicepoin_4_1.vb)]\n [!code-cs[System.Net.ServicePoint#9](~/add/codesnippet/csharp/p-system.net.servicepoin_4_1.cs)]"
  syntax:
    content: public bool Expect100Continue { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>需要 100-继续响应，则为<xref uid=&quot;langword_csharp_POST&quot; name=&quot;POST&quot; href=&quot;&quot;></xref>请求; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePoint.Expect100Continue*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.IdleSince
  id: IdleSince
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
  fullName: System.Net.ServicePoint.IdleSince
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取的日期和时间<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象上次连接到主机。"
  remarks: "IdleSince 属性记录上次的日期和时间主机中断开服务点。 当前时间和 IdleSince 之间的差异超过的值时<xref:System.Net.ServicePoint.MaxIdleTime%2A>、<xref:System.Net.ServicePoint>对象是可用于回收到另一个连接。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePoint.MaxIdleTime%2A>"
  example:
  - "The following code example uses the IdleSince property to set and retrieve the date and time that the <xref:System.Net.ServicePoint> object was last connected to a host.  \n  \n [!code-cpp[System.Net.ServicePoint#3](~/add/codesnippet/cpp/p-system.net.servicepoin_7_1.cpp)]\n [!code-vb[System.Net.ServicePoint#3](~/add/codesnippet/visualbasic/p-system.net.servicepoin_7_1.vb)]\n [!code-cs[System.Net.ServicePoint#3](~/add/codesnippet/csharp/p-system.net.servicepoin_7_1.cs)]"
  syntax:
    content: public DateTime IdleSince { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>对象，其中包含的日期和时间<xref href=&quot;System.Net.ServicePoint&quot;></xref>上次连接对象。</xref:System.DateTime>"
  overload: System.Net.ServicePoint.IdleSince*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.MaxIdleTime
  id: MaxIdleTime
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
  fullName: System.Net.ServicePoint.MaxIdleTime
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置与连接关联的时间量<xref href=&quot;System.Net.ServicePoint&quot;></xref>连接在关闭前可以保持空闲状态对象。"
  remarks: "你可以设置到 MaxIdleTime<xref:System.Threading.Timeout.Infinite?displayProperty=fullName>以指示连接是否与<xref:System.Net.ServicePoint>对象永远不应超时。</xref:System.Net.ServicePoint> </xref:System.Threading.Timeout.Infinite?displayProperty=fullName>       MaxIdleTime 属性的默认值是值<xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName>属性时<xref:System.Net.ServicePoint>创建对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A?displayProperty=fullName> 对后续更改<xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A>属性具有不会影响现有<xref:System.Net.ServicePoint>对象。</xref:System.Net.ServicePoint> </xref:System.Net.ServicePointManager.MaxServicePointIdleTime%2A>       为连接 MaxIdleTime 时与关联<xref:System.Net.ServicePoint>是超出，连接保持打开状态直到应用程序尝试使用该连接。</xref:System.Net.ServicePoint> 在那时，框架将关闭连接，并创建一个新连接到远程主机。"
  example:
  - "The following code example uses the MaxIdleTime property to set and retrieve the <xref:System.Net.ServicePoint> idle time.  \n  \n [!code-cpp[System.Net.ServicePoint#3](~/add/codesnippet/cpp/p-system.net.servicepoin_11_1.cpp)]\n [!code-vb[System.Net.ServicePoint#3](~/add/codesnippet/visualbasic/p-system.net.servicepoin_11_1.vb)]\n [!code-cs[System.Net.ServicePoint#3](~/add/codesnippet/csharp/p-system.net.servicepoin_11_1.cs)]"
  syntax:
    content: public int MaxIdleTime { get; set; }
    return:
      type: System.Int32
      description: "总时间，以毫秒为单位，与关联的连接<xref href=&quot;System.Net.ServicePoint&quot;></xref>之前关闭并重新用于另一个连接对象可保持空闲状态。"
  overload: System.Net.ServicePoint.MaxIdleTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "MaxIdleTime 设置为小于&lt;xref:System.Threading.Timeout.Infinite?displayProperty=fullName&gt;或大于&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Net.ServicePoint.ProtocolVersion
  id: ProtocolVersion
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
  fullName: System.Net.ServicePoint.ProtocolVersion
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取 HTTP 协议的版本<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象使用。"
  remarks: "HTTP 协议版本是 HTTP/1.0 和 HTTP/1.1。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_22_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_22_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_22_1.cs)]"
  syntax:
    content: public virtual Version ProtocolVersion { get; }
    return:
      type: System.Version
      description: "A<xref:System.Version>对象，其中包含的 HTTP 协议版本， <xref href=&quot;System.Net.ServicePoint&quot;> </xref>对象使用。</xref:System.Version>"
  overload: System.Net.ServicePoint.ProtocolVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
  fullName: System.Net.ServicePoint.ReceiveBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置由此使用的套接字的接收缓冲区的大小<xref href=&quot;System.Net.ServicePoint&quot;> </xref>。"
  remarks: "有关其他信息，请参阅<xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A>。</xref:System.Net.Sockets.Socket.ReceiveBufferSize%2A>"
  example:
  - "The following code example sets the value of this property.  \n  \n [!code-cs[NCLServicePoint#1](~/add/codesnippet/csharp/p-system.net.servicepoin_9_1.cs)]\n [!code-vb[NCLServicePoint#1](~/add/codesnippet/visualbasic/p-system.net.servicepoin_9_1.vb)]\n [!code-cpp[NCLServicePoint#1](~/add/codesnippet/cpp/p-system.net.servicepoin_9_1.cpp)]"
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    return:
      type: System.Int32
      description: "A<xref:System.Int32>包含以字节为单位的接收缓冲区的大小。</xref:System.Int32> 默认值为 8192。"
  overload: System.Net.ServicePoint.ReceiveBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "为集运算指定的值大于<xref:System.Int32>.</xref:System.Int32>"
  platform:
  - net462
- uid: System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  id: SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "启用或禁用 keep-alive 选项对 TCP 连接。"
  remarks: "应用程序可以请求 TCP/IP 提供程序启用的 TCP 连接上的保持连接数据包使用。 默认为禁用了 TCP 连接上的保持连接数据包的使用。       默认设置 TCP 套接字时初始化到 2 小时内保持活动状态设置超时和保持活动状态的间隔为 1 秒。 `keepAliveTime`参数指定超时，以毫秒为单位，发送第一个 keep-alive 数据包之前没有活动。 `keepAliveInterval`参数指定的间隔，以毫秒为单位，之间时收到任何确认消息时发送连续 keep-alive 数据包。 保持活动状态的探测数不能更改，并设置为 10。       如果 TCP 连接删除 keep-alive，因此<xref:System.Net.Sockets.SocketError>的<xref:System.Net.Sockets.SocketError>套接字，返回的任何正在进行的调用，任何后续调用将失败并<xref:System.Net.Sockets.SocketError>的<xref:System.Net.Sockets.SocketError>.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void SetTcpKeepAlive (bool enabled, int keepAliveTime, int keepAliveInterval);
    parameters:
    - id: enabled
      type: System.Boolean
      description: "如果设置为 true，然后 TCP keep-alive 选项对 TCP 连接将使用指定启用`keepAliveTime`和`keepAliveInterval`值。       如果设置为 false，然后 TCP keep-alive 选项被禁用，剩余的参数将被忽略。       默认值为 false。"
    - id: keepAliveTime
      type: System.Int32
      description: "指定超时，以毫秒为单位，发送第一个 keep-alive 数据包之前没有活动。       值必须大于 0。  如果传递的值小于或等于零<xref:System.ArgumentOutOfRangeException>引发。</xref:System.ArgumentOutOfRangeException>"
    - id: keepAliveInterval
      type: System.Int32
      description: "如果接收不到任何确认消息发送连续 keep-alive 数据包时，请指定的间隔，以毫秒为单位，之间。       值必须大于 0。  如果传递的值小于或等于零<xref:System.ArgumentOutOfRangeException>引发。</xref:System.ArgumentOutOfRangeException>"
  overload: System.Net.ServicePoint.SetTcpKeepAlive*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "为指定的值<code> keepAliveTime </code>或<code> keepAliveInterval </code>参数是否小于或等于 0。"
  platform:
  - net462
- uid: System.Net.ServicePoint.SupportsPipelining
  id: SupportsPipelining
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
  fullName: System.Net.ServicePoint.SupportsPipelining
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "指示是否<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象支持管道的连接。"
  remarks: "管道允许客户端发送的持续性连接跨多个请求，而无需等待来自服务器的每个响应。 已接收到请求，服务器的相同顺序发送响应。       IETF RFC 2616 8.1.2.2 部分中的详细描述管道。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#5](~/add/codesnippet/cpp/p-system.net.servicepoin_18_1.cpp)]\n [!code-vb[System.Net.ServicePoint#5](~/add/codesnippet/visualbasic/p-system.net.servicepoin_18_1.vb)]\n [!code-cs[System.Net.ServicePoint#5](~/add/codesnippet/csharp/p-system.net.servicepoin_18_1.cs)]"
  syntax:
    content: public bool SupportsPipelining { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象支持管道的连接; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePoint.SupportsPipelining*
  exceptions: []
  platform:
  - net462
- uid: System.Net.ServicePoint.UseNagleAlgorithm
  id: UseNagleAlgorithm
  parent: System.Net.ServicePoint
  langs:
  - csharp
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
  fullName: System.Net.ServicePoint.UseNagleAlgorithm
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取或设置<xref:System.Boolean>值，该值确定上管理此连接是否使用 Nagle 算法<xref href=&quot;System.Net.ServicePoint&quot;></xref>对象。</xref:System.Boolean>"
  remarks: "Nagle 算法用于缓冲的数据的小型数据包并将它们作为单个数据包传输。 此过程中，称为&quot;nagling&quot;广泛使用，因为它减少了传输数据包的数目，并降低了每个数据包的开销。       更改此属性的值不会影响现有连接。 仅会影响在更改后创建的新连接。       Nagle 算法完全述 IETF RFC 896。"
  example:
  - "The following code example displays the value of this property.  \n  \n [!code-cpp[System.Net.ServicePoint#9](~/add/codesnippet/cpp/p-system.net.servicepoin_16_1.cpp)]\n [!code-vb[System.Net.ServicePoint#9](~/add/codesnippet/visualbasic/p-system.net.servicepoin_16_1.vb)]\n [!code-cs[System.Net.ServicePoint#9](~/add/codesnippet/csharp/p-system.net.servicepoin_16_1.cs)]"
  syntax:
    content: public bool UseNagleAlgorithm { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要使用 Nagle 算法;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.ServicePoint.UseNagleAlgorithm*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.ServicePoint.Address
  parent: System.Net.ServicePoint
  isExternal: false
  name: Address
  nameWithType: ServicePoint.Address
  fullName: System.Net.ServicePoint.Address
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Net.ServicePoint.BindIPEndPointDelegate
  parent: System.Net.ServicePoint
  isExternal: false
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
  fullName: System.Net.ServicePoint.BindIPEndPointDelegate
- uid: System.Net.BindIPEndPoint
  parent: System.Net
  isExternal: false
  name: BindIPEndPoint
  nameWithType: BindIPEndPoint
  fullName: System.Net.BindIPEndPoint
- uid: System.Net.ServicePoint.Certificate
  parent: System.Net.ServicePoint
  isExternal: false
  name: Certificate
  nameWithType: ServicePoint.Certificate
  fullName: System.Net.ServicePoint.Certificate
- uid: System.Security.Cryptography.X509Certificates.X509Certificate
  parent: System.Security.Cryptography.X509Certificates
  isExternal: false
  name: X509Certificate
  nameWithType: X509Certificate
  fullName: System.Security.Cryptography.X509Certificates.X509Certificate
- uid: System.Net.ServicePoint.ClientCertificate
  parent: System.Net.ServicePoint
  isExternal: false
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
  fullName: System.Net.ServicePoint.ClientCertificate
- uid: System.Net.ServicePoint.CloseConnectionGroup(System.String)
  parent: System.Net.ServicePoint
  isExternal: false
  name: CloseConnectionGroup(String)
  nameWithType: ServicePoint.CloseConnectionGroup(String)
  fullName: System.Net.ServicePoint.CloseConnectionGroup(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
  fullName: System.Net.ServicePoint.ConnectionLeaseTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.ServicePoint.ConnectionLimit
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
  fullName: System.Net.ServicePoint.ConnectionLimit
- uid: System.Net.ServicePoint.ConnectionName
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
  fullName: System.Net.ServicePoint.ConnectionName
- uid: System.Net.ServicePoint.CurrentConnections
  parent: System.Net.ServicePoint
  isExternal: false
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
  fullName: System.Net.ServicePoint.CurrentConnections
- uid: System.Net.ServicePoint.Expect100Continue
  parent: System.Net.ServicePoint
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
  fullName: System.Net.ServicePoint.Expect100Continue
- uid: System.Net.ServicePoint.IdleSince
  parent: System.Net.ServicePoint
  isExternal: false
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
  fullName: System.Net.ServicePoint.IdleSince
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Net.ServicePoint.MaxIdleTime
  parent: System.Net.ServicePoint
  isExternal: false
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
  fullName: System.Net.ServicePoint.MaxIdleTime
- uid: System.Net.ServicePoint.ProtocolVersion
  parent: System.Net.ServicePoint
  isExternal: false
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
  fullName: System.Net.ServicePoint.ProtocolVersion
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Net.ServicePoint.ReceiveBufferSize
  parent: System.Net.ServicePoint
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
  fullName: System.Net.ServicePoint.ReceiveBufferSize
- uid: System.Net.ServicePoint.SetTcpKeepAlive(System.Boolean,System.Int32,System.Int32)
  parent: System.Net.ServicePoint
  isExternal: false
  name: SetTcpKeepAlive(Boolean,Int32,Int32)
  nameWithType: ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
  fullName: System.Net.ServicePoint.SetTcpKeepAlive(Boolean,Int32,Int32)
- uid: System.Net.ServicePoint.SupportsPipelining
  parent: System.Net.ServicePoint
  isExternal: false
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
  fullName: System.Net.ServicePoint.SupportsPipelining
- uid: System.Net.ServicePoint.UseNagleAlgorithm
  parent: System.Net.ServicePoint
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
  fullName: System.Net.ServicePoint.UseNagleAlgorithm
- uid: System.Net.ServicePoint.Address*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Address
  nameWithType: ServicePoint.Address
- uid: System.Net.ServicePoint.BindIPEndPointDelegate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: BindIPEndPointDelegate
  nameWithType: ServicePoint.BindIPEndPointDelegate
- uid: System.Net.ServicePoint.Certificate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Certificate
  nameWithType: ServicePoint.Certificate
- uid: System.Net.ServicePoint.ClientCertificate*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ClientCertificate
  nameWithType: ServicePoint.ClientCertificate
- uid: System.Net.ServicePoint.CloseConnectionGroup*
  parent: System.Net.ServicePoint
  isExternal: false
  name: CloseConnectionGroup
  nameWithType: ServicePoint.CloseConnectionGroup
- uid: System.Net.ServicePoint.ConnectionLeaseTimeout*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLeaseTimeout
  nameWithType: ServicePoint.ConnectionLeaseTimeout
- uid: System.Net.ServicePoint.ConnectionLimit*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionLimit
  nameWithType: ServicePoint.ConnectionLimit
- uid: System.Net.ServicePoint.ConnectionName*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ConnectionName
  nameWithType: ServicePoint.ConnectionName
- uid: System.Net.ServicePoint.CurrentConnections*
  parent: System.Net.ServicePoint
  isExternal: false
  name: CurrentConnections
  nameWithType: ServicePoint.CurrentConnections
- uid: System.Net.ServicePoint.Expect100Continue*
  parent: System.Net.ServicePoint
  isExternal: false
  name: Expect100Continue
  nameWithType: ServicePoint.Expect100Continue
- uid: System.Net.ServicePoint.IdleSince*
  parent: System.Net.ServicePoint
  isExternal: false
  name: IdleSince
  nameWithType: ServicePoint.IdleSince
- uid: System.Net.ServicePoint.MaxIdleTime*
  parent: System.Net.ServicePoint
  isExternal: false
  name: MaxIdleTime
  nameWithType: ServicePoint.MaxIdleTime
- uid: System.Net.ServicePoint.ProtocolVersion*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ProtocolVersion
  nameWithType: ServicePoint.ProtocolVersion
- uid: System.Net.ServicePoint.ReceiveBufferSize*
  parent: System.Net.ServicePoint
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: ServicePoint.ReceiveBufferSize
- uid: System.Net.ServicePoint.SetTcpKeepAlive*
  parent: System.Net.ServicePoint
  isExternal: false
  name: SetTcpKeepAlive
  nameWithType: ServicePoint.SetTcpKeepAlive
- uid: System.Net.ServicePoint.SupportsPipelining*
  parent: System.Net.ServicePoint
  isExternal: false
  name: SupportsPipelining
  nameWithType: ServicePoint.SupportsPipelining
- uid: System.Net.ServicePoint.UseNagleAlgorithm*
  parent: System.Net.ServicePoint
  isExternal: false
  name: UseNagleAlgorithm
  nameWithType: ServicePoint.UseNagleAlgorithm
