### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueTransaction
  id: MessageQueueTransaction
  children:
  - System.Messaging.MessageQueueTransaction.#ctor
  - System.Messaging.MessageQueueTransaction.Abort
  - System.Messaging.MessageQueueTransaction.Begin
  - System.Messaging.MessageQueueTransaction.Commit
  - System.Messaging.MessageQueueTransaction.Dispose
  - System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  - System.Messaging.MessageQueueTransaction.Finalize
  - System.Messaging.MessageQueueTransaction.Status
  langs:
  - csharp
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
  type: Class
  summary: "提供消息队列内部事务。"
  remarks: "若要发送或接收消息作为事务的一部分，可以使用 MessageQueueTransaction 类创建一个事务，并将其传递到的重载<xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName>方法或<xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName>采用的方法`transaction`参数。</xref:System.Messaging.MessageQueue.Receive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue.Send%2A?displayProperty=fullName> 作为事务一部分发送的消息必须发送到事务性队列。 必须使用指定的事务接收从事务性队列接收的消息。       除了<xref:System.Messaging.MessageQueue.Receive%2A>方法，你可以接收与指定的标识符或指定的相关标识符的消息。</xref:System.Messaging.MessageQueue.Receive%2A> 请参阅<xref:System.Messaging.MessageQueue.ReceiveById%2A>和<xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A>有关有选择地从事务性队列接收消息的详细信息的方法。</xref:System.Messaging.MessageQueue.ReceiveByCorrelationId%2A> </xref:System.Messaging.MessageQueue.ReceiveById%2A>       如果将提交事务不会发送到事务性队列的消息。 同样，从事务性队列接收的消息将返回到队列中，如果事务回滚。       如果实例化 MessageQueueTransaction 并将其传递给适用重载的<xref:System.Messaging.MessageQueue.Send%2A>方法或<xref:System.Messaging.MessageQueue.Receive%2A>发送到非事务性队列的消息或接收来自非事务性队列，该方法的消息的方法引发的异常，该值指示&quot;事务用法错误。&quot;</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue.Send%2A>       [Visual Basic]      MessageQueueTransaction 识别线程处理单元，因此，如果你的单元状态`STA`，不能在多个线程中使用的事务。 Visual Basic 将设置到的主线程的状态`STA`，因此您必须首先应用<xref:System.MTAThreadAttribute>中`Main`子例程。</xref:System.MTAThreadAttribute> 否则，发送事务性消息使用另一个线程将引发<xref:System.Messaging.MessageQueueException>异常。</xref:System.Messaging.MessageQueueException> 你将应用<xref:System.MTAThreadAttribute>通过使用下面的片段。</xref:System.MTAThreadAttribute>      ```   <System.MTAThreadAttribute>    public sub Main()   ```      ```vb#      ```"
  syntax:
    content: 'public class MessageQueueTransaction : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.#ctor
  id: '#ctor'
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新实例<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;></xref>类。"
  remarks: "此构造函数设置<xref:System.Messaging.MessageQueueTransaction.Status%2A>属性`Initialized`。</xref:System.Messaging.MessageQueueTransaction.Status%2A>"
  syntax:
    content: public MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Abort
  id: Abort
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "回滚挂起的内部事务。"
  remarks: "中止将标记为<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>调用开始的进程的未成功完成       通常情况下，一个方法调用了<xref:System.Messaging.MessageQueueTransaction.Begin%2A>内`Try...Catch`异常处理块中，将调用<xref:System.Messaging.MessageQueueTransaction.Commit%2A>中`Try`子句，并且在中止调用`Catch`子句。</xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>       中止回滚整个事务。 这包括发送或接收到<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>调用后的所有消息"
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Abort*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尝试回滚内部事务尚未开始。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "发生内部消息队列错误。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Begin
  id: Begin
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "开始新的消息队列内部事务。"
  remarks: "开始的标记的处理开始将提交或回滚，具体取决于成功的事务。 如果在处理期间发生异常，将回滚整个事务。 这包括所有消息发送或接收开始调用的后面。       通常情况下，一个将在开始调用`Try...Catch`异常处理块中，将调用<xref:System.Messaging.MessageQueueTransaction.Commit%2A>中`Try`子句，并且调用<xref:System.Messaging.MessageQueueTransaction.Abort%2A>中`Catch`子句。</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A>"
  syntax:
    content: public void Begin ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Begin*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已启动事务。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "发生内部消息队列错误。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Commit
  id: Commit
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "提交挂起的内部事务。"
  remarks: "提交标记处理始于<xref:System.Messaging.MessageQueueTransaction.Begin%2A>.</xref:System.Messaging.MessageQueueTransaction.Begin%2A>调用成功完成 如果在调用之间发生的异常<xref:System.Messaging.MessageQueueTransaction.Begin%2A>且的提交调用中，整个事务都会回滚。</xref:System.Messaging.MessageQueueTransaction.Begin%2A> 这包括发送或接收到<xref:System.Messaging.MessageQueueTransaction.Begin%2A>。</xref:System.Messaging.MessageQueueTransaction.Begin%2A>调用后的所有消息       通常情况下，一个方法调用了<xref:System.Messaging.MessageQueueTransaction.Begin%2A>内`Try...Catch`异常处理块中，将提交在调用`Try`子句，并且调用<xref:System.Messaging.MessageQueueTransaction.Abort%2A>中`Catch`子句。</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Commit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在尝试提交事务尚未开始。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "发生内部消息队列错误。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放使用的所有资源<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>。"
  remarks: "调用 Dispose 允许使用的资源<xref:System.Messaging.MessageQueueTransaction>可以重新分配用于其他目的。</xref:System.Messaging.MessageQueueTransaction> 有关详细信息`Dispose`，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)。       任何挂起的内部事务将回滚通过释放。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放由非托管的资源<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.Messaging.MessageQueueTransaction.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueTransaction.Dispose%2A> `Dispose`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Messaging.MessageQueueTransaction>引用。</xref:System.Messaging.MessageQueueTransaction> 此方法调用`Dispose`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Messaging.MessageQueueTransaction.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Finalize
  id: Finalize
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放由当前实例所持有的资源。"
  remarks: "此方法将替代<xref:System.Object.Finalize%2A?displayProperty=fullName>.</xref:System.Object.Finalize%2A?displayProperty=fullName> 应用程序代码不应调用此方法。对象的 Finalize 方法过程中将自动调用垃圾回收，除非已通过调用禁用垃圾回收器的终止<xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>方法。</xref:System.GC.SuppressFinalize%2A?displayProperty=fullName>       有关详细信息，请参阅[Finalize 方法和析构函数](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)，[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)，和[重写 Finalize 方法](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。"
  syntax:
    content: ~MessageQueueTransaction ();
    parameters: []
  overload: System.Messaging.MessageQueueTransaction.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueTransaction.Status
  id: Status
  parent: System.Messaging.MessageQueueTransaction
  langs:
  - csharp
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "获取事务的状态。"
  remarks: "实例时<xref:System.Messaging.MessageQueueTransaction>创建类，通过构造函数设置状态`Initialized`。</xref:System.Messaging.MessageQueueTransaction> 在调用<xref:System.Messaging.MessageQueueTransaction.Begin%2A>但在调用之前<xref:System.Messaging.MessageQueueTransaction.Commit%2A>或<xref:System.Messaging.MessageQueueTransaction.Abort%2A>，状态是`Pending`。</xref:System.Messaging.MessageQueueTransaction.Abort%2A> </xref:System.Messaging.MessageQueueTransaction.Commit%2A> </xref:System.Messaging.MessageQueueTransaction.Begin%2A>"
  syntax:
    content: public System.Messaging.MessageQueueTransactionStatus Status { get; }
    return:
      type: System.Messaging.MessageQueueTransactionStatus
      description: "之一<xref href=&quot;System.Messaging.MessageQueueTransactionStatus&quot;></xref>值，该值指示是否在事务在已提交，中止，初始化，或处于挂起状态。"
  overload: System.Messaging.MessageQueueTransaction.Status*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Messaging.MessageQueueTransaction.#ctor
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction()
  nameWithType: MessageQueueTransaction.MessageQueueTransaction()
  fullName: System.Messaging.MessageQueueTransaction.MessageQueueTransaction()
- uid: System.Messaging.MessageQueueTransaction.Abort
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort()
  nameWithType: MessageQueueTransaction.Abort()
  fullName: System.Messaging.MessageQueueTransaction.Abort()
- uid: System.Messaging.MessageQueueTransaction.Begin
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin()
  nameWithType: MessageQueueTransaction.Begin()
  fullName: System.Messaging.MessageQueueTransaction.Begin()
- uid: System.Messaging.MessageQueueTransaction.Commit
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit()
  nameWithType: MessageQueueTransaction.Commit()
  fullName: System.Messaging.MessageQueueTransaction.Commit()
- uid: System.Messaging.MessageQueueTransaction.Dispose
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueTransaction.Dispose()
  fullName: System.Messaging.MessageQueueTransaction.Dispose()
- uid: System.Messaging.MessageQueueTransaction.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueTransaction.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueTransaction.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueTransaction.Finalize
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize()
  nameWithType: MessageQueueTransaction.Finalize()
  fullName: System.Messaging.MessageQueueTransaction.Finalize()
- uid: System.Messaging.MessageQueueTransaction.Status
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
  fullName: System.Messaging.MessageQueueTransaction.Status
- uid: System.Messaging.MessageQueueTransactionStatus
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionStatus
  nameWithType: MessageQueueTransactionStatus
  fullName: System.Messaging.MessageQueueTransactionStatus
- uid: System.Messaging.MessageQueueTransaction.#ctor*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction.MessageQueueTransaction
- uid: System.Messaging.MessageQueueTransaction.Abort*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Abort
  nameWithType: MessageQueueTransaction.Abort
- uid: System.Messaging.MessageQueueTransaction.Begin*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Begin
  nameWithType: MessageQueueTransaction.Begin
- uid: System.Messaging.MessageQueueTransaction.Commit*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Commit
  nameWithType: MessageQueueTransaction.Commit
- uid: System.Messaging.MessageQueueTransaction.Dispose*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueTransaction.Dispose
- uid: System.Messaging.MessageQueueTransaction.Finalize*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Finalize
  nameWithType: MessageQueueTransaction.Finalize
- uid: System.Messaging.MessageQueueTransaction.Status*
  parent: System.Messaging.MessageQueueTransaction
  isExternal: false
  name: Status
  nameWithType: MessageQueueTransaction.Status
