### YamlMime:ManagedReference
items:
- uid: System.Speech.Synthesis.PromptBuilder
  id: PromptBuilder
  children:
  - System.Speech.Synthesis.PromptBuilder.#ctor
  - System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  - System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendBreak
  - System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  - System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  - System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  - System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  - System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  - System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  - System.Speech.Synthesis.PromptBuilder.ClearContent
  - System.Speech.Synthesis.PromptBuilder.Culture
  - System.Speech.Synthesis.PromptBuilder.EndParagraph
  - System.Speech.Synthesis.PromptBuilder.EndSentence
  - System.Speech.Synthesis.PromptBuilder.EndStyle
  - System.Speech.Synthesis.PromptBuilder.EndVoice
  - System.Speech.Synthesis.PromptBuilder.IsEmpty
  - System.Speech.Synthesis.PromptBuilder.StartParagraph
  - System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartSentence
  - System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  - System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  - System.Speech.Synthesis.PromptBuilder.ToXml
  langs:
  - csharp
  name: PromptBuilder
  nameWithType: PromptBuilder
  fullName: System.Speech.Synthesis.PromptBuilder
  type: Class
  summary: "创建一个空<xref href=&quot;System.Speech.Synthesis.Prompt&quot;></xref>对象，并为添加内容、 选择语音、 控件语音属性和控制朗读单词的发音提供方法。"
  remarks: "使用 PromptBuilder，你可以将不同的内容类型添加到的提示符下，包括纯文本、 SSML 标记 （作为字符串或文件），记录音频或甚至另一个 PromptBuilder 对象。       若要将文本追加到 PromptBuilder 对象以及 （可选） 控制语音属性，如强调、 速率和卷，请使用之一<xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>方法。</xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>  此外可以为具有的组来控制语音属性<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>和<xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>方法。</xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A> </xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>       你可以将文本追加和控制什么都说或它的发音使用如何<xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A>， <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A>，或<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>方法。</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A> </xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>       更改当前所选讲话声音在提示符处使用的重载之一<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>所需的方法，命名使用或指定特定语音语音特征，例如年龄和性别。</xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>       若要从 PromptBuilder 对象生成语音，你可以将其作为传递的自变量<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>方法。</xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>       有关详细信息，请参阅[构造复杂提示](http://msdn.microsoft.com/en-us/552cb356-7344-473e-b0f2-7a9983f8c1a4)。"
  syntax:
    content: public class PromptBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.#ctor
  id: '#ctor'
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: PromptBuilder()
  nameWithType: PromptBuilder.PromptBuilder()
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "创建的新实例<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>类。"
  remarks: ''
  example:
  - "The following example creates a new <xref:System.Speech.Synthesis.PromptBuilder> instance and adds a text string to it.  \n  \n```c#  \nusing System.Speech.Synthesis;  \n  \npublic void MySimpleText ()  \n{  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendText(\"Hello world!\");  \n}  \n```  \n  \n The following markup shows the equivalent in Speech Synthesis Markup Language (SSML), (`xml:lang` is a required attribute of the `speak` element):  \n  \n```xml  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">  \n  Hello world!  \n</speak>  \n```"
  syntax:
    content: public PromptBuilder ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  id: '#ctor(System.Globalization.CultureInfo)'
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: PromptBuilder(CultureInfo)
  nameWithType: PromptBuilder.PromptBuilder(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder(CultureInfo)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "创建的新实例<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>类并指定的区域性。"
  remarks: "此构造函数设置的值<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>属性。</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer>对象将尝试选择支持指定的语言已安装的语音`culture`参数来处理提示。</xref:System.Speech.Synthesis.SpeechSynthesizer> 如果找到与指定的区域性的声音，则将使用它。 如果找不到与指定的区域性的声音，则将使用默认语音。       若要正确发音中所指定的语言`culture`必须安装参数，语音合成 （文本到语音转换或 TTS） 引擎支持的语言。 已安装的 TTS 引擎称为语音。 若要获取有关特定区域性的哪些安装语音的信息，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法。</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows 和 System.Speech API 作为的值接受所有有效的语言-国家/地区代码`culture`。 随 Windows 7 的 TTS 引擎支持以下语言-国家/地区代码:-EN-US。 英语 （美国）-ZH-CN。 中文 （中国）-ZH-TW。 此外允许例如&quot;en&quot;中文 （台湾） 两个字母语言代码。"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies its <xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>.  \n  \n```c#  \nusing System.Speech.Synthesis;  \n  \npublic void MySimpleText ()  \n{  \n    PromptBuilder builder = new PromptBuilder(new System.Globalization.CultureInfo(\"en-US\"));  \n    builder.AppendText(\"Hello world!\");  \n}  \n```  \n  \n The following markup shows the equivalent SSML:  \n  \n```xml  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-US\">  \n  Hello world!  \n</speak>  \n```"
  syntax:
    content: public PromptBuilder (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "提供有关特定区域性，如其语言、 区域性、 书写系统、 使用的日历的名称以及如何设置日期和排序字符串的信息。"
  overload: System.Speech.Synthesis.PromptBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  id: AppendAudio(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(String)
  nameWithType: PromptBuilder.AppendAudio(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将为指定的音频文件追加<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>。"
  syntax:
    content: public void AppendAudio (string path);
    parameters:
    - id: path
      type: System.String
      description: "音频文件的完全限定的路径。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  id: AppendAudio(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(Uri)
  nameWithType: PromptBuilder.AppendAudio(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将对指定 URI 处的音频文件追加<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class and then adds text to it, followed by an audio file.  \n  \n```c#  \nusing System.Speech.PromptBuilder;  \n  \npublic void SimpleConcatenation()  \n{  \n    // Add a prompt fragment from a .wav file.  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendText(\"How are you today?\");  \n    builder.AppendAudio(new Uri (\"http://www.speech.microsoft.com/ding.wav\"));  \n}  \n```  \n  \n The following markup shows the equivalent SSML markup.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n       xmlns:ms=\"http://www.microsoft.com/speech/synthesis\" xml:lang=\"en\">  \n  \n  How are you today?  \n  <audio src=\"http://www.speech.microsoft.com/ding.wav\" />  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendAudio (Uri audioFile);
    parameters:
    - id: audioFile
      type: System.Uri
      description: "音频文件的 URI。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  id: AppendAudio(System.Uri,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendAudio(Uri,String)
  nameWithType: PromptBuilder.AppendAudio(Uri,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将指定的音频文件和备用文本追加<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>。"
  remarks: "如果无法播放音频文件进行语音合成引擎将通信的替换文字。"
  example:
  - "The following examples adds an audio file to a <xref:System.Speech.Synthesis.PromptBuilder> instance and specifies text to speak if the audio file cannot be played.  \n  \n```c#  \nusing System.Speech.PromptBuilder;  \n  \npublic void SimpleConcatenation()  \n{  \n  \n    // Concatenate a prompt fragment from a .wav file.  \n    PromptBuilder builder = new PromptBuilder ();  \n    builder.AppendAudio(new Uri (\"C:\\\\OnHold.wav\"), \"Your call will be answered in the order it was received\");  \n}  \n```  \n  \n The following markup shows the equivalent SSML markup.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n       xmlns:ms=\"http://www.microsoft.com/speech/synthesis\" xml:lang=\"en\">  \n  \n  <audio src=\"C:\\OnHold.wav\"> Your call will be answered in the order it was received. </audio>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendAudio (Uri audioFile, string alternateText);
    parameters:
    - id: audioFile
      type: System.Uri
      description: "音频文件的 URI。"
    - id: alternateText
      type: System.String
      description: "包含表示音频的备用文本的字符串。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  id: AppendBookmark(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBookmark(String)
  nameWithType: PromptBuilder.AppendBookmark(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBookmark(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将追加到书签<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "将生成语音合成引擎<xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>事件如果讲话提示符处，使用任一时遇到书签<xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>， <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>，或<xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A>方法。</xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> </xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached>"
  example:
  - "The following example creates a prompt that includes two bookmarks and sends the output to a WAV file for playback. The handler for the <xref:System.Speech.Synthesis.SpeechSynthesizer.BookmarkReached> event writes the name of the bookmark and its position in the audio stream when the event was raised to the console.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt and append bookmarks.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"The weather forecast for today is partly cloudy with some sun breaks.\");  \n        builder.AppendBookmark(\"Daytime forecast\");  \n        builder.AppendText(  \n          \"Tonight's weather will be cloudy with a 30% chance of showers.\");  \n        builder.AppendBookmark(\"Nightime forecast\");  \n  \n        // Add a handler for the BookmarkReached event.  \n        synth.BookmarkReached +=  \n          new EventHandler<BookmarkReachedEventArgs>(synth_BookmarkReached);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  \n    // Write the name and position of the bookmark to the console.  \n    static void synth_BookmarkReached(object sender, BookmarkReachedEventArgs e)  \n    {  \n      Console.WriteLine(\"Bookmark ({0}) reached at: {1} \",  \n        e.Bookmark, e.AudioPosition);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBookmark (string bookmarkName);
    parameters:
    - id: bookmarkName
      type: System.String
      description: "包含追加书签的名称的字符串。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendBookmark*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak
  id: AppendBreak
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak()
  nameWithType: PromptBuilder.AppendBreak()
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将中断添加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "此方法不指定中断的持续时间。 <xref:System.Speech.Synthesis.SpeechSynthesizer>将确定基于语言的上下文的持续时间值。</xref:System.Speech.Synthesis.SpeechSynthesizer>"
  example:
  - "The following example builds a prompt containing two sentences separated by a break and speaks the prompt to the default audio device on the computer.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45.\");  \n        builder.AppendBreak();  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:30, and 9:15.\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBreak ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  id: AppendBreak(System.Speech.Synthesis.PromptBreak)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak(PromptBreak)
  nameWithType: PromptBuilder.AppendBreak(PromptBreak)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(PromptBreak)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将中断添加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定其强度 （持续时间）。"
  remarks: "中的值<xref:System.Speech.Synthesis.PromptBreak>枚举表示的字边界之间的分离间隔 （暂停） 一个范围。</xref:System.Speech.Synthesis.PromptBreak> 语音合成引擎确定确切间隔持续时间的。 当请求中断时，这些值之一被传递到文本到语音转换 (TTS) 引擎，其中包含这些值与相应的毫秒中断值之间的映射。"
  example:
  - "The following example builds a prompt containing two sentences separated by a break and sends the output to a WAV file for playback.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45\");  \n        builder.AppendBreak(PromptBreak.Medium);  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendBreak (System.Speech.Synthesis.PromptBreak strength);
    parameters:
    - id: strength
      type: System.Speech.Synthesis.PromptBreak
      description: '指示持续时间的中断，使用以下增加值︰'
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  id: AppendBreak(System.TimeSpan)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendBreak(TimeSpan)
  nameWithType: PromptBuilder.AppendBreak(TimeSpan)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(TimeSpan)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将中断添加到指定的持续时间的<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "中断可以用于控制暂停或单词之间其他韵律边界。 分行符，则可选。 如果不存在中断，则合成确定具体取决于语言的上下文的单词之间中断。"
  example:
  - "The following example builds a prompt containing two sentences separated by a break of 15,000,000 ticks (1.5 seconds), and speaks the prompt to the default audio device on the computer.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt with two sentences separated by a break.  \n        PromptBuilder builder = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 8:45\");  \n        builder.AppendBreak(new TimeSpan(15000000));  \n        builder.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendBreak (TimeSpan duration);
    parameters:
    - id: duration
      type: System.TimeSpan
      description: "以刻度为单位，一个刻度等于 100 纳秒时间。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  id: AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendPromptBuilder(PromptBuilder)
  nameWithType: PromptBuilder.AppendPromptBuilder(PromptBuilder)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(PromptBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "追加<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>到另一个对象<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: ''
  example:
  - "The example that follows creates two <xref:System.Speech.Synthesis.PromptBuilder> instances and then appends them to a third <xref:System.Speech.Synthesis.PromptBuilder>.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\showtimes.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\showtimes.wav\");  \n  \n        // Build child prompts.  \n        PromptBuilder theatreA = new PromptBuilder();  \n        theatreA.AppendText(  \n          \"Tonight's movie showings in theater A are at 5:45, 7:15, and 9:30\");  \n        theatreA.AppendBreak(PromptBreak.Large);  \n        PromptBuilder theatreB = new PromptBuilder();  \n        theatreB.AppendText(  \n          \"Tonight's movie showings in theater B are at 5:15, 7:15, and 9:15\");  \n  \n        // Build the parent prompt and append the two child prompts.  \n        PromptBuilder showTimes = new PromptBuilder(  \n          new System.Globalization.CultureInfo(\"en-US\"));  \n        showTimes.AppendText(  \n          \"The following are the show times for tonight's movies:\");  \n        showTimes.AppendPromptBuilder(theatreA);  \n        showTimes.AppendPromptBuilder(theatreB);  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(showTimes);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendPromptBuilder (System.Speech.Synthesis.PromptBuilder promptBuilder);
    parameters:
    - id: promptBuilder
      type: System.Speech.Synthesis.PromptBuilder
      description: "要追加的内容。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  id: AppendSsml(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(String)
  nameWithType: PromptBuilder.AppendSsml(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将在指定路径的 SSML 文件追加<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "SSML 文件必须符合 XML 格式文件[语音合成标记语言 (SSML) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201763)规范。       也可以附加 SSML 标记，该字符串使用<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the AppendSsml method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a file that defines an SSML prompt.  \n        PromptBuilder ssmlFile = new PromptBuilder();  \n        ssmlFile.AppendSsml(\"c:\\\\test\\\\Weather.ssml\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(ssmlFile);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```  \n  \n The following is the SSML file that the preceding example references.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n xml:lang=\"en-US\">  \n  \n  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendSsml (string path);
    parameters:
    - id: path
      type: System.String
      description: "要追加的 SSML 文件完全限定的路径。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  id: AppendSsml(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(Uri)
  nameWithType: PromptBuilder.AppendSsml(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(Uri)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将对指定 URI 处的 SSML 文件追加<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "SSML 文件必须符合 XML 格式文件[语音合成标记语言 (SSML) 版本 1.0](http://www.w3.org/TR/speech-synthesis/)规范。       也可以附加 SSML 标记，该字符串使用<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends the contents of an SSML file using the AppendSsml method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a file that defines an SSML prompt.  \n        PromptBuilder ssmlFile = new PromptBuilder();  \n        ssmlFile.AppendSsml(new Uri(\"c:\\\\test\\\\Weather.ssml\"));  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(ssmlFile);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```  \n  \n The following is the SSML file that the preceding example references.  \n  \n```xml  \n<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>  \n<speak version=\"1.0\"  \n xmlns=\"http://www.w3.org/2001/10/synthesis\"  \n xml:lang=\"en-US\">  \n  \n  <s> The weather forecast for today is partly cloudy with some sun breaks. </s>  \n  \n</speak>  \n```"
  syntax:
    content: public void AppendSsml (Uri ssmlFile);
    parameters:
    - id: ssmlFile
      type: System.Uri
      description: "要追加的 SSML 文件的完全限定的 URI。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  id: AppendSsml(System.Xml.XmlReader)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsml(XmlReader)
  nameWithType: PromptBuilder.AppendSsml(XmlReader)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(XmlReader)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "追加`XMLReader`对象，它引用的 SSML 提示<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "SSML 文件必须符合 XML 格式文件[语音合成标记语言 (SSML) 版本 1.0](http://www.w3.org/TR/speech-synthesis/)规范。       也可以附加 SSML 标记，该字符串使用<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object from an <xref:System.Xml.XmlReader> object that references a file containing Speech Synthesis Markup Language (SSML) markup.  \n  \n```c#  \nusing System;  \nusing System.Xml;  \nusing System.IO;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToWaveFile(@\"C:\\test\\weather.wav\");  \n  \n        // Create a SoundPlayer instance to play the output audio file.  \n        System.Media.SoundPlayer m_SoundPlayer =  \n          new System.Media.SoundPlayer(@\"C:\\test\\weather.wav\");  \n  \n        // Create the path to the SSML file.  \n        string weatherFile = Path.GetFullPath(\"c:\\\\test\\\\Weather.xml\");  \n        PromptBuilder builder = null;  \n  \n        // Create an XML Reader from the file, create a PromptBuilder and   \n        // append the XmlReader.  \n        if (File.Exists(weatherFile))  \n        {  \n          XmlReader reader = XmlReader.Create(weatherFile);  \n          builder = new PromptBuilder();  \n          builder.AppendSsml(reader);  \n          reader.Close();  \n        }  \n  \n        // Speak the prompt and play back the output file.  \n        synth.Speak(builder);  \n        m_SoundPlayer.Play();  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendSsml (System.Xml.XmlReader ssmlFile);
    parameters:
    - id: ssmlFile
      type: System.Xml.XmlReader
      description: "要追加的 XML 文件的完全限定的名称。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  id: AppendSsmlMarkup(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendSsmlMarkup(String)
  nameWithType: PromptBuilder.AppendSsmlMarkup(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "追加指定的字符串包含 SSML 标记<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "You must use the appropriate escape characters when appending SSML markup. Notice the backward-slashes preceding the quotation marks enclosing the value of the `interpret-as` attribute in the following example:  \n  \n```c#  \nbuilder.AppendSsmlMarkup(\"<say-as interpret-as = \\\"characters\\\"> chair </say-as>\");  \n```  \n  \n> [!NOTE]\n>  The string used as an argument to AppendSsmlMarkup cannot include a `speak` element.  \n  \n When using AppendSsmlMarkup to specify inline pronunciations in a `phoneme` element, you can use phones from any of the following phonetic alphabets, provided that the current speech engine supports it:  \n  \n-   International Phonetic Alphabet (IPA)  \n  \n-   Universal Phone Set (UPS)  \n  \n-   SAPI Phone Set  \n  \n Any SSML-compliant speech engine will speak phones from the IPA.  \n  \n You can also append a file containing SSML markup using one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> methods. To append text to be spoken that is not formatted with markup language, use one of the <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, or <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> methods."
  syntax:
    content: public void AppendSsmlMarkup (string ssmlMarkup);
    parameters:
    - id: ssmlMarkup
      type: System.String
      description: "字符串包含 SSML 标记。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  id: AppendText(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String)
  nameWithType: PromptBuilder.AppendText(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定要追加到文本<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "若要将设置为 SSML 标记语言格式的文本追加，使用<xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>。</xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>"
  example:
  - "The example that follows creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends a text string using the AppendText method.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and append a text string.  \n        PromptBuilder speakText = new PromptBuilder();  \n        speakText.AppendText(\"Say the name of the song you want to hear\");  \n  \n        // Speak the contents of the prompt.  \n        synth.Speak(speakText);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendText (string textToSpeak);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "包含要发言文本的字符串。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  id: AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptEmphasis)
  nameWithType: PromptBuilder.AppendText(String,PromptEmphasis)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptEmphasis)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将文本追加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定文本的强调程度。"
  remarks: "Windows 中的语音合成引擎目前不支持强调参数。 设置强调参数的值将会产生任何声音更改合成的语音输出中。"
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptEmphasis emphasis);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "包含要发言文本的字符串。"
    - id: emphasis
      type: System.Speech.Synthesis.PromptEmphasis
      description: "强调或重音要应用于文本值。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  id: AppendText(System.String,System.Speech.Synthesis.PromptRate)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptRate)
  nameWithType: PromptBuilder.AppendText(String,PromptRate)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptRate)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将文本追加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定文本的语速。"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings. The example uses the AppendText method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder speakRate = new PromptBuilder();  \n        speakRate.AppendText(\"Your order for\");  \n        speakRate.AppendText(\"one kitchen sink and one faucet\", PromptRate.Slow);  \n        speakRate.AppendText(\"has been confirmed.\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(speakRate);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptRate rate);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "包含要发言文本的字符串。"
    - id: rate
      type: System.Speech.Synthesis.PromptRate
      description: "要应用于文本的语速值。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  id: AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendText(String,PromptVolume)
  nameWithType: PromptBuilder.AppendText(String,PromptVolume)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptVolume)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将文本追加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定要朗读该文本的卷。"
  remarks: "<xref:System.Speech.Synthesis.PromptVolume><xref:System.Speech.Synthesis.PromptVolume>是完整的卷，即<xref:System.Speech.Synthesis.PromptVolume>.</xref:System.Speech.Synthesis.PromptVolume>相同</xref:System.Speech.Synthesis.PromptVolume>的设置</xref:System.Speech.Synthesis.PromptVolume> 其他设置降低语音输出相对于完整的卷的卷。"
  example:
  - "The following example uses the AppendText method to specify volume settings that the <xref:System.Speech.Synthesis.SpeechSynthesizer> should apply to speech output.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Build a prompt that applies different volume settings.  \n        PromptBuilder builder = new PromptBuilder();  \n        builder.AppendText(\"This is the default speaking volume.\", PromptVolume.Default);  \n        builder.AppendBreak();  \n        builder.AppendText(\"This is the extra loud speaking volume.\", PromptVolume.ExtraLoud);  \n        builder.AppendBreak();  \n        builder.AppendText(\"This is the medium speaking volume.\", PromptVolume.Medium);  \n  \n        // Speak the prompt.  \n        synth.Speak(builder);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void AppendText (string textToSpeak, System.Speech.Synthesis.PromptVolume volume);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "包含要发言文本的字符串。"
    - id: volume
      type: System.Speech.Synthesis.PromptVolume
      description: "朗读音量 （响度） 要应用于文本值。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendText*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  id: AppendTextWithAlias(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithAlias(String,String)
  nameWithType: PromptBuilder.AppendTextWithAlias(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将文本追加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定位置的附加文本处朗读的别名文本。"
  remarks: "这允许文档包含读出和写入窗体提示。 例如，写入的形式可能是首字母缩写词，例如 SAPI，并且的口头的形式可能的首字母缩写，在此案例语音应用程序编程接口的扩展的文本。"
  example:
  - "The following example appends a text string (\"Speech Synthesis Markup Language\") and its alias (\"SSML\") to a <xref:System.Speech.Synthesis.PromptBuilder> object. The synthesizer will pronounce \"S S M L\".  \n  \n```  \nPromptBuilder alias = new PromptBuilder();  \nalias.AppendTextWithAlias(\"Speech Synthesis Markup Language\",\"SSML\");   \n```"
  syntax:
    content: public void AppendTextWithAlias (string textToSpeak, string substitute);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "包含的文本表示形式的字符串。"
    - id: substitute
      type: System.String
      description: "包含要发言文本的字符串。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  id: AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithHint(String,SayAs)
  nameWithType: PromptBuilder.AppendTextWithHint(String,SayAs)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,SayAs)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将文本追加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定使用的成员的内容类型<xref href=&quot;System.Speech.Synthesis.SayAs&quot;></xref>枚举。"
  remarks: "由指定的内容类型`sayAs`可以提供有关如何发音的内容的语音合成引擎指南`textToSpeak`。"
  example:
  - "```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and define the data types for some of the added strings.  \n        PromptBuilder sayAs = new PromptBuilder();  \n        sayAs.AppendText(\"Your\");  \n        sayAs.AppendTextWithHint(\"1st\", SayAs.NumberOrdinal);  \n        sayAs.AppendText(\"request was for\");  \n        sayAs.AppendTextWithHint(\"1\", SayAs.NumberCardinal);  \n        sayAs.AppendText(\"room, on\");  \n        sayAs.AppendTextWithHint(\"10/19/2012,\", SayAs.MonthDayYear);  \n        sayAs.AppendText(\"with early arrival at\");  \n        sayAs.AppendTextWithHint(\"12:35pm\", SayAs.Time12);  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(sayAs);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void AppendTextWithHint (string textToSpeak, System.Speech.Synthesis.SayAs sayAs);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "包含要发言文本的字符串。"
    - id: sayAs
      type: System.Speech.Synthesis.SayAs
      description: "该文本的内容类型。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  id: AppendTextWithHint(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithHint(String,String)
  nameWithType: PromptBuilder.AppendTextWithHint(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将文本追加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象和一个<xref:System.String>，它指定文本的内容类型。</xref:System.String>"
  remarks: "你可以使用此方法指定中未包括的内容类型<xref:System.Speech.Synthesis.SayAs>枚举。</xref:System.Speech.Synthesis.SayAs> 但是，TTS 引擎必须支持你指定的参数。"
  syntax:
    content: public void AppendTextWithHint (string textToSpeak, string sayAs);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "包含要发言文本的字符串。"
    - id: sayAs
      type: System.String
      description: "该文本的内容类型。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  id: AppendTextWithPronunciation(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: AppendTextWithPronunciation(String,String)
  nameWithType: PromptBuilder.AppendTextWithPronunciation(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "将文本追加到<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定文本的发音。"
  remarks: "The synthesizer speaks the contents of the `pronunciation` parameter, not the contents of the `textToSpeak` parameter.  \n  \n Pronunciations specified inline in prompts apply only to the individual occurrence of a word and override pronunciations of the speech engine or any of its currently active lexicons. Typically, you will use inline pronunciations for custom pronunciations of existing words or for pronunciation of uncommon words, such as proper names, which the speech synthesis engine may not pronounce as well as expected.  \n  \n Inline pronunciations must be specified using phones from the International Phonetic Alphabet (IPA). A phone is a letter or character that represents a discreet sound of speech. Speech engines that comply with the [Speech Synthesis Markup Language (SSML) Version 1.0](http://go.microsoft.com/fwlink/?LinkId=201763) specification will pronounce phones from the IPA. To specify inline pronunciations using other phonetic alphabets, see <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>.  \n  \n The IPA publishes a [chart](http://go.microsoft.com/fwlink/?LinkId=58362) that lists its phones and maps them to Unicode numbers.  \n  \n Some phones in the IPA alphabet have the same representations as letters in the Latin alphabet. In those cases, it is possible to type the Latin character and have the proper representation for a phone. Because the Latin characters as commonly used in text may represent several phones of the IPA phone set, simply typing the Latin character might not result in the precise IPA phone desired. Other phones of the IPA alphabet need to be represented in code as character references consisting of an ampersand (&), the number sign (#), and a Unicode number for the desired phone in hexadecimal or decimal, all followed by a semicolon (;). For example, a schwa (&\\#x0259;) would be represented by `ə`.  \n  \n To add new or custom pronunciations for multiple words, for example to express regional dialects or to add proper names or vocabulary that is specific to an educational or medical discipline, build a lexicon and add it to the <xref:System.Speech.Synthesis.SpeechSynthesizer> using <xref:System.Speech.Synthesis.SpeechSynthesizer.AddLexicon%2A>."
  example:
  - "The following example initializes a new instance of the <xref:System.Speech.Synthesis.PromptBuilder> class. It then appends the text string \"My name is\" to the instance. Finally, it appends a string containing the proper name \"DuBois\" and specifies the pronunciation of the name.  \n  \n```c#  \npublic void ProperName()  \n{  \n    PromptBuilder builder = new PromptBuilder();  \n    builder.AppendText(\"My name is\");  \n  \n    // Add a proper name and its pronunciation.  \n    builder.AppendTextWithPronunciation(\"DuBois\", \"duˈbwɑ\");     \n}  \n```  \n  \n The following markup shows the SSML that this <xref:System.Speech.Synthesis.PromptBuilder> object generates.  \n  \n```xml  \n<speak xmlns=\"http://www.w3.org/2001/10/synthesis\" xml:lang=\"en-us\">  \n  My name is <phoneme ph=\"duˈbwɑ\"> DuBois </phoneme>  \n</speak>  \n```"
  syntax:
    content: public void AppendTextWithPronunciation (string textToSpeak, string pronunciation);
    parameters:
    - id: textToSpeak
      type: System.String
      description: "包含单词使用语言传统字母表写入的形式的字符串。"
    - id: pronunciation
      type: System.String
      description: "包含要发言从国际音标 (IPA) 的手机的字符串。"
  overload: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent
  id: ClearContent
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: ClearContent()
  nameWithType: PromptBuilder.ClearContent()
  fullName: System.Speech.Synthesis.PromptBuilder.ClearContent()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "清除从内容<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  syntax:
    content: public void ClearContent ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.ClearContent*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.Culture
  id: Culture
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: Culture
  nameWithType: PromptBuilder.Culture
  fullName: System.Speech.Synthesis.PromptBuilder.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "获取或设置的区域性信息<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "The <xref:System.Speech.Synthesis.SpeechSynthesizer> object will attempt to select an installed voice that supports the language specified by the Culture property to process the prompt. If a voice with the specified culture is found, it will be used. If a voice with the specified culture cannot be found, the default voice will be used.  \n  \n A culture may also be specified within the prompt for discreet sections of content using the <xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, and <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A> methods. A culture specified for a portion of content using one of the above methods will override the Culture property while in effect, and the <xref:System.Speech.Synthesis.SpeechSynthesizer> will attempt to select an installed voice that supports the language specified by the `culture` parameter of the method.  \n  \n To correctly pronounce words in the language specified by the Culture property, a speech synthesis (text-to-speech or TTS) engine that supports the language must be installed. An installed TTS engine is called a voice. To get information about which voices are installed for a specific culture, use the <xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A> method.  \n  \n Microsoft Windows and the System.Speech API accept all valid language-country codes as values for `culture`. The TTS engines that shipped with Windows 7 support the following language-country codes:  \n  \n-   en-US. English (United States)  \n  \n-   zh-CN. Chinese (China)  \n  \n-   zh-TW. Chinese (Taiwan)  \n  \n Two-letter language codes such as \"en\" are also permitted.  See [Language Identifier Constants and Strings](http://msdn.microsoft.com/library/dd318693\\(VS.85\\).aspx) for a comprehensive list of language codes."
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "要添加。"
  overload: System.Speech.Synthesis.PromptBuilder.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph
  id: EndParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndParagraph()
  nameWithType: PromptBuilder.EndParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.EndParagraph()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定中的段落结束<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "如果它们分割为句子和段落长提示后，可以将其呈现为更像人工语音。 请参阅<xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>以举例。</xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>"
  syntax:
    content: public void EndParagraph ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence
  id: EndSentence
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndSentence()
  nameWithType: PromptBuilder.EndSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.EndSentence()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定中的句子的结束<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "如果它们分割为句子和段落长提示后，可以将其呈现为更像人工语音。 请参阅<xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>以举例。</xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>"
  syntax:
    content: public void EndSentence ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle
  id: EndStyle
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndStyle()
  nameWithType: PromptBuilder.EndStyle()
  fullName: System.Speech.Synthesis.PromptBuilder.EndStyle()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定中的样式结束<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "EndStyle 方法停止当前语速样式。 说话样式会恢复为生效之前已设置<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>方法启动一个新的语速样式。</xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A> 请参阅<xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>以举例。</xref:System.Speech.Synthesis.PromptBuilder.StartStyle%2A>"
  syntax:
    content: public void EndStyle ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice
  id: EndVoice
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: EndVoice()
  nameWithType: PromptBuilder.EndVoice()
  fullName: System.Speech.Synthesis.PromptBuilder.EndVoice()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定的中的语音使用结束<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "EndVoice 方法停止当前语音用于语音输出。 语音会恢复为生效之前已设置<xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>方法启动一个新的声音。</xref:System.Speech.Synthesis.PromptBuilder.StartVoice%2A>"
  syntax:
    content: public void EndVoice ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.EndVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty
  id: IsEmpty
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
  fullName: System.Speech.Synthesis.PromptBuilder.IsEmpty
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "获取是否<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>为空。"
  syntax:
    content: public bool IsEmpty { get; }
    return:
      type: System.Boolean
      description: "要添加。"
  overload: System.Speech.Synthesis.PromptBuilder.IsEmpty*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph
  id: StartParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartParagraph()
  nameWithType: PromptBuilder.StartParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定中的段落开始<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "如果它们分割为句子和段落长提示后，可以将其呈现为更像人工语音。"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content as paragraphs and sentences.  \n        PromptBuilder parSent = new PromptBuilder();  \n        parSent.StartParagraph();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"Introducing the sentence element.\");  \n        parSent.EndSentence();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"You can use it to mark individual sentences.\");  \n        parSent.EndSentence();  \n        parSent.EndParagraph();  \n        parSent.StartParagraph();  \n        parSent.AppendText(\"Another simple paragraph. Sentence structure in this paragraph\" +  \n          \"is not explicitly marked.\");  \n        parSent.EndParagraph();  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(parSent);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void StartParagraph ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  id: StartParagraph(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartParagraph(CultureInfo)
  nameWithType: PromptBuilder.StartParagraph(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定区域性中指定的段落开始<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "如果它们分割为句子和段落长提示后，可以将其呈现为更像人工语音。       `culture` ，段落的参数可以为不同于<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>属性的<xref:System.Speech.Synthesis.PromptBuilder>对象，该字符串包含它。</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> 实际上，而值`culture`参数将覆盖<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>属性。</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer>将尝试选择支持指定的语言已安装的语音`culture`参数进行沟通段落。</xref:System.Speech.Synthesis.SpeechSynthesizer> 如果找到与指定的区域性的声音，则将使用它。 如果找不到与指定的区域性的声音，则将使用默认语音。 若要停止使用的语音指定 StartParagraph，调用<xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>       若要正确发音中所指定的语言`culture`必须安装参数，语音合成 （文本到语音转换或 TTS） 引擎支持的语言。 已安装的 TTS 引擎称为语音。 若要获取有关特定区域性的哪些安装语音的信息，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法。</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows 和 System.Speech API 作为的值接受所有有效的语言-国家/地区代码`culture`。 随 Windows 7 的 TTS 引擎支持以下语言-国家/地区代码:-EN-US。 英语 （美国）-ZH-CN。 中文 （中国）-ZH-TW。 此外允许例如&quot;en&quot;中文 （台湾） 两个字母语言代码。"
  syntax:
    content: public void StartParagraph (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "提供有关特定区域性，如语言、 区域性、 书写系统、 使用的日历的名称以及如何设置日期和排序字符串的信息。"
  overload: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence
  id: StartSentence
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartSentence()
  nameWithType: PromptBuilder.StartSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定的中的句子开始<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "如果它们分割为句子和段落长提示后，可以将其呈现为更像人工语音。"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends content, and organizes the content into paragraphs and sentences.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content as paragraphs and sentences.  \n        PromptBuilder parSent = new PromptBuilder();  \n        parSent.StartParagraph();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"Introducing the sentence element.\");  \n        parSent.EndSentence();  \n        parSent.StartSentence();  \n        parSent.AppendText(\"You can use it to mark individual sentences.\");  \n        parSent.EndSentence();  \n        parSent.EndParagraph();  \n        parSent.StartParagraph();  \n        parSent.AppendText(\"Another simple paragraph. Sentence structure in this paragraph\" +  \n          \"is not explicitly marked.\");  \n        parSent.EndParagraph();  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(parSent);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void StartSentence ();
    parameters: []
  overload: System.Speech.Synthesis.PromptBuilder.StartSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  id: StartSentence(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartSentence(CultureInfo)
  nameWithType: PromptBuilder.StartSentence(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定区域性中指定的句子开始<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "如果它们分割为句子和段落长提示后，可以将其呈现为更像人工语音。       `culture`句子的参数可以为不同于`culture`参数包含句子的段落或<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>属性<xref:System.Speech.Synthesis.PromptBuilder>包含它们的对象。</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>       实际上，而值`culture`参数将覆盖<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>属性和`culture`参数包含句子的段落。</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer>将尝试选择支持指定的语言已安装的语音`culture`参数进行沟通句子。</xref:System.Speech.Synthesis.SpeechSynthesizer> 如果找到与指定的区域性的声音，则将使用它。 如果找不到与指定的区域性的声音，则将使用默认语音。 若要停止使用的语音指定 StartSentence，调用<xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A>       若要正确发音中所指定的语言`culture`必须安装参数，语音合成 （文本到语音转换或 TTS） 引擎支持的语言。 已安装的 TTS 引擎称为语音。 若要获取有关特定区域性的哪些安装语音的信息，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法。</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows 和 System.Speech API 作为的值接受所有有效的语言-国家/地区代码`culture`。 随 Windows 7 的 TTS 引擎支持以下语言-国家/地区代码:-EN-US。 英语 （美国）-ZH-CN。 中文 （中国）-ZH-TW。 此外允许例如&quot;en&quot;中文 （台湾） 两个字母语言代码。"
  syntax:
    content: public void StartSentence (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "提供有关特定区域性，如语言、 区域性、 书写系统、 使用的日历的名称以及如何设置日期和排序字符串的信息。"
  overload: System.Speech.Synthesis.PromptBuilder.StartSentence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  id: StartStyle(System.Speech.Synthesis.PromptStyle)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartStyle(PromptStyle)
  nameWithType: PromptBuilder.StartStyle(PromptStyle)
  fullName: System.Speech.Synthesis.PromptBuilder.StartStyle(PromptStyle)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指定起始位置中的样式<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象。"
  remarks: "StartStyle 方法采用<xref:System.Speech.Synthesis.PromptStyle>对象作为其参数。</xref:System.Speech.Synthesis.PromptStyle> 你可以使用的属性<xref:System.Speech.Synthesis.PromptStyle>对象以设置语速和卷 （响度） 将应用于语音输出实际上样式时的强调。</xref:System.Speech.Synthesis.PromptStyle> 若要停止使用当前的样式，调用<xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>方法。</xref:System.Speech.Synthesis.PromptBuilder.EndStyle%2A>      1> [!NOTE]&1;>-Windows 中的语音合成引擎目前不支持强调参数。 设置强调参数的值将会产生任何声音更改合成的语音输出中。   1>-<xref:System.Speech.Synthesis.PromptVolume><xref:System.Speech.Synthesis.PromptVolume>是完整的卷，即<xref:System.Speech.Synthesis.PromptVolume>.</xref:System.Speech.Synthesis.PromptVolume>相同</xref:System.Speech.Synthesis.PromptVolume>的设置</xref:System.Speech.Synthesis.PromptVolume> 其他设置降低语音输出相对于完整的卷的卷。"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object and appends text strings. The example uses the StartStyle method to specify a slow speaking rate for the string being added, which enumerates the contents of an order.  \n  \n```c#  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder style = new PromptBuilder();  \n        style.AppendText(\"Your order for\");  \n        style.StartStyle(new PromptStyle(PromptRate.Slow));  \n        style.AppendText(\"one kitchen sink and one faucet\");  \n        style.EndStyle();  \n        style.AppendText(\"has been confirmed.\");  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(style);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n```"
  syntax:
    content: public void StartStyle (System.Speech.Synthesis.PromptStyle style);
    parameters:
    - id: style
      type: System.Speech.Synthesis.PromptStyle
      description: "要启动的样式。"
  overload: System.Speech.Synthesis.PromptBuilder.StartStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  id: StartVoice(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(CultureInfo)
  nameWithType: PromptBuilder.StartVoice(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(CultureInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指示合成器更改中的语音<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定要使用的语音的区域性。"
  remarks: "`culture` StartVoice 参数可以是不同于<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>属性的<xref:System.Speech.Synthesis.PromptBuilder>对象，该字符串包含它。</xref:System.Speech.Synthesis.PromptBuilder> </xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>  实际上，而值`culture`参数将覆盖<xref:System.Speech.Synthesis.PromptBuilder.Culture%2A>属性。</xref:System.Speech.Synthesis.PromptBuilder.Culture%2A> <xref:System.Speech.Synthesis.SpeechSynthesizer>将尝试选择支持指定的语言已安装的语音`culture`参数进行沟通包围在 StartVoice 和<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>内容</xref:System.Speech.Synthesis.SpeechSynthesizer> 如果找到与指定的区域性的声音，则将使用它。 如果找不到与指定的区域性的声音，则将使用默认语音。 若要停止使用的语音指定 StartVoice，调用<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>       若要正确发音中所指定的语言`culture`必须安装参数，语音合成 （文本到语音转换或 TTS） 引擎支持的语言。 已安装的 TTS 引擎称为语音。 若要获取有关特定区域性的哪些安装语音的信息，请使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法。</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       Microsoft Windows 和 System.Speech API 作为的值接受所有有效的语言-国家/地区代码`culture`。 随 Windows 7 的 TTS 引擎支持以下语言-国家/地区代码:-EN-US。 英语 （美国）-ZH-CN。 中文 （中国）-ZH-TW。 此外允许例如&quot;en&quot;中文 （台湾） 两个字母语言代码。"
  syntax:
    content: public void StartVoice (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "提供有关特定区域性，如语言、 区域性、 书写系统、 使用的日历的名称以及如何设置日期和排序字符串的信息。"
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  id: StartVoice(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender)
  nameWithType: PromptBuilder.StartVoice(VoiceGender)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指示合成器更改中的语音<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定要使用的语音的性别。"
  remarks: "使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取的名称和属性的安装可以选择的文本到语音转换 (TTS) 语音。</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       若要停止使用的语音指定 StartVoice 调用<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "要使用的语音的性别。"
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  id: StartVoice(System.Speech.Synthesis.VoiceInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceInfo)
  nameWithType: PromptBuilder.StartVoice(VoiceInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceInfo)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指示合成器更改中的语音<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定为新的语音的条件。"
  remarks: "使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取的名称和属性的安装可以选择的文本到语音转换 (TTS) 语音。</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       若要停止使用的语音指定 StartVoice 调用<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceInfo voice);
    parameters:
    - id: voice
      type: System.Speech.Synthesis.VoiceInfo
      description: "有关要使用的语音的条件。"
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  id: StartVoice(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(String)
  nameWithType: PromptBuilder.StartVoice(String)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指示合成器更改中的语音<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定要使用的语音的名称。"
  remarks: "若要获取有关哪些安装语音的信息，请使用之一<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法。</xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       若要停止使用的语音指定 StartVoice 调用<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (string name);
    parameters:
    - id: name
      type: System.String
      description: "要使用的语音的名称。"
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  id: StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender,VoiceAge)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指示合成器更改中的语音<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定的性别和新的语音的年龄。"
  remarks: "使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取的名称和属性的安装可以选择的文本到语音转换 (TTS) 语音。</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       若要停止使用的语音指定 StartVoice 调用<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "要使用的新语音的性别。"
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "要使用的语音的年龄。"
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  id: StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: StartVoice(VoiceGender,VoiceAge,Int32)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "指示合成器更改中的语音<xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;></xref>对象，并指定其性别、 年龄以及与指定的性别和年龄匹配的首选的语音。"
  remarks: "语音合成引擎计算的匹配它发现指定的参数，并返回所选声音，当计数等于时`voiceAlternate`参数。       使用<xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>方法和<xref:System.Speech.Synthesis.VoiceInfo>类来获取的名称和属性的安装可以选择的文本到语音转换 (TTS) 语音。</xref:System.Speech.Synthesis.VoiceInfo> </xref:System.Speech.Synthesis.SpeechSynthesizer.GetInstalledVoices%2A>       若要停止使用的语音指定 StartVoice 调用<xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>.</xref:System.Speech.Synthesis.PromptBuilder.EndVoice%2A>"
  syntax:
    content: public void StartVoice (System.Speech.Synthesis.VoiceGender gender, System.Speech.Synthesis.VoiceAge age, int voiceAlternate);
    parameters:
    - id: gender
      type: System.Speech.Synthesis.VoiceGender
      description: "要使用的语音的性别。"
    - id: age
      type: System.Speech.Synthesis.VoiceAge
      description: "要使用的语音的年龄。"
    - id: voiceAlternate
      type: System.Int32
      description: "一个整数，当多个语音与匹配时指定首选的语音`gender`和`age`参数。"
  overload: System.Speech.Synthesis.PromptBuilder.StartVoice*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Synthesis.PromptBuilder.ToXml
  id: ToXml
  parent: System.Speech.Synthesis.PromptBuilder
  langs:
  - csharp
  name: ToXml()
  nameWithType: PromptBuilder.ToXml()
  fullName: System.Speech.Synthesis.PromptBuilder.ToXml()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Synthesis
  summary: "返回从生成的 SSML <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>对象。"
  remarks: "ToXml 方法使不尝试格式以任何方式返回的 SSML。"
  example:
  - "The following example creates a <xref:System.Speech.Synthesis.PromptBuilder> object, appends text, and then writes the SSML equivalent of the prompt to the console before speaking the contents of the prompt.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Synthesis;  \n  \nnamespace SampleSynthesis  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n    {  \n  \n      // Initialize a new instance of the SpeechSynthesizer.  \n      using (SpeechSynthesizer synth = new SpeechSynthesizer())  \n      {  \n  \n        // Configure the audio output.   \n        synth.SetOutputToDefaultAudioDevice();  \n  \n        // Create a PromptBuilder object and add content.  \n        PromptBuilder style = new PromptBuilder();  \n        style.AppendText(\"Your order for\");  \n        style.StartStyle(new PromptStyle(PromptRate.Slow));  \n        style.AppendText(\"one kitchen sink and one faucet\");  \n        style.EndStyle();  \n        style.AppendText(\"has been confirmed.\");  \n  \n        // Write the contents of the PromptBuilder object to the console as  \n        // an SSML-compatible XML file.  \n        string myXml = style.ToXml();  \n        Console.WriteLine(\"This is the SSML equivalent of the PromptBuilder: \\n\\n\" + myXml);  \n  \n        // Speak the contents of the SSML prompt.  \n        synth.Speak(style);  \n      }  \n  \n      Console.WriteLine();  \n      Console.WriteLine(\"Press any key to exit...\");  \n      Console.ReadKey();  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public string ToXml ();
    parameters: []
    return:
      type: System.String
      description: "返回从生成的 SSML <xref href=&quot;System.Speech.Synthesis.PromptBuilder&quot;> </xref>为单个行的对象。"
  overload: System.Speech.Synthesis.PromptBuilder.ToXml*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Synthesis.PromptBuilder.#ctor
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder()
  nameWithType: PromptBuilder.PromptBuilder()
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder()
- uid: System.Speech.Synthesis.PromptBuilder.#ctor(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder(CultureInfo)
  nameWithType: PromptBuilder.PromptBuilder(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.PromptBuilder(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(String)
  nameWithType: PromptBuilder.AppendAudio(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(Uri)
  nameWithType: PromptBuilder.AppendAudio(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio(System.Uri,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio(Uri,String)
  nameWithType: PromptBuilder.AppendAudio(Uri,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendAudio(Uri,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBookmark(String)
  nameWithType: PromptBuilder.AppendBookmark(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBookmark(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak()
  nameWithType: PromptBuilder.AppendBreak()
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak()
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.Speech.Synthesis.PromptBreak)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak(PromptBreak)
  nameWithType: PromptBuilder.AppendBreak(PromptBreak)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(PromptBreak)
- uid: System.Speech.Synthesis.PromptBreak
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptBreak
  nameWithType: PromptBreak
  fullName: System.Speech.Synthesis.PromptBreak
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak(System.TimeSpan)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak(TimeSpan)
  nameWithType: PromptBuilder.AppendBreak(TimeSpan)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendBreak(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(System.Speech.Synthesis.PromptBuilder)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendPromptBuilder(PromptBuilder)
  nameWithType: PromptBuilder.AppendPromptBuilder(PromptBuilder)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder(PromptBuilder)
- uid: System.Speech.Synthesis.PromptBuilder
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptBuilder
  nameWithType: PromptBuilder
  fullName: System.Speech.Synthesis.PromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(String)
  nameWithType: PromptBuilder.AppendSsml(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Uri)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(Uri)
  nameWithType: PromptBuilder.AppendSsml(Uri)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(Uri)
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml(System.Xml.XmlReader)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml(XmlReader)
  nameWithType: PromptBuilder.AppendSsml(XmlReader)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsml(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsmlMarkup(String)
  nameWithType: PromptBuilder.AppendSsmlMarkup(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String)
  nameWithType: PromptBuilder.AppendText(String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptEmphasis)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptEmphasis)
  nameWithType: PromptBuilder.AppendText(String,PromptEmphasis)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptEmphasis)
- uid: System.Speech.Synthesis.PromptEmphasis
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptEmphasis
  nameWithType: PromptEmphasis
  fullName: System.Speech.Synthesis.PromptEmphasis
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptRate)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptRate)
  nameWithType: PromptBuilder.AppendText(String,PromptRate)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptRate)
- uid: System.Speech.Synthesis.PromptRate
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptRate
  nameWithType: PromptRate
  fullName: System.Speech.Synthesis.PromptRate
- uid: System.Speech.Synthesis.PromptBuilder.AppendText(System.String,System.Speech.Synthesis.PromptVolume)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText(String,PromptVolume)
  nameWithType: PromptBuilder.AppendText(String,PromptVolume)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendText(String,PromptVolume)
- uid: System.Speech.Synthesis.PromptVolume
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptVolume
  nameWithType: PromptVolume
  fullName: System.Speech.Synthesis.PromptVolume
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithAlias(String,String)
  nameWithType: PromptBuilder.AppendTextWithAlias(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.Speech.Synthesis.SayAs)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint(String,SayAs)
  nameWithType: PromptBuilder.AppendTextWithHint(String,SayAs)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,SayAs)
- uid: System.Speech.Synthesis.SayAs
  parent: System.Speech.Synthesis
  isExternal: false
  name: SayAs
  nameWithType: SayAs
  fullName: System.Speech.Synthesis.SayAs
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint(String,String)
  nameWithType: PromptBuilder.AppendTextWithHint(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(System.String,System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithPronunciation(String,String)
  nameWithType: PromptBuilder.AppendTextWithPronunciation(String,String)
  fullName: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation(String,String)
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ClearContent()
  nameWithType: PromptBuilder.ClearContent()
  fullName: System.Speech.Synthesis.PromptBuilder.ClearContent()
- uid: System.Speech.Synthesis.PromptBuilder.Culture
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: Culture
  nameWithType: PromptBuilder.Culture
  fullName: System.Speech.Synthesis.PromptBuilder.Culture
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndParagraph()
  nameWithType: PromptBuilder.EndParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.EndParagraph()
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndSentence()
  nameWithType: PromptBuilder.EndSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.EndSentence()
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndStyle()
  nameWithType: PromptBuilder.EndStyle()
  fullName: System.Speech.Synthesis.PromptBuilder.EndStyle()
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndVoice()
  nameWithType: PromptBuilder.EndVoice()
  fullName: System.Speech.Synthesis.PromptBuilder.EndVoice()
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
  fullName: System.Speech.Synthesis.PromptBuilder.IsEmpty
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph()
  nameWithType: PromptBuilder.StartParagraph()
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph()
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph(CultureInfo)
  nameWithType: PromptBuilder.StartParagraph(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartParagraph(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence()
  nameWithType: PromptBuilder.StartSentence()
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence()
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence(CultureInfo)
  nameWithType: PromptBuilder.StartSentence(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartSentence(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle(System.Speech.Synthesis.PromptStyle)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartStyle(PromptStyle)
  nameWithType: PromptBuilder.StartStyle(PromptStyle)
  fullName: System.Speech.Synthesis.PromptBuilder.StartStyle(PromptStyle)
- uid: System.Speech.Synthesis.PromptStyle
  parent: System.Speech.Synthesis
  isExternal: false
  name: PromptStyle
  nameWithType: PromptStyle
  fullName: System.Speech.Synthesis.PromptStyle
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Globalization.CultureInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(CultureInfo)
  nameWithType: PromptBuilder.StartVoice(CultureInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(CultureInfo)
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender)
  nameWithType: PromptBuilder.StartVoice(VoiceGender)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender)
- uid: System.Speech.Synthesis.VoiceGender
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceGender
  nameWithType: VoiceGender
  fullName: System.Speech.Synthesis.VoiceGender
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceInfo)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceInfo)
  nameWithType: PromptBuilder.StartVoice(VoiceInfo)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceInfo)
- uid: System.Speech.Synthesis.VoiceInfo
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceInfo
  nameWithType: VoiceInfo
  fullName: System.Speech.Synthesis.VoiceInfo
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.String)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(String)
  nameWithType: PromptBuilder.StartVoice(String)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(String)
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender,VoiceAge)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge)
- uid: System.Speech.Synthesis.VoiceAge
  parent: System.Speech.Synthesis
  isExternal: false
  name: VoiceAge
  nameWithType: VoiceAge
  fullName: System.Speech.Synthesis.VoiceAge
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice(System.Speech.Synthesis.VoiceGender,System.Speech.Synthesis.VoiceAge,System.Int32)
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice(VoiceGender,VoiceAge,Int32)
  nameWithType: PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
  fullName: System.Speech.Synthesis.PromptBuilder.StartVoice(VoiceGender,VoiceAge,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Synthesis.PromptBuilder.ToXml
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ToXml()
  nameWithType: PromptBuilder.ToXml()
  fullName: System.Speech.Synthesis.PromptBuilder.ToXml()
- uid: System.Speech.Synthesis.PromptBuilder.#ctor*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: PromptBuilder
  nameWithType: PromptBuilder.PromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendAudio*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendAudio
  nameWithType: PromptBuilder.AppendAudio
- uid: System.Speech.Synthesis.PromptBuilder.AppendBookmark*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBookmark
  nameWithType: PromptBuilder.AppendBookmark
- uid: System.Speech.Synthesis.PromptBuilder.AppendBreak*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendBreak
  nameWithType: PromptBuilder.AppendBreak
- uid: System.Speech.Synthesis.PromptBuilder.AppendPromptBuilder*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendPromptBuilder
  nameWithType: PromptBuilder.AppendPromptBuilder
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsml*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsml
  nameWithType: PromptBuilder.AppendSsml
- uid: System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendSsmlMarkup
  nameWithType: PromptBuilder.AppendSsmlMarkup
- uid: System.Speech.Synthesis.PromptBuilder.AppendText*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendText
  nameWithType: PromptBuilder.AppendText
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithAlias
  nameWithType: PromptBuilder.AppendTextWithAlias
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithHint*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithHint
  nameWithType: PromptBuilder.AppendTextWithHint
- uid: System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: AppendTextWithPronunciation
  nameWithType: PromptBuilder.AppendTextWithPronunciation
- uid: System.Speech.Synthesis.PromptBuilder.ClearContent*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ClearContent
  nameWithType: PromptBuilder.ClearContent
- uid: System.Speech.Synthesis.PromptBuilder.Culture*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: Culture
  nameWithType: PromptBuilder.Culture
- uid: System.Speech.Synthesis.PromptBuilder.EndParagraph*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndParagraph
  nameWithType: PromptBuilder.EndParagraph
- uid: System.Speech.Synthesis.PromptBuilder.EndSentence*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndSentence
  nameWithType: PromptBuilder.EndSentence
- uid: System.Speech.Synthesis.PromptBuilder.EndStyle*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndStyle
  nameWithType: PromptBuilder.EndStyle
- uid: System.Speech.Synthesis.PromptBuilder.EndVoice*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: EndVoice
  nameWithType: PromptBuilder.EndVoice
- uid: System.Speech.Synthesis.PromptBuilder.IsEmpty*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: IsEmpty
  nameWithType: PromptBuilder.IsEmpty
- uid: System.Speech.Synthesis.PromptBuilder.StartParagraph*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartParagraph
  nameWithType: PromptBuilder.StartParagraph
- uid: System.Speech.Synthesis.PromptBuilder.StartSentence*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartSentence
  nameWithType: PromptBuilder.StartSentence
- uid: System.Speech.Synthesis.PromptBuilder.StartStyle*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartStyle
  nameWithType: PromptBuilder.StartStyle
- uid: System.Speech.Synthesis.PromptBuilder.StartVoice*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: StartVoice
  nameWithType: PromptBuilder.StartVoice
- uid: System.Speech.Synthesis.PromptBuilder.ToXml*
  parent: System.Speech.Synthesis.PromptBuilder
  isExternal: false
  name: ToXml
  nameWithType: PromptBuilder.ToXml
