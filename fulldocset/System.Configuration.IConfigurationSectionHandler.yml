### YamlMime:ManagedReference
items:
- uid: System.Configuration.IConfigurationSectionHandler
  id: IConfigurationSectionHandler
  children:
  - System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)
  langs:
  - csharp
  name: IConfigurationSectionHandler
  nameWithType: IConfigurationSectionHandler
  fullName: System.Configuration.IConfigurationSectionHandler
  type: Interface
  summary: "处理对特定的配置节的访问权限。"
  remarks: "**重要**IConfigurationSectionHandler 在.NET Framework 2.0 及以上版本已弃用。 但是，因为它在内部使用，而保留。 你可以找到处的一个示例[如何︰ 创建自定义配置节使用 IConfigurationSectionHandler](~/add/includes/ajax-current-ext-md.md)。 如果你使用前面的示例，请把它生成.NET framework 版本 1.0 或 1.1。       在.NET Framework 2.0 版和更高版本，你必须改为派生自<xref:System.Configuration.ConfigurationSection>类，以实现相关的配置节处理程序。</xref:System.Configuration.ConfigurationSection> 你可以找到处的一个示例[如何︰ 创建自定义配置节使用 ConfigurationSection](~/add/includes/ajax-current-ext-md.md)。       IConfigurationSectionHandler 类的实例必须是线程安全且无状态。 <xref:System.Configuration.IConfigurationSectionHandler.Create%2A>方法必须是可从多个线程调用同时。</xref:System.Configuration.IConfigurationSectionHandler.Create%2A>       此外，配置对象生成的<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>方法必须是线程安全且不可变。</xref:System.Configuration.IConfigurationSectionHandler.Create%2A> 配置对象将缓存由配置系统，因为很重要，不能修改的父参数<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>方法。</xref:System.Configuration.IConfigurationSectionHandler.Create%2A> 例如，如果返回值的<xref:System.Configuration.IConfigurationSectionHandler.Create%2A>是小进行修改的父级，必须在父，而不是原始的克隆上进行实际的修改。</xref:System.Configuration.IConfigurationSectionHandler.Create%2A>"
  syntax:
    content: public interface IConfigurationSectionHandler
  implements: []
  platform:
  - net462
- uid: System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)
  id: Create(System.Object,System.Object,System.Xml.XmlNode)
  parent: System.Configuration.IConfigurationSectionHandler
  langs:
  - csharp
  name: Create(Object,Object,XmlNode)
  nameWithType: IConfigurationSectionHandler.Create(Object,Object,XmlNode)
  fullName: System.Configuration.IConfigurationSectionHandler.Create(Object,Object,XmlNode)
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "创建一个配置节处理程序。"
  remarks: "实例<xref:System.Configuration.IConfigurationSectionHandler>类必须是线程安全且无状态。</xref:System.Configuration.IConfigurationSectionHandler> Create 方法必须同时是可从多个线程调用。       此外，由 Create 方法生成的配置对象必须是线程安全且不可变。 因为配置对象将缓存由配置系统，务必不能修改创建的父参数。 例如，如果创建的返回值是小修改的父级，必须在父，而不是原始的克隆上进行实际的修改。"
  syntax:
    content: public object Create (object parent, object configContext, System.Xml.XmlNode section);
    parameters:
    - id: parent
      type: System.Object
      description: "父对象。"
    - id: configContext
      type: System.Object
      description: "配置上下文对象。"
    - id: section
      type: System.Xml.XmlNode
      description: "部分 XML 节点。"
    return:
      type: System.Object
      description: "创建的部分处理程序对象。"
  overload: System.Configuration.IConfigurationSectionHandler.Create*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.IConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)
  parent: System.Configuration.IConfigurationSectionHandler
  isExternal: false
  name: Create(Object,Object,XmlNode)
  nameWithType: IConfigurationSectionHandler.Create(Object,Object,XmlNode)
  fullName: System.Configuration.IConfigurationSectionHandler.Create(Object,Object,XmlNode)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Xml.XmlNode
  parent: System.Xml
  isExternal: false
  name: XmlNode
  nameWithType: XmlNode
  fullName: System.Xml.XmlNode
- uid: System.Configuration.IConfigurationSectionHandler.Create*
  parent: System.Configuration.IConfigurationSectionHandler
  isExternal: false
  name: Create
  nameWithType: IConfigurationSectionHandler.Create
