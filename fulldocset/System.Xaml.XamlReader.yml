### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlReader
  id: XamlReader
  children:
  - System.Xaml.XamlReader.#ctor
  - System.Xaml.XamlReader.Close
  - System.Xaml.XamlReader.Dispose(System.Boolean)
  - System.Xaml.XamlReader.IsDisposed
  - System.Xaml.XamlReader.IsEof
  - System.Xaml.XamlReader.Member
  - System.Xaml.XamlReader.Namespace
  - System.Xaml.XamlReader.NodeType
  - System.Xaml.XamlReader.Read
  - System.Xaml.XamlReader.ReadSubtree
  - System.Xaml.XamlReader.SchemaContext
  - System.Xaml.XamlReader.Skip
  - System.Xaml.XamlReader.System#IDisposable#Dispose
  - System.Xaml.XamlReader.Type
  - System.Xaml.XamlReader.Value
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
  type: Class
  summary: "提供类使用的 XAML 输入并生成 XAML 节点流的基本的定义。"
  remarks: "Xamlreader 形式提供是一个抽象类，并不提供实现或定义具有工作结果的所有成员。 该成员的备注中注明了在 xamlreader 形式提供了实现的成员。 具体而言，xamlreader 形式提供具有多个必须实现的抽象成员和多个虚拟成员。       虚拟成员、<xref:System.Xaml.XamlReader.ReadSubtree%2A>和<xref:System.Xaml.XamlReader.Skip%2A>每提供适合于大多数情况下的默认实现。</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> 但是，<xref:System.Xaml.XamlReader.ReadSubtree%2A>和<xref:System.Xaml.XamlReader.Skip%2A>默认实现依赖于实现的 XAML 读取器的其他预期的行为; 具体而言，它们依赖于<xref:System.Xaml.XamlReader.Read%2A>重写。</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.ReadSubtree%2A> <xref:System.Xaml.XamlReader.Dispose%2A>也是有一个工作的默认实现的虚拟成员。</xref:System.Xaml.XamlReader.Dispose%2A>       以下两个类是最相关和实际派生的类在.NET Framework XAML 服务和 System.Xaml 程序集:- <xref:System.Xaml.XamlObjectReader>，其中读取对象图，如应用程序在运行时的活动对象图。</xref:System.Xaml.XamlObjectReader>      - <xref:System.Xaml.XamlXmlReader>，其中读取 XAML 形式的 XML 文本文件使用常规<xref:System.Xml.XmlReader>加载该文件作为中间的帮助器类。</xref:System.Xml.XmlReader> </xref:System.Xaml.XamlXmlReader>       从其他框架其他 XAML 读取器包括<xref:System.Windows.Baml2006.Baml2006Reader>和<xref:System.Activities.Debugger.XamlDebuggerXmlReader>.</xref:System.Activities.Debugger.XamlDebuggerXmlReader> </xref:System.Windows.Baml2006.Baml2006Reader>       Xamlreader 形式提供不同于[!INCLUDE[TLA#tla_xmldom](~/add/includes/tlasharptla-xmldom-md.md)]和<xref:System.Xml.XmlReader>设计原则，因为 xamlreader 形式提供没有`Create`方法以返回基础的默认 XAML 读取器实现。</xref:System.Xml.XmlReader> 通过调用其构造函数或其他特定于类的帮助器 Api，你必须改为实例化特定派生的 XAML 读取器类。      ## 读取器的子树在多数情况下，特定 XAML 读取器类的派生 xamlreader 形式提供的上下文中调用 xamlreader 形式提供 API。 但是，在一个特定的情况下，你访问 xamlreader 形式提供 API 上不是公用的且不派生自<xref:System.Xaml.XamlObjectReader>或<xref:System.Xaml.XamlXmlReader>。</xref:System.Xaml.XamlXmlReader></xref:System.Xaml.XamlObjectReader>的实际 XAML 读取器实例 在调用时，这种情况下是<xref:System.Xaml.XamlReader.ReadSubtree%2A>，它返回 xamlreader 形式提供实例。</xref:System.Xaml.XamlReader.ReadSubtree%2A> 在默认实现中，此 API 返回 xamlreader 形式提供是一个内部的类。       Xamlreader 形式提供获取子树读取具有有效的 Api 操作如<xref:System.Xaml.XamlReader.Read%2A>和<xref:System.Xaml.XamlReader.NodeType%2A>，并且这些操作基于父读取器类。</xref:System.Xaml.XamlReader.NodeType%2A> </xref:System.Xaml.XamlReader.Read%2A> 此设计允许内部的类，以跟踪子树输入其中的帧级别。 操作子树 xamlreader 形式提供可确保，如果当前节点位置移动到子树的边界之外，特定的子树读取器报告文件尾或`null`在当前节点。       有关子树读取器使用情况的说明都包括在某些 xamlreader 形式提供 Api。"
  syntax:
    content: 'public abstract class XamlReader : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化<xref href=&quot;System.Xaml.XamlReader&quot;></xref>类。"
  syntax:
    content: protected XamlReader ();
    parameters: []
  overload: System.Xaml.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Close
  id: Close
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "关闭 XAML 节点流。"
  remarks: "在基实现中，调用关闭调用<xref:System.Xaml.XamlReader.Dispose%2A>与`isDisposing`参数作为`true`。</xref:System.Xaml.XamlReader.Dispose%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Xaml.XamlReader.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "释放由非托管的资源<xref href=&quot;System.Xaml.XamlReader&quot;> </xref>，并可以选择释放托管的资源。"
  remarks: "必须调用基的类，以获取<xref:System.Xaml.XamlReader.IsDisposed%2A>= `true`。</xref:System.Xaml.XamlReader.IsDisposed%2A>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管的资源;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlReader.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsDisposed
  id: IsDisposed
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取是否<xref:System.Xaml.XamlReader.Dispose*>已调用。</xref:System.Xaml.XamlReader.Dispose*>"
  syntax:
    content: protected bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Xaml.XamlReader.Dispose*>调用; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Xaml.XamlReader.Dispose*>"
  overload: System.Xaml.XamlReader.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.IsEof
  id: IsEof
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，获取一个值，报告读取器位置是否位于文件结尾。"
  remarks: "子树读取器可以调用 IsEof，正确地反映了输入的子树的边界的行为。 有关详细信息，请参阅中的&quot;子树读取器&quot;一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool IsEof { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 XAML 节点流; 的概念-的文件末尾的位置否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlReader.IsEof*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Member
  id: Member
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，获取当前位于的成员的读取器位置，如果读取器位置位于<xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>。"
  remarks: "子树读取器可以使用行为限制调用成员。 有关详细信息，请参阅中的&quot;子树读取器&quot;一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlMember Member { get; }
    return:
      type: System.Xaml.XamlMember
      description: "当前的成员;或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果读取器位置不在成员上。"
  overload: System.Xaml.XamlReader.Member*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Namespace
  id: Namespace
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，获取从当前节点的 XAML 命名空间信息。"
  remarks: "此 API 的预期的设计是返回非 null 结果仅当<xref:System.Xaml.XamlReader.NodeType%2A>当前节点为<xref:System.Xaml.XamlNodeType>。</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlReader.NodeType%2A> 属性不会报告适用于成员在常规的作用域意义上或对象的 XAML 命名空间，根据下的 XAML 架构上下文的说明。 你的应用程序必须提供有关操作的缓存信息的一种手段 XAML 命名空间遍历 XAML 节点时，如果你需要该信息以外的 XAML 架构上下文如何到编写器报告它的方式。 请参阅<xref:System.Xaml.XamlXmlReader.Namespace%2A>了解说明的引用实现。</xref:System.Xaml.XamlXmlReader.Namespace%2A>"
  syntax:
    content: public abstract System.Xaml.NamespaceDeclaration Namespace { get; }
    return:
      type: System.Xaml.NamespaceDeclaration
      description: "XAML 命名空间信息，如果可用;否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlReader.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.NodeType
  id: NodeType
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，获取当前节点的类型。"
  remarks: "子树读取器可以调用 NodeType，行为限制。 有关详细信息，请参阅中的&quot;子树读取器&quot;一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlNodeType NodeType { get; }
    return:
      type: System.Xaml.XamlNodeType
      description: "值为<xref href=&quot;System.Xaml.XamlNodeType&quot;></xref>枚举。"
  overload: System.Xaml.XamlReader.NodeType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Read
  id: Read
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，提供来自源的下一个 XAML 节点，如果某个节点可用。"
  remarks: "子树读取器可以读取，调用行为限制。 有关详细信息，请参阅中的&quot;子树读取器&quot;一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract bool Read ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果某个节点可用;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlReader.Read*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.ReadSubtree
  id: ReadSubtree
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlReader&quot;></xref>基于当前<xref href=&quot;System.Xaml.XamlReader&quot;> </xref>，其中返回<xref href=&quot;System.Xaml.XamlReader&quot;></xref>用于循环访问的 XAML 节点结构的子树。"
  remarks: "此方法有一个默认实现，并返回有效的<xref:System.Xaml.XamlReader>.</xref:System.Xaml.XamlReader> 返回<xref:System.Xaml.XamlReader>是一个内部的类，用于限制某些<xref:System.Xaml.XamlReader>操作。</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> 限制都与仅读取维度子树的较大源的 XAML 节点集，并返回文件尾的以下目的一致或`null`在当前节点的子树退出时。       通常情况下，应检查当前节点从初始<xref:System.Xaml.XamlReader.Read%2A>以确定是否需要子树读取器。</xref:System.Xaml.XamlReader.Read%2A> 如何检查这可能是特定于实现的;但是，应避免创建多个子树读取器，用于每个子树。 此外，请避免调用某些节点情况下的子树读取器 (例如，对于<xref:System.Xaml.XamlNodeType>)，不能包含节点的子树。</xref:System.Xaml.XamlNodeType>       获取子树读取器之后，必须调用<xref:System.Xaml.XamlReader.Read%2A>于该功能来获取当前节点 (或调用<xref:System.Xaml.XamlReader.Skip%2A>以获取下一个节点)。</xref:System.Xaml.XamlReader.Skip%2A> </xref:System.Xaml.XamlReader.Read%2A> 未自动获得的初始节点位置从子树读取器创建它时。       通过从此默认实现调用 ReadSubtree 获取读取器是一个内部的类。 内部类的行为基于<xref:System.Xaml.XamlReader>调用 ReadSubtree 时正在使用的实现。</xref:System.Xaml.XamlReader> 内部类的用途是将<xref:System.Xaml.XamlReader.Read%2A>和常规遍历行为。</xref:System.Xaml.XamlReader.Read%2A> 遍历保持在预期的子树内通过跟踪<xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType>对或<xref:System.Xaml.XamlNodeType>/<xref:System.Xaml.XamlNodeType>对。</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> 它还正确返回`false`为<xref:System.Xaml.XamlReader.Read%2A>和`true`为<xref:System.Xaml.XamlReader.IsEof%2A>当读取器末尾的子树中，定义其入口点。</xref:System.Xaml.XamlReader.IsEof%2A> </xref:System.Xaml.XamlReader.Read%2A> 一般情况下，您假定任何<xref:System.Xaml.XamlReader>从子树读取器调用的 API 具有相同的实现整体<xref:System.Xaml.XamlReader>除外遍历绑定行为。</xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>       但是，ReadSubtree 是虚拟的。 因此，特定<xref:System.Xaml.XamlReader>实现可以提供与不同的行为<xref:System.Xaml.XamlReader>内部包装行为; 和<xref:System.Xaml.XamlReader>实现甚至可以通过返回禁用子树读取器功能<xref:System.NotImplementedException>或其他异常。</xref:System.NotImplementedException> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public virtual System.Xaml.XamlReader ReadSubtree ();
    parameters: []
    return:
      type: System.Xaml.XamlReader
      description: "子树新 XAML 读取器实例。"
  overload: System.Xaml.XamlReader.ReadSubtree*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.SchemaContext
  id: SchemaContext
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，获取一个对象，提供的信息集的 XAML 架构上下文信息。"
  syntax:
    content: public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }
    return:
      type: System.Xaml.XamlSchemaContext
      description: "一个对象，提供的信息的 XAML 架构上下文信息设置。"
  overload: System.Xaml.XamlReader.SchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Skip
  id: Skip
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "跳过当前节点并前进到下一个节点的读取器位置。"
  remarks: "一次跳过，<xref:System.Xaml.XamlReader.Read%2A>称为默认情况下跳过的实现。</xref:System.Xaml.XamlReader.Read%2A> 你通常不会调用 Skip 和<xref:System.Xaml.XamlReader.Read%2A>序列中。</xref:System.Xaml.XamlReader.Read%2A>       默认情况下跳过实现，具体取决于执行不同操作<xref:System.Xaml.XamlReader.NodeType%2A>读取器位置是当前位于。</xref:System.Xaml.XamlReader.NodeType%2A> 如果读取器位置是当前位于<xref:System.Xaml.XamlNodeType>或<xref:System.Xaml.XamlNodeType>，成员或对象将跳过。</xref:System.Xaml.XamlNodeType> </xref:System.Xaml.XamlNodeType> 对于其他<xref:System.Xaml.XamlReader.NodeType%2A>值，不执行任何操作之外调用<xref:System.Xaml.XamlReader.Read%2A>从当前位置。</xref:System.Xaml.XamlReader.Read%2A> </xref:System.Xaml.XamlReader.NodeType%2A>       子树读取器可以调用跳过，行为限制。 有关详细信息，请参阅中的&quot;子树读取器&quot;一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>       跳过的节点树行为取决于 XML 等效<xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>.</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName> 基于<xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>行为等效性，跳过跳过此节点及其子树，而不仅仅是一项节点。</xref:System.Xml.XmlReader.Skip%2A?displayProperty=fullName>"
  syntax:
    content: public virtual void Skip ();
    parameters: []
  overload: System.Xaml.XamlReader.Skip*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "释放当前实例所使用的所有资源<xref href=&quot;System.Xaml.XamlReader&quot;></xref>类。"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Xaml.XamlReader.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Type
  id: Type
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，获取<xref href=&quot;System.Xaml.XamlType&quot;></xref>当前节点。"
  remarks: "子树读取器可以调用类型，但行为存在限制。 有关详细信息，请参阅中的&quot;子树读取器&quot;一节<xref:System.Xaml.XamlReader>，或请参阅<xref:System.Xaml.XamlReader.ReadSubtree%2A>。</xref:System.Xaml.XamlReader.ReadSubtree%2A> </xref:System.Xaml.XamlReader>"
  syntax:
    content: public abstract System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>的当前节点; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果当前的读取器位置不在对象上。"
  overload: System.Xaml.XamlReader.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlReader.Value
  id: Value
  parent: System.Xaml.XamlReader
  langs:
  - csharp
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，获取当前节点的值。"
  syntax:
    content: public abstract object Value { get; }
    return:
      type: System.Object
      description: "当前节点; 的值或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果当前的读取器位置不在<xref href=&quot;System.Xaml.XamlNodeType&quot;></xref>节点类型。"
  overload: System.Xaml.XamlReader.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xaml.XamlReader.#ctor
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Xaml.XamlReader.XamlReader()
- uid: System.Xaml.XamlReader.Close
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close()
  nameWithType: XamlReader.Close()
  fullName: System.Xaml.XamlReader.Close()
- uid: System.Xaml.XamlReader.Dispose(System.Boolean)
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: XamlReader.Dispose(Boolean)
  fullName: System.Xaml.XamlReader.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlReader.IsDisposed
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
  fullName: System.Xaml.XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
  fullName: System.Xaml.XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
  fullName: System.Xaml.XamlReader.Member
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlReader.Namespace
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
  fullName: System.Xaml.XamlReader.Namespace
- uid: System.Xaml.NamespaceDeclaration
  parent: System.Xaml
  isExternal: false
  name: NamespaceDeclaration
  nameWithType: NamespaceDeclaration
  fullName: System.Xaml.NamespaceDeclaration
- uid: System.Xaml.XamlReader.NodeType
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
  fullName: System.Xaml.XamlReader.NodeType
- uid: System.Xaml.XamlNodeType
  parent: System.Xaml
  isExternal: false
  name: XamlNodeType
  nameWithType: XamlNodeType
  fullName: System.Xaml.XamlNodeType
- uid: System.Xaml.XamlReader.Read
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read()
  nameWithType: XamlReader.Read()
  fullName: System.Xaml.XamlReader.Read()
- uid: System.Xaml.XamlReader.ReadSubtree
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree()
  nameWithType: XamlReader.ReadSubtree()
  fullName: System.Xaml.XamlReader.ReadSubtree()
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Xaml.XamlReader.SchemaContext
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
  fullName: System.Xaml.XamlReader.SchemaContext
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlReader.Skip
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip()
  nameWithType: XamlReader.Skip()
  fullName: System.Xaml.XamlReader.Skip()
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: XamlReader.System.IDisposable.Dispose()
  fullName: System.Xaml.XamlReader.System.IDisposable.Dispose()
- uid: System.Xaml.XamlReader.Type
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
  fullName: System.Xaml.XamlReader.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlReader.Value
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
  fullName: System.Xaml.XamlReader.Value
- uid: System.Xaml.XamlReader.#ctor*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Xaml.XamlReader.Close*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Close
  nameWithType: XamlReader.Close
- uid: System.Xaml.XamlReader.Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Dispose
  nameWithType: XamlReader.Dispose
- uid: System.Xaml.XamlReader.IsDisposed*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsDisposed
  nameWithType: XamlReader.IsDisposed
- uid: System.Xaml.XamlReader.IsEof*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: IsEof
  nameWithType: XamlReader.IsEof
- uid: System.Xaml.XamlReader.Member*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Member
  nameWithType: XamlReader.Member
- uid: System.Xaml.XamlReader.Namespace*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Namespace
  nameWithType: XamlReader.Namespace
- uid: System.Xaml.XamlReader.NodeType*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: NodeType
  nameWithType: XamlReader.NodeType
- uid: System.Xaml.XamlReader.Read*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Read
  nameWithType: XamlReader.Read
- uid: System.Xaml.XamlReader.ReadSubtree*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: ReadSubtree
  nameWithType: XamlReader.ReadSubtree
- uid: System.Xaml.XamlReader.SchemaContext*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: SchemaContext
  nameWithType: XamlReader.SchemaContext
- uid: System.Xaml.XamlReader.Skip*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Skip
  nameWithType: XamlReader.Skip
- uid: System.Xaml.XamlReader.System#IDisposable#Dispose*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: XamlReader.System.IDisposable.Dispose
- uid: System.Xaml.XamlReader.Type*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Type
  nameWithType: XamlReader.Type
- uid: System.Xaml.XamlReader.Value*
  parent: System.Xaml.XamlReader
  isExternal: false
  name: Value
  nameWithType: XamlReader.Value
