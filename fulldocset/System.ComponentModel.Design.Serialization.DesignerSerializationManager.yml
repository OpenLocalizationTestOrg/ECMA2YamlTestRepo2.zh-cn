### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  id: DesignerSerializationManager
  children:
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor(System.IServiceProvider)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(System.String)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(System.Type)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)
  - System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes
  langs:
  - csharp
  name: DesignerSerializationManager
  nameWithType: DesignerSerializationManager
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  type: Class
  summary: "提供的实现<xref href=&quot;System.ComponentModel.Design.Serialization.IDesignerSerializationManager&quot;></xref>接口。"
  remarks: "<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>接口旨在作为控制序列化的对象的格式无关接口。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> 它实质上是为序列化程序实际执行反序列化提供上下文和服务。 <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>通过跟踪的对象，可帮助反序列化过程中。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> 这是在技术上与类似<xref:System.ComponentModel.Design.IDesignerHost>接口︰ 设计器实际提供用户界面 (UI) 和<xref:System.ComponentModel.Design.IDesignerHost>提供允许不同的设计器为协同工作起来的纽带。</xref:System.ComponentModel.Design.IDesignerHost> </xref:System.ComponentModel.Design.IDesignerHost>       DesignerSerializationManager 类实现<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager> 它旨在提供类似于运行时序列化程序，如<xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>.</xref:System.Runtime.Serialization.Formatters.Binary.BinaryFormatter>的反序列化的普通表单       DesignerSerializationManager 类来实现三个目标:-它是可以用于反序列化各种格式的简单、 完整对象。      -它是通用的不绑定到任何特定的格式。 它可以用于同样 CodeDOM 反序列化，以及标记反序列化。      -它是可扩展的并支持不同的序列化中使用的方法复制/粘贴和撤消/重做方案。       设计时序列化具有与运行时对象序列化的以下差异:-执行序列化的对象是通常独立于运行时对象，以便可以从组件中移除设计时逻辑。      的序列化方案假定将完全初始化，创建对象和反序列化期间修改通过属性和方法调用。      的不序列化对象的属性具有永远不会在 （属性包含默认值） 的对象设置的值。 相反，反序列化流可能会有漏洞。      的重点是在序列化流中，而不是完整的序列化的对象的内容的质量。 这意味着，如果没有定义的方法以序列化对象，该对象可能会跳过而不引发异常。 序列化引擎可能会提供试探法此处来决定可以忽略的失败以及哪些是不可恢复。      的序列化流可能具有更多的数据多于所需进行反序列化。 源的代码序列化，例如，具有混合在一起需反序列化对象图的代码的用户代码。 此用户代码必须忽略在反序列化，并可以保留在序列化。       由于这些差异，不同的序列化模型适用于设计时序列化。 此模型利用正在序列化每个数据类型的单独序列化程序对象。 每个序列化程序提供其对问题作为一个整体的小贡献。 这些序列化程序是所有常见的序列化管理器通过协调。 序列化管理器负责维护这些不同的序列化程序之间的状态。 作为示例，请考虑以下类︰ [!code-cs [System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#2](~/add/codesnippet/csharp/t-system.componentmodel._7_1.cs)][!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#2](~/add/codesnippet/visualbasic/t-system.componentmodel._7_1.vb) ]此类的实例将利用三个不同的序列化程序︰ 一个用于`SampleObject`，一个字符串，而另一个整数。   序列化程序进行`SampleObject`称作根序列化程序，因为`SampleObject`是序列化关系图的根。 也可以创建更复杂的对象图。 例如，考虑会发生什么情况如果`SampleObject`已更改，如下所示︰ [!code-cs [System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#11](~/add/codesnippet/csharp/t-system.componentmodel._7_2.cs)][!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#11](~/add/codesnippet/visualbasic/t-system.componentmodel._7_2.vb) ]这样`SampleObject`能够为其自身的另一个实例的子。   下面的代码填写对象图︰ [!code-cs [System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#12](~/add/codesnippet/csharp/t-system.componentmodel._7_3.cs)][!code-vb[System.ComponentModel.Design.Serialization.DesignerSerializationManager.SampleObject#12](~/add/codesnippet/visualbasic/t-system.componentmodel._7_3.vb) ]时`root`序列化时，将有四个序列化程序使用︰ 一个根序列化程序、 一个序列化程序的子`SampleObject`，一个序列化程序进行`int`，和一个序列化程序进行`string`。   序列化程序会缓存基于类型，因此无需创建的每个实例的序列化程序`SampleObject`。       在序列化会话的理论基础是 DesignerSerializationManager 类。 会话将保持可访问由各种序列化的状态。 当释放会话时，此状态将被销毁。 这有助于确保序列化程序保持很大程度上无状态，并有助于清理序列化程序是已损坏。 下表描述了如何为管理状态，并在会话之间。      ## 全局状态此状态归的序列化管理器对象，但独立于当前的序列化会话。      |对象 |使用情况 |  |------------|-----------|  |序列化提供程序 |对象可以将自己添加作为自定义序列化提供程序中。 这些提供程序中用于查找序列化程序，因为它们的生存期限超过序列化会话。 |     # # 会话拥有状态此状态由会话拥有并销毁会话时被销毁时。 因此，访问任何属性或将操作此状态的方法将引发异常，如果序列化管理器不在活动的会话中。      |对象 |使用情况 |  |------------|-----------|  |<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>事件 |<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>事件附加序列化程序来提供额外的名称解析。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> </xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName> 当会话终止时此事件与分离所有处理程序。 |  |<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete>事件 |<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete>释放会话之前，将引发事件。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> </xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SerializationComplete> 然后，此事件与分离所有处理程序。 |  |名称表 |序列化管理器维护对象和它们的名称之间映射的表。 序列化程序可以提供对象名称以便于识别。 此名称表中的内容会被清除，当会话终止时。 |  |序列化程序缓存 |序列化管理器可维护的缓存已被要求提供的序列化程序。 当会话终止时清除此缓存。 公共<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A>方法可以安全地调用任何时候，但仅当在一个会话中，从调用，其值被缓存。 |  |上下文堆栈 |序列化管理器维护对象称为上下文堆栈，你可以使用访问<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A>属性。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context%2A> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A> 序列化程序可以使用此堆栈来存储可供其他序列化程序的其他信息。 例如，序列化的属性值的序列化程序可以推送的属性名称序列化堆栈上之前询问要序列化的值。 此堆栈时终止该会话将被清除。 |  |错误列表 |序列化管理器维护在序列化过程中发生的错误的列表。 此列表中，可通过<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>时终止该会话属性，将被清除。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> 访问<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>会话之间的属性将导致异常。 |</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>"
  syntax:
    content: 'public class DesignerSerializationManager : IServiceProvider, System.ComponentModel.Design.Serialization.IDesignerSerializationManager'
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.Design.Serialization.IDesignerSerializationManager
  - System.IServiceProvider
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: DesignerSerializationManager()
  nameWithType: DesignerSerializationManager.DesignerSerializationManager()
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.DesignerSerializationManager()
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Design.Serialization.DesignerSerializationManager&quot;></xref>类。"
  remarks: "此构造函数设置<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>和<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>属性设置为`true`。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>"
  syntax:
    content: public DesignerSerializationManager ();
    parameters: []
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor(System.IServiceProvider)
  id: '#ctor(System.IServiceProvider)'
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: DesignerSerializationManager(IServiceProvider)
  nameWithType: DesignerSerializationManager.DesignerSerializationManager(IServiceProvider)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.DesignerSerializationManager(IServiceProvider)
  type: Constructor
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Design.Serialization.DesignerSerializationManager&quot;></xref>与给定的服务提供程序的类。"
  remarks: "如果序列化程序请求无法满足的序列化管理器的服务，默认实现将这些将请求转发到`provider`参数。       此构造函数设置<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>和<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>属性设置为`true`。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>"
  syntax:
    content: public DesignerSerializationManager (IServiceProvider provider);
    parameters:
    - id: provider
      type: System.IServiceProvider
      description: "An <xref:System.IServiceProvider>.</xref:System.IServiceProvider>"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>provider</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container
  id: Container
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: Container
  nameWithType: DesignerSerializationManager.Container
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取或设置此序列化管理器到容器。"
  remarks: "如果容器存在，则由序列化管理器创建的所有组件将都添加到容器中。 此属性的默认实现将搜索的服务提供程序<xref:System.ComponentModel.Design.IDesignerHost>并且使用提供的设计器宿主的容器，则应存在。</xref:System.ComponentModel.Design.IDesignerHost> 否则，此属性将返回`null`和没有安装组件将添加到容器。"
  syntax:
    content: public System.ComponentModel.IContainer Container { get; set; }
    return:
      type: System.ComponentModel.IContainer
      description: "<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>序列化管理器将向其添加组件。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "序列化管理器都提供一个活动的序列化会话。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  id: CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: CreateInstance(Type,ICollection,String,Boolean)
  nameWithType: DesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "创建类型的实例。"
  remarks: "在尝试创建一种类型的实例时，序列化程序通过调用此方法。 默认实现将创建该类型的新实例或者它可能返回现有实例的值决定<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A>和<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>属性。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames%2A> <xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>方法使用反射来创建实例，它将执行一些通用<xref:System.IConvertible>上查找匹配的构造函数的参数的转换。</xref:System.IConvertible> </xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance%2A>"
  syntax:
    content: protected virtual object CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);
    parameters:
    - id: type
      type: System.Type
      description: "要创建的实例的类型。"
    - id: arguments
      type: System.Collections.ICollection
      description: "该类型的构造函数的参数。 这可以是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或空集合，以调用默认构造函数。"
    - id: name
      type: System.String
      description: "要为该对象指定的名称。 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，该对象将不会获得一个名称，除非该对象添加到容器和容器为指定对象的名称。"
    - id: addToContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>将该对象添加到容器中，如果对象实现<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Object
      description: "由指定的类型的新实例<code> type </code>。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*
  exceptions:
  - type: System.Runtime.Serialization.SerializationException
    commentId: T:System.Runtime.Serialization.SerializationException
    description: "<code>type</code>没有的构造函数的参数中包含<code>arguments</code>。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession
  id: CreateSession
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: CreateSession()
  nameWithType: DesignerSerializationManager.CreateSession()
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession()
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "创建一个新的序列化会话。"
  remarks: "序列化管理器内的大多数数据是瞬态的并仅位于序列化会话的整个生命周期。 当释放会话时，序列化被视为可完成并清除此暂时性的状态。 这允许序列化管理器将使用序列化多个对象树的单个实例。 某些状态，包括服务提供程序和任何自定义序列化提供程序已添加到序列化管理器、 跨会话。"
  syntax:
    content: public IDisposable CreateSession ();
    parameters: []
    return:
      type: System.IDisposable
      description: "<xref:System.IDisposable>表示新的序列化会话。</xref:System.IDisposable>"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已在会话中是序列化管理器。 此版本的<xref href=&quot;System.ComponentModel.Design.Serialization.DesignerSerializationManager&quot;></xref>不支持同时会话。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors
  id: Errors
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: Errors
  nameWithType: DesignerSerializationManager.Errors
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取序列化或反序列化过程中发生的错误的列表。"
  remarks: "序列化会话处于活动状态时，你只能读取错误列表。"
  syntax:
    content: public System.Collections.IList Errors { get; }
    return:
      type: System.Collections.IList
      description: "在序列化或反序列化期间发生的错误的列表。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在序列化会话之外访问此属性。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(System.String)
  id: GetRuntimeType(System.String)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: GetRuntimeType(String)
  nameWithType: DesignerSerializationManager.GetRuntimeType(String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(String)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取对应于指定的类型名称的类型。"
  syntax:
    content: public Type GetRuntimeType (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "要获取的类型的名称。"
    return:
      type: System.Type
      description: "指定的类型。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)
  id: GetSerializer(System.Type,System.Type)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: GetSerializer(Type,Type)
  nameWithType: DesignerSerializationManager.GetSerializer(Type,Type)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(Type,Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取给定的对象类型的序列化程序。"
  remarks: "你可以请求你想要序列化程序的类型。 此方法返回`null`如果不没有指定的对象类型的请求类型的任何序列化程序。"
  syntax:
    content: public object GetSerializer (Type objectType, Type serializerType);
    parameters:
    - id: objectType
      type: System.Type
      description: "为其检索序列化程序的对象的类型。"
    - id: serializerType
      type: System.Type
      description: "要检索序列化程序的类型。"
    return:
      type: System.Object
      description: "序列化程序进行<code> objectType </code>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果找不到。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>objectType</code>or <code>serializerType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: DesignerSerializationManager.GetService(Type)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取请求的服务。"
  remarks: "GetService 方法提供对基础容器或服务提供程序在构造函数中设置的访问。"
  syntax:
    content: protected virtual object GetService (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "要检索的服务类型。"
    return:
      type: System.Object
      description: "请求的服务，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果无法解析服务。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)
  id: GetType(System.String)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: GetType(String)
  nameWithType: DesignerSerializationManager.GetType(String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(String)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取请求的类型。"
  remarks: "<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A>方法将搜索的服务提供程序<xref:System.ComponentModel.Design.ITypeResolutionService>并且，如果可用，它将委托给该服务解析类型。</xref:System.ComponentModel.Design.ITypeResolutionService> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> 如果<xref:System.ComponentModel.Design.ITypeResolutionService>不可用，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A>将调用<xref:System.Object.GetType%2A?displayProperty=fullName>方法。</xref:System.Object.GetType%2A?displayProperty=fullName> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType%2A> </xref:System.ComponentModel.Design.ITypeResolutionService>"
  syntax:
    content: protected virtual Type GetType (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "要检索的类型名称。"
    return:
      type: System.Type
      description: "请求的类型，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果类型不能解析。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)
  id: OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: OnResolveName(ResolveNameEventArgs)
  nameWithType: DesignerSerializationManager.OnResolveName(ResolveNameEventArgs)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(ResolveNameEventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "引发<xref href=&quot;System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 引发事件](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)。       OnResolveName 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected virtual void OnResolveName (System.ComponentModel.Design.Serialization.ResolveNameEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.Design.Serialization.ResolveNameEventArgs
      description: "A <xref href=&quot;System.ComponentModel.Design.Serialization.ResolveNameEventArgs&quot;> </xref>包含事件数据。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)
  id: OnSessionCreated(System.EventArgs)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: OnSessionCreated(EventArgs)
  nameWithType: DesignerSerializationManager.OnSessionCreated(EventArgs)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "引发<xref href=&quot;System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 引发事件](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)。       OnSessionCreated 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected virtual void OnSessionCreated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)
  id: OnSessionDisposed(System.EventArgs)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: OnSessionDisposed(EventArgs)
  nameWithType: DesignerSerializationManager.OnSessionDisposed(EventArgs)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(EventArgs)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "引发<xref href=&quot;System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 引发事件](http://msdn.microsoft.com/en-us/f2adaf01-1ed1-42e1-8c31-8d467e7e0ee2)。       OnSessionDisposed 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected virtual void OnSessionDisposed (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames
  id: PreserveNames
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: PreserveNames
  nameWithType: DesignerSerializationManager.PreserveNames
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取或设置一个值，该值指示是否<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*>方法应检查是否存在具有给定名称的容器中。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*>"
  remarks: "PreserveNames 属性确定的行为<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 如果`true`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将传递给定的组件名称。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 如果`false`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将检查是否存在具有给定名称的容器中。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 如果在容器中，不存在该名称<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将使用给定的名称。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 如果在容器中，存在名称<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将 null 值将作为传递组件的名称时将其添加到容器，从而为其指定新名称。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 此第二种变化可用于实现的序列化程序总是复制对象，而不是假定这些对象不存在。 粘贴命令通常使用这种类型的序列化程序。       当你不在序列化会话时，仅可以更改此属性。"
  syntax:
    content: public bool PreserveNames { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<> *1> 将传递给定的组件名称;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果<> *1> 将检查是否存在具有给定名称的容器中。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此属性已从更改中序列化会话。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider
  id: PropertyProvider
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: PropertyProvider
  nameWithType: DesignerSerializationManager.PropertyProvider
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取的对象，用于向序列化管理器提供属性<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*>属性。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*>"
  remarks: "PropertyProvider 属性使您能够为序列化管理器提供一组序列化程序可用于指导它们的行为的序列化属性。       将检查此对象的公共属性，并将其包装在新的属性描述符的具有目标对象的序列化管理器。"
  syntax:
    content: public object PropertyProvider { get; set; }
    return:
      type: System.Object
      description: "应该用于向序列化管理器提供属性的对象<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*>属性。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*>"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances
  id: RecycleInstances
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: RecycleInstances
  nameWithType: DesignerSerializationManager.RecycleInstances
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取或设置一个标志，指示是否<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*>将始终创建一种类型的新实例。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*>"
  remarks: "如果 RecycleInstances 属性为`false`、<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法将始终创建一种类型的新实例。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 如果 RecycleInstances `true`，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将首先搜索名称表以及具有相同名称的对象的容器。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 如果此类对象存在，并且是相同的类型，<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>将返回现有实例。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> 此第二种变化可用于实现的序列化程序将序列化状态应用到一组现有的对象，而不是始终创建一个新树。 **撤消**命令通常使用这种类型的序列化程序。       如果其中 RecycleInstances 属性是`true`、<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>属性进一步修改的行为<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>具体取决于两个对象的类型。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes%2A>"
  syntax:
    content: public bool RecycleInstances { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<> *1> 将返回现有的实例;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果<> *1> 将创建一种类型的新实例。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "序列化管理器都提供一个活动的序列化会话。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated
  id: SessionCreated
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: SessionCreated
  nameWithType: DesignerSerializationManager.SessionCreated
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "创建会话时发生。"
  syntax:
    content: public event EventHandler SessionCreated;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed
  id: SessionDisposed
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: SessionDisposed
  nameWithType: DesignerSerializationManager.SessionDisposed
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed
  type: Event
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "释放会话时发生。"
  syntax:
    content: public event EventHandler SessionDisposed;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "将自定义序列化提供程序添加到序列化管理器。"
  remarks: "当<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A>方法用于请求序列化提供程序、 序列化管理器查询首先之前寻找在该类型的元数据中相应的序列化程序的自定义序列化提供程序。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer%2A>"
  syntax:
    content: void IDesignerSerializationManager.AddSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);
    parameters:
    - id: provider
      type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
      description: "要添加的序列化提供程序。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取此序列化会话上下文堆栈。"
  remarks: "上下文堆栈提供一个用户定义的存储区域，作为堆栈实现。 此存储区是序列化是通常分层过程，将在序列化程序之间提供通信的有用方式。"
  syntax:
    content: System.ComponentModel.Design.Serialization.ContextStack System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context { get; }
    return:
      type: System.ComponentModel.Design.Serialization.ContextStack
      description: "A <xref href=&quot;System.ComponentModel.Design.Serialization.ContextStack&quot;> </xref>存储数据。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在序列化会话之外访问此属性。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "实现<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance*>方法。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance*>"
  syntax:
    content: object IDesignerSerializationManager.CreateInstance (Type type, System.Collections.ICollection arguments, string name, bool addToContainer);
    parameters:
    - id: type
      type: System.Type
      description: "要创建的数据类型。"
    - id: arguments
      type: System.Collections.ICollection
      description: "要为此类型传递给构造函数的参数。"
    - id: name
      type: System.String
      description: "对象的名称。 此名称可以用于访问对象，稍后通过<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*>.</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance*> 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>是传递时，对象仍会创建，但不能按名称访问。"
    - id: addToContainer
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要将此对象添加到设计容器。 该对象必须实现<xref href=&quot;System.ComponentModel.IComponent&quot;></xref>使这种方式产生任何影响。"
    return:
      type: System.Object
      description: "新创建的对象实例中。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "检索指定的名称对创建对象的实例。"
  syntax:
    content: object IDesignerSerializationManager.GetInstance (string name);
    parameters:
    - id: name
      type: System.String
      description: "要检索的对象的名称。"
    return:
      type: System.Object
      description: "具有给定名称的对象的实例或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到该名称没有任何对象。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在序列化会话之外访问此属性。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "检索指定对象的名称。"
  remarks: "如果 IDesignerSerializationManager.GetName 方法找不到的相应名称`value`参数，它会发出<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>事件之前它将返回`null`。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ResolveName>"
  syntax:
    content: string IDesignerSerializationManager.GetName (object value);
    parameters:
    - id: value
      type: System.Object
      description: "为其检索名称的对象。"
    return:
      type: System.String
      description: "对象的名称，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>未命名的对象是否。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在序列化会话之外访问此属性。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取指定的对象类型的请求类型的序列化程序。"
  syntax:
    content: object IDesignerSerializationManager.GetSerializer (Type objectType, Type serializerType);
    parameters:
    - id: objectType
      type: System.Type
      description: "要获取的序列化程序的对象的类型。"
    - id: serializerType
      type: System.Type
      description: "若要检索的序列化程序的类型。"
    return:
      type: System.Object
      description: "实例的请求序列化程序，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有相应的序列化程序可以位于。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取指定名称的类型。"
  syntax:
    content: Type IDesignerSerializationManager.GetType (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "要加载的类型完全限定的名称。"
    return:
      type: System.Type
      description: "类型的实例，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果无法加载此类型。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在序列化会话之外访问此属性。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "实现<xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*>属性。</xref:System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties*>"
  syntax:
    content: System.ComponentModel.PropertyDescriptorCollection System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties { get; }
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>包含要进行序列化的属性。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "移除以前添加的序列化提供程序。"
  remarks: "IDesignerSerializationManager.RemoveSerializationProvider 方法移除自定义序列化提供程序通过调用以前添加<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23AddSerializationProvider%2A>方法。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23AddSerializationProvider%2A>"
  syntax:
    content: void IDesignerSerializationManager.RemoveSerializationProvider (System.ComponentModel.Design.Serialization.IDesignerSerializationProvider provider);
    parameters:
    - id: provider
      type: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
      description: "<xref href=&quot;System.ComponentModel.Design.Serialization.IDesignerSerializationProvider&quot;> </xref>删除。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "用于序列化中将可恢复错误报告。"
  remarks: "序列化程序可以编写为通过调用具有错误信息的 IDesignerSerializationManager.ReportError 方法适当地处理可恢复的错误。 序列化管理器可能支持它完成，或它可能从此方法引发异常，中止序列化过程后报告的错误列表。 序列化程序应调用此函数后继续。       IDesignerSerializationManager.ReportError 添加`errorInformation`参数<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A>集合。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors%2A> 如果`errorInformation`是`null`，不执行任何操作。"
  syntax:
    content: void IDesignerSerializationManager.ReportError (object errorInformation);
    parameters:
    - id: errorInformation
      type: System.Object
      description: "一个包含错误的信息，通常的类型<xref:System.String>或<xref:System.Exception>。</xref:System.Exception></xref:System.String>对象"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在序列化会话之外访问此属性。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)
  id: System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "设置指定对象的名称。"
  remarks: "IDesignerSerializationManager.SetName 方法使您能够设置现有对象的名称。 这可以通过调用对象的实例创建<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetInstance%2A>方法，避免的开销<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.System%23ComponentModel%23Design%23Serialization%23IDesignerSerializationManager%23GetInstance%2A>"
  syntax:
    content: void IDesignerSerializationManager.SetName (object instance, string name);
    parameters:
    - id: instance
      type: System.Object
      description: "要设置的名称的对象。"
    - id: name
      type: System.String
      description: "A<xref:System.String>用作对象的名称。</xref:System.String>"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "一个或两个参数<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "已指定实例的对象具有一个名称，或<code> name </code>已由另一个已命名的对象。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在序列化会话之外访问此属性。"
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)
  id: System#IServiceProvider#GetService(System.Type)
  isEii: true
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: System.IServiceProvider.GetService(Type)
  nameWithType: DesignerSerializationManager.System.IServiceProvider.GetService(Type)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.IServiceProvider.GetService(Type)
  type: Method
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "有关此成员的说明，请参阅<xref:System.IServiceProvider.GetService*>方法。</xref:System.IServiceProvider.GetService*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager>实例被强制转换为<xref:System.IServiceProvider>接口。</xref:System.IServiceProvider> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager>"
  syntax:
    content: object IServiceProvider.GetService (Type serviceType);
    parameters:
    - id: serviceType
      type: System.Type
      description: "一个指定要获取的服务对象的类型的对象。"
    return:
      type: System.Object
      description: "类型的服务对象<code> serviceType </code>。       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>类型的服务对象是否<code> serviceType </code>。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes
  id: ValidateRecycledTypes
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  langs:
  - csharp
  name: ValidateRecycledTypes
  nameWithType: DesignerSerializationManager.ValidateRecycledTypes
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes
  type: Property
  assemblies:
  - System.Design
  namespace: System.ComponentModel.Design.Serialization
  summary: "获取或设置一个标志，指示是否<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*>方法将验证匹配名称表示为同一类型。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*>"
  remarks: "ValidateRecycledTypes 属性修改的行为<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>方法时<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A>属性是`true`，详见下表。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances%2A> </xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance%2A>      |`RecycleInstances`|`ValidateRecycledTypes`|行为`CreateInstance`|  |------------------------|-----------------------------|----------------------------------|  |`false`|`true` or `false`|始终创建指定类型的新实例 |  |`true`|`false`|如果找到匹配的实例，则返回它，而不考虑其类型。 |  |`true`|`true`|如果找到匹配的实例，则它返回仅当其类型为与指定的方法调用中相同。 |      ValidateRecycledTypes 可用于变形一种类型的对象与另一个对象，如果他们具有类似的属性，但共享没有公共父级或接口。"
  syntax:
    content: public bool ValidateRecycledTypes { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*>验证类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果它不。</xref:System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*> 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "序列化管理器都提供一个活动的序列化会话。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Runtime.Serialization.SerializationException
  isExternal: true
  name: System.Runtime.Serialization.SerializationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: DesignerSerializationManager()
  nameWithType: DesignerSerializationManager.DesignerSerializationManager()
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.DesignerSerializationManager()
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor(System.IServiceProvider)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: DesignerSerializationManager(IServiceProvider)
  nameWithType: DesignerSerializationManager.DesignerSerializationManager(IServiceProvider)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.DesignerSerializationManager(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: Container
  nameWithType: DesignerSerializationManager.Container
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: CreateInstance(Type,ICollection,String,Boolean)
  nameWithType: DesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: CreateSession()
  nameWithType: DesignerSerializationManager.CreateSession()
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession()
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: Errors
  nameWithType: DesignerSerializationManager.Errors
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(System.String)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: GetRuntimeType(String)
  nameWithType: DesignerSerializationManager.GetRuntimeType(String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType(String)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(System.Type,System.Type)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: GetSerializer(Type,Type)
  nameWithType: DesignerSerializationManager.GetSerializer(Type,Type)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer(Type,Type)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(System.Type)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: GetService(Type)
  nameWithType: DesignerSerializationManager.GetService(Type)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService(Type)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(System.String)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: GetType(String)
  nameWithType: DesignerSerializationManager.GetType(String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType(String)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(System.ComponentModel.Design.Serialization.ResolveNameEventArgs)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: OnResolveName(ResolveNameEventArgs)
  nameWithType: DesignerSerializationManager.OnResolveName(ResolveNameEventArgs)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName(ResolveNameEventArgs)
- uid: System.ComponentModel.Design.Serialization.ResolveNameEventArgs
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: ResolveNameEventArgs
  nameWithType: ResolveNameEventArgs
  fullName: System.ComponentModel.Design.Serialization.ResolveNameEventArgs
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(System.EventArgs)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: OnSessionCreated(EventArgs)
  nameWithType: DesignerSerializationManager.OnSessionCreated(EventArgs)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(System.EventArgs)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: OnSessionDisposed(EventArgs)
  nameWithType: DesignerSerializationManager.OnSessionDisposed(EventArgs)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed(EventArgs)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: PreserveNames
  nameWithType: DesignerSerializationManager.PreserveNames
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: PropertyProvider
  nameWithType: DesignerSerializationManager.PropertyProvider
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: RecycleInstances
  nameWithType: DesignerSerializationManager.RecycleInstances
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: SessionCreated
  nameWithType: DesignerSerializationManager.SessionCreated
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionCreated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: SessionDisposed
  nameWithType: DesignerSerializationManager.SessionDisposed
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.SessionDisposed
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider(IDesignerSerializationProvider)
- uid: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: IDesignerSerializationProvider
  nameWithType: IDesignerSerializationProvider
  fullName: System.ComponentModel.Design.Serialization.IDesignerSerializationProvider
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
- uid: System.ComponentModel.Design.Serialization.ContextStack
  parent: System.ComponentModel.Design.Serialization
  isExternal: false
  name: ContextStack
  nameWithType: ContextStack
  fullName: System.ComponentModel.Design.Serialization.ContextStack
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance(System.Type,System.Collections.ICollection,System.String,System.Boolean)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance(Type,ICollection,String,Boolean)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance(System.String)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance(String)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName(System.Object)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName(Object)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer(System.Type,System.Type)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer(Type,Type)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType(System.String)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType(String)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider(System.ComponentModel.Design.Serialization.IDesignerSerializationProvider)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider(IDesignerSerializationProvider)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError(System.Object)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError(Object)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName(System.Object,System.String)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName(Object,String)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService(System.Type)
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.IServiceProvider.GetService(Type)
  nameWithType: DesignerSerializationManager.System.IServiceProvider.GetService(Type)
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System.IServiceProvider.GetService(Type)
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: ValidateRecycledTypes
  nameWithType: DesignerSerializationManager.ValidateRecycledTypes
  fullName: System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.#ctor*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: DesignerSerializationManager
  nameWithType: DesignerSerializationManager.DesignerSerializationManager
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Container*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: Container
  nameWithType: DesignerSerializationManager.Container
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateInstance*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: CreateInstance
  nameWithType: DesignerSerializationManager.CreateInstance
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.CreateSession*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: CreateSession
  nameWithType: DesignerSerializationManager.CreateSession
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.Errors*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: Errors
  nameWithType: DesignerSerializationManager.Errors
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetRuntimeType*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: GetRuntimeType
  nameWithType: DesignerSerializationManager.GetRuntimeType
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetSerializer*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: GetSerializer
  nameWithType: DesignerSerializationManager.GetSerializer
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetService*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: GetService
  nameWithType: DesignerSerializationManager.GetService
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.GetType*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: GetType
  nameWithType: DesignerSerializationManager.GetType
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnResolveName*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: OnResolveName
  nameWithType: DesignerSerializationManager.OnResolveName
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionCreated*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: OnSessionCreated
  nameWithType: DesignerSerializationManager.OnSessionCreated
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.OnSessionDisposed*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: OnSessionDisposed
  nameWithType: DesignerSerializationManager.OnSessionDisposed
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PreserveNames*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: PreserveNames
  nameWithType: DesignerSerializationManager.PreserveNames
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.PropertyProvider*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: PropertyProvider
  nameWithType: DesignerSerializationManager.PropertyProvider
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.RecycleInstances*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: RecycleInstances
  nameWithType: DesignerSerializationManager.RecycleInstances
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#AddSerializationProvider*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.AddSerializationProvider
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Context*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Context
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#CreateInstance*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.CreateInstance
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetInstance*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetInstance
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetName*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetName
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetSerializer*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetSerializer
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#GetType*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.GetType
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#Properties*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.Properties
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#RemoveSerializationProvider*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.RemoveSerializationProvider
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#ReportError*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.ReportError
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#ComponentModel#Design#Serialization#IDesignerSerializationManager#SetName*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName
  nameWithType: DesignerSerializationManager.System.ComponentModel.Design.Serialization.IDesignerSerializationManager.SetName
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.System#IServiceProvider#GetService*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: System.IServiceProvider.GetService
  nameWithType: DesignerSerializationManager.System.IServiceProvider.GetService
- uid: System.ComponentModel.Design.Serialization.DesignerSerializationManager.ValidateRecycledTypes*
  parent: System.ComponentModel.Design.Serialization.DesignerSerializationManager
  isExternal: false
  name: ValidateRecycledTypes
  nameWithType: DesignerSerializationManager.ValidateRecycledTypes
