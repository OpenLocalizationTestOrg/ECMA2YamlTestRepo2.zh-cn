### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlBulkCopy
  id: SqlBulkCopy
  children:
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  - System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  - System.Data.SqlClient.SqlBulkCopy.BatchSize
  - System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  - System.Data.SqlClient.SqlBulkCopy.Close
  - System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  - System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  - System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  - System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  - System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  - System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  langs:
  - csharp
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy
  fullName: System.Data.SqlClient.SqlBulkCopy
  type: Class
  summary: "可以有效地大容量加载包含来自其他源的数据的 SQL Server 表。"
  remarks: "Microsoft SQL Server 包含名为常用命令提示实用工具**bcp**将数据从一个表移到另一个，无论是在上一台服务器或服务器之间。 SqlBulkCopy 类可以编写提供类似的功能的托管的代码解决方案。 还有其他方式将数据载入 SQL Server 表 （INSERT 语句，例如），但 SqlBulkCopy 提供了它们中有显著的性能优势。       SqlBulkCopy 类可以用于向 SQL Server 表中写入数据。 但是，数据源并不局限于 SQL Server;可以使用任何数据源，只要数据可以加载到<xref:System.Data.DataTable>实例，或浏览器进行<xref:System.Data.IDataReader>实例。</xref:System.Data.IDataReader> </xref:System.Data.DataTable>       SqlBulkCopy 将失败时大容量加载<xref:System.Data.DataTable>类型的列<xref:System.Data.SqlTypes.SqlDateTime>SQL Server 2008 中的类型是一种日期/时间类型列添加到 SQL Server。</xref:System.Data.SqlTypes.SqlDateTime> </xref:System.Data.DataTable>"
  example:
  - "The following console application demonstrates how to load data using the SqlBulkCopy class. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/t-system.data.sqlclient._9_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._9_1.vb)]"
  syntax:
    content: 'public sealed class SqlBulkCopy : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>类使用的指定打开实例<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>。"
  remarks: "因为连接已打开<xref:System.Data.SqlClient.SqlBulkCopy>初始化实例，连接会保持打开后<xref:System.Data.SqlClient.SqlBulkCopy>实例是否闭合。</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       如果`connection`自变量为 null，<xref:System.ArgumentNullException>引发。</xref:System.ArgumentNullException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. In this example, a <xref:System.Data.SqlClient.SqlDataReader> is used to copy data from the **Production.Product** table in the [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]**AdventureWorks** database to a similar table in the same database. This example is for demonstration purposes only. You would not use `SqlBulkCopy` to move data from one table to another in the same database in a production application. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks BulkCopy.Single#1](~/add/codesnippet/csharp/759c1349-38f0-4ca1-9e42-_1.cs)]\n [!code-vb[DataWorks BulkCopy.Single#1](~/add/codesnippet/visualbasic/759c1349-38f0-4ca1-9e42-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "已打开<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>将用于执行批量复制操作的实例。 如果你的连接字符串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，你可以使用<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>来传递用户 ID 和密码比更安全地将用户 ID 和密码指定为连接字符串中的文本。"
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化并打开的新实例<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>根据所提供<code> connectionString </code>。 此构造函数使用<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>类。"
  remarks: "在大容量复制操作的末尾自动关闭连接。       如果`connectionString`为 null，<xref:System.ArgumentNullException>引发。</xref:System.ArgumentNullException> 如果`connectionString`为空字符串，<xref:System.ArgumentException>引发。</xref:System.ArgumentException>"
  example:
  - "The following console application demonstrates how to bulk load data by using a connection specified as a string. The connection is automatically closed when the <xref:System.Data.SqlClient.SqlBulkCopy> instance is closed.  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public SqlBulkCopy (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "定义将打开以供连接的字符串<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>实例。 如果你的连接字符串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，你可以使用&lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt;或&lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt;和<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>来传递用户 ID 和密码比更安全地将用户 ID 和密码指定为连接字符串中的文本。"
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  id: '#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化并打开的新实例<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>根据所提供<code> connectionString </code>。 此构造函数使用<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>类。 <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>实例的行为中提供的选项取决于<code> copyOptions </code>参数。"
  remarks: "你可以获取有关中的所有大容量复制选项的详细的信息<xref:System.Data.SqlClient.SqlBulkCopyOptions>主题。</xref:System.Data.SqlClient.SqlBulkCopyOptions>"
  example:
  - "The following console application demonstrates how to perform a bulk load by using a connection specified as a string. An option is set to use the value in the identity column of the source table when you load the destination table. In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source table and destination table each include an Identity column. By default, a new value for the **Identity** column is generated in the destination table for each row added. In this example, an option is set when the connection is opened that forces the bulk load process to use the **Identity** values from the source table instead. To see how the option changes the way the bulk load works, run the sample with the **dbo.BulkCopyDemoMatchingColumns** table empty. All rows load from the source. Then run the sample again without emptying the table. An exception is thrown and the code writes a message to the console notifying you that rows weren't added because of primary key constraint violations.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/csharp/9a723f0e-d2b0-40de-a13f-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.KeepIdentity#1](~/add/codesnippet/visualbasic/9a723f0e-d2b0-40de-a13f-_1.vb)]"
  syntax:
    content: public SqlBulkCopy (string connectionString, System.Data.SqlClient.SqlBulkCopyOptions copyOptions);
    parameters:
    - id: connectionString
      type: System.String
      description: "定义将打开以供连接的字符串<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>实例。 如果你的连接字符串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，你可以使用&lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt;或&lt;xref:System.Data.SqlClient.SqlBulkCopy.%23ctor%2A&gt;和<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>来传递用户 ID 和密码比更安全地将用户 ID 和密码指定为连接字符串中的文本。"
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "从值的组合<xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;></xref>确定将哪些数据源行复制到目标表的枚举。"
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  id: '#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)'
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>类使用的提供的现有打开实例<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>。 <xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;> </xref>实例的行为中提供的选项取决于<code> copyOptions </code>参数。 如果非 null <xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;> </xref>是提供，则复制操作将执行在该事务中。"
  remarks: "如果选项包括`UseInternalTransaction`和`externalTransaction`自变量不为 null， **InvalidArgumentException**引发。       有关示例演示如何使用`SqlBulkCopy`在事务中，请参阅[事务和批量复制操作](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public SqlBulkCopy (System.Data.SqlClient.SqlConnection connection, System.Data.SqlClient.SqlBulkCopyOptions copyOptions, System.Data.SqlClient.SqlTransaction externalTransaction);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "已打开<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>将用于执行大容量复制的实例。 如果你的连接字符串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，你可以使用<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>来传递用户 ID 和密码比更安全地将用户 ID 和密码指定为连接字符串中的文本。"
    - id: copyOptions
      type: System.Data.SqlClient.SqlBulkCopyOptions
      description: "从值的组合<xref href=&quot;System.Data.SqlClient.SqlBulkCopyOptions&quot;></xref>确定将哪些数据源行复制到目标表的枚举。"
    - id: externalTransaction
      type: System.Data.SqlClient.SqlTransaction
      description: "现有<xref href=&quot;System.Data.SqlClient.SqlTransaction&quot;></xref>实例下将执行大容量复制。"
  overload: System.Data.SqlClient.SqlBulkCopy.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  id: BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "每个批中的行数。 在每个批的结束时，则将批处理中的行发送到服务器。"
  remarks: "当处理完 BatchSize 行或更多的行发送到目标数据源时，一批已完成。       零 （默认值） 指示每个<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作是单个批处理。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       如果<xref:System.Data.SqlClient.SqlBulkCopy>实例已声明但<xref:System.Data.SqlClient.SqlBulkCopyOptions>选项生效，行发送到服务器 BatchSize 行一次，但不执行任何与事务相关的操作。</xref:System.Data.SqlClient.SqlBulkCopyOptions> </xref:System.Data.SqlClient.SqlBulkCopy> 如果<xref:System.Data.SqlClient.SqlBulkCopyOptions>实际上，是作为单独的事务插入的行的每个批处理。</xref:System.Data.SqlClient.SqlBulkCopyOptions>       BatchSize 属性可以在任何时间设置。 如果大容量复制已在进行中，当前批的大小根据上一批大小。 后续的批次使用的新大小。 如果 BatchSize 最初为零和更改时<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作正在进行，操作将作为单个批处理数据加载。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 任何后续<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>对相同操作<xref:System.Data.SqlClient.SqlBulkCopy>实例使用新的 BatchSize。</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>"
  example:
  - "The following console application demonstrates how to bulk load data in batches of 50 rows. For an example illustrating how BatchSize works with a transaction, see [Transaction and Bulk Copy Operations](~/add/includes/ajax-current-ext-md.md).  \n  \n In this example, the source data is first read from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/csharp/p-system.data.sqlclient._2_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.BatchSize#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._2_1.vb)]"
  syntax:
    content: public int BatchSize { get; set; }
    return:
      type: System.Int32
      description: "BatchSize 属性或为零的整数值不设置任何值。"
  overload: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  id: BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "操作完成之前超时秒数。"
  remarks: "如果该操作不超时，也不会提交事务，并从目标表中删除所有复制的行。"
  example:
  - "The following console application demonstrates how to modify the time-out to 60 seconds when bulk loading data.  \n  \n In this example, the source data is first read from a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] instance, it is easier and faster to use a [!INCLUDE[tsql](~/add/includes/tsql-md.md)]`INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._14_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Timeout#1](~/add/codesnippet/csharp/p-system.data.sqlclient._14_1.cs)]"
  syntax:
    content: public int BulkCopyTimeout { get; set; }
    return:
      type: System.Int32
      description: "BulkCopyTimeout 属性的整数值。 默认值为 30 秒。 值为 0 表示没有限制;大容量复制将无限期等待。"
  overload: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  id: Close
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "关闭<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>实例。"
  remarks: "你对调用关闭后<xref:System.Data.SqlClient.SqlBulkCopy>对象，没有其他操作将会成功。</xref:System.Data.SqlClient.SqlBulkCopy> 调用<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>方法将引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       调用 Close 方法从<xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>事件导致<xref:System.InvalidOperationException>引发。</xref:System.InvalidOperationException> </xref:System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied>       注意，打开<xref:System.Data.SqlClient.SqlBulkCopy>实例均已关闭隐式的末尾`using`块。</xref:System.Data.SqlClient.SqlBulkCopy>"
  example:
  - "The following example uses the same <xref:System.Data.SqlClient.SqlBulkCopy> instance to add sales orders and their associated details to two destination tables. Because the **AdventureWorks** sales order tables are large, the sample reads only orders placed by a certain account number and bulk copies those orders and details to the destination tables. The Close method is used only after both bulk copy operations are complete.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._43_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.OrdersDetails#1](~/add/codesnippet/csharp/m-system.data.sqlclient._43_1.cs)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  id: ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "返回的集合<xref href=&quot;System.Data.SqlClient.SqlBulkCopyColumnMapping&quot;></xref>项。 列映射定义目标中的数据源中的列和列之间的关系。"
  remarks: "如果数据源和目标表具有相同数目的列，并且每个数据源中的源列的序号位置与匹配相应的目标列的序号位置，进行不必要的 ColumnMappings 集合。 但是，如果列计数不同，或者不一致的序号位置，你必须使用 ColumnMappings 以确保将数据复制到正确的列。       在大容量复制操作的执行期间可以访问此集合，但不能更改。 对其进行更改的任何尝试都将引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>"
  syntax:
    content: public System.Data.SqlClient.SqlBulkCopyColumnMappingCollection ColumnMappings { get; }
    return:
      type: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
      description: "列映射集合。 默认情况下，它是一个空集合。"
  overload: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  id: DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "在服务器上的目标表名称。"
  remarks: "如果 DestinationTableName 尚未设置时<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>调用时，<xref:System.ArgumentNullException>引发。</xref:System.ArgumentNullException> </xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       如果修改 DestinationTableName 时<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>操作正在运行，更改不会影响当前操作。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A> 下一步时，将使用新的 DestinationTableName 值<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>调用方法。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer%2A>       DestinationTableName 是一个由三部分名称 (`<database>.<owningschema>.<name>`)。 如果你选择，可以限定及其数据库和所属架构的表名称。 但是，如果表名使用下划线 (_) 或任何其他特殊字符，则必须转义使用括号中的名称 (`[<database>.<owningschema>.<name_01>]`)。 有关详细信息，请参阅 SQL Server 联机丛书中的&quot;标识符&quot;。       你可以将数据大容量复制到临时表使用一个值，类似于`tempdb..#table`或`tempdb.<owner>.#table`DestinationTableName 属性。"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. The source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._5_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.Single#1](~/add/codesnippet/csharp/p-system.data.sqlclient._5_1.cs)]"
  syntax:
    content: public string DestinationTableName { get; set; }
    return:
      type: System.String
      description: "字符串值的 DestinationTableName 属性，或如果未提供任何。"
  overload: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  id: EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "启用或禁用<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>从数据进行流处理的对象<xref href=&quot;System.Data.IDataReader&quot;></xref>对象"
  remarks: "EnableStreaming 时`true`，<xref:System.Data.SqlClient.SqlBulkCopy>从读取<xref:System.Data.IDataReader>对象使用<xref:System.Data.CommandBehavior>，通过使用优化内存使用情况<xref:System.Data.IDataReader>流式处理功能。</xref:System.Data.IDataReader> </xref:System.Data.CommandBehavior> </xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy> 当设置为 false，<xref:System.Data.SqlClient.SqlBulkCopy>类将加载所有返回的数据<xref:System.Data.IDataReader>到之前将其发送到的内存的对象[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]或 SQL Azure。</xref:System.Data.IDataReader> </xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: public bool EnableStreaming { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象可以流式传输数据从<xref href=&quot;System.Data.IDataReader&quot;></xref>对象; 否则为 false。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  id: NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "定义要在生成通知事件之前处理的行数。"
  remarks: "此属性设计用户界面组件演示批量复制操作的进度。 它指示要在生成通知事件之前处理的行数。 在任何时候，可以设置 NotifyAfter 属性，即使在大容量复制操作正在进行。 批量复制操作期间所做的更改会在下一条通知后生效。 新的设置适用于同一个实例上的所有后续操作。       如果 NotifyAfter 设置为一个数字小于零，<xref:System.ArgumentOutOfRangeException>引发。</xref:System.ArgumentOutOfRangeException>"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The NotifyAfter property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Then a second connection is opened to bulk copy the data. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._11_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/p-system.data.sqlclient._11_1.cs)]"
  syntax:
    content: public int NotifyAfter { get; set; }
    return:
      type: System.Int32
      description: "NotifyAfter 属性或如果未设置的属性的零的整数值。"
  overload: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  id: SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "每次进行的行数指定的<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>在处理属性。</xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter*>"
  remarks: "请注意的设置<xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A>和<xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A>无关。</xref:System.Data.SqlClient.SqlBulkCopy.BatchSize%2A> </xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> 收到 SqlRowsCopied 事件并不意味着已发送到服务器或提交的任何行。       不能调用 SqlBulkCopy.Close (<xref:System.Data.SqlClient.SqlBulkCopy.Close%2A>) 或 SqlConnection.Close (<xref:System.Data.SqlClient.SqlConnection.Close%2A>) 从此事件。</xref:System.Data.SqlClient.SqlConnection.Close%2A> </xref:System.Data.SqlClient.SqlBulkCopy.Close%2A> 这将导致这样做<xref:System.InvalidOperationException>引发，则与<xref:System.Data.SqlClient.SqlBulkCopy>对象状态将不会更改。</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.InvalidOperationException> 如果用户想要取消事件，从操作<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>属性<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs>可用。</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs> </xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A> (请参阅[事务和批量复制操作](~/add/includes/ajax-current-ext-md.md)有关示例，请使用<xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>属性。)</xref:System.Data.SqlClient.SqlRowsCopiedEventArgs.Abort%2A>     中的批量复制操作，执行期间连接支持任何操作，如事务活动，并建议你不使用在 SqlRowsCopied 事件期间使用的同一连接。 但是，你可以打开不同的连接。"
  example:
  - "The following console application demonstrates how to bulk load data using a connection that is already open. The <xref:System.Data.SqlClient.SqlBulkCopy.NotifyAfter%2A> property is set so that the event handler is called after every 50 rows copied to the table.  \n  \n In this example, the connection is first used to read data from a SQL Server table to a <xref:System.Data.SqlClient.SqlDataReader> instance. Note that the source data does not have to be located on SQL Server; you can use any data source that can be read to an <xref:System.Data.IDataReader> or loaded to a <xref:System.Data.DataTable>.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._2_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.NotifyAfter#1](~/add/codesnippet/csharp/e-system.data.sqlclient._2_1.cs)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowsCopiedEventHandler SqlRowsCopied;
    return:
      type: System.Data.SqlClient.SqlRowsCopiedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "释放当前实例所使用的所有资源<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>类。"
  remarks: "调用`Dispose`在完成使用<xref:System.Data.SqlClient.SqlBulkCopy>.</xref:System.Data.SqlClient.SqlBulkCopy>时 `Dispose`方法使<xref:System.Data.SqlClient.SqlBulkCopy>中不可用状态。</xref:System.Data.SqlClient.SqlBulkCopy> 在调用`Dispose`，必须释放对所有引用<xref:System.Data.SqlClient.SqlBulkCopy>以便垃圾回收器才能回收的内存，<xref:System.Data.SqlClient.SqlBulkCopy>占用。</xref:System.Data.SqlClient.SqlBulkCopy> </xref:System.Data.SqlClient.SqlBulkCopy>       有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用`Dispose`在发布到<xref:System.Data.SqlClient.SqlBulkCopy>。</xref:System.Data.SqlClient.SqlBulkCopy>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Data.SqlClient.SqlBulkCopy>对象的`Finalize`方法。</xref:System.Data.SqlClient.SqlBulkCopy>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  id: WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "将所有行都复制从提供<xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>到指定的目标表的数组<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  syntax:
    content: public void WriteToServer (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>其行将复制到目标表。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  id: WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "将所有行都复制从提供<xref href=&quot;System.Data.DataRow&quot;></xref>到指定的目标表的数组<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "大容量复制操作正在进行，关联的目标时<xref:System.Data.SqlClient.SqlConnection>忙为它提供服务，并可以对连接执行任何其他操作。</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合将映射从<xref:System.Data.DataRow>到目标数据库表的列。</xref:System.Data.DataRow> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.DataRow> array. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time. A single row is selected from the <xref:System.Data.DataTable> to copy to the destination table.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/csharp/m-system.data.sqlclient._3_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.RowArray#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._3_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "数组<xref href=&quot;System.Data.DataRow&quot;></xref>将复制到目标表的对象。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  id: WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "将所有行都复制从提供<xref href=&quot;System.Data.DataTable&quot;></xref>到指定的目标表<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "中的所有行<xref:System.Data.DataTable>复制到目标表，已被删除的除外。</xref:System.Data.DataTable>       大容量复制操作正在进行，关联的目标时<xref:System.Data.SqlClient.SqlConnection>忙为它提供服务，并可以对连接执行任何其他操作。</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合将映射从<xref:System.Data.DataTable>到目标数据库表的列。</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load data from a <xref:System.Data.DataTable>. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and is the source of the `SqlBulkCopy` operation.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/csharp/m-system.data.sqlclient._16_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataTable#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._16_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其行将复制到目标表。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  id: WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "将所有行都复制从提供<xref href=&quot;System.Data.IDataReader&quot;></xref>到指定的目标表<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "复制操作开始读取器中的下一步可用行。 大多数情况下，仅返回了读取器<xref:System.Data.IDbCommand.ExecuteReader%2A>或类似的调用，因此下一可用行是第一行。</xref:System.Data.IDbCommand.ExecuteReader%2A> 若要处理多个结果，调用<xref:System.Data.IDataReader.NextResult%2A>上的数据读取器和再次调用 WriteToServer。</xref:System.Data.IDataReader.NextResult%2A>       请注意，使用 WriteToServer 修改读取器的状态。 该方法将调用<xref:System.Data.IDataReader.Read%2A>直至指定，返回 false，中止该操作时，或将会出错。</xref:System.Data.IDataReader.Read%2A> 这意味着 WriteToServer 操作完成时的数据读取器将会在不同的状态，可能在该结果集末尾。       大容量复制操作正在进行，关联的目标时<xref:System.Data.SqlClient.SqlConnection>忙为它提供服务，并可以对连接执行任何其他操作。</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合从数据读取器列映射到目标数据库表。</xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following console application demonstrates how to bulk load data from a <xref:System.Data.SqlClient.SqlDataReader>. The destination table is a table in the **AdventureWorks** database.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-vb[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._35_1.vb)]\n [!code-cs[DataWorks SqlBulkCopy.ConnectionString#1](~/add/codesnippet/csharp/m-system.data.sqlclient._35_1.cs)]"
  syntax:
    content: public void WriteToServer (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref>其行将复制到目标表。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "将与从提供的提供的行状态匹配的行复制<xref href=&quot;System.Data.DataTable&quot;></xref>到指定的目标表<xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。</xref:System.Data.SqlClient.SqlBulkCopy.DestinationTableName*>"
  remarks: "仅行<xref:System.Data.DataTable>中所示的状态`rowState`自变量，并且不删除复制到目标表。</xref:System.Data.DataTable>      1> [!NOTE]&1;> 如果<xref:System.Data.DataRowState>指定，则任何<xref:System.Data.DataRowState>， <xref:System.Data.DataRowState>，和<xref:System.Data.DataRowState>行也将被复制到服务器。</xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> </xref:System.Data.DataRowState> 将不引发任何异常。       大容量复制操作正在进行，关联的目标时<xref:System.Data.SqlClient.SqlConnection>忙为它提供服务，并可以对连接执行任何其他操作。</xref:System.Data.SqlClient.SqlConnection>       <xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>集合将映射从<xref:System.Data.DataTable>到目标数据库表的列。</xref:System.Data.DataTable> </xref:System.Data.SqlClient.SqlBulkCopy.ColumnMappings%2A>"
  example:
  - "The following Console application demonstrates how to bulk load only the rows in a <xref:System.Data.DataTable> that match a specified state. In this case, only unchanged rows are added. The destination table is a table in the **AdventureWorks** database.  \n  \n In this example, a <xref:System.Data.DataTable> is created at run time and three rows are added to it. Before the WriteToServer method is executed, one of the rows is edited. The WriteToServer method is called with a `DataRowState.Unchanged``rowState` argument, so only the two unchanged rows are bulk copied to the destination.  \n  \n> [!IMPORTANT]\n>  This sample will not run unless you have created the work tables as described in [Bulk Copy Example Setup](~/add/includes/ajax-current-ext-md.md). This code is provided to demonstrate the syntax for using **SqlBulkCopy** only. If the source and destination tables are in the same SQL Server instance, it is easier and faster to use a Transact-SQL `INSERT … SELECT` statement to copy the data.  \n  \n [!code-cs[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/csharp/65bb2b63-7c25-4470-9a90-_1.cs)]\n [!code-vb[DataWorks SqlBulkCopy.DataRowState#1](~/add/codesnippet/visualbasic/65bb2b63-7c25-4470-9a90-_1.vb)]"
  syntax:
    content: public void WriteToServer (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其行将复制到目标表。"
    - id: rowState
      type: System.Data.DataRowState
      description: "取值范围为<xref href=&quot;System.Data.DataRowState&quot;></xref>枚举。 只有与行状态匹配的行复制到目标。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  id: WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，将所有行都复制从提供<xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>到指定的目标表的数组<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>其行将复制到目标表。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  id: WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，将所有行都复制从提供<xref href=&quot;System.Data.DataRow&quot;></xref>到指定的目标表的数组<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。"
  remarks: "有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "数组<xref href=&quot;System.Data.DataRow&quot;></xref>将复制到目标表的对象。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "完成任务前对同一个实例多次调用 WriteToServerAsync。       调用 WriteToServerAsync 和<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>完成任务前对同一个实例。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       连接断开或关闭 WriteToServerAsync 执行过程。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>方法执行时关闭对象。       在任务对象中返回，没有连接池超时。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>执行方法前关闭对象。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在任务对象中返回，通过返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  id: WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，将所有行都复制从提供<xref href=&quot;System.Data.DataTable&quot;></xref>到指定的目标表<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。"
  remarks: "有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其行将复制到目标表。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "完成任务前对同一个实例多次调用 WriteToServerAsync。       调用 WriteToServerAsync 和<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>完成任务前对同一个实例。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       连接断开或关闭 WriteToServerAsync 执行过程。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>方法执行时关闭对象。       在任务对象中返回，没有连接池超时。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>执行方法前关闭对象。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在任务对象中返回，通过返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  id: WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，将所有行都复制从提供<xref href=&quot;System.Data.IDataReader&quot;></xref>到指定的目标表<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。"
  remarks: "有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref>其行将复制到目标表。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "完成任务前对同一个实例多次调用 WriteToServerAsync。       调用 WriteToServerAsync 和<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>完成任务前对同一个实例。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       连接断开或关闭 WriteToServerAsync 执行过程。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>方法执行时关闭对象。       在任务对象中返回，没有连接池超时。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>执行方法前关闭对象。       <xref href=&quot;System.Data.IDataReader&quot;> </xref>已关闭之前完成<xref:System.Threading.Tasks.Task>返回。</xref:System.Threading.Tasks.Task>       <xref href=&quot;System.Data.IDataReader&quot;></xref>相关的连接已关闭之前完成<xref:System.Threading.Tasks.Task>返回。</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在任务对象中返回，通过返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，将所有行都复制从提供<xref href=&quot;System.Data.Common.DbDataReader&quot;></xref>到指定的目标表的数组<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.Common.DbDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "A <xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>其行将复制到目标表。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *1> 此参数中的值将使此方法等效于<> *1>。"
    return:
      type: System.Threading.Tasks.Task
      description: "返回<xref:System.Threading.Tasks.Task>.</xref:System.Threading.Tasks.Task>"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，将所有行都复制从提供<xref href=&quot;System.Data.DataRow&quot;></xref>到指定的目标表的数组<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。       取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。"
  remarks: "有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataRow[] rows, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: rows
      type: System.Data.DataRow[]
      description: "数组<xref href=&quot;System.Data.DataRow&quot;></xref>将复制到目标表的对象。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *1> 此参数中的值将使此方法等效于<> *1>。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "调用<> *1> 为完成任务前的同一个实例多次。     调用<> *1> 和<> *1> 完成任务前对同一个实例。     连接断开或关闭期间<> *1> 执行。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>方法执行时关闭对象。       在任务对象中返回，没有连接池超时。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>执行方法前关闭对象。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在任务对象中返回，通过返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，它会复制与从提供的提供的行状态匹配的行<xref href=&quot;System.Data.DataTable&quot;></xref>到指定的目标表<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。"
  remarks: "有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其行将复制到目标表。"
    - id: rowState
      type: System.Data.DataRowState
      description: "取值范围为<xref href=&quot;System.Data.DataRowState&quot;></xref>枚举。 只有与行状态匹配的行复制到目标。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "完成任务前对同一个实例多次调用 WriteToServerAsync。       调用 WriteToServerAsync 和<xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>完成任务前对同一个实例。</xref:System.Data.SqlClient.SqlBulkCopy.WriteToServer*>       连接断开或关闭 WriteToServerAsync 执行过程。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>方法执行时关闭对象。       在任务对象中返回，没有连接池超时。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>执行方法前关闭对象。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在任务对象中返回，通过返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，将所有行都复制从提供<xref href=&quot;System.Data.DataTable&quot;></xref>到指定的目标表<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。       取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。"
  remarks: "有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其行将复制到目标表。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *1> 此参数中的值将使此方法等效于<> *1>。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "调用<> *1> 为完成任务前的同一个实例多次。     调用<> *1> 和<> *1> 完成任务前对同一个实例。     连接断开或关闭期间<> *1> 执行。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>方法执行时关闭对象。       在任务对象中返回，没有连接池超时。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>执行方法前关闭对象。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在任务对象中返回，通过返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，将所有行都复制从提供<xref href=&quot;System.Data.IDataReader&quot;></xref>到指定的目标表<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。       取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。"
  remarks: "有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.IDataReader reader, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "A <xref href=&quot;System.Data.IDataReader&quot;> </xref>其行将复制到目标表。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *1> 此参数中的值将使此方法等效于<> *1>。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "调用<> *1> 为完成任务前的同一个实例多次。     调用<> *1> 和<> *1> 完成任务前对同一个实例。     连接断开或关闭期间<> *1> 执行。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>方法执行时关闭对象。       在任务对象中返回，没有连接池超时。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>执行方法前关闭对象。       <xref href=&quot;System.Data.IDataReader&quot;> </xref>已关闭之前完成<xref:System.Threading.Tasks.Task>返回。</xref:System.Threading.Tasks.Task>       <xref href=&quot;System.Data.IDataReader&quot;></xref>相关的连接已关闭之前完成<xref:System.Threading.Tasks.Task>返回。</xref:System.Threading.Tasks.Task>       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在任务对象中返回，通过返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  id: WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  langs:
  - csharp
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，它会复制与从提供的提供的行状态匹配的行<xref href=&quot;System.Data.DataTable&quot;></xref>到指定的目标表<> *1> 属性<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>对象。       取消标记可用于请求在命令超时超过前放弃操作。  将通过返回的任务对象报告异常。"
  remarks: "有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Threading.Tasks.Task WriteToServerAsync (System.Data.DataTable table, System.Data.DataRowState rowState, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: table
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>其行将复制到目标表。"
    - id: rowState
      type: System.Data.DataRowState
      description: "取值范围为<xref href=&quot;System.Data.DataRowState&quot;></xref>枚举。 只有与行状态匹配的行复制到目标。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。 A <> </> *1> 此参数中的值将使此方法等效于<> *1>。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "调用<> *1> 为完成任务前的同一个实例多次。     调用<> *1> 和<> *1> 完成任务前对同一个实例。     连接断开或关闭期间<> *1> 执行。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlBulkCopy&quot;></xref>方法执行时关闭对象。       在任务对象中返回，没有连接池超时。       在任务对象中返回<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>执行方法前关闭对象。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在任务对象中返回，通过返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.String,System.Data.SqlClient.SqlBulkCopyOptions)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(String,SqlBulkCopyOptions)
  nameWithType: SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(String,SqlBulkCopyOptions)
- uid: System.Data.SqlClient.SqlBulkCopyOptions
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyOptions
  nameWithType: SqlBulkCopyOptions
  fullName: System.Data.SqlClient.SqlBulkCopyOptions
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor(System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlBulkCopyOptions,System.Data.SqlClient.SqlTransaction)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  nameWithType: SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlBulkCopy(SqlConnection,SqlBulkCopyOptions,SqlTransaction)
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
  fullName: System.Data.SqlClient.SqlBulkCopy.BatchSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
  fullName: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close()
  nameWithType: SqlBulkCopy.Close()
  fullName: System.Data.SqlClient.SqlBulkCopy.Close()
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
  fullName: System.Data.SqlClient.SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlBulkCopyColumnMappingCollection
  nameWithType: SqlBulkCopyColumnMappingCollection
  fullName: System.Data.SqlClient.SqlBulkCopyColumnMappingCollection
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
  fullName: System.Data.SqlClient.SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
  fullName: System.Data.SqlClient.SqlBulkCopy.EnableStreaming
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
  fullName: System.Data.SqlClient.SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlRowsCopied
  nameWithType: SqlBulkCopy.SqlRowsCopied
  fullName: System.Data.SqlClient.SqlBulkCopy.SqlRowsCopied
- uid: System.Data.SqlClient.SqlRowsCopiedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowsCopiedEventHandler
  nameWithType: SqlRowsCopiedEventHandler
  fullName: System.Data.SqlClient.SqlRowsCopiedEventHandler
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose()
  fullName: System.Data.SqlClient.SqlBulkCopy.System.IDisposable.Dispose()
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServer(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataRow[])
- uid: System.Data.DataRow[]
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow[]
  spec.csharp:
  - uid: System.Data.DataRow
    name: DataRow
    nameWithType: DataRow
    fullName: DataRow[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServer(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServer(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServer(DataTable,DataRowState)
- uid: System.Data.DataRowState
  parent: System.Data
  isExternal: false
  name: DataRowState
  nameWithType: DataRowState
  fullName: System.Data.DataRowState
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[])
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[])
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[])
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[])
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.Common.DbDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DbDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DbDataReader,CancellationToken)
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataRow[],System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataRow[],CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataRow[],CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.IDataReader,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(IDataReader,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(IDataReader,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(System.Data.DataTable,System.Data.DataRowState,System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  nameWithType: SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
  fullName: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync(DataTable,DataRowState,CancellationToken)
- uid: System.Data.SqlClient.SqlBulkCopy.#ctor*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: SqlBulkCopy
  nameWithType: SqlBulkCopy.SqlBulkCopy
- uid: System.Data.SqlClient.SqlBulkCopy.BatchSize*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BatchSize
  nameWithType: SqlBulkCopy.BatchSize
- uid: System.Data.SqlClient.SqlBulkCopy.BulkCopyTimeout*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: BulkCopyTimeout
  nameWithType: SqlBulkCopy.BulkCopyTimeout
- uid: System.Data.SqlClient.SqlBulkCopy.Close*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: Close
  nameWithType: SqlBulkCopy.Close
- uid: System.Data.SqlClient.SqlBulkCopy.ColumnMappings*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: ColumnMappings
  nameWithType: SqlBulkCopy.ColumnMappings
- uid: System.Data.SqlClient.SqlBulkCopy.DestinationTableName*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: DestinationTableName
  nameWithType: SqlBulkCopy.DestinationTableName
- uid: System.Data.SqlClient.SqlBulkCopy.EnableStreaming*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: EnableStreaming
  nameWithType: SqlBulkCopy.EnableStreaming
- uid: System.Data.SqlClient.SqlBulkCopy.NotifyAfter*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: NotifyAfter
  nameWithType: SqlBulkCopy.NotifyAfter
- uid: System.Data.SqlClient.SqlBulkCopy.System#IDisposable#Dispose*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: SqlBulkCopy.System.IDisposable.Dispose
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServer*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServer
  nameWithType: SqlBulkCopy.WriteToServer
- uid: System.Data.SqlClient.SqlBulkCopy.WriteToServerAsync*
  parent: System.Data.SqlClient.SqlBulkCopy
  isExternal: false
  name: WriteToServerAsync
  nameWithType: SqlBulkCopy.WriteToServerAsync
