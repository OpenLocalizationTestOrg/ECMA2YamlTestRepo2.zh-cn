### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Services.SessionAuthenticationModule
  id: SessionAuthenticationModule
  children:
  - System.IdentityModel.Services.SessionAuthenticationModule.#ctor
  - System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  - System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)
  - System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
  - System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
  - System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)
  - System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie
  - System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  - System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration
  - System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
  - System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  - System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])
  - System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
  - System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
  - System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
  - System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
  - System.IdentityModel.Services.SessionAuthenticationModule.SignOut
  - System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
  - System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)
  - System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)
  langs:
  - csharp
  name: SessionAuthenticationModule
  nameWithType: SessionAuthenticationModule
  fullName: System.IdentityModel.Services.SessionAuthenticationModule
  type: Class
  summary: "实现处理 WS 联合身份验证方案中的会话 cookie 的 ASP.NET 模块。"
  remarks: "When present in the ASP.NET pipeline, the SessionAuthenticationModule (SAM) processes session cookies in WS-Federation scenarios. It uses the cookie handler specified by the <xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> property to read the raw session cookie from the HTTP request and write it to the HTTP response. It uses the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> that is configured for an application to deserialize the raw session cookie into <xref:System.IdentityModel.Tokens.SessionSecurityToken> objects. The session security token contains the claims (<xref:System.Security.Claims.Claim>) and principal (<xref:System.Security.Claims.ClaimsPrincipal>) associated with the entity for which the request is being served.  \n  \n The SAM adds its <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> event handler to the <xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName> event in the ASP.NET pipeline. This handler intercepts sign-in requests, and, if there is a session cookie, deserializes it into a session token, and sets the <xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> and <xref:System.Web.HttpContext.User%2A?displayProperty=fullName> properties to the claims principal contained in the session token. It invokes several of the other methods exposed by the SAM during this process.  \n  \n The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> method can be invoked to sign the user out of a session (for example, in a SignOut.aspx.cs code-behind file).  \n  \n The SAM exposes several events that provide access to its processing pipeline. The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> events enable you to modify session tokens that are read from cookies or created during processing. Typically, this is done to add, remove, or transform claims in the token or to adjust its expiration time. The <xref:System.IdentityModel.Services.SessionAuthenticationModule.SigningOut>, <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignedOut>, and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> events provide hooks into the processing of sign-out requests. For many scenarios, simply adding handlers for these events, often to the global.asax.cs file, will be sufficient.  \n  \n For more complicated scenarios, you can derive from SessionAuthenticationModule to implement a custom SAM. To this end, many of the methods that are invoked during <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> and <xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> are exposed so that you can provide custom behavior at specific stages of the session processing lifecycle.  \n  \n You can add the SAM to the ASP.NET pipeline in a configuration file by adding it to the HTTP modules under either the `<system.webServer>` element for IIS version 7 and later or under the `<system.web>` element for versions prior to IIS 7. The cookie handler used by the SAM can be configured with the [\\&lt;cookieHandler\\&gt;](../Topic/%3CcookieHandler%3E.md) element."
  example:
  - "[!code-cs[WifSAM#1](~/add/codesnippet/csharp/sam/global.asax.cs#1)]  \n  \n The following XML shows how to configure the SAM in the ASP.NET pipeline. Many other elements that are present in a typical configuration are omitted here for brevity.  \n  \n```xml  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <!--WIF 4.5 modules -->  \n      <add name=\"SessionAuthenticationModule\" type=\"System.IdentityModel.Services.SessionAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"/>  \n      <add name=\"WsFederationAuthenticationModule\" type=\"System.IdentityModel.Services.WSFederationAuthenticationModule, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\"/>  \n    </modules>  \n  </system.webServer>  \n</configuration>  \n```"
  syntax:
    content: 'public class SessionAuthenticationModule : System.IdentityModel.Services.HttpModuleBase'
  inheritance:
  - System.Object
  - System.IdentityModel.Services.HttpModuleBase
  implements: []
  inheritedMembers:
  - System.IdentityModel.Services.HttpModuleBase.Dispose
  - System.IdentityModel.Services.HttpModuleBase.FederationConfiguration
  - System.IdentityModel.Services.HttpModuleBase.Init(System.Web.HttpApplication)
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SessionAuthenticationModule()
  nameWithType: SessionAuthenticationModule.SessionAuthenticationModule()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionAuthenticationModule()
  type: Constructor
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "初始化的新实例<xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule&quot;></xref>类。"
  remarks: "<xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A>属性设置为`false`和<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性初始化为<xref:System.IdentityModel.Services.CookieHandlerElement.ChunkedCookieHandler%2A>类</xref:System.IdentityModel.Services.CookieHandlerElement.ChunkedCookieHandler%2A>的默认实例</xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A></xref:System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode%2A>"
  syntax:
    content: public SessionAuthenticationModule ();
    parameters: []
  overload: System.IdentityModel.Services.SessionAuthenticationModule.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  id: AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  nameWithType: SessionAuthenticationModule.AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "对传入的请求进行验证传入的会话令牌身份验证。 验证成功时，它的当前 HTTP 上下文和主体的线程会用更新指定<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  remarks: "从调用 AuthenticateSessionSecurityToken 方法<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> 它调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken%2A>方法来验证传入令牌和更新<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>和<xref:System.Web.HttpContext.User%2A?displayProperty=fullName>属性。</xref:System.Web.HttpContext.User%2A?displayProperty=fullName> </xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken%2A> 如果`writeCookie`参数是`true`、<xref:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie%2A>方法调用以将会话令牌编写为一个 cookie。</xref:System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie%2A>"
  syntax:
    content: public virtual void AuthenticateSessionSecurityToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken, bool writeCookie);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "要使用传入的 HTTP 请求进行身份验证的会话安全令牌。"
    - id: writeCookie
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要写入的会话 cookie;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)
  id: ContainsSessionTokenCookie(System.Web.HttpCookieCollection)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: ContainsSessionTokenCookie(HttpCookieCollection)
  nameWithType: SessionAuthenticationModule.ContainsSessionTokenCookie(HttpCookieCollection)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(HttpCookieCollection)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "确定指定的 cookie 集合中是否为会话 cookie。"
  syntax:
    content: public bool ContainsSessionTokenCookie (System.Web.HttpCookieCollection httpCookieCollection);
    parameters:
    - id: httpCookieCollection
      type: System.Web.HttpCookieCollection
      description: "在其中进行搜索的 cookie 的集合。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果找到一个会话 cookie;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>httpCookieCollection</code>为 null"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
  id: ContextSessionSecurityToken
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: ContextSessionSecurityToken
  nameWithType: SessionAuthenticationModule.ContextSessionSecurityToken
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "获取活动<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>当前<xref href=&quot;System.Web.HttpContext&quot;> </xref>。"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SessionSecurityToken ContextSessionSecurityToken { get; }
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "活动会话安全令牌。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
  id: CookieHandler
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: CookieHandler
  nameWithType: SessionAuthenticationModule.CookieHandler
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "获取用于读取、 写入和删除会话 cookie 的 cookie 处理程序。"
  remarks: "CookieHandler 属性由初始化<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration%2A> 此方法将根据上指定的 cookie 处理程序的属性初始化<xref:System.IdentityModel.Services.Configuration.FederationConfiguration>设置的对象<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName>属性。</xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName> </xref:System.IdentityModel.Services.Configuration.FederationConfiguration> 你可以通过配置文件中设置的 cookie 处理[ \\&lt; cookieHandler\\&gt;](../Topic/%3CcookieHandler%3E.md)元素。"
  syntax:
    content: public System.IdentityModel.Services.CookieHandler CookieHandler { get; set; }
    return:
      type: System.IdentityModel.Services.CookieHandler
      description: "Cookie 处理程序。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)
  id: CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  nameWithType: SessionAuthenticationModule.CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "创建<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>从通过使用配置的会话令牌处理程序指定的参数。"
  syntax:
    content: public System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, DateTime validFrom, DateTime validTo, bool isPersistent);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "要在令牌中捕获的主体。"
    - id: context
      type: System.String
      description: "已应用程序定义的上下文的字符串。"
    - id: validFrom
      type: System.DateTime
      description: "此令牌无效的最初时刻。"
    - id: validTo
      type: System.DateTime
      description: "此令牌无效最后时刻。"
    - id: isPersistent
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值应保持用户代理;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "会话令牌中。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有配置的有效会话令牌处理程序。 (没有任何<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>中配置<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>属性。)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie
  id: DeleteSessionTokenCookie
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: DeleteSessionTokenCookie()
  nameWithType: SessionAuthenticationModule.DeleteSessionTokenCookie()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "删除会话 cookie，并将其从缓存中删除。"
  remarks: "通过使用指定的 cookie 处理程序中删除会话 cookie<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性。</xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> 在调用此方法通过注销<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>"
  syntax:
    content: public void DeleteSessionTokenCookie ();
    parameters: []
  overload: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  id: InitializeModule(System.Web.HttpApplication)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: InitializeModule(HttpApplication)
  nameWithType: SessionAuthenticationModule.InitializeModule(HttpApplication)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(HttpApplication)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "初始化模块并准备对其处理的模块中的事件[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]应用程序对象。"
  remarks: "将添加<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>和<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A>到处理程序<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName>和<xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName>指定的应用程序对象事件`context`参数。</xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName> </xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest%2A> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>"
  syntax:
    content: protected override void InitializeModule (System.Web.HttpApplication context);
    parameters:
    - id: context
      type: System.Web.HttpApplication
      description: "包含此模块的 HTTP 应用程序对象。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration
  id: InitializePropertiesFromConfiguration
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: InitializePropertiesFromConfiguration()
  nameWithType: SessionAuthenticationModule.InitializePropertiesFromConfiguration()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "初始化基于配置文件中定义的模块属性。"
  remarks: "初始化<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>来自处理程序的配置中指定的属性<xref:System.IdentityModel.Services.Configuration.FederationConfiguration?displayProperty=fullName>设置的对象<xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName>属性。</xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfiguration%2A?displayProperty=fullName> </xref:System.IdentityModel.Services.Configuration.FederationConfiguration?displayProperty=fullName> </xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A> 你可以通过配置文件中指定的 cookie 处理[ \\&lt; cookieHandler\\&gt;](../Topic/%3CcookieHandler%3E.md)元素。"
  syntax:
    content: protected override void InitializePropertiesFromConfiguration ();
    parameters: []
  overload: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
  id: IsReferenceMode
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: IsReferenceMode
  nameWithType: SessionAuthenticationModule.IsReferenceMode
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
  type: Property
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "获取或设置一个值，指定是否应将会话信息 （声明值等） 存储在会话 cookie 或是否应在服务器端，使用 cookie 来存储只是引用存储会话内容。"
  remarks: "在引用模式下，<xref:System.IdentityModel.Tokens.SessionSecurityToken>存储在服务器端缓存 (一个对象，派生自<xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>)。</xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> </xref:System.IdentityModel.Tokens.SessionSecurityToken> 颁发的 cookie 中只包含用于从缓存中检索令牌的上下文标识符。      1> [!IMPORTANT]&1;> 在引用模式下，操作提供的处理程序的 Microsoft 建议<xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=fullName>global.asax.cs 文件和设置中的事件<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>令牌上的属性中传递<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName>属性。</xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> </xref:System.IdentityModel.Services.WSFederationAuthenticationModule.SessionSecurityTokenCreated?displayProperty=fullName> 这将确保会话令牌在为每个请求的引用模式下运行，并且通过只在会话身份验证模块上设置 IsReferenceMode 属性进行访问偏好形式。"
  syntax:
    content: public bool IsReferenceMode { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果颁发的 cookie 位于引用模式;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，它指定颁发 cookie 未处于引用模式。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  id: OnAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnAuthenticateRequest(Object,EventArgs)
  nameWithType: SessionAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "处理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>事件从[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]管道。"
  remarks: "此方法执行以下︰ 1。  调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie%2A>方法来读取<xref:System.IdentityModel.Tokens.SessionSecurityToken>从会话 cookie，如果有的话。</xref:System.IdentityModel.Tokens.SessionSecurityToken> </xref:System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie%2A>      2.  如果会话安全令牌不能为读 （最有可能是因为尚未建立会话），将返回。      3.  调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived%2A>方法来引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>事件。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived%2A> 读取从 cookie 要修改的标记或取消的请求，这提供了机会。 处理程序还可以指定应颁发令牌，通过设置<xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=fullName>属性。</xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=fullName>      4.  如果要重新颁发令牌，将其从缓存中删除，并调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated%2A>方法来引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated>事件。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated%2A> 这提供机会再次要修改的令牌。 此外可以通过设置修改重新发出行为<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName>事件处理程序中的属性。</xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName>      5.  调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>方法进行身份验证用户。</xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> 如果成功，这将面临设置的效果<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>属性中包含的主体<xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A?displayProperty=fullName>的传入令牌的属性。</xref:System.IdentityModel.Tokens.SessionSecurityToken.ClaimsPrincipal%2A?displayProperty=fullName> </xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>      6.  如果会话已过期，将调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>       OnAuthenticateRequest 方法添加到的处理程序<xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName>中的事件<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A> </xref:System.Web.HttpApplication.AuthenticateRequest?displayProperty=fullName>"
  syntax:
    content: protected virtual void OnAuthenticateRequest (object sender, EventArgs eventArgs);
    parameters:
    - id: sender
      type: System.Object
      description: "事件源。 这将是<xref href=&quot;System.Web.HttpApplication&quot;></xref>对象。"
    - id: eventArgs
      type: System.EventArgs
      description: "事件的数据。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有配置的有效会话令牌处理程序。 (没有任何<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>中配置<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>属性。)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  id: OnPostAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnPostAuthenticateRequest(Object,EventArgs)
  nameWithType: SessionAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "处理<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;></xref>事件从[!INCLUDE[vstecasp](~/add/includes/vstecasp-md.md)]管道。"
  remarks: "默认实现为空。       OnPostAuthenticateRequest 处理程序添加到的处理程序<xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName>中的事件<xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule%2A> </xref:System.Web.HttpApplication.PostAuthenticateRequest?displayProperty=fullName>"
  syntax:
    content: protected virtual void OnPostAuthenticateRequest (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "事件源。 这将是<xref href=&quot;System.Web.HttpApplication&quot;></xref>对象。"
    - id: e
      type: System.EventArgs
      description: "事件的数据。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  id: OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "引发<xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated&quot;></xref>事件。"
  remarks: "从调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>"
  syntax:
    content: protected virtual void OnSessionSecurityTokenCreated (System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs args);
    parameters:
    - id: args
      type: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
      description: "事件的数据。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)
  id: OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "引发<xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived&quot;></xref>事件。"
  remarks: "从调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>"
  syntax:
    content: protected virtual void OnSessionSecurityTokenReceived (System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs args);
    parameters:
    - id: args
      type: System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs
      description: "事件的数据。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)
  id: OnSignedOut(System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSignedOut(EventArgs)
  nameWithType: SessionAuthenticationModule.OnSignedOut(EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(EventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "引发<xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SignedOut&quot;></xref>事件。"
  remarks: "此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法后注销已执行并且会话 cookie 已被删除。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>"
  syntax:
    content: protected virtual void OnSignedOut (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "事件的数据。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  id: OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSigningOut(SigningOutEventArgs)
  nameWithType: SessionAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "引发<xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SigningOut&quot;></xref>事件。"
  remarks: "此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法来执行注销。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A> 它被调用之前删除会话 cookie。"
  syntax:
    content: protected virtual void OnSigningOut (System.IdentityModel.Services.SigningOutEventArgs e);
    parameters:
    - id: e
      type: System.IdentityModel.Services.SigningOutEventArgs
      description: "事件的数据。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  id: OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: OnSignOutError(ErrorEventArgs)
  nameWithType: SessionAuthenticationModule.OnSignOutError(ErrorEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(ErrorEventArgs)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "引发<xref href=&quot;System.IdentityModel.Services.SessionAuthenticationModule.SignOutError&quot;></xref>事件。"
  remarks: "此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法如果注销过程中发生错误。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>"
  syntax:
    content: protected virtual void OnSignOutError (System.IdentityModel.Services.ErrorEventArgs e);
    parameters:
    - id: e
      type: System.IdentityModel.Services.ErrorEventArgs
      description: "事件的数据。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])
  id: ReadSessionTokenFromCookie(System.Byte[])
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: ReadSessionTokenFromCookie(Byte[])
  nameWithType: SessionAuthenticationModule.ReadSessionTokenFromCookie(Byte[])
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(Byte[])
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "读取<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>从指定的会话 cookie。"
  syntax:
    content: public System.IdentityModel.Tokens.SessionSecurityToken ReadSessionTokenFromCookie (byte[] sessionCookie);
    parameters:
    - id: sessionCookie
      type: System.Byte[]
      description: "中包含的会话令牌的原始的表单的 cookie。"
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "从 cookie 读取会话令牌。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有配置的有效会话令牌处理程序。 (没有任何<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>中配置<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>属性。)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
  id: SessionSecurityTokenCreated
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SessionSecurityTokenCreated
  nameWithType: SessionAuthenticationModule.SessionSecurityTokenCreated
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "在创建会话安全令牌时发生。"
  remarks: "你可以使用此事件之前已写入到 cookie 修改会话安全令牌。       从内引发 SessionSecurityTokenCreated 事件<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A>方法之后会话令牌 (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) 已创建。</xref:System.IdentityModel.Tokens.SessionSecurityToken> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> 发生这种情况，例如，如果一个事件处理程序<xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>事件修改该令牌。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived>       此事件可用于修改的会话令牌的属性，然后它会进一步沿管道传递并用于发出请求 （用户） 的实体进行身份验证。       在事件处理程序，您可以访问通过令牌<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName>属性。</xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.SessionToken%2A?displayProperty=fullName> 令牌之后，你可以确保将它写入返回到 cookie 通过设置<xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName>属性`true`。</xref:System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs.WriteSessionCookie%2A?displayProperty=fullName> 与，SessionSecurityTokenCreated 事件，SessionSecurityTokenCreated 不是可取消的事件。"
  example:
  - "The following code shows a handler for the SessionSecurityTokenCreated event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#6](~/add/codesnippet/csharp/sam/global.asax.cs#6)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs> SessionSecurityTokenCreated;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
  id: SessionSecurityTokenReceived
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SessionSecurityTokenReceived
  nameWithType: SessionAuthenticationModule.SessionSecurityTokenReceived
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "已从 cookie 读取会话安全令牌时发生。"
  remarks: "The SessionSecurityTokenReceived event is raised from within the <xref:System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest%2A> method after a session token (<xref:System.IdentityModel.Tokens.SessionSecurityToken>) has been successfully read from the session cookie.  \n  \n You can use this event to modify properties of the session token before it is passed further along the pipeline and is used to authenticate the entity making the request (user). One of the most common scenarios involves modifying the session expiration time (accessible through the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ValidTo%2A?displayProperty=fullName> property) to override the session expiration time set in configuration through the `lifetime` attribute of the [\\&lt;sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) element. By modifying this property on each request, you can implement a sliding session; that is, a session in which the lifetime is extended each time the user accesses the site.  \n  \n In an event handler, you can access the token through the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.SessionToken%2A?displayProperty=fullName> property. After modifying the token, you can ensure that it is written back to the cookie by setting the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs.ReissueCookie%2A?displayProperty=fullName> to `true`. Finally, the SessionSecurityTokenReceived event is a cancelable event, and you can set the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs> to abort further processing of the request."
  example:
  - "The following code shows a handler for the SessionSecurityTokenReceived event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#5](~/add/codesnippet/csharp/sam/global.asax.cs#5)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs> SessionSecurityTokenReceived;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  id: SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SetPrincipalFromSessionToken(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.SetPrincipalFromSessionToken(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "上设置的主体<xref href=&quot;System.Web.HttpContext&quot;></xref>和<xref href=&quot;System.Threading.Thread&quot;></xref>到指定的会话令牌中包含的主体。"
  remarks: "调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken%2A>方法和集<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>属性和<xref:System.Web.HttpContext.User%2A?displayProperty=fullName>属性<xref:System.Web.HttpContext.Current%2A?displayProperty=fullName>使用返回的标识。</xref:System.Web.HttpContext.Current%2A?displayProperty=fullName> </xref:System.Web.HttpContext.User%2A?displayProperty=fullName> </xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken%2A>       此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>"
  syntax:
    content: protected virtual void SetPrincipalFromSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken);
    parameters:
    - id: sessionSecurityToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "要根据其设置主体会话令牌。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
  id: SignedOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SignedOut
  nameWithType: SessionAuthenticationModule.SignedOut
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "在用户注销后发生。"
  remarks: "从引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法紧后面<xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>调用方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A> </xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>       此事件不能保证调用为每个会话。 例如，可能在客户端删除 cookie 在这种情况下，引发此事件将永远不会因为没有删除该会话的服务器端事件。"
  example:
  - "The following code shows a handler for the SignedOut event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#3](~/add/codesnippet/csharp/sam/global.asax.cs#3)]"
  syntax:
    content: public event EventHandler SignedOut;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
  id: SigningOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SigningOut
  nameWithType: SessionAuthenticationModule.SigningOut
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "在删除登录会话之前发生。"
  remarks: "从引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法之前<xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>调用方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A> </xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>       此事件不能保证调用为每个会话。 例如，可能在客户端删除 cookie 在这种情况下，引发此事件将永远不会因为没有删除该会话的服务器端事件。"
  example:
  - "The following code shows a handler for the SigningOut event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#4](~/add/codesnippet/csharp/sam/global.asax.cs#4)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.SigningOutEventArgs> SigningOut;
    return:
      type: System.EventHandler{System.IdentityModel.Services.SigningOutEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOut
  id: SignOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SignOut()
  nameWithType: SessionAuthenticationModule.SignOut()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignOut()
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "注销当前用户，并引发关联的事件。"
  remarks: "调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut%2A>， <xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A>，和<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut%2A>方法执行注销。</xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut%2A> </xref:System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie%2A> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut%2A> 如果发生异常，<xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError%2A>调用方法来引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError>事件。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOutError> </xref:System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError%2A> 你可以设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.IdentityModel.Services.ErrorEventArgs>对象传递到此事件来取消注销并阻止未传播至客户端异常事件处理程序。</xref:System.IdentityModel.Services.ErrorEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       你可以重写此方法可添加特定于应用程序的行为。"
  example:
  - "The following code shows code for invoking the SignOut method from a SignOut.aspx page (SignOut.aspx.cs) in an ASP.NET web application. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#7](~/add/codesnippet/csharp/sam/global.asax.cs#7)]"
  syntax:
    content: public virtual void SignOut ();
    parameters: []
  overload: System.IdentityModel.Services.SessionAuthenticationModule.SignOut*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
  id: SignOutError
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: SignOutError
  nameWithType: SessionAuthenticationModule.SignOutError
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
  type: Event
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "在注销过程时出现错误时发生。"
  remarks: "从引发<xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>方法时注销过程中发生错误。</xref:System.IdentityModel.Services.SessionAuthenticationModule.SignOut%2A>       在事件处理程序，你可以在事件导致从引发的异常<xref:System.IdentityModel.Services.ErrorEventArgs.Exception%2A?displayProperty=fullName>属性。</xref:System.IdentityModel.Services.ErrorEventArgs.Exception%2A?displayProperty=fullName> 你可以取消进一步处理的异常，这会具有的不通过设置传播到客户端，异常结果<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.IdentityModel.Services.ErrorEventArgs>到`true`。</xref:System.IdentityModel.Services.ErrorEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       此事件不能保证调用为每个会话。 例如，可能在客户端删除 cookie 在这种情况下，引发此事件将永远不会因为没有删除该会话的服务器端事件。"
  example:
  - "The following code shows a handler for the SignOutError event implemented in the global.asax.cs file of an ASP.NET web application. You must also add the handler to the event. A more complete example is shown in the <xref:System.IdentityModel.Services.SessionAuthenticationModule> overview topic.  \n  \n [!code-cs[WifSAM#2](~/add/codesnippet/csharp/sam/global.asax.cs#2)]"
  syntax:
    content: public event EventHandler<System.IdentityModel.Services.ErrorEventArgs> SignOutError;
    return:
      type: System.EventHandler{System.IdentityModel.Services.ErrorEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)
  id: TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: TryReadSessionTokenFromCookie(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.TryReadSessionTokenFromCookie(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "尝试读取<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>从会话 cookie，并返回一个值，该值指示是否已成功读取的会话 cookie。"
  remarks: "通过使用的 cookie 处理程序配置中读取 cookie<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性并调用<xref:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie%2A>方法从 cookie 读取令牌。</xref:System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie%2A> </xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>"
  syntax:
    content: public bool TryReadSessionTokenFromCookie (out System.IdentityModel.Tokens.SessionSecurityToken sessionToken);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "此方法返回时，包含从会话 cookie 读取会话安全令牌。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已成功阅读请求; 中的会话 cookie否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  id: ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: ValidateSessionToken(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.ValidateSessionToken(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "验证指定<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>并返回其标识。"
  remarks: "此方法调用从<xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A>方法。</xref:System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken%2A> 它将调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A?displayProperty=fullName>的配置的会话令牌处理程序以验证此令牌并提取其标识的方法。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A?displayProperty=fullName>"
  syntax:
    content: protected System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateSessionToken (System.IdentityModel.Tokens.SessionSecurityToken sessionSecurityToken);
    parameters:
    - id: sessionSecurityToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "要验证的标记。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "令牌中包含的标识的集合。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken*
  exceptions:
  - type: System.IdentityModel.Services.FederatedSessionExpiredException
    commentId: T:System.IdentityModel.Services.FederatedSessionExpiredException
    description: "令牌已过期。"
  - type: System.IdentityModel.Services.FederationException
    commentId: T:System.IdentityModel.Services.FederationException
    description: "令牌的起始时间尚不可有效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有配置的有效会话令牌处理程序。 (没有任何<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>中配置<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>属性。)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>"
  platform:
  - net462
- uid: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)
  id: WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  langs:
  - csharp
  name: WriteSessionTokenToCookie(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.WriteSessionTokenToCookie(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel.Services
  namespace: System.IdentityModel.Services
  summary: "将指定<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>至的会话 cookie。"
  remarks: "通过使用配置中的 cookie 处理写入 cookie<xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>属性。</xref:System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler%2A>"
  syntax:
    content: public void WriteSessionTokenToCookie (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "要写入的会话安全令牌。"
  overload: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sessionToken</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有配置的有效会话令牌处理程序。 (没有任何<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>中配置<xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>属性。)</xref:System.IdentityModel.Configuration.IdentityConfiguration.SecurityTokenHandlers*>"
  platform:
  - net462
references:
- uid: System.IdentityModel.Services.HttpModuleBase
  isExternal: false
  name: System.IdentityModel.Services.HttpModuleBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Services.FederatedSessionExpiredException
  parent: System.IdentityModel.Services
  isExternal: false
  name: FederatedSessionExpiredException
  nameWithType: FederatedSessionExpiredException
  fullName: System.IdentityModel.Services.FederatedSessionExpiredException
- uid: System.IdentityModel.Services.FederationException
  parent: System.IdentityModel.Services
  isExternal: false
  name: FederationException
  nameWithType: FederationException
  fullName: System.IdentityModel.Services.FederationException
- uid: System.IdentityModel.Services.SessionAuthenticationModule.#ctor
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SessionAuthenticationModule()
  nameWithType: SessionAuthenticationModule.SessionAuthenticationModule()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionAuthenticationModule()
- uid: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(System.IdentityModel.Tokens.SessionSecurityToken,System.Boolean)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  nameWithType: SessionAuthenticationModule.AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken(SessionSecurityToken,Boolean)
- uid: System.IdentityModel.Tokens.SessionSecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SessionSecurityToken
  nameWithType: SessionSecurityToken
  fullName: System.IdentityModel.Tokens.SessionSecurityToken
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(System.Web.HttpCookieCollection)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ContainsSessionTokenCookie(HttpCookieCollection)
  nameWithType: SessionAuthenticationModule.ContainsSessionTokenCookie(HttpCookieCollection)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie(HttpCookieCollection)
- uid: System.Web.HttpCookieCollection
  parent: System.Web
  isExternal: false
  name: HttpCookieCollection
  nameWithType: HttpCookieCollection
  fullName: System.Web.HttpCookieCollection
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ContextSessionSecurityToken
  nameWithType: SessionAuthenticationModule.ContextSessionSecurityToken
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: CookieHandler
  nameWithType: SessionAuthenticationModule.CookieHandler
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler
- uid: System.IdentityModel.Services.CookieHandler
  parent: System.IdentityModel.Services
  isExternal: false
  name: CookieHandler
  nameWithType: CookieHandler
  fullName: System.IdentityModel.Services.CookieHandler
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.DateTime,System.DateTime,System.Boolean)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  nameWithType: SessionAuthenticationModule.CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken(ClaimsPrincipal,String,DateTime,DateTime,Boolean)
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: DeleteSessionTokenCookie()
  nameWithType: SessionAuthenticationModule.DeleteSessionTokenCookie()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie()
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(System.Web.HttpApplication)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: InitializeModule(HttpApplication)
  nameWithType: SessionAuthenticationModule.InitializeModule(HttpApplication)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule(HttpApplication)
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: InitializePropertiesFromConfiguration()
  nameWithType: SessionAuthenticationModule.InitializePropertiesFromConfiguration()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration()
- uid: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: IsReferenceMode
  nameWithType: SessionAuthenticationModule.IsReferenceMode
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnAuthenticateRequest(Object,EventArgs)
  nameWithType: SessionAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(System.Object,System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnPostAuthenticateRequest(Object,EventArgs)
  nameWithType: SessionAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest(Object,EventArgs)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated(SessionSecurityTokenCreatedEventArgs)
- uid: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: SessionSecurityTokenCreatedEventArgs
  nameWithType: SessionSecurityTokenCreatedEventArgs
  fullName: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived(SessionSecurityTokenReceivedEventArgs)
- uid: System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: SessionSecurityTokenReceivedEventArgs
  nameWithType: SessionSecurityTokenReceivedEventArgs
  fullName: System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(System.EventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSignedOut(EventArgs)
  nameWithType: SessionAuthenticationModule.OnSignedOut(EventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut(EventArgs)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(System.IdentityModel.Services.SigningOutEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSigningOut(SigningOutEventArgs)
  nameWithType: SessionAuthenticationModule.OnSigningOut(SigningOutEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut(SigningOutEventArgs)
- uid: System.IdentityModel.Services.SigningOutEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: SigningOutEventArgs
  nameWithType: SigningOutEventArgs
  fullName: System.IdentityModel.Services.SigningOutEventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(System.IdentityModel.Services.ErrorEventArgs)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSignOutError(ErrorEventArgs)
  nameWithType: SessionAuthenticationModule.OnSignOutError(ErrorEventArgs)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError(ErrorEventArgs)
- uid: System.IdentityModel.Services.ErrorEventArgs
  parent: System.IdentityModel.Services
  isExternal: false
  name: ErrorEventArgs
  nameWithType: ErrorEventArgs
  fullName: System.IdentityModel.Services.ErrorEventArgs
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(System.Byte[])
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ReadSessionTokenFromCookie(Byte[])
  nameWithType: SessionAuthenticationModule.ReadSessionTokenFromCookie(Byte[])
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SessionSecurityTokenCreated
  nameWithType: SessionAuthenticationModule.SessionSecurityTokenCreated
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenCreated
- uid: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SessionSecurityTokenCreatedEventArgs>
  nameWithType: EventHandler<SessionSecurityTokenCreatedEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SessionSecurityTokenCreatedEventArgs
    name: SessionSecurityTokenCreatedEventArgs
    nameWithType: SessionSecurityTokenCreatedEventArgs
    fullName: SessionSecurityTokenCreatedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SessionSecurityTokenReceived
  nameWithType: SessionAuthenticationModule.SessionSecurityTokenReceived
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SessionSecurityTokenReceived
- uid: System.EventHandler{System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SessionSecurityTokenReceivedEventArgs>
  nameWithType: EventHandler<SessionSecurityTokenReceivedEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SessionSecurityTokenReceivedEventArgs
    name: SessionSecurityTokenReceivedEventArgs
    nameWithType: SessionSecurityTokenReceivedEventArgs
    fullName: SessionSecurityTokenReceivedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SetPrincipalFromSessionToken(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.SetPrincipalFromSessionToken(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken(SessionSecurityToken)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SignedOut
  nameWithType: SessionAuthenticationModule.SignedOut
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignedOut
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SigningOut
  nameWithType: SessionAuthenticationModule.SigningOut
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SigningOut
- uid: System.EventHandler{System.IdentityModel.Services.SigningOutEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SigningOutEventArgs>
  nameWithType: EventHandler<SigningOutEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.SigningOutEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.SigningOutEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.SigningOutEventArgs
    name: SigningOutEventArgs
    nameWithType: SigningOutEventArgs
    fullName: SigningOutEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOut
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SignOut()
  nameWithType: SessionAuthenticationModule.SignOut()
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignOut()
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SignOutError
  nameWithType: SessionAuthenticationModule.SignOutError
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.SignOutError
- uid: System.EventHandler{System.IdentityModel.Services.ErrorEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<ErrorEventArgs>
  nameWithType: EventHandler<ErrorEventArgs>
  fullName: System.EventHandler<System.IdentityModel.Services.ErrorEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.IdentityModel.Services.ErrorEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.Services.ErrorEventArgs
    name: ErrorEventArgs
    nameWithType: ErrorEventArgs
    fullName: ErrorEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(System.IdentityModel.Tokens.SessionSecurityToken@)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: TryReadSessionTokenFromCookie(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.TryReadSessionTokenFromCookie(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie(SessionSecurityToken)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ValidateSessionToken(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.ValidateSessionToken(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken(SessionSecurityToken)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: WriteSessionTokenToCookie(SessionSecurityToken)
  nameWithType: SessionAuthenticationModule.WriteSessionTokenToCookie(SessionSecurityToken)
  fullName: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie(SessionSecurityToken)
- uid: System.IdentityModel.Services.SessionAuthenticationModule.#ctor*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SessionAuthenticationModule
  nameWithType: SessionAuthenticationModule.SessionAuthenticationModule
- uid: System.IdentityModel.Services.SessionAuthenticationModule.AuthenticateSessionSecurityToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: AuthenticateSessionSecurityToken
  nameWithType: SessionAuthenticationModule.AuthenticateSessionSecurityToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContainsSessionTokenCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ContainsSessionTokenCookie
  nameWithType: SessionAuthenticationModule.ContainsSessionTokenCookie
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ContextSessionSecurityToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ContextSessionSecurityToken
  nameWithType: SessionAuthenticationModule.ContextSessionSecurityToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CookieHandler*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: CookieHandler
  nameWithType: SessionAuthenticationModule.CookieHandler
- uid: System.IdentityModel.Services.SessionAuthenticationModule.CreateSessionSecurityToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: CreateSessionSecurityToken
  nameWithType: SessionAuthenticationModule.CreateSessionSecurityToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.DeleteSessionTokenCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: DeleteSessionTokenCookie
  nameWithType: SessionAuthenticationModule.DeleteSessionTokenCookie
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializeModule*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: InitializeModule
  nameWithType: SessionAuthenticationModule.InitializeModule
- uid: System.IdentityModel.Services.SessionAuthenticationModule.InitializePropertiesFromConfiguration*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: InitializePropertiesFromConfiguration
  nameWithType: SessionAuthenticationModule.InitializePropertiesFromConfiguration
- uid: System.IdentityModel.Services.SessionAuthenticationModule.IsReferenceMode*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: IsReferenceMode
  nameWithType: SessionAuthenticationModule.IsReferenceMode
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnAuthenticateRequest*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnAuthenticateRequest
  nameWithType: SessionAuthenticationModule.OnAuthenticateRequest
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnPostAuthenticateRequest*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnPostAuthenticateRequest
  nameWithType: SessionAuthenticationModule.OnPostAuthenticateRequest
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenCreated*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenCreated
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenCreated
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSessionSecurityTokenReceived*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSessionSecurityTokenReceived
  nameWithType: SessionAuthenticationModule.OnSessionSecurityTokenReceived
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignedOut*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSignedOut
  nameWithType: SessionAuthenticationModule.OnSignedOut
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSigningOut*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSigningOut
  nameWithType: SessionAuthenticationModule.OnSigningOut
- uid: System.IdentityModel.Services.SessionAuthenticationModule.OnSignOutError*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: OnSignOutError
  nameWithType: SessionAuthenticationModule.OnSignOutError
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ReadSessionTokenFromCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ReadSessionTokenFromCookie
  nameWithType: SessionAuthenticationModule.ReadSessionTokenFromCookie
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SetPrincipalFromSessionToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SetPrincipalFromSessionToken
  nameWithType: SessionAuthenticationModule.SetPrincipalFromSessionToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.SignOut*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: SignOut
  nameWithType: SessionAuthenticationModule.SignOut
- uid: System.IdentityModel.Services.SessionAuthenticationModule.TryReadSessionTokenFromCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: TryReadSessionTokenFromCookie
  nameWithType: SessionAuthenticationModule.TryReadSessionTokenFromCookie
- uid: System.IdentityModel.Services.SessionAuthenticationModule.ValidateSessionToken*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: ValidateSessionToken
  nameWithType: SessionAuthenticationModule.ValidateSessionToken
- uid: System.IdentityModel.Services.SessionAuthenticationModule.WriteSessionTokenToCookie*
  parent: System.IdentityModel.Services.SessionAuthenticationModule
  isExternal: false
  name: WriteSessionTokenToCookie
  nameWithType: SessionAuthenticationModule.WriteSessionTokenToCookie
