### YamlMime:ManagedReference
items:
- uid: System.Web.SessionState.SessionStateStoreProviderBase
  id: SessionStateStoreProviderBase
  children:
  - System.Web.SessionState.SessionStateStoreProviderBase.#ctor
  - System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData(System.Web.HttpContext,System.Int32)
  - System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)
  - System.Web.SessionState.SessionStateStoreProviderBase.Dispose
  - System.Web.SessionState.SessionStateStoreProviderBase.EndRequest(System.Web.HttpContext)
  - System.Web.SessionState.SessionStateStoreProviderBase.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)
  - System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)
  - System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest(System.Web.HttpContext)
  - System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)
  - System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)
  - System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout(System.Web.HttpContext,System.String)
  - System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)
  - System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)
  langs:
  - csharp
  name: SessionStateStoreProviderBase
  nameWithType: SessionStateStoreProviderBase
  fullName: System.Web.SessionState.SessionStateStoreProviderBase
  type: Class
  summary: "定义的会话状态提供程序的数据存储所需的成员。"
  remarks: "ASP.NET 会话状态读取和写入 from 和 to 数据存储区中使用会话状态的会话数据存储提供程序。 会话状态存储提供程序是一个类继承 SessionStateStoreProviderBase 抽象类，重写其成员实现特定于数据存储。 会话状态存储提供程序由<xref:System.Web.SessionState.SessionStateModule>期间 ASP.NET 页与存储的数据存储进行通信的处理和检索的会话变量和等的超时值的相关的会话信息的类。</xref:System.Web.SessionState.SessionStateModule>       每个单独存储每个 ASP.NET 应用程序中的会话数据<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>属性。</xref:System.Web.SessionState.HttpSessionState.SessionID%2A> ASP.NET 应用程序不共享会话数据。       你可以通过设置指定 ASP.NET 应用程序的自定义 SessionStateStoreProviderBase 实现`mode`属性`sessionState`到的配置元素<xref:System.Web.SessionState.SessionStateMode>和`customProvider`属性的名称自定义提供程序，如本主题的示例中所示。</xref:System.Web.SessionState.SessionStateMode>      ## 锁定会话的应用商店数据因为 ASP.NET 应用程序是多线程，以支持对并发请求的响应，但可以并发请求可能会尝试访问相同的会话信息。 请考虑在所有框架集的多个帧访问同一个应用程序的位置的方案。 可以同时在不同线程在 Web 服务器上执行个框架集中每个帧的独立请求。 如果每个帧源的 ASP.NET 页访问会话状态变量，则会有多个线程同时访问的会话存储。       若要避免数据冲突，在会话存储和意外的会话状态行为<xref:System.Web.SessionState.SessionStateModule>和 SessionStateStoreProviderBase 类包含了 ASP.NET 页的执行持续时间的特定会话以独占方式锁定会话存储项的锁定功能。</xref:System.Web.SessionState.SessionStateModule> 请注意，即使<xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>属性标记为`ReadOnly`，在同一应用程序的其他 ASP.NET 页可能能够将写入到的会话存储中，因此为只读的会话的请求存储区中的数据可能仍最终等待锁定要释放的数据。</xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>       对会话存储数据请求，对的调用中的开头设置锁定<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> 完成请求后，在调用期间释放锁<xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A>       如果<xref:System.Web.SessionState.SessionStateModule>对象在调用过程中遇到锁定的会话数据<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A>或<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A>方法，它将重新请求的会话数据隔半秒直到释放锁或会话数据已被锁定的时间量超过的值<xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A>属性。</xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> </xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> </xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> </xref:System.Web.SessionState.SessionStateModule> 如果超出超时执行时间，则<xref:System.Web.SessionState.SessionStateModule>对象将调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A>方法以释放会话存储数据并在该时间请求会话存储数据。</xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> </xref:System.Web.SessionState.SessionStateModule>       因为锁定会话存储数据可能会被释放通过调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A>方法对的调用之前在单独线程上<xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A>当前响应的方法，无法尝试设置和发布已发布和修改由另一个会话的会话状态存储数据。</xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A> </xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> 若要避免此情况下，<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A>和<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A>方法返回的锁定标识符。</xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> </xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> 此锁标识符必须包含每个请求以修改锁定的会话存储数据。 会话存储仅当数据存储区中的锁定标识符匹配<xref:System.Web.SessionState.SessionStateModule>.</xref:System.Web.SessionState.SessionStateModule>所提供的锁定标识符时修改数据      ## 删除过期会话存储数据时<xref:System.Web.SessionState.HttpSessionState.Abandon%2A>针对特定会话调用方法，该会话的数据将删除从数据存储区使用<xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A>方法; 否则，数据将保留在服务器今后的请求的会话数据存储区为会话。</xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A> </xref:System.Web.SessionState.HttpSessionState.Abandon%2A> 负责 SessionStateStoreProviderBase 实现中删除过期的会话数据。"
  example:
  - "For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).  \n  \n The following code example shows the Web.config file for an ASP.NET application that is configured to use a custom session-state store provider.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"OdbcSessionServices\" connectionString=\"DSN=SessionState;\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n    <sessionState   \n      mode=\"Custom\"  \n      customProvider=\"OdbcSessionProvider\">  \n      <providers>  \n        <add name=\"OdbcSessionProvider\"  \n             type=\"Samples.AspNet.Session.OdbcSessionStateStore\"  \n             connectionStringName=\"OdbcSessionServices\" />  \n      </providers>  \n    </sessionState>  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: 'public abstract class SessionStateStoreProviderBase : System.Configuration.Provider.ProviderBase'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  implements: []
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.#ctor
  id: '#ctor'
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: SessionStateStoreProviderBase()
  nameWithType: SessionStateStoreProviderBase.SessionStateStoreProviderBase()
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.SessionStateStoreProviderBase()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "初始化的新实例<xref href=&quot;System.Web.SessionState.SessionStateStoreProviderBase&quot;></xref>类。"
  remarks: "不需要实现<xref:System.Web.SessionState.SessionStateStoreProviderBase>抽象类</xref:System.Web.SessionState.SessionStateStoreProviderBase>继承的类的构造函数 值初始化<xref:System.Web.SessionState.SessionStateStoreProviderBase>实现传递给<xref:System.Configuration.Provider.ProviderBase.Initialize%2A>方法实现。</xref:System.Configuration.Provider.ProviderBase.Initialize%2A> </xref:System.Web.SessionState.SessionStateStoreProviderBase>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: protected SessionStateStoreProviderBase ();
    parameters: []
  overload: System.Web.SessionState.SessionStateStoreProviderBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData(System.Web.HttpContext,System.Int32)
  id: CreateNewStoreData(System.Web.HttpContext,System.Int32)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: CreateNewStoreData(HttpContext,Int32)
  nameWithType: SessionStateStoreProviderBase.CreateNewStoreData(HttpContext,Int32)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData(HttpContext,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "创建一个新<xref href=&quot;System.Web.SessionState.SessionStateStoreData&quot;></xref>要用于当前请求的对象。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象期间调用 ASP.NET 页中，请求的开始处的 CreateNewStoreData 方法<xref:System.Web.HttpApplication.AcquireRequestState>事件。</xref:System.Web.HttpApplication.AcquireRequestState> </xref:System.Web.SessionState.SessionStateModule> 如果调用 CreateNewStoreData 方法:-传入的请求具有没有会话 ID，或-传入的请求具有数据存储区中未找到 ID，但会话的会话。       CreateNewStoreData 方法创建一个新<xref:System.Web.SessionState.SessionStateStoreData>具有一个空对象<xref:System.Web.SessionState.ISessionStateItemCollection>对象，<xref:System.Web.HttpStaticObjectsCollection>集合，并且指定`timeout`值。</xref:System.Web.HttpStaticObjectsCollection> </xref:System.Web.SessionState.ISessionStateItemCollection> </xref:System.Web.SessionState.SessionStateStoreData> <xref:System.Web.HttpStaticObjectsCollection>可以使用检索的 ASP.NET 应用程序的集合<xref:System.Web.SessionState.SessionStateUtility.GetSessionStaticObjects%2A>方法。</xref:System.Web.SessionState.SessionStateUtility.GetSessionStaticObjects%2A> </xref:System.Web.HttpStaticObjectsCollection>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract System.Web.SessionState.SessionStateStoreData CreateNewStoreData (System.Web.HttpContext context, int timeout);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
    - id: timeout
      type: System.Int32
      description: "会话状态<xref:System.Web.SessionState.HttpSessionState.Timeout*>新值<xref href=&quot;System.Web.SessionState.SessionStateStoreData&quot;> </xref>。</xref:System.Web.SessionState.HttpSessionState.Timeout*>"
    return:
      type: System.Web.SessionState.SessionStateStoreData
      description: "一个新<xref href=&quot;System.Web.SessionState.SessionStateStoreData&quot;></xref>为当前请求。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)
  id: CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: CreateUninitializedItem(HttpContext,String,Int32)
  nameWithType: SessionStateStoreProviderBase.CreateUninitializedItem(HttpContext,String,Int32)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem(HttpContext,String,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "将新的会话状态项添加到数据存储中。"
  remarks: "CreateUninitializedItem 方法用于会话时`cookieless`和`regenerateExpiredSessionId`属性都是`true`。 具有`regenerateExpiredSessionId attribute`设置为`true`导致<xref:System.Web.SessionState.SessionStateModule>要生成一个新对象<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值时过期<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>遇到值。</xref:System.Web.SessionState.HttpSessionState.SessionID%2A> </xref:System.Web.SessionState.HttpSessionState.SessionID%2A> </xref:System.Web.SessionState.SessionStateModule>       生成一个新的过程<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值需要将浏览器重定向到包含新生成的 URL<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值。</xref:System.Web.SessionState.HttpSessionState.SessionID%2A> </xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 在包含过期的初始请求过程中调用 CreateUninitializedItem 方法<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值。</xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 后<xref:System.Web.SessionState.SessionStateModule>对象获取一个新<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值来替换过期的值时，它调用 CreateUninitializedItem 方法将未初始化的项添加到会话状态数据存储。</xref:System.Web.SessionState.HttpSessionState.SessionID%2A> </xref:System.Web.SessionState.SessionStateModule> 然后，将浏览器重定向到包含新生成的 URL<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值。</xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 会话数据存储区中未初始化的项是否存在可确保包括新生成的重定向的请求<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值不导致了错误的请求的过期的会话，而，相反，视为新的会话。</xref:System.Web.SessionState.HttpSessionState.SessionID%2A>       会话数据存储区中的未经初始化即的项是与新生成相关联<xref:System.Web.SessionState.HttpSessionState.SessionID%2A>值和只包含默认值，包括过期日期和时间，以及一个值，对应于`actionFlags`参数<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A>和<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> </xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> </xref:System.Web.SessionState.HttpSessionState.SessionID%2A> 会话状态存储区中未初始化的条目应包含`actionFlags`值等于<xref:System.Web.SessionState.SessionStateActions>枚举值。</xref:System.Web.SessionState.SessionStateActions> 此值传递给<xref:System.Web.SessionState.SessionStateModule>对象<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A>和<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A>方法，并通知<xref:System.Web.SessionState.SessionStateModule>当前会话是新但的对象未初始化的会话。</xref:System.Web.SessionState.SessionStateModule> </xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> </xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> </xref:System.Web.SessionState.SessionStateModule> <xref:System.Web.SessionState.SessionStateModule>对象然后会初始化该新会话，并引发`Session_OnStart`事件。</xref:System.Web.SessionState.SessionStateModule>       有关无 cookie 会话的详细信息，请参阅<xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>属性。</xref:System.Web.SessionState.HttpSessionState.IsCookieless%2A>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract void CreateUninitializedItem (System.Web.HttpContext context, string id, int timeout);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
    - id: id
      type: System.String
      description: "<xref:System.Web.SessionState.HttpSessionState.SessionID*>为当前请求。</xref:System.Web.SessionState.HttpSessionState.SessionID*>"
    - id: timeout
      type: System.Int32
      description: "会话<xref:System.Web.SessionState.HttpSessionState.Timeout*>为当前请求。</xref:System.Web.SessionState.HttpSessionState.Timeout*>"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.Dispose
  id: Dispose
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: Dispose()
  nameWithType: SessionStateStoreProviderBase.Dispose()
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "释放使用的所有资源<xref href=&quot;System.Web.SessionState.SessionStateStoreProviderBase&quot;></xref>实现。"
  remarks: "Dispose 方法调用时<xref:System.Web.SessionState.SessionStateModule.Dispose%2A?displayProperty=fullName>方法执行在应用程序域关闭。</xref:System.Web.SessionState.SessionStateModule.Dispose%2A?displayProperty=fullName> 继承的类<xref:System.Web.SessionState.SessionStateStoreProviderBase>类可以使用此方法以释放不再使用中的任何资源。</xref:System.Web.SessionState.SessionStateStoreProviderBase>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract void Dispose ();
    parameters: []
  overload: System.Web.SessionState.SessionStateStoreProviderBase.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.EndRequest(System.Web.HttpContext)
  id: EndRequest(System.Web.HttpContext)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: EndRequest(HttpContext)
  nameWithType: SessionStateStoreProviderBase.EndRequest(HttpContext)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.EndRequest(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "由调用<xref href=&quot;System.Web.SessionState.SessionStateModule&quot;></xref>末尾的请求的对象。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象期间调用 ASP.NET 页中，请求的末尾处的 EndRequest 方法<xref:System.Web.HttpApplication.EndRequest>事件。</xref:System.Web.HttpApplication.EndRequest> </xref:System.Web.SessionState.SessionStateModule> EndRequest 方法可用于执行任何所需的会话状态存储提供程序的每个请求清理。"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract void EndRequest (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.EndRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)
  id: GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: GetItem(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  nameWithType: SessionStateStoreProviderBase.GetItem(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.GetItem(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "从会话数据存储区返回只读的会话状态数据。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象期间调用的请求开始处的 GetItem 方法<xref:System.Web.HttpApplication.AcquireRequestState>事件，当<xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>属性设置为`ReadOnly`。</xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> </xref:System.Web.HttpApplication.AcquireRequestState> </xref:System.Web.SessionState.SessionStateModule> 如果<xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>属性设置为`true`、<xref:System.Web.SessionState.SessionStateModule>对象改为调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive%2A> </xref:System.Web.SessionState.SessionStateModule> </xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>       GetItem 方法返回<xref:System.Web.SessionState.SessionStateStoreData>对象填充数据存储区中的会话信息和更新会话数据的过期日期。</xref:System.Web.SessionState.SessionStateStoreData> 如果在数据存储区中不找到任何会话项数据，则 GetItem 方法会设置`locked``out`参数`false`并返回`null`。 这将导致<xref:System.Web.SessionState.SessionStateModule>对象调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A>方法来创建一个新会话项在数据存储。</xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A> </xref:System.Web.SessionState.SessionStateModule>       如果会话项在数据存储区中找到数据，但数据被锁定，GetItem 方法设置`locked``out`参数`true`，设置`lockAge``out`参数 （其中从存储中检索数据），设置为当前日期和时间减去的日期和时间锁定此项目已`lockId``out`参数的锁定标识符从数据存储区，并返回检索`null`。 这将导致<xref:System.Web.SessionState.SessionStateModule>对象在半秒时间间隔，以尝试检索会话项信息后再次调用 GetItem 方法。</xref:System.Web.SessionState.SessionStateModule>       如果值的`lockAge``out`参数设置为超过<xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A>值，则<xref:System.Web.SessionState.SessionStateModule>对象调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A>方法以清除锁定会话项数据，然后再次调用 GetItem 方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> </xref:System.Web.SessionState.SessionStateModule> </xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A>       `actionFlags`使用参数时同时`cookieless`和`regenerateExpiredSessionId`属性都设置为`true`。 `actionFlags`值设置为<xref:System.Web.SessionState.SessionStateActions>指示会话数据存储区中的项是需要初始化的新会话。</xref:System.Web.SessionState.SessionStateActions> 通过调用创建会话数据存储区中的未经初始化即的项<xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A> 如果会话数据存储区中的项不是未初始化的项，`actionFlags`参数将设置为零。       支持无 cookie 会话的自定义会话状态存储实施者应设置`actionFlags``out`从当前项的会话数据存储区返回的值的参数。 如果`actionFlags`请求的会话存储的参数值项等于<xref:System.Web.SessionState.SessionStateActions>枚举值，则 GetItem 方法应将值设置为零后设置数据存储区中`actionFlags``out`参数。</xref:System.Web.SessionState.SessionStateActions>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract System.Web.SessionState.SessionStateStoreData GetItem (System.Web.HttpContext context, string id, out bool locked, out TimeSpan lockAge, out object lockId, out System.Web.SessionState.SessionStateActions actions);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
    - id: id
      type: System.String
      description: "<xref:System.Web.SessionState.HttpSessionState.SessionID*>为当前请求。</xref:System.Web.SessionState.HttpSessionState.SessionID*>"
    - id: locked
      type: System.Boolean
      description: "此方法返回时，包含一个布尔值，设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果请求的会话项是在会话数据存储区锁定; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: lockAge
      type: System.TimeSpan
      description: "此方法返回时，包含<xref:System.TimeSpan>设置为会话数据存储区中的项已被锁定的时间量的对象。</xref:System.TimeSpan>"
    - id: lockId
      type: System.Object
      description: "此方法返回时，包含设置为当前请求的锁定标识符的对象。 有关的锁定标识符的详细信息，请参见&quot;锁定会话存储数据&quot; <xref href=&quot;System.Web.SessionState.SessionStateStoreProviderBase&quot;> </xref>类摘要。"
    - id: actions
      type: System.Web.SessionState.SessionStateActions
      description: "此方法返回时，包含之一<xref href=&quot;System.Web.SessionState.SessionStateActions&quot;></xref>值，该值指示当前会话是否为未初始化，无 cookie 会话。"
    return:
      type: System.Web.SessionState.SessionStateStoreData
      description: "A <xref href=&quot;System.Web.SessionState.SessionStateStoreData&quot;> </xref>使用会话值和会话数据存储区中的信息来填充。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.GetItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)
  id: GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: GetItemExclusive(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  nameWithType: SessionStateStoreProviderBase.GetItemExclusive(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "从会话数据存储区返回只读的会话状态数据。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象期间调用的请求开始处的 GetItemExclusive 方法<xref:System.Web.HttpApplication.AcquireRequestState>事件，当<xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>属性设置为`true`，这是默认设置。</xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> </xref:System.Web.HttpApplication.AcquireRequestState> </xref:System.Web.SessionState.SessionStateModule> 如果<xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>属性设置为`ReadOnly`、<xref:System.Web.SessionState.SessionStateModule>对象改为调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.GetItem%2A> </xref:System.Web.SessionState.SessionStateModule> </xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>       GetItemExclusive 方法返回<xref:System.Web.SessionState.SessionStateStoreData>填充从数据存储的会话信息的对象更新所存储的数据的过期日期和请求的持续时间内锁定数据存储的会话项数据。</xref:System.Web.SessionState.SessionStateStoreData> 如果在数据存储区中不找到任何会话项数据，则 GetItemExclusive 方法会设置`locked``out`参数`false`并返回`null`。 这将导致<xref:System.Web.SessionState.SessionStateModule>对象调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A>方法来创建一个新会话项在数据存储。</xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData%2A> </xref:System.Web.SessionState.SessionStateModule> 如果会话项在数据存储区中找到数据，但数据被锁定，GetItemExclusive 方法设置`locked``out`参数`true`，设置`lockAge``out`参数 （其中从存储中检索数据），设置为当前日期和时间减去的日期和时间锁定此项目已`lockId``out`参数的锁定标识符从数据存储区，并返回检索`null`。 这将导致<xref:System.Web.SessionState.SessionStateModule>对象在半秒时间间隔，尝试检索会话项信息并获取数据的锁后再次调用 GetItemExclusive 方法。</xref:System.Web.SessionState.SessionStateModule> 如果值的`lockAge``out`参数设置为超出<xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A>值，则<xref:System.Web.SessionState.SessionStateModule>调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A>方法以清除锁定会话项数据，然后再次调用 GetItemExclusive 方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A> </xref:System.Web.SessionState.SessionStateModule> </xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A>       `actionFlags`使用参数时`cookieless`和`regenerateExpiredSessionId`属性都设置为`true`。 `actionFlags`值设置为<xref:System.Web.SessionState.SessionStateActions>指示会话数据存储区中的项是需要初始化的新会话。</xref:System.Web.SessionState.SessionStateActions> 通过调用创建会话数据存储区中的未经初始化即的项<xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem%2A> 如果会话数据存储区中的项不是未初始化的项，`actionFlags`参数将设置为零。       支持无 cookie 会话的自定义会话状态存储实施者应设置`actionFlags``out`从当前项的会话数据存储区返回的值的参数。 如果`actionFlags`请求的会话存储的参数值项等于<xref:System.Web.SessionState.SessionStateActions>枚举值，则 GetItemExclusive 方法应将值设置为零后设置数据存储区中`actionFlags``out`参数。</xref:System.Web.SessionState.SessionStateActions>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract System.Web.SessionState.SessionStateStoreData GetItemExclusive (System.Web.HttpContext context, string id, out bool locked, out TimeSpan lockAge, out object lockId, out System.Web.SessionState.SessionStateActions actions);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
    - id: id
      type: System.String
      description: "<xref:System.Web.SessionState.HttpSessionState.SessionID*>为当前请求。</xref:System.Web.SessionState.HttpSessionState.SessionID*>"
    - id: locked
      type: System.Boolean
      description: "此方法返回时，包含一个布尔值，设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>锁是否已成功获得; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: lockAge
      type: System.TimeSpan
      description: "此方法返回时，包含<xref:System.TimeSpan>设置为会话数据存储区中的项已被锁定的时间量的对象。</xref:System.TimeSpan>"
    - id: lockId
      type: System.Object
      description: "此方法返回时，包含设置为当前请求的锁定标识符的对象。 有关的锁定标识符的详细信息，请参见&quot;锁定会话存储数据&quot; <xref href=&quot;System.Web.SessionState.SessionStateStoreProviderBase&quot;> </xref>类摘要。"
    - id: actions
      type: System.Web.SessionState.SessionStateActions
      description: "此方法返回时，包含之一<xref href=&quot;System.Web.SessionState.SessionStateActions&quot;></xref>值，该值指示当前会话是否为未初始化，无 cookie 会话。"
    return:
      type: System.Web.SessionState.SessionStateStoreData
      description: "A <xref href=&quot;System.Web.SessionState.SessionStateStoreData&quot;> </xref>使用会话值和会话数据存储区中的信息来填充。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest(System.Web.HttpContext)
  id: InitializeRequest(System.Web.HttpContext)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: InitializeRequest(HttpContext)
  nameWithType: SessionStateStoreProviderBase.InitializeRequest(HttpContext)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "由调用<xref href=&quot;System.Web.SessionState.SessionStateModule&quot;></xref>每个请求的初始化的对象。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象前调用任何其他调用 InitializeRequest 方法<xref:System.Web.SessionState.SessionStateStoreProviderBase>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase> </xref:System.Web.SessionState.SessionStateModule> InitializeRequest 方法可用于执行任何所需的会话状态存储提供程序的每个请求初始化。"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract void InitializeRequest (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)
  id: ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: ReleaseItemExclusive(HttpContext,String,Object)
  nameWithType: SessionStateStoreProviderBase.ReleaseItemExclusive(HttpContext,String,Object)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive(HttpContext,String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "版本存储会话数据中的项上的锁。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象调用 ReleaseItemExclusive 方法更新的到期日期并释放会话数据存储区中的项上的锁。</xref:System.Web.SessionState.SessionStateModule> 它在结束时调用的请求期间<xref:System.Web.HttpApplication.ReleaseRequestState>事件，如果会话值未更改。</xref:System.Web.HttpApplication.ReleaseRequestState> 如果会话值进行了修改，<xref:System.Web.SessionState.SessionStateModule>对象改为调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A>方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive%2A> </xref:System.Web.SessionState.SessionStateModule>       <xref:System.Web.SessionState.SessionStateModule>对象还将调用 ReleaseItemExclusive 方法超过会话数据存储区中的项上的锁时<xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A>值。</xref:System.Web.Configuration.HttpRuntimeSection.ExecutionTimeout%2A> </xref:System.Web.SessionState.SessionStateModule> 有关锁定的详细信息和有关的锁定标识符的详细信息，请参阅&quot;锁定会话存储数据&quot;中<xref:System.Web.SessionState.SessionStateStoreProviderBase>类概述。</xref:System.Web.SessionState.SessionStateStoreProviderBase>       ReleaseItemExclusive 方法仅从一项中的当前应用程序与匹配提供的会话的会话数据存储中删除锁`id`和`lockId`值。 如果`lockId`不匹配是数据存储区中，ReleaseItemExclusive 方法不执行任何操作。"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract void ReleaseItemExclusive (System.Web.HttpContext context, string id, object lockId);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
    - id: id
      type: System.String
      description: "当前请求的会话标识符。"
    - id: lockId
      type: System.Object
      description: "当前请求的锁定标识符。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)
  id: RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: RemoveItem(HttpContext,String,Object,SessionStateStoreData)
  nameWithType: SessionStateStoreProviderBase.RemoveItem(HttpContext,String,Object,SessionStateStoreData)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem(HttpContext,String,Object,SessionStateStoreData)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "删除项中的会话数据存储的数据。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象期间调用 RemoveItem 方法末尾的请求，<xref:System.Web.HttpApplication.ReleaseRequestState>事件，若要从会话数据存储区删除会话选项的数据，如果<xref:System.Web.SessionState.HttpSessionState.Abandon%2A>调用方法。</xref:System.Web.SessionState.HttpSessionState.Abandon%2A> </xref:System.Web.HttpApplication.ReleaseRequestState> </xref:System.Web.SessionState.SessionStateModule> 匹配提供的会话的当前应用程序仅会话数据`id`和`lockId`删除值。 有关锁定的详细信息和有关的锁定标识符的详细信息，请参阅&quot;锁定会话存储数据&quot;中<xref:System.Web.SessionState.SessionStateStoreProviderBase>类概述。</xref:System.Web.SessionState.SessionStateStoreProviderBase>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract void RemoveItem (System.Web.HttpContext context, string id, object lockId, System.Web.SessionState.SessionStateStoreData item);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
    - id: id
      type: System.String
      description: "当前请求的会话标识符。"
    - id: lockId
      type: System.Object
      description: "当前请求的锁定标识符。"
    - id: item
      type: System.Web.SessionState.SessionStateStoreData
      description: "<xref href=&quot;System.Web.SessionState.SessionStateStoreData&quot;> </xref> ，表示要从数据存储中删除的项。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout(System.Web.HttpContext,System.String)
  id: ResetItemTimeout(System.Web.HttpContext,System.String)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: ResetItemTimeout(HttpContext,String)
  nameWithType: SessionStateStoreProviderBase.ResetItemTimeout(HttpContext,String)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout(HttpContext,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "更新的到期日期和时间的会话数据存储区中的项。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象调用 ResetItemTimeout 方法来更新的到期日期和适用于会话的时间为当前日期和时间加上会话<xref:System.Web.SessionState.HttpSessionState.Timeout%2A>值时任一:-<xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>属性是`true`，或-请求未引发<xref:System.Web.HttpApplication.AcquireRequestState>和<xref:System.Web.HttpApplication.ReleaseRequestState>由于出错的事件。</xref:System.Web.HttpApplication.ReleaseRequestState> </xref:System.Web.HttpApplication.AcquireRequestState> </xref:System.Web.Configuration.PagesSection.EnableSessionState%2A> </xref:System.Web.SessionState.HttpSessionState.Timeout%2A> </xref:System.Web.SessionState.SessionStateModule>       如果请求 ASP.NET 页和<xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>属性设置为`false`，ResetItemTimeout 方法仍调用以更新的到期日期和时间的会话数据存储区中的数据。</xref:System.Web.Configuration.PagesSection.EnableSessionState%2A>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract void ResetItemTimeout (System.Web.HttpContext context, string id);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
    - id: id
      type: System.String
      description: "当前请求的会话标识符。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)
  id: SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: SetAndReleaseItemExclusive(HttpContext,String,SessionStateStoreData,Object,Boolean)
  nameWithType: SessionStateStoreProviderBase.SetAndReleaseItemExclusive(HttpContext,String,SessionStateStoreData,Object,Boolean)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive(HttpContext,String,SessionStateStoreData,Object,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "通过当前请求的值更新会话状态数据存储区中的会话项信息并清除数据的锁定。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象期间调用 SetAndReleaseItemExclusive 方法末尾的请求，<xref:System.Web.HttpApplication.ReleaseRequestState>事件，将当前会话项信息插入到数据存储或使用当前值，以更新该项目，在过期并解锁数据更新数据存储区中的现有会话项信息。</xref:System.Web.HttpApplication.ReleaseRequestState> </xref:System.Web.SessionState.SessionStateModule> 匹配提供的会话的当前应用程序仅会话数据`id`和`lockId`更新值。 锁定的详细信息，请参阅&quot;锁定会话存储区数据&quot;中<xref:System.Web.SessionState.SessionStateStoreProviderBase>类概述。</xref:System.Web.SessionState.SessionStateStoreProviderBase>       如果当前请求的会话值不进行了修改，则不会调用 SetAndReleaseItemExclusive 方法。 相反，<xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A>调用方法。</xref:System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive%2A>       如果<xref:System.Web.SessionState.HttpSessionState.Abandon%2A>调用方法，不调用 SetAndReleaseItemExclusive 方法。</xref:System.Web.SessionState.HttpSessionState.Abandon%2A> 相反，<xref:System.Web.SessionState.SessionStateModule>对象调用<xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A>方法来删除会话项数据从数据源。</xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A> </xref:System.Web.SessionState.SessionStateModule>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract void SetAndReleaseItemExclusive (System.Web.HttpContext context, string id, System.Web.SessionState.SessionStateStoreData item, object lockId, bool newItem);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
    - id: id
      type: System.String
      description: "当前请求的会话标识符。"
    - id: item
      type: System.Web.SessionState.SessionStateStoreData
      description: "<xref href=&quot;System.Web.SessionState.SessionStateStoreData&quot;> </xref>对象，其中包含要存储的当前会话值。"
    - id: lockId
      type: System.Object
      description: "当前请求的锁定标识符。"
    - id: newItem
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要确定会话项作为新项;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>来标识作为现有项会话项。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive*
  exceptions: []
  platform:
  - net462
- uid: System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)
  id: SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  langs:
  - csharp
  name: SetItemExpireCallback(SessionStateItemExpireCallback)
  nameWithType: SessionStateStoreProviderBase.SetItemExpireCallback(SessionStateItemExpireCallback)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback(SessionStateItemExpireCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.SessionState
  summary: "将引用设置为<xref href=&quot;System.Web.SessionState.SessionStateItemExpireCallback&quot;></xref>委托<xref uid=&quot;langword_csharp_Session_OnEnd&quot; name=&quot;Session_OnEnd&quot; href=&quot;&quot;></xref>在 Global.asax 文件中定义的事件。"
  remarks: "<xref:System.Web.SessionState.SessionStateModule>对象调用 SetItemExpireCallback 方法，以确定在初始化模块时是否调用`Session_OnEnd`支持事件<xref:System.Web.SessionState.SessionStateStoreProviderBase>实现并将关联<xref:System.Web.SessionState.SessionStateItemExpireCallback>委托以及`Session_OnEnd`事件。</xref:System.Web.SessionState.SessionStateItemExpireCallback> </xref:System.Web.SessionState.SessionStateStoreProviderBase> </xref:System.Web.SessionState.SessionStateModule>       自定义会话状态存储提供程序实施者应使用 SetItemExpireCallback 方法以通知<xref:System.Web.SessionState.SessionStateModule>对象是否调用`Session_OnEnd`支持事件并将本地引用设置为<xref:System.Web.SessionState.SessionStateItemExpireCallback>委托提供`expireCallback`参数。</xref:System.Web.SessionState.SessionStateItemExpireCallback> </xref:System.Web.SessionState.SessionStateModule> 自定义实现必须确定何时本地<xref:System.Web.SessionState.SessionStateItemExpireCallback>将调用委托。</xref:System.Web.SessionState.SessionStateItemExpireCallback> 例如，无法在调用过程中调用该委托<xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A>方法，它放弃会话时调用。</xref:System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem%2A>"
  example:
  - For an example of a session-state store provider implementation, see [Implementing a Session-State Store Provider](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract bool SetItemExpireCallback (System.Web.SessionState.SessionStateItemExpireCallback expireCallback);
    parameters:
    - id: expireCallback
      type: System.Web.SessionState.SessionStateItemExpireCallback
      description: "<xref href=&quot;System.Web.SessionState.SessionStateItemExpireCallback&quot;> </xref>委托<xref uid=&quot;langword_csharp_Session_OnEnd&quot; name=&quot;Session_OnEnd&quot; href=&quot;&quot;></xref>在 Global.asax 文件中定义的事件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果会话状态存储提供程序支持调用<xref uid=&quot;langword_csharp_Session_OnEnd&quot; name=&quot;Session_OnEnd&quot; href=&quot;&quot;></xref>事件; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: System.Configuration.Provider.ProviderBase
- uid: System.Web.SessionState.SessionStateStoreProviderBase.#ctor
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: SessionStateStoreProviderBase()
  nameWithType: SessionStateStoreProviderBase.SessionStateStoreProviderBase()
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.SessionStateStoreProviderBase()
- uid: System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData(System.Web.HttpContext,System.Int32)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: CreateNewStoreData(HttpContext,Int32)
  nameWithType: SessionStateStoreProviderBase.CreateNewStoreData(HttpContext,Int32)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData(HttpContext,Int32)
- uid: System.Web.SessionState.SessionStateStoreData
  parent: System.Web.SessionState
  isExternal: false
  name: SessionStateStoreData
  nameWithType: SessionStateStoreData
  fullName: System.Web.SessionState.SessionStateStoreData
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem(System.Web.HttpContext,System.String,System.Int32)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: CreateUninitializedItem(HttpContext,String,Int32)
  nameWithType: SessionStateStoreProviderBase.CreateUninitializedItem(HttpContext,String,Int32)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem(HttpContext,String,Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.SessionState.SessionStateStoreProviderBase.Dispose
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: Dispose()
  nameWithType: SessionStateStoreProviderBase.Dispose()
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.Dispose()
- uid: System.Web.SessionState.SessionStateStoreProviderBase.EndRequest(System.Web.HttpContext)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: EndRequest(HttpContext)
  nameWithType: SessionStateStoreProviderBase.EndRequest(HttpContext)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.EndRequest(HttpContext)
- uid: System.Web.SessionState.SessionStateStoreProviderBase.GetItem(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: GetItem(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  nameWithType: SessionStateStoreProviderBase.GetItem(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.GetItem(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.SessionState.SessionStateActions
  parent: System.Web.SessionState
  isExternal: false
  name: SessionStateActions
  nameWithType: SessionStateActions
  fullName: System.Web.SessionState.SessionStateActions
- uid: System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive(System.Web.HttpContext,System.String,System.Boolean@,System.TimeSpan@,System.Object@,System.Web.SessionState.SessionStateActions@)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: GetItemExclusive(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  nameWithType: SessionStateStoreProviderBase.GetItemExclusive(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive(HttpContext,String,Boolean,TimeSpan,Object,SessionStateActions)
- uid: System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest(System.Web.HttpContext)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: InitializeRequest(HttpContext)
  nameWithType: SessionStateStoreProviderBase.InitializeRequest(HttpContext)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest(HttpContext)
- uid: System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive(System.Web.HttpContext,System.String,System.Object)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: ReleaseItemExclusive(HttpContext,String,Object)
  nameWithType: SessionStateStoreProviderBase.ReleaseItemExclusive(HttpContext,String,Object)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive(HttpContext,String,Object)
- uid: System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem(System.Web.HttpContext,System.String,System.Object,System.Web.SessionState.SessionStateStoreData)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: RemoveItem(HttpContext,String,Object,SessionStateStoreData)
  nameWithType: SessionStateStoreProviderBase.RemoveItem(HttpContext,String,Object,SessionStateStoreData)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem(HttpContext,String,Object,SessionStateStoreData)
- uid: System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout(System.Web.HttpContext,System.String)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: ResetItemTimeout(HttpContext,String)
  nameWithType: SessionStateStoreProviderBase.ResetItemTimeout(HttpContext,String)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout(HttpContext,String)
- uid: System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive(System.Web.HttpContext,System.String,System.Web.SessionState.SessionStateStoreData,System.Object,System.Boolean)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: SetAndReleaseItemExclusive(HttpContext,String,SessionStateStoreData,Object,Boolean)
  nameWithType: SessionStateStoreProviderBase.SetAndReleaseItemExclusive(HttpContext,String,SessionStateStoreData,Object,Boolean)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive(HttpContext,String,SessionStateStoreData,Object,Boolean)
- uid: System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback(System.Web.SessionState.SessionStateItemExpireCallback)
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: SetItemExpireCallback(SessionStateItemExpireCallback)
  nameWithType: SessionStateStoreProviderBase.SetItemExpireCallback(SessionStateItemExpireCallback)
  fullName: System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback(SessionStateItemExpireCallback)
- uid: System.Web.SessionState.SessionStateItemExpireCallback
  parent: System.Web.SessionState
  isExternal: false
  name: SessionStateItemExpireCallback
  nameWithType: SessionStateItemExpireCallback
  fullName: System.Web.SessionState.SessionStateItemExpireCallback
- uid: System.Web.SessionState.SessionStateStoreProviderBase.#ctor*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: SessionStateStoreProviderBase
  nameWithType: SessionStateStoreProviderBase.SessionStateStoreProviderBase
- uid: System.Web.SessionState.SessionStateStoreProviderBase.CreateNewStoreData*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: CreateNewStoreData
  nameWithType: SessionStateStoreProviderBase.CreateNewStoreData
- uid: System.Web.SessionState.SessionStateStoreProviderBase.CreateUninitializedItem*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: CreateUninitializedItem
  nameWithType: SessionStateStoreProviderBase.CreateUninitializedItem
- uid: System.Web.SessionState.SessionStateStoreProviderBase.Dispose*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: Dispose
  nameWithType: SessionStateStoreProviderBase.Dispose
- uid: System.Web.SessionState.SessionStateStoreProviderBase.EndRequest*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: EndRequest
  nameWithType: SessionStateStoreProviderBase.EndRequest
- uid: System.Web.SessionState.SessionStateStoreProviderBase.GetItem*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: GetItem
  nameWithType: SessionStateStoreProviderBase.GetItem
- uid: System.Web.SessionState.SessionStateStoreProviderBase.GetItemExclusive*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: GetItemExclusive
  nameWithType: SessionStateStoreProviderBase.GetItemExclusive
- uid: System.Web.SessionState.SessionStateStoreProviderBase.InitializeRequest*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: InitializeRequest
  nameWithType: SessionStateStoreProviderBase.InitializeRequest
- uid: System.Web.SessionState.SessionStateStoreProviderBase.ReleaseItemExclusive*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: ReleaseItemExclusive
  nameWithType: SessionStateStoreProviderBase.ReleaseItemExclusive
- uid: System.Web.SessionState.SessionStateStoreProviderBase.RemoveItem*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: RemoveItem
  nameWithType: SessionStateStoreProviderBase.RemoveItem
- uid: System.Web.SessionState.SessionStateStoreProviderBase.ResetItemTimeout*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: ResetItemTimeout
  nameWithType: SessionStateStoreProviderBase.ResetItemTimeout
- uid: System.Web.SessionState.SessionStateStoreProviderBase.SetAndReleaseItemExclusive*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: SetAndReleaseItemExclusive
  nameWithType: SessionStateStoreProviderBase.SetAndReleaseItemExclusive
- uid: System.Web.SessionState.SessionStateStoreProviderBase.SetItemExpireCallback*
  parent: System.Web.SessionState.SessionStateStoreProviderBase
  isExternal: false
  name: SetItemExpireCallback
  nameWithType: SessionStateStoreProviderBase.SetItemExpireCallback
