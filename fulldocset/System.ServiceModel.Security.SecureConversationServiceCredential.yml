### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Security.SecureConversationServiceCredential
  id: SecureConversationServiceCredential
  children:
  - System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  - System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  langs:
  - csharp
  name: SecureConversationServiceCredential
  nameWithType: SecureConversationServiceCredential
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential
  type: Class
  summary: "提供安全对话服务的凭据设置。"
  remarks: "安全对话涉及到多个消息的交换，并且使用安全上下文令牌 (SCT) 来确保安全性。 通信各方将共享 SCT，而且在通信会话的生存期内。 一个服务可以颁发两个不同类型的 Sct:-第一种是基于会话的 SCT，其包含的唯一 id。 消息只携带 id，而服务会维护 SCT id 与内容 （如声明、 安全密钥等） 之间映射的状态映射缓存。 良好的客户端必须发送 SCT 取消，以帮助服务优化缓存资源。 如果通过调用实例化此类<xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A>与`requireCancellation`参数等于`true`，这种方式颁发 SCT。</xref:System.ServiceModel.Channels.SecurityBindingElement.CreateSecureConversationBindingElement%2A>      的第二个是独立的 SCT 驻留在客户端的 cookie。 这种 SCT 包含整个状态信息，因此需要既不从服务的状态管理，也不从客户端取消 SCT。 这有时称为&quot;cookie 模式&quot;SCT。 由于该 SCT 包含整个状态信息，其大小大于在基于会话的情况下。 具有基于会话的 Sct，服务可以存储大量状态信息。 但是，因为它是自包含，它可以跨服务生存期使用，并在服务关闭和重新启动仍然存在。"
  syntax:
    content: public sealed class SecureConversationServiceCredential
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  id: SecurityContextClaimTypes
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  langs:
  - csharp
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "获取的集合<xref:System.Type>用于 cookie 序列化的声明。</xref:System.Type>"
  remarks: "将声明序列化为 SCT cookie[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]使用<xref:System.Runtime.Serialization.DataContractSerializer>作为默认值。</xref:System.Runtime.Serialization.DataContractSerializer> 声明资源是可扩展的因为[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]允许您提供已知的资源类型的列表。 这可以提供帮助<xref:System.Runtime.Serialization.DataContractSerializer>cookie，以便它可以返回原始强类型对象中的声明的反序列化期间。</xref:System.Runtime.Serialization.DataContractSerializer>"
  example:
  - "The following code shows how to get this property.  \n  \n [!code-cs[S_UE_SecureConversationServiceCredential#2](~/add/codesnippet/csharp/e8a69534-ad60-48be-9b2e-_1.cs)]"
  syntax:
    content: public System.Collections.ObjectModel.Collection<Type> SecurityContextClaimTypes { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Type}
      description: "集合<xref:System.Type>用于 cookie 序列化的声明。</xref:System.Type>"
  overload: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  id: SecurityStateEncoder
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  langs:
  - csharp
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Security
  summary: "获取或设置一个自定义<xref href=&quot;System.ServiceModel.Security.SecurityStateEncoder&quot;></xref>用于编码和解码 cookie 序列化。"
  remarks: "在&quot;cookie 模式&quot;，服务颁发客户端安全上下文令牌 (SCT) cookie 形式向客户端，以便它不需要维护任何安全状态。 客户端将 cookie 发送请求消息中返回，以便服务知道如何取消保护和验证的请求消息。 因为通过非安全网络通常传输 SCT，则必须进行保护。       默认情况下，[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]使用<xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder>类使用数据保护 API (DPAPI) 对 cookie 进行保护。</xref:System.ServiceModel.Security.DataProtectionSecurityStateEncoder> 让 DPAPI 在 Web 场环境中工作，所有后端服务必须运行相同的域用户帐户。 换而言之，如果服务是 Web 承载服务，然后 Internet 信息服务 (IIS) 辅助进程必须被配置为以域用户身份运行。       此属性使您能够使用自定义<xref:System.ServiceModel.Security.SecurityStateEncoder>来进行加密和解密 cookie 并不依赖 DPAPI。</xref:System.ServiceModel.Security.SecurityStateEncoder>"
  example:
  - "The following code shows how to set this property.  \n  \n [!code-cs[S_UE_SecureConversationServiceCredential#1](~/add/codesnippet/csharp/72c1f567-836b-4b6f-bbcd-_1.cs)]"
  syntax:
    content: public System.ServiceModel.Security.SecurityStateEncoder SecurityStateEncoder { get; set; }
    return:
      type: System.ServiceModel.Security.SecurityStateEncoder
      description: "A <xref href=&quot;System.ServiceModel.Security.SecurityStateEncoder&quot;> </xref>对象，它是自定义项的<xref href=&quot;System.ServiceModel.Security.DataProtectionSecurityStateEncoder&quot;> </xref>。"
  overload: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes
- uid: System.Collections.ObjectModel.Collection{System.Type}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<Type>
  nameWithType: Collection<Type>
  fullName: System.Collections.ObjectModel.Collection<System.Type>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Type>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder
- uid: System.ServiceModel.Security.SecurityStateEncoder
  parent: System.ServiceModel.Security
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecurityStateEncoder
  fullName: System.ServiceModel.Security.SecurityStateEncoder
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityContextClaimTypes*
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityContextClaimTypes
  nameWithType: SecureConversationServiceCredential.SecurityContextClaimTypes
- uid: System.ServiceModel.Security.SecureConversationServiceCredential.SecurityStateEncoder*
  parent: System.ServiceModel.Security.SecureConversationServiceCredential
  isExternal: false
  name: SecurityStateEncoder
  nameWithType: SecureConversationServiceCredential.SecurityStateEncoder
