### YamlMime:ManagedReference
items:
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService
  id: PluralizationService
  children:
  - System.Data.Entity.Design.PluralizationServices.PluralizationService.#ctor
  - System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo)
  - System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture
  - System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural(System.String)
  - System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular(System.String)
  - System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize(System.String)
  - System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize(System.String)
  langs:
  - csharp
  name: PluralizationService
  nameWithType: PluralizationService
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService
  type: Class
  summary: "提供构造单词的单复数形式的方法。"
  remarks: "PluralizationService 类适用构造单词的单复数形式的英语规则。 若要将服务扩展到其他语言，使用<xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService><xref:System.Data.Entity.Design.EntityModelSchemaGenerator>类。</xref:System.Data.Entity.Design.EntityModelSchemaGenerator> </xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService>"
  syntax:
    content: public abstract class PluralizationService
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.#ctor
  id: '#ctor'
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  langs:
  - csharp
  name: PluralizationService()
  nameWithType: PluralizationService.PluralizationService()
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.PluralizationService()
  type: Constructor
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design.PluralizationServices
  summary: "初始化的新实例<xref href=&quot;System.Data.Entity.Design.PluralizationServices.PluralizationService&quot;></xref>类。"
  syntax:
    content: protected PluralizationService ();
    parameters: []
  overload: System.Data.Entity.Design.PluralizationServices.PluralizationService.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo)
  id: CreateService(System.Globalization.CultureInfo)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  langs:
  - csharp
  name: CreateService(CultureInfo)
  nameWithType: PluralizationService.CreateService(CultureInfo)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(CultureInfo)
  type: Method
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design.PluralizationServices
  summary: "创建<xref href=&quot;System.Data.Entity.Design.PluralizationServices.PluralizationService&quot;> </xref> ，它将对应的语言规则应用于指定<xref:System.Globalization.CultureInfo>。</xref:System.Globalization.CultureInfo>"
  remarks: "<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类适用构造单词的单复数形式的英语规则。</xref:System.Data.Entity.Design.PluralizationServices.PluralizationService> 若要将服务扩展到其他语言，使用<xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService><xref:System.Data.Entity.Design.EntityModelSchemaGenerator>类。</xref:System.Data.Entity.Design.EntityModelSchemaGenerator> </xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService>"
  syntax:
    content: public static System.Data.Entity.Design.PluralizationServices.PluralizationService CreateService (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "<xref:System.Globalization.CultureInfo>对应的词的单数和复数窗体应用的语言规则。</xref:System.Globalization.CultureInfo>"
    return:
      type: System.Data.Entity.Design.PluralizationServices.PluralizationService
      description: "新创建<xref href=&quot;System.Data.Entity.Design.PluralizationServices.PluralizationService&quot;></xref>对象。"
  overload: System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture
  id: Culture
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  langs:
  - csharp
  name: Culture
  nameWithType: PluralizationService.Culture
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture
  type: Property
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design.PluralizationServices
  summary: "获取或设置<xref href=&quot;System.Data.Entity.Design.PluralizationServices.PluralizationService&quot;></xref>区域性。"
  remarks: "<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类适用构造单词的单复数形式的英语规则。</xref:System.Data.Entity.Design.PluralizationServices.PluralizationService> 若要将服务扩展到其他语言，使用<xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService><xref:System.Data.Entity.Design.EntityModelSchemaGenerator>类。</xref:System.Data.Entity.Design.EntityModelSchemaGenerator> </xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService>"
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; protected set; }
    return:
      type: System.Globalization.CultureInfo
      description: "一个指定的语言规则以适用于单和复数形式的对象。"
  overload: System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural(System.String)
  id: IsPlural(System.String)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  langs:
  - csharp
  name: IsPlural(String)
  nameWithType: PluralizationService.IsPlural(String)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural(String)
  type: Method
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design.PluralizationServices
  summary: "确定指定的单词为复数形式。"
  remarks: "<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类适用构造单词的单复数形式的英语规则。</xref:System.Data.Entity.Design.PluralizationServices.PluralizationService> 若要将服务扩展到其他语言，使用<xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService><xref:System.Data.Entity.Design.EntityModelSchemaGenerator>类。</xref:System.Data.Entity.Design.EntityModelSchemaGenerator> </xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService>       同时<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural%2A>和<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular%2A>方法可返回`true`为相同的单词。</xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular%2A> </xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural%2A> 例如，这两种方法将返回`true`word&quot;鱼&quot;。"
  syntax:
    content: public abstract bool IsPlural (string word);
    parameters:
    - id: word
      type: System.String
      description: "要对其进行分析的值。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该单词为复数形式;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular(System.String)
  id: IsSingular(System.String)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  langs:
  - csharp
  name: IsSingular(String)
  nameWithType: PluralizationService.IsSingular(String)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular(String)
  type: Method
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design.PluralizationServices
  summary: "确定指定的单词为单数形式。"
  remarks: "<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类适用构造单词的单复数形式的英语规则。</xref:System.Data.Entity.Design.PluralizationServices.PluralizationService> 若要将服务扩展到其他语言，使用<xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService><xref:System.Data.Entity.Design.EntityModelSchemaGenerator>类。</xref:System.Data.Entity.Design.EntityModelSchemaGenerator> </xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService>       同时<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular%2A>和<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural%2A>方法可返回`true`为相同的单词。</xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural%2A> </xref:System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular%2A> 例如，这两种方法将返回`true`word&quot;鱼&quot;。"
  syntax:
    content: public abstract bool IsSingular (string word);
    parameters:
    - id: word
      type: System.String
      description: "要对其进行分析的值。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该单词为单数形式;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize(System.String)
  id: Pluralize(System.String)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  langs:
  - csharp
  name: Pluralize(String)
  nameWithType: PluralizationService.Pluralize(String)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize(String)
  type: Method
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design.PluralizationServices
  summary: "返回指定的单词的复数形式"
  remarks: "<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类适用构造单词的单复数形式的英语规则。</xref:System.Data.Entity.Design.PluralizationServices.PluralizationService> 若要将服务扩展到其他语言，使用<xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService><xref:System.Data.Entity.Design.EntityModelSchemaGenerator>类。</xref:System.Data.Entity.Design.EntityModelSchemaGenerator> </xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService>"
  syntax:
    content: public abstract string Pluralize (string word);
    parameters:
    - id: word
      type: System.String
      description: "要改为复数形式的单词。"
    return:
      type: System.String
      description: "输入参数的复数形式。"
  overload: System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize(System.String)
  id: Singularize(System.String)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  langs:
  - csharp
  name: Singularize(String)
  nameWithType: PluralizationService.Singularize(String)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize(String)
  type: Method
  assemblies:
  - System.Data.Entity.Design
  namespace: System.Data.Entity.Design.PluralizationServices
  summary: "返回指定词的单数形式。"
  remarks: "<xref:System.Data.Entity.Design.PluralizationServices.PluralizationService>类适用构造单词的单复数形式的英语规则。</xref:System.Data.Entity.Design.PluralizationServices.PluralizationService> 若要将服务扩展到其他语言，使用<xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService><xref:System.Data.Entity.Design.EntityModelSchemaGenerator>类。</xref:System.Data.Entity.Design.EntityModelSchemaGenerator> </xref:System.Data.Entity.Design.EntityModelSchemaGenerator.PluralizationService>"
  syntax:
    content: public abstract string Singularize (string word);
    parameters:
    - id: word
      type: System.String
      description: "要改为单数形式的单词。"
    return:
      type: System.String
      description: "输入参数的单数形式。"
  overload: System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.#ctor
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: PluralizationService()
  nameWithType: PluralizationService.PluralizationService()
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.PluralizationService()
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(System.Globalization.CultureInfo)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: CreateService(CultureInfo)
  nameWithType: PluralizationService.CreateService(CultureInfo)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService(CultureInfo)
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService
  parent: System.Data.Entity.Design.PluralizationServices
  isExternal: false
  name: PluralizationService
  nameWithType: PluralizationService
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: Culture
  nameWithType: PluralizationService.Culture
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural(System.String)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: IsPlural(String)
  nameWithType: PluralizationService.IsPlural(String)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular(System.String)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: IsSingular(String)
  nameWithType: PluralizationService.IsSingular(String)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular(String)
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize(System.String)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: Pluralize(String)
  nameWithType: PluralizationService.Pluralize(String)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize(String)
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize(System.String)
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: Singularize(String)
  nameWithType: PluralizationService.Singularize(String)
  fullName: System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize(String)
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.#ctor*
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: PluralizationService
  nameWithType: PluralizationService.PluralizationService
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.CreateService*
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: CreateService
  nameWithType: PluralizationService.CreateService
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Culture*
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: Culture
  nameWithType: PluralizationService.Culture
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsPlural*
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: IsPlural
  nameWithType: PluralizationService.IsPlural
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.IsSingular*
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: IsSingular
  nameWithType: PluralizationService.IsSingular
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Pluralize*
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: Pluralize
  nameWithType: PluralizationService.Pluralize
- uid: System.Data.Entity.Design.PluralizationServices.PluralizationService.Singularize*
  parent: System.Data.Entity.Design.PluralizationServices.PluralizationService
  isExternal: false
  name: Singularize
  nameWithType: PluralizationService.Singularize
