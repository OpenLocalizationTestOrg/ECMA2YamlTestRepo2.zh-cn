### YamlMime:ManagedReference
items:
- uid: System.Security.Principal.WindowsIdentity
  id: WindowsIdentity
  children:
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  - System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  - System.Security.Principal.WindowsIdentity.AccessToken
  - System.Security.Principal.WindowsIdentity.AuthenticationType
  - System.Security.Principal.WindowsIdentity.Claims
  - System.Security.Principal.WindowsIdentity.Clone
  - System.Security.Principal.WindowsIdentity.DefaultIssuer
  - System.Security.Principal.WindowsIdentity.DeviceClaims
  - System.Security.Principal.WindowsIdentity.Dispose
  - System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetAnonymous
  - System.Security.Principal.WindowsIdentity.GetCurrent
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  - System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  - System.Security.Principal.WindowsIdentity.Groups
  - System.Security.Principal.WindowsIdentity.Impersonate
  - System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  - System.Security.Principal.WindowsIdentity.ImpersonationLevel
  - System.Security.Principal.WindowsIdentity.IsAnonymous
  - System.Security.Principal.WindowsIdentity.IsAuthenticated
  - System.Security.Principal.WindowsIdentity.IsGuest
  - System.Security.Principal.WindowsIdentity.IsSystem
  - System.Security.Principal.WindowsIdentity.Name
  - System.Security.Principal.WindowsIdentity.Owner
  - System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  - System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  - System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  - System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Principal.WindowsIdentity.Token
  - System.Security.Principal.WindowsIdentity.User
  - System.Security.Principal.WindowsIdentity.UserClaims
  langs:
  - csharp
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
  type: Class
  summary: "表示 Windows 用户。"
  remarks: "调用<xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A>方法来创建一个表示当前用户的 WindowsIdentity 对象。</xref:System.Security.Principal.WindowsIdentity.GetCurrent%2A>      1> [!IMPORTANT]&1;> 此类型实现<xref:System.IDisposable>接口。</xref:System.IDisposable> 完成后使用类型的操作后，你应释放类型直接或间接。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</xref:System.IDisposable.Dispose%2A> 若要间接释放类型，使用一种语言构造如`using`（在 C# 中) 或`Using`（在 Visual Basic 中)。 有关详细信息，请参阅中的&quot;使用实现 IDisposable 的对象&quot;部分<xref:System.IDisposable>接口主题。</xref:System.IDisposable>"
  example:
  - "The following example shows the use of members of WindowsIdentity class.  For an example showing how to obtain a Windows account token through a call to the unmanaged Win32 `LogonUser` function, and use that token to impersonate another user, see the <xref:System.Security.Principal.WindowsImpersonationContext> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/csharp/t-system.security.princi_5_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/cpp/t-system.security.princi_5_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#1](~/add/codesnippet/visualbasic/t-system.security.princi_5_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class WindowsIdentity : System.Security.Claims.ClaimsIdentity, IDisposable, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.Security.Claims.ClaimsIdentity
  implements:
  - System.IDisposable
  - System.Runtime.Serialization.IDeserializationCallback
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  id: '#ctor(System.IntPtr)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "初始化的新实例<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>类，用于表示指定的 Windows 帐户标记的用户。"
  remarks: "下表显示<xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity>实例的初始属性的值      |属性 |初始值 |  |--------------|-------------------|  |<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>|`Negotiate`|  |<xref:System.Security.Principal.WindowsAccountType>|`Normal`|  |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|    &1;> [!NOTE]&1;> 可以检索所表示的令牌`userToken`通过调用非托管的代码如 Win32 API`LogonUser`函数。</xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A> </xref:System.Security.Principal.WindowsAccountType> </xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 始终释放`userToken`通过调用 Win32 API`CloseHandle`函数。 调用非托管的代码的详细信息，请参阅[使用非托管 DLL 函数](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public WindowsIdentity (IntPtr userToken);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "帐户标记，以该用户的名义运行代码。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>为 0。       -或-<code>userToken</code>是重复和无效的模拟。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。       -或者-出现 Win32 错误。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  id: '#ctor(System.Security.Principal.WindowsIdentity)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(WindowsIdentity)
  nameWithType: WindowsIdentity.WindowsIdentity(WindowsIdentity)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(WindowsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "初始化的新实例<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>使用指定的类<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>对象。"
  syntax:
    content: protected WindowsIdentity (System.Security.Principal.WindowsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.WindowsIdentity
      description: "从中构造的新实例的对象<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(String)
  nameWithType: WindowsIdentity.WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "初始化的新实例<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>表示指定用户主体名称 (UPN) 的用户类。"
  remarks: "UPN 采用格式*用户名*@*domainname*.com，换而言之，电子邮件地址。 中的 UPN 标识`sUserPrincipalName`用于检索该用户通过 Win32 API 的令牌`LsaLogonUser`函数。 反过来，该令牌用于标识用户。 异常可能会返回由于无法使用所提供的 UPN 登录。      1> [!NOTE] 1> 此构造函数旨在供情况下，仅在加入到 Windows Server 2003 或更高版本的域的计算机上。 对于更早版本的域类型引发异常。 此限制是因为，此构造函数使用[KERB_S4U_LOGON 结构](http://go.microsoft.com/fwlink/?LinkId=143533)，最初在 Windows Server 2003 中引入。"
  syntax:
    content: public WindowsIdentity (string sUserPrincipalName);
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: "以该用户的名义运行代码 UPN。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows NT 状态代码 STATUS_ACCESS_DENIED，Windows 返回。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "没有足够内存可用。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。       -或者-计算机未连接到 Windows 2003 或更高版本的域。       -或者-计算机未运行 Windows 2003 或更高版本。       -或者-用户不是计算机连接到域的成员。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  id: '#ctor(System.IntPtr,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "初始化的新实例<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>按指定的 Windows 帐户标记和指定的身份验证类型表示的用户类。"
  remarks: "下表显示<xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity>实例的初始属性的值      |属性 |初始值 |  |--------------|-------------------|  |<xref:System.Security.Principal.WindowsAccountType>|`Normal`|  |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|      值`type`参数用于设置<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>参数。</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> </xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A> </xref:System.Security.Principal.WindowsAccountType> 如果`type`是`null`，安全系统组<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>到`Negotiate`在 Windows Vista 和更高版本的 Windows 操作系统和`Kerberos`早期版本的 Windows 操作系统上。</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 安全系统不使用此值;它是仅用于提供信息。      1> [!NOTE]&1;> 可以检索所表示的令牌`userToken`通过调用非托管的代码如 Win32 API`LogonUser`函数。 始终释放`userToken`通过调用 Win32 API`CloseHandle`函数。 调用非托管的代码的详细信息，请参阅[使用非托管 DLL 函数](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.%23ctor%2A> constructor to create a new instance of the  <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token and the specified authentication type. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/csharp/dc54fc11-729f-4337-b932-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/cpp/dc54fc11-729f-4337-b932-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#4](~/add/codesnippet/visualbasic/dc54fc11-729f-4337-b932-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "帐户标记，以该用户的名义运行代码。"
    - id: type
      type: System.String
      description: "（仅供参考之用。）用于标识用户的身份验证类型。 有关详细信息，请参阅备注。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>为 0。       -或-<code>userToken</code>是重复和无效的模拟。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。       -或者-出现 Win32 错误。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "初始化的新实例<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>类表示的信息的用户<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>流。"
  remarks: >-
    > [!IMPORTANT]

    >  Calling this method with untrusted data is a security risk. Call this method only with trusted data. For more information, see [Untrusted Data Security Risks](http://go.microsoft.com/fwlink/?LinkId=330378).
  syntax:
    content: public WindowsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "包含用户的帐户信息的对象。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "一个对象，该值指示流特征。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A <xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>无法在进程之间进行序列化。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。       -或者-出现 Win32 错误。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(String,String)
  nameWithType: WindowsIdentity.WindowsIdentity(String,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "初始化的新实例<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>类用户主体名称 (UPN) 和指定的身份验证类型表示由指定的用户。"
  remarks: "值`type`参数用于设置<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>参数。</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 如果`type`是`null`，安全系统组<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>到`Negotiate`在 Windows Vista 和更高版本的 Windows 操作系统和`Kerberos`早期版本的 Windows 操作系统上。</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 安全系统不使用此值;它是仅用于提供信息。       中的 UPN 标识`sUserPrincipalName`用于检索该用户通过 Win32 API 的令牌`LsaLogonUser`函数。 反过来，该令牌用于标识用户。 异常可能会返回由于无法使用所提供的 UPN 登录。      1> [!NOTE] 1> 此构造函数旨在供情况下，仅在加入到 Windows Server 2003 或更高版本的域的计算机上。 对于更早版本的域类型引发异常。 此限制是因为，此构造函数使用[KERB_S4U_LOGON 结构](http://go.microsoft.com/fwlink/?LinkId=143533)，最初在 Windows Server 2003 中引入。"
  syntax:
    content: public WindowsIdentity (string sUserPrincipalName, string type);
    parameters:
    - id: sUserPrincipalName
      type: System.String
      description: "以该用户的名义运行代码 UPN。"
    - id: type
      type: System.String
      description: "（仅供参考之用。）用于标识用户的身份验证类型。 有关详细信息，请参阅备注。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows NT 状态代码 STATUS_ACCESS_DENIED，Windows 返回。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "没有足够内存可用。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。       -或者-计算机未连接到 Windows 2003 或更高版本的域。       -或者-计算机未运行 Windows 2003 或更高版本。       -或者-用户不是计算机连接到域的成员。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  id: '#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String,WindowsAccountType)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "初始化的新实例<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>类，用于表示指定的 Windows 帐户标记、 指定的身份验证类型和指定的 Windows 帐户类型的用户。"
  remarks: "下表显示<xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity>实例的初始属性的值      |属性 |初始值 |  |--------------|-------------------|  |<xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A>|`false`|      值`type`参数用于设置<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>参数。</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> </xref:System.Security.Principal.WindowsIdentity.IsAuthenticated%2A> 如果`type`是`null`，安全系统组<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>到`Negotiate`在 Windows Vista 和更高版本的 Windows 操作系统和`Kerberos`早期版本的 Windows 操作系统上。</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 安全系统不使用此值;它是仅用于提供信息。      1> [!NOTE]&1;> 可以检索所表示的令牌`userToken`通过调用非托管的代码如 Win32 API`LogonUser`函数。 始终释放`userToken`通过调用 Win32 API`CloseHandle`函数。 调用非托管的代码的详细信息，请参阅[使用非托管 DLL 函数](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code shows the use of the WindowsIdentity constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, and the specified Windows account type. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/csharp/6cec7b3f-80c5-417d-99d8-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/cpp/6cec7b3f-80c5-417d-99d8-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#7](~/add/codesnippet/visualbasic/6cec7b3f-80c5-417d-99d8-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "帐户标记，以该用户的名义运行代码。"
    - id: type
      type: System.String
      description: "（仅供参考之用。）用于标识用户的身份验证类型。 有关详细信息，请参阅备注。"
    - id: acctType
      type: System.Security.Principal.WindowsAccountType
      description: "枚举值之一。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>为 0。       -或-<code>userToken</code>是重复和无效的模拟。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。       -或者-出现 Win32 错误。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  id: '#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)'
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "初始化的新实例<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>类，用于表示指定的 Windows 帐户标记、 指定的身份验证类型，指定的 Windows 帐户类型和指定的身份验证状态的用户。"
  remarks: "值`type`参数用于设置<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>参数。</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 如果`type`是`null`，安全系统组<xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A>到`Negotiate`在 Windows Vista 和更高版本的 Windows 操作系统和`Kerberos`早期版本的 Windows 操作系统上。</xref:System.Security.Principal.WindowsIdentity.AuthenticationType%2A> 安全系统不使用此值;它是仅用于提供信息。       你可以检索所表示的令牌`userToken`通过调用非托管的代码如 Win32 API`LogonUser`函数。 始终释放`userToken`通过调用 Win32 API`CloseHandle`函数。 调用非托管的代码的详细信息，请参阅[使用非托管 DLL 函数](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code shows the use of the WindowsIdentity constructor to create a new instance of the <xref:System.Security.Principal.WindowsIdentity> class for the user represented by the specified Windows account token, the specified authentication type, the specified Windows account type, and the specified authentication status. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/csharp/851e6c2b-b248-45b7-9cd4-_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/cpp/851e6c2b-b248-45b7-9cd4-_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#17](~/add/codesnippet/visualbasic/851e6c2b-b248-45b7-9cd4-_1.vb)]"
  syntax:
    content: public WindowsIdentity (IntPtr userToken, string type, System.Security.Principal.WindowsAccountType acctType, bool isAuthenticated);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "帐户标记，以该用户的名义运行代码。"
    - id: type
      type: System.String
      description: "（仅供参考之用。）用于标识用户的身份验证类型。 有关详细信息，请参阅备注。"
    - id: acctType
      type: System.Security.Principal.WindowsAccountType
      description: "枚举值之一。"
    - id: isAuthenticated
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要指示对用户进行身份验证;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Principal.WindowsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>userToken</code>为 0。       -或-<code>userToken</code>是重复和无效的模拟。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。       -或者-出现 Win32 错误。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  id: AccessToken
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取此<xref href=&quot;Microsoft.Win32.SafeHandles.SafeAccessTokenHandle&quot;></xref>此<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>实例。"
  syntax:
    content: public Microsoft.Win32.SafeHandles.SafeAccessTokenHandle AccessToken { get; }
    return:
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "返回<xref href=&quot;Microsoft.Win32.SafeHandles.SafeAccessTokenHandle&quot;> </xref>。"
  overload: System.Security.Principal.WindowsIdentity.AccessToken*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取用于标识用户的身份验证的类型。"
  remarks: "此属性是信息性;通过安全系统不使用它。 在 Windows Vista 和更高版本的 Windows 操作系统上，此属性的默认值是`Negotiate`，其中选择最佳安全支持提供程序 (SSP) 根据客户配置安全策略。 早期版本的 Windows 操作系统的默认属性值是`Kerberos`。"
  syntax:
    content: public override sealed string AuthenticationType { get; }
    return:
      type: System.String
      description: "用于标识用户的身份验证类型。"
  overload: System.Security.Principal.WindowsIdentity.AuthenticationType*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows NT 状态代码 STATUS_ACCESS_DENIED，Windows 返回。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "没有足够内存可用。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。       -或者-计算机未连接到 Windows 2003 或更高版本的域。       -或者-计算机未运行 Windows 2003 或更高版本。       -或者-用户不是计算机连接到域的成员。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Claims
  id: Claims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Claims
  nameWithType: WindowsIdentity.Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取表示此 Windows 标识的用户的所有声明。"
  syntax:
    content: public override System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "此声明的集合<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>对象。"
  overload: System.Security.Principal.WindowsIdentity.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Clone
  id: Clone
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Clone()
  nameWithType: WindowsIdentity.Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "创建当前实例副本的新对象。"
  syntax:
    content: public override System.Security.Claims.ClaimsIdentity Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "当前实例的副本。"
  overload: System.Security.Principal.WindowsIdentity.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: DefaultIssuer
  nameWithType: WindowsIdentity.DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "标识默认的名称<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>颁发者。"
  syntax:
    content: public const string DefaultIssuer;
    return:
      type: System.String
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims
  id: DeviceClaims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
  fullName: System.Security.Principal.WindowsIdentity.DeviceClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取声明<xref href=&quot;System.Security.Claims.ClaimTypes.WindowsDeviceClaim&quot;></xref>属性键。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> DeviceClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "声明集合<xref href=&quot;System.Security.Claims.ClaimTypes.WindowsDeviceClaim&quot;></xref>属性键。"
  overload: System.Security.Principal.WindowsIdentity.DeviceClaims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Dispose
  id: Dispose
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Dispose()
  nameWithType: WindowsIdentity.Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "释放使用的所有资源<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref>。"
  remarks: "在完成使用<xref:System.Security.Principal.WindowsIdentity>.</xref:System.Security.Principal.WindowsIdentity>时调用的 Dispose Dispose 方法离开<xref:System.Security.Principal.WindowsIdentity>中不可用状态。</xref:System.Security.Principal.WindowsIdentity> 调用 Dispose 后，必须释放对所有引用<xref:System.Security.Principal.WindowsIdentity>以便垃圾回收器才能回收的内存，<xref:System.Security.Principal.WindowsIdentity>占用。</xref:System.Security.Principal.WindowsIdentity> </xref:System.Security.Principal.WindowsIdentity> 有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.Security.Principal.WindowsIdentity>。</xref:System.Security.Principal.WindowsIdentity>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Security.Principal.WindowsIdentity>对象的`Finalize`方法。</xref:System.Security.Principal.WindowsIdentity>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Principal.WindowsIdentity.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: WindowsIdentity.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "释放由非托管的资源<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Security.Principal.WindowsIdentity>引用。</xref:System.Security.Principal.WindowsIdentity> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Security.Principal.WindowsIdentity.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  id: GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetAnonymous()
  nameWithType: WindowsIdentity.GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "返回<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>对象，你可以用作 sentinel 值在你的代码来表示匿名用户。 属性值不表示 Windows 操作系统使用的内置匿名标识。"
  remarks: "此属性返回一个空<xref:System.Security.Principal.WindowsIdentity>对象，可将操作视为匿名。</xref:System.Security.Principal.WindowsIdentity> 属性值不对应 Windows 匿名用户，并且不用于模拟。 此外，请注意，此属性返回的标识不是静态的;GetAnonymous 每次调用返回不同的匿名标识。       你可以使用<xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>属性来检测 GetAnonymous 的返回值。</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> 但是，<xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>检测 Windows 匿名标识和此方法返回的匿名标识。</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A> 若要使用后一种标识，缓存 GetAnonymous 返回值而不是依靠<xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>属性。</xref:System.Security.Principal.WindowsIdentity.IsAnonymous%2A>"
  example:
  - "The following code shows the use of the GetAnonymous method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents an anonymous Windows user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/csharp/m-system.security.princi_5_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/cpp/m-system.security.princi_5_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#15](~/add/codesnippet/visualbasic/m-system.security.princi_5_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetAnonymous ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "一个表示匿名用户的对象。"
  overload: System.Security.Principal.WindowsIdentity.GetAnonymous*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  id: GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent()
  nameWithType: WindowsIdentity.GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "返回<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>对象，表示当前 Windows 用户。"
  remarks: ''
  example:
  - "The following code shows the use of the GetCurrent method to return a <xref:System.Security.Principal.WindowsIdentity> object that represents the current Windows user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/csharp/m-system.security.princi_7_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/cpp/m-system.security.princi_7_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#13](~/add/codesnippet/visualbasic/m-system.security.princi_7_1.vb)]"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "一个表示当前用户的对象。"
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  id: GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent(Boolean)
  nameWithType: WindowsIdentity.GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "返回<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>对象，表示线程或进程，具体取决于的值的 Windows 标识<code> ifImpersonating </code>参数。"
  remarks: "如果`ifImpersonating`是`true`和线程不模拟时，返回<xref:System.Security.Principal.WindowsIdentity>对象不具有任何值。</xref:System.Security.Principal.WindowsIdentity>  如果`ifImpersonating`是`false`和线程正在模拟，则<xref:System.Security.Principal.WindowsIdentity>返回线程。</xref:System.Security.Principal.WindowsIdentity>  如果`ifImpersonating`是`false`且线程不模拟，则<xref:System.Security.Principal.WindowsIdentity>返回进程。</xref:System.Security.Principal.WindowsIdentity>"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent (bool ifImpersonating);
    parameters:
    - id: ifImpersonating
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要返回<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>仅当线程正在模拟;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>返回<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>如果它模拟的线程或<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>如果当前没有模拟线程的进程。"
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "一个表示 Windows 用户的对象。"
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  id: GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: GetCurrent(TokenAccessLevels)
  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(TokenAccessLevels)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "返回<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>表示当前 Windows 用户，使用指定的对象所需标记访问级别。"
  remarks: "`desiredAccess`参数指定标识的访问权限的访问令牌的请求的类型的访问掩码。 与令牌的自由访问控制列表 (DACL) 来确定同意或拒绝哪些类型的访问，这些请求的访问类型进行比较。"
  syntax:
    content: public static System.Security.Principal.WindowsIdentity GetCurrent (System.Security.Principal.TokenAccessLevels desiredAccess);
    parameters:
    - id: desiredAccess
      type: System.Security.Principal.TokenAccessLevels
      description: "枚举值的按位组合。"
    return:
      type: System.Security.Principal.WindowsIdentity
      description: "一个表示当前用户的对象。"
  overload: System.Security.Principal.WindowsIdentity.GetCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Groups
  id: Groups
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Groups
  nameWithType: WindowsIdentity.Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取当前 Windows 用户所属的组。"
  remarks: ''
  example:
  - "The following code example shows the use of the Groups property to display the identity references for the groups the current user belongs to.  This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#20](~/add/codesnippet/csharp/p-system.security.princi_8_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#20](~/add/codesnippet/visualbasic/p-system.security.princi_8_1.vb)]"
  syntax:
    content: public System.Security.Principal.IdentityReferenceCollection Groups { get; }
    return:
      type: System.Security.Principal.IdentityReferenceCollection
      description: "表示当前 Windows 用户所属的组的对象。"
  overload: System.Security.Principal.WindowsIdentity.Groups*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Impersonate
  id: Impersonate
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Impersonate()
  nameWithType: WindowsIdentity.Impersonate()
  fullName: System.Security.Principal.WindowsIdentity.Impersonate()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "模拟表示的用户<xref href=&quot;System.Security.Principal.WindowsIdentity&quot;></xref>对象。"
  remarks: "在 Windows NT 平台上，当前用户必须具有足够的权限，以允许模拟。"
  example:
  - "The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.  \n  \n [!code-cpp[WindowsIdentity Impersonation#1](~/add/codesnippet/cpp/m-system.security.princi_2_1.cpp)]\n [!code-cs[WindowsIdentity Impersonation#1](~/add/codesnippet/csharp/m-system.security.princi_2_1.cs)]\n [!code-vb[WindowsIdentity Impersonation#1](~/add/codesnippet/visualbasic/m-system.security.princi_2_1.vb)]"
  syntax:
    content: public virtual System.Security.Principal.WindowsImpersonationContext Impersonate ();
    parameters: []
    return:
      type: System.Security.Principal.WindowsImpersonationContext
      description: "表示模拟; 之前的 Windows 用户的对象这可以用于恢复为原始用户的上下文。"
  overload: System.Security.Principal.WindowsIdentity.Impersonate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尝试执行模拟一个匿名标识。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "出现 Win32 错误。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  id: Impersonate(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Impersonate(IntPtr)
  nameWithType: WindowsIdentity.Impersonate(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.Impersonate(IntPtr)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "模拟指定的用户标记所表示的用户。"
  remarks: "在 Windows NT 平台上，当前用户必须具有足够的权限，以允许模拟。      1> [!NOTE]&1;> 调用带有的 Impersonate 方法`userToken`值<xref:System.IntPtr>等效于调用 Win32`RevertToSelf`函数。</xref:System.IntPtr> 如果当前被模拟另一个用户，控件将恢复为原始用户。       有关调用非托管代码的详细信息，请参阅[使用非托管 DLL 函数](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates how to obtain a Windows account token by calling the unmanaged Win32 `LogonUser` function, and how to use that token to impersonate another user and then revert to the original identity.  \n  \n [!code-vb[WindowsIdentity Impersonation2#1](~/add/codesnippet/visualbasic/m-system.security.princi_3_1.vb)]\n [!code-cs[WindowsIdentity Impersonation2#1](~/add/codesnippet/csharp/m-system.security.princi_3_1.cs)]"
  syntax:
    content: public static System.Security.Principal.WindowsImpersonationContext Impersonate (IntPtr userToken);
    parameters:
    - id: userToken
      type: System.IntPtr
      description: "Windows 帐户标记的句柄。 通常通过调用非托管代码，如调用 Win32 API 检索此标记<xref uid=&quot;langword_csharp_LogonUser&quot; name=&quot;LogonUser&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Security.Principal.WindowsImpersonationContext
      description: "表示模拟; 之前的 Windows 用户的对象此对象可以用于恢复为原始用户的上下文。"
  overload: System.Security.Principal.WindowsIdentity.Impersonate*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Windows NT 状态代码 STATUS_ACCESS_DENIED，Windows 返回。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "没有足够内存可用。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。"
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  id: ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取用户的模拟级别。"
  remarks: "描述要用于连接到 WMI 的模拟级别。"
  example:
  - "The following code example shows the use of the ImpersonationLevel property to display the impersonation level for the current user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#21](~/add/codesnippet/csharp/p-system.security.princi_3_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#21](~/add/codesnippet/visualbasic/p-system.security.princi_3_1.vb)]"
  syntax:
    content: public System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }
    return:
      type: System.Security.Principal.TokenImpersonationLevel
      description: "指定的模拟级别的枚举值之一。"
  overload: System.Security.Principal.WindowsIdentity.ImpersonationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  id: IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取一个值，该值指示系统是否用户帐户标识为匿名帐户。"
  remarks: "IsAnonymous 属性检测 Windows 匿名标识和匿名标识返回<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>方法。</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>       匿名帐户通常仅只能从基于 ASP.NET 的应用程序中时遇到由 Internet 信息服务 (IIS) 允许匿名访问。"
  example:
  - "The following code shows the use of the IsAnonymous property to detect whether the user account is identified as an anonymous account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/csharp/p-system.security.princi_4_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/cpp/p-system.security.princi_4_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#9](~/add/codesnippet/visualbasic/p-system.security.princi_4_1.vb)]"
  syntax:
    content: public virtual bool IsAnonymous { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用户帐户是匿名帐户;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Principal.WindowsIdentity.IsAnonymous*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取一个值，该值指示是否通过 Windows 身份验证用户。"
  syntax:
    content: public override bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用户进行身份验证;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Principal.WindowsIdentity.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  id: IsGuest
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取一个值，该值指示是否将用户帐户标识为<xref href=&quot;System.Security.Principal.WindowsAccountType&quot;></xref>系统帐户。"
  remarks: ''
  example:
  - "The following code shows the use of the IsGuest property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType> account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/csharp/p-system.security.princi_11_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/cpp/p-system.security.princi_11_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#12](~/add/codesnippet/visualbasic/p-system.security.princi_11_1.vb)]"
  syntax:
    content: public virtual bool IsGuest { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用户帐户是<xref href=&quot;System.Security.Principal.WindowsAccountType&quot;></xref>帐户; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Principal.WindowsIdentity.IsGuest*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  id: IsSystem
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取一个值，该值指示是否将用户帐户标识为<xref href=&quot;System.Security.Principal.WindowsAccountType&quot;></xref>系统帐户。"
  remarks: ''
  example:
  - "The following code shows the use of the IsSystem property to return a value indicating whether the user account is identified as a <xref:System.Security.Principal.WindowsAccountType> account by the system. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/csharp/p-system.security.princi_9_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/cpp/p-system.security.princi_9_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#11](~/add/codesnippet/visualbasic/p-system.security.princi_9_1.vb)]"
  syntax:
    content: public virtual bool IsSystem { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用户帐户是<xref href=&quot;System.Security.Principal.WindowsAccountType&quot;></xref>帐户; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Principal.WindowsIdentity.IsSystem*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Name
  id: Name
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Name
  nameWithType: WindowsIdentity.Name
  fullName: System.Security.Principal.WindowsIdentity.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取用户的 Windows 登录名。"
  remarks: "登录名是在窗体域 \\ 用户名。"
  example:
  - "The following code shows the use of the Name property to get the user's Windows logon name. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/csharp/p-system.security.princi_2_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/cpp/p-system.security.princi_2_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#8](~/add/codesnippet/visualbasic/p-system.security.princi_2_1.vb)]"
  syntax:
    content: public override string Name { get; }
    return:
      type: System.String
      description: "用户的名义运行代码的 Windows 登录名。"
  overload: System.Security.Principal.WindowsIdentity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Owner
  id: Owner
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Owner
  nameWithType: WindowsIdentity.Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取标记所有者的安全标识符 (SID)。"
  remarks: "SID 唯一标识用户或组在所有 Windows NT 实现上。  返回的 SID 标识默认所有者将应用到新创建的对象的 SID。"
  example:
  - "The following code example shows the use of the Owner property to display the security identifier for the token owner.  This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#19](~/add/codesnippet/csharp/p-system.security.princi_5_1.cs)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#19](~/add/codesnippet/visualbasic/p-system.security.princi_5_1.vb)]"
  syntax:
    content: public System.Security.Principal.SecurityIdentifier Owner { get; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "用于标记所有者的对象。"
  overload: System.Security.Principal.WindowsIdentity.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  id: RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: RunImpersonated(SafeAccessTokenHandle,Action)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "作为模拟 Windows 标识运行指定的操作。 而不是使用模拟的方法调用和中运行函数<xref href=&quot;System.Security.Principal.WindowsImpersonationContext&quot;> </xref>，你可以使用 RunImpersonated 并直接作为参数提供函数。"
  remarks: ''
  example:
  - "The following example demonstrates the use of the <xref:System.Security.Principal.WindowsIdentity> class to impersonate a user.  \n  \n> [!WARNING]\n>  This sample asks the user to enter a password on the console screen. The password will be visible on the screen, because the console window does not support masked input natively.  \n  \n```c#  \n// The following example demonstrates the use of the WindowsIdentity class to impersonate a user.   \n// IMPORTANT NOTE:   \n// This sample asks the user to enter a password on the console screen.   \n// The password will be visible on the screen, because the console window   \n// does not support masked input natively.  \n  \nusing System;  \nusing System.Runtime.InteropServices;  \nusing System.Security;  \nusing System.Security.Principal;  \nusing Microsoft.Win32.SafeHandles;  \n  \npublic class ImpersonationDemo  \n{  \n    [DllImport(\"advapi32.dll\", SetLastError = true, CharSet = CharSet.Unicode)]  \n    public static extern bool LogonUser(String lpszUsername, String lpszDomain, String lpszPassword,  \n        int dwLogonType, int dwLogonProvider, out SafeAccessTokenHandle phToken);  \n  \n    public static void Main()  \n    {  \n        // Get the user token for the specified user, domain, and password using the   \n        // unmanaged LogonUser method.   \n        // The local machine name can be used for the domain name to impersonate a user on this machine.  \n        Console.Write(\"Enter the name of the domain on which to log on: \");  \n        string domainName = Console.ReadLine();  \n  \n        Console.Write(\"Enter the login of a user on {0} that you wish to impersonate: \", domainName);  \n        string userName = Console.ReadLine();  \n  \n        Console.Write(\"Enter the password for {0}: \", userName);  \n  \n        const int LOGON32_PROVIDER_DEFAULT = 0;  \n        //This parameter causes LogonUser to create a primary token.   \n        const int LOGON32_LOGON_INTERACTIVE = 2;  \n  \n        // Call LogonUser to obtain a handle to an access token.   \n        SafeAccessTokenHandle safeAccessTokenHandle;  \n        bool returnValue = LogonUser(userName, domainName, Console.ReadLine(),  \n            LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT,  \n            out safeAccessTokenHandle);  \n  \n        if (false == returnValue)  \n        {  \n            int ret = Marshal.GetLastWin32Error();  \n            Console.WriteLine(\"LogonUser failed with error code : {0}\", ret);  \n            throw new System.ComponentModel.Win32Exception(ret);  \n        }  \n  \n        Console.WriteLine(\"Did LogonUser Succeed? \" + (returnValue ? \"Yes\" : \"No\"));  \n        // Check the identity.  \n        Console.WriteLine(\"Before impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n  \n        // Note: if you want to run as unimpersonated, pass  \n        //       'SafeAccessTokenHandle.InvalidHandle' instead of variable 'safeAccessTokenHandle'  \n        WindowsIdentity.RunImpersonated(  \n            safeAccessTokenHandle,  \n            // User action  \n            () =>  \n            {  \n                // Check the identity.  \n                Console.WriteLine(\"During impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n            }  \n            );  \n  \n        // Check the identity again.  \n        Console.WriteLine(\"After impersonation: \" + WindowsIdentity.GetCurrent().Name);  \n    }  \n}  \n  \n```"
  syntax:
    content: public static void RunImpersonated (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Action action);
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "模拟 Windows 标识 SafeAccessTokenHandle。"
    - id: action
      type: System.Action
      description: "要运行的 System.Action。"
  overload: System.Security.Principal.WindowsIdentity.RunImpersonated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  id: RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: RunImpersonated(SafeAccessTokenHandle,Func<T>)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  syntax:
    content: public static T RunImpersonated<T> (Microsoft.Win32.SafeHandles.SafeAccessTokenHandle safeAccessTokenHandle, Func<T> func);
    parameters:
    - id: safeAccessTokenHandle
      type: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
      description: "要添加。"
    - id: func
      type: System.Func{T}
      description: "要添加。"
    return:
      type: T
      description: "要添加。"
  overload: System.Security.Principal.WindowsIdentity.RunImpersonated<T>*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  id: System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  isEii: true
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "实现<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;></xref>接口，并在完成反序列化时，反序列化事件回调。"
  syntax:
    content: void IDeserializationCallback.OnDeserialization (object sender);
    parameters:
    - id: sender
      type: System.Object
      description: "反序列化事件源。"
  overload: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "集<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>重新创建此执行上下文的实例所需的逻辑上下文信息的对象。"
  remarks: "此方法会设置<xref:System.Runtime.Serialization.SerializationInfo>用逻辑调用上下文信息。</xref:System.Runtime.Serialization.SerializationInfo> 在反序列化过程的执行上下文对象重建从<xref:System.Runtime.Serialization.SerializationInfo>通过流传输。</xref:System.Runtime.Serialization.SerializationInfo>       有关详细信息，请参阅<xref:System.Runtime.Serialization.SerializationInfo>。</xref:System.Runtime.Serialization.SerializationInfo>"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "一个包含序列化所需的信息的对象<xref href=&quot;System.Collections.Hashtable&quot;> </xref>。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "一个包含源和与关联的序列化流的目标对象<xref href=&quot;System.Collections.Hashtable&quot;> </xref>。"
  overload: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.Token
  id: Token
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: Token
  nameWithType: WindowsIdentity.Token
  fullName: System.Security.Principal.WindowsIdentity.Token
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取用户的 Windows 帐户标记。"
  remarks: "不要显式释放令牌属性所返回的帐户标记。 令牌发布的<xref:System.Security.Principal.WindowsIdentity.Dispose%2A>方法，你可以在代码中调用该方法。</xref:System.Security.Principal.WindowsIdentity.Dispose%2A> <xref:System.Security.Principal.WindowsIdentity.Dispose%2A>此外会自动由垃圾回收器调用。</xref:System.Security.Principal.WindowsIdentity.Dispose%2A>      1> [!NOTE]&1;> 令牌属性所返回的帐户标记是用于创建 Windows 令牌的重复<xref:System.Security.Principal.WindowsIdentity>对象，并自动释放由.NET Framework。</xref:System.Security.Principal.WindowsIdentity> 这是不同于用户的帐户标记 (`userToken`构造函数的参数)，用于创建<xref:System.Security.Principal.WindowsIdentity>对象。</xref:System.Security.Principal.WindowsIdentity> `userToken`是通过调用创建的 Windows 帐户标记`LogonUser`，必须关闭以避免内存泄露。"
  example:
  - "The following code shows the use of the <xref:System.Security.Principal.WindowsIdentity.IsSystem%2A> property to get the Windows account token for the user. This code example is part of a larger example provided for the <xref:System.Security.Principal.WindowsIdentity> class.  \n  \n [!code-cs[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/csharp/p-system.security.princi_0_1.cs)]\n [!code-cpp[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/cpp/p-system.security.princi_0_1.cpp)]\n [!code-vb[System.Security.Principal.WindowsIdentity_AllMembers#14](~/add/codesnippet/visualbasic/p-system.security.princi_0_1.vb)]"
  syntax:
    content: public virtual IntPtr Token { get; }
    return:
      type: System.IntPtr
      description: "与当前执行线程关联的访问令牌的句柄。"
  overload: System.Security.Principal.WindowsIdentity.Token*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.User
  id: User
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: User
  nameWithType: WindowsIdentity.User
  fullName: System.Security.Principal.WindowsIdentity.User
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取用户的安全标识符 (SID)。"
  remarks: "SID 唯一标识用户或组在所有 Windows NT 实现上。      1> [!NOTE]&1;><xref:System.Security.Principal.WindowsIdentity>返回对象<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>方法不是 Windows 匿名用户相同。</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> </xref:System.Security.Principal.WindowsIdentity> 此属性获取`null`表示匿名用户<xref:System.Security.Principal.WindowsIdentity>返回对象<xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A>方法; 它不会获取表示匿名 Windows 用户的 SID。</xref:System.Security.Principal.WindowsIdentity.GetAnonymous%2A> </xref:System.Security.Principal.WindowsIdentity>"
  syntax:
    content: public System.Security.Principal.SecurityIdentifier User { get; }
    return:
      type: System.Security.Principal.SecurityIdentifier
      description: "用于用户的对象。"
  overload: System.Security.Principal.WindowsIdentity.User*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Principal.WindowsIdentity.UserClaims
  id: UserClaims
  parent: System.Security.Principal.WindowsIdentity
  langs:
  - csharp
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
  fullName: System.Security.Principal.WindowsIdentity.UserClaims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Principal
  summary: "获取声明<xref href=&quot;System.Security.Claims.ClaimTypes.WindowsUserClaim&quot;></xref>属性键。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> UserClaims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "声明集合<xref href=&quot;System.Security.Claims.ClaimTypes.WindowsUserClaim&quot;></xref>属性键。"
  overload: System.Security.Principal.WindowsIdentity.UserClaims*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: System.Security.Claims.ClaimsIdentity
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Security.Principal.WindowsIdentity)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(WindowsIdentity)
  nameWithType: WindowsIdentity.WindowsIdentity(WindowsIdentity)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(WindowsIdentity)
- uid: System.Security.Principal.WindowsIdentity
  parent: System.Security.Principal
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity
  fullName: System.Security.Principal.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(String)
  nameWithType: WindowsIdentity.WindowsIdentity(String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String)
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.String,System.String)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(String,String)
  nameWithType: WindowsIdentity.WindowsIdentity(String,String)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(String,String)
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String,WindowsAccountType)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType)
- uid: System.Security.Principal.WindowsAccountType
  parent: System.Security.Principal
  isExternal: false
  name: WindowsAccountType
  nameWithType: WindowsAccountType
  fullName: System.Security.Principal.WindowsAccountType
- uid: System.Security.Principal.WindowsIdentity.#ctor(System.IntPtr,System.String,System.Security.Principal.WindowsAccountType,System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  nameWithType: WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
  fullName: System.Security.Principal.WindowsIdentity.WindowsIdentity(IntPtr,String,WindowsAccountType,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Principal.WindowsIdentity.AccessToken
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
  fullName: System.Security.Principal.WindowsIdentity.AccessToken
- uid: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
  parent: Microsoft.Win32.SafeHandles
  isExternal: false
  name: SafeAccessTokenHandle
  nameWithType: SafeAccessTokenHandle
  fullName: Microsoft.Win32.SafeHandles.SafeAccessTokenHandle
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
  fullName: System.Security.Principal.WindowsIdentity.AuthenticationType
- uid: System.Security.Principal.WindowsIdentity.Claims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Claims
  nameWithType: WindowsIdentity.Claims
  fullName: System.Security.Principal.WindowsIdentity.Claims
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Principal.WindowsIdentity.Clone
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Clone()
  nameWithType: WindowsIdentity.Clone()
  fullName: System.Security.Principal.WindowsIdentity.Clone()
- uid: System.Security.Principal.WindowsIdentity.DefaultIssuer
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DefaultIssuer
  nameWithType: WindowsIdentity.DefaultIssuer
  fullName: System.Security.Principal.WindowsIdentity.DefaultIssuer
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
  fullName: System.Security.Principal.WindowsIdentity.DeviceClaims
- uid: System.Security.Principal.WindowsIdentity.Dispose
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose()
  nameWithType: WindowsIdentity.Dispose()
  fullName: System.Security.Principal.WindowsIdentity.Dispose()
- uid: System.Security.Principal.WindowsIdentity.Dispose(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: WindowsIdentity.Dispose(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.Dispose(Boolean)
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetAnonymous()
  nameWithType: WindowsIdentity.GetAnonymous()
  fullName: System.Security.Principal.WindowsIdentity.GetAnonymous()
- uid: System.Security.Principal.WindowsIdentity.GetCurrent
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent()
  nameWithType: WindowsIdentity.GetCurrent()
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent()
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Boolean)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent(Boolean)
  nameWithType: WindowsIdentity.GetCurrent(Boolean)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(Boolean)
- uid: System.Security.Principal.WindowsIdentity.GetCurrent(System.Security.Principal.TokenAccessLevels)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent(TokenAccessLevels)
  nameWithType: WindowsIdentity.GetCurrent(TokenAccessLevels)
  fullName: System.Security.Principal.WindowsIdentity.GetCurrent(TokenAccessLevels)
- uid: System.Security.Principal.TokenAccessLevels
  parent: System.Security.Principal
  isExternal: false
  name: TokenAccessLevels
  nameWithType: TokenAccessLevels
  fullName: System.Security.Principal.TokenAccessLevels
- uid: System.Security.Principal.WindowsIdentity.Groups
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Groups
  nameWithType: WindowsIdentity.Groups
  fullName: System.Security.Principal.WindowsIdentity.Groups
- uid: System.Security.Principal.IdentityReferenceCollection
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReferenceCollection
  nameWithType: IdentityReferenceCollection
  fullName: System.Security.Principal.IdentityReferenceCollection
- uid: System.Security.Principal.WindowsIdentity.Impersonate
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate()
  nameWithType: WindowsIdentity.Impersonate()
  fullName: System.Security.Principal.WindowsIdentity.Impersonate()
- uid: System.Security.Principal.WindowsImpersonationContext
  parent: System.Security.Principal
  isExternal: false
  name: WindowsImpersonationContext
  nameWithType: WindowsImpersonationContext
  fullName: System.Security.Principal.WindowsImpersonationContext
- uid: System.Security.Principal.WindowsIdentity.Impersonate(System.IntPtr)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate(IntPtr)
  nameWithType: WindowsIdentity.Impersonate(IntPtr)
  fullName: System.Security.Principal.WindowsIdentity.Impersonate(IntPtr)
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
  fullName: System.Security.Principal.WindowsIdentity.ImpersonationLevel
- uid: System.Security.Principal.TokenImpersonationLevel
  parent: System.Security.Principal
  isExternal: true
  name: TokenImpersonationLevel
  nameWithType: TokenImpersonationLevel
  fullName: System.Security.Principal.TokenImpersonationLevel
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
  fullName: System.Security.Principal.WindowsIdentity.IsAnonymous
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
  fullName: System.Security.Principal.WindowsIdentity.IsAuthenticated
- uid: System.Security.Principal.WindowsIdentity.IsGuest
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
  fullName: System.Security.Principal.WindowsIdentity.IsGuest
- uid: System.Security.Principal.WindowsIdentity.IsSystem
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
  fullName: System.Security.Principal.WindowsIdentity.IsSystem
- uid: System.Security.Principal.WindowsIdentity.Name
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Name
  nameWithType: WindowsIdentity.Name
  fullName: System.Security.Principal.WindowsIdentity.Name
- uid: System.Security.Principal.WindowsIdentity.Owner
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Owner
  nameWithType: WindowsIdentity.Owner
  fullName: System.Security.Principal.WindowsIdentity.Owner
- uid: System.Security.Principal.SecurityIdentifier
  parent: System.Security.Principal
  isExternal: false
  name: SecurityIdentifier
  nameWithType: SecurityIdentifier
  fullName: System.Security.Principal.SecurityIdentifier
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated(Microsoft.Win32.SafeHandles.SafeAccessTokenHandle,System.Action)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated(SafeAccessTokenHandle,Action)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Action)
- uid: System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated``1(Microsoft.Win32.SafeHandles.SafeAccess``0okenHandle,System.Func{``0})
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated(SafeAccessTokenHandle,Func<T>)
  nameWithType: WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
  fullName: System.Security.Principal.WindowsIdentity.RunImpersonated(SafeAccessTokenHandle,Func<T>)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Func{T}
  parent: System
  isExternal: true
  name: Func<T>
  nameWithType: Func<T>
  fullName: System.Func<T>
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: Func<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Principal.WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Principal.WindowsIdentity.Token
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Token
  nameWithType: WindowsIdentity.Token
  fullName: System.Security.Principal.WindowsIdentity.Token
- uid: System.Security.Principal.WindowsIdentity.User
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: User
  nameWithType: WindowsIdentity.User
  fullName: System.Security.Principal.WindowsIdentity.User
- uid: System.Security.Principal.WindowsIdentity.UserClaims
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
  fullName: System.Security.Principal.WindowsIdentity.UserClaims
- uid: System.Security.Principal.WindowsIdentity.#ctor*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: WindowsIdentity
  nameWithType: WindowsIdentity.WindowsIdentity
- uid: System.Security.Principal.WindowsIdentity.AccessToken*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AccessToken
  nameWithType: WindowsIdentity.AccessToken
- uid: System.Security.Principal.WindowsIdentity.AuthenticationType*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: WindowsIdentity.AuthenticationType
- uid: System.Security.Principal.WindowsIdentity.Claims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Claims
  nameWithType: WindowsIdentity.Claims
- uid: System.Security.Principal.WindowsIdentity.Clone*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Clone
  nameWithType: WindowsIdentity.Clone
- uid: System.Security.Principal.WindowsIdentity.DeviceClaims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: DeviceClaims
  nameWithType: WindowsIdentity.DeviceClaims
- uid: System.Security.Principal.WindowsIdentity.Dispose*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Dispose
  nameWithType: WindowsIdentity.Dispose
- uid: System.Security.Principal.WindowsIdentity.GetAnonymous*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetAnonymous
  nameWithType: WindowsIdentity.GetAnonymous
- uid: System.Security.Principal.WindowsIdentity.GetCurrent*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: GetCurrent
  nameWithType: WindowsIdentity.GetCurrent
- uid: System.Security.Principal.WindowsIdentity.Groups*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Groups
  nameWithType: WindowsIdentity.Groups
- uid: System.Security.Principal.WindowsIdentity.Impersonate*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Impersonate
  nameWithType: WindowsIdentity.Impersonate
- uid: System.Security.Principal.WindowsIdentity.ImpersonationLevel*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: ImpersonationLevel
  nameWithType: WindowsIdentity.ImpersonationLevel
- uid: System.Security.Principal.WindowsIdentity.IsAnonymous*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAnonymous
  nameWithType: WindowsIdentity.IsAnonymous
- uid: System.Security.Principal.WindowsIdentity.IsAuthenticated*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: WindowsIdentity.IsAuthenticated
- uid: System.Security.Principal.WindowsIdentity.IsGuest*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsGuest
  nameWithType: WindowsIdentity.IsGuest
- uid: System.Security.Principal.WindowsIdentity.IsSystem*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: IsSystem
  nameWithType: WindowsIdentity.IsSystem
- uid: System.Security.Principal.WindowsIdentity.Name*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Name
  nameWithType: WindowsIdentity.Name
- uid: System.Security.Principal.WindowsIdentity.Owner*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Owner
  nameWithType: WindowsIdentity.Owner
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated
  nameWithType: WindowsIdentity.RunImpersonated
- uid: System.Security.Principal.WindowsIdentity.RunImpersonated<T>*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: RunImpersonated<T>
  nameWithType: WindowsIdentity.RunImpersonated<T>
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
  nameWithType: WindowsIdentity.System.Runtime.Serialization.IDeserializationCallback.OnDeserialization
- uid: System.Security.Principal.WindowsIdentity.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: WindowsIdentity.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Security.Principal.WindowsIdentity.Token*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: Token
  nameWithType: WindowsIdentity.Token
- uid: System.Security.Principal.WindowsIdentity.User*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: User
  nameWithType: WindowsIdentity.User
- uid: System.Security.Principal.WindowsIdentity.UserClaims*
  parent: System.Security.Principal.WindowsIdentity
  isExternal: false
  name: UserClaims
  nameWithType: WindowsIdentity.UserClaims
