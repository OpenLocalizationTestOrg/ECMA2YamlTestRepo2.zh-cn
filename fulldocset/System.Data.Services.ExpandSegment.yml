### YamlMime:ManagedReference
items:
- uid: System.Data.Services.ExpandSegment
  id: ExpandSegment
  children:
  - System.Data.Services.ExpandSegment.#ctor(System.String,System.Linq.Expressions.Expression)
  - System.Data.Services.ExpandSegment.ExpandedProperty
  - System.Data.Services.ExpandSegment.Filter
  - System.Data.Services.ExpandSegment.HasFilter
  - System.Data.Services.ExpandSegment.MaxResultsExpected
  - System.Data.Services.ExpandSegment.Name
  - System.Data.Services.ExpandSegment.PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})
  langs:
  - csharp
  name: ExpandSegment
  nameWithType: ExpandSegment
  fullName: System.Data.Services.ExpandSegment
  type: Class
  summary: "指示是否应将其数据返回为推迟的内容而不是内联的查询段。"
  remarks: "`$expand`子句指示每个`$expand`应完全展开该项。 例如，值`OrderLines.Product.Image`与`$expand`导致`OrderLines`、`Product`中每个元素`OrderLines`，和`Image`的`Product`中每个元素`OrderLines`进行扩展。       中的最左边的属性`$expand`子句必须在请求 URI 中的最后一个路径段由标识该实体集中实体类型上的属性。       冗余展开子句规则是可以接受且被忽略。"
  example:
  - "The following URI expands the `OrderLines` associated with each `Order` returned by the query.  \n  \n```  \nhttp://host/service.svc/Orders?$expand=OrderLines  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("ExpandSegment ({name},Filter={filter})]")]

      public class ExpandSegment
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.#ctor(System.String,System.Linq.Expressions.Expression)
  id: '#ctor(System.String,System.Linq.Expressions.Expression)'
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: ExpandSegment(String,Expression)
  nameWithType: ExpandSegment.ExpandSegment(String,Expression)
  fullName: System.Data.Services.ExpandSegment.ExpandSegment(String,Expression)
  type: Constructor
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "初始化<xref href=&quot;System.Data.Services.ExpandSegment&quot;></xref>使用指定的属性名称和筛选表达式，可能为 null 的对象。"
  syntax:
    content: public ExpandSegment (string name, System.Linq.Expressions.Expression filter);
    parameters:
    - id: name
      type: System.String
      description: "要扩展的属性名称。"
    - id: filter
      type: System.Linq.Expressions.Expression
      description: "中应用扩展段查询的筛选器选项。"
  overload: System.Data.Services.ExpandSegment.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.ExpandedProperty
  id: ExpandedProperty
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: ExpandedProperty
  nameWithType: ExpandSegment.ExpandedProperty
  fullName: System.Data.Services.ExpandSegment.ExpandedProperty
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "获取属性扩展。"
  syntax:
    content: public System.Data.Services.Providers.ResourceProperty ExpandedProperty { get; }
    return:
      type: System.Data.Services.Providers.ResourceProperty
      description: "要扩展的属性。"
  overload: System.Data.Services.ExpandSegment.ExpandedProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.Filter
  id: Filter
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: Filter
  nameWithType: ExpandSegment.Filter
  fullName: System.Data.Services.ExpandSegment.Filter
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "中应用扩展段查询的筛选器选项。"
  syntax:
    content: public System.Linq.Expressions.Expression Filter { get; }
    return:
      type: System.Linq.Expressions.Expression
      description: "针对目标数据中指定的筛选器表达式。"
  overload: System.Data.Services.ExpandSegment.Filter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.HasFilter
  id: HasFilter
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: HasFilter
  nameWithType: ExpandSegment.HasFilter
  fullName: System.Data.Services.ExpandSegment.HasFilter
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "一个布尔值，该值指示是否与筛选器表达式使用的展开语句。"
  syntax:
    content: public bool HasFilter { get; }
    return:
      type: System.Boolean
      description: "True 或 false。"
  overload: System.Data.Services.ExpandSegment.HasFilter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.MaxResultsExpected
  id: MaxResultsExpected
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: MaxResultsExpected
  nameWithType: ExpandSegment.MaxResultsExpected
  fullName: System.Data.Services.ExpandSegment.MaxResultsExpected
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "获取最大预期的结果数。"
  remarks: "若要使数据服务能够检测到故障满足此约束，将扩展提供程序应返回不超过 MaxResultsExpected + 1 个元素。"
  syntax:
    content: public int MaxResultsExpected { get; }
    return:
      type: System.Int32
      description: "整数值，该值指示最大结果数。"
  overload: System.Data.Services.ExpandSegment.MaxResultsExpected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.Name
  id: Name
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: Name
  nameWithType: ExpandSegment.Name
  fullName: System.Data.Services.ExpandSegment.Name
  type: Property
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "要扩展的属性名称。"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "包含属性的名称的字符串值。"
  overload: System.Data.Services.ExpandSegment.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Services.ExpandSegment.PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})
  id: PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})
  parent: System.Data.Services.ExpandSegment
  langs:
  - csharp
  name: PathHasFilter(IEnumerable<ExpandSegment>)
  nameWithType: ExpandSegment.PathHasFilter(IEnumerable<ExpandSegment>)
  fullName: System.Data.Services.ExpandSegment.PathHasFilter(IEnumerable<ExpandSegment>)
  type: Method
  assemblies:
  - System.Data.Services
  namespace: System.Data.Services
  summary: "一个布尔值，该值指示路径是否包括目标数据的筛选器选项。"
  syntax:
    content: public static bool PathHasFilter (System.Collections.Generic.IEnumerable<System.Data.Services.ExpandSegment> path);
    parameters:
    - id: path
      type: System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment}
      description: "用于检查筛选器的段的枚举。"
    return:
      type: System.Boolean
      description: "如果任何路径中的段有筛选器; 为 truefalse 否则为。"
  overload: System.Data.Services.ExpandSegment.PathHasFilter*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Services.ExpandSegment.#ctor(System.String,System.Linq.Expressions.Expression)
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: ExpandSegment(String,Expression)
  nameWithType: ExpandSegment.ExpandSegment(String,Expression)
  fullName: System.Data.Services.ExpandSegment.ExpandSegment(String,Expression)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Linq.Expressions.Expression
  parent: System.Linq.Expressions
  isExternal: true
  name: Expression
  nameWithType: Expression
  fullName: System.Linq.Expressions.Expression
- uid: System.Data.Services.ExpandSegment.ExpandedProperty
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: ExpandedProperty
  nameWithType: ExpandSegment.ExpandedProperty
  fullName: System.Data.Services.ExpandSegment.ExpandedProperty
- uid: System.Data.Services.Providers.ResourceProperty
  parent: System.Data.Services.Providers
  isExternal: false
  name: ResourceProperty
  nameWithType: ResourceProperty
  fullName: System.Data.Services.Providers.ResourceProperty
- uid: System.Data.Services.ExpandSegment.Filter
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: Filter
  nameWithType: ExpandSegment.Filter
  fullName: System.Data.Services.ExpandSegment.Filter
- uid: System.Data.Services.ExpandSegment.HasFilter
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: HasFilter
  nameWithType: ExpandSegment.HasFilter
  fullName: System.Data.Services.ExpandSegment.HasFilter
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Services.ExpandSegment.MaxResultsExpected
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: MaxResultsExpected
  nameWithType: ExpandSegment.MaxResultsExpected
  fullName: System.Data.Services.ExpandSegment.MaxResultsExpected
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Services.ExpandSegment.Name
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: Name
  nameWithType: ExpandSegment.Name
  fullName: System.Data.Services.ExpandSegment.Name
- uid: System.Data.Services.ExpandSegment.PathHasFilter(System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment})
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: PathHasFilter(IEnumerable<ExpandSegment>)
  nameWithType: ExpandSegment.PathHasFilter(IEnumerable<ExpandSegment>)
  fullName: System.Data.Services.ExpandSegment.PathHasFilter(IEnumerable<ExpandSegment>)
- uid: System.Collections.Generic.IEnumerable{System.Data.Services.ExpandSegment}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ExpandSegment>
  nameWithType: IEnumerable<ExpandSegment>
  fullName: System.Collections.Generic.IEnumerable<System.Data.Services.ExpandSegment>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.Services.ExpandSegment>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.Services.ExpandSegment
    name: ExpandSegment
    nameWithType: ExpandSegment
    fullName: ExpandSegment
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.Services.ExpandSegment.#ctor*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: ExpandSegment
  nameWithType: ExpandSegment.ExpandSegment
- uid: System.Data.Services.ExpandSegment.ExpandedProperty*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: ExpandedProperty
  nameWithType: ExpandSegment.ExpandedProperty
- uid: System.Data.Services.ExpandSegment.Filter*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: Filter
  nameWithType: ExpandSegment.Filter
- uid: System.Data.Services.ExpandSegment.HasFilter*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: HasFilter
  nameWithType: ExpandSegment.HasFilter
- uid: System.Data.Services.ExpandSegment.MaxResultsExpected*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: MaxResultsExpected
  nameWithType: ExpandSegment.MaxResultsExpected
- uid: System.Data.Services.ExpandSegment.Name*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: Name
  nameWithType: ExpandSegment.Name
- uid: System.Data.Services.ExpandSegment.PathHasFilter*
  parent: System.Data.Services.ExpandSegment
  isExternal: false
  name: PathHasFilter
  nameWithType: ExpandSegment.PathHasFilter
