### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Strings
  id: Strings
  children:
  - Microsoft.VisualBasic.Strings.Asc(System.Char)
  - Microsoft.VisualBasic.Strings.Asc(System.String)
  - Microsoft.VisualBasic.Strings.AscW(System.Char)
  - Microsoft.VisualBasic.Strings.AscW(System.String)
  - Microsoft.VisualBasic.Strings.Chr(System.Int32)
  - Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  - Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  - Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  - Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  - Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  - Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  - Microsoft.VisualBasic.Strings.LCase(System.Char)
  - Microsoft.VisualBasic.Strings.LCase(System.String)
  - Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Boolean)
  - Microsoft.VisualBasic.Strings.Len(System.Byte)
  - Microsoft.VisualBasic.Strings.Len(System.Char)
  - Microsoft.VisualBasic.Strings.Len(System.DateTime)
  - Microsoft.VisualBasic.Strings.Len(System.Decimal)
  - Microsoft.VisualBasic.Strings.Len(System.Double)
  - Microsoft.VisualBasic.Strings.Len(System.Int16)
  - Microsoft.VisualBasic.Strings.Len(System.Int32)
  - Microsoft.VisualBasic.Strings.Len(System.Int64)
  - Microsoft.VisualBasic.Strings.Len(System.Object)
  - Microsoft.VisualBasic.Strings.Len(System.SByte)
  - Microsoft.VisualBasic.Strings.Len(System.Single)
  - Microsoft.VisualBasic.Strings.Len(System.String)
  - Microsoft.VisualBasic.Strings.Len(System.UInt16)
  - Microsoft.VisualBasic.Strings.Len(System.UInt32)
  - Microsoft.VisualBasic.Strings.Len(System.UInt64)
  - Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.LTrim(System.String)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  - Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  - Microsoft.VisualBasic.Strings.RTrim(System.String)
  - Microsoft.VisualBasic.Strings.Space(System.Int32)
  - Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  - Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  - Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  - Microsoft.VisualBasic.Strings.StrReverse(System.String)
  - Microsoft.VisualBasic.Strings.Trim(System.String)
  - Microsoft.VisualBasic.Strings.UCase(System.Char)
  - Microsoft.VisualBasic.Strings.UCase(System.String)
  langs:
  - csharp
  name: Strings
  nameWithType: Strings
  fullName: Microsoft.VisualBasic.Strings
  type: Class
  summary: "<xref uid=&quot;langword_csharp_Strings&quot; name=&quot;Strings&quot; href=&quot;&quot;> </xref>模块包含用于执行字符串操作的过程。"
  remarks: "此模块支持的 Visual Basic 语言关键字和操作字符串的运行时库成员。"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/t-microsoft.visualbasic._6_1.vb)]"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class Strings
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  id: Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示为字符相对应的字符代码。"
  remarks: "`Asc`返回*代码点*，或输入的字符的字符代码。 这可以是 0 到 255 的单字节字符集 (SBCS) 值和-32768 到 32767 之间的双字节字符集 (dbcs) 值。       `AscW`返回输入的字符的 Unicode 码位。 这可以是 0 到 65535 之间。 返回的值是独立于当前线程的区域性和代码页设置。      1> [!NOTE]&1;>`AscB`的 Visual Basic 早期版本的函数返回一个字节，而不是一个字符的代码。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 2005 字符串都都以 unicode 格式，和`AscB`不再受支持。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._55_1.vb)]"
  syntax:
    content: public static int Asc (char String);
    parameters:
    - id: String
      type: System.Char
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。 如果`String`是<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式，仅字符串的第一个字符用于输入。 如果`String`是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或不包含任何字符，<xref:System.ArgumentException>发生错误。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示为字符相对应的字符代码。"
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  id: Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示为字符相对应的字符代码。"
  remarks: "`Asc`返回*代码点*，或输入的字符的字符代码。 这可以是 0 到 255 的单字节字符集 (SBCS) 值和-32768 到 32767 之间的双字节字符集 (dbcs) 值。       `AscW`返回输入的字符的 Unicode 码位。 这可以是 0 到 65535 之间。 返回的值是独立于当前线程的区域性和代码页设置。      1> [!NOTE]&1;>`AscB`的 Visual Basic 早期版本的函数返回一个字节，而不是一个字符的代码。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 2005 字符串都都以 unicode 格式，和`AscB`不再受支持。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._249_1.vb)]"
  syntax:
    content: public static int Asc (string String);
    parameters:
    - id: String
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。 如果`String`是<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式，仅字符串的第一个字符用于输入。 如果`String`是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或不包含任何字符，<xref:System.ArgumentException>发生错误。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示为字符相对应的字符代码。"
  overload: Microsoft.VisualBasic.Strings.Asc*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  id: AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示为字符相对应的字符代码。"
  remarks: "`Asc`返回*代码点*，或输入的字符的字符代码。 这可以是 0 到 255 的单字节字符集 (SBCS) 值和-32768 到 32767 之间的双字节字符集 (dbcs) 值。       `AscW`返回输入的字符的 Unicode 码位。 这可以是 0 到 65535 之间。 返回的值是独立于当前线程的区域性和代码页设置。      1> [!NOTE]&1;>`AscB`的 Visual Basic 早期版本的函数返回一个字节，而不是一个字符的代码。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 2005 字符串都都以 unicode 格式，和`AscB`不再受支持。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._18_1.vb)]"
  syntax:
    content: public static int AscW (char String);
    parameters:
    - id: String
      type: System.Char
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。 如果`String`是<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式，仅字符串的第一个字符用于输入。 如果`String`是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或不包含任何字符，<xref:System.ArgumentException>发生错误。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示为字符相对应的字符代码。"
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  id: AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示为字符相对应的字符代码。"
  remarks: "`Asc`返回*代码点*，或输入的字符的字符代码。 这可以是 0 到 255 的单字节字符集 (SBCS) 值和-32768 到 32767 之间的双字节字符集 (dbcs) 值。       `AscW`返回输入的字符的 Unicode 码位。 这可以是 0 到 65535 之间。 返回的值是独立于当前线程的区域性和代码页设置。      1> [!NOTE]&1;>`AscB`的 Visual Basic 早期版本的函数返回一个字节，而不是一个字符的代码。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 2005 字符串都都以 unicode 格式，和`AscB`不再受支持。"
  example:
  - "The following example uses the `Asc` function to return `Integer` character codes corresponding to the first letter in each string.  \n  \n [!code-vb[VbVbalrFunctions#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._205_1.vb)]"
  syntax:
    content: public static int AscW (string String);
    parameters:
    - id: String
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。 如果`String`是<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式，仅字符串的第一个字符用于输入。 如果`String`是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或不包含任何字符，<xref:System.ArgumentException>发生错误。</xref:System.ArgumentException>"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值表示为字符相对应的字符代码。"
  overload: Microsoft.VisualBasic.Strings.AscW*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  id: Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回与指定的字符代码关联的字符。"
  remarks: "非对称的范围已接受的针对`CharCode`补偿存储之间的差异`Short`和`Integer`。 例如，-29183 是`Short`但 +&36353; 为`Integer`。 这也便于与 Visual Basic 6.0 兼容性。       `Chr`使用<xref:System.Text.Encoding>类<xref:System.Text?displayProperty=fullName>命名空间，以确定当前线程是否使用单字节字符集 (SBCS) 或双字节字符设置 (DBCS)。</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> 这就需要花费`CharCode`作为代码点中相应的一组。 范围可以是 0 到 255 SBCS 字符和-32768 到 65535 的 DBCS 字符。       返回的值取决于当前线程中包含的代码页<xref:System.Globalization.TextInfo.ANSICodePage%2A>属性<xref:System.Globalization.TextInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> 你可以获取<xref:System.Globalization.TextInfo.ANSICodePage%2A>通过指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`采用`CharCode`为 Unicode 码位。 范围是独立于当前线程的区域性和代码页设置。 32768 到-1 的值的处理方式范围&32768; 到方式中的值相同。       从 0 到 31 的数字是标准不能打印的 ASCII 代码相同。 例如，`Chr(10)`返回以换行符。      1> [!NOTE]&1;>`ChrB`在早期版本的 Visual Basic 中的函数返回一个字节。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 和.NET Framework 中的所有字符串都都以 unicode 格式，和`ChrB`不再受支持。"
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._105_1.vb)]"
  syntax:
    content: public static char Chr (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>表达式表示`code point`，或字符代码的字符。"
    return:
      type: System.Char
      description: "返回与指定的字符代码关联的字符。"
  overload: Microsoft.VisualBasic.Strings.Chr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; 0 or &gt; 255 for <xref uid=&quot;langword_csharp_Chr&quot; name=&quot;Chr&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  id: ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回与指定的字符代码关联的字符。"
  remarks: "非对称的范围已接受的针对`CharCode`补偿存储之间的差异`Short`和`Integer`。 例如，-29183 是`Short`但 +&36353; 为`Integer`。 这也便于与 Visual Basic 6.0 兼容性。       `Chr`使用<xref:System.Text.Encoding>类<xref:System.Text?displayProperty=fullName>命名空间，以确定当前线程是否使用单字节字符集 (SBCS) 或双字节字符设置 (DBCS)。</xref:System.Text?displayProperty=fullName> </xref:System.Text.Encoding> 这就需要花费`CharCode`作为代码点中相应的一组。 范围可以是 0 到 255 SBCS 字符和-32768 到 65535 的 DBCS 字符。       返回的值取决于当前线程中包含的代码页<xref:System.Globalization.TextInfo.ANSICodePage%2A>属性<xref:System.Globalization.TextInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.TextInfo> </xref:System.Globalization.TextInfo.ANSICodePage%2A> 你可以获取<xref:System.Globalization.TextInfo.ANSICodePage%2A>通过指定`System.Globalization.CultureInfo.CurrentCulture.TextInfo.ANSICodePage`。</xref:System.Globalization.TextInfo.ANSICodePage%2A>       `ChrW`采用`CharCode`为 Unicode 码位。 范围是独立于当前线程的区域性和代码页设置。 32768 到-1 的值的处理方式范围&32768; 到方式中的值相同。       从 0 到 31 的数字是标准不能打印的 ASCII 代码相同。 例如，`Chr(10)`返回以换行符。      1> [!NOTE]&1;>`ChrB`在早期版本的 Visual Basic 中的函数返回一个字节。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 Visual Basic 和.NET Framework 中的所有字符串都都以 unicode 格式，和`ChrB`不再受支持。"
  example:
  - "The following example uses the `Chr` function to return the character associated with the specified character code.  \n  \n [!code-vb[VbVbalrStrings#7](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._45_1.vb)]"
  syntax:
    content: public static char ChrW (int CharCode);
    parameters:
    - id: CharCode
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;> </xref>表达式表示`code point`，或字符代码的字符。"
    return:
      type: System.Char
      description: "返回与指定的字符代码关联的字符。"
  overload: Microsoft.VisualBasic.Strings.ChrW*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>CharCode</code>&lt; -32768 or &gt; 65535 for <xref uid=&quot;langword_csharp_ChrW&quot; name=&quot;ChrW&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个从零开始的数组，包含的子集<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>数组基于指定的筛选器条件。"
  remarks: "如果没有匹配项的`Match`内找到`Source`、`Filter`函数返回一个空数组。 如果发生错误`Source`设置为`Nothing`或不是一维数组。       返回的数组`Filter`函数仅包含足够的元素以包含匹配项的数目。       `Compare`自变量可以具有下列值。      |||  |-|-|  |常量 |说明 |  |`CompareMethod.Binary`|执行二进制比较 |  |`CompareMethod.Text`|执行文本比较 |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/bfb6d7a4-ec2d-49ca-96ad-_1.vb)]"
  syntax:
    content: public static string[] Filter (object[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.Object[]
      description: "必需。 要搜索的字符串的一维数组。"
    - id: Match
      type: System.String
      description: "必需。 要搜索的字符串。"
    - id: Include
      type: System.Boolean
      description: "可选。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示是否返回包含或排除的子字符串`Match`。 如果`Include`是<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>函数返回的数组，其中包含子集`Match`作为子字符串。 如果`Include`是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>函数返回的数组不包含子集`Match`作为子字符串。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "可选。 数字值，该值指示要使用的字符串比较的类型。 值，请参阅&quot;设置&quot;。"
    return:
      type: System.String[]
      description: "返回一个从零开始的数组，包含的子集<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>数组基于指定的筛选器条件。"
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或不是一维数组。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  id: Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个从零开始的数组，包含的子集<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>数组基于指定的筛选器条件。"
  remarks: "如果没有匹配项的`Match`内找到`Source`、`Filter`函数返回一个空数组。 如果发生错误`Source`设置为`Nothing`或不是一维数组。       返回的数组`Filter`函数仅包含足够的元素以包含匹配项的数目。       `Compare`自变量可以具有下列值。      |||  |-|-|  |常量 |说明 |  |`CompareMethod.Binary`|执行二进制比较 |  |`CompareMethod.Text`|执行文本比较 |"
  example:
  - "This example demonstrates the use of the `Filter` function.  \n  \n [!code-vb[VbVbalrStrings#24](~/add/codesnippet/visualbasic/a4b278ef-f791-4808-8a23-_1.vb)]"
  syntax:
    content: public static string[] Filter (string[] Source, string Match, bool Include = true, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Source
      type: System.String[]
      description: "必需。 要搜索的字符串的一维数组。"
    - id: Match
      type: System.String
      description: "必需。 要搜索的字符串。"
    - id: Include
      type: System.Boolean
      description: "可选。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示是否返回包含或排除的子字符串`Match`。 如果`Include`是<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>函数返回的数组，其中包含子集`Match`作为子字符串。 如果`Include`是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Filter&quot; name=&quot;Filter&quot; href=&quot;&quot;> </xref>函数返回的数组不包含子集`Match`作为子字符串。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "可选。 数字值，该值指示要使用的字符串比较的类型。 值，请参阅&quot;设置&quot;。"
    return:
      type: System.String[]
      description: "返回一个从零开始的数组，包含的子集<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>数组基于指定的筛选器条件。"
  overload: Microsoft.VisualBasic.Strings.Filter*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Source</code>是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>或不是一维数组。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  id: Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回根据格式中包含的说明设置格式的字符串<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
  remarks: "The <xref:System.String.Format%2A?displayProperty=fullName> method also provides similar functionality.  \n  \n If you are formatting a nonlocalized numeric string, you should use a user-defined numeric format to ensure that you get the look you want.  \n  \n If you try to format a number without specifying `Style`, the `Format` function provides functionality similar to the `Str` function, although it is internationally aware. However, positive numbers formatted as strings using the `Format` function don't include a leading space reserved for the sign of the value; those converted using the `Str` function retain the leading space.  \n  \n## Different Formats for Different Numeric Values  \n A user-defined format expression for numbers can have from one to three sections separated by semicolons. If the `Style` argument of the `Format` function contains one of the predefined numeric formats, only one section is allowed.  \n  \n|||  \n|-|-|  \n|If you use|This is the result|  \n|One section only|The format expression applies to all values.|  \n|Two sections|The first section applies to positive values and zeros; the second applies to negative values.|  \n|Three sections|The first section applies to positive values, the second applies to negative values, and the third applies to zeros.|  \n  \n The following example has two sections: the first defines the format for positive values and zeros; the second section defines the format for negative values. Since the `Style` argument of the `Format` function takes a string, it is enclosed by quotation marks.  \n  \n [!code-vb[VbVbalrStrings#18](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_1.vb)]  \n  \n If you include semicolons with nothing between them, the missing section is printed using the format of the positive value. For example, the following format displays positive and negative values using the format in the first section and displays `Zero` if the value is zero.  \n  \n [!code-vb[VbVbalrStrings#19](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_2.vb)]  \n  \n## Predefined Numeric Formats  \n The following table identifies the predefined numeric format names. These may be used by name as the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format name|Description|  \n|`General Number`, `G`, or `g`|Displays number with no thousand separator.<br /><br /> For example, `Format(&H3FA, \"g\")` returns `1018`.|  \n|`Currency`, `C`, or `c`|Displays number with thousand separator, if appropriate; displays two digits to the right of the decimal separator. Output is based on system locale settings.<br /><br /> For example, `Format(1234567, \"c\")` returns `$1,234,567.00`.|  \n|`Fixed`, `F`, or `f`|Displays at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"f\")` returns `1234567.00`.|  \n|`Standard`, `N`, or `n`|Displays number with thousand separator, at least one digit to the left and two digits to the right of the decimal separator.<br /><br /> For example, `Format(1234567, \"n\")` returns `1,234,567.00`.|  \n|`Percent`|Displays number multiplied by 100 with a percent sign (%) appended immediately to the right; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.4744, \"Percent\")` returns `47.44%`.|  \n|`P`, or `p`|Displays number with thousandths separator multiplied by 100 with a percent sign (%) appended to the right and separated by a single space; always displays two digits to the right of the decimal separator.<br /><br /> For example, `Format(0.80345, \"p\")` returns `80.35 %`.|  \n|`Scientific`|Uses standard scientific notation, providing two significant digits.<br /><br /> For example, `Format(1234567, \"Scientific\")` returns `1.23E+06`.|  \n|`E`, or `e`|Uses standard scientific notation, providing six significant digits.<br /><br /> For example, `Format(1234567, \"e\")` returns `1.234567e+006`.|  \n|`D`, or `d`|Displays number as a string that contains the value of the number in Decimal (base 10) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(&H7F, \"d\")` returns `127`.|  \n|`X`, or `x`|Displays number as a string that contains the value of the number in Hexadecimal (base 16) format. This option is supported for integral types (`Byte`, `Short`, `Integer`, `Long`) only.<br /><br /> For example, `Format(127, \"x\")` returns `7f`.|  \n|`Yes/No`|Displays `No` if number is 0; otherwise, displays `Yes`.<br /><br /> For example, `Format(0, \"Yes/No\")` returns `No`.|  \n|`True/False`|Displays `False` if number is 0; otherwise, displays `True`.<br /><br /> For example, `Format(1, \"True/False\")` returns `True`.|  \n|`On/Off`|Displays `Off` if number is 0; otherwise, displays `On`.<br /><br /> For example, `Format(1, \"On/Off\")` returns `On`.|  \n  \n### Smart Device Developer Notes  \n The `Yes/No`, `True/False`, and `On/Off` formats are not supported.  \n  \n## User-Defined Numeric Formats  \n The following table identifies characters you can use to create user-defined number formats. These may be used to build the `Style` argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|None|Displays the number with no formatting.|  \n|(`0`)|Digit placeholder. Displays a digit or a zero. If the expression has a digit in the position where the zero appears in the format string, display it; otherwise, displays a zero in that position.<br /><br /> If the number has fewer digits than there are zeros (on either side of the decimal) in the format expression, displays leading or trailing zeros. If the number has more digits to the right of the decimal separator than there are zeros to the right of the decimal separator in the format expression, rounds the number to as many decimal places as there are zeros. If the number has more digits to the left of the decimal separator than there are zeros to the left of the decimal separator in the format expression, displays the extra digits without modification.|  \n|(`#`)|Digit placeholder. Displays a digit or nothing. If the expression has a digit in the position where the `#` character appears in the format string, displays it; otherwise, displays nothing in that position.<br /><br /> This symbol works like the `0` digit placeholder, except that leading and trailing zeros aren't displayed if the number has fewer digits than there are `#` characters on either side of the decimal separator in the format expression.|  \n|(`.`)|Decimal placeholder. The decimal placeholder determines how many digits are displayed to the left and right of the decimal separator. If the format expression contains only `#` characters to the left of this symbol; numbers smaller than 1 begin with a decimal separator. To display a leading zero displayed with fractional numbers, use zero as the first digit placeholder to the left of the decimal separator. In some locales, a comma is used as the decimal separator. The actual character used as a decimal placeholder in the formatted output depends on the number format recognized by your system. Thus, you should use the period as the decimal placeholder in your formats even if you are in a locale that uses a comma as a decimal placeholder. The formatted string will appear in the format correct for the locale.|  \n|(`%`)|Percent placeholder. Multiplies the expression by 100. The percent character (`%`) is inserted in the position where it appears in the format string.|  \n|(`,`)|Thousand separator. The thousand separator separates thousands from hundreds within a number that has four or more places to the left of the decimal separator. Standard use of the thousand separator is specified if the format contains a thousand separator surrounded by digit placeholders (`0` or `#`).<br /><br /> A thousand separator immediately to the left of the decimal separator (whether or not a decimal is specified) or as the rightmost character in the string means \"scale the number by dividing it by 1,000, rounding as needed.\" Numbers smaller than 1,000 but greater or equal to 500 are displayed as `1`, and numbers smaller than 500 are displayed as `0`. Two adjacent thousand separators in this position scale by a factor of 1 million, and an additional factor of 1,000 for each additional separator.<br /><br /> Multiple separators in any position other than immediately to the left of the decimal separator or the rightmost position in the string are treated simply as specifying the use of a thousand separator. In some locales, a period is used as a thousand separator. The actual character used as the thousand separator in the formatted output depends on the Number Format recognized by your system. Thus, you should use the comma as the thousand separator in your formats even if you are in a locale that uses a period as a thousand separator. The formatted string will appear in the format correct for the locale.<br /><br /> For example, consider the three following format strings:<br /><br /> -   `\"#,0.\"`, which uses the thousands separator to format the number 100 million as the string \"100,000,000\".<br />-   `\"#0,.\"`, which uses scaling by a factor of one thousand to format the number 100 million as the string \"100000\".<br />-   `\"#,0,.\"`, which uses the thousands separator and scaling by one thousand to format the number 100 million as the string \"100,000\".|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character used as the time separator in formatted output is determined by your system settings.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character used as the date separator in formatted output is determined by your system settings.|  \n|(`E-``E+``e-``e+`)|Scientific format. If the format expression contains at least one digit placeholder (`0` or `#`) to the left of `E-`, `E+`, `e-`, or `e+`, the number is displayed in scientific format and `E` or `e` is inserted between the number and its exponent. The number of digit placeholders to the left determines the number of digits in the exponent. Use `E-` or `e-` to place a minus sign next to negative exponents. Use `E+` or `e+` to place a minus sign next to negative exponents and a plus sign next to positive exponents. You must also include digit placeholders to the right of this symbol to get correct formatting.|  \n|`-` `+` `$` ( )|Literal characters. These characters are displayed exactly as typed in the format string. To display a character other than one of those listed, precede it with a backslash (`\\`) or enclose it in double quotation marks (\" \").|  \n|(`\\`)|Displays the next character in the format string. To display a character that has special meaning as a literal character, precede it with a backslash (`\\`). The backslash itself isn't displayed. Using a backslash is the same as enclosing the next character in double quotation marks. To display a backslash, use two backslashes (`\\\\`).<br /><br /> Examples of characters that can't be displayed as literal characters are the date-formatting and time-formatting characters (`a`, `c`, `d`, `h`, `m`, `n`, `p`, `q`, `s`, `t`, `w`, `y`, `/`, and `:`), the numeric-formatting characters (`#`, `0`, `%`, `E`, `e`, comma, and period), and the string-formatting characters (`@`, `&`, `<`, `>`, and `!`).|  \n|(`\"``ABC``\"`)|Displays the string inside the double quotation marks (\" \"). To include a string in the style argument from within code, you must use `Chr(34)` to enclose the text (`34` is the character code for a quotation mark (\")).|  \n  \n### Legacy Code Example  \n The following table contains some sample format expressions for numbers. (These examples all assume that your system's locale setting is English-U.S.) The first column contains the format strings for the `Style` argument of the `Format` function; the other columns contain the resulting output if the formatted data has the value given in the column headings.  \n  \n|||||  \n|-|-|-|-|  \n|Format (`Style`)|\"5\" formatted as|\"-5\" formatted as|\"0.5\" formatted as|  \n|`Zero-length string (\"\")`|`5`|`-5`|`0.5`|  \n|`0`|`5`|`-5`|`1`|  \n|`0.00`|`5.00`|`-5.00`|`0.50`|  \n|`#,##0`|`5`|`-5`|`1`|  \n|`$#,##0;($#,##0)`|`$5`|`($5)`|`$1`|  \n|`$#,##0.00;($#,##0.00)`|`$5.00`|`($5.00)`|`$0.50`|  \n|`0%`|`500%`|`-500%`|`50%`|  \n|`0.00%`|`500.00%`|`-500.00%`|`50.00%`|  \n|`0.00E+00`|`5.00E+00`|`-5.00E+00`|`5.00E-01`|  \n|`0.00E-00`|`5.00E00`|`-5.00E00`|`5.00E-01`|  \n  \n## Predefined Date/Time Formats  \n The following table identifies the predefined date and time format names. These may be used by name as the style argument for the `Format` function:  \n  \n|||  \n|-|-|  \n|Format Name|Description|  \n|`General Date`, or `G`|Displays a date and/or time. For example, `3/12/2008 11:07:31 AM`. Date display is determined by your application's current culture value.|  \n|`Long Date`, `Medium Date`, or `D`|Displays a date according to your current culture's long date format. For example, `Wednesday, March 12, 2008`.|  \n|`Short Date`, or `d`|Displays a date using your current culture's short date format. For example, `3/12/2008`.<br /><br /> The `d` character displays the day in a user-defined date format.|  \n|`Long Time`, `Medium Time`, or `T`|Displays a time using your current culture's long time format; typically includes hours, minutes, seconds. For example, `11:07:31 AM`.|  \n|`Short Time` or `t`|Displays a time using your current culture's short time format. For example, `11:07 AM`.<br /><br /> The `t` character displays `AM` or `PM` values for locales that use a 12-hour clock in a user-defined time format.|  \n|`f`|Displays the long date and short time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07 AM`.|  \n|`F`|Displays the long date and long time according to your current culture's format. For example, `Wednesday, March 12, 2008 11:07:31 AM`.|  \n|`g`|Displays the short date and short time according to your current culture's format. For example, `3/12/2008 11:07 AM`.|  \n|`M`, `m`|Displays the month and the day of a date. For example, `March 12`.<br /><br /> The `M` character displays the month in a user-defined date format. The `m` character displays the minutes in a user-defined time format.|  \n|`R`, `r`|Formats the date according to the <xref:System.Globalization.DateTimeFormatInfo.RFC1123Pattern%2A> property. For example, `Wed, 12 Mar 2008 11:07:31 GMT`. The formatted date does not adjust the value of the date and time. You must adjust the Date/Time value to GMT before calling the `Format` function.|  \n|`s`|Formats the date and time as a sortable index. For example, `2008-03-12T11:07:31`.<br /><br /> The `s` character displays the seconds in a user-defined time format.|  \n|`u`|Formats the date and time as a GMT sortable index. For example, `2008-03-12 11:07:31Z`.|  \n|`U`|Formats the date and time with the long date and long time as GMT. For example, `Wednesday, March 12, 2008 6:07:31 PM`.|  \n|`Y`, `y`|Formats the date as the year and month. For example, `March, 2008`.<br /><br /> The `Y` and `y` characters display the year in a user-defined date format.|  \n  \n For more information about the application's current culture information, see [How Culture Affects Strings in Visual Basic](~/add/includes/ajax-current-ext-md.md).  \n  \n## User-Defined Date/Time Formats  \n The following table shows characters you can use to create user-defined date/time formats. Unlike in earlier versions of [!INCLUDE[vbprvb](~/add/includes/vbprvb-md.md)], these format characters are case-sensitive.  \n  \n|||  \n|-|-|  \n|Character|Description|  \n|(`:`)|Time separator. In some locales, other characters may be used to represent the time separator. The time separator separates hours, minutes, and seconds when time values are formatted. The actual character that is used as the time separator in formatted output is determined by your application's current culture value.|  \n|(`/`)|Date separator. In some locales, other characters may be used to represent the date separator. The date separator separates the day, month, and year when date values are formatted. The actual character that is used as the date separator in formatted output is determined by your application's current culture.|  \n|(`%`)|Used to indicate that the following character should be read as a single-letter format without regard to any trailing letters. Also used to indicate that a single-letter format is read as a user-defined format. See what follows for additional details.|  \n|`d`|Displays the day as a number without a leading zero (for example, `1`). Use `%d` if this is the only character in your user-defined numeric format.|  \n|`dd`|Displays the day as a number with a leading zero (for example, `01`).|  \n|`ddd`|Displays the day as an abbreviation (for example, `Sun`).|  \n|`dddd`|Displays the day as a full name (for example, `Sunday`).|  \n|`M`|Displays the month as a number without a leading zero (for example, January is represented as `1`). Use `%M` if this is the only character in your user-defined numeric format.|  \n|`MM`|Displays the month as a number with a leading zero (for example, `01/12/01`).|  \n|`MMM`|Displays the month as an abbreviation (for example, `Jan`).|  \n|`MMMM`|Displays the month as a full month name (for example, `January`).|  \n|`gg`|Displays the period/era string (for example, `A.D.`).|  \n|`h`|Displays the hour as a number without leading zeros using the 12-hour clock (for example, `1:15:15 PM`). Use `%h` if this is the only character in your user-defined numeric format.|  \n|`hh`|Displays the hour as a number with leading zeros using the 12-hour clock (for example, `01:15:15 PM`).|  \n|`H`|Displays the hour as a number without leading zeros using the 24-hour clock (for example, `1:15:15`). Use `%H` if this is the only character in your user-defined numeric format.|  \n|`HH`|Displays the hour as a number with leading zeros using the 24-hour clock (for example, `01:15:15`).|  \n|`m`|Displays the minute as a number without leading zeros (for example, `12:1:15`). Use `%m` if this is the only character in your user-defined numeric format.|  \n|`mm`|Displays the minute as a number with leading zeros (for example, `12:01:15`).|  \n|`s`|Displays the second as a number without leading zeros (for example, `12:15:5`). Use `%s` if this is the only character in your user-defined numeric format.|  \n|`ss`|Displays the second as a number with leading zeros (for example, `12:15:05`).|  \n|`f`|Displays fractions of seconds. For example `ff` displays hundredths of seconds, whereas `ffff` displays ten-thousandths of seconds. You may use up to seven `f` symbols in your user-defined format. Use `%f` if this is the only character in your user-defined numeric format.|  \n|`t`|Uses the 12-hour clock and displays an uppercase `A` for any hour before noon; displays an uppercase `P` for any hour between noon and 11:59 P.M. Use `%t` if this is the only character in your user-defined numeric format.|  \n|`tt`|For locales that use a 12-hour clock, displays an uppercase `AM` with any hour before noon; displays an uppercase `PM` with any hour between noon and 11:59 P.M.<br /><br /> For locales that use a 24-hour clock, displays nothing.|  \n|`y`|Displays the year number (0-9) without leading zeros. Use `%y` if this is the only character in your user-defined numeric format.|  \n|`yy`|Displays the year in two-digit numeric format with a leading zero, if applicable.|  \n|`yyy`|Displays the year in four-digit numeric format.|  \n|`yyyy`|Displays the year in four-digit numeric format.|  \n|`z`|Displays the timezone offset without a leading zero (for example, `-8`). Use `%z` if this is the only character in your user-defined numeric format.|  \n|`zz`|Displays the timezone offset with a leading zero (for example, `-08`)|  \n|`zzz`|Displays the full timezone offset (for example, `-08:00`)|  \n  \n### Legacy Code Example  \n The following are examples of user-defined date and time formats for `December 7, 1958, 8:50 PM, 35 seconds`:  \n  \n|||  \n|-|-|  \n|Format|Displays|  \n|`M/d/yy`|`12/7/58`|  \n|`d-MMM`|`7-Dec`|  \n|`d-MMMM-yy`|`7-December-58`|  \n|`d MMMM`|`7 December`|  \n|`MMMM yy`|`December 58`|  \n|`hh:mm tt`|`08:50 PM`|  \n|`h:mm:ss t`|`8:50:35 P`|  \n|`H:mm`|`20:50`|  \n|`H:mm:ss`|`20:50:35`|  \n|`M/d/yyyy H:mm`|`12/7/1958 20:50`|  \n  \n### Smart Device Developer Notes  \n The minimum time resolution for a device is determined by the manufacturer of the device. If the time resolution for the device is coarse enough, the `f` format character returns 0 when run on that device."
  example:
  - "This example shows various uses of the `Format` function to format values using both `String` formats and user-defined formats. For the date separator (`/`), time separator (`:`), and the AM/PM indicators (`t` and `tt`), the actual formatted output displayed by your system depends on the locale settings the code is using. When times and dates are displayed in the development environment, the short time format and short date format of the code locale are used.  \n  \n> [!NOTE]\n>  For locales that use a 24-hour clock, the AM/PM indicators (`t` and `tt`) display nothing.  \n  \n [!code-vb[VbVbalrStrings#27](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._134_3.vb)]"
  syntax:
    content: public static string Format (object Expression, string Style = "");
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 任何有效表达式。"
    - id: Style
      type: System.String
      description: "可选。 有效的已命名的或用户定义格式<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.String
      description: "返回根据格式中包含的说明设置格式的字符串<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
  overload: Microsoft.VisualBasic.Strings.Format*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回格式设置为使用系统控制面板中定义的货币符号的货币值的表达式。"
  remarks: "当省略一个或多个可选参数时，将改为使用计算机的匹配区域设置值。       相对于货币值的货币符号的位置取决于系统的区域设置。      1> [!NOTE]&1;> 来自应用程序的区域设置的所有设置信息。 默认情况下，将在控制面板中设置的区域设置。 但是，可能通过来更改它以编程方式使用.NET Framework 中，除前导零，来自`Number`选项卡。       `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数采用以下三态枚举值。      |||  |-|-|  |值 |说明 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.UseDefault`|计算机的区域设置 |"
  example:
  - "The following example illustrates the use of the `FormatCurrency` function.  \n  \n [!code-vb[VbVbalrStrings#32](~/add/codesnippet/visualbasic/c6b3af93-c0fc-4dd7-8b87-_1.vb)]"
  syntax:
    content: public static string FormatCurrency (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 要设置格式的表达式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "可选。 指示小数点右侧显示的多少位的数字值。 默认值为-1，指示将使用计算机的区域设置。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>枚举，指示显示小数值的前导零。 值，请参阅&quot;备注&quot;。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>枚举，指示将放在括号内的负值。 值，请参阅&quot;备注&quot;。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>枚举，指示使用计算机的区域设置中指定的组分隔符对数字进行分组。 值，请参阅&quot;备注&quot;。"
    return:
      type: System.String
      description: "返回格式设置为使用系统控制面板中定义的货币符号的货币值的表达式。"
  overload: Microsoft.VisualBasic.Strings.FormatCurrency*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "小数点后的数字个数将大于 99。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "类型不是数值。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  id: FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回表示日期/时间值的字符串表达式。"
  remarks: "`Date`数据类型始终包含日期和时间信息。 为进行类型转换，Visual Basic 将 1/1/1 (1 月 1 年 1) 作为非特定值作为时间的日期和 00:00:00 （午夜） 的非特定值。 如果你设置的格式`Date`为日期/时间字符串，值`FormatDateTime`不结果字符串中包括非特定值。 例如，如果转换 #1/1/&#0001; 为一个字符串，结果是&quot;9:30:00 AM&quot;; 的 9:30:00取消显示的日期信息。 但是，日期信息是仍然存在于原始`Date`值，并可以使用函数如恢复`DatePart`。      1> [!NOTE]&1;> 如果传递`Expression`自变量作为`String`文本，`FormatDateTime`将根据其解释<xref:System.Globalization.CultureInfo.CurrentCulture%2A>设置你的应用程序。</xref:System.Globalization.CultureInfo.CurrentCulture%2A> 但是，如果将其作为传递`Date`文本，使用格式 #mm/dd/yyyy # 中，因为`FormatDateTime`总是将解释`Date`文本根据英语 （美国） 区域性。 这是必需的因为如果应用程序进行开发和编码使用`Date`从一个文本的区域性，但具有不同区域性的平台上然后执行`Date`无法正确地分析文本。       `NamedFormat`自变量具有以下设置。      |||  |-|-|  |常量 |说明 |  |`DateFormat.GeneralDate`|显示日期和/或时间。 显示为短日期的日期部分。 如果没有时间部分，则将它显示为长时间。 如果存在，这两个部分都显示。 |  |`DateFormat.LongDate`|使用你的计算机的区域设置中指定的长日期格式显示日期。 |  |`DateFormat.ShortDate`|使用你的计算机的区域设置中指定的短日期格式显示日期。 |  |`DateFormat.LongTime`|使用你的计算机的区域设置中指定的时间格式来显示时间。 |  |`DateFormat.ShortTime`|显示时间使用 24 小时格式 (hh: mm)。 |"
  example:
  - "This example demonstrates the use of the `FormatDateTime` function.  \n  \n [!code-vb[VbVbalrStrings#3](~/add/codesnippet/visualbasic/12ae27ca-4a0f-4ea2-855e-_1.vb)]"
  syntax:
    content: public static string FormatDateTime (DateTime Expression, Microsoft.VisualBasic.DateFormat NamedFormat = Microsoft.VisualBasic.DateFormat.GeneralDate);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要设置格式的表达式。"
    - id: NamedFormat
      type: Microsoft.VisualBasic.DateFormat
      description: "可选。 使用数字值，该值指示日期/时间格式。 如果省略， <xref uid=&quot;langword_csharp_DateFormat.GeneralDate&quot; name=&quot;DateFormat.GeneralDate&quot; href=&quot;&quot;> </xref>使用。"
    return:
      type: System.String
      description: "返回表示日期/时间值的字符串表达式。"
  overload: Microsoft.VisualBasic.Strings.FormatDateTime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>NamedFormat</code>设置无效。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回数字形式的格式设置的表达式。"
  remarks: "当省略一个或多个可选参数时省略自变量的值是由区域设置中提供。      1> [!NOTE]&1;> 来自应用程序的区域设置的所有设置信息。 默认情况下，将在控制面板中设置的区域设置。 但是，可能通过来更改它以编程方式使用.NET Framework。       `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数具有以下设置。      |||  |-|-|  |常量 |说明 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.UseDefault`|计算机的区域设置 |"
  example:
  - "This example demonstrates the `FormatNumber` function.  \n  \n [!code-vb[VbVbalrStrings#15](~/add/codesnippet/visualbasic/4c7d3c11-69f8-405b-a033-_1.vb)]"
  syntax:
    content: public static string FormatNumber (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 要设置格式的表达式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "可选。 指示小数点右侧显示的多少位的数字值。 默认值为-1，指示将使用计算机的区域设置。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>指示是否显示小数值的前导 0 的常量。 值，请参阅&quot;设置&quot;。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>常量，指示是否要将放在括号内的负值。 值，请参阅&quot;设置&quot;。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>常量，指示使用的区域设置中指定的组分隔符对数字进行分组。 值，请参阅&quot;设置&quot;。"
    return:
      type: System.String
      description: "返回数字形式的格式设置的表达式。"
  overload: Microsoft.VisualBasic.Strings.FormatNumber*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "类型不是数值。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  id: FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回格式化为带有尾随 %字符的百分比 （即乘以 100） 的表达式。"
  remarks: "当省略一个或多个可选参数时，是由区域设置提供省略的自变量的值。      1> [!NOTE]&1;> 来自应用程序的区域设置的所有设置信息。 默认情况下，将在控制面板中设置的区域设置。 但是，可能通过来更改它以编程方式使用.NET Framework。       `IncludeLeadingDigit`， `UseParensForNegativeNumbers`，和`GroupDigits`参数具有以下设置。      |||  |-|-|  |常量 |说明 |  |`TriState.True`|True |  |`TriState.False`|False |  |`TriState.Default`|计算机的区域设置 |"
  example:
  - "This example illustrates the use of the `FormatPercent` function.  \n  \n [!code-vb[VbVbalrStrings#28](~/add/codesnippet/visualbasic/699b6dbf-5eeb-4a3e-a4b1-_1.vb)]"
  syntax:
    content: public static string FormatPercent (object Expression, int NumDigitsAfterDecimal = -1, Microsoft.VisualBasic.TriState IncludeLeadingDigit = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState UseParensForNegativeNumbers = Microsoft.VisualBasic.TriState.UseDefault, Microsoft.VisualBasic.TriState GroupDigits = Microsoft.VisualBasic.TriState.UseDefault);
    parameters:
    - id: Expression
      type: System.Object
      description: "必需。 要设置格式的表达式。"
    - id: NumDigitsAfterDecimal
      type: System.Int32
      description: "可选。 显示数字值，该值指示小数点右侧的多少位。 默认值为 –&1;，表示使用的区域设置。"
    - id: IncludeLeadingDigit
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>指示对于小数值显示前导零的常数。 值，请参阅&quot;设置&quot;。"
    - id: UseParensForNegativeNumbers
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>常量，指示将放在括号内的负值。 值，请参阅&quot;设置&quot;。"
    - id: GroupDigits
      type: Microsoft.VisualBasic.TriState
      description: "可选。 <xref href=&quot;Microsoft.VisualBasic.TriState&quot;></xref>常量，指示使用的区域设置中指定的组分隔符对数字进行分组。 值，请参阅&quot;设置&quot;。"
    return:
      type: System.String
      description: "返回格式化为带有尾随 %字符的百分比 （即乘以 100） 的表达式。"
  overload: Microsoft.VisualBasic.Strings.FormatPercent*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "类型不是数值。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  id: GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>表示所提供的字符串中的指定索引处的字符的值。"
  remarks: "如果`Index`小于 1 或大于中的最后一个字符的索引`str`、`ArgumentException`引发。"
  example:
  - "This example shows how to use the `GetChar` function to return a character from a specified index in a `String`.  \n  \n [!code-vb[VbVbalrStrings#23](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._0_1.vb)]"
  syntax:
    content: public static char GetChar (string str, int Index);
    parameters:
    - id: str
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
    - id: Index
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 中的字符的 （基于&1; 的） 索引`str`要返回。"
    return:
      type: System.Char
      description: "<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>表示所提供的字符串中的指定索引处的字符的值。"
  overload: Microsoft.VisualBasic.Strings.GetChar*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>str</code>是<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>， <code>Index</code> &lt; 1，或<code>Index</code>大于最后一个字符的索引<code>str</code>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，指定在另一个字符串的第一个匹配项的开始位置。"
  remarks: "通常情况下，`InStr`分析字符串时使用函数。      1> [!NOTE]&1;>`InStrB`在以前版本的 Visual Basic 函数返回的字节，而不是字符位置数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 2005 字符串都都以 unicode 格式，和`InStrB`不再受支持。       `Compare`自变量设置不: | | |  |-|-|-|  |常量 |值 |说明 |  |`Binary`|0|执行二进制比较 |  |`Text`|1|执行文本比较 |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/f1b47808-d5f4-408b-b1fc-_1.vb)]"
  syntax:
    content: public static int InStr (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要搜索的表达式。"
    - id: String2
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>具有所查找表达式。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "可选。 指定的字符串比较的类型。 如果`Compare`省略， <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref>设置确定的比较类型。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> 如果       </td><td> InStr 返回       </td></tr><tr><td>           <code>String1</code>长度为零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>长度为零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 搜索，默认为第一个字符位置的起始位置。       </td></tr><tr><td>           <code>String2</code>找不到       </td><td> 0       </td></tr><tr><td>           <code>String2</code>在中找到<code>String1</code></td><td> 匹配的开始位置的位置       </td></tr><tr><td></td><td></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，指定在另一个字符串的第一个匹配项的开始位置。"
  remarks: "通常情况下，`InStr`分析字符串时使用函数。      1> [!NOTE]&1;>`InStrB`在以前版本的 Visual Basic 函数返回的字节，而不是字符位置数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 2005 字符串都都以 unicode 格式，和`InStrB`不再受支持。       `Compare`自变量设置不: | | |  |-|-|-|  |常量 |值 |说明 |  |`Binary`|0|执行二进制比较 |  |`Text`|1|执行文本比较 |"
  example:
  - "This example uses the `InStr` function to return the position of the first occurrence of one string within another.  \n  \n [!code-vb[VbVbalrStrings#8](~/add/codesnippet/visualbasic/087e182b-78be-4d9a-be91-_1.vb)]"
  syntax:
    content: public static int InStr (int Start, string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Start
      type: System.Int32
      description: "可选。 设置每个搜索的起始位置的数值表达式。 如果省略，则第一个字符位置开始搜索。 起始索引是从 1 开始。"
    - id: String1
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要搜索的表达式。"
    - id: String2
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>具有所查找表达式。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "可选。 指定的字符串比较的类型。 如果`Compare`省略， <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref>设置确定的比较类型。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> 如果       </td><td> InStr 返回       </td></tr><tr><td>           <code>String1</code>长度为零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 0       </td></tr><tr><td>           <code>String2</code>长度为零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td>           <code>start</code>         </td></tr><tr><td>           <code>String2</code>找不到       </td><td> 0       </td></tr><tr><td>           <code>String2</code>在中找到<code>String1</code></td><td> 匹配的开始位置的位置       </td></tr><tr><td>           <code>Start</code>&gt;的长度<code>String1</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStr*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code> &lt; 1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个字符串在另一个，从字符串右侧开始的第一个匹配项的位置。"
  remarks: "请注意的语法`InStrRev`函数不是相同的语法`InStr`函数。       `Compare`自变量可以具有下列值。      |||  |-|-|  |常量 |说明 |  |`Binary`|执行二进制比较。 |  |`Text`|执行文本比较。 |"
  example:
  - "This example demonstrates the use of the `InStrRev` function.  \n  \n [!code-vb[VbVbalrStrings#26](~/add/codesnippet/visualbasic/ee8ba742-f981-4eca-b754-_1.vb)]"
  syntax:
    content: public static int InStrRev (string StringCheck, string StringMatch, int Start = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: StringCheck
      type: System.String
      description: "必需。 要搜索的字符串表达式。"
    - id: StringMatch
      type: System.String
      description: "必需。 要搜索的字符串表达式。"
    - id: Start
      type: System.Int32
      description: "可选。 设置为每个搜索，从左侧的字符串开始的&1; 开始的起始位置的数值表达式。 如果`Start`省略则使用为-1，这意味着最后一个字符位置开始执行搜索。 然后在搜索中继续从右到左。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "可选。 数字值，该值指示要在计算子字符串时使用的比较类型。 如果省略，则执行二进制比较。 值，请参阅设置。"
    return:
      type: System.Int32
      description: "<table><tbody><tr><td> 如果       </td><td> InStrRev 返回       </td></tr><tr><td>           <code>StringCheck</code>为零长度       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>为零长度       </td><td>           <code>Start</code>         </td></tr><tr><td>           <code>StringMatch</code>找不到       </td><td> 0       </td></tr><tr><td>           <code>StringMatch</code>在中找到<code>StringCheck</code></td><td> 从字符串右侧找到第一个匹配项的位置。       </td></tr><tr><td>           <code>Start</code>大于的长度<code>StringMatch</code></td><td> 0       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.InStrRev*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>= 0 or <code>Start</code> &lt; -1."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  id: Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回通过联接的多个子数组中包含创建的字符串。"
  remarks: "没有之间的奇偶校验`Join`和`Split`函数。 `Join`函数接受一个字符串数组，并将它们联接起来使用分隔符字符串，以返回单个字符串。 `Split`函数接受一个字符串，并将它隔离在分隔符，返回的字符串数组。 但是，主要区别在于`Join`可以串联在一起使用任何分隔符字符串，字符串`Split`可以仅使用分隔字符串的单个字符分隔符。"
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._160_1.vb)]"
  syntax:
    content: public static string Join (object[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.Object[]
      description: "必需。 一维数组，包含要联接的子字符串。"
    - id: Delimiter
      type: System.String
      description: "可选。 任意字符串，用于分隔返回的字符串中子字符串。 如果省略，空格字符 (&quot;&quot;) 使用。 如果`Delimiter`是零长度字符串 (&quot;&quot;) 或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>，列表中的所有项都不使用分隔符都连接。"
    return:
      type: System.String
      description: "返回通过联接的多个子数组中包含创建的字符串。"
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>不是一个维度。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  id: Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回通过联接的多个子数组中包含创建的字符串。"
  remarks: "没有之间的奇偶校验`Join`和`Split`函数。 `Join`函数接受一个字符串数组，并将它们联接起来使用分隔符字符串，以返回单个字符串。 `Split`函数接受一个字符串，并将它隔离在分隔符，返回的字符串数组。 但是，主要区别在于`Join`可以串联在一起使用任何分隔符字符串，字符串`Split`可以仅使用分隔字符串的单个字符分隔符。"
  example:
  - "The following example demonstrates how to use the `Join` function to create a list from several strings.  \n  \n [!code-vb[VbVbalrStrings#10](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._124_1.vb)]"
  syntax:
    content: public static string Join (string[] SourceArray, string Delimiter = " ");
    parameters:
    - id: SourceArray
      type: System.String[]
      description: "必需。 一维数组，包含要联接的子字符串。"
    - id: Delimiter
      type: System.String
      description: "可选。 任意字符串，用于分隔返回的字符串中子字符串。 如果省略，空格字符 (&quot;&quot;) 使用。 如果`Delimiter`是零长度字符串 (&quot;&quot;) 或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>，列表中的所有项都不使用分隔符都连接。"
    return:
      type: System.String
      description: "返回通过联接的多个子数组中包含创建的字符串。"
  overload: Microsoft.VisualBasic.Strings.Join*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>SourceArray</code>不是一个维度。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  id: LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回的字符串或字符转换为小写形式。"
  remarks: "只有大写的字母都转换为小写;所有小写字母和 nonletter 字符都保持不变。       操作字符串，以便区分大小的更改适用于在其中使用的应用程序的区域设置时，此函数将使用应用程序的区域性信息。      1> [!IMPORTANT]&1;> 如果你的应用程序进行安全决策基于比较或大小写更改操作的结果，则该操作，应使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，并传入<xref:System.StringComparison>或<xref:System.StringComparison>为`comparisonType`自变量。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 有关详细信息，请参阅[如何区域性影响字符串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._236_1.vb)]"
  syntax:
    content: public static char LCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.Char
      description: "返回的字符串或字符转换为小写形式。"
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  id: LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回的字符串或字符转换为小写形式。"
  remarks: "只有大写的字母都转换为小写;所有小写字母和 nonletter 字符都保持不变。       操作字符串，以便区分大小的更改适用于在其中使用的应用程序的区域设置时，此函数将使用应用程序的区域性信息。      1> [!IMPORTANT]&1;> 如果你的应用程序进行安全决策基于比较或大小写更改操作的结果，则该操作，应使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，并传入<xref:System.StringComparison>或<xref:System.StringComparison>为`comparisonType`自变量。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 有关详细信息，请参阅[如何区域性影响字符串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example uses the `LCase` function to return a lowercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#12](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._214_1.vb)]"
  syntax:
    content: public static string LCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.String
      description: "返回的字符串或字符转换为小写形式。"
  overload: Microsoft.VisualBasic.Strings.LCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  id: Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含指定的数目的字符串的左侧的字符的字符串。"
  remarks: "若要确定中的字符数`str`，使用`Len`函数。 如果在 Windows 窗体应用程序或具有的任何其他类中使用`Left`属性，必须完全限定具有函数`Microsoft.VisualBasic.Left`。      1> [!NOTE]&1;>`LeftB`在以前版本的 Visual Basic 函数返回字节，而不是字符的字符串。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LeftB`不再受支持。"
  example:
  - "This example demonstrates the use of the `Left` function to return a substring of a given `String`. In a class that has a `Left` property, it may be necessary to fully qualify the `Left` function.  \n  \n [!code-vb[VbVbalrStrings#20](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._139_1.vb)]"
  syntax:
    content: public static string Left (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>从中返回的最左侧字符的表达式。"
    - id: Length
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 指示要返回多少个字符的数值表达式。 如果为 0，零长度字符串 (&quot;&quot;) 返回。 如果大于或等于的中的字符数`str`，则返回整个字符串。"
    return:
      type: System.String
      description: "返回包含指定的数目的字符串的左侧的字符的字符串。"
  overload: Microsoft.VisualBasic.Strings.Left*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  id: Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._155_1.vb)]"
  syntax:
    content: public static int Len (bool Expression);
    parameters:
    - id: Expression
      type: System.Boolean
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  id: Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._157_1.vb)]"
  syntax:
    content: public static int Len (byte Expression);
    parameters:
    - id: Expression
      type: System.Byte
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  id: Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._159_1.vb)]"
  syntax:
    content: public static int Len (char Expression);
    parameters:
    - id: Expression
      type: System.Char
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  id: Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._5_1.vb)]"
  syntax:
    content: public static int Len (DateTime Expression);
    parameters:
    - id: Expression
      type: System.DateTime
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  id: Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._30_1.vb)]"
  syntax:
    content: public static int Len (decimal Expression);
    parameters:
    - id: Expression
      type: System.Decimal
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  id: Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._173_1.vb)]"
  syntax:
    content: public static int Len (double Expression);
    parameters:
    - id: Expression
      type: System.Double
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  id: Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._198_1.vb)]"
  syntax:
    content: public static int Len (short Expression);
    parameters:
    - id: Expression
      type: System.Int16
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  id: Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._99_1.vb)]"
  syntax:
    content: public static int Len (int Expression);
    parameters:
    - id: Expression
      type: System.Int32
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  id: Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._162_1.vb)]"
  syntax:
    content: public static int Len (long Expression);
    parameters:
    - id: Expression
      type: System.Int64
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  id: Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._193_1.vb)]"
  syntax:
    content: public static int Len (object Expression);
    parameters:
    - id: Expression
      type: System.Object
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  id: Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._171_1.vb)]"
  syntax:
    content: public static int Len (sbyte Expression);
    parameters:
    - id: Expression
      type: System.SByte
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  id: Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._21_1.vb)]"
  syntax:
    content: public static int Len (float Expression);
    parameters:
    - id: Expression
      type: System.Single
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  id: Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._72_1.vb)]"
  syntax:
    content: public static int Len (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  id: Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._211_1.vb)]"
  syntax:
    content: public static int Len (ushort Expression);
    parameters:
    - id: Expression
      type: System.UInt16
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  id: Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._150_1.vb)]"
  syntax:
    content: public static int Len (uint Expression);
    parameters:
    - id: Expression
      type: System.UInt32
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  id: Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  remarks: "使用用户定义的类型和`Object`变量，`Len`函数返回时将写入的文件的大小`FilePut`函数。 如果`Object`包含`String`，它将返回字符串的长度。 如果`Object`包含任何其他类型，它会返回对象的大小，因为它将写入到的文件`FilePut`函数。       `VBFixedString`特性可以应用于对象，以写入时指示的大小的字符串，以字节为单位中的 string 字段到磁盘。 `Len`函数使用`VBFixedString`属性，如果可用，在确定大`Object`变量。      1> [!NOTE]&1;>`Len`函数可能不能确定实际所需的用户定义数据类型中的可变长度字符串使用的存储字节数。      1> [!NOTE]&1;>`LenB`在早期版本的 Visual Basic 的函数返回一个字符串，而不是字符的字节数。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`LenB`不再受支持。      ## 智能设备的开发人员说明`Len`函数仅接受`String`和`Object`作为参数的变量。 如果`Object`包含`String`，它将返回的长度`String`。 如果参数为 NULL`Object`引用，该函数将返回零。 如果`Object`包含任何其他类型，将引发异常。"
  example:
  - "This example uses `Len` to return the number of characters in a string.  \n  \n [!code-vb[VbVbalrStrings#33](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._37_1.vb)]"
  syntax:
    content: public static int Len (ulong Expression);
    parameters:
    - id: Expression
      type: System.UInt64
      description: "任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式或变量的名称。 如果`Expression`属于类型<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_Len&quot; name=&quot;Len&quot; href=&quot;&quot;> </xref>函数返回时将写入的文件的大小<xref uid=&quot;langword_csharp_FilePut&quot; name=&quot;FilePut&quot; href=&quot;&quot;></xref>函数。"
    return:
      type: System.Int32
      description: "返回一个整数，该整数包含字符串中的字符数或的名义存储变量所需的字节数。"
  overload: Microsoft.VisualBasic.Strings.Len*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  id: LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含调整为指定长度的指定的字符串的左对齐字符串。"
  remarks: "如果指定的字符串的长度超过指定的长度，则返回的字符串将缩短为指定长度。 如果指定的字符串是短于指定的长度，则将空间添加到返回的字符串，以生成相应的长度的右端。"
  example:
  - "This example demonstrates the use of the `LSet` function.  \n  \n [!code-vb[VbVbalrStrings#11](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._168_1.vb)]"
  syntax:
    content: public static string LSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。 字符串变量的名称。"
    - id: Length
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 返回字符串的长度。"
    return:
      type: System.String
      description: "返回包含调整为指定长度的指定的字符串的左对齐字符串。"
  overload: Microsoft.VisualBasic.Strings.LSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  id: LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含没有前导空格的指定字符串的副本的字符串 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)，则没有尾随空格 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或没有前导空格或尾随空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._110_1.vb)]"
  syntax:
    content: public static string LTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.String
      description: "返回包含没有前导空格的指定字符串的副本的字符串 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)，则没有尾随空格 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或没有前导空格或尾随空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.LTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  id: Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含从字符串中指定位置开始的所有字符的字符串。"
  remarks: "若要确定中的字符数`str`，使用`Len`函数。       Visual Basic 具有`Mid`函数和`Mid`语句。 这些元素都指定数量的字符在字符串中，操作但`Mid`函数将返回字符，而`Mid`语句替换字符。 有关详细信息，请参阅[Mid 语句](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;>`MidB`在以前版本的 Visual Basic 函数返回字节，而不是字符的字符串。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 字符串都都以 unicode 格式，和`MidB`不再受支持。"
  example:
  - "The last line in this example uses this overload of the `Mid` function to return the fifth and subsequent characters from a string.  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._67_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start);
    parameters:
    - id: str
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>从中返回字符表达式。"
    - id: Start
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 要返回的字符的起始位置。 如果`Start`大于中的字符数`str`、 <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref>函数返回一个零长度字符串 (&quot;&quot;)。 `Start`是一个基于。"
    return:
      type: System.String
      description: "从字符串中的指定位置开始的所有字符都组成的字符串。"
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  id: Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含指定的数目的从字符串中指定位置开始的字符的字符串。"
  remarks: "若要确定中的字符数`str`，使用`Len`函数。       Visual Basic 具有`Mid`函数和`Mid`语句。 这些元素都指定数量的字符在字符串中，操作但`Mid`函数将返回字符，而`Mid`语句替换字符。 有关详细信息，请参阅[Mid 语句](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;>`MidB`在以前版本的 Visual Basic 函数返回字节，而不是字符的字符串。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有 Visual Basic 字符串都都以 unicode 格式，和`MidB`不再受支持。"
  example:
  - "The first two `Mid` functions in this example return the specified number of characters from a string, starting from the given positions. (The last function illustrates the <xref:Microsoft.VisualBasic.Strings.Mid%28System.String%2CSystem.Int32%29> overload and only specifies the starting point for the string extraction.)  \n  \n [!code-vb[VbVbalrStrings#17](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._33_1.vb)]"
  syntax:
    content: public static string Mid (string str, int Start, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>从中返回字符表达式。"
    - id: Start
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 要返回的字符的起始位置。 如果`Start`大于中的字符数`str`、 <xref uid=&quot;langword_csharp_Mid&quot; name=&quot;Mid&quot; href=&quot;&quot;> </xref>函数返回一个零长度字符串 (&quot;&quot;)。 `Start`从&1; 开始。"
    - id: Length
      type: System.Int32
      description: "可选。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 要返回的字符数。 如果省略或少于`Length`文本中的字符 (包括位置处的字符`Start`)，则返回从起始位置到字符串的末尾的所有字符。"
    return:
      type: System.String
      description: "包含指定数量的字符从字符串中的指定位置开始的字符串。"
  overload: Microsoft.VisualBasic.Strings.Mid*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Start</code>&lt;= 0 or <code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个字符串，其中指定的子字符串已替换为另一个子字符串指定的次数。"
  remarks: "返回值`Replace`函数是一个字符串，则从指定位置开始`Start`，并在末尾结束`Expression`字符串，其中的替换所指定的`Find`和`Replace`值。       `Compare`自变量可以具有下列值。      |||  |-|-|  |常量 |说明 |  |`Binary`|执行二进制比较 |  |`Text`|执行文本比较 |"
  example:
  - "This example demonstrates the `Replace` function.  \n  \n```vb#  \nDim TestString As String = \"Shopping List\"  \n' Returns \"Shipping List\".  \nDim aString As String = Replace(TestString, \"o\", \"i\")  \n```"
  syntax:
    content: public static string Replace (string Expression, string Find, string Replacement, int Start = 1, int Count = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "必需。 包含子字符串替换字符串表达式。"
    - id: Find
      type: System.String
      description: "必需。 要搜索的子字符串。"
    - id: Replacement
      type: System.String
      description: "必需。 替换的子字符串。"
    - id: Start
      type: System.Int32
      description: "可选。 中的位置`Expression`启动用于替换的子字符串。 返回值<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>是一个字符串，开始`Start`，使用适当的替换。 如果省略，则假定为 1。"
    - id: Count
      type: System.Int32
      description: "可选。 要执行的子字符串替换操作的数。 如果省略，默认值为&1;，这意味着&quot;使所有可能的替换&quot;。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "可选。 数字值，该值指示要在计算子字符串时使用的比较类型。 值，请参阅设置。"
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Replace&quot; name=&quot;Replace&quot; href=&quot;&quot;></xref>返回以下值。       <table><tbody><tr><td> 如果       </td><td> Replace 返回       </td></tr><tr><td><code>Find</code>长度为零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td><td> 副本<code>Expression</code></td></tr><tr><td><code>Replace</code>为零长度       </td><td> 复制的<code> Expression </code>与未出现<code>Find</code></td></tr><tr><td><code>Expression</code>长度为零或<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>，或<code> Start </code>大于的长度<code>Expression</code></td><td><xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref></td></tr><tr><td><code>Count</code>为 0       </td><td> 副本<code>Expression</code></td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.Replace*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Count</code>&lt; -1 or <code>Start</code> &lt;= 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  id: Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含指定的数量的从右侧的字符串的字符的字符串。"
  remarks: "若要确定中的字符数`str`，使用`Len`函数。 如果在 Windows 窗体或具有的任何其他类中使用`Right`属性，必须完全限定具有函数`Microsoft.VisualBasic.Strings.Right`。      1> [!NOTE]&1;>`RightB`在早期版本的 Visual Basic 中的函数返回字节，而不是字符的字符串。 它主要用于在双字节字符集 (DBCS) 应用程序中转换字符串。 所有当前的 Visual Basic 字符串都以 unicode 格式，和`RightB`不再受支持。"
  example:
  - "This example demonstrates the use of the `Right` function to return a substring of a given `String`. In a class that has a `Right` property, it may be necessary to fully qualify the `Right` function.  \n  \n [!code-vb[VbVbalrStrings#21](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._221_1.vb)]"
  syntax:
    content: public static string Right (string str, int Length);
    parameters:
    - id: str
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>从中返回最右边的字符表达式。"
    - id: Length
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 指示要返回多少个字符的数值表达式。 如果为 0，零长度字符串 (&quot;&quot;) 返回。 如果大于或等于的中的字符数`str`，则返回整个字符串。"
    return:
      type: System.String
      description: "返回包含指定的数量的从右侧的字符串的字符的字符串。"
  overload: Microsoft.VisualBasic.Strings.Right*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Length</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  id: RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回右对齐的字符串包含调整为指定长度的指定的字符串。"
  remarks: "如果`Source`长于`Length`，`RSet`仅的最左侧字符，最长度为`Source`，在返回的字符串。 如果指定的字符串是短于指定的长度，空间添加到要产生相应的长度的字符串的左端。 如果指定的字符串的长度超过指定的长度，则将它缩短为指定长度。"
  example:
  - "This example demonstrates the use of the `RSet` function.  \n  \n [!code-vb[VbVbalrStrings#9](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._218_1.vb)]"
  syntax:
    content: public static string RSet (string Source, int Length);
    parameters:
    - id: Source
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。 字符串变量的名称。"
    - id: Length
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 返回字符串的长度。"
    return:
      type: System.String
      description: "返回右对齐的字符串包含调整为指定长度的指定的字符串。"
  overload: Microsoft.VisualBasic.Strings.RSet*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  id: RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含没有前导空格的指定字符串的副本的字符串 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)，则没有尾随空格 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或没有前导空格或尾随空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._143_1.vb)]"
  syntax:
    content: public static string RTrim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.String
      description: "返回包含没有前导空格的指定字符串的副本的字符串 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)，则没有尾随空格 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或没有前导空格或尾随空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.RTrim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  id: Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回一个包含指定数量的空格的字符串。"
  remarks: "`Space`函数可用于设置输出的格式和清除固定长度字符串中的数据。"
  example:
  - "This example uses the `Space` function to return a string consisting of a specified number of spaces.  \n  \n [!code-vb[VbVbalrStrings#2](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._154_1.vb)]"
  syntax:
    content: public static string Space (int Number);
    parameters:
    - id: Number
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 您要在字符串中的空格数。"
    return:
      type: System.String
      description: "返回一个包含指定数量的空格的字符串。"
  overload: Microsoft.VisualBasic.Strings.Space*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code> &lt; 0."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  id: Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含指定的数量的子字符串中的从零开始的一维数组。"
  remarks: "默认情况下，或当`Limit`等于-1，`Split`函数拆分输入的字符串中的分隔符字符串中，每个匹配项，并返回数组中的子字符串。 当`Limit`参数大于零，`Split`函数将在第一个字符串拆分`Limit`的分隔符，则为-1 匹配项并返回包含结果的子字符串的数组。 例如，`Split(&quot;a:b:c&quot;, &quot;:&quot;)`返回数组，数组`{&quot;a&quot;, &quot;b&quot;, &quot;c&quot;}`，虽然`Split(&quot;a:b:c&quot;, &quot;:&quot;, 2)`返回数组，数组`{&quot;a&quot;, &quot;b:c&quot;}`。       当`Split`函数遇到在行中，两个分隔符或的开头或字符串末尾的分隔符，它会将其解析为围绕一个空字符串 (&quot;&quot;)。 例如，`Split(&quot;xx&quot;, &quot;x&quot;)`返回数组，其中包含三个空字符串︰ 之一开头的字符串和&quot;x&quot;，第二个介于两个&quot;x&quot;字符串，第一个和最后一个&quot;x&quot;和字符串的末尾之间的一个。       此表说明了如何可选`Delimiter`， `Limit`，和`Compare`参数可以更改的行为`Split`函数。      |||  |-|-|  |拆分调用 |返回值 |  |`Split(&quot;42, 12, 19&quot;)`|{&quot;42&quot;、&quot;12，&quot;、&quot;19&quot;} |  |`Split(&quot;42, 12, 19&quot;, &quot;, &quot;)`|{&quot;42&quot;、&quot;12&quot;、&quot;19&quot;} |  |`Split(&quot;42, 12, 19&quot;, &quot;, &quot;, 2)`|{&quot;42&quot;、&quot;12，19&quot;} |  |`Split(&quot;192.168.0.1&quot;, &quot;.&quot;)`|{&quot;192&quot;、&quot;168&quot;、&quot;0&quot;、&quot;1&quot;} |  |`Split(&quot;Alice and Bob&quot;, &quot; AND &quot;)`|{&quot;Alice 和 Bob&quot;} |  |`Split(&quot;Alice and Bob&quot;, &quot; AND &quot;, ,CompareMethod.Text)`|{&quot;Alice&quot;，&quot;Bob&quot;} |  |`Split(&quot;someone@example.com&quot;, &quot;@&quot;,1)`|{&quot;someone@example.com&quot;}|  |`Split(&quot;someone@example.com&quot;, &quot;@&quot;,2)`|{&quot;someone&quot;，&quot;example.com&quot;}|      `Compare`自变量可以具有下列值。      ||||  |-|-|-|  |常量 |说明 |值 |  |`CompareMethod.Binary`|执行二进制比较 |&0; |  |`CompareMethod.Text`|执行文本比较 |&1; |"
  example:
  - "The following example demonstrates how to split a string at its spaces.  \n  \n [!code-vb[VbVbalrStrings#13](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_1.vb)]  \n  \n The following example demonstrates how to split strings with multiple delimiters in a row and filter out the empty strings.  \n  \n [!code-vb[VbVbalrStrings#14](~/add/codesnippet/visualbasic/6fd442c5-62bb-40f5-92c0-_2.vb)]"
  syntax:
    content: public static string[] Split (string Expression, string Delimiter = " ", int Limit = -1, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: Expression
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>包含子字符串和分隔符的表达式。"
    - id: Delimiter
      type: System.String
      description: "可选。 用于标识的子字符串限制任何单个字符。 如果`Delimiter`省略，空格字符 (&quot;&quot;) 被假定为分隔符。"
    - id: Limit
      type: System.Int32
      description: "可选。 子字符串应在其中拆分输入的字符串的最大数量。 默认值为-1，指示，应在出现的每个拆分输入的字符串`Delimiter`字符串。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "可选。 数字值，该值指示要使用计算子字符串时的比较。 值，请参阅&quot;设置&quot;。"
    return:
      type: System.String[]
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>数组。 如果<code> Expression </code>是零长度字符串 (&quot;&quot;)， <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref>返回包含零长度字符串的单个元素数组。 如果<code> Delimiter </code>是零长度字符串，或如果未显示任何位置中<code> Expression </code>， <xref uid=&quot;langword_csharp_Split&quot; name=&quot;Split&quot; href=&quot;&quot;> </xref>返回包含整个的单个元素数组<code> Expression </code>字符串。"
  overload: Microsoft.VisualBasic.Strings.Split*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  id: StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回-1、 0 或 1，基于字符串比较的结果。"
  remarks: "对字符串进行比较的第一个字符开头的字母数字排序值。 有关二进制比较、 文本比较和排序顺序的进一步信息，请参阅[选项比较语句](~/add/includes/ajax-current-ext-md.md)。       `Compare`自变量设置不: | | |  |-|-|  |常量 |说明 |  |`Binary`|执行二进制比较，基于派生自字符的内部二进制表示的排序顺序。 |  |`Text`|执行文本比较，基于由你的系统的不区分大小写的文本排序顺序`LocaleID`值。 |"
  example:
  - "This example uses the `StrComp` function to return the results of a string comparison.  \n  \n [!code-vb[VbVbalrStrings#22](~/add/codesnippet/visualbasic/40cb6ac0-98a9-4acc-9cbf-_1.vb)]"
  syntax:
    content: public static int StrComp (string String1, string String2, Microsoft.VisualBasic.CompareMethod Compare = Microsoft.VisualBasic.CompareMethod.Binary);
    parameters:
    - id: String1
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
    - id: String2
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
    - id: Compare
      type: Microsoft.VisualBasic.CompareMethod
      description: "可选。 指定的字符串比较的类型。 如果`Compare`省略， <xref uid=&quot;langword_csharp_Option Compare&quot; name=&quot;Option Compare&quot; href=&quot;&quot;> </xref>设置确定的比较类型。"
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_StrComp&quot; name=&quot;StrComp&quot; href=&quot;&quot;> </xref>函数具有下列返回值。       <table><tbody><tr><td> 如果       </td><td> StrComp 返回       </td></tr><tr><td><code>String1</code>前面的种类<code>String2</code></td><td> -1       </td></tr><tr><td><code>String1</code>等于<code>String2</code></td><td> 0       </td></tr><tr><td><code>String1</code>后进行排序<code>String2</code></td><td> 1       </td></tr></tbody></table>"
  overload: Microsoft.VisualBasic.Strings.StrComp*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Compare</code>值不是有效的。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  id: StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回根据指定进行转换的字符串。"
  remarks: "常量`VbStrConv.Wide`， `VbStrConv.Narrow`， `VbStrConv.SimplifiedChinese`， `VbStrConv.TraditionalChinese`， `VbStrConv.Katakana`，和`VbStrConv.Hiragana`可能导致运行时错误时使用在区域设置中，不应用它们，但并非总是︰ 常量`VbStrConv.Katakana`和`VbStrConv.Hiragana`可用于非日语系统中安装了日语语言包。 此外，使用的常量`VbStrConv.Wide`和`VbStrConv.Narrow`与东亚语言安装支持在任何系统上。       操作字符串，以便区分大小的更改适用于在其中使用的应用程序的区域设置时，此函数将使用应用程序的区域性信息。      1> [!IMPORTANT]&1;> 如果你的应用程序进行安全决策基于比较或大小写更改操作的结果，则该操作，应使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，并传入<xref:System.StringComparison>或<xref:System.StringComparison>为`comparisonType`自变量。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 有关详细信息，请参阅[如何区域性影响字符串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。       `Conversion`自变量设置不: | | |  |-|-|  |枚举成员 |说明 |  |`VbStrConv.None`|不执行任何转换 |  |`VbStrConv.LinguisticCasing`|使用大小写，而不是文件系统 （默认值） 的语言规则。 有效，且`VbStrConv.UpperCase`和`VbStrConv.LowerCase`仅。 |  |`VbStrConv.UpperCase`|将转换为大写字符的字符串。 |  |`VbStrConv.LowerCase`|将转换为小写字符的字符串。 |  |`VbStrConv.ProperCase`|将字符串中的每个单词的第一个字母转换为大写。 |  |`VbStrConv.Wide` <sup>*</sup>|将窄 （半角） 中为双字节 （全角） 个字符的字符串的字符转换。 |  |`VbStrConv.Narrow` <sup>*</sup>|将双字节 （全角） 中要缩小范围 （半角） 字符的字符串的字符转换。 |  |`VbStrConv.Katakana` <sup>**</sup>|将字符串中的平假名字符转换为片假名字符。 |  |`VbStrConv.Hiragana` <sup>**</sup>|将字符串中的片假名字符转换为平假名字符。 |  |`VbStrConv.SimplifiedChinese` <sup>*</sup>|将繁体中文字符转换为简体中文。 |  |`VbStrConv.TraditionalChinese` <sup>*</sup>|将简体中文字符转换为繁体中文。 |      <sup> * </sup>适用于亚洲的区域设置。     <sup>**</sup>仅适用于日本。      1> [!NOTE]&1;> 在.NET Framework 公共语言运行时中指定这些常量。 因此，它们可任意位置的实际值替换代码中。 可以结合使用大多数 (例如， `UpperCase + Wide`)，除非它们互相排斥的方式 (例如， `VbStrConv.Wide + VbStrConv.Narrow`)。       以下是正确的大小写的有效词分隔符︰ Null (`Chr$(0)`)，水平制表符 (`Chr$(9)`)，换行符 (`Chr$(10)`)，垂直制表符 (`Chr$(11)`)，换页符 (`Chr$(12)`)，回车符 (`Chr$(13)`)，空间 （单字节字符集） (`Chr$(32)`)。 空格，这可以是 full 或半角的实际值因国家/地区对于东亚区域性而异。"
  example:
  - "This example converts text into all lowercase letters.  \n  \n [!code-vb[VbVbalrStrings#6](~/add/codesnippet/visualbasic/834dd6b9-b57e-4455-8085-_1.vb)]"
  syntax:
    content: public static string StrConv (string str, Microsoft.VisualBasic.VbStrConv Conversion, int LocaleID = 0);
    parameters:
    - id: str
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>要转换的表达式。"
    - id: Conversion
      type: Microsoft.VisualBasic.VbStrConv
      description: "必需。 <xref href=&quot;Microsoft.VisualBasic.VbStrConv&quot;></xref>成员。 指定的执行的转换的类型的枚举值。"
    - id: LocaleID
      type: System.Int32
      description: "可选。 <xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;> </xref>值，如果不同于系统<xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;></xref>值。 (系统<xref uid=&quot;langword_csharp_LocaleID&quot; name=&quot;LocaleID&quot; href=&quot;&quot;></xref>值是默认设置。)"
    return:
      type: System.String
      description: "返回根据指定进行转换的字符串。"
  overload: Microsoft.VisualBasic.Strings.StrConv*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "不支持<code> LocaleID </code>， <code> Conversion </code> &lt; 0 或&gt;2048，或不支持转换为指定的区域设置。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  id: StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回字符串或对象包含的指定字符重复指定的次数。"
  remarks: "此函数将返回`String`重复字符组成。 组成的字符串的字符是中的第一个字符`Character`重复自变量，但`Number`次数。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._197_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, char Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 要返回的字符串长度。"
    - id: Character
      type: System.Char
      description: "必需。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 将使用仅表达式的第一个字符。 如果字符是类型的<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，它必须包含<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>值。"
    return:
      type: System.String
      description: "返回字符串或对象包含的指定字符重复指定的次数。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>小于 0 或<code>Character</code>类型无效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  id: StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回字符串或对象包含的指定字符重复指定的次数。"
  remarks: "此函数将返回`String`重复字符组成。 组成的字符串的字符是中的第一个字符`Character`重复自变量，但`Number`次数。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._63_1.vb)]"
  syntax:
    content: public static object StrDup (int Number, object Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 要返回的字符串长度。"
    - id: Character
      type: System.Object
      description: "必需。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 将使用仅表达式的第一个字符。 如果字符是类型的<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，它必须包含<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>值。"
    return:
      type: System.Object
      description: "返回字符串或对象包含的指定字符重复指定的次数。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>小于 0 或<code>Character</code>类型无效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  id: StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回字符串或对象包含的指定字符重复指定的次数。"
  remarks: "此函数将返回`String`重复字符组成。 组成的字符串的字符是中的第一个字符`Character`重复自变量，但`Number`次数。"
  example:
  - "This example uses the `StrDup` function to return a string of duplicated characters.  \n  \n [!code-vb[VbVbalrStrings#34](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._148_1.vb)]"
  syntax:
    content: public static string StrDup (int Number, string Character);
    parameters:
    - id: Number
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>表达式。 要返回的字符串长度。"
    - id: Character
      type: System.String
      description: "必需。 Any valid <xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref> expression. 将使用仅表达式的第一个字符。 如果字符是类型的<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;> </xref>，它必须包含<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_String &quot; name=&quot;String &quot; href=&quot;&quot;></xref>值。"
    return:
      type: System.String
      description: "返回字符串或对象包含的指定字符重复指定的次数。"
  overload: Microsoft.VisualBasic.Strings.StrDup*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Number</code>小于 0 或<code>Character</code>类型无效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>Character</code>is <xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  id: StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回指定字符串的字符顺序相反顺序的字符串。"
  remarks: "`StrReverse`函数将返回包含相同的字符的字符串`Expression`，但以相反的顺序。"
  example:
  - '[!code-vb[VbVbalrStrings#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._7_1.vb)]'
  syntax:
    content: public static string StrReverse (string Expression);
    parameters:
    - id: Expression
      type: System.String
      description: "必需。 字符串的表达式，其字符顺序反转。 如果`Expression`是零长度字符串 (&quot;&quot;)，则返回一个零长度字符串。"
    return:
      type: System.String
      description: "返回指定字符串的字符顺序相反顺序的字符串。"
  overload: Microsoft.VisualBasic.Strings.StrReverse*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  id: Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回包含没有前导空格的指定字符串的副本的字符串 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)，则没有尾随空格 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或没有前导空格或尾随空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  remarks: "`LTrim`， `RTrim`，和`Trim`函数从字符串末尾删除空格。"
  example:
  - "This example uses the `LTrim` function to strip leading spaces and the `RTrim` function to strip trailing spaces from a string variable. It uses the `Trim` function to strip both types of spaces.  \n  \n [!code-vb[VbVbalrStrings#25](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._87_1.vb)]"
  syntax:
    content: public static string Trim (string str);
    parameters:
    - id: str
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.String
      description: "返回包含没有前导空格的指定字符串的副本的字符串 (<xref uid=&quot;langword_csharp_LTrim&quot; name=&quot;LTrim&quot; href=&quot;&quot;></xref>)，则没有尾随空格 (<xref uid=&quot;langword_csharp_RTrim&quot; name=&quot;RTrim&quot; href=&quot;&quot;></xref>)，或没有前导空格或尾随空格 (<xref uid=&quot;langword_csharp_Trim&quot; name=&quot;Trim&quot; href=&quot;&quot;></xref>)。"
  overload: Microsoft.VisualBasic.Strings.Trim*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  id: UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回的字符串或字符，其中包含指定的字符串转换为大写形式。"
  remarks: "小写字母都转换为大写;所有大写字母和 nonletter 字符都保持不变。       操作字符串，以便区分大小的更改适用于在其中使用的应用程序的区域设置时，此函数将使用应用程序的区域性信息。      1> [!IMPORTANT]&1;> 如果你的应用程序进行安全决策基于比较或大小写更改操作的结果，则该操作，应使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，并传入<xref:System.StringComparison>或<xref:System.StringComparison>为`comparisonType`自变量。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 有关详细信息，请参阅[如何区域性影响字符串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._201_1.vb)]"
  syntax:
    content: public static char UCase (char Value);
    parameters:
    - id: Value
      type: System.Char
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.Char
      description: "返回的字符串或字符，其中包含指定的字符串转换为大写形式。"
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  id: UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  langs:
  - csharp
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回的字符串或字符，其中包含指定的字符串转换为大写形式。"
  remarks: "小写字母都转换为大写;所有大写字母和 nonletter 字符都保持不变。       操作字符串，以便区分大小的更改适用于在其中使用的应用程序的区域设置时，此函数将使用应用程序的区域性信息。      1> [!IMPORTANT]&1;> 如果你的应用程序进行安全决策基于比较或大小写更改操作的结果，则该操作，应使用<xref:System.String.Compare%2A?displayProperty=fullName>方法，并传入<xref:System.StringComparison>或<xref:System.StringComparison>为`comparisonType`自变量。</xref:System.StringComparison> </xref:System.StringComparison> </xref:System.String.Compare%2A?displayProperty=fullName> 有关详细信息，请参阅[如何区域性影响字符串在 Visual Basic 中](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example uses the `UCase` function to return an uppercase version of a string.  \n  \n [!code-vb[VbVbalrStrings#31](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._23_1.vb)]"
  syntax:
    content: public static string UCase (string Value);
    parameters:
    - id: Value
      type: System.String
      description: "必需。 任何有效<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Char&quot; name=&quot;Char&quot; href=&quot;&quot;></xref>表达式。"
    return:
      type: System.String
      description: "返回的字符串或字符，其中包含指定的字符串转换为大写形式。"
  overload: Microsoft.VisualBasic.Strings.UCase*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: Microsoft.VisualBasic.Strings.Asc(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(Char)
  nameWithType: Strings.Asc(Char)
  fullName: Microsoft.VisualBasic.Strings.Asc(Char)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: Microsoft.VisualBasic.Strings.Asc(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc(String)
  nameWithType: Strings.Asc(String)
  fullName: Microsoft.VisualBasic.Strings.Asc(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Strings.AscW(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(Char)
  nameWithType: Strings.AscW(Char)
  fullName: Microsoft.VisualBasic.Strings.AscW(Char)
- uid: Microsoft.VisualBasic.Strings.AscW(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW(String)
  nameWithType: Strings.AscW(String)
  fullName: Microsoft.VisualBasic.Strings.AscW(String)
- uid: Microsoft.VisualBasic.Strings.Chr(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr(Int32)
  nameWithType: Strings.Chr(Int32)
  fullName: Microsoft.VisualBasic.Strings.Chr(Int32)
- uid: Microsoft.VisualBasic.Strings.ChrW(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW(Int32)
  nameWithType: Strings.ChrW(Int32)
  fullName: Microsoft.VisualBasic.Strings.ChrW(Int32)
- uid: Microsoft.VisualBasic.Strings.Filter(System.Object[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(Object[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(Object[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(Object[],String,Boolean,CompareMethod)
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.CompareMethod
  parent: Microsoft.VisualBasic
  isExternal: false
  name: CompareMethod
  nameWithType: CompareMethod
  fullName: Microsoft.VisualBasic.CompareMethod
- uid: Microsoft.VisualBasic.Strings.Filter(System.String[],System.String,System.Boolean,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter(String[],String,Boolean,CompareMethod)
  nameWithType: Strings.Filter(String[],String,Boolean,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Filter(String[],String,Boolean,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Format(System.Object,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format(Object,String)
  nameWithType: Strings.Format(Object,String)
  fullName: Microsoft.VisualBasic.Strings.Format(Object,String)
- uid: Microsoft.VisualBasic.Strings.FormatCurrency(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatCurrency(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.TriState
  parent: Microsoft.VisualBasic
  isExternal: false
  name: TriState
  nameWithType: TriState
  fullName: Microsoft.VisualBasic.TriState
- uid: Microsoft.VisualBasic.Strings.FormatDateTime(System.DateTime,Microsoft.VisualBasic.DateFormat)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime(DateTime,DateFormat)
  nameWithType: Strings.FormatDateTime(DateTime,DateFormat)
  fullName: Microsoft.VisualBasic.Strings.FormatDateTime(DateTime,DateFormat)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateFormat
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateFormat
  nameWithType: DateFormat
  fullName: Microsoft.VisualBasic.DateFormat
- uid: Microsoft.VisualBasic.Strings.FormatNumber(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatNumber(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.FormatPercent(System.Object,System.Int32,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState,Microsoft.VisualBasic.TriState)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent(Object,Int32,TriState,TriState,TriState)
  nameWithType: Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
  fullName: Microsoft.VisualBasic.Strings.FormatPercent(Object,Int32,TriState,TriState,TriState)
- uid: Microsoft.VisualBasic.Strings.GetChar(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar(String,Int32)
  nameWithType: Strings.GetChar(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.GetChar(String,Int32)
- uid: Microsoft.VisualBasic.Strings.InStr(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(String,String,CompareMethod)
  nameWithType: Strings.InStr(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStr(System.Int32,System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr(Int32,String,String,CompareMethod)
  nameWithType: Strings.InStr(Int32,String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStr(Int32,String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.InStrRev(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev(String,String,Int32,CompareMethod)
  nameWithType: Strings.InStrRev(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.InStrRev(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Join(System.Object[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(Object[],String)
  nameWithType: Strings.Join(Object[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(Object[],String)
- uid: Microsoft.VisualBasic.Strings.Join(System.String[],System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join(String[],String)
  nameWithType: Strings.Join(String[],String)
  fullName: Microsoft.VisualBasic.Strings.Join(String[],String)
- uid: Microsoft.VisualBasic.Strings.LCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(Char)
  nameWithType: Strings.LCase(Char)
  fullName: Microsoft.VisualBasic.Strings.LCase(Char)
- uid: Microsoft.VisualBasic.Strings.LCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase(String)
  nameWithType: Strings.LCase(String)
  fullName: Microsoft.VisualBasic.Strings.LCase(String)
- uid: Microsoft.VisualBasic.Strings.Left(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left(String,Int32)
  nameWithType: Strings.Left(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Left(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Boolean)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Boolean)
  nameWithType: Strings.Len(Boolean)
  fullName: Microsoft.VisualBasic.Strings.Len(Boolean)
- uid: Microsoft.VisualBasic.Strings.Len(System.Byte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Byte)
  nameWithType: Strings.Len(Byte)
  fullName: Microsoft.VisualBasic.Strings.Len(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: Microsoft.VisualBasic.Strings.Len(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Char)
  nameWithType: Strings.Len(Char)
  fullName: Microsoft.VisualBasic.Strings.Len(Char)
- uid: Microsoft.VisualBasic.Strings.Len(System.DateTime)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(DateTime)
  nameWithType: Strings.Len(DateTime)
  fullName: Microsoft.VisualBasic.Strings.Len(DateTime)
- uid: Microsoft.VisualBasic.Strings.Len(System.Decimal)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Decimal)
  nameWithType: Strings.Len(Decimal)
  fullName: Microsoft.VisualBasic.Strings.Len(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: Microsoft.VisualBasic.Strings.Len(System.Double)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Double)
  nameWithType: Strings.Len(Double)
  fullName: Microsoft.VisualBasic.Strings.Len(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.Strings.Len(System.Int16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int16)
  nameWithType: Strings.Len(Int16)
  fullName: Microsoft.VisualBasic.Strings.Len(Int16)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: Microsoft.VisualBasic.Strings.Len(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int32)
  nameWithType: Strings.Len(Int32)
  fullName: Microsoft.VisualBasic.Strings.Len(Int32)
- uid: Microsoft.VisualBasic.Strings.Len(System.Int64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Int64)
  nameWithType: Strings.Len(Int64)
  fullName: Microsoft.VisualBasic.Strings.Len(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.Strings.Len(System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Object)
  nameWithType: Strings.Len(Object)
  fullName: Microsoft.VisualBasic.Strings.Len(Object)
- uid: Microsoft.VisualBasic.Strings.Len(System.SByte)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(SByte)
  nameWithType: Strings.Len(SByte)
  fullName: Microsoft.VisualBasic.Strings.Len(SByte)
- uid: System.SByte
  parent: System
  isExternal: true
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: Microsoft.VisualBasic.Strings.Len(System.Single)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(Single)
  nameWithType: Strings.Len(Single)
  fullName: Microsoft.VisualBasic.Strings.Len(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: Microsoft.VisualBasic.Strings.Len(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(String)
  nameWithType: Strings.Len(String)
  fullName: Microsoft.VisualBasic.Strings.Len(String)
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt16)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt16)
  nameWithType: Strings.Len(UInt16)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt16)
- uid: System.UInt16
  parent: System
  isExternal: true
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt32)
  nameWithType: Strings.Len(UInt32)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: Microsoft.VisualBasic.Strings.Len(System.UInt64)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len(UInt64)
  nameWithType: Strings.Len(UInt64)
  fullName: Microsoft.VisualBasic.Strings.Len(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: Microsoft.VisualBasic.Strings.LSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet(String,Int32)
  nameWithType: Strings.LSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.LSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.LTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim(String)
  nameWithType: Strings.LTrim(String)
  fullName: Microsoft.VisualBasic.Strings.LTrim(String)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32)
  nameWithType: Strings.Mid(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32)
- uid: Microsoft.VisualBasic.Strings.Mid(System.String,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid(String,Int32,Int32)
  nameWithType: Strings.Mid(String,Int32,Int32)
  fullName: Microsoft.VisualBasic.Strings.Mid(String,Int32,Int32)
- uid: Microsoft.VisualBasic.Strings.Replace(System.String,System.String,System.String,System.Int32,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace(String,String,String,Int32,Int32,CompareMethod)
  nameWithType: Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Replace(String,String,String,Int32,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.Right(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right(String,Int32)
  nameWithType: Strings.Right(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.Right(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RSet(System.String,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet(String,Int32)
  nameWithType: Strings.RSet(String,Int32)
  fullName: Microsoft.VisualBasic.Strings.RSet(String,Int32)
- uid: Microsoft.VisualBasic.Strings.RTrim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim(String)
  nameWithType: Strings.RTrim(String)
  fullName: Microsoft.VisualBasic.Strings.RTrim(String)
- uid: Microsoft.VisualBasic.Strings.Space(System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space(Int32)
  nameWithType: Strings.Space(Int32)
  fullName: Microsoft.VisualBasic.Strings.Space(Int32)
- uid: Microsoft.VisualBasic.Strings.Split(System.String,System.String,System.Int32,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split(String,String,Int32,CompareMethod)
  nameWithType: Strings.Split(String,String,Int32,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.Split(String,String,Int32,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrComp(System.String,System.String,Microsoft.VisualBasic.CompareMethod)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp(String,String,CompareMethod)
  nameWithType: Strings.StrComp(String,String,CompareMethod)
  fullName: Microsoft.VisualBasic.Strings.StrComp(String,String,CompareMethod)
- uid: Microsoft.VisualBasic.Strings.StrConv(System.String,Microsoft.VisualBasic.VbStrConv,System.Int32)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv(String,VbStrConv,Int32)
  nameWithType: Strings.StrConv(String,VbStrConv,Int32)
  fullName: Microsoft.VisualBasic.Strings.StrConv(String,VbStrConv,Int32)
- uid: Microsoft.VisualBasic.VbStrConv
  parent: Microsoft.VisualBasic
  isExternal: false
  name: VbStrConv
  nameWithType: VbStrConv
  fullName: Microsoft.VisualBasic.VbStrConv
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Char)
  nameWithType: Strings.StrDup(Int32,Char)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Char)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.Object)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,Object)
  nameWithType: Strings.StrDup(Int32,Object)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,Object)
- uid: Microsoft.VisualBasic.Strings.StrDup(System.Int32,System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup(Int32,String)
  nameWithType: Strings.StrDup(Int32,String)
  fullName: Microsoft.VisualBasic.Strings.StrDup(Int32,String)
- uid: Microsoft.VisualBasic.Strings.StrReverse(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse(String)
  nameWithType: Strings.StrReverse(String)
  fullName: Microsoft.VisualBasic.Strings.StrReverse(String)
- uid: Microsoft.VisualBasic.Strings.Trim(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim(String)
  nameWithType: Strings.Trim(String)
  fullName: Microsoft.VisualBasic.Strings.Trim(String)
- uid: Microsoft.VisualBasic.Strings.UCase(System.Char)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(Char)
  nameWithType: Strings.UCase(Char)
  fullName: Microsoft.VisualBasic.Strings.UCase(Char)
- uid: Microsoft.VisualBasic.Strings.UCase(System.String)
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase(String)
  nameWithType: Strings.UCase(String)
  fullName: Microsoft.VisualBasic.Strings.UCase(String)
- uid: Microsoft.VisualBasic.Strings.Asc*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Asc
  nameWithType: Strings.Asc
- uid: Microsoft.VisualBasic.Strings.AscW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: AscW
  nameWithType: Strings.AscW
- uid: Microsoft.VisualBasic.Strings.Chr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Chr
  nameWithType: Strings.Chr
- uid: Microsoft.VisualBasic.Strings.ChrW*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: ChrW
  nameWithType: Strings.ChrW
- uid: Microsoft.VisualBasic.Strings.Filter*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Filter
  nameWithType: Strings.Filter
- uid: Microsoft.VisualBasic.Strings.Format*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Format
  nameWithType: Strings.Format
- uid: Microsoft.VisualBasic.Strings.FormatCurrency*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatCurrency
  nameWithType: Strings.FormatCurrency
- uid: Microsoft.VisualBasic.Strings.FormatDateTime*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatDateTime
  nameWithType: Strings.FormatDateTime
- uid: Microsoft.VisualBasic.Strings.FormatNumber*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatNumber
  nameWithType: Strings.FormatNumber
- uid: Microsoft.VisualBasic.Strings.FormatPercent*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: FormatPercent
  nameWithType: Strings.FormatPercent
- uid: Microsoft.VisualBasic.Strings.GetChar*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: GetChar
  nameWithType: Strings.GetChar
- uid: Microsoft.VisualBasic.Strings.InStr*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStr
  nameWithType: Strings.InStr
- uid: Microsoft.VisualBasic.Strings.InStrRev*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: InStrRev
  nameWithType: Strings.InStrRev
- uid: Microsoft.VisualBasic.Strings.Join*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Join
  nameWithType: Strings.Join
- uid: Microsoft.VisualBasic.Strings.LCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LCase
  nameWithType: Strings.LCase
- uid: Microsoft.VisualBasic.Strings.Left*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Left
  nameWithType: Strings.Left
- uid: Microsoft.VisualBasic.Strings.Len*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Len
  nameWithType: Strings.Len
- uid: Microsoft.VisualBasic.Strings.LSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LSet
  nameWithType: Strings.LSet
- uid: Microsoft.VisualBasic.Strings.LTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: LTrim
  nameWithType: Strings.LTrim
- uid: Microsoft.VisualBasic.Strings.Mid*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Mid
  nameWithType: Strings.Mid
- uid: Microsoft.VisualBasic.Strings.Replace*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Replace
  nameWithType: Strings.Replace
- uid: Microsoft.VisualBasic.Strings.Right*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Right
  nameWithType: Strings.Right
- uid: Microsoft.VisualBasic.Strings.RSet*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RSet
  nameWithType: Strings.RSet
- uid: Microsoft.VisualBasic.Strings.RTrim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: RTrim
  nameWithType: Strings.RTrim
- uid: Microsoft.VisualBasic.Strings.Space*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Space
  nameWithType: Strings.Space
- uid: Microsoft.VisualBasic.Strings.Split*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Split
  nameWithType: Strings.Split
- uid: Microsoft.VisualBasic.Strings.StrComp*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrComp
  nameWithType: Strings.StrComp
- uid: Microsoft.VisualBasic.Strings.StrConv*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrConv
  nameWithType: Strings.StrConv
- uid: Microsoft.VisualBasic.Strings.StrDup*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrDup
  nameWithType: Strings.StrDup
- uid: Microsoft.VisualBasic.Strings.StrReverse*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: StrReverse
  nameWithType: Strings.StrReverse
- uid: Microsoft.VisualBasic.Strings.Trim*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: Trim
  nameWithType: Strings.Trim
- uid: Microsoft.VisualBasic.Strings.UCase*
  parent: Microsoft.VisualBasic.Strings
  isExternal: false
  name: UCase
  nameWithType: Strings.UCase
