### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  id: KeyContainerPermissionAccessEntryEnumerator
  children:
  - System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
  - System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext
  - System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset
  - System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: KeyContainerPermissionAccessEntryEnumerator
  nameWithType: KeyContainerPermissionAccessEntryEnumerator
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  type: Class
  summary: "表示的枚举数<xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntry&quot;></xref>中的对象<xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntryCollection&quot;> </xref>。"
  remarks: "枚举器只允许读取集合中的数据。 枚举器不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A>方法还会枚举器放回此位置。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A> 在此位置，调用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>属性引发异常。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> 因此，必须调用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>方法将枚举数前移到集合，然后再读取的值的第一个元素<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>属性。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>       <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>返回相同的对象之前<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>或<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A>称为。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A></xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> <xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>设置<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>到下一个元素。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A></xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>       该枚举数传递到集合的末尾之后，将放在集合中，最后一个元素后面且调用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>返回`false`。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>引发异常。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A> 若要重置<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>到集合中，第一个元素调用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A>跟<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>.</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>调用</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A></xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，枚举数将失效下, 一个调用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>或<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset%2A></xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>到 如果调用之间修改集合<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>和<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>，<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>返回到该属性当前设置的元素即使枚举数已经无效。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class KeyContainerPermissionAccessEntryEnumerator : System.Collections.IEnumerator
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
  id: Current
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Current
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取集合中的当前条目。"
  remarks: "创建枚举器时，它不指向对象，以便当前的属性无效，将引发异常，如果访问它。 必须先调用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>方法，将光标定位在集合中的第一个对象。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>       获取多次通过没有干预调用的当前属性<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>将返回相同<xref:System.Security.Permissions.KeyContainerPermissionAccessEntry>对象每次。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntry> </xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Security.Permissions.KeyContainerPermissionAccessEntry Current { get; }
    return:
      type: System.Security.Permissions.KeyContainerPermissionAccessEntry
      description: "当前<xref href=&quot;System.Security.Permissions.KeyContainerPermissionAccessEntry&quot;></xref>集合中的对象。"
  overload: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在第一个调用之前访问当前属性<> *1> 方法。光标位于集合中的第一个对象之前。      -或-在调用后访问当前的属性<> *1> 方法返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，指示在集合中的最后一个对象后光标是否位于。"
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.MoveNext()
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "移动到集合中的下一个元素。"
  remarks: "MoveNext 方法返回`false`立即如果集合中没有对象。       MoveNext 返回`true`直到它已达到集合的末尾。 然后它返回`false`每个连续调用。 但是，一次 MoveNext 返回`false`，则访问<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>属性引发异常。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>       创建后，枚举数定位在第一个之前<xref:System.Security.Permissions.KeyContainerPermissionAccessEntry>集合和 MoveNext 首次调用中的对象集合中定位的第一个对象的枚举。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntry>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果枚举数已成功地推进到下一个元素;，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果枚举数传递到集合的末尾。"
  overload: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset
  id: Reset
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Reset()
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "将枚举数重置到集合的开头。"
  remarks: "一个枚举器会只进方向移动。 使用此方法以返回到集合的开头。       重置方法将光标定位在集合中的第一个对象。 在调用之后重置，你不需要调用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>将光标向前移动到的第一个对象。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取集合中的当前对象。"
  remarks: "不调用此方法。使用<xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>属性改为。</xref:System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "集合中的当前对象。"
  overload: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Current
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntry
  parent: System.Security.Permissions
  isExternal: false
  name: KeyContainerPermissionAccessEntry
  nameWithType: KeyContainerPermissionAccessEntry
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntry
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.MoveNext()
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: Reset()
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Reset()
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset()
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Current*
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Current
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.MoveNext*
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.MoveNext
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.Reset*
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: Reset
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.Reset
- uid: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.Permissions.KeyContainerPermissionAccessEntryEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: KeyContainerPermissionAccessEntryEnumerator.System.Collections.IEnumerator.Current
