### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.AsyncResult
  id: AsyncResult
  children:
  - System.IdentityModel.AsyncResult.#ctor
  - System.IdentityModel.AsyncResult.#ctor(System.Object)
  - System.IdentityModel.AsyncResult.#ctor(System.AsyncCallback,System.Object)
  - System.IdentityModel.AsyncResult.AsyncState
  - System.IdentityModel.AsyncResult.AsyncWaitHandle
  - System.IdentityModel.AsyncResult.Complete(System.Boolean)
  - System.IdentityModel.AsyncResult.Complete(System.Boolean,System.Exception)
  - System.IdentityModel.AsyncResult.CompletedSynchronously
  - System.IdentityModel.AsyncResult.Dispose
  - System.IdentityModel.AsyncResult.Dispose(System.Boolean)
  - System.IdentityModel.AsyncResult.End(System.IAsyncResult)
  - System.IdentityModel.AsyncResult.Finalize
  - System.IdentityModel.AsyncResult.IsCompleted
  langs:
  - csharp
  name: AsyncResult
  nameWithType: AsyncResult
  fullName: System.IdentityModel.AsyncResult
  type: Class
  summary: "实现抽象基类<xref:System.IAsyncResult>接口。</xref:System.IAsyncResult> 用作基类从中派生<xref:System.IAsyncResult>可以针对常见的异步编程方案中使用的对象。</xref:System.IAsyncResult>"
  remarks: "有关详细信息请参阅<xref:System.IAsyncResult?displayProperty=fullName>接口。</xref:System.IAsyncResult?displayProperty=fullName>       <xref:System.IdentityModel.TypedAsyncResult%601>类派生自 AsyncResult。</xref:System.IdentityModel.TypedAsyncResult%601>"
  syntax:
    content: 'public abstract class AsyncResult : IAsyncResult, IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.#ctor
  id: '#ctor'
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: AsyncResult()
  nameWithType: AsyncResult.AsyncResult()
  fullName: System.IdentityModel.AsyncResult.AsyncResult()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "从派生类进行初始化的实例中的构造函数调用<xref href=&quot;System.IdentityModel.AsyncResult&quot;></xref>没有回调委托或状态对象的类。"
  syntax:
    content: protected AsyncResult ();
    parameters: []
  overload: System.IdentityModel.AsyncResult.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: AsyncResult(Object)
  nameWithType: AsyncResult.AsyncResult(Object)
  fullName: System.IdentityModel.AsyncResult.AsyncResult(Object)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "从派生类进行初始化的实例中的构造函数调用<xref href=&quot;System.IdentityModel.AsyncResult&quot;></xref>类没有回调委托，但具有的状态对象。"
  syntax:
    content: protected AsyncResult (object state);
    parameters:
    - id: state
      type: System.Object
      description: "一个用户定义的对象，限定或包含有关异步操作的信息。"
  overload: System.IdentityModel.AsyncResult.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.#ctor(System.AsyncCallback,System.Object)
  id: '#ctor(System.AsyncCallback,System.Object)'
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: AsyncResult(AsyncCallback,Object)
  nameWithType: AsyncResult.AsyncResult(AsyncCallback,Object)
  fullName: System.IdentityModel.AsyncResult.AsyncResult(AsyncCallback,Object)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "从派生类进行初始化的实例中的构造函数调用<xref href=&quot;System.IdentityModel.AsyncResult&quot;></xref>具有的回调委托和状态对象的类。"
  syntax:
    content: protected AsyncResult (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "异步操作完成时调用的方法。"
    - id: state
      type: System.Object
      description: "一个用户定义的对象，限定或包含有关异步操作的信息。"
  overload: System.IdentityModel.AsyncResult.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.AsyncState
  id: AsyncState
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
  fullName: System.IdentityModel.AsyncResult.AsyncState
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "获取用户定义的对象，限定或包含有关异步操作的信息。"
  remarks: "有关详细信息请参阅<xref:System.IAsyncResult.AsyncState%2A?displayProperty=fullName>属性。</xref:System.IAsyncResult.AsyncState%2A?displayProperty=fullName>"
  syntax:
    content: public object AsyncState { get; }
    return:
      type: System.Object
      description: "一个用户定义的对象，限定或包含有关异步操作的信息。"
  overload: System.IdentityModel.AsyncResult.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.AsyncWaitHandle
  id: AsyncWaitHandle
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
  fullName: System.IdentityModel.AsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "获取<xref:System.Threading.WaitHandle>用于等待异步操作以完成。</xref:System.Threading.WaitHandle>"
  remarks: "有关详细信息请参阅<xref:System.IAsyncResult.AsyncWaitHandle%2A?displayProperty=fullName>属性。</xref:System.IAsyncResult.AsyncWaitHandle%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Threading.WaitHandle AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A<xref:System.Threading.WaitHandle>用于等待异步操作以完成。</xref:System.Threading.WaitHandle>"
  overload: System.IdentityModel.AsyncResult.AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.Complete(System.Boolean)
  id: Complete(System.Boolean)
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: Complete(Boolean)
  nameWithType: AsyncResult.Complete(Boolean)
  fullName: System.IdentityModel.AsyncResult.Complete(Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "在异步操作完成且未遇到异常，则调用此版本的完成。 它将更新该操作的状态，并通知回调。"
  syntax:
    content: protected void Complete (bool completedSynchronously);
    parameters:
    - id: completedSynchronously
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果异步操作完成同步进行;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.AsyncResult.Complete*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.Complete(System.Boolean,System.Exception)
  id: Complete(System.Boolean,System.Exception)
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: Complete(Boolean,Exception)
  nameWithType: AsyncResult.Complete(Boolean,Exception)
  fullName: System.IdentityModel.AsyncResult.Complete(Boolean,Exception)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "如果您提升在处理期间发生异常，则调用此版本的完成。 除了通知回调，它会捕获异常并存储到调用期间引发<xref:System.IdentityModel.AsyncResult.End*>方法。</xref:System.IdentityModel.AsyncResult.End*>"
  syntax:
    content: protected void Complete (bool completedSynchronously, Exception exception);
    parameters:
    - id: completedSynchronously
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果异步操作完成同步进行;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: exception
      type: System.Exception
      description: "异步操作的处理过程中出现异常。"
  overload: System.IdentityModel.AsyncResult.Complete*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.CompletedSynchronously
  id: CompletedSynchronously
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
  fullName: System.IdentityModel.AsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "获取一个值，该值指示是否同步完成的异步操作。"
  remarks: "有关详细信息请参阅<xref:System.IAsyncResult.CompletedSynchronously%2A?displayProperty=fullName>属性。</xref:System.IAsyncResult.CompletedSynchronously%2A?displayProperty=fullName>"
  syntax:
    content: public bool CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果异步操作完成同步进行;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.AsyncResult.CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.Dispose
  id: Dispose
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: Dispose()
  nameWithType: AsyncResult.Dispose()
  fullName: System.IdentityModel.AsyncResult.Dispose()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "释放当前实例所使用的资源<xref href=&quot;System.IdentityModel.AsyncResult&quot;></xref>类。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.IdentityModel.AsyncResult.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: AsyncResult.Dispose(Boolean)
  fullName: System.IdentityModel.AsyncResult.Dispose(Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "由调用<xref href=&quot;System.IdentityModel.AsyncResult.Dispose&quot;></xref>和<xref:System.IdentityModel.AsyncResult.Finalize*>方法来释放使用的当前实例的托管和非托管资源<xref href=&quot;System.IdentityModel.AsyncResult&quot;></xref>类</xref:System.IdentityModel.AsyncResult.Finalize*>"
  syntax:
    content: protected virtual void Dispose (bool isExplicitDispose);
    parameters:
    - id: isExplicitDispose
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指示这是对释放的显式调用。"
  overload: System.IdentityModel.AsyncResult.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.End(System.IAsyncResult)
  id: End(System.IAsyncResult)
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: End(IAsyncResult)
  nameWithType: AsyncResult.End(IAsyncResult)
  fullName: System.IdentityModel.AsyncResult.End(IAsyncResult)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "调用此方法时`End`函数的异步操作已完成。 它确保异步操作已完成，并且进行一些常见的验证。"
  syntax:
    content: public static void End (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>表示异步操作的状态。</xref:System.IAsyncResult>"
  overload: System.IdentityModel.AsyncResult.End*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.Finalize
  id: Finalize
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: Finalize()
  nameWithType: AsyncResult.Finalize()
  fullName: System.IdentityModel.AsyncResult.Finalize()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "允许<xref href=&quot;System.IdentityModel.AsyncResult&quot;></xref>对象尝试释放资源并在被垃圾回收回收之前执行其他清理操作。"
  syntax:
    content: ~AsyncResult ();
    parameters: []
  overload: System.IdentityModel.AsyncResult.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.AsyncResult.IsCompleted
  id: IsCompleted
  parent: System.IdentityModel.AsyncResult
  langs:
  - csharp
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
  fullName: System.IdentityModel.AsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel
  summary: "获取一个值，该值指示异步操作是否已完成。"
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该操作已完成;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.AsyncResult.IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.IdentityModel.AsyncResult.#ctor
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: AsyncResult()
  nameWithType: AsyncResult.AsyncResult()
  fullName: System.IdentityModel.AsyncResult.AsyncResult()
- uid: System.IdentityModel.AsyncResult.#ctor(System.Object)
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: AsyncResult(Object)
  nameWithType: AsyncResult.AsyncResult(Object)
  fullName: System.IdentityModel.AsyncResult.AsyncResult(Object)
- uid: System.IdentityModel.AsyncResult.#ctor(System.AsyncCallback,System.Object)
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: AsyncResult(AsyncCallback,Object)
  nameWithType: AsyncResult.AsyncResult(AsyncCallback,Object)
  fullName: System.IdentityModel.AsyncResult.AsyncResult(AsyncCallback,Object)
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.IdentityModel.AsyncResult.AsyncState
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
  fullName: System.IdentityModel.AsyncResult.AsyncState
- uid: System.IdentityModel.AsyncResult.AsyncWaitHandle
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
  fullName: System.IdentityModel.AsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.IdentityModel.AsyncResult.Complete(System.Boolean)
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: Complete(Boolean)
  nameWithType: AsyncResult.Complete(Boolean)
  fullName: System.IdentityModel.AsyncResult.Complete(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.AsyncResult.Complete(System.Boolean,System.Exception)
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: Complete(Boolean,Exception)
  nameWithType: AsyncResult.Complete(Boolean,Exception)
  fullName: System.IdentityModel.AsyncResult.Complete(Boolean,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.IdentityModel.AsyncResult.CompletedSynchronously
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
  fullName: System.IdentityModel.AsyncResult.CompletedSynchronously
- uid: System.IdentityModel.AsyncResult.Dispose
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: Dispose()
  nameWithType: AsyncResult.Dispose()
  fullName: System.IdentityModel.AsyncResult.Dispose()
- uid: System.IdentityModel.AsyncResult.Dispose(System.Boolean)
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AsyncResult.Dispose(Boolean)
  fullName: System.IdentityModel.AsyncResult.Dispose(Boolean)
- uid: System.IdentityModel.AsyncResult.End(System.IAsyncResult)
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: End(IAsyncResult)
  nameWithType: AsyncResult.End(IAsyncResult)
  fullName: System.IdentityModel.AsyncResult.End(IAsyncResult)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.IdentityModel.AsyncResult.Finalize
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: Finalize()
  nameWithType: AsyncResult.Finalize()
  fullName: System.IdentityModel.AsyncResult.Finalize()
- uid: System.IdentityModel.AsyncResult.IsCompleted
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
  fullName: System.IdentityModel.AsyncResult.IsCompleted
- uid: System.IdentityModel.AsyncResult.#ctor*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: AsyncResult
  nameWithType: AsyncResult.AsyncResult
- uid: System.IdentityModel.AsyncResult.AsyncState*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: AsyncResult.AsyncState
- uid: System.IdentityModel.AsyncResult.AsyncWaitHandle*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: AsyncResult.AsyncWaitHandle
- uid: System.IdentityModel.AsyncResult.Complete*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: Complete
  nameWithType: AsyncResult.Complete
- uid: System.IdentityModel.AsyncResult.CompletedSynchronously*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: AsyncResult.CompletedSynchronously
- uid: System.IdentityModel.AsyncResult.Dispose*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: Dispose
  nameWithType: AsyncResult.Dispose
- uid: System.IdentityModel.AsyncResult.End*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: End
  nameWithType: AsyncResult.End
- uid: System.IdentityModel.AsyncResult.Finalize*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: Finalize
  nameWithType: AsyncResult.Finalize
- uid: System.IdentityModel.AsyncResult.IsCompleted*
  parent: System.IdentityModel.AsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: AsyncResult.IsCompleted
