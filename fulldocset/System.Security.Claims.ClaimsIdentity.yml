### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.ClaimsIdentity
  id: ClaimsIdentity
  children:
  - System.Security.Claims.ClaimsIdentity.#ctor
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.Actor
  - System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.AuthenticationType
  - System.Security.Claims.ClaimsIdentity.BootstrapContext
  - System.Security.Claims.ClaimsIdentity.Claims
  - System.Security.Claims.ClaimsIdentity.Clone
  - System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  - System.Security.Claims.ClaimsIdentity.CustomSerializationData
  - System.Security.Claims.ClaimsIdentity.DefaultIssuer
  - System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  - System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  - System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  - System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  - System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  - System.Security.Claims.ClaimsIdentity.IsAuthenticated
  - System.Security.Claims.ClaimsIdentity.Label
  - System.Security.Claims.ClaimsIdentity.Name
  - System.Security.Claims.ClaimsIdentity.NameClaimType
  - System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.RoleClaimType
  - System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
  type: Class
  summary: "表示基于声明的标识。"
  remarks: "ClaimsIdentity 类是标识的基于声明; 的具体实现也就是说，标识所描述的声明的集合。 声明是有关实体所做的描述的属性，向右、 颁发者或某些其他质量的该实体的声明。 这样的实体称为使用者的声明。 声明表示由<xref:System.Security.Claims.Claim>类。</xref:System.Security.Claims.Claim> ClaimsIdentity 中包含的声明描述实体表示相应的标识，并且可以用于授权和身份验证决定。 基于声明的访问模型相比，具有许多优点更传统以独占方式依赖于角色的访问模型。 例如，声明可以提供有关它们表示，以更特定的方式可以评估的授权或身份验证的标识多更丰富的信息。       从.NET Framework 4.5 开始，Windows Identity Foundation (WIF) 和基于声明的标识已完全集成到.NET Framework。 也就是说，表示.NET Framework 中的标识的许多类现在从 ClaimsIdentity 派生，描述它们的属性访问集合的声明。 这是不同于以前版本的.NET Framework 中，在其中，实现这些类<xref:System.Security.Principal.IIdentity>直接接口。</xref:System.Security.Principal.IIdentity> 可以通过访问的描述标识的声明集合<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>属性。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> ClaimsIdentity 类提供多种方法用于查找和修改声明，并完全支持语言集成查询 (LINQ)。 在应用程序代码中，ClaimsIdentity 对象通常是通过<xref:System.Security.Claims.ClaimsPrincipal>对象; 例如，返回<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>.</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>的主体</xref:System.Security.Claims.ClaimsPrincipal>访问      1> [!NOTE]&1;><xref:System.Security.Claims.ClaimsPrincipal>类具有<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>以及属性。</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal> 在大多数情况下，你应访问通过用户的声明<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>集合而不是通过<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName> 你将需要访问的单个 ClaimsIdentity 仅在情况下，其中主体包含多个 ClaimsIdentity，你需要评估或修改特定的标识声明。      1> [!IMPORTANT]&1;> 添加或删除从声明<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合，调用方必须具有完全信任。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>       在基于声明的模型中，<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>属性和<xref:System.Security.Principal.IPrincipal.IsInRole%28System.String%29?displayProperty=fullName>方法实现通过计算包含由标识的声明。</xref:System.Security.Principal.IPrincipal.IsInRole%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> 基于声明的模型中的基实现提供的<xref:System.Security.Claims.ClaimsIdentity.Name%2A?displayProperty=fullName>属性和<xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A?displayProperty=fullName>方法。</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity.Name%2A?displayProperty=fullName> <xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>属性使您能够指定应该用于评估在执行这些操作时，包含由标识的声明的声明类型。</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>       通过支持委派方案<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>和<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>属性。</xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ClaimsIdentity : System.Security.Principal.IIdentity
  inheritance:
  - System.Object
  implements:
  - System.Security.Principal.IIdentity
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  id: '#ctor'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>使用空的类声明集合。"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: public ClaimsIdentity ();
    parameters: []
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>类使用的枚举的集合<xref href=&quot;System.Security.Claims.Claim&quot;></xref>对象。"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化从`claims`参数。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.Actor%2A>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用来填充的声明标识声明。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public ClaimsIdentity (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "要添加。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(SerializationInfo)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>从序列化流使用创建的类<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>。"
  syntax:
    content: protected ClaimsIdentity (System.Runtime.Serialization.SerializationInfo info);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "序列化的数据。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected ClaimsIdentity (System.Security.Claims.ClaimsIdentity other);
    parameters:
    - id: other
      type: System.Security.Claims.ClaimsIdentity
      description: "要添加。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  id: '#ctor(System.Security.Principal.IIdentity)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>类使用从指定的<xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity>的名称和身份验证类型"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.Actor`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`identity.AuthenticationType`(<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 属性使用。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.BootStrapContext`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|如果`identity`是可从<xref:System.Security.Claims.ClaimsIdentity>，从声明`identity`添加到新的实例; 否则为空集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.Label`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|如果`identity`不可从<xref:System.Security.Claims.ClaimsIdentity>，不是`null`，并且具有<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>属性不是`null`; 名称声明添加到使用的值的新实例<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>属性。</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> **注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.NameClaimType`使用属性; 否则，使用<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|如果`identity`是可从<xref:System.Security.Claims.ClaimsIdentity>的值`identity.RoleClaimType`属性; 否则为将使用，<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>使用。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "从基于新的标识声明标识。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>使用空的类声明集合和指定的身份验证类型。"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`authenticationType`参数。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`参数是`null`或空字符串，该属性设置为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public ClaimsIdentity (string authenticationType);
    parameters:
    - id: authenticationType
      type: System.String
      description: "使用的身份验证类型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>具有指定的声明和身份验证类型的类。"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`authenticationType`参数。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`参数是`null`或空字符串，该属性设置为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化从`claims`参数。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>.|  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>.|</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType></xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Name%2A></xref:System.Security.Claims.ClaimsIdentity.Label%2A></xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A></xref:System.Security.Claims.ClaimsIdentity.Claims%2A></xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用来填充的声明标识声明。"
    - id: authenticationType
      type: System.String
      description: "使用的身份验证类型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: '#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>从序列化流使用创建的类<xref href=&quot;System.Runtime.Serialization.ISerializable&quot;> </xref>。"
  syntax:
    content: protected ClaimsIdentity (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "序列化的数据。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "序列化的上下文。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>类使用指定的声明和指定<xref:System.Security.Principal.IIdentity>.</xref:System.Security.Principal.IIdentity>"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.Actor`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`authenticationType`参数。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`参数是`null`或空字符串，值`identity.AuthenticationType`(<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 属性使用。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.BootStrapContext`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化从`claims`参数。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> 如果`identity`是可从<xref:System.Security.Claims.ClaimsIdentity>，从声明`identity`添加到之前所指定的新实例`claims`参数。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.Label`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|如果`identity`不可从<xref:System.Security.Claims.ClaimsIdentity>，不是`null`，并且具有<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>属性不是`null`; 名称声明添加到使用的值的新实例<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>属性。</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> **注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.NameClaimType`使用属性; 否则，使用<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|如果`identity`是可从<xref:System.Security.Claims.ClaimsIdentity>的值`identity.RoleClaimType`属性; 否则为将使用，<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>使用。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "从基于新的标识声明标识。"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用来填充的声明标识声明。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>用指定的身份验证类型、 名称声明类型和角色声明类型。"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`authenticationType`参数。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`参数是`null`或空字符串，该属性设置为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|空集合。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|值`nameType`参数。</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> 如果`nameType`参数为 null 或空字符串，该属性设置为<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|值`roleType`参数。</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> 如果`roleType`参数为 null 或空字符串，该属性设置为<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>"
  syntax:
    content: public ClaimsIdentity (string authenticationType, string nameType, string roleType);
    parameters:
    - id: authenticationType
      type: System.String
      description: "使用的身份验证类型。"
    - id: nameType
      type: System.String
      description: "要使用的名称声明的声明类型。"
    - id: roleType
      type: System.String
      description: "要使用的角色声明的声明类型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>用指定的声明、 身份验证类型、 名称声明类型和角色声明类型。"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|值`authenticationType`参数。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`参数是`null`或空字符串，该属性设置为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化从`claims`参数。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|`null`.|  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|**注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|值`nameType`参数。</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> 但是，如果`nameType`参数是`null`或空字符串，该属性设置为<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|值`roleClaimType`参数。</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> 但是，如果`roleClaimType`参数是`null`或空字符串，该属性设置为<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>"
  syntax:
    content: public ClaimsIdentity (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用来填充的声明标识声明。"
    - id: authenticationType
      type: System.String
      description: "使用的身份验证类型。"
    - id: nameType
      type: System.String
      description: "要使用的名称声明的声明类型。"
    - id: roleType
      type: System.String
      description: "要使用的角色声明的声明类型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  id: '#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)'
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>从指定的类<xref:System.Security.Principal.IIdentity>使用指定的声明、 身份验证类型、 名称声明类型和角色声明类型。</xref:System.Security.Principal.IIdentity>"
  remarks: "下表显示<xref:System.Security.Claims.ClaimsIdentity>类</xref:System.Security.Claims.ClaimsIdentity>的实例的初始属性的值      |属性 |值 |  |--------------|-----------|  |<xref:System.Security.Claims.ClaimsIdentity.Actor%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.Actor`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>|`authenticationType`参数。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Actor%2A> 如果`authenticationType`参数是`null`或空字符串，值`identity.AuthenticationType`(<xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName>) 属性使用。 |  |<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.BootStrapContext`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>|初始化从`claims`参数。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A> </xref:System.Security.Principal.IIdentity.AuthenticationType%2A?displayProperty=fullName> 如果`identity`是可从<xref:System.Security.Claims.ClaimsIdentity>，从声明`identity`添加到之前所指定的新实例`claims`参数。 |  |<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>|**注意︰**访问时，<xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A>属性的值基于返回<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性的值。 |  |<xref:System.Security.Claims.ClaimsIdentity.Label%2A>|如果`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.Label`属性; 否则为`null`。 |  |<xref:System.Security.Claims.ClaimsIdentity.Name%2A>|如果`identity`不可从<xref:System.Security.Claims.ClaimsIdentity>，不是`null`，并且具有<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>属性不是`null`; 名称声明添加到使用的值的新实例<xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName>属性。</xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Principal.IIdentity.Name%2A?displayProperty=fullName> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity.Label%2A> </xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity.IsAuthenticated%2A> </xref:System.Security.Claims.ClaimsIdentity> **注意︰** <xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性的值的访问时，对<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>和<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合返回基于。 |  |<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>|值`nameType`参数。</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Claims%2A> </xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.Name%2A> 但是，如果值`nameType`参数是`null`或空字符串和`identity`从<xref:System.Security.Claims.ClaimsIdentity>，可分配的值`identity.NameClaimType`使用属性; 否则，使用<xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType>。 |  |<xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A>|值`roleClaimType`参数。</xref:System.Security.Claims.ClaimsIdentity.RoleClaimType%2A> </xref:System.Security.Claims.ClaimsIdentity.DefaultNameClaimType> </xref:System.Security.Claims.ClaimsIdentity> 但是，如果值`roleClaimType`参数是`null`或空字符串，并标识可从<xref:System.Security.Claims.ClaimsIdentity>的值`identity.RoleClaimType`属性; 否则为将使用，<xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType>使用。 |</xref:System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType> </xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public ClaimsIdentity (System.Security.Principal.IIdentity identity, System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims, string authenticationType, string nameType, string roleType);
    parameters:
    - id: identity
      type: System.Security.Principal.IIdentity
      description: "从基于新的标识声明标识。"
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "用来填充新的声明标识声明。"
    - id: authenticationType
      type: System.String
      description: "使用的身份验证类型。"
    - id: nameType
      type: System.String
      description: "要使用的名称声明的声明类型。"
    - id: roleType
      type: System.String
      description: "要使用的角色声明的声明类型。"
  overload: System.Security.Claims.ClaimsIdentity.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Actor
  id: Actor
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取或设置已授予委派权限，调用方的标识。"
  remarks: "应用程序可以访问委托链导致当前的调用中，通过以递归方式检查 Actor 属性。 可以通过访问的令牌的名义委托调用<xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>属性。</xref:System.Security.Claims.ClaimsIdentity.BootstrapContext%2A>"
  syntax:
    content: public System.Security.Claims.ClaimsIdentity Actor { get; set; }
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "调用方授予委派权限。"
  overload: System.Security.Claims.ClaimsIdentity.Actor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "试图将属性设置为当前实例时发生。"
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  id: AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "将添加到此单个声明声明标识。"
  remarks: "检查声明和使用者是否不同于此声明标识，<xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>方法调用与此声明作为参数使用正确的使用者创建新声明的标识。</xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>       此方法具有`SecurityCritical`应用于哪些实体可以添加为标识的声明的控件的属性。 进一步关闭管道，授权决策都是基于在上中存在的声明<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void AddClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "要添加的声明。"
  overload: System.Security.Claims.ClaimsIdentity.AddClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>claim</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  id: AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "将添加到此声明的列表声明标识。"
  remarks: "检查每个声明和使用者是否不同于此声明标识，<xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>方法调用与此声明作为参数使用正确的使用者创建新声明的标识。</xref:System.Security.Claims.Claim.Clone%28System.Security.Claims.ClaimsIdentity%29?displayProperty=fullName>       此方法具有`SecurityCritical`应用于哪些实体可以添加为标识的声明的控件的属性。 进一步关闭管道，授权决策都是基于在上中存在的声明<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void AddClaims (System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> claims);
    parameters:
    - id: claims
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "要添加的声明。"
  overload: System.Security.Claims.ClaimsIdentity.AddClaims*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>claims</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  id: AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取身份验证类型。"
  remarks: "通常由<xref:System.Security.Claims.AuthenticationTypes>类</xref:System.Security.Claims.AuthenticationTypes>定义的值之一"
  syntax:
    content: public virtual string AuthenticationType { get; }
    return:
      type: System.String
      description: "身份验证类型。"
  overload: System.Security.Claims.ClaimsIdentity.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  id: BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取或设置用于创建令牌此声明标识。"
  remarks: "The underlying object is an instance of the <xref:System.IdentityModel.Tokens.BootstrapContext?displayProperty=fullName> class.  \n  \n Set the `saveBootstrapContext` attribute on either the [\\&lt;identityConfiguration\\&gt;](../Topic/%3CidentityConfiguration%3E.md) or the [\\&lt;securityTokenHandlerConfiguration\\&gt;](../Topic/%3CsecurityTokenHandlerConfiguration%3E.md) element in a configuration file to specify whether the token used to generate the <xref:System.Security.Claims.ClaimsIdentity> should be preserved in the BootstrapContext property.  \n  \n If the BootstrapContext property is not `null`, applications can access the original token and the claims it produced through the properties and methods of the <xref:System.IdentityModel.Tokens.BootstrapContext?displayProperty=fullName> class."
  syntax:
    content: public object BootstrapContext { get; set; }
    return:
      type: System.Object
      description: "启动上下文。"
  overload: System.Security.Claims.ClaimsIdentity.BootstrapContext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Claims
  id: Claims
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取与关联的声明此声明标识。"
  remarks: "集合可能包含的条目，将`null`。       实质上是包含在声明集合中的声明描述由<xref:System.Security.Claims.ClaimsIdentity>.</xref:System.Security.Claims.ClaimsIdentity>实体 介绍属性和由实体所拥有的权限并可以通过应用程序能够判断身份验证和授权检查这些声明。      1> [!NOTE]&1;><xref:System.Security.Claims.ClaimsPrincipal>类具有<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A>以及属性。</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A> </xref:System.Security.Claims.ClaimsPrincipal> 在大多数情况下，你应访问通过用户的声明<xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName>集合而不是通过声明集合。</xref:System.Security.Claims.ClaimsPrincipal.Claims%2A?displayProperty=fullName> 你将需要访问个人的声明<xref:System.Security.Claims.ClaimsIdentity>仅在其中主体包含多个情况下<xref:System.Security.Claims.ClaimsIdentity>并且需要进行评估或修改特定标识。</xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsIdentity>"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> Claims { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "与关联的声明集合此声明标识。"
  overload: System.Security.Claims.ClaimsIdentity.Claims*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Clone
  id: Clone
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "返回一个新<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>从复制此声明标识。"
  syntax:
    content: public virtual System.Security.Claims.ClaimsIdentity Clone ();
    parameters: []
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "当前实例的副本。"
  overload: System.Security.Claims.ClaimsIdentity.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  id: CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(BinaryReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual System.Security.Claims.Claim CreateClaim (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "要添加。"
    return:
      type: System.Security.Claims.Claim
      description: "要添加。"
  overload: System.Security.Claims.ClaimsIdentity.CreateClaim*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "要添加。"
  overload: System.Security.Claims.ClaimsIdentity.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  id: DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "默认颁发者;&quot;本地机构&quot;。"
  syntax:
    content: public const string DefaultIssuer;
    return:
      type: System.String
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  id: DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "默认名称声明类型;<xref href=&quot;System.Security.Claims.ClaimTypes.Name&quot;></xref>."
  syntax:
    content: public const string DefaultNameClaimType;
    return:
      type: System.String
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  id: DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "默认角色声明类型;<xref href=&quot;System.Security.Claims.ClaimTypes.Role&quot;></xref>."
  syntax:
    content: public const string DefaultRoleClaimType;
    return:
      type: System.String
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  id: FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "检索所有指定的谓词匹配的声明。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "执行匹配逻辑的函数。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "匹配的声明。 列表是只读的。"
  overload: System.Security.Claims.ClaimsIdentity.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  id: FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "检索所有具有指定的声明类型的声明。"
  remarks: "使用序号大小写区分上进行比较`type`。"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<System.Security.Claims.Claim> FindAll (string type);
    parameters:
    - id: type
      type: System.String
      description: "根据其匹配声明声明类型。"
    return:
      type: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
      description: "匹配的声明。 列表是只读的。"
  overload: System.Security.Claims.ClaimsIdentity.FindAll*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  id: FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "检索由指定谓词匹配的第一个声明。"
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "执行匹配逻辑的函数。"
    return:
      type: System.Security.Claims.Claim
      description: "第一个匹配声明或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果未找到匹配。"
  overload: System.Security.Claims.ClaimsIdentity.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  id: FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "检索与指定的声明类型的第一个声明。"
  syntax:
    content: public virtual System.Security.Claims.Claim FindFirst (string type);
    parameters:
    - id: type
      type: System.String
      description: "要匹配的声明类型。"
    return:
      type: System.Security.Claims.Claim
      description: "第一个匹配声明或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果未找到匹配。"
  overload: System.Security.Claims.ClaimsIdentity.FindFirst*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "填充<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>所需数据来序列化当前<xref href=&quot;System.Security.Claims.ClaimsIdentity&quot;></xref>对象。"
  syntax:
    content: protected virtual void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "要填充数据的对象。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "此序列化的目标。 Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Claims.ClaimsIdentity.GetObjectData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>info</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  id: HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(Predicate<Claim>)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "确定是否此声明标识具有由指定谓词匹配的声明。"
  syntax:
    content: public virtual bool HasClaim (Predicate<System.Security.Claims.Claim> match);
    parameters:
    - id: match
      type: System.Predicate{System.Security.Claims.Claim}
      description: "执行匹配逻辑的函数。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果存在匹配的声明;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Claims.ClaimsIdentity.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>match</code>is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  id: HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: HasClaim(String,String)
  nameWithType: ClaimsIdentity.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "确定是否此声明标识具有声明类型和值与指定的声明。"
  remarks: "不会检查<xref:System.Security.Claims.Claim.Issuer%2A>或<xref:System.Security.Claims.Claim.OriginalIssuer%2A>属性。</xref:System.Security.Claims.Claim.OriginalIssuer%2A> </xref:System.Security.Claims.Claim.Issuer%2A> 使用序号，区分大小写值; 在进行比较大小写区分类型。"
  syntax:
    content: public virtual bool HasClaim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "要匹配的声明的类型。"
    - id: value
      type: System.String
      description: "要匹配的声明的值。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果找到匹配项;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Claims.ClaimsIdentity.HasClaim*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is **null**.       -or-       <code>value</code> is **null**."
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取一个值，该值指示是否已验证标识。"
  remarks: '`true`如果<xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>属性不是`null`或空字符串。</xref:System.Security.Claims.ClaimsIdentity.AuthenticationType%2A>'
  syntax:
    content: public virtual bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果标识已经过身份验证;否则为**false**。"
  overload: System.Security.Claims.ClaimsIdentity.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Label
  id: Label
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取或设置此声明标识的标签。"
  syntax:
    content: public string Label { get; set; }
    return:
      type: System.String
      description: "标签。"
  overload: System.Security.Claims.ClaimsIdentity.Label*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.Name
  id: Name
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取此名称声明标识。"
  remarks: "返回的值类型的名称相匹配的第一个声明的声明类型在中设置<xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A>属性。</xref:System.Security.Claims.ClaimsIdentity.NameClaimType%2A> 如果没有声明找到匹配的名称声明类型，将返回`null`。"
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "名称或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Claims.ClaimsIdentity.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  id: NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取用于确定哪些声明提供的值的声明类型<xref:System.Security.Claims.ClaimsIdentity.Name*>属性的声明标识。</xref:System.Security.Claims.ClaimsIdentity.Name*>"
  remarks: "NameClaimType 属性指定的声明类型 (<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>) 用于提供此标识的名称。</xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> 通过访问名称<xref:System.Security.Claims.ClaimsIdentity.Name%2A>属性。</xref:System.Security.Claims.ClaimsIdentity.Name%2A>       构造函数设置此属性。"
  syntax:
    content: public string NameClaimType { get; }
    return:
      type: System.String
      description: "名称声明类型。"
  overload: System.Security.Claims.ClaimsIdentity.NameClaimType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  id: RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "尝试移除的声明标识的声明。"
  remarks: "很可能无法删除该声明，因为它不由标识拥有。 例如，这会出现此情况的主体拥有的角色声明。 与不同<xref:System.Security.Claims.ClaimsIdentity.TryRemoveClaim%2A>方法，返回一个布尔值，该值指示是否已移除的声明，如果无法删除该声明 RemoveClaim 引发异常由对象引用匹配指定的声明 (<xref:System.Object.ReferenceEquals%2A>)。</xref:System.Object.ReferenceEquals%2A> </xref:System.Security.Claims.ClaimsIdentity.TryRemoveClaim%2A>       此方法具有`SecurityCritical`应用于哪些实体，声明可移除标识控件的属性。 进一步关闭管道，授权决策都是基于在上中存在的声明<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual void RemoveClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "要删除的声明。"
  overload: System.Security.Claims.ClaimsIdentity.RemoveClaim*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "无法删除该声明。"
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  id: RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取将解释为在此声明之间的.NET Framework 角色声明标识的声明类型。"
  remarks: "角色声明类型是声明类型 (<xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName>) 计算此标识时，使用<xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>方法。</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName> </xref:System.Security.Claims.Claim.Type%2A?displayProperty=fullName> <xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName>调用方法来确定当前的主体是否属于指定角色。</xref:System.Security.Claims.ClaimsPrincipal.IsInRole%28System.String%29?displayProperty=fullName> 基于声明的模型将扩展此检查用于提供主体的声明。 A<xref:System.Security.Claims.ClaimsPrincipal>对象可以包含一个或多个<xref:System.Security.Claims.ClaimsIdentity>对象和每个标识对象可以包含多个<xref:System.Security.Claims.Claim>对象。</xref:System.Security.Claims.Claim> </xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.ClaimsPrincipal> RoleClaimType 属性指定应该用于计算此时为角色提供的值的声明的声明类型<xref:System.Security.Claims.ClaimsIdentity>对象。</xref:System.Security.Claims.ClaimsIdentity> 该属性设置构造函数中。 常用的值是<xref:System.Security.Claims.ClaimTypes.Role?displayProperty=fullName>.</xref:System.Security.Claims.ClaimTypes.Role?displayProperty=fullName>"
  syntax:
    content: public string RoleClaimType { get; }
    return:
      type: System.String
      description: "角色声明类型。"
  overload: System.Security.Claims.ClaimsIdentity.RoleClaimType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  id: TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(Claim)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "尝试移除的声明标识的声明。"
  remarks: "很可能无法删除该声明，因为它不由标识拥有。 例如，这会出现此情况的主体拥有的角色声明。       指定的声明匹配的对象引用 (<xref:System.Object.ReferenceEquals%2A>)。</xref:System.Object.ReferenceEquals%2A>       此方法具有`SecurityCritical`应用于哪些实体，声明可移除标识控件的属性。 进一步关闭管道，授权决策都是基于在上中存在的声明<xref:System.Security.Claims.ClaimsIdentity.Claims%2A>集合。</xref:System.Security.Claims.ClaimsIdentity.Claims%2A>"
  syntax:
    content: public virtual bool TryRemoveClaim (System.Security.Claims.Claim claim);
    parameters:
    - id: claim
      type: System.Security.Claims.Claim
      description: "要删除的声明。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成功移除了声明;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Claims.ClaimsIdentity.TryRemoveClaim*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "要添加。"
  overload: System.Security.Claims.ClaimsIdentity.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "要添加。"
    - id: userData
      type: System.Byte[]
      description: "要添加。"
  overload: System.Security.Claims.ClaimsIdentity.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Claims.ClaimsIdentity.#ctor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity()
  nameWithType: ClaimsIdentity.ClaimsIdentity()
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity()
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>)
- uid: System.Collections.Generic.IEnumerable{System.Security.Claims.Claim}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Claim>
  nameWithType: IEnumerable<Claim>
  fullName: System.Collections.Generic.IEnumerable<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(BinaryReader)
  nameWithType: ClaimsIdentity.ClaimsIdentity(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(SerializationInfo)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(ClaimsIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity)
- uid: System.Security.Principal.IIdentity
  parent: System.Security.Principal
  isExternal: true
  name: IIdentity
  nameWithType: IIdentity
  fullName: System.Security.Principal.IIdentity
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IEnumerable<Claim>,String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.#ctor(System.Security.Principal.IIdentity,System.Collections.Generic.IEnumerable{System.Security.Claims.Claim},System.String,System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  nameWithType: ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
  fullName: System.Security.Claims.ClaimsIdentity.ClaimsIdentity(IIdentity,IEnumerable<Claim>,String,String,String)
- uid: System.Security.Claims.ClaimsIdentity.Actor
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
  fullName: System.Security.Claims.ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.AddClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim(Claim)
  nameWithType: ClaimsIdentity.AddClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaim(Claim)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.ClaimsIdentity.AddClaims(System.Collections.Generic.IEnumerable{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaims(IEnumerable<Claim>)
  nameWithType: ClaimsIdentity.AddClaims(IEnumerable<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.AddClaims(IEnumerable<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
  fullName: System.Security.Claims.ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
  fullName: System.Security.Claims.ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.Claims
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
  fullName: System.Security.Claims.ClaimsIdentity.Claims
- uid: System.Security.Claims.ClaimsIdentity.Clone
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone()
  nameWithType: ClaimsIdentity.Clone()
  fullName: System.Security.Claims.ClaimsIdentity.Clone()
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim(System.IO.BinaryReader)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CreateClaim(BinaryReader)
  nameWithType: ClaimsIdentity.CreateClaim(BinaryReader)
  fullName: System.Security.Claims.ClaimsIdentity.CreateClaim(BinaryReader)
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
  fullName: System.Security.Claims.ClaimsIdentity.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.ClaimsIdentity.DefaultIssuer
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultIssuer
  nameWithType: ClaimsIdentity.DefaultIssuer
  fullName: System.Security.Claims.ClaimsIdentity.DefaultIssuer
- uid: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultNameClaimType
  nameWithType: ClaimsIdentity.DefaultNameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultNameClaimType
- uid: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: DefaultRoleClaimType
  nameWithType: ClaimsIdentity.DefaultRoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.DefaultRoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindAll(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(Predicate<Claim>)
- uid: System.Predicate{System.Security.Claims.Claim}
  parent: System
  isExternal: true
  name: Predicate<Claim>
  nameWithType: Predicate<Claim>
  fullName: System.Predicate<System.Security.Claims.Claim>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: Predicate<System.Security.Claims.Claim>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.Claim
    name: Claim
    nameWithType: Claim
    fullName: Claim
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.ClaimsIdentity.FindAll(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll(String)
  nameWithType: ClaimsIdentity.FindAll(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindAll(String)
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst(Predicate<Claim>)
  nameWithType: ClaimsIdentity.FindFirst(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(Predicate<Claim>)
- uid: System.Security.Claims.ClaimsIdentity.FindFirst(System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst(String)
  nameWithType: ClaimsIdentity.FindFirst(String)
  fullName: System.Security.Claims.ClaimsIdentity.FindFirst(String)
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Security.Claims.ClaimsIdentity.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.Predicate{System.Security.Claims.Claim})
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim(Predicate<Claim>)
  nameWithType: ClaimsIdentity.HasClaim(Predicate<Claim>)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(Predicate<Claim>)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Claims.ClaimsIdentity.HasClaim(System.String,System.String)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim(String,String)
  nameWithType: ClaimsIdentity.HasClaim(String,String)
  fullName: System.Security.Claims.ClaimsIdentity.HasClaim(String,String)
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
  fullName: System.Security.Claims.ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Label
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
  fullName: System.Security.Claims.ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.Name
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
  fullName: System.Security.Claims.ClaimsIdentity.Name
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
  fullName: System.Security.Claims.ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim(Claim)
  nameWithType: ClaimsIdentity.RemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.RemoveClaim(Claim)
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
  fullName: System.Security.Claims.ClaimsIdentity.RoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(System.Security.Claims.Claim)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim(Claim)
  nameWithType: ClaimsIdentity.TryRemoveClaim(Claim)
  fullName: System.Security.Claims.ClaimsIdentity.TryRemoveClaim(Claim)
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.ClaimsIdentity.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.ClaimsIdentity.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.ClaimsIdentity.#ctor*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity.ClaimsIdentity
- uid: System.Security.Claims.ClaimsIdentity.Actor*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Actor
  nameWithType: ClaimsIdentity.Actor
- uid: System.Security.Claims.ClaimsIdentity.AddClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaim
  nameWithType: ClaimsIdentity.AddClaim
- uid: System.Security.Claims.ClaimsIdentity.AddClaims*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AddClaims
  nameWithType: ClaimsIdentity.AddClaims
- uid: System.Security.Claims.ClaimsIdentity.AuthenticationType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: AuthenticationType
  nameWithType: ClaimsIdentity.AuthenticationType
- uid: System.Security.Claims.ClaimsIdentity.BootstrapContext*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: BootstrapContext
  nameWithType: ClaimsIdentity.BootstrapContext
- uid: System.Security.Claims.ClaimsIdentity.Claims*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Claims
  nameWithType: ClaimsIdentity.Claims
- uid: System.Security.Claims.ClaimsIdentity.Clone*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Clone
  nameWithType: ClaimsIdentity.Clone
- uid: System.Security.Claims.ClaimsIdentity.CreateClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CreateClaim
  nameWithType: ClaimsIdentity.CreateClaim
- uid: System.Security.Claims.ClaimsIdentity.CustomSerializationData*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: CustomSerializationData
  nameWithType: ClaimsIdentity.CustomSerializationData
- uid: System.Security.Claims.ClaimsIdentity.FindAll*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindAll
  nameWithType: ClaimsIdentity.FindAll
- uid: System.Security.Claims.ClaimsIdentity.FindFirst*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: FindFirst
  nameWithType: ClaimsIdentity.FindFirst
- uid: System.Security.Claims.ClaimsIdentity.GetObjectData*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: GetObjectData
  nameWithType: ClaimsIdentity.GetObjectData
- uid: System.Security.Claims.ClaimsIdentity.HasClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: HasClaim
  nameWithType: ClaimsIdentity.HasClaim
- uid: System.Security.Claims.ClaimsIdentity.IsAuthenticated*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: IsAuthenticated
  nameWithType: ClaimsIdentity.IsAuthenticated
- uid: System.Security.Claims.ClaimsIdentity.Label*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Label
  nameWithType: ClaimsIdentity.Label
- uid: System.Security.Claims.ClaimsIdentity.Name*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: Name
  nameWithType: ClaimsIdentity.Name
- uid: System.Security.Claims.ClaimsIdentity.NameClaimType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: NameClaimType
  nameWithType: ClaimsIdentity.NameClaimType
- uid: System.Security.Claims.ClaimsIdentity.RemoveClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RemoveClaim
  nameWithType: ClaimsIdentity.RemoveClaim
- uid: System.Security.Claims.ClaimsIdentity.RoleClaimType*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: RoleClaimType
  nameWithType: ClaimsIdentity.RoleClaimType
- uid: System.Security.Claims.ClaimsIdentity.TryRemoveClaim*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: TryRemoveClaim
  nameWithType: ClaimsIdentity.TryRemoveClaim
- uid: System.Security.Claims.ClaimsIdentity.WriteTo*
  parent: System.Security.Claims.ClaimsIdentity
  isExternal: false
  name: WriteTo
  nameWithType: ClaimsIdentity.WriteTo
