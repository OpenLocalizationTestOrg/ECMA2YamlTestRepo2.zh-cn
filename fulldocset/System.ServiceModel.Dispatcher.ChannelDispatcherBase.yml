### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  id: ChannelDispatcherBase
  children:
  - System.ServiceModel.Dispatcher.ChannelDispatcherBase.#ctor
  - System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput
  - System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)
  - System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host
  - System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener
  langs:
  - csharp
  name: ChannelDispatcherBase
  nameWithType: ChannelDispatcherBase
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  type: Class
  summary: "通道调度程序接受通道并将它们与服务关联的抽象基类。"
  remarks: "这由开发人员想要保留[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]编程模型同时又要替换系统提供的运行时。 此类应用程序将请求从通道的消息，并且直接使用用户定义的调度程序对其进行处理。 若要使用 ChannelDispatcherBase，创建一个类派生自它、 扩展<xref:System.ServiceModel.ServiceHost>和重写<xref:System.ServiceModel.ServiceHostBase.InitializeRuntime%2A>，添加到<xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A>。</xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A> ChannelDispatcherBase 从派生类的实例</xref:System.ServiceModel.ServiceHostBase.InitializeRuntime%2A></xref:System.ServiceModel.ServiceHost>       <xref:System.ServiceModel.Channels.IChannelListener>和<xref:System.ServiceModel.ServiceHost>、 关联与 ChannelDispatcherBase 对象都可用于检查或修改通过<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener%2A>和<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host%2A>分别。</xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener%2A> </xref:System.ServiceModel.ServiceHost> </xref:System.ServiceModel.Channels.IChannelListener>       <xref:System.ServiceModel.ServiceHost>调用<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach%28System.ServiceModel.ServiceHostBase%29>或<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach%28System.ServiceModel.ServiceHostBase%29>方法时添加或删除 ChannelDispatcherBase 项从其<xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A>集合。</xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach%28System.ServiceModel.ServiceHostBase%29> </xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach%28System.ServiceModel.ServiceHostBase%29></xref:System.ServiceModel.ServiceHost>       <xref:System.ServiceModel.ServiceHost>调用<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput%2A>期间关闭 InstanceContexts 前关闭。</xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput%2A></xref:System.ServiceModel.ServiceHost> [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]使用此调用来关闭数据报通道，并等待所有的消息可用于访问 InstanceContext。"
  syntax:
    content: 'public abstract class ChannelDispatcherBase : System.ServiceModel.Channels.CommunicationObject'
  inheritance:
  - System.ServiceModel.Channels.CommunicationObject
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  langs:
  - csharp
  name: ChannelDispatcherBase()
  nameWithType: ChannelDispatcherBase.ChannelDispatcherBase()
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.ChannelDispatcherBase()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.Dispatcher.ChannelDispatcherBase&quot;></xref>类。"
  syntax:
    content: protected ChannelDispatcherBase ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.ChannelDispatcherBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)
  id: Attach(System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  langs:
  - csharp
  name: Attach(ServiceHostBase)
  nameWithType: ChannelDispatcherBase.Attach(ServiceHostBase)
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "当在派生类中重写，将通道调度程序附加到特定的主机。"
  remarks: "时，才可以设置此方法的实例<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>处于<xref:System.ServiceModel.CommunicationState>状态，因为这是唯一一个可变且不被释放的状态。</xref:System.ServiceModel.CommunicationState> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher>       A<xref:System.ServiceModel.ServiceHost>调用此方法时<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>添加到其<xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A>集合。</xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase> </xref:System.ServiceModel.ServiceHost>  这使<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>有机会挂钩事件并检查<xref:System.ServiceModel.ServiceHost>，并提供应从返回的值<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host%2A>属性。</xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host%2A> </xref:System.ServiceModel.ServiceHost> </xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>"
  syntax:
    content: protected virtual void Attach (System.ServiceModel.ServiceHostBase host);
    parameters:
    - id: host
      type: System.ServiceModel.ServiceHostBase
      description: "<xref href=&quot;System.ServiceModel.ServiceHostBase&quot;> </xref>服务。"
  overload: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>host</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "通信对象处于<xref:System.ServiceModel.CommunicationState>或<xref:System.ServiceModel.CommunicationState>状态，或者主机已设置。</xref:System.ServiceModel.CommunicationState> </xref:System.ServiceModel.CommunicationState>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "通信对象处于<xref:System.ServiceModel.CommunicationState>或<xref:System.ServiceModel.CommunicationState>状态。</xref:System.ServiceModel.CommunicationState> </xref:System.ServiceModel.CommunicationState>"
  - type: System.ServiceModel.CommunicationObjectFaultedException
    commentId: T:System.ServiceModel.CommunicationObjectFaultedException
    description: "通信对象处于<xref:System.ServiceModel.CommunicationState>状态。</xref:System.ServiceModel.CommunicationState>"
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput
  id: CloseInput
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  langs:
  - csharp
  name: CloseInput()
  nameWithType: ChannelDispatcherBase.CloseInput()
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "当在派生类中重写，移除与通道调度程序关联的终结点调度程序。"
  remarks: "<xref:System.ServiceModel.ServiceHost>在关闭让调度程序有机会排出消息过程中调用此方法。</xref:System.ServiceModel.ServiceHost> <xref:System.ServiceModel.Dispatcher.ChannelDispatcher>使用此调用来关闭数据报通道。</xref:System.ServiceModel.Dispatcher.ChannelDispatcher>"
  syntax:
    content: public virtual void CloseInput ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)
  id: Detach(System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  langs:
  - csharp
  name: Detach(ServiceHostBase)
  nameWithType: ChannelDispatcherBase.Detach(ServiceHostBase)
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(ServiceHostBase)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "当在派生类中重写，将分离与特定主机的通道调度程序。"
  remarks: "<xref:System.ServiceModel.ServiceHostBase>时才可以分离的实例<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>处于<xref:System.ServiceModel.CommunicationState>状态，因为这是唯一一个可变且不被释放的状态。</xref:System.ServiceModel.CommunicationState> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> </xref:System.ServiceModel.ServiceHostBase>       应设置<xref:System.ServiceModel.ServiceHostBase>与通道调度程序到`null`。</xref:System.ServiceModel.ServiceHostBase>       <xref:System.ServiceModel.ServiceHost>调用此方法时<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>从删除其<xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A>集合。</xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase></xref:System.ServiceModel.ServiceHost> 这样，<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>有机会解除挂钩事件并检查<xref:System.ServiceModel.ServiceHost>.</xref:System.ServiceModel.ServiceHost> </xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>"
  syntax:
    content: protected virtual void Detach (System.ServiceModel.ServiceHostBase host);
    parameters:
    - id: host
      type: System.ServiceModel.ServiceHostBase
      description: "The <xref href=&quot;System.ServiceModel.ServiceHostBase&quot;></xref>."
  overload: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>host</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "通信对象处于<xref:System.ServiceModel.CommunicationState>或<xref:System.ServiceModel.CommunicationState>状态，或者主机已设置。</xref:System.ServiceModel.CommunicationState> </xref:System.ServiceModel.CommunicationState>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "通信对象处于<xref:System.ServiceModel.CommunicationState>或<xref:System.ServiceModel.CommunicationState>状态。</xref:System.ServiceModel.CommunicationState> </xref:System.ServiceModel.CommunicationState>"
  - type: System.ServiceModel.CommunicationObjectFaultedException
    commentId: T:System.ServiceModel.CommunicationObjectFaultedException
    description: "通信对象处于<xref:System.ServiceModel.CommunicationState>状态。</xref:System.ServiceModel.CommunicationState>"
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host
  id: Host
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  langs:
  - csharp
  name: Host
  nameWithType: ChannelDispatcherBase.Host
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "当在派生类中重写，获取与通道调度程序关联的服务主机。"
  remarks: "每个<xref:System.ServiceModel.ServiceHost>对象可以具有许多<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>对象，每个替换为其他关联<xref:System.ServiceModel.Channels.IChannelListener>为该服务。</xref:System.ServiceModel.Channels.IChannelListener> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher> </xref:System.ServiceModel.ServiceHost> 主机都会保存这些列表<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>中的对象<xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A>集合。</xref:System.ServiceModel.ServiceHostBase.ChannelDispatchers%2A> </xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>"
  syntax:
    content: public abstract System.ServiceModel.ServiceHostBase Host { get; }
    return:
      type: System.ServiceModel.ServiceHostBase
      description: "<xref href=&quot;System.ServiceModel.ServiceHostBase&quot;> </xref>与调度程序关联的服务。"
  overload: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener
  id: Listener
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  langs:
  - csharp
  name: Listener
  nameWithType: ChannelDispatcherBase.Listener
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "当在派生类中重写，获取与通道调度程序关联的通道侦听器。"
  remarks: "A<xref:System.ServiceModel.Dispatcher.ChannelDispatcher>将相关联<xref:System.ServiceModel.Channels.IChannelListener>其通道和消息这<xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase>进行调度。</xref:System.ServiceModel.Dispatcher.ChannelDispatcherBase> </xref:System.ServiceModel.Channels.IChannelListener> </xref:System.ServiceModel.Dispatcher.ChannelDispatcher>"
  syntax:
    content: public abstract System.ServiceModel.Channels.IChannelListener Listener { get; }
    return:
      type: System.ServiceModel.Channels.IChannelListener
      description: "<xref href=&quot;System.ServiceModel.Channels.IChannelListener&quot;> </xref>与通道调度程序关联。"
  overload: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.CommunicationObject
  isExternal: false
  name: System.ServiceModel.Channels.CommunicationObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ServiceModel.CommunicationObjectFaultedException
  isExternal: true
  name: System.ServiceModel.CommunicationObjectFaultedException
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.#ctor
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: ChannelDispatcherBase()
  nameWithType: ChannelDispatcherBase.ChannelDispatcherBase()
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.ChannelDispatcherBase()
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: Attach(ServiceHostBase)
  nameWithType: ChannelDispatcherBase.Attach(ServiceHostBase)
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach(ServiceHostBase)
- uid: System.ServiceModel.ServiceHostBase
  parent: System.ServiceModel
  isExternal: false
  name: ServiceHostBase
  nameWithType: ServiceHostBase
  fullName: System.ServiceModel.ServiceHostBase
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: CloseInput()
  nameWithType: ChannelDispatcherBase.CloseInput()
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput()
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(System.ServiceModel.ServiceHostBase)
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: Detach(ServiceHostBase)
  nameWithType: ChannelDispatcherBase.Detach(ServiceHostBase)
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach(ServiceHostBase)
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: Host
  nameWithType: ChannelDispatcherBase.Host
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: Listener
  nameWithType: ChannelDispatcherBase.Listener
  fullName: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener
- uid: System.ServiceModel.Channels.IChannelListener
  parent: System.ServiceModel.Channels
  isExternal: false
  name: IChannelListener
  nameWithType: IChannelListener
  fullName: System.ServiceModel.Channels.IChannelListener
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.#ctor*
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: ChannelDispatcherBase
  nameWithType: ChannelDispatcherBase.ChannelDispatcherBase
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Attach*
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: Attach
  nameWithType: ChannelDispatcherBase.Attach
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.CloseInput*
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: CloseInput
  nameWithType: ChannelDispatcherBase.CloseInput
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Detach*
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: Detach
  nameWithType: ChannelDispatcherBase.Detach
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Host*
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: Host
  nameWithType: ChannelDispatcherBase.Host
- uid: System.ServiceModel.Dispatcher.ChannelDispatcherBase.Listener*
  parent: System.ServiceModel.Dispatcher.ChannelDispatcherBase
  isExternal: false
  name: Listener
  nameWithType: ChannelDispatcherBase.Listener
