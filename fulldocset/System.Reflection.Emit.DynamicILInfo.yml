### YamlMime:ManagedReference
items:
- uid: System.Reflection.Emit.DynamicILInfo
  id: DynamicILInfo
  children:
  - System.Reflection.Emit.DynamicILInfo.DynamicMethod
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  - System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  langs:
  - csharp
  name: DynamicILInfo
  nameWithType: DynamicILInfo
  fullName: System.Reflection.Emit.DynamicILInfo
  type: Class
  summary: "提供对用于生成 Microsoft 中间语言 (MSIL) 的其他方法支持和动态方法，包括方法用于创建令牌并将插入代码、 异常处理和局部变量签名 blob 元数据。"
  remarks: "DynamicILInfo 类允许开发人员编写而不是使用<xref:System.Reflection.Emit.ILGenerator>.</xref:System.Reflection.Emit.ILGenerator>自己 MSIL 生成器       若要创建其他类型的实例，调用方法和等等，你生成的 MSIL 必须包括这些实体的令牌。 DynamicILInfo 类提供了几个重载<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>方法，它返回令牌当前 DynamicILInfo 的作用域中有效。</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> 例如，如果你需要调用的重载<xref:System.Console.WriteLine%2A?displayProperty=fullName>方法，你可以获取<xref:System.RuntimeMethodHandle>的重载，并将其传递到<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A>方法以获取用于在你 MSIL 中嵌入的令牌。</xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%2A> </xref:System.RuntimeMethodHandle> </xref:System.Console.WriteLine%2A?displayProperty=fullName>       创建后<xref:System.Byte>阵列以便进行本地变量的签名、 异常和代码体，你可以使用<xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A>， <xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A>，和<xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A>方法将它们插入<xref:System.Reflection.Emit.DynamicMethod>与 DynamicILInfo 对象相关联。</xref:System.Reflection.Emit.DynamicMethod> </xref:System.Reflection.Emit.DynamicILInfo.SetLocalSignature%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetExceptions%2A> </xref:System.Reflection.Emit.DynamicILInfo.SetCode%2A> </xref:System.Byte>       生成你自己的元数据和 MSIL 需要熟悉的公共语言基础结构 (CLI) 文档，尤其是&quot;第 ii 部分︰ 元数据定义和语义&quot;和&quot;第三部分︰ CIL 指令集&quot;。 联机; 我们提供了文档请参阅[ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)MSDN 上和[标准 ecma-335-公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 网站上。      1> [!NOTE]&1;> 并使用 DynamicILInfo 来生成通过直接调用委托构造函数创建指向另一种动态方法的委托的代码。 请改用<xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A>方法来创建委托。</xref:System.Reflection.Emit.DynamicMethod.CreateDelegate%2A> 一个委托，可使用委托构造函数创建没有对目标动态方法的引用。 仍在使用委托时，可能通过垃圾回收回收的动态方法。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DynamicILInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  id: DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取动态方法的正文生成由当前实例。"
  remarks: "A<xref:System.Reflection.Emit.DynamicILInfo>对象始终是一个动态方法与相关联。</xref:System.Reflection.Emit.DynamicILInfo> 用途的<xref:System.Reflection.Emit.DynamicILInfo>类旨在提供另一种插入 MSIL 流、 异常处理和局部变量签名转换为动态方法，开发人员想要生成 MSIL，而无需使用<xref:System.Reflection.Emit.ILGenerator>类。</xref:System.Reflection.Emit.ILGenerator> </xref:System.Reflection.Emit.DynamicILInfo>"
  syntax:
    content: public System.Reflection.Emit.DynamicMethod DynamicMethod { get; }
    return:
      type: System.Reflection.Emit.DynamicMethod
      description: "A<xref:System.Reflection.Emit.DynamicMethod>对象表示动态方法为其当前<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>对象是否正在生成代码。</xref:System.Reflection.Emit.DynamicMethod>"
  overload: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  id: GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取一个令牌，在当前的作用域中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示关联的动态方法的签名。"
  remarks: '有关签名 blob 的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是&quot;第 ii 部分︰ 元数据定义和语义&quot;。 联机; 我们提供了文档请参阅[ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)MSDN 上和[标准 ecma-335-公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 网站上。'
  syntax:
    content: public int GetTokenFor (byte[] signature);
    parameters:
    - id: signature
      type: System.Byte[]
      description: "一个数组，包含签名。"
    return:
      type: System.Int32
      description: "可以嵌入在元数据和关联的动态方法的 MSIL 流令牌。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  id: GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取一个令牌，在当前的作用域中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示从关联的方法调用的动态方法。"
  remarks: "返回此方法重载的标记，你可以从当前与关联的动态方法调用的动态方法<xref:System.Reflection.Emit.DynamicILInfo>对象。</xref:System.Reflection.Emit.DynamicILInfo> 若要调用关联的动态方法以递归方式，请将的值传递<xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>属性。</xref:System.Reflection.Emit.DynamicILInfo.DynamicMethod%2A>"
  syntax:
    content: public int GetTokenFor (System.Reflection.Emit.DynamicMethod method);
    parameters:
    - id: method
      type: System.Reflection.Emit.DynamicMethod
      description: "要调用的动态方法。"
    return:
      type: System.Int32
      description: "作为 MSIL 指令的目标可嵌入到关联的动态方法的 MSIL 流令牌。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  id: GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取一个令牌，在当前的作用域中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示要从关联的动态方法访问的字段。"
  remarks: "你必须获取将由与当前关联的动态方法访问的任何字段的令牌<xref:System.Reflection.Emit.DynamicILInfo>对象。</xref:System.Reflection.Emit.DynamicILInfo> 使用<xref:System.Type.GetField%2A?displayProperty=fullName>方法以获取<xref:System.Reflection.FieldInfo>你想要访问，则使用<xref:System.Reflection.FieldInfo.FieldHandle%2A>属性来获取<xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle></xref:System.Reflection.FieldInfo.FieldHandle%2A>的字段</xref:System.Reflection.FieldInfo></xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "要访问的字段。"
    return:
      type: System.Int32
      description: "可以用作访问字段，当前的作用域中的 MSIL 指令的操作数的令牌<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>对象。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  id: GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取一个令牌，在当前的作用域中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示要从关联的动态方法访问的方法。"
  remarks: "你必须获取将由与当前关联的动态方法访问的任何方法的令牌<xref:System.Reflection.Emit.DynamicILInfo>对象。</xref:System.Reflection.Emit.DynamicILInfo> 使用<xref:System.Type.GetMethod%2A?displayProperty=fullName>方法以获取<xref:System.Reflection.MethodInfo>你想要访问，以及如何将<xref:System.Reflection.MethodBase.MethodHandle%2A>属性来获取<xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle></xref:System.Reflection.MethodBase.MethodHandle%2A>方法</xref:System.Reflection.MethodInfo></xref:System.Type.GetMethod%2A?displayProperty=fullName>      1> [!NOTE]&1;> 属于泛型类型的方法，使用<xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>方法重载，并指定<xref:System.RuntimeTypeHandle>泛型类型。</xref:System.RuntimeTypeHandle> </xref:System.Reflection.Emit.DynamicILInfo.GetTokenFor%28System.RuntimeMethodHandle%2CSystem.RuntimeTypeHandle%29>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "要访问的方法。"
    return:
      type: System.Int32
      description: "可以用作访问方法，如的 MSIL 指令的操作数的令牌<xref:System.Reflection.Emit.OpCodes.Call>或<xref:System.Reflection.Emit.OpCodes.Ldtoken>，当前的作用域中<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>对象。</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取一个令牌，在当前的作用域中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示关联的动态方法中使用的类型。"
  remarks: "返回此方法重载的标记，可定义本地的变量类型，并发出创建类型的实例中与当前关联的动态方法的 MSIL<xref:System.Reflection.Emit.DynamicILInfo>对象。</xref:System.Reflection.Emit.DynamicILInfo>       若要获取<xref:System.RuntimeTypeHandle>表示的类型，使用<xref:System.Type.TypeHandle%2A?displayProperty=fullName>属性。</xref:System.Type.TypeHandle%2A?displayProperty=fullName> </xref:System.RuntimeTypeHandle>"
  syntax:
    content: public int GetTokenFor (RuntimeTypeHandle type);
    parameters:
    - id: type
      type: System.RuntimeTypeHandle
      description: "要使用的类型。"
    return:
      type: System.Int32
      description: "可以用作需要的类型，当前的作用域中的 MSIL 指令的操作数的令牌<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>对象。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  id: GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取一个令牌，在当前的作用域中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示字符串文本在关联的动态方法中使用。"
  syntax:
    content: public int GetTokenFor (string literal);
    parameters:
    - id: literal
      type: System.String
      description: "要使用的字符串。"
    return:
      type: System.Int32
      description: "可以用作必须为字符串，当前的作用域中的 MSIL 指令的操作数的令牌<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>对象。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取一个令牌，在当前的作用域中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示一个字段，以从关联的动态方法; 访问该字段是指定的泛型类型上。"
  remarks: "你必须获取将由与当前关联的动态方法访问的任何字段的令牌<xref:System.Reflection.Emit.DynamicILInfo>对象。</xref:System.Reflection.Emit.DynamicILInfo> 使用<xref:System.Type.GetField%2A?displayProperty=fullName>方法以获取<xref:System.Reflection.FieldInfo>你想要访问，以及如何将<xref:System.Reflection.FieldInfo.FieldHandle%2A>属性来获取<xref:System.RuntimeFieldHandle>.</xref:System.RuntimeFieldHandle></xref:System.Reflection.FieldInfo.FieldHandle%2A>的字段</xref:System.Reflection.FieldInfo></xref:System.Type.GetField%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeFieldHandle field, RuntimeTypeHandle contextType);
    parameters:
    - id: field
      type: System.RuntimeFieldHandle
      description: "要访问的字段。"
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "字段属于泛型类型。"
    return:
      type: System.Int32
      description: "可以用作访问当前的作用域中的字段的 MSIL 指令的操作数的令牌<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>对象。"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  id: GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "获取一个令牌，在当前的作用域中有效<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;> </xref>，表示泛型类型上的方法。"
  remarks: "你必须获取将由与当前的动态方法调用任何方法的令牌<xref:System.Reflection.Emit.DynamicILInfo>对象。</xref:System.Reflection.Emit.DynamicILInfo> 使用<xref:System.Type.GetMethod%2A?displayProperty=fullName>方法以获取<xref:System.Reflection.MethodInfo>你想要调用，以及如何将<xref:System.Reflection.MethodBase.MethodHandle%2A>属性来获取<xref:System.RuntimeMethodHandle>.</xref:System.RuntimeMethodHandle></xref:System.Reflection.MethodBase.MethodHandle%2A>方法</xref:System.Reflection.MethodInfo></xref:System.Type.GetMethod%2A?displayProperty=fullName>"
  syntax:
    content: public int GetTokenFor (RuntimeMethodHandle method, RuntimeTypeHandle contextType);
    parameters:
    - id: method
      type: System.RuntimeMethodHandle
      description: "该方法。"
    - id: contextType
      type: System.RuntimeTypeHandle
      description: "该方法所属的泛型类型。"
    return:
      type: System.Int32
      description: "可以用作访问方法，如的 MSIL 指令的操作数的令牌<xref:System.Reflection.Emit.OpCodes.Call>或<xref:System.Reflection.Emit.OpCodes.Ldtoken>，当前的作用域中<xref href=&quot;System.Reflection.Emit.DynamicILInfo&quot;></xref>对象。</xref:System.Reflection.Emit.OpCodes.Ldtoken> </xref:System.Reflection.Emit.OpCodes.Call>"
  overload: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  id: SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "设置关联的动态方法的代码正文。"
  remarks: "MSIL 流上不执行任何有效性检查。       第二次调用此方法的第二个替换第一个 MSIL 流。       生成你自己的元数据和 MSIL 需要熟悉的公共语言基础结构 (CLI) 文档，尤其是&quot;第 ii 部分︰ 元数据定义和语义&quot;和&quot;第三部分︰ CIL 指令集&quot;。 联机; 我们提供了文档请参阅[ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)MSDN 上和[标准 ecma-335-公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 网站上。"
  syntax:
    content: public void SetCode (byte[] code, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte[]
      description: "包含 MSIL 流的数组。"
    - id: maxStackSize
      type: System.Int32
      description: "在执行方法时操作数堆栈上最大项数。"
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  id: SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "设置关联的动态方法的代码正文。"
  remarks: "MSIL 流上不执行任何有效性检查。       第二次调用此方法的第二个替换第一个 MSIL 流。       生成你自己的元数据和 MSIL 要求熟悉的公共语言基础结构 (CLI) 文档，尤其是&quot;第 ii 部分︰ 元数据定义和语义&quot;和&quot;第三部分︰ CIL 指令集。&quot; 联机; 我们提供了文档请参阅[ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)MSDN 上和[标准 ecma-335-公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 网站上。"
  syntax:
    content: public void SetCode (byte* code, int codeSize, int maxStackSize);
    parameters:
    - id: code
      type: System.Byte*
      description: "指向包含 MSIL 流的字节数组的指针。"
    - id: codeSize
      type: System.Int32
      description: "MSIL 流中的字节数。"
    - id: maxStackSize
      type: System.Int32
      description: "在执行方法时操作数堆栈上最大项数。"
  overload: System.Reflection.Emit.DynamicILInfo.SetCode*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>code</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>和<code>codeSize</code>大于 0。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>codeSize</code>小于 0。"
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  id: SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "设置关联的动态方法的异常元数据。"
  remarks: '方法的异常元数据定义的位置和大小的所有`try`， `catch`， `finally`，筛选器和错误处理块。 此元数据的布局的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是&quot;第 ii 部分︰ 元数据定义和语义&quot;。 联机; 我们提供了文档请参阅[ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)MSDN 上和[标准 ecma-335-公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 网站上。'
  syntax:
    content: public void SetExceptions (byte[] exceptions);
    parameters:
    - id: exceptions
      type: System.Byte[]
      description: "一个数组，包含异常元数据。"
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  id: SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "设置关联的动态方法的异常元数据。"
  remarks: '方法的异常元数据定义的位置和大小的所有`try`， `catch`， `finally`，筛选器和错误处理块。 此元数据的布局的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是&quot;第 ii 部分︰ 元数据定义和语义&quot;和&quot;第三部分︰ CIL 指令集&quot;。 联机; 我们提供了文档请参阅[ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)MSDN 上和[标准 ecma-335-公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 网站上。'
  syntax:
    content: public void SetExceptions (byte* exceptions, int exceptionsSize);
    parameters:
    - id: exceptions
      type: System.Byte*
      description: "指向包含异常元数据的字节数组的指针。"
    - id: exceptionsSize
      type: System.Int32
      description: "异常元数据的字节数。"
  overload: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>exceptions</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>和<code>exceptionSize</code>大于 0。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>exceptionSize</code>小于 0。"
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  id: SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "设置描述关联的动态方法的本地变量的布局的本地变量签名。"
  remarks: "局部变量签名描述方法的本地变量的布局。 若要简化的局部变量签名的构造，使用`static`(`Shared`在 Visual Basic 中)<xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>方法以获取<xref:System.Reflection.Emit.SignatureHelper>用于签名。</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       本地变量的签名的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是&quot;第 ii 部分︰ 元数据定义和语义&quot;。 联机; 我们提供了文档请参阅[ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)MSDN 上和[标准 ecma-335-公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 网站上。"
  syntax:
    content: public void SetLocalSignature (byte[] localSignature);
    parameters:
    - id: localSignature
      type: System.Byte[]
      description: "一个数组，其中包含关联<xref:System.Reflection.Emit.DynamicMethod>。</xref:System.Reflection.Emit.DynamicMethod>的本地变量的布局"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  id: SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  langs:
  - csharp
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection.Emit
  summary: "设置描述关联的动态方法的本地变量的布局的本地变量签名。"
  remarks: "局部变量签名描述方法的本地变量的布局。 若要简化的局部变量签名的构造，使用`static`(`Shared`在 Visual Basic 中)<xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>方法以获取<xref:System.Reflection.Emit.SignatureHelper>用于签名。</xref:System.Reflection.Emit.SignatureHelper> </xref:System.Reflection.Emit.SignatureHelper.GetLocalVarSigHelper%2A?displayProperty=fullName>       本地变量的签名的信息，请参阅公共语言基础结构 (CLI) 文档，尤其是&quot;第 ii 部分︰ 元数据定义和语义&quot;。 联机; 我们提供了文档请参阅[ECMA C# 和公共语言基础结构标准](http://go.microsoft.com/fwlink/?LinkID=99212)MSDN 上和[标准 ecma-335-公共语言基础结构 (CLI)](http://go.microsoft.com/fwlink/?LinkID=65552) Ecma International 网站上。"
  syntax:
    content: public void SetLocalSignature (byte* localSignature, int signatureSize);
    parameters:
    - id: localSignature
      type: System.Byte*
      description: "一个数组，其中包含关联<xref:System.Reflection.Emit.DynamicMethod>。</xref:System.Reflection.Emit.DynamicMethod>的本地变量的布局"
    - id: signatureSize
      type: System.Int32
      description: "签名中的字节数。"
  overload: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>localSignature</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>和<code>signatureSize</code>大于 0。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>signatureSize</code>小于 0。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
  fullName: System.Reflection.Emit.DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicMethod
  parent: System.Reflection.Emit
  isExternal: true
  name: DynamicMethod
  nameWithType: DynamicMethod
  fullName: System.Reflection.Emit.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(Byte[])
  nameWithType: DynamicILInfo.GetTokenFor(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(Byte[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.Reflection.Emit.DynamicMethod)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(DynamicMethod)
  nameWithType: DynamicILInfo.GetTokenFor(DynamicMethod)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(DynamicMethod)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle)
- uid: System.RuntimeFieldHandle
  parent: System
  isExternal: true
  name: RuntimeFieldHandle
  nameWithType: RuntimeFieldHandle
  fullName: System.RuntimeFieldHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle)
- uid: System.RuntimeMethodHandle
  parent: System
  isExternal: true
  name: RuntimeMethodHandle
  nameWithType: RuntimeMethodHandle
  fullName: System.RuntimeMethodHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeTypeHandle)
- uid: System.RuntimeTypeHandle
  parent: System
  isExternal: true
  name: RuntimeTypeHandle
  nameWithType: RuntimeTypeHandle
  fullName: System.RuntimeTypeHandle
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.String)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(String)
  nameWithType: DynamicILInfo.GetTokenFor(String)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeFieldHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeFieldHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor(System.RuntimeMethodHandle,System.RuntimeTypeHandle)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  nameWithType: DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
  fullName: System.Reflection.Emit.DynamicILInfo.GetTokenFor(RuntimeMethodHandle,RuntimeTypeHandle)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte[],System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte[],Int32)
  nameWithType: DynamicILInfo.SetCode(Byte[],Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte[],Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetCode(System.Byte*,System.Int32,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode(Byte*,Int32,Int32)
  nameWithType: DynamicILInfo.SetCode(Byte*,Int32,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetCode(Byte*,Int32,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte[])
  nameWithType: DynamicILInfo.SetExceptions(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions(Byte*,Int32)
  nameWithType: DynamicILInfo.SetExceptions(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetExceptions(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte[])
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte[])
  nameWithType: DynamicILInfo.SetLocalSignature(Byte[])
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte[])
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(System.Byte*,System.Int32)
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature(Byte*,Int32)
  nameWithType: DynamicILInfo.SetLocalSignature(Byte*,Int32)
  fullName: System.Reflection.Emit.DynamicILInfo.SetLocalSignature(Byte*,Int32)
- uid: System.Reflection.Emit.DynamicILInfo.DynamicMethod*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: DynamicMethod
  nameWithType: DynamicILInfo.DynamicMethod
- uid: System.Reflection.Emit.DynamicILInfo.GetTokenFor*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: GetTokenFor
  nameWithType: DynamicILInfo.GetTokenFor
- uid: System.Reflection.Emit.DynamicILInfo.SetCode*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetCode
  nameWithType: DynamicILInfo.SetCode
- uid: System.Reflection.Emit.DynamicILInfo.SetExceptions*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetExceptions
  nameWithType: DynamicILInfo.SetExceptions
- uid: System.Reflection.Emit.DynamicILInfo.SetLocalSignature*
  parent: System.Reflection.Emit.DynamicILInfo
  isExternal: false
  name: SetLocalSignature
  nameWithType: DynamicILInfo.SetLocalSignature
