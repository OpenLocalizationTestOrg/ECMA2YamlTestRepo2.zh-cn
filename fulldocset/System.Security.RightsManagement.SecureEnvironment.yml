### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.SecureEnvironment
  id: SecureEnvironment
  children:
  - System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  - System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  - System.Security.RightsManagement.SecureEnvironment.Dispose
  - System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  - System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  - System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  - System.Security.RightsManagement.SecureEnvironment.User
  langs:
  - csharp
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
  type: Class
  summary: "表示一个用于用户激活、 许可证绑定和其他权限管理操作的安全客户端会话。"
  remarks: "与其他<xref:System.Security.RightsManagement>类型，SecureEnvironment 是仅可用于完全信任应用程序。</xref:System.Security.RightsManagement>"
  example:
  - "The following example shows use of the SecureEnvironment class  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class SecureEnvironment : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  id: ApplicationManifest
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
  fullName: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取 ApplicationManifest 时指定<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref>已创建。"
  remarks: ''
  example:
  - "The following example shows use of the ApplicationManifest method.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public string ApplicationManifest { get; }
    return:
      type: System.String
      description: "指定到的应用程序清单<xref:System.Security.RightsManagement.SecureEnvironment.Create*>方法时<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref>创建。</xref:System.Security.RightsManagement.SecureEnvironment.Create*>"
  overload: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  id: Create(System.String,System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Create(String,ContentUser)
  nameWithType: SecureEnvironment.Create(String,ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "使用给定的权限清单创建指定的用户的安全客户端会话。"
  remarks: "此创建方法旨在用于已激活的用户，例如从<xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>.</xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>返回列表中提供  使用备用<xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>尚未激活的用户的方法。</xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>"
  example:
  - "The following example shows how to use this method to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static System.Security.RightsManagement.SecureEnvironment Create (string applicationManifest, System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: applicationManifest
      type: System.String
      description: "应用程序权限清单。"
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "用户或用户组以授予对权限管理内容访问权限。"
    return:
      type: System.Security.RightsManagement.SecureEnvironment
      description: "用于激活、 许可证绑定和其他权限管理操作的安全客户端会话。"
  overload: System.Security.RightsManagement.SecureEnvironment.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  id: Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Create(String,AuthenticationType,UserActivationMode)
  nameWithType: SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "创建给定应用程序权限清单，客户端安全会话<xref href=&quot;System.Security.RightsManagement.AuthenticationType&quot;> </xref>，和<xref href=&quot;System.Security.RightsManagement.UserActivationMode&quot;> </xref>。"
  remarks: "此创建方法适用于尚未激活的新用户。       激活新用户包括往返服务器事务获取用户证书和客户端许可证证书。       <xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>可以使用方法，如果已激活用户，例如从<xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>.</xref:System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers%2A>返回列表中提供</xref:System.Security.RightsManagement.SecureEnvironment.Create%2A>的备用"
  example:
  - "The following example shows how to use this method to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static System.Security.RightsManagement.SecureEnvironment Create (string applicationManifest, System.Security.RightsManagement.AuthenticationType authentication, System.Security.RightsManagement.UserActivationMode userActivationMode);
    parameters:
    - id: applicationManifest
      type: System.String
      description: "应用程序权限清单。"
    - id: authentication
      type: System.Security.RightsManagement.AuthenticationType
      description: "身份验证的方法。"
    - id: userActivationMode
      type: System.Security.RightsManagement.UserActivationMode
      description: "用户权限帐户证书的类型。"
    return:
      type: System.Security.RightsManagement.SecureEnvironment
      description: "用于激活、 许可证绑定和其他权限管理操作的安全客户端会话。"
  overload: System.Security.RightsManagement.SecureEnvironment.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose
  id: Dispose
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureEnvironment.Dispose()
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "释放使用的所有资源<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>。"
  remarks: "应用程序应调用释放时已完成，但<xref:System.Security.RightsManagement.SecureEnvironment>.</xref:System.Security.RightsManagement.SecureEnvironment>  调用 Dispose 后，资源分配给<xref:System.Security.RightsManagement.SecureEnvironment>垃圾回收器回收。</xref:System.Security.RightsManagement.SecureEnvironment>  有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用在最后一个引用之前释放<xref:System.Security.RightsManagement.SecureEnvironment>发布。</xref:System.Security.RightsManagement.SecureEnvironment>  如果未调用 Dispose，资源分配给<xref:System.Security.RightsManagement.SecureEnvironment>直到垃圾回收器调用的实例不会被释放<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.Security.RightsManagement.SecureEnvironment>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.RightsManagement.SecureEnvironment.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SecureEnvironment.Dispose(Boolean)
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "释放由非托管的资源<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.Security.RightsManagement.SecureEnvironment.Dispose>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.Security.RightsManagement.SecureEnvironment.Dispose> <xref:System.Security.RightsManagement.SecureEnvironment.Dispose>调用与受保护的 Dispose 方法`disposing`参数设置为`true`。</xref:System.Security.RightsManagement.SecureEnvironment.Dispose> <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Security.RightsManagement.SecureEnvironment>引用。</xref:System.Security.RightsManagement.SecureEnvironment> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Security.RightsManagement.SecureEnvironment.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  id: GetActivatedUsers
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: GetActivatedUsers()
  nameWithType: SecureEnvironment.GetActivatedUsers()
  fullName: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "返回激活用户的列表。"
  syntax:
    content: public static System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentUser> GetActivatedUsers ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentUser}
      description: "当前活动的用户的列表。"
  overload: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  id: IsUserActivated(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: IsUserActivated(ContentUser)
  nameWithType: SecureEnvironment.IsUserActivated(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "指示给定的用户是否已激活访问权限管理的内容。"
  remarks: ''
  example:
  - "The following example shows use of the IsUserActivated method to determine if given user has been authorized to access rights managed content.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public static bool IsUserActivated (System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "用户或用户组以授予对权限管理内容访问权限。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果给定<code> user </code>内容; 否则为访问权限管理已激活<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.RightsManagement.SecureEnvironment.IsUserActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  id: RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: RemoveActivatedUser(ContentUser)
  nameWithType: SecureEnvironment.RemoveActivatedUser(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(ContentUser)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "删除指定用户的许可证激活。"
  remarks: "使用 Windows 身份验证或 Passport 身份验证，则必须执行用户身份验证。"
  syntax:
    content: public static void RemoveActivatedUser (System.Security.RightsManagement.ContentUser user);
    parameters:
    - id: user
      type: System.Security.RightsManagement.ContentUser
      description: "要删除的许可证激活的用户。"
  overload: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>user</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "给定<code> user </code>未经过 Windows 身份验证或 Passport 身份验证。"
  platform:
  - net462
- uid: System.Security.RightsManagement.SecureEnvironment.User
  id: User
  parent: System.Security.RightsManagement.SecureEnvironment
  langs:
  - csharp
  name: User
  nameWithType: SecureEnvironment.User
  fullName: System.Security.RightsManagement.SecureEnvironment.User
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取用户组时，指定<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref>已创建。"
  remarks: ''
  example:
  - "The following example shows use of the User property  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewSecEnv](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewsecenv)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewSecEnv](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewsecenv)]"
  syntax:
    content: public System.Security.RightsManagement.ContentUser User { get; }
    return:
      type: System.Security.RightsManagement.ContentUser
      description: "用户组指定<xref:System.Security.RightsManagement.SecureEnvironment.Create*>方法时<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;></xref>已创建。</xref:System.Security.RightsManagement.SecureEnvironment.Create*>"
  overload: System.Security.RightsManagement.SecureEnvironment.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
  fullName: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create(String,ContentUser)
  nameWithType: SecureEnvironment.Create(String,ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment
  parent: System.Security.RightsManagement
  isExternal: false
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
- uid: System.Security.RightsManagement.ContentUser
  parent: System.Security.RightsManagement
  isExternal: false
  name: ContentUser
  nameWithType: ContentUser
  fullName: System.Security.RightsManagement.ContentUser
- uid: System.Security.RightsManagement.SecureEnvironment.Create(System.String,System.Security.RightsManagement.AuthenticationType,System.Security.RightsManagement.UserActivationMode)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create(String,AuthenticationType,UserActivationMode)
  nameWithType: SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
  fullName: System.Security.RightsManagement.SecureEnvironment.Create(String,AuthenticationType,UserActivationMode)
- uid: System.Security.RightsManagement.AuthenticationType
  parent: System.Security.RightsManagement
  isExternal: false
  name: AuthenticationType
  nameWithType: AuthenticationType
  fullName: System.Security.RightsManagement.AuthenticationType
- uid: System.Security.RightsManagement.UserActivationMode
  parent: System.Security.RightsManagement
  isExternal: false
  name: UserActivationMode
  nameWithType: UserActivationMode
  fullName: System.Security.RightsManagement.UserActivationMode
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose()
  nameWithType: SecureEnvironment.Dispose()
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose()
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose(System.Boolean)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SecureEnvironment.Dispose(Boolean)
  fullName: System.Security.RightsManagement.SecureEnvironment.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: GetActivatedUsers()
  nameWithType: SecureEnvironment.GetActivatedUsers()
  fullName: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers()
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.RightsManagement.ContentUser}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ContentUser>
  nameWithType: ReadOnlyCollection<ContentUser>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.RightsManagement.ContentUser>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.RightsManagement.ContentUser>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.RightsManagement.ContentUser
    name: ContentUser
    nameWithType: ContentUser
    fullName: ContentUser
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: IsUserActivated(ContentUser)
  nameWithType: SecureEnvironment.IsUserActivated(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.IsUserActivated(ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(System.Security.RightsManagement.ContentUser)
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: RemoveActivatedUser(ContentUser)
  nameWithType: SecureEnvironment.RemoveActivatedUser(ContentUser)
  fullName: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser(ContentUser)
- uid: System.Security.RightsManagement.SecureEnvironment.User
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: User
  nameWithType: SecureEnvironment.User
  fullName: System.Security.RightsManagement.SecureEnvironment.User
- uid: System.Security.RightsManagement.SecureEnvironment.ApplicationManifest*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: ApplicationManifest
  nameWithType: SecureEnvironment.ApplicationManifest
- uid: System.Security.RightsManagement.SecureEnvironment.Create*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Create
  nameWithType: SecureEnvironment.Create
- uid: System.Security.RightsManagement.SecureEnvironment.Dispose*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: Dispose
  nameWithType: SecureEnvironment.Dispose
- uid: System.Security.RightsManagement.SecureEnvironment.GetActivatedUsers*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: GetActivatedUsers
  nameWithType: SecureEnvironment.GetActivatedUsers
- uid: System.Security.RightsManagement.SecureEnvironment.IsUserActivated*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: IsUserActivated
  nameWithType: SecureEnvironment.IsUserActivated
- uid: System.Security.RightsManagement.SecureEnvironment.RemoveActivatedUser*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: RemoveActivatedUser
  nameWithType: SecureEnvironment.RemoveActivatedUser
- uid: System.Security.RightsManagement.SecureEnvironment.User*
  parent: System.Security.RightsManagement.SecureEnvironment
  isExternal: false
  name: User
  nameWithType: SecureEnvironment.User
