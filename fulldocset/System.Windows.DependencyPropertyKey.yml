### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyPropertyKey
  id: DependencyPropertyKey
  children:
  - System.Windows.DependencyPropertyKey.DependencyProperty
  - System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  langs:
  - csharp
  name: DependencyPropertyKey
  nameWithType: DependencyPropertyKey
  fullName: System.Windows.DependencyPropertyKey
  type: Class
  summary: "提供对只读依赖属性的有限写入访问权限的一个依赖属性标识符。"
  remarks: "DependencyPropertyKey 实例获取作为使用方法<xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>或<xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A>。</xref:System.Windows.DependencyProperty.RegisterAttachedReadOnly%2A></xref:System.Windows.DependencyProperty.RegisterReadOnly%2A>的依赖项属性注册调用的返回值       注册一个依赖项属性的类型可以在调用中使用 DependencyPropertyKey<xref:System.Windows.DependencyObject.SetValue%2A>和<xref:System.Windows.DependencyObject.ClearValue%2A>，调整属性的值作为类逻辑的一部分。</xref:System.Windows.DependencyObject.ClearValue%2A> </xref:System.Windows.DependencyObject.SetValue%2A> 如果允许密钥的访问级别，相关的类也可以使用的密钥和依赖项属性。 例如，可以声明为内部，密钥，而同一程序集内的其他类型还可以设置该依赖项属性。       返回注册只读依赖属性 DependencyPropertyKey 不应成为公共的因为公开键将使该属性可设置，从而与将它注册为只读依赖属性的点。 此外，公开密钥还会使可用依赖项对象之间的不匹配属性行为并将其[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]属性包装实现，这是不好的类设计。       而不是公开密钥本身，而是应公开<xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A>值作为 DependencyPropertyKey `public static readonly` <xref:System.Windows.DependencyProperty>你类</xref:System.Windows.DependencyProperty></xref:System.Windows.DependencyPropertyKey.DependencyProperty%2A> 这样，要返回一个有效的依赖属性标识符，对于某些属性系统操作，如枚举本地设置值的属性。 但是，从而获取的标识符不具有的全部功能<xref:System.Windows.DependencyProperty>对于许多属性系统操作。</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example registers a read-only dependency property, and also uses the key for two purposes in other class members: implementing the get \"wrapper\", and as the identifier for a protected determination operation that sets the value based on calculations of other property values.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public sealed class DependencyPropertyKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  id: DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取与此专用只读依赖属性标识符关联的依赖项属性标识符。"
  remarks: "DependencyProperty 值启用要参与到公共使用的相同的接口部分所使用的读写依赖项属性的属性系统操作的只读属性的标识符。       为了实现只读依赖属性的 get 属性访问器，你应创建和公开<xref:System.Windows.DependencyProperty>你的类标识符</xref:System.Windows.DependencyProperty> 这有两个用途:-你拥有的类需要<xref:System.Windows.DependencyProperty>为了实现属性包装了 get 访问器的标识符。</xref:System.Windows.DependencyProperty> 你使用<xref:System.Windows.DependencyProperty>的参数<xref:System.Windows.DependencyObject.GetValue%2A>实现 get 访问器的调用。</xref:System.Windows.DependencyObject.GetValue%2A> </xref:System.Windows.DependencyProperty>      -<xref:System.Windows.DependencyProperty>标识符公开到属性系统依赖项属性，以便其他依赖于元数据的方法可以在标准窗体中访问它。</xref:System.Windows.DependencyProperty> 例如，如果调用<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>上某些<xref:System.Windows.DependencyObject>和标识符获取本地设置的属性 （值和标识符） 的枚举为只读依赖属性将返回你<xref:System.Windows.DependencyProperty>值而不是键。</xref:System.Windows.DependencyProperty> </xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 不公开<xref:System.Windows.DependencyProperty>标识符不会增加的安全性以任何方式你只读依赖属性，它只是使牵涉到属性更繁琐后续派生的类和类实例的操作。</xref:System.Windows.DependencyProperty>       若要公开<xref:System.Windows.DependencyProperty>在类上的标识符，你调用 DependencyProperty 直接你的密钥。</xref:System.Windows.DependencyProperty> 使用此值来创建`public static readonly`<xref:System.Windows.DependencyProperty>类，其便可与<xref:System.Windows.DependencyPropertyKey>.</xref:System.Windows.DependencyPropertyKey>标识符</xref:System.Windows.DependencyProperty>"
  example:
  - "The following example calls DependencyProperty to expose the <xref:System.Windows.DependencyProperty> identifier (`AquariumGraphicProperty`) for the `AquariumGraphic` read-only dependency property on a class. The example also shows the <xref:System.Windows.DependencyPropertyKey> creation (as an internal member) and the get accessor for `AquariumGraphic`.  \n  \n [!code-cs[WPFAquariumSln#RODP](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodp)]\n [!code-vb[WPFAquariumSln#RODP](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodp)]"
  syntax:
    content: public System.Windows.DependencyProperty DependencyProperty { get; }
    return:
      type: System.Windows.DependencyProperty
      description: "相关的依赖项属性标识符。"
  overload: System.Windows.DependencyPropertyKey.DependencyProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  id: OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  langs:
  - csharp
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "重写此依赖属性标识符表示的只读依赖属性元数据。"
  remarks: "重写只读依赖属性上的元数据出于类似重写上读写依赖项属性的元数据的原因，因此仅限于密钥级别的访问权限，因为指定的元数据中的行为可以更改组行为 （例如的默认值）。       为具有读写依赖项属性重写只读依赖属性的元数据应仅在之前完成 （这相当于注册该属性的对象的特定实例进行实例化的时间） 属性系统会将被放置在使用该属性。 只应提供本身为的类型的静态构造函数内执行调用 OverrideMetadata`forType`此方法或为该类的等效初始化参数。       此方法有效地将转发到<xref:System.Windows.DependencyProperty.OverrideMetadata%2A>方法，并传递<xref:System.Windows.DependencyPropertyKey>实例作为键参数。</xref:System.Windows.DependencyPropertyKey> </xref:System.Windows.DependencyProperty.OverrideMetadata%2A>"
  example:
  - "The following example overrides metadata for an existing read-only dependency property that a class inherits. In this case, the scenario goal was to add a coerce value callback that the base property metadata did not have. You could also override metadata for any of the other reasons that overriding metadata is typically appropriate (changing default value, adding <xref:System.Windows.FrameworkPropertyMetadataOptions> values, etc.)  \n  \n [!code-cs[WPFAquariumSln#RODPOverride](~/add/codesnippet/csharp/WPFAquariumSln/WPFAquariumObjects/Class1.cs#rodpoverride)]\n [!code-vb[WPFAquariumSln#RODPOverride](~/add/codesnippet/visualbasic/wpfaquariumobjects/class1.vb#rodpoverride)]"
  syntax:
    content: public void OverrideMetadata (Type forType, System.Windows.PropertyMetadata typeMetadata);
    parameters:
    - id: forType
      type: System.Type
      description: "在其此依赖属性存在，并且应重写元数据类型。"
    - id: typeMetadata
      type: System.Windows.PropertyMetadata
      description: "为此类型提供的元数据。"
  overload: System.Windows.DependencyPropertyKey.OverrideMetadata*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尝试的元数据上读写依赖项属性重写 (不能使用此签名)。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "已为该属性建立元数据，因为它存在于所提供的类型。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.DependencyPropertyKey.DependencyProperty
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
  fullName: System.Windows.DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata(System.Type,System.Windows.PropertyMetadata)
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata(Type,PropertyMetadata)
  nameWithType: DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
  fullName: System.Windows.DependencyPropertyKey.OverrideMetadata(Type,PropertyMetadata)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.PropertyMetadata
  parent: System.Windows
  isExternal: false
  name: PropertyMetadata
  nameWithType: PropertyMetadata
  fullName: System.Windows.PropertyMetadata
- uid: System.Windows.DependencyPropertyKey.DependencyProperty*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyPropertyKey.DependencyProperty
- uid: System.Windows.DependencyPropertyKey.OverrideMetadata*
  parent: System.Windows.DependencyPropertyKey
  isExternal: false
  name: OverrideMetadata
  nameWithType: DependencyPropertyKey.OverrideMetadata
