### YamlMime:ManagedReference
items:
- uid: System.Security.SecurityManager
  id: SecurityManager
  children:
  - System.Security.SecurityManager.CheckExecutionRights
  - System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture
  - System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)
  - System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)
  - System.Security.SecurityManager.IsGranted(System.Security.IPermission)
  - System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)
  - System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)
  - System.Security.SecurityManager.PolicyHierarchy
  - System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)
  - System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])
  - System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)
  - System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)
  - System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)
  - System.Security.SecurityManager.SavePolicy
  - System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)
  - System.Security.SecurityManager.SecurityEnabled
  langs:
  - csharp
  name: SecurityManager
  nameWithType: SecurityManager
  fullName: System.Security.SecurityManager
  type: Class
  summary: "提供与安全系统进行交互的类的主要访问点。 此类不能被继承。"
  remarks: "安全提供了访问和操作安全策略配置方法。 无法创建 SecurityManager 的实例。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class SecurityManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecurityManager.CheckExecutionRights
  id: CheckExecutionRights
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: CheckExecutionRights
  nameWithType: SecurityManager.CheckExecutionRights
  fullName: System.Security.SecurityManager.CheckExecutionRights
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取或设置一个值，该值指示是否必须具有代码<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;></xref>才能执行。"
  remarks: "如果此属性为`false`，即使代码，而没有<xref:System.Security.Permissions.SecurityPermissionFlag>可以执行。</xref:System.Security.Permissions.SecurityPermissionFlag> 执行检查成本，并且可以消除迟缓策略解析的优点。 若要禁用检查在需要时的执行，提供此属性。       对此属性的更改不会保留直到<xref:System.Security.SecurityManager.SavePolicy%2A>称为。</xref:System.Security.SecurityManager.SavePolicy%2A> 新进程将不会影响更改之前会将其保存在注册表中。"
  syntax:
    content: public static bool CheckExecutionRights { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果代码必须具有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;></xref>才能执行; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityManager.CheckExecutionRights*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture
  id: CurrentThreadRequiresSecurityContextCapture
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: CurrentThreadRequiresSecurityContextCapture()
  nameWithType: SecurityManager.CurrentThreadRequiresSecurityContextCapture()
  fullName: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "确定当前线程是否需要安全上下文捕获，是否其安全状态具有时间必须在以后重新创建。"
  remarks: "缓存后成功的安全要求获得的敏感数据之前，你可以使用 CurrentThreadRequiresSecurityContextCapture 方法。       如果<xref:System.Security.CodeAccessPermission.Assert%2A>方法已调用更高版本在堆栈上，不捕获相应的安全上下文的情况下，应缓存数据。</xref:System.Security.CodeAccessPermission.Assert%2A> 否则为敏感数据获取下<xref:System.Security.CodeAccessPermission.Assert%2A>可能会变得可用，它是编写的代码不再与该运行<xref:System.Security.CodeAccessPermission.Assert%2A>就地。</xref:System.Security.CodeAccessPermission.Assert%2A> </xref:System.Security.CodeAccessPermission.Assert%2A>      1> [!IMPORTANT]&1;> 只有当它时，返回的值才可靠`false`，这意味着该线程保证不需要安全上下文捕获。 不需要，若要避免安全漏洞安全上下文捕获时，该方法可能会返回 true。       CurrentThreadRequiresSecurityContextCapture 是安全关键的因为其主要用途是为了避免不必要的安全上下文已捕获，这表明使用它的代码是安全敏感的并且必须进行审核。"
  syntax:
    content: public static bool CurrentThreadRequiresSecurityContextCapture ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果堆栈包含没有部分受信任的应用程序域、 任何部分受信任的程序集，以及无当前处于活动状态<> *1> 或<> *1> 修饰符;<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>如果公共语言运行时不能保证堆栈包含不能提供。"
  overload: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)
  id: GetStandardSandbox(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: GetStandardSandbox(Evidence)
  nameWithType: SecurityManager.GetStandardSandbox(Evidence)
  fullName: System.Security.SecurityManager.GetStandardSandbox(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取一个权限集，则可以安全地授予的应用程序具有提供的证据。"
  remarks: "> [!NOTE]1> 在[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]中的主机证据`evidence`必须包含<xref:System.Security.Policy.Zone?displayProperty=fullName>证据。</xref:System.Security.Policy.Zone?displayProperty=fullName>   >> 下表显示对于每个区域返回的权限集。      |区域 |权限集 |  |----------|--------------------|  |<xref:System.Security.SecurityZone>|`FullTrust`|  |<xref:System.Security.SecurityZone>|`LocalIntranet`|  |<xref:System.Security.SecurityZone>|`Internet`|  |<xref:System.Security.SecurityZone>|`Internet`|  |<xref:System.Security.SecurityZone>|None |  |<xref:System.Security.SecurityZone>|None |      其他证据，如<xref:System.Security.Policy.Url>或<xref:System.Security.Policy.Site>，可能被视为。</xref:System.Security.Policy.Site> </xref:System.Security.Policy.Url> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone> </xref:System.Security.SecurityZone>       沙盒可以使用返回的权限集运行该应用程序。 请注意，此方法未指定策略，但可帮助宿主确定请求的应用程序的权限集是否合理。 此方法可以用于将区域映射到沙盒。"
  example:
  - "The following example shows how to use the GetStandardSandbox method to obtain the permission set for a sandboxed application. For more information about running an application in a sandbox, see [How to: Run Partially Trusted Code in a Sandbox](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[sandboxingApis#1](~/add/codesnippet/visualbasic/2aad9996-0182-4c3d-a405-_1.vb)]\n [!code-cs[sandboxingApis#1](~/add/codesnippet/csharp/2aad9996-0182-4c3d-a405-_1.cs)]"
  syntax:
    content: public static System.Security.PermissionSet GetStandardSandbox (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "主机证据，以匹配为权限集。"
    return:
      type: System.Security.PermissionSet
      description: "一个可用作的授予集的应用程序具有提供的证据的权限集。"
  overload: System.Security.SecurityManager.GetStandardSandbox*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>evidence</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)
  id: GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: GetZoneAndOrigin(ArrayList,ArrayList)
  nameWithType: SecurityManager.GetZoneAndOrigin(ArrayList,ArrayList)
  fullName: System.Security.SecurityManager.GetZoneAndOrigin(ArrayList,ArrayList)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取当前程序集的授予的区域标识和 URL 标识的权限集。"
  remarks: "此方法的建议替代方法是使用正在执行的程序集的 URL 和区域证据来调用<xref:System.Security.SecurityManager.ResolvePolicy%2A>为每个证据类型。</xref:System.Security.SecurityManager.ResolvePolicy%2A> 从返回的权限集<xref:System.Security.SecurityManager.ResolvePolicy%2A>调用标识基于其区域和 URL 的源上执行的程序集授予的权限。</xref:System.Security.SecurityManager.ResolvePolicy%2A>      1> [!NOTE]&1;> 此成员所做的 ECMA 公共密钥，这不是有效的加密密钥，而一个伪密钥的链接要求。 在.NET Framework 中 ECMA 伪密钥此链接要求会自动转换为 Microsoft 公共密钥的链接要求。 安全异常取决于 Microsoft 公钥，不 ECMA 伪键。"
  syntax:
    content: public static void GetZoneAndOrigin (out System.Collections.ArrayList zone, out System.Collections.ArrayList origin);
    parameters:
    - id: zone
      type: System.Collections.ArrayList
      description: "包含一个输出参数<xref href=&quot;System.Collections.ArrayList&quot;></xref>的授予<xref:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone*>对象。</xref:System.Security.Permissions.ZoneIdentityPermissionAttribute.Zone*>"
    - id: origin
      type: System.Collections.ArrayList
      description: "包含一个输出参数<xref href=&quot;System.Collections.ArrayList&quot;></xref>的授予<xref href=&quot;System.Security.Permissions.UrlIdentityPermission&quot;></xref>对象。"
  overload: System.Security.SecurityManager.GetZoneAndOrigin*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "请求<xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;></xref>失败。"
  platform:
  - net462
- uid: System.Security.SecurityManager.IsGranted(System.Security.IPermission)
  id: IsGranted(System.Security.IPermission)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: IsGranted(IPermission)
  nameWithType: SecurityManager.IsGranted(IPermission)
  fullName: System.Security.SecurityManager.IsGranted(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "确定是否向调用方授予权限。"
  remarks: "授予的权限由策略和不同于可能重写，例如一个断言的要求。 此外，IsGranted 仅测试调用代码程序集，独立于在堆栈上的其他调用方的授予。"
  syntax:
    content: public static bool IsGranted (System.Security.IPermission perm);
    parameters:
    - id: perm
      type: System.Security.IPermission
      description: "要测试的调用方授予的权限。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果调用方授予的权限包括权限<code> perm </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityManager.IsGranted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)
  id: LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: LoadPolicyLevelFromFile(String,PolicyLevelType)
  nameWithType: SecurityManager.LoadPolicyLevelFromFile(String,PolicyLevelType)
  fullName: System.Security.SecurityManager.LoadPolicyLevelFromFile(String,PolicyLevelType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "加载<xref href=&quot;System.Security.Policy.PolicyLevel&quot;></xref>从指定的文件。"
  syntax:
    content: public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromFile (string path, System.Security.PolicyLevelType type);
    parameters:
    - id: path
      type: System.String
      description: "包含的安全策略信息文件的物理文件路径。"
    - id: type
      type: System.Security.PolicyLevelType
      description: "指定的策略级别要加载的类型的枚举值之一。"
    return:
      type: System.Security.Policy.PolicyLevel
      description: "加载的策略级别中。"
  overload: System.Security.SecurityManager.LoadPolicyLevelFromFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指示的文件<code> path </code>参数不存在。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。       -或-调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>。       -或-调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>。       -或-调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.FileIOPermissionAccess&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)
  id: LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: LoadPolicyLevelFromString(String,PolicyLevelType)
  nameWithType: SecurityManager.LoadPolicyLevelFromString(String,PolicyLevelType)
  fullName: System.Security.SecurityManager.LoadPolicyLevelFromString(String,PolicyLevelType)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "加载<xref href=&quot;System.Security.Policy.PolicyLevel&quot;></xref>根据指定的字符串。"
  syntax:
    content: public static System.Security.Policy.PolicyLevel LoadPolicyLevelFromString (string str, System.Security.PolicyLevelType type);
    parameters:
    - id: str
      type: System.String
      description: "它在其中出现在配置文件中的同一形式的安全策略级别的 XML 表示形式。"
    - id: type
      type: System.Security.PolicyLevelType
      description: "指定的策略级别要加载的类型的枚举值之一。"
    return:
      type: System.Security.Policy.PolicyLevel
      description: "加载的策略级别中。"
  overload: System.Security.SecurityManager.LoadPolicyLevelFromString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>str</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> str </code>参数无效。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityManager.PolicyHierarchy
  id: PolicyHierarchy
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: PolicyHierarchy()
  nameWithType: SecurityManager.PolicyHierarchy()
  fullName: System.Security.SecurityManager.PolicyHierarchy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "提供访问的级别，如计算机策略和用户策略的安全策略层次结构的枚举器。"
  remarks: "返回的枚举器提供了连续<xref:System.Security.Policy.PolicyLevel>表示相应的策略对象 （计算机、 用户、 企业、 应用程序域） 的层次结构级别。</xref:System.Security.Policy.PolicyLevel> 这些对象是实时的策略对象中;更改这些对象可以具有不可预知的结果。       最小策略层次结构包含计算机级别、 企业级和用户级别。 但是，层次结构可以包含其他级别。"
  syntax:
    content: public static System.Collections.IEnumerator PolicyHierarchy ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "枚举数<xref href=&quot;System.Security.Policy.PolicyLevel&quot;></xref>编写安全策略层次结构的对象。"
  overload: System.Security.SecurityManager.PolicyHierarchy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)
  id: ResolvePolicy(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolvePolicy(Evidence)
  nameWithType: SecurityManager.ResolvePolicy(Evidence)
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "确定向代码授予的权限基于指定的证据。"
  remarks: "此方法调用安全策略引擎，为其提供调用代码的标识的证据。 由安全策略确定结果。"
  syntax:
    content: public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "设置用于评估策略的证据。"
    return:
      type: System.Security.PermissionSet
      description: "安全系统可以授予的权限集。"
  overload: System.Security.SecurityManager.ResolvePolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])
  id: ResolvePolicy(System.Security.Policy.Evidence[])
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolvePolicy(Evidence[])
  nameWithType: SecurityManager.ResolvePolicy(Evidence[])
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "确定向代码授予的权限基于指定的证据。"
  remarks: "此方法调用安全策略引擎，为其提供的数组<xref:System.Security.Policy.Evidence>对象。</xref:System.Security.Policy.Evidence> 返回的权限集表示将应用于数组中每个证据的权限。 这些权限是等效于或策略应该已授予每个证据的权限的子集。 此方法的行为方式好像已于解决上每个策略的结果执行交集<xref:System.Security.Policy.Evidence>数组中的对象。</xref:System.Security.Policy.Evidence>"
  syntax:
    content: public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence[] evidences);
    parameters:
    - id: evidences
      type: System.Security.Policy.Evidence[]
      description: "用于评估策略的证据对象的数组。"
    return:
      type: System.Security.PermissionSet
      description: "适用于所有提供的证据的权限集。"
  overload: System.Security.SecurityManager.ResolvePolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)
  id: ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  nameWithType: SecurityManager.ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "根据数据确定向代码授予的权限指定的证据和请求。"
  remarks: "此方法时，安全策略引擎，为其提供的调用代码的标识的证据和权限集的代码将调用请求。 由安全策略确定结果。 此方法返回的安全系统中，将授予的权限集，并返回的作为输出参数会被拒绝的权限集。 有效授予的权限是位于不在拒绝集的授予权限集。"
  syntax:
    content: public static System.Security.PermissionSet ResolvePolicy (System.Security.Policy.Evidence evidence, System.Security.PermissionSet reqdPset, System.Security.PermissionSet optPset, System.Security.PermissionSet denyPset, out System.Security.PermissionSet denied);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "设置用于评估策略的证据。"
    - id: reqdPset
      type: System.Security.PermissionSet
      description: "该代码需要运行所需的权限。"
    - id: optPset
      type: System.Security.PermissionSet
      description: "可选的权限，如果授予，将使用但不需要的要运行的代码。"
    - id: denyPset
      type: System.Security.PermissionSet
      description: "即使策略允许必须永远不会向代码授予被拒绝的权限。"
    - id: denied
      type: System.Security.PermissionSet
      description: "一个包含不授予的权限集的输出参数。"
    return:
      type: System.Security.PermissionSet
      description: "安全系统将授予的权限集。"
  overload: System.Security.SecurityManager.ResolvePolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "策略无法授予指定的最低所需的权限<code> reqdPset </code>参数。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)
  id: ResolvePolicyGroups(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolvePolicyGroups(Evidence)
  nameWithType: SecurityManager.ResolvePolicyGroups(Evidence)
  fullName: System.Security.SecurityManager.ResolvePolicyGroups(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取指定的证据相匹配的代码组的集合。"
  remarks: "此方法是证据的用于分析指定的策略配置如何使用特定类型。       将从所有适用级别匹配策略层次结构的返回代码组`evidence`参数。"
  syntax:
    content: public static System.Collections.IEnumerator ResolvePolicyGroups (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "针对评估策略设置的证据。"
    return:
      type: System.Collections.IEnumerator
      description: "证据相匹配的代码组的集合的枚举。"
  overload: System.Security.SecurityManager.ResolvePolicyGroups*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)
  id: ResolveSystemPolicy(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: ResolveSystemPolicy(Evidence)
  nameWithType: SecurityManager.ResolveSystemPolicy(Evidence)
  fullName: System.Security.SecurityManager.ResolveSystemPolicy(Evidence)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "向代码授予哪些权限根据指定的证据，不包括的策略确定<xref href=&quot;System.AppDomain&quot;></xref>级别。"
  remarks: "此方法时，将调用安全策略引擎，它提供调用代码的标识的证据。 通过任何以外的系统安全策略确定结果<xref:System.AppDomain>策略。</xref:System.AppDomain>"
  syntax:
    content: public static System.Security.PermissionSet ResolveSystemPolicy (System.Security.Policy.Evidence evidence);
    parameters:
    - id: evidence
      type: System.Security.Policy.Evidence
      description: "设置用于评估策略的证据。"
    return:
      type: System.Security.PermissionSet
      description: "安全系统可以授予的权限集。"
  overload: System.Security.SecurityManager.ResolveSystemPolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.SavePolicy
  id: SavePolicy
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: SavePolicy()
  nameWithType: SecurityManager.SavePolicy()
  fullName: System.Security.SecurityManager.SavePolicy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "将保存已修改的安全策略状态。"
  remarks: "此方法将策略保存通过公开<xref:System.Security.SecurityManager.PolicyHierarchy%2A>， <xref:System.Security.Policy.PolicyLevel>，和其他类，表示配置安全策略。</xref:System.Security.Policy.PolicyLevel> </xref:System.Security.SecurityManager.PolicyHierarchy%2A> 除非调用此方法时，对策略对象所做的更改将不会保存，并将不会影响后续的应用程序运行。"
  syntax:
    content: public static void SavePolicy ();
    parameters: []
  overload: System.Security.SecurityManager.SavePolicy*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)
  id: SavePolicyLevel(System.Security.Policy.PolicyLevel)
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: SavePolicyLevel(PolicyLevel)
  nameWithType: SecurityManager.SavePolicyLevel(PolicyLevel)
  fullName: System.Security.SecurityManager.SavePolicyLevel(PolicyLevel)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "将保存已修改的安全策略级别用<xref:System.Security.SecurityManager.LoadPolicyLevelFromFile*>.</xref:System.Security.SecurityManager.LoadPolicyLevelFromFile*>加载"
  remarks: "<xref:System.Security.Policy.PolicyLevel>将保存到从中加载它的相同位置。</xref:System.Security.Policy.PolicyLevel>"
  syntax:
    content: public static void SavePolicyLevel (System.Security.Policy.PolicyLevel level);
    parameters:
    - id: level
      type: System.Security.Policy.PolicyLevel
      description: "要保存的策略级别对象。"
  overload: System.Security.SecurityManager.SavePolicyLevel*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "此方法使用代码访问安全性 (CAS) 策略，它在中已过时[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]。 若要启用兼容的.NET framework 的早期版本的 CAS 策略，请使用[ &lt;legacyCasPolicy&gt;元素](../Topic/%3CNetFx40_LegacySecurityPolicy%3E%20Element.md)。"
  platform:
  - net462
- uid: System.Security.SecurityManager.SecurityEnabled
  id: SecurityEnabled
  parent: System.Security.SecurityManager
  langs:
  - csharp
  name: SecurityEnabled
  nameWithType: SecurityManager.SecurityEnabled
  fullName: System.Security.SecurityManager.SecurityEnabled
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取或设置一个值，该值指示是否启用安全。"
  remarks: "使用此属性[Caspol.exe （代码访问安全策略工具）](~/add/includes/ajax-current-ext-md.md) `-security` (`-s`) 选项可关闭基于代码的安全性。              SecurityEnabled 提供为管理员禁用代码访问安全性的方法。 当禁用代码访问安全性时，所有代码访问要求都会都成功。 实际上，这将授予的所有代码`FullTrust`。 禁用代码访问安全性可以绕过安全系统，以便代码可能会执行效果略好于等效的安全策略授予`FullTrust`于的所有代码。 此属性不会禁用基于角色的安全性;因此，<xref:System.Security.Permissions.PrincipalPermission>需求不会受到影响。</xref:System.Security.Permissions.PrincipalPermission>      1> [!CAUTION]&1;> 禁用代码访问安全性会使系统容易受到攻击的恶意代码，如病毒和蠕虫病毒。 禁用代码访问安全性不会自动阻止从以任何方式运行的托管的代码。 它只会造成托管代码能够运行不受限制的代码访问安全系统，应仅为完成最格外谨慎。 已采取其他安全性措施以帮助保护系统的安全性时应仅完成关闭安全性以获得额外的性能。 其他的安全防范措施包括与公共网络，以物理方式保护计算机，从断开连接，依次类推。       对此属性的更改不会保留在注册表中，直到<xref:System.Security.SecurityManager.SavePolicy%2A>称为。</xref:System.Security.SecurityManager.SavePolicy%2A> 新进程将不会影响更改之前会将其保存在注册表中。 更改正在运行的进程中的该属性的值不一定更改状态按预期方式。 若要确保更改生效，必须调用<xref:System.Security.SecurityManager.SavePolicy%2A>并启动新进程。</xref:System.Security.SecurityManager.SavePolicy%2A>"
  syntax:
    content: public static bool SecurityEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了安全性;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecurityManager.SecurityEnabled*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用此方法的代码，没有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Security.SecurityManager.CheckExecutionRights
  parent: System.Security.SecurityManager
  isExternal: false
  name: CheckExecutionRights
  nameWithType: SecurityManager.CheckExecutionRights
  fullName: System.Security.SecurityManager.CheckExecutionRights
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture
  parent: System.Security.SecurityManager
  isExternal: false
  name: CurrentThreadRequiresSecurityContextCapture()
  nameWithType: SecurityManager.CurrentThreadRequiresSecurityContextCapture()
  fullName: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture()
- uid: System.Security.SecurityManager.GetStandardSandbox(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  isExternal: false
  name: GetStandardSandbox(Evidence)
  nameWithType: SecurityManager.GetStandardSandbox(Evidence)
  fullName: System.Security.SecurityManager.GetStandardSandbox(Evidence)
- uid: System.Security.PermissionSet
  parent: System.Security
  isExternal: false
  name: PermissionSet
  nameWithType: PermissionSet
  fullName: System.Security.PermissionSet
- uid: System.Security.Policy.Evidence
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence
- uid: System.Security.SecurityManager.GetZoneAndOrigin(System.Collections.ArrayList@,System.Collections.ArrayList@)
  parent: System.Security.SecurityManager
  isExternal: false
  name: GetZoneAndOrigin(ArrayList,ArrayList)
  nameWithType: SecurityManager.GetZoneAndOrigin(ArrayList,ArrayList)
  fullName: System.Security.SecurityManager.GetZoneAndOrigin(ArrayList,ArrayList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Security.SecurityManager.IsGranted(System.Security.IPermission)
  parent: System.Security.SecurityManager
  isExternal: false
  name: IsGranted(IPermission)
  nameWithType: SecurityManager.IsGranted(IPermission)
  fullName: System.Security.SecurityManager.IsGranted(IPermission)
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.SecurityManager.LoadPolicyLevelFromFile(System.String,System.Security.PolicyLevelType)
  parent: System.Security.SecurityManager
  isExternal: false
  name: LoadPolicyLevelFromFile(String,PolicyLevelType)
  nameWithType: SecurityManager.LoadPolicyLevelFromFile(String,PolicyLevelType)
  fullName: System.Security.SecurityManager.LoadPolicyLevelFromFile(String,PolicyLevelType)
- uid: System.Security.Policy.PolicyLevel
  parent: System.Security.Policy
  isExternal: false
  name: PolicyLevel
  nameWithType: PolicyLevel
  fullName: System.Security.Policy.PolicyLevel
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.PolicyLevelType
  parent: System.Security
  isExternal: false
  name: PolicyLevelType
  nameWithType: PolicyLevelType
  fullName: System.Security.PolicyLevelType
- uid: System.Security.SecurityManager.LoadPolicyLevelFromString(System.String,System.Security.PolicyLevelType)
  parent: System.Security.SecurityManager
  isExternal: false
  name: LoadPolicyLevelFromString(String,PolicyLevelType)
  nameWithType: SecurityManager.LoadPolicyLevelFromString(String,PolicyLevelType)
  fullName: System.Security.SecurityManager.LoadPolicyLevelFromString(String,PolicyLevelType)
- uid: System.Security.SecurityManager.PolicyHierarchy
  parent: System.Security.SecurityManager
  isExternal: false
  name: PolicyHierarchy()
  nameWithType: SecurityManager.PolicyHierarchy()
  fullName: System.Security.SecurityManager.PolicyHierarchy()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicy(Evidence)
  nameWithType: SecurityManager.ResolvePolicy(Evidence)
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence)
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence[])
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicy(Evidence[])
  nameWithType: SecurityManager.ResolvePolicy(Evidence[])
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence[])
- uid: System.Security.Policy.Evidence[]
  parent: System.Security.Policy
  isExternal: false
  name: Evidence
  nameWithType: Evidence
  fullName: System.Security.Policy.Evidence[]
  spec.csharp:
  - uid: System.Security.Policy.Evidence
    name: Evidence
    nameWithType: Evidence
    fullName: Evidence[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.SecurityManager.ResolvePolicy(System.Security.Policy.Evidence,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet,System.Security.PermissionSet@)
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  nameWithType: SecurityManager.ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
  fullName: System.Security.SecurityManager.ResolvePolicy(Evidence,PermissionSet,PermissionSet,PermissionSet,PermissionSet)
- uid: System.Security.SecurityManager.ResolvePolicyGroups(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicyGroups(Evidence)
  nameWithType: SecurityManager.ResolvePolicyGroups(Evidence)
  fullName: System.Security.SecurityManager.ResolvePolicyGroups(Evidence)
- uid: System.Security.SecurityManager.ResolveSystemPolicy(System.Security.Policy.Evidence)
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolveSystemPolicy(Evidence)
  nameWithType: SecurityManager.ResolveSystemPolicy(Evidence)
  fullName: System.Security.SecurityManager.ResolveSystemPolicy(Evidence)
- uid: System.Security.SecurityManager.SavePolicy
  parent: System.Security.SecurityManager
  isExternal: false
  name: SavePolicy()
  nameWithType: SecurityManager.SavePolicy()
  fullName: System.Security.SecurityManager.SavePolicy()
- uid: System.Security.SecurityManager.SavePolicyLevel(System.Security.Policy.PolicyLevel)
  parent: System.Security.SecurityManager
  isExternal: false
  name: SavePolicyLevel(PolicyLevel)
  nameWithType: SecurityManager.SavePolicyLevel(PolicyLevel)
  fullName: System.Security.SecurityManager.SavePolicyLevel(PolicyLevel)
- uid: System.Security.SecurityManager.SecurityEnabled
  parent: System.Security.SecurityManager
  isExternal: false
  name: SecurityEnabled
  nameWithType: SecurityManager.SecurityEnabled
  fullName: System.Security.SecurityManager.SecurityEnabled
- uid: System.Security.SecurityManager.CheckExecutionRights*
  parent: System.Security.SecurityManager
  isExternal: false
  name: CheckExecutionRights
  nameWithType: SecurityManager.CheckExecutionRights
- uid: System.Security.SecurityManager.CurrentThreadRequiresSecurityContextCapture*
  parent: System.Security.SecurityManager
  isExternal: false
  name: CurrentThreadRequiresSecurityContextCapture
  nameWithType: SecurityManager.CurrentThreadRequiresSecurityContextCapture
- uid: System.Security.SecurityManager.GetStandardSandbox*
  parent: System.Security.SecurityManager
  isExternal: false
  name: GetStandardSandbox
  nameWithType: SecurityManager.GetStandardSandbox
- uid: System.Security.SecurityManager.GetZoneAndOrigin*
  parent: System.Security.SecurityManager
  isExternal: false
  name: GetZoneAndOrigin
  nameWithType: SecurityManager.GetZoneAndOrigin
- uid: System.Security.SecurityManager.IsGranted*
  parent: System.Security.SecurityManager
  isExternal: false
  name: IsGranted
  nameWithType: SecurityManager.IsGranted
- uid: System.Security.SecurityManager.LoadPolicyLevelFromFile*
  parent: System.Security.SecurityManager
  isExternal: false
  name: LoadPolicyLevelFromFile
  nameWithType: SecurityManager.LoadPolicyLevelFromFile
- uid: System.Security.SecurityManager.LoadPolicyLevelFromString*
  parent: System.Security.SecurityManager
  isExternal: false
  name: LoadPolicyLevelFromString
  nameWithType: SecurityManager.LoadPolicyLevelFromString
- uid: System.Security.SecurityManager.PolicyHierarchy*
  parent: System.Security.SecurityManager
  isExternal: false
  name: PolicyHierarchy
  nameWithType: SecurityManager.PolicyHierarchy
- uid: System.Security.SecurityManager.ResolvePolicy*
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicy
  nameWithType: SecurityManager.ResolvePolicy
- uid: System.Security.SecurityManager.ResolvePolicyGroups*
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolvePolicyGroups
  nameWithType: SecurityManager.ResolvePolicyGroups
- uid: System.Security.SecurityManager.ResolveSystemPolicy*
  parent: System.Security.SecurityManager
  isExternal: false
  name: ResolveSystemPolicy
  nameWithType: SecurityManager.ResolveSystemPolicy
- uid: System.Security.SecurityManager.SavePolicy*
  parent: System.Security.SecurityManager
  isExternal: false
  name: SavePolicy
  nameWithType: SecurityManager.SavePolicy
- uid: System.Security.SecurityManager.SavePolicyLevel*
  parent: System.Security.SecurityManager
  isExternal: false
  name: SavePolicyLevel
  nameWithType: SecurityManager.SavePolicyLevel
- uid: System.Security.SecurityManager.SecurityEnabled*
  parent: System.Security.SecurityManager
  isExternal: false
  name: SecurityEnabled
  nameWithType: SecurityManager.SecurityEnabled
