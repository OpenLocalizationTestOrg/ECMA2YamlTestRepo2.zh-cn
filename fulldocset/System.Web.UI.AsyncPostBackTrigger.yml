### YamlMime:ManagedReference
items:
- uid: System.Web.UI.AsyncPostBackTrigger
  id: AsyncPostBackTrigger
  children:
  - System.Web.UI.AsyncPostBackTrigger.#ctor
  - System.Web.UI.AsyncPostBackTrigger.ControlID
  - System.Web.UI.AsyncPostBackTrigger.EventName
  - System.Web.UI.AsyncPostBackTrigger.HasTriggered
  - System.Web.UI.AsyncPostBackTrigger.Initialize
  - System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  - System.Web.UI.AsyncPostBackTrigger.ToString
  langs:
  - csharp
  name: AsyncPostBackTrigger
  nameWithType: AsyncPostBackTrigger
  fullName: System.Web.UI.AsyncPostBackTrigger
  type: Class
  summary: "控件和控件的可选事件定义会导致一个异步回发控件触发器为<xref href=&quot;System.Web.UI.UpdatePanel&quot;></xref>控件，用于刷新。"
  remarks: "AsyncPostBackTrigger 控件用于使控件能够触发器<xref:System.Web.UI.UpdatePanel>控件。</xref:System.Web.UI.UpdatePanel> 更新的面板的触发器的控件后异步回发导致刷新面板的内容。 定义异步触发器控件是在以下情况下有用:-对于外部面板控件。      -的面板中的控件时<xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A>属性是`false`。</xref:System.Web.UI.UpdatePanel.ChildrenAsTriggers%2A>      -对于位于以便刷新父面板的嵌套面板的控件。       AsyncPostBackTrigger 控件引用的控件必须是更新面板中相同的命名容器中它是一个触发器。 不支持基于其他命名容器中的控件的触发器。       将 AsyncPostBackTrigger 控件通过使用添加**UpdatePanelTrigger 集合编辑器**对话框中，在设计器或通过创建`Triggers`元素中以声明方式<xref:System.Web.UI.UpdatePanel>控件。</xref:System.Web.UI.UpdatePanel> <xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A>属性是必需的但<xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>属性是可选的。</xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> </xref:System.Web.UI.AsyncPostBackTrigger.ControlID%2A> 如果<xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>未指定属性，<xref:System.ComponentModel.DefaultEventAttribute>的控件属性用于确定默认事件。</xref:System.ComponentModel.DefaultEventAttribute> </xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A> 例如的默认事件<xref:System.Web.UI.WebControls.Button>控件是<xref:System.Web.UI.WebControls.Button.Click>事件。</xref:System.Web.UI.WebControls.Button.Click> </xref:System.Web.UI.WebControls.Button> <xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>属性是不区分大小写。</xref:System.Web.UI.AsyncPostBackTrigger.EventName%2A>       你还可以为触发器引用的命名容器。 在这种情况下，容器中导致回发的所有子控件被都视为触发器<xref:System.Web.UI.UpdatePanel>控件。</xref:System.Web.UI.UpdatePanel>       不支持以编程方式添加 AsyncPostBackTrigger 控件。 若要以编程方式注册的回发控件，使用<xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A>方法<xref:System.Web.UI.ScriptManager>控件。</xref:System.Web.UI.ScriptManager> </xref:System.Web.UI.ScriptManager.RegisterAsyncPostBackControl%2A> 然后调用<xref:System.Web.UI.UpdatePanel.Update%2A>方法<xref:System.Web.UI.UpdatePanel>控制时在控件回发。</xref:System.Web.UI.UpdatePanel> </xref:System.Web.UI.UpdatePanel.Update%2A>       如果定义一个同时使用<xref:System.Web.UI.PostBackTrigger>和 AsyncPostBackTrigger，将引发异常。</xref:System.Web.UI.PostBackTrigger>"
  example:
  - "The following example shows how to add an AsyncPostBackTrigger control declaratively. A <xref:System.Web.UI.WebControls.Button> control that is outside an <xref:System.Web.UI.UpdatePanel> control lets users enter a search term to find in the `Products` table of the Northwind database. A <xref:System.Web.UI.WebControls.GridView> control that is inside the <xref:System.Web.UI.UpdatePanel> control shows the results. The <xref:System.Web.UI.WebControls.Button> control is specified as an asynchronous trigger for the <xref:System.Web.UI.UpdatePanel> control.  \n  \n [!code-vb[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/visualbasic/t-system.web.ui.asyncpos_1.aspx)]\n [!code-cs[System.Web.UI.AsyncPostBackTrigger#1](~/add/codesnippet/csharp/t-system.web.ui.asyncpos_1.aspx)]"
  syntax:
    content: 'public class AsyncPostBackTrigger : System.Web.UI.UpdatePanelControlTrigger'
  inheritance:
  - System.Object
  - System.Web.UI.UpdatePanelTrigger
  - System.Web.UI.UpdatePanelControlTrigger
  implements: []
  inheritedMembers:
  - System.Web.UI.UpdatePanelControlTrigger.FindTargetControl(System.Boolean)
  - System.Web.UI.UpdatePanelTrigger.Owner
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor
  id: '#ctor'
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: AsyncPostBackTrigger()
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()
  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;></xref>类。"
  remarks: "添加<xref:System.Web.UI.AsyncPostBackTrigger>控制通过使用**UpdatePanelTrigger 集合编辑器**对话框中，在设计器或通过创建`Triggers`元素中以声明方式<xref:System.Web.UI.UpdatePanel>控件。</xref:System.Web.UI.UpdatePanel> </xref:System.Web.UI.AsyncPostBackTrigger>       添加<xref:System.Web.UI.AsyncPostBackTrigger>以编程方式不支持的控件。</xref:System.Web.UI.AsyncPostBackTrigger>"
  syntax:
    content: public AsyncPostBackTrigger ();
    parameters: []
  overload: System.Web.UI.AsyncPostBackTrigger.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID
  id: ControlID
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "获取或设置触发的异步回发的控件名称<xref href=&quot;System.Web.UI.UpdatePanel&quot;></xref>控件。"
  syntax:
    content: public string ControlID { get; set; }
    return:
      type: System.String
      description: "服务器控件 id。"
  overload: System.Web.UI.AsyncPostBackTrigger.ControlID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.EventName
  id: EventName
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
  fullName: System.Web.UI.AsyncPostBackTrigger.EventName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "获取或设置触发的回发的控件事件<xref href=&quot;System.Web.UI.UpdatePanel&quot;></xref>控件进行更新。"
  remarks: "EventName 属性是可选的。 如果未指定，<xref:System.ComponentModel.DefaultEventAttribute>的控件属性用于确定默认事件。</xref:System.ComponentModel.DefaultEventAttribute> 下表列出某些常见的 ASP.NET 2.0 控件的默认的事件。      |控制 |默认事件 |  |-------------|-------------------|  |<xref:System.Web.UI.WebControls.Button>|<xref:System.Web.UI.WebControls.Button.Click>|  |<xref:System.Web.UI.WebControls.Calendar>|<xref:System.Web.UI.WebControls.Calendar.SelectionChanged>|  |<xref:System.Web.UI.WebControls.CheckBox>|<xref:System.Web.UI.WebControls.CheckBox.CheckedChanged>|  |<xref:System.Web.UI.WebControls.GridView>|<xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged>|  |<xref:System.Web.UI.WebControls.TextBox>|<xref:System.Web.UI.WebControls.TextBox.TextChanged>|</xref:System.Web.UI.WebControls.TextBox.TextChanged></xref:System.Web.UI.WebControls.TextBox></xref:System.Web.UI.WebControls.GridView.SelectedIndexChanged></xref:System.Web.UI.WebControls.GridView></xref:System.Web.UI.WebControls.CheckBox.CheckedChanged></xref:System.Web.UI.WebControls.CheckBox></xref:System.Web.UI.WebControls.Calendar.SelectionChanged></xref:System.Web.UI.WebControls.Calendar></xref:System.Web.UI.WebControls.Button.Click></xref:System.Web.UI.WebControls.Button>"
  syntax:
    content: public string EventName { get; set; }
    return:
      type: System.String
      description: "事件名称。 默认值为<xref:System.String>。</xref:System.String>"
  overload: System.Web.UI.AsyncPostBackTrigger.EventName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered
  id: HasTriggered
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: HasTriggered()
  nameWithType: AsyncPostBackTrigger.HasTriggered()
  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "返回一个值，该值指示是否已调用该触发器。"
  remarks: "控件开发人员可以重写 HasTriggered 方法以提供自定义逻辑，用于确定是否已调用触发器。 若要查看中的自定义触发器`Triggers`元素<xref:System.Web.UI.UpdatePanel>控件，可以将一个指令添加到页面或 Web.config 文件的元素。</xref:System.Web.UI.UpdatePanel>"
  syntax:
    content: protected override bool HasTriggered ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已调用触发器;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.AsyncPostBackTrigger.HasTriggered*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize
  id: Initialize
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: Initialize()
  nameWithType: AsyncPostBackTrigger.Initialize()
  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "初始化<xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;></xref>控件，并确定在触发器中名为的事件是否存在以及是否有效。"
  syntax:
    content: protected override void Initialize ();
    parameters: []
  overload: System.Web.UI.AsyncPostBackTrigger.Initialize*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "No <xref href=\"System.Web.UI.ScriptManager\"></xref> control was found on the page.  \n  \n \\- or -  \n  \n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property is not found for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property.  \n  \n \\- or -  \n  \n The event that is named in the <xref:System.Web.UI.AsyncPostBackTrigger.EventName*> property for the control that is named in the <xref:System.Web.UI.UpdatePanelControlTrigger.ControlID*> property does not match a standard event handler signature."
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  id: OnEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: OnEvent(Object,EventArgs)
  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "引发事件将触发的回发和刷新<xref href=&quot;System.Web.UI.UpdatePanel&quot;></xref>控件。"
  syntax:
    content: public void OnEvent (object sender, EventArgs e);
    parameters:
    - id: sender
      type: System.Object
      description: "事件发送方。"
    - id: e
      type: System.EventArgs
      description: "事件数据。"
  overload: System.Web.UI.AsyncPostBackTrigger.OnEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.AsyncPostBackTrigger.ToString
  id: ToString
  parent: System.Web.UI.AsyncPostBackTrigger
  langs:
  - csharp
  name: ToString()
  nameWithType: AsyncPostBackTrigger.ToString()
  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI
  summary: "返回当前的字符串表示<xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;></xref>控件。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "一个字符串，表示当前<xref href=&quot;System.Web.UI.AsyncPostBackTrigger&quot;></xref>控件。"
  overload: System.Web.UI.AsyncPostBackTrigger.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.UpdatePanelControlTrigger
  isExternal: false
  name: System.Web.UI.UpdatePanelControlTrigger
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: AsyncPostBackTrigger()
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger()
  fullName: System.Web.UI.AsyncPostBackTrigger.AsyncPostBackTrigger()
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
  fullName: System.Web.UI.AsyncPostBackTrigger.ControlID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.AsyncPostBackTrigger.EventName
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
  fullName: System.Web.UI.AsyncPostBackTrigger.EventName
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: HasTriggered()
  nameWithType: AsyncPostBackTrigger.HasTriggered()
  fullName: System.Web.UI.AsyncPostBackTrigger.HasTriggered()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: Initialize()
  nameWithType: AsyncPostBackTrigger.Initialize()
  fullName: System.Web.UI.AsyncPostBackTrigger.Initialize()
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent(System.Object,System.EventArgs)
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: OnEvent(Object,EventArgs)
  nameWithType: AsyncPostBackTrigger.OnEvent(Object,EventArgs)
  fullName: System.Web.UI.AsyncPostBackTrigger.OnEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.AsyncPostBackTrigger.ToString
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ToString()
  nameWithType: AsyncPostBackTrigger.ToString()
  fullName: System.Web.UI.AsyncPostBackTrigger.ToString()
- uid: System.Web.UI.AsyncPostBackTrigger.#ctor*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: AsyncPostBackTrigger
  nameWithType: AsyncPostBackTrigger.AsyncPostBackTrigger
- uid: System.Web.UI.AsyncPostBackTrigger.ControlID*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ControlID
  nameWithType: AsyncPostBackTrigger.ControlID
- uid: System.Web.UI.AsyncPostBackTrigger.EventName*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: EventName
  nameWithType: AsyncPostBackTrigger.EventName
- uid: System.Web.UI.AsyncPostBackTrigger.HasTriggered*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: HasTriggered
  nameWithType: AsyncPostBackTrigger.HasTriggered
- uid: System.Web.UI.AsyncPostBackTrigger.Initialize*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: Initialize
  nameWithType: AsyncPostBackTrigger.Initialize
- uid: System.Web.UI.AsyncPostBackTrigger.OnEvent*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: OnEvent
  nameWithType: AsyncPostBackTrigger.OnEvent
- uid: System.Web.UI.AsyncPostBackTrigger.ToString*
  parent: System.Web.UI.AsyncPostBackTrigger
  isExternal: false
  name: ToString
  nameWithType: AsyncPostBackTrigger.ToString
