### YamlMime:ManagedReference
items:
- uid: System.Windows.Documents.EditingCommands
  id: EditingCommands
  children:
  - System.Windows.Documents.EditingCommands.AlignCenter
  - System.Windows.Documents.EditingCommands.AlignJustify
  - System.Windows.Documents.EditingCommands.AlignLeft
  - System.Windows.Documents.EditingCommands.AlignRight
  - System.Windows.Documents.EditingCommands.Backspace
  - System.Windows.Documents.EditingCommands.CorrectSpellingError
  - System.Windows.Documents.EditingCommands.DecreaseFontSize
  - System.Windows.Documents.EditingCommands.DecreaseIndentation
  - System.Windows.Documents.EditingCommands.Delete
  - System.Windows.Documents.EditingCommands.DeleteNextWord
  - System.Windows.Documents.EditingCommands.DeletePreviousWord
  - System.Windows.Documents.EditingCommands.EnterLineBreak
  - System.Windows.Documents.EditingCommands.EnterParagraphBreak
  - System.Windows.Documents.EditingCommands.IgnoreSpellingError
  - System.Windows.Documents.EditingCommands.IncreaseFontSize
  - System.Windows.Documents.EditingCommands.IncreaseIndentation
  - System.Windows.Documents.EditingCommands.MoveDownByLine
  - System.Windows.Documents.EditingCommands.MoveDownByPage
  - System.Windows.Documents.EditingCommands.MoveDownByParagraph
  - System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  - System.Windows.Documents.EditingCommands.MoveLeftByWord
  - System.Windows.Documents.EditingCommands.MoveRightByCharacter
  - System.Windows.Documents.EditingCommands.MoveRightByWord
  - System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  - System.Windows.Documents.EditingCommands.MoveToDocumentStart
  - System.Windows.Documents.EditingCommands.MoveToLineEnd
  - System.Windows.Documents.EditingCommands.MoveToLineStart
  - System.Windows.Documents.EditingCommands.MoveUpByLine
  - System.Windows.Documents.EditingCommands.MoveUpByPage
  - System.Windows.Documents.EditingCommands.MoveUpByParagraph
  - System.Windows.Documents.EditingCommands.SelectDownByLine
  - System.Windows.Documents.EditingCommands.SelectDownByPage
  - System.Windows.Documents.EditingCommands.SelectDownByParagraph
  - System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  - System.Windows.Documents.EditingCommands.SelectLeftByWord
  - System.Windows.Documents.EditingCommands.SelectRightByCharacter
  - System.Windows.Documents.EditingCommands.SelectRightByWord
  - System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  - System.Windows.Documents.EditingCommands.SelectToDocumentStart
  - System.Windows.Documents.EditingCommands.SelectToLineEnd
  - System.Windows.Documents.EditingCommands.SelectToLineStart
  - System.Windows.Documents.EditingCommands.SelectUpByLine
  - System.Windows.Documents.EditingCommands.SelectUpByPage
  - System.Windows.Documents.EditingCommands.SelectUpByParagraph
  - System.Windows.Documents.EditingCommands.TabBackward
  - System.Windows.Documents.EditingCommands.TabForward
  - System.Windows.Documents.EditingCommands.ToggleBold
  - System.Windows.Documents.EditingCommands.ToggleBullets
  - System.Windows.Documents.EditingCommands.ToggleInsert
  - System.Windows.Documents.EditingCommands.ToggleItalic
  - System.Windows.Documents.EditingCommands.ToggleNumbering
  - System.Windows.Documents.EditingCommands.ToggleSubscript
  - System.Windows.Documents.EditingCommands.ToggleSuperscript
  - System.Windows.Documents.EditingCommands.ToggleUnderline
  langs:
  - csharp
  name: EditingCommands
  nameWithType: EditingCommands
  fullName: System.Windows.Documents.EditingCommands
  type: Class
  summary: "提供一组标准的编辑相关的命令。"
  remarks: "下表显示了编辑命令和关联的默认键笔势 (与中的键名<xref:System.Windows.Input.Key>和<xref:System.Windows.Input.ModifierKeys>枚举)。</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.Key>      |编辑命令 |默认键笔势 |  |---------------------|-------------------------|  |<xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>|`Ctrl`+`E`|  |<xref:System.Windows.Documents.EditingCommands.AlignJustify%2A>|`Ctrl`+`J`|  |<xref:System.Windows.Documents.EditingCommands.AlignLeft%2A>|`Ctrl`+`L`|  |<xref:System.Windows.Documents.EditingCommands.AlignRight%2A>|`Ctrl`+`R`|  |<xref:System.Windows.Documents.EditingCommands.Backspace%2A>|`Backspace`|  |<xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A>| 无默认键笔势 |  |<xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A>|`Ctrl`+`OemOpenBrackets`|  |<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>|`Ctrl`+`Shift`+`T`|  |<xref:System.Windows.Documents.EditingCommands.Delete%2A>|`Delete`|  |<xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A>|`Ctrl`+`Delete`|  |<xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A>|`Ctrl`+`Backspace`|  |<xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A>|`Shift`+`Enter`|  |<xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A>|`Enter`|  |<xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A>| 无默认键笔势 |  |<xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A>|`Ctrl`+`OemCloseBrackets`|  |<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>|`Ctrl`+`T`|  |<xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A>|`Down`|  |<xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A>|`PageDown`|  |<xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A>|`Ctrl`+`Down`|  |<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>|`Left`|  |<xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A>|`Ctrl`+`Left`|  |<xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A>|`Right`|  |<xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A>|`Ctrl`+`Right`|  |<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>|`Ctrl`+`End`|  |<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>|`Ctrl`+`Home`|  |<xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A>|`End`|  |<xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A>|`Home`|  |<xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A>|`Up`|  |<xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A>|`PageUp`|  |<xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A>|`Ctrl`+`Up`|  |<xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A>|`Shift`+`Down`|  |<xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A>|`Shift`+`PageDown`|  |<xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A>|`Ctrl`+`Shift`+`Down`|  |<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>|`Shift`+`Left`|  |<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>|`Ctrl`+`Shift`+`Left`|  |<xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A>|`Shift`+`Right`|  |<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>|`Ctrl`+`Shift`+`Right`|  |<xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A>|`Ctrl`+`Shift`+`End`|  |<xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A>|`Ctrl`+`Shift`+`Home`|  |<xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A>|`Shift`+`End`|  |<xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A>|`Shift`+`Home`|  |<xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A>|`Shift`+`Up`|  |<xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A>|`Shift`+`PageUp`|  |<xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A>|`Ctrl`+`Shift`+`Up`|  |<xref:System.Windows.Documents.EditingCommands.TabBackward%2A>|`Shift`+`Tab`|  |<xref:System.Windows.Documents.EditingCommands.TabForward%2A>|`Tab`|  |<xref:System.Windows.Documents.EditingCommands.ToggleBold%2A>|`Ctrl`+`B`|  |<xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A>|`Ctrl`+`Shift`+`L`|  |<xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A>|`Insert`|  |<xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A>|`Ctrl`+`I`|  |<xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A>|`Ctrl`+`Shift`+`N`|  |<xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A>|`Ctrl`+`OemPlus`|  |<xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A>|`Ctrl`+`Shift+OemPlus`|  |<xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A>|`Ctrl`+`U`|      插入符号移动命令和选择扩展命令共享一组公共的默认键笔势、 常规不同</xref:System.Windows.Documents.EditingCommands.ToggleUnderline%2A></xref:System.Windows.Documents.EditingCommands.ToggleSuperscript%2A></xref:System.Windows.Documents.EditingCommands.ToggleSubscript%2A></xref:System.Windows.Documents.EditingCommands.ToggleNumbering%2A></xref:System.Windows.Documents.EditingCommands.ToggleItalic%2A></xref:System.Windows.Documents.EditingCommands.ToggleInsert%2A></xref:System.Windows.Documents.EditingCommands.ToggleBullets%2A></xref:System.Windows.Documents.EditingCommands.ToggleBold%2A></xref:System.Windows.Documents.EditingCommands.TabForward%2A></xref:System.Windows.Documents.EditingCommands.TabBackward%2A></xref:System.Windows.Documents.EditingCommands.SelectUpByParagraph%2A></xref:System.Windows.Documents.EditingCommands.SelectUpByPage%2A></xref:System.Windows.Documents.EditingCommands.SelectUpByLine%2A></xref:System.Windows.Documents.EditingCommands.SelectToLineStart%2A></xref:System.Windows.Documents.EditingCommands.SelectToLineEnd%2A></xref:System.Windows.Documents.EditingCommands.SelectToDocumentStart%2A></xref:System.Windows.Documents.EditingCommands.SelectToDocumentEnd%2A></xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A></xref:System.Windows.Documents.EditingCommands.SelectRightByCharacter%2A></xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A></xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A></xref:System.Windows.Documents.EditingCommands.SelectDownByParagraph%2A></xref:System.Windows.Documents.EditingCommands.SelectDownByPage%2A></xref:System.Windows.Documents.EditingCommands.SelectDownByLine%2A></xref:System.Windows.Documents.EditingCommands.MoveUpByParagraph%2A></xref:System.Windows.Documents.EditingCommands.MoveUpByPage%2A></xref:System.Windows.Documents.EditingCommands.MoveUpByLine%2A></xref:System.Windows.Documents.EditingCommands.MoveToLineStart%2A></xref:System.Windows.Documents.EditingCommands.MoveToLineEnd%2A></xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A></xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A></xref:System.Windows.Documents.EditingCommands.MoveRightByWord%2A></xref:System.Windows.Documents.EditingCommands.MoveRightByCharacter%2A></xref:System.Windows.Documents.EditingCommands.MoveLeftByWord%2A></xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A></xref:System.Windows.Documents.EditingCommands.MoveDownByParagraph%2A></xref:System.Windows.Documents.EditingCommands.MoveDownByPage%2A></xref:System.Windows.Documents.EditingCommands.MoveDownByLine%2A></xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A></xref:System.Windows.Documents.EditingCommands.IncreaseFontSize%2A></xref:System.Windows.Documents.EditingCommands.IgnoreSpellingError%2A></xref:System.Windows.Documents.EditingCommands.EnterParagraphBreak%2A></xref:System.Windows.Documents.EditingCommands.EnterLineBreak%2A></xref:System.Windows.Documents.EditingCommands.DeletePreviousWord%2A></xref:System.Windows.Documents.EditingCommands.DeleteNextWord%2A></xref:System.Windows.Documents.EditingCommands.Delete%2A></xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A></xref:System.Windows.Documents.EditingCommands.DecreaseFontSize%2A></xref:System.Windows.Documents.EditingCommands.CorrectSpellingError%2A></xref:System.Windows.Documents.EditingCommands.Backspace%2A></xref:System.Windows.Documents.EditingCommands.AlignRight%2A></xref:System.Windows.Documents.EditingCommands.AlignLeft%2A></xref:System.Windows.Documents.EditingCommands.AlignJustify%2A></xref:System.Windows.Documents.EditingCommands.AlignCenter%2A>  例如，<xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>命令具有的默认键笔势<xref:System.Windows.Input.Key>，并且相应的<xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A>命令具有<xref:System.Windows.Input.ModifierKeys>+<xref:System.Windows.Input.Key>.</xref:System.Windows.Input.Key></xref:System.Windows.Input.ModifierKeys>的默认键笔势</xref:System.Windows.Documents.EditingCommands.SelectLeftByCharacter%2A></xref:System.Windows.Input.Key></xref:System.Windows.Documents.EditingCommands.MoveLeftByCharacter%2A>       一般情况下，EditingCommands 类提供的命令定义不能使用的命令参数 (`parameter`参数应通过<xref:System.Windows.Input.ICommand.Execute%2A>方法)。</xref:System.Windows.Input.ICommand.Execute%2A>       有关命令和命令的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static class EditingCommands
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignCenter
  id: AlignCenter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
  fullName: System.Windows.Documents.EditingCommands.AlignCenter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 AlignCenter 命令，它请求的当前段落或选中的段落居中。"
  remarks: "此命令在<xref:System.Windows.Documents.Paragraph>级别。</xref:System.Windows.Documents.Paragraph>  如果对部分选择的内容 （包括插入符号所在段落中的空选择） 段落中调用此命令，则请求的效果将应用于整个段落。  当跨越多个段落的选择内容调用此命令时，产生的效果被应用于参与选择每个段落的全部内容。       下图显示了为中心的内容的示例。       ![屏幕快照︰ TextAlign 属性值 Center](~/add/media/flowdoc-textalign-center.png &quot;屏幕快照︰ TextAlign 属性值 Center&quot;) <xref:System.Windows.Controls.RichTextBox>.</xref:System.Windows.Controls.RichTextBox>本机支持该命令      <a name=&quot;xamlAttributeUsage_AlignCenter&quot;></a># # XAML 属性用法```   <object property=&quot;AlignCenter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignCenter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_E&quot; name=&quot;E&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.AlignCenter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignJustify
  id: AlignJustify
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
  fullName: System.Windows.Documents.EditingCommands.AlignJustify
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 AlignJustify 命令，它请求的当前段落或选中的段落为两端对齐。"
  remarks: "此命令在<xref:System.Windows.Documents.Paragraph>级别。</xref:System.Windows.Documents.Paragraph>  如果对部分选择的内容 （包括插入符号所在段落中的空选择） 段落中调用此命令，则请求的效果将应用于整个段落。  如果选择范围跨越多个段落中调用此命令，将影响适用于所选内容中的所有段落。       当内容进行两端对齐时，以便对齐的线的相等或几乎相等宽度调整中各行内容的水平间距。  内容通常两端对齐两侧的内容创建平滑的边缘。       因为它通常是短于 rest，段落中的最后一行之后调用此命令可能会保留对齐。       下图显示对齐 （左对齐） 的内容。       ![屏幕快照︰ 内容未对齐](~/add/media/content-unjustified.png &quot;屏幕快照︰ 内容未对齐&quot;)两端对齐后下, 图显示相同的内容。       ![内容的屏幕截图对齐的文本](~/add/media/content-justified.png &quot;内容的屏幕截图对齐的文本&quot;)没有不一定对任何给定对象上的该命令的响应的实际实现; 在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_AlignJustify&quot;></a># # XAML 属性用法```   <object property=&quot;AlignJustify&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignJustify { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_J&quot; name=&quot;J&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.AlignJustify*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignLeft
  id: AlignLeft
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
  fullName: System.Windows.Documents.EditingCommands.AlignLeft
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 AlignLeft 命令，它请求的内容选择左对齐。"
  remarks: "此命令在<xref:System.Windows.Documents.Paragraph>级别。</xref:System.Windows.Documents.Paragraph>  如果对部分选择的内容 （包括插入符号所在段落中的空选择） 段落中调用此命令，则请求的效果将应用于整个段落。  当跨越多个段落的选择内容调用此命令时，产生的效果被应用于参与选择每个段落的全部内容。       下图显示了左对齐内容的示例。       ![屏幕快照︰ TextAlign 属性值为左对齐](~/add/media/flowdoc-textalign-left.png &quot;屏幕快照︰ TextAlign 属性值为左对齐&quot;)没有不一定对任何给定对象上的该命令的响应的实际实现; 在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_AlignLeft&quot;></a># # XAML 属性用法```   <object property=&quot;AlignLeft&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignLeft { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_L&quot; name=&quot;L&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.AlignLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.AlignRight
  id: AlignRight
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
  fullName: System.Windows.Documents.EditingCommands.AlignRight
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 AlignRight 命令，它请求的内容选择右对齐。"
  remarks: "此命令在<xref:System.Windows.Documents.Paragraph>级别。</xref:System.Windows.Documents.Paragraph>  如果对部分选择的内容 （包括插入符号所在段落中的空选择） 段落中调用此命令，则请求的效果将应用于整个段落。  当跨越多个段落的选择内容调用此命令时，产生的效果被应用于参与选择每个段落的全部内容。       下图显示了右对齐的内容的示例。       ![屏幕快照︰ TextAlign 值 Right](~/add/media/flowdoc-textalign-right.png &quot;屏幕快照︰ TextAlign 值 Right&quot;)没有不一定对任何给定对象上的该命令的响应的实际实现; 在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_AlignRight&quot;></a># # XAML 属性用法```   <object property=&quot;AlignRight&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand AlignRight { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_R&quot; name=&quot;R&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.AlignRight*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.Backspace
  id: Backspace
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: Backspace
  nameWithType: EditingCommands.Backspace
  fullName: System.Windows.Documents.EditingCommands.Backspace
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示退格符命令，它请求当前位置达到或超过当前所选内容的情况下输入退格符。"
  remarks: "在空选择调用时，此命令将删除之前插入符号的字符或段落分隔符。 在非空选择调用时，此命令将删除所选内容。       此命令将保留任何格式设置调用此命令后，在同一位置立即插入的内容已删除所选内容。  与之相反<xref:System.Windows.Documents.EditingCommands.Delete%2A>命令，不会保留以前的格式设置。</xref:System.Windows.Documents.EditingCommands.Delete%2A>       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_Backspace&quot;></a># # XAML 属性用法```   <object property=&quot;Backspace&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand Backspace { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Backspace&quot; name=&quot;Backspace&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.Backspace*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError
  id: CorrectSpellingError
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
  fullName: System.Windows.Documents.EditingCommands.CorrectSpellingError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 CorrectSpellingError 命令，它请求当前位置处的任何拼写错误的单词进行更正。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。      <a name=&quot;xamlAttributeUsage_CorrectSpellingError&quot;></a># # XAML 属性用法```   <object property=&quot;CorrectSpellingError&quot;/>   ```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand CorrectSpellingError { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的无默认键笔势。"
  overload: System.Windows.Documents.EditingCommands.CorrectSpellingError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize
  id: DecreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.DecreaseFontSize
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 DecreaseFontSize 命令，它请求当前所选内容的字体大小会降低 1 点。"
  remarks: "当其中脱字号是在某个词的空选择调用此命令时，所选内容会自动扩展以将命令应用于整个单词。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_DecreaseFontSize&quot;></a># # XAML 属性用法```   <object property=&quot;DecreaseFontSize&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DecreaseFontSize { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemOpenBrackets&quot; name=&quot;OemOpenBrackets&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.DecreaseFontSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation
  id: DecreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.DecreaseIndentation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 DecreaseIndentation 命令，它请求的当前段落的缩进能降低一个制表位。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      1> [!IMPORTANT]&1;> 此命令不起的文本元素除非<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>的文本元素的属性设置为`true`。</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>      <a name=&quot;xamlAttributeUsage_DecreaseIndentation&quot;></a># # XAML 属性用法```   <object property=&quot;DecreaseIndentation&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DecreaseIndentation { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_T&quot; name=&quot;T&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.DecreaseIndentation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.Delete
  id: Delete
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: Delete
  nameWithType: EditingCommands.Delete
  fullName: System.Windows.Documents.EditingCommands.Delete
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示删除命令，它请求的当前所选内容被删除。"
  remarks: "此命令将放弃任何格式设置从已删除所选内容。  与之相反<xref:System.Windows.Documents.EditingCommands.Backspace%2A>命令，其中保留后调用此命令将立即插入在同一位置的内容的已删除选择的任何格式。</xref:System.Windows.Documents.EditingCommands.Backspace%2A>       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_Delete&quot;></a># # XAML 属性用法```   <object property=&quot;Delete&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand Delete { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord
  id: DeleteNextWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
  fullName: System.Windows.Documents.EditingCommands.DeleteNextWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 DeleteNextWord 命令，它请求删除下一个单词 （相对于当前的位置）。"
  remarks: "如果脱字号为在某个词，则删除之间当前位置单词末尾的单词的其余部分。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_DeleteNextWord&quot;></a># # XAML 属性用法```   <object property=&quot;DeleteNextWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DeleteNextWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.DeleteNextWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord
  id: DeletePreviousWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
  fullName: System.Windows.Documents.EditingCommands.DeletePreviousWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 DeletePreviousWord 命令，它请求删除前一个单词 （相对于当前的位置）。"
  remarks: "如果脱字号为在某个词，则删除当前位置单词的开头之间的单词的其余部分。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_DeletePreviousWord&quot;></a># # XAML 属性用法```   <object property=&quot;DeletePreviousWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand DeletePreviousWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Backspace&quot; name=&quot;Backspace&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.DeletePreviousWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak
  id: EnterLineBreak
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
  fullName: System.Windows.Documents.EditingCommands.EnterLineBreak
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 EnterLineBreak 命令，它请求在当前位置或上当前所选内容的情况下插入一个分行符。"
  remarks: "为支持流内容，例如编辑器<xref:System.Windows.Controls.RichTextBox>，则此命令原因<xref:System.Windows.Documents.LineBreak>元素要插入当前位置。</xref:System.Windows.Documents.LineBreak> </xref:System.Windows.Controls.RichTextBox>       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_EnterLineBreak&quot;></a># # XAML 属性用法```   <object property=&quot;EnterLineBreak&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand EnterLineBreak { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Enter&quot; name=&quot;Enter&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.EnterLineBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  id: EnterParagraphBreak
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
  fullName: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 EnterParagraphBreak 命令，它请求在当前的位置或上当前所选内容的情况下插入段落中断。"
  remarks: "此命令是等效于用户按 ENTER 键。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>(时<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>属性是`true`)。</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      1> [!IMPORTANT]&1;> 此命令不起的文本元素除非<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>的文本元素的属性设置为`true`。</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsReturn%2A>      <a name=&quot;xamlAttributeUsage_EnterParagraphBreak&quot;></a># # XAML 属性用法```   <object property=&quot;EnterParagraphBreak&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand EnterParagraphBreak { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Enter&quot; name=&quot;Enter&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.EnterParagraphBreak*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  id: IgnoreSpellingError
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
  fullName: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 IgnoreSpellingError 命令，它请求被忽略的拼写错误的单词位于当前位置或中当前选择的任何实例。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。      <a name=&quot;xamlAttributeUsage_IgnoreSpellingError&quot;></a># # XAML 属性用法```   <object property=&quot;IgnoreSpellingError&quot;/>   ```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IgnoreSpellingError { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的无默认键笔势。"
  overload: System.Windows.Documents.EditingCommands.IgnoreSpellingError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize
  id: IncreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.IncreaseFontSize
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 IncreaseFontSize 命令，它请求当前所选内容的字体大小都加 1 个点。"
  remarks: "如果脱字号位置是在某个词的空选择调用此命令，则被扩展所选内容将命令应用于整个单词。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_IncreaseFontSize&quot;></a># # XAML 属性用法```   <object property=&quot;IncreaseFontSize&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IncreaseFontSize { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemCloseBrackets&quot; name=&quot;OemCloseBrackets&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.IncreaseFontSize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation
  id: IncreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.IncreaseIndentation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 IncreaseIndentation 命令，它请求的当前段落的缩进都加一个制表位。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      1> [!IMPORTANT]&1;> 此命令不起的文本元素除非<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>的文本元素的属性设置为`true`。</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>      <a name=&quot;xamlAttributeUsage_IncreaseIndentation&quot;></a># # XAML 属性用法```   <object property=&quot;IncreaseIndentation&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand IncreaseIndentation { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_T&quot; name=&quot;T&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.IncreaseIndentation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine
  id: MoveDownByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
  fullName: System.Windows.Documents.EditingCommands.MoveDownByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveDownByLine 命令，它请求脱字号向下移动一行。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveDownByLine&quot;></a># # XAML 属性用法```   <object property=&quot;MoveDownByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveDownByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage
  id: MoveDownByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
  fullName: System.Windows.Documents.EditingCommands.MoveDownByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求脱字号向下移动一页的 MoveDownByPage 命令。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveDownByPage&quot;></a># # XAML 属性用法```   <object property=&quot;MoveDownByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_PageDown&quot; name=&quot;PageDown&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveDownByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  id: MoveDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveDownByParagraph 命令，它请求脱字号向下移动一个段落。"
  remarks: "此命令将插入符号下一步段落开头。       此命令的行为类似<xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>在一种<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox>上调用时</xref:System.Windows.Documents.EditingCommands.MoveToDocumentEnd%2A>       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveDownByParagraph&quot;></a># # XAML 属性用法```   <object property=&quot;MoveDownByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveDownByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveDownByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  id: MoveLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveLeftByCharacter 命令，它请求将插入符号左移一个字符。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveLeftByCharacter&quot;></a># # XAML 属性用法```   <object property=&quot;MoveLeftByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveLeftByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveLeftByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord
  id: MoveLeftByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveLeftByWord 命令，它请求将插入符号移动剩余的一个单词。"
  remarks: "如果脱字号位于在某个词，此命令将插入符号移动到该单词的开头。  否则，此命令将插入符号移动到前一个单词的开头。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveLeftByWord&quot;></a># # XAML 属性用法```   <object property=&quot;MoveLeftByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveLeftByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveLeftByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  id: MoveRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveRightByCharacter 命令，它请求脱字号向右移动一个字符。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveRightByCharacter&quot;></a># # XAML 属性用法```   <object property=&quot;MoveRightByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveRightByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveRightByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord
  id: MoveRightByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
  fullName: System.Windows.Documents.EditingCommands.MoveRightByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveRightByWord 命令，它请求由一个字向右移动插入符号。"
  remarks: "如果脱字号位于在某个词，此命令将插入符号移动到该单词的末尾。  否则，此命令将插入符号移动到下一步的单词的开头。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveRightByWord&quot;></a># # XAML 属性用法```   <object property=&quot;MoveRightByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveRightByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveRightByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  id: MoveToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveToDocumentEnd 命令，它请求将插入符号移动到内容的结尾。"
  remarks: "A*文本容器*是窗体的内容手头的最终边框的元素。  <xref:System.Windows.Controls.TextBlock>和<xref:System.Windows.Documents.FlowDocument>是文本容器的示例。</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  共同的文本容器内包含的内容被称为*文档*。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToDocumentEnd&quot;></a># # XAML 属性用法```   <object property=&quot;MoveToDocumentEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToDocumentEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveToDocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  id: MoveToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveToDocumentStart 命令，它请求将插入符号移动到内容的开头。"
  remarks: "A*文本容器*是窗体的内容手头的最终边框的元素。  <xref:System.Windows.Controls.TextBlock>和<xref:System.Windows.Documents.FlowDocument>是文本容器的示例。</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  共同的文本容器内包含的内容被称为*文档*。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToDocumentStart&quot;></a># # XAML 属性用法```   <object property=&quot;MoveToDocumentStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToDocumentStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveToDocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd
  id: MoveToLineEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToLineEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveToLineEnd 命令，它请求将插入符号移动到当前行的末尾。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToLineEnd&quot;></a># # XAML 属性用法```   <object property=&quot;MoveToLineEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToLineEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveToLineEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart
  id: MoveToLineStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
  fullName: System.Windows.Documents.EditingCommands.MoveToLineStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveToLineStart 命令，它请求将插入符号移动到当前行的开头。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveToLineStart&quot;></a># # XAML 属性用法```   <object property=&quot;MoveToLineStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveToLineStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveToLineStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine
  id: MoveUpByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
  fullName: System.Windows.Documents.EditingCommands.MoveUpByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveUpByLine 命令，它请求插入符号向上移动一行。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveUpByLine&quot;></a># # XAML 属性用法```   <object property=&quot;MoveUpByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveUpByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage
  id: MoveUpByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
  fullName: System.Windows.Documents.EditingCommands.MoveUpByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求脱字号向上移动一页的 MoveUpByPage 命令。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveUpByPage&quot;></a># # XAML 属性用法```   <object property=&quot;MoveUpByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_PageUp&quot; name=&quot;PageUp&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveUpByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  id: MoveUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 MoveUpByParagraph 命令，它请求插入符号向上移动一个段落。"
  remarks: "此命令将插入符号下一步段落开头。       此命令的行为类似<xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A><xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox>调用时</xref:System.Windows.Documents.EditingCommands.MoveToDocumentStart%2A>       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>。</xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_MoveUpByParagraph&quot;></a># # XAML 属性用法```   <object property=&quot;MoveUpByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand MoveUpByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.MoveUpByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine
  id: SelectDownByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
  fullName: System.Windows.Documents.EditingCommands.SelectDownByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求的当前选择范围向下扩展一条线的 SelectDownByLine 命令。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByLine&quot;></a># # XAML 属性用法```   <object property=&quot;SelectDownByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectDownByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage
  id: SelectDownByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
  fullName: System.Windows.Documents.EditingCommands.SelectDownByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求的当前选择范围向下扩展一页的 SelectDownByPage 命令。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByPage&quot;></a># # XAML 属性用法```   <object property=&quot;SelectDownByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_PageDown&quot; name=&quot;PageDown&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectDownByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  id: SelectDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectDownByParagraph 命令，它请求的当前选择范围向下扩展一段。"
  remarks: "此命令将选择扩展到下一段的开头。  否则，此命令将选择扩展到的当前段落的末尾。  展开选定内容包括段落中断，标记段落的一端。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectDownByParagraph&quot;></a># # XAML 属性用法```   <object property=&quot;SelectDownByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectDownByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Down&quot; name=&quot;Down&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectDownByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  id: SelectLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectLeftByCharacter 命令，它请求的当前选择范围向左扩展一个字符。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectLeftByCharacter&quot;></a># # XAML 属性用法```   <object property=&quot;SelectLeftByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectLeftByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectLeftByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord
  id: SelectLeftByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectLeftByWord 命令，它请求的当前选择范围向左扩展一个字。"
  remarks: "如果脱字号位于在某个词，此命令将选择扩展到该单词的开头。  否则，此命令将选择扩展到前一个单词的开头。       展开所选内容不包括单词分隔符。  与之相反<xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>，其中包括 word 分隔符中的更多选择。</xref:System.Windows.Documents.EditingCommands.SelectRightByWord%2A>       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectLeftByWord&quot;></a># # XAML 属性用法```   <object property=&quot;SelectLeftByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectLeftByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Left&quot; name=&quot;Left&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectLeftByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  id: SelectRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectRightByCharacter 命令，它请求的当前选择范围向右扩展一个字符。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectRightByCharacter&quot;></a># # XAML 属性用法```   <object property=&quot;SelectRightByCharacter&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectRightByCharacter { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectRightByCharacter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord
  id: SelectRightByWord
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
  fullName: System.Windows.Documents.EditingCommands.SelectRightByWord
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectRightByWord 命令，它请求的当前选择范围向右扩展一个字。"
  remarks: "如果脱字号位于在某个词，此命令将选择扩展到该单词的末尾。  否则，此命令将选择扩展到下一步单词末尾。       展开选定内容包括单词分隔符。  与之相反<xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>其中不包括单词分隔符中的更多选择。</xref:System.Windows.Documents.EditingCommands.SelectLeftByWord%2A>       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectRightByWord&quot;></a># # XAML 属性用法```   <object property=&quot;SelectRightByWord&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectRightByWord { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Right&quot; name=&quot;Right&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectRightByWord*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  id: SelectToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectToDocumentEnd 命令，它请求当前所选内容将其扩展为内容的结尾。"
  remarks: "A*文本容器*是窗体的内容手头的最终边框的元素。  <xref:System.Windows.Controls.TextBlock>和<xref:System.Windows.Documents.FlowDocument>是文本容器的示例。</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  共同的文本容器内包含的内容被称为*文档*。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToDocumentEnd&quot;></a># # XAML 属性用法```   <object property=&quot;SelectToDocumentEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToDocumentEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectToDocumentEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  id: SelectToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectToDocumentStart 命令，它请求当前所选内容将其扩展为内容的开头。"
  remarks: "A*文本容器*是窗体的内容手头的最终边框的元素。  <xref:System.Windows.Controls.TextBlock>和<xref:System.Windows.Documents.FlowDocument>是文本容器的示例。</xref:System.Windows.Documents.FlowDocument></xref:System.Windows.Controls.TextBlock>  共同的文本容器内包含的内容被称为*文档*。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToDocumentStart&quot;></a># # XAML 属性用法```   <object property=&quot;SelectToDocumentStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToDocumentStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectToDocumentStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd
  id: SelectToLineEnd
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToLineEnd
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectToLineEnd 命令，它请求当前所选内容将其扩展为当前行的末尾。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToLineEnd&quot;></a># # XAML 属性用法```   <object property=&quot;SelectToLineEnd&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToLineEnd { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectToLineEnd*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart
  id: SelectToLineStart
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
  fullName: System.Windows.Documents.EditingCommands.SelectToLineStart
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 SelectToLineStart 命令，它请求当前所选内容将其扩展为当前行的开头。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectToLineStart&quot;></a># # XAML 属性用法```   <object property=&quot;SelectToLineStart&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectToLineStart { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Home&quot; name=&quot;Home&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectToLineStart*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine
  id: SelectUpByLine
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
  fullName: System.Windows.Documents.EditingCommands.SelectUpByLine
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求的当前选定范围向上扩展一条线的 SelectUpByLine 命令。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByLine&quot;></a># # XAML 属性用法```   <object property=&quot;SelectUpByLine&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByLine { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectUpByLine*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage
  id: SelectUpByPage
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
  fullName: System.Windows.Documents.EditingCommands.SelectUpByPage
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求的当前选定范围向上扩展一页的 SelectUpByPage 命令。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByPage&quot;></a># # XAML 属性用法```   <object property=&quot;SelectUpByPage&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByPage { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_PageUp&quot; name=&quot;PageUp&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectUpByPage*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  id: SelectUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求的当前选定范围向上扩展一段的 SelectUpByParagraph 命令。"
  remarks: "如果脱字号位于开始位置的段落，此命令将选择扩展到上一段的开头。  否则，此命令将选择扩展到的当前段落开头。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_SelectUpByParagraph&quot;></a># # XAML 属性用法```   <object property=&quot;SelectUpByParagraph&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand SelectUpByParagraph { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Up&quot; name=&quot;Up&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.SelectUpByParagraph*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.TabBackward
  id: TabBackward
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
  fullName: System.Windows.Documents.EditingCommands.TabBackward
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 TabBackward 命令。"
  remarks: "此命令的行为取决于当前所选内容。 如果选择项非空，则此命令相当于<xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A>.</xref:System.Windows.Documents.EditingCommands.DecreaseIndentation%2A> 如果脱字号位于表单元格中 (由表示<xref:System.Windows.Documents.TableCell>元素)，此命令将插入符号移动到上一个单元格。</xref:System.Windows.Documents.TableCell> 否则，在当前的位置插入一个 tab 字符。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>(时<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>属性是`true`)。</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_TabBackward&quot;></a># # XAML 属性用法```   <object property=&quot;TabBackward&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n```c#  \nRichTextBox rTB = new RichTextBox();  \n  \nEditingCommands.ToggleInsert.Execute(null, rTB);  \n  \n```  \n  \n```vb  \n			Dim rTB As New RichTextBox()  \n  \n			EditingCommands.ToggleInsert.Execute(Nothing, rTB)  \n```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand TabBackward { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Tab&quot; name=&quot;Tab&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.TabBackward*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.TabForward
  id: TabForward
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: TabForward
  nameWithType: EditingCommands.TabForward
  fullName: System.Windows.Documents.EditingCommands.TabForward
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 TabForward 命令。"
  remarks: "此命令的行为取决于当前所选内容。 如果所选内容是非空，或者如果所选内容为空且当前插入符号位置位于某一段落开头，则此命令相当于<xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A>.</xref:System.Windows.Documents.EditingCommands.IncreaseIndentation%2A> 如果脱字号位于表单元格中 (由表示<xref:System.Windows.Documents.TableCell>元素)，此命令将插入符号移动到下一个单元格。</xref:System.Windows.Documents.TableCell> 如果脱字号位于表的最后一个单元格中，此命令会导致要追加到表，插入符号放置在新行的第一个单元与新行。  否则，在当前的位置插入一个 tab 字符。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>和<xref:System.Windows.Controls.TextBox>(时<xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A>属性是`true`)。</xref:System.Windows.Controls.Primitives.TextBoxBase.AcceptsTab%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_TabForward&quot;></a># # XAML 属性用法```   <object property=&quot;TabForward&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n```c#  \nRichTextBox rTB = new RichTextBox();  \n  \nEditingCommands.ToggleInsert.Execute(null, rTB);  \n  \n```  \n  \n```vb  \n			Dim rTB As New RichTextBox()  \n  \n			EditingCommands.ToggleInsert.Execute(Nothing, rTB)  \n```"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand TabForward { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Tab&quot; name=&quot;Tab&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.TabForward*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleBold
  id: ToggleBold
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
  fullName: System.Windows.Documents.EditingCommands.ToggleBold
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 ToggleBold 命令，但要求<xref href=&quot;System.Windows.Documents.Bold&quot;></xref>格式切换当前所选内容。"
  remarks: "如果<xref:System.Windows.FontWeight>范围内当前所选内容为<xref:System.Windows.FontWeights.Thin%2A>到<xref:System.Windows.FontWeights.SemiBold%2A>，<xref:System.Windows.FontWeights.Bold%2A>应用于当前所选内容。</xref:System.Windows.FontWeights.Bold%2A> </xref:System.Windows.FontWeights.SemiBold%2A> </xref:System.Windows.FontWeights.Thin%2A> </xref:System.Windows.FontWeight>  否则为<xref:System.Windows.FontWeights.Normal%2A>应用。</xref:System.Windows.FontWeights.Normal%2A>  有关比较的<xref:System.Windows.FontWeight>值，请参阅<xref:System.Windows.FontWeights>。</xref:System.Windows.FontWeights></xref:System.Windows.FontWeight>列表       当所选内容为空并且脱字号位于在某个词时，所选内容被扩展以包含整个单词。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleBold&quot;></a># # XAML 属性用法```   <object property=&quot;ToggleBold&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleBold { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_B&quot; name=&quot;B&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.ToggleBold*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleBullets
  id: ToggleBullets
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
  fullName: System.Windows.Documents.EditingCommands.ToggleBullets
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 ToggleBullets 命令，该请求所未经排序的列表 （也称为项目符号列表） 格式对当前选定内容切换命令。"
  remarks: "此命令在<xref:System.Windows.Documents.Paragraph>级别。</xref:System.Windows.Documents.Paragraph>  如果对部分选择的内容 （包括插入符号所在段落中的空选择） 段落中调用此命令，则请求的效果将应用于整个段落。  当跨越多个段落的选择内容调用此命令时，产生的效果被应用于参与选择每个段落的全部内容。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleBullets&quot;></a># # XAML 属性用法```   <object property=&quot;ToggleBullets&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleBullets { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_L&quot; name=&quot;L&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.ToggleBullets*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleInsert
  id: ToggleInsert
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
  fullName: System.Windows.Documents.EditingCommands.ToggleInsert
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 ToggleInsert 命令，键入之间切换模式插入和改写。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持通过<xref:System.Windows.Controls.RichTextBox>， <xref:System.Windows.Controls.TextBox>，和<xref:System.Windows.Controls.PasswordBox>。</xref:System.Windows.Controls.PasswordBox> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleInsert&quot;></a># # XAML 属性用法```   <object property=&quot;ToggleInsert&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleInsert { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Insert&quot; name=&quot;Insert&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.ToggleInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleItalic
  id: ToggleItalic
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
  fullName: System.Windows.Documents.EditingCommands.ToggleItalic
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 ToggleItalic 命令，但要求<xref href=&quot;System.Windows.Documents.Italic&quot;></xref>格式切换当前所选内容。"
  remarks: "如果<xref:System.Windows.FontStyle>当前所选内容为<xref:System.Windows.FontStyles.Normal%2A>，<xref:System.Windows.FontStyles.Italic%2A>应用于当前所选内容。</xref:System.Windows.FontStyles.Italic%2A> </xref:System.Windows.FontStyles.Normal%2A> </xref:System.Windows.FontStyle>  否则为<xref:System.Windows.FontStyles.Normal%2A>应用。</xref:System.Windows.FontStyles.Normal%2A>       当所选内容为空并且脱字号位于在某个词时，所选内容被扩展以包含整个单词。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleItalic&quot;></a># # XAML 属性用法```   <object property=&quot;ToggleItalic&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleItalic { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_I&quot; name=&quot;I&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.ToggleItalic*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering
  id: ToggleNumbering
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
  fullName: System.Windows.Documents.EditingCommands.ToggleNumbering
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 ToggleNumbering 命令，该请求所经过排序的列表 （也称为编号列表） 格式对当前选定内容切换命令。"
  remarks: "此命令在<xref:System.Windows.Documents.Paragraph>级别。</xref:System.Windows.Documents.Paragraph>  如果对部分选择的内容 （包括插入符号所在段落中的空选择） 段落中调用此命令，则请求的效果将应用于整个段落。  当跨越多个段落的选择内容调用此命令时，产生的效果被应用于参与选择每个段落的全部内容。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleNumbering&quot;></a># # XAML 属性用法```   <object property=&quot;ToggleNumbering&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleNumbering { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_N&quot; name=&quot;N&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.ToggleNumbering*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript
  id: ToggleSubscript
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSubscript
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求所下标格式切换当前所选内容的 ToggleSubscript 命令。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。      <a name=&quot;xamlAttributeUsage_ToggleSubscript&quot;></a># # XAML 属性用法```   <object property=&quot;ToggleSubscript&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleSubscript { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemPlus&quot; name=&quot;OemPlus&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.ToggleSubscript*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript
  id: ToggleSuperscript
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSuperscript
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示请求所上标格式切换当前所选内容的 ToggleSuperscript 命令。"
  remarks: "并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。      <a name=&quot;xamlAttributeUsage_ToggleSuperscript&quot;></a># # XAML 属性用法```   <object property=&quot;ToggleSuperscript&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleSuperscript { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_Shift&quot; name=&quot;Shift&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_OemPlus&quot; name=&quot;OemPlus&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.ToggleSuperscript*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline
  id: ToggleUnderline
  parent: System.Windows.Documents.EditingCommands
  langs:
  - csharp
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
  fullName: System.Windows.Documents.EditingCommands.ToggleUnderline
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Documents
  summary: "表示 ToggleUnderline 命令，但要求<xref href=&quot;System.Windows.Documents.Underline&quot;></xref>格式切换当前所选内容。"
  remarks: "当所选内容为空并且脱字号位于在某个词时，所选内容被扩展以包含整个单词。       并不一定对任何给定的对象; 此命令的响应的实际实现在许多情况下响应命令的实现是应用程序编写器的责任。       此命令以本机方式支持<xref:System.Windows.Controls.RichTextBox>。</xref:System.Windows.Controls.RichTextBox>      <a name=&quot;xamlAttributeUsage_ToggleUnderline&quot;></a># # XAML 属性用法```   <object property=&quot;ToggleUnderline&quot;/>   ```"
  example:
  - "The following example demonstrates how to invoke an editing command on an object that supports the command.  \n  \n For this example, a <xref:System.Windows.Controls.RichTextBox> serves as the command target.  Note that <xref:System.Windows.Controls.RichTextBox> implements the <xref:System.Windows.IInputElement> interface (inherited from <xref:System.Windows.FrameworkElement>), and that it includes native support for many editing commands.  \n  \n The first argument for the <xref:System.Windows.Input.RoutedCommand.Execute%2A> method is a command parameter.  Most editing commands ignore the command parameter; in general, this parameter should be `null` for editing commands.  \n  \n The second argument specifies the object to which the command will be routed.  This object must implement the <xref:System.Windows.IInputElement> interface, and should include a handler for the specified command.  Generally, a command is ignored when invoked on an object that does not handle the command.  \n  \n [!code-vb[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/visualbasic/richtextboxsnippets/window1.xaml.vb#_editingcommands_invoke)]\n [!code-cs[RichTextBoxSnippets#_EditingCommands_Invoke](~/add/codesnippet/csharp/RichTextBoxSnippets/Window1.xaml.cs#_editingcommands_invoke)]"
  syntax:
    content: public static System.Windows.Input.RoutedUICommand ToggleUnderline { get; }
    return:
      type: System.Windows.Input.RoutedUICommand
      description: "请求的命令。  此命令的默认键笔势<xref uid=&quot;langword_csharp_Ctrl&quot; name=&quot;Ctrl&quot; href=&quot;&quot;> </xref> + <xref uid=&quot;langword_csharp_U&quot; name=&quot;U&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Documents.EditingCommands.ToggleUnderline*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.Documents.EditingCommands.AlignCenter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
  fullName: System.Windows.Documents.EditingCommands.AlignCenter
- uid: System.Windows.Input.RoutedUICommand
  parent: System.Windows.Input
  isExternal: false
  name: RoutedUICommand
  nameWithType: RoutedUICommand
  fullName: System.Windows.Input.RoutedUICommand
- uid: System.Windows.Documents.EditingCommands.AlignJustify
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
  fullName: System.Windows.Documents.EditingCommands.AlignJustify
- uid: System.Windows.Documents.EditingCommands.AlignLeft
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
  fullName: System.Windows.Documents.EditingCommands.AlignLeft
- uid: System.Windows.Documents.EditingCommands.AlignRight
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
  fullName: System.Windows.Documents.EditingCommands.AlignRight
- uid: System.Windows.Documents.EditingCommands.Backspace
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Backspace
  nameWithType: EditingCommands.Backspace
  fullName: System.Windows.Documents.EditingCommands.Backspace
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
  fullName: System.Windows.Documents.EditingCommands.CorrectSpellingError
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.DecreaseFontSize
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.DecreaseIndentation
- uid: System.Windows.Documents.EditingCommands.Delete
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Delete
  nameWithType: EditingCommands.Delete
  fullName: System.Windows.Documents.EditingCommands.Delete
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
  fullName: System.Windows.Documents.EditingCommands.DeleteNextWord
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
  fullName: System.Windows.Documents.EditingCommands.DeletePreviousWord
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
  fullName: System.Windows.Documents.EditingCommands.EnterLineBreak
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
  fullName: System.Windows.Documents.EditingCommands.EnterParagraphBreak
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
  fullName: System.Windows.Documents.EditingCommands.IgnoreSpellingError
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
  fullName: System.Windows.Documents.EditingCommands.IncreaseFontSize
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
  fullName: System.Windows.Documents.EditingCommands.IncreaseIndentation
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
  fullName: System.Windows.Documents.EditingCommands.MoveDownByLine
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
  fullName: System.Windows.Documents.EditingCommands.MoveDownByPage
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveDownByParagraph
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
  fullName: System.Windows.Documents.EditingCommands.MoveLeftByWord
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.MoveRightByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
  fullName: System.Windows.Documents.EditingCommands.MoveRightByWord
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.MoveToDocumentStart
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
  fullName: System.Windows.Documents.EditingCommands.MoveToLineEnd
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
  fullName: System.Windows.Documents.EditingCommands.MoveToLineStart
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
  fullName: System.Windows.Documents.EditingCommands.MoveUpByLine
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
  fullName: System.Windows.Documents.EditingCommands.MoveUpByPage
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.MoveUpByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
  fullName: System.Windows.Documents.EditingCommands.SelectDownByLine
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
  fullName: System.Windows.Documents.EditingCommands.SelectDownByPage
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectDownByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
  fullName: System.Windows.Documents.EditingCommands.SelectLeftByWord
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
  fullName: System.Windows.Documents.EditingCommands.SelectRightByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
  fullName: System.Windows.Documents.EditingCommands.SelectRightByWord
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
  fullName: System.Windows.Documents.EditingCommands.SelectToDocumentStart
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
  fullName: System.Windows.Documents.EditingCommands.SelectToLineEnd
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
  fullName: System.Windows.Documents.EditingCommands.SelectToLineStart
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
  fullName: System.Windows.Documents.EditingCommands.SelectUpByLine
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
  fullName: System.Windows.Documents.EditingCommands.SelectUpByPage
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
  fullName: System.Windows.Documents.EditingCommands.SelectUpByParagraph
- uid: System.Windows.Documents.EditingCommands.TabBackward
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
  fullName: System.Windows.Documents.EditingCommands.TabBackward
- uid: System.Windows.Documents.EditingCommands.TabForward
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabForward
  nameWithType: EditingCommands.TabForward
  fullName: System.Windows.Documents.EditingCommands.TabForward
- uid: System.Windows.Documents.EditingCommands.ToggleBold
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
  fullName: System.Windows.Documents.EditingCommands.ToggleBold
- uid: System.Windows.Documents.EditingCommands.ToggleBullets
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
  fullName: System.Windows.Documents.EditingCommands.ToggleBullets
- uid: System.Windows.Documents.EditingCommands.ToggleInsert
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
  fullName: System.Windows.Documents.EditingCommands.ToggleInsert
- uid: System.Windows.Documents.EditingCommands.ToggleItalic
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
  fullName: System.Windows.Documents.EditingCommands.ToggleItalic
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
  fullName: System.Windows.Documents.EditingCommands.ToggleNumbering
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSubscript
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
  fullName: System.Windows.Documents.EditingCommands.ToggleSuperscript
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
  fullName: System.Windows.Documents.EditingCommands.ToggleUnderline
- uid: System.Windows.Documents.EditingCommands.AlignCenter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignCenter
  nameWithType: EditingCommands.AlignCenter
- uid: System.Windows.Documents.EditingCommands.AlignJustify*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignJustify
  nameWithType: EditingCommands.AlignJustify
- uid: System.Windows.Documents.EditingCommands.AlignLeft*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignLeft
  nameWithType: EditingCommands.AlignLeft
- uid: System.Windows.Documents.EditingCommands.AlignRight*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: AlignRight
  nameWithType: EditingCommands.AlignRight
- uid: System.Windows.Documents.EditingCommands.Backspace*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Backspace
  nameWithType: EditingCommands.Backspace
- uid: System.Windows.Documents.EditingCommands.CorrectSpellingError*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: CorrectSpellingError
  nameWithType: EditingCommands.CorrectSpellingError
- uid: System.Windows.Documents.EditingCommands.DecreaseFontSize*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseFontSize
  nameWithType: EditingCommands.DecreaseFontSize
- uid: System.Windows.Documents.EditingCommands.DecreaseIndentation*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DecreaseIndentation
  nameWithType: EditingCommands.DecreaseIndentation
- uid: System.Windows.Documents.EditingCommands.Delete*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: Delete
  nameWithType: EditingCommands.Delete
- uid: System.Windows.Documents.EditingCommands.DeleteNextWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeleteNextWord
  nameWithType: EditingCommands.DeleteNextWord
- uid: System.Windows.Documents.EditingCommands.DeletePreviousWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: DeletePreviousWord
  nameWithType: EditingCommands.DeletePreviousWord
- uid: System.Windows.Documents.EditingCommands.EnterLineBreak*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterLineBreak
  nameWithType: EditingCommands.EnterLineBreak
- uid: System.Windows.Documents.EditingCommands.EnterParagraphBreak*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: EnterParagraphBreak
  nameWithType: EditingCommands.EnterParagraphBreak
- uid: System.Windows.Documents.EditingCommands.IgnoreSpellingError*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IgnoreSpellingError
  nameWithType: EditingCommands.IgnoreSpellingError
- uid: System.Windows.Documents.EditingCommands.IncreaseFontSize*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseFontSize
  nameWithType: EditingCommands.IncreaseFontSize
- uid: System.Windows.Documents.EditingCommands.IncreaseIndentation*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: IncreaseIndentation
  nameWithType: EditingCommands.IncreaseIndentation
- uid: System.Windows.Documents.EditingCommands.MoveDownByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByLine
  nameWithType: EditingCommands.MoveDownByLine
- uid: System.Windows.Documents.EditingCommands.MoveDownByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByPage
  nameWithType: EditingCommands.MoveDownByPage
- uid: System.Windows.Documents.EditingCommands.MoveDownByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveDownByParagraph
  nameWithType: EditingCommands.MoveDownByParagraph
- uid: System.Windows.Documents.EditingCommands.MoveLeftByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByCharacter
  nameWithType: EditingCommands.MoveLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveLeftByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveLeftByWord
  nameWithType: EditingCommands.MoveLeftByWord
- uid: System.Windows.Documents.EditingCommands.MoveRightByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByCharacter
  nameWithType: EditingCommands.MoveRightByCharacter
- uid: System.Windows.Documents.EditingCommands.MoveRightByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveRightByWord
  nameWithType: EditingCommands.MoveRightByWord
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentEnd
  nameWithType: EditingCommands.MoveToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.MoveToDocumentStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToDocumentStart
  nameWithType: EditingCommands.MoveToDocumentStart
- uid: System.Windows.Documents.EditingCommands.MoveToLineEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineEnd
  nameWithType: EditingCommands.MoveToLineEnd
- uid: System.Windows.Documents.EditingCommands.MoveToLineStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveToLineStart
  nameWithType: EditingCommands.MoveToLineStart
- uid: System.Windows.Documents.EditingCommands.MoveUpByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByLine
  nameWithType: EditingCommands.MoveUpByLine
- uid: System.Windows.Documents.EditingCommands.MoveUpByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByPage
  nameWithType: EditingCommands.MoveUpByPage
- uid: System.Windows.Documents.EditingCommands.MoveUpByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: MoveUpByParagraph
  nameWithType: EditingCommands.MoveUpByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectDownByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByLine
  nameWithType: EditingCommands.SelectDownByLine
- uid: System.Windows.Documents.EditingCommands.SelectDownByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByPage
  nameWithType: EditingCommands.SelectDownByPage
- uid: System.Windows.Documents.EditingCommands.SelectDownByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectDownByParagraph
  nameWithType: EditingCommands.SelectDownByParagraph
- uid: System.Windows.Documents.EditingCommands.SelectLeftByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByCharacter
  nameWithType: EditingCommands.SelectLeftByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectLeftByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectLeftByWord
  nameWithType: EditingCommands.SelectLeftByWord
- uid: System.Windows.Documents.EditingCommands.SelectRightByCharacter*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByCharacter
  nameWithType: EditingCommands.SelectRightByCharacter
- uid: System.Windows.Documents.EditingCommands.SelectRightByWord*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectRightByWord
  nameWithType: EditingCommands.SelectRightByWord
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentEnd
  nameWithType: EditingCommands.SelectToDocumentEnd
- uid: System.Windows.Documents.EditingCommands.SelectToDocumentStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToDocumentStart
  nameWithType: EditingCommands.SelectToDocumentStart
- uid: System.Windows.Documents.EditingCommands.SelectToLineEnd*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineEnd
  nameWithType: EditingCommands.SelectToLineEnd
- uid: System.Windows.Documents.EditingCommands.SelectToLineStart*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectToLineStart
  nameWithType: EditingCommands.SelectToLineStart
- uid: System.Windows.Documents.EditingCommands.SelectUpByLine*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByLine
  nameWithType: EditingCommands.SelectUpByLine
- uid: System.Windows.Documents.EditingCommands.SelectUpByPage*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByPage
  nameWithType: EditingCommands.SelectUpByPage
- uid: System.Windows.Documents.EditingCommands.SelectUpByParagraph*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: SelectUpByParagraph
  nameWithType: EditingCommands.SelectUpByParagraph
- uid: System.Windows.Documents.EditingCommands.TabBackward*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabBackward
  nameWithType: EditingCommands.TabBackward
- uid: System.Windows.Documents.EditingCommands.TabForward*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: TabForward
  nameWithType: EditingCommands.TabForward
- uid: System.Windows.Documents.EditingCommands.ToggleBold*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBold
  nameWithType: EditingCommands.ToggleBold
- uid: System.Windows.Documents.EditingCommands.ToggleBullets*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleBullets
  nameWithType: EditingCommands.ToggleBullets
- uid: System.Windows.Documents.EditingCommands.ToggleInsert*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleInsert
  nameWithType: EditingCommands.ToggleInsert
- uid: System.Windows.Documents.EditingCommands.ToggleItalic*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleItalic
  nameWithType: EditingCommands.ToggleItalic
- uid: System.Windows.Documents.EditingCommands.ToggleNumbering*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleNumbering
  nameWithType: EditingCommands.ToggleNumbering
- uid: System.Windows.Documents.EditingCommands.ToggleSubscript*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSubscript
  nameWithType: EditingCommands.ToggleSubscript
- uid: System.Windows.Documents.EditingCommands.ToggleSuperscript*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleSuperscript
  nameWithType: EditingCommands.ToggleSuperscript
- uid: System.Windows.Documents.EditingCommands.ToggleUnderline*
  parent: System.Windows.Documents.EditingCommands
  isExternal: false
  name: ToggleUnderline
  nameWithType: EditingCommands.ToggleUnderline
