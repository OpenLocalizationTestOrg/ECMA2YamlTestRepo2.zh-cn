### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.ApplicationTrustEnumerator
  id: ApplicationTrustEnumerator
  children:
  - System.Security.Policy.ApplicationTrustEnumerator.Current
  - System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  - System.Security.Policy.ApplicationTrustEnumerator.Reset
  - System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: ApplicationTrustEnumerator
  nameWithType: ApplicationTrustEnumerator
  fullName: System.Security.Policy.ApplicationTrustEnumerator
  type: Class
  summary: "表示的枚举数<xref href=&quot;System.Security.Policy.ApplicationTrust&quot;></xref>中的对象<xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;></xref>集合。"
  remarks: "枚举器只允许读取集合中的数据。 枚举器不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>方法还会枚举器放回此位置。</xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A> 在此位置，调用<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>属性引发异常。</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> 因此，必须调用<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>方法将枚举数前移到集合，然后再读取的值的第一个元素<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>属性。</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       <xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>返回相同的对象之前<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>或<xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>称为。</xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> <xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>设置<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>到下一个元素。</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       该枚举数传递到集合的末尾之后，将放在集合中，最后一个元素后面且调用<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>返回`false`。</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>引发异常。</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A> 若要重置<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>到集合中，第一个元素调用<xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>跟<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>.</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>调用</xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A></xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复失效，并且下次调用<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>或<xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>异常。</xref:System.InvalidOperationException> </xref:System.Security.Policy.ApplicationTrustEnumerator.Reset%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A> 如果调用之间修改集合<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>和<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>，<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>返回到该属性当前设置的元素即使枚举数已经无效。</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class ApplicationTrustEnumerator : System.Collections.IEnumerator
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current
  id: Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取当前<xref href=&quot;System.Security.Policy.ApplicationTrust&quot;></xref>对象在<xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;></xref>集合。"
  remarks: "创建枚举器时，它不指向对象，以便当前的属性无效，将引发异常，如果访问它。 必须先调用<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>方法，将光标定位在集合中的第一个对象。</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>       对当前具有到任何干预调用的多个调用<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>将返回相同<xref:System.Security.Policy.ApplicationTrust>对象。</xref:System.Security.Policy.ApplicationTrust> </xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Security.Policy.ApplicationTrust Current { get; }
    return:
      type: System.Security.Policy.ApplicationTrust
      description: "The current <xref href=&quot;System.Security.Policy.ApplicationTrust&quot;></xref> in the <xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;></xref>."
  overload: System.Security.Policy.ApplicationTrustEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  id: MoveNext
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: ApplicationTrustEnumerator.MoveNext()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.MoveNext()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "移动到中的下一步元素<xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;></xref>集合。"
  remarks: "MoveNext 方法立即返回`false`如果集合中的任何对象。       将返回 MoveNext`true`直到它已达到集合的末尾。 然后，它将返回`false`每个连续调用。 但是，已返回 MoveNext 后`false`，则访问<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>属性将引发异常。</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>       创建后，枚举数定位在第一个之前<xref:System.Security.Policy.ApplicationTrust>集合和 MoveNext 首次调用中的对象将枚举数定位在集合中的第一个对象。</xref:System.Security.Policy.ApplicationTrust>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果枚举数已成功地推进到下一个元素;，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果枚举数传递到集合的末尾。"
  overload: System.Security.Policy.ApplicationTrustEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset
  id: Reset
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: ApplicationTrustEnumerator.Reset()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "将枚举数重置到开头<xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;></xref>集合。"
  remarks: "一个枚举器会只进方向移动。 使用此方法以返回到的集合开头的枚举数<xref:System.Security.Policy.ApplicationTrust>对象。</xref:System.Security.Policy.ApplicationTrust>       重置方法将光标定位在集合中的第一个对象。 在调用之后重置，你不需要调用<xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>方法将光标向前移动到的第一个对象。</xref:System.Security.Policy.ApplicationTrustEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Policy.ApplicationTrustEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Security.Policy.ApplicationTrustEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取当前<xref:System.Object>中<xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;></xref>集合。</xref:System.Object>"
  remarks: "不调用此方法。使用<xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>属性改为。</xref:System.Security.Policy.ApplicationTrustEnumerator.Current%2A>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "当前<xref:System.Object>中<xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref>。</xref:System.Object>"
  overload: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Current
- uid: System.Security.Policy.ApplicationTrust
  parent: System.Security.Policy
  isExternal: false
  name: ApplicationTrust
  nameWithType: ApplicationTrust
  fullName: System.Security.Policy.ApplicationTrust
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: ApplicationTrustEnumerator.MoveNext()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.MoveNext()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Reset()
  nameWithType: ApplicationTrustEnumerator.Reset()
  fullName: System.Security.Policy.ApplicationTrustEnumerator.Reset()
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Security.Policy.ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
- uid: System.Security.Policy.ApplicationTrustEnumerator.Current*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Current
  nameWithType: ApplicationTrustEnumerator.Current
- uid: System.Security.Policy.ApplicationTrustEnumerator.MoveNext*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: ApplicationTrustEnumerator.MoveNext
- uid: System.Security.Policy.ApplicationTrustEnumerator.Reset*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: Reset
  nameWithType: ApplicationTrustEnumerator.Reset
- uid: System.Security.Policy.ApplicationTrustEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Security.Policy.ApplicationTrustEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: ApplicationTrustEnumerator.System.Collections.IEnumerator.Current
