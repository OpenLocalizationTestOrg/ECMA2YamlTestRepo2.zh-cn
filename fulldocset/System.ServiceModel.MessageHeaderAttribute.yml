### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.MessageHeaderAttribute
  id: MessageHeaderAttribute
  children:
  - System.ServiceModel.MessageHeaderAttribute.#ctor
  - System.ServiceModel.MessageHeaderAttribute.Actor
  - System.ServiceModel.MessageHeaderAttribute.MustUnderstand
  - System.ServiceModel.MessageHeaderAttribute.Relay
  langs:
  - csharp
  name: MessageHeaderAttribute
  nameWithType: MessageHeaderAttribute
  fullName: System.ServiceModel.MessageHeaderAttribute
  type: Class
  summary: "指定数据成员是 SOAP 消息头。"
  remarks: "MessageHeaderAttribute 属性允许你使用标记的类型的字段和属性映射<xref:System.ServiceModel.MessageContractAttribute>属性设为 SOAP 消息头。</xref:System.ServiceModel.MessageContractAttribute> 字段或属性可以是简单类型或可序列化的复合类型。       在不修改默认 SOAP 信封本身的情况下控制 SOAP 正文内容序列化的信息，请参阅<xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName>，[指定服务协定中的数据传输](~/add/includes/ajax-current-ext-md.md)，和[使用数据协定](~/add/includes/ajax-current-ext-md.md)。</xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=fullName>       有关创建消息协定的详细信息，请参阅[使用消息协定](~/add/includes/ajax-current-ext-md.md)。       SOAP 标准定义上一个标头可以存在的以下属性:-`Actor`或`Role`(`Actor` SOAP 1.1 中`Role`SOAP 1.2 中)- `MustUnderstand`       -    `Relay` `Actor`或`Role`属性指定给定标头所针对的节点的 URI。 `MustUnderstand`特性指定标头是否理解节点的处理。 `Relay`属性指定此标头是否要中继至下游节点。 [!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]不执行任何处理传入消息，这些特性除外`MustUnderstand`属性。       但是，你可以读取和写入这些属性，即使它们不会发送默认情况下也是如此。 可以通过两种方式来设置属性值。 首先，你可以更改<xref:System.ServiceModel.MessageHeaderAttribute.Actor%2A>，<xref:System.ServiceModel.MessageHeaderAttribute.MustUnderstand%2A>和<xref:System.ServiceModel.MessageHeaderAttribute.Relay%2A>MessageHeaderAttribute 上的属性。</xref:System.ServiceModel.MessageHeaderAttribute.Relay%2A> </xref:System.ServiceModel.MessageHeaderAttribute.MustUnderstand%2A> </xref:System.ServiceModel.MessageHeaderAttribute.Actor%2A> (没有任何`Role`设置属性 –<xref:System.ServiceModel.MessageHeaderAttribute.Actor%2A>属性和`Role`如果使用 SOAP 1.2 传递)。</xref:System.ServiceModel.MessageHeaderAttribute.Actor%2A> 例如︰ [!code-cs [XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent) ]控制这些属性的第二个方法是通过使类型的类型参数所需标头<xref:System.ServiceModel.MessageHeader%601>类和使用生成的类型以及 MessageHeaderAttribute。</xref:System.ServiceModel.MessageHeader%601> 然后使用<xref:System.ServiceModel.MessageHeader%601>属性以编程方式设置这些 SOAP 特性。</xref:System.ServiceModel.MessageHeader%601> 例如︰ [!code-cs [XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)][!code-cs[XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent) ]如果使用动态和静态控制机制，则静态设置为默认值，但可以使用动态机制重写。        例如︰ [!code-cs [XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)][!code-cs[XpsCreate #XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent) ]允许创建具有动态属性控制的重复标头。        例如︰```   [MessageHeaderArray] public MessageHeader<Person> documentApprovers[];   ```在接收端，读取这些 SOAP 属性仅可完成如果泛型<xref:System.ServiceModel.MessageHeader%601>使用类。</xref:System.ServiceModel.MessageHeader%601> 检查<xref:System.ServiceModel.MessageHeader%601.Actor%2A>，<xref:System.ServiceModel.MessageHeader%601.Relay%2A>或<xref:System.ServiceModel.MessageHeader%601.MustUnderstand%2A>属性标头的<xref:System.ServiceModel.MessageHeader%601>要发现对收到的消息上的属性设置类型。</xref:System.ServiceModel.MessageHeader%601> </xref:System.ServiceModel.MessageHeader%601.MustUnderstand%2A> </xref:System.ServiceModel.MessageHeader%601.Relay%2A> </xref:System.ServiceModel.MessageHeader%601.Actor%2A>       当接收到消息，然后发回，SOAP 属性设置唯一往返的标头<xref:System.ServiceModel.MessageHeader%601>类型。</xref:System.ServiceModel.MessageHeader%601>"
  example:
  - "The following code example shows the use of the MessageHeaderAttribute to create a SOAP header for the response message with the <xref:System.ServiceModel.MessageContractMemberAttribute.Name%2A>, <xref:System.ServiceModel.MessageContractMemberAttribute.Namespace%2A> and <xref:System.ServiceModel.MessageHeaderAttribute.MustUnderstand%2A> properties set to values appropriate for this header. The code example is followed by an example of the message when sent.  \n  \n [!code-vb[MessageHeaderAttribute#4](~/add/codesnippet/visualbasic/messageheaderattribute.client/services.vb#4)]\n [!code-cs[MessageHeaderAttribute#4](~/add/codesnippet/csharp/messageheaderattribute.client/services.cs#4)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false, Inherited=false)]

      public class MessageHeaderAttribute : System.ServiceModel.MessageContractMemberAttribute
  inheritance:
  - System.ServiceModel.MessageContractMemberAttribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.MessageHeaderAttribute.#ctor
  id: '#ctor'
  parent: System.ServiceModel.MessageHeaderAttribute
  langs:
  - csharp
  name: MessageHeaderAttribute()
  nameWithType: MessageHeaderAttribute.MessageHeaderAttribute()
  fullName: System.ServiceModel.MessageHeaderAttribute.MessageHeaderAttribute()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.MessageHeaderAttribute&quot;></xref>类。"
  syntax:
    content: public MessageHeaderAttribute ();
    parameters: []
  overload: System.ServiceModel.MessageHeaderAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageHeaderAttribute.Actor
  id: Actor
  parent: System.ServiceModel.MessageHeaderAttribute
  langs:
  - csharp
  name: Actor
  nameWithType: MessageHeaderAttribute.Actor
  fullName: System.ServiceModel.MessageHeaderAttribute.Actor
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置一个 URI，指示此标头为目标处的节点。 映射到角色标头属性时使用 SOAP 1.2，而使用 SOAP 1.1 时参与者标头属性。"
  remarks: "有关详细信息，请参阅备注部分的<xref:System.ServiceModel.MessageHeaderAttribute>有关详细信息。</xref:System.ServiceModel.MessageHeaderAttribute>"
  syntax:
    content: public string Actor { get; set; }
    return:
      type: System.String
      description: "一个 URI，指示此标头为目标处的节点。 使用 SOAP 1.1 时，此 URI 将映射到角色标头属性时使用 SOAP 1.2 和参与者标头属性。"
  overload: System.ServiceModel.MessageHeaderAttribute.Actor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageHeaderAttribute.MustUnderstand
  id: MustUnderstand
  parent: System.ServiceModel.MessageHeaderAttribute
  langs:
  - csharp
  name: MustUnderstand
  nameWithType: MessageHeaderAttribute.MustUnderstand
  fullName: System.ServiceModel.MessageHeaderAttribute.MustUnderstand
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "指定是否在起作用的节点<xref:System.ServiceModel.MessageHeaderAttribute.Actor*>角色必须理解此标头。</xref:System.ServiceModel.MessageHeaderAttribute.Actor*> 这将映射到<xref uid=&quot;langword_csharp_mustUnderstand&quot; name=&quot;mustUnderstand&quot; href=&quot;&quot;> </xref> SOAP 标头属性。"
  remarks: "有关详细信息，请参阅备注部分的<xref:System.ServiceModel.MessageHeaderAttribute>有关详细信息。</xref:System.ServiceModel.MessageHeaderAttribute>      1> [!IMPORTANT]&1;> 务必请记住，如果 MustUnderstand 属性为`true`发送和接收端上的应用程序不理解的标头，则将生成错误消息中。 相反，如果具有的标头`mustUnderstand`SOAP 标头属性设置为`true`由接收[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]，它必须是消息协定的一部分 (或必须由之一处理[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]通道); 否则为它假定无法理解标头，并引发异常。"
  example:
  - "The following code example shows the use of the <xref:System.ServiceModel.MessageHeaderAttribute> to create a SOAP header for the response message with the <xref:System.ServiceModel.MessageContractMemberAttribute.Name%2A>, <xref:System.ServiceModel.MessageContractMemberAttribute.Namespace%2A> and MustUnderstand properties set to values appropriate for this header. The code example is followed by an example of the message when sent.  \n  \n [!code-vb[MessageHeaderAttribute#4](~/add/codesnippet/visualbasic/messageheaderattribute.client/services.vb#4)]\n [!code-cs[MessageHeaderAttribute#4](~/add/codesnippet/csharp/messageheaderattribute.client/services.cs#4)]"
  syntax:
    content: public bool MustUnderstand { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在起作用的节点<xref:System.ServiceModel.MessageHeaderAttribute.Actor*>角色必须理解此标头; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.MessageHeaderAttribute.Actor*>"
  overload: System.ServiceModel.MessageHeaderAttribute.MustUnderstand*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageHeaderAttribute.Relay
  id: Relay
  parent: System.ServiceModel.MessageHeaderAttribute
  langs:
  - csharp
  name: Relay
  nameWithType: MessageHeaderAttribute.Relay
  fullName: System.ServiceModel.MessageHeaderAttribute.Relay
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "指定此标头是否要中继至下游节点。 这将映射到<xref uid=&quot;langword_csharp_relay&quot; name=&quot;relay&quot; href=&quot;&quot;> </xref> SOAP 标头属性。"
  remarks: "使用 SOAP 1.1 时，将忽略此属性。 有关详细信息，请参阅备注部分的<xref:System.ServiceModel.MessageHeaderAttribute>有关详细信息。</xref:System.ServiceModel.MessageHeaderAttribute>"
  syntax:
    content: public bool Relay { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此标头中继至下游节点;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.MessageHeaderAttribute.Relay*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.MessageContractMemberAttribute
  isExternal: false
  name: System.ServiceModel.MessageContractMemberAttribute
- uid: System.ServiceModel.MessageHeaderAttribute.#ctor
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: MessageHeaderAttribute()
  nameWithType: MessageHeaderAttribute.MessageHeaderAttribute()
  fullName: System.ServiceModel.MessageHeaderAttribute.MessageHeaderAttribute()
- uid: System.ServiceModel.MessageHeaderAttribute.Actor
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: Actor
  nameWithType: MessageHeaderAttribute.Actor
  fullName: System.ServiceModel.MessageHeaderAttribute.Actor
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.MessageHeaderAttribute.MustUnderstand
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: MustUnderstand
  nameWithType: MessageHeaderAttribute.MustUnderstand
  fullName: System.ServiceModel.MessageHeaderAttribute.MustUnderstand
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.MessageHeaderAttribute.Relay
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: Relay
  nameWithType: MessageHeaderAttribute.Relay
  fullName: System.ServiceModel.MessageHeaderAttribute.Relay
- uid: System.ServiceModel.MessageHeaderAttribute.#ctor*
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: MessageHeaderAttribute
  nameWithType: MessageHeaderAttribute.MessageHeaderAttribute
- uid: System.ServiceModel.MessageHeaderAttribute.Actor*
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: Actor
  nameWithType: MessageHeaderAttribute.Actor
- uid: System.ServiceModel.MessageHeaderAttribute.MustUnderstand*
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: MustUnderstand
  nameWithType: MessageHeaderAttribute.MustUnderstand
- uid: System.ServiceModel.MessageHeaderAttribute.Relay*
  parent: System.ServiceModel.MessageHeaderAttribute
  isExternal: false
  name: Relay
  nameWithType: MessageHeaderAttribute.Relay
