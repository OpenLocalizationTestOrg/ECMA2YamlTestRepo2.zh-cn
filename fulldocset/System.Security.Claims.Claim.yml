### YamlMime:ManagedReference
items:
- uid: System.Security.Claims.Claim
  id: Claim
  children:
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  - System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.#ctor(System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  - System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.Clone
  - System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  - System.Security.Claims.Claim.CustomSerializationData
  - System.Security.Claims.Claim.Issuer
  - System.Security.Claims.Claim.OriginalIssuer
  - System.Security.Claims.Claim.Properties
  - System.Security.Claims.Claim.Subject
  - System.Security.Claims.Claim.ToString
  - System.Security.Claims.Claim.Type
  - System.Security.Claims.Claim.Value
  - System.Security.Claims.Claim.ValueType
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  - System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  langs:
  - csharp
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
  type: Class
  summary: "表示声明。"
  remarks: "声明是有关由颁发者的使用者的声明。 声明表示的使用者在身份验证和授权操作的上下文中有用的属性。 使用者和颁发者是属于身份方案这两个实体。 使用者的一些典型示例包括︰ 用户、 应用程序或服务、 设备或计算机。 颁发者的一些典型示例包括︰ 操作系统、 应用程序。 服务、 角色提供程序、 标识提供程序，或联合身份验证提供程序中。 颁发者通过颁发安全令牌，通常通过安全令牌服务 (STS) 来提供声明。 (在 WIF，可以通过从派生生成 STS<xref:System.IdentityModel.SecurityTokenService>类)</xref:System.IdentityModel.SecurityTokenService>有时，通过存储直接在该资源的使用者属性可以扩展从颁发者收到的声明的集合。 声明可进行计算以确定对数据的访问权限和其他保护在授权的过程中的资源，并且也可以使用来使或 express 关于某主题的身份验证决策。       从.NET 4.5 开始，Windows Identity Foundation (WIF) 类，该类实现基于声明的标识，已完全集成到.NET Framework。 声明概念由实现声明类。       下面介绍的声明类的重要属性:-<xref:System.Security.Claims.Claim.Type%2A>属性是一个字符串 (通常是一个 URI) 包含有关声明的语义信息; 它告诉你声明的值的含义。</xref:System.Security.Claims.Claim.Type%2A> 例如，具有声明类型的声明<xref:System.Security.Claims.ClaimTypes.GivenName>(&quot;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname&quot;) 表示用户的名字。</xref:System.Security.Claims.ClaimTypes.GivenName> 值<xref:System.Security.Claims.Claim.Type%2A>属性可以是定义中的已知声明类型之一<xref:System.Security.Claims.ClaimTypes>类，也可以是任意一个 URI，定义由颁发者。</xref:System.Security.Claims.ClaimTypes> </xref:System.Security.Claims.Claim.Type%2A> 例如，一个声明类型为&quot;urn: spendinglimit&quot;可能表示一个用户特性，颁发者的业务上下文中有意义。      -<xref:System.Security.Claims.Claim.Value%2A>属性包含声明的值。</xref:System.Security.Claims.Claim.Value%2A> 为了减少依赖关系并简化管理，可在 WIF 声明的值被表示仅为字符串。 对于更复杂的值类型，建议你使用标准的 XML 架构类型来表示的值是用于将序列化到并从字符串反序列化方式。      -<xref:System.Security.Claims.Claim.ValueType%2A>属性包含标识值的类型信息的字符串。</xref:System.Security.Claims.Claim.ValueType%2A> 应使用此属性，以了解值的格式并提供有关如何反序列化信息。 如果你的解决方案需要复杂的值类型，建议你使用中的标准 XML 架构类型<xref:System.Security.Claims.Claim.ValueType%2A>属性以指示如何<xref:System.Security.Claims.Claim.Value%2A>属性是用于将序列化到和从字符串反序列化。</xref:System.Security.Claims.Claim.Value%2A> </xref:System.Security.Claims.Claim.ValueType%2A>      -<xref:System.Security.Claims.Claim.Subject%2A>属性是<xref:System.Security.Claims.ClaimsIdentity>表示声明主题的对象。</xref:System.Security.Claims.ClaimsIdentity> </xref:System.Security.Claims.Claim.Subject%2A> 声明的使用者是有关断言声明的实体 （通常请求资源的访问权限的用户）。 <xref:System.Security.Claims.ClaimsIdentity>包含，在其属性之间的描述的属性的声明的集合和属性的使用者，因为一个或多个颁发者通过证明。</xref:System.Security.Claims.ClaimsIdentity>      -<xref:System.Security.Claims.Claim.Issuer%2A>属性包含颁发声明的实体的名称。</xref:System.Security.Claims.Claim.Issuer%2A> 声明的颁发者是在由 WIF 包含由颁发者名称注册表维护的已知的颁发者列表中获取的名称的字符串。 颁发者名称注册表是类的从<xref:System.IdentityModel.Tokens.IssuerNameRegistry>类</xref:System.IdentityModel.Tokens.IssuerNameRegistry>派生的实例 颁发者名称注册表将验证由相应的颁发者的令牌的签名所需的加密材料的助记键名称相关联。 例如，<xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>类，可在初始状态下.NET 4.5 起，将每个颁发者的助记键名称与及其相应的 X.509 证书相关联。</xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry> 通常，由颁发者名称注册表在启动时对已知颁发者的列表是生成。 使用的列表<xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>在应用程序配置文件中指定。</xref:System.IdentityModel.Tokens.ConfigurationBasedIssuerNameRegistry>      -<xref:System.Security.Claims.Claim.OriginalIssuer%2A>属性包含最初发出声明的实体的名称。</xref:System.Security.Claims.Claim.OriginalIssuer%2A> 此属性旨在促进其中声明之前可能需要等待多个颁发者通过它提供的到 RP 应用程序，客户端的方案例如联合身份验证方案。 你可以检查<xref:System.Security.Claims.Claim.OriginalIssuer%2A>属性来确定最初发出声明的实体。</xref:System.Security.Claims.Claim.OriginalIssuer%2A> 该名称被从列表中的已知颁发者颁发者名称注册表中，如下所示的情况下由维护<xref:System.Security.Claims.Claim.Issuer%2A>属性。</xref:System.Security.Claims.Claim.Issuer%2A>"
  example:
  - "The following example extracts the claims associated to the authenticated user performing an HTTP request and writes them in the HTTP response. The current user is read from the <xref:System.Web.HttpContext> as a <xref:System.Security.Claims.ClaimsPrincipal> and the claims are read from it. The claims are then written to HTTP the response.  \n  \n```c#  \nClaimsPrincipal principal = HttpContext.Current.User as ClaimsPrincipal;  \nif (null != principal)  \n{  \n   foreach (Claim claim in principal.Claims)  \n   {  \n      Response.Write(\"CLAIM TYPE: \" + claim.Type + \"; CLAIM VALUE: \" + claim.Value + \"</br>\");  \n   }  \n  \n}  \n  \n```"
  syntax:
    content: public class Claim
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  id: '#ctor(System.IO.BinaryReader)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(BinaryReader)
  nameWithType: Claim.Claim(BinaryReader)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public Claim (System.IO.BinaryReader reader);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "要添加。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  id: '#ctor(System.Security.Claims.Claim)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(Claim)
  nameWithType: Claim.Claim(Claim)
  fullName: System.Security.Claims.Claim.Claim(Claim)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.Claim&quot;></xref>类。"
  syntax:
    content: protected Claim (System.Security.Claims.Claim other);
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: "安全声明。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(BinaryReader,ClaimsIdentity)
  nameWithType: Claim.Claim(BinaryReader,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.Claim&quot;></xref>类与指定的读取器和主题。"
  syntax:
    content: public Claim (System.IO.BinaryReader reader, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: reader
      type: System.IO.BinaryReader
      description: "二进制读取器。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "此声明说明的主题。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(Claim,ClaimsIdentity)
  nameWithType: Claim.Claim(Claim,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(Claim,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.Claim&quot;></xref>类，该类具有指定的安全声明和主题。"
  syntax:
    content: protected Claim (System.Security.Claims.Claim other, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: other
      type: System.Security.Claims.Claim
      description: "安全声明。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "此声明说明的主题。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String)
  nameWithType: Claim.Claim(String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.Claim&quot;></xref>具有指定的声明类型和值的类。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>属性设置为`null`。</xref:System.Security.Claims.Claim.Subject%2A> <xref:System.Security.Claims.Claim.Issuer%2A>和<xref:System.Security.Claims.Claim.OriginalIssuer%2A>属性设置为<xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>。</xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer> </xref:System.Security.Claims.Claim.OriginalIssuer%2A> </xref:System.Security.Claims.Claim.Issuer%2A> <xref:System.Security.Claims.Claim.ValueType%2A>属性设置为<xref:System.Security.Claims.ClaimValueTypes.String?displayProperty=fullName></xref:System.Security.Claims.ClaimValueTypes.String?displayProperty=fullName></xref:System.Security.Claims.Claim.ValueType%2A>"
  syntax:
    content: public Claim (string type, string value);
    parameters:
    - id: type
      type: System.String
      description: "声明类型。"
    - id: value
      type: System.String
      description: "声明值。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String)
  nameWithType: Claim.Claim(String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.Claim&quot;></xref>与指定的声明类型、 值和值类型的类。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>属性设置为`null`。</xref:System.Security.Claims.Claim.Subject%2A> <xref:System.Security.Claims.Claim.Issuer%2A>和<xref:System.Security.Claims.Claim.OriginalIssuer%2A>属性设置为<xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer>。</xref:System.Security.Claims.ClaimsIdentity.DefaultIssuer> </xref:System.Security.Claims.Claim.OriginalIssuer%2A> </xref:System.Security.Claims.Claim.Issuer%2A>"
  syntax:
    content: public Claim (string type, string value, string valueType);
    parameters:
    - id: type
      type: System.String
      description: "声明类型。"
    - id: value
      type: System.String
      description: "声明值。"
    - id: valueType
      type: System.String
      description: "声明值类型。 如果此参数为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然后<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>使用。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.Claim&quot;></xref>使用指定的声明类型、 值、 值类型和颁发者的类。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>属性设置为`null`。</xref:System.Security.Claims.Claim.Subject%2A> <xref:System.Security.Claims.Claim.OriginalIssuer%2A>属性设置的值根据`issuer`参数。</xref:System.Security.Claims.Claim.OriginalIssuer%2A>"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer);
    parameters:
    - id: type
      type: System.String
      description: "声明类型。"
    - id: value
      type: System.String
      description: "声明值。"
    - id: valueType
      type: System.String
      description: "声明值类型。 如果此参数为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然后<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>使用。"
    - id: issuer
      type: System.String
      description: "声明颁发者。 如果此参数为空或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然后<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>使用。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.Claim&quot;></xref>与指定的声明类型、 值、 值类型、 颁发者和原始颁发者的类。"
  remarks: "<xref:System.Security.Claims.Claim.Subject%2A>属性设置为`null`。</xref:System.Security.Claims.Claim.Subject%2A>"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer, string originalIssuer);
    parameters:
    - id: type
      type: System.String
      description: "声明类型。"
    - id: value
      type: System.String
      description: "声明值。"
    - id: valueType
      type: System.String
      description: "声明值类型。 如果此参数为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然后<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>使用。"
    - id: issuer
      type: System.String
      description: "声明颁发者。 如果此参数为空或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然后<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>使用。"
    - id: originalIssuer
      type: System.String
      description: "声明的原始颁发者。 如果此参数为空或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，则<> *1> 属性设置为的值<> *1> 属性。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  id: '#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)'
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Claim(String,String,String,String,String,ClaimsIdentity)
  nameWithType: Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "初始化的新实例<xref href=&quot;System.Security.Claims.Claim&quot;></xref>具有指定的声明类型、 值、 值类型、 颁发者、 原始颁发者和使用者的类。"
  syntax:
    content: public Claim (string type, string value, string valueType, string issuer, string originalIssuer, System.Security.Claims.ClaimsIdentity subject);
    parameters:
    - id: type
      type: System.String
      description: "声明类型。"
    - id: value
      type: System.String
      description: "声明值。"
    - id: valueType
      type: System.String
      description: "声明值类型。 如果此参数为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然后<xref href=&quot;System.Security.Claims.ClaimValueTypes.String&quot;></xref>使用。"
    - id: issuer
      type: System.String
      description: "声明颁发者。 如果此参数为空或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，然后<xref href=&quot;System.Security.Claims.ClaimsIdentity.DefaultIssuer&quot;></xref>使用。"
    - id: originalIssuer
      type: System.String
      description: "声明的原始颁发者。 如果此参数为空或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，则<> *1> 属性设置为的值<> *1> 属性。"
    - id: subject
      type: System.Security.Claims.ClaimsIdentity
      description: "此声明说明的主题。"
  overload: System.Security.Claims.Claim.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Claims.Claim.Clone
  id: Clone
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Clone()
  nameWithType: Claim.Clone()
  fullName: System.Security.Claims.Claim.Clone()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "返回一个新<xref href=&quot;System.Security.Claims.Claim&quot;></xref>复制此对象的对象。 新声明没有使用者。"
  remarks: "这是浅表复制操作。 <xref:System.Security.Claims.Claim.Subject%2A>属性的新<xref:System.Security.Claims.Claim>对象设置为`null`。</xref:System.Security.Claims.Claim> </xref:System.Security.Claims.Claim.Subject%2A>"
  syntax:
    content: public virtual System.Security.Claims.Claim Clone ();
    parameters: []
    return:
      type: System.Security.Claims.Claim
      description: "新的声明对象。"
  overload: System.Security.Claims.Claim.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  id: Clone(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Clone(ClaimsIdentity)
  nameWithType: Claim.Clone(ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Clone(ClaimsIdentity)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "返回一个新<xref href=&quot;System.Security.Claims.Claim&quot;></xref>复制此对象的对象。 新声明的使用者设置为指定 ClaimsIdentity。"
  remarks: "这是浅表复制操作。 <xref:System.Security.Claims.Claim.Subject%2A>属性的新<xref:System.Security.Claims.Claim>对象设置的值为`identity`参数。</xref:System.Security.Claims.Claim> </xref:System.Security.Claims.Claim.Subject%2A>"
  syntax:
    content: public virtual System.Security.Claims.Claim Clone (System.Security.Claims.ClaimsIdentity identity);
    parameters:
    - id: identity
      type: System.Security.Claims.ClaimsIdentity
      description: "新声明预期的主题。"
    return:
      type: System.Security.Claims.Claim
      description: "新的声明对象。"
  overload: System.Security.Claims.Claim.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.CustomSerializationData
  id: CustomSerializationData
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
  fullName: System.Security.Claims.Claim.CustomSerializationData
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: protected virtual byte[] CustomSerializationData { get; }
    return:
      type: System.Byte[]
      description: "返回<xref:System.Byte>.</xref:System.Byte>"
  overload: System.Security.Claims.Claim.CustomSerializationData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Issuer
  id: Issuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Issuer
  nameWithType: Claim.Issuer
  fullName: System.Security.Claims.Claim.Issuer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取声明的颁发者。"
  remarks: "颁发者属性的值是来自已知颁发者颁发者名称注册表由维护的列表的名称。 颁发者名称注册表是类的从<xref:System.IdentityModel.Tokens.IssuerNameRegistry>类</xref:System.IdentityModel.Tokens.IssuerNameRegistry>派生的实例 颁发者名称注册表将验证签名的令牌颁发者; 生成所需的加密材料与关联的助记键的名称 （颁发者名称）例如，X.509 证书。"
  syntax:
    content: public string Issuer { get; }
    return:
      type: System.String
      description: "一个引用声明颁发者的名称。"
  overload: System.Security.Claims.Claim.Issuer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.OriginalIssuer
  id: OriginalIssuer
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
  fullName: System.Security.Claims.Claim.OriginalIssuer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取声明的原始颁发者。"
  remarks: "包含最初发出声明的实体的名称。 此属性旨在促进其中声明之前可能需要等待多个颁发者通过它提供的到 RP 应用程序，客户端的方案例如联合身份验证方案。       OriginalIssuer 属性的值是来自已知颁发者颁发者名称注册表由维护的列表的名称。 颁发者名称注册表是类的从<xref:System.IdentityModel.Tokens.IssuerNameRegistry>类</xref:System.IdentityModel.Tokens.IssuerNameRegistry>派生的实例 颁发者名称注册表将验证签名的令牌颁发者; 生成所需的加密材料与关联的助记键的名称 （颁发者名称）例如，X.509 证书。       委托和联合身份验证的方案除外<xref:System.Security.Claims.Claim.Issuer%2A>属性和 OriginalIssuer 属性通常具有相同的值。</xref:System.Security.Claims.Claim.Issuer%2A> 如果 OriginalIssuer 属性的值不同的值<xref:System.Security.Claims.Claim.Issuer%2A>属性，该声明首先由原始颁发者签发，并随后重新由颁发者颁发。</xref:System.Security.Claims.Claim.Issuer%2A>"
  syntax:
    content: public string OriginalIssuer { get; }
    return:
      type: System.String
      description: "引用声明的原始颁发者名称。"
  overload: System.Security.Claims.Claim.OriginalIssuer*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Properties
  id: Properties
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Properties
  nameWithType: Claim.Properties
  fullName: System.Security.Claims.Claim.Properties
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取一个字典，其中包含与此声明关联的其他属性。"
  remarks: "Properties 属性提供允许元数据或有关要与之关联的声明的其他信息名称-值对的字典。 对于生成从 SAML 令牌的声明，此字典可能包含由<xref:System.Security.Claims.ClaimProperties>类</xref:System.Security.Claims.ClaimProperties>中的常量提供的键"
  syntax:
    content: public System.Collections.Generic.IDictionary<string,string> Properties { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: "一个字典，其中包含与声明关联的其他属性。 属性表示为名称 / 值对。"
  overload: System.Security.Claims.Claim.Properties*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Subject
  id: Subject
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Subject
  nameWithType: Claim.Subject
  fullName: System.Security.Claims.Claim.Subject
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取声明的使用者。"
  remarks: "使用者是哪些断言声明的实体。 一些典型示例是用户、 应用程序或服务、 设备或计算机。 由一种<xref:System.Security.Claims.ClaimsIdentity>，其中包含的声明用于描述它的集合</xref:System.Security.Claims.ClaimsIdentity>表示使用者"
  syntax:
    content: public System.Security.Claims.ClaimsIdentity Subject { get; }
    return:
      type: System.Security.Claims.ClaimsIdentity
      description: "声明的主题。"
  overload: System.Security.Claims.Claim.Subject*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.ToString
  id: ToString
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: ToString()
  nameWithType: Claim.ToString()
  fullName: System.Security.Claims.Claim.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "返回的字符串表示形式这<xref href=&quot;System.Security.Claims.Claim&quot;></xref>对象。"
  remarks: '返回的字符串包含<xref:System.Security.Claims.Claim.Type%2A>的值和<xref:System.Security.Claims.Claim.Value%2A>属性采用以下格式:。&quot;类型︰ 值&quot;。</xref:System.Security.Claims.Claim.Value%2A> </xref:System.Security.Claims.Claim.Type%2A>'
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "字符串表示形式这<xref href=&quot;System.Security.Claims.Claim&quot;></xref>对象。"
  overload: System.Security.Claims.Claim.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Type
  id: Type
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Type
  nameWithType: Claim.Type
  fullName: System.Security.Claims.Claim.Type
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取声明的声明类型。"
  remarks: "类型属性提供语义声明的内容，即，它指出声明是有关。 例如，具有声明类型的声明<xref:System.Security.Claims.ClaimTypes.GivenName>(&quot;http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname&quot;) 表示用户的名字。</xref:System.Security.Claims.ClaimTypes.GivenName> 声明类型通常是一个 URI;但是，你并不局限于任何特定的格式之外，它必须是可表示为字符串。 仅常规的要求是声明颁发者和声明使用者必须同意有关声明的含义。 使用通过 Windows Identity Foundation (WIF) 的已知声明类型的常量都可通过<xref:System.Security.Claims.ClaimTypes>类。</xref:System.Security.Claims.ClaimTypes> 声明值由提供<xref:System.Security.Claims.Claim.Value%2A>属性。</xref:System.Security.Claims.Claim.Value%2A>"
  syntax:
    content: public string Type { get; }
    return:
      type: System.String
      description: "声明类型。"
  overload: System.Security.Claims.Claim.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.Value
  id: Value
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: Value
  nameWithType: Claim.Value
  fullName: System.Security.Claims.Claim.Value
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取声明的值。"
  remarks: "声明的值被表示仅为一个字符串。 对于更复杂的值类型，建议你使用标准的 XML 架构类型来表示值并是序列化和反序列化到和从字符串。       <xref:System.Security.Claims.Claim.ValueType%2A>属性提供值的基础语法的类型信息。</xref:System.Security.Claims.Claim.ValueType%2A> <xref:System.Security.Claims.Claim.Type%2A>属性提供了有关值的语义信息; 也就是说，它提供的值的含义，并告知声明使用者如何解释它。</xref:System.Security.Claims.Claim.Type%2A>"
  syntax:
    content: public string Value { get; }
    return:
      type: System.String
      description: "声明值。"
  overload: System.Security.Claims.Claim.Value*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.ValueType
  id: ValueType
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: ValueType
  nameWithType: Claim.ValueType
  fullName: System.Security.Claims.Claim.ValueType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "获取声明的值类型。"
  remarks: "ValueType 属性包含一个字符串，标识值的类型信息。 可以使用此属性，以了解值的格式并提供有关如何序列化和反序列化值的信息。 如果你的解决方案需要复杂的值类型，建议你使用标准的 XML 架构类型的 ValueType 属性中以指示如何<xref:System.Security.Claims.Claim.Value%2A>属性旨在序列化和反序列化为一个字符串。</xref:System.Security.Claims.Claim.Value%2A>"
  syntax:
    content: public string ValueType { get; }
    return:
      type: System.String
      description: "声明值类型。"
  overload: System.Security.Claims.Claim.ValueType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  id: WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: WriteTo(BinaryWriter)
  nameWithType: Claim.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  syntax:
    content: public virtual void WriteTo (System.IO.BinaryWriter writer);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "要添加。"
  overload: System.Security.Claims.Claim.WriteTo*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  id: WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.Claim
  langs:
  - csharp
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: Claim.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter,Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Claims
  summary: "将此<xref href=&quot;System.Security.Claims.Claim&quot;></xref>写入的编写器。"
  syntax:
    content: protected virtual void WriteTo (System.IO.BinaryWriter writer, byte[] userData);
    parameters:
    - id: writer
      type: System.IO.BinaryWriter
      description: "要编写此声明的编写器"
    - id: userData
      type: System.Byte[]
      description: "要声明的用户数据"
  overload: System.Security.Claims.Claim.WriteTo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(BinaryReader)
  nameWithType: Claim.Claim(BinaryReader)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader)
- uid: System.IO.BinaryReader
  parent: System.IO
  isExternal: true
  name: BinaryReader
  nameWithType: BinaryReader
  fullName: System.IO.BinaryReader
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(Claim)
  nameWithType: Claim.Claim(Claim)
  fullName: System.Security.Claims.Claim.Claim(Claim)
- uid: System.Security.Claims.Claim
  parent: System.Security.Claims
  isExternal: false
  name: Claim
  nameWithType: Claim
  fullName: System.Security.Claims.Claim
- uid: System.Security.Claims.Claim.#ctor(System.IO.BinaryReader,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(BinaryReader,ClaimsIdentity)
  nameWithType: Claim.Claim(BinaryReader,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(BinaryReader,ClaimsIdentity)
- uid: System.Security.Claims.ClaimsIdentity
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsIdentity
  nameWithType: ClaimsIdentity
  fullName: System.Security.Claims.ClaimsIdentity
- uid: System.Security.Claims.Claim.#ctor(System.Security.Claims.Claim,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(Claim,ClaimsIdentity)
  nameWithType: Claim.Claim(Claim,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(Claim,ClaimsIdentity)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String)
  nameWithType: Claim.Claim(String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String)
  nameWithType: Claim.Claim(String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String,String)
  nameWithType: Claim.Claim(String,String,String,String,String)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String)
- uid: System.Security.Claims.Claim.#ctor(System.String,System.String,System.String,System.String,System.String,System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim(String,String,String,String,String,ClaimsIdentity)
  nameWithType: Claim.Claim(String,String,String,String,String,ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Claim(String,String,String,String,String,ClaimsIdentity)
- uid: System.Security.Claims.Claim.Clone
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone()
  nameWithType: Claim.Clone()
  fullName: System.Security.Claims.Claim.Clone()
- uid: System.Security.Claims.Claim.Clone(System.Security.Claims.ClaimsIdentity)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone(ClaimsIdentity)
  nameWithType: Claim.Clone(ClaimsIdentity)
  fullName: System.Security.Claims.Claim.Clone(ClaimsIdentity)
- uid: System.Security.Claims.Claim.CustomSerializationData
  parent: System.Security.Claims.Claim
  isExternal: false
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
  fullName: System.Security.Claims.Claim.CustomSerializationData
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Claims.Claim.Issuer
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Issuer
  nameWithType: Claim.Issuer
  fullName: System.Security.Claims.Claim.Issuer
- uid: System.Security.Claims.Claim.OriginalIssuer
  parent: System.Security.Claims.Claim
  isExternal: false
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
  fullName: System.Security.Claims.Claim.OriginalIssuer
- uid: System.Security.Claims.Claim.Properties
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Properties
  nameWithType: Claim.Properties
  fullName: System.Security.Claims.Claim.Properties
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,String>
  nameWithType: IDictionary<String,String>
  fullName: System.Collections.Generic.IDictionary<System.String,System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Security.Claims.Claim.Subject
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Subject
  nameWithType: Claim.Subject
  fullName: System.Security.Claims.Claim.Subject
- uid: System.Security.Claims.Claim.ToString
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ToString()
  nameWithType: Claim.ToString()
  fullName: System.Security.Claims.Claim.ToString()
- uid: System.Security.Claims.Claim.Type
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Type
  nameWithType: Claim.Type
  fullName: System.Security.Claims.Claim.Type
- uid: System.Security.Claims.Claim.Value
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Value
  nameWithType: Claim.Value
  fullName: System.Security.Claims.Claim.Value
- uid: System.Security.Claims.Claim.ValueType
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ValueType
  nameWithType: Claim.ValueType
  fullName: System.Security.Claims.Claim.ValueType
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter)
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo(BinaryWriter)
  nameWithType: Claim.WriteTo(BinaryWriter)
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter)
- uid: System.IO.BinaryWriter
  parent: System.IO
  isExternal: true
  name: BinaryWriter
  nameWithType: BinaryWriter
  fullName: System.IO.BinaryWriter
- uid: System.Security.Claims.Claim.WriteTo(System.IO.BinaryWriter,System.Byte[])
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo(BinaryWriter,Byte[])
  nameWithType: Claim.WriteTo(BinaryWriter,Byte[])
  fullName: System.Security.Claims.Claim.WriteTo(BinaryWriter,Byte[])
- uid: System.Security.Claims.Claim.#ctor*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Claim
  nameWithType: Claim.Claim
- uid: System.Security.Claims.Claim.Clone*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Clone
  nameWithType: Claim.Clone
- uid: System.Security.Claims.Claim.CustomSerializationData*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: CustomSerializationData
  nameWithType: Claim.CustomSerializationData
- uid: System.Security.Claims.Claim.Issuer*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Issuer
  nameWithType: Claim.Issuer
- uid: System.Security.Claims.Claim.OriginalIssuer*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: OriginalIssuer
  nameWithType: Claim.OriginalIssuer
- uid: System.Security.Claims.Claim.Properties*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Properties
  nameWithType: Claim.Properties
- uid: System.Security.Claims.Claim.Subject*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Subject
  nameWithType: Claim.Subject
- uid: System.Security.Claims.Claim.ToString*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ToString
  nameWithType: Claim.ToString
- uid: System.Security.Claims.Claim.Type*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Type
  nameWithType: Claim.Type
- uid: System.Security.Claims.Claim.Value*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: Value
  nameWithType: Claim.Value
- uid: System.Security.Claims.Claim.ValueType*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: ValueType
  nameWithType: Claim.ValueType
- uid: System.Security.Claims.Claim.WriteTo*
  parent: System.Security.Claims.Claim
  isExternal: false
  name: WriteTo
  nameWithType: Claim.WriteTo
