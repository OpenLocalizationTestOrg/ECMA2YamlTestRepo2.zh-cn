### YamlMime:ManagedReference
items:
- uid: System.AddIn.Contract.Automation.IRemoteObjectContract
  id: IRemoteObjectContract
  children:
  - System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType
  - System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)
  langs:
  - csharp
  name: IRemoteObjectContract
  nameWithType: IRemoteObjectContract
  fullName: System.AddIn.Contract.Automation.IRemoteObjectContract
  type: Interface
  summary: "定义一个协定，组件可用于跨应用程序域和进程边界中访问的对象。"
  remarks: "当您的类型上实现 IRemoteObjectContract 时，组件可以使用协定访问类型的对象的类型信息。 通过调用<xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A>方法来获取<xref:System.AddIn.Contract.Automation.IRemoteTypeContract>.</xref:System.AddIn.Contract.Automation.IRemoteTypeContract></xref:System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType%2A>组件访问的类型信息 <xref:System.AddIn.Contract.Automation.IRemoteTypeContract>接口定义组件可用来访问特定类型和成员信息，并调用成员的协定。</xref:System.AddIn.Contract.Automation.IRemoteTypeContract>"
  syntax:
    content: 'public interface IRemoteObjectContract : System.AddIn.Contract.IContract'
  implements:
  - System.AddIn.Contract.IContract
  platform:
  - net462
- uid: System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType
  id: GetRemoteType
  parent: System.AddIn.Contract.Automation.IRemoteObjectContract
  langs:
  - csharp
  name: GetRemoteType()
  nameWithType: IRemoteObjectContract.GetRemoteType()
  fullName: System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType()
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Automation
  summary: "返回<xref href=&quot;System.AddIn.Contract.Automation.IRemoteTypeContract&quot;> </xref> ，它指定的类型当前<xref href=&quot;System.AddIn.Contract.Automation.IRemoteObjectContract&quot;> </xref>。"
  remarks: "使用 GetRemoteType 方法来访问远程成员对象的当前<xref:System.AddIn.Contract.Automation.IRemoteObjectContract>标识。</xref:System.AddIn.Contract.Automation.IRemoteObjectContract>"
  syntax:
    content: public System.AddIn.Contract.Automation.IRemoteTypeContract GetRemoteType ();
    parameters: []
    return:
      type: System.AddIn.Contract.Automation.IRemoteTypeContract
      description: "<xref href=&quot;System.AddIn.Contract.Automation.IRemoteTypeContract&quot;> </xref> ，它指定的类型当前<xref href=&quot;System.AddIn.Contract.Automation.IRemoteObjectContract&quot;> </xref>。"
  overload: System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)
  id: RemoteCast(System.String)
  parent: System.AddIn.Contract.Automation.IRemoteObjectContract
  langs:
  - csharp
  name: RemoteCast(String)
  nameWithType: IRemoteObjectContract.RemoteCast(String)
  fullName: System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(String)
  type: Method
  assemblies:
  - System.AddIn.Contract
  namespace: System.AddIn.Contract.Automation
  summary: "由当前标识的对象强制转换<xref href=&quot;System.AddIn.Contract.Automation.IRemoteObjectContract&quot;></xref>为指定的类型。"
  remarks: "A canonical name is a globally unique name, such as a GUID. Strings in the format \\<*assembly name*>, \\<*fully qualified type name*> are recommended. An example of the recommended format of a canonical name is \"ShapeApp, Microsoft.VisualStudio.Tools.Applications.Samples.ShapeApp.Application\".  \n  \n The canonical name for a type cannot change after a type is published in a component. Changing the canonical name of a type in a future version of a component breaks compatibility between the component and clients that are already using the type.  \n  \n It is recommended that RemoteCast implementations throw an <xref:System.InvalidCastException> if the cast operation fails."
  syntax:
    content: public System.AddIn.Contract.RemoteArgument RemoteCast (string canonicalName);
    parameters:
    - id: canonicalName
      type: System.String
      description: "将对象转换为的类型规范名称。"
    return:
      type: System.AddIn.Contract.RemoteArgument
      description: "A <xref href=&quot;System.AddIn.Contract.RemoteArgument&quot;> </xref>表示强制转换运算的结果。"
  overload: System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast*
  exceptions: []
  platform:
  - net462
references:
- uid: System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType
  parent: System.AddIn.Contract.Automation.IRemoteObjectContract
  isExternal: false
  name: GetRemoteType()
  nameWithType: IRemoteObjectContract.GetRemoteType()
  fullName: System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType()
- uid: System.AddIn.Contract.Automation.IRemoteTypeContract
  parent: System.AddIn.Contract.Automation
  isExternal: false
  name: IRemoteTypeContract
  nameWithType: IRemoteTypeContract
  fullName: System.AddIn.Contract.Automation.IRemoteTypeContract
- uid: System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(System.String)
  parent: System.AddIn.Contract.Automation.IRemoteObjectContract
  isExternal: false
  name: RemoteCast(String)
  nameWithType: IRemoteObjectContract.RemoteCast(String)
  fullName: System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast(String)
- uid: System.AddIn.Contract.RemoteArgument
  parent: System.AddIn.Contract
  isExternal: false
  name: RemoteArgument
  nameWithType: RemoteArgument
  fullName: System.AddIn.Contract.RemoteArgument
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.AddIn.Contract.Automation.IRemoteObjectContract.GetRemoteType*
  parent: System.AddIn.Contract.Automation.IRemoteObjectContract
  isExternal: false
  name: GetRemoteType
  nameWithType: IRemoteObjectContract.GetRemoteType
- uid: System.AddIn.Contract.Automation.IRemoteObjectContract.RemoteCast*
  parent: System.AddIn.Contract.Automation.IRemoteObjectContract
  isExternal: false
  name: RemoteCast
  nameWithType: IRemoteObjectContract.RemoteCast
