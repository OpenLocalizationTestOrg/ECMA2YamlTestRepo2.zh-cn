### YamlMime:ManagedReference
items:
- uid: System.Reflection.IReflect
  id: IReflect
  children:
  - System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  - System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - System.Reflection.IReflect.UnderlyingSystemType
  langs:
  - csharp
  name: IReflect
  nameWithType: IReflect
  fullName: System.Reflection.IReflect
  type: Interface
  summary: "与互操作[IDispatch 接口](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)。"
  remarks: "IReflect 接口用于与进行互操作[IDispatch 接口](http://msdn.microsoft.com/en-us/ebbff4bc-36b2-4861-9efa-ffa45e013eb5)。 IReflect 定义的一个子集<xref:System.Type>反射方法。</xref:System.Type> 实现此接口，一个类型时从作为 COM 访问对象时，来自定义其行为`IDispatch`对象。 <xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>类可以用于封送对象实现 IReflect 或<xref:System.Runtime.InteropServices.Expando.IExpando>作为 COM`IDispatch`对象，反之亦然。</xref:System.Runtime.InteropServices.Expando.IExpando> </xref:System.Runtime.InteropServices.CustomMarshalers.ExpandoToDispatchExMarshaler>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("AFBF15E5-C37C-11d2-B88E-00A0C9B471B8")]

      public interface IReflect
  implements: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "返回<xref:System.Reflection.FieldInfo>对应于指定的字段和绑定标志的对象。</xref:System.Reflection.FieldInfo>"
  syntax:
    content: public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "要查找的字段的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "使用来控制搜索的绑定属性。"
    return:
      type: System.Reflection.FieldInfo
      description: "A<xref:System.Reflection.FieldInfo>对象，其中包含符合搜索约束中指定的命名对象的字段信息<code> bindingAttr </code>。</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "该对象实现具有相同名称的多个字段。"
  platform:
  - net462
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "返回<xref:System.Reflection.FieldInfo>对应的当前类的所有字段的对象</xref:System.Reflection.FieldInfo>的数组"
  remarks: "匹配基于名称。 每个字段必须具有唯一名称。 <xref:System.Reflection.BindingFlags?displayProperty=fullName>标志以指定在搜索中包含非公共方法。</xref:System.Reflection.BindingFlags?displayProperty=fullName> <xref:System.Reflection.BindingFlags?displayProperty=fullName>标志以指定在搜索中包含公共方法。</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "使用来控制搜索的绑定属性。"
    return:
      type: System.Reflection.FieldInfo[]
      description: "数组<xref:System.Reflection.FieldInfo>对象又包含符合搜索约束中指定此反射对象的所有字段信息<code> bindingAttr </code>。</xref:System.Reflection.FieldInfo>"
  overload: System.Reflection.IReflect.GetFields*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "检索的数组<xref:System.Reflection.MemberInfo>对应于所有公共成员或对与指定的名称匹配的所有成员的对象。</xref:System.Reflection.MemberInfo>"
  remarks: "将检索的数组<xref:System.Reflection.MemberInfo>对应于所有公共成员或与指定的名称匹配的所有成员使用的名称和绑定特性的对象。</xref:System.Reflection.MemberInfo> 观察到指定名称的大小写或将其忽略，所指定的<xref:System.Reflection.BindingFlags?displayProperty=fullName>.</xref:System.Reflection.BindingFlags?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "要查找的成员的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "使用来控制搜索的绑定属性。"
    return:
      type: System.Reflection.MemberInfo[]
      description: "数组<xref:System.Reflection.MemberInfo>对象匹配<code> name </code>参数。</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMember*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "检索<xref:System.Reflection.MemberInfo>对应于所有公共成员或到当前类的所有成员的对象</xref:System.Reflection.MemberInfo>的数组"
  remarks: "此方法检索<xref:System.Reflection.MemberInfo>通过使用对应于所有公共成员或到当前类的所有成员的绑定特性的对象</xref:System.Reflection.MemberInfo>的数组 它返回数组的所有定义此对象的成员。"
  syntax:
    content: public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "使用来控制搜索的绑定属性。"
    return:
      type: System.Reflection.MemberInfo[]
      description: "数组<xref:System.Reflection.MemberInfo>包含此反射对象的所有成员信息的对象。</xref:System.Reflection.MemberInfo>"
  overload: System.Reflection.IReflect.GetMembers*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "检索<xref:System.Reflection.MethodInfo>对应于下一个指定方法的对象指定的搜索约束。</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "要查找的成员的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "使用来控制搜索的绑定属性。"
    return:
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>对象，其中方法信息中，包含具有匹配项中指定的方法名称和搜索约束基于<code> bindingAttr </code>。</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "该对象实现具有相同名称的多个方法。"
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "检索<xref:System.Reflection.MethodInfo>对象对应于指定的方法，请使用<xref:System.Type>数组从之间进行选择重载方法。</xref:System.Type> </xref:System.Reflection.MethodInfo>"
  remarks: "返回值是基于在方法名的匹配项<xref:System.Reflection.BindingFlags>枚举成员，指定的类型转换的种类`binder`参数、 重载和<xref:System.Reflection.ParameterInfo>描述方法的签名。</xref:System.Reflection.ParameterInfo> </xref:System.Reflection.BindingFlags>"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "要查找的成员的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "使用来控制搜索的绑定属性。"
    - id: binder
      type: System.Reflection.Binder
      description: "实现的对象<xref href=&quot;System.Reflection.Binder&quot;> </xref>，其中包含属性与此方法。"
    - id: types
      type: System.Type[]
      description: "重载方法的使用之间进行选择的数组。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "用于使绑定可与在其中修改类型的参数签名一起的参数修饰符的数组。"
    return:
      type: System.Reflection.MethodInfo
      description: "请求的方法，所有指定的参数相匹配。"
  overload: System.Reflection.IReflect.GetMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "该对象实现具有相同名称的多个方法。"
  platform:
  - net462
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "检索<xref:System.Reflection.MethodInfo>与所有公共方法或当前类的所有方法的对象</xref:System.Reflection.MethodInfo>的数组"
  remarks: "非公共属性`bindingAttr`指示仅返回公共方法时。"
  syntax:
    content: public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "使用来控制搜索的绑定属性。"
    return:
      type: System.Reflection.MethodInfo[]
      description: "数组<xref:System.Reflection.MethodInfo>对象包含的所有方法为此反射对象定义满足中指定的搜索约束<code> bindingAttr </code>。</xref:System.Reflection.MethodInfo>"
  overload: System.Reflection.IReflect.GetMethods*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "检索<xref:System.Reflection.PropertyInfo>对应于所有公共属性或到当前类的所有属性的对象</xref:System.Reflection.PropertyInfo>的数组"
  syntax:
    content: public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "用于控制搜索的绑定属性。"
    return:
      type: System.Reflection.PropertyInfo[]
      description: "数组<xref:System.Reflection.PropertyInfo>反射对象上定义的所有属性的对象。</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "检索<xref:System.Reflection.PropertyInfo>对应下指定的属性的对象指定的搜索约束。</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "要查找的属性的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "使用来控制搜索的绑定属性。"
    return:
      type: System.Reflection.PropertyInfo
      description: "A<xref:System.Reflection.PropertyInfo>找到符合搜索约束中指定的属性对象<code> bindingAttr </code>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果属性不是位于。</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "该对象实现具有相同名称的多个字段。"
  platform:
  - net462
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "检索<xref:System.Reflection.PropertyInfo>对应于具有的指定属性的对象指定的搜索约束。</xref:System.Reflection.PropertyInfo>"
  remarks: "此方法检索<xref:System.Reflection.PropertyInfo>对应下指定的属性的对象指定的搜索约束。</xref:System.Reflection.PropertyInfo> 一个类型数组用于从重载方法中进行选择。"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "要查找的成员的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "用于控制搜索的绑定属性。"
    - id: binder
      type: System.Reflection.Binder
      description: "实现的对象<xref href=&quot;System.Reflection.Binder&quot;> </xref>，其中包含属性与此方法。"
    - id: returnType
      type: System.Type
      description: "属性的类型。"
    - id: types
      type: System.Type[]
      description: "具有相同名称的方法重载使用之间进行选择的数组。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "一个用于选择参数修饰符的数组。"
    return:
      type: System.Reflection.PropertyInfo
      description: "A<xref:System.Reflection.PropertyInfo>所在的属性，如果在此反射对象中，位于具有指定名称的属性对象或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果属性不是位于。</xref:System.Reflection.PropertyInfo>"
  overload: System.Reflection.IReflect.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "调用指定的成员。"
  remarks: "要调用的方法必须是可访问，并且提供与指定的自变量列表中，指定的活页夹和调用特性的约束下最具体的匹配。       调用某个方法，如果方法声明中的参数的数目等于在指定的自变量列表中，参数的数目和每个自变量的类型可以转换由参数的类型联编程序。      1> [!NOTE]&1;> 传递给属于 InvokeMember 方法的参数修饰符的数组必须包含单个参数修饰符。 当确定哪些参数需要通过引用向 COM 公开时传递时，被认为仅第一个参数修饰符       联编程序查找所有匹配的方法，根据请求的绑定类型 (<xref:System.Reflection.BindingFlags?displayProperty=fullName>， <xref:System.Reflection.IReflect.GetProperties%2A>，依次类推)。</xref:System.Reflection.IReflect.GetProperties%2A> </xref:System.Reflection.BindingFlags?displayProperty=fullName> 按名称、 数量的参数和一组绑定器中定义的搜索修饰符进行筛选的方法集。 选择方法后，它调用的并且可访问性检查在该点。 搜索可能来控制哪些方法集是基于与该方法关联的可访问性特性。 <xref:System.Reflection.Binder.BindToMethod%2A>选择要调用的方法。</xref:System.Reflection.Binder.BindToMethod%2A> 默认的联编程序选择最精确的匹配。       访问限制会忽略完全受信任的代码。 也就是说，是在私有构造函数、 方法、 字段和属性访问而完全受信任代码时，通过反射调用。"
  example:
  - "The following example obtains the value of the <xref:System.DateTime.Now%2A> property.  \n  \n [!code-cs[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/csharp/46b5c0ee-07c6-4491-8e06-_1.cs)]\n [!code-vb[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/visualbasic/46b5c0ee-07c6-4491-8e06-_1.vb)]\n [!code-cpp[Classic IReflect.InvokeMember Example#1](~/add/codesnippet/cpp/46b5c0ee-07c6-4491-8e06-_1.cpp)]"
  syntax:
    content: public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "要查找的成员的名称。"
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: "之一<xref href=&quot;System.Reflection.BindingFlags&quot;></xref>调用属性。 `invokeAttr`参数可能构造函数、 方法、 属性或字段。 必须指定合适的调用属性。 调用类的默认成员通过传递空字符串 (&quot;&quot;) 作为成员的名称。"
    - id: binder
      type: System.Reflection.Binder
      description: "之一<xref href=&quot;System.Reflection.BindingFlags&quot;></xref>位标志。 实现<xref href=&quot;System.Reflection.Binder&quot;> </xref>，其中包含属性与此方法。"
    - id: target
      type: System.Object
      description: "对其调用指定的成员的对象。 适用于静态成员，则忽略此参数。"
    - id: args
      type: System.Object[]
      description: "包含要调用的数量、 顺序和成员的参数的类型的对象数组。 如果任何参数，这是一个空数组。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: 'An array of <xref href="System.Reflection.ParameterModifier"></xref> objects. This array has the same length as the `args` parameter, representing the invoked member''s argument attributes in the metadata. A parameter can have the following attributes: <xref uid="langword_csharp_pdIn" name="pdIn" href=""></xref>, <xref uid="langword_csharp_pdOut" name="pdOut" href=""></xref>, <xref uid="langword_csharp_pdRetval" name="pdRetval" href=""></xref>, <xref uid="langword_csharp_pdOptional" name="pdOptional" href=""></xref>, and <xref uid="langword_csharp_pdHasDefault" name="pdHasDefault" href=""></xref>. These represent [In], [Out], [retval], [optional], and a default parameter, respectively. These attributes are used by various interoperability services.'
    - id: culture
      type: System.Globalization.CultureInfo
      description: "实例<xref:System.Globalization.CultureInfo>用于控制类型强制。</xref:System.Globalization.CultureInfo> 例如，`culture`将转换<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示 1000 到<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>值，因为不同的区域性以不同方式表示 1000年。 如果此参数为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Globalization.CultureInfo>则使用当前线程。</xref:System.Globalization.CultureInfo>"
    - id: namedParameters
      type: System.String[]
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>参数的数组。"
    return:
      type: System.Object
      description: "指定的成员。"
  overload: System.Reflection.IReflect.InvokeMember*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "多个自变量指定为字段<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;> </xref>。"
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "找不到字段或属性。"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "找不到该方法。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "如果在不必要的情况下调用私有成员<xref href=&quot;System.Security.Permissions.ReflectionPermission&quot;> </xref>。"
  platform:
  - net462
- uid: System.Reflection.IReflect.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: System.Reflection.IReflect
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "获取表示的基础类型<xref href=&quot;System.Reflection.IReflect&quot;></xref>对象。"
  syntax:
    content: public Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: "表示的基础类型<xref href=&quot;System.Reflection.IReflect&quot;></xref>对象。"
  overload: System.Reflection.IReflect.UnderlyingSystemType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Reflection.IReflect.GetField(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: IReflect.GetField(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.IReflect.GetFields(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: IReflect.GetFields(BindingFlags)
  fullName: System.Reflection.IReflect.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMember(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember(String,BindingFlags)
  nameWithType: IReflect.GetMember(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMember(String,BindingFlags)
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMembers(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: IReflect.GetMembers(BindingFlags)
  fullName: System.Reflection.IReflect.GetMembers(BindingFlags)
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags)
  nameWithType: IReflect.GetMethod(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Reflection.IReflect.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetMethods(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: IReflect.GetMethods(BindingFlags)
  fullName: System.Reflection.IReflect.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperties(System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: IReflect.GetProperties(BindingFlags)
  fullName: System.Reflection.IReflect.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags)
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags)
  nameWithType: IReflect.GetProperty(String,BindingFlags)
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.IReflect.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: System.Reflection.IReflect.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.IReflect.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: System.Reflection.IReflect.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.IReflect.UnderlyingSystemType
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
  fullName: System.Reflection.IReflect.UnderlyingSystemType
- uid: System.Reflection.IReflect.GetField*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetField
  nameWithType: IReflect.GetField
- uid: System.Reflection.IReflect.GetFields*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetFields
  nameWithType: IReflect.GetFields
- uid: System.Reflection.IReflect.GetMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMember
  nameWithType: IReflect.GetMember
- uid: System.Reflection.IReflect.GetMembers*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMembers
  nameWithType: IReflect.GetMembers
- uid: System.Reflection.IReflect.GetMethod*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethod
  nameWithType: IReflect.GetMethod
- uid: System.Reflection.IReflect.GetMethods*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetMethods
  nameWithType: IReflect.GetMethods
- uid: System.Reflection.IReflect.GetProperties*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperties
  nameWithType: IReflect.GetProperties
- uid: System.Reflection.IReflect.GetProperty*
  parent: System.Reflection.IReflect
  isExternal: false
  name: GetProperty
  nameWithType: IReflect.GetProperty
- uid: System.Reflection.IReflect.InvokeMember*
  parent: System.Reflection.IReflect
  isExternal: false
  name: InvokeMember
  nameWithType: IReflect.InvokeMember
- uid: System.Reflection.IReflect.UnderlyingSystemType*
  parent: System.Reflection.IReflect
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: IReflect.UnderlyingSystemType
