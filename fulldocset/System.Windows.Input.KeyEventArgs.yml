### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyEventArgs
  id: KeyEventArgs
  children:
  - System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  - System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  - System.Windows.Input.KeyEventArgs.ImeProcessedKey
  - System.Windows.Input.KeyEventArgs.InputSource
  - System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.KeyEventArgs.IsDown
  - System.Windows.Input.KeyEventArgs.IsRepeat
  - System.Windows.Input.KeyEventArgs.IsToggled
  - System.Windows.Input.KeyEventArgs.IsUp
  - System.Windows.Input.KeyEventArgs.Key
  - System.Windows.Input.KeyEventArgs.KeyStates
  - System.Windows.Input.KeyEventArgs.SystemKey
  langs:
  - csharp
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
  type: Class
  summary: "提供有关数据<xref href=&quot;System.Windows.UIElement.KeyUp&quot;></xref>和<xref href=&quot;System.Windows.UIElement.KeyDown&quot;></xref>路由事件以及相关附加事件和预览事件。"
  remarks: "此事件数据类用于下列附加事件:- <xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>- <xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>-<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>此事件数据类也用于基元素上的以下路由事件。</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> 这些路由的事件转发之前列出的附加的事件，以使它们更容易访问中的常规元素模型[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]。      - <xref:System.Windows.UIElement.KeyUp?displayProperty=fullName>- <xref:System.Windows.UIElement.KeyDown?displayProperty=fullName>- <xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName>- <xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName>- <xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName>- <xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName>- <xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName>-<xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName>附加的事件和基元素路由事件共享其事件数据，并冒泡和隧道的路由事件的版本也共享事件数据。</xref:System.Windows.ContentElement.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.ContentElement.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.ContentElement.KeyDown?displayProperty=fullName> </xref:System.Windows.ContentElement.KeyUp?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewKeyDown?displayProperty=fullName> </xref:System.Windows.UIElement.PreviewKeyUp?displayProperty=fullName> </xref:System.Windows.UIElement.KeyDown?displayProperty=fullName> </xref:System.Windows.UIElement.KeyUp?displayProperty=fullName> 路由事件过程，这可能会影响该事件的处理的特征。 有关详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。       键可以是启动和切换后状态或向下和切换状态。 因此，确定是否的关键是向上或向下不是简单，只检查<xref:System.Windows.Input.KeyEventArgs.KeyStates%2A>为数字值的值。</xref:System.Windows.Input.KeyEventArgs.KeyStates%2A> 相反，您应通过将其当作标志枚举检查的值。 使用`AND`比较的第一位。 或者，使用的帮助器属性<xref:System.Windows.Input.KeyEventArgs.IsUp%2A>， <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>，和<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>来确定给定的键是否向上、 向下，或切换后。</xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> </xref:System.Windows.Input.KeyEventArgs.IsDown%2A> </xref:System.Windows.Input.KeyEventArgs.IsUp%2A>"
  syntax:
    content: 'public class KeyEventArgs : System.Windows.Input.KeyboardEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  - System.Windows.Input.KeyboardEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.Input.KeyboardEventArgs.KeyboardDevice
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  fullName: System.Windows.Input.KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;></xref>类。"
  syntax:
    content: public KeyEventArgs (System.Windows.Input.KeyboardDevice keyboard, System.Windows.PresentationSource inputSource, int timestamp, System.Windows.Input.Key key);
    parameters:
    - id: keyboard
      type: System.Windows.Input.KeyboardDevice
      description: "与此事件关联的逻辑的键盘设备。"
    - id: inputSource
      type: System.Windows.PresentationSource
      description: "输入的源。"
    - id: timestamp
      type: System.Int32
      description: "输入的发生时的时间。"
    - id: key
      type: System.Windows.Input.Key
      description: "引用事件的键。"
  overload: System.Windows.Input.KeyEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  id: DeadCharProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取属于死键组合创建单个组合的字符的密钥。"
  remarks: "成为死键，在时按下，生成任何可见字符但指示该密钥是与按下的下一个字母键所产生的字符组合在一起。  如果<xref:System.Windows.Input.KeyEventArgs.Key%2A>返回<xref:System.Windows.Input.Key?displayProperty=fullName>，你可以使用此属性来获取输入的实际密钥。</xref:System.Windows.Input.Key?displayProperty=fullName> </xref:System.Windows.Input.KeyEventArgs.Key%2A>"
  syntax:
    content: public System.Windows.Input.Key DeadCharProcessedKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "属于死键组合创建单个组合的字符键。"
  overload: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  id: ImeProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "如果将通过处理键获取引用事件的键盘键[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]。"
  syntax:
    content: public System.Windows.Input.Key ImeProcessedKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref>引用的事件。"
  overload: System.Windows.Input.KeyEventArgs.ImeProcessedKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.InputSource
  id: InputSource
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
  fullName: System.Windows.Input.KeyEventArgs.InputSource
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取提供此输入的输入的源。"
  syntax:
    content: public System.Windows.PresentationSource InputSource { get; }
    return:
      type: System.Windows.PresentationSource
      description: "输入的源。"
  overload: System.Windows.Input.KeyEventArgs.InputSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.KeyEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "将事件处理程序调用的特定类型的方式，这可以提高事件系统效率。"
  remarks: "此实现将强制转换的泛型处理程序，可为<xref:System.Windows.Input.KeyEventHandler>并调用它。</xref:System.Windows.Input.KeyEventHandler> 有关此实现模式和它的原因的详细信息，请参阅<xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>和[路由事件概述](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.RoutedEventArgs.InvokeEventHandler%2A>"
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "要以特定类型的方式调用的泛型处理程序。"
    - id: genericTarget
      type: System.Object
      description: "要在调用处理程序的目标。"
  overload: System.Windows.Input.KeyEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsDown
  id: IsDown
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
  fullName: System.Windows.Input.KeyEventArgs.IsDown
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取一个值，该值指示引用事件的键是否处于关闭状态。"
  remarks: "<xref:System.Windows.Input.Keyboard>类还提供键盘上的键的状态有关的信息。</xref:System.Windows.Input.Keyboard> 例如，<xref:System.Windows.Input.Keyboard.IsKeyDown%2A>方法返回使用指定的项是否已关闭。</xref:System.Windows.Input.Keyboard.IsKeyDown%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by obtaining the state of the IsDown property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisdown)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisdown)]"
  syntax:
    content: public bool IsDown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果密钥已关闭;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.KeyEventArgs.IsDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsRepeat
  id: IsRepeat
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
  fullName: System.Windows.Input.KeyEventArgs.IsRepeat
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取一个值，该值指示引用事件的键盘键是否为重复的键。"
  remarks: ''
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is a repeated key by obtaining the state of the IsRepeat property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsRepeat](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisrepeat)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsRepeat](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisrepeat)]"
  syntax:
    content: public bool IsRepeat { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该键重复的;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。  没有默认值。"
  overload: System.Windows.Input.KeyEventArgs.IsRepeat*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsToggled
  id: IsToggled
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
  fullName: System.Windows.Input.KeyEventArgs.IsToggled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取一个值，该值指示引用事件的键是否处于的切换状态。"
  remarks: "<xref:System.Windows.Input.Keyboard>类还提供键盘上的键的状态有关的信息。</xref:System.Windows.Input.Keyboard> 例如，<xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>方法返回使用指定的项是否处于切换状态。</xref:System.Windows.Input.Keyboard.IsKeyToggled%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is toggled by obtaining the state of the IsToggled property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsToggled](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsistoggled)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsToggled](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsistoggled)]"
  syntax:
    content: public bool IsToggled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果键已切换;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。  没有默认值。"
  overload: System.Windows.Input.KeyEventArgs.IsToggled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.IsUp
  id: IsUp
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
  fullName: System.Windows.Input.KeyEventArgs.IsUp
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取一个值，该值指示引用事件的键是否处于启动状态。"
  remarks: "<xref:System.Windows.Input.Keyboard>类还提供键盘上的键的状态有关的信息。</xref:System.Windows.Input.Keyboard>  例如，<xref:System.Windows.Input.Keyboard.IsKeyUp%2A>方法返回指定的值相符。</xref:System.Windows.Input.Keyboard.IsKeyUp%2A>"
  example:
  - "The following example checks whether the key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is up by obtaining the state of the IsUp property.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsIsUp](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargsisup)]\n [!code-vb[keyargssnippetsample#KeyEventArgsIsUp](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargsisup)]"
  syntax:
    content: public bool IsUp { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果密钥已启动;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。  没有默认值。"
  overload: System.Windows.Input.KeyEventArgs.IsUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.Key
  id: Key
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: Key
  nameWithType: KeyEventArgs.Key
  fullName: System.Windows.Input.KeyEventArgs.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取与事件关联的键盘键。"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.KeyEventHandler> and checks whether the key associated with the <xref:System.Windows.Input.KeyEventArgs> is the <xref:System.Windows.Input.Key> key.  \n  \n [!code-cs[keydown#KeyDownSample](~/add/codesnippet/csharp/KeyDown/Window1.xaml.cs#keydownsample)]\n [!code-vb[keydown#KeyDownSample](~/add/codesnippet/visualbasic/KeyDown/Window1.xaml.vb#keydownsample)]"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref>引用的事件。"
  overload: System.Windows.Input.KeyEventArgs.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.KeyStates
  id: KeyStates
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
  fullName: System.Windows.Input.KeyEventArgs.KeyStates
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取与此事件关联的键盘键的状态。"
  remarks: "键可以是启动和切换后状态或向下和切换状态。 因此，确定键是否向上或向下不是简单，只检查 KeyStates 值为数字值。 相反，您应通过将其当作标志枚举检查的值。 使用`AND`比较的第一位。 或者，使用的帮助器属性<xref:System.Windows.Input.KeyEventArgs.IsUp%2A>， <xref:System.Windows.Input.KeyEventArgs.IsDown%2A>，和<xref:System.Windows.Input.KeyEventArgs.IsToggled%2A>来确定给定的键是否向上、 向下，或切换后。</xref:System.Windows.Input.KeyEventArgs.IsToggled%2A> </xref:System.Windows.Input.KeyEventArgs.IsDown%2A> </xref:System.Windows.Input.KeyEventArgs.IsUp%2A>"
  example:
  - "The following example checks whether a key associated with an instance of <xref:System.Windows.Input.KeyEventArgs> is down by performing a bitwise `AND` comparison on the KeyStates of the key and the <xref:System.Windows.Input.KeyStates> enumeration value.  \n  \n [!code-cs[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/csharp/KeyArgsSnippetSample/Window1.xaml.cs#keyeventargskeystatesdown)]\n [!code-vb[keyargssnippetsample#KeyEventArgsKeyStatesDown](~/add/codesnippet/visualbasic/keyargssnippetsample/window1.xaml.vb#keyeventargskeystatesdown)]"
  syntax:
    content: public System.Windows.Input.KeyStates KeyStates { get; }
    return:
      type: System.Windows.Input.KeyStates
      description: "密钥的状态。"
  overload: System.Windows.Input.KeyEventArgs.KeyStates*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyEventArgs.SystemKey
  id: SystemKey
  parent: System.Windows.Input.KeyEventArgs
  langs:
  - csharp
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
  fullName: System.Windows.Input.KeyEventArgs.SystemKey
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "如果系统将处理该密钥，请获取引用事件的键盘键。"
  syntax:
    content: public System.Windows.Input.Key SystemKey { get; }
    return:
      type: System.Windows.Input.Key
      description: "<xref href=&quot;System.Windows.Input.Key&quot;> </xref>引用的事件。"
  overload: System.Windows.Input.KeyEventArgs.SystemKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.KeyboardEventArgs
  isExternal: false
  name: System.Windows.Input.KeyboardEventArgs
- uid: System.Windows.Input.KeyEventArgs.#ctor(System.Windows.Input.KeyboardDevice,System.Windows.PresentationSource,System.Int32,System.Windows.Input.Key)
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  nameWithType: KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
  fullName: System.Windows.Input.KeyEventArgs.KeyEventArgs(KeyboardDevice,PresentationSource,Int32,Key)
- uid: System.Windows.Input.KeyboardDevice
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardDevice
  nameWithType: KeyboardDevice
  fullName: System.Windows.Input.KeyboardDevice
- uid: System.Windows.PresentationSource
  parent: System.Windows
  isExternal: false
  name: PresentationSource
  nameWithType: PresentationSource
  fullName: System.Windows.PresentationSource
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
  fullName: System.Windows.Input.KeyEventArgs.ImeProcessedKey
- uid: System.Windows.Input.KeyEventArgs.InputSource
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
  fullName: System.Windows.Input.KeyEventArgs.InputSource
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: KeyEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.KeyEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.KeyEventArgs.IsDown
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
  fullName: System.Windows.Input.KeyEventArgs.IsDown
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.KeyEventArgs.IsRepeat
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
  fullName: System.Windows.Input.KeyEventArgs.IsRepeat
- uid: System.Windows.Input.KeyEventArgs.IsToggled
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
  fullName: System.Windows.Input.KeyEventArgs.IsToggled
- uid: System.Windows.Input.KeyEventArgs.IsUp
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
  fullName: System.Windows.Input.KeyEventArgs.IsUp
- uid: System.Windows.Input.KeyEventArgs.Key
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: Key
  nameWithType: KeyEventArgs.Key
  fullName: System.Windows.Input.KeyEventArgs.Key
- uid: System.Windows.Input.KeyEventArgs.KeyStates
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
  fullName: System.Windows.Input.KeyEventArgs.KeyStates
- uid: System.Windows.Input.KeyStates
  parent: System.Windows.Input
  isExternal: false
  name: KeyStates
  nameWithType: KeyStates
  fullName: System.Windows.Input.KeyStates
- uid: System.Windows.Input.KeyEventArgs.SystemKey
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
  fullName: System.Windows.Input.KeyEventArgs.SystemKey
- uid: System.Windows.Input.KeyEventArgs.#ctor*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs.KeyEventArgs
- uid: System.Windows.Input.KeyEventArgs.DeadCharProcessedKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: DeadCharProcessedKey
  nameWithType: KeyEventArgs.DeadCharProcessedKey
- uid: System.Windows.Input.KeyEventArgs.ImeProcessedKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: ImeProcessedKey
  nameWithType: KeyEventArgs.ImeProcessedKey
- uid: System.Windows.Input.KeyEventArgs.InputSource*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InputSource
  nameWithType: KeyEventArgs.InputSource
- uid: System.Windows.Input.KeyEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: KeyEventArgs.InvokeEventHandler
- uid: System.Windows.Input.KeyEventArgs.IsDown*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsDown
  nameWithType: KeyEventArgs.IsDown
- uid: System.Windows.Input.KeyEventArgs.IsRepeat*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsRepeat
  nameWithType: KeyEventArgs.IsRepeat
- uid: System.Windows.Input.KeyEventArgs.IsToggled*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsToggled
  nameWithType: KeyEventArgs.IsToggled
- uid: System.Windows.Input.KeyEventArgs.IsUp*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: IsUp
  nameWithType: KeyEventArgs.IsUp
- uid: System.Windows.Input.KeyEventArgs.Key*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: Key
  nameWithType: KeyEventArgs.Key
- uid: System.Windows.Input.KeyEventArgs.KeyStates*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: KeyStates
  nameWithType: KeyEventArgs.KeyStates
- uid: System.Windows.Input.KeyEventArgs.SystemKey*
  parent: System.Windows.Input.KeyEventArgs
  isExternal: false
  name: SystemKey
  nameWithType: KeyEventArgs.SystemKey
