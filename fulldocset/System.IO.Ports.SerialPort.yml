### YamlMime:ManagedReference
items:
- uid: System.IO.Ports.SerialPort
  id: SerialPort
  children:
  - System.IO.Ports.SerialPort.#ctor
  - System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)
  - System.IO.Ports.SerialPort.#ctor(System.String)
  - System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)
  - System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)
  - System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)
  - System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)
  - System.IO.Ports.SerialPort.BaseStream
  - System.IO.Ports.SerialPort.BaudRate
  - System.IO.Ports.SerialPort.BreakState
  - System.IO.Ports.SerialPort.BytesToRead
  - System.IO.Ports.SerialPort.BytesToWrite
  - System.IO.Ports.SerialPort.CDHolding
  - System.IO.Ports.SerialPort.Close
  - System.IO.Ports.SerialPort.CtsHolding
  - System.IO.Ports.SerialPort.DataBits
  - System.IO.Ports.SerialPort.DataReceived
  - System.IO.Ports.SerialPort.DiscardInBuffer
  - System.IO.Ports.SerialPort.DiscardNull
  - System.IO.Ports.SerialPort.DiscardOutBuffer
  - System.IO.Ports.SerialPort.Dispose(System.Boolean)
  - System.IO.Ports.SerialPort.DsrHolding
  - System.IO.Ports.SerialPort.DtrEnable
  - System.IO.Ports.SerialPort.Encoding
  - System.IO.Ports.SerialPort.ErrorReceived
  - System.IO.Ports.SerialPort.GetPortNames
  - System.IO.Ports.SerialPort.Handshake
  - System.IO.Ports.SerialPort.InfiniteTimeout
  - System.IO.Ports.SerialPort.IsOpen
  - System.IO.Ports.SerialPort.NewLine
  - System.IO.Ports.SerialPort.Open
  - System.IO.Ports.SerialPort.Parity
  - System.IO.Ports.SerialPort.ParityReplace
  - System.IO.Ports.SerialPort.PinChanged
  - System.IO.Ports.SerialPort.PortName
  - System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)
  - System.IO.Ports.SerialPort.ReadBufferSize
  - System.IO.Ports.SerialPort.ReadByte
  - System.IO.Ports.SerialPort.ReadChar
  - System.IO.Ports.SerialPort.ReadExisting
  - System.IO.Ports.SerialPort.ReadLine
  - System.IO.Ports.SerialPort.ReadTimeout
  - System.IO.Ports.SerialPort.ReadTo(System.String)
  - System.IO.Ports.SerialPort.ReceivedBytesThreshold
  - System.IO.Ports.SerialPort.RtsEnable
  - System.IO.Ports.SerialPort.StopBits
  - System.IO.Ports.SerialPort.Write(System.String)
  - System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)
  - System.IO.Ports.SerialPort.WriteBufferSize
  - System.IO.Ports.SerialPort.WriteLine(System.String)
  - System.IO.Ports.SerialPort.WriteTimeout
  langs:
  - csharp
  name: SerialPort
  nameWithType: SerialPort
  fullName: System.IO.Ports.SerialPort
  type: Class
  summary: "表示串行端口资源。       若要浏览此类型的.NET Framework 源代码，请参阅[引用源](http://referencesource.microsoft.com/#System/sys/system/io/ports/SerialPort.cs#ae0a3218c6c9f7fe)。"
  remarks: "> [!NOTE]1> 要查看此类型的.NET Framework 源代码，请参阅[引用源](http://referencesource.microsoft.com/#System/sys/system/io/ports/SerialPort.cs#ae0a3218c6c9f7fe)。 你可以浏览源代码联机，请下载离线查看的引用并在调试; 过程中逐步执行源 （包括修补程序和更新）请参阅[说明](http://referencesource.microsoft.com/)。       此类用于控制串行端口文件资源。 此类提供同步和事件驱动 I/O、 对插针和中断状态的访问和对串行驱动程序属性的访问。 此外，此类的功能可以包装在内部<xref:System.IO.Stream>对象，可通过访问<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性，并将传递给包装或使用流的类。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Stream>       无效/不类支持以下编码︰ <xref:System.Text.ASCIIEncoding>， <xref:System.Text.UTF8Encoding>， <xref:System.Text.UnicodeEncoding>， <xref:System.Text.UTF32Encoding>，并在其中的代码页是小于 50000 或代码页是 54936 mscorlib.dll 中定义任何编码。</xref:System.Text.UTF32Encoding> </xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF8Encoding> </xref:System.Text.ASCIIEncoding>  你可以使用备用编码，但必须使用<xref:System.IO.Ports.SerialPort.ReadByte%2A>或<xref:System.IO.Ports.SerialPort.Write%2A>方法并执行自己的编码。</xref:System.IO.Ports.SerialPort.Write%2A> </xref:System.IO.Ports.SerialPort.ReadByte%2A>       你使用<xref:System.IO.Ports.SerialPort.GetPortNames%2A>方法来检索当前计算机的有效端口。</xref:System.IO.Ports.SerialPort.GetPortNames%2A>       在读取操作过程中阻止变得无效/不对象，如果未中止此线程。 相反，请关闭基流处理或释放无效/不对象。"
  example:
  - "The following code example demonstrates the use of the SerialPort class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. Both computers must be executing the program to achieve full functionality of this example.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#10](~/add/codesnippet/cpp/t-system.io.ports.serial_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#10](~/add/codesnippet/csharp/t-system.io.ports.serial_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#10](~/add/codesnippet/visualbasic/t-system.io.ports.serial_1.vb)]"
  syntax:
    content: >-
      [System.Diagnostics.MonitoringDescription("SerialPortDesc")]

      public class SerialPort : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor
  id: '#ctor'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort()
  nameWithType: SerialPort.SerialPort()
  fullName: System.IO.Ports.SerialPort.SerialPort()
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "初始化的新实例<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>类。"
  remarks: "未指定时，此构造函数将使用默认属性值。 例如，<xref:System.IO.Ports.SerialPort.DataBits%2A>属性默认值为 8，<xref:System.IO.Ports.SerialPort.Parity%2A>属性默认为`None`枚举值<xref:System.IO.Ports.SerialPort.StopBits%2A>属性默认为 1，且默认端口名称为 COM1。</xref:System.IO.Ports.SerialPort.StopBits%2A> </xref:System.IO.Ports.SerialPort.Parity%2A> </xref:System.IO.Ports.SerialPort.DataBits%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_4_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_4_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_4_1.vb)]"
  syntax:
    content: public SerialPort ();
    parameters: []
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)
  id: '#ctor(System.ComponentModel.IContainer)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(IContainer)
  nameWithType: SerialPort.SerialPort(IContainer)
  fullName: System.IO.Ports.SerialPort.SerialPort(IContainer)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "初始化的新实例<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>类使用指定<xref href=&quot;System.ComponentModel.IContainer&quot;></xref>对象。"
  remarks: "未指定时，此构造函数将使用默认属性值。 例如，<xref:System.IO.Ports.SerialPort.DataBits%2A>属性默认值为 8，<xref:System.IO.Ports.SerialPort.Parity%2A>属性默认为`None`枚举值<xref:System.IO.Ports.SerialPort.StopBits%2A>属性默认为 1，且默认端口名称为 COM1。</xref:System.IO.Ports.SerialPort.StopBits%2A> </xref:System.IO.Ports.SerialPort.Parity%2A> </xref:System.IO.Ports.SerialPort.DataBits%2A>"
  syntax:
    content: public SerialPort (System.ComponentModel.IContainer container);
    parameters:
    - id: container
      type: System.ComponentModel.IContainer
      description: "到容器接口。"
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "无法找到或打开指定的端口。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String)
  nameWithType: SerialPort.SerialPort(String)
  fullName: System.IO.Ports.SerialPort.SerialPort(String)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "初始化的新实例<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>类使用指定的端口名。"
  remarks: "使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名称。</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName);
    parameters:
    - id: portName
      type: System.String
      description: "要使用 （例如 COM1） 的端口。"
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "无法找到或打开指定的端口。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)
  id: '#ctor(System.String,System.Int32)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String,Int32)
  nameWithType: SerialPort.SerialPort(String,Int32)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "初始化的新实例<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>类使用指定的端口名和波特率。"
  remarks: "使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名和波特率。</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName, int baudRate);
    parameters:
    - id: portName
      type: System.String
      description: "要使用 （例如 COM1） 的端口。"
    - id: baudRate
      type: System.Int32
      description: "波特率。"
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "无法找到或打开指定的端口。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)
  id: '#ctor(System.String,System.Int32,System.IO.Ports.Parity)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String,Int32,Parity)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "初始化的新实例<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>类使用指定的端口名、 波特率和奇偶校验位。"
  remarks: "使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名、 波特率和奇偶校验位。</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity);
    parameters:
    - id: portName
      type: System.String
      description: "要使用 （例如 COM1） 的端口。"
    - id: baudRate
      type: System.Int32
      description: "波特率。"
    - id: parity
      type: System.IO.Ports.Parity
      description: "之一<xref:System.IO.Ports.SerialPort.Parity*>值。</xref:System.IO.Ports.SerialPort.Parity*>"
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "无法找到或打开指定的端口。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)
  id: '#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String,Int32,Parity,Int32)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity,Int32)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "初始化的新实例<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>类使用指定的端口名、 波特率、 奇偶校验位和数据位。"
  remarks: "使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名、 波特率、 奇偶校验位和数据位。</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits);
    parameters:
    - id: portName
      type: System.String
      description: "要使用 （例如 COM1） 的端口。"
    - id: baudRate
      type: System.Int32
      description: "波特率。"
    - id: parity
      type: System.IO.Ports.Parity
      description: "之一<xref:System.IO.Ports.SerialPort.Parity*>值。</xref:System.IO.Ports.SerialPort.Parity*>"
    - id: dataBits
      type: System.Int32
      description: "数据位值。"
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "无法找到或打开指定的端口。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)
  id: '#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)'
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: SerialPort(String,Int32,Parity,Int32,StopBits)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity,Int32,StopBits)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity,Int32,StopBits)
  type: Constructor
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "初始化的新实例<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>类使用指定的端口名、 波特率、 奇偶校验位、 数据位和停止位。"
  remarks: "使用此构造函数创建的新实例<xref:System.IO.Ports.SerialPort>类在你想要指定的端口名、 波特率、 奇偶校验位、 数据位和停止位。</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public SerialPort (string portName, int baudRate, System.IO.Ports.Parity parity, int dataBits, System.IO.Ports.StopBits stopBits);
    parameters:
    - id: portName
      type: System.String
      description: "要使用 （例如 COM1） 的端口。"
    - id: baudRate
      type: System.Int32
      description: "波特率。"
    - id: parity
      type: System.IO.Ports.Parity
      description: "之一<xref:System.IO.Ports.SerialPort.Parity*>值。</xref:System.IO.Ports.SerialPort.Parity*>"
    - id: dataBits
      type: System.Int32
      description: "数据位值。"
    - id: stopBits
      type: System.IO.Ports.StopBits
      description: "之一<xref:System.IO.Ports.SerialPort.StopBits*>值。</xref:System.IO.Ports.SerialPort.StopBits*>"
  overload: System.IO.Ports.SerialPort.#ctor*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "无法找到或打开指定的端口。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BaseStream
  id: BaseStream
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BaseStream
  nameWithType: SerialPort.BaseStream
  fullName: System.IO.Ports.SerialPort.BaseStream
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取基础<xref:System.IO.Stream>对象<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>对象。</xref:System.IO.Stream>"
  remarks: "使用此属性用于显式异步 I/O 操作，或要传递<xref:System.IO.Ports.SerialPort>到<xref:System.IO.Stream>如<xref:System.IO.StreamWriter>.</xref:System.IO.StreamWriter>的包装器类</xref:System.IO.Stream>的对象</xref:System.IO.Ports.SerialPort>       任何打开串行端口 BaseStream 属性将返回一个对象，派生自抽象<xref:System.IO.Stream>类，并实现读取和写入方法使用继承自的原型<xref:System.IO.Stream>类︰ <xref:System.IO.Stream.BeginRead%2A>， <xref:System.IO.Stream.BeginWrite%2A>， <xref:System.IO.Stream.Read%2A>， <xref:System.IO.Stream.ReadByte%2A>， <xref:System.IO.Stream.Write%2A>，和<xref:System.IO.Stream.WriteByte%2A>。</xref:System.IO.Stream.WriteByte%2A> </xref:System.IO.Stream.Write%2A> </xref:System.IO.Stream.ReadByte%2A> </xref:System.IO.Stream.Read%2A> </xref:System.IO.Stream.BeginWrite%2A> </xref:System.IO.Stream.BeginRead%2A> </xref:System.IO.Stream> </xref:System.IO.Stream> 这些方法很有用，当将已包装的串行资源传递给<xref:System.IO.Stream>包装类。</xref:System.IO.Stream>       由于无法访问经过的已包装的文件句柄，<xref:System.IO.Stream.Length%2A>和<xref:System.IO.Stream.Position%2A>不支持属性，与<xref:System.IO.Stream.Seek%2A>和<xref:System.IO.Stream.SetLength%2A>不支持的方法。</xref:System.IO.Stream.SetLength%2A> </xref:System.IO.Stream.Seek%2A> </xref:System.IO.Stream.Position%2A> </xref:System.IO.Stream.Length%2A>"
  syntax:
    content: public System.IO.Stream BaseStream { get; }
    return:
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>对象。</xref:System.IO.Stream>"
  overload: System.IO.Ports.SerialPort.BaseStream*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "流是在.NET Compact Framework 应用程序中，已调用以下方法之一︰ <> </> *1> <> </> *1> <> </> *1> <> </> *1> 的.NET Compact Framework 不支持具有基流的异步模型。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BaudRate
  id: BaudRate
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BaudRate
  nameWithType: SerialPort.BaudRate
  fullName: System.IO.Ports.SerialPort.BaudRate
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置串行波特率。"
  remarks: "用户的串行驱动程序必须支持波特率。 默认值为 9600 每秒位数 (bps)。"
  example:
  - "The following example shows how to set the BaudRate property to `9600`.  \n  \n [!code-cs[System.IO.Ports.SerialPort#20](~/add/codesnippet/csharp/p-system.io.ports.serial_3_1.cs)]\n [!code-cpp[System.IO.Ports.SerialPort#20](~/add/codesnippet/cpp/p-system.io.ports.serial_3_1.cpp)]\n [!code-vb[System.IO.Ports.SerialPort#20](~/add/codesnippet/visualbasic/p-system.io.ports.serial_3_1.vb)]  \n  \n The following example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_3_2.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_3_2.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_3_2.vb)]"
  syntax:
    content: public int BaudRate { get; set; }
    return:
      type: System.Int32
      description: "波特率。"
  overload: System.IO.Ports.SerialPort.BaudRate*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的波特率小于或等于零，或大于此设备的最大允许波特率。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BreakState
  id: BreakState
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BreakState
  nameWithType: SerialPort.BreakState
  fullName: System.IO.Ports.SerialPort.BreakState
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置中断信号状态。"
  remarks: "如果传输已挂起，行处于中断状态 （无停止位中的所有低） 会出现中断信号状态直到释放。 若要输入中断状态，请将此属性设置为`true`。 如果端口处于中断状态已为，再次设置此属性`true`不会导致异常。 不能写入<xref:System.IO.Ports.SerialPort>对象 BreakState 时`true`。</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public bool BreakState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果端口处于中断状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.BreakState*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BytesToRead
  id: BytesToRead
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BytesToRead
  nameWithType: SerialPort.BytesToRead
  fullName: System.IO.Ports.SerialPort.BytesToRead
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取接收缓冲区中的数据的字节数。"
  remarks: "接收缓冲区包括串行驱动程序的接收缓冲区，以及在内部缓冲<xref:System.IO.Ports.SerialPort>对象本身。</xref:System.IO.Ports.SerialPort>       因为 BytesToRead 属性表示同时<xref:System.IO.Ports.SerialPort>缓冲区和 Windows 创建缓冲区，它可返回较大的值，比<xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>属性，它表示仅 Windows 创建的缓冲区。</xref:System.IO.Ports.SerialPort.ReadBufferSize%2A> </xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public int BytesToRead { get; }
    return:
      type: System.Int32
      description: "接收缓冲区中的数据的字节数。"
  overload: System.IO.Ports.SerialPort.BytesToRead*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "未打开端口。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.BytesToWrite
  id: BytesToWrite
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: BytesToWrite
  nameWithType: SerialPort.BytesToWrite
  fullName: System.IO.Ports.SerialPort.BytesToWrite
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取发送缓冲区中的数据的字节数。"
  remarks: "发送缓冲区包括串行驱动程序的发送缓冲区，以及在内部缓冲<xref:System.IO.Ports.SerialPort>对象本身。</xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public int BytesToWrite { get; }
    return:
      type: System.Int32
      description: "发送缓冲区中的数据的字节数。"
  overload: System.IO.Ports.SerialPort.BytesToWrite*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "端口处于无效状态。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.CDHolding
  id: CDHolding
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: CDHolding
  nameWithType: SerialPort.CDHolding
  fullName: System.IO.Ports.SerialPort.CDHolding
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取端口的载波检测行的状态。"
  remarks: "此属性可以用于监视端口的载波检测行的状态。 没有承运人通常指示接收方已挂断且载波已被丢弃。"
  syntax:
    content: public bool CDHolding { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果检测到载波，则;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.CDHolding*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Close
  id: Close
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Close()
  nameWithType: SerialPort.Close()
  fullName: System.IO.Ports.SerialPort.Close()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "关闭端口连接，设置<xref:System.IO.Ports.SerialPort.IsOpen*>属性<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，并释放内部<xref:System.IO.Stream>对象。</xref:System.IO.Stream> </xref:System.IO.Ports.SerialPort.IsOpen*>"
  remarks: "调用此方法关闭<xref:System.IO.Ports.SerialPort>对象并清除这两个接收并传输缓冲区。</xref:System.IO.Ports.SerialPort> 此方法调用<xref:System.ComponentModel.Component.Dispose?displayProperty=fullName>方法，该调用受保护方法<xref:System.IO.Ports.SerialPort.Dispose%28System.Boolean%29?displayProperty=fullName>方法替换`disposing`参数设置为`true`。</xref:System.IO.Ports.SerialPort.Dispose%28System.Boolean%29?displayProperty=fullName> </xref:System.ComponentModel.Component.Dispose?displayProperty=fullName>       任何应用程序的最佳做法是等待一定的时间后尝试调用之前调用 Close 方法<xref:System.IO.Ports.SerialPort.Open%2A>方法，为端口可能不会关闭立即。</xref:System.IO.Ports.SerialPort.Open%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_5_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_5_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_5_1.vb)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.IO.Ports.SerialPort.Close*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.CtsHolding
  id: CtsHolding
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: CtsHolding
  nameWithType: SerialPort.CtsHolding
  fullName: System.IO.Ports.SerialPort.CtsHolding
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取清除发送行的状态。"
  remarks: "清除到发送 (CTS) 行用于发送/清除的请求中发送 (RTS/CTS) 硬件握手。 发送数据前，将通过非端口查询 CTS 行。"
  syntax:
    content: public bool CtsHolding { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果检测到明文发送行;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.CtsHolding*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DataBits
  id: DataBits
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DataBits
  nameWithType: SerialPort.DataBits
  fullName: System.IO.Ports.SerialPort.DataBits
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置的标准每个字节的数据位长度。"
  remarks: "此属性的值范围是从 5 至 8。 默认值为 8。"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_7_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_7_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_7_1.vb)]"
  syntax:
    content: public int DataBits { get; set; }
    return:
      type: System.Int32
      description: "数据位长度。"
  overload: System.IO.Ports.SerialPort.DataBits*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "数据位值是小于 5 个或多个 8。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DataReceived
  id: DataReceived
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DataReceived
  nameWithType: SerialPort.DataReceived
  fullName: System.IO.Ports.SerialPort.DataReceived
  type: Event
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "指示已通过由端口接收数据<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>对象。"
  remarks: "数据事件可以由任何中的项<xref:System.IO.Ports.SerialData>枚举。</xref:System.IO.Ports.SerialData> 由于操作系统决定是否以引发此事件，或不，并非所有的奇偶校验错误可能会报告。       如果接收 Eof 字符，而不考虑内部输入缓冲区中的字节数和的值，也会引发 DataReceived 事件<xref:System.IO.Ports.SerialPort.ReceivedBytesThreshold%2A>属性。</xref:System.IO.Ports.SerialPort.ReceivedBytesThreshold%2A>       <xref:System.IO.Ports.SerialPort.PinChanged>DataReceived，和<xref:System.IO.Ports.SerialPort.ErrorReceived>事件可能被调用无序，并且可能有基础流时报告错误和事件处理程序执行时之间稍有延迟。</xref:System.IO.Ports.SerialPort.ErrorReceived></xref:System.IO.Ports.SerialPort.PinChanged> 只能有一个事件处理程序可以执行一次。       不保证 DataReceived 事件的每个接收的字节引发。 使用<xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性来确定多少数据会保留在缓冲区中读取。</xref:System.IO.Ports.SerialPort.BytesToRead%2A>       从收到数据时，DataReceived 事件将在辅助线程中引发<xref:System.IO.Ports.SerialPort>对象。</xref:System.IO.Ports.SerialPort> 因为在辅助线程和非主线程，尝试修改主线程，如 UI 元素中的某些元素上引发此事件可能会产生线程处理的异常。 如果需要修改当中，该元素<xref:System.Windows.Forms.Form>或<xref:System.Windows.Forms.Control>和返回使用 post 更改请求<xref:System.Windows.Forms.Control.Invoke%2A>，这将执行在合适的线程上工作。</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control> </xref:System.Windows.Forms.Form>       有关处理事件的详细信息，请参阅[事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example adds a <xref:System.IO.Ports.SerialDataReceivedEventHandler> to DataReceived to read all the available data received on the COM1 port. Note that to test this code it is necessary to have hardware attached to COM1 that will send data.  \n  \n [!code-cs[System.IO.Ports.SerialPort#06](~/add/codesnippet/csharp/e-system.io.ports.serial_1.cs)]\n [!code-cpp[System.IO.Ports.SerialPort#06](~/add/codesnippet/cpp/e-system.io.ports.serial_1.cpp)]\n [!code-vb[System.IO.Ports.SerialPort#06](~/add/codesnippet/visualbasic/e-system.io.ports.serial_1.vb)]"
  syntax:
    content: public event System.IO.Ports.SerialDataReceivedEventHandler DataReceived;
    return:
      type: System.IO.Ports.SerialDataReceivedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DiscardInBuffer
  id: DiscardInBuffer
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DiscardInBuffer()
  nameWithType: SerialPort.DiscardInBuffer()
  fullName: System.IO.Ports.SerialPort.DiscardInBuffer()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "丢弃来自串行驱动程序的接收的数据缓冲区。"
  remarks: '此方法等效于以下 Visual Basic 代码︰ `MSComm1.InBufferCount = 0`。 就会清除接收缓冲区中，但不会影响传输缓冲区。'
  syntax:
    content: public void DiscardInBuffer ();
    parameters: []
  overload: System.IO.Ports.SerialPort.DiscardInBuffer*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DiscardNull
  id: DiscardNull
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DiscardNull
  nameWithType: SerialPort.DiscardNull
  fullName: System.IO.Ports.SerialPort.DiscardNull
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置一个值，该值指示 null 字节在端口和接收缓冲区之间传输时是否被忽略。"
  remarks: "此值通常应设置为`false`，尤其是对于二进制传输。  此属性设置为`true`会导致意外的结果 UTF32 和 UTF16 编码的字节数。"
  syntax:
    content: public bool DiscardNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果忽略 null 字节;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.DiscardNull*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DiscardOutBuffer
  id: DiscardOutBuffer
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DiscardOutBuffer()
  nameWithType: SerialPort.DiscardOutBuffer()
  fullName: System.IO.Ports.SerialPort.DiscardOutBuffer()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "丢弃来自串行驱动程序的传输的数据缓冲区。"
  remarks: '此方法等效于以下 Visual Basic 代码︰ `MSComm1.OutBufferCount = 0`。 就会清除传输缓冲区，但不会影响接收缓冲区。'
  syntax:
    content: public void DiscardOutBuffer ();
    parameters: []
  overload: System.IO.Ports.SerialPort.DiscardOutBuffer*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SerialPort.Dispose(Boolean)
  fullName: System.IO.Ports.SerialPort.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "释放由非托管的资源<xref href=&quot;System.IO.Ports.SerialPort&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.ComponentModel.Component.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>调用与受保护的 Dispose 方法`disposing`参数设置为`true`。</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>调用与 Dispose`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.IO.Ports.SerialPort>引用。</xref:System.IO.Ports.SerialPort> 此方法调用<xref:System.ComponentModel.Component.Dispose%2A>每个引用对象的方法。</xref:System.ComponentModel.Component.Dispose%2A>       此方法刷新，并关闭的流对象<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性。</xref:System.IO.Ports.SerialPort.BaseStream%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.IO.Ports.SerialPort.Dispose*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DsrHolding
  id: DsrHolding
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DsrHolding
  nameWithType: SerialPort.DsrHolding
  fullName: System.IO.Ports.SerialPort.DsrHolding
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取数据设置就绪 (DSR) 信号的状态。"
  remarks: "此属性用于数据设置就绪/数据终端就绪 (DSR/DTR) 握手。 数据设置就绪 (DSR) 信号通常由发送调制解调器到端口以指示它是准备好进行数据传输或接收数据的步骤。"
  syntax:
    content: public bool DsrHolding { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数据设置就绪信号已发送到端口，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.DsrHolding*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "流已关闭。 这可能会因为<> *1> 尚未调用方法或<> *1> 调用方法。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.DtrEnable
  id: DtrEnable
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: DtrEnable
  nameWithType: SerialPort.DtrEnable
  fullName: System.IO.Ports.SerialPort.DtrEnable
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置一个值，在串行通信过程中启用数据终端就绪 (DTR) 信号。"
  remarks: "XON/XOFF 软件握手和发送/清除请求发送 (RTS/CTS) 硬件握手和调制解调器通信过程中通常会启用数据终端就绪 (DTR)。"
  syntax:
    content: public bool DtrEnable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要启用数据终端就绪 (DTR);否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.DtrEnable*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Encoding
  id: Encoding
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Encoding
  nameWithType: SerialPort.Encoding
  fullName: System.IO.Ports.SerialPort.Encoding
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置传输前后文本转换的字节编码。"
  syntax:
    content: public System.Text.Encoding Encoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>对象。</xref:System.Text.Encoding> 默认值为<xref:System.Text.ASCIIEncoding>。</xref:System.Text.ASCIIEncoding>"
  overload: System.IO.Ports.SerialPort.Encoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "编码属性设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "编码属性设置为不编码<xref:System.Text.ASCIIEncoding>， <xref:System.Text.UTF8Encoding>， <xref:System.Text.UTF32Encoding>， <xref:System.Text.UnicodeEncoding>、 一个 Windows 单字节编码中，或某个 Windows 双字节编码。</xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF32Encoding> </xref:System.Text.UTF8Encoding> </xref:System.Text.ASCIIEncoding>"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ErrorReceived
  id: ErrorReceived
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ErrorReceived
  nameWithType: SerialPort.ErrorReceived
  fullName: System.IO.Ports.SerialPort.ErrorReceived
  type: Event
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "指示由表示的端口已发生错误<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>对象。"
  remarks: "错误事件可以由任何中的项原因引起<xref:System.IO.Ports.SerialError>枚举。</xref:System.IO.Ports.SerialError> 由于操作系统决定是否以引发此事件，或不，并非所有的奇偶校验错误可能会报告。       <xref:System.IO.Ports.SerialPort.PinChanged><xref:System.IO.Ports.SerialPort.DataReceived>，和 ErrorReceived 事件可能被调用无序，并且可能有基础流时报告错误，并且当代码可以执行事件处理程序时之间稍有延迟。</xref:System.IO.Ports.SerialPort.DataReceived></xref:System.IO.Ports.SerialPort.PinChanged> 只能有一个事件处理程序可以执行一次。       如果流的尾随字节在发生奇偶校验错误，将向输入一个值为 126 缓冲区添加的额外字节。       从收到错误时，ErrorReceived 事件将在辅助线程中引发<xref:System.IO.Ports.SerialPort>对象。</xref:System.IO.Ports.SerialPort> 因为在辅助线程和非主线程，尝试修改主线程，如 UI 元素中的某些元素上引发此事件可能会产生线程处理的异常。 如果需要修改当中，该元素<xref:System.Windows.Forms.Form>或<xref:System.Windows.Forms.Control>和返回使用 post 更改请求<xref:System.Windows.Forms.Control.Invoke%2A>，这将执行在合适的线程上工作。</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control> </xref:System.Windows.Forms.Form>       有关处理事件的详细信息，请参阅[事件](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.IO.Ports.SerialErrorReceivedEventHandler ErrorReceived;
    return:
      type: System.IO.Ports.SerialErrorReceivedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.GetPortNames
  id: GetPortNames
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: GetPortNames()
  nameWithType: SerialPort.GetPortNames()
  fullName: System.IO.Ports.SerialPort.GetPortNames()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取当前计算机的串行端口名的数组。"
  remarks: "The order of port names returned from GetPortNames is not specified.  \n  \n Use the GetPortNames method to query the current computer for a list of valid serial port names. For example, you can use this method to determine whether COM1 and COM2 are valid serial ports for the current computer.  \n  \n The port names are obtained from the system registry (for example, HKEY_LOCAL_MACHINE\\HARDWARE\\DEVICEMAP\\SERIALCOMM). If the registry contains stale or otherwise incorrect data then the GetPortNames method will return incorrect data."
  example:
  - "The following code example uses the GetPortNames method to display serial port names to the console.  \n  \n [!code-cs[IO.Ports.GetPortNames#1](~/add/codesnippet/csharp/m-system.io.ports.serial_3_1.cs)]\n [!code-cpp[IO.Ports.GetPortNames#1](~/add/codesnippet/cpp/m-system.io.ports.serial_3_1.cpp)]\n [!code-vb[IO.Ports.GetPortNames#1](~/add/codesnippet/visualbasic/m-system.io.ports.serial_3_1.vb)]"
  syntax:
    content: public static string[] GetPortNames ();
    parameters: []
    return:
      type: System.String[]
      description: "当前计算机的串行端口名的数组。"
  overload: System.IO.Ports.SerialPort.GetPortNames*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法查询的串行端口名称。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Handshake
  id: Handshake
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Handshake
  nameWithType: SerialPort.Handshake
  fullName: System.IO.Ports.SerialPort.Handshake
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置串行端口使用中的一个值的数据传输的握手协议<xref href=&quot;System.IO.Ports.Handshake&quot;> </xref>。"
  remarks: "当使用握手时，该设备已连接到<xref:System.IO.Ports.SerialPort>对象指示以停止在没有至少时才发送数据 (<xref:System.IO.Ports.SerialPort.ReadBufferSize%2A>-1024) 缓冲区中的字节。</xref:System.IO.Ports.SerialPort.ReadBufferSize%2A> </xref:System.IO.Ports.SerialPort> 设备将指示重新开始发送数据时缓冲区中有 1024年或更少字节。 如果设备在大于 1024 个字节的块中发送数据，这可能导致缓冲区溢出。       如果握手属性设置为<xref:System.IO.Ports.Handshake>和<xref:System.IO.Ports.SerialPort.CtsHolding%2A>设置为`false`，将不会发送 XOff 字符。</xref:System.IO.Ports.SerialPort.CtsHolding%2A> </xref:System.IO.Ports.Handshake> 如果<xref:System.IO.Ports.SerialPort.CtsHolding%2A>然后将设置为`true`，将发送 XOff 字符之前必须发送更多的数据。</xref:System.IO.Ports.SerialPort.CtsHolding%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_0_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_0_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_0_1.vb)]"
  syntax:
    content: public System.IO.Ports.Handshake Handshake { get; set; }
    return:
      type: System.IO.Ports.Handshake
      description: "之一<xref href=&quot;System.IO.Ports.Handshake&quot;></xref>值。 默认值是<xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.Handshake*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "传递的值不是有效的值中<xref href=&quot;System.IO.Ports.Handshake&quot;></xref>枚举。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.InfiniteTimeout
  id: InfiniteTimeout
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: InfiniteTimeout
  nameWithType: SerialPort.InfiniteTimeout
  fullName: System.IO.Ports.SerialPort.InfiniteTimeout
  type: Field
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "指示不应发生超时。"
  remarks: "此值用于<xref:System.IO.Ports.SerialPort.ReadTimeout%2A>和<xref:System.IO.Ports.SerialPort.WriteTimeout%2A>属性。</xref:System.IO.Ports.SerialPort.WriteTimeout%2A> </xref:System.IO.Ports.SerialPort.ReadTimeout%2A>"
  syntax:
    content: public const int InfiniteTimeout = -1;
    return:
      type: System.Int32
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.IsOpen
  id: IsOpen
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: IsOpen
  nameWithType: SerialPort.IsOpen
  fullName: System.IO.Ports.SerialPort.IsOpen
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取一个值，该值的打开或关闭状态<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>对象。"
  remarks: "IsOpen 属性跟踪是否端口处于打开状态以供调用方，不端口是否被任何应用程序在计算机上打开。"
  syntax:
    content: public bool IsOpen { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果串行端口已打开状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.IsOpen*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "传递的 IsOpen 值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "传递的 IsOpen 值为空字符串 (&quot;&quot;)。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.NewLine
  id: NewLine
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: NewLine
  nameWithType: SerialPort.NewLine
  fullName: System.IO.Ports.SerialPort.NewLine
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置用于解释的末尾调用值<> *1> 和<> *1> 方法。"
  remarks: "此属性确定哪些值 （字节） 定义的行的末尾<xref:System.IO.Ports.SerialPort.ReadLine%2A>和<xref:System.IO.Ports.SerialPort.WriteLine%2A>方法。</xref:System.IO.Ports.SerialPort.WriteLine%2A> </xref:System.IO.Ports.SerialPort.ReadLine%2A> 默认情况下结束的行值为<xref:System.Environment.NewLine%2A>。</xref:System.Environment.NewLine%2A> 如果你正在使用的特定串行设备实现同一目的使用不同的值，将更改为不同的值这种情况。"
  syntax:
    content: public string NewLine { get; set; }
    return:
      type: System.String
      description: "一个表示行尾的值。 默认值为换行符， <xref:System.Environment.NewLine*>.</xref:System.Environment.NewLine*>"
  overload: System.IO.Ports.SerialPort.NewLine*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "属性值为空。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "该属性值将<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Open
  id: Open
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Open()
  nameWithType: SerialPort.Open()
  fullName: System.IO.Ports.SerialPort.Open()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "打开一个新的串行端口连接。"
  remarks: "每个只能存在一个打开的连接<xref:System.IO.Ports.SerialPort>对象。</xref:System.IO.Ports.SerialPort>       任何应用程序的最佳做法是等待一定的时间之后调用<xref:System.IO.Ports.SerialPort.Close%2A>方法，然后再尝试调用 Open 方法中，端口可能不会立即关闭。</xref:System.IO.Ports.SerialPort.Close%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_2_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_2_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_2_1.vb)]"
  syntax:
    content: public void Open ();
    parameters: []
  overload: System.IO.Ports.SerialPort.Open*
  exceptions:
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "Access is denied to the port.  \n  \n \\- or -  \n  \n The current process, or another process on the system, already has the specified COM port open either by a <xref href=\"System.IO.Ports.SerialPort\"></xref> instance or in unmanaged code."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "一个或多个此实例的属性均无效。 例如， <> </> *1>， <> </> *1>，或<> *1> 属性不是有效的值; <> </> *1> 小于或等于零; <> </> *1> 或<> *1> 属性为小于零且不<xref href=&quot;System.IO.Ports.SerialPort.InfiniteTimeout&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The port name does not begin with \"COM\".  \n  \n \\- or -  \n  \n The file type of the port is not supported."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "上的当前实例的指定的端口<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>已打开。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Parity
  id: Parity
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Parity
  nameWithType: SerialPort.Parity
  fullName: System.IO.Ports.SerialPort.Parity
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置奇偶校验检查协议。"
  remarks: "奇偶校验是在其中为 1 的数必须始终是相同的错误检查的过程-偶数还是奇数-每个组的 bits 传输而未出现错误。 在调制解调器的通信，奇偶校验通常是必须同意通过发送方和接收方传输才能使放置的参数之一。       如果流的尾随字节在发生奇偶校验错误，将向输入一个值为 126 缓冲区添加的额外字节。"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_6_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_6_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_6_1.vb)]"
  syntax:
    content: public System.IO.Ports.Parity Parity { get; set; }
    return:
      type: System.IO.Ports.Parity
      description: "表示奇偶校验检查协议的枚举值之一。 默认值是<xref href=&quot;System.IO.Ports.Parity&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.Parity*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "传递的奇偶校验值不是有效的值中<xref href=&quot;System.IO.Ports.Parity&quot;></xref>枚举。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ParityReplace
  id: ParityReplace
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ParityReplace
  nameWithType: SerialPort.ParityReplace
  fullName: System.IO.Ports.SerialPort.ParityReplace
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置在发生奇偶校验错误时替换数据流中的无效字节的字节。"
  remarks: "如果值设置为 null 字符，奇偶校验替换被禁用。"
  syntax:
    content: public byte ParityReplace { get; set; }
    return:
      type: System.Byte
      description: "一个字节，用于替换无效字节。"
  overload: System.IO.Ports.SerialPort.ParityReplace*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.PinChanged
  id: PinChanged
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: PinChanged
  nameWithType: SerialPort.PinChanged
  fullName: System.IO.Ports.SerialPort.PinChanged
  type: Event
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "指示在所表示的端口上发生了非数据信号事件<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>对象。"
  remarks: "串行 pin 更改事件可以由任何中的项<xref:System.IO.Ports.SerialPinChange>枚举。</xref:System.IO.Ports.SerialPinChange> 由于操作系统决定是否以引发此事件，或不，并非所有的奇偶校验错误可能会报告。 作为事件的一部分，设置 pin 的新值。       将引发 PinChanged 事件时<xref:System.IO.Ports.SerialPort>对象进入<xref:System.IO.Ports.SerialPort.BreakState%2A>，但不是退出时端口<xref:System.IO.Ports.SerialPort.BreakState%2A>.</xref:System.IO.Ports.SerialPort.BreakState%2A> </xref:System.IO.Ports.SerialPort.BreakState%2A> </xref:System.IO.Ports.SerialPort> 此行为不适用于中的其他值<xref:System.IO.Ports.SerialPinChange>枚举。</xref:System.IO.Ports.SerialPinChange>       PinChanged， <xref:System.IO.Ports.SerialPort.DataReceived>，和<xref:System.IO.Ports.SerialPort.ErrorReceived>事件可能被调用无序，并且可能有基础流时报告错误和事件处理程序执行时之间稍有延迟。</xref:System.IO.Ports.SerialPort.ErrorReceived> </xref:System.IO.Ports.SerialPort.DataReceived> 只能有一个事件处理程序可以执行一次。       在辅助线程上引发 PinChanged 事件。 因为在辅助线程和非主线程，尝试修改主线程，如 UI 元素中的某些元素上引发此事件可能会产生线程处理的异常。 如果需要修改当中，该元素<xref:System.Windows.Forms.Form>或<xref:System.Windows.Forms.Control>和返回使用 post 更改请求<xref:System.Windows.Forms.Control.Invoke%2A>，这将执行在合适的线程上工作。</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control> </xref:System.Windows.Forms.Form>       有关处理事件的详细信息，请参阅[事件](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.IO.Ports.SerialPinChangedEventHandler PinChanged;
    return:
      type: System.IO.Ports.SerialPinChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.PortName
  id: PortName
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: PortName
  nameWithType: SerialPort.PortName
  fullName: System.IO.Ports.SerialPort.PortName
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置通信，包括但不是限于所有可用的 COM 端口的端口。"
  remarks: "可以通过获取有效的端口名称的列表<xref:System.IO.Ports.SerialPort.GetPortNames%2A>方法。</xref:System.IO.Ports.SerialPort.GetPortNames%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_4_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_4_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_4_1.vb)]"
  syntax:
    content: public string PortName { get; set; }
    return:
      type: System.String
      description: "通信端口。 默认值为 COM1。"
  overload: System.IO.Ports.SerialPort.PortName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The PortName property was set to a value with a length of zero.  \n  \n -or-  \n  \n The PortName property was set to a value that starts with \"\\\\\\\\\".  \n  \n -or-  \n  \n The port name was not valid."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "端口名属性已设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口已打开。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: SerialPort.Read(Byte[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "读取字节的字节数<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>输入的缓冲区并将这些字节写入字节数组中指定的偏移量处。"
  remarks: "如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。       因为<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不、 两个有关可用读取字节数可能发生冲突。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因是它们已缓冲到<xref:System.IO.Ports.SerialPort>类。</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>       Read 方法不会阻止其他操作时读取的字节数等于`count`但有仍未读的字节可用的串行端口。"
  syntax:
    content: public int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "要将输入写入到的字节数组。"
    - id: offset
      type: System.Int32
      description: "中的偏移量`buffer`要写入字节的速率。"
    - id: count
      type: System.Int32
      description: "最大读取的字节数。 如果读取更少字节数`count`大于输入缓冲区中的字节数。"
    return:
      type: System.Int32
      description: "读取的字节数。"
  overload: System.IO.Ports.SerialPort.Read*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "传递的缓冲区<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code>或<code> count </code>参数不在有效的区域<code> buffer </code>传递。 Either <code>offset</code> or <code>count</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>加上<code>count</code>大于的长度<code>buffer</code>。"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "任何字节不已可用于读取。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)
  id: Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Read(Char[],Int32,Int32)
  nameWithType: SerialPort.Read(Char[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Read(Char[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "读取的字符数<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>输入的缓冲区并将其写入到给定的偏移量处的字符的数组。"
  remarks: "此方法用于从串行端口中读取字符。       如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。       因为<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不、 两个可能会有可用于读取多少个字符不一致。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示的字符可读取，但这些字符可能无法访问包含中的流<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因是它们已缓冲到<xref:System.IO.Ports.SerialPort>类。</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>       Read 方法不会阻止其他操作时读取的字节数等于`count`但有仍未读的字节可用的串行端口。"
  syntax:
    content: public int Read (char[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "要将输入写入到的字符数组。"
    - id: offset
      type: System.Int32
      description: "中的偏移量`buffer`要写入字符的。"
    - id: count
      type: System.Int32
      description: "要读取的字符最大数量。 如果在读取更少字符`count`大于输入缓冲区中的字符数。"
    return:
      type: System.Int32
      description: "读取的字符数。"
  overload: System.IO.Ports.SerialPort.Read*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code> plus <code>count</code> is greater than the length of the buffer.  \n  \n \\- or -  \n  \n <code>count</code> is 1 and there is a surrogate character in the buffer."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>buffer</code> passed is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code>或<code> count </code>参数不在有效的区域<code> buffer </code>传递。 Either <code>offset</code> or <code>count</code> is less than zero."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "任何字符不都不可用来读取。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadBufferSize
  id: ReadBufferSize
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadBufferSize
  nameWithType: SerialPort.ReadBufferSize
  fullName: System.IO.Ports.SerialPort.ReadBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置的大小<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>输入的缓冲区。"
  remarks: "ReadBufferSize 属性将忽略小于 4096 任何值。       因为 ReadBufferSize 属性是表示仅 Windows 创建的缓冲区，它可返回较小的值比<xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性，表示同时<xref:System.IO.Ports.SerialPort>缓冲区和 Windows 创建缓冲区。</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  syntax:
    content: public int ReadBufferSize { get; set; }
    return:
      type: System.Int32
      description: "缓冲区大小，以字节为单位。 默认值为 4096;最大值是正整数或 2147483647。"
  overload: System.IO.Ports.SerialPort.ReadBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "设置的 ReadBufferSize 值小于或等于零。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "打开流时设置 ReadBufferSize 属性。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "ReadBufferSize 属性设置为奇数的数字值。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadByte
  id: ReadByte
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadByte()
  nameWithType: SerialPort.ReadByte()
  fullName: System.IO.Ports.SerialPort.ReadByte()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "同步读取一个字节从<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>输入的缓冲区。"
  remarks: "此方法读取一个字节。       请小心使用 ReadByte 和<xref:System.IO.Ports.SerialPort.ReadChar%2A>在一起。</xref:System.IO.Ports.SerialPort.ReadChar%2A> 读取的字节和中读取字符之间切换可能会导致额外的数据要读取和/或其他意外的行为。 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。      1> [!NOTE]&1;> 由于<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不、 两个有关可用读取字节数可能发生冲突。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因是它们已缓冲到<xref:System.IO.Ports.SerialPort>类。</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  syntax:
    content: public int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: "字节，强制转换为<xref:System.Int32>，则为-1 如果已读取流的末尾。</xref:System.Int32>"
  overload: System.IO.Ports.SerialPort.ReadByte*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The operation did not complete before the time-out period ended.  \n  \n \\- or -  \n  \n No byte was read."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadChar
  id: ReadChar
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadChar()
  nameWithType: SerialPort.ReadChar()
  fullName: System.IO.Ports.SerialPort.ReadChar()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "同步读取一个字符从<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>输入的缓冲区。"
  remarks: "此方法读取一个完整的字符编码的基础。       请小心使用<xref:System.IO.Ports.SerialPort.ReadByte%2A>和 ReadChar 组合在一起。</xref:System.IO.Ports.SerialPort.ReadByte%2A> 读取的字节和中读取字符之间切换可能会导致额外的数据要读取和/或其他意外的行为。 如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。      1> [!NOTE]&1;> 由于<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不、 两个有关可用读取字节数可能发生冲突。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因是它们已缓冲到<xref:System.IO.Ports.SerialPort>类。</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  syntax:
    content: public int ReadChar ();
    parameters: []
    return:
      type: System.Int32
      description: "读取字符。"
  overload: System.IO.Ports.SerialPort.ReadChar*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "The operation did not complete before the time-out period ended.  \n  \n \\- or -  \n  \n No character was available in the allotted time-out period."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadExisting
  id: ReadExisting
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadExisting()
  nameWithType: SerialPort.ReadExisting()
  fullName: System.IO.Ports.SerialPort.ReadExisting()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "读取编码的基础，流和输入的缓冲区中的所有立即可用的字节<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>对象。"
  remarks: "此方法返回的流和内部缓冲区的内容<xref:System.IO.Ports.SerialPort>字符串形式的对象。</xref:System.IO.Ports.SerialPort> 此方法不使用超时。 请注意，此方法可以保留尾部内部缓冲区，这样中的前导字节<xref:System.IO.Ports.SerialPort.BytesToRead%2A>值大于零。</xref:System.IO.Ports.SerialPort.BytesToRead%2A>       如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。      1> [!NOTE]&1;><xref:System.IO.Ports.SerialPort>类缓冲数据，但的流对象包含在<xref:System.IO.Ports.SerialPort.BaseStream%2A?displayProperty=fullName>属性不。</xref:System.IO.Ports.SerialPort.BaseStream%2A?displayProperty=fullName> </xref:System.IO.Ports.SerialPort> 因此，<xref:System.IO.Ports.SerialPort>对象和流对象可能会与不同的可读取的字节数。</xref:System.IO.Ports.SerialPort> 当将字节缓冲到<xref:System.IO.Ports.SerialPort>对象，<xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性的值中包括这些字节; 但是，这些字节可能无法访问包含中的流<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A> </xref:System.IO.Ports.SerialPort>"
  syntax:
    content: public string ReadExisting ();
    parameters: []
    return:
      type: System.String
      description: "流和输入的缓冲区的内容<xref href=&quot;System.IO.Ports.SerialPort&quot;></xref>对象。"
  overload: System.IO.Ports.SerialPort.ReadExisting*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadLine
  id: ReadLine
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadLine()
  nameWithType: SerialPort.ReadLine()
  fullName: System.IO.Ports.SerialPort.ReadLine()
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "一直读取到<xref:System.IO.Ports.SerialPort.NewLine*>输入缓冲区中的值。</xref:System.IO.Ports.SerialPort.NewLine*>"
  remarks: "请注意，虽然此方法不返回<xref:System.IO.Ports.SerialPort.NewLine%2A>值，<xref:System.IO.Ports.SerialPort.NewLine%2A>该值会从输入缓冲区中删除。</xref:System.IO.Ports.SerialPort.NewLine%2A> </xref:System.IO.Ports.SerialPort.NewLine%2A>       默认情况下，直到收到一条线，将阻止 ReadLine 方法。 如果不需要此行为，设置<xref:System.IO.Ports.SerialPort.ReadTimeout%2A>为任何非零值，以强制 ReadLine 方法会引发<xref:System.TimeoutException>如果某一行在端口上不可用</xref:System.TimeoutException>的属性</xref:System.IO.Ports.SerialPort.ReadTimeout%2A>       如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。      1> [!NOTE]&1;> 由于<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不、 两个有关可用读取字节数可能发生冲突。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因是它们已缓冲到<xref:System.IO.Ports.SerialPort>类。</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_0_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_0_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_0_1.vb)]"
  syntax:
    content: public string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "输入缓冲区中直到第一个匹配项的内容<xref:System.IO.Ports.SerialPort.NewLine*>值。</xref:System.IO.Ports.SerialPort.NewLine*>"
  overload: System.IO.Ports.SerialPort.ReadLine*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "The operation did not complete before the time-out period ended.  \n  \n \\- or -  \n  \n No bytes were read."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadTimeout
  id: ReadTimeout
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadTimeout
  nameWithType: SerialPort.ReadTimeout
  fullName: System.IO.Ports.SerialPort.ReadTimeout
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置读取的操作未完成时发生超时之前的毫秒数。"
  remarks: "最初，读取的超时值被设置为在 Win32 通信 API 中的 500 毫秒。 此属性，可将此值设置。 可以设置为任何值大于零，超时，或将其设置为<xref:System.IO.Ports.SerialPort.InfiniteTimeout>，在这种情况下不会发生超时。</xref:System.IO.Ports.SerialPort.InfiniteTimeout> <xref:System.IO.Ports.SerialPort.InfiniteTimeout>默认值。</xref:System.IO.Ports.SerialPort.InfiniteTimeout>      1> [!NOTE]&1;> 的非托管用户`COMMTIMEOUTS`结构可能希望将超时值设置为零，以禁止超时。 若要禁止显示 ReadTimeout 属性的超时时间，但是，你必须指定<xref:System.IO.Ports.SerialPort.InfiniteTimeout>.</xref:System.IO.Ports.SerialPort.InfiniteTimeout>       此属性不会影响<xref:System.IO.Stream.BeginRead%2A>方法返回的流<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Stream.BeginRead%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_1_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_1_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_1_1.vb)]"
  syntax:
    content: public int ReadTimeout { get; set; }
    return:
      type: System.Int32
      description: "读取的操作未完成时发生超时之前的毫秒数。"
  overload: System.IO.Ports.SerialPort.ReadTimeout*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "读取的超时值小于零且不等于<xref href=&quot;System.IO.Ports.SerialPort.InfiniteTimeout&quot;> </xref>。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReadTo(System.String)
  id: ReadTo(System.String)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReadTo(String)
  nameWithType: SerialPort.ReadTo(String)
  fullName: System.IO.Ports.SerialPort.ReadTo(String)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "读取一个字符串，直到达到了指定<code> value </code>输入缓冲区中。"
  remarks: "此方法读取直到达到了指定的字符串`value`。 时返回的字符串未包含`value`、`value`从输入缓冲区中删除。       如果有必要读取文本和从流中读取二进制数据之间进行切换，选择一种协议，仔细定义文本和二进制数据，如手动读取字节和解码数据之间的边界。      1> [!NOTE]&1;> 由于<xref:System.IO.Ports.SerialPort>类放入缓冲区的数据，而流中包含<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性不、 两个有关可用读取字节数可能发生冲突。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort>  <xref:System.IO.Ports.SerialPort.BytesToRead%2A>属性可以指示字节读取，但不是能访问到流中包含这些字节<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性原因是它们已缓冲到<xref:System.IO.Ports.SerialPort>类。</xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Ports.SerialPort.BytesToRead%2A>"
  syntax:
    content: public string ReadTo (string value);
    parameters:
    - id: value
      type: System.String
      description: "一个值，该值指示读取的操作停止的位置。"
    return:
      type: System.String
      description: "输入缓冲区中直到指定的内容<code> value </code>。"
  overload: System.IO.Ports.SerialPort.ReadTo*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "长度<code> value </code>参数为 0。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>value</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "该操作未完成之前的超时期结束。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.ReceivedBytesThreshold
  id: ReceivedBytesThreshold
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: ReceivedBytesThreshold
  nameWithType: SerialPort.ReceivedBytesThreshold
  fullName: System.IO.Ports.SerialPort.ReceivedBytesThreshold
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置前内部输入缓冲区中的字节数<xref href=&quot;System.IO.Ports.SerialPort.DataReceived&quot;></xref>事件发生。"
  remarks: "<xref:System.IO.Ports.SerialPort.DataReceived>事件也会引发如果<xref:System.IO.Ports.SerialData>收到字符时，而不考虑内部输入缓冲区中的字节数和 ReceivedBytesThreshold 属性的值。</xref:System.IO.Ports.SerialData> </xref:System.IO.Ports.SerialPort.DataReceived>"
  syntax:
    content: public int ReceivedBytesThreshold { get; set; }
    return:
      type: System.Int32
      description: "前内部输入缓冲区中的字节数<xref href=&quot;System.IO.Ports.SerialPort.DataReceived&quot;></xref>激发事件。 默认值为 1。"
  overload: System.IO.Ports.SerialPort.ReceivedBytesThreshold*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "ReceivedBytesThreshold 值小于或等于零。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.RtsEnable
  id: RtsEnable
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: RtsEnable
  nameWithType: SerialPort.RtsEnable
  fullName: System.IO.Ports.SerialPort.RtsEnable
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置一个值，该值指示在串行通信中是否启用请求发送 (RTS) 信号。"
  remarks: "请求发送 (RTS) 信号是通常用于发送/清除的请求中发送 (RTS/CTS) 硬件握手。"
  syntax:
    content: public bool RtsEnable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要启用请求发送 (RTS);否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.RtsEnable*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "RtsEnable 属性的值已设置或检索时<xref:System.IO.Ports.SerialPort.Handshake*>属性设置为<xref href=&quot;System.IO.Ports.Handshake&quot;></xref>值或<xref href=&quot;System.IO.Ports.Handshake&quot;></xref>值。</xref:System.IO.Ports.SerialPort.Handshake*>"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.StopBits
  id: StopBits
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: StopBits
  nameWithType: SerialPort.StopBits
  fullName: System.IO.Ports.SerialPort.StopBits
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置的标准停止位数每个字节数。"
  remarks: "停止位数的默认值为<xref:System.IO.Ports.StopBits>。</xref:System.IO.Ports.StopBits>       <xref:System.IO.Ports.StopBits?displayProperty=fullName>不支持值。</xref:System.IO.Ports.StopBits?displayProperty=fullName>"
  example:
  - "The following example shows how to set the StopBits property to `One`.  \n  \n [!code-cs[System.IO.Ports.SerialPort#20](~/add/codesnippet/csharp/p-system.io.ports.serial_2_1.cs)]\n [!code-cpp[System.IO.Ports.SerialPort#20](~/add/codesnippet/cpp/p-system.io.ports.serial_2_1.cpp)]\n [!code-vb[System.IO.Ports.SerialPort#20](~/add/codesnippet/visualbasic/p-system.io.ports.serial_2_1.vb)]  \n  \n The following example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_2_2.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_2_2.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_2_2.vb)]"
  syntax:
    content: public System.IO.Ports.StopBits StopBits { get; set; }
    return:
      type: System.IO.Ports.StopBits
      description: "之一<xref href=&quot;System.IO.Ports.StopBits&quot;></xref>值。"
  overload: System.IO.Ports.SerialPort.StopBits*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "停止位数值是<xref href=&quot;System.IO.Ports.StopBits&quot;> </xref>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Write(System.String)
  id: Write(System.String)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Write(String)
  nameWithType: SerialPort.Write(String)
  fullName: System.IO.Ports.SerialPort.Write(String)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "将指定的字符串写入串行端口。"
  remarks: "当你想要作为输出将字符串写入串行端口，请使用此方法。       输出缓冲区中是否存在太多字节和<xref:System.IO.Ports.SerialPort.Handshake%2A>设置为<xref:System.IO.Ports.Handshake>则<xref:System.IO.Ports.SerialPort>对象可能会引起<xref:System.ServiceProcess.TimeoutException>等待设备在准备好接受更多的数据时。</xref:System.ServiceProcess.TimeoutException> </xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.Handshake> </xref:System.IO.Ports.SerialPort.Handshake%2A>       默认情况下，<xref:System.IO.Ports.SerialPort>使用<xref:System.Text.ASCIIEncoding>字符进行编码。</xref:System.Text.ASCIIEncoding> </xref:System.IO.Ports.SerialPort> <xref:System.Text.ASCIIEncoding>将大于 127 的所有字符都编码为 (char) 63 或？。</xref:System.Text.ASCIIEncoding> 若要支持该范围中的其他字符，将设置<xref:System.IO.Ports.SerialPort.Encoding%2A>到<xref:System.Text.UTF8Encoding>， <xref:System.Text.UTF32Encoding>，或<xref:System.Text.UnicodeEncoding>。</xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF32Encoding> </xref:System.Text.UTF8Encoding> </xref:System.IO.Ports.SerialPort.Encoding%2A>"
  syntax:
    content: public void Write (string text);
    parameters:
    - id: text
      type: System.String
      description: "输出字符串。"
  overload: System.IO.Ports.SerialPort.Write*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>str</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "该操作未完成之前的超时期结束。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: SerialPort.Write(Byte[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "将指定的数目的字节写入串行端口使用缓冲区中的数据。"
  remarks: "当你想要写入字节缓冲区来创建到串行端口输出，请使用此方法。       输出缓冲区中是否存在太多字节和<xref:System.IO.Ports.SerialPort.Handshake%2A>设置为<xref:System.IO.Ports.Handshake>则<xref:System.IO.Ports.SerialPort>对象可能会引起<xref:System.ServiceProcess.TimeoutException>等待设备在准备好接受更多的数据时。</xref:System.ServiceProcess.TimeoutException> </xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.Handshake> </xref:System.IO.Ports.SerialPort.Handshake%2A>       默认情况下，<xref:System.IO.Ports.SerialPort>使用<xref:System.Text.ASCIIEncoding>字符进行编码。</xref:System.Text.ASCIIEncoding> </xref:System.IO.Ports.SerialPort> <xref:System.Text.ASCIIEncoding>将大于 127 的所有字符都编码为 (char) 63 或？。</xref:System.Text.ASCIIEncoding> 若要支持该范围中的其他字符，将设置<xref:System.IO.Ports.SerialPort.Encoding%2A>到<xref:System.Text.UTF8Encoding>， <xref:System.Text.UTF32Encoding>，或<xref:System.Text.UnicodeEncoding>。</xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF32Encoding> </xref:System.Text.UTF8Encoding> </xref:System.IO.Ports.SerialPort.Encoding%2A>"
  syntax:
    content: public void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "包含要写入端口的数据的字节数组。"
    - id: offset
      type: System.Int32
      description: "中的从零开始的字节偏移量`buffer`参数从此处开始将字节复制到的端口。"
    - id: count
      type: System.Int32
      description: "要写入的字节数。"
  overload: System.IO.Ports.SerialPort.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>buffer</code> passed is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code>或<code> count </code>参数不在有效的区域<code> buffer </code>传递。 Either <code>offset</code> or <code>count</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>加上<code>count</code>大于的长度<code>buffer</code>。"
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "该操作未完成之前的超时期结束。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: Write(Char[],Int32,Int32)
  nameWithType: SerialPort.Write(Char[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Write(Char[],Int32,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "将指定的数目的字符写入串行端口使用缓冲区中的数据。"
  remarks: "当你想要写入字符缓冲区来创建到串行端口输出，请使用此方法。       输出缓冲区中是否存在太多字节和<xref:System.IO.Ports.SerialPort.Handshake%2A>设置为<xref:System.IO.Ports.Handshake>则<xref:System.IO.Ports.SerialPort>对象可能会引起<xref:System.ServiceProcess.TimeoutException>等待设备在准备好接受更多的数据时。</xref:System.ServiceProcess.TimeoutException> </xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.Handshake> </xref:System.IO.Ports.SerialPort.Handshake%2A>       默认情况下，<xref:System.IO.Ports.SerialPort>使用<xref:System.Text.ASCIIEncoding>字符进行编码。</xref:System.Text.ASCIIEncoding> </xref:System.IO.Ports.SerialPort> <xref:System.Text.ASCIIEncoding>将大于 127 的所有字符都编码为 (char) 63 或？。</xref:System.Text.ASCIIEncoding> 若要支持该范围中的其他字符，将设置<xref:System.IO.Ports.SerialPort.Encoding%2A>到<xref:System.Text.UTF8Encoding>， <xref:System.Text.UTF32Encoding>，或<xref:System.Text.UnicodeEncoding>。</xref:System.Text.UnicodeEncoding> </xref:System.Text.UTF32Encoding> </xref:System.Text.UTF8Encoding> </xref:System.IO.Ports.SerialPort.Encoding%2A>"
  syntax:
    content: public void Write (char[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "包含要写入端口的数据的字符数组。"
    - id: offset
      type: System.Int32
      description: "中的从零开始的字节偏移量`buffer`参数从此处开始将字节复制到的端口。"
    - id: count
      type: System.Int32
      description: "要写入的字符数。"
  overload: System.IO.Ports.SerialPort.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>buffer</code> passed is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code>或<code> count </code>参数不在有效的区域<code> buffer </code>传递。 Either <code>offset</code> or <code>count</code> is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>offset</code>加上<code>count</code>大于的长度<code>buffer</code>。"
  - type: System.ServiceProcess.TimeoutException
    commentId: T:System.ServiceProcess.TimeoutException
    description: "该操作未完成之前的超时期结束。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.WriteBufferSize
  id: WriteBufferSize
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: WriteBufferSize
  nameWithType: SerialPort.WriteBufferSize
  fullName: System.IO.Ports.SerialPort.WriteBufferSize
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置串行端口输出缓冲区的大小。"
  remarks: "WriteBufferSize 属性将忽略小于 2048年任何值。"
  syntax:
    content: public int WriteBufferSize { get; set; }
    return:
      type: System.Int32
      description: "输出缓冲区的大小。 默认值为 2048年。"
  overload: System.IO.Ports.SerialPort.WriteBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "WriteBufferSize 值小于或等于零。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "打开流时设置 WriteBufferSize 属性。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "WriteBufferSize 属性设置为奇数的数字值。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: SerialPort.WriteLine(String)
  fullName: System.IO.Ports.SerialPort.WriteLine(String)
  type: Method
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "将指定的字符串和<xref:System.IO.Ports.SerialPort.NewLine*>值写入输出缓冲区。</xref:System.IO.Ports.SerialPort.NewLine*>"
  remarks: "如果输入缓冲区中有太多字节和<xref:System.IO.Ports.SerialPort.Handshake%2A>设置为<xref:System.IO.Ports.Handshake>则<xref:System.IO.Ports.SerialPort>对象可能会引起<xref:System.ServiceProcess.TimeoutException>等待设备在准备好接受更多的数据时。</xref:System.ServiceProcess.TimeoutException> </xref:System.IO.Ports.SerialPort> </xref:System.IO.Ports.Handshake> </xref:System.IO.Ports.SerialPort.Handshake%2A>       写入的输出包括<xref:System.IO.Ports.SerialPort.NewLine%2A>字符串。</xref:System.IO.Ports.SerialPort.NewLine%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/m-system.io.ports.serial_1_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/m-system.io.ports.serial_1_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/m-system.io.ports.serial_1_1.vb)]"
  syntax:
    content: public void WriteLine (string text);
    parameters:
    - id: text
      type: System.String
      description: "要写入到输出缓冲区的字符串。"
  overload: System.IO.Ports.SerialPort.WriteLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>str</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的端口未打开。"
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: "WriteLine 方法无法写入流。"
  platform:
  - net462
- uid: System.IO.Ports.SerialPort.WriteTimeout
  id: WriteTimeout
  parent: System.IO.Ports.SerialPort
  langs:
  - csharp
  name: WriteTimeout
  nameWithType: SerialPort.WriteTimeout
  fullName: System.IO.Ports.SerialPort.WriteTimeout
  type: Property
  assemblies:
  - System
  namespace: System.IO.Ports
  summary: "获取或设置写入操作未完成时发生超时之前的毫秒数。"
  remarks: "最初，写入超时值被设置为在 Win32 通信 API 中的 500 毫秒。 此属性，可将此值设置。 可以设置为任何值大于零，超时，或将其设置为<xref:System.IO.Ports.SerialPort.InfiniteTimeout>，在这种情况下不会发生超时。</xref:System.IO.Ports.SerialPort.InfiniteTimeout> <xref:System.IO.Ports.SerialPort.InfiniteTimeout>默认值。</xref:System.IO.Ports.SerialPort.InfiniteTimeout>      1> [!NOTE]&1;> 的非托管用户`COMMTIMEOUTS`结构可能希望将超时值设置为零，以禁止超时。 若要禁止显示 WriteTimeout 属性的超时时间，但是，你必须指定<xref:System.IO.Ports.SerialPort.InfiniteTimeout>.</xref:System.IO.Ports.SerialPort.InfiniteTimeout>       此属性不会影响<xref:System.IO.Stream.BeginWrite%2A>方法返回的流<xref:System.IO.Ports.SerialPort.BaseStream%2A>属性。</xref:System.IO.Ports.SerialPort.BaseStream%2A> </xref:System.IO.Stream.BeginWrite%2A>"
  example:
  - "The following code example demonstrates the use of the <xref:System.IO.Ports.SerialPort> class to allow two users to chat from two separate computers connected by a null modem cable. In this example, the users are prompted for the port settings and a username before chatting. This code example is part of a larger code example provided for the <xref:System.IO.Ports.SerialPort> class.  \n  \n [!code-cpp[System.IO.Ports.SerialPort#01](~/add/codesnippet/cpp/p-system.io.ports.serial_5_1.cpp)]\n [!code-cs[System.IO.Ports.SerialPort#01](~/add/codesnippet/csharp/p-system.io.ports.serial_5_1.cs)]\n [!code-vb[System.IO.Ports.SerialPort#01](~/add/codesnippet/visualbasic/p-system.io.ports.serial_5_1.vb)]"
  syntax:
    content: public int WriteTimeout { get; set; }
    return:
      type: System.Int32
      description: "发生超时之前的毫秒数。 默认值是<xref href=&quot;System.IO.Ports.SerialPort.InfiniteTimeout&quot;> </xref>。"
  overload: System.IO.Ports.SerialPort.WriteTimeout*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "The port is in an invalid state.  \n  \n \\- or -  \n  \n An attempt to set the state of the underlying port failed. For example, the parameters passed from this <xref href=\"System.IO.Ports.SerialPort\"></xref> object were invalid."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "WriteTimeout 值小于零且不等于<xref href=&quot;System.IO.Ports.SerialPort.InfiniteTimeout&quot;> </xref>。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.TimeoutException
  isExternal: true
  name: System.TimeoutException
- uid: System.ServiceProcess.TimeoutException
  parent: System.ServiceProcess
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.ServiceProcess.TimeoutException
- uid: System.IO.Ports.SerialPort.#ctor
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort()
  nameWithType: SerialPort.SerialPort()
  fullName: System.IO.Ports.SerialPort.SerialPort()
- uid: System.IO.Ports.SerialPort.#ctor(System.ComponentModel.IContainer)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(IContainer)
  nameWithType: SerialPort.SerialPort(IContainer)
  fullName: System.IO.Ports.SerialPort.SerialPort(IContainer)
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.IO.Ports.SerialPort.#ctor(System.String)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String)
  nameWithType: SerialPort.SerialPort(String)
  fullName: System.IO.Ports.SerialPort.SerialPort(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String,Int32)
  nameWithType: SerialPort.SerialPort(String,Int32)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String,Int32,Parity)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity)
- uid: System.IO.Ports.Parity
  parent: System.IO.Ports
  isExternal: false
  name: Parity
  nameWithType: Parity
  fullName: System.IO.Ports.Parity
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String,Int32,Parity,Int32)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity,Int32)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity,Int32)
- uid: System.IO.Ports.SerialPort.#ctor(System.String,System.Int32,System.IO.Ports.Parity,System.Int32,System.IO.Ports.StopBits)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort(String,Int32,Parity,Int32,StopBits)
  nameWithType: SerialPort.SerialPort(String,Int32,Parity,Int32,StopBits)
  fullName: System.IO.Ports.SerialPort.SerialPort(String,Int32,Parity,Int32,StopBits)
- uid: System.IO.Ports.StopBits
  parent: System.IO.Ports
  isExternal: false
  name: StopBits
  nameWithType: StopBits
  fullName: System.IO.Ports.StopBits
- uid: System.IO.Ports.SerialPort.BaseStream
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BaseStream
  nameWithType: SerialPort.BaseStream
  fullName: System.IO.Ports.SerialPort.BaseStream
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Ports.SerialPort.BaudRate
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BaudRate
  nameWithType: SerialPort.BaudRate
  fullName: System.IO.Ports.SerialPort.BaudRate
- uid: System.IO.Ports.SerialPort.BreakState
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BreakState
  nameWithType: SerialPort.BreakState
  fullName: System.IO.Ports.SerialPort.BreakState
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Ports.SerialPort.BytesToRead
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BytesToRead
  nameWithType: SerialPort.BytesToRead
  fullName: System.IO.Ports.SerialPort.BytesToRead
- uid: System.IO.Ports.SerialPort.BytesToWrite
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BytesToWrite
  nameWithType: SerialPort.BytesToWrite
  fullName: System.IO.Ports.SerialPort.BytesToWrite
- uid: System.IO.Ports.SerialPort.CDHolding
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: CDHolding
  nameWithType: SerialPort.CDHolding
  fullName: System.IO.Ports.SerialPort.CDHolding
- uid: System.IO.Ports.SerialPort.Close
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Close()
  nameWithType: SerialPort.Close()
  fullName: System.IO.Ports.SerialPort.Close()
- uid: System.IO.Ports.SerialPort.CtsHolding
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: CtsHolding
  nameWithType: SerialPort.CtsHolding
  fullName: System.IO.Ports.SerialPort.CtsHolding
- uid: System.IO.Ports.SerialPort.DataBits
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DataBits
  nameWithType: SerialPort.DataBits
  fullName: System.IO.Ports.SerialPort.DataBits
- uid: System.IO.Ports.SerialPort.DataReceived
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DataReceived
  nameWithType: SerialPort.DataReceived
  fullName: System.IO.Ports.SerialPort.DataReceived
- uid: System.IO.Ports.SerialDataReceivedEventHandler
  parent: System.IO.Ports
  isExternal: false
  name: SerialDataReceivedEventHandler
  nameWithType: SerialDataReceivedEventHandler
  fullName: System.IO.Ports.SerialDataReceivedEventHandler
- uid: System.IO.Ports.SerialPort.DiscardInBuffer
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardInBuffer()
  nameWithType: SerialPort.DiscardInBuffer()
  fullName: System.IO.Ports.SerialPort.DiscardInBuffer()
- uid: System.IO.Ports.SerialPort.DiscardNull
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardNull
  nameWithType: SerialPort.DiscardNull
  fullName: System.IO.Ports.SerialPort.DiscardNull
- uid: System.IO.Ports.SerialPort.DiscardOutBuffer
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardOutBuffer()
  nameWithType: SerialPort.DiscardOutBuffer()
  fullName: System.IO.Ports.SerialPort.DiscardOutBuffer()
- uid: System.IO.Ports.SerialPort.Dispose(System.Boolean)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SerialPort.Dispose(Boolean)
  fullName: System.IO.Ports.SerialPort.Dispose(Boolean)
- uid: System.IO.Ports.SerialPort.DsrHolding
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DsrHolding
  nameWithType: SerialPort.DsrHolding
  fullName: System.IO.Ports.SerialPort.DsrHolding
- uid: System.IO.Ports.SerialPort.DtrEnable
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DtrEnable
  nameWithType: SerialPort.DtrEnable
  fullName: System.IO.Ports.SerialPort.DtrEnable
- uid: System.IO.Ports.SerialPort.Encoding
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Encoding
  nameWithType: SerialPort.Encoding
  fullName: System.IO.Ports.SerialPort.Encoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.IO.Ports.SerialPort.ErrorReceived
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ErrorReceived
  nameWithType: SerialPort.ErrorReceived
  fullName: System.IO.Ports.SerialPort.ErrorReceived
- uid: System.IO.Ports.SerialErrorReceivedEventHandler
  parent: System.IO.Ports
  isExternal: false
  name: SerialErrorReceivedEventHandler
  nameWithType: SerialErrorReceivedEventHandler
  fullName: System.IO.Ports.SerialErrorReceivedEventHandler
- uid: System.IO.Ports.SerialPort.GetPortNames
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: GetPortNames()
  nameWithType: SerialPort.GetPortNames()
  fullName: System.IO.Ports.SerialPort.GetPortNames()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Ports.SerialPort.Handshake
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Handshake
  nameWithType: SerialPort.Handshake
  fullName: System.IO.Ports.SerialPort.Handshake
- uid: System.IO.Ports.Handshake
  parent: System.IO.Ports
  isExternal: false
  name: Handshake
  nameWithType: Handshake
  fullName: System.IO.Ports.Handshake
- uid: System.IO.Ports.SerialPort.InfiniteTimeout
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: InfiniteTimeout
  nameWithType: SerialPort.InfiniteTimeout
  fullName: System.IO.Ports.SerialPort.InfiniteTimeout
- uid: System.IO.Ports.SerialPort.IsOpen
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: IsOpen
  nameWithType: SerialPort.IsOpen
  fullName: System.IO.Ports.SerialPort.IsOpen
- uid: System.IO.Ports.SerialPort.NewLine
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: NewLine
  nameWithType: SerialPort.NewLine
  fullName: System.IO.Ports.SerialPort.NewLine
- uid: System.IO.Ports.SerialPort.Open
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Open()
  nameWithType: SerialPort.Open()
  fullName: System.IO.Ports.SerialPort.Open()
- uid: System.IO.Ports.SerialPort.Parity
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Parity
  nameWithType: SerialPort.Parity
  fullName: System.IO.Ports.SerialPort.Parity
- uid: System.IO.Ports.SerialPort.ParityReplace
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ParityReplace
  nameWithType: SerialPort.ParityReplace
  fullName: System.IO.Ports.SerialPort.ParityReplace
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.Ports.SerialPort.PinChanged
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: PinChanged
  nameWithType: SerialPort.PinChanged
  fullName: System.IO.Ports.SerialPort.PinChanged
- uid: System.IO.Ports.SerialPinChangedEventHandler
  parent: System.IO.Ports
  isExternal: false
  name: SerialPinChangedEventHandler
  nameWithType: SerialPinChangedEventHandler
  fullName: System.IO.Ports.SerialPinChangedEventHandler
- uid: System.IO.Ports.SerialPort.PortName
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: PortName
  nameWithType: SerialPort.PortName
  fullName: System.IO.Ports.SerialPort.PortName
- uid: System.IO.Ports.SerialPort.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: SerialPort.Read(Byte[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Read(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Ports.SerialPort.Read(System.Char[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Read(Char[],Int32,Int32)
  nameWithType: SerialPort.Read(Char[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Read(Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Ports.SerialPort.ReadBufferSize
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadBufferSize
  nameWithType: SerialPort.ReadBufferSize
  fullName: System.IO.Ports.SerialPort.ReadBufferSize
- uid: System.IO.Ports.SerialPort.ReadByte
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadByte()
  nameWithType: SerialPort.ReadByte()
  fullName: System.IO.Ports.SerialPort.ReadByte()
- uid: System.IO.Ports.SerialPort.ReadChar
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadChar()
  nameWithType: SerialPort.ReadChar()
  fullName: System.IO.Ports.SerialPort.ReadChar()
- uid: System.IO.Ports.SerialPort.ReadExisting
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadExisting()
  nameWithType: SerialPort.ReadExisting()
  fullName: System.IO.Ports.SerialPort.ReadExisting()
- uid: System.IO.Ports.SerialPort.ReadLine
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadLine()
  nameWithType: SerialPort.ReadLine()
  fullName: System.IO.Ports.SerialPort.ReadLine()
- uid: System.IO.Ports.SerialPort.ReadTimeout
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadTimeout
  nameWithType: SerialPort.ReadTimeout
  fullName: System.IO.Ports.SerialPort.ReadTimeout
- uid: System.IO.Ports.SerialPort.ReadTo(System.String)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadTo(String)
  nameWithType: SerialPort.ReadTo(String)
  fullName: System.IO.Ports.SerialPort.ReadTo(String)
- uid: System.IO.Ports.SerialPort.ReceivedBytesThreshold
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReceivedBytesThreshold
  nameWithType: SerialPort.ReceivedBytesThreshold
  fullName: System.IO.Ports.SerialPort.ReceivedBytesThreshold
- uid: System.IO.Ports.SerialPort.RtsEnable
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: RtsEnable
  nameWithType: SerialPort.RtsEnable
  fullName: System.IO.Ports.SerialPort.RtsEnable
- uid: System.IO.Ports.SerialPort.StopBits
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: StopBits
  nameWithType: SerialPort.StopBits
  fullName: System.IO.Ports.SerialPort.StopBits
- uid: System.IO.Ports.SerialPort.Write(System.String)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Write(String)
  nameWithType: SerialPort.Write(String)
  fullName: System.IO.Ports.SerialPort.Write(String)
- uid: System.IO.Ports.SerialPort.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: SerialPort.Write(Byte[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Write(Byte[],Int32,Int32)
- uid: System.IO.Ports.SerialPort.Write(System.Char[],System.Int32,System.Int32)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Write(Char[],Int32,Int32)
  nameWithType: SerialPort.Write(Char[],Int32,Int32)
  fullName: System.IO.Ports.SerialPort.Write(Char[],Int32,Int32)
- uid: System.IO.Ports.SerialPort.WriteBufferSize
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteBufferSize
  nameWithType: SerialPort.WriteBufferSize
  fullName: System.IO.Ports.SerialPort.WriteBufferSize
- uid: System.IO.Ports.SerialPort.WriteLine(System.String)
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteLine(String)
  nameWithType: SerialPort.WriteLine(String)
  fullName: System.IO.Ports.SerialPort.WriteLine(String)
- uid: System.IO.Ports.SerialPort.WriteTimeout
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteTimeout
  nameWithType: SerialPort.WriteTimeout
  fullName: System.IO.Ports.SerialPort.WriteTimeout
- uid: System.IO.Ports.SerialPort.#ctor*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: SerialPort
  nameWithType: SerialPort.SerialPort
- uid: System.IO.Ports.SerialPort.BaseStream*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BaseStream
  nameWithType: SerialPort.BaseStream
- uid: System.IO.Ports.SerialPort.BaudRate*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BaudRate
  nameWithType: SerialPort.BaudRate
- uid: System.IO.Ports.SerialPort.BreakState*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BreakState
  nameWithType: SerialPort.BreakState
- uid: System.IO.Ports.SerialPort.BytesToRead*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BytesToRead
  nameWithType: SerialPort.BytesToRead
- uid: System.IO.Ports.SerialPort.BytesToWrite*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: BytesToWrite
  nameWithType: SerialPort.BytesToWrite
- uid: System.IO.Ports.SerialPort.CDHolding*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: CDHolding
  nameWithType: SerialPort.CDHolding
- uid: System.IO.Ports.SerialPort.Close*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Close
  nameWithType: SerialPort.Close
- uid: System.IO.Ports.SerialPort.CtsHolding*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: CtsHolding
  nameWithType: SerialPort.CtsHolding
- uid: System.IO.Ports.SerialPort.DataBits*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DataBits
  nameWithType: SerialPort.DataBits
- uid: System.IO.Ports.SerialPort.DiscardInBuffer*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardInBuffer
  nameWithType: SerialPort.DiscardInBuffer
- uid: System.IO.Ports.SerialPort.DiscardNull*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardNull
  nameWithType: SerialPort.DiscardNull
- uid: System.IO.Ports.SerialPort.DiscardOutBuffer*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DiscardOutBuffer
  nameWithType: SerialPort.DiscardOutBuffer
- uid: System.IO.Ports.SerialPort.Dispose*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Dispose
  nameWithType: SerialPort.Dispose
- uid: System.IO.Ports.SerialPort.DsrHolding*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DsrHolding
  nameWithType: SerialPort.DsrHolding
- uid: System.IO.Ports.SerialPort.DtrEnable*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: DtrEnable
  nameWithType: SerialPort.DtrEnable
- uid: System.IO.Ports.SerialPort.Encoding*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Encoding
  nameWithType: SerialPort.Encoding
- uid: System.IO.Ports.SerialPort.GetPortNames*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: GetPortNames
  nameWithType: SerialPort.GetPortNames
- uid: System.IO.Ports.SerialPort.Handshake*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Handshake
  nameWithType: SerialPort.Handshake
- uid: System.IO.Ports.SerialPort.IsOpen*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: IsOpen
  nameWithType: SerialPort.IsOpen
- uid: System.IO.Ports.SerialPort.NewLine*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: NewLine
  nameWithType: SerialPort.NewLine
- uid: System.IO.Ports.SerialPort.Open*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Open
  nameWithType: SerialPort.Open
- uid: System.IO.Ports.SerialPort.Parity*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Parity
  nameWithType: SerialPort.Parity
- uid: System.IO.Ports.SerialPort.ParityReplace*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ParityReplace
  nameWithType: SerialPort.ParityReplace
- uid: System.IO.Ports.SerialPort.PortName*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: PortName
  nameWithType: SerialPort.PortName
- uid: System.IO.Ports.SerialPort.Read*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Read
  nameWithType: SerialPort.Read
- uid: System.IO.Ports.SerialPort.ReadBufferSize*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadBufferSize
  nameWithType: SerialPort.ReadBufferSize
- uid: System.IO.Ports.SerialPort.ReadByte*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadByte
  nameWithType: SerialPort.ReadByte
- uid: System.IO.Ports.SerialPort.ReadChar*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadChar
  nameWithType: SerialPort.ReadChar
- uid: System.IO.Ports.SerialPort.ReadExisting*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadExisting
  nameWithType: SerialPort.ReadExisting
- uid: System.IO.Ports.SerialPort.ReadLine*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadLine
  nameWithType: SerialPort.ReadLine
- uid: System.IO.Ports.SerialPort.ReadTimeout*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadTimeout
  nameWithType: SerialPort.ReadTimeout
- uid: System.IO.Ports.SerialPort.ReadTo*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReadTo
  nameWithType: SerialPort.ReadTo
- uid: System.IO.Ports.SerialPort.ReceivedBytesThreshold*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: ReceivedBytesThreshold
  nameWithType: SerialPort.ReceivedBytesThreshold
- uid: System.IO.Ports.SerialPort.RtsEnable*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: RtsEnable
  nameWithType: SerialPort.RtsEnable
- uid: System.IO.Ports.SerialPort.StopBits*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: StopBits
  nameWithType: SerialPort.StopBits
- uid: System.IO.Ports.SerialPort.Write*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: Write
  nameWithType: SerialPort.Write
- uid: System.IO.Ports.SerialPort.WriteBufferSize*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteBufferSize
  nameWithType: SerialPort.WriteBufferSize
- uid: System.IO.Ports.SerialPort.WriteLine*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteLine
  nameWithType: SerialPort.WriteLine
- uid: System.IO.Ports.SerialPort.WriteTimeout*
  parent: System.IO.Ports.SerialPort
  isExternal: false
  name: WriteTimeout
  nameWithType: SerialPort.WriteTimeout
