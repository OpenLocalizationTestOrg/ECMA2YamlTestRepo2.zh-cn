### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.PropertyDescriptor
  id: PropertyDescriptor
  children:
  - System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  - System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  - System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.ComponentType
  - System.ComponentModel.PropertyDescriptor.Converter
  - System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  - System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  - System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  - System.ComponentModel.PropertyDescriptor.GetChildProperties
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  - System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  - System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  - System.ComponentModel.PropertyDescriptor.GetHashCode
  - System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  - System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  - System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  - System.ComponentModel.PropertyDescriptor.IsLocalizable
  - System.ComponentModel.PropertyDescriptor.IsReadOnly
  - System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  - System.ComponentModel.PropertyDescriptor.PropertyType
  - System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  - System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.SerializationVisibility
  - System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  - System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  - System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  langs:
  - csharp
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor
  fullName: System.ComponentModel.PropertyDescriptor
  type: Class
  summary: "提供类的属性的抽象。"
  remarks: "属性的说明组成的名称、 其属性、，关联的属性的组件类和属性的类型。       PropertyDescriptor 提供以下属性和方法:-<xref:System.ComponentModel.PropertyDescriptor.Converter%2A>包含<xref:System.ComponentModel.TypeConverter>此属性。</xref:System.ComponentModel.TypeConverter> </xref:System.ComponentModel.PropertyDescriptor.Converter%2A>      -<xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A>指示是否应本地化此属性。</xref:System.ComponentModel.PropertyDescriptor.IsLocalizable%2A>      -<xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A>返回指定类型的编辑器。</xref:System.ComponentModel.PropertyDescriptor.GetEditor%2A>       PropertyDescriptor 还提供了以下`abstract`属性和方法:-<xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A>包含此属性绑定到的组件的类型。</xref:System.ComponentModel.PropertyDescriptor.ComponentType%2A>      -<xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A>表示此属性是只读的。</xref:System.ComponentModel.PropertyDescriptor.IsReadOnly%2A>      -<xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A>获取属性的类型。</xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A>      -<xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A>指示是否将重置组件更改个分量的值。</xref:System.ComponentModel.PropertyDescriptor.CanResetValue%2A>      -<xref:System.ComponentModel.PropertyDescriptor.GetValue%2A>在组件上返回的属性的当前值。</xref:System.ComponentModel.PropertyDescriptor.GetValue%2A>      -<xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A>重置组件的此属性的值。</xref:System.ComponentModel.PropertyDescriptor.ResetValue%2A>      -<xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>个分量的值设置为不同的值。</xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>      -<xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A>该值指示是否需要保留此属性的值。</xref:System.ComponentModel.PropertyDescriptor.ShouldSerializeValue%2A>       通常情况下，`abstract`成员通过反射来实现。 关于反射的详细信息，请参阅中的主题[反射](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example is built upon the example in the <xref:System.ComponentModel.PropertyDescriptorCollection> class. It prints the information (category, description, display name) of the text of a button in a text box. It assumes that `button1` and `textbox1` have been instantiated on a form.  \n  \n [!code-cpp[PropertyDescriptor#1](~/add/codesnippet/cpp/t-system.componentmodel._4_1.cpp)]\n [!code-vb[PropertyDescriptor#1](~/add/codesnippet/visualbasic/t-system.componentmodel._4_1.vb)]\n [!code-cs[PropertyDescriptor#1](~/add/codesnippet/csharp/t-system.componentmodel._4_1.cs)]  \n  \n The following code example shows how to implement a custom property descriptor that provides a read-only wrapper around a property. The `SerializeReadOnlyPropertyDescriptor` is used in a custom designer to provide a read-only property descriptor for the control's <xref:System.Windows.Forms.Control.Size%2A> property.  \n  \n [!code-cs[System.ComponentModel.PropertyDescriptor#1](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/SerializeReadOnlyPropertyDescriptor.cs#1)]\n [!code-vb[System.ComponentModel.PropertyDescriptor#1](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/SerializeReadOnlyPropertyDescriptor.vb#1)]  \n  \n The following code examples show how to use the The `SerializeReadOnlyPropertyDescriptor` in a custom designer.  \n  \n [!code-cs[System.ComponentModel.PropertyDescriptor#10](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/DemoControlDesigner.cs#10)]\n [!code-vb[System.ComponentModel.PropertyDescriptor#10](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/DemoControlDesigner.vb#10)]  \n[!code-vb[System.ComponentModel.PropertyDescriptor#100](~/add/codesnippet/visualbasic/ReadOnlyPropertyDescriptor/DemoControl.vb#100)]\n[!code-cs[System.ComponentModel.PropertyDescriptor#100](~/add/codesnippet/csharp/System.ComponentModel.PropertyDescriptor/DemoControl.cs#100)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class PropertyDescriptor : System.ComponentModel.MemberDescriptor
  inheritance:
  - System.Object
  - System.ComponentModel.MemberDescriptor
  implements: []
  inheritedMembers:
  - System.ComponentModel.MemberDescriptor.AttributeArray
  - System.ComponentModel.MemberDescriptor.Attributes
  - System.ComponentModel.MemberDescriptor.Category
  - System.ComponentModel.MemberDescriptor.CreateAttributeCollection
  - System.ComponentModel.MemberDescriptor.Description
  - System.ComponentModel.MemberDescriptor.DesignTimeOnly
  - System.ComponentModel.MemberDescriptor.DisplayName
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type)
  - System.ComponentModel.MemberDescriptor.FindMethod(System.Type,System.String,System.Type[],System.Type,System.Boolean)
  - System.ComponentModel.MemberDescriptor.GetInvokee(System.Type,System.Object)
  - System.ComponentModel.MemberDescriptor.GetSite(System.Object)
  - System.ComponentModel.MemberDescriptor.IsBrowsable
  - System.ComponentModel.MemberDescriptor.Name
  - System.ComponentModel.MemberDescriptor.NameHashCode
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  id: '#ctor(System.ComponentModel.MemberDescriptor)'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(MemberDescriptor)
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>具有名称和在指定的属性的类<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>。"
  syntax:
    content: protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "A <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>包含名称的属性和其特性。"
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  id: '#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(MemberDescriptor,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>中指定的名称与类<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>和中都属性<xref href=&quot;System.ComponentModel.MemberDescriptor&quot;></xref>和<xref:System.Attribute>数组。</xref:System.Attribute>"
  remarks: "此构造函数将追加<xref:System.Attribute>到<xref:System.ComponentModel.MemberDescriptor>.</xref:System.ComponentModel.MemberDescriptor>中的特性的数组</xref:System.Attribute>中的属性"
  syntax:
    content: protected PropertyDescriptor (System.ComponentModel.MemberDescriptor descr, Attribute[] attrs);
    parameters:
    - id: descr
      type: System.ComponentModel.MemberDescriptor
      description: "A <xref href=&quot;System.ComponentModel.MemberDescriptor&quot;> </xref>包含该成员及其属性的名称。"
    - id: attrs
      type: System.Attribute[]
      description: "<xref:System.Attribute>数组，其中包含你想要与属性关联的属性。</xref:System.Attribute>"
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  id: '#ctor(System.String,System.Attribute[])'
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyDescriptor(String,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>具有指定的名称和属性的类。"
  syntax:
    content: protected PropertyDescriptor (string name, Attribute[] attrs);
    parameters:
    - id: name
      type: System.String
      description: "属性的名称。"
    - id: attrs
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>包含属性特性。</xref:System.Attribute>"
  overload: System.ComponentModel.PropertyDescriptor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  id: AddValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: AddValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.AddValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.AddValueChanged(Object,EventHandler)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "支持此属性更改时通知其他对象。"
  syntax:
    content: public virtual void AddValueChanged (object component, EventHandler handler);
    parameters:
    - id: component
      type: System.Object
      description: "要添加的处理程序的组件。"
    - id: handler
      type: System.EventHandler
      description: "要作为侦听器添加的委托。"
  overload: System.ComponentModel.PropertyDescriptor.AddValueChanged*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  id: CanResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: CanResetValue(Object)
  nameWithType: PropertyDescriptor.CanResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.CanResetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，则返回是否重置对象更改其值。"
  remarks: "通常情况下，通过反射实现此方法。"
  syntax:
    content: public abstract bool CanResetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "要测试重置功能的组件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果重置组件，更改其值;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.PropertyDescriptor.CanResetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ComponentType
  id: ComponentType
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
  fullName: System.ComponentModel.PropertyDescriptor.ComponentType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，获取此属性绑定到的组件的类型。"
  remarks: "通常情况下，通过反射实现此属性。"
  syntax:
    content: public abstract Type ComponentType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>表示此属性绑定到的组件的类型。</xref:System.Type> 当<> *1> 或<> *1> 调用方法时，指定的对象可能是此类型的实例。"
  overload: System.ComponentModel.PropertyDescriptor.ComponentType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.Converter
  id: Converter
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: Converter
  nameWithType: PropertyDescriptor.Converter
  fullName: System.ComponentModel.PropertyDescriptor.Converter
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取此属性的类型转换器。"
  syntax:
    content: public virtual System.ComponentModel.TypeConverter Converter { get; }
    return:
      type: System.ComponentModel.TypeConverter
      description: "A <xref href=&quot;System.ComponentModel.TypeConverter&quot;> </xref>用于将转换<xref:System.Type>此属性。</xref:System.Type>"
  overload: System.ComponentModel.PropertyDescriptor.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  id: CreateInstance(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: CreateInstance(Type)
  nameWithType: PropertyDescriptor.CreateInstance(Type)
  fullName: System.ComponentModel.PropertyDescriptor.CreateInstance(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建指定类型的实例。"
  remarks: "CreateInstance 查找带指定的类型的构造函数。 如果找到一个构造函数，被传入的属性的类型。       转换器和编辑器可以使用此方法创建的组件版本。 此方法使单个组件可以重复用于多个类型。"
  syntax:
    content: protected object CreateInstance (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>，它表示要创建的类型。</xref:System.Type>"
    return:
      type: System.Object
      description: "类型的新实例。"
  overload: System.ComponentModel.PropertyDescriptor.CreateInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: PropertyDescriptor.Equals(Object)
  fullName: System.ComponentModel.PropertyDescriptor.Equals(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "比较此到另一个对象以确定它们是否等效。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与此比较的对象<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果这些值是等效的;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.PropertyDescriptor.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  id: FillAttributes(System.Collections.IList)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: FillAttributes(IList)
  nameWithType: PropertyDescriptor.FillAttributes(IList)
  fullName: System.ComponentModel.PropertyDescriptor.FillAttributes(IList)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "添加的特性<xref href=&quot;System.ComponentModel.PropertyDescriptor&quot;></xref>到指定列表中的父类的属性。"
  remarks: "对于重复的属性，将保留添加到列表中最后一个。"
  syntax:
    content: protected override void FillAttributes (System.Collections.IList attributeList);
    parameters:
    - id: attributeList
      type: System.Collections.IList
      description: "<xref:System.Collections.IList>它列出父类中的属性</xref:System.Collections.IList> 最初，这是空的。"
  overload: System.ComponentModel.PropertyDescriptor.FillAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties
  id: GetChildProperties
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties()
  nameWithType: PropertyDescriptor.GetChildProperties()
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回默认值<xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>。"
  remarks: "此方法将传递`null`两个`instance`参数和`filter`参数。       属性`instance`参数可以不同于类的属性，因为容器可以添加或删除属性，如果`instance`放置参数。       `filter`参数可以混合使用<xref:System.Type>和<xref:System.Attribute>对象。</xref:System.Attribute> </xref:System.Type> 筛选由以下规则定义:-<xref:System.Type>对象将被视为通配符; 它匹配具有任何属性<xref:System.Type>属性其集中。</xref:System.Type> </xref:System.Type>      -如果属性不具有<xref:System.Attribute>的同一个类，将不包含属性返回的数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>，该属性必须是完全匹配要包括在返回的数组。</xref:System.Attribute>      -如果你指定<xref:System.Attribute>和它是默认属性，它将包括在返回的数组，即使不没有的任何实例<xref:System.Attribute>属性中。</xref:System.Attribute> </xref:System.Attribute>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties ();
    parameters: []
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "属性描述符的集合。"
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  id: GetChildProperties(System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回<xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;></xref>使用指定的属性数组作为筛选器。"
  remarks: "此方法将传递`null`为`instance`参数。       属性`instance`参数可以不同于类的属性，因为该位置可以添加或删除属性，如果`instance`放置参数。       `filter`参数可以混合使用<xref:System.Type>和<xref:System.Attribute>对象。</xref:System.Attribute> </xref:System.Type> 筛选由以下规则定义:-<xref:System.Type>对象将被视为通配符; 它匹配具有任何属性<xref:System.Type>属性其集中。</xref:System.Type> </xref:System.Type>      -如果属性不具有<xref:System.Attribute>的同一个类，将不包含属性返回的数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>，该属性必须是完全匹配要包括在返回的数组。</xref:System.Attribute>      -如果你指定<xref:System.Attribute>实例，并且它是默认属性，它将包括在返回的数组即使存在的任何实例<xref:System.Attribute>属性中。</xref:System.Attribute> </xref:System.Attribute>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (Attribute[] filter);
    parameters:
    - id: filter
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>要用作筛选器。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>与相匹配的指定的属性的属性。"
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  id: GetChildProperties(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Object)
  nameWithType: PropertyDescriptor.GetChildProperties(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回<xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;></xref>给定的对象。"
  remarks: "此方法将传递`null`为`filter`参数。       属性`instance`参数可以不同于类的属性，因为该位置可以添加或删除属性，如果`instance`放置参数。       `filter`参数可以混合使用<xref:System.Type>和<xref:System.Attribute>对象。</xref:System.Attribute> </xref:System.Type> 筛选由以下规则定义:-<xref:System.Type>对象将被视为通配符; 它匹配具有任何属性<xref:System.Type>属性其集中。</xref:System.Type> </xref:System.Type>      -如果属性不具有<xref:System.Attribute>的同一个类，将不包含属性返回的数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>，该属性必须是完全匹配要包括在返回的数组。</xref:System.Attribute>      -如果你指定<xref:System.Attribute>实例，并且它是默认属性，它将包括在返回的数组即使存在的任何实例<xref:System.Attribute>属性中。</xref:System.Attribute> </xref:System.Attribute>"
  syntax:
    content: public System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance);
    parameters:
    - id: instance
      type: System.Object
      description: "要获取其属性的组件。"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>具有指定组件的属性。"
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  id: GetChildProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetChildProperties(Object,Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Object,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回<xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;></xref>给定对象使用指定的属性数组作为筛选器。"
  remarks: "属性`instance`参数可以不同于类的属性，因为该位置可以添加或删除属性，如果`instance`放置参数。       `filter`参数可以混合使用<xref:System.Type>和<xref:System.Attribute>对象。</xref:System.Attribute> </xref:System.Type> 筛选由以下规则定义:-<xref:System.Type>对象将被视为通配符; 它匹配具有任何属性<xref:System.Type>属性其集中。</xref:System.Type> </xref:System.Type>      -如果属性不具有<xref:System.Attribute>的同一个类，将不包含属性返回的数组中。</xref:System.Attribute>      -如果属性是实例<xref:System.Attribute>，该属性必须是完全匹配要包括在返回的数组。</xref:System.Attribute>      -如果你指定<xref:System.Attribute>实例，并且它是默认属性，它将包括在返回的数组即使存在的任何实例<xref:System.Attribute>属性中。</xref:System.Attribute> </xref:System.Attribute>       通常情况下，通过实现返回子属性<xref:System.ComponentModel.TypeConverter.GetProperties%2A>的成员<xref:System.ComponentModel.TypeConverter>此属性返回。</xref:System.ComponentModel.TypeConverter> </xref:System.ComponentModel.TypeConverter.GetProperties%2A>"
  syntax:
    content: public virtual System.ComponentModel.PropertyDescriptorCollection GetChildProperties (object instance, Attribute[] filter);
    parameters:
    - id: instance
      type: System.Object
      description: "要获取其属性的组件。"
    - id: filter
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>要用作筛选器。</xref:System.Attribute>"
    return:
      type: System.ComponentModel.PropertyDescriptorCollection
      description: "A <xref href=&quot;System.ComponentModel.PropertyDescriptorCollection&quot;> </xref>与相匹配的指定组件的指定的属性的属性。"
  overload: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  id: GetEditor(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetEditor(Type)
  nameWithType: PropertyDescriptor.GetEditor(Type)
  fullName: System.ComponentModel.PropertyDescriptor.GetEditor(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取指定类型的编辑器。"
  syntax:
    content: public virtual object GetEditor (Type editorBaseType);
    parameters:
    - id: editorBaseType
      type: System.Type
      description: "编辑器，用于区分多个属性支持的编辑器基类型。"
    return:
      type: System.Object
      description: "请求的编辑器类型的实例或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到编辑器。"
  overload: System.ComponentModel.PropertyDescriptor.GetEditor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode
  id: GetHashCode
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: PropertyDescriptor.GetHashCode()
  fullName: System.ComponentModel.PropertyDescriptor.GetHashCode()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回此对象的哈希代码。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "此对象的哈希代码。"
  overload: System.ComponentModel.PropertyDescriptor.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  id: GetInvocationTarget(System.Type,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetInvocationTarget(Type,Object)
  nameWithType: PropertyDescriptor.GetInvocationTarget(Type,Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "此方法返回在成员的调用时应使用的对象。"
  remarks: "通常情况下，返回值将是相同`instance`中传递。 如果有人与此实例关联的另一个对象，或该实例是自定义类型描述符，GetInvocationTarget 方法可能返回不同的值。"
  syntax:
    content: protected override object GetInvocationTarget (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>调用目标。</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "可能的调用目标。"
    return:
      type: System.Object
      description: "<xref:System.Object>，应在成员的调用期间使用。</xref:System.Object>"
  overload: System.ComponentModel.PropertyDescriptor.GetInvocationTarget*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  id: GetTypeFromName(System.String)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetTypeFromName(String)
  nameWithType: PropertyDescriptor.GetTypeFromName(String)
  fullName: System.ComponentModel.PropertyDescriptor.GetTypeFromName(String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回使用其名称的类型。"
  remarks: "若要查找的相应类型，此方法首先检查类型的程序集此<xref:System.ComponentModel.PropertyDescriptor>引用。</xref:System.ComponentModel.PropertyDescriptor> 如果它未在程序集中找到的类型，则会调用<xref:System.Type.GetType%2A?displayProperty=fullName>.</xref:System.Type.GetType%2A?displayProperty=fullName>"
  syntax:
    content: protected Type GetTypeFromName (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "要检索的类型的程序集限定名称。"
    return:
      type: System.Type
      description: "A<xref:System.Type>匹配给定的类型名称，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找不到匹配项。</xref:System.Type>"
  overload: System.ComponentModel.PropertyDescriptor.GetTypeFromName*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  id: GetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetValue(Object)
  nameWithType: PropertyDescriptor.GetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，在组件上获取的属性的当前值。"
  remarks: "通常情况下，通过反射实现此方法。       此方法将自动调用更改前方法<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A>，和更改后的方法，<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A>的<xref:System.ComponentModel.Design.IComponentChangeService>。</xref:System.ComponentModel.Design.IComponentChangeService> </xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A> </xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A>"
  syntax:
    content: public abstract object GetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "具有为其检索值的属性的组件。"
    return:
      type: System.Object
      description: "给定的组件属性的值。"
  overload: System.ComponentModel.PropertyDescriptor.GetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  id: GetValueChangedHandler(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: GetValueChangedHandler(Object)
  nameWithType: PropertyDescriptor.GetValueChangedHandler(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "检索当前组的`ValueChanged`特定的组件的事件处理程序"
  syntax:
    content: protected EventHandler GetValueChangedHandler (object component);
    parameters:
    - id: component
      type: System.Object
      description: "为其检索事件处理程序组件。"
    return:
      type: System.EventHandler
      description: "一个组合多路广播的事件处理程序，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有事件处理程序当前分配给<code> component </code>。"
  overload: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable
  id: IsLocalizable
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
  fullName: System.ComponentModel.PropertyDescriptor.IsLocalizable
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取一个值，该值指示是否应本地化此属性，根据中的指定<xref href=&quot;System.ComponentModel.LocalizableAttribute&quot;> </xref>。"
  remarks: "当某一属性标记与<xref:System.ComponentModel.LocalizableAttribute>设置为`true`并在可视化设计器中使用，其值保存在资源文件。</xref:System.ComponentModel.LocalizableAttribute> 如果使用该属性标记某个属性，然后在代码中设置该属性不使用资源文件。"
  syntax:
    content: public virtual bool IsLocalizable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该成员标记有<xref href=&quot;System.ComponentModel.LocalizableAttribute&quot;></xref>设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.PropertyDescriptor.IsLocalizable*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly
  id: IsReadOnly
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
  fullName: System.ComponentModel.PropertyDescriptor.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，获取一个值，该值指示此属性只读的。"
  syntax:
    content: public abstract bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果属性是只读的;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.PropertyDescriptor.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  id: OnValueChanged(System.Object,System.EventArgs)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: OnValueChanged(Object,EventArgs)
  nameWithType: PropertyDescriptor.OnValueChanged(Object,EventArgs)
  fullName: System.ComponentModel.PropertyDescriptor.OnValueChanged(Object,EventArgs)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "引发`ValueChanged`你实现的事件。"
  remarks: "属性值更改时，应由您的属性描述符实现调用此方法。"
  syntax:
    content: protected virtual void OnValueChanged (object component, EventArgs e);
    parameters:
    - id: component
      type: System.Object
      description: "引发事件的对象。"
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.ComponentModel.PropertyDescriptor.OnValueChanged*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.PropertyType
  id: PropertyType
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
  fullName: System.ComponentModel.PropertyDescriptor.PropertyType
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，获取属性的类型。"
  remarks: "通常情况下，通过反射实现此属性。"
  syntax:
    content: public abstract Type PropertyType { get; }
    return:
      type: System.Type
      description: "A <xref:System.Type>，它表示属性的类型。</xref:System.Type>"
  overload: System.ComponentModel.PropertyDescriptor.PropertyType*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  id: RemoveValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: RemoveValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "支持此属性更改时通知其他对象。"
  syntax:
    content: public virtual void RemoveValueChanged (object component, EventHandler handler);
    parameters:
    - id: component
      type: System.Object
      description: "要删除的处理程序的组件。"
    - id: handler
      type: System.EventHandler
      description: "要删除作为侦听器的委托。"
  overload: System.ComponentModel.PropertyDescriptor.RemoveValueChanged*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  id: ResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ResetValue(Object)
  nameWithType: PropertyDescriptor.ResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ResetValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，将组件的此属性的值重置为默认值。"
  remarks: "通常情况下，通过反射实现此方法。       此方法可确定要重置到以下优先顺序中的属性的值︰ 1。  没有为此属性被隐藏的属性。      2.  没有<xref:System.ComponentModel.DefaultValueAttribute>此属性。</xref:System.ComponentModel.DefaultValueAttribute>      3.  没有已实现，其中&quot;MyProperty&quot;是传递给它的属性名称&quot;找不&quot;方法。       此方法创建<xref:System.ComponentModel.Design.DesignerTransaction>自动按以下顺序︰ 1。</xref:System.ComponentModel.Design.DesignerTransaction>  方法调用<xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>方法来创建一个新<xref:System.ComponentModel.Design.DesignerTransaction>来表示所做的更改。</xref:System.ComponentModel.Design.DesignerTransaction> </xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>      2.  方法调用<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>方法，以指示在事务开始和即将发生的更改。</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>      3.  该方法将属性重置为此方法检查顺序确定的值。      4.  方法调用<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>方法，以指示已发生更改。</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>      5.  方法调用<xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>以指示事务完成。</xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>       该事务的用途是支持`Undo`和`Redo`功能。"
  syntax:
    content: public abstract void ResetValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "具有要重置为默认值的属性值的组件。"
  overload: System.ComponentModel.PropertyDescriptor.ResetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  id: SerializationVisibility
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
  fullName: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取一个值，该值指示是否应序列化此属性，根据中的指定<xref href=&quot;System.ComponentModel.DesignerSerializationVisibilityAttribute&quot;> </xref>。"
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "之一<xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;></xref>指定是否应序列化此属性的枚举值。"
  overload: System.ComponentModel.PropertyDescriptor.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  id: SetValue(System.Object,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SetValue(Object,Object)
  nameWithType: PropertyDescriptor.SetValue(Object,Object)
  fullName: System.ComponentModel.PropertyDescriptor.SetValue(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，为不同的值设置个分量的值。"
  remarks: "通常情况下，通过反射实现此方法。       此方法创建<xref:System.ComponentModel.Design.DesignerTransaction>自动按以下顺序︰ 1。</xref:System.ComponentModel.Design.DesignerTransaction>  方法调用<xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>方法来创建一个新<xref:System.ComponentModel.Design.DesignerTransaction>来表示所做的更改。</xref:System.ComponentModel.Design.DesignerTransaction> </xref:System.ComponentModel.Design.IDesignerHost.CreateTransaction%2A?displayProperty=fullName>      2.  方法调用<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>方法，以指示在事务开始和即将发生的更改。</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanging%2A?displayProperty=fullName>      3.  该方法将属性重置为此方法检查顺序确定的值。      4.  方法调用<xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>方法，以指示已发生更改。</xref:System.ComponentModel.Design.IComponentChangeService.OnComponentChanged%2A?displayProperty=fullName>      5.  方法调用<xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>来指示事务已完成。</xref:System.ComponentModel.Design.DesignerTransaction.Commit%2A?displayProperty=fullName>       该事务的用途是支持`Undo`和`Redo`功能。"
  syntax:
    content: public abstract void SetValue (object component, object value);
    parameters:
    - id: component
      type: System.Object
      description: "具有要设置的属性值的组件。"
    - id: value
      type: System.Object
      description: "新值。"
  overload: System.ComponentModel.PropertyDescriptor.SetValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  id: ShouldSerializeValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: ShouldSerializeValue(Object)
  nameWithType: PropertyDescriptor.ShouldSerializeValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "当在派生类中重写，确定一个值，该值指示是否需要持久保留此属性的值。"
  remarks: "通常情况下，通过反射实现此方法。"
  syntax:
    content: public abstract bool ShouldSerializeValue (object component);
    parameters:
    - id: component
      type: System.Object
      description: "具有要检查其持久性的属性的组件。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果应保持属性;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  id: SupportsChangeEvents
  parent: System.ComponentModel.PropertyDescriptor
  langs:
  - csharp
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
  fullName: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取一个值，该值指示是否为此属性的值更改通知可能来自以外的属性描述符。"
  remarks: "SupportsChangeEvents 属性指示是否为此属性的值更改通知可能来自以外的属性描述符，如从组件本身，或是否通知将仅由的直接调用对<xref:System.ComponentModel.PropertyDescriptor.SetValue%2A>方法。</xref:System.ComponentModel.PropertyDescriptor.SetValue%2A> 例如，实现该组件可能<xref:System.ComponentModel.INotifyPropertyChanged>接口，或可能具有显式`name``Changed`此属性的事件。</xref:System.ComponentModel.INotifyPropertyChanged>"
  syntax:
    content: public virtual bool SupportsChangeEvents { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值更改通知可能来自以外的属性描述符;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.MemberDescriptor
  isExternal: false
  name: System.ComponentModel.MemberDescriptor
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(MemberDescriptor)
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor)
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.ComponentModel.MemberDescriptor,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(MemberDescriptor,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(MemberDescriptor,Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.PropertyDescriptor.#ctor(System.String,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor(String,Attribute[])
  nameWithType: PropertyDescriptor.PropertyDescriptor(String,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.PropertyDescriptor(String,Attribute[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: AddValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.AddValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.AddValueChanged(Object,EventHandler)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CanResetValue(Object)
  nameWithType: PropertyDescriptor.CanResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.CanResetValue(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.PropertyDescriptor.ComponentType
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
  fullName: System.ComponentModel.PropertyDescriptor.ComponentType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.PropertyDescriptor.Converter
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Converter
  nameWithType: PropertyDescriptor.Converter
  fullName: System.ComponentModel.PropertyDescriptor.Converter
- uid: System.ComponentModel.TypeConverter
  parent: System.ComponentModel
  isExternal: false
  name: TypeConverter
  nameWithType: TypeConverter
  fullName: System.ComponentModel.TypeConverter
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CreateInstance(Type)
  nameWithType: PropertyDescriptor.CreateInstance(Type)
  fullName: System.ComponentModel.PropertyDescriptor.CreateInstance(Type)
- uid: System.ComponentModel.PropertyDescriptor.Equals(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Equals(Object)
  nameWithType: PropertyDescriptor.Equals(Object)
  fullName: System.ComponentModel.PropertyDescriptor.Equals(Object)
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes(System.Collections.IList)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: FillAttributes(IList)
  nameWithType: PropertyDescriptor.FillAttributes(IList)
  fullName: System.ComponentModel.PropertyDescriptor.FillAttributes(IList)
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties()
  nameWithType: PropertyDescriptor.GetChildProperties()
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties()
- uid: System.ComponentModel.PropertyDescriptorCollection
  parent: System.ComponentModel
  isExternal: false
  name: PropertyDescriptorCollection
  nameWithType: PropertyDescriptorCollection
  fullName: System.ComponentModel.PropertyDescriptorCollection
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Attribute[])
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Object)
  nameWithType: PropertyDescriptor.GetChildProperties(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object)
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties(System.Object,System.Attribute[])
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties(Object,Attribute[])
  nameWithType: PropertyDescriptor.GetChildProperties(Object,Attribute[])
  fullName: System.ComponentModel.PropertyDescriptor.GetChildProperties(Object,Attribute[])
- uid: System.ComponentModel.PropertyDescriptor.GetEditor(System.Type)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetEditor(Type)
  nameWithType: PropertyDescriptor.GetEditor(Type)
  fullName: System.ComponentModel.PropertyDescriptor.GetEditor(Type)
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetHashCode()
  nameWithType: PropertyDescriptor.GetHashCode()
  fullName: System.ComponentModel.PropertyDescriptor.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(System.Type,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetInvocationTarget(Type,Object)
  nameWithType: PropertyDescriptor.GetInvocationTarget(Type,Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetInvocationTarget(Type,Object)
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName(System.String)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetTypeFromName(String)
  nameWithType: PropertyDescriptor.GetTypeFromName(String)
  fullName: System.ComponentModel.PropertyDescriptor.GetTypeFromName(String)
- uid: System.ComponentModel.PropertyDescriptor.GetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValue(Object)
  nameWithType: PropertyDescriptor.GetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValueChangedHandler(Object)
  nameWithType: PropertyDescriptor.GetValueChangedHandler(Object)
  fullName: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler(Object)
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
  fullName: System.ComponentModel.PropertyDescriptor.IsLocalizable
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
  fullName: System.ComponentModel.PropertyDescriptor.IsReadOnly
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged(System.Object,System.EventArgs)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: OnValueChanged(Object,EventArgs)
  nameWithType: PropertyDescriptor.OnValueChanged(Object,EventArgs)
  fullName: System.ComponentModel.PropertyDescriptor.OnValueChanged(Object,EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.ComponentModel.PropertyDescriptor.PropertyType
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
  fullName: System.ComponentModel.PropertyDescriptor.PropertyType
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(System.Object,System.EventHandler)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: RemoveValueChanged(Object,EventHandler)
  nameWithType: PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
  fullName: System.ComponentModel.PropertyDescriptor.RemoveValueChanged(Object,EventHandler)
- uid: System.ComponentModel.PropertyDescriptor.ResetValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ResetValue(Object)
  nameWithType: PropertyDescriptor.ResetValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ResetValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
  fullName: System.ComponentModel.PropertyDescriptor.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.ComponentModel.PropertyDescriptor.SetValue(System.Object,System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SetValue(Object,Object)
  nameWithType: PropertyDescriptor.SetValue(Object,Object)
  fullName: System.ComponentModel.PropertyDescriptor.SetValue(Object,Object)
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(System.Object)
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ShouldSerializeValue(Object)
  nameWithType: PropertyDescriptor.ShouldSerializeValue(Object)
  fullName: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue(Object)
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
  fullName: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents
- uid: System.ComponentModel.PropertyDescriptor.#ctor*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyDescriptor
  nameWithType: PropertyDescriptor.PropertyDescriptor
- uid: System.ComponentModel.PropertyDescriptor.AddValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: AddValueChanged
  nameWithType: PropertyDescriptor.AddValueChanged
- uid: System.ComponentModel.PropertyDescriptor.CanResetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CanResetValue
  nameWithType: PropertyDescriptor.CanResetValue
- uid: System.ComponentModel.PropertyDescriptor.ComponentType*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ComponentType
  nameWithType: PropertyDescriptor.ComponentType
- uid: System.ComponentModel.PropertyDescriptor.Converter*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Converter
  nameWithType: PropertyDescriptor.Converter
- uid: System.ComponentModel.PropertyDescriptor.CreateInstance*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: CreateInstance
  nameWithType: PropertyDescriptor.CreateInstance
- uid: System.ComponentModel.PropertyDescriptor.Equals*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: Equals
  nameWithType: PropertyDescriptor.Equals
- uid: System.ComponentModel.PropertyDescriptor.FillAttributes*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: FillAttributes
  nameWithType: PropertyDescriptor.FillAttributes
- uid: System.ComponentModel.PropertyDescriptor.GetChildProperties*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetChildProperties
  nameWithType: PropertyDescriptor.GetChildProperties
- uid: System.ComponentModel.PropertyDescriptor.GetEditor*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetEditor
  nameWithType: PropertyDescriptor.GetEditor
- uid: System.ComponentModel.PropertyDescriptor.GetHashCode*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetHashCode
  nameWithType: PropertyDescriptor.GetHashCode
- uid: System.ComponentModel.PropertyDescriptor.GetInvocationTarget*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetInvocationTarget
  nameWithType: PropertyDescriptor.GetInvocationTarget
- uid: System.ComponentModel.PropertyDescriptor.GetTypeFromName*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetTypeFromName
  nameWithType: PropertyDescriptor.GetTypeFromName
- uid: System.ComponentModel.PropertyDescriptor.GetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValue
  nameWithType: PropertyDescriptor.GetValue
- uid: System.ComponentModel.PropertyDescriptor.GetValueChangedHandler*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: GetValueChangedHandler
  nameWithType: PropertyDescriptor.GetValueChangedHandler
- uid: System.ComponentModel.PropertyDescriptor.IsLocalizable*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsLocalizable
  nameWithType: PropertyDescriptor.IsLocalizable
- uid: System.ComponentModel.PropertyDescriptor.IsReadOnly*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: IsReadOnly
  nameWithType: PropertyDescriptor.IsReadOnly
- uid: System.ComponentModel.PropertyDescriptor.OnValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: OnValueChanged
  nameWithType: PropertyDescriptor.OnValueChanged
- uid: System.ComponentModel.PropertyDescriptor.PropertyType*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: PropertyType
  nameWithType: PropertyDescriptor.PropertyType
- uid: System.ComponentModel.PropertyDescriptor.RemoveValueChanged*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: RemoveValueChanged
  nameWithType: PropertyDescriptor.RemoveValueChanged
- uid: System.ComponentModel.PropertyDescriptor.ResetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ResetValue
  nameWithType: PropertyDescriptor.ResetValue
- uid: System.ComponentModel.PropertyDescriptor.SerializationVisibility*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SerializationVisibility
  nameWithType: PropertyDescriptor.SerializationVisibility
- uid: System.ComponentModel.PropertyDescriptor.SetValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SetValue
  nameWithType: PropertyDescriptor.SetValue
- uid: System.ComponentModel.PropertyDescriptor.ShouldSerializeValue*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: ShouldSerializeValue
  nameWithType: PropertyDescriptor.ShouldSerializeValue
- uid: System.ComponentModel.PropertyDescriptor.SupportsChangeEvents*
  parent: System.ComponentModel.PropertyDescriptor
  isExternal: false
  name: SupportsChangeEvents
  nameWithType: PropertyDescriptor.SupportsChangeEvents
