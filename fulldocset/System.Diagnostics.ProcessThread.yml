### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.ProcessThread
  id: ProcessThread
  children:
  - System.Diagnostics.ProcessThread.BasePriority
  - System.Diagnostics.ProcessThread.CurrentPriority
  - System.Diagnostics.ProcessThread.Id
  - System.Diagnostics.ProcessThread.IdealProcessor
  - System.Diagnostics.ProcessThread.PriorityBoostEnabled
  - System.Diagnostics.ProcessThread.PriorityLevel
  - System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  - System.Diagnostics.ProcessThread.ProcessorAffinity
  - System.Diagnostics.ProcessThread.ResetIdealProcessor
  - System.Diagnostics.ProcessThread.StartAddress
  - System.Diagnostics.ProcessThread.StartTime
  - System.Diagnostics.ProcessThread.ThreadState
  - System.Diagnostics.ProcessThread.TotalProcessorTime
  - System.Diagnostics.ProcessThread.UserProcessorTime
  - System.Diagnostics.ProcessThread.WaitReason
  langs:
  - csharp
  name: ProcessThread
  nameWithType: ProcessThread
  fullName: System.Diagnostics.ProcessThread
  type: Class
  summary: "表示操作系统进程线程。"
  remarks: "使用 ProcessThread 来获取有关当前系统运行的线程的信息。 这样可以，例如，若要监视的线程的性能特征。      1> [!IMPORTANT]&1;> 此类型实现<xref:System.IDisposable>接口。</xref:System.IDisposable> 完成后使用类型的操作后，你应释放类型直接或间接。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</xref:System.IDisposable.Dispose%2A> 若要间接释放类型，使用一种语言构造如`using`（在 C# 中) 或`Using`（在 Visual Basic 中)。 有关详细信息，请参阅中的&quot;使用实现 IDisposable 的对象&quot;部分<xref:System.IDisposable>接口主题。</xref:System.IDisposable>       线程是执行通过计划的路径。 它是 Win32 安排执行的最小单位。 它包含的堆栈的状态以及 CPU 寄存器中，系统计划程序执行列表中的条目。       过程包括一个或多个线程和代码、 数据和在内存中程序的其他资源。 典型的程序资源是打开的文件、 信号灯和动态分配的内存。 进程的每个资源被共享由所有进程的线程。       在系统计划程序将执行控制权交给程序的线程之一时，将执行程序。 计划程序确定应当运行哪些线程和时间。 优先级较低的线程可能会强制等待较高优先级的线程完成其任务。 多处理器计算机上计划程序可以将单个线程移到不同的处理器，从而平衡 CPU 负载。       每个进程启动与单个线程，这被称为主线程。 任何线程可以创建其他线程。 在一个进程内的所有线程都共享该进程的地址空间。       主线程不一定位于集合中的第一个索引。      1> [!NOTE] 1> 从.NET Framework 2.0 版中，在其他计算机上的数据已消除多个.NET Framework 方法和属性的引用性能计数器的功能。 此更改是为了提高性能，以及使非管理员能够使用 ProcessThread 类。 因此，某些应用程序没有在.NET framework 的早期版本中获得异常现在可能会收到一种<xref:System.NotSupportedException>。</xref:System.NotSupportedException> 方法和属性影响太多，无法在此，列出，但异常信息已添加到受影响的成员主题。       进程的线程单独执行，并会相互意识到，除非您使它们相互可见。 线程共享公共资源，但是，必须使用信号量或另一种方法的进程间通信协调其工作。       若要获取与当前进程关联的所有 ProcessThread 对象的集合，获取<xref:System.Diagnostics.Process.Threads%2A>属性<xref:System.Diagnostics.Process>实例。</xref:System.Diagnostics.Process> </xref:System.Diagnostics.Process.Threads%2A>"
  syntax:
    content: >-
      [System.ComponentModel.Designer("System.Diagnostics.Design.ProcessThreadDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public class ProcessThread : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.BasePriority
  id: BasePriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取线程的基本优先级。"
  remarks: "BasePriority 是进程线程的起始优先级。 你可以查看通过系统监视器的优先级基数计数器的基本优先级有关的信息。       操作系统通过结合进程的优先级类的线程的优先级级别范围计算线程的基本优先级。 你可以设置进程的<xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=fullName>属性设成一个中的值<xref:System.Diagnostics.ProcessPriorityClass>枚举，它们是<xref:System.Diagnostics.ProcessPriorityClass>， <xref:System.Diagnostics.ProcessPriorityClass>， <xref:System.Diagnostics.ProcessPriorityClass>， <xref:System.Diagnostics.ProcessPriorityClass>， <xref:System.Diagnostics.ProcessPriorityClass>，或<xref:System.Diagnostics.ProcessPriorityClass>。</xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.Process.PriorityClass%2A?displayProperty=fullName> 你可以设置线程的<xref:System.Diagnostics.ProcessThread.PriorityLevel%2A>限定线程的基本优先级的值范围的属性。</xref:System.Diagnostics.ProcessThread.PriorityLevel%2A> Win32 了七个基本优先级级别，每个类使用四个优先级类。       当前线程的优先级可能偏离的基本优先级。 例如，可以更改操作系统<xref:System.Diagnostics.ProcessThread.CurrentPriority%2A>基于时间的属性已用或其他提升时进程而必须早其他人访问的处理器。</xref:System.Diagnostics.ProcessThread.CurrentPriority%2A> 此外，你可以设置<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>属性以使系统暂时提升的线程的优先级，每当进程离开等待状态。</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 当过程返回到等待状态时，将重置优先级。"
  syntax:
    content: public int BasePriority { get; }
    return:
      type: System.Int32
      description: "线程，操作系统计算通过将进程优先级类与相关联的线程的优先级相结合的基本优先级。"
  overload: System.Diagnostics.ProcessThread.BasePriority*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  id: CurrentPriority
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取当前线程的优先级。"
  remarks: "当前线程的优先级可能偏离的基本优先级。 例如，操作系统可以更改基于时间的属性已用，CurrentPriority 或其他提升进程而必须早其他人进行访问的处理器时。 此外，你可以设置<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>属性以使系统暂时提升的线程的优先级，每当进程离开等待状态。</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A> 当过程返回到等待状态时，将重置优先级。"
  syntax:
    content: public int CurrentPriority { get; }
    return:
      type: System.Int32
      description: "当前线程，而偏离基于操作系统如何安排该线程的基本优先级的优先级。 可能为活动线程暂时提升优先级。"
  overload: System.Diagnostics.ProcessThread.CurrentPriority*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.Id
  id: Id
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: Id
  nameWithType: ProcessThread.Id
  fullName: System.Diagnostics.ProcessThread.Id
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取线程的唯一标识符。"
  remarks: "操作系统重用仅在其生存期期间识别线程的线程标识数字。"
  syntax:
    content: public int Id { get; }
    return:
      type: System.Int32
      description: "与特定线程关联的唯一标识符。"
  overload: System.Diagnostics.ProcessThread.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  id: IdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "设置为此线程上运行的首选的处理器。"
  remarks: "IdealProcessor 值是从零开始。  换而言之，如果要设置第一个处理器的线程关联，请设置为零的属性。       在系统安排尽可能其首选处理器上的线程。       进程线程可以迁移到处理器重新加载处理器缓存每个迁移。 指定线程的处理器可以减少处理器缓存都会重新加载次数，从而提高在高系统负荷下的性能。"
  example:
  - "The following example demonstrates how to set the IdealProcessor property for an instance of Notepad to the first processor.  \n  \n [!code-vb[ProcessThreadIdealProcessor#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_25_1.vb)]\n [!code-cs[ProcessThreadIdealProcessor#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_25_1.cs)]"
  syntax:
    content: public int IdealProcessor { set; }
    return:
      type: System.Int32
      description: "使用时在系统安排线程，以确定在哪个处理器上运行的线程的线程首选的处理器。"
  overload: System.Diagnostics.ProcessThread.IdealProcessor*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "系统无法设置要启动指定的处理器上的线程。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  id: PriorityBoostEnabled
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取或设置一个值，该值指示线程的进程的主窗口获得焦点时是否操作系统应暂时提升关联的线程的优先级。"
  remarks: "PriorityBoostEnabled 时`true`，只要其关联的进程离开等待状态系统便暂时提升的线程的优先级。 此操作可防止其他进程中断当前线程的处理。 PriorityBoostEnabled 设置会影响所有现有的线程以及进程随后创建的任何线程。 若要还原正常的行为，请设置<xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>属性`false`。</xref:System.Diagnostics.Process.PriorityBoostEnabled%2A>       PriorityBoostEnabled 起作用，仅在拥有的进程中运行时线程<xref:System.Diagnostics.Process.PriorityClass%2A>设置为动态优先级枚举值之一 (<xref:System.Diagnostics.ProcessPriorityClass>， <xref:System.Diagnostics.ProcessPriorityClass>，或<xref:System.Diagnostics.ProcessPriorityClass>)。</xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.ProcessPriorityClass> </xref:System.Diagnostics.Process.PriorityClass%2A>      1> [!NOTE]&1;> 提升过高的优先级会耗尽基本操作系统和网络功能的资源。 这会导致与其他操作系统任务的问题。"
  syntax:
    content: public bool PriorityBoostEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要在用户交互与该进程时提升的线程的优先级的接口;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Diagnostics.ProcessThread.PriorityBoostEnabled*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法检索优先级提升信息。       -或者-无法设置优先级提升信息。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  id: PriorityLevel
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取或设置线程的优先级。"
  remarks: "优先级别不是单个值，而不是一系列的值。 操作系统通过使用进程的计算线程的基本优先级<xref:System.Diagnostics.Process.PriorityClass%2A>从 PriorityLevel 属性中指定的范围中选择一个值。</xref:System.Diagnostics.Process.PriorityClass%2A>"
  syntax:
    content: public System.Diagnostics.ThreadPriorityLevel PriorityLevel { get; set; }
    return:
      type: System.Diagnostics.ThreadPriorityLevel
      description: "之一<xref href=&quot;System.Diagnostics.ThreadPriorityLevel&quot;></xref>值，指定范围限制线程的优先级。"
  overload: System.Diagnostics.ProcessThread.PriorityLevel*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法检索的线程优先级级别的信息。       -或者-无法设置的线程优先级别。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  id: PrivilegedProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取线程在操作系统内核中的运行代码所用的时间量。"
  remarks: "Windows 使用几种不同的保护机制，以及在所有这些根用户模式和特权模式下之间的区别。 PrivilegedProcessorTime 对应于应用程序已在特权模式下，在操作系统内核中运行所用的时间量。 <xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>属性指示应用程序在用户模式下，外部系统核心的运行代码所用的时间量。</xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>       用户模式下将应用程序限制在两个重要方面。 首先，应用程序不能直接访问外围设备，但必须改为调用操作系统内核中要获取或设置外围设备的数据。 因此，操作系统可以确保一个应用程序不会销毁外围由另一个所需的数据。 其次，应用程序无法读取或更改操作系统本身维护的数据。 此限制可以防止有意或无意中损坏的核心应用程序。 如果应用程序需要操作系统执行操作，将调用一个系统的例程。 许多这些转换到特权模式下，执行该操作，并平稳地返回到用户模式。"
  syntax:
    content: public TimeSpan PrivilegedProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>，该值指示该线程是在操作系统内核中的运行代码所用的时间量。</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.PrivilegedProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法检索的线程时间。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  id: ProcessorAffinity
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "设置可以在其运行相关联的线程的处理器。"
  remarks: "线程的处理器关联是它有一种关系的处理器组。 换而言之，可以安排这些 it 上运行。       ProcessorAffinity 位表示每个处理器。 位 0 表示一个处理器，位 1 表示处理器二，依次类推。 下表显示四个处理器系统可能 ProcessorAffinity 的子集。      |属性值 （以十六进制格式） |有效处理器 |  |---------------------------------------|----------------------|  | 从 0x0001 | 1 |  | 0x0002 | 2 |  | 0x0003 | 1 或 2 |  | 0x0004 | 3 |  | 0x0005 | 1 或 3 |  | 0x0007 | 1、 2 或 3 |  | 0x000F | 1、 2、 3 或 4 |      此外可以通过设置指定单个线程首选处理器<xref:System.Diagnostics.ProcessThread.IdealProcessor%2A>属性。</xref:System.Diagnostics.ProcessThread.IdealProcessor%2A> 进程线程可以迁移到处理器重新加载处理器缓存每个迁移。 指定线程的处理器可以减少处理器缓存都会重新加载次数，从而提高在高系统负荷下的性能。"
  example:
  - "The following example shows how to set the ProcessorAffinity property for an instance of Notepad to the first processor.  \n  \n [!code-vb[ProcessThreadIdealProcessor#1](~/add/codesnippet/visualbasic/p-system.diagnostics.pro_22_1.vb)]\n [!code-cs[ProcessThreadIdealProcessor#1](~/add/codesnippet/csharp/p-system.diagnostics.pro_22_1.cs)]"
  syntax:
    content: public IntPtr ProcessorAffinity { set; }
    return:
      type: System.IntPtr
      description: "<xref:System.IntPtr>指向一组位，其中每个表示线程可以在运行的处理器。</xref:System.IntPtr>"
  overload: System.Diagnostics.ProcessThread.ProcessorAffinity*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法设置处理器关联。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  id: ResetIdealProcessor
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ResetIdealProcessor()
  nameWithType: ProcessThread.ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "重置为此线程以指示有任何单个的理想处理器理想的处理器。 换而言之，以便任何处理器是理想之选。"
  syntax:
    content: public void ResetIdealProcessor ();
    parameters: []
  overload: System.Diagnostics.ProcessThread.ResetIdealProcessor*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法重置理想的处理器。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.StartAddress
  id: StartAddress
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取操作系统调用启动此线程的函数的内存地址。"
  remarks: "每个进程启动与单个线程，这被称为主线程。 任何线程可以创建其他线程。       进程有虚拟地址空间，可执行代码、 数据、 对象句柄、 环境变量、 基本优先级，并最小值和最大工作集大小。 进程的所有线程都共享其虚拟地址空间和系统资源。 此外，每个线程都维持异常处理程序、 计划的优先级别和一组结构时线程正在等待安排系统保存的线程上下文。 线程上下文在线程的进程的地址空间中包括计算机寄存器、 内核堆栈、 线程环境块和一个用户堆栈的线程的组。       每个 Windows 线程操作实际开始执行的系统提供的函数，不应用程序提供的函数中。 主线程的起始地址，因此，对于均相同 （因为它表示系统提供的函数的地址） 系统中的每个 Windows 进程。 但是，StartAddress 属性，可获取特定于你的应用程序的起始函数地址。"
  syntax:
    content: public IntPtr StartAddress { get; }
    return:
      type: System.IntPtr
      description: "线程的起始地址，用于指向线程执行的应用程序定义的函数。"
  overload: System.Diagnostics.ProcessThread.StartAddress*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.StartTime
  id: StartTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: StartTime
  nameWithType: ProcessThread.StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取操作系统启动线程的时间。"
  syntax:
    content: public DateTime StartTime { get; }
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>表示系统启动的操作系统线程时的时间。</xref:System.DateTime>"
  overload: System.Diagnostics.ProcessThread.StartTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法检索的线程时间。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.ThreadState
  id: ThreadState
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取此线程的当前状态。"
  remarks: "<xref:System.Diagnostics.ProcessThread.WaitReason%2A>属性值是仅当线程值为<xref:System.Diagnostics.ThreadState>.</xref:System.Diagnostics.ThreadState>时有效</xref:System.Diagnostics.ProcessThread.WaitReason%2A> 因此，应在到达之前检查线程值<xref:System.Diagnostics.ProcessThread.WaitReason%2A>属性。</xref:System.Diagnostics.ProcessThread.WaitReason%2A>"
  syntax:
    content: public System.Diagnostics.ThreadState ThreadState { get; }
    return:
      type: System.Diagnostics.ThreadState
      description: "A <xref href=&quot;System.Diagnostics.ThreadState&quot;> </xref> ，该值指示线程的执行，例如，正在运行、 正在等待或终止。"
  overload: System.Diagnostics.ProcessThread.ThreadState*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  id: TotalProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取此线程已用使用处理器时间的总量。"
  remarks: "TotalProcessorTime 属性指示的总时间量，系统已离开等待状态的线程，并且在任何处理器上分配它的优先级。 在多个处理器系统中，此值将包括在每个处理器上，所花费的时间，如果使用多个处理器的线程。       TotalProcessorTime 属性是的总和<xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>和<xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>属性。</xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A> </xref:System.Diagnostics.ProcessThread.UserProcessorTime%2A>"
  syntax:
    content: public TimeSpan TotalProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>，该值指示线程的已控制处理器时间量。</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.TotalProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法检索的线程时间。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  id: UserProcessorTime
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取相关联的线程对应用程序中的运行代码所用的时间量。"
  remarks: "Windows NT 使用几种不同的保护机制，以及在所有这些根用户模式和特权模式下之间的区别。 UserProcessorTime 对应于应用程序已在用户模式下，外部操作系统内核中运行所用的时间量。 <xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>对应于应用程序已在特权模式下，系统内核中运行代码花费的时间量。</xref:System.Diagnostics.ProcessThread.PrivilegedProcessorTime%2A>       用户模式下将应用程序限制在两个重要方面。 首先，应用程序不能直接访问外围设备，但必须改为调用操作系统内核中要获取或设置外围设备的数据。 因此，操作系统可以确保一个应用程序不会销毁外围由另一个所需的数据。 其次，应用程序无法读取或更改操作系统本身维护的数据。 此限制可以防止有意或无意中损坏的核心应用程序。 如果应用程序需要操作系统执行操作，将调用一个系统的例程。 许多这些转换到特权模式下，执行该操作，并平稳地返回到用户模式。"
  syntax:
    content: public TimeSpan UserProcessorTime { get; }
    return:
      type: System.TimeSpan
      description: "A <xref:System.TimeSpan>，该值指示线程对应用程序中的运行代码所用的时间量，而不是在操作系统内核中。</xref:System.TimeSpan>"
  overload: System.Diagnostics.ProcessThread.UserProcessorTime*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "无法检索的线程时间。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
- uid: System.Diagnostics.ProcessThread.WaitReason
  id: WaitReason
  parent: System.Diagnostics.ProcessThread
  langs:
  - csharp
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取线程正在等待的原因。"
  remarks: "WaitReason 属性是仅当<xref:System.Diagnostics.ProcessThread.ThreadState%2A>为<xref:System.Diagnostics.ThreadState>。</xref:System.Diagnostics.ThreadState> </xref:System.Diagnostics.ProcessThread.ThreadState%2A> 因此，应检查<xref:System.Diagnostics.ProcessThread.ThreadState%2A>值之前获取 WaitReason 属性。</xref:System.Diagnostics.ProcessThread.ThreadState%2A>"
  syntax:
    content: public System.Diagnostics.ThreadWaitReason WaitReason { get; }
    return:
      type: System.Diagnostics.ThreadWaitReason
      description: "A <xref href=&quot;System.Diagnostics.ThreadWaitReason&quot;> </xref>表示线程处于等待状态的原因。"
  overload: System.Diagnostics.ProcessThread.WaitReason*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "线程处于等待状态。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该平台是 Windows 98 或 Windows Millennium Edition。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "过程是远程计算机上。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Diagnostics.ProcessThread.BasePriority
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
  fullName: System.Diagnostics.ProcessThread.BasePriority
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.ProcessThread.CurrentPriority
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
  fullName: System.Diagnostics.ProcessThread.CurrentPriority
- uid: System.Diagnostics.ProcessThread.Id
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: Id
  nameWithType: ProcessThread.Id
  fullName: System.Diagnostics.ProcessThread.Id
- uid: System.Diagnostics.ProcessThread.IdealProcessor
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
  fullName: System.Diagnostics.ProcessThread.IdealProcessor
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
  fullName: System.Diagnostics.ProcessThread.PriorityBoostEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.ProcessThread.PriorityLevel
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
  fullName: System.Diagnostics.ProcessThread.PriorityLevel
- uid: System.Diagnostics.ThreadPriorityLevel
  parent: System.Diagnostics
  isExternal: false
  name: ThreadPriorityLevel
  nameWithType: ThreadPriorityLevel
  fullName: System.Diagnostics.ThreadPriorityLevel
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
  fullName: System.Diagnostics.ProcessThread.PrivilegedProcessorTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
  fullName: System.Diagnostics.ProcessThread.ProcessorAffinity
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ResetIdealProcessor()
  nameWithType: ProcessThread.ResetIdealProcessor()
  fullName: System.Diagnostics.ProcessThread.ResetIdealProcessor()
- uid: System.Diagnostics.ProcessThread.StartAddress
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
  fullName: System.Diagnostics.ProcessThread.StartAddress
- uid: System.Diagnostics.ProcessThread.StartTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartTime
  nameWithType: ProcessThread.StartTime
  fullName: System.Diagnostics.ProcessThread.StartTime
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Diagnostics.ProcessThread.ThreadState
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
  fullName: System.Diagnostics.ProcessThread.ThreadState
- uid: System.Diagnostics.ThreadState
  parent: System.Diagnostics
  isExternal: false
  name: ThreadState
  nameWithType: ThreadState
  fullName: System.Diagnostics.ThreadState
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
  fullName: System.Diagnostics.ProcessThread.TotalProcessorTime
- uid: System.Diagnostics.ProcessThread.UserProcessorTime
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
  fullName: System.Diagnostics.ProcessThread.UserProcessorTime
- uid: System.Diagnostics.ProcessThread.WaitReason
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
  fullName: System.Diagnostics.ProcessThread.WaitReason
- uid: System.Diagnostics.ThreadWaitReason
  parent: System.Diagnostics
  isExternal: false
  name: ThreadWaitReason
  nameWithType: ThreadWaitReason
  fullName: System.Diagnostics.ThreadWaitReason
- uid: System.Diagnostics.ProcessThread.BasePriority*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: BasePriority
  nameWithType: ProcessThread.BasePriority
- uid: System.Diagnostics.ProcessThread.CurrentPriority*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: CurrentPriority
  nameWithType: ProcessThread.CurrentPriority
- uid: System.Diagnostics.ProcessThread.Id*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: Id
  nameWithType: ProcessThread.Id
- uid: System.Diagnostics.ProcessThread.IdealProcessor*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: IdealProcessor
  nameWithType: ProcessThread.IdealProcessor
- uid: System.Diagnostics.ProcessThread.PriorityBoostEnabled*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityBoostEnabled
  nameWithType: ProcessThread.PriorityBoostEnabled
- uid: System.Diagnostics.ProcessThread.PriorityLevel*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PriorityLevel
  nameWithType: ProcessThread.PriorityLevel
- uid: System.Diagnostics.ProcessThread.PrivilegedProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: PrivilegedProcessorTime
  nameWithType: ProcessThread.PrivilegedProcessorTime
- uid: System.Diagnostics.ProcessThread.ProcessorAffinity*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ProcessorAffinity
  nameWithType: ProcessThread.ProcessorAffinity
- uid: System.Diagnostics.ProcessThread.ResetIdealProcessor*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ResetIdealProcessor
  nameWithType: ProcessThread.ResetIdealProcessor
- uid: System.Diagnostics.ProcessThread.StartAddress*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartAddress
  nameWithType: ProcessThread.StartAddress
- uid: System.Diagnostics.ProcessThread.StartTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: StartTime
  nameWithType: ProcessThread.StartTime
- uid: System.Diagnostics.ProcessThread.ThreadState*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: ThreadState
  nameWithType: ProcessThread.ThreadState
- uid: System.Diagnostics.ProcessThread.TotalProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: TotalProcessorTime
  nameWithType: ProcessThread.TotalProcessorTime
- uid: System.Diagnostics.ProcessThread.UserProcessorTime*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: UserProcessorTime
  nameWithType: ProcessThread.UserProcessorTime
- uid: System.Diagnostics.ProcessThread.WaitReason*
  parent: System.Diagnostics.ProcessThread
  isExternal: false
  name: WaitReason
  nameWithType: ProcessThread.WaitReason
