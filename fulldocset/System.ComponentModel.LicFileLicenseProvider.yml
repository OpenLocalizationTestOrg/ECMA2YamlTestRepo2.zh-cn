### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicFileLicenseProvider
  id: LicFileLicenseProvider
  children:
  - System.ComponentModel.LicFileLicenseProvider.#ctor
  - System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  - System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  - System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  langs:
  - csharp
  name: LicFileLicenseProvider
  nameWithType: LicFileLicenseProvider
  fullName: System.ComponentModel.LicFileLicenseProvider
  type: Class
  summary: "提供的实现<xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>。 提供程序可在 Microsoft.NET Framework 的标准授权模型的类似的方式工作。"
  remarks: "LicFileLicenseProvider 提供<xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A>和<xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>方法。</xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> </xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> <xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>方法确定是否<xref:System.ComponentModel.License.LicenseKey%2A>检索<xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A>方法无效。</xref:System.ComponentModel.LicFileLicenseProvider.GetLicense%2A> </xref:System.ComponentModel.License.LicenseKey%2A> </xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> 当你从此类继承时，可以重写<xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>方法以提供您自己的验证逻辑。</xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>       此类提供类似的授权功能，为 COM 授权，并使用文本许可证文件。       有关许可的详细信息，请参阅[How to︰ 许可证组件和控件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses LicFileLicenseProvider for the license manager.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._155_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._155_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._155_1.cpp)]"
  syntax:
    content: 'public class LicFileLicenseProvider : System.ComponentModel.LicenseProvider'
  inheritance:
  - System.Object
  - System.ComponentModel.LicenseProvider
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor
  id: '#ctor'
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: LicFileLicenseProvider()
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider()
  fullName: System.ComponentModel.LicFileLicenseProvider.LicFileLicenseProvider()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.LicFileLicenseProvider&quot;></xref>类。"
  syntax:
    content: public LicFileLicenseProvider ();
    parameters: []
  overload: System.ComponentModel.LicFileLicenseProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  id: GetKey(System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: GetKey(Type)
  nameWithType: LicFileLicenseProvider.GetKey(Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetKey(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回指定类型的键。"
  syntax:
    content: protected virtual string GetKey (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要返回键的对象类型。"
    return:
      type: System.String
      description: "一条确认消息， <code> type </code>参数已获许可。"
  overload: System.ComponentModel.LicFileLicenseProvider.GetKey*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  id: GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "如果有的话，则返回的实例的组件，许可证。"
  remarks: "在设计时，一个名为的许可证文件 GetLicense 方法查找`myClassName.LIC`，其中`myClassName`是<xref:System.Type.FullName%2A>要创建的组件。</xref:System.Type.FullName%2A> 此文件必须与包含该组件的.dll 文件相同的目录中。       接下来，此方法检查中指定的密钥对的许可证文件的第一行<xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A>方法。</xref:System.ComponentModel.LicFileLicenseProvider.IsKeyValid%2A> 如果此键是否有效，此行将用作<xref:System.ComponentModel.License.LicenseKey%2A>.</xref:System.ComponentModel.License.LicenseKey%2A>"
  syntax:
    content: public override System.ComponentModel.License GetLicense (System.ComponentModel.LicenseContext context, Type type, object instance, bool allowExceptions);
    parameters:
    - id: context
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> ，它指定，可以使用已授权的对象。"
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示组件请求<xref href=&quot;System.ComponentModel.License&quot;> </xref>。</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "请求的对象<xref href=&quot;System.ComponentModel.License&quot;> </xref>。"
    - id: allowExceptions
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.ComponentModel.LicenseException&quot;></xref>许可证; 无法授予组件时应引发否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>. 如果此方法找不到有效<xref href=&quot;System.ComponentModel.License&quot;></xref>或有效<code> context </code>参数，它将返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.LicFileLicenseProvider.GetLicense*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  id: IsKeyValid(System.String,System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  langs:
  - csharp
  name: IsKeyValid(String,Type)
  nameWithType: LicFileLicenseProvider.IsKeyValid(String,Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(String,Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定是否密钥，<xref:System.ComponentModel.LicFileLicenseProvider.GetLicense*>方法检索指定的类型无效。</xref:System.ComponentModel.LicFileLicenseProvider.GetLicense*>"
  remarks: '此方法检查短语的密钥:&quot; `myClassName is a licensed component.` &quot;，其中`myClassName`是<xref:System.Type.FullName%2A>你想要创建的组件。</xref:System.Type.FullName%2A>'
  syntax:
    content: protected virtual bool IsKeyValid (string key, Type type);
    parameters:
    - id: key
      type: System.String
      description: "<xref:System.ComponentModel.License.LicenseKey*>检查。</xref:System.ComponentModel.License.LicenseKey*>"
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示组件请求<xref href=&quot;System.ComponentModel.License&quot;> </xref>。</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果密钥有效<xref:System.ComponentModel.License.LicenseKey*>指定的类型; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ComponentModel.License.LicenseKey*>"
  overload: System.ComponentModel.LicFileLicenseProvider.IsKeyValid*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.LicenseProvider
  isExternal: false
  name: System.ComponentModel.LicenseProvider
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: LicFileLicenseProvider()
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider()
  fullName: System.ComponentModel.LicFileLicenseProvider.LicFileLicenseProvider()
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey(System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetKey(Type)
  nameWithType: LicFileLicenseProvider.GetKey(Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetKey(Type)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense(System.ComponentModel.LicenseContext,System.Type,System.Object,System.Boolean)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetLicense(LicenseContext,Type,Object,Boolean)
  nameWithType: LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
  fullName: System.ComponentModel.LicFileLicenseProvider.GetLicense(LicenseContext,Type,Object,Boolean)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(System.String,System.Type)
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: IsKeyValid(String,Type)
  nameWithType: LicFileLicenseProvider.IsKeyValid(String,Type)
  fullName: System.ComponentModel.LicFileLicenseProvider.IsKeyValid(String,Type)
- uid: System.ComponentModel.LicFileLicenseProvider.#ctor*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: LicFileLicenseProvider
  nameWithType: LicFileLicenseProvider.LicFileLicenseProvider
- uid: System.ComponentModel.LicFileLicenseProvider.GetKey*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetKey
  nameWithType: LicFileLicenseProvider.GetKey
- uid: System.ComponentModel.LicFileLicenseProvider.GetLicense*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: GetLicense
  nameWithType: LicFileLicenseProvider.GetLicense
- uid: System.ComponentModel.LicFileLicenseProvider.IsKeyValid*
  parent: System.ComponentModel.LicFileLicenseProvider
  isExternal: false
  name: IsKeyValid
  nameWithType: LicFileLicenseProvider.IsKeyValid
