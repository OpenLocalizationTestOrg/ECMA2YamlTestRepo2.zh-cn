### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.DirectorySecurity
  id: DirectorySecurity
  children:
  - System.Security.AccessControl.DirectorySecurity.#ctor
  - System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  langs:
  - csharp
  name: DirectorySecurity
  nameWithType: DirectorySecurity
  fullName: System.Security.AccessControl.DirectorySecurity
  type: Class
  summary: "表示的访问控制和审核安全性目录。 此类不能被继承。"
  remarks: "DirectorySecurity 类指定的系统目录以及如何审核的访问尝试次数的访问权限。 此类表示为一组规则的访问和审核权限。 每个规则都由<xref:System.Security.AccessControl.FileSystemAccessRule>对象，而每个审核规则由<xref:System.Security.AccessControl.FileSystemAuditRule>对象。</xref:System.Security.AccessControl.FileSystemAuditRule> </xref:System.Security.AccessControl.FileSystemAccessRule>       DirectorySecurity 类是基础的 Windows 文件安全系统的抽象。 在此系统中，每个目录具有自定义访问控制列表 (DACL)，它控制对目录访问权限和系统访问控制列表 (SACL)，指定进行审核的访问控制尝试。 <xref:System.Security.AccessControl.FileSystemAccessRule>和<xref:System.Security.AccessControl.FileSystemAuditRule>类是抽象的访问控制项 (Ace)，包括 Dacl 和 Sacl。</xref:System.Security.AccessControl.FileSystemAuditRule> </xref:System.Security.AccessControl.FileSystemAccessRule>       DirectorySecurity 类隐藏的许多 Dacl 和 Sacl; 的详细信息无需担心 ACE 排序或 null DACL。       使用<xref:System.Security.AccessControl.FileSecurity>类来检索、 添加或更改表示 DACL 和 SACL 的文件的访问规则。</xref:System.Security.AccessControl.FileSecurity>       下表列出了可用于访问和维护目录安全性的方法。      |任务 |方法 |  |----------|-------------|  |添加规则 |<xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.AddAccessRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName>|  |删除规则 |<xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.AddAuditRule%2A?displayProperty=fullName><br /><br /> <xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName>|  |检索到的目录的访问控制 |<xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName></xref:System.IO.Directory.GetAccessControl%2A?displayProperty=fullName></xref:System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName>|  |保留到目录的访问控制 |<xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName></xref:System.IO.Directory.SetAccessControl%2A?displayProperty=fullName></xref:System.IO.DirectoryInfo.GetAccessControl%2A?displayProperty=fullName><br /><br /> <xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>|</xref:System.IO.DirectoryInfo.SetAccessControl%2A?displayProperty=fullName>"
  example:
  - "The following code example uses the DirectorySecurity class to add and then remove an access control list (ACL) entry from a directory.  You must supply a valid user or group account to run this example.  \n  \n [!code-cpp[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/cpp/t-system.security.access_1_1.cpp)]\n [!code-cs[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/csharp/t-system.security.access_1_1.cs)]\n [!code-vb[IO.DiretoryInfo.GetAccessControl-SetAccessControl#1](~/add/codesnippet/visualbasic/t-system.security.access_1_1.vb)]"
  syntax:
    content: 'public sealed class DirectorySecurity : System.Security.AccessControl.FileSystemSecurity'
  inheritance:
  - System.Object
  - System.Security.AccessControl.ObjectSecurity
  - System.Security.AccessControl.CommonObjectSecurity
  - System.Security.AccessControl.NativeObjectSecurity
  - System.Security.AccessControl.FileSystemSecurity
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.CommonObjectSecurity.AddAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.AddAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.GetAccessRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.GetAuditRules(System.Boolean,System.Boolean,System.Type)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAccess(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.ModifyAudit(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleAll(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleAll(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.CommonObjectSecurity.ResetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAccessRule(System.Security.AccessControl.AccessRule)
  - System.Security.AccessControl.CommonObjectSecurity.SetAuditRule(System.Security.AccessControl.AuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AccessRightType
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.FileSystemSecurity.AccessRuleType
  - System.Security.AccessControl.FileSystemSecurity.AddAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.AddAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleFactory(System.Security.Principal.IdentityReference,System.Int32,System.Boolean,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AuditFlags)
  - System.Security.AccessControl.FileSystemSecurity.AuditRuleType
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleAll(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAccessRuleSpecific(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleAll(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.RemoveAuditRuleSpecific(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.FileSystemSecurity.ResetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAccessRule(System.Security.AccessControl.FileSystemAccessRule)
  - System.Security.AccessControl.FileSystemSecurity.SetAuditRule(System.Security.AccessControl.FileSystemAuditRule)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.Runtime.InteropServices.SafeHandle,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.NativeObjectSecurity.Persist(System.String,System.Security.AccessControl.AccessControlSections,System.Object)
  - System.Security.AccessControl.ObjectSecurity.AccessRulesModified
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAccessRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesCanonical
  - System.Security.AccessControl.ObjectSecurity.AreAuditRulesProtected
  - System.Security.AccessControl.ObjectSecurity.AuditRulesModified
  - System.Security.AccessControl.ObjectSecurity.GetGroup(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetOwner(System.Type)
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorBinaryForm
  - System.Security.AccessControl.ObjectSecurity.GetSecurityDescriptorSddlForm(System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.GroupModified
  - System.Security.AccessControl.ObjectSecurity.IsContainer
  - System.Security.AccessControl.ObjectSecurity.IsDS
  - System.Security.AccessControl.ObjectSecurity.IsSddlConversionSupported
  - System.Security.AccessControl.ObjectSecurity.ModifyAccessRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AccessRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.ModifyAuditRule(System.Security.AccessControl.AccessControlModification,System.Security.AccessControl.AuditRule,System.Boolean@)
  - System.Security.AccessControl.ObjectSecurity.OwnerModified
  - System.Security.AccessControl.ObjectSecurity.Persist(System.Boolean,System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.PurgeAccessRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.PurgeAuditRules(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.ReadLock
  - System.Security.AccessControl.ObjectSecurity.ReadUnlock
  - System.Security.AccessControl.ObjectSecurity.SetAccessRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetAuditRuleProtection(System.Boolean,System.Boolean)
  - System.Security.AccessControl.ObjectSecurity.SetGroup(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetOwner(System.Security.Principal.IdentityReference)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[])
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorBinaryForm(System.Byte[],System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String)
  - System.Security.AccessControl.ObjectSecurity.SetSecurityDescriptorSddlForm(System.String,System.Security.AccessControl.AccessControlSections)
  - System.Security.AccessControl.ObjectSecurity.WriteLock
  - System.Security.AccessControl.ObjectSecurity.WriteUnlock
  platform:
  - net462
- uid: System.Security.AccessControl.DirectorySecurity.#ctor
  id: '#ctor'
  parent: System.Security.AccessControl.DirectorySecurity
  langs:
  - csharp
  name: DirectorySecurity()
  nameWithType: DirectorySecurity.DirectorySecurity()
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新实例<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>类。"
  remarks: "使用此构造函数，如果你想要创建一个空<xref:System.Security.AccessControl.DirectorySecurity>不基于现有的目录的对象。</xref:System.Security.AccessControl.DirectorySecurity> 然后可以使用访问控制信息填充该对象，并将其应用到的目录。"
  syntax:
    content: public DirectorySecurity ();
    parameters: []
  overload: System.Security.AccessControl.DirectorySecurity.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "当前操作系统不是 Microsoft Windows 2000 或更高版本。"
  platform:
  - net462
- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  id: '#ctor(System.String,System.Security.AccessControl.AccessControlSections)'
  parent: System.Security.AccessControl.DirectorySecurity
  langs:
  - csharp
  name: DirectorySecurity(String,AccessControlSections)
  nameWithType: DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "初始化的新实例<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>使用指定的值的指定目录中的类<xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;></xref>枚举。"
  remarks: "此构造函数检索指定的目录的访问控制信息，然后创建<xref:System.Security.AccessControl.DirectorySecurity>封装该信息的对象。</xref:System.Security.AccessControl.DirectorySecurity> 然后可以检查、 添加或删除指定的目录的访问控制信息。"
  syntax:
    content: public DirectorySecurity (string name, System.Security.AccessControl.AccessControlSections includeSections);
    parameters:
    - id: name
      type: System.String
      description: "若要创建的目录的位置<xref href=&quot;System.Security.AccessControl.DirectorySecurity&quot;></xref>对象。"
    - id: includeSections
      type: System.Security.AccessControl.AccessControlSections
      description: "之一<xref href=&quot;System.Security.AccessControl.AccessControlSections&quot;></xref>值，指定的类型的访问控制列表 (ACL) 信息检索。"
  overload: System.Security.AccessControl.DirectorySecurity.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code>参数是零长度字符串，仅包含空格，或由<xref:System.IO.Path.InvalidPathChars>.</xref:System.IO.Path.InvalidPathChars>定义包含一个或多个无效字符"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "指定的路径无效，（例如，它位于未映射的驱动器上）。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "中指定的文件<code> name </code>找不到参数。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "打开目录时发生 I/O 错误。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code> name </code>参数是格式无效。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "当前操作系统不是 Microsoft Windows 2000 或更高版本。"
  - type: System.IO.PathTooLongException
    commentId: T:System.IO.PathTooLongException
    description: "指定的路径和 / 或文件名超过了系统定义的最大长度。 例如，在基于 Windows 的平台上，路径必须少于 248 个字符，文件名必须少于 260 个字符。"
  - type: System.Security.AccessControl.PrivilegeNotHeldException
    commentId: T:System.Security.AccessControl.PrivilegeNotHeldException
    description: "当前的系统帐户没有管理权限。"
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "找不到目录。"
  - type: System.UnauthorizedAccessException
    commentId: T:System.UnauthorizedAccessException
    description: "<code> name </code>参数指定的目录中是只读的。       -或者-当前平台上不支持此操作。       -或者-调用方没有所要求的权限。"
  platform:
  - net462
references:
- uid: System.Security.AccessControl.FileSystemSecurity
  isExternal: false
  name: System.Security.AccessControl.FileSystemSecurity
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.IO.PathTooLongException
  isExternal: true
  name: System.IO.PathTooLongException
- uid: System.Security.AccessControl.PrivilegeNotHeldException
  parent: System.Security.AccessControl
  isExternal: false
  name: PrivilegeNotHeldException
  nameWithType: PrivilegeNotHeldException
  fullName: System.Security.AccessControl.PrivilegeNotHeldException
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.UnauthorizedAccessException
  isExternal: true
  name: System.UnauthorizedAccessException
- uid: System.Security.AccessControl.DirectorySecurity.#ctor
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity()
  nameWithType: DirectorySecurity.DirectorySecurity()
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity()
- uid: System.Security.AccessControl.DirectorySecurity.#ctor(System.String,System.Security.AccessControl.AccessControlSections)
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity(String,AccessControlSections)
  nameWithType: DirectorySecurity.DirectorySecurity(String,AccessControlSections)
  fullName: System.Security.AccessControl.DirectorySecurity.DirectorySecurity(String,AccessControlSections)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.AccessControlSections
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlSections
  nameWithType: AccessControlSections
  fullName: System.Security.AccessControl.AccessControlSections
- uid: System.Security.AccessControl.DirectorySecurity.#ctor*
  parent: System.Security.AccessControl.DirectorySecurity
  isExternal: false
  name: DirectorySecurity
  nameWithType: DirectorySecurity.DirectorySecurity
