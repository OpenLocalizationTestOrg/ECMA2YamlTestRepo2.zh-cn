### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.SearchResultCollection
  id: SearchResultCollection
  children:
  - System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  - System.DirectoryServices.SearchResultCollection.Count
  - System.DirectoryServices.SearchResultCollection.Dispose
  - System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  - System.DirectoryServices.SearchResultCollection.Finalize
  - System.DirectoryServices.SearchResultCollection.GetEnumerator
  - System.DirectoryServices.SearchResultCollection.Handle
  - System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  - System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  - System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  langs:
  - csharp
  name: SearchResultCollection
  nameWithType: SearchResultCollection
  fullName: System.DirectoryServices.SearchResultCollection
  type: Class
  summary: "SearchResultCollection 类包含<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>过程 Active Directory 层次结构返回的实例<xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref>查询。"
  remarks: "由于实现限制 SearchResultCollection 类无法释放其非托管资源的所有垃圾回收时。 若要防止内存泄漏，你必须调用<xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>方法时不再需要 SearchResultCollection 对象。</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>"
  syntax:
    content: 'public class SearchResultCollection : MarshalByRefObject, IDisposable, System.Collections.ICollection'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.ICollection
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  id: Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "确定指定<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>对象处于此集合。"
  syntax:
    content: public bool Contains (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "<xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref>若要查找的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的属性属于该集合;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.DirectoryServices.SearchResultCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  id: CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "将所有复制<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>到特定的数组，从目标数组中指定索引处开始此集合中的对象。"
  syntax:
    content: public void CopyTo (System.DirectoryServices.SearchResult[] results, int index);
    parameters:
    - id: results
      type: System.DirectoryServices.SearchResult[]
      description: "数组<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>接收此集合的元素的对象。"
    - id: index
      type: System.Int32
      description: "中的从零开始索引`results`此方法从该位置开始复制此集合。"
  overload: System.DirectoryServices.SearchResultCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Count
  id: Count
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取数<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>此集合中的对象。"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "数<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>此集合中的对象。"
  overload: System.DirectoryServices.SearchResultCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  id: Dispose
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "释放使用的所有资源<xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;></xref>对象。"
  remarks: "Dispose 方法中，它允许通过使用的资源<xref:System.DirectoryServices.SearchResultCollection>可以重新分配用于其他目的。</xref:System.DirectoryServices.SearchResultCollection> 有关释放的详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)。       垃圾回收器不会释放内存<xref:System.DirectoryServices.SearchResultCollection>对象。</xref:System.DirectoryServices.SearchResultCollection> 因此，应用程序必须调用 Dispose 方法显式以防止内存泄漏。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "释放由非托管的资源<xref href=&quot;System.DirectoryServices.SearchResultCollection&quot;></xref>对象，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> <xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>调用与受保护的 Dispose 方法`disposing`参数设置为`true`。</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A> <xref:System.Object.Finalize%2A>调用与 Dispose`disposing`参数设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的所有资源此<xref:System.DirectoryServices.SearchResultCollection>引用。</xref:System.DirectoryServices.SearchResultCollection>       垃圾回收器不会释放内存<xref:System.DirectoryServices.SearchResultCollection>对象。</xref:System.DirectoryServices.SearchResultCollection> 因此，必须调用<xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>方法显式以防止内存泄漏。</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>       此方法调用<xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>集合中每个对象的方法。</xref:System.DirectoryServices.SearchResultCollection.Dispose%2A>       有关详细信息<xref:System.DirectoryServices.SearchResultCollection.Dispose>和<xref:System.Object.Finalize%2A>，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[重写 Finalize 方法](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。</xref:System.Object.Finalize%2A> </xref:System.DirectoryServices.SearchResultCollection.Dispose>"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.DirectoryServices.SearchResultCollection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  id: Finalize
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "重写&lt;xref:System.Object.Finalize%2A?displayProperty=fullName&gt;方法。"
  syntax:
    content: ~SearchResultCollection ();
    parameters: []
  overload: System.DirectoryServices.SearchResultCollection.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "返回可用于循环访问此集合的枚举。"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>可用于循环访问此集合的对象。</xref:System.Collections.IEnumerator>"
  overload: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Handle
  id: Handle
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取返回的句柄[IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)执行实际搜索的方法。 有关详细信息，请参阅[IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)在 MSDN 库中的主题[http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)。"
  remarks: "<xref:System.DirectoryServices.DirectorySearcher>，创建此集合调用[IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)方法，从而使查询结果可用于 T:System.DirectoryServices.SearchResultCollection 对象。</xref:System.DirectoryServices.DirectorySearcher> 有关详细信息，请参阅[IDirectorySearch::ExecuteSearch](http://msdn.microsoft.com/library/default.asp?url=/library/adsi/adsi/idirectorysearch_executesearch.asp)在 MSDN 库中的主题[http://msdn.microsoft.com/library](http://msdn.microsoft.com/library)。       执行查询，则每次该查询的结果的句柄与关联其<xref:System.DirectoryServices.SearchResultCollection>对象。</xref:System.DirectoryServices.SearchResultCollection> 此句柄对应于 ADSI 中的搜索句柄。 此句柄仍然存在，直到你调用<xref:System.DirectoryServices.SearchResultCollection.Dispose>方法<xref:System.DirectoryServices.SearchResultCollection>对象，因此您必须调用<xref:System.DirectoryServices.SearchResultCollection.Dispose>以防止内存泄漏。</xref:System.DirectoryServices.SearchResultCollection.Dispose> </xref:System.DirectoryServices.SearchResultCollection> </xref:System.DirectoryServices.SearchResultCollection.Dispose> 垃圾回收器不会释放此特定对象的内存。"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "此集合使用的 ADS_SEARCH_HANDLE 值。"
  overload: System.DirectoryServices.SearchResultCollection.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  id: IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "返回指定的第一个匹配项的索引<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>此集合中的对象。"
  syntax:
    content: public int IndexOf (System.DirectoryServices.SearchResult result);
    parameters:
    - id: result
      type: System.DirectoryServices.SearchResult
      description: "<xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref>对象在此集合中搜索。"
    return:
      type: System.Int32
      description: "第一个匹配对象的从零开始索引。 将返回-1，如果此集合的任何成员不均不同于<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>对象。"
  overload: System.DirectoryServices.SearchResultCollection.IndexOf*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>位于此集合中的指定索引处的对象。"
  remarks: "在 C# 中，此属性是<xref:System.DirectoryServices.SearchResultCollection>类</xref:System.DirectoryServices.SearchResultCollection>的索引器       在 JScript 中，你可以使用默认索引属性定义的类型，但不是能显式定义你自己。 但是，指定 expando 特性的类上自动提供了默认索引其类型是对象的属性和<xref:System.String>.</xref:System.String>的索引类型"
  syntax:
    content: public System.DirectoryServices.SearchResult this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "从零开始的索引<xref href=&quot;System.DirectoryServices.SearchResult&quot;></xref>要检索对象。"
    return:
      type: System.DirectoryServices.SearchResult
      description: "<xref href=&quot;System.DirectoryServices.SearchResult&quot;> </xref>位于指定索引处的对象。"
  overload: System.DirectoryServices.SearchResultCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  id: PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取<xref href=&quot;System.DirectoryServices.DirectorySearcher&quot;></xref>前执行搜索指定的属性。"
  syntax:
    content: public string[] PropertiesLoaded { get; }
    return:
      type: System.String[]
      description: "类型的数组<xref:System.String>包含在指定的属性<xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*>之前执行搜索的属性集合。</xref:System.DirectoryServices.DirectorySearcher.PropertiesToLoad*> </xref:System.String>"
  overload: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "元素复制<xref:System.Collections.ICollection>到<xref:System.Array>特定处开始，<xref:System.Array>索引。</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "<xref:System.Array>这是从<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>复制的元素的目标</xref:System.Array>的一维 <xref:System.Array>必须具有从零开始的索引。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "中的从零开始索引`array`复制开始处。"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多维的。       -源中的元素的数目<xref:System.Collections.ICollection>大于从的可用空间<code>index</code>到目标的末尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "源类型<xref:System.Collections.ICollection>无法自动转换为目标的类型<code> array </code>。</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取一个值，该值指示是否访问<xref:System.Collections.ICollection>是同步的 （线程安全）。</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>返回一个对象，它可用于同步对<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>访问</xref:System.Collections.ICollection.SyncRoot%2A>       中的大多数集合类<xref:System.Collections?displayProperty=fullName>命名空间还实现提供同步的包装基础集合已同步方法。</xref:System.Collections?displayProperty=fullName>       枚举整个集合本质上不是线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       [Visual Basic、 C#]      下面的代码示例演示如何锁定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整个枚举期间︰ ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果访问<xref:System.Collections.ICollection>是同步的 （线程安全）; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.SearchResultCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取可用于同步对<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>访问的对象"
  remarks: "对于其基础存储区不公用的集合，预期的实现是返回当前实例。 请注意，指向当前实例的指针可能还不够对于包装了其他集合; 的集合这些集合应返回基础集合`SyncRoot`属性。       中的大多数集合类<xref:System.Collections?displayProperty=fullName>命名空间还实现`Synchronized`方法，提供同步的包装基础集合。</xref:System.Collections?displayProperty=fullName> 但是，派生的类可以提供自己的同步的版本的集合使用<xref:System.Collections.ICollection.SyncRoot%2A>属性。</xref:System.Collections.ICollection.SyncRoot%2A> 同步代码必须在执行操作<xref:System.Collections.ICollection.SyncRoot%2A>不是直接对集合的集合。</xref:System.Collections.ICollection.SyncRoot%2A> 这可确保正确地执行操作的从其他对象派生的集合。 具体地说，这样可保持正确的同步，与可能同时修改集合实例的其他线程。       在缺少`Synchronized`方法对集合，预期使用情况<xref:System.Collections.ICollection.SyncRoot%2A>如下所示︰ ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` [Visual Basic]```   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ```枚举整个集合本质上不是线程安全的过程。</xref:System.Collections.ICollection.SyncRoot%2A> 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       [Visual Basic、 C#]      下面的代码示例演示如何锁定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整个枚举期间︰ ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "可以用于<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>对访问进行同步的对象"
  overload: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.SearchResultCollection.Contains(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains(SearchResult)
  nameWithType: SearchResultCollection.Contains(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.Contains(SearchResult)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.DirectoryServices.SearchResult
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult
- uid: System.DirectoryServices.SearchResultCollection.CopyTo(System.DirectoryServices.SearchResult[],System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo(SearchResult[],Int32)
  nameWithType: SearchResultCollection.CopyTo(SearchResult[],Int32)
  fullName: System.DirectoryServices.SearchResultCollection.CopyTo(SearchResult[],Int32)
- uid: System.DirectoryServices.SearchResult[]
  parent: System.DirectoryServices
  isExternal: false
  name: SearchResult
  nameWithType: SearchResult
  fullName: System.DirectoryServices.SearchResult[]
  spec.csharp:
  - uid: System.DirectoryServices.SearchResult
    name: SearchResult
    nameWithType: SearchResult
    fullName: SearchResult[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.SearchResultCollection.Count
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
  fullName: System.DirectoryServices.SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose()
  nameWithType: SearchResultCollection.Dispose()
  fullName: System.DirectoryServices.SearchResultCollection.Dispose()
- uid: System.DirectoryServices.SearchResultCollection.Dispose(System.Boolean)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SearchResultCollection.Dispose(Boolean)
  fullName: System.DirectoryServices.SearchResultCollection.Dispose(Boolean)
- uid: System.DirectoryServices.SearchResultCollection.Finalize
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize()
  nameWithType: SearchResultCollection.Finalize()
  fullName: System.DirectoryServices.SearchResultCollection.Finalize()
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: SearchResultCollection.GetEnumerator()
  fullName: System.DirectoryServices.SearchResultCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
  fullName: System.DirectoryServices.SearchResultCollection.Handle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.DirectoryServices.SearchResultCollection.IndexOf(System.DirectoryServices.SearchResult)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf(SearchResult)
  nameWithType: SearchResultCollection.IndexOf(SearchResult)
  fullName: System.DirectoryServices.SearchResultCollection.IndexOf(SearchResult)
- uid: System.DirectoryServices.SearchResultCollection.Item(System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: SearchResultCollection.Item(Int32)
  fullName: System.DirectoryServices.SearchResultCollection.Item(Int32)
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
  fullName: System.DirectoryServices.SearchResultCollection.PropertiesLoaded
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.SearchResultCollection.System.Collections.ICollection.SyncRoot
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.DirectoryServices.SearchResultCollection.Contains*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Contains
  nameWithType: SearchResultCollection.Contains
- uid: System.DirectoryServices.SearchResultCollection.CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: CopyTo
  nameWithType: SearchResultCollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.Count*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Count
  nameWithType: SearchResultCollection.Count
- uid: System.DirectoryServices.SearchResultCollection.Dispose*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Dispose
  nameWithType: SearchResultCollection.Dispose
- uid: System.DirectoryServices.SearchResultCollection.Finalize*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Finalize
  nameWithType: SearchResultCollection.Finalize
- uid: System.DirectoryServices.SearchResultCollection.GetEnumerator*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: SearchResultCollection.GetEnumerator
- uid: System.DirectoryServices.SearchResultCollection.Handle*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Handle
  nameWithType: SearchResultCollection.Handle
- uid: System.DirectoryServices.SearchResultCollection.IndexOf*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: IndexOf
  nameWithType: SearchResultCollection.IndexOf
- uid: System.DirectoryServices.SearchResultCollection.Item*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: Item
  nameWithType: SearchResultCollection.Item
- uid: System.DirectoryServices.SearchResultCollection.PropertiesLoaded*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: PropertiesLoaded
  nameWithType: SearchResultCollection.PropertiesLoaded
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: SearchResultCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: SearchResultCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.SearchResultCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.SearchResultCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: SearchResultCollection.System.Collections.ICollection.SyncRoot
