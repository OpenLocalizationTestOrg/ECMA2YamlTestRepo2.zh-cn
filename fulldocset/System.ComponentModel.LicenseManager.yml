### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.LicenseManager
  id: LicenseManager
  children:
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  - System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  - System.ComponentModel.LicenseManager.CurrentContext
  - System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type)
  - System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  - System.ComponentModel.LicenseManager.LockContext(System.Object)
  - System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  - System.ComponentModel.LicenseManager.UsageMode
  - System.ComponentModel.LicenseManager.Validate(System.Type)
  - System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  langs:
  - csharp
  name: LicenseManager
  nameWithType: LicenseManager
  fullName: System.ComponentModel.LicenseManager
  type: Class
  summary: "提供属性和方法来将许可证添加到组件以及管理<xref href=&quot;System.ComponentModel.LicenseProvider&quot;> </xref>。 此类不能被继承。"
  remarks: "LicenseManager 类提供了以下`static`属性︰<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>和<xref:System.ComponentModel.LicenseManager.UsageMode%2A>。</xref:System.ComponentModel.LicenseManager.UsageMode%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> 类还提供了以下`static`方法︰ <xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>， <xref:System.ComponentModel.LicenseManager.IsValid%2A>，和<xref:System.ComponentModel.LicenseManager.Validate%2A>。</xref:System.ComponentModel.LicenseManager.Validate%2A> </xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>       当你创建的组件，你想要授予许可时，你必须执行以下操作︰ 1。  指定的<xref:System.ComponentModel.LicenseProvider>标记以<xref:System.ComponentModel.LicenseProviderAttribute>.</xref:System.ComponentModel.LicenseProviderAttribute>组件</xref:System.ComponentModel.LicenseProvider>      2.  调用<xref:System.ComponentModel.LicenseManager.Validate%2A>或<xref:System.ComponentModel.LicenseManager.IsValid%2A>组件的构造函数中。</xref:System.ComponentModel.LicenseManager.IsValid%2A> </xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.Validate%2A>引发<xref:System.ComponentModel.LicenseException>其尝试创建有效的许可证的情况下实例时。</xref:System.ComponentModel.LicenseException></xref:System.ComponentModel.LicenseManager.Validate%2A> <xref:System.ComponentModel.LicenseManager.IsValid%2A>不引发异常。</xref:System.ComponentModel.LicenseManager.IsValid%2A>      3.  调用<xref:System.ComponentModel.License.Dispose%2A>上时释放或完成组件授予任何许可证。</xref:System.ComponentModel.License.Dispose%2A>       有关许可的详细信息，请参阅[How to︰ 许可证组件和控件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example creates a licensed control using the <xref:System.ComponentModel.LicenseManager.Validate%2A> method. It uses a <xref:System.ComponentModel.LicenseProvider> that is implemented by the <xref:System.ComponentModel.LicFileLicenseProvider> class.  \n  \n [!code-cs[Classic LicenseManager Example#1](~/add/codesnippet/csharp/t-system.componentmodel._63_1.cs)]\n [!code-vb[Classic LicenseManager Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._63_1.vb)]\n [!code-cpp[Classic LicenseManager Example#1](~/add/codesnippet/cpp/t-system.componentmodel._63_1.cpp)]"
  syntax:
    content: public sealed class LicenseManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建指定类型的实例，你可以在其中使用许可的实例的上下文。"
  remarks: "<xref:System.ComponentModel.LicenseContext>指定为`creationContext`参数可作为<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>此<xref:System.ComponentModel.License>。</xref:System.ComponentModel.License>的整个生命周期</xref:System.ComponentModel.LicenseManager.CurrentContext%2A></xref:System.ComponentModel.LicenseContext> CreateWithContext 方法阻止所有其他线程<xref:System.AppDomain>修改<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>，允许 CreateWithContext 作为一个原子操作行为。</xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>，它表示要创建的类型。</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> ，指定何时可以使用已授权的实例。"
    return:
      type: System.Object
      description: "指定类型的实例。"
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  id: CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "使用指定的参数，你可以在其中使用许可的实例的上下文创建指定类型的实例。"
  remarks: "<xref:System.ComponentModel.LicenseContext>指定为`creationContext`参数可作为<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>此<xref:System.ComponentModel.License>。</xref:System.ComponentModel.License>的整个生命周期</xref:System.ComponentModel.LicenseManager.CurrentContext%2A></xref:System.ComponentModel.LicenseContext> 此方法阻止所有其他线程<xref:System.AppDomain>修改<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>，并允许<xref:System.ComponentModel.LicenseManager.CreateWithContext%2A>作为一个原子操作行为。</xref:System.ComponentModel.LicenseManager.CreateWithContext%2A> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A> </xref:System.AppDomain>"
  syntax:
    content: public static object CreateWithContext (Type type, System.ComponentModel.LicenseContext creationContext, object[] args);
    parameters:
    - id: type
      type: System.Type
      description: "A <xref:System.Type>，它表示要创建的类型。</xref:System.Type>"
    - id: creationContext
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> ，指定何时可以使用已授权的实例。"
    - id: args
      type: System.Object[]
      description: "类型的数组<xref:System.Object>表示类型的参数的。</xref:System.Object>"
    return:
      type: System.Object
      description: "使用给定参数数组的指定类型的实例。"
  overload: System.ComponentModel.LicenseManager.CreateWithContext*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.CurrentContext
  id: CurrentContext
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取或设置当前<xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref>，它指定何时可以使用已授权的对象。"
  remarks: "当用户请求一个有效<xref:System.ComponentModel.License>，用户必须为在其中提供的上下文<xref:System.ComponentModel.License>有效到<xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName>方法。</xref:System.ComponentModel.LicenseProvider.GetLicense%2A?displayProperty=fullName> </xref:System.ComponentModel.License> </xref:System.ComponentModel.License> <xref:System.ComponentModel.LicenseContext>返回此属性应传递到所有<xref:System.ComponentModel.LicenseProvider>类。</xref:System.ComponentModel.LicenseProvider> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static System.ComponentModel.LicenseContext CurrentContext { get; set; }
    return:
      type: System.ComponentModel.LicenseContext
      description: "A <xref href=&quot;System.ComponentModel.LicenseContext&quot;> </xref> ，指定何时可以使用已授权的对象。"
  overload: System.ComponentModel.LicenseManager.CurrentContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "CurrentContext 属性当前已锁定，且不能更改。"
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  id: IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回给定的类型是否具有有效的许可证。"
  syntax:
    content: public static bool IsLicensed (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>若要查找有效许可证为</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已授权的给定的类型;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.LicenseManager.IsLicensed*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  id: IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定是否可以授予指定类型的有效许可证。"
  remarks: "IsValid 方法返回`true`类型未被授权，或者已被授权时，该许可证开始生效。       此方法也不引发<xref:System.ComponentModel.LicenseException>时它不能授予有效<xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.Validate%2A>方法引发异常。</xref:System.ComponentModel.LicenseManager.Validate%2A>"
  syntax:
    content: public static bool IsValid (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示请求的对象的类型<xref href=&quot;System.ComponentModel.License&quot;> </xref>。</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以授予有效许可证;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  id: IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定是否可以为类型的指定实例授予有效的许可证。 此方法创建一个有效<xref href=&quot;System.ComponentModel.License&quot;> </xref>。"
  remarks: "<xref:System.ComponentModel.LicenseManager.IsValid%2A>方法返回`true`时`type`参数未被授权，或者当它已被授权与`license`参数才有效。</xref:System.ComponentModel.LicenseManager.IsValid%2A>       此方法也不引发<xref:System.ComponentModel.LicenseException>时它不能授予有效<xref:System.ComponentModel.License>.</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.Validate%2A>方法引发异常。</xref:System.ComponentModel.LicenseManager.Validate%2A>       如果`license`参数不是`null`此调用，要求你的对象后<xref:System.ComponentModel.License>必须通过调用释放许可证<xref:System.ComponentModel.License.Dispose%2A>方法释放或终止的对象时。</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static bool IsValid (Type type, object instance, out System.ComponentModel.License license);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示请求许可证的对象的类型。</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "从指定的类型派生的指定的类型或类型的对象。"
    - id: license
      type: System.ComponentModel.License
      description: "A <xref href=&quot;System.ComponentModel.License&quot;> </xref> ，它是有效的许可证，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果无法得到有效的许可证。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果提供了有效<xref href=&quot;System.ComponentModel.License&quot;></xref>可授予; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.LicenseManager.IsValid*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  id: LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "禁止对当前正在进行的更改<xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref>的给定的对象。"
  remarks: "使用<xref:System.ComponentModel.LicenseContext>获取<xref:System.ComponentModel.License>的对象。</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> 此方法锁定<xref:System.ComponentModel.LicenseContext>，防止<xref:System.ComponentModel.License>从正在检索。</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void LockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "你想要锁定其当前上下文的对象。"
  overload: System.ComponentModel.LicenseManager.LockContext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "上下文已被锁定。"
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  id: UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "允许更改不会对当前<xref href=&quot;System.ComponentModel.LicenseContext&quot;></xref>的给定的对象。"
  remarks: "使用<xref:System.ComponentModel.LicenseContext>获取<xref:System.ComponentModel.License>的对象。</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext> 此方法将解锁<xref:System.ComponentModel.LicenseContext>，并允许<xref:System.ComponentModel.License>要检索。</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseContext>"
  syntax:
    content: public static void UnlockContext (object contextUser);
    parameters:
    - id: contextUser
      type: System.Object
      description: "你想要解锁其当前上下文的对象。"
  overload: System.ComponentModel.LicenseManager.UnlockContext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contextUser</code>表示对上一个调用中指定不同的用户<xref:System.ComponentModel.LicenseManager.LockContext*>。"
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.UsageMode
  id: UsageMode
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取<xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;></xref>它指定当<xref:System.ComponentModel.LicenseManager.CurrentContext*>。</xref:System.ComponentModel.LicenseManager.CurrentContext*>使用已授权的对象"
  remarks: "如果此属性找不到的<xref:System.ComponentModel.LicenseManager.CurrentContext%2A>值，它将返回<xref:System.ComponentModel.LicenseUsageMode>.</xref:System.ComponentModel.LicenseUsageMode> </xref:System.ComponentModel.LicenseManager.CurrentContext%2A>"
  syntax:
    content: public static System.ComponentModel.LicenseUsageMode UsageMode { get; }
    return:
      type: System.ComponentModel.LicenseUsageMode
      description: "之一<xref href=&quot;System.ComponentModel.LicenseUsageMode&quot;></xref>值中指定<xref:System.ComponentModel.LicenseManager.CurrentContext*>属性。</xref:System.ComponentModel.LicenseManager.CurrentContext*>"
  overload: System.ComponentModel.LicenseManager.UsageMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  id: Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定是否可以为指定类型授予许可证。"
  remarks: "此方法将引发<xref:System.ComponentModel.LicenseException>时有效<xref:System.ComponentModel.License>无法得到。</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.IsValid%2A>方法不会引发异常。</xref:System.ComponentModel.LicenseManager.IsValid%2A>"
  syntax:
    content: public static void Validate (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示请求许可证的对象的类型。</xref:System.Type>"
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "A <xref href=&quot;System.ComponentModel.License&quot;> </xref>无法得到。"
  platform:
  - net462
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  id: Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  langs:
  - csharp
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定是否可以为指定类型的实例授予许可证。"
  remarks: "此方法将引发<xref:System.ComponentModel.LicenseException>时有效<xref:System.ComponentModel.License>无法得到。</xref:System.ComponentModel.License> </xref:System.ComponentModel.LicenseException> <xref:System.ComponentModel.LicenseManager.IsValid%2A>方法不会引发异常。</xref:System.ComponentModel.LicenseManager.IsValid%2A>       请求的所有对象<xref:System.ComponentModel.License>必须通过调用释放许可证<xref:System.ComponentModel.License.Dispose%2A>方法释放或终止的对象时。</xref:System.ComponentModel.License.Dispose%2A> </xref:System.ComponentModel.License>"
  syntax:
    content: public static System.ComponentModel.License Validate (Type type, object instance);
    parameters:
    - id: type
      type: System.Type
      description: "A<xref:System.Type>表示请求许可证的对象的类型。</xref:System.Type>"
    - id: instance
      type: System.Object
      description: "<xref:System.Object>的指定的类型或类型派生自指定的类型。</xref:System.Object>"
    return:
      type: System.ComponentModel.License
      description: "A valid <xref href=&quot;System.ComponentModel.License&quot;></xref>."
  overload: System.ComponentModel.LicenseManager.Validate*
  exceptions:
  - type: System.ComponentModel.LicenseException
    commentId: T:System.ComponentModel.LicenseException
    description: "类型授予许可，但<xref href=&quot;System.ComponentModel.License&quot;></xref>无法得到。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.LicenseException
  parent: System.ComponentModel
  isExternal: false
  name: LicenseException
  nameWithType: LicenseException
  fullName: System.ComponentModel.LicenseException
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext)
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext)
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.LicenseContext
  parent: System.ComponentModel
  isExternal: false
  name: LicenseContext
  nameWithType: LicenseContext
  fullName: System.ComponentModel.LicenseContext
- uid: System.ComponentModel.LicenseManager.CreateWithContext(System.Type,System.ComponentModel.LicenseContext,System.Object[])
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext(Type,LicenseContext,Object[])
  nameWithType: LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
  fullName: System.ComponentModel.LicenseManager.CreateWithContext(Type,LicenseContext,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.LicenseManager.CurrentContext
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
  fullName: System.ComponentModel.LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed(Type)
  nameWithType: LicenseManager.IsLicensed(Type)
  fullName: System.ComponentModel.LicenseManager.IsLicensed(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type)
  nameWithType: LicenseManager.IsValid(Type)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type)
- uid: System.ComponentModel.LicenseManager.IsValid(System.Type,System.Object,System.ComponentModel.License@)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid(Type,Object,License)
  nameWithType: LicenseManager.IsValid(Type,Object,License)
  fullName: System.ComponentModel.LicenseManager.IsValid(Type,Object,License)
- uid: System.ComponentModel.License
  parent: System.ComponentModel
  isExternal: false
  name: License
  nameWithType: License
  fullName: System.ComponentModel.License
- uid: System.ComponentModel.LicenseManager.LockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext(Object)
  nameWithType: LicenseManager.LockContext(Object)
  fullName: System.ComponentModel.LicenseManager.LockContext(Object)
- uid: System.ComponentModel.LicenseManager.UnlockContext(System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext(Object)
  nameWithType: LicenseManager.UnlockContext(Object)
  fullName: System.ComponentModel.LicenseManager.UnlockContext(Object)
- uid: System.ComponentModel.LicenseManager.UsageMode
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
  fullName: System.ComponentModel.LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseUsageMode
  parent: System.ComponentModel
  isExternal: false
  name: LicenseUsageMode
  nameWithType: LicenseUsageMode
  fullName: System.ComponentModel.LicenseUsageMode
- uid: System.ComponentModel.LicenseManager.Validate(System.Type)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type)
  nameWithType: LicenseManager.Validate(Type)
  fullName: System.ComponentModel.LicenseManager.Validate(Type)
- uid: System.ComponentModel.LicenseManager.Validate(System.Type,System.Object)
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate(Type,Object)
  nameWithType: LicenseManager.Validate(Type,Object)
  fullName: System.ComponentModel.LicenseManager.Validate(Type,Object)
- uid: System.ComponentModel.LicenseManager.CreateWithContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CreateWithContext
  nameWithType: LicenseManager.CreateWithContext
- uid: System.ComponentModel.LicenseManager.CurrentContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: CurrentContext
  nameWithType: LicenseManager.CurrentContext
- uid: System.ComponentModel.LicenseManager.IsLicensed*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsLicensed
  nameWithType: LicenseManager.IsLicensed
- uid: System.ComponentModel.LicenseManager.IsValid*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: IsValid
  nameWithType: LicenseManager.IsValid
- uid: System.ComponentModel.LicenseManager.LockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: LockContext
  nameWithType: LicenseManager.LockContext
- uid: System.ComponentModel.LicenseManager.UnlockContext*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UnlockContext
  nameWithType: LicenseManager.UnlockContext
- uid: System.ComponentModel.LicenseManager.UsageMode*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: UsageMode
  nameWithType: LicenseManager.UsageMode
- uid: System.ComponentModel.LicenseManager.Validate*
  parent: System.ComponentModel.LicenseManager
  isExternal: false
  name: Validate
  nameWithType: LicenseManager.Validate
