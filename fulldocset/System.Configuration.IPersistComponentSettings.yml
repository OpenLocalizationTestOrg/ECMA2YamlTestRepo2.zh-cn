### YamlMime:ManagedReference
items:
- uid: System.Configuration.IPersistComponentSettings
  id: IPersistComponentSettings
  children:
  - System.Configuration.IPersistComponentSettings.LoadComponentSettings
  - System.Configuration.IPersistComponentSettings.ResetComponentSettings
  - System.Configuration.IPersistComponentSettings.SaveComponentSettings
  - System.Configuration.IPersistComponentSettings.SaveSettings
  - System.Configuration.IPersistComponentSettings.SettingsKey
  langs:
  - csharp
  name: IPersistComponentSettings
  nameWithType: IPersistComponentSettings
  fullName: System.Configuration.IPersistComponentSettings
  type: Interface
  summary: "定义控件或库用于存储和检索应用程序设置的标准功能。"
  remarks: "通常情况下，你可以添加应用程序设置支持对应用程序通过创建设置包装器类，该类派生自<xref:System.Configuration.ApplicationSettingsBase>，然后将特殊属性添加到此类。</xref:System.Configuration.ApplicationSettingsBase> 但是，此方法不足够的封装应用程序设置的控件，以便其容器进行隔离的详细信息。 IPersistComponentSettings 接口提供通信控件、 组件或库模块的应用程序设置状态更改请求的标准接口的应用程序。 设计时工具还依赖于此接口，以便正确地管理控件和组件。"
  syntax:
    content: public interface IPersistComponentSettings
  implements: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings
  id: LoadComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: LoadComponentSettings()
  nameWithType: IPersistComponentSettings.LoadComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.LoadComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "读取到其对应的属性的控件的应用程序设置并更新控件的状态。"
  remarks: "一般情况下，LoadComponentSettings 方法执行两个基本操作:-它将导致控件后，若要刷新其应用程序设置属性的值通常通过调用包含的每个应用程序设置实例其<xref:System.Configuration.ApplicationSettingsBase.Reload%2A>方法。</xref:System.Configuration.ApplicationSettingsBase.Reload%2A>      -根据需要，它会更新这些属性依赖于这些重新加载的设置的常规属性。 例如，如果将设置类包含`location`设置属性，LoadComponentSettings 应确保控件的<xref:System.Windows.Forms.Control.Location%2A>属性更新以反映此重新加载的设置。</xref:System.Windows.Forms.Control.Location%2A>"
  syntax:
    content: public void LoadComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.LoadComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings
  id: ResetComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: ResetComponentSettings()
  nameWithType: IPersistComponentSettings.ResetComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.ResetComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "将控件的应用程序设置属性重置为其默认值。"
  remarks: "ResetComponentSettings 方法的实现通常调用<xref:System.Configuration.ApplicationSettingsBase.Reset%2A>它包含应用程序设置类的每个实例上的方法。</xref:System.Configuration.ApplicationSettingsBase.Reset%2A>"
  syntax:
    content: public void ResetComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.ResetComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings
  id: SaveComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SaveComponentSettings()
  nameWithType: IPersistComponentSettings.SaveComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.SaveComponentSettings()
  type: Method
  assemblies:
  - System
  namespace: System.Configuration
  summary: "仍然存在控件的应用程序设置属性。"
  remarks: "SaveComponentSettings 方法将写入关联的数据存储控件的应用程序设置属性的值。 由通过<xref:System.Configuration.SettingsProviderAttribute>.</xref:System.Configuration.SettingsProviderAttribute>每个设置类关联的设置提供程序确定该方法使用的数据存储区和序列化技术 你可以使用重写设置提供程序的选择<xref:System.Configuration.ISettingsProviderService>接口。</xref:System.Configuration.ISettingsProviderService>      1> [!NOTE]&1;> 如果<xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>属性是`true`，该控件应调用 SaveComponentSettings 其自己<xref:System.Windows.Forms.Control.Dispose%2A>方法，以便在应用程序结束之前自动存储控件的配置数据。</xref:System.Windows.Forms.Control.Dispose%2A> </xref:System.Configuration.IPersistComponentSettings.SaveSettings%2A>"
  syntax:
    content: public void SaveComponentSettings ();
    parameters: []
  overload: System.Configuration.IPersistComponentSettings.SaveComponentSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SaveSettings
  id: SaveSettings
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
  fullName: System.Configuration.IPersistComponentSettings.SaveSettings
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取或设置一个值，该值指示控件是否应自动保持其应用程序设置属性。"
  remarks: "如果控件包含配置数据，它通常会将此数据以显式调用的响应保存<xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A>方法或有时隐式时控件的<xref:System.Windows.Forms.Control.Dispose%2A>调用方法。</xref:System.Windows.Forms.Control.Dispose%2A> </xref:System.Configuration.IPersistComponentSettings.SaveComponentSettings%2A> 首先属性确定释放绕道后是否控件将自动保存其配置数据。       前面的默认值取决于控件的实现。 控件的文档应指示其是否使用应用程序设置、 哪些数据保持不变，和前面属性的默认值是什么。"
  example:
  - "The following code example shows the proper way for a control to check the value of the SaveSettings property before it attempts to automatically persist its configuration data.  \n  \n `protected override void Dispose( bool disposing ) {`  \n  \n `if(disposing) {`  \n  \n `try {`  \n  \n `if (SaveSettings) {`  \n  \n `SaveComponentSettings();`  \n  \n `}`  \n  \n `}`  \n  \n `finally {`  \n  \n `//...`  \n  \n `}`  \n  \n `}`"
  syntax:
    content: public bool SaveSettings { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果控件应自动持久保存其状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Configuration.IPersistComponentSettings.SaveSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.IPersistComponentSettings.SettingsKey
  id: SettingsKey
  parent: System.Configuration.IPersistComponentSettings
  langs:
  - csharp
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
  fullName: System.Configuration.IPersistComponentSettings.SettingsKey
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取或设置控件的当前实例的应用程序设置键的值。"
  remarks: "使用 SettingsKey 属性来消除歧义的应用程序设置属性组时有多个实例相同的包装器类。 例如，如果控件包含关联的包装类，然后将同一个控件中的多个实例放在同一应用程序通常会在多个实例的包装类。 仅当基于每个实例; 不同的配置数据时，才需要设置键例如，动态定位控件的位置。       以下一般规则适用于 SettingsKey 的使用:-一个控件，像任何类可能包含零个或多个应用程序设置类，派生自<xref:System.Configuration.ApplicationSettingsBase>.</xref:System.Configuration.ApplicationSettingsBase> 每个设置类包含其自己的<xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName>属性，从而可帮助消除歧义该类的多个实例</xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName>      -A 控件应其每个实例数据和共享的数据分成不同的设置类。      -对于与任何每个实例的配置数据，控件`get`SettingsKey 属性访问器应默认为<xref:System.Windows.Forms.Control.Name%2A>的控件。</xref:System.Windows.Forms.Control.Name%2A> 在大多数情况下将是唯一应用程序中的控件的名称。 如果控件包含共享配置数据仅`get`应默认为`null`。      -`set`应实现此属性访问器包含每个实例和共享的配置数据的设置类之间进行区分。 为包含每个实例数据，每个设置类`set`应仅传递到<xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName>属性的设置类。</xref:System.Configuration.ApplicationSettingsBase.SettingsKey%2A?displayProperty=fullName> 对于包含共享的数据，设置类`set`应为该类设置执行任何操作。"
  syntax:
    content: public string SettingsKey { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>包含控件的当前实例的设置键。</xref:System.String>"
  overload: System.Configuration.IPersistComponentSettings.SettingsKey*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: LoadComponentSettings()
  nameWithType: IPersistComponentSettings.LoadComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.LoadComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: ResetComponentSettings()
  nameWithType: IPersistComponentSettings.ResetComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.ResetComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveComponentSettings()
  nameWithType: IPersistComponentSettings.SaveComponentSettings()
  fullName: System.Configuration.IPersistComponentSettings.SaveComponentSettings()
- uid: System.Configuration.IPersistComponentSettings.SaveSettings
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
  fullName: System.Configuration.IPersistComponentSettings.SaveSettings
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.IPersistComponentSettings.SettingsKey
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
  fullName: System.Configuration.IPersistComponentSettings.SettingsKey
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.IPersistComponentSettings.LoadComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: LoadComponentSettings
  nameWithType: IPersistComponentSettings.LoadComponentSettings
- uid: System.Configuration.IPersistComponentSettings.ResetComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: ResetComponentSettings
  nameWithType: IPersistComponentSettings.ResetComponentSettings
- uid: System.Configuration.IPersistComponentSettings.SaveComponentSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveComponentSettings
  nameWithType: IPersistComponentSettings.SaveComponentSettings
- uid: System.Configuration.IPersistComponentSettings.SaveSettings*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SaveSettings
  nameWithType: IPersistComponentSettings.SaveSettings
- uid: System.Configuration.IPersistComponentSettings.SettingsKey*
  parent: System.Configuration.IPersistComponentSettings
  isExternal: false
  name: SettingsKey
  nameWithType: IPersistComponentSettings.SettingsKey
