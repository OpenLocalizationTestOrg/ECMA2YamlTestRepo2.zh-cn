### YamlMime:ManagedReference
items:
- uid: System.Xml.Xsl.XslCompiledTransform
  id: XslCompiledTransform
  children:
  - System.Xml.Xsl.XslCompiledTransform.#ctor
  - System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)
  - System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.String)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Type)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
  - System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslCompiledTransform.OutputSettings
  - System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  - System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  langs:
  - csharp
  name: XslCompiledTransform
  nameWithType: XslCompiledTransform
  fullName: System.Xml.Xsl.XslCompiledTransform
  type: Class
  summary: "转换使用 XSLT 样式表的 XML 数据。"
  remarks: "XslCompiledTransform 类是支持的 XSLT 1.0 语法的 XSLT 处理器。 它是新实现，并包含性能提升时相比过时的<xref:System.Xml.Xsl.XslTransform>类。</xref:System.Xml.Xsl.XslTransform> XslCompiledTransform 类的结构是非常类似于<xref:System.Xml.Xsl.XslTransform>类。</xref:System.Xml.Xsl.XslTransform> <xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法加载和编译样式表，而<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法执行 XSLT 转换。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>       XSLT 支持`document()`函数以及嵌入式的脚本块默认处于禁用状态。 可以通过创建启用这些功能<xref:System.Xml.Xsl.XsltSettings>对象并将其传递给<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> </xref:System.Xml.Xsl.XsltSettings>       有关详细信息，请参阅[使用 XslCompiledTransform 类](~/add/includes/ajax-current-ext-md.md)和[迁移从 XslTransform 类](~/add/includes/ajax-current-ext-md.md)。      ## 安全注意事项在创建使用 XslCompiledTransform 类的应用程序，你应了解下列项及其含义:-默认情况下禁用 XSLT 脚本。 只有要求脚本支持并且处于完全可信的环境，应启用 XSLT 脚本。      -XSLT`document()`函数在默认情况下处于禁用状态。 如果你启用`document()`函数中，限制可以通过传递访问的资源<xref:System.Xml.XmlSecureResolver>对象传递给<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlSecureResolver>      的默认情况下启用扩展对象。 如果<xref:System.Xml.Xsl.XsltArgumentList>对象，其中包含扩展对象传递给<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法，使用它们。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.Xsl.XsltArgumentList>      -XSLT 样式表可以包括对其他文件以及嵌入式的脚本块的引用。 恶意用户可以利用此方法为您提供数据或样式表，在执行时可能会导致您的系统以处理，直到计算机资源不足。      的在混合的信任环境中运行 XSLT 应用可能会引发样式表欺骗。 例如，恶意用户可以加载包含有害的样式表的对象和交给另一个用户，后者会继续调用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法并执行转换。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       可以通过不启用脚本缓解这些安全问题或`document()`函数除非样式表来自受信任的源，并且不接受 XslCompiledTransform 对象、 XSLT 样式表或 XML 源中受信任的源的数据。"
  example:
  - "The following example executes a transform and outputs to a file.  \n  \n [!code-vb[XslCompiledTransform.Transform#1](~/add/codesnippet/visualbasic/t-system.xml.xsl.xslcomp_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#1](~/add/codesnippet/csharp/t-system.xml.xsl.xslcomp_1.cs)]  \n  \n The sample uses the following two input files:  \n  \n `books.xml`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/t-system.xml.xsl.xslcomp_2.xml)]  \n  \n `output.xsl`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/add/codesnippet/xml/t-system.xml.xsl.xslcomp_3.xsl)]"
  syntax:
    content: public sealed class XslCompiledTransform
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor
  id: '#ctor'
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: XslCompiledTransform()
  nameWithType: XslCompiledTransform.XslCompiledTransform()
  fullName: System.Xml.Xsl.XslCompiledTransform.XslCompiledTransform()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "初始化的新实例<xref href=&quot;System.Xml.Xsl.XslCompiledTransform&quot;></xref>类。"
  syntax:
    content: public XslCompiledTransform ();
    parameters: []
  overload: System.Xml.Xsl.XslCompiledTransform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: XslCompiledTransform(Boolean)
  nameWithType: XslCompiledTransform.XslCompiledTransform(Boolean)
  fullName: System.Xml.Xsl.XslCompiledTransform.XslCompiledTransform(Boolean)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "初始化的新实例<xref href=&quot;System.Xml.Xsl.XslCompiledTransform&quot;></xref>使用指定的调试设置的类。"
  remarks: "以单步执行代码，调试样式表必须满足以下条件:-`enableDebug`参数设置为`true`。      样式表传递给<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法作为一个 URI 或实现<xref:System.Xml.XmlReader>类，该类实现<xref:System.Xml.IXmlLineInfo>接口。</xref:System.Xml.IXmlLineInfo> </xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> <xref:System.Xml.IXmlLineInfo>接口实现上所有的文本分析<xref:System.Xml.XmlReader>对象。</xref:System.Xml.XmlReader> </xref:System.Xml.IXmlLineInfo>           换而言之，如果使用加载样式表<xref:System.Xml.XPath.IXPathNavigable>对象，如<xref:System.Xml.XmlDocument>或<xref:System.Xml.XPath.XPathDocument>，或<xref:System.Xml.XmlReader>不实现的实现<xref:System.Xml.IXmlLineInfo>接口，你无法调试样式表。</xref:System.Xml.IXmlLineInfo> </xref:System.Xml.XmlReader> </xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlDocument> </xref:System.Xml.XPath.IXPathNavigable>      -<xref:System.Xml.XmlResolver>用于加载样式表是基于文件的<xref:System.Xml.XmlResolver>，如<xref:System.Xml.XmlUrlResolver>(这是默认<xref:System.Xml.XmlResolver>由<xref:System.Xml.Xsl.XslCompiledTransform>类)。</xref:System.Xml.Xsl.XslCompiledTransform> </xref:System.Xml.XmlResolver> </xref:System.Xml.XmlUrlResolver> </xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>      样式表是位于本地计算机上，也可以在 intranet 上。"
  example:
  - "The following example shows how to enable XSLT debugging.  \n  \n [!code-vb[XslCompiledTransform.Load#10](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_1_1.vb)]\n [!code-cs[XslCompiledTransform.Load#10](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_1_1.cs)]"
  syntax:
    content: public XslCompiledTransform (bool enableDebug);
    parameters:
    - id: enableDebug
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要生成调试信息;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 此选项设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>使您能够调试样式表与 Microsoft Visual Studio 调试器。"
  overload: System.Xml.Xsl.XslCompiledTransform.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)
  id: CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  nameWithType: XslCompiledTransform.CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  fullName: System.Xml.Xsl.XslCompiledTransform.CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "编译 XSLT 样式表与指定的类型。"
  remarks: "`xsltc.exe`工具是 CompileToType 方法周围的包装器。 编译样式表与`xsltc.exe`将满足大部分利用已编译的样式表使用的应用程序的要求。 生成自定义编译工具时，应使用 CompileToType 方法。"
  syntax:
    content: public static System.CodeDom.Compiler.CompilerErrorCollection CompileToType (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver, bool debug, System.Reflection.Emit.TypeBuilder typeBuilder, string scriptAssemblyPath);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>定位在要编译的样式表的开头。</xref:System.Xml.XmlReader>"
    - id: settings
      type: System.Xml.Xsl.XsltSettings
      description: "<xref href=&quot;System.Xml.Xsl.XsltSettings&quot;> </xref>要应用到样式表。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Xml.Xsl.XsltSettings.Default*>将应用。</xref:System.Xml.Xsl.XsltSettings.Default*>"
    - id: stylesheetResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用于解决中引用的样式表模块<xref uid=&quot;langword_csharp_xsl:import&quot; name=&quot;xsl:import&quot; href=&quot;&quot;></xref>和<xref uid=&quot;langword_csharp_xsl:include&quot; name=&quot;xsl:include&quot; href=&quot;&quot;></xref>元素。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，不能解析外部资源。"
    - id: debug
      type: System.Boolean
      description: "此选项设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>启用与调试器调试样式表。"
    - id: typeBuilder
      type: System.Reflection.Emit.TypeBuilder
      description: "<xref:System.Reflection.Emit.TypeBuilder>用于样式表编译。</xref:System.Reflection.Emit.TypeBuilder> 提供的 TypeBuilder 用于生成结果类型。"
    - id: scriptAssemblyPath
      type: System.String
      description: "为生成的程序集的基路径<xref uid=&quot;langword_csharp_msxsl:script&quot; name=&quot;msxsl:script&quot; href=&quot;&quot;></xref>元素。 如果仅生成了一个脚本程序集，此参数将指定该程序集的路径。 如果多个脚本程序集，特殊的后缀将追加到文件名称，以确保程序集名称的唯一性。"
    return:
      type: System.CodeDom.Compiler.CompilerErrorCollection
      description: "A <xref href=&quot;System.CodeDom.Compiler.CompilerErrorCollection&quot;> </xref>对象，其中包含编译器错误和警告，指示编译的结果。"
  overload: System.Xml.Xsl.XslCompiledTransform.CompileToType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.String)
  id: Load(System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(String)
  nameWithType: XslCompiledTransform.Load(String)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "加载和编译位于指定的 URI 的样式表。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>类支持的 XSLT 1.0 语法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 样式表必须使用`http://www.w3.org/1999/XSL/Transform`命名空间。       此方法具有以下行为:-一个<xref:System.Xml.XmlUrlResolver>无用户凭据用于解析样式表的 URI，并处理所有`xsl:import`或`xsl:include`元素。</xref:System.Xml.XmlUrlResolver>      -An<xref:System.Xml.XmlReader>使用默认设置用于加载样式表。</xref:System.Xml.XmlReader> 在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上禁用 DTD 处理 如果需要 DTD 处理，则创建<xref:System.Xml.XmlReader>启用了此功能后，并将其传递到<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> </xref:System.Xml.XmlReader>      -`document()`函数处于禁用状态。      的不支持嵌入的脚本。       你可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>重载来指定<xref:System.Xml.XmlResolver>使用必要的身份验证的凭据，或指定不同的 XSLT 设置。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.String%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>"
  example:
  - "The following example executes a transform and outputs to a file.  \n  \n [!code-vb[XslCompiledTransform.Transform#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_2_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#1](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_2_1.cs)]"
  syntax:
    content: public void Load (string stylesheetUri);
    parameters:
    - id: stylesheetUri
      type: System.String
      description: "样式表的 URI。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheetUri</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "样式表包含错误。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "找不到样式表。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> stylesheetUri </code>值包括文件名或找不到的目录。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> stylesheetUri </code>值无法解析。       -或者-处理请求时出错。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>stylesheetUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "没有加载样式表分析错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Type)
  id: Load(System.Type)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(Type)
  nameWithType: XslCompiledTransform.Load(Type)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "加载使用创建的已编译的样式表[XSLT 编译器 (xsltc.exe)](~/add/includes/ajax-current-ext-md.md)。"
  remarks: "Xsltc.exe 工具用于编译样式表并从样式表生成程序集。 Load 方法加载程序集中的已编译的样式表。      1> [!NOTE]&1;> 还必须在你的应用程序中包含的 XSLT 程序集作为引用。"
  example:
  - "The following example shows how to load a compiled style sheet from an XSLT assembly. The example assumes that the xsltc.exe tool was used to create an assembly named bookOrders.dll with a class named bookOrders.  \n  \n> [!NOTE]\n>  You have to reference the XSLT assembly when compiling the code. For example, `csc /r:system.dll;system.xml.dll;bookOrders.dll myCode.cs`.  \n  \n```  \n// Load the type of the class.  \nXslCompiledTransform xslt = new XslCompiledTransform();  \nxslt.Load(typeof(bookOrders));  \n```"
  syntax:
    content: public void Load (Type compiledStylesheet);
    parameters:
    - id: compiledStylesheet
      type: System.Type
      description: "包含已编译的样式表的类的名称。       这通常是样式表的名称。 除非另行指定，xsltc.exe 工具将使用类和程序集名称的样式表的名称。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XslCompiledTransform.Load(XmlReader)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "编译<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>中包含的样式表"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>类支持的 XSLT 1.0 语法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 样式表必须使用`http://www.w3.org/1999/XSL/Transform`命名空间。       从当前节点的加载样式表<xref:System.Xml.XmlReader>通过其所有子级。</xref:System.Xml.XmlReader> 这使您要用作样式表文档的一部分。 Load 方法完成后，<xref:System.Xml.XmlReader>样式表末尾后定位到下一个节点。</xref:System.Xml.XmlReader> 如果已到达文档结尾，<xref:System.Xml.XmlReader>将位于文件结尾 (EOF)。</xref:System.Xml.XmlReader>       此方法具有以下行为:-一个<xref:System.Xml.XmlUrlResolver>无用户凭据用于处理任何`xsl:import`或`xsl:include`元素。</xref:System.Xml.XmlUrlResolver>      -`document()`函数处于禁用状态。      的不支持嵌入的脚本。       你可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>重载来指定<xref:System.Xml.XmlResolver>使用必要的身份验证的凭据，或指定不同的 XSLT 设置。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslCompiledTransform.Load%28System.Xml.XmlReader%2CSystem.Xml.Xsl.XsltSettings%2CSystem.Xml.XmlResolver%29>"
  example:
  - "The following example loads a style sheet contained in an <xref:System.Xml.XmlReader> object.  \n  \n [!code-vb[XslCompiledTransform.Load#5](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_4_1.vb)]\n [!code-cs[XslCompiledTransform.Load#5](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_4_1.cs)]"
  syntax:
    content: public void Load (System.Xml.XmlReader stylesheet);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含样式表。</xref:System.Xml.XmlReader>"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheet</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "样式表包含错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)
  id: Load(System.Xml.XPath.IXPathNavigable)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(IXPathNavigable)
  nameWithType: XslCompiledTransform.Load(IXPathNavigable)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(IXPathNavigable)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "编译样式表中包含<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>对象。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>类支持的 XSLT 1.0 语法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 样式表必须使用`http://www.w3.org/1999/XSL/Transform`命名空间。       此方法具有以下行为:-一个<xref:System.Xml.XmlUrlResolver>无用户凭据用于处理任何`xsl:import`或`xsl:include`元素。</xref:System.Xml.XmlUrlResolver>      -`document()`函数处于禁用状态。      的不支持嵌入的脚本。       你可以使用<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>重载来指定<xref:System.Xml.XmlResolver>使用必要的身份验证的凭据，或指定不同的 XSLT 设置。</xref:System.Xml.XmlResolver> </xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>"
  example:
  - "The following example loads a style sheet contained in an <xref:System.Xml.XPath.XPathDocument> object.  \n  \n [!code-vb[XslCompiledTransform.Load#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_3_1.vb)]\n [!code-cs[XslCompiledTransform.Load#1](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_3_1.cs)]"
  syntax:
    content: public void Load (System.Xml.XPath.IXPathNavigable stylesheet);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.IXPathNavigable
      description: "一个对象，实现<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>接口。 在 Microsoft.NET Framework 中，这可能是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含样式表。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheet</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "样式表包含错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
  id: Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(MethodInfo,Byte[],Type[])
  nameWithType: XslCompiledTransform.Load(MethodInfo,Byte[],Type[])
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(MethodInfo,Byte[],Type[])
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "从使用编译的样式表加载方法<xref uid=&quot;langword_csharp_XSLTC.exe&quot; name=&quot;XSLTC.exe&quot; href=&quot;&quot;></xref>实用程序。"
  remarks: "此方法接受形式的已编译的样式表<xref:System.Reflection.MethodInfo>对象、 字节数组和一个类型数组。</xref:System.Reflection.MethodInfo> <xref:System.Reflection.Emit.DynamicMethod>对象可用于允许已编译的样式表方法要被丢弃时<xref:System.Xml.Xsl.XslCompiledTransform>回收对象。</xref:System.Xml.Xsl.XslCompiledTransform></xref:System.Reflection.Emit.DynamicMethod>"
  example:
  - "The code example below uses the Load to load a compiled style sheet. The transformation reduces the value of the `Price` element by ten percent.  \n  \n [!code-cs[XsltDynamicMethodLoad#1](~/add/codesnippet/csharp/3f995c36-b532-490b-a825-_1.cs)]\n [!code-vb[XsltDynamicMethodLoad#1](~/add/codesnippet/visualbasic/3f995c36-b532-490b-a825-_1.vb)]  \n  \n> [!NOTE]\n>  The \"Transform\" assembly used in this example was built using the xsltc.exe utility. For detailed information on using this command line tool, see [How to: Perform an XSLT Transformation by Using an Assembly](~/add/includes/ajax-current-ext-md.md).  \n  \n The code example above uses the following transformation:  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"  \n  xmlns:msxsl=\"urn:schemas-microsoft-com:xslt\"  \n  xmlns:user=\"urn:my-scripts\">  \n  <msxsl:script language=\"C#\" implements-prefix=\"user\">  \n    <![CDATA[  \n  public double modifyPrice(double price){  \n    price*=0.9;  \n    return price;  \n  }  \n  ]]>  \n  </msxsl:script>  \n  <xsl:template match=\"Root\">  \n    <Root xmlns=\"\">  \n      <Price><xsl:value-of select=\"user:modifyPrice(Price)\"/></Price>  \n    </Root>  \n  </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public void Load (System.Reflection.MethodInfo executeMethod, byte[] queryData, Type[] earlyBoundTypes);
    parameters:
    - id: executeMethod
      type: System.Reflection.MethodInfo
      description: "A<xref:System.Reflection.MethodInfo>对象，它表示由编译器生成`execute`的已编译的样式表的方法。</xref:System.Reflection.MethodInfo>"
    - id: queryData
      type: System.Byte[]
      description: "序列化数据的字节数组结构中`staticData`字段的已编译的样式表生成<xref:System.Xml.Xsl.XslCompiledTransform.CompileToType*>方法。</xref:System.Xml.Xsl.XslCompiledTransform.CompileToType*>"
    - id: earlyBoundTypes
      type: System.Type[]
      description: "存储在由编译器生成的类型数组`ebTypes`字段的已编译的样式表。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  id: Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(String,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(String,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(String,XsltSettings,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "加载和编译 URI 指定的 XSLT 样式表。 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>解析任何 XSLT`import`或`include`元素和 XSLT 设置确定的样式表的权限。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>类支持的 XSLT 1.0 语法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 样式表必须使用`http://www.w3.org/1999/XSL/Transform`命名空间。       <xref:System.Xml.XmlReader>使用默认设置用于加载样式表。</xref:System.Xml.XmlReader> 在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上禁用 DTD 处理 如果需要 DTD 处理，则创建<xref:System.Xml.XmlReader>启用了此功能后，并将其传递到<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> </xref:System.Xml.XmlReader>"
  example:
  - "The following example loads a style sheet that is stored on a network resource. An <xref:System.Xml.XmlSecureResolver> object specifies the credentials necessary to access the style sheet.  \n  \n [!code-vb[XslCompiledTransform.Load#2](~/add/codesnippet/visualbasic/7ddc7420-1fde-47dd-8fb0-_1.vb)]\n [!code-cs[XslCompiledTransform.Load#2](~/add/codesnippet/csharp/7ddc7420-1fde-47dd-8fb0-_1.cs)]"
  syntax:
    content: public void Load (string stylesheetUri, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);
    parameters:
    - id: stylesheetUri
      type: System.String
      description: "样式表的 URI。"
    - id: settings
      type: System.Xml.Xsl.XsltSettings
      description: "<xref href=&quot;System.Xml.Xsl.XsltSettings&quot;> </xref>将应用于样式表。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Xml.Xsl.XsltSettings.Default*>应用设置。</xref:System.Xml.Xsl.XsltSettings.Default*>"
    - id: stylesheetResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用于解析样式表 URI 和在 XSLT 中引用的任何样式表`import`和`include`元素。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheetUri</code> or <code>stylesheetResolver</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "样式表包含错误。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "找不到样式表。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> stylesheetUri </code>值包括文件名或找不到的目录。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> stylesheetUri </code>值无法解析。       -或者-处理请求时出错。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>stylesheetUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "没有加载样式表分析错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  id: Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(XmlReader,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(XmlReader,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(XmlReader,XsltSettings,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "编译<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>中包含的 XSLT 样式表 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>解析任何 XSLT`import`或`include`元素和 XSLT 设置确定的样式表的权限。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>类支持的 XSLT 1.0 语法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 样式表必须使用`http://www.w3.org/1999/XSL/Transform`命名空间。       从当前节点的加载样式表<xref:System.Xml.XmlReader>通过其所有子级。</xref:System.Xml.XmlReader> 这使您要用作样式表文档的一部分。 后<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法完成时，<xref:System.Xml.XmlReader>样式表末尾后定位到下一个节点。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 如果已到达文档结尾，<xref:System.Xml.XmlReader>将位于文件结尾 (EOF)。</xref:System.Xml.XmlReader>"
  example:
  - "The following example loads a style sheet and enables support for XSLT scripting.  \n  \n [!code-vb[XslCompiledTransform.Load#3](~/add/codesnippet/visualbasic/ec76ab0a-8bf0-415f-87c6-_1.vb)]\n [!code-cs[XslCompiledTransform.Load#3](~/add/codesnippet/csharp/ec76ab0a-8bf0-415f-87c6-_1.cs)]"
  syntax:
    content: public void Load (System.Xml.XmlReader stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);
    parameters:
    - id: stylesheet
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含样式表。</xref:System.Xml.XmlReader>"
    - id: settings
      type: System.Xml.Xsl.XsltSettings
      description: "<xref href=&quot;System.Xml.Xsl.XsltSettings&quot;> </xref>将应用于样式表。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Xml.Xsl.XsltSettings.Default*>应用设置。</xref:System.Xml.Xsl.XsltSettings.Default*>"
    - id: stylesheetResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用于解析在 XSLT 中引用的所有样式表`import`和`include`元素。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，则不解析外部资源。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheet</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "样式表包含错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  id: Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Load(IXPathNavigable,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(IXPathNavigable,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(IXPathNavigable,XsltSettings,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "编译 XSLT 样式表中包含<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;> </xref>。 <xref href=&quot;System.Xml.XmlResolver&quot;> </xref>解析任何 XSLT`import`或`include`元素和 XSLT 设置确定的样式表的权限。"
  remarks: "<xref:System.Xml.Xsl.XslCompiledTransform>类支持的 XSLT 1.0 语法。</xref:System.Xml.Xsl.XslCompiledTransform> XSLT 样式表必须使用`http://www.w3.org/1999/XSL/Transform`命名空间。"
  example:
  - "The following example loads a style sheet. The <xref:System.Xml.XmlSecureResolver> object contains the credentials necessary to access any `import` or `include` elements found in the style sheet.  \n  \n [!code-vb[XslCompiledTransform.Load#4](~/add/codesnippet/visualbasic/8f1118cc-2b51-4727-9f95-_1.vb)]\n [!code-cs[XslCompiledTransform.Load#4](~/add/codesnippet/csharp/8f1118cc-2b51-4727-9f95-_1.cs)]"
  syntax:
    content: public void Load (System.Xml.XPath.IXPathNavigable stylesheet, System.Xml.Xsl.XsltSettings settings, System.Xml.XmlResolver stylesheetResolver);
    parameters:
    - id: stylesheet
      type: System.Xml.XPath.IXPathNavigable
      description: "一个对象，实现<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>接口。 在 Microsoft.NET Framework 中，这可能是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含样式表。"
    - id: settings
      type: System.Xml.Xsl.XsltSettings
      description: "<xref href=&quot;System.Xml.Xsl.XsltSettings&quot;> </xref>将应用于样式表。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Xml.Xsl.XsltSettings.Default*>应用设置。</xref:System.Xml.Xsl.XsltSettings.Default*>"
    - id: stylesheetResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用于解析在 XSLT 中引用的所有样式表`import`和`include`元素。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，则不解析外部资源。"
  overload: System.Xml.Xsl.XslCompiledTransform.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stylesheet</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "样式表包含错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.OutputSettings
  id: OutputSettings
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: OutputSettings
  nameWithType: XslCompiledTransform.OutputSettings
  fullName: System.Xml.Xsl.XslCompiledTransform.OutputSettings
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "获取<xref:System.Xml.XmlWriterSettings>包含的输出信息的对象派生自`xsl:output`元素的样式表。</xref:System.Xml.XmlWriterSettings>"
  remarks: "此属性填充后成功调用<xref:System.Xml.Xsl.XslCompiledTransform.Load%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load%2A> 它包含派生自的信息`xsl:output`的已编译的样式表的元素。 这<xref:System.Xml.XmlWriterSettings>可以将对象传递给<xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName>方法来创建<xref:System.Xml.XmlWriter>你想要输出的对象。</xref:System.Xml.XmlWriter> </xref:System.Xml.XmlWriter.Create%2A?displayProperty=fullName> </xref:System.Xml.XmlWriterSettings>"
  example:
  - "The following example shows how to use the OutputSettings property to create an <xref:System.Xml.XmlWriter> object that writes text to the console.  \n  \n [!code-vb[XslCompiledTransform.OutputSettings#1](~/add/codesnippet/visualbasic/p-system.xml.xsl.xslcomp_1_1.vb)]\n [!code-cs[XslCompiledTransform.OutputSettings#1](~/add/codesnippet/csharp/p-system.xml.xsl.xslcomp_1_1.cs)]  \n  \n The example uses the `books.xml` and `outputConsole.xsl` files as input.  \n  \n `books.xml`  \n  \n [!code-xml[XslCompiledTransform.OutputSettings#2](~/add/codesnippet/xml/p-system.xml.xsl.xslcomp_1_2.xml)]  \n  \n `outputConsole.xsl`  \n  \n [!code-xml[XslCompiledTransform.OutputSettings#3](~/add/codesnippet/xml/p-system.xml.xsl.xslcomp_1_3.xsl)]"
  syntax:
    content: public System.Xml.XmlWriterSettings OutputSettings { get; }
    return:
      type: System.Xml.XmlWriterSettings
      description: "只读<xref:System.Xml.XmlWriterSettings>包含的输出信息的对象派生自`xsl:output`元素的样式表。</xref:System.Xml.XmlWriterSettings> 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Xsl.XslCompiledTransform.OutputSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
  id: TemporaryFiles
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: TemporaryFiles
  nameWithType: XslCompiledTransform.TemporaryFiles
  fullName: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "获取<xref href=&quot;System.CodeDom.Compiler.TempFileCollection&quot;> </xref> ，其中包含在磁盘上成功调用到后生成的临时文件<xref:System.Xml.Xsl.XslCompiledTransform.Load*>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Load*>"
  remarks: "此属性将标识 XSLT 期间生成的文件处理。 文件放置在 Temp 目录 （由 %TEMP%环境变量指定） 你可以删除这些文件，XSLT 处理完成后。"
  example:
  - "The following example writes the names of temporary files to the console.  \n  \n> [!NOTE]\n>  Temporary files are created only when loading style sheets with \\<msxsl:script> blocks.  \n  \n [!code-vb[XslCompiledTransform.Transform#8](~/add/codesnippet/visualbasic/p-system.xml.xsl.xslcomp_0_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#8](~/add/codesnippet/csharp/p-system.xml.xsl.xslcomp_0_1.cs)]"
  syntax:
    content: public System.CodeDom.Compiler.TempFileCollection TemporaryFiles { get; }
    return:
      type: System.CodeDom.Compiler.TempFileCollection
      description: "<xref href=&quot;System.CodeDom.Compiler.TempFileCollection&quot;> </xref> ，其中包含在磁盘上生成的临时文件。 此值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref:System.Xml.Xsl.XslCompiledTransform.Load*>尚未成功调用方法，或如果尚未启用调试。</xref:System.Xml.Xsl.XslCompiledTransform.Load*>"
  overload: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)
  id: Transform(System.String,System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,String)
  nameWithType: XslCompiledTransform.Transform(String,String)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 指定的输入的文档执行转换，并输出结果保存到文件。"
  remarks: "此方法使用默认<xref:System.Xml.XmlUrlResolver>若要解决的输入和输出文档没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果任何这些资源都位于需要身份验证的网络资源，请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>使用默认设置用于加载输入的文档。</xref:System.Xml.XmlReader> 在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上禁用 DTD 处理 如果需要 DTD 处理，则创建<xref:System.Xml.XmlReader>启用了此功能后，并将其传递到<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>"
  example:
  - "The following example executes a transform and outputs to a file.  \n  \n [!code-vb[XslCompiledTransform.Transform#1](~/add/codesnippet/visualbasic/m-system.xml.xsl.xslcomp_0_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#1](~/add/codesnippet/csharp/m-system.xml.xsl.xslcomp_0_1.cs)]  \n  \n The sample uses the following two input files:  \n  \n `books.xml`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#2](~/add/codesnippet/xml/m-system.xml.xsl.xslcomp_0_2.xml)]  \n  \n `output.xsl`  \n  \n [!code-xml[Classic WebData XslTransform.Transform7 Example#3](~/add/codesnippet/xml/m-system.xml.xsl.xslcomp_0_3.xsl)]"
  syntax:
    content: public void Transform (string inputUri, string resultsFile);
    parameters:
    - id: inputUri
      type: System.String
      description: "输入文档的 URI。"
    - id: resultsFile
      type: System.String
      description: "输出文件的 URI。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>resultsFile</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "找不到输入的文档。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputUri </code>或<code> resultsFile </code>值包含的文件名或找不到目录。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>或<code> resultsFile </code>值无法解析。       -或者-处理请求时出错"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>或<code>resultsFile</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "没有加载的输入的文档分析错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)
  id: Transform(System.String,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(String,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 指定的输入的文档执行转换，并输出到<xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter>结果"
  remarks: "此方法使用默认<xref:System.Xml.XmlUrlResolver>没有用户凭据以解析输入的文档和 XSLT 的任何实例`document()`函数在样式表中找到。</xref:System.Xml.XmlUrlResolver> 如果任何这些资源都位于需要身份验证的网络资源，请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>使用默认设置用于加载输入的文档。</xref:System.Xml.XmlReader> 在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上禁用 DTD 处理 如果需要 DTD 处理，则创建<xref:System.Xml.XmlReader>启用了此功能后，并将其传递到<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>       此方法不支持`xsl:strip-space`元素。 如果你已编译的样式表包含`xsl:strip-space`元素，则必须使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>重载此方法采用<xref:System.Xml.XmlReader>作为输入参数。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>"
  example:
  - "The following example executes an XSLT transformation and outputs to an <xref:System.Xml.XmlWriter> object.  \n  \n [!code-vb[XslCompiledTransform.Transform#2](~/add/codesnippet/visualbasic/1a837310-9fde-4a29-a77e-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#2](~/add/codesnippet/csharp/1a837310-9fde-4a29-a77e-_1.cs)]"
  syntax:
    content: public void Transform (string inputUri, System.Xml.XmlWriter results);
    parameters:
    - id: inputUri
      type: System.String
      description: "输入文档的 URI。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>要输出到。</xref:System.Xml.XmlWriter>       如果样式表包含`xsl:output`元素，则应创建<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>从返回的对象<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>属性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 这样可确保<xref:System.Xml.XmlWriter>具有正确的输出设置。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputUri </code>值包含的文件名或找不到目录。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>值无法解析。       -或者-处理请求时出错。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "没有加载的输入的文档分析错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
  id: Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的<xref:System.Xml.XmlReader>对象，并将结果输出到<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter></xref:System.Xml.XmlReader>的输入的文档执行转换"
  remarks: "如果 XSLT`document()`启用功能，则会得到解决使用<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果需要身份验证的网络资源位于外部的资源，则请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>"
  example:
  - "The following example transforms the first book in the books.xml file.  \n  \n [!code-vb[XslCompiledTransform.Transform#7](~/add/codesnippet/visualbasic/e9e9dd2b-fa70-4f3f-9037-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#7](~/add/codesnippet/csharp/e9e9dd2b-fa70-4f3f-9037-_1.cs)]"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.XmlWriter results);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含的输入的文档。</xref:System.Xml.XmlReader>"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>要输出到。</xref:System.Xml.XmlWriter>       如果样式表包含`xsl:output`元素，则应创建<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>从返回的对象<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>属性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 这样可确保<xref:System.Xml.XmlWriter>具有正确的输出设置。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的输入的文档执行转换<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>对象，并将结果输出到<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter>"
  remarks: "如果 XSLT`document()`启用功能，则会得到解决使用<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果需要身份验证的网络资源位于外部的资源，则请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       此方法不支持`xsl:strip-space`元素。 如果你已编译的样式表包含`xsl:strip-space`元素，则必须使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>重载此方法采用<xref:System.Xml.XmlReader>作为输入参数。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       <xref:System.Xml.XPath.IXPathNavigable>中实现接口<xref:System.Xml.XmlNode>和<xref:System.Xml.XPath.XPathDocument>类。</xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlNode> </xref:System.Xml.XPath.IXPathNavigable> 这些类表示内存中缓存的 XML 数据。      -<xref:System.Xml.XmlNode>类基于 W3C 文档对象模型 (DOM)，并具有编辑功能。</xref:System.Xml.XmlNode>      -<xref:System.Xml.XPath.XPathDocument>类是基于 XPath 数据模型的只读数据存储。</xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XPath.XPathDocument>正在处理 xslt 建议使用的类。</xref:System.Xml.XPath.XPathDocument> 它提供更快的性能时相比<xref:System.Xml.XmlNode>类。</xref:System.Xml.XmlNode>       转换将应用于整个文档。 换而言之，如果您传入文档根节点以外的一个节点，则这不会阻止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个仅包含节点片段，并将该对象传递给转换方法。 有关详细信息，请参阅[如何︰ 转换节点片断](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example executes an XSLT transformation and outputs to an <xref:System.Xml.XmlWriter> object.  \n  \n [!code-vb[XslCompiledTransform.Transform#5](~/add/codesnippet/visualbasic/58ce38a1-de5d-405a-b8cb-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#5](~/add/codesnippet/csharp/58ce38a1-de5d-405a-b8cb-_1.cs)]"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.XmlWriter results);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "一个对象，实现<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>接口。 在 Microsoft.NET Framework 中，这可能是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要转换的数据。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>要输出到。</xref:System.Xml.XmlWriter>       如果样式表包含`xsl:output`元素，则应创建<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>从返回的对象<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>属性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 这样可确保<xref:System.Xml.XmlWriter>具有正确的输出设置。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  id: Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 指定的输入的文档执行转换，并输出结果进行流式处理。 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量。"
  remarks: "此方法使用默认<xref:System.Xml.XmlUrlResolver>没有用户凭据以解析输入的文档和 XSLT 的任何实例`document()`函数在样式表中找到。</xref:System.Xml.XmlUrlResolver> 如果任何这些资源都位于需要身份验证的网络资源，请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>使用默认设置用于加载输入的文档。</xref:System.Xml.XmlReader> 在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上禁用 DTD 处理 如果需要 DTD 处理，则创建<xref:System.Xml.XmlReader>启用了此功能后，并将其传递到<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>"
  syntax:
    content: public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);
    parameters:
    - id: inputUri
      type: System.String
      description: "输入文档的 URI。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.Stream
      description: "你想要输出流。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputUri </code>值包含的文件名或找不到目录。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>值无法解析。       -或者-处理请求时出错"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "没有加载的输入的文档分析错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  id: Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 指定的输入的文档执行转换，并将结果输出到一种<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter>"
  remarks: "此方法使用默认<xref:System.Xml.XmlUrlResolver>没有用户凭据以解析输入的文档和 XSLT 的任何实例`document()`函数在样式表中找到。</xref:System.Xml.XmlUrlResolver> 如果任何这些资源都位于需要身份验证的网络资源，请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>使用默认设置用于加载输入的文档。</xref:System.Xml.XmlReader> 在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上禁用 DTD 处理 如果需要 DTD 处理，则创建<xref:System.Xml.XmlReader>启用了此功能后，并将其传递到<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>"
  example:
  - "The following example executes an XSLT transformation and outputs a string.  \n  \n [!code-vb[XslCompiledTransform.Transform#3](~/add/codesnippet/visualbasic/50b87a05-12d4-4637-9d7e-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#3](~/add/codesnippet/csharp/50b87a05-12d4-4637-9d7e-_1.cs)]"
  syntax:
    content: public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);
    parameters:
    - id: inputUri
      type: System.String
      description: "输入文档的 URI。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>要输出到。</xref:System.IO.TextWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputUri </code>值包含的文件名或找不到目录。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>值无法解析。       -或者-处理请求时出错"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "没有加载的输入的文档分析错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  id: Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(String,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用 URI 指定的输入的文档执行转换，并输出到<xref:System.Xml.XmlWriter>。</xref:System.Xml.XmlWriter>结果 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量。"
  remarks: "此方法使用默认<xref:System.Xml.XmlUrlResolver>没有用户凭据以解析输入的文档和 XSLT 的任何实例`document()`函数在样式表中找到。</xref:System.Xml.XmlUrlResolver> 如果任何这些资源都位于需要身份验证的网络资源，请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       <xref:System.Xml.XmlReader>使用默认设置用于加载输入的文档。</xref:System.Xml.XmlReader> 在<xref:System.Xml.XmlReader>.</xref:System.Xml.XmlReader>上禁用 DTD 处理 如果需要 DTD 处理，则创建<xref:System.Xml.XmlReader>启用了此功能后，并将其传递到<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>方法。</xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> </xref:System.Xml.XmlReader>"
  example:
  - "The following example uses an <xref:System.Xml.Xsl.XsltArgumentList> object to create a parameter representing the current date and time.  \n  \n [!code-vb[XsltArgumentList.AddParam#1](~/add/codesnippet/visualbasic/614c84d5-4852-4d05-913d-_1.vb)]\n [!code-cs[XsltArgumentList.AddParam#1](~/add/codesnippet/csharp/614c84d5-4852-4d05-913d-_1.cs)]  \n  \n The example uses the following two data files as input.  \n  \n order.xml  \n  \n [!code-xml[XsltArgumentList.AddParam#2](~/add/codesnippet/xml/614c84d5-4852-4d05-913d-_2.xml)]  \n  \n order.xsl  \n  \n [!code-xml[XsltArgumentList.AddParam#3](~/add/codesnippet/xml/614c84d5-4852-4d05-913d-_3.xsl)]"
  syntax:
    content: public void Transform (string inputUri, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);
    parameters:
    - id: inputUri
      type: System.String
      description: "输入文档的 URI。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>要输出到。</xref:System.Xml.XmlWriter>       如果样式表包含`xsl:output`元素，则应创建<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>从返回的对象<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>属性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 这样可确保<xref:System.Xml.XmlWriter>具有正确的输出设置。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputUri</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  - type: System.IO.DirectoryNotFoundException
    commentId: T:System.IO.DirectoryNotFoundException
    description: "<code> inputtUri </code>值包含的文件名或找不到目录。"
  - type: System.Net.WebException
    commentId: T:System.Net.WebException
    description: "<code> inputUri </code>值无法解析。       -或者-处理请求时出错。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "<code>inputUri</code>不是有效的 URI。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "没有加载的输入的文档分析错误。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  id: Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的输入的文档执行转换<xref:System.Xml.XmlReader>对象，并将结果输出到流。</xref:System.Xml.XmlReader> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量。"
  remarks: "如果样式表包含 XSLT`document()`函数，它是解决使用<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果需要身份验证的网络资源位于外部的资源，则请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含的输入的文档。</xref:System.Xml.XmlReader>"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.Stream
      description: "你想要输出流。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  id: Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的<xref:System.Xml.XmlReader>对象，并将结果输出到一种<xref:System.IO.TextWriter>。</xref:System.IO.TextWriter></xref:System.Xml.XmlReader>的输入的文档执行转换 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量。"
  remarks: "如果样式表包含 XSLT`document()`函数，它是解决使用<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果需要身份验证的网络资源位于外部的资源，则请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含的输入的文档。</xref:System.Xml.XmlReader>"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>要输出到。</xref:System.IO.TextWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  id: Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的<xref:System.Xml.XmlReader>对象，并将结果输出到<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter></xref:System.Xml.XmlReader>的输入的文档执行转换 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量。"
  remarks: "如果样式表包含 XSLT`document()`函数，它是解决使用<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果需要身份验证的网络资源位于外部的资源，则请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含的输入的文档。</xref:System.Xml.XmlReader>"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>要输出到。</xref:System.Xml.XmlWriter>       如果样式表包含`xsl:output`元素，则应创建<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>从返回的对象<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>属性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 这样可确保<xref:System.Xml.XmlWriter>具有正确的输出设置。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的输入的文档执行转换<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>对象，并将结果输出到流。 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量。"
  remarks: "如果 XSLT`document()`启用功能，则会得到解决使用<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果需要身份验证的网络资源位于外部的资源，则请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       此方法不支持`xsl:strip-space`元素。 如果你已编译的样式表包含`xsl:strip-space`元素，则必须使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>重载此方法采用<xref:System.Xml.XmlReader>作为输入参数。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       <xref:System.Xml.XPath.IXPathNavigable>中实现接口<xref:System.Xml.XmlNode>和<xref:System.Xml.XPath.XPathDocument>类。</xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlNode> </xref:System.Xml.XPath.IXPathNavigable> 这些类表示内存中缓存的 XML 数据。      -<xref:System.Xml.XmlNode>类基于 W3C 文档对象模型 (DOM)，并具有编辑功能。</xref:System.Xml.XmlNode>      -<xref:System.Xml.XPath.XPathDocument>类是基于 XPath 数据模型的只读数据存储。</xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XPath.XPathDocument>正在处理 xslt 建议使用的类。</xref:System.Xml.XPath.XPathDocument> 它提供更快的性能时相比<xref:System.Xml.XmlNode>类。</xref:System.Xml.XmlNode>       转换将应用于整个文档。 换而言之，如果您传入文档根节点以外的一个节点，则这不会阻止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个仅包含节点片段，并将该对象传递给转换方法。 有关详细信息，请参阅[如何︰ 转换节点片断](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example executes an XSLT transformation and outputs to a <xref:System.IO.FileStream>.  \n  \n [!code-vb[XslCompiledTransform.Transform#6](~/add/codesnippet/visualbasic/83a14379-9d60-4f40-a273-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#6](~/add/codesnippet/csharp/83a14379-9d60-4f40-a273-_1.cs)]"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.Stream results);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "一个对象，实现<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>接口。 在 Microsoft.NET Framework 中，这可能是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要转换的数据。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.Stream
      description: "你想要输出流。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的输入的文档执行转换<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>对象，并将结果输出到<xref:System.IO.TextWriter>.</xref:System.IO.TextWriter> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量。"
  remarks: "如果 XSLT`document()`启用功能，则会得到解决使用<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果需要身份验证的网络资源位于外部的资源，则请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       此方法不支持`xsl:strip-space`元素。 如果你已编译的样式表包含`xsl:strip-space`元素，则必须使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>重载此方法采用<xref:System.Xml.XmlReader>作为输入参数。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       <xref:System.Xml.XPath.IXPathNavigable>中实现接口<xref:System.Xml.XmlNode>和<xref:System.Xml.XPath.XPathDocument>类。</xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlNode> </xref:System.Xml.XPath.IXPathNavigable> 这些类表示内存中缓存的 XML 数据。      -<xref:System.Xml.XmlNode>类基于 W3C 文档对象模型 (DOM)，并具有编辑功能。</xref:System.Xml.XmlNode>      -<xref:System.Xml.XPath.XPathDocument>类是基于 XPath 数据模型的只读数据存储。</xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XPath.XPathDocument>正在处理 xslt 建议使用的类。</xref:System.Xml.XPath.XPathDocument> 它提供更快的性能时相比<xref:System.Xml.XmlNode>类。</xref:System.Xml.XmlNode>       转换将应用于整个文档。 换而言之，如果您传入文档根节点以外的一个节点，则这不会阻止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个仅包含节点片段，并将该对象传递给转换方法。 有关详细信息，请参阅[如何︰ 转换节点片断](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.IO.TextWriter results);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "一个对象，实现<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>接口。 在 Microsoft.NET Framework 中，这可能是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要转换的数据。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.IO.TextWriter
      description: "<xref:System.IO.TextWriter>要输出到。</xref:System.IO.TextWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的输入的文档执行转换<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>对象，并将结果输出到<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量。"
  remarks: "如果 XSLT`document()`启用功能，则会得到解决使用<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver> 如果需要身份验证的网络资源位于外部的资源，则请使用采用的重载<xref:System.Xml.XmlResolver>作为其自变量之一并指定<xref:System.Xml.XmlResolver>使用必要的凭据。</xref:System.Xml.XmlResolver> </xref:System.Xml.XmlResolver>       此方法不支持`xsl:strip-space`元素。 如果你已编译的样式表包含`xsl:strip-space`元素，则必须使用<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>重载此方法采用<xref:System.Xml.XmlReader>作为输入参数。</xref:System.Xml.XmlReader> </xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>       <xref:System.Xml.XPath.IXPathNavigable>中实现接口<xref:System.Xml.XmlNode>和<xref:System.Xml.XPath.XPathDocument>类。</xref:System.Xml.XPath.XPathDocument> </xref:System.Xml.XmlNode> </xref:System.Xml.XPath.IXPathNavigable> 这些类表示内存中缓存的 XML 数据。      -<xref:System.Xml.XmlNode>类基于 W3C 文档对象模型 (DOM)，并具有编辑功能。</xref:System.Xml.XmlNode>      -<xref:System.Xml.XPath.XPathDocument>类是基于 XPath 数据模型的只读数据存储。</xref:System.Xml.XPath.XPathDocument> <xref:System.Xml.XPath.XPathDocument>正在处理 xslt 建议使用的类。</xref:System.Xml.XPath.XPathDocument> 它提供更快的性能时相比<xref:System.Xml.XmlNode>类。</xref:System.Xml.XmlNode>       转换将应用于整个文档。 换而言之，如果您传入文档根节点以外的一个节点，则这不会阻止转换进程访问已加载文档的所有节点。 若要转换节点片段，必须创建一个仅包含节点片段，并将该对象传递给转换方法。 有关详细信息，请参阅[如何︰ 转换节点片断](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "一个对象，实现<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>接口。 在 Microsoft.NET Framework 中，这可能是<xref href=&quot;System.Xml.XmlNode&quot;> </xref> (通常<xref href=&quot;System.Xml.XmlDocument&quot;> </xref>)，或<xref href=&quot;System.Xml.XPath.XPathDocument&quot;></xref>包含要转换的数据。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>要输出到。</xref:System.Xml.XmlWriter>       如果样式表包含`xsl:output`元素，则应创建<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>从返回的对象<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>属性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 这样可确保<xref:System.Xml.XmlWriter>具有正确的输出设置。</xref:System.Xml.XmlWriter>"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  id: Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "使用指定的<xref:System.Xml.XmlReader>对象，并将结果输出到<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter></xref:System.Xml.XmlReader>的输入的文档执行转换 <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量并 XmlResolver 解析 XSLT`document()`函数。"
  remarks: ''
  example:
  - "The following example uses an <xref:System.Xml.XmlSecureResolver> to resolve the XSLT `document()` function.  \n  \n [!code-vb[XslCompiledTransform.Transform#4](~/add/codesnippet/visualbasic/c36dd9c6-36bd-4274-9e59-_1.vb)]\n [!code-cs[XslCompiledTransform.Transform#4](~/add/codesnippet/csharp/c36dd9c6-36bd-4274-9e59-_1.cs)]"
  syntax:
    content: public void Transform (System.Xml.XmlReader input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);
    parameters:
    - id: input
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>包含的输入的文档。</xref:System.Xml.XmlReader>"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>包含作为输入的转换使用的命名空间限定的自变量。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>要输出到。</xref:System.Xml.XmlWriter>       如果样式表包含`xsl:output`元素，则应创建<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>从返回的对象<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>属性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 这样可确保<xref:System.Xml.XmlWriter>具有正确的输出设置。</xref:System.Xml.XmlWriter>"
    - id: documentResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用于解析 XSLT`document()`函数。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、`document()`函数未得到解决。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>input</code> or <code>results</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.Xsl.XsltException
    commentId: T:System.Xml.Xsl.XsltException
    description: "执行 XSLT 转换时出错。"
  platform:
  - net462
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  id: Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  langs:
  - csharp
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "通过使用指定的输入的文档执行转换<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>对象，并将结果输出到<xref:System.Xml.XmlWriter>.</xref:System.Xml.XmlWriter> <xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>提供其他运行时自变量和<xref href=&quot;System.Xml.XmlResolver&quot;></xref>解析 XSLT <xref uid=&quot;langword_csharp_document()&quot; name=&quot;document()&quot; href=&quot;&quot;> </xref>函数。"
  syntax:
    content: public void Transform (System.Xml.XPath.IXPathNavigable input, System.Xml.Xsl.XsltArgumentList arguments, System.Xml.XmlWriter results, System.Xml.XmlResolver documentResolver);
    parameters:
    - id: input
      type: System.Xml.XPath.IXPathNavigable
      description: "通过指定要转换的文档<xref href=&quot;System.Xml.XPath.IXPathNavigable&quot;></xref>对象。"
    - id: arguments
      type: System.Xml.Xsl.XsltArgumentList
      description: "作为自变量列表<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>。"
    - id: results
      type: System.Xml.XmlWriter
      description: "<xref:System.Xml.XmlWriter>要输出到。</xref:System.Xml.XmlWriter>       如果样式表包含<xref uid=&quot;langword_csharp_xsl:output&quot; name=&quot;xsl:output&quot; href=&quot;&quot;></xref>元素，则应创建<xref:System.Xml.XmlWriter>使用<xref:System.Xml.XmlWriterSettings>从返回的对象<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*>属性。</xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings*> </xref:System.Xml.XmlWriterSettings> </xref:System.Xml.XmlWriter> 这样可确保<xref:System.Xml.XmlWriter>具有正确的输出设置。</xref:System.Xml.XmlWriter>"
    - id: documentResolver
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用于解析 XSLT <xref uid=&quot;langword_csharp_document()&quot; name=&quot;document()&quot; href=&quot;&quot;> </xref>函数。 如果这是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、 <xref uid=&quot;langword_csharp_document()&quot; name=&quot;document()&quot; href=&quot;&quot;> </xref>函数未得到解决。"
  overload: System.Xml.Xsl.XslCompiledTransform.Transform*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xml.Xsl.XsltException
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltException
  nameWithType: XsltException
  fullName: System.Xml.Xsl.XsltException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.IO.DirectoryNotFoundException
  isExternal: true
  name: System.IO.DirectoryNotFoundException
- uid: System.Net.WebException
  isExternal: true
  name: System.Net.WebException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: XslCompiledTransform()
  nameWithType: XslCompiledTransform.XslCompiledTransform()
  fullName: System.Xml.Xsl.XslCompiledTransform.XslCompiledTransform()
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor(System.Boolean)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: XslCompiledTransform(Boolean)
  nameWithType: XslCompiledTransform.XslCompiledTransform(Boolean)
  fullName: System.Xml.Xsl.XslCompiledTransform.XslCompiledTransform(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Xsl.XslCompiledTransform.CompileToType(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver,System.Boolean,System.Reflection.Emit.TypeBuilder,System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  nameWithType: XslCompiledTransform.CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
  fullName: System.Xml.Xsl.XslCompiledTransform.CompileToType(XmlReader,XsltSettings,XmlResolver,Boolean,TypeBuilder,String)
- uid: System.CodeDom.Compiler.CompilerErrorCollection
  parent: System.CodeDom.Compiler
  isExternal: false
  name: CompilerErrorCollection
  nameWithType: CompilerErrorCollection
  fullName: System.CodeDom.Compiler.CompilerErrorCollection
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Xsl.XsltSettings
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltSettings
  nameWithType: XsltSettings
  fullName: System.Xml.Xsl.XsltSettings
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Reflection.Emit.TypeBuilder
  parent: System.Reflection.Emit
  isExternal: true
  name: TypeBuilder
  nameWithType: TypeBuilder
  fullName: System.Reflection.Emit.TypeBuilder
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(String)
  nameWithType: XslCompiledTransform.Load(String)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(String)
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Type)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(Type)
  nameWithType: XslCompiledTransform.Load(Type)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XslCompiledTransform.Load(XmlReader)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(XmlReader)
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(IXPathNavigable)
  nameWithType: XslCompiledTransform.Load(IXPathNavigable)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(IXPathNavigable)
- uid: System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: false
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Reflection.MethodInfo,System.Byte[],System.Type[])
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(MethodInfo,Byte[],Type[])
  nameWithType: XslCompiledTransform.Load(MethodInfo,Byte[],Type[])
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(MethodInfo,Byte[],Type[])
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.String,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(String,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(String,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(String,XsltSettings,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XmlReader,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(XmlReader,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(XmlReader,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(XmlReader,XsltSettings,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.Load(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltSettings,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load(IXPathNavigable,XsltSettings,XmlResolver)
  nameWithType: XslCompiledTransform.Load(IXPathNavigable,XsltSettings,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Load(IXPathNavigable,XsltSettings,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.OutputSettings
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: OutputSettings
  nameWithType: XslCompiledTransform.OutputSettings
  fullName: System.Xml.Xsl.XslCompiledTransform.OutputSettings
- uid: System.Xml.XmlWriterSettings
  parent: System.Xml
  isExternal: true
  name: XmlWriterSettings
  nameWithType: XmlWriterSettings
  fullName: System.Xml.XmlWriterSettings
- uid: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: TemporaryFiles
  nameWithType: XslCompiledTransform.TemporaryFiles
  fullName: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles
- uid: System.CodeDom.Compiler.TempFileCollection
  parent: System.CodeDom.Compiler
  isExternal: false
  name: TempFileCollection
  nameWithType: TempFileCollection
  fullName: System.CodeDom.Compiler.TempFileCollection
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.String)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,String)
  nameWithType: XslCompiledTransform.Transform(String,String)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,String)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(String,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XmlWriter)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,Stream)
- uid: System.Xml.Xsl.XsltArgumentList
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltArgumentList
  nameWithType: XsltArgumentList
  fullName: System.Xml.Xsl.XsltArgumentList
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.String,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(String,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(String,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(String,XsltArgumentList,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,Stream)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,TextWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.Stream)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,Stream)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,Stream)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.IO.TextWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,TextWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XmlReader,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(XmlReader,XsltArgumentList,XmlWriter,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.Transform(System.Xml.XPath.IXPathNavigable,System.Xml.Xsl.XsltArgumentList,System.Xml.XmlWriter,System.Xml.XmlResolver)
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  nameWithType: XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
  fullName: System.Xml.Xsl.XslCompiledTransform.Transform(IXPathNavigable,XsltArgumentList,XmlWriter,XmlResolver)
- uid: System.Xml.Xsl.XslCompiledTransform.#ctor*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: XslCompiledTransform
  nameWithType: XslCompiledTransform.XslCompiledTransform
- uid: System.Xml.Xsl.XslCompiledTransform.CompileToType*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: CompileToType
  nameWithType: XslCompiledTransform.CompileToType
- uid: System.Xml.Xsl.XslCompiledTransform.Load*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Load
  nameWithType: XslCompiledTransform.Load
- uid: System.Xml.Xsl.XslCompiledTransform.OutputSettings*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: OutputSettings
  nameWithType: XslCompiledTransform.OutputSettings
- uid: System.Xml.Xsl.XslCompiledTransform.TemporaryFiles*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: TemporaryFiles
  nameWithType: XslCompiledTransform.TemporaryFiles
- uid: System.Xml.Xsl.XslCompiledTransform.Transform*
  parent: System.Xml.Xsl.XslCompiledTransform
  isExternal: false
  name: Transform
  nameWithType: XslCompiledTransform.Transform
