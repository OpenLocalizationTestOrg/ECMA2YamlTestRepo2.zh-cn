### YamlMime:ManagedReference
items:
- uid: System.Data.OracleClient.OracleBFile
  id: OracleBFile
  children:
  - System.Data.OracleClient.OracleBFile.CanRead
  - System.Data.OracleClient.OracleBFile.CanSeek
  - System.Data.OracleClient.OracleBFile.CanWrite
  - System.Data.OracleClient.OracleBFile.Clone
  - System.Data.OracleClient.OracleBFile.Connection
  - System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob)
  - System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)
  - System.Data.OracleClient.OracleBFile.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)
  - System.Data.OracleClient.OracleBFile.DirectoryName
  - System.Data.OracleClient.OracleBFile.Dispose(System.Boolean)
  - System.Data.OracleClient.OracleBFile.FileExists
  - System.Data.OracleClient.OracleBFile.FileName
  - System.Data.OracleClient.OracleBFile.Flush
  - System.Data.OracleClient.OracleBFile.IsNull
  - System.Data.OracleClient.OracleBFile.Length
  - System.Data.OracleClient.OracleBFile.Null
  - System.Data.OracleClient.OracleBFile.Position
  - System.Data.OracleClient.OracleBFile.Read(System.Byte[],System.Int32,System.Int32)
  - System.Data.OracleClient.OracleBFile.Seek(System.Int64,System.IO.SeekOrigin)
  - System.Data.OracleClient.OracleBFile.SetFileName(System.String,System.String)
  - System.Data.OracleClient.OracleBFile.SetLength(System.Int64)
  - System.Data.OracleClient.OracleBFile.Value
  - System.Data.OracleClient.OracleBFile.Write(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: OracleBFile
  nameWithType: OracleBFile
  fullName: System.Data.OracleClient.OracleBFile
  type: Class
  summary: "表示托管的 OracleBFile 对象设计用于使用 Oracle <xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;> </xref>数据类型。 此类不能被继承。"
  remarks: "Oracle`BFILE`数据类型是一种 Oracle`LOB`数据类型，包含最大大小为 4 千兆字节的二进制数据的引用。 Oracle`BFILE`不同于其他 Oracle`LOB`数据类型，因为其数据存储在服务器上的物理文件中而不是操作系统。 请注意，`BFILE`数据类型提供对数据的只读访问。 因此，面向写的方法继承自<xref:System.IO.Stream>不支持类。</xref:System.IO.Stream>       其他特征`BFILE`将它从区分开来的数据类型`LOB`数据类型是:-包含非结构化的数据。      -支持服务器端分块。      -使用引用复制语义。 例如，如果在执行复制操作`BFILE`，则只`BFILE`复制定位符 （这是对文件的引用）。 不复制文件中的数据。       `BFILE`数据类型应该用于引用`LOB`s 较大的大小，因此，在数据库中存储不可行。 没有使用的客户端、 服务器和通信开销`BFILE`数据类型相比`LOB`数据类型。 它会更加高效访问`BFILE`如果你只需以获取少量的数据。 访问驻留在数据库中的更高效`LOB`s 如果你需要获取整个对象。       每个非 NULL OracleBFile 对象都与两个定义基础物理文件的位置的实体相关联:-一个 Oracle DIRECTORY 对象，它是一个目录的数据库别名中文件系统和基础物理文件，它位于与 DIRECTORY 对象关联的目录中的文件名称。       后`BFILE`是创建，你可以检索其 OracleBFile 对象使用窗体中的定位符<xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>或<xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A>方法。</xref:System.Data.OracleClient.OracleCommand.ExecuteScalar%2A> </xref:System.Data.OracleClient.OracleCommand.ExecuteReader%2A>       若要获取 OracleBFile 对象，请调用<xref:System.Data.OracleClient.OracleDataReader.GetOracleBFile%2A>方法。</xref:System.Data.OracleClient.OracleDataReader.GetOracleBFile%2A>       OracleBFile 对象与之关联的物理文件不需要存在，直到你尝试访问它。 应用程序可以将 OracleBFile 绑定到不存在的文件，在预期位置中，创建物理文件，然后调用<xref:System.Data.OracleClient.OracleBFile.Read%2A>.</xref:System.Data.OracleClient.OracleBFile.Read%2A>       任何尝试访问已关闭 OracleBFile 使用<xref:System.Data.OracleClient.OracleBFile.Read%2A>或<xref:System.Data.OracleClient.OracleBFile.Seek%2A>方法将自动重新打开 OracleBFile 流。</xref:System.Data.OracleClient.OracleBFile.Seek%2A> </xref:System.Data.OracleClient.OracleBFile.Read%2A>       下面的 C# 示例演示如何创建`BFILE`在 Oracle 表，，然后检索 OracleBFile 对象的形式。 该示例演示如何使用<xref:System.Data.OracleClient.OracleDataReader>对象和 OracleBFile<xref:System.Data.OracleClient.OracleBFile.Seek%2A>和<xref:System.Data.OracleClient.OracleBFile.Read%2A>方法。</xref:System.Data.OracleClient.OracleBFile.Read%2A> </xref:System.Data.OracleClient.OracleBFile.Seek%2A> </xref:System.Data.OracleClient.OracleDataReader>       [!code-cs[DataWorks OracleClient.BFile#1](~/add/codesnippet/csharp/t-system.data.oracleclie_3_1.cs) ]有关创建和使用 Oracle 更多信息`BFILE`，请参阅 Oracle 文档中的相应主题。      1> [!NOTE]&1;> `BeginWrite`， `EndWrite`，和`WriteByte`方法，继承自`System.IO.Stream`类中，不支持，因为`BFILE`数据类型是只读的。"
  syntax:
    content: 'public sealed class OracleBFile : System.IO.Stream, ICloneable, System.Data.SqlTypes.INullable'
  inheritance:
  - System.IO.Stream
  implements:
  - System.Data.SqlTypes.INullable
  - System.ICloneable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.CanRead
  id: CanRead
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: CanRead
  nameWithType: OracleBFile.CanRead
  fullName: System.Data.OracleClient.OracleBFile.CanRead
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取一个值，该值指示是否<xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;></xref>可以读取流。"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果<xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;></xref>已关闭或释放; 否则为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> for <xref href=&quot;System.Data.OracleClient.OracleBFile.Null&quot;></xref>."
  overload: System.Data.OracleClient.OracleBFile.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.CanSeek
  id: CanSeek
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: CanSeek
  nameWithType: OracleBFile.CanSeek
  fullName: System.Data.OracleClient.OracleBFile.CanSeek
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取一个值，该值指示是否向前和向后查找操作可以执行。"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果<xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;></xref>已关闭或释放; 否则为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref> for <xref href=&quot;System.Data.OracleClient.OracleBFile.Null&quot;></xref>."
  overload: System.Data.OracleClient.OracleBFile.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.CanWrite
  id: CanWrite
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: CanWrite
  nameWithType: OracleBFile.CanWrite
  fullName: System.Data.OracleClient.OracleBFile.CanWrite
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取一个值，该值指示对象是否支持写入。"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "始终返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>因为 Oracle <xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;> </xref>数据类型是只读的。"
  overload: System.Data.OracleClient.OracleBFile.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Clone
  id: Clone
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Clone()
  nameWithType: OracleBFile.Clone()
  fullName: System.Data.OracleClient.OracleBFile.Clone()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "创建一份<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>与原始与相同的物理文件关联的对象。"
  remarks: "新属性<xref:System.Data.OracleClient.OracleBFile>对象最初具有与原始对象相同的值。</xref:System.Data.OracleClient.OracleBFile> 但是，克隆完成后，每个在<xref:System.Data.OracleClient.OracleBFile>对象是相互独立。</xref:System.Data.OracleClient.OracleBFile> 例如，更改的值<xref:System.Data.OracleClient.OracleBFile.Position%2A>原始属性<xref:System.Data.OracleClient.OracleBFile>不会更改的值<xref:System.Data.OracleClient.OracleBFile.Position%2A>的副本。</xref:System.Data.OracleClient.OracleBFile.Position%2A> </xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile.Position%2A>"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "一个新<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>与原始与相同的物理文件相关联对象<xref uid=&quot;langword_csharp_OracleBFile&quot; name=&quot;OracleBFile&quot; href=&quot;&quot;></xref>对象。"
  overload: System.Data.OracleClient.OracleBFile.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Connection
  id: Connection
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Connection
  nameWithType: OracleBFile.Connection
  fullName: System.Data.OracleClient.OracleBFile.Connection
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;></xref>的此实例所使用的<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;> </xref>。"
  syntax:
    content: public System.Data.OracleClient.OracleConnection Connection { get; }
    return:
      type: System.Data.OracleClient.OracleConnection
      description: "到数据源的连接。 默认值为 null 值。"
  overload: System.Data.OracleClient.OracleBFile.Connection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob)
  id: CopyTo(System.Data.OracleClient.OracleLob)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: CopyTo(OracleLob)
  nameWithType: OracleBFile.CopyTo(OracleLob)
  fullName: System.Data.OracleClient.OracleBFile.CopyTo(OracleLob)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "将复制的全部内容<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>到的目标开头<xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>。"
  remarks: "基础数据源类型的<xref:System.Data.OracleClient.OracleBFile>和目标<xref:System.Data.OracleClient.OracleLob>必须兼容。</xref:System.Data.OracleClient.OracleLob> </xref:System.Data.OracleClient.OracleBFile> 例如，不能将二进制数据复制到目标<xref:System.Data.OracleClient.OracleLob>，其字符数据类型。</xref:System.Data.OracleClient.OracleLob>       你必须具有写入访问权限目标<xref:System.Data.OracleClient.OracleLob>CopyTo 操作才能正确执行。</xref:System.Data.OracleClient.OracleLob>"
  syntax:
    content: public long CopyTo (System.Data.OracleClient.OracleLob destination);
    parameters:
    - id: destination
      type: System.Data.OracleClient.OracleLob
      description: "目标<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>"
    return:
      type: System.Int64
      description: "复制的字节数。"
  overload: System.Data.OracleClient.OracleBFile.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "目标<xref uid=&quot;langword_csharp_OracleLob&quot; name=&quot;OracleLob&quot; href=&quot;&quot;></xref>是空对象引用。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目标为 null <xref uid=&quot;langword_csharp_OracleLob&quot; name=&quot;OracleLob&quot; href=&quot;&quot;> </xref>。       -与此连接<xref uid=&quot;langword_csharp_OracleBFile&quot; name=&quot;OracleBFile&quot; href=&quot;&quot;></xref>关联已关闭。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref uid=&quot;langword_csharp_OracleBFile&quot; name=&quot;OracleBFile&quot; href=&quot;&quot;> </xref>对象已关闭或已释放。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)
  id: CopyTo(System.Data.OracleClient.OracleLob,System.Int64)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: CopyTo(OracleLob,Int64)
  nameWithType: OracleBFile.CopyTo(OracleLob,Int64)
  fullName: System.Data.OracleClient.OracleBFile.CopyTo(OracleLob,Int64)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "将复制的全部内容<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>到目标<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>指定偏移量处。"
  remarks: "基础数据源类型的<xref:System.Data.OracleClient.OracleBFile>和目标<xref:System.Data.OracleClient.OracleLob>必须兼容。</xref:System.Data.OracleClient.OracleLob> </xref:System.Data.OracleClient.OracleBFile> 例如，不能将二进制数据复制到目标<xref:System.Data.OracleClient.OracleLob>，其字符数据类型。</xref:System.Data.OracleClient.OracleLob>       你必须具有写入访问权限目标<xref:System.Data.OracleClient.OracleLob>为<xref:System.Data.OracleClient.OracleBFile.CopyTo%2A>操作才能正确执行。</xref:System.Data.OracleClient.OracleBFile.CopyTo%2A> </xref:System.Data.OracleClient.OracleLob>"
  syntax:
    content: public long CopyTo (System.Data.OracleClient.OracleLob destination, long destinationOffset);
    parameters:
    - id: destination
      type: System.Data.OracleClient.OracleLob
      description: "目标<xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>。"
    - id: destinationOffset
      type: System.Int64
      description: "要将复制到偏移量。"
    return:
      type: System.Int64
      description: "复制的字节数。"
  overload: System.Data.OracleClient.OracleBFile.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "目标<xref uid=&quot;langword_csharp_OracleLob&quot; name=&quot;OracleLob&quot; href=&quot;&quot;></xref>是空对象引用。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目标为 null <xref uid=&quot;langword_csharp_OracleLob&quot; name=&quot;OracleLob&quot; href=&quot;&quot;> </xref>。       -与此连接<xref uid=&quot;langword_csharp_OracleBFile&quot; name=&quot;OracleBFile&quot; href=&quot;&quot;></xref>关联已关闭。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref uid=&quot;langword_csharp_OracleBFile&quot; name=&quot;OracleBFile&quot; href=&quot;&quot;> </xref>对象已关闭或已释放。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)
  id: CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: CopyTo(Int64,OracleLob,Int64,Int64)
  nameWithType: OracleBFile.CopyTo(Int64,OracleLob,Int64,Int64)
  fullName: System.Data.OracleClient.OracleBFile.CopyTo(Int64,OracleLob,Int64,Int64)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "从该副本<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>到目标<xref href=&quot;System.Data.OracleClient.OracleLob&quot;></xref>具有指定量数据、 源偏移量，以及目标偏移量。"
  remarks: "基础数据源类型的<xref:System.Data.OracleClient.OracleBFile>和目标<xref:System.Data.OracleClient.OracleLob>必须兼容。</xref:System.Data.OracleClient.OracleLob> </xref:System.Data.OracleClient.OracleBFile> 例如，不能将二进制数据复制到目标<xref:System.Data.OracleClient.OracleLob>，其字符数据类型。</xref:System.Data.OracleClient.OracleLob>       你必须具有写入访问权限目标<xref:System.Data.OracleClient.OracleLob>为<xref:System.Data.OracleClient.OracleBFile.CopyTo%2A>操作才能正确执行。</xref:System.Data.OracleClient.OracleBFile.CopyTo%2A> </xref:System.Data.OracleClient.OracleLob>"
  syntax:
    content: public long CopyTo (long sourceOffset, System.Data.OracleClient.OracleLob destination, long destinationOffset, long amount);
    parameters:
    - id: sourceOffset
      type: System.Int64
      description: "要从其中复制偏移量。"
    - id: destination
      type: System.Data.OracleClient.OracleLob
      description: "目标<xref href=&quot;System.Data.OracleClient.OracleLob&quot;> </xref>。"
    - id: destinationOffset
      type: System.Int64
      description: "要将复制到偏移量。"
    - id: amount
      type: System.Int64
      description: "数据，以字节为单位，以将复制的数量。"
    return:
      type: System.Int64
      description: "复制的字节数。"
  overload: System.Data.OracleClient.OracleBFile.CopyTo*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "量参数的值小于零或大于 4 千兆字节。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "目标<xref uid=&quot;langword_csharp_OracleLob&quot; name=&quot;OracleLob&quot; href=&quot;&quot;></xref>是空对象引用。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "目标为 null <xref uid=&quot;langword_csharp_OracleLob&quot; name=&quot;OracleLob&quot; href=&quot;&quot;> </xref>。       -与此连接<xref uid=&quot;langword_csharp_OracleBFile&quot; name=&quot;OracleBFile&quot; href=&quot;&quot;></xref>关联已关闭。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref uid=&quot;langword_csharp_OracleBFile&quot; name=&quot;OracleBFile&quot; href=&quot;&quot;> </xref>对象已关闭或已释放。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.DirectoryName
  id: DirectoryName
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: DirectoryName
  nameWithType: OracleBFile.DirectoryName
  fullName: System.Data.OracleClient.OracleBFile.DirectoryName
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取与其的目录对象的名称<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>对象所关联。"
  remarks: "每个非 NULL<xref:System.Data.OracleClient.OracleBFile>对象都与两个定义基础物理文件的位置的实体关联:-一个 Oracle DIRECTORY 对象，它是一个目录的数据库别名中文件系统和基础物理文件，它位于与 DIRECTORY 对象关联的目录中的文件名称。</xref:System.Data.OracleClient.OracleBFile>       DirectoryName 属性从 Oracle 数据库中返回的目录对象的名称。       有关详细信息，有关创建和使用 Oracle `BFILE`，请参阅 Oracle 文档中的相应主题。"
  syntax:
    content: public string DirectoryName { get; }
    return:
      type: System.String
      description: "目录对象的名称。"
  overload: System.Data.OracleClient.OracleBFile.DirectoryName*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "尝试调用<xref uid=&quot;langword_csharp_DirectoryName&quot; name=&quot;DirectoryName&quot; href=&quot;&quot;></xref>对已关闭或释放<xref uid=&quot;langword_csharp_OracleBFile&quot; name=&quot;OracleBFile&quot; href=&quot;&quot;></xref>对象。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OracleBFile.Dispose(Boolean)
  fullName: System.Data.OracleClient.OracleBFile.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "要添加。"
  overload: System.Data.OracleClient.OracleBFile.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.FileExists
  id: FileExists
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: FileExists
  nameWithType: OracleBFile.FileExists
  fullName: System.Data.OracleClient.OracleBFile.FileExists
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取一个值，该值指示是否包含的物理文件<xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;></xref>在操作系统中存在的数据。"
  syntax:
    content: public bool FileExists { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果物理文件包含<xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;></xref>数据存在; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.OracleClient.OracleBFile.FileExists*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;> </xref>对象已关闭或已释放。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "与其连接<xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;></xref>关联已关闭。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.FileName
  id: FileName
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: FileName
  nameWithType: OracleBFile.FileName
  fullName: System.Data.OracleClient.OracleBFile.FileName
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取的名称<xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;></xref>不含路径。"
  remarks: "有关<xref:System.Data.OracleClient.OracleBFile.Null>，则返回空字符串。</xref:System.Data.OracleClient.OracleBFile.Null>"
  syntax:
    content: public string FileName { get; }
    return:
      type: System.String
      description: "BFILE 的名称。"
  overload: System.Data.OracleClient.OracleBFile.FileName*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;> </xref>对象已关闭或已释放。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Flush
  id: Flush
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Flush()
  nameWithType: OracleBFile.Flush()
  fullName: System.Data.OracleClient.OracleBFile.Flush()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "当前不受支持。"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.Data.OracleClient.OracleBFile.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.IsNull
  id: IsNull
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: IsNull
  nameWithType: OracleBFile.IsNull
  fullName: System.Data.OracleClient.OracleBFile.IsNull
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>是<xref href=&quot;System.Data.OracleClient.OracleBFile.Null&quot;></xref>流。"
  syntax:
    content: public bool IsNull { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref> is a <xref href=&quot;System.Data.OracleClient.OracleBFile.Null&quot;></xref> stream; otherwise <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.OracleClient.OracleBFile.IsNull*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Length
  id: Length
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Length
  nameWithType: OracleBFile.Length
  fullName: System.Data.OracleClient.OracleBFile.Length
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取一个值，返回的长度以字节为单位的物理文件与其<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>对象所关联。"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "表示以字节为单位的物理文件的长度的长值。"
  overload: System.Data.OracleClient.OracleBFile.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭或断开后调用方法。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Null
  id: "Null"
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: "Null"
  nameWithType: OracleBFile.Null
  fullName: System.Data.OracleClient.OracleBFile.Null
  type: Field
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "表示 null <xref href=&quot;System.Data.OracleClient.OracleBFile&quot;> </xref>未绑定到的物理文件的对象。"
  remarks: "如果你想要上执行的比较运算，null 可<xref:System.Data.OracleClient.OracleBFile>以确定可为 null。</xref:System.Data.OracleClient.OracleBFile>       任何尝试执行对 Null 对象的读取的操作成功，但不返回任何数据。 任何尝试执行 Null 对象上的写入操作将引发异常。 选择`BFILE`包含一个 null 值的列返回 Null。"
  syntax:
    content: public static readonly System.Data.OracleClient.OracleBFile Null;
    return:
      type: System.Data.OracleClient.OracleBFile
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Position
  id: Position
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Position
  nameWithType: OracleBFile.Position
  fullName: System.Data.OracleClient.OracleBFile.Position
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取当前读取位置中的<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>流。"
  remarks: "不支持查找到流的长度超出任何位置。       `Position`属性不会不跟踪的从和 / 或已用完，跳过，流的字节数。"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "中的当前位置<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>流。"
  overload: System.Data.OracleClient.OracleBFile.Position*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "尝试设置一个含有负值或大于流的长度的位置。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭或断开后调用方法。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: OracleBFile.Read(Byte[],Int32,Int32)
  fullName: System.Data.OracleClient.OracleBFile.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "从当前读取的字节序列<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>流以及技术进步读取的字节数的流中的位置。"
  remarks: "Read 方法读取的最多`count`字节从当前流，并且将它们存储在`buffer`开始`offset`。 流中的当前位置高级通过读取; 的字节数但是，如果发生异常，将流中的当前位置保持不变。 读取返回读取的字节数。 仅当位置当前在流末尾，则返回值为零。 读取将一直阻止到至少一个字节的数据可供读取的事件中不会提供数据。 已达到文件末尾时为只读，则返回 0。 读取可以自由地返回少于所请求的字节，即使尚未达到流结尾。       任何尝试访问已关闭<xref:System.Data.OracleClient.OracleBFile>使用只读或<xref:System.Data.OracleClient.OracleBFile.Seek%2A>方法重新打开<xref:System.Data.OracleClient.OracleBFile>自动流式传输。</xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile.Seek%2A> </xref:System.Data.OracleClient.OracleBFile>       下面的 C# 示例假定在 Oracle 表中的此架构︰```   (col1 number, col2 BFILE)   ```示例演示如何使用读取和<xref:System.Data.OracleClient.OracleBFile.Seek%2A>方法，以访问<xref:System.Data.OracleClient.OracleBFile>对象。</xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile.Seek%2A>      ```   byte[] buffer = new byte[100];   OracleDataReader dataReader = command.ExecuteReader();   using (dataReader) {       if (dataReader.Read()) {               OracleBFile BFile = dataReader.GetOracleBFile(1);           using (BFile) {               BFile.Seek(0, SeekOrigin.Begin);               BFile.Read(buffer, 0, 100);           }       }   }   ```"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "字节数组。 此方法返回时，该缓冲区包含指定的字节数组之间的值`offset`和 (`offset` + `count`) 由从当前源中读取的字节替换。"
    - id: offset
      type: System.Int32
      description: "中的从零开始的字节偏移量`buffer`从此处开始存储读取的数据从当前流。"
    - id: count
      type: System.Int32
      description: "最大要从当前流中读取的字节数。"
    return:
      type: System.Int32
      description: "读取到缓冲区的字节总数。 这可能小于请求的字节数如果很多字节当前不可用，或零个如果已到达文件末尾。"
  overload: System.Data.OracleClient.OracleBFile.Read*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "总和<code> offset </code>和<code> count </code>大于缓冲区长度。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>为空引用 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>或<code>count</code>为负。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "与其连接<xref uid=&quot;langword_csharp_BFILE&quot; name=&quot;BFILE&quot; href=&quot;&quot;></xref>关联已关闭。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭或断开后调用方法。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: OracleBFile.Seek(Int64,SeekOrigin)
  fullName: System.Data.OracleClient.OracleBFile.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "对当前设置的位置<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>流。"
  remarks: "如果`offset`为负，则要求新位置指定的位置之前`origin`按指定的字节数`offset`。 如果`offset`为零，则要求指定的位置的新位置，位于`origin`。 如果`offset`为正，则要求按照指定的位置新位置位于`origin`按指定的字节数`offset`。       不支持查找到流的长度超出任何位置。       任何尝试访问已关闭<xref:System.Data.OracleClient.OracleBFile>使用<xref:System.Data.OracleClient.OracleBFile.Read%2A>或查找方法重新打开<xref:System.Data.OracleClient.OracleBFile>自动流式传输。</xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile.Read%2A> </xref:System.Data.OracleClient.OracleBFile>       下面的 C# 示例假定在 Oracle 表中的此架构︰```   (col1 number, col2 BFILE)   ```示例演示如何使用<xref:System.Data.OracleClient.OracleBFile.Read%2A>和查找方法，以访问<xref:System.Data.OracleClient.OracleBFile>对象。</xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile.Read%2A>      ```   byte[] buffer = new byte[100];   OracleDataReader dataReader = command.ExecuteReader();   using (dataReader) {       if (dataReader.Read()) {               OracleBFile BFile = dataReader.GetOracleBFile(1);           using (BFile) {               BFile.Seek(0, SeekOrigin.Begin);               BFile.Read(buffer, 0, 100);           }       }   }   ```"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin origin);
    parameters:
    - id: offset
      type: System.Int64
      description: "相对于原点的字节偏移量。 如果`offset`为负，新的位置将指定的位置之前通过`origin`按指定的字节数`offset`。 如果`offset`为零，则新的位置是由指定的位置`origin`。 如果`offset`为正，新的位置将遵循由指定的位置`origin`按指定的字节数`offset`。"
    - id: origin
      type: System.IO.SeekOrigin
      description: "类型的值<xref uid=&quot;langword_csharp_System.IO.SeekOrigin&quot; name=&quot;System.IO.SeekOrigin&quot; href=&quot;&quot;> </xref> ，该值指示用于获取新位置的参考点。"
    return:
      type: System.Int64
      description: "当前流中的新位置。"
  overload: System.Data.OracleClient.OracleBFile.Seek*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "尝试设置一个含有负值或大于流的长度的位置。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭或断开后调用方法。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.SetFileName(System.String,System.String)
  id: SetFileName(System.String,System.String)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: SetFileName(String,String)
  nameWithType: OracleBFile.SetFileName(String,String)
  fullName: System.Data.OracleClient.OracleBFile.SetFileName(String,String)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "将绑定<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>到不同的文件在操作系统中的对象。"
  remarks: "SetFileName 操作必须在事务才能成功。 只需调用 SetFileName`BFILE`将相关联<xref:System.Data.OracleClient.OracleBFile>对象与另一个文件，但不是更新 Oracle 表。</xref:System.Data.OracleClient.OracleBFile> 若要在调用 SetFileName 之后更新 Oracle 表，必须调用`Update`方法<xref:System.Data.OracleClient.OracleDataAdapter>然后提交事务。</xref:System.Data.OracleClient.OracleDataAdapter>       一旦您检索<xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A>或<xref:System.Data.OracleClient.OracleBFile.FileName%2A>属性，则它们将缓存在<xref:System.Data.OracleClient.OracleBFile>对象并不会受到任何克隆<xref:System.Data.OracleClient.OracleBFile>SetFileName，或到所做的任何更改的对象的调用`BFILE`数据库中。</xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile.FileName%2A> </xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A> 换而言之，它们可能无法反映的实际值`BFILE`服务器中的对象。       此外，检索这两个属性 (<xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A>或<xref:System.Data.OracleClient.OracleBFile.FileName%2A>) 会导致两个属性值被从服务器检索并缓存在<xref:System.Data.OracleClient.OracleBFile>对象。</xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile.FileName%2A> </xref:System.Data.OracleClient.OracleBFile.DirectoryName%2A>       下面的 C# 示例假定在 Oracle 表中的此架构︰```   (col1 number, col2 BFILE)   ```示例演示如何使用 SetFileName，<xref:System.Data.OracleClient.OracleBFile.Read%2A>和<xref:System.Data.OracleClient.OracleBFile.Seek%2A>方法，以访问<xref:System.Data.OracleClient.OracleBFile>对象。</xref:System.Data.OracleClient.OracleBFile> </xref:System.Data.OracleClient.OracleBFile.Seek%2A> </xref:System.Data.OracleClient.OracleBFile.Read%2A>      ```   byte[] buffer = new byte[100];   OracleDataReader dataReader = command.ExecuteReader();   using (dataReader) {       if (dataReader.Read()) {           OracleBFile BFile = dataReader.GetOracleBFile(1);           using (BFile) {               BFile.Seek(0, SeekOrigin.Begin);               BFile.Read(buffer, 0, 100);               command.Transaction = connection.BeginTransaction();               BFile.SetFileName(&quot;TESTDIR&quot;, &quot;File1.jpg&quot;);               BFile.Read(buffer, 0, 100);           }       }   }   ```"
  syntax:
    content: public void SetFileName (string directory, string file);
    parameters:
    - id: directory
      type: System.String
      description: "包含的物理文件的目录对象的别名。"
    - id: file
      type: System.String
      description: "在操作系统中的文件的名称。"
  overload: System.Data.OracleClient.OracleBFile.SetFileName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "操作必须在事务中。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: OracleBFile.SetLength(Int64)
  fullName: System.Data.OracleClient.OracleBFile.SetLength(Int64)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "当前不受支持。"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "当前不受支持。"
  overload: System.Data.OracleClient.OracleBFile.SetLength*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "搜索或写入不支持所调用的功能的流时不支持调用的方法，或者当尝试读取，则会引发的异常。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Value
  id: Value
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Value
  nameWithType: OracleBFile.Value
  fullName: System.Data.OracleClient.OracleBFile.Value
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取<xref:System.Array>类型的<xref:System.Byte>包含<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>数据。</xref:System.Byte> </xref:System.Array>"
  remarks: "Value 属性读取整个`BFILE`一次。      1> [!NOTE]&1;> 使用的优点`BFILE`s 是能够检索大量在客户端的小区块中的数据。 但是，当使用值时，你作为一个连续的区块，这可以显著提高应用程序开销获取 BFILE 列的所有数据。"
  syntax:
    content: public object Value { get; }
    return:
      type: System.Object
      description: "<xref:System.Array>类型的<xref:System.Byte>包含<xref href=&quot;System.Data.OracleClient.OracleBFile&quot;></xref>数据。</xref:System.Byte> </xref:System.Array>"
  overload: System.Data.OracleClient.OracleBFile.Value*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleBFile.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OracleClient.OracleBFile
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: OracleBFile.Write(Byte[],Int32,Int32)
  fullName: System.Data.OracleClient.OracleBFile.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "当前不受支持。"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "当前不受支持。"
    - id: offset
      type: System.Int32
      description: "当前不受支持。"
    - id: count
      type: System.Int32
      description: "当前不受支持。"
  overload: System.Data.OracleClient.OracleBFile.Write*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "搜索或写入不支持所调用的功能的流时不支持调用的方法，或者当尝试读取，则会引发的异常。"
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Data.OracleClient.OracleBFile.CanRead
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CanRead
  nameWithType: OracleBFile.CanRead
  fullName: System.Data.OracleClient.OracleBFile.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.OracleClient.OracleBFile.CanSeek
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CanSeek
  nameWithType: OracleBFile.CanSeek
  fullName: System.Data.OracleClient.OracleBFile.CanSeek
- uid: System.Data.OracleClient.OracleBFile.CanWrite
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CanWrite
  nameWithType: OracleBFile.CanWrite
  fullName: System.Data.OracleClient.OracleBFile.CanWrite
- uid: System.Data.OracleClient.OracleBFile.Clone
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Clone()
  nameWithType: OracleBFile.Clone()
  fullName: System.Data.OracleClient.OracleBFile.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OracleClient.OracleBFile.Connection
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Connection
  nameWithType: OracleBFile.Connection
  fullName: System.Data.OracleClient.OracleBFile.Connection
- uid: System.Data.OracleClient.OracleConnection
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleConnection
  nameWithType: OracleConnection
  fullName: System.Data.OracleClient.OracleConnection
- uid: System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CopyTo(OracleLob)
  nameWithType: OracleBFile.CopyTo(OracleLob)
  fullName: System.Data.OracleClient.OracleBFile.CopyTo(OracleLob)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Data.OracleClient.OracleLob
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleLob
  nameWithType: OracleLob
  fullName: System.Data.OracleClient.OracleLob
- uid: System.Data.OracleClient.OracleBFile.CopyTo(System.Data.OracleClient.OracleLob,System.Int64)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CopyTo(OracleLob,Int64)
  nameWithType: OracleBFile.CopyTo(OracleLob,Int64)
  fullName: System.Data.OracleClient.OracleBFile.CopyTo(OracleLob,Int64)
- uid: System.Data.OracleClient.OracleBFile.CopyTo(System.Int64,System.Data.OracleClient.OracleLob,System.Int64,System.Int64)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CopyTo(Int64,OracleLob,Int64,Int64)
  nameWithType: OracleBFile.CopyTo(Int64,OracleLob,Int64,Int64)
  fullName: System.Data.OracleClient.OracleBFile.CopyTo(Int64,OracleLob,Int64,Int64)
- uid: System.Data.OracleClient.OracleBFile.DirectoryName
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: DirectoryName
  nameWithType: OracleBFile.DirectoryName
  fullName: System.Data.OracleClient.OracleBFile.DirectoryName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OracleClient.OracleBFile.Dispose(System.Boolean)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OracleBFile.Dispose(Boolean)
  fullName: System.Data.OracleClient.OracleBFile.Dispose(Boolean)
- uid: System.Data.OracleClient.OracleBFile.FileExists
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: FileExists
  nameWithType: OracleBFile.FileExists
  fullName: System.Data.OracleClient.OracleBFile.FileExists
- uid: System.Data.OracleClient.OracleBFile.FileName
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: FileName
  nameWithType: OracleBFile.FileName
  fullName: System.Data.OracleClient.OracleBFile.FileName
- uid: System.Data.OracleClient.OracleBFile.Flush
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Flush()
  nameWithType: OracleBFile.Flush()
  fullName: System.Data.OracleClient.OracleBFile.Flush()
- uid: System.Data.OracleClient.OracleBFile.IsNull
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: IsNull
  nameWithType: OracleBFile.IsNull
  fullName: System.Data.OracleClient.OracleBFile.IsNull
- uid: System.Data.OracleClient.OracleBFile.Length
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Length
  nameWithType: OracleBFile.Length
  fullName: System.Data.OracleClient.OracleBFile.Length
- uid: System.Data.OracleClient.OracleBFile.Null
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: "Null"
  nameWithType: OracleBFile.Null
  fullName: System.Data.OracleClient.OracleBFile.Null
- uid: System.Data.OracleClient.OracleBFile
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleBFile
  nameWithType: OracleBFile
  fullName: System.Data.OracleClient.OracleBFile
- uid: System.Data.OracleClient.OracleBFile.Position
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Position
  nameWithType: OracleBFile.Position
  fullName: System.Data.OracleClient.OracleBFile.Position
- uid: System.Data.OracleClient.OracleBFile.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: OracleBFile.Read(Byte[],Int32,Int32)
  fullName: System.Data.OracleClient.OracleBFile.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OracleClient.OracleBFile.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: OracleBFile.Seek(Int64,SeekOrigin)
  fullName: System.Data.OracleClient.OracleBFile.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.Data.OracleClient.OracleBFile.SetFileName(System.String,System.String)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: SetFileName(String,String)
  nameWithType: OracleBFile.SetFileName(String,String)
  fullName: System.Data.OracleClient.OracleBFile.SetFileName(String,String)
- uid: System.Data.OracleClient.OracleBFile.SetLength(System.Int64)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: SetLength(Int64)
  nameWithType: OracleBFile.SetLength(Int64)
  fullName: System.Data.OracleClient.OracleBFile.SetLength(Int64)
- uid: System.Data.OracleClient.OracleBFile.Value
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Value
  nameWithType: OracleBFile.Value
  fullName: System.Data.OracleClient.OracleBFile.Value
- uid: System.Data.OracleClient.OracleBFile.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: OracleBFile.Write(Byte[],Int32,Int32)
  fullName: System.Data.OracleClient.OracleBFile.Write(Byte[],Int32,Int32)
- uid: System.Data.OracleClient.OracleBFile.CanRead*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CanRead
  nameWithType: OracleBFile.CanRead
- uid: System.Data.OracleClient.OracleBFile.CanSeek*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CanSeek
  nameWithType: OracleBFile.CanSeek
- uid: System.Data.OracleClient.OracleBFile.CanWrite*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CanWrite
  nameWithType: OracleBFile.CanWrite
- uid: System.Data.OracleClient.OracleBFile.Clone*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Clone
  nameWithType: OracleBFile.Clone
- uid: System.Data.OracleClient.OracleBFile.Connection*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Connection
  nameWithType: OracleBFile.Connection
- uid: System.Data.OracleClient.OracleBFile.CopyTo*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: CopyTo
  nameWithType: OracleBFile.CopyTo
- uid: System.Data.OracleClient.OracleBFile.DirectoryName*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: DirectoryName
  nameWithType: OracleBFile.DirectoryName
- uid: System.Data.OracleClient.OracleBFile.Dispose*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Dispose
  nameWithType: OracleBFile.Dispose
- uid: System.Data.OracleClient.OracleBFile.FileExists*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: FileExists
  nameWithType: OracleBFile.FileExists
- uid: System.Data.OracleClient.OracleBFile.FileName*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: FileName
  nameWithType: OracleBFile.FileName
- uid: System.Data.OracleClient.OracleBFile.Flush*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Flush
  nameWithType: OracleBFile.Flush
- uid: System.Data.OracleClient.OracleBFile.IsNull*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: IsNull
  nameWithType: OracleBFile.IsNull
- uid: System.Data.OracleClient.OracleBFile.Length*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Length
  nameWithType: OracleBFile.Length
- uid: System.Data.OracleClient.OracleBFile.Position*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Position
  nameWithType: OracleBFile.Position
- uid: System.Data.OracleClient.OracleBFile.Read*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Read
  nameWithType: OracleBFile.Read
- uid: System.Data.OracleClient.OracleBFile.Seek*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Seek
  nameWithType: OracleBFile.Seek
- uid: System.Data.OracleClient.OracleBFile.SetFileName*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: SetFileName
  nameWithType: OracleBFile.SetFileName
- uid: System.Data.OracleClient.OracleBFile.SetLength*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: SetLength
  nameWithType: OracleBFile.SetLength
- uid: System.Data.OracleClient.OracleBFile.Value*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Value
  nameWithType: OracleBFile.Value
- uid: System.Data.OracleClient.OracleBFile.Write*
  parent: System.Data.OracleClient.OracleBFile
  isExternal: false
  name: Write
  nameWithType: OracleBFile.Write
