### YamlMime:ManagedReference
items:
- uid: System.Windows.UIElement3D
  id: UIElement3D
  children:
  - System.Windows.UIElement3D.#ctor
  - System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement3D.AllowDrop
  - System.Windows.UIElement3D.AllowDropProperty
  - System.Windows.UIElement3D.AreAnyTouchesCaptured
  - System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement3D.AreAnyTouchesOver
  - System.Windows.UIElement3D.AreAnyTouchesOverProperty
  - System.Windows.UIElement3D.CaptureMouse
  - System.Windows.UIElement3D.CaptureStylus
  - System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement3D.CommandBindings
  - System.Windows.UIElement3D.DragEnter
  - System.Windows.UIElement3D.DragEnterEvent
  - System.Windows.UIElement3D.DragLeave
  - System.Windows.UIElement3D.DragLeaveEvent
  - System.Windows.UIElement3D.DragOver
  - System.Windows.UIElement3D.DragOverEvent
  - System.Windows.UIElement3D.Drop
  - System.Windows.UIElement3D.DropEvent
  - System.Windows.UIElement3D.Focus
  - System.Windows.UIElement3D.Focusable
  - System.Windows.UIElement3D.FocusableChanged
  - System.Windows.UIElement3D.FocusableProperty
  - System.Windows.UIElement3D.GetUIParentCore
  - System.Windows.UIElement3D.GiveFeedback
  - System.Windows.UIElement3D.GiveFeedbackEvent
  - System.Windows.UIElement3D.GotFocus
  - System.Windows.UIElement3D.GotFocusEvent
  - System.Windows.UIElement3D.GotKeyboardFocus
  - System.Windows.UIElement3D.GotKeyboardFocusEvent
  - System.Windows.UIElement3D.GotMouseCapture
  - System.Windows.UIElement3D.GotMouseCaptureEvent
  - System.Windows.UIElement3D.GotStylusCapture
  - System.Windows.UIElement3D.GotStylusCaptureEvent
  - System.Windows.UIElement3D.GotTouchCapture
  - System.Windows.UIElement3D.GotTouchCaptureEvent
  - System.Windows.UIElement3D.InputBindings
  - System.Windows.UIElement3D.InvalidateModel
  - System.Windows.UIElement3D.IsEnabled
  - System.Windows.UIElement3D.IsEnabledChanged
  - System.Windows.UIElement3D.IsEnabledCore
  - System.Windows.UIElement3D.IsEnabledProperty
  - System.Windows.UIElement3D.IsFocused
  - System.Windows.UIElement3D.IsFocusedProperty
  - System.Windows.UIElement3D.IsHitTestVisible
  - System.Windows.UIElement3D.IsHitTestVisibleChanged
  - System.Windows.UIElement3D.IsHitTestVisibleProperty
  - System.Windows.UIElement3D.IsInputMethodEnabled
  - System.Windows.UIElement3D.IsKeyboardFocused
  - System.Windows.UIElement3D.IsKeyboardFocusedChanged
  - System.Windows.UIElement3D.IsKeyboardFocusedProperty
  - System.Windows.UIElement3D.IsKeyboardFocusWithin
  - System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement3D.IsMouseCaptured
  - System.Windows.UIElement3D.IsMouseCapturedChanged
  - System.Windows.UIElement3D.IsMouseCapturedProperty
  - System.Windows.UIElement3D.IsMouseCaptureWithin
  - System.Windows.UIElement3D.IsMouseCaptureWithinChanged
  - System.Windows.UIElement3D.IsMouseCaptureWithinProperty
  - System.Windows.UIElement3D.IsMouseDirectlyOver
  - System.Windows.UIElement3D.IsMouseDirectlyOverChanged
  - System.Windows.UIElement3D.IsMouseDirectlyOverProperty
  - System.Windows.UIElement3D.IsMouseOver
  - System.Windows.UIElement3D.IsMouseOverProperty
  - System.Windows.UIElement3D.IsStylusCaptured
  - System.Windows.UIElement3D.IsStylusCapturedChanged
  - System.Windows.UIElement3D.IsStylusCapturedProperty
  - System.Windows.UIElement3D.IsStylusCaptureWithin
  - System.Windows.UIElement3D.IsStylusCaptureWithinChanged
  - System.Windows.UIElement3D.IsStylusCaptureWithinProperty
  - System.Windows.UIElement3D.IsStylusDirectlyOver
  - System.Windows.UIElement3D.IsStylusDirectlyOverChanged
  - System.Windows.UIElement3D.IsStylusDirectlyOverProperty
  - System.Windows.UIElement3D.IsStylusOver
  - System.Windows.UIElement3D.IsStylusOverProperty
  - System.Windows.UIElement3D.IsVisible
  - System.Windows.UIElement3D.IsVisibleChanged
  - System.Windows.UIElement3D.IsVisibleProperty
  - System.Windows.UIElement3D.KeyDown
  - System.Windows.UIElement3D.KeyDownEvent
  - System.Windows.UIElement3D.KeyUp
  - System.Windows.UIElement3D.KeyUpEvent
  - System.Windows.UIElement3D.LostFocus
  - System.Windows.UIElement3D.LostFocusEvent
  - System.Windows.UIElement3D.LostKeyboardFocus
  - System.Windows.UIElement3D.LostKeyboardFocusEvent
  - System.Windows.UIElement3D.LostMouseCapture
  - System.Windows.UIElement3D.LostMouseCaptureEvent
  - System.Windows.UIElement3D.LostStylusCapture
  - System.Windows.UIElement3D.LostStylusCaptureEvent
  - System.Windows.UIElement3D.LostTouchCapture
  - System.Windows.UIElement3D.LostTouchCaptureEvent
  - System.Windows.UIElement3D.MouseDown
  - System.Windows.UIElement3D.MouseDownEvent
  - System.Windows.UIElement3D.MouseEnter
  - System.Windows.UIElement3D.MouseEnterEvent
  - System.Windows.UIElement3D.MouseLeave
  - System.Windows.UIElement3D.MouseLeaveEvent
  - System.Windows.UIElement3D.MouseLeftButtonDown
  - System.Windows.UIElement3D.MouseLeftButtonDownEvent
  - System.Windows.UIElement3D.MouseLeftButtonUp
  - System.Windows.UIElement3D.MouseLeftButtonUpEvent
  - System.Windows.UIElement3D.MouseMove
  - System.Windows.UIElement3D.MouseMoveEvent
  - System.Windows.UIElement3D.MouseRightButtonDown
  - System.Windows.UIElement3D.MouseRightButtonDownEvent
  - System.Windows.UIElement3D.MouseRightButtonUp
  - System.Windows.UIElement3D.MouseRightButtonUpEvent
  - System.Windows.UIElement3D.MouseUp
  - System.Windows.UIElement3D.MouseUpEvent
  - System.Windows.UIElement3D.MouseWheel
  - System.Windows.UIElement3D.MouseWheelEvent
  - System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement3D.OnCreateAutomationPeer
  - System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement3D.OnUpdateModel
  - System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.UIElement3D.PreviewDragEnter
  - System.Windows.UIElement3D.PreviewDragEnterEvent
  - System.Windows.UIElement3D.PreviewDragLeave
  - System.Windows.UIElement3D.PreviewDragLeaveEvent
  - System.Windows.UIElement3D.PreviewDragOver
  - System.Windows.UIElement3D.PreviewDragOverEvent
  - System.Windows.UIElement3D.PreviewDrop
  - System.Windows.UIElement3D.PreviewDropEvent
  - System.Windows.UIElement3D.PreviewGiveFeedback
  - System.Windows.UIElement3D.PreviewGiveFeedbackEvent
  - System.Windows.UIElement3D.PreviewGotKeyboardFocus
  - System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement3D.PreviewKeyDown
  - System.Windows.UIElement3D.PreviewKeyDownEvent
  - System.Windows.UIElement3D.PreviewKeyUp
  - System.Windows.UIElement3D.PreviewKeyUpEvent
  - System.Windows.UIElement3D.PreviewLostKeyboardFocus
  - System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement3D.PreviewMouseDown
  - System.Windows.UIElement3D.PreviewMouseDownEvent
  - System.Windows.UIElement3D.PreviewMouseLeftButtonDown
  - System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement3D.PreviewMouseLeftButtonUp
  - System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement3D.PreviewMouseMove
  - System.Windows.UIElement3D.PreviewMouseMoveEvent
  - System.Windows.UIElement3D.PreviewMouseRightButtonDown
  - System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement3D.PreviewMouseRightButtonUp
  - System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement3D.PreviewMouseUp
  - System.Windows.UIElement3D.PreviewMouseUpEvent
  - System.Windows.UIElement3D.PreviewMouseWheel
  - System.Windows.UIElement3D.PreviewMouseWheelEvent
  - System.Windows.UIElement3D.PreviewQueryContinueDrag
  - System.Windows.UIElement3D.PreviewQueryContinueDragEvent
  - System.Windows.UIElement3D.PreviewStylusButtonDown
  - System.Windows.UIElement3D.PreviewStylusButtonDownEvent
  - System.Windows.UIElement3D.PreviewStylusButtonUp
  - System.Windows.UIElement3D.PreviewStylusButtonUpEvent
  - System.Windows.UIElement3D.PreviewStylusDown
  - System.Windows.UIElement3D.PreviewStylusDownEvent
  - System.Windows.UIElement3D.PreviewStylusInAirMove
  - System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement3D.PreviewStylusInRange
  - System.Windows.UIElement3D.PreviewStylusInRangeEvent
  - System.Windows.UIElement3D.PreviewStylusMove
  - System.Windows.UIElement3D.PreviewStylusMoveEvent
  - System.Windows.UIElement3D.PreviewStylusOutOfRange
  - System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement3D.PreviewStylusSystemGesture
  - System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement3D.PreviewStylusUp
  - System.Windows.UIElement3D.PreviewStylusUpEvent
  - System.Windows.UIElement3D.PreviewTextInput
  - System.Windows.UIElement3D.PreviewTextInputEvent
  - System.Windows.UIElement3D.PreviewTouchDown
  - System.Windows.UIElement3D.PreviewTouchDownEvent
  - System.Windows.UIElement3D.PreviewTouchMove
  - System.Windows.UIElement3D.PreviewTouchMoveEvent
  - System.Windows.UIElement3D.PreviewTouchUp
  - System.Windows.UIElement3D.PreviewTouchUpEvent
  - System.Windows.UIElement3D.QueryContinueDrag
  - System.Windows.UIElement3D.QueryContinueDragEvent
  - System.Windows.UIElement3D.QueryCursor
  - System.Windows.UIElement3D.QueryCursorEvent
  - System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement3D.ReleaseAllTouchCaptures
  - System.Windows.UIElement3D.ReleaseMouseCapture
  - System.Windows.UIElement3D.ReleaseStylusCapture
  - System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement3D.ShouldSerializeCommandBindings
  - System.Windows.UIElement3D.ShouldSerializeInputBindings
  - System.Windows.UIElement3D.StylusButtonDown
  - System.Windows.UIElement3D.StylusButtonDownEvent
  - System.Windows.UIElement3D.StylusButtonUp
  - System.Windows.UIElement3D.StylusButtonUpEvent
  - System.Windows.UIElement3D.StylusDown
  - System.Windows.UIElement3D.StylusDownEvent
  - System.Windows.UIElement3D.StylusEnter
  - System.Windows.UIElement3D.StylusEnterEvent
  - System.Windows.UIElement3D.StylusInAirMove
  - System.Windows.UIElement3D.StylusInAirMoveEvent
  - System.Windows.UIElement3D.StylusInRange
  - System.Windows.UIElement3D.StylusInRangeEvent
  - System.Windows.UIElement3D.StylusLeave
  - System.Windows.UIElement3D.StylusLeaveEvent
  - System.Windows.UIElement3D.StylusMove
  - System.Windows.UIElement3D.StylusMoveEvent
  - System.Windows.UIElement3D.StylusOutOfRange
  - System.Windows.UIElement3D.StylusOutOfRangeEvent
  - System.Windows.UIElement3D.StylusSystemGesture
  - System.Windows.UIElement3D.StylusSystemGestureEvent
  - System.Windows.UIElement3D.StylusUp
  - System.Windows.UIElement3D.StylusUpEvent
  - System.Windows.UIElement3D.TextInput
  - System.Windows.UIElement3D.TextInputEvent
  - System.Windows.UIElement3D.TouchDown
  - System.Windows.UIElement3D.TouchDownEvent
  - System.Windows.UIElement3D.TouchEnter
  - System.Windows.UIElement3D.TouchEnterEvent
  - System.Windows.UIElement3D.TouchesCaptured
  - System.Windows.UIElement3D.TouchesCapturedWithin
  - System.Windows.UIElement3D.TouchesDirectlyOver
  - System.Windows.UIElement3D.TouchesOver
  - System.Windows.UIElement3D.TouchLeave
  - System.Windows.UIElement3D.TouchLeaveEvent
  - System.Windows.UIElement3D.TouchMove
  - System.Windows.UIElement3D.TouchMoveEvent
  - System.Windows.UIElement3D.TouchUp
  - System.Windows.UIElement3D.TouchUpEvent
  - System.Windows.UIElement3D.Visibility
  - System.Windows.UIElement3D.VisibilityProperty
  langs:
  - csharp
  name: UIElement3D
  nameWithType: UIElement3D
  fullName: System.Windows.UIElement3D
  type: Class
  summary: "UIElement3D 是 WPF 核心级实现上生成的基类[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]元素和基本表示特性。"
  remarks: "UIElement3D 是可以从其派生类表示特定的三维元素的抽象基类。       三维元素的输入、 焦点和事件处理行为通常是中定义了许多 UIElement3D 类。 这包括键盘、 鼠标和触笔输入和相关的状态属性的事件。 其中许多事件是路由的事件，并且有许多输入相关的事件的这两个冒泡路由版本，以及事件的隧道版本。 这些成对的事件通常是控件作者最感兴趣的事件。       此外包括 UIElement3D[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]与相关[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]事件模型，包括可以引发指定的方法路由源自元素实例的事件。       UIElement3D 具有专门由 UIElement3D 类定义的以下功能:-可响应用户输入 (包括控件的输入通过处理事件的发送位置路由或路由的命令)。      -可以引发逻辑元素树路由的路由的事件。      1> [!IMPORTANT]&1;><xref:System.Windows.UIElement3D.Visibility%2A>状态将影响所有输入的处理由该元素。</xref:System.Windows.UIElement3D.Visibility%2A> 不可见的元素不参与的命中测试和不接收输入的事件，即使鼠标位于将元素的边界如果可见。       与不同<xref:System.Windows.UIElement>类，UIElement3D 类不包括布局。</xref:System.Windows.UIElement> 因此，UIElement3D 类不包括**度量值**或**排列**方法。       一个派生自 UIElement3D 并维护其自己的<xref:System.Windows.Media.Media3D.Visual3D>通过重写<xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A>并且<xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A>仍必须通过新<xref:System.Windows.Media.Media3D.Visual3D>的对象添加到<xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A>.</xref:System.Windows.Media.Media3D.Visual3D.AddVisual3DChild%2A></xref:System.Windows.Media.Media3D.Visual3D></xref:System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount%2A></xref:System.Windows.Media.Media3D.Visual3D.GetVisual3DChild%2A>对象</xref:System.Windows.Media.Media3D.Visual3D>的集合类       UIElement3D 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to derive from the UIElement3D class to create a `Sphere` class:  \n  \n [!code-cs[Shapes#Sphere](~/add/codesnippet/csharp/Shapes/Sphere.cs#sphere)]\n [!code-vb[Shapes#Sphere](~/add/codesnippet/visualbasic/shapes/sphere.vb#sphere)]  \n  \n For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044)."
  syntax:
    content: 'public abstract class UIElement3D : System.Windows.Media.Media3D.Visual3D, System.Windows.IInputElement'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Media3D.Visual3D
  implements:
  - System.Windows.IInputElement
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Media.Media3D.Visual3D.AddVisual3DChild(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Media3D.Visual3D.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.Media.Media3D.Visual3D.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Media3D.Visual3D.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.Media.Media3D.Visual3D.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.Media.Media3D.Visual3D.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Media3D.Visual3D.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.Media.Media3D.Visual3D.GetVisual3DChild(System.Int32)
  - System.Windows.Media.Media3D.Visual3D.HasAnimatedProperties
  - System.Windows.Media.Media3D.Visual3D.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Media3D.Visual3D.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Media3D.Visual3D.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Media3D.Visual3D.RemoveVisual3DChild(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Media3D.Visual3D.Transform
  - System.Windows.Media.Media3D.Visual3D.TransformProperty
  - System.Windows.Media.Media3D.Visual3D.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Media3D.Visual3D.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Media3D.Visual3D.TransformToDescendant(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Media3D.Visual3D.Visual3DChildrenCount
  - System.Windows.Media.Media3D.Visual3D.Visual3DModel
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.UIElement3D.#ctor
  id: '#ctor'
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: UIElement3D()
  nameWithType: UIElement3D.UIElement3D()
  fullName: System.Windows.UIElement3D.UIElement3D()
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.UIElement3D&quot;></xref>类。"
  remarks: "UIElement3D 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected UIElement3D ();
    parameters: []
  overload: System.Windows.UIElement3D.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement3D.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement3D.AddHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "添加路由的事件处理程序为指定的路由事件，将该处理程序添加到当前元素的处理程序集合。"
  remarks: "可以将同一事件的同一处理程序添加多次而不会引发异常。 但是，该处理程序实际调用的多次处理该事件时。 因此，请考虑如何此行为可能会产生的负面影响，应考虑在处理程序实现。       通常使用此方法来提供的&quot;添加&quot;访问器实现[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]事件的自定义的路由事件的访问模式。       AddHandler 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "要处理的路由事件标识符。"
    - id: handler
      type: System.Delegate
      description: "对处理程序实现的引用。"
  overload: System.Windows.UIElement3D.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  id: AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement3D.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement3D.AddHandler(RoutedEvent,Delegate,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "添加路由的事件处理程序为指定的路由事件，将该处理程序添加到当前元素的处理程序集合。 指定<code> handledEventsToo </code>作为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>为已标记为由事件路由的另一个元素处理的路由事件调用所提供的处理程序。"
  remarks: "处理低级别的输入的事件中切实可行的方法是一个复杂的任务。 许多控件实现的行为其中特定事件被标记为已处理，而替换为另一个更直观的事件。 通常情况下，控制为已处理某个设计意图要求这样做是否只是标注平台输入的事件。 在某些情况下，这些设计意图可能不是你的输入事件的特定处理的要求。 它为这些方案是该注册处理程序替换`handledEventsToo`作为`true`适合。 但你不应该这样做例行。 调用以响应所有事件处理程序，即使处理将使你自己的应用程序事件处理逻辑。 如果处理程序逻辑是庞大，可能会看到导致性能降低。 你应保留使用附加的已处理事件的情况下，你已检测到在开发过程中，某些控件正在处理你仍想要使用应用程序逻辑处理的事件的处理程序。       避免处理的某些事件控件组合的行为的类的另一种方法是使用该事件的预览版的替代项。 例如，如果<xref:System.Windows.UIElement3D.MouseLeftButtonDown>标记为已处理类处理，你可能能够为添加处理程序<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>相反。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> </xref:System.Windows.UIElement3D.MouseLeftButtonDown>       可以将同一事件的同一处理程序添加多次而不会引发异常。 但是，该处理程序实际调用的多次处理该事件时。 因此，请考虑如何此行为可能会产生的负面影响，应考虑在处理程序实现。       通常使用此方法来提供的&quot;添加&quot;访问器实现[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]事件的自定义的路由事件的访问模式。       AddHandler 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddHandler (System.Windows.RoutedEvent routedEvent, Delegate handler, bool handledEventsToo);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "要处理的路由事件标识符。"
    - id: handler
      type: System.Delegate
      description: "对处理程序实现的引用。"
    - id: handledEventsToo
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要注册处理程序，以便即使路由的事件被标记为调用它处理其事件数据; 中<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>使用但不会默认条件注册处理程序调用如果路由的事件已标记为已处理。       默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。       请勿定期请求重新处理路由的事件。 有关详细信息，请参阅备注。"
  overload: System.Windows.UIElement3D.AddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  id: AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement3D.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement3D.AddToEventRoute(EventRoute,RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "将处理程序添加到指定<xref href=&quot;System.Windows.EventRoute&quot;></xref>当前<xref href=&quot;System.Windows.UIElement3D&quot;></xref>事件处理程序集合。"
  remarks: "此方法可以由内容主机元素 (实现<xref:System.Windows.IContentHost>或那些不) 若要将子元素的处理程序添加到<xref:System.Windows.EventRoute>。</xref:System.Windows.EventRoute> </xref:System.Windows.IContentHost>       AddToEventRoute 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddToEventRoute (System.Windows.EventRoute route, System.Windows.RoutedEventArgs e);
    parameters:
    - id: route
      type: System.Windows.EventRoute
      description: "处理程序添加到事件路由。"
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "用于添加处理程序事件数据。 此方法使用<xref:System.Windows.RoutedEventArgs.RoutedEvent*>要创建的处理程序的事件数据的属性。</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  overload: System.Windows.UIElement3D.AddToEventRoute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AllowDrop
  id: AllowDrop
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AllowDrop
  nameWithType: UIElement3D.AllowDrop
  fullName: System.Windows.UIElement3D.AllowDrop
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示此元素可用作拖放操作的目标。"
  remarks: "拖放操作默认情况下，不启用和必须通过设置为 AllowDrop 有意启用`true`。 除了此基本设置，拖放行为完全是特定的实现，并且未定义的<xref:System.Windows.UIElement3D>或其他基元素的类。</xref:System.Windows.UIElement3D> 例如，某些控件<xref:System.Windows.Controls.RichTextBox>，是否有一个默认行为。</xref:System.Windows.Controls.RichTextBox> 拖放的详细信息，请参阅[拖放概述](~/add/includes/ajax-current-ext-md.md)。       AllowDrop 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_AllowDrop&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.AllowDropProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.AllowDropProperty>"
  syntax:
    content: public bool AllowDrop { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素可用作拖放操作; 目标否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AllowDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AllowDropProperty
  id: AllowDropProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AllowDropProperty
  nameWithType: UIElement3D.AllowDropProperty
  fullName: System.Windows.UIElement3D.AllowDropProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.AllowDrop*>依赖项属性。</xref:System.Windows.UIElement3D.AllowDrop*>"
  remarks: "AllowDropProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowDropProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesCaptured
  id: AreAnyTouchesCaptured
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesCaptured
  nameWithType: UIElement3D.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement3D.AreAnyTouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示是否将至少一次触摸设备捕获到此元素。"
  syntax:
    content: public bool AreAnyTouchesCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在至少一次触摸，捕获到此元素;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AreAnyTouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
  id: AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement3D.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.AreAnyTouchesCaptured*>依赖项属性。</xref:System.Windows.UIElement3D.AreAnyTouchesCaptured*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
  id: AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示是否在至少一次触摸设备捕获到此元素或其可视化树中任何子元素。"
  syntax:
    content: public bool AreAnyTouchesCapturedWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在至少一次触摸，捕获到此元素或其可视化树中的任何子元素否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
  id: AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin*>依赖项属性。</xref:System.Windows.UIElement3D.AreAnyTouchesCapturedWithin*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesCapturedWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
  id: AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示是否在至少一次触摸设备按下了此元素。"
  syntax:
    content: public bool AreAnyTouchesDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素; 按至少一次触摸设备否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
  id: AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver*>依赖项属性。</xref:System.Windows.UIElement3D.AreAnyTouchesDirectlyOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesOver
  id: AreAnyTouchesOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesOver
  nameWithType: UIElement3D.AreAnyTouchesOver
  fullName: System.Windows.UIElement3D.AreAnyTouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示是否在至少一次触摸设备按下了此元素或其可视化树中的任何子元素上方。"
  syntax:
    content: public bool AreAnyTouchesOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素或其可视化树中的任何子元素上方按至少一次触摸设备否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.AreAnyTouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.AreAnyTouchesOverProperty
  id: AreAnyTouchesOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement3D.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.AreAnyTouchesOver*>依赖项属性。</xref:System.Windows.UIElement3D.AreAnyTouchesOver*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AreAnyTouchesOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.CaptureMouse
  id: CaptureMouse
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: CaptureMouse()
  nameWithType: UIElement3D.CaptureMouse()
  fullName: System.Windows.UIElement3D.CaptureMouse()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "尝试强制鼠标捕获到此元素。"
  remarks: "若要捕获，必须启用一个元素。 检查是否<xref:System.Windows.UIElement3D.IsEnabled%2A>是`true`之前调用 CaptureMouse。</xref:System.Windows.UIElement3D.IsEnabled%2A>       如果调用 CaptureMouse 返回`true`，然后<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>也`true`。</xref:System.Windows.UIElement3D.IsMouseCaptured%2A>       如果调用 CaptureMouse 返回`true`，则<xref:System.Windows.UIElement3D.GotMouseCapture>和<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>引发的事件，与<xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName>在事件数据报告为称为 CaptureMouse 方法的元素。</xref:System.Windows.RoutedEventArgs.Source%2A?displayProperty=fullName> </xref:System.Windows.UIElement3D.IsMouseCapturedChanged> </xref:System.Windows.UIElement3D.GotMouseCapture> 如果强制捕获时，你可能干扰现有捕获-尤其是在具有与拖放与鼠标相关的捕获。       若要清除从所有元素的鼠标捕获，请调用<xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>与`element`参数作为提供`null`。</xref:System.Windows.Input.Mouse.Capture%2A?displayProperty=fullName>       CaptureMouse 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool CaptureMouse ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已成功捕获了鼠标;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.CaptureMouse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.CaptureStylus
  id: CaptureStylus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: CaptureStylus()
  nameWithType: UIElement3D.CaptureStylus()
  fullName: System.Windows.UIElement3D.CaptureStylus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "尝试强制触笔捕获到此元素。"
  remarks: "始终根据基础默认触笔设备的默认实现返回`true`。 但是，如果你要扩展提供在输入系统的设备实现的输入的设备，则可能与一个备用的触笔设备实现，可能会返回不同的结果中创建系统。       当元素捕获触笔时，它会接收触笔输入，即使触笔超出界限。 通常，将触笔捕获仅在拖放操作过程。       调用此方法调用基础的静态<xref:System.Windows.Input.Stylus>方法<xref:System.Windows.Input.Stylus.Capture%2A>.</xref:System.Windows.Input.Stylus.Capture%2A> </xref:System.Windows.Input.Stylus> 由活动的触笔设备实现实现实际捕获行为。       若要捕获，必须启用一个元素。 检查是否<xref:System.Windows.UIElement3D.IsEnabled%2A>是`true`返回之前调用 CaptureStylus。</xref:System.Windows.UIElement3D.IsEnabled%2A>       如果调用 CaptureStylus 返回`true`，<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>也`true`。</xref:System.Windows.UIElement3D.IsStylusCaptured%2A>       CaptureStylus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool CaptureStylus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已成功捕获了触笔;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.CaptureStylus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)
  id: CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement3D.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement3D.CaptureTouch(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "尝试强制将触摸屏输入捕获到此元素。"
  remarks: "将返回 CaptureTouch`false`如果<xref:System.Windows.Input.TouchDevice>当前捕获到另一个元素。</xref:System.Windows.Input.TouchDevice>       如果 CaptureTouch 返回`true`，则<xref:System.Windows.UIElement3D.GotTouchCapture>引发事件。</xref:System.Windows.UIElement3D.GotTouchCapture>       若要释放的单个触摸从此元素的捕获，请使用<xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A>方法并指定要释放的触摸设备。</xref:System.Windows.UIElement3D.ReleaseTouchCapture%2A> 若要释放所有触摸从此元素，请使用<xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A>方法。</xref:System.Windows.UIElement3D.ReleaseAllTouchCaptures%2A>"
  syntax:
    content: public bool CaptureTouch (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "要捕获的设备。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的触摸屏输入捕获到此元素;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.CaptureTouch*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement3D.CommandBindings
  id: CommandBindings
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: CommandBindings
  nameWithType: UIElement3D.CommandBindings
  fullName: System.Windows.UIElement3D.CommandBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取的集合<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>与此元素关联的对象。"
  remarks: "A<xref:System.Windows.Input.CommandBinding>启用此元素的特定命令的命令处理并声明命令、 其事件，以及此元素附加的处理程序之间的链接。</xref:System.Windows.Input.CommandBinding>       另一个 CommandBindings 集合中填入的典型方法是使用<xref:System.Windows.Input.CommandManager>方法以编程方式。</xref:System.Windows.Input.CommandManager>       CommandBindings 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlPropertyElementUsage_CommandBindings&quot;></a># # XAML 属性元素用法```   <object>     <object.CommandBindings>       oneOrMoreCommandBindings  </object.CommandBindings>   </object>   ``` <a name=&quot;xamlValues_CommandBindings&quot;> </a> # # XAML 值*oneOrMoreCommandBindings*一个或多个<xref:System.Windows.Input.CommandBinding>元素。</xref:System.Windows.Input.CommandBinding>       每个都应当有<xref:System.Windows.Input.CommandBinding.Command%2A>属性设置为所知的命令，并且属性设置为<xref:System.Windows.Input.CommandBinding.CanExecute>和<xref:System.Windows.Input.CommandBinding.Executed>处理程序实现。</xref:System.Windows.Input.CommandBinding.Executed> </xref:System.Windows.Input.CommandBinding.CanExecute> </xref:System.Windows.Input.CommandBinding.Command%2A> 有关详细信息，请参阅<xref:System.Windows.Input.CommandBinding>。</xref:System.Windows.Input.CommandBinding>"
  syntax:
    content: public System.Windows.Input.CommandBindingCollection CommandBindings { get; }
    return:
      type: System.Windows.Input.CommandBindingCollection
      description: "所有的集合<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>对象。"
  overload: System.Windows.UIElement3D.CommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragEnter
  id: DragEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragEnter
  nameWithType: UIElement3D.DragEnter
  fullName: System.Windows.UIElement3D.DragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告出现以此元素为拖动目标的基础拖动事件时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>附加此类事件，以便 DragEnter 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName> 连接到的 DragEnter 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName>       DragEnter 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_DragEnter&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.DragEnterEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.DragEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewDragEnter>.</xref:System.Windows.UIElement3D.PreviewDragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.DragEnterEvent>      -重写<xref:System.Windows.UIElement3D.OnDragEnter%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragEnterEvent
  id: DragEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragEnterEvent
  nameWithType: UIElement3D.DragEnterEvent
  fullName: System.Windows.UIElement3D.DragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.DragEnter&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       DragEnterEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragLeave
  id: DragLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragLeave
  nameWithType: UIElement3D.DragLeave
  fullName: System.Windows.UIElement3D.DragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告出现以此元素为拖动起点的基础拖动事件时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>附加此类事件，以便 DragLeave 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName> 连接到的 DragLeave 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName>       DragLeave 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_DragLeave&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.DragLeaveEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.DragEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewDragLeave>.</xref:System.Windows.UIElement3D.PreviewDragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.DragLeaveEvent>      -重写<xref:System.Windows.UIElement3D.OnDragLeave%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragLeaveEvent
  id: DragLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragLeaveEvent
  nameWithType: UIElement3D.DragLeaveEvent
  fullName: System.Windows.UIElement3D.DragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.DragLeave&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       DragLeaveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragOver
  id: DragOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragOver
  nameWithType: UIElement3D.DragOver
  fullName: System.Windows.UIElement3D.DragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告出现以此元素为可能放置目标的基础拖动事件时发生。"
  remarks: "如果即使拖动源自于元素边界，则会发生此事件。 如果拖动的范围之外启动，然后将移动内，也会引发此事件，以及<xref:System.Windows.UIElement3D.DragEnter>和相关预览事件。</xref:System.Windows.UIElement3D.DragEnter>       此事件创建一个别名<xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>附加此类事件，以便拖动摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.DragOver?displayProperty=fullName> 连接到的拖动事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.DragOver?displayProperty=fullName>       拖动是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_DragOver&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.DragOverEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.DragEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewDragOver>.</xref:System.Windows.UIElement3D.PreviewDragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.DragOverEvent>      -重写<xref:System.Windows.UIElement3D.OnDragOver%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler DragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DragOverEvent
  id: DragOverEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DragOverEvent
  nameWithType: UIElement3D.DragOverEvent
  fullName: System.Windows.UIElement3D.DragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.DragOver&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       DragOverEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.Drop
  id: Drop
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: Drop
  nameWithType: UIElement3D.Drop
  fullName: System.Windows.UIElement3D.Drop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告出现以此元素为放置目标的基础放置事件时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.DragDrop.Drop?displayProperty=fullName>此类，因此该 Drop 是一部分的附加的事件的类成员列表时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.Drop?displayProperty=fullName> 连接到的拖放事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.Drop?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.Drop?displayProperty=fullName>       拖放是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_Drop&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.DropEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.DragEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewDrop>.</xref:System.Windows.UIElement3D.PreviewDrop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.DropEvent>      -重写<xref:System.Windows.UIElement3D.OnDrop%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler Drop;
    return:
      type: System.Windows.DragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.DropEvent
  id: DropEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: DropEvent
  nameWithType: UIElement3D.DropEvent
  fullName: System.Windows.UIElement3D.DropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.Drop&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       DropEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.Focus
  id: Focus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: Focus()
  nameWithType: UIElement3D.Focus()
  fullName: System.Windows.UIElement3D.Focus()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "尝试在此元素上设置逻辑焦点。"
  remarks: "可获得焦点，<xref:System.Windows.UIElement3D.Focusable%2A>和<xref:System.Windows.UIElement3D.IsEnabled%2A>必须都是`true`。</xref:System.Windows.UIElement3D.IsEnabled%2A> </xref:System.Windows.UIElement3D.Focusable%2A>       即使元素是特定的树中的焦点并已启用，事件处理，（例如，用于复合控件） 可能会响应预览焦点事件通过不允许焦点，因此此方法将返回`false`。       如果调用焦点返回`true`，<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>和<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>也`true`。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> </xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>       如果相关的属性不是已`true`，当调用焦点，一个或多个以下事件将按照以下顺序引发︰ <xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>， <xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>（来源为新的焦点目标）， <xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>， <xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>， <xref:System.Windows.UIElement3D.LostKeyboardFocus>， <xref:System.Windows.UIElement3D.GotKeyboardFocus>（来源为新的焦点目标）。</xref:System.Windows.UIElement3D.GotKeyboardFocus> </xref:System.Windows.UIElement3D.LostKeyboardFocus> </xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> </xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> </xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> </xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>       在此调用会成功，需以前就具有焦点的应用程序中的某些其他元素的顺序。       焦点通常由两个不同的概念︰ 键盘焦点和逻辑焦点，并不总是相同。 此方法将逻辑焦点，设置，还将尝试设置键盘焦点。 没有要将键盘焦点置于具体而言，由于用户输入将发生这种情况的编程方法。 有关详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。       焦点是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool Focus ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果同时逻辑和键盘焦点设置到此元素;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果仅设置逻辑焦点。"
  overload: System.Windows.UIElement3D.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.Focusable
  id: Focusable
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: Focusable
  nameWithType: UIElement3D.Focusable
  fullName: System.Windows.UIElement3D.Focusable
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取或设置一个值，指示元素是否可以接收焦点。"
  remarks: "具有焦点的元素收到键盘输入。       焦点是[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]它实际上是依赖项属性的属性访问器。 此特定的依赖项属性非常普遍地具有派生的元素的类以不同方式设置其原本&quot;默认&quot;值。 这通常发生在两种方式之一:-依赖项属性继承的特定派生类中，但该派生的类重写依赖项属性的元数据，并更改属性默认值。       .NET Framework 版本 3.5 中引入可获得焦点。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_Focusable&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.FocusableProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.FocusableProperty>"
  syntax:
    content: public bool Focusable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该元素是可获得焦点;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，但请参阅备注。"
  overload: System.Windows.UIElement3D.Focusable*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.FocusableChanged
  id: FocusableChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: FocusableChanged
  nameWithType: UIElement3D.FocusableChanged
  fullName: System.Windows.UIElement3D.FocusableChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.Focusable*>属性更改。</xref:System.Windows.UIElement3D.Focusable*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       FocusableChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler FocusableChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.FocusableProperty
  id: FocusableProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: FocusableProperty
  nameWithType: UIElement3D.FocusableProperty
  fullName: System.Windows.UIElement3D.FocusableProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.Focusable*>依赖项属性。</xref:System.Windows.UIElement3D.Focusable*>"
  remarks: "FocusableProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusableProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GetUIParentCore
  id: GetUIParentCore
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GetUIParentCore()
  nameWithType: UIElement3D.GetUIParentCore()
  fullName: System.Windows.UIElement3D.GetUIParentCore()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当在派生类中重写时将返回备用[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]父此元素，如果不存在可视父级。"
  remarks: "此方法的默认虚拟实现返回`null`。 <xref:System.Windows.FrameworkElement>提供实际实现。</xref:System.Windows.FrameworkElement>       实现事件路由，在其中元素创建备用父级结构，以便其事件是路由偏离到标准的父级的可视化树向上路由的标准模式的方式或向下预览路由策略的情况下将使用备用父级。       GetUIParentCore 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected System.Windows.DependencyObject GetUIParentCore ();
    parameters: []
    return:
      type: System.Windows.DependencyObject
      description: "一个对象，如果派生类实现具有备用父连接到报表。"
  overload: System.Windows.UIElement3D.GetUIParentCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GiveFeedback
  id: GiveFeedback
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GiveFeedback
  nameWithType: UIElement3D.GiveFeedback
  fullName: System.Windows.UIElement3D.GiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告涉及此元素的基础拖放事件时发生。"
  remarks: "GiveFeedback 事件允许拖动事件，以便为用户可视反馈提供拖放操作期间修改鼠标指针的外观的源。 视觉反馈用于强调拖放操作正在进行。       此事件创建一个别名<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>附加此类事件，以便 GiveFeedback 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName> 连接到的 GiveFeedback 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName>       GiveFeedback 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GiveFeedback&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.GiveFeedbackEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.GiveFeedbackEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewGiveFeedback>.</xref:System.Windows.UIElement3D.PreviewGiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement3D.GiveFeedbackEvent>      -重写<xref:System.Windows.UIElement3D.OnGiveFeedback%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler GiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GiveFeedbackEvent
  id: GiveFeedbackEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GiveFeedbackEvent
  nameWithType: UIElement3D.GiveFeedbackEvent
  fullName: System.Windows.UIElement3D.GiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.GiveFeedback&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       GiveFeedbackEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotFocus
  id: GotFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotFocus
  nameWithType: UIElement3D.GotFocus
  fullName: System.Windows.UIElement3D.GotFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素获得逻辑焦点时发生。"
  remarks: "如果有意通过某个方法调用强制焦点，而前一个键盘焦点位于不同的范围内，则逻辑焦点将与键盘焦点不同。 在这种情况下，键盘焦点将保持其所在的元素的和其中<xref:System.Windows.UIElement3D.Focus%2A>调用方法仍获取逻辑焦点。</xref:System.Windows.UIElement3D.Focus%2A>       此事件的更精确地解释是它时引发的值<xref:System.Windows.UIElement3D.IsFocused%2A>路线中的元素的属性更改从`false`到`true`。</xref:System.Windows.UIElement3D.IsFocused%2A>       由于此事件使用冒泡路由，接收到焦点的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际获得焦点的元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       GotFocus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GotFocus&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.GotFocusEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.RoutedEventHandler>|     -没有相应隧道事件。</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement3D.GotFocusEvent>      -重写<xref:System.Windows.UIElement3D.OnGotFocus%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnGotFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler GotFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: UIElement3D.GotFocusEvent
  fullName: System.Windows.UIElement3D.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.GotFocus&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       GotFocusEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotKeyboardFocus
  id: GotKeyboardFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotKeyboardFocus
  nameWithType: UIElement3D.GotKeyboardFocus
  fullName: System.Windows.UIElement3D.GotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当针对此元素聚焦于键盘时发生。"
  remarks: "<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>是一个类似事件，跟踪中维护的一个元素; 的焦点状态的属性的状态更改在很多相同的情况下引发 GotKeyboardFocus 事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>       由于此事件使用冒泡路由，具有焦点的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际具有焦点的元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件创建一个别名<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>附加此类事件，以便 GotKeyboardFocus 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName> 连接到的 GotKeyboardFocus 事件的事件处理程序附加到基础<xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName>       GotKeyboardFocus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GotKeyboardFocus&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.GotKeyboardFocusEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus>.</xref:System.Windows.UIElement3D.PreviewGotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement3D.GotKeyboardFocusEvent>      -重写<xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler GotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotKeyboardFocusEvent
  id: GotKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotKeyboardFocusEvent
  nameWithType: UIElement3D.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.GotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.GotKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       GotKeyboardFocusEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotMouseCapture
  id: GotMouseCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotMouseCapture
  nameWithType: UIElement3D.GotMouseCapture
  fullName: System.Windows.UIElement3D.GotMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素捕获到鼠标时发生。"
  remarks: "在元素捕获鼠标，它会接收鼠标输入，即使在鼠标指针位于超出界限。 鼠标通常仅在拖放操作期间捕获，并且将保持捕获，直到发生拖放操作。       由于此事件使用冒泡路由，具有捕获的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>在事件数据以确定实际的元素具有鼠标捕获。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件创建一个别名<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>附加此类事件，以便 GotMouseCapture 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName> 连接到的 GotMouseCapture 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName>       GotMouseCapture 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GotMouseCapture&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.GotMouseCaptureEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.MouseEventHandler>|     -没有定义相应隧道事件。</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.GotMouseCaptureEvent>      -重写<xref:System.Windows.UIElement3D.OnGotMouseCapture%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnGotMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler GotMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotMouseCaptureEvent
  id: GotMouseCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotMouseCaptureEvent
  nameWithType: UIElement3D.GotMouseCaptureEvent
  fullName: System.Windows.UIElement3D.GotMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.GotMouseCapture&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       GotMouseCaptureEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotStylusCapture
  id: GotStylusCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotStylusCapture
  nameWithType: UIElement3D.GotStylusCapture
  fullName: System.Windows.UIElement3D.GotStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素捕获触笔时发生。"
  remarks: "当元素捕获触笔时，它会接收触笔输入，即使在指针位于超出界限。 触笔通常仅在拖放操作期间捕获和捕获之前发生拖放操作的状态将保持。       由于此事件使用冒泡路由，具有捕获的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定已捕获的实际元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件创建此类的附加事件的别名，以便 GotStylusCapture 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> 连接到的 GotStylusCapture 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName>       GotStylusCapture 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_GotStylusCapture&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.GotStylusCaptureEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -没有定义相应隧道事件。</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.GotStylusCaptureEvent>      -重写<xref:System.Windows.UIElement3D.OnGotStylusCapture%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnGotStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler GotStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotStylusCaptureEvent
  id: GotStylusCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotStylusCaptureEvent
  nameWithType: UIElement3D.GotStylusCaptureEvent
  fullName: System.Windows.UIElement3D.GotStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.GotStylusCapture&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       GotStylusCaptureEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotTouchCapture
  id: GotTouchCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotTouchCapture
  nameWithType: UIElement3D.GotTouchCapture
  fullName: System.Windows.UIElement3D.GotTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "触摸屏输入捕获到此元素时发生。"
  remarks: "<a name=&quot;routedEventInfo_GotTouchCapture&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.GotTouchCaptureEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>|     -重写<xref:System.Windows.UIElement3D.OnGotTouchCapture%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnGotTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.GotTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> GotTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.GotTouchCaptureEvent
  id: GotTouchCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: GotTouchCaptureEvent
  nameWithType: UIElement3D.GotTouchCaptureEvent
  fullName: System.Windows.UIElement3D.GotTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.GotTouchCapture&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.InputBindings
  id: InputBindings
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: InputBindings
  nameWithType: UIElement3D.InputBindings
  fullName: System.Windows.UIElement3D.InputBindings
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取与此元素关联的输入绑定的集合。"
  remarks: "输入的绑定支持命令来输入设备的绑定。 例如，<xref:System.Windows.Input.MouseBinding>实现的输入包括特定于鼠标设备的属性的绑定。</xref:System.Windows.Input.MouseBinding>       适用于类型的输入的绑定以及输入声明的实例的绑定，将包括的输入绑定的集合。       相关的属性， <xref:System.Windows.UIElement3D.CommandBindings%2A>，保持命令绑定的集合。</xref:System.Windows.UIElement3D.CommandBindings%2A> 这些不同于输入绑定，因为它们表示下一个级别的命令处理的操作依赖于已知的命令。       InputBindings 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlPropertyElementUsage_InputBindings&quot;></a># # XAML 属性元素用法```   <object>     <object.InputBindings>       oneOrMoreInputBindings  </object.InputBindings>   </object>   ``` <a name=&quot;xamlValues_InputBindings&quot;> </a> # # XAML 值*oneOrMoreInputBindings*一个或多个<xref:System.Windows.Input.InputBinding>元素 (通常<xref:System.Windows.Input.KeyBinding>或<xref:System.Windows.Input.MouseBinding>派生类)。</xref:System.Windows.Input.MouseBinding> </xref:System.Windows.Input.KeyBinding> </xref:System.Windows.Input.InputBinding>       其中每个都应<xref:System.Windows.Input.InputBinding.Command%2A>和<xref:System.Windows.Input.InputBinding.Gesture%2A>属性设置。</xref:System.Windows.Input.InputBinding.Gesture%2A> </xref:System.Windows.Input.InputBinding.Command%2A>"
  syntax:
    content: public System.Windows.Input.InputBindingCollection InputBindings { get; }
    return:
      type: System.Windows.Input.InputBindingCollection
      description: "输入绑定的集合。"
  overload: System.Windows.UIElement3D.InputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.InvalidateModel
  id: InvalidateModel
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: InvalidateModel()
  nameWithType: UIElement3D.InvalidateModel()
  fullName: System.Windows.UIElement3D.InvalidateModel()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "使无效表示的元素的模型。"
  remarks: "当你从派生类<xref:System.Windows.UIElement3D>类，你可以使用此方法连同<xref:System.Windows.UIElement3D.OnUpdateModel%2A>方法来刷新元素的模型。</xref:System.Windows.UIElement3D.OnUpdateModel%2A> </xref:System.Windows.UIElement3D>       只需在高级方案中调用此方法。 如果派生的类具有的外观的多个属性，并且你想要一次更新的基础模型，这种类型的一个高级的方案。       InvalidateModel 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:  \n  \n [!code-cs[Shapes#Sphere](~/add/codesnippet/csharp/Shapes/Sphere.cs#sphere)]\n [!code-vb[Shapes#Sphere](~/add/codesnippet/visualbasic/shapes/sphere.vb#sphere)]  \n  \n For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044)."
  syntax:
    content: public void InvalidateModel ();
    parameters: []
  overload: System.Windows.UIElement3D.InvalidateModel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsEnabled
  id: IsEnabled
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsEnabled
  nameWithType: UIElement3D.IsEnabled
  fullName: System.Windows.UIElement3D.IsEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示是否在中启用此元素[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。"
  remarks: "请注意，此属性会影响的类特定于实现<xref:System.Windows.UIElement3D.IsEnabledCore%2A>对于特定的元素，通常在运行时。</xref:System.Windows.UIElement3D.IsEnabledCore%2A> 因此，此处列出的默认值有时不是有效。 正在尝试设置此值将也有可能被替代<xref:System.Windows.UIElement3D.IsEnabledCore%2A>.</xref:System.Windows.UIElement3D.IsEnabledCore%2A>返回的值       未启用的元素不参与命中测试或获得焦点，并因此将不会输入事件的源。       IsEnabled 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsEnabled&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsEnabledProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsEnabledProperty>"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该元素已启用;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsEnabledChanged
  id: IsEnabledChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsEnabledChanged
  nameWithType: UIElement3D.IsEnabledChanged
  fullName: System.Windows.UIElement3D.IsEnabledChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsEnabled*>此元素的更改的属性。</xref:System.Windows.UIElement3D.IsEnabled*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsEnabledChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsEnabledChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsEnabledCore
  id: IsEnabledCore
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsEnabledCore
  nameWithType: UIElement3D.IsEnabledCore
  fullName: System.Windows.UIElement3D.IsEnabledCore
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，将成为的返回值<xref:System.Windows.UIElement3D.IsEnabled*>在派生类中。</xref:System.Windows.UIElement3D.IsEnabled*>"
  remarks: "IsEnabledCore 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual bool IsEnabledCore { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该元素已启用;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsEnabledCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsEnabledProperty
  id: IsEnabledProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsEnabledProperty
  nameWithType: UIElement3D.IsEnabledProperty
  fullName: System.Windows.UIElement3D.IsEnabledProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsEnabled*>依赖项属性。</xref:System.Windows.UIElement3D.IsEnabled*>"
  remarks: "IsEnabledProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsEnabledProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsFocused
  id: IsFocused
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsFocused
  nameWithType: UIElement3D.IsFocused
  fullName: System.Windows.UIElement3D.IsFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，确定此元素是否具有逻辑焦点。"
  remarks: "如果应用程序中有多个焦点分支，例如，菜单的内容和应用程序的其余部分之间，逻辑焦点将与键盘焦点可能会与不同。 在此方案中，键盘焦点仅可在应用程序 UI 的一个元素，但是，其他焦点分支中的某些元素仍可能保留逻辑焦点。 有关逻辑焦点的详细信息，请参阅[焦点概述](~/add/includes/ajax-current-ext-md.md)。       通过设置此属性 （它是只读的） 未设置焦点。 此属性的典型用途是将其用作依赖项属性的<xref:System.Windows.Setter>或<xref:System.Windows.EventTrigger>。</xref:System.Windows.EventTrigger> </xref:System.Windows.Setter> 若要以编程方式设置焦点，请调用<xref:System.Windows.UIElement3D.Focus%2A>.</xref:System.Windows.UIElement3D.Focus%2A> 由用户操作或控件实现，其中可能包括鼠标捕获行为，则还可以设置焦点。       IsFocused 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsFocused&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsFocusedProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsFocusedProperty>"
  syntax:
    content: public bool IsFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素具有逻辑焦点，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsFocusedProperty
  id: IsFocusedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsFocusedProperty
  nameWithType: UIElement3D.IsFocusedProperty
  fullName: System.Windows.UIElement3D.IsFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsFocused*>依赖项属性。</xref:System.Windows.UIElement3D.IsFocused*>"
  remarks: "IsFocusedProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsHitTestVisible
  id: IsHitTestVisible
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsHitTestVisible
  nameWithType: UIElement3D.IsHitTestVisible
  fullName: System.Windows.UIElement3D.IsHitTestVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取或设置一个值，声明是否此元素可以返回作为命中的测试结果的其呈现内容的某些部分。"
  remarks: "此属性的有效值受命中可测试的元素的逻辑树中的相对位置。 例如，如果一个元素的子元素的元素将是不会命中测试可见，对子属性的有效值将保持`false`，即使尝试本地设置该值。 出于此原因，很重要，未设置 IsHitTestVisible 为`false`复合控件除非你不需要任何输入或命中测试该控件上。 命中测试的详细信息，请参阅[命中测试可视层中](~/add/includes/ajax-current-ext-md.md)。       IsHitTestVisible 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsHitTestVisible&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsHitTestVisibleProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsHitTestVisibleProperty>"
  syntax:
    content: public bool IsHitTestVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素可以从至少一个点; 返回作为命中的测试结果否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsHitTestVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsHitTestVisibleChanged
  id: IsHitTestVisibleChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsHitTestVisibleChanged
  nameWithType: UIElement3D.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement3D.IsHitTestVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsHitTestVisible*>针对此元素的依赖项属性更改。</xref:System.Windows.UIElement3D.IsHitTestVisible*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsHitTestVisibleChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsHitTestVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsHitTestVisibleProperty
  id: IsHitTestVisibleProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsHitTestVisibleProperty
  nameWithType: UIElement3D.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement3D.IsHitTestVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsHitTestVisible*>依赖项属性。</xref:System.Windows.UIElement3D.IsHitTestVisible*>"
  remarks: "IsHitTestVisibleProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsHitTestVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsInputMethodEnabled
  id: IsInputMethodEnabled
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsInputMethodEnabled
  nameWithType: UIElement3D.IsInputMethodEnabled
  fullName: System.Windows.UIElement3D.IsInputMethodEnabled
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示是否输入的法系统，如[!INCLUDE[TLA#tla_ime](~/add/includes/ajax-current-ext-md.md)]，可用于处理此元素的输入。"
  remarks: "此属性返回的附加属性返回的值<xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>的当前已启用输入法 （键盘、 语音、 其他输入的设备）。</xref:System.Windows.Input.InputMethod.IsInputMethodEnabled%2A?displayProperty=fullName>       IsInputMethodEnabled 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool IsInputMethodEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果输入的法处于活动状态，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 基础附加属性的默认值是<xref uid=&quot;langword_csharp_true;&quot; name=&quot;true;&quot; href=&quot;&quot;></xref>但是，这会受到输入法在运行时的实际状态。"
  overload: System.Windows.UIElement3D.IsInputMethodEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocused
  id: IsKeyboardFocused
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocused
  nameWithType: UIElement3D.IsKeyboardFocused
  fullName: System.Windows.UIElement3D.IsKeyboardFocused
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示此元素是否具有键盘焦点。"
  remarks: "更改此属性的确定值可能伴随与焦点相关的事件。       IsKeyboardFocused 和<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>通常用于在类事件处理程序内其他输入相关的事件，例如以确定此元素已具有键盘焦点，还是进行确定当鼠标事件和键盘事件一起出现。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>       IsKeyboardFocused 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocused&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsKeyboardFocusedProperty>"
  syntax:
    content: public bool IsKeyboardFocused { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素具有键盘焦点，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsKeyboardFocused*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusedChanged
  id: IsKeyboardFocusedChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement3D.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement3D.IsKeyboardFocusedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsKeyboardFocused*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsKeyboardFocused*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsKeyboardFocusedChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusedProperty
  id: IsKeyboardFocusedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement3D.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement3D.IsKeyboardFocusedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsKeyboardFocused*>依赖项属性。</xref:System.Windows.UIElement3D.IsKeyboardFocused*>"
  remarks: "IsKeyboardFocusedProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithin
  id: IsKeyboardFocusWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusWithin
  nameWithType: UIElement3D.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示键盘焦点是否任意位置位于元素或其可视化树子元素内。"
  remarks: "更改此属性的值通常引发<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>事件，除非派生的类已重写<xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A>以禁止此事件。</xref:System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged%2A> </xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>       不能直接，设置此属性，但你可以通过调用将焦点设置到的元素<xref:System.Windows.UIElement3D.Focus%2A>，或通过使<xref:System.Windows.UIElement3D.MoveFocus%2A>请求。</xref:System.Windows.UIElement3D.MoveFocus%2A> </xref:System.Windows.UIElement3D.Focus%2A> 这些方法调用任一可能会更改此属性的值。       <xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>和 IsKeyboardFocusWithin 通常用于在类事件处理程序内其他输入相关的事件，例如以确定此元素已具有键盘焦点，还是进行确定当鼠标事件和键盘事件一起出现。</xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>       IsKeyboardFocusWithin 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsKeyboardFocusWithin&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsKeyboardFocusWithinProperty>"
  syntax:
    content: public bool IsKeyboardFocusWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果键盘焦点在元素或其子元素;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsKeyboardFocusWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
  id: IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement3D.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsKeyboardFocusWithinChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsKeyboardFocusWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
  id: IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement3D.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin*>依赖项属性。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin*>"
  remarks: "IsKeyboardFocusWithinProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsKeyboardFocusWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCaptured
  id: IsMouseCaptured
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCaptured
  nameWithType: UIElement3D.IsMouseCaptured
  fullName: System.Windows.UIElement3D.IsMouseCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示与此元素捕获了鼠标。"
  remarks: "鼠标捕获状态与相关进程内拖放操作。       IsMouseCaptured 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsMouseCaptured&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsMouseCapturedProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsMouseCapturedProperty>"
  syntax:
    content: public bool IsMouseCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果元素具有鼠标捕获，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsMouseCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCapturedChanged
  id: IsMouseCapturedChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCapturedChanged
  nameWithType: UIElement3D.IsMouseCapturedChanged
  fullName: System.Windows.UIElement3D.IsMouseCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsMouseCaptured*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsMouseCaptured*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsMouseCapturedChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCapturedProperty
  id: IsMouseCapturedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCapturedProperty
  nameWithType: UIElement3D.IsMouseCapturedProperty
  fullName: System.Windows.UIElement3D.IsMouseCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsMouseCaptured*>依赖项属性。</xref:System.Windows.UIElement3D.IsMouseCaptured*>"
  remarks: "IsMouseCapturedProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCaptureWithin
  id: IsMouseCaptureWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCaptureWithin
  nameWithType: UIElement3D.IsMouseCaptureWithin
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，确定鼠标捕获由此元素还是其可视化树中的子元素持有。"
  remarks: "IsMouseCaptureWithin 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsMouseCaptureWithin&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsMouseCaptureWithinProperty>"
  syntax:
    content: public bool IsMouseCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素或包含的元素具有鼠标捕获，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsMouseCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCaptureWithinChanged
  id: IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement3D.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsMouseCaptureWithin*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsMouseCaptureWithin*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsMouseCaptureWithinChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseCaptureWithinProperty
  id: IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement3D.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsMouseCaptureWithin*>依赖项属性。</xref:System.Windows.UIElement3D.IsMouseCaptureWithin*>"
  remarks: "IsMouseCaptureWithinProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseDirectlyOver
  id: IsMouseDirectlyOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseDirectlyOver
  nameWithType: UIElement3D.IsMouseDirectlyOver
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示是否将鼠标指针的位置对应于命中测试结果，考虑元素组合。"
  remarks: "与不同<xref:System.Windows.UIElement3D.IsMouseOver%2A>，此属性才`true`如果鼠标指针位于 literal 元素-与命中测试。 对</xref:System.Windows.UIElement3D.IsMouseOver%2A> 而如果鼠标指针悬停在子元素上，此属性将`false`。 对于大多数情况下不创作控件的情况，使用<xref:System.Windows.UIElement3D.IsMouseOver%2A>相反。</xref:System.Windows.UIElement3D.IsMouseOver%2A>       如果此元素是否捕获了鼠标，并且此属性是`true`在捕获时，此属性将继续返回`true`丢失鼠标捕获并且鼠标指针不位于其边界之前。       IsMouseDirectlyOver 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsMouseDirectlyOver&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsMouseDirectlyOverProperty>"
  syntax:
    content: public bool IsMouseDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果鼠标指针位于与命中测试; 相同的元素结果否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsMouseDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseDirectlyOverChanged
  id: IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement3D.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsMouseDirectlyOver*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsMouseDirectlyOver*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsMouseDirectlyOverChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsMouseDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseDirectlyOverProperty
  id: IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement3D.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsMouseDirectlyOver*>依赖项属性。</xref:System.Windows.UIElement3D.IsMouseDirectlyOver*>"
  remarks: "IsMouseDirectlyOverProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseOver
  id: IsMouseOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseOver
  nameWithType: UIElement3D.IsMouseOver
  fullName: System.Windows.UIElement3D.IsMouseOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示鼠标指针是否位于此元素 （包括可视化树中的子元素）。"
  remarks: "通常情况下，控件都是复合，以便控件 （可视树） 中的各种元素都将报告包含控件的鼠标状态。 例如，<xref:System.Windows.Controls.ListBox>样式控件将报告作为 IsMouseOver`true`如果鼠标位于其几何图形，包括任何<xref:System.Windows.Controls.ListBoxItem>.</xref:System.Windows.Controls.ListBoxItem> </xref:System.Windows.Controls.ListBox>       尽管类似&quot;等效于&quot;事件不存在，将执行多个类似事件。 例如，你可以处理<xref:System.Windows.UIElement3D.MouseEnter>， <xref:System.Windows.UIElement3D.MouseMove>，和<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>。</xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> </xref:System.Windows.UIElement3D.MouseMove> </xref:System.Windows.UIElement3D.MouseEnter>       如果此元素捕获鼠标，则此属性保持`true`丢失鼠标捕获并且鼠标指针离开元素边界之前。       某些控件有意捕获鼠标似乎未直接涉及鼠标某些操作。 这可能会导致 IsMouseOver 正在`true`即使看似未移动鼠标。       IsMouseOver 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsMouseOver&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsMouseOverProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsMouseOverProperty>"
  syntax:
    content: public bool IsMouseOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果鼠标指针位于元素或其子元素;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsMouseOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsMouseOverProperty
  id: IsMouseOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsMouseOverProperty
  nameWithType: UIElement3D.IsMouseOverProperty
  fullName: System.Windows.UIElement3D.IsMouseOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsMouseOver*>依赖项属性。</xref:System.Windows.UIElement3D.IsMouseOver*>"
  remarks: "IsMouseOverProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsMouseOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCaptured
  id: IsStylusCaptured
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCaptured
  nameWithType: UIElement3D.IsStylusCaptured
  fullName: System.Windows.UIElement3D.IsStylusCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示此元素捕获触笔。"
  remarks: "触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       IsStylusCaptured 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusCaptured&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsStylusCapturedProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsStylusCapturedProperty>"
  syntax:
    content: public bool IsStylusCaptured { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果元素具有触笔捕获，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsStylusCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCapturedChanged
  id: IsStylusCapturedChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCapturedChanged
  nameWithType: UIElement3D.IsStylusCapturedChanged
  fullName: System.Windows.UIElement3D.IsStylusCapturedChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsStylusCaptured*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsStylusCaptured*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsStylusCapturedChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCapturedChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCapturedProperty
  id: IsStylusCapturedProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCapturedProperty
  nameWithType: UIElement3D.IsStylusCapturedProperty
  fullName: System.Windows.UIElement3D.IsStylusCapturedProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsStylusCaptured*>依赖项属性。</xref:System.Windows.UIElement3D.IsStylusCaptured*>"
  remarks: "IsStylusCapturedProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCapturedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCaptureWithin
  id: IsStylusCaptureWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCaptureWithin
  nameWithType: UIElement3D.IsStylusCaptureWithin
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，确定是否触笔捕获是由此元素或元素边界内的元素及其可视化树持有。"
  remarks: "触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       IsStylusCaptureWithin 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusCaptureWithin&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsStylusCaptureWithinProperty>"
  syntax:
    content: public bool IsStylusCaptureWithin { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素或包含的元素具有触笔捕获，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsStylusCaptureWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCaptureWithinChanged
  id: IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement3D.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithinChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsStylusCaptureWithin*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsStylusCaptureWithin*>"
  remarks: "这是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsStylusCaptureWithinChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusCaptureWithinChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusCaptureWithinProperty
  id: IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement3D.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithinProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsStylusCaptureWithin*>依赖项属性。</xref:System.Windows.UIElement3D.IsStylusCaptureWithin*>"
  remarks: "IsStylusCaptureWithinProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusCaptureWithinProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusDirectlyOver
  id: IsStylusDirectlyOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusDirectlyOver
  nameWithType: UIElement3D.IsStylusDirectlyOver
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示是否触笔的位置对应于命中测试结果，考虑元素组合。"
  remarks: "与不同<xref:System.Windows.UIElement3D.IsStylusOver%2A>，此属性才`true`如果触笔位于元素上。</xref:System.Windows.UIElement3D.IsStylusOver%2A> 如果触笔改为子元素或元素上方的元素的更深入地组合 （可视树） 的一部分，此属性将`false`。       除非你知道如何控件的组合 （例如，你使用此属性在自定义控件模板中的控件，你定义），此属性可能会返回意外的结果。 对于大多数情况下不创作控件的情况，使用<xref:System.Windows.UIElement3D.IsStylusOver%2A>相反。</xref:System.Windows.UIElement3D.IsStylusOver%2A>       如果此元素具有触笔捕获，并且此属性为`true`捕获时，此属性将保持`true`丢失触笔捕获并且触笔不到其边界之前。       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       IsStylusDirectlyOver 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusDirectlyOver&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsStylusDirectlyOverProperty>"
  syntax:
    content: public bool IsStylusDirectlyOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果触笔指针位于与命中测试; 相同的元素结果否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsStylusDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusDirectlyOverChanged
  id: IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement3D.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOverChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsStylusDirectlyOver*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsStylusDirectlyOver*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsStylusDirectlyOverChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsStylusDirectlyOverChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusDirectlyOverProperty
  id: IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement3D.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsStylusDirectlyOver*>依赖项属性。</xref:System.Windows.UIElement3D.IsStylusDirectlyOver*>"
  remarks: "IsStylusDirectlyOverProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusDirectlyOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusOver
  id: IsStylusOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusOver
  nameWithType: UIElement3D.IsStylusOver
  fullName: System.Windows.UIElement3D.IsStylusOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示触笔光标是否位于此元素 （包括可视化子元素）。"
  remarks: "如果此元素具有触笔捕获，此属性将继续返回`true`直到触笔捕获为丢失，指针超出界限。       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       IsStylusOver 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsStylusOver&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsStylusOverProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsStylusOverProperty>"
  syntax:
    content: public bool IsStylusOver { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果触笔光标位于元素或其子元素;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsStylusOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsStylusOverProperty
  id: IsStylusOverProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsStylusOverProperty
  nameWithType: UIElement3D.IsStylusOverProperty
  fullName: System.Windows.UIElement3D.IsStylusOverProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsStylusOver*>依赖项属性。</xref:System.Windows.UIElement3D.IsStylusOver*>"
  remarks: "IsStylusOverProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsStylusOverProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsVisible
  id: IsVisible
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsVisible
  nameWithType: UIElement3D.IsVisible
  fullName: System.Windows.UIElement3D.IsVisible
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取一个值，该值指示此元素是否可见中[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]。"
  remarks: "IsVisible 值确定将许多因素考虑在内。 与此相反， <xref:System.Windows.UIElement3D.Visibility%2A>，这是可设置属性，仅表示想要以编程方式使元素可见或不可见。</xref:System.Windows.UIElement3D.Visibility%2A>       更改此属性的值通常会引发<xref:System.Windows.UIElement3D.IsVisibleChanged>事件。</xref:System.Windows.UIElement3D.IsVisibleChanged> 不存在匹配[!INCLUDE[TLA#tla_net](~/add/includes/tlasharptla-net-md.md)]&quot;上 *&quot;类处理重写方法，这会让某些派生类重写该行为并处理该事件，但仍可以直接与<xref:System.Windows.EventManager.RegisterClassHandler%2A>.</xref:System.Windows.EventManager.RegisterClassHandler%2A>附加类处理程序       IsVisible 的元素`false`不参与输入的事件 （或命令），请执行不影响的测量或排列布局，不可获得焦点，不在 tab 键序列中，并且将不会报告中的命中测试。 相反，元素其中<xref:System.Windows.UIElement3D.IsEnabled%2A>是`false`仍将参与事件或命令，以及命中测试，但不还可获得焦点。</xref:System.Windows.UIElement3D.IsEnabled%2A>       IsVisible 不用作样式触发器。 IsVisible 用作样式触发器可能会得到意外的结果。 IsVisible 用于检查由较低级别的输入实现的状态。       IsVisible 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_IsVisible&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.IsVisibleProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.IsVisibleProperty>"
  syntax:
    content: public bool IsVisible { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该元素是可见的;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.IsVisible*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsVisibleChanged
  id: IsVisibleChanged
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsVisibleChanged
  nameWithType: UIElement3D.IsVisibleChanged
  fullName: System.Windows.UIElement3D.IsVisibleChanged
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "发生时的值<xref:System.Windows.UIElement3D.IsVisible*>针对此元素的属性更改。</xref:System.Windows.UIElement3D.IsVisible*>"
  remarks: "此成员是[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]事件中，不是路由的事件。       IsVisibleChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Windows.DependencyPropertyChangedEventHandler IsVisibleChanged;
    return:
      type: System.Windows.DependencyPropertyChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.IsVisibleProperty
  id: IsVisibleProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: IsVisibleProperty
  nameWithType: UIElement3D.IsVisibleProperty
  fullName: System.Windows.UIElement3D.IsVisibleProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.IsVisible*>依赖项属性。</xref:System.Windows.UIElement3D.IsVisible*>"
  remarks: "IsVisibleProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsVisibleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.KeyDown
  id: KeyDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: KeyDown
  nameWithType: UIElement3D.KeyDown
  fullName: System.Windows.UIElement3D.KeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在此元素聚焦于键盘并且按下某个键时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>附加此类事件，以便 KeyDown 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName> 连接到的 KeyDown 事件的事件处理程序附加到基础<xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName>       KeyDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_KeyDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.KeyDownEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.KeyEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewKeyDown>.</xref:System.Windows.UIElement3D.PreviewKeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement3D.KeyDownEvent>      -重写<xref:System.Windows.UIElement3D.OnKeyDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.KeyDownEvent
  id: KeyDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: KeyDownEvent
  nameWithType: UIElement3D.KeyDownEvent
  fullName: System.Windows.UIElement3D.KeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.KeyDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       KeyDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.KeyUp
  id: KeyUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: KeyUp
  nameWithType: UIElement3D.KeyUp
  fullName: System.Windows.UIElement3D.KeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在此元素聚焦于键盘并且松开某个键时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>附加此类事件，以便 KeyUp 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName> 附加到的 KeyUp 事件的事件处理程序附加到基础<xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName>       KeyUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_KeyUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.KeyUpEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.KeyEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewKeyUp>.</xref:System.Windows.UIElement3D.PreviewKeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement3D.KeyUpEvent>      -重写<xref:System.Windows.UIElement3D.OnKeyUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler KeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.KeyUpEvent
  id: KeyUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: KeyUpEvent
  nameWithType: UIElement3D.KeyUpEvent
  fullName: System.Windows.UIElement3D.KeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.KeyUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       KeyUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent KeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostFocus
  id: LostFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostFocus
  nameWithType: UIElement3D.LostFocus
  fullName: System.Windows.UIElement3D.LostFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素丢失逻辑焦点时发生。"
  remarks: "如果有意通过某个方法调用时强制焦点，而前一个键盘焦点位于不同的范围内，则逻辑焦点将与键盘焦点不同。 在这种情况下、 其所在的键盘焦点保持和元素其中<xref:System.Windows.UIElement3D.Focus%2A>调用方法仍获取逻辑焦点。</xref:System.Windows.UIElement3D.Focus%2A>       此事件的更精确地解释是它时引发的值<xref:System.Windows.UIElement3D.IsFocused%2A>路线中的元素的属性更改从`true`到`false`。</xref:System.Windows.UIElement3D.IsFocused%2A>       由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际获得焦点的元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       LostFocus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_LostFocus&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.LostFocusEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.RoutedEventHandler>|     -没有相应隧道事件。</xref:System.Windows.RoutedEventHandler> </xref:System.Windows.UIElement3D.LostFocusEvent>      -重写<xref:System.Windows.UIElement3D.OnLostFocus%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnLostFocus%2A>"
  syntax:
    content: public event System.Windows.RoutedEventHandler LostFocus;
    return:
      type: System.Windows.RoutedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: UIElement3D.LostFocusEvent
  fullName: System.Windows.UIElement3D.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.LostFocus&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       LostFocusEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostKeyboardFocus
  id: LostKeyboardFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostKeyboardFocus
  nameWithType: UIElement3D.LostKeyboardFocus
  fullName: System.Windows.UIElement3D.LostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在此元素不再聚焦于键盘时发生。"
  remarks: "由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际失去焦点的元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件创建一个别名<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>附加此类事件，以便 LostKeyboardFocus 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName> 连接到的 LostKeyboardFocus 事件的事件处理程序附加到基础<xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName>       LostKeyboardFocus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_LostKeyboardFocus&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.LostKeyboardFocusEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus>.</xref:System.Windows.UIElement3D.PreviewLostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement3D.LostKeyboardFocusEvent>      -重写<xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler LostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostKeyboardFocusEvent
  id: LostKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostKeyboardFocusEvent
  nameWithType: UIElement3D.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.LostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.LostKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       LostKeyboardFocusEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostMouseCapture
  id: LostMouseCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostMouseCapture
  nameWithType: UIElement3D.LostMouseCapture
  fullName: System.Windows.UIElement3D.LostMouseCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素丢失鼠标捕获时发生。"
  remarks: "在元素捕获鼠标，它会接收鼠标输入，即使在指针位于超出界限。 通常仅在拖放操作期间捕获了鼠标。       由于此事件使用冒泡路由，丢失捕获的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定丢失捕获的实际元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件创建一个别名<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>附加此类事件，以便 LostMouseCapture 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName> 连接到的 LostMouseCapture 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName>       LostMouseCapture 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_LostMouseCapture&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.LostMouseCaptureEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.MouseEventHandler>|     -没有定义相应隧道事件。</xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.LostMouseCaptureEvent>      -重写<xref:System.Windows.UIElement3D.OnLostMouseCapture%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnLostMouseCapture%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler LostMouseCapture;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostMouseCaptureEvent
  id: LostMouseCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostMouseCaptureEvent
  nameWithType: UIElement3D.LostMouseCaptureEvent
  fullName: System.Windows.UIElement3D.LostMouseCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.LostMouseCapture&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       LostMouseCaptureEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostMouseCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostStylusCapture
  id: LostStylusCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostStylusCapture
  nameWithType: UIElement3D.LostStylusCapture
  fullName: System.Windows.UIElement3D.LostStylusCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素丢失触笔捕获时发生。"
  remarks: "当元素捕获触笔时，它会接收触笔输入，即使在指针位于超出界限。 通常，将触笔捕获仅在拖放操作过程。       由于此事件使用冒泡路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际失去焦点的元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件创建一个别名<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>附加此类事件，以便 LostStylusCapture 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName> 连接到的 LostStylusCapture 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName>       LostStylusCapture 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_LostStylusCapture&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.LostStylusCaptureEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -没有定义相应隧道事件。</xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.LostStylusCaptureEvent>      -重写<xref:System.Windows.UIElement3D.OnLostStylusCapture%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnLostStylusCapture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler LostStylusCapture;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostStylusCaptureEvent
  id: LostStylusCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostStylusCaptureEvent
  nameWithType: UIElement3D.LostStylusCaptureEvent
  fullName: System.Windows.UIElement3D.LostStylusCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.LostStylusCapture&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       LostStylusCaptureEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostStylusCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostTouchCapture
  id: LostTouchCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostTouchCapture
  nameWithType: UIElement3D.LostTouchCapture
  fullName: System.Windows.UIElement3D.LostTouchCapture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素丢失触摸屏输入捕获时发生。"
  remarks: "<a name=&quot;routedEventInfo_LostTouchCapture&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.LostTouchCaptureEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -重写<xref:System.Windows.UIElement3D.OnLostTouchCapture%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnLostTouchCapture%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.LostTouchCaptureEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> LostTouchCapture;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.LostTouchCaptureEvent
  id: LostTouchCaptureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: LostTouchCaptureEvent
  nameWithType: UIElement3D.LostTouchCaptureEvent
  fullName: System.Windows.UIElement3D.LostTouchCaptureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.LostTouchCapture&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostTouchCaptureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseDown
  id: MouseDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseDown
  nameWithType: UIElement3D.MouseDown
  fullName: System.Windows.UIElement3D.MouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "指针位于此元素上并且按下任何鼠标按钮时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>附加此类事件，以便 MouseDown 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 连接到的 MouseDown 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       MouseDown 事件通常一起引发<xref:System.Windows.UIElement3D.MouseLeftButtonDown>或<xref:System.Windows.UIElement3D.MouseRightButtonDown>，这对应于按下的某个之一的两个标准鼠标按钮。</xref:System.Windows.UIElement3D.MouseRightButtonDown> </xref:System.Windows.UIElement3D.MouseLeftButtonDown> <xref:System.Windows.UIElement3D.MouseLeftButtonDown>和<xref:System.Windows.UIElement3D.MouseRightButtonDown>也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件到达事件路由中的此元素。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D.MouseRightButtonDown></xref:System.Windows.UIElement3D.MouseLeftButtonDown> 有关<xref:System.Windows.UIElement3D.MouseLeftButtonDown>或<xref:System.Windows.UIElement3D.MouseRightButtonDown>。</xref:System.Windows.UIElement3D.MouseRightButtonDown> </xref:System.Windows.UIElement3D.MouseLeftButtonDown> ，请参见备注      1> [!IMPORTANT]&1;> 某些控件可能具有固有鼠标按钮事件处理的类。 按下事件鼠标左键是最可能的事件，能够在控件中处理的类。 类通常处理标记基础<xref:System.Windows.Input.Mouse>类事件为已处理。</xref:System.Windows.Input.Mouse> 一旦事件被标记为已处理，其他实例处理程序附加到该元素通常不会引发。 通常也不会引发的任何其他类或实例处理程序附加到冒泡方向向 UI 树的根节点中的元素。       你可以解决的问题，中前面的重要说明所述，服务仍然收到按下事件具有类处理通过使用这些解决方案的派生类上的鼠标左键的 MouseDown 事件:-附加处理程序<xref:System.Windows.UIElement3D.PreviewMouseDown>未标记为已由控件处理的事件。</xref:System.Windows.UIElement3D.PreviewMouseDown> 请注意，由于这是预览事件，则路由从根开始并挖掘到控件。      -注册处理程序在控件上的按程序通过调用<xref:System.Windows.UIElement3D.AddHandler%2A>并选择使处理程序能够侦听事件，即使它们已标记为已处理路由的事件数据中的签名选项。</xref:System.Windows.UIElement3D.AddHandler%2A>       MouseDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseDownEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewMouseDown>.</xref:System.Windows.UIElement3D.PreviewMouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseDownEvent>      -重写<xref:System.Windows.UIElement3D.OnMouseDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseDownEvent
  id: MouseDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseDownEvent
  nameWithType: UIElement3D.MouseDownEvent
  fullName: System.Windows.UIElement3D.MouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseEnter
  id: MouseEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseEnter
  nameWithType: UIElement3D.MouseEnter
  fullName: System.Windows.UIElement3D.MouseEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针进入此元素的边界时发生。"
  remarks: "MouseEnter 是[路由事件概述](~/add/includes/ajax-current-ext-md.md)使用直接的事件处理路由策略。 在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。       尽管 MouseEnter 跟踪当鼠标指针进入元素的边界内，此事件更确切地报告<xref:System.Windows.UIElement3D.IsMouseOver%2A>属性值已更改，不再`false`到`true`针对此元素。</xref:System.Windows.UIElement3D.IsMouseOver%2A>       此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>附加此类事件，以便 MouseEnter 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName> 连接到的 MouseEnter 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName>       MouseEnter 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseEnter&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseEnterEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnMouseEnter%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseEnter%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.MouseEnterEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseEnter;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseEnterEvent
  id: MouseEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseEnterEvent
  nameWithType: UIElement3D.MouseEnterEvent
  fullName: System.Windows.UIElement3D.MouseEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseEnter&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseEnterEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeave
  id: MouseLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeave
  nameWithType: UIElement3D.MouseLeave
  fullName: System.Windows.UIElement3D.MouseLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针离开此元素的边界时发生。"
  remarks: "MouseLeave 是[路由事件概述](~/add/includes/ajax-current-ext-md.md)使用直接的事件处理路由策略。 在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。       尽管 MouseLeave 跟踪鼠标离开某个元素时，此事件更确切地报告<xref:System.Windows.UIElement3D.IsMouseOver%2A>属性值已更改，不再`true`到`false`针对此元素。</xref:System.Windows.UIElement3D.IsMouseOver%2A>       此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>附加此类事件，以便 MouseLeave 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName> 连接到的 MouseLeave 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName>       MouseLeave 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseLeave&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseLeaveEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnMouseLeave%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseLeave%2A> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.MouseLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseLeave;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeaveEvent
  id: MouseLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeaveEvent
  nameWithType: UIElement3D.MouseLeaveEvent
  fullName: System.Windows.UIElement3D.MouseLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseLeave&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseLeaveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeftButtonDown
  id: MouseLeftButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeftButtonDown
  nameWithType: UIElement3D.MouseLeftButtonDown
  fullName: System.Windows.UIElement3D.MouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鼠标指针位于此元素上并且按下鼠标左键时发生。"
  remarks: "尽管这[路由事件概述](~/add/includes/ajax-current-ext-md.md)似乎遵循冒泡路由通过元素树，它实际上是直接的路由的事件引发和每个<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D>遵循沿元素树       此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件，即处理为由事件路由每个元素的附加的事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement3D.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果将标记 MouseLeftButtonDown 处理时，实质上将标记<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>处理沿路由的所有其他侦听器和所有相关事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 这可能包括如<xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>的类处理程序生成事件       从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement3D>) 视为鼠标&quot;服务&quot;(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。 对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]在<xref:System.Windows.Input.Mouse>类，而不是那些<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D></xref:System.Windows.Input.Mouse>上      1> [!IMPORTANT]&1;> 类处理通常将标记基础<xref:System.Windows.Input.Mouse>类事件为已处理。</xref:System.Windows.Input.Mouse> 一旦事件被标记为已处理，其他实例处理程序附加到该元素通常不会引发。 通常也不会引发的任何其他类或实例处理程序附加到冒泡方向向 UI 树的根节点中的元素。       你可以解决的问题，中前面的重要说明所述，服务仍然收到 MouseLeftButtonDown 鼠标左键按下具有类处理通过使用这些解决方案的派生类上的事件的事件:-附加处理程序<xref:System.Windows.UIElement3D.PreviewMouseDown>未标记为已由控件处理的事件。</xref:System.Windows.UIElement3D.PreviewMouseDown> 请注意，由于这是预览事件，则路由从根开始并挖掘到控件。      -注册处理程序在控件上的按程序通过调用<xref:System.Windows.UIElement3D.AddHandler%2A>并选择使处理程序能够侦听事件，即使它们已标记为已处理路由的事件数据中的签名选项。</xref:System.Windows.UIElement3D.AddHandler%2A>       MouseLeftButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseLeftButtonDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeftButtonDownEvent
  id: MouseLeftButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement3D.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement3D.MouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseLeftButtonDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseLeftButtonDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeftButtonUp
  id: MouseLeftButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeftButtonUp
  nameWithType: UIElement3D.MouseLeftButtonUp
  fullName: System.Windows.UIElement3D.MouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针位于此元素上并释放鼠标左键时发生。"
  remarks: "尽管这[路由事件概述](~/add/includes/ajax-current-ext-md.md)似乎遵循冒泡路由通过元素树，它实际上是直接的路由的事件引发和每个<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D>遵循沿元素树       此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件，即处理为由事件路由每个元素的附加的事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement3D.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果将标记 MouseLeftButtonUp 处理时，实质上将标记<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>处理沿路由的所有其他侦听器和所有相关事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement3D>) 视为鼠标&quot;服务&quot;(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。 对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]在<xref:System.Windows.Input.Mouse>类，而不是那些<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D></xref:System.Windows.Input.Mouse>上       MouseLeftButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseLeftButtonUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseLeftButtonUpEvent
  id: MouseLeftButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement3D.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement3D.MouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseLeftButtonUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseLeftButtonUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseMove
  id: MouseMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseMove
  nameWithType: UIElement3D.MouseMove
  fullName: System.Windows.UIElement3D.MouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针移到此元素时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>附加此类事件，以便 MouseMove 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName> 连接到的 MouseMove 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName>       MouseMove 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseMove&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseMoveEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.MouseEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewMouseMove>.</xref:System.Windows.UIElement3D.PreviewMouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.MouseMoveEvent>      -重写<xref:System.Windows.UIElement3D.OnMouseMove%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler MouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseMoveEvent
  id: MouseMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseMoveEvent
  nameWithType: UIElement3D.MouseMoveEvent
  fullName: System.Windows.UIElement3D.MouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseMove&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseMoveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseRightButtonDown
  id: MouseRightButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseRightButtonDown
  nameWithType: UIElement3D.MouseRightButtonDown
  fullName: System.Windows.UIElement3D.MouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鼠标指针位于此元素上并且按下鼠标右键时发生。"
  remarks: "尽管这[路由事件概述](~/add/includes/ajax-current-ext-md.md)似乎遵循冒泡路由通过元素树，它实际上是直接的路由的事件引发和每个<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D>遵循沿元素树       此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件，即处理为由事件路由每个元素的附加的事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement3D.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果将标记 MouseRightButtonDown 处理时，实质上将标记<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>处理沿路由的所有其他侦听器和所有相关事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 这可能包括如<xref:System.Windows.Controls.Control.MouseDoubleClick>.</xref:System.Windows.Controls.Control.MouseDoubleClick>的类处理程序生成事件       从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement3D>) 视为鼠标&quot;服务&quot;(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。 对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]在<xref:System.Windows.Input.Mouse>类，而不是那些<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D></xref:System.Windows.Input.Mouse>上       右侧的按钮的鼠标事件，通常在应用程序方案具有本机处理。 例如，向下的鼠标右键按钮可能显示上下文菜单。 请参阅[ContextMenu 概述](~/add/includes/ajax-current-ext-md.md)。       MouseRightButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseRightButtonDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseRightButtonDownEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseRightButtonDownEvent
  id: MouseRightButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseRightButtonDownEvent
  nameWithType: UIElement3D.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement3D.MouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseRightButtonDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseRightButtonDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseRightButtonUp
  id: MouseRightButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseRightButtonUp
  nameWithType: UIElement3D.MouseRightButtonUp
  fullName: System.Windows.UIElement3D.MouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针位于此元素上并释放鼠标右键时发生。"
  remarks: "尽管这[路由事件概述](~/add/includes/ajax-current-ext-md.md)似乎遵循冒泡路由通过元素树，它实际上是直接的路由的事件引发和每个<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D>遵循沿元素树       此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件，即处理为由事件路由每个元素的附加的事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement3D.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果将标记 MouseRightButtonUp 处理时，实质上将标记<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>处理沿路由的所有其他侦听器和所有相关事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>       从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement3D>) 视为鼠标&quot;服务&quot;(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。 对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]在<xref:System.Windows.Input.Mouse>类，而不是那些<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D></xref:System.Windows.Input.Mouse>上       MouseRightButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseRightButtonUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseRightButtonUpEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseRightButtonUpEvent
  id: MouseRightButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseRightButtonUpEvent
  nameWithType: UIElement3D.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement3D.MouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseRightButtonUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseRightButtonUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseUp
  id: MouseUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseUp
  nameWithType: UIElement3D.MouseUp
  fullName: System.Windows.UIElement3D.MouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在此元素上释放任何鼠标按钮时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>附加此类事件，以便 MouseUp 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 连接到的 MouseUp 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>       MouseUp 事件通常一起引发<xref:System.Windows.UIElement3D.MouseLeftButtonUp>或<xref:System.Windows.UIElement3D.MouseRightButtonUp>，这对应于两个标准鼠标按钮之一的版本。</xref:System.Windows.UIElement3D.MouseRightButtonUp> </xref:System.Windows.UIElement3D.MouseLeftButtonUp> <xref:System.Windows.UIElement3D.MouseLeftButtonUp>和<xref:System.Windows.UIElement3D.MouseRightButtonUp>也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>事件到达事件路由中的此元素。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D.MouseRightButtonUp></xref:System.Windows.UIElement3D.MouseLeftButtonUp> 有关<xref:System.Windows.UIElement3D.MouseLeftButtonUp>或<xref:System.Windows.UIElement3D.MouseRightButtonUp>。</xref:System.Windows.UIElement3D.MouseRightButtonUp> </xref:System.Windows.UIElement3D.MouseLeftButtonUp> ，请参见备注       MouseUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseUpEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewMouseUp>.</xref:System.Windows.UIElement3D.PreviewMouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.MouseUpEvent>      -重写<xref:System.Windows.UIElement3D.OnMouseUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler MouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseUpEvent
  id: MouseUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseUpEvent
  nameWithType: UIElement3D.MouseUpEvent
  fullName: System.Windows.UIElement3D.MouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseWheel
  id: MouseWheel
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseWheel
  nameWithType: UIElement3D.MouseWheel
  fullName: System.Windows.UIElement3D.MouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针位于此元素上并且用户滚动鼠标滚轮时发生。"
  remarks: "焦点或鼠标捕获优先于其中鼠标指针位于;因此，如果你将鼠标滚轮事件收到的已设定焦点或捕获元素时，鼠标指针实际上可能通过另一个元素。       此事件创建一个别名<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>附加此类事件，以便鼠标滚轮摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName> 连接到的鼠标滚轮事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName>       鼠标滚轮是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_MouseWheel&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.MouseWheelEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.MouseWheelEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewMouseWheel>.</xref:System.Windows.UIElement3D.PreviewMouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement3D.MouseWheelEvent>      -重写<xref:System.Windows.UIElement3D.OnMouseWheel%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler MouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MouseWheelEvent
  id: MouseWheelEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MouseWheelEvent
  nameWithType: UIElement3D.MouseWheelEvent
  fullName: System.Windows.UIElement3D.MouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.MouseWheel&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       MouseWheelEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent MouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)
  id: MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement3D.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement3D.MoveFocus(TraversalRequest)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "尝试将从此元素的焦点移到另一个元素。 若要将焦点移动的方向由指南方向，将被解释为此元素的可视父级的组织结构中指定。"
  remarks: "请确保检查此方法的返回值。 返回值`false`如果遇到控件的组合所定义的制表位遍历并且遍历请求未请求包装可能会返回。       MoveFocus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public virtual bool MoveFocus (System.Windows.Input.TraversalRequest request);
    parameters:
    - id: request
      type: System.Windows.Input.TraversalRequest
      description: "遍历请求，它包含一个属性，该值指示是一种模式中现有的 tab 键顺序或一个方向移动直观地遍历。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果执行了请求的遍历;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.MoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  id: OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement3D.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement3D.OnAccessKey(AccessKeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理对此元素有意义的访问键时调用。"
  remarks: "在没有实际 AccessKey 事件<xref:System.Windows.UIElement3D>类，或在其他位置，您可以引发或附加处理程序为</xref:System.Windows.UIElement3D> 相反，此事件是通过专用管理器类， <xref:System.Windows.Input.AccessKeyManager>，其中进行后续处理所有输入要搜索适用于整个输入模型的访问密钥。</xref:System.Windows.Input.AccessKeyManager>       OnAccessKey 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnAccessKey (System.Windows.Input.AccessKeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.AccessKeyEventArgs
      description: "事件数据的访问键事件。 事件数据报告哪个密钥被调用，并指示是否<xref href=&quot;System.Windows.Input.AccessKeyManager&quot;></xref>控制发送这些事件的对象也发送此访问键调用的其他元素。"
  overload: System.Windows.UIElement3D.OnAccessKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: UIElement3D.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement3D.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "返回特定于类的<xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;></xref>实现[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]基础结构。"
  remarks: "OnCreateAutomationPeer 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "特定于类型的<xref href=&quot;System.Windows.Automation.Peers.AutomationPeer&quot;></xref>实现。"
  overload: System.Windows.UIElement3D.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)
  id: OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement3D.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.DragEnter?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnDragEnter is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)
  id: OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement3D.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.DragLeave?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnDragLeave is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)
  id: OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement3D.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.DragOver?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnDragOver is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)
  id: OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement3D.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.Drop?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnDrop is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement3D.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement3D.OnGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.GiveFeedback?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnGiveFeedback is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)
  id: OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement3D.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.OnGotFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.UIElement3D.GotFocus&quot;></xref>通过使用提供的事件数据的路由的事件。"
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes. The OnGotFocus implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event.  \n  \n OnGotFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGotFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件数据。 此事件数据必须包含的标识符<xref href=&quot;System.Windows.UIElement3D.GotFocus&quot;></xref>事件。"
  overload: System.Windows.UIElement3D.OnGotFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Keyboard.GotKeyboardFocus?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnGotKeyboardFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement3D.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnGotMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.GotMouseCapture?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnGotMouseCapture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGotMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnGotMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement3D.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnGotStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.GotStylusCapture?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnGotStylusCapture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnGotStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnGotStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement3D.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnGotTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.GotTouchCapture&quot;></xref>触摸屏输入捕获到此元素时发生的路由的事件。"
  remarks: "OnGotTouchCapture 方法有没有默认实现。 在派生类来处理中重写 OnGotTouchCapture<xref:System.Windows.UIElement3D.GotTouchCapture>事件。</xref:System.Windows.UIElement3D.GotTouchCapture> 一定要调用基类的 OnGotTouchCapture 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnGotTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnGotTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.IsKeyboardFocusedChanged&quot;></xref>针对此元素引发事件。 实现此方法可为此事件添加类处理。"
  remarks: "此虚方法调用时的值<xref:System.Windows.UIElement3D.IsKeyboardFocused%2A>依赖项属性更改。</xref:System.Windows.UIElement3D.IsKeyboardFocused%2A> 虚拟方法首先调用，并且可以处理所需的事件数据。 则<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>与该相同的事件数据实例引发事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> 请注意，<xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged>事件不是路由的事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusedChanged> 因此，你不能将其标记为已处理的类处理程序中。       此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       OnIsKeyboardFocusedChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsKeyboardFocusedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "前调用<xref href=&quot;System.Windows.UIElement3D.IsKeyboardFocusWithinChanged&quot;></xref>此元素即将引发事件。 实现此方法可为此事件添加类处理。"
  remarks: "此虚方法调用时的值<xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A>依赖项属性更改其值。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithin%2A> 虚拟方法首先调用，并且可以处理所需的事件数据。 则<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>与该相同的事件数据实例引发事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> 请注意，<xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged>事件不是路由的事件。</xref:System.Windows.UIElement3D.IsKeyboardFocusWithinChanged> 因此，你不能将其标记为已处理的类处理程序中。       此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       OnIsKeyboardFocusWithinChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsKeyboardFocusWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.IsMouseCapturedChanged&quot;></xref>针对此元素引发事件。 实现此方法可为此事件添加类处理。"
  remarks: "此虚方法调用时的值<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>依赖项属性更改其值。</xref:System.Windows.UIElement3D.IsMouseCaptured%2A> 虚拟方法首先调用，并且可以处理所需的事件数据。 则<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>与该相同的事件数据实例引发事件。</xref:System.Windows.UIElement3D.IsMouseCapturedChanged> 请注意，<xref:System.Windows.UIElement3D.IsMouseCapturedChanged>事件不是路由的事件。</xref:System.Windows.UIElement3D.IsMouseCapturedChanged> 因此，你不能将其标记为已处理的类处理程序中。       此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       OnIsMouseCapturedChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsMouseCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnIsMouseCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.IsMouseCaptureWithinChanged&quot;></xref>针对此元素引发事件。 实现此方法可为此事件添加类处理。"
  remarks: "OnIsMouseCaptureWithinChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsMouseCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.IsMouseDirectlyOverChanged&quot;></xref>针对此元素引发事件。 实现此方法可为此事件添加类处理。"
  remarks: "此虚方法调用时的值<xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A>依赖项属性更改其值。</xref:System.Windows.UIElement3D.IsMouseDirectlyOver%2A> 虚拟方法首先调用，并且可以处理所需的事件数据。 则<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>与该相同的事件数据实例引发事件。</xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> 请注意，<xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged>事件不是路由的事件。</xref:System.Windows.UIElement3D.IsMouseDirectlyOverChanged> 因此，你不能将其标记为已处理的类处理程序中。       此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       OnIsMouseDirectlyOverChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsMouseDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.IsStylusCapturedChanged&quot;></xref>针对此元素引发事件。 实现此方法可为此事件添加类处理。"
  remarks: "此虚方法调用时的值<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>依赖项属性更改其值。</xref:System.Windows.UIElement3D.IsStylusCaptured%2A> 虚拟方法首先调用，并且可以处理所需的事件数据。 则<xref:System.Windows.UIElement3D.IsStylusCapturedChanged>与该相同的事件数据实例引发事件。</xref:System.Windows.UIElement3D.IsStylusCapturedChanged> 请注意，事件不路由的事件。 因此，你不能将其标记为已处理的类处理程序中。       此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       OnIsStylusCapturedChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsStylusCapturedChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "A <xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnIsStylusCapturedChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.IsStylusCaptureWithinChanged&quot;></xref>针对此元素引发事件。 实现此方法可为此事件添加类处理。"
  remarks: "此虚方法调用时的值<xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A>依赖项属性更改其值。</xref:System.Windows.UIElement3D.IsStylusCaptureWithin%2A> 虚拟方法首先调用，并且可以处理所需的事件数据。 则<xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged>与该相同的事件数据实例引发事件。</xref:System.Windows.UIElement3D.IsStylusCaptureWithinChanged> 请注意，事件不路由的事件。 因此，你不能将其标记为已处理的类处理程序中。       此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       OnIsStylusCaptureWithinChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsStylusCaptureWithinChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  id: OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.IsStylusDirectlyOverChanged&quot;></xref>针对此元素引发事件。 实现此方法可为此事件添加类处理。"
  remarks: "此虚方法调用时的值<xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A>依赖项属性更改其值。</xref:System.Windows.UIElement3D.IsStylusDirectlyOver%2A> 虚拟方法首先调用，并且可以处理所需的事件数据。 则<xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged>与该相同的事件数据实例引发事件。</xref:System.Windows.UIElement3D.IsStylusDirectlyOverChanged> 请注意，事件不路由的事件。 因此你无法将其标记为已处理的类处理程序中。       此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       OnIsStylusDirectlyOverChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnIsStylusDirectlyOverChanged (System.Windows.DependencyPropertyChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DependencyPropertyChangedEventArgs
      description: "<xref href=&quot;System.Windows.DependencyPropertyChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement3D.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Keyboard.KeyDown?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyDown is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnKeyDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement3D.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Keyboard.KeyUp?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "Keystrokes are handled by a dedicated input manager. Other programming features that rely on keystrokes, for example, input and command bindings, might handle the keystroke before it is exposed as a general keystroke. If these input system features mark the event as handled, then OnKeyUp is not invoked.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnKeyUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)
  id: OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement3D.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.OnLostFocus(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.UIElement3D.LostFocus&quot;></xref>使用提供的事件数据的路由的事件。"
  remarks: "This method, although virtual, does have a default implementation that raises the event.  \n  \n This On* method implementation is intended to raise the event, and this same method implementation is invoked internally to raise the event when the <xref:System.Windows.UIElement3D.IsFocused%2A> property value changes. This implementation differs from some other [!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)] On\\* implementations, which only provide a convenient way to add class handling for that event.  \n  \n OnLostFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnLostFocus (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref>包含事件数据。 此事件数据必须包含的标识符<xref href=&quot;System.Windows.UIElement3D.LostFocus&quot;></xref>事件。"
  overload: System.Windows.UIElement3D.OnLostFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Keyboard.LostKeyboardFocus?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnLostKeyboardFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  id: OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement3D.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnLostMouseCapture(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.LostMouseCapture?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnLostMouseCapture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnLostMouseCapture (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnLostMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  id: OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement3D.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnLostStylusCapture(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.LostStylusCapture?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnLostStylusCapture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnLostStylusCapture (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnLostStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  id: OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement3D.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnLostTouchCapture(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.LostTouchCapture&quot;></xref>此元素丢失触摸屏输入捕获时发生的路由的事件。"
  remarks: "OnLostTouchCapture 方法有没有默认实现。 在派生类来处理中重写 OnLostTouchCapture<xref:System.Windows.UIElement3D.LostTouchCapture>事件。</xref:System.Windows.UIElement3D.LostTouchCapture> 一定要调用基类的 OnLostTouchCapture 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnLostTouchCapture (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnLostTouchCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> event as handled, OnMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonDown> and <xref:System.Windows.UIElement3D.MouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted. Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnMouseDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 此事件数据报告有关按下鼠标按钮和已处理的状态的详细信息。"
  overload: System.Windows.UIElement3D.OnMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  id: OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseEnter(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.MouseEnter?displayProperty=fullName&gt;针对此元素引发附加的事件。 实现此方法可为此事件添加类处理。"
  remarks: "此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]上的事件模式 * 方法︰ 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。 在这种情况下匹配的事件是具有直接路由策略的路由的事件。 将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。       OnMouseEnter 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseEnter (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnMouseEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  id: OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeave(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.MouseLeave?displayProperty=fullName&gt;针对此元素引发附加的事件。 实现此方法可为此事件添加类处理。"
  remarks: "此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]上的事件模式 * 方法︰ 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。 在这种情况下匹配的事件是具有直接路由策略的路由的事件。 将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。       OnMouseLeave 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseLeave (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnMouseLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.MouseLeftButtonDown&quot;></xref>针对此元素引发路由的事件。 实现此方法可为此事件添加类处理。"
  remarks: "<xref:System.Windows.UIElement3D.MouseLeftButtonDown>事件看起来进行冒泡路由，但实际上是以的间接方法。</xref:System.Windows.UIElement3D.MouseLeftButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>是基础是气泡，路由的事件，并<xref:System.Windows.UIElement3D>沿着事件路由使用相同处理，以引发直接路由的事件<xref:System.Windows.UIElement3D.MouseLeftButtonDown>.</xref:System.Windows.UIElement3D.MouseLeftButtonDown>处理</xref:System.Windows.UIElement3D>每个</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 尽管您可以将标记<xref:System.Windows.UIElement3D.MouseLeftButtonDown>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</xref:System.Windows.UIElement3D.MouseLeftButtonDown> 但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。       常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement3D>侦听<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>和将其转换为相应的本地事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果你想要重写此逻辑，必须创建一个派生的类。 在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 无法更改鼠标处理行为<xref:System.Windows.UIElement3D>通过重写 OnMouseLeftButtonDown。</xref:System.Windows.UIElement3D>       或者，可以以更改处理特定鼠标状态的事件来重写此方法。 你是否选择调用基实现取决于你的方案。 无法调用基禁用基实现，也应调用 OnMouseLeftButtonDown 该鼠标事件的默认输入的处理。 例如，你可以从派生<xref:System.Windows.Controls.Button>和而不会调用基实现派生类中替代 OnMouseLeftButtonDown; 但是，重写禁用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>       OnMouseLeftButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告称已按下鼠标左键。"
  overload: System.Windows.UIElement3D.OnMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.MouseLeftButtonUp&quot;></xref>路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "<xref:System.Windows.UIElement3D.MouseLeftButtonUp>事件看起来进行冒泡路由，但实际上是以的间接方法。</xref:System.Windows.UIElement3D.MouseLeftButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>是基础是气泡，路由的事件，并<xref:System.Windows.UIElement3D>沿着事件路由使用相同处理，以引发直接路由的事件<xref:System.Windows.UIElement3D.MouseLeftButtonUp>.</xref:System.Windows.UIElement3D.MouseLeftButtonUp>处理</xref:System.Windows.UIElement3D>每个</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 尽管您可以将标记<xref:System.Windows.UIElement3D.MouseLeftButtonUp>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</xref:System.Windows.UIElement3D.MouseLeftButtonUp> 但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。       常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement3D>侦听<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>和将其转换为相应的本地事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果你想要重写此逻辑，必须创建一个派生的类。 在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 无法更改鼠标处理行为<xref:System.Windows.UIElement3D>通过重写 OnMouseLeftButtonUp。</xref:System.Windows.UIElement3D>       OnMouseLeftButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告已松开鼠标左键。"
  overload: System.Windows.UIElement3D.OnMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.MouseMove?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnMouseMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.MouseRightButtonDown&quot;></xref>路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "<xref:System.Windows.UIElement3D.MouseRightButtonDown>事件看起来进行冒泡路由，但实际上是以的间接方法。</xref:System.Windows.UIElement3D.MouseRightButtonDown> <xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>是基础是气泡，路由的事件，并<xref:System.Windows.UIElement3D>沿着事件路由使用相同处理，以引发直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonDown>.</xref:System.Windows.UIElement3D.MouseRightButtonDown>处理</xref:System.Windows.UIElement3D>每个</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 尽管您可以将标记<xref:System.Windows.UIElement3D.MouseRightButtonDown>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</xref:System.Windows.UIElement3D.MouseRightButtonDown> 但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。       常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement3D>侦听<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>和将其转换为相应的本地事件。</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果你想要重写此逻辑，必须创建一个派生的类。 在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseDown?displayProperty=fullName> 无法更改鼠标处理行为<xref:System.Windows.UIElement3D>通过重写 OnMouseRightButtonDown。</xref:System.Windows.UIElement3D>       或者，可以以更改处理特定鼠标状态的事件来重写此方法。 你是否选择调用基实现取决于你的方案。 无法调用基禁用基实现，也应调用 OnMouseRightButtonDown 该鼠标事件的默认输入的处理。 例如，你可以从派生<xref:System.Windows.Controls.Control>和在而无需调用基实现派生类中重写 OnMouseRightButtonDown; 但是，此替代禁用上下文菜单上的服务控件，都是一部分的<xref:System.Windows.Controls.Control>默认行为。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>       OnMouseRightButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告称已按下鼠标右键按钮。"
  overload: System.Windows.UIElement3D.OnMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.MouseRightButtonUp&quot;></xref>路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "<xref:System.Windows.UIElement3D.MouseRightButtonUp>事件看起来进行冒泡路由，但实际上是以的间接方法。</xref:System.Windows.UIElement3D.MouseRightButtonUp> <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>是基础是气泡，路由的事件，并<xref:System.Windows.UIElement3D>沿着事件路由使用相同处理，以引发直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonUp>.</xref:System.Windows.UIElement3D.MouseRightButtonUp>处理</xref:System.Windows.UIElement3D>每个</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 尽管您可以将标记<xref:System.Windows.UIElement3D.MouseRightButtonUp>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</xref:System.Windows.UIElement3D.MouseRightButtonUp> 但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。       常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement3D>侦听<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>和将其转换为相应的本地事件。</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果你想要重写此逻辑，必须创建一个派生的类。 在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> 无法更改鼠标处理行为<xref:System.Windows.UIElement3D>通过重写 OnMouseRightButtonUp。</xref:System.Windows.UIElement3D>       OnMouseRightButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告已松开了鼠标右键按钮。"
  overload: System.Windows.UIElement3D.OnMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName&gt;路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> event as handled, OnMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.MouseLeftButtonUp> and <xref:System.Windows.UIElement3D.MouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.MouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted. Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnMouseUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告已松开鼠标按钮。"
  overload: System.Windows.UIElement3D.OnMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement3D.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.MouseWheel?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnMouseWheel is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)
  id: OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragEnter(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewDragEnter is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewDragEnter (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewDragEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)
  id: OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragLeave(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewDragLeave is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewDragLeave (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewDragLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)
  id: OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragOver(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewDragOver is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewDragOver (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewDragOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)
  id: OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDrop(DragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewDrop is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewDrop (System.Windows.DragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.DragEventArgs
      description: "<xref href=&quot;System.Windows.DragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewDrop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  id: OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement3D.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewGiveFeedback is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewGiveFeedback (System.Windows.GiveFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.GiveFeedbackEventArgs
      description: "<xref href=&quot;System.Windows.GiveFeedbackEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewGiveFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewGotKeyboardFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewGotKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement3D.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewKeyDown(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewKeyDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewKeyDown (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewKeyDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  id: OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement3D.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewKeyUp(KeyEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewKeyUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewKeyUp (System.Windows.Input.KeyEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewKeyUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  id: OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewLostKeyboardFocus is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewLostKeyboardFocus (System.Windows.Input.KeyboardFocusChangedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.KeyboardFocusChangedEventArgs
      description: "<xref href=&quot;System.Windows.Input.KeyboardFocusChangedEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName&gt;附加路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> event as handled, OnPreviewMouseDown is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>. Either of these events may be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseDown, you are implying that your class handling accounted for all possible mouse button down actions. This behavior might be unwanted. Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewMouseDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewMouseDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告称已按下一个或多个鼠标按钮。"
  overload: System.Windows.UIElement3D.OnPreviewMouseDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.PreviewMouseLeftButtonDown&quot;></xref>路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>事件看起来进行隧道路由，但实际上是以的间接方法。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>是基础事件即隧道路由，并<xref:System.Windows.UIElement3D>沿着事件路由使用相同处理，以引发直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>.</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>处理</xref:System.Windows.UIElement3D>每个</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 尽管您可以将标记<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> 但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。       常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement3D>侦听<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>和将其转换为相应的本地事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果你想要重写此逻辑，必须创建一个派生的类。 在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 无法更改鼠标处理行为<xref:System.Windows.UIElement3D>通过重写 OnPreviewMouseLeftButtonDown。</xref:System.Windows.UIElement3D>       或者，可以以更改处理特定鼠标状态的事件来重写此方法。 你是否选择调用基实现取决于你的方案。 无法调用基禁用基实现，也应调用 OnPreviewMouseLeftButtonDown 该鼠标事件的默认输入的处理。 例如，你可以从派生<xref:System.Windows.Controls.Button>和而不会调用基实现派生类中替代 OnPreviewMouseLeftButtonDown; 但是，重写禁用<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件。</xref:System.Windows.Controls.Primitives.ButtonBase.Click> </xref:System.Windows.Controls.Button>       OnPreviewMouseLeftButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告称已按下鼠标左键。"
  overload: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.PreviewMouseLeftButtonUp&quot;></xref>路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>事件看起来进行隧道路由，但实际上是以的间接方法。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>是基础事件即隧道路由，并<xref:System.Windows.UIElement3D>沿着事件路由使用相同处理，以引发直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>.</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>处理</xref:System.Windows.UIElement3D>每个</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 尽管您可以将标记<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> 但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。       常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement3D>侦听<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>和将其转换为相应的本地事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果你想要重写此逻辑，必须创建一个派生的类。 在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 无法更改鼠标处理行为<xref:System.Windows.UIElement3D>通过重写 OnPreviewMouseLeftButtonUp。</xref:System.Windows.UIElement3D>       OnPreviewMouseLeftButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnPreviewMouseLeftButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告已松开鼠标左键。"
  overload: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  id: OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseMove(MouseEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewMouseMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewMouseMove (System.Windows.Input.MouseEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewMouseMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.PreviewMouseRightButtonDown&quot;></xref>路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>事件看起来进行隧道路由，但实际上是以的间接方法。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> <xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>是基础事件即隧道路由，并<xref:System.Windows.UIElement3D>沿着事件路由使用相同处理，以引发直接路由的事件<xref:System.Windows.UIElement3D.MouseRightButtonDown>.</xref:System.Windows.UIElement3D.MouseRightButtonDown>处理</xref:System.Windows.UIElement3D>每个</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 尽管您可以将标记<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> 但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。       常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement3D>侦听<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>和将其转换为相应的本地事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果你想要重写此逻辑，必须创建一个派生的类。 在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 无法更改鼠标处理行为<xref:System.Windows.UIElement3D>通过重写 OnPreviewMouseRightButtonDown。</xref:System.Windows.UIElement3D>       或者，可以以更改处理特定鼠标状态的事件来重写此方法。 你是否选择调用基实现取决于你的方案。 无法调用基禁用基实现，也应调用 OnPreviewMouseRightButtonDown 该鼠标事件的默认输入的处理。 例如，你可以从派生<xref:System.Windows.Controls.Control>和在而无需调用基实现派生类中重写 OnPreviewMouseRightButtonDown; 但是，此替代禁用上下文菜单上的服务控件，都是一部分的<xref:System.Windows.Controls.Control>默认行为。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.Control>       OnPreviewMouseRightButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonDown (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告称已按下鼠标右键按钮。"
  overload: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理<xref href=&quot;System.Windows.UIElement3D.PreviewMouseRightButtonUp&quot;></xref>路由的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>事件看起来进行隧道路由，但实际上是以的间接方法。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>是基础事件即隧道路由，并<xref:System.Windows.UIElement3D>沿着事件路由使用相同处理，以引发直接路由的事件<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>.</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>处理</xref:System.Windows.UIElement3D>每个</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 尽管您可以将标记<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>为用于此元素的已处理的事件，已处理的状态不保留的其他元素为由事件路由。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> 但是，你可能想要将事件标记为已处理为了防止常规实例处理程序 (未指定的那些`handledEventsToo`) 调用。       常规鼠标事件处理中的默认实现<xref:System.Windows.UIElement3D>侦听<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>和将其转换为相应的本地事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D> 如果你想要重写此逻辑，必须创建一个派生的类。 在派生类的静态构造函数中注册的替代类处理程序<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>.</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 无法更改鼠标处理行为<xref:System.Windows.UIElement3D>通过重写 OnPreviewMouseRightButtonUp。</xref:System.Windows.UIElement3D>       OnPreviewMouseRightButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnPreviewMouseRightButtonUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告已松开了鼠标右键按钮。"
  overload: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  id: OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseUp(MouseButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "Mouse button actions are also handled by a dedicated input manager. Other programming features that rely on mouse button actions, such as input and command bindings, might invoke handlers for the action before it is exposed as a general mouse button action. If these input system features mark the <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> event as handled, OnPreviewMouseUp is not invoked.  \n  \n If you use this class handler to mark the event as handled, you potentially impact the following events: <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> and <xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>. Either of these events might be raised on the receiving element when <xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> is received.  \n  \n If you mark this event as handled in class handling, subevents are still raised; however, they pass the handled state in the event data. If the event is handled in class handling, instance handlers for the subevents are not invoked unless you explicitly use <xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> with `handledEventsToo` `true` in order to attach handlers. Class handlers also are not invoked unless those class handlers were registered with the <xref:System.Windows.EventManager.RegisterClassHandler%28System.Type%2CSystem.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> signature with `handledEventsToo` `true`. By handling OnPreviewMouseUp, you are implying that your class handling accounted for all possible mouse button up actions. This behavior might be unwanted. Therefore, use caution when you use this virtual method to mark events as handled.  \n  \n Each of the button-specific direct events also has a virtual On* method; consider whether overriding these button-specific class handlers might be more appropriate.  \n  \n This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnPreviewMouseUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewMouseUp (System.Windows.Input.MouseButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseButtonEventArgs&quot;> </xref>包含事件数据。 事件数据报告已释放了一个或多个鼠标按钮。"
  overload: System.Windows.UIElement3D.OnPreviewMouseUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  id: OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseWheel(MouseWheelEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewMouseWheel is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewMouseWheel (System.Windows.Input.MouseWheelEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.MouseWheelEventArgs
      description: "<xref href=&quot;System.Windows.Input.MouseWheelEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewMouseWheel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement3D.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewQueryContinueDrag is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusButtonDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusButtonUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusInAirMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusInRange is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusOutOfRange is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusSystemGesture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewStylusUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement3D.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled. Another scenario that is specifically for Preview events is to mark them handled so that the matching bubbling class handlers are not invoked.  \n  \n OnPreviewTextInput is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnPreviewTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.PreviewTouchDown&quot;></xref>当触摸屏输入按下此元素时发生的路由的事件。"
  remarks: "OnPreviewTouchDown 方法有没有默认实现。 在派生类来处理中重写 OnPreviewTouchDown<xref:System.Windows.UIElement3D.PreviewTouchDown>事件。</xref:System.Windows.UIElement3D.PreviewTouchDown> 一定要调用基类的 OnPreviewTouchDown 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnPreviewTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.PreviewTouchMove&quot;></xref>触摸屏输入到此元素内移动时发生的路由的事件。"
  remarks: "OnPreviewTouchMove 方法有没有默认实现。 在派生类来处理中重写 OnPreviewTouchMove<xref:System.Windows.UIElement3D.PreviewTouchMove>事件。</xref:System.Windows.UIElement3D.PreviewTouchMove> 一定要调用基类的 OnPreviewTouchMove 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnPreviewTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.PreviewTouchUp&quot;></xref>触摸屏输入发布到此元素内时发生的路由的事件。"
  remarks: "OnPreviewTouchUp 方法有没有默认实现。 在派生类来处理中重写 OnPreviewTouchUp<xref:System.Windows.UIElement3D.PreviewTouchUp>事件。</xref:System.Windows.UIElement3D.PreviewTouchUp> 一定要调用基类的 OnPreviewTouchUp 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnPreviewTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnPreviewTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  id: OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement3D.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement3D.OnQueryContinueDrag(QueryContinueDragEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnQueryContinueDrag is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnQueryContinueDrag (System.Windows.QueryContinueDragEventArgs e);
    parameters:
    - id: e
      type: System.Windows.QueryContinueDragEventArgs
      description: "<xref href=&quot;System.Windows.QueryContinueDragEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnQueryContinueDrag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  id: OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement3D.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement3D.OnQueryCursor(QueryCursorEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnQueryCursor is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnQueryCursor (System.Windows.Input.QueryCursorEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.QueryCursorEventArgs
      description: "<xref href=&quot;System.Windows.Input.QueryCursorEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnQueryCursor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusButtonDown(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusButtonDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusButtonDown (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusButtonDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  id: OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusButtonUp(StylusButtonEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusButtonUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusButtonUp (System.Windows.Input.StylusButtonEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusButtonEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusButtonEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusButtonUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  id: OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement3D.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusDown(StylusDownEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusDown is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusDown (System.Windows.Input.StylusDownEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusDownEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusDownEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  id: OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusEnter(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName&gt;此元素即将引发附加的事件。 实现此方法可为此事件添加类处理。"
  remarks: "此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]上的事件模式 * 方法︰ 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。 在这种情况下匹配的事件是路由的事件。 将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。       OnStylusEnter 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnStylusEnter (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusInAirMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusInAirMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusInAirMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusInAirMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusInRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusInRange is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusInRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusInRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  id: OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusLeave(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName&gt;此元素即将引发附加的事件。 实现此方法可为此事件添加类处理。"
  remarks: "此方法不具有默认实现。 由于继承的中间类可能会实现此方法，我们建议在实现中调用基实现。 你可以调用基之前或之后你特殊的处理，具体取决于你的要求。       此方法的目的是类似于[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]上的事件模式 * 方法︰ 此方法提供了一种通过建立类处理程序而不是一个实例处理程序来处理来自派生类匹配的事件。 在这种情况下匹配的事件是路由的事件。 将事件标记为已处理是仍可用于预防典型实例处理程序 (未指定的那些`handledEventsToo`) 调用。       OnStylusLeave 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual void OnStylusLeave (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)
  id: OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusMove(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusMove is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusMove (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  id: OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusOutOfRange(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusOutOfRange is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusOutOfRange (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusOutOfRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  id: OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement3D.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusSystemGesture is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusSystemGesture (System.Windows.Input.StylusSystemGestureEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusSystemGestureEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusSystemGestureEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusSystemGesture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)
  id: OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusUp(StylusEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnStylusUp is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnStylusUp (System.Windows.Input.StylusEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.StylusEventArgs
      description: "<xref href=&quot;System.Windows.Input.StylusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnStylusUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  id: OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement3D.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement3D.OnTextInput(TextCompositionEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当某个未处理&lt;xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName&gt;附加的事件到达派生自此类的其路由中的某个元素。 实现此方法可为此事件添加类处理。"
  remarks: "This method has no default implementation. Because an intermediate class in the inheritance might implement this method, we recommend that you call the base implementation in your implementation.  \n  \n The purpose of this method is similar to the [!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)] event pattern On* methods: this method provides the means to handle the matching event from derived classes by establishing a class handler instead of an instance handler. In this case the matching event is a routed event. The implementation pattern of the On\\* methods is different for routed events because a routed event can be raised by a child element, which is not necessarily the element that will invoke handlers. Therefore, your implementation needs to examine the source properties of the event data. It should not try to reraise the event in most cases.  \n  \n Either by overriding this method or by registering class handlers with <xref:System.Windows.EventManager.RegisterClassHandler%2A>, derived classes of <xref:System.Windows.UIElement3D> can call private class handler methods when the event is received along the event route. One scenario where class handling is appropriate is to manipulate the event data and mark the routed event as handled.  \n  \n OnTextInput is introduced in the .NET Framework version 3.5.  For more information, see [Versions and Dependencies](~/add/includes/ajax-current-ext-md.md)."
  syntax:
    content: protected virtual void OnTextInput (System.Windows.Input.TextCompositionEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TextCompositionEventArgs
      description: "<xref href=&quot;System.Windows.Input.TextCompositionEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnTextInput*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)
  id: OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchDown(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.TouchDown&quot;></xref>当触摸屏输入按下在此元素时发生的路由的事件。"
  remarks: "OnTouchDown 方法有没有默认实现。 在派生类来处理中重写 OnTouchDown<xref:System.Windows.UIElement3D.TouchDown>事件。</xref:System.Windows.UIElement3D.TouchDown> 一定要调用基类的 OnTouchDown 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnTouchDown (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnTouchDown*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  id: OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchEnter(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.TouchEnter&quot;></xref>触摸屏输入将从移动时发生的路由的事件外部到此元素的边界内。"
  remarks: "OnTouchEnter 方法有没有默认实现。 在派生类来处理中重写 OnTouchEnter<xref:System.Windows.UIElement3D.TouchEnter>事件。</xref:System.Windows.UIElement3D.TouchEnter> 一定要调用基类的 OnTouchEnter 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnTouchEnter (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnTouchEnter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  id: OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchLeave(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.TouchLeave&quot;></xref>触摸屏输入将从移动时发生的路由的事件到此元素的边界之外的内部。"
  remarks: "OnTouchLeave 方法有没有默认实现。 在派生类来处理中重写 OnTouchLeave<xref:System.Windows.UIElement3D.TouchLeave>事件。</xref:System.Windows.UIElement3D.TouchLeave> 一定要调用基类的 OnTouchLeave 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnTouchLeave (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnTouchLeave*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)
  id: OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchMove(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.TouchMove&quot;></xref>触摸屏输入到此元素内移动时发生的路由的事件。"
  remarks: "OnTouchMove 方法有没有默认实现。 在派生类来处理中重写 OnTouchMove<xref:System.Windows.UIElement3D.TouchMove>事件。</xref:System.Windows.UIElement3D.TouchMove> 一定要调用基类的 OnTouchMove 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnTouchMove (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnTouchMove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)
  id: OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchUp(TouchEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "提供类处理<xref href=&quot;System.Windows.UIElement3D.TouchUp&quot;></xref>触摸屏输入发布到此元素内时发生的路由的事件。"
  remarks: "OnTouchUp 方法有没有默认实现。 在派生类来处理中重写 OnTouchUp<xref:System.Windows.UIElement3D.TouchUp>事件。</xref:System.Windows.UIElement3D.TouchUp> 一定要调用基类的 OnTouchUp 方法，以便基类，这些类对事件进行接收。"
  syntax:
    content: protected virtual void OnTouchUp (System.Windows.Input.TouchEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.TouchEventArgs
      description: "A <xref href=&quot;System.Windows.Input.TouchEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.UIElement3D.OnTouchUp*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnUpdateModel
  id: OnUpdateModel
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnUpdateModel()
  nameWithType: UIElement3D.OnUpdateModel()
  fullName: System.Windows.UIElement3D.OnUpdateModel()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "参与呈现在派生类中重写时的操作。"
  remarks: "当你从派生类<xref:System.Windows.UIElement3D>类，你可以使用此方法连同<xref:System.Windows.UIElement3D.InvalidateModel%2A>方法来刷新元素的模型。</xref:System.Windows.UIElement3D.InvalidateModel%2A> </xref:System.Windows.UIElement3D>       只需在高级方案中调用此方法。 如果派生的类具有的外观的多个属性，并且你想要一次更新的基础模型，这种类型的一个高级的方案。 无法在 OnUpdateModel 方法中更新<xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A>属性的<xref:System.Windows.Media.Media3D.Visual3D>类。</xref:System.Windows.Media.Media3D.Visual3D> </xref:System.Windows.Media.Media3D.Visual3D.Visual3DModel%2A>       此方法不具有默认实现中的<xref:System.Windows.UIElement3D>类。</xref:System.Windows.UIElement3D>       OnUpdateModel 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to derive from the <xref:System.Windows.UIElement3D> class to create a `Sphere` class:  \n  \n [!code-cs[Shapes#Sphere](~/add/codesnippet/csharp/Shapes/Sphere.cs#sphere)]\n [!code-vb[Shapes#Sphere](~/add/codesnippet/visualbasic/shapes/sphere.vb#sphere)]  \n  \n For the complete sample, see [UIElement3D Sphere Sample](http://go.microsoft.com/fwlink/?LinkID=160044)."
  syntax:
    content: protected virtual void OnUpdateModel ();
    parameters: []
  overload: System.Windows.UIElement3D.OnUpdateModel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement3D.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement3D.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "时调用的父元素<xref href=&quot;System.Windows.UIElement3D&quot;></xref>更改报告给其基础的可视父级。"
  remarks: "OnVisualParentChanged 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected override void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "先前的父项。 这可能会提供作为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.DependencyObject&quot;></xref>以前没有父元素。"
  overload: System.Windows.UIElement3D.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  id: PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement3D.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement3D.PredictFocus(FocusNavigationDirection)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当在派生类中重写，则返回将收到指定的焦点遍历方向的焦点，而实际将焦点移到该元素的元素。"
  remarks: "此方法在此类的默认实现不完整，并始终返回`null`。       PredictFocus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public virtual System.Windows.DependencyObject PredictFocus (System.Windows.Input.FocusNavigationDirection direction);
    parameters:
    - id: direction
      type: System.Windows.Input.FocusNavigationDirection
      description: "请求的焦点遍历的方向。"
    return:
      type: System.Windows.DependencyObject
      description: "将已收到焦点，如果元素<xref:System.Windows.UIElement3D.MoveFocus*>实际调用。</xref:System.Windows.UIElement3D.MoveFocus*>"
  overload: System.Windows.UIElement3D.PredictFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragEnter
  id: PreviewDragEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragEnter
  nameWithType: UIElement3D.PreviewDragEnter
  fullName: System.Windows.UIElement3D.PreviewDragEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告出现以此元素为拖动目标的基础拖动事件时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>附加此类事件，以便 PreviewDragEnter 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName> 连接到的 PreviewDragEnter 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.PreviewDragEnter?displayProperty=fullName>       PreviewDragEnter 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewDragEnter&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewDragEnterEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.DragEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.DragEnter>.</xref:System.Windows.UIElement3D.DragEnter> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.PreviewDragEnterEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewDragEnter%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragEnter;
    return:
      type: System.Windows.DragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragEnterEvent
  id: PreviewDragEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragEnterEvent
  nameWithType: UIElement3D.PreviewDragEnterEvent
  fullName: System.Windows.UIElement3D.PreviewDragEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewDragEnter&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewDragEnterEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragLeave
  id: PreviewDragLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragLeave
  nameWithType: UIElement3D.PreviewDragLeave
  fullName: System.Windows.UIElement3D.PreviewDragLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告出现以此元素为拖动起点的基础拖动事件时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>附加此类事件，以便 PreviewDragLeave 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName> 连接到的 PreviewDragLeave 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.PreviewDragLeave?displayProperty=fullName>       PreviewDragLeave 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewDragLeave&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewDragLeaveEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.DragEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.DragLeave>.</xref:System.Windows.UIElement3D.DragLeave> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.PreviewDragLeaveEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewDragLeave%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragLeave;
    return:
      type: System.Windows.DragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragLeaveEvent
  id: PreviewDragLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragLeaveEvent
  nameWithType: UIElement3D.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement3D.PreviewDragLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewDragLeave&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewDragLeaveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragOver
  id: PreviewDragOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragOver
  nameWithType: UIElement3D.PreviewDragOver
  fullName: System.Windows.UIElement3D.PreviewDragOver
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告出现以此元素为可能放置目标的基础拖动事件时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>附加此类事件，以便 PreviewDragOver 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName> 连接到的 PreviewDragOver 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.PreviewDragOver?displayProperty=fullName>       PreviewDragOver 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewDragOver&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewDragOverEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.DragEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.DragOver>.</xref:System.Windows.UIElement3D.DragOver> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.PreviewDragOverEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewDragOver%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewDragOver%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDragOver;
    return:
      type: System.Windows.DragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDragOverEvent
  id: PreviewDragOverEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDragOverEvent
  nameWithType: UIElement3D.PreviewDragOverEvent
  fullName: System.Windows.UIElement3D.PreviewDragOverEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewDragOver&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewDragOverEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDragOverEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDrop
  id: PreviewDrop
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDrop
  nameWithType: UIElement3D.PreviewDrop
  fullName: System.Windows.UIElement3D.PreviewDrop
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在输入的系统报告出现以此元素为放置目标的基础放置事件时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>附加此类事件，以便 PreviewDrop 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName> 连接到的 PreviewDrop 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.PreviewDrop?displayProperty=fullName>       PreviewDrop 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewDrop&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewDropEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.DragEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.Drop>.</xref:System.Windows.UIElement3D.Drop> </xref:System.Windows.DragEventHandler> </xref:System.Windows.UIElement3D.PreviewDropEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewDrop%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewDrop%2A>"
  syntax:
    content: public event System.Windows.DragEventHandler PreviewDrop;
    return:
      type: System.Windows.DragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewDropEvent
  id: PreviewDropEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewDropEvent
  nameWithType: UIElement3D.PreviewDropEvent
  fullName: System.Windows.UIElement3D.PreviewDropEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewDrop&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewDropEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewDropEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewGiveFeedback
  id: PreviewGiveFeedback
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewGiveFeedback
  nameWithType: UIElement3D.PreviewGiveFeedback
  fullName: System.Windows.UIElement3D.PreviewGiveFeedback
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在开始拖放操作时发生。"
  remarks: "PreviewGiveFeedback 事件允许拖动事件，以修改鼠标指针的外观，以便为用户可视反馈提供拖放操作期间的源。       此事件创建一个别名<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>附加此类事件，以便 PreviewGiveFeedback 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName> 连接到的 PreviewGiveFeedback 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.PreviewGiveFeedback?displayProperty=fullName>       PreviewGiveFeedback 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewGiveFeedback&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.GiveFeedbackEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.GiveFeedback>.</xref:System.Windows.UIElement3D.GiveFeedback> </xref:System.Windows.GiveFeedbackEventHandler> </xref:System.Windows.UIElement3D.PreviewGiveFeedbackEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewGiveFeedback%2A>"
  syntax:
    content: public event System.Windows.GiveFeedbackEventHandler PreviewGiveFeedback;
    return:
      type: System.Windows.GiveFeedbackEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewGiveFeedbackEvent
  id: PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement3D.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement3D.PreviewGiveFeedbackEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewGiveFeedback&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewGiveFeedbackEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGiveFeedbackEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewGotKeyboardFocus
  id: PreviewGotKeyboardFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement3D.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement3D.PreviewGotKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当针对此元素聚焦于键盘时发生。"
  remarks: "由于此事件使用隧道路由，具有焦点的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际具有焦点的元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>附加此类事件，以便 PreviewGotKeyboardFocus 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName> 连接到的 PreviewGotKeyboardFocus 事件的事件处理程序附加到基础<xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Keyboard.PreviewGotKeyboardFocus?displayProperty=fullName>       PreviewGotKeyboardFocus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewGotKeyboardFocus&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.GotKeyboardFocus>.</xref:System.Windows.UIElement3D.GotKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewGotKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewGotKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
  id: PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement3D.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewGotKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewGotKeyboardFocusEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewGotKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewKeyDown
  id: PreviewKeyDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewKeyDown
  nameWithType: UIElement3D.PreviewKeyDown
  fullName: System.Windows.UIElement3D.PreviewKeyDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在此元素聚焦于键盘并且按下某个键时发生。"
  remarks: "密钥处理与其他平台功能，例如发出命令和文本组合进行交互。 此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>附加此类事件，以便 PreviewKeyDown 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName> 连接到的 PreviewKeyDown 事件的事件处理程序附加到基础<xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Keyboard.PreviewKeyDown?displayProperty=fullName>       PreviewKeyDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewKeyDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewKeyDownEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.KeyEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.KeyDown>.</xref:System.Windows.UIElement3D.KeyDown> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement3D.PreviewKeyDownEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewKeyDown%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyDown;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewKeyDownEvent
  id: PreviewKeyDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewKeyDownEvent
  nameWithType: UIElement3D.PreviewKeyDownEvent
  fullName: System.Windows.UIElement3D.PreviewKeyDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewKeyDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewKeyDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewKeyUp
  id: PreviewKeyUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewKeyUp
  nameWithType: UIElement3D.PreviewKeyUp
  fullName: System.Windows.UIElement3D.PreviewKeyUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在此元素聚焦于键盘并且松开某个键时发生。"
  remarks: "密钥处理与其他平台功能，例如发出命令和文本组合进行交互。       此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>附加此类事件，以便 PreviewKeyUp 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName> 连接到的 PreviewKeyUp 事件的事件处理程序附加到基础<xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Keyboard.PreviewKeyUp?displayProperty=fullName>       PreviewKeyUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewKeyUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewKeyUpEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.KeyEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.KeyUp>.</xref:System.Windows.UIElement3D.KeyUp> </xref:System.Windows.Input.KeyEventHandler> </xref:System.Windows.UIElement3D.PreviewKeyUpEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewKeyUp%2A>"
  syntax:
    content: public event System.Windows.Input.KeyEventHandler PreviewKeyUp;
    return:
      type: System.Windows.Input.KeyEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewKeyUpEvent
  id: PreviewKeyUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewKeyUpEvent
  nameWithType: UIElement3D.PreviewKeyUpEvent
  fullName: System.Windows.UIElement3D.PreviewKeyUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewKeyUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewKeyUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewKeyUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewLostKeyboardFocus
  id: PreviewLostKeyboardFocus
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement3D.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement3D.PreviewLostKeyboardFocus
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在此元素不再聚焦于键盘时发生。"
  remarks: "由于此事件使用隧道路由，失去焦点的元素可能是而不是元素的子元素实际附加事件处理程序。 检查<xref:System.Windows.RoutedEventArgs.Source%2A>事件数据以确定实际失去焦点的元素中。</xref:System.Windows.RoutedEventArgs.Source%2A>       此事件创建一个别名<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>附加此类事件，以便 PreviewLostKeyboardFocus 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName> 连接到的 PreviewLostKeyboardFocus 事件的事件处理程序附加到基础<xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Keyboard.PreviewLostKeyboardFocus?displayProperty=fullName>       PreviewLostKeyboardFocus 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewLostKeyboardFocus&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.KeyboardFocusChangedEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.LostKeyboardFocus>.</xref:System.Windows.UIElement3D.LostKeyboardFocus> </xref:System.Windows.Input.KeyboardFocusChangedEventHandler> </xref:System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewLostKeyboardFocus%2A>"
  syntax:
    content: public event System.Windows.Input.KeyboardFocusChangedEventHandler PreviewLostKeyboardFocus;
    return:
      type: System.Windows.Input.KeyboardFocusChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
  id: PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement3D.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewLostKeyboardFocus&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewLostKeyboardFocusEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewLostKeyboardFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseDown
  id: PreviewMouseDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseDown
  nameWithType: UIElement3D.PreviewMouseDown
  fullName: System.Windows.UIElement3D.PreviewMouseDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "指针位于此元素上并且按下任何鼠标按钮时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>附加此类事件，以便 PreviewMouseDown 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 连接到的 PreviewMouseDown 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       PreviewMouseDown 事件通常一起引发<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>，这对应于按下的某个之一的两个标准鼠标按钮。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>和<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件到达事件路由中的此元素。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown></xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> 有关<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown>。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonDown> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDown> ，请参见备注       PreviewMouseDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewMouseDownEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.MouseDown>.</xref:System.Windows.UIElement3D.MouseDown> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseDownEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewMouseDown%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseDownEvent
  id: PreviewMouseDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseDownEvent
  nameWithType: UIElement3D.PreviewMouseDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewMouseDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewMouseDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonDown
  id: PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement3D.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鼠标指针位于此元素上并且按下鼠标左键时发生。"
  remarks: "尽管这[路由事件概述](~/add/includes/ajax-current-ext-md.md)似乎遵循隧道路由通过元素树，它实际上是直接的路由的事件引发和每个<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D>遵循沿元素树       此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件，即处理为由事件路由每个元素的附加的事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement3D.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果将标记 PreviewMouseLeftButtonDown 处理时，实质上将标记<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>处理沿路由的所有其他侦听器和所有相关事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 这可能包括如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>的类处理程序生成事件       从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement3D>) 视为鼠标&quot;服务&quot;(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。 对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]在<xref:System.Windows.Input.Mouse>类，而不是那些<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D></xref:System.Windows.Input.Mouse>上       PreviewMouseLeftButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
  id: PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement3D.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewMouseLeftButtonDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewMouseLeftButtonDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonUp
  id: PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement3D.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针位于此元素上并释放鼠标左键时发生。"
  remarks: "尽管这[路由事件概述](~/add/includes/ajax-current-ext-md.md)似乎遵循隧道路由通过元素树，它实际上是直接的路由的事件引发和每个<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D>遵循沿元素树       此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件，即处理为由事件路由每个元素的附加的事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement3D.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果将标记 PreviewMouseLeftButtonUp 处理时，实质上将标记<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>处理沿路由的所有其他侦听器和所有相关事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement3D>) 视为鼠标&quot;服务&quot;(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。 对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]在<xref:System.Windows.Input.Mouse>类，而不是那些<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D></xref:System.Windows.Input.Mouse>上       PreviewMouseLeftButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseLeftButtonUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseLeftButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
  id: PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement3D.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewMouseLeftButtonUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewMouseLeftButtonUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseLeftButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseMove
  id: PreviewMouseMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseMove
  nameWithType: UIElement3D.PreviewMouseMove
  fullName: System.Windows.UIElement3D.PreviewMouseMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针移动鼠标指针位于此元素上时发生。"
  remarks: "都会发生此事件当鼠标指针首次进入入元素边界，并还鼠标指针移动时仍剩余元素的边界内。       此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>附加此类事件，以便 PreviewMouseMove 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName> 连接到的 PreviewMouseMove 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.PreviewMouseMove?displayProperty=fullName>       PreviewMouseMove 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseMove&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewMouseMoveEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.MouseEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.MouseMove>.</xref:System.Windows.UIElement3D.MouseMove> </xref:System.Windows.Input.MouseEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseMoveEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewMouseMove%2A>"
  syntax:
    content: public event System.Windows.Input.MouseEventHandler PreviewMouseMove;
    return:
      type: System.Windows.Input.MouseEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseMoveEvent
  id: PreviewMouseMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseMoveEvent
  nameWithType: UIElement3D.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement3D.PreviewMouseMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewMouseMove&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewMouseMoveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonDown
  id: PreviewMouseRightButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement3D.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "鼠标指针位于此元素上并且按下鼠标右键时发生。"
  remarks: "尽管这[路由事件概述](~/add/includes/ajax-current-ext-md.md)似乎遵循隧道路由通过元素树，它实际上是直接的路由的事件引发和每个<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D>遵循沿元素树       此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件，即处理为由事件路由每个元素的附加的事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>       此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement3D.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果将标记 PreviewMouseRightButtonDown 处理时，实质上将标记<xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName>处理沿路由的所有其他侦听器和所有相关事件。</xref:System.Windows.Input.Mouse.PreviewMouseDown?displayProperty=fullName> 这可能包括如<xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>.</xref:System.Windows.Controls.Control.PreviewMouseDoubleClick>的类处理程序生成事件       从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement3D>) 视为鼠标&quot;服务&quot;(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。 对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]在<xref:System.Windows.Input.Mouse>类，而不是那些<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D></xref:System.Windows.Input.Mouse>上       PreviewMouseRightButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseRightButtonDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonDown%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonDown;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
  id: PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement3D.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewMouseRightButtonDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewMouseRightButtonDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonUp
  id: PreviewMouseRightButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement3D.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针位于此元素上并释放鼠标右键时发生。"
  remarks: "尽管这[路由事件概述](~/add/includes/ajax-current-ext-md.md)似乎遵循隧道路由通过元素树，它实际上是直接的路由的事件引发和每个<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D>遵循沿元素树       此事件是报告鼠标按钮特定信息的基础的几个相关事件之一<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件，即处理为由事件路由每个元素的附加的事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       此事件的事件数据公开的事件数据的基础<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 如果该事件被标记为已处理事件路由过程，则仍会引发的鼠标按钮特定事件;但是，必须通过显式调用添加的鼠标按钮特定事件的处理程序<xref:System.Windows.UIElement3D.AddHandler%2A>，使用选项来处理已标记为已处理的事件，以便将事件侦听器。</xref:System.Windows.UIElement3D.AddHandler%2A> 如果将标记 PreviewMouseRightButtonUp 处理时，实质上将标记<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>处理沿路由的所有其他侦听器和所有相关事件。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       从概念上讲，将此事件 (和其他鼠标按钮事件上的<xref:System.Windows.UIElement3D>) 视为鼠标&quot;服务&quot;(使用提供的服务定义<xref:System.Windows.Input.Mouse>类)。</xref:System.Windows.Input.Mouse> </xref:System.Windows.UIElement3D> 事件将添加不需要检查鼠标按钮状态 （从左至右，向上向下） 的事件数据中的原始鼠标事件的便利性。 对于更高级的方案，例如检查非标准按钮的状态，你可能需要使用[!INCLUDE[TLA#tla_api#plural](~/add/includes/tlasharptla-apisharpplural-md.md)]在<xref:System.Windows.Input.Mouse>类，而不是那些<xref:System.Windows.UIElement3D>。</xref:System.Windows.UIElement3D></xref:System.Windows.Input.Mouse>上       PreviewMouseRightButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseRightButtonUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewMouseRightButtonUp%2A> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseRightButtonUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
  id: PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement3D.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewMouseRightButtonUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewMouseRightButtonUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseRightButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseUp
  id: PreviewMouseUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseUp
  nameWithType: UIElement3D.PreviewMouseUp
  fullName: System.Windows.UIElement3D.PreviewMouseUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针位于此元素上时松开任意鼠标按钮时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>附加此类事件，以便 PreviewMouseUp 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> 连接到的 PreviewMouseUp 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>       PreviewMouseUp 事件通常一起引发<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>，这对应于按下的某个之一的两个标准鼠标按钮。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> <xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>和<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>也是路由的事件，但它们是直接路由的事件，并引发相应的按钮特定事件时<xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName>事件到达事件路由中的此元素。</xref:System.Windows.Input.Mouse.PreviewMouseUp?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp></xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> 有关<xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp>或<xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp>。</xref:System.Windows.UIElement3D.PreviewMouseRightButtonUp> </xref:System.Windows.UIElement3D.PreviewMouseLeftButtonUp> ，请参见备注       PreviewMouseUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewMouseUpEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.MouseButtonEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.MouseUp>.</xref:System.Windows.UIElement3D.MouseUp> </xref:System.Windows.Input.MouseButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseUpEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewMouseUp%2A>"
  syntax:
    content: public event System.Windows.Input.MouseButtonEventHandler PreviewMouseUp;
    return:
      type: System.Windows.Input.MouseButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseUpEvent
  id: PreviewMouseUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseUpEvent
  nameWithType: UIElement3D.PreviewMouseUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewMouseUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewMouseUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseWheel
  id: PreviewMouseWheel
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseWheel
  nameWithType: UIElement3D.PreviewMouseWheel
  fullName: System.Windows.UIElement3D.PreviewMouseWheel
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当鼠标指针位于此元素上并且用户滚动鼠标滚轮时发生。"
  remarks: "焦点或鼠标捕获优先于其中鼠标指针位于;因此，如果您收到此事件来自的已设定焦点或捕获元素，鼠标指针实际上可能通过另一个元素。       此事件创建一个别名<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>附加事件对于此类，以便<xref:System.Windows.UIElement3D.PreviewMouseMove>摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.UIElement3D.PreviewMouseMove> </xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> 事件处理程序附加到<xref:System.Windows.UIElement3D.PreviewMouseMove>事件附加到基础<xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.PreviewMouseWheel?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewMouseMove>       PreviewMouseWheel 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewMouseWheel&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewMouseWheelEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.MouseWheelEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.MouseWheel>.</xref:System.Windows.UIElement3D.MouseWheel> </xref:System.Windows.Input.MouseWheelEventHandler> </xref:System.Windows.UIElement3D.PreviewMouseWheelEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewMouseWheel%2A>"
  syntax:
    content: public event System.Windows.Input.MouseWheelEventHandler PreviewMouseWheel;
    return:
      type: System.Windows.Input.MouseWheelEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewMouseWheelEvent
  id: PreviewMouseWheelEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewMouseWheelEvent
  nameWithType: UIElement3D.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement3D.PreviewMouseWheelEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewMouseWheel&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewMouseWheelEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewMouseWheelEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewQueryContinueDrag
  id: PreviewQueryContinueDrag
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewQueryContinueDrag
  nameWithType: UIElement3D.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement3D.PreviewQueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当在拖放操作期间键盘或鼠标按钮状态的更改时发生。"
  remarks: "PreviewQueryContinueDrag 事件允许拖动源来声明是否应取消拖放操作。       此事件创建一个别名<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>附加此类事件，以便 PreviewQueryContinueDrag 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName> 连接到的 PreviewQueryContinueDrag 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.PreviewQueryContinueDrag?displayProperty=fullName>       PreviewQueryContinueDrag 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewQueryContinueDrag&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.QueryContinueDragEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.QueryContinueDrag>.</xref:System.Windows.UIElement3D.QueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement3D.PreviewQueryContinueDragEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler PreviewQueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewQueryContinueDragEvent
  id: PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement3D.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement3D.PreviewQueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewQueryContinueDrag&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewQueryContinueDragEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewQueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusButtonDown
  id: PreviewStylusButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusButtonDown
  nameWithType: UIElement3D.PreviewStylusButtonDown
  fullName: System.Windows.UIElement3D.PreviewStylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "指针位于此元素上并且按下触笔按钮时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>附加此类事件，以便 PreviewStylusButtonDown 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName> 连接到的 PreviewStylusButtonDown 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusButtonDown?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusButtonDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusButtonDown>.</xref:System.Windows.UIElement3D.StylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusButtonDownEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusButtonDownEvent
  id: PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement3D.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewStylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusButtonDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusButtonDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusButtonUp
  id: PreviewStylusButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusButtonUp
  nameWithType: UIElement3D.PreviewStylusButtonUp
  fullName: System.Windows.UIElement3D.PreviewStylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在指针位于此元素松开触笔按钮时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>附加此类事件，以便 PreviewStylusButtonUp 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName> 连接到的 PreviewStylusButtonUp 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusButtonUp?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusButtonUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusButtonUp>.</xref:System.Windows.UIElement3D.StylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusButtonUpEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler PreviewStylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusButtonUpEvent
  id: PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement3D.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewStylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusButtonUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusButtonUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusDown
  id: PreviewStylusDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusDown
  nameWithType: UIElement3D.PreviewStylusDown
  fullName: System.Windows.UIElement3D.PreviewStylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔位于此元素触及数字化器时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>附加此类事件，以便 PreviewStylusDown 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName> 连接到的 PreviewStylusDown 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusDown?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusDownEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusDownEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusDown>.</xref:System.Windows.UIElement3D.StylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusDownEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler PreviewStylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusDownEvent
  id: PreviewStylusDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusDownEvent
  nameWithType: UIElement3D.PreviewStylusDownEvent
  fullName: System.Windows.UIElement3D.PreviewStylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusInAirMove
  id: PreviewStylusInAirMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusInAirMove
  nameWithType: UIElement3D.PreviewStylusInAirMove
  fullName: System.Windows.UIElement3D.PreviewStylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔掠过元素但并未实际接触数字化器时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>附加此类事件，以便 PreviewStylusInAirMove 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName> 连接到的 PreviewStylusInAirMove 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusInAirMove?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusInAirMove 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusInAirMove&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusInAirMove>.</xref:System.Windows.UIElement3D.StylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusInAirMoveEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
  id: PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement3D.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusInAirMove&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusInAirMoveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusInRange
  id: PreviewStylusInRange
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusInRange
  nameWithType: UIElement3D.PreviewStylusInRange
  fullName: System.Windows.UIElement3D.PreviewStylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔与数字化仪以致无法检测到，在此元素近到足以时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>附加此类事件，以便 PreviewStylusInRange 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName> 连接到的 PreviewStylusInRange 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusInRange?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusInRange 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusInRange&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusInRange>.</xref:System.Windows.UIElement3D.StylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusInRangeEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusInRangeEvent
  id: PreviewStylusInRangeEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement3D.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement3D.PreviewStylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusInRange&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusInRangeEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusMove
  id: PreviewStylusMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusMove
  nameWithType: UIElement3D.PreviewStylusMove
  fullName: System.Windows.UIElement3D.PreviewStylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在触笔掠过元素时发生。 触笔必须移动时在检测触数字化器才会引发此事件，否则为<xref href=&quot;System.Windows.UIElement3D.PreviewStylusInAirMove&quot;></xref>改为引发。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>附加此类事件，以便 PreviewStylusMove 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName> 连接到的 PreviewStylusMove 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusMove?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusMove 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusMove&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusMoveEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusMove>.</xref:System.Windows.UIElement3D.StylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusMoveEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusMoveEvent
  id: PreviewStylusMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusMoveEvent
  nameWithType: UIElement3D.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement3D.PreviewStylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusMove&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusMoveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusOutOfRange
  id: PreviewStylusOutOfRange
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusOutOfRange
  nameWithType: UIElement3D.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement3D.PreviewStylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔悬停于数字化器检测到时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>附加此类事件，以便 PreviewStylusOutOfRange 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName> 连接到的 PreviewStylusOutOfRange 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusOutOfRange?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusOutOfRange 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusOutOfRange&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusOutOfRange>.</xref:System.Windows.UIElement3D.StylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
  id: PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement3D.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusOutOfRange&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusOutOfRangeEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusSystemGesture
  id: PreviewStylusSystemGesture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusSystemGesture
  nameWithType: UIElement3D.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement3D.PreviewStylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "用户采用某一种触笔笔势时发生。"
  remarks: "有关触笔笔势的信息，请参阅<xref:System.Windows.Input.SystemGesture>。</xref:System.Windows.Input.SystemGesture>       此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>附加此类事件，以便 PreviewStylusSystemGesture 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName> 连接到的 PreviewStylusSystemGesture 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusSystemGesture?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusSystemGesture 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusSystemGesture&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusSystemGestureEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusSystemGesture>.</xref:System.Windows.UIElement3D.StylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusSystemGestureEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler PreviewStylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
  id: PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement3D.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusSystemGesture&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusSystemGestureEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusUp
  id: PreviewStylusUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusUp
  nameWithType: UIElement3D.PreviewStylusUp
  fullName: System.Windows.UIElement3D.PreviewStylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔位于此元素上并且用户将触笔抬离数字化器时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>附加事件对于此类，以便<xref:System.Windows.UIElement3D.PreviewStylusDown>摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.UIElement3D.PreviewStylusDown> </xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> 事件处理程序附加到<xref:System.Windows.UIElement3D.PreviewStylusDown>事件附加到基础<xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.PreviewStylusUp?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewStylusDown>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       PreviewStylusUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewStylusUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewStylusUpEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.StylusUp>.</xref:System.Windows.UIElement3D.StylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.PreviewStylusUpEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler PreviewStylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewStylusUpEvent
  id: PreviewStylusUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewStylusUpEvent
  nameWithType: UIElement3D.PreviewStylusUpEvent
  fullName: System.Windows.UIElement3D.PreviewStylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewStylusUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewStylusUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewStylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTextInput
  id: PreviewTextInput
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTextInput
  nameWithType: UIElement3D.PreviewTextInput
  fullName: System.Windows.UIElement3D.PreviewTextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素以设备无关模式获取文本时发生。"
  remarks: "PreviewTextInput 事件允许组件或应用程序侦听的文本输入以独立于设备的方式。 键盘是 PreviewTextInput; 的主要方式但语音、 手写和其他输入的设备还可以生成 PreviewTextInput。       由于键组合 — 默认键盘或输入的法编辑器-多个键事件可能会引发一个文本输入的事件。       此事件创建一个别名<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>附加此类事件，以便 PreviewTextInput 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName> 连接到的 PreviewTextInput 事件的事件处理程序附加到基础<xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.TextCompositionManager.PreviewTextInput?displayProperty=fullName>       PreviewTextInput 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_PreviewTextInput&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewTextInputEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.Windows.Input.TextCompositionEventHandler>|     -相应冒泡事件是<xref:System.Windows.UIElement3D.TextInput>.</xref:System.Windows.UIElement3D.TextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement3D.PreviewTextInputEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewTextInput%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler PreviewTextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTextInputEvent
  id: PreviewTextInputEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTextInputEvent
  nameWithType: UIElement3D.PreviewTextInputEvent
  fullName: System.Windows.UIElement3D.PreviewTextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewTextInput&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       PreviewTextInputEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchDown
  id: PreviewTouchDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchDown
  nameWithType: UIElement3D.PreviewTouchDown
  fullName: System.Windows.UIElement3D.PreviewTouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手指触摸屏幕上方的手指位于此元素时发生。"
  remarks: "默认情况下，PreviewTouchDown 和<xref:System.Windows.UIElement3D.TouchDown>事件手指触摸屏幕并移动之前不会发生。</xref:System.Windows.UIElement3D.TouchDown> 手指在屏幕上按住它而无需移动它会导致按和保存的一种<xref:System.Windows.Input.Stylus>。</xref:System.Windows.Input.Stylus>行为 按下并保持行为相当于鼠标右键单击。       若要使 PreviewTouchDown 和<xref:System.Windows.UIElement3D.TouchDown>事件发生只要的手指触摸屏幕上，设置<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>附加到属性`false`此元素。</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement3D.TouchDown>      <a name=&quot;routedEventInfo_PreviewTouchDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewTouchDownEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -相应冒泡事件是<xref:System.Windows.UIElement3D.TouchDown>.</xref:System.Windows.UIElement3D.TouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.PreviewTouchDownEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchDownEvent
  id: PreviewTouchDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchDownEvent
  nameWithType: UIElement3D.PreviewTouchDownEvent
  fullName: System.Windows.UIElement3D.PreviewTouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewTouchDown&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchMove
  id: PreviewTouchMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchMove
  nameWithType: UIElement3D.PreviewTouchMove
  fullName: System.Windows.UIElement3D.PreviewTouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "为指位于此元素的上方的手指在屏幕上移动时发生。"
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchMove&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewTouchMoveEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -相应冒泡事件是<xref:System.Windows.UIElement3D.TouchMove>.</xref:System.Windows.UIElement3D.TouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.PreviewTouchMoveEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchMoveEvent
  id: PreviewTouchMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchMoveEvent
  nameWithType: UIElement3D.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement3D.PreviewTouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewTouchMove&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchUp
  id: PreviewTouchUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchUp
  nameWithType: UIElement3D.PreviewTouchUp
  fullName: System.Windows.UIElement3D.PreviewTouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手指显示在屏幕上方的手指位于此元素时发生。"
  remarks: "<a name=&quot;routedEventInfo_PreviewTouchUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.PreviewTouchUpEvent>|  |路由策略 |隧道 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -相应冒泡事件是<xref:System.Windows.UIElement3D.TouchUp>.</xref:System.Windows.UIElement3D.TouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.PreviewTouchUpEvent>      -重写<xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnPreviewTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> PreviewTouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.PreviewTouchUpEvent
  id: PreviewTouchUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: PreviewTouchUpEvent
  nameWithType: UIElement3D.PreviewTouchUpEvent
  fullName: System.Windows.UIElement3D.PreviewTouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.PreviewTouchUp&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewTouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.QueryContinueDrag
  id: QueryContinueDrag
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: QueryContinueDrag
  nameWithType: UIElement3D.QueryContinueDrag
  fullName: System.Windows.UIElement3D.QueryContinueDrag
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当在拖放操作期间键盘或鼠标按钮状态的更改时发生。"
  remarks: "QueryContinueDrag 事件允许拖动源确定是否应取消拖放操作。       此事件创建一个别名<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>附加此类事件，以便 QueryContinueDrag 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName> 连接到的 QueryContinueDrag 事件的事件处理程序附加到基础<xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.DragDrop.QueryContinueDrag?displayProperty=fullName>       QueryContinueDrag 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_QueryContinueDrag&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.QueryContinueDragEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.QueryContinueDragEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewQueryContinueDrag>.</xref:System.Windows.UIElement3D.PreviewQueryContinueDrag> </xref:System.Windows.QueryContinueDragEventHandler> </xref:System.Windows.UIElement3D.QueryContinueDragEvent>      -重写<xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnQueryContinueDrag%2A>"
  syntax:
    content: public event System.Windows.QueryContinueDragEventHandler QueryContinueDrag;
    return:
      type: System.Windows.QueryContinueDragEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.QueryContinueDragEvent
  id: QueryContinueDragEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: QueryContinueDragEvent
  nameWithType: UIElement3D.QueryContinueDragEvent
  fullName: System.Windows.UIElement3D.QueryContinueDragEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.QueryContinueDrag&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       QueryContinueDragEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryContinueDragEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.QueryCursor
  id: QueryCursor
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: QueryCursor
  nameWithType: UIElement3D.QueryCursor
  fullName: System.Windows.UIElement3D.QueryCursor
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当请求显示光标时发生。 引发此事件是在元素上每个时间，鼠标指针移动到新位置，这意味着光标对象可能需要更改根据其新位置。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>附加此类事件，以便 QueryCursor 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName> 连接到的 QueryCursor 事件的事件处理程序附加到基础<xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Mouse.QueryCursor?displayProperty=fullName>       此事件名称引用光标不一定是文本光标 （有时称为插入点）。 相反，此上下文中的光标是声明的屏幕的图形显示与多个可能的输入相关的设备或中的概念相关的对象[!INCLUDE[TLA2#tla_win](~/add/includes/tla2sharptla-win-md.md)]编程。 该对象表示由<xref:System.Windows.Input.Cursor>类[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]。</xref:System.Windows.Input.Cursor> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]在输入的系统使你能够更改此光标时它表示鼠标指针的屏幕位置。 你可以使用从的预定义的值<xref:System.Windows.Input.Cursors>枚举，也可以声明为图像文件自定义光标。</xref:System.Windows.Input.Cursors>       侦听 QueryCursor 事件不是游标管理的有效技术。 相反，每个元素应定义<xref:System.Windows.FrameworkContentElement.Cursor%2A>和<xref:System.Windows.FrameworkContentElement.ForceCursor%2A>。</xref:System.Windows.FrameworkContentElement.ForceCursor%2A></xref:System.Windows.FrameworkContentElement.Cursor%2A>自己游标行为 你应仅依赖于 QueryCursor，如果你不使用 WPF 框架级别基元素，或中的特殊情况下，基于每个元素中定义的游标行为不满足你的需求。 在响应 QueryCursor 中实现的游标行为的详细信息，请参阅<xref:System.Windows.Input.QueryCursorEventHandler>。</xref:System.Windows.Input.QueryCursorEventHandler>       QueryCursor 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_QueryCursor&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.QueryCursorEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.QueryCursorEventHandler>|     -没有定义相应隧道事件。</xref:System.Windows.Input.QueryCursorEventHandler> </xref:System.Windows.UIElement3D.QueryCursorEvent>      -重写<xref:System.Windows.UIElement3D.OnQueryCursor%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnQueryCursor%2A>"
  syntax:
    content: public event System.Windows.Input.QueryCursorEventHandler QueryCursor;
    return:
      type: System.Windows.Input.QueryCursorEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.QueryCursorEvent
  id: QueryCursorEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: QueryCursorEvent
  nameWithType: UIElement3D.QueryCursorEvent
  fullName: System.Windows.UIElement3D.QueryCursorEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.QueryCursor&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       QueryCursorEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent QueryCursorEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)
  id: RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement3D.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.RaiseEvent(RoutedEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "引发特定路由的事件。 <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref>引发内标识<xref href=&quot;System.Windows.RoutedEventArgs&quot;></xref>提供的实例 (作为<xref:System.Windows.RoutedEventArgs.RoutedEvent*>该事件数据的属性)。</xref:System.Windows.RoutedEventArgs.RoutedEvent*>"
  remarks: "`e`参数被类型化为所有路由的事件数据的公共基类型; 但是，应作为最特定的事件数据类型，则使用有关要引发事件，因为给定的事件数据<xref:System.Windows.RoutedEventArgs>派生的类包含实际的特定数据属性中，适用于特定事件时将引发此事件。</xref:System.Windows.RoutedEventArgs>       <xref:System.Windows.RoutedEventArgs>不只是事件; 的状态属性它还标识要引发的路由的事件。</xref:System.Windows.RoutedEventArgs> 此事件引发模式和路由的事件数据均不同于[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件和数据类，该类通常只包含与事件相关的属性。       RaiseEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void RaiseEvent (System.Windows.RoutedEventArgs e);
    parameters:
    - id: e
      type: System.Windows.RoutedEventArgs
      description: "A <xref href=&quot;System.Windows.RoutedEventArgs&quot;> </xref> ，其中包含事件数据，还标识要引发的事件。"
  overload: System.Windows.UIElement3D.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ReleaseAllTouchCaptures
  id: ReleaseAllTouchCaptures
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement3D.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement3D.ReleaseAllTouchCaptures()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "释放此元素中的所有捕获的触摸设备。"
  syntax:
    content: public void ReleaseAllTouchCaptures ();
    parameters: []
  overload: System.Windows.UIElement3D.ReleaseAllTouchCaptures*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ReleaseMouseCapture
  id: ReleaseMouseCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ReleaseMouseCapture()
  nameWithType: UIElement3D.ReleaseMouseCapture()
  fullName: System.Windows.UIElement3D.ReleaseMouseCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "如果此元素捕获，则释放鼠标捕获。"
  remarks: "如果此元素未持有捕获，调用此方法无效。 请考虑在检查的值<xref:System.Windows.UIElement3D.IsMouseCaptured%2A>之前调用此方法。</xref:System.Windows.UIElement3D.IsMouseCaptured%2A>       ReleaseMouseCapture 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void ReleaseMouseCapture ();
    parameters: []
  overload: System.Windows.UIElement3D.ReleaseMouseCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ReleaseStylusCapture
  id: ReleaseStylusCapture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ReleaseStylusCapture()
  nameWithType: UIElement3D.ReleaseStylusCapture()
  fullName: System.Windows.UIElement3D.ReleaseStylusCapture()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "如果此元素保留捕获触笔设备捕获，则释放。"
  remarks: "如果此元素未持有捕获，调用此方法无效。 请考虑在检查的值<xref:System.Windows.UIElement3D.IsStylusCaptured%2A>之前调用此方法。</xref:System.Windows.UIElement3D.IsStylusCaptured%2A>       ReleaseStylusCapture 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void ReleaseStylusCapture ();
    parameters: []
  overload: System.Windows.UIElement3D.ReleaseStylusCapture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  id: ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement3D.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement3D.ReleaseTouchCapture(TouchDevice)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "尝试释放此元素的指定的触摸设备。"
  syntax:
    content: public bool ReleaseTouchCapture (System.Windows.Input.TouchDevice touchDevice);
    parameters:
    - id: touchDevice
      type: System.Windows.Input.TouchDevice
      description: "要释放的设备。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已发布的触摸设备;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.UIElement3D.ReleaseTouchCapture*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>touchDevice</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  id: RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement3D.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement3D.RemoveHandler(RoutedEvent,Delegate)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "从此元素中移除指定的路由的事件处理程序。"
  remarks: "最常见的方案使用此[!INCLUDE[TLA#tla_api](~/add/includes/tlasharptla-api-md.md)]，在实现[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]&quot;包装器&quot;自定义的路由事件，特别是，当你实现处理程序的&quot;删除&quot;逻辑与关联的事件[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]级别。       如果没有注册的使用匹配方法调用的输入的参数的条件没有处理程序，则调用此方法起任何作用。       如果多个处理程序附加条件相匹配，仅第一个处理程序事件删除处理程序存储区中。 此行为是与一致[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]行为`-=`运算符。       既不`routedEvent`也不`handler`可能`null`。 尝试提供上述任意值作为`null`将引发的异常。       此方法将忽略`handledEventsToo`参数信息，如果处理程序最初提供添加与<xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29>启用的已处理事件的处理的签名。</xref:System.Windows.UIElement3D.AddHandler%28System.Windows.RoutedEvent%2CSystem.Delegate%2CSystem.Boolean%29> 删除任一类型的处理程序。       RemoveHandler 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void RemoveHandler (System.Windows.RoutedEvent routedEvent, Delegate handler);
    parameters:
    - id: routedEvent
      type: System.Windows.RoutedEvent
      description: "附加处理程序的路由事件的标识符。"
    - id: handler
      type: System.Delegate
      description: "要移除此元素的事件处理程序集合的特定处理程序实现。"
  overload: System.Windows.UIElement3D.RemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ShouldSerializeCommandBindings
  id: ShouldSerializeCommandBindings
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement3D.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement3D.ShouldSerializeCommandBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "返回序列化进程是否应序列化<xref:System.Windows.UIElement3D.CommandBindings*>此类的实例上的属性</xref:System.Windows.UIElement3D.CommandBindings*>的内容"
  remarks: "这将返回`true`如果<xref:System.Windows.UIElement3D.CommandBindings%2A>本地设置。</xref:System.Windows.UIElement3D.CommandBindings%2A>       这`ShouldSerialize`提供方法，因为<xref:System.Windows.UIElement3D.CommandBindings%2A>属性不具有简单的默认值。</xref:System.Windows.UIElement3D.CommandBindings%2A> 此方法指示属性是否已从其默认值。 如果你正在开发的设计器，或可以开发您自己的控件合并<xref:System.Windows.UIElement3D>.</xref:System.Windows.UIElement3D>通常调用此方法       有关详细信息，请参阅[使用 ShouldSerialize 和重置方法定义默认值](~/add/includes/ajax-current-ext-md.md)。       ShouldSerializeCommandBindings 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool ShouldSerializeCommandBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.UIElement3D.CommandBindings*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.UIElement3D.CommandBindings*>"
  overload: System.Windows.UIElement3D.ShouldSerializeCommandBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.ShouldSerializeInputBindings
  id: ShouldSerializeInputBindings
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement3D.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement3D.ShouldSerializeInputBindings()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "返回序列化进程是否应序列化<xref:System.Windows.UIElement3D.InputBindings*>此类的实例上的属性</xref:System.Windows.UIElement3D.InputBindings*>的内容"
  remarks: "这将返回`true`如果<xref:System.Windows.UIElement3D.InputBindings%2A>本地设置。</xref:System.Windows.UIElement3D.InputBindings%2A>       这`ShouldSerialize`提供方法，因为<xref:System.Windows.UIElement3D.InputBindings%2A>属性不具有简单的默认值。</xref:System.Windows.UIElement3D.InputBindings%2A> 此方法指示属性是否已从其默认值。 如果你正在开发的设计器，或可以开发您自己的控件合并<xref:System.Windows.UIElement3D>.</xref:System.Windows.UIElement3D>通常调用此方法       有关详细信息，请参阅[使用 ShouldSerialize 和重置方法定义默认值](~/add/includes/ajax-current-ext-md.md)。       ShouldSerializeInputBindings 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool ShouldSerializeInputBindings ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.UIElement3D.InputBindings*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.UIElement3D.InputBindings*>"
  overload: System.Windows.UIElement3D.ShouldSerializeInputBindings*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusButtonDown
  id: StylusButtonDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusButtonDown
  nameWithType: UIElement3D.StylusButtonDown
  fullName: System.Windows.UIElement3D.StylusButtonDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "指针位于此元素上并且按下触笔按钮时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>附加此类事件，以便 StylusButtonDown 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName> 连接到的 StylusButtonDown 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusButtonDown?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusButtonDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusButtonDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusButtonDownEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusButtonDown>.</xref:System.Windows.UIElement3D.PreviewStylusButtonDown> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement3D.StylusButtonDownEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusButtonDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusButtonDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonDown;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusButtonDownEvent
  id: StylusButtonDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusButtonDownEvent
  nameWithType: UIElement3D.StylusButtonDownEvent
  fullName: System.Windows.UIElement3D.StylusButtonDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusButtonDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusButtonDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusButtonUp
  id: StylusButtonUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusButtonUp
  nameWithType: UIElement3D.StylusButtonUp
  fullName: System.Windows.UIElement3D.StylusButtonUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "在指针位于此元素松开触笔按钮时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>附加此类事件，以便 StylusButtonUp 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName> 连接到的 StylusButtonUp 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusButtonUp?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusButtonUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusButtonUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusButtonUpEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusButtonEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusButtonUp>.</xref:System.Windows.UIElement3D.PreviewStylusButtonUp> </xref:System.Windows.Input.StylusButtonEventHandler> </xref:System.Windows.UIElement3D.StylusButtonUpEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusButtonUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusButtonUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusButtonEventHandler StylusButtonUp;
    return:
      type: System.Windows.Input.StylusButtonEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusButtonUpEvent
  id: StylusButtonUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusButtonUpEvent
  nameWithType: UIElement3D.StylusButtonUpEvent
  fullName: System.Windows.UIElement3D.StylusButtonUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusButtonUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusButtonUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusButtonUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusDown
  id: StylusDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusDown
  nameWithType: UIElement3D.StylusDown
  fullName: System.Windows.UIElement3D.StylusDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔位于此元素时，触笔触及数字化器时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>附加此类事件，以便 StylusDown 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName> 连接到的 StylusDown 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusDown?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusDown 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusDownEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusDownEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusDown>.</xref:System.Windows.UIElement3D.PreviewStylusDown> </xref:System.Windows.Input.StylusDownEventHandler> </xref:System.Windows.UIElement3D.StylusDownEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusDown%2A>"
  syntax:
    content: public event System.Windows.Input.StylusDownEventHandler StylusDown;
    return:
      type: System.Windows.Input.StylusDownEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusDownEvent
  id: StylusDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusDownEvent
  nameWithType: UIElement3D.StylusDownEvent
  fullName: System.Windows.UIElement3D.StylusDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusDown&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusDownEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusEnter
  id: StylusEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusEnter
  nameWithType: UIElement3D.StylusEnter
  fullName: System.Windows.UIElement3D.StylusEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔进入此元素的边界时发生。"
  remarks: "StylusEnter 是[路由事件概述](~/add/includes/ajax-current-ext-md.md)使用直接的事件处理路由策略。 在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。 但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。       尽管 StylusEnter 跟踪触笔进入元素的边界时，此事件更确切地报告<xref:System.Windows.UIElement3D.IsStylusOver%2A>属性值已更改，不再`false`到`true`针对此元素。</xref:System.Windows.UIElement3D.IsStylusOver%2A>       此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>附加此类事件，以便 StylusEnter 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName> 连接到的 StylusEnter 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusEnter?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusEnter 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusEnter&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusEnterEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnStylusEnter%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusEnter%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusEnterEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusEnter;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusEnterEvent
  id: StylusEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusEnterEvent
  nameWithType: UIElement3D.StylusEnterEvent
  fullName: System.Windows.UIElement3D.StylusEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusEnter&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusEnterEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusInAirMove
  id: StylusInAirMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusInAirMove
  nameWithType: UIElement3D.StylusInAirMove
  fullName: System.Windows.UIElement3D.StylusInAirMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔掠过元素但并未实际接触数字化器时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>附加此类事件，以便 StylusInAirMove 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName> 连接到的 StylusInAirMove 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusInAirMove?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusInAirMove 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusInAirMove&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusInAirMoveEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusInAirMove>.</xref:System.Windows.UIElement3D.PreviewStylusInAirMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusInAirMoveEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusInAirMove%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusInAirMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInAirMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusInAirMoveEvent
  id: StylusInAirMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusInAirMoveEvent
  nameWithType: UIElement3D.StylusInAirMoveEvent
  fullName: System.Windows.UIElement3D.StylusInAirMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusInAirMove&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusInAirMoveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInAirMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusInRange
  id: StylusInRange
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusInRange
  nameWithType: UIElement3D.StylusInRange
  fullName: System.Windows.UIElement3D.StylusInRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔与数字化仪以致无法检测到，在此元素近到足以时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>附加此类事件，以便 StylusInRange 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName> 连接到的 StylusInRange 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusInRange?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusInRange 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusInRange&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusInRangeEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusInRange>.</xref:System.Windows.UIElement3D.PreviewStylusInRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusInRangeEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusInRange%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusInRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusInRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusInRangeEvent
  id: StylusInRangeEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusInRangeEvent
  nameWithType: UIElement3D.StylusInRangeEvent
  fullName: System.Windows.UIElement3D.StylusInRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusInRange&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusInRangeEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusInRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusLeave
  id: StylusLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusLeave
  nameWithType: UIElement3D.StylusLeave
  fullName: System.Windows.UIElement3D.StylusLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔离开元素边界时发生。"
  remarks: "StylusLeave 是[路由事件概述](~/add/includes/ajax-current-ext-md.md)使用直接的事件处理路由策略。 在路由过程; 不会引发直接路由的事件相反，它们是在中处理同一个元素引发它们时。 但是，它们启用路由的事件的行为，如样式中的事件触发器其他的方面。       尽管 StylusLeave 跟踪触笔离开元素边界时，此事件更确切地报告<xref:System.Windows.UIElement3D.IsStylusOver%2A>属性值已更改，不再`true`到`false`针对此元素。</xref:System.Windows.UIElement3D.IsStylusOver%2A>       此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>附加此类事件，以便 StylusLeave 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName> 连接到的 StylusLeave 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusLeave?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusLeave 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusLeave&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusLeaveEvent>|  |路由策略 |直接 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -重写<xref:System.Windows.UIElement3D.OnStylusLeave%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusLeave%2A> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusLeaveEvent>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusLeave;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusLeaveEvent
  id: StylusLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusLeaveEvent
  nameWithType: UIElement3D.StylusLeaveEvent
  fullName: System.Windows.UIElement3D.StylusLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusLeave&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusLeaveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusMove
  id: StylusMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusMove
  nameWithType: UIElement3D.StylusMove
  fullName: System.Windows.UIElement3D.StylusMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素上并且移动触笔时发生。 触笔必须在引发此事件在数字化仪上移动。 否则为<xref href=&quot;System.Windows.UIElement3D.StylusInAirMove&quot;></xref>改为引发。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>附加此类事件，以便 StylusMove 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName> 连接到的 StylusMove 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusMove?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusMove 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusMove&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusMoveEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusMove>.</xref:System.Windows.UIElement3D.PreviewStylusMove> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusMoveEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusMove%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusMove%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusMove;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusMoveEvent
  id: StylusMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusMoveEvent
  nameWithType: UIElement3D.StylusMoveEvent
  fullName: System.Windows.UIElement3D.StylusMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusMove&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusMoveEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusOutOfRange
  id: StylusOutOfRange
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusOutOfRange
  nameWithType: UIElement3D.StylusOutOfRange
  fullName: System.Windows.UIElement3D.StylusOutOfRange
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "当触笔悬停于数字化仪以致无法检测到，在此元素上时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>附加此类事件，以便 StylusOutOfRange 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName> 连接到的 StylusOutOfRange 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusOutOfRange?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusOutOfRange 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusOutOfRange&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusOutOfRangeEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusOutOfRange>.</xref:System.Windows.UIElement3D.PreviewStylusOutOfRange> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusOutOfRangeEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusOutOfRange%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusOutOfRange;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusOutOfRangeEvent
  id: StylusOutOfRangeEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusOutOfRangeEvent
  nameWithType: UIElement3D.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement3D.StylusOutOfRangeEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusOutOfRange&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusOutOfRangeEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusOutOfRangeEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusSystemGesture
  id: StylusSystemGesture
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusSystemGesture
  nameWithType: UIElement3D.StylusSystemGesture
  fullName: System.Windows.UIElement3D.StylusSystemGesture
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "用户采用某一种触笔笔势时发生。"
  remarks: "有关触笔笔势的详细信息，请参阅<xref:System.Windows.Input.SystemGesture>。</xref:System.Windows.Input.SystemGesture>       此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>附加此类事件，以便 StylusSystemGesture 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName> 连接到的 StylusSystemGesture 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusSystemGesture?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusSystemGesture 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusSystemGesture&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusSystemGestureEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusSystemGestureEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusSystemGesture>.</xref:System.Windows.UIElement3D.PreviewStylusSystemGesture> </xref:System.Windows.Input.StylusSystemGestureEventHandler> </xref:System.Windows.UIElement3D.StylusSystemGestureEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusSystemGesture%2A>"
  syntax:
    content: public event System.Windows.Input.StylusSystemGestureEventHandler StylusSystemGesture;
    return:
      type: System.Windows.Input.StylusSystemGestureEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusSystemGestureEvent
  id: StylusSystemGestureEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusSystemGestureEvent
  nameWithType: UIElement3D.StylusSystemGestureEvent
  fullName: System.Windows.UIElement3D.StylusSystemGestureEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusSystemGesture&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusSystemGestureEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusSystemGestureEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusUp
  id: StylusUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusUp
  nameWithType: UIElement3D.StylusUp
  fullName: System.Windows.UIElement3D.StylusUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "它位于此元素上并且用户将触笔抬离数字化器时发生。"
  remarks: "此事件创建一个别名<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>附加此类事件，以便 StylusUp 摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName> 连接到的 StylusUp 事件的事件处理程序附加到基础<xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.Stylus.StylusUp?displayProperty=fullName>       触摸、 鼠标和触笔输入存在特定的关系。 有关详细信息，请参阅[Touch Windows Vista 中的输入支持](http://go.microsoft.com/fwlink/?LinkId=160818)和[输入概述](~/add/includes/ajax-current-ext-md.md)。       StylusUp 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_StylusUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.StylusUpEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.StylusEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewStylusUp>.</xref:System.Windows.UIElement3D.PreviewStylusUp> </xref:System.Windows.Input.StylusEventHandler> </xref:System.Windows.UIElement3D.StylusUpEvent>      -重写<xref:System.Windows.UIElement3D.OnStylusUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnStylusUp%2A>"
  syntax:
    content: public event System.Windows.Input.StylusEventHandler StylusUp;
    return:
      type: System.Windows.Input.StylusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.StylusUpEvent
  id: StylusUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: StylusUpEvent
  nameWithType: UIElement3D.StylusUpEvent
  fullName: System.Windows.UIElement3D.StylusUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.StylusUp&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       StylusUpEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent StylusUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TextInput
  id: TextInput
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TextInput
  nameWithType: UIElement3D.TextInput
  fullName: System.Windows.UIElement3D.TextInput
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "此元素以设备无关模式获取文本时发生。"
  remarks: "文本输入事件允许组件或应用程序侦听的文本输入以独立于设备的方式。 键盘是文本输入，但语音，手写的主要方式和其他输入的设备也可以引发文本输入。       由于键组合 — 默认键盘或输入的法编辑器-多个键事件可能会引发一个文本输入的事件。       此事件创建一个别名<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>附加此类事件，以便文本输入摘自类的成员列出时<xref:System.Windows.UIElement3D>为该类继承。</xref:System.Windows.UIElement3D> </xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName> 连接到的文本输入事件的事件处理程序附加到基础<xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>附加事件，并接收相同的事件数据实例。</xref:System.Windows.Input.TextCompositionManager.TextInput?displayProperty=fullName>       文本输入是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;routedEventInfo_TextInput&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.TextInputEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.Windows.Input.TextCompositionEventHandler>|     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewTextInput>.</xref:System.Windows.UIElement3D.PreviewTextInput> </xref:System.Windows.Input.TextCompositionEventHandler> </xref:System.Windows.UIElement3D.TextInputEvent>      -重写<xref:System.Windows.UIElement3D.OnTextInput%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnTextInput%2A>"
  syntax:
    content: public event System.Windows.Input.TextCompositionEventHandler TextInput;
    return:
      type: System.Windows.Input.TextCompositionEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TextInputEvent
  id: TextInputEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TextInputEvent
  nameWithType: UIElement3D.TextInputEvent
  fullName: System.Windows.UIElement3D.TextInputEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.TextInput&quot;></xref>路由的事件。"
  remarks: "路由的事件标识符是在注册路由的事件时创建的。 这些标识符包含标识名称、 所有者类型、 处理程序类型、 路由策略和添加事件所有者的实用工具方法。 可以使用这些标识符添加类处理程序。       有关注册路由的事件的详细信息，请参阅<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 有关使用路由的事件标识符添加类处理程序的详细信息，请参阅<xref:System.Windows.EventManager.RegisterClassHandler%2A>。</xref:System.Windows.EventManager.RegisterClassHandler%2A>       TextInputEvent 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TextInputEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchDown
  id: TouchDown
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchDown
  nameWithType: UIElement3D.TouchDown
  fullName: System.Windows.UIElement3D.TouchDown
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手指触摸屏幕上方的手指位于此元素时发生。"
  remarks: "默认情况下，<xref:System.Windows.UIElement3D.PreviewTouchDown>和 TouchDown 事件手指触摸屏幕并移动之前不会发生。</xref:System.Windows.UIElement3D.PreviewTouchDown> 手指在屏幕上按住它而无需移动它会导致按和保存的一种<xref:System.Windows.Input.Stylus>。</xref:System.Windows.Input.Stylus>行为 按下并保持行为相当于鼠标右键单击。       若要使<xref:System.Windows.UIElement3D.PreviewTouchDown>和 TouchDown 事件发生只要的手指触摸屏幕上，设置<xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName>附加到属性`false`此元素。</xref:System.Windows.Input.Stylus.IsPressAndHoldEnabled%2A?displayProperty=fullName> </xref:System.Windows.UIElement3D.PreviewTouchDown>      <a name=&quot;routedEventInfo_TouchDown&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.TouchDownEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewTouchDown>.</xref:System.Windows.UIElement3D.PreviewTouchDown> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchDownEvent>      -重写<xref:System.Windows.UIElement3D.OnTouchDown%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnTouchDown%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchDown;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchDownEvent
  id: TouchDownEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchDownEvent
  nameWithType: UIElement3D.TouchDownEvent
  fullName: System.Windows.UIElement3D.TouchDownEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.TouchDown&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchDownEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchEnter
  id: TouchEnter
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchEnter
  nameWithType: UIElement3D.TouchEnter
  fullName: System.Windows.UIElement3D.TouchEnter
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "从移动触摸屏输入时发生外部到此元素的边界内。"
  remarks: "始终引发此事件，指示触摸设备捕获到此元素。      <a name=&quot;routedEventInfo_TouchEnter&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.TouchEnterEvent>|  |路由策略 |直接 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -重写<xref:System.Windows.UIElement3D.OnTouchEnter%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnTouchEnter%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchEnterEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchEnter;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchEnterEvent
  id: TouchEnterEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchEnterEvent
  nameWithType: UIElement3D.TouchEnterEvent
  fullName: System.Windows.UIElement3D.TouchEnterEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.TouchEnter&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchEnterEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchesCaptured
  id: TouchesCaptured
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchesCaptured
  nameWithType: UIElement3D.TouchesCaptured
  fullName: System.Windows.UIElement3D.TouchesCaptured
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取捕获到此元素的所有触摸设备。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCaptured { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "枚举<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>捕获到此元素的对象。"
  overload: System.Windows.UIElement3D.TouchesCaptured*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchesCapturedWithin
  id: TouchesCapturedWithin
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchesCapturedWithin
  nameWithType: UIElement3D.TouchesCapturedWithin
  fullName: System.Windows.UIElement3D.TouchesCapturedWithin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取其可视化树中捕获到此元素的所有触摸设备或任何子元素。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesCapturedWithin { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "枚举<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>捕获到此元素或其可视化树中的任何子元素的对象。"
  overload: System.Windows.UIElement3D.TouchesCapturedWithin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchesDirectlyOver
  id: TouchesDirectlyOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchesDirectlyOver
  nameWithType: UIElement3D.TouchesDirectlyOver
  fullName: System.Windows.UIElement3D.TouchesDirectlyOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取位于此元素上的所有触摸设备。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesDirectlyOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "枚举<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>位于此元素上的对象。"
  overload: System.Windows.UIElement3D.TouchesDirectlyOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchesOver
  id: TouchesOver
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchesOver
  nameWithType: UIElement3D.TouchesOver
  fullName: System.Windows.UIElement3D.TouchesOver
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取位于此元素上的所有触摸设备或任何子元素及其可视化树中。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice> TouchesOver { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
      description: "枚举<xref href=&quot;System.Windows.Input.TouchDevice&quot;></xref>通过此元素或其可视化树中的任何子元素的对象。"
  overload: System.Windows.UIElement3D.TouchesOver*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchLeave
  id: TouchLeave
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchLeave
  nameWithType: UIElement3D.TouchLeave
  fullName: System.Windows.UIElement3D.TouchLeave
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "从移动触摸屏输入时发生内部到此元素的边界之外。"
  remarks: "<a name=&quot;routedEventInfo_TouchLeave&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.TouchLeaveEvent>|  |路由策略 |直接 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -重写<xref:System.Windows.UIElement3D.OnTouchLeave%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnTouchLeave%2A> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchLeaveEvent>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchLeave;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchLeaveEvent
  id: TouchLeaveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchLeaveEvent
  nameWithType: UIElement3D.TouchLeaveEvent
  fullName: System.Windows.UIElement3D.TouchLeaveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.TouchLeave&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchLeaveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchMove
  id: TouchMove
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchMove
  nameWithType: UIElement3D.TouchMove
  fullName: System.Windows.UIElement3D.TouchMove
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "为指位于此元素的上方的手指在屏幕上移动时发生。"
  remarks: "<a name=&quot;routedEventInfo_TouchMove&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.TouchMoveEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewTouchMove>.</xref:System.Windows.UIElement3D.PreviewTouchMove> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchMoveEvent>      -重写<xref:System.Windows.UIElement3D.OnTouchMove%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnTouchMove%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchMove;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchMoveEvent
  id: TouchMoveEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchMoveEvent
  nameWithType: UIElement3D.TouchMoveEvent
  fullName: System.Windows.UIElement3D.TouchMoveEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.TouchMove&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchMoveEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchUp
  id: TouchUp
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchUp
  nameWithType: UIElement3D.TouchUp
  fullName: System.Windows.UIElement3D.TouchUp
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "手指显示在屏幕上方的手指位于此元素时发生。"
  remarks: "<a name=&quot;routedEventInfo_TouchUp&quot;></a># # 路由事件信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.TouchUpEvent>|  |路由策略 |冒泡 |  |委托 |<xref:System.EventHandler%601>的类型<xref:System.Windows.Input.TouchEventArgs>。 |     -相应的隧道事件是<xref:System.Windows.UIElement3D.PreviewTouchUp>.</xref:System.Windows.UIElement3D.PreviewTouchUp> </xref:System.Windows.Input.TouchEventArgs> </xref:System.EventHandler%601> </xref:System.Windows.UIElement3D.TouchUpEvent>      -重写<xref:System.Windows.UIElement3D.OnTouchUp%2A>实现处理此事件在派生类中的类。</xref:System.Windows.UIElement3D.OnTouchUp%2A>"
  syntax:
    content: public event EventHandler<System.Windows.Input.TouchEventArgs> TouchUp;
    return:
      type: System.EventHandler{System.Windows.Input.TouchEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.TouchUpEvent
  id: TouchUpEvent
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: TouchUpEvent
  nameWithType: UIElement3D.TouchUpEvent
  fullName: System.Windows.UIElement3D.TouchUpEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref href=&quot;System.Windows.UIElement3D.TouchUp&quot;></xref>路由的事件。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TouchUpEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.Visibility
  id: Visibility
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: Visibility
  nameWithType: UIElement3D.Visibility
  fullName: System.Windows.UIElement3D.Visibility
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取或设置[!INCLUDE[TLA#tla_ui](~/add/includes/tlasharptla-ui-md.md)]此元素的可见性。"
  remarks: "设置此属性将影响的值<xref:System.Windows.UIElement3D.IsVisible%2A>，这反过来可能会引起<xref:System.Windows.UIElement3D.IsVisibleChanged>事件。</xref:System.Windows.UIElement3D.IsVisibleChanged> </xref:System.Windows.UIElement3D.IsVisible%2A> 但是，<xref:System.Windows.UIElement3D.IsVisible%2A>具有其他因素的影响它，例如包含它的父项的可见性设置</xref:System.Windows.UIElement3D.IsVisible%2A>       元素可见性不<xref:System.Windows.Visibility>不参与输入的事件 （或命令） 和不会报告中的命中测试。</xref:System.Windows.Visibility>       可见性是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;dependencyPropertyInfo_Visibility&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.UIElement3D.VisibilityProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.UIElement3D.VisibilityProperty>"
  syntax:
    content: public System.Windows.Visibility Visibility { get; set; }
    return:
      type: System.Windows.Visibility
      description: "枚举的值。 默认值是<xref href=&quot;System.Windows.Visibility&quot;> </xref>。"
  overload: System.Windows.UIElement3D.Visibility*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.UIElement3D.VisibilityProperty
  id: VisibilityProperty
  parent: System.Windows.UIElement3D
  langs:
  - csharp
  name: VisibilityProperty
  nameWithType: UIElement3D.VisibilityProperty
  fullName: System.Windows.UIElement3D.VisibilityProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "标识<xref:System.Windows.UIElement3D.Visibility*>依赖项属性。</xref:System.Windows.UIElement3D.Visibility*>"
  remarks: "VisibilityProperty 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty VisibilityProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Media.Media3D.Visual3D
  isExternal: false
  name: System.Windows.Media.Media3D.Visual3D
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.UIElement3D.#ctor
  parent: System.Windows.UIElement3D
  isExternal: false
  name: UIElement3D()
  nameWithType: UIElement3D.UIElement3D()
  fullName: System.Windows.UIElement3D.UIElement3D()
- uid: System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate)
  nameWithType: UIElement3D.AddHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement3D.AddHandler(RoutedEvent,Delegate)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.UIElement3D.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddHandler(RoutedEvent,Delegate,Boolean)
  nameWithType: UIElement3D.AddHandler(RoutedEvent,Delegate,Boolean)
  fullName: System.Windows.UIElement3D.AddHandler(RoutedEvent,Delegate,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.UIElement3D.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddToEventRoute(EventRoute,RoutedEventArgs)
  nameWithType: UIElement3D.AddToEventRoute(EventRoute,RoutedEventArgs)
  fullName: System.Windows.UIElement3D.AddToEventRoute(EventRoute,RoutedEventArgs)
- uid: System.Windows.EventRoute
  parent: System.Windows
  isExternal: false
  name: EventRoute
  nameWithType: EventRoute
  fullName: System.Windows.EventRoute
- uid: System.Windows.RoutedEventArgs
  parent: System.Windows
  isExternal: false
  name: RoutedEventArgs
  nameWithType: RoutedEventArgs
  fullName: System.Windows.RoutedEventArgs
- uid: System.Windows.UIElement3D.AllowDrop
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement3D.AllowDrop
  fullName: System.Windows.UIElement3D.AllowDrop
- uid: System.Windows.UIElement3D.AllowDropProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AllowDropProperty
  nameWithType: UIElement3D.AllowDropProperty
  fullName: System.Windows.UIElement3D.AllowDropProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.UIElement3D.AreAnyTouchesCaptured
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement3D.AreAnyTouchesCaptured
  fullName: System.Windows.UIElement3D.AreAnyTouchesCaptured
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCapturedProperty
  nameWithType: UIElement3D.AreAnyTouchesCapturedProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedProperty
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithin
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCapturedWithinProperty
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithinProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesCapturedWithinProperty
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOver
  fullName: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesDirectlyOverProperty
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOverProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesDirectlyOverProperty
- uid: System.Windows.UIElement3D.AreAnyTouchesOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement3D.AreAnyTouchesOver
  fullName: System.Windows.UIElement3D.AreAnyTouchesOver
- uid: System.Windows.UIElement3D.AreAnyTouchesOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesOverProperty
  nameWithType: UIElement3D.AreAnyTouchesOverProperty
  fullName: System.Windows.UIElement3D.AreAnyTouchesOverProperty
- uid: System.Windows.UIElement3D.CaptureMouse
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureMouse()
  nameWithType: UIElement3D.CaptureMouse()
  fullName: System.Windows.UIElement3D.CaptureMouse()
- uid: System.Windows.UIElement3D.CaptureStylus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureStylus()
  nameWithType: UIElement3D.CaptureStylus()
  fullName: System.Windows.UIElement3D.CaptureStylus()
- uid: System.Windows.UIElement3D.CaptureTouch(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureTouch(TouchDevice)
  nameWithType: UIElement3D.CaptureTouch(TouchDevice)
  fullName: System.Windows.UIElement3D.CaptureTouch(TouchDevice)
- uid: System.Windows.Input.TouchDevice
  parent: System.Windows.Input
  isExternal: false
  name: TouchDevice
  nameWithType: TouchDevice
  fullName: System.Windows.Input.TouchDevice
- uid: System.Windows.UIElement3D.CommandBindings
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement3D.CommandBindings
  fullName: System.Windows.UIElement3D.CommandBindings
- uid: System.Windows.Input.CommandBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: CommandBindingCollection
  nameWithType: CommandBindingCollection
  fullName: System.Windows.Input.CommandBindingCollection
- uid: System.Windows.UIElement3D.DragEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragEnter
  nameWithType: UIElement3D.DragEnter
  fullName: System.Windows.UIElement3D.DragEnter
- uid: System.Windows.DragEventHandler
  parent: System.Windows
  isExternal: false
  name: DragEventHandler
  nameWithType: DragEventHandler
  fullName: System.Windows.DragEventHandler
- uid: System.Windows.UIElement3D.DragEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragEnterEvent
  nameWithType: UIElement3D.DragEnterEvent
  fullName: System.Windows.UIElement3D.DragEnterEvent
- uid: System.Windows.UIElement3D.DragLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragLeave
  nameWithType: UIElement3D.DragLeave
  fullName: System.Windows.UIElement3D.DragLeave
- uid: System.Windows.UIElement3D.DragLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragLeaveEvent
  nameWithType: UIElement3D.DragLeaveEvent
  fullName: System.Windows.UIElement3D.DragLeaveEvent
- uid: System.Windows.UIElement3D.DragOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragOver
  nameWithType: UIElement3D.DragOver
  fullName: System.Windows.UIElement3D.DragOver
- uid: System.Windows.UIElement3D.DragOverEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DragOverEvent
  nameWithType: UIElement3D.DragOverEvent
  fullName: System.Windows.UIElement3D.DragOverEvent
- uid: System.Windows.UIElement3D.Drop
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Drop
  nameWithType: UIElement3D.Drop
  fullName: System.Windows.UIElement3D.Drop
- uid: System.Windows.UIElement3D.DropEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: DropEvent
  nameWithType: UIElement3D.DropEvent
  fullName: System.Windows.UIElement3D.DropEvent
- uid: System.Windows.UIElement3D.Focus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Focus()
  nameWithType: UIElement3D.Focus()
  fullName: System.Windows.UIElement3D.Focus()
- uid: System.Windows.UIElement3D.Focusable
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Focusable
  nameWithType: UIElement3D.Focusable
  fullName: System.Windows.UIElement3D.Focusable
- uid: System.Windows.UIElement3D.FocusableChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: FocusableChanged
  nameWithType: UIElement3D.FocusableChanged
  fullName: System.Windows.UIElement3D.FocusableChanged
- uid: System.Windows.DependencyPropertyChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
- uid: System.Windows.UIElement3D.FocusableProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: FocusableProperty
  nameWithType: UIElement3D.FocusableProperty
  fullName: System.Windows.UIElement3D.FocusableProperty
- uid: System.Windows.UIElement3D.GetUIParentCore
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GetUIParentCore()
  nameWithType: UIElement3D.GetUIParentCore()
  fullName: System.Windows.UIElement3D.GetUIParentCore()
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.UIElement3D.GiveFeedback
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GiveFeedback
  nameWithType: UIElement3D.GiveFeedback
  fullName: System.Windows.UIElement3D.GiveFeedback
- uid: System.Windows.GiveFeedbackEventHandler
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventHandler
  nameWithType: GiveFeedbackEventHandler
  fullName: System.Windows.GiveFeedbackEventHandler
- uid: System.Windows.UIElement3D.GiveFeedbackEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GiveFeedbackEvent
  nameWithType: UIElement3D.GiveFeedbackEvent
  fullName: System.Windows.UIElement3D.GiveFeedbackEvent
- uid: System.Windows.UIElement3D.GotFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotFocus
  nameWithType: UIElement3D.GotFocus
  fullName: System.Windows.UIElement3D.GotFocus
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.UIElement3D.GotFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotFocusEvent
  nameWithType: UIElement3D.GotFocusEvent
  fullName: System.Windows.UIElement3D.GotFocusEvent
- uid: System.Windows.UIElement3D.GotKeyboardFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotKeyboardFocus
  nameWithType: UIElement3D.GotKeyboardFocus
  fullName: System.Windows.UIElement3D.GotKeyboardFocus
- uid: System.Windows.Input.KeyboardFocusChangedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventHandler
  nameWithType: KeyboardFocusChangedEventHandler
  fullName: System.Windows.Input.KeyboardFocusChangedEventHandler
- uid: System.Windows.UIElement3D.GotKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotKeyboardFocusEvent
  nameWithType: UIElement3D.GotKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.GotKeyboardFocusEvent
- uid: System.Windows.UIElement3D.GotMouseCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotMouseCapture
  nameWithType: UIElement3D.GotMouseCapture
  fullName: System.Windows.UIElement3D.GotMouseCapture
- uid: System.Windows.Input.MouseEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventHandler
  nameWithType: MouseEventHandler
  fullName: System.Windows.Input.MouseEventHandler
- uid: System.Windows.UIElement3D.GotMouseCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotMouseCaptureEvent
  nameWithType: UIElement3D.GotMouseCaptureEvent
  fullName: System.Windows.UIElement3D.GotMouseCaptureEvent
- uid: System.Windows.UIElement3D.GotStylusCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotStylusCapture
  nameWithType: UIElement3D.GotStylusCapture
  fullName: System.Windows.UIElement3D.GotStylusCapture
- uid: System.Windows.Input.StylusEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventHandler
  nameWithType: StylusEventHandler
  fullName: System.Windows.Input.StylusEventHandler
- uid: System.Windows.UIElement3D.GotStylusCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotStylusCaptureEvent
  nameWithType: UIElement3D.GotStylusCaptureEvent
  fullName: System.Windows.UIElement3D.GotStylusCaptureEvent
- uid: System.Windows.UIElement3D.GotTouchCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotTouchCapture
  nameWithType: UIElement3D.GotTouchCapture
  fullName: System.Windows.UIElement3D.GotTouchCapture
- uid: System.EventHandler{System.Windows.Input.TouchEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<TouchEventArgs>
  nameWithType: EventHandler<TouchEventArgs>
  fullName: System.EventHandler<System.Windows.Input.TouchEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Input.TouchEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchEventArgs
    name: TouchEventArgs
    nameWithType: TouchEventArgs
    fullName: TouchEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement3D.GotTouchCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GotTouchCaptureEvent
  nameWithType: UIElement3D.GotTouchCaptureEvent
  fullName: System.Windows.UIElement3D.GotTouchCaptureEvent
- uid: System.Windows.UIElement3D.InputBindings
  parent: System.Windows.UIElement3D
  isExternal: false
  name: InputBindings
  nameWithType: UIElement3D.InputBindings
  fullName: System.Windows.UIElement3D.InputBindings
- uid: System.Windows.Input.InputBindingCollection
  parent: System.Windows.Input
  isExternal: false
  name: InputBindingCollection
  nameWithType: InputBindingCollection
  fullName: System.Windows.Input.InputBindingCollection
- uid: System.Windows.UIElement3D.InvalidateModel
  parent: System.Windows.UIElement3D
  isExternal: false
  name: InvalidateModel()
  nameWithType: UIElement3D.InvalidateModel()
  fullName: System.Windows.UIElement3D.InvalidateModel()
- uid: System.Windows.UIElement3D.IsEnabled
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement3D.IsEnabled
  fullName: System.Windows.UIElement3D.IsEnabled
- uid: System.Windows.UIElement3D.IsEnabledChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabledChanged
  nameWithType: UIElement3D.IsEnabledChanged
  fullName: System.Windows.UIElement3D.IsEnabledChanged
- uid: System.Windows.UIElement3D.IsEnabledCore
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement3D.IsEnabledCore
  fullName: System.Windows.UIElement3D.IsEnabledCore
- uid: System.Windows.UIElement3D.IsEnabledProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabledProperty
  nameWithType: UIElement3D.IsEnabledProperty
  fullName: System.Windows.UIElement3D.IsEnabledProperty
- uid: System.Windows.UIElement3D.IsFocused
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsFocused
  nameWithType: UIElement3D.IsFocused
  fullName: System.Windows.UIElement3D.IsFocused
- uid: System.Windows.UIElement3D.IsFocusedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsFocusedProperty
  nameWithType: UIElement3D.IsFocusedProperty
  fullName: System.Windows.UIElement3D.IsFocusedProperty
- uid: System.Windows.UIElement3D.IsHitTestVisible
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement3D.IsHitTestVisible
  fullName: System.Windows.UIElement3D.IsHitTestVisible
- uid: System.Windows.UIElement3D.IsHitTestVisibleChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsHitTestVisibleChanged
  nameWithType: UIElement3D.IsHitTestVisibleChanged
  fullName: System.Windows.UIElement3D.IsHitTestVisibleChanged
- uid: System.Windows.UIElement3D.IsHitTestVisibleProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsHitTestVisibleProperty
  nameWithType: UIElement3D.IsHitTestVisibleProperty
  fullName: System.Windows.UIElement3D.IsHitTestVisibleProperty
- uid: System.Windows.UIElement3D.IsInputMethodEnabled
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement3D.IsInputMethodEnabled
  fullName: System.Windows.UIElement3D.IsInputMethodEnabled
- uid: System.Windows.UIElement3D.IsKeyboardFocused
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement3D.IsKeyboardFocused
  fullName: System.Windows.UIElement3D.IsKeyboardFocused
- uid: System.Windows.UIElement3D.IsKeyboardFocusedChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusedChanged
  nameWithType: UIElement3D.IsKeyboardFocusedChanged
  fullName: System.Windows.UIElement3D.IsKeyboardFocusedChanged
- uid: System.Windows.UIElement3D.IsKeyboardFocusedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusedProperty
  nameWithType: UIElement3D.IsKeyboardFocusedProperty
  fullName: System.Windows.UIElement3D.IsKeyboardFocusedProperty
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement3D.IsKeyboardFocusWithin
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithin
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusWithinChanged
  nameWithType: UIElement3D.IsKeyboardFocusWithinChanged
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusWithinProperty
  nameWithType: UIElement3D.IsKeyboardFocusWithinProperty
  fullName: System.Windows.UIElement3D.IsKeyboardFocusWithinProperty
- uid: System.Windows.UIElement3D.IsMouseCaptured
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement3D.IsMouseCaptured
  fullName: System.Windows.UIElement3D.IsMouseCaptured
- uid: System.Windows.UIElement3D.IsMouseCapturedChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCapturedChanged
  nameWithType: UIElement3D.IsMouseCapturedChanged
  fullName: System.Windows.UIElement3D.IsMouseCapturedChanged
- uid: System.Windows.UIElement3D.IsMouseCapturedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCapturedProperty
  nameWithType: UIElement3D.IsMouseCapturedProperty
  fullName: System.Windows.UIElement3D.IsMouseCapturedProperty
- uid: System.Windows.UIElement3D.IsMouseCaptureWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement3D.IsMouseCaptureWithin
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithin
- uid: System.Windows.UIElement3D.IsMouseCaptureWithinChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptureWithinChanged
  nameWithType: UIElement3D.IsMouseCaptureWithinChanged
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithinChanged
- uid: System.Windows.UIElement3D.IsMouseCaptureWithinProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptureWithinProperty
  nameWithType: UIElement3D.IsMouseCaptureWithinProperty
  fullName: System.Windows.UIElement3D.IsMouseCaptureWithinProperty
- uid: System.Windows.UIElement3D.IsMouseDirectlyOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement3D.IsMouseDirectlyOver
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOver
- uid: System.Windows.UIElement3D.IsMouseDirectlyOverChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseDirectlyOverChanged
  nameWithType: UIElement3D.IsMouseDirectlyOverChanged
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOverChanged
- uid: System.Windows.UIElement3D.IsMouseDirectlyOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseDirectlyOverProperty
  nameWithType: UIElement3D.IsMouseDirectlyOverProperty
  fullName: System.Windows.UIElement3D.IsMouseDirectlyOverProperty
- uid: System.Windows.UIElement3D.IsMouseOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement3D.IsMouseOver
  fullName: System.Windows.UIElement3D.IsMouseOver
- uid: System.Windows.UIElement3D.IsMouseOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseOverProperty
  nameWithType: UIElement3D.IsMouseOverProperty
  fullName: System.Windows.UIElement3D.IsMouseOverProperty
- uid: System.Windows.UIElement3D.IsStylusCaptured
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement3D.IsStylusCaptured
  fullName: System.Windows.UIElement3D.IsStylusCaptured
- uid: System.Windows.UIElement3D.IsStylusCapturedChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCapturedChanged
  nameWithType: UIElement3D.IsStylusCapturedChanged
  fullName: System.Windows.UIElement3D.IsStylusCapturedChanged
- uid: System.Windows.UIElement3D.IsStylusCapturedProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCapturedProperty
  nameWithType: UIElement3D.IsStylusCapturedProperty
  fullName: System.Windows.UIElement3D.IsStylusCapturedProperty
- uid: System.Windows.UIElement3D.IsStylusCaptureWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement3D.IsStylusCaptureWithin
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithin
- uid: System.Windows.UIElement3D.IsStylusCaptureWithinChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptureWithinChanged
  nameWithType: UIElement3D.IsStylusCaptureWithinChanged
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithinChanged
- uid: System.Windows.UIElement3D.IsStylusCaptureWithinProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptureWithinProperty
  nameWithType: UIElement3D.IsStylusCaptureWithinProperty
  fullName: System.Windows.UIElement3D.IsStylusCaptureWithinProperty
- uid: System.Windows.UIElement3D.IsStylusDirectlyOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement3D.IsStylusDirectlyOver
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOver
- uid: System.Windows.UIElement3D.IsStylusDirectlyOverChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusDirectlyOverChanged
  nameWithType: UIElement3D.IsStylusDirectlyOverChanged
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOverChanged
- uid: System.Windows.UIElement3D.IsStylusDirectlyOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusDirectlyOverProperty
  nameWithType: UIElement3D.IsStylusDirectlyOverProperty
  fullName: System.Windows.UIElement3D.IsStylusDirectlyOverProperty
- uid: System.Windows.UIElement3D.IsStylusOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement3D.IsStylusOver
  fullName: System.Windows.UIElement3D.IsStylusOver
- uid: System.Windows.UIElement3D.IsStylusOverProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusOverProperty
  nameWithType: UIElement3D.IsStylusOverProperty
  fullName: System.Windows.UIElement3D.IsStylusOverProperty
- uid: System.Windows.UIElement3D.IsVisible
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsVisible
  nameWithType: UIElement3D.IsVisible
  fullName: System.Windows.UIElement3D.IsVisible
- uid: System.Windows.UIElement3D.IsVisibleChanged
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsVisibleChanged
  nameWithType: UIElement3D.IsVisibleChanged
  fullName: System.Windows.UIElement3D.IsVisibleChanged
- uid: System.Windows.UIElement3D.IsVisibleProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsVisibleProperty
  nameWithType: UIElement3D.IsVisibleProperty
  fullName: System.Windows.UIElement3D.IsVisibleProperty
- uid: System.Windows.UIElement3D.KeyDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: KeyDown
  nameWithType: UIElement3D.KeyDown
  fullName: System.Windows.UIElement3D.KeyDown
- uid: System.Windows.Input.KeyEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventHandler
  nameWithType: KeyEventHandler
  fullName: System.Windows.Input.KeyEventHandler
- uid: System.Windows.UIElement3D.KeyDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: KeyDownEvent
  nameWithType: UIElement3D.KeyDownEvent
  fullName: System.Windows.UIElement3D.KeyDownEvent
- uid: System.Windows.UIElement3D.KeyUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: KeyUp
  nameWithType: UIElement3D.KeyUp
  fullName: System.Windows.UIElement3D.KeyUp
- uid: System.Windows.UIElement3D.KeyUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: KeyUpEvent
  nameWithType: UIElement3D.KeyUpEvent
  fullName: System.Windows.UIElement3D.KeyUpEvent
- uid: System.Windows.UIElement3D.LostFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostFocus
  nameWithType: UIElement3D.LostFocus
  fullName: System.Windows.UIElement3D.LostFocus
- uid: System.Windows.UIElement3D.LostFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostFocusEvent
  nameWithType: UIElement3D.LostFocusEvent
  fullName: System.Windows.UIElement3D.LostFocusEvent
- uid: System.Windows.UIElement3D.LostKeyboardFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostKeyboardFocus
  nameWithType: UIElement3D.LostKeyboardFocus
  fullName: System.Windows.UIElement3D.LostKeyboardFocus
- uid: System.Windows.UIElement3D.LostKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostKeyboardFocusEvent
  nameWithType: UIElement3D.LostKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.LostKeyboardFocusEvent
- uid: System.Windows.UIElement3D.LostMouseCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostMouseCapture
  nameWithType: UIElement3D.LostMouseCapture
  fullName: System.Windows.UIElement3D.LostMouseCapture
- uid: System.Windows.UIElement3D.LostMouseCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostMouseCaptureEvent
  nameWithType: UIElement3D.LostMouseCaptureEvent
  fullName: System.Windows.UIElement3D.LostMouseCaptureEvent
- uid: System.Windows.UIElement3D.LostStylusCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostStylusCapture
  nameWithType: UIElement3D.LostStylusCapture
  fullName: System.Windows.UIElement3D.LostStylusCapture
- uid: System.Windows.UIElement3D.LostStylusCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostStylusCaptureEvent
  nameWithType: UIElement3D.LostStylusCaptureEvent
  fullName: System.Windows.UIElement3D.LostStylusCaptureEvent
- uid: System.Windows.UIElement3D.LostTouchCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostTouchCapture
  nameWithType: UIElement3D.LostTouchCapture
  fullName: System.Windows.UIElement3D.LostTouchCapture
- uid: System.Windows.UIElement3D.LostTouchCaptureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: LostTouchCaptureEvent
  nameWithType: UIElement3D.LostTouchCaptureEvent
  fullName: System.Windows.UIElement3D.LostTouchCaptureEvent
- uid: System.Windows.UIElement3D.MouseDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseDown
  nameWithType: UIElement3D.MouseDown
  fullName: System.Windows.UIElement3D.MouseDown
- uid: System.Windows.Input.MouseButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventHandler
  nameWithType: MouseButtonEventHandler
  fullName: System.Windows.Input.MouseButtonEventHandler
- uid: System.Windows.UIElement3D.MouseDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseDownEvent
  nameWithType: UIElement3D.MouseDownEvent
  fullName: System.Windows.UIElement3D.MouseDownEvent
- uid: System.Windows.UIElement3D.MouseEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseEnter
  nameWithType: UIElement3D.MouseEnter
  fullName: System.Windows.UIElement3D.MouseEnter
- uid: System.Windows.UIElement3D.MouseEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseEnterEvent
  nameWithType: UIElement3D.MouseEnterEvent
  fullName: System.Windows.UIElement3D.MouseEnterEvent
- uid: System.Windows.UIElement3D.MouseLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeave
  nameWithType: UIElement3D.MouseLeave
  fullName: System.Windows.UIElement3D.MouseLeave
- uid: System.Windows.UIElement3D.MouseLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeaveEvent
  nameWithType: UIElement3D.MouseLeaveEvent
  fullName: System.Windows.UIElement3D.MouseLeaveEvent
- uid: System.Windows.UIElement3D.MouseLeftButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeftButtonDown
  nameWithType: UIElement3D.MouseLeftButtonDown
  fullName: System.Windows.UIElement3D.MouseLeftButtonDown
- uid: System.Windows.UIElement3D.MouseLeftButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeftButtonDownEvent
  nameWithType: UIElement3D.MouseLeftButtonDownEvent
  fullName: System.Windows.UIElement3D.MouseLeftButtonDownEvent
- uid: System.Windows.UIElement3D.MouseLeftButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeftButtonUp
  nameWithType: UIElement3D.MouseLeftButtonUp
  fullName: System.Windows.UIElement3D.MouseLeftButtonUp
- uid: System.Windows.UIElement3D.MouseLeftButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseLeftButtonUpEvent
  nameWithType: UIElement3D.MouseLeftButtonUpEvent
  fullName: System.Windows.UIElement3D.MouseLeftButtonUpEvent
- uid: System.Windows.UIElement3D.MouseMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseMove
  nameWithType: UIElement3D.MouseMove
  fullName: System.Windows.UIElement3D.MouseMove
- uid: System.Windows.UIElement3D.MouseMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseMoveEvent
  nameWithType: UIElement3D.MouseMoveEvent
  fullName: System.Windows.UIElement3D.MouseMoveEvent
- uid: System.Windows.UIElement3D.MouseRightButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseRightButtonDown
  nameWithType: UIElement3D.MouseRightButtonDown
  fullName: System.Windows.UIElement3D.MouseRightButtonDown
- uid: System.Windows.UIElement3D.MouseRightButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseRightButtonDownEvent
  nameWithType: UIElement3D.MouseRightButtonDownEvent
  fullName: System.Windows.UIElement3D.MouseRightButtonDownEvent
- uid: System.Windows.UIElement3D.MouseRightButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseRightButtonUp
  nameWithType: UIElement3D.MouseRightButtonUp
  fullName: System.Windows.UIElement3D.MouseRightButtonUp
- uid: System.Windows.UIElement3D.MouseRightButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseRightButtonUpEvent
  nameWithType: UIElement3D.MouseRightButtonUpEvent
  fullName: System.Windows.UIElement3D.MouseRightButtonUpEvent
- uid: System.Windows.UIElement3D.MouseUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseUp
  nameWithType: UIElement3D.MouseUp
  fullName: System.Windows.UIElement3D.MouseUp
- uid: System.Windows.UIElement3D.MouseUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseUpEvent
  nameWithType: UIElement3D.MouseUpEvent
  fullName: System.Windows.UIElement3D.MouseUpEvent
- uid: System.Windows.UIElement3D.MouseWheel
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseWheel
  nameWithType: UIElement3D.MouseWheel
  fullName: System.Windows.UIElement3D.MouseWheel
- uid: System.Windows.Input.MouseWheelEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventHandler
  nameWithType: MouseWheelEventHandler
  fullName: System.Windows.Input.MouseWheelEventHandler
- uid: System.Windows.UIElement3D.MouseWheelEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MouseWheelEvent
  nameWithType: UIElement3D.MouseWheelEvent
  fullName: System.Windows.UIElement3D.MouseWheelEvent
- uid: System.Windows.UIElement3D.MoveFocus(System.Windows.Input.TraversalRequest)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MoveFocus(TraversalRequest)
  nameWithType: UIElement3D.MoveFocus(TraversalRequest)
  fullName: System.Windows.UIElement3D.MoveFocus(TraversalRequest)
- uid: System.Windows.Input.TraversalRequest
  parent: System.Windows.Input
  isExternal: false
  name: TraversalRequest
  nameWithType: TraversalRequest
  fullName: System.Windows.Input.TraversalRequest
- uid: System.Windows.UIElement3D.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnAccessKey(AccessKeyEventArgs)
  nameWithType: UIElement3D.OnAccessKey(AccessKeyEventArgs)
  fullName: System.Windows.UIElement3D.OnAccessKey(AccessKeyEventArgs)
- uid: System.Windows.Input.AccessKeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: AccessKeyEventArgs
  nameWithType: AccessKeyEventArgs
  fullName: System.Windows.Input.AccessKeyEventArgs
- uid: System.Windows.UIElement3D.OnCreateAutomationPeer
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: UIElement3D.OnCreateAutomationPeer()
  fullName: System.Windows.UIElement3D.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.UIElement3D.OnDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragEnter(DragEventArgs)
  nameWithType: UIElement3D.OnDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragEnter(DragEventArgs)
- uid: System.Windows.DragEventArgs
  parent: System.Windows
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.DragEventArgs
- uid: System.Windows.UIElement3D.OnDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragLeave(DragEventArgs)
  nameWithType: UIElement3D.OnDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragLeave(DragEventArgs)
- uid: System.Windows.UIElement3D.OnDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragOver(DragEventArgs)
  nameWithType: UIElement3D.OnDragOver(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDragOver(DragEventArgs)
- uid: System.Windows.UIElement3D.OnDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDrop(DragEventArgs)
  nameWithType: UIElement3D.OnDrop(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnDrop(DragEventArgs)
- uid: System.Windows.UIElement3D.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement3D.OnGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement3D.OnGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.GiveFeedbackEventArgs
  parent: System.Windows
  isExternal: false
  name: GiveFeedbackEventArgs
  nameWithType: GiveFeedbackEventArgs
  fullName: System.Windows.GiveFeedbackEventArgs
- uid: System.Windows.UIElement3D.OnGotFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotFocus(RoutedEventArgs)
  nameWithType: UIElement3D.OnGotFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.OnGotFocus(RoutedEventArgs)
- uid: System.Windows.UIElement3D.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.Input.KeyboardFocusChangedEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyboardFocusChangedEventArgs
  nameWithType: KeyboardFocusChangedEventArgs
  fullName: System.Windows.Input.KeyboardFocusChangedEventArgs
- uid: System.Windows.UIElement3D.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotMouseCapture(MouseEventArgs)
  nameWithType: UIElement3D.OnGotMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnGotMouseCapture(MouseEventArgs)
- uid: System.Windows.Input.MouseEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseEventArgs
  nameWithType: MouseEventArgs
  fullName: System.Windows.Input.MouseEventArgs
- uid: System.Windows.UIElement3D.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotStylusCapture(StylusEventArgs)
  nameWithType: UIElement3D.OnGotStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnGotStylusCapture(StylusEventArgs)
- uid: System.Windows.Input.StylusEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusEventArgs
  nameWithType: StylusEventArgs
  fullName: System.Windows.Input.StylusEventArgs
- uid: System.Windows.UIElement3D.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotTouchCapture(TouchEventArgs)
  nameWithType: UIElement3D.OnGotTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnGotTouchCapture(TouchEventArgs)
- uid: System.Windows.Input.TouchEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TouchEventArgs
  nameWithType: TouchEventArgs
  fullName: System.Windows.Input.TouchEventArgs
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.DependencyPropertyChangedEventArgs
  parent: System.Windows
  isExternal: false
  name: DependencyPropertyChangedEventArgs
  nameWithType: DependencyPropertyChangedEventArgs
  fullName: System.Windows.DependencyPropertyChangedEventArgs
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusCapturedChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  nameWithType: UIElement3D.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged(DependencyPropertyChangedEventArgs)
- uid: System.Windows.UIElement3D.OnKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnKeyDown(KeyEventArgs)
  nameWithType: UIElement3D.OnKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnKeyDown(KeyEventArgs)
- uid: System.Windows.Input.KeyEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: KeyEventArgs
  nameWithType: KeyEventArgs
  fullName: System.Windows.Input.KeyEventArgs
- uid: System.Windows.UIElement3D.OnKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnKeyUp(KeyEventArgs)
  nameWithType: UIElement3D.OnKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement3D.OnLostFocus(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostFocus(RoutedEventArgs)
  nameWithType: UIElement3D.OnLostFocus(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.OnLostFocus(RoutedEventArgs)
- uid: System.Windows.UIElement3D.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement3D.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostMouseCapture(MouseEventArgs)
  nameWithType: UIElement3D.OnLostMouseCapture(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnLostMouseCapture(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostStylusCapture(StylusEventArgs)
  nameWithType: UIElement3D.OnLostStylusCapture(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnLostStylusCapture(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostTouchCapture(TouchEventArgs)
  nameWithType: UIElement3D.OnLostTouchCapture(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnLostTouchCapture(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseDown(MouseButtonEventArgs)
- uid: System.Windows.Input.MouseButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseButtonEventArgs
  nameWithType: MouseButtonEventArgs
  fullName: System.Windows.Input.MouseButtonEventArgs
- uid: System.Windows.UIElement3D.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseEnter(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseEnter(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseEnter(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeave(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseLeave(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeave(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseMove(MouseEventArgs)
  nameWithType: UIElement3D.OnMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement3D.OnMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement3D.OnMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.Input.MouseWheelEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: MouseWheelEventArgs
  nameWithType: MouseWheelEventArgs
  fullName: System.Windows.Input.MouseWheelEventArgs
- uid: System.Windows.UIElement3D.OnPreviewDragEnter(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragEnter(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragEnter(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragEnter(DragEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewDragLeave(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragLeave(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragLeave(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragLeave(DragEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewDragOver(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragOver(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDragOver(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDragOver(DragEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewDrop(System.Windows.DragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDrop(DragEventArgs)
  nameWithType: UIElement3D.OnPreviewDrop(DragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewDrop(DragEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  nameWithType: UIElement3D.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewGiveFeedback(GiveFeedbackEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewKeyDown(KeyEventArgs)
  nameWithType: UIElement3D.OnPreviewKeyDown(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewKeyDown(KeyEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewKeyUp(KeyEventArgs)
  nameWithType: UIElement3D.OnPreviewKeyUp(KeyEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewKeyUp(KeyEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  nameWithType: UIElement3D.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus(KeyboardFocusChangedEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseMove(MouseEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseMove(MouseEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseMove(MouseEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseUp(MouseButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseUp(MouseButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseUp(MouseButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseWheel(MouseWheelEventArgs)
  nameWithType: UIElement3D.OnPreviewMouseWheel(MouseWheelEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewMouseWheel(MouseWheelEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement3D.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.QueryContinueDragEventArgs
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventArgs
  nameWithType: QueryContinueDragEventArgs
  fullName: System.Windows.QueryContinueDragEventArgs
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.Input.StylusButtonEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventArgs
  nameWithType: StylusButtonEventArgs
  fullName: System.Windows.Input.StylusButtonEventArgs
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusDown(StylusDownEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusDown(StylusDownEventArgs)
- uid: System.Windows.Input.StylusDownEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventArgs
  nameWithType: StylusDownEventArgs
  fullName: System.Windows.Input.StylusDownEventArgs
- uid: System.Windows.UIElement3D.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusInRange(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusMove(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.Input.StylusSystemGestureEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventArgs
  nameWithType: StylusSystemGestureEventArgs
  fullName: System.Windows.Input.StylusSystemGestureEventArgs
- uid: System.Windows.UIElement3D.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusUp(StylusEventArgs)
  nameWithType: UIElement3D.OnPreviewStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTextInput(TextCompositionEventArgs)
  nameWithType: UIElement3D.OnPreviewTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTextInput(TextCompositionEventArgs)
- uid: System.Windows.Input.TextCompositionEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventArgs
  nameWithType: TextCompositionEventArgs
  fullName: System.Windows.Input.TextCompositionEventArgs
- uid: System.Windows.UIElement3D.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchDown(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchMove(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchUp(TouchEventArgs)
  nameWithType: UIElement3D.OnPreviewTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnPreviewTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnQueryContinueDrag(QueryContinueDragEventArgs)
  nameWithType: UIElement3D.OnQueryContinueDrag(QueryContinueDragEventArgs)
  fullName: System.Windows.UIElement3D.OnQueryContinueDrag(QueryContinueDragEventArgs)
- uid: System.Windows.UIElement3D.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnQueryCursor(QueryCursorEventArgs)
  nameWithType: UIElement3D.OnQueryCursor(QueryCursorEventArgs)
  fullName: System.Windows.UIElement3D.OnQueryCursor(QueryCursorEventArgs)
- uid: System.Windows.Input.QueryCursorEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventArgs
  nameWithType: QueryCursorEventArgs
  fullName: System.Windows.Input.QueryCursorEventArgs
- uid: System.Windows.UIElement3D.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusButtonDown(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnStylusButtonDown(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusButtonDown(StylusButtonEventArgs)
- uid: System.Windows.UIElement3D.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusButtonUp(StylusButtonEventArgs)
  nameWithType: UIElement3D.OnStylusButtonUp(StylusButtonEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusButtonUp(StylusButtonEventArgs)
- uid: System.Windows.UIElement3D.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusDown(StylusDownEventArgs)
  nameWithType: UIElement3D.OnStylusDown(StylusDownEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusDown(StylusDownEventArgs)
- uid: System.Windows.UIElement3D.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusEnter(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusEnter(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusEnter(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusInAirMove(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusInAirMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusInAirMove(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusInRange(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusInRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusInRange(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusLeave(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusLeave(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusLeave(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusMove(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusMove(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusMove(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusMove(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusOutOfRange(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusOutOfRange(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusOutOfRange(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusSystemGesture(StylusSystemGestureEventArgs)
  nameWithType: UIElement3D.OnStylusSystemGesture(StylusSystemGestureEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusSystemGesture(StylusSystemGestureEventArgs)
- uid: System.Windows.UIElement3D.OnStylusUp(System.Windows.Input.StylusEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusUp(StylusEventArgs)
  nameWithType: UIElement3D.OnStylusUp(StylusEventArgs)
  fullName: System.Windows.UIElement3D.OnStylusUp(StylusEventArgs)
- uid: System.Windows.UIElement3D.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTextInput(TextCompositionEventArgs)
  nameWithType: UIElement3D.OnTextInput(TextCompositionEventArgs)
  fullName: System.Windows.UIElement3D.OnTextInput(TextCompositionEventArgs)
- uid: System.Windows.UIElement3D.OnTouchDown(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchDown(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchDown(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchDown(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchEnter(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchEnter(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchEnter(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchLeave(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchLeave(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchLeave(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnTouchMove(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchMove(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchMove(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchMove(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnTouchUp(System.Windows.Input.TouchEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchUp(TouchEventArgs)
  nameWithType: UIElement3D.OnTouchUp(TouchEventArgs)
  fullName: System.Windows.UIElement3D.OnTouchUp(TouchEventArgs)
- uid: System.Windows.UIElement3D.OnUpdateModel
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnUpdateModel()
  nameWithType: UIElement3D.OnUpdateModel()
  fullName: System.Windows.UIElement3D.OnUpdateModel()
- uid: System.Windows.UIElement3D.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: UIElement3D.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.UIElement3D.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.UIElement3D.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PredictFocus(FocusNavigationDirection)
  nameWithType: UIElement3D.PredictFocus(FocusNavigationDirection)
  fullName: System.Windows.UIElement3D.PredictFocus(FocusNavigationDirection)
- uid: System.Windows.Input.FocusNavigationDirection
  parent: System.Windows.Input
  isExternal: false
  name: FocusNavigationDirection
  nameWithType: FocusNavigationDirection
  fullName: System.Windows.Input.FocusNavigationDirection
- uid: System.Windows.UIElement3D.PreviewDragEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragEnter
  nameWithType: UIElement3D.PreviewDragEnter
  fullName: System.Windows.UIElement3D.PreviewDragEnter
- uid: System.Windows.UIElement3D.PreviewDragEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragEnterEvent
  nameWithType: UIElement3D.PreviewDragEnterEvent
  fullName: System.Windows.UIElement3D.PreviewDragEnterEvent
- uid: System.Windows.UIElement3D.PreviewDragLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragLeave
  nameWithType: UIElement3D.PreviewDragLeave
  fullName: System.Windows.UIElement3D.PreviewDragLeave
- uid: System.Windows.UIElement3D.PreviewDragLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragLeaveEvent
  nameWithType: UIElement3D.PreviewDragLeaveEvent
  fullName: System.Windows.UIElement3D.PreviewDragLeaveEvent
- uid: System.Windows.UIElement3D.PreviewDragOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragOver
  nameWithType: UIElement3D.PreviewDragOver
  fullName: System.Windows.UIElement3D.PreviewDragOver
- uid: System.Windows.UIElement3D.PreviewDragOverEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDragOverEvent
  nameWithType: UIElement3D.PreviewDragOverEvent
  fullName: System.Windows.UIElement3D.PreviewDragOverEvent
- uid: System.Windows.UIElement3D.PreviewDrop
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDrop
  nameWithType: UIElement3D.PreviewDrop
  fullName: System.Windows.UIElement3D.PreviewDrop
- uid: System.Windows.UIElement3D.PreviewDropEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewDropEvent
  nameWithType: UIElement3D.PreviewDropEvent
  fullName: System.Windows.UIElement3D.PreviewDropEvent
- uid: System.Windows.UIElement3D.PreviewGiveFeedback
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewGiveFeedback
  nameWithType: UIElement3D.PreviewGiveFeedback
  fullName: System.Windows.UIElement3D.PreviewGiveFeedback
- uid: System.Windows.UIElement3D.PreviewGiveFeedbackEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewGiveFeedbackEvent
  nameWithType: UIElement3D.PreviewGiveFeedbackEvent
  fullName: System.Windows.UIElement3D.PreviewGiveFeedbackEvent
- uid: System.Windows.UIElement3D.PreviewGotKeyboardFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewGotKeyboardFocus
  nameWithType: UIElement3D.PreviewGotKeyboardFocus
  fullName: System.Windows.UIElement3D.PreviewGotKeyboardFocus
- uid: System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewGotKeyboardFocusEvent
  nameWithType: UIElement3D.PreviewGotKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.PreviewGotKeyboardFocusEvent
- uid: System.Windows.UIElement3D.PreviewKeyDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewKeyDown
  nameWithType: UIElement3D.PreviewKeyDown
  fullName: System.Windows.UIElement3D.PreviewKeyDown
- uid: System.Windows.UIElement3D.PreviewKeyDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewKeyDownEvent
  nameWithType: UIElement3D.PreviewKeyDownEvent
  fullName: System.Windows.UIElement3D.PreviewKeyDownEvent
- uid: System.Windows.UIElement3D.PreviewKeyUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewKeyUp
  nameWithType: UIElement3D.PreviewKeyUp
  fullName: System.Windows.UIElement3D.PreviewKeyUp
- uid: System.Windows.UIElement3D.PreviewKeyUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewKeyUpEvent
  nameWithType: UIElement3D.PreviewKeyUpEvent
  fullName: System.Windows.UIElement3D.PreviewKeyUpEvent
- uid: System.Windows.UIElement3D.PreviewLostKeyboardFocus
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewLostKeyboardFocus
  nameWithType: UIElement3D.PreviewLostKeyboardFocus
  fullName: System.Windows.UIElement3D.PreviewLostKeyboardFocus
- uid: System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewLostKeyboardFocusEvent
  nameWithType: UIElement3D.PreviewLostKeyboardFocusEvent
  fullName: System.Windows.UIElement3D.PreviewLostKeyboardFocusEvent
- uid: System.Windows.UIElement3D.PreviewMouseDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseDown
  nameWithType: UIElement3D.PreviewMouseDown
  fullName: System.Windows.UIElement3D.PreviewMouseDown
- uid: System.Windows.UIElement3D.PreviewMouseDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseDownEvent
  nameWithType: UIElement3D.PreviewMouseDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseDownEvent
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseLeftButtonDown
  nameWithType: UIElement3D.PreviewMouseLeftButtonDown
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonDown
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseLeftButtonDownEvent
  nameWithType: UIElement3D.PreviewMouseLeftButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonDownEvent
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseLeftButtonUp
  nameWithType: UIElement3D.PreviewMouseLeftButtonUp
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonUp
- uid: System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseLeftButtonUpEvent
  nameWithType: UIElement3D.PreviewMouseLeftButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseLeftButtonUpEvent
- uid: System.Windows.UIElement3D.PreviewMouseMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseMove
  nameWithType: UIElement3D.PreviewMouseMove
  fullName: System.Windows.UIElement3D.PreviewMouseMove
- uid: System.Windows.UIElement3D.PreviewMouseMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseMoveEvent
  nameWithType: UIElement3D.PreviewMouseMoveEvent
  fullName: System.Windows.UIElement3D.PreviewMouseMoveEvent
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseRightButtonDown
  nameWithType: UIElement3D.PreviewMouseRightButtonDown
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonDown
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseRightButtonDownEvent
  nameWithType: UIElement3D.PreviewMouseRightButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonDownEvent
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseRightButtonUp
  nameWithType: UIElement3D.PreviewMouseRightButtonUp
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonUp
- uid: System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseRightButtonUpEvent
  nameWithType: UIElement3D.PreviewMouseRightButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseRightButtonUpEvent
- uid: System.Windows.UIElement3D.PreviewMouseUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseUp
  nameWithType: UIElement3D.PreviewMouseUp
  fullName: System.Windows.UIElement3D.PreviewMouseUp
- uid: System.Windows.UIElement3D.PreviewMouseUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseUpEvent
  nameWithType: UIElement3D.PreviewMouseUpEvent
  fullName: System.Windows.UIElement3D.PreviewMouseUpEvent
- uid: System.Windows.UIElement3D.PreviewMouseWheel
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseWheel
  nameWithType: UIElement3D.PreviewMouseWheel
  fullName: System.Windows.UIElement3D.PreviewMouseWheel
- uid: System.Windows.UIElement3D.PreviewMouseWheelEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewMouseWheelEvent
  nameWithType: UIElement3D.PreviewMouseWheelEvent
  fullName: System.Windows.UIElement3D.PreviewMouseWheelEvent
- uid: System.Windows.UIElement3D.PreviewQueryContinueDrag
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewQueryContinueDrag
  nameWithType: UIElement3D.PreviewQueryContinueDrag
  fullName: System.Windows.UIElement3D.PreviewQueryContinueDrag
- uid: System.Windows.QueryContinueDragEventHandler
  parent: System.Windows
  isExternal: false
  name: QueryContinueDragEventHandler
  nameWithType: QueryContinueDragEventHandler
  fullName: System.Windows.QueryContinueDragEventHandler
- uid: System.Windows.UIElement3D.PreviewQueryContinueDragEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewQueryContinueDragEvent
  nameWithType: UIElement3D.PreviewQueryContinueDragEvent
  fullName: System.Windows.UIElement3D.PreviewQueryContinueDragEvent
- uid: System.Windows.UIElement3D.PreviewStylusButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusButtonDown
  nameWithType: UIElement3D.PreviewStylusButtonDown
  fullName: System.Windows.UIElement3D.PreviewStylusButtonDown
- uid: System.Windows.Input.StylusButtonEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusButtonEventHandler
  nameWithType: StylusButtonEventHandler
  fullName: System.Windows.Input.StylusButtonEventHandler
- uid: System.Windows.UIElement3D.PreviewStylusButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusButtonDownEvent
  nameWithType: UIElement3D.PreviewStylusButtonDownEvent
  fullName: System.Windows.UIElement3D.PreviewStylusButtonDownEvent
- uid: System.Windows.UIElement3D.PreviewStylusButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusButtonUp
  nameWithType: UIElement3D.PreviewStylusButtonUp
  fullName: System.Windows.UIElement3D.PreviewStylusButtonUp
- uid: System.Windows.UIElement3D.PreviewStylusButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusButtonUpEvent
  nameWithType: UIElement3D.PreviewStylusButtonUpEvent
  fullName: System.Windows.UIElement3D.PreviewStylusButtonUpEvent
- uid: System.Windows.UIElement3D.PreviewStylusDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusDown
  nameWithType: UIElement3D.PreviewStylusDown
  fullName: System.Windows.UIElement3D.PreviewStylusDown
- uid: System.Windows.Input.StylusDownEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusDownEventHandler
  nameWithType: StylusDownEventHandler
  fullName: System.Windows.Input.StylusDownEventHandler
- uid: System.Windows.UIElement3D.PreviewStylusDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusDownEvent
  nameWithType: UIElement3D.PreviewStylusDownEvent
  fullName: System.Windows.UIElement3D.PreviewStylusDownEvent
- uid: System.Windows.UIElement3D.PreviewStylusInAirMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusInAirMove
  nameWithType: UIElement3D.PreviewStylusInAirMove
  fullName: System.Windows.UIElement3D.PreviewStylusInAirMove
- uid: System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusInAirMoveEvent
  nameWithType: UIElement3D.PreviewStylusInAirMoveEvent
  fullName: System.Windows.UIElement3D.PreviewStylusInAirMoveEvent
- uid: System.Windows.UIElement3D.PreviewStylusInRange
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusInRange
  nameWithType: UIElement3D.PreviewStylusInRange
  fullName: System.Windows.UIElement3D.PreviewStylusInRange
- uid: System.Windows.UIElement3D.PreviewStylusInRangeEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusInRangeEvent
  nameWithType: UIElement3D.PreviewStylusInRangeEvent
  fullName: System.Windows.UIElement3D.PreviewStylusInRangeEvent
- uid: System.Windows.UIElement3D.PreviewStylusMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusMove
  nameWithType: UIElement3D.PreviewStylusMove
  fullName: System.Windows.UIElement3D.PreviewStylusMove
- uid: System.Windows.UIElement3D.PreviewStylusMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusMoveEvent
  nameWithType: UIElement3D.PreviewStylusMoveEvent
  fullName: System.Windows.UIElement3D.PreviewStylusMoveEvent
- uid: System.Windows.UIElement3D.PreviewStylusOutOfRange
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusOutOfRange
  nameWithType: UIElement3D.PreviewStylusOutOfRange
  fullName: System.Windows.UIElement3D.PreviewStylusOutOfRange
- uid: System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusOutOfRangeEvent
  nameWithType: UIElement3D.PreviewStylusOutOfRangeEvent
  fullName: System.Windows.UIElement3D.PreviewStylusOutOfRangeEvent
- uid: System.Windows.UIElement3D.PreviewStylusSystemGesture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusSystemGesture
  nameWithType: UIElement3D.PreviewStylusSystemGesture
  fullName: System.Windows.UIElement3D.PreviewStylusSystemGesture
- uid: System.Windows.Input.StylusSystemGestureEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: StylusSystemGestureEventHandler
  nameWithType: StylusSystemGestureEventHandler
  fullName: System.Windows.Input.StylusSystemGestureEventHandler
- uid: System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusSystemGestureEvent
  nameWithType: UIElement3D.PreviewStylusSystemGestureEvent
  fullName: System.Windows.UIElement3D.PreviewStylusSystemGestureEvent
- uid: System.Windows.UIElement3D.PreviewStylusUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusUp
  nameWithType: UIElement3D.PreviewStylusUp
  fullName: System.Windows.UIElement3D.PreviewStylusUp
- uid: System.Windows.UIElement3D.PreviewStylusUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewStylusUpEvent
  nameWithType: UIElement3D.PreviewStylusUpEvent
  fullName: System.Windows.UIElement3D.PreviewStylusUpEvent
- uid: System.Windows.UIElement3D.PreviewTextInput
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTextInput
  nameWithType: UIElement3D.PreviewTextInput
  fullName: System.Windows.UIElement3D.PreviewTextInput
- uid: System.Windows.Input.TextCompositionEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: TextCompositionEventHandler
  nameWithType: TextCompositionEventHandler
  fullName: System.Windows.Input.TextCompositionEventHandler
- uid: System.Windows.UIElement3D.PreviewTextInputEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTextInputEvent
  nameWithType: UIElement3D.PreviewTextInputEvent
  fullName: System.Windows.UIElement3D.PreviewTextInputEvent
- uid: System.Windows.UIElement3D.PreviewTouchDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchDown
  nameWithType: UIElement3D.PreviewTouchDown
  fullName: System.Windows.UIElement3D.PreviewTouchDown
- uid: System.Windows.UIElement3D.PreviewTouchDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchDownEvent
  nameWithType: UIElement3D.PreviewTouchDownEvent
  fullName: System.Windows.UIElement3D.PreviewTouchDownEvent
- uid: System.Windows.UIElement3D.PreviewTouchMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchMove
  nameWithType: UIElement3D.PreviewTouchMove
  fullName: System.Windows.UIElement3D.PreviewTouchMove
- uid: System.Windows.UIElement3D.PreviewTouchMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchMoveEvent
  nameWithType: UIElement3D.PreviewTouchMoveEvent
  fullName: System.Windows.UIElement3D.PreviewTouchMoveEvent
- uid: System.Windows.UIElement3D.PreviewTouchUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchUp
  nameWithType: UIElement3D.PreviewTouchUp
  fullName: System.Windows.UIElement3D.PreviewTouchUp
- uid: System.Windows.UIElement3D.PreviewTouchUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PreviewTouchUpEvent
  nameWithType: UIElement3D.PreviewTouchUpEvent
  fullName: System.Windows.UIElement3D.PreviewTouchUpEvent
- uid: System.Windows.UIElement3D.QueryContinueDrag
  parent: System.Windows.UIElement3D
  isExternal: false
  name: QueryContinueDrag
  nameWithType: UIElement3D.QueryContinueDrag
  fullName: System.Windows.UIElement3D.QueryContinueDrag
- uid: System.Windows.UIElement3D.QueryContinueDragEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: QueryContinueDragEvent
  nameWithType: UIElement3D.QueryContinueDragEvent
  fullName: System.Windows.UIElement3D.QueryContinueDragEvent
- uid: System.Windows.UIElement3D.QueryCursor
  parent: System.Windows.UIElement3D
  isExternal: false
  name: QueryCursor
  nameWithType: UIElement3D.QueryCursor
  fullName: System.Windows.UIElement3D.QueryCursor
- uid: System.Windows.Input.QueryCursorEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: QueryCursorEventHandler
  nameWithType: QueryCursorEventHandler
  fullName: System.Windows.Input.QueryCursorEventHandler
- uid: System.Windows.UIElement3D.QueryCursorEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: QueryCursorEvent
  nameWithType: UIElement3D.QueryCursorEvent
  fullName: System.Windows.UIElement3D.QueryCursorEvent
- uid: System.Windows.UIElement3D.RaiseEvent(System.Windows.RoutedEventArgs)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: RaiseEvent(RoutedEventArgs)
  nameWithType: UIElement3D.RaiseEvent(RoutedEventArgs)
  fullName: System.Windows.UIElement3D.RaiseEvent(RoutedEventArgs)
- uid: System.Windows.UIElement3D.ReleaseAllTouchCaptures
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseAllTouchCaptures()
  nameWithType: UIElement3D.ReleaseAllTouchCaptures()
  fullName: System.Windows.UIElement3D.ReleaseAllTouchCaptures()
- uid: System.Windows.UIElement3D.ReleaseMouseCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseMouseCapture()
  nameWithType: UIElement3D.ReleaseMouseCapture()
  fullName: System.Windows.UIElement3D.ReleaseMouseCapture()
- uid: System.Windows.UIElement3D.ReleaseStylusCapture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseStylusCapture()
  nameWithType: UIElement3D.ReleaseStylusCapture()
  fullName: System.Windows.UIElement3D.ReleaseStylusCapture()
- uid: System.Windows.UIElement3D.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseTouchCapture(TouchDevice)
  nameWithType: UIElement3D.ReleaseTouchCapture(TouchDevice)
  fullName: System.Windows.UIElement3D.ReleaseTouchCapture(TouchDevice)
- uid: System.Windows.UIElement3D.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  parent: System.Windows.UIElement3D
  isExternal: false
  name: RemoveHandler(RoutedEvent,Delegate)
  nameWithType: UIElement3D.RemoveHandler(RoutedEvent,Delegate)
  fullName: System.Windows.UIElement3D.RemoveHandler(RoutedEvent,Delegate)
- uid: System.Windows.UIElement3D.ShouldSerializeCommandBindings
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ShouldSerializeCommandBindings()
  nameWithType: UIElement3D.ShouldSerializeCommandBindings()
  fullName: System.Windows.UIElement3D.ShouldSerializeCommandBindings()
- uid: System.Windows.UIElement3D.ShouldSerializeInputBindings
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ShouldSerializeInputBindings()
  nameWithType: UIElement3D.ShouldSerializeInputBindings()
  fullName: System.Windows.UIElement3D.ShouldSerializeInputBindings()
- uid: System.Windows.UIElement3D.StylusButtonDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusButtonDown
  nameWithType: UIElement3D.StylusButtonDown
  fullName: System.Windows.UIElement3D.StylusButtonDown
- uid: System.Windows.UIElement3D.StylusButtonDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusButtonDownEvent
  nameWithType: UIElement3D.StylusButtonDownEvent
  fullName: System.Windows.UIElement3D.StylusButtonDownEvent
- uid: System.Windows.UIElement3D.StylusButtonUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusButtonUp
  nameWithType: UIElement3D.StylusButtonUp
  fullName: System.Windows.UIElement3D.StylusButtonUp
- uid: System.Windows.UIElement3D.StylusButtonUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusButtonUpEvent
  nameWithType: UIElement3D.StylusButtonUpEvent
  fullName: System.Windows.UIElement3D.StylusButtonUpEvent
- uid: System.Windows.UIElement3D.StylusDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusDown
  nameWithType: UIElement3D.StylusDown
  fullName: System.Windows.UIElement3D.StylusDown
- uid: System.Windows.UIElement3D.StylusDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusDownEvent
  nameWithType: UIElement3D.StylusDownEvent
  fullName: System.Windows.UIElement3D.StylusDownEvent
- uid: System.Windows.UIElement3D.StylusEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusEnter
  nameWithType: UIElement3D.StylusEnter
  fullName: System.Windows.UIElement3D.StylusEnter
- uid: System.Windows.UIElement3D.StylusEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusEnterEvent
  nameWithType: UIElement3D.StylusEnterEvent
  fullName: System.Windows.UIElement3D.StylusEnterEvent
- uid: System.Windows.UIElement3D.StylusInAirMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusInAirMove
  nameWithType: UIElement3D.StylusInAirMove
  fullName: System.Windows.UIElement3D.StylusInAirMove
- uid: System.Windows.UIElement3D.StylusInAirMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusInAirMoveEvent
  nameWithType: UIElement3D.StylusInAirMoveEvent
  fullName: System.Windows.UIElement3D.StylusInAirMoveEvent
- uid: System.Windows.UIElement3D.StylusInRange
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusInRange
  nameWithType: UIElement3D.StylusInRange
  fullName: System.Windows.UIElement3D.StylusInRange
- uid: System.Windows.UIElement3D.StylusInRangeEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusInRangeEvent
  nameWithType: UIElement3D.StylusInRangeEvent
  fullName: System.Windows.UIElement3D.StylusInRangeEvent
- uid: System.Windows.UIElement3D.StylusLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusLeave
  nameWithType: UIElement3D.StylusLeave
  fullName: System.Windows.UIElement3D.StylusLeave
- uid: System.Windows.UIElement3D.StylusLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusLeaveEvent
  nameWithType: UIElement3D.StylusLeaveEvent
  fullName: System.Windows.UIElement3D.StylusLeaveEvent
- uid: System.Windows.UIElement3D.StylusMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusMove
  nameWithType: UIElement3D.StylusMove
  fullName: System.Windows.UIElement3D.StylusMove
- uid: System.Windows.UIElement3D.StylusMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusMoveEvent
  nameWithType: UIElement3D.StylusMoveEvent
  fullName: System.Windows.UIElement3D.StylusMoveEvent
- uid: System.Windows.UIElement3D.StylusOutOfRange
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusOutOfRange
  nameWithType: UIElement3D.StylusOutOfRange
  fullName: System.Windows.UIElement3D.StylusOutOfRange
- uid: System.Windows.UIElement3D.StylusOutOfRangeEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusOutOfRangeEvent
  nameWithType: UIElement3D.StylusOutOfRangeEvent
  fullName: System.Windows.UIElement3D.StylusOutOfRangeEvent
- uid: System.Windows.UIElement3D.StylusSystemGesture
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusSystemGesture
  nameWithType: UIElement3D.StylusSystemGesture
  fullName: System.Windows.UIElement3D.StylusSystemGesture
- uid: System.Windows.UIElement3D.StylusSystemGestureEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusSystemGestureEvent
  nameWithType: UIElement3D.StylusSystemGestureEvent
  fullName: System.Windows.UIElement3D.StylusSystemGestureEvent
- uid: System.Windows.UIElement3D.StylusUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusUp
  nameWithType: UIElement3D.StylusUp
  fullName: System.Windows.UIElement3D.StylusUp
- uid: System.Windows.UIElement3D.StylusUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: StylusUpEvent
  nameWithType: UIElement3D.StylusUpEvent
  fullName: System.Windows.UIElement3D.StylusUpEvent
- uid: System.Windows.UIElement3D.TextInput
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TextInput
  nameWithType: UIElement3D.TextInput
  fullName: System.Windows.UIElement3D.TextInput
- uid: System.Windows.UIElement3D.TextInputEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TextInputEvent
  nameWithType: UIElement3D.TextInputEvent
  fullName: System.Windows.UIElement3D.TextInputEvent
- uid: System.Windows.UIElement3D.TouchDown
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchDown
  nameWithType: UIElement3D.TouchDown
  fullName: System.Windows.UIElement3D.TouchDown
- uid: System.Windows.UIElement3D.TouchDownEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchDownEvent
  nameWithType: UIElement3D.TouchDownEvent
  fullName: System.Windows.UIElement3D.TouchDownEvent
- uid: System.Windows.UIElement3D.TouchEnter
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchEnter
  nameWithType: UIElement3D.TouchEnter
  fullName: System.Windows.UIElement3D.TouchEnter
- uid: System.Windows.UIElement3D.TouchEnterEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchEnterEvent
  nameWithType: UIElement3D.TouchEnterEvent
  fullName: System.Windows.UIElement3D.TouchEnterEvent
- uid: System.Windows.UIElement3D.TouchesCaptured
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement3D.TouchesCaptured
  fullName: System.Windows.UIElement3D.TouchesCaptured
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.TouchDevice}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<TouchDevice>
  nameWithType: IEnumerable<TouchDevice>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.TouchDevice>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.TouchDevice>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.TouchDevice
    name: TouchDevice
    nameWithType: TouchDevice
    fullName: TouchDevice
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.UIElement3D.TouchesCapturedWithin
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement3D.TouchesCapturedWithin
  fullName: System.Windows.UIElement3D.TouchesCapturedWithin
- uid: System.Windows.UIElement3D.TouchesDirectlyOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement3D.TouchesDirectlyOver
  fullName: System.Windows.UIElement3D.TouchesDirectlyOver
- uid: System.Windows.UIElement3D.TouchesOver
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement3D.TouchesOver
  fullName: System.Windows.UIElement3D.TouchesOver
- uid: System.Windows.UIElement3D.TouchLeave
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchLeave
  nameWithType: UIElement3D.TouchLeave
  fullName: System.Windows.UIElement3D.TouchLeave
- uid: System.Windows.UIElement3D.TouchLeaveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchLeaveEvent
  nameWithType: UIElement3D.TouchLeaveEvent
  fullName: System.Windows.UIElement3D.TouchLeaveEvent
- uid: System.Windows.UIElement3D.TouchMove
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchMove
  nameWithType: UIElement3D.TouchMove
  fullName: System.Windows.UIElement3D.TouchMove
- uid: System.Windows.UIElement3D.TouchMoveEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchMoveEvent
  nameWithType: UIElement3D.TouchMoveEvent
  fullName: System.Windows.UIElement3D.TouchMoveEvent
- uid: System.Windows.UIElement3D.TouchUp
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchUp
  nameWithType: UIElement3D.TouchUp
  fullName: System.Windows.UIElement3D.TouchUp
- uid: System.Windows.UIElement3D.TouchUpEvent
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchUpEvent
  nameWithType: UIElement3D.TouchUpEvent
  fullName: System.Windows.UIElement3D.TouchUpEvent
- uid: System.Windows.UIElement3D.Visibility
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Visibility
  nameWithType: UIElement3D.Visibility
  fullName: System.Windows.UIElement3D.Visibility
- uid: System.Windows.Visibility
  parent: System.Windows
  isExternal: false
  name: Visibility
  nameWithType: Visibility
  fullName: System.Windows.Visibility
- uid: System.Windows.UIElement3D.VisibilityProperty
  parent: System.Windows.UIElement3D
  isExternal: false
  name: VisibilityProperty
  nameWithType: UIElement3D.VisibilityProperty
  fullName: System.Windows.UIElement3D.VisibilityProperty
- uid: System.Windows.UIElement3D.#ctor*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: UIElement3D
  nameWithType: UIElement3D.UIElement3D
- uid: System.Windows.UIElement3D.AddHandler*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddHandler
  nameWithType: UIElement3D.AddHandler
- uid: System.Windows.UIElement3D.AddToEventRoute*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AddToEventRoute
  nameWithType: UIElement3D.AddToEventRoute
- uid: System.Windows.UIElement3D.AllowDrop*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AllowDrop
  nameWithType: UIElement3D.AllowDrop
- uid: System.Windows.UIElement3D.AreAnyTouchesCaptured*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCaptured
  nameWithType: UIElement3D.AreAnyTouchesCaptured
- uid: System.Windows.UIElement3D.AreAnyTouchesCapturedWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesCapturedWithin
  nameWithType: UIElement3D.AreAnyTouchesCapturedWithin
- uid: System.Windows.UIElement3D.AreAnyTouchesDirectlyOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesDirectlyOver
  nameWithType: UIElement3D.AreAnyTouchesDirectlyOver
- uid: System.Windows.UIElement3D.AreAnyTouchesOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: AreAnyTouchesOver
  nameWithType: UIElement3D.AreAnyTouchesOver
- uid: System.Windows.UIElement3D.CaptureMouse*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureMouse
  nameWithType: UIElement3D.CaptureMouse
- uid: System.Windows.UIElement3D.CaptureStylus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureStylus
  nameWithType: UIElement3D.CaptureStylus
- uid: System.Windows.UIElement3D.CaptureTouch*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CaptureTouch
  nameWithType: UIElement3D.CaptureTouch
- uid: System.Windows.UIElement3D.CommandBindings*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: CommandBindings
  nameWithType: UIElement3D.CommandBindings
- uid: System.Windows.UIElement3D.Focus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Focus
  nameWithType: UIElement3D.Focus
- uid: System.Windows.UIElement3D.Focusable*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Focusable
  nameWithType: UIElement3D.Focusable
- uid: System.Windows.UIElement3D.GetUIParentCore*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: GetUIParentCore
  nameWithType: UIElement3D.GetUIParentCore
- uid: System.Windows.UIElement3D.InputBindings*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: InputBindings
  nameWithType: UIElement3D.InputBindings
- uid: System.Windows.UIElement3D.InvalidateModel*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: InvalidateModel
  nameWithType: UIElement3D.InvalidateModel
- uid: System.Windows.UIElement3D.IsEnabled*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabled
  nameWithType: UIElement3D.IsEnabled
- uid: System.Windows.UIElement3D.IsEnabledCore*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsEnabledCore
  nameWithType: UIElement3D.IsEnabledCore
- uid: System.Windows.UIElement3D.IsFocused*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsFocused
  nameWithType: UIElement3D.IsFocused
- uid: System.Windows.UIElement3D.IsHitTestVisible*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsHitTestVisible
  nameWithType: UIElement3D.IsHitTestVisible
- uid: System.Windows.UIElement3D.IsInputMethodEnabled*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsInputMethodEnabled
  nameWithType: UIElement3D.IsInputMethodEnabled
- uid: System.Windows.UIElement3D.IsKeyboardFocused*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocused
  nameWithType: UIElement3D.IsKeyboardFocused
- uid: System.Windows.UIElement3D.IsKeyboardFocusWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsKeyboardFocusWithin
  nameWithType: UIElement3D.IsKeyboardFocusWithin
- uid: System.Windows.UIElement3D.IsMouseCaptured*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptured
  nameWithType: UIElement3D.IsMouseCaptured
- uid: System.Windows.UIElement3D.IsMouseCaptureWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseCaptureWithin
  nameWithType: UIElement3D.IsMouseCaptureWithin
- uid: System.Windows.UIElement3D.IsMouseDirectlyOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseDirectlyOver
  nameWithType: UIElement3D.IsMouseDirectlyOver
- uid: System.Windows.UIElement3D.IsMouseOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsMouseOver
  nameWithType: UIElement3D.IsMouseOver
- uid: System.Windows.UIElement3D.IsStylusCaptured*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptured
  nameWithType: UIElement3D.IsStylusCaptured
- uid: System.Windows.UIElement3D.IsStylusCaptureWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusCaptureWithin
  nameWithType: UIElement3D.IsStylusCaptureWithin
- uid: System.Windows.UIElement3D.IsStylusDirectlyOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusDirectlyOver
  nameWithType: UIElement3D.IsStylusDirectlyOver
- uid: System.Windows.UIElement3D.IsStylusOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsStylusOver
  nameWithType: UIElement3D.IsStylusOver
- uid: System.Windows.UIElement3D.IsVisible*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: IsVisible
  nameWithType: UIElement3D.IsVisible
- uid: System.Windows.UIElement3D.MoveFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: MoveFocus
  nameWithType: UIElement3D.MoveFocus
- uid: System.Windows.UIElement3D.OnAccessKey*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnAccessKey
  nameWithType: UIElement3D.OnAccessKey
- uid: System.Windows.UIElement3D.OnCreateAutomationPeer*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: UIElement3D.OnCreateAutomationPeer
- uid: System.Windows.UIElement3D.OnDragEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragEnter
  nameWithType: UIElement3D.OnDragEnter
- uid: System.Windows.UIElement3D.OnDragLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragLeave
  nameWithType: UIElement3D.OnDragLeave
- uid: System.Windows.UIElement3D.OnDragOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDragOver
  nameWithType: UIElement3D.OnDragOver
- uid: System.Windows.UIElement3D.OnDrop*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnDrop
  nameWithType: UIElement3D.OnDrop
- uid: System.Windows.UIElement3D.OnGiveFeedback*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGiveFeedback
  nameWithType: UIElement3D.OnGiveFeedback
- uid: System.Windows.UIElement3D.OnGotFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotFocus
  nameWithType: UIElement3D.OnGotFocus
- uid: System.Windows.UIElement3D.OnGotKeyboardFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotKeyboardFocus
  nameWithType: UIElement3D.OnGotKeyboardFocus
- uid: System.Windows.UIElement3D.OnGotMouseCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotMouseCapture
  nameWithType: UIElement3D.OnGotMouseCapture
- uid: System.Windows.UIElement3D.OnGotStylusCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotStylusCapture
  nameWithType: UIElement3D.OnGotStylusCapture
- uid: System.Windows.UIElement3D.OnGotTouchCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnGotTouchCapture
  nameWithType: UIElement3D.OnGotTouchCapture
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusedChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsKeyboardFocusedChanged
  nameWithType: UIElement3D.OnIsKeyboardFocusedChanged
- uid: System.Windows.UIElement3D.OnIsKeyboardFocusWithinChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsKeyboardFocusWithinChanged
  nameWithType: UIElement3D.OnIsKeyboardFocusWithinChanged
- uid: System.Windows.UIElement3D.OnIsMouseCapturedChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseCapturedChanged
  nameWithType: UIElement3D.OnIsMouseCapturedChanged
- uid: System.Windows.UIElement3D.OnIsMouseCaptureWithinChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseCaptureWithinChanged
  nameWithType: UIElement3D.OnIsMouseCaptureWithinChanged
- uid: System.Windows.UIElement3D.OnIsMouseDirectlyOverChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsMouseDirectlyOverChanged
  nameWithType: UIElement3D.OnIsMouseDirectlyOverChanged
- uid: System.Windows.UIElement3D.OnIsStylusCapturedChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusCapturedChanged
  nameWithType: UIElement3D.OnIsStylusCapturedChanged
- uid: System.Windows.UIElement3D.OnIsStylusCaptureWithinChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusCaptureWithinChanged
  nameWithType: UIElement3D.OnIsStylusCaptureWithinChanged
- uid: System.Windows.UIElement3D.OnIsStylusDirectlyOverChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnIsStylusDirectlyOverChanged
  nameWithType: UIElement3D.OnIsStylusDirectlyOverChanged
- uid: System.Windows.UIElement3D.OnKeyDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnKeyDown
  nameWithType: UIElement3D.OnKeyDown
- uid: System.Windows.UIElement3D.OnKeyUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnKeyUp
  nameWithType: UIElement3D.OnKeyUp
- uid: System.Windows.UIElement3D.OnLostFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostFocus
  nameWithType: UIElement3D.OnLostFocus
- uid: System.Windows.UIElement3D.OnLostKeyboardFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostKeyboardFocus
  nameWithType: UIElement3D.OnLostKeyboardFocus
- uid: System.Windows.UIElement3D.OnLostMouseCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostMouseCapture
  nameWithType: UIElement3D.OnLostMouseCapture
- uid: System.Windows.UIElement3D.OnLostStylusCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostStylusCapture
  nameWithType: UIElement3D.OnLostStylusCapture
- uid: System.Windows.UIElement3D.OnLostTouchCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnLostTouchCapture
  nameWithType: UIElement3D.OnLostTouchCapture
- uid: System.Windows.UIElement3D.OnMouseDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseDown
  nameWithType: UIElement3D.OnMouseDown
- uid: System.Windows.UIElement3D.OnMouseEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseEnter
  nameWithType: UIElement3D.OnMouseEnter
- uid: System.Windows.UIElement3D.OnMouseLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeave
  nameWithType: UIElement3D.OnMouseLeave
- uid: System.Windows.UIElement3D.OnMouseLeftButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeftButtonDown
  nameWithType: UIElement3D.OnMouseLeftButtonDown
- uid: System.Windows.UIElement3D.OnMouseLeftButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseLeftButtonUp
  nameWithType: UIElement3D.OnMouseLeftButtonUp
- uid: System.Windows.UIElement3D.OnMouseMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseMove
  nameWithType: UIElement3D.OnMouseMove
- uid: System.Windows.UIElement3D.OnMouseRightButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseRightButtonDown
  nameWithType: UIElement3D.OnMouseRightButtonDown
- uid: System.Windows.UIElement3D.OnMouseRightButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseRightButtonUp
  nameWithType: UIElement3D.OnMouseRightButtonUp
- uid: System.Windows.UIElement3D.OnMouseUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseUp
  nameWithType: UIElement3D.OnMouseUp
- uid: System.Windows.UIElement3D.OnMouseWheel*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnMouseWheel
  nameWithType: UIElement3D.OnMouseWheel
- uid: System.Windows.UIElement3D.OnPreviewDragEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragEnter
  nameWithType: UIElement3D.OnPreviewDragEnter
- uid: System.Windows.UIElement3D.OnPreviewDragLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragLeave
  nameWithType: UIElement3D.OnPreviewDragLeave
- uid: System.Windows.UIElement3D.OnPreviewDragOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDragOver
  nameWithType: UIElement3D.OnPreviewDragOver
- uid: System.Windows.UIElement3D.OnPreviewDrop*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewDrop
  nameWithType: UIElement3D.OnPreviewDrop
- uid: System.Windows.UIElement3D.OnPreviewGiveFeedback*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewGiveFeedback
  nameWithType: UIElement3D.OnPreviewGiveFeedback
- uid: System.Windows.UIElement3D.OnPreviewGotKeyboardFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewGotKeyboardFocus
  nameWithType: UIElement3D.OnPreviewGotKeyboardFocus
- uid: System.Windows.UIElement3D.OnPreviewKeyDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewKeyDown
  nameWithType: UIElement3D.OnPreviewKeyDown
- uid: System.Windows.UIElement3D.OnPreviewKeyUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewKeyUp
  nameWithType: UIElement3D.OnPreviewKeyUp
- uid: System.Windows.UIElement3D.OnPreviewLostKeyboardFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewLostKeyboardFocus
  nameWithType: UIElement3D.OnPreviewLostKeyboardFocus
- uid: System.Windows.UIElement3D.OnPreviewMouseDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseDown
  nameWithType: UIElement3D.OnPreviewMouseDown
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseLeftButtonDown
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonDown
- uid: System.Windows.UIElement3D.OnPreviewMouseLeftButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseLeftButtonUp
  nameWithType: UIElement3D.OnPreviewMouseLeftButtonUp
- uid: System.Windows.UIElement3D.OnPreviewMouseMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseMove
  nameWithType: UIElement3D.OnPreviewMouseMove
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseRightButtonDown
  nameWithType: UIElement3D.OnPreviewMouseRightButtonDown
- uid: System.Windows.UIElement3D.OnPreviewMouseRightButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseRightButtonUp
  nameWithType: UIElement3D.OnPreviewMouseRightButtonUp
- uid: System.Windows.UIElement3D.OnPreviewMouseUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseUp
  nameWithType: UIElement3D.OnPreviewMouseUp
- uid: System.Windows.UIElement3D.OnPreviewMouseWheel*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewMouseWheel
  nameWithType: UIElement3D.OnPreviewMouseWheel
- uid: System.Windows.UIElement3D.OnPreviewQueryContinueDrag*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewQueryContinueDrag
  nameWithType: UIElement3D.OnPreviewQueryContinueDrag
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusButtonDown
  nameWithType: UIElement3D.OnPreviewStylusButtonDown
- uid: System.Windows.UIElement3D.OnPreviewStylusButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusButtonUp
  nameWithType: UIElement3D.OnPreviewStylusButtonUp
- uid: System.Windows.UIElement3D.OnPreviewStylusDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusDown
  nameWithType: UIElement3D.OnPreviewStylusDown
- uid: System.Windows.UIElement3D.OnPreviewStylusInAirMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusInAirMove
  nameWithType: UIElement3D.OnPreviewStylusInAirMove
- uid: System.Windows.UIElement3D.OnPreviewStylusInRange*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusInRange
  nameWithType: UIElement3D.OnPreviewStylusInRange
- uid: System.Windows.UIElement3D.OnPreviewStylusMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusMove
  nameWithType: UIElement3D.OnPreviewStylusMove
- uid: System.Windows.UIElement3D.OnPreviewStylusOutOfRange*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusOutOfRange
  nameWithType: UIElement3D.OnPreviewStylusOutOfRange
- uid: System.Windows.UIElement3D.OnPreviewStylusSystemGesture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusSystemGesture
  nameWithType: UIElement3D.OnPreviewStylusSystemGesture
- uid: System.Windows.UIElement3D.OnPreviewStylusUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewStylusUp
  nameWithType: UIElement3D.OnPreviewStylusUp
- uid: System.Windows.UIElement3D.OnPreviewTextInput*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTextInput
  nameWithType: UIElement3D.OnPreviewTextInput
- uid: System.Windows.UIElement3D.OnPreviewTouchDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchDown
  nameWithType: UIElement3D.OnPreviewTouchDown
- uid: System.Windows.UIElement3D.OnPreviewTouchMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchMove
  nameWithType: UIElement3D.OnPreviewTouchMove
- uid: System.Windows.UIElement3D.OnPreviewTouchUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnPreviewTouchUp
  nameWithType: UIElement3D.OnPreviewTouchUp
- uid: System.Windows.UIElement3D.OnQueryContinueDrag*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnQueryContinueDrag
  nameWithType: UIElement3D.OnQueryContinueDrag
- uid: System.Windows.UIElement3D.OnQueryCursor*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnQueryCursor
  nameWithType: UIElement3D.OnQueryCursor
- uid: System.Windows.UIElement3D.OnStylusButtonDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusButtonDown
  nameWithType: UIElement3D.OnStylusButtonDown
- uid: System.Windows.UIElement3D.OnStylusButtonUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusButtonUp
  nameWithType: UIElement3D.OnStylusButtonUp
- uid: System.Windows.UIElement3D.OnStylusDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusDown
  nameWithType: UIElement3D.OnStylusDown
- uid: System.Windows.UIElement3D.OnStylusEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusEnter
  nameWithType: UIElement3D.OnStylusEnter
- uid: System.Windows.UIElement3D.OnStylusInAirMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusInAirMove
  nameWithType: UIElement3D.OnStylusInAirMove
- uid: System.Windows.UIElement3D.OnStylusInRange*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusInRange
  nameWithType: UIElement3D.OnStylusInRange
- uid: System.Windows.UIElement3D.OnStylusLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusLeave
  nameWithType: UIElement3D.OnStylusLeave
- uid: System.Windows.UIElement3D.OnStylusMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusMove
  nameWithType: UIElement3D.OnStylusMove
- uid: System.Windows.UIElement3D.OnStylusOutOfRange*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusOutOfRange
  nameWithType: UIElement3D.OnStylusOutOfRange
- uid: System.Windows.UIElement3D.OnStylusSystemGesture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusSystemGesture
  nameWithType: UIElement3D.OnStylusSystemGesture
- uid: System.Windows.UIElement3D.OnStylusUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnStylusUp
  nameWithType: UIElement3D.OnStylusUp
- uid: System.Windows.UIElement3D.OnTextInput*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTextInput
  nameWithType: UIElement3D.OnTextInput
- uid: System.Windows.UIElement3D.OnTouchDown*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchDown
  nameWithType: UIElement3D.OnTouchDown
- uid: System.Windows.UIElement3D.OnTouchEnter*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchEnter
  nameWithType: UIElement3D.OnTouchEnter
- uid: System.Windows.UIElement3D.OnTouchLeave*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchLeave
  nameWithType: UIElement3D.OnTouchLeave
- uid: System.Windows.UIElement3D.OnTouchMove*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchMove
  nameWithType: UIElement3D.OnTouchMove
- uid: System.Windows.UIElement3D.OnTouchUp*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnTouchUp
  nameWithType: UIElement3D.OnTouchUp
- uid: System.Windows.UIElement3D.OnUpdateModel*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnUpdateModel
  nameWithType: UIElement3D.OnUpdateModel
- uid: System.Windows.UIElement3D.OnVisualParentChanged*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: UIElement3D.OnVisualParentChanged
- uid: System.Windows.UIElement3D.PredictFocus*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: PredictFocus
  nameWithType: UIElement3D.PredictFocus
- uid: System.Windows.UIElement3D.RaiseEvent*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: RaiseEvent
  nameWithType: UIElement3D.RaiseEvent
- uid: System.Windows.UIElement3D.ReleaseAllTouchCaptures*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseAllTouchCaptures
  nameWithType: UIElement3D.ReleaseAllTouchCaptures
- uid: System.Windows.UIElement3D.ReleaseMouseCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseMouseCapture
  nameWithType: UIElement3D.ReleaseMouseCapture
- uid: System.Windows.UIElement3D.ReleaseStylusCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseStylusCapture
  nameWithType: UIElement3D.ReleaseStylusCapture
- uid: System.Windows.UIElement3D.ReleaseTouchCapture*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ReleaseTouchCapture
  nameWithType: UIElement3D.ReleaseTouchCapture
- uid: System.Windows.UIElement3D.RemoveHandler*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: RemoveHandler
  nameWithType: UIElement3D.RemoveHandler
- uid: System.Windows.UIElement3D.ShouldSerializeCommandBindings*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ShouldSerializeCommandBindings
  nameWithType: UIElement3D.ShouldSerializeCommandBindings
- uid: System.Windows.UIElement3D.ShouldSerializeInputBindings*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: ShouldSerializeInputBindings
  nameWithType: UIElement3D.ShouldSerializeInputBindings
- uid: System.Windows.UIElement3D.TouchesCaptured*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesCaptured
  nameWithType: UIElement3D.TouchesCaptured
- uid: System.Windows.UIElement3D.TouchesCapturedWithin*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesCapturedWithin
  nameWithType: UIElement3D.TouchesCapturedWithin
- uid: System.Windows.UIElement3D.TouchesDirectlyOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesDirectlyOver
  nameWithType: UIElement3D.TouchesDirectlyOver
- uid: System.Windows.UIElement3D.TouchesOver*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: TouchesOver
  nameWithType: UIElement3D.TouchesOver
- uid: System.Windows.UIElement3D.Visibility*
  parent: System.Windows.UIElement3D
  isExternal: false
  name: Visibility
  nameWithType: UIElement3D.Visibility
