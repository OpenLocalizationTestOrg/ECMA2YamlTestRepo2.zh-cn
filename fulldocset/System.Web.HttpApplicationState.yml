### YamlMime:ManagedReference
items:
- uid: System.Web.HttpApplicationState
  id: HttpApplicationState
  children:
  - System.Web.HttpApplicationState.Add(System.String,System.Object)
  - System.Web.HttpApplicationState.AllKeys
  - System.Web.HttpApplicationState.Clear
  - System.Web.HttpApplicationState.Contents
  - System.Web.HttpApplicationState.Count
  - System.Web.HttpApplicationState.Get(System.Int32)
  - System.Web.HttpApplicationState.Get(System.String)
  - System.Web.HttpApplicationState.GetKey(System.Int32)
  - System.Web.HttpApplicationState.Item(System.Int32)
  - System.Web.HttpApplicationState.Item(System.String)
  - System.Web.HttpApplicationState.Lock
  - System.Web.HttpApplicationState.Remove(System.String)
  - System.Web.HttpApplicationState.RemoveAll
  - System.Web.HttpApplicationState.RemoveAt(System.Int32)
  - System.Web.HttpApplicationState.Set(System.String,System.Object)
  - System.Web.HttpApplicationState.StaticObjects
  - System.Web.HttpApplicationState.UnLock
  langs:
  - csharp
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
  type: Class
  summary: "允许在多个会话之间共享的全局信息并请求在 ASP.NET 应用程序。"
  remarks: "ASP.NET 应用程序是所有文件、 页、 处理程序、 模块和的作用域的虚拟目录以及在一台 Web 服务器上的及其子目录中的代码的总数。       HttpApplicationState 类的单个实例创建第一次客户端请求从特定的 ASP.NET 应用程序虚拟目录中的任何 URL 资源。 为每个 Web 服务器上的 ASP.NET 应用程序创建单独的单个实例。 对每个实例的引用随后将通过内部函数<xref:System.Web.HttpContext.Application%2A>对象。</xref:System.Web.HttpContext.Application%2A>       不跨 Web 场 （在其中应用程序承载跨多个服务器） 或 Web 园 （在其中应用程序承载在同一台计算机上的多个进程之间） 共享应用程序状态。"
  syntax:
    content: 'public sealed class HttpApplicationState : System.Collections.Specialized.NameObjectCollectionBase'
  inheritance:
  - System.Object
  - System.Collections.Specialized.NameObjectCollectionBase
  implements: []
  inheritedMembers:
  - System.Collections.Specialized.NameObjectCollectionBase.BaseAdd(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseClear
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGet(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetAllValues(System.Type)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseGetKey(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseHasKeys
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemove(System.String)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseRemoveAt(System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.Int32,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.BaseSet(System.String,System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.GetEnumerator
  - System.Collections.Specialized.NameObjectCollectionBase.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Collections.Specialized.NameObjectCollectionBase.IsReadOnly
  - System.Collections.Specialized.NameObjectCollectionBase.Keys
  - System.Collections.Specialized.NameObjectCollectionBase.OnDeserialization(System.Object)
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.Specialized.NameObjectCollectionBase.System#Collections#ICollection#SyncRoot
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Add(System.String,System.Object)
  id: Add(System.String,System.Object)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Add(String,Object)
  nameWithType: HttpApplicationState.Add(String,Object)
  fullName: System.Web.HttpApplicationState.Add(String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "添加将新对象<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>集合。"
  remarks: ''
  example:
  - "The following example adds two application variables named MyAppVar1 and MyAppVar2 to the Application collection.  \n  \n [!code-cs[Classic HttpApplicationState.Add Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_8_1.cs)]\n [!code-vb[Classic HttpApplicationState.Add Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_8_1.vb)]"
  syntax:
    content: public void Add (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "要添加到集合的对象名称。"
    - id: value
      type: System.Object
      description: "对象的值。"
  overload: System.Web.HttpApplicationState.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.AllKeys
  id: AllKeys
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: AllKeys
  nameWithType: HttpApplicationState.AllKeys
  fullName: System.Web.HttpApplicationState.AllKeys
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取中的访问键<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>集合。"
  remarks: ''
  example:
  - "The following example fills a string array with all the object names in the application state collection.  \n  \n [!code-cs[Classic HttpApplicationState.AllKeys Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_1_1.cs)]\n [!code-vb[Classic HttpApplicationState.AllKeys Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_1_1.vb)]"
  syntax:
    content: public string[] AllKeys { get; }
    return:
      type: System.String[]
      description: "字符串数组<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>对象名称。"
  overload: System.Web.HttpApplicationState.AllKeys*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Clear
  id: Clear
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Clear()
  nameWithType: HttpApplicationState.Clear()
  fullName: System.Web.HttpApplicationState.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "删除中的所有对象<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>集合。"
  remarks: ''
  example:
  - "The following example removes all <xref:System.Web.HttpApplicationState> variables from the collection.  \n  \n [!code-vb[Classic HttpApplicationState.Clear Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_0_1.vb)]\n [!code-cs[Classic HttpApplicationState.Clear Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_0_1.cs)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.HttpApplicationState.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Contents
  id: Contents
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Contents
  nameWithType: HttpApplicationState.Contents
  fullName: System.Web.HttpApplicationState.Contents
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取对<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>对象。"
  remarks: "此属性提供与 ASP 的早期版本的兼容性。"
  example:
  - "The following example creates a new <xref:System.Web.HttpApplicationState> object that is used to access the object names in the application state collection.  \n  \n [!code-cs[Classic HttpApplicationState.Contents Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_5_1.cs)]\n [!code-vb[Classic HttpApplicationState.Contents Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_5_1.vb)]"
  syntax:
    content: public System.Web.HttpApplicationState Contents { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "对引用<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>对象。"
  overload: System.Web.HttpApplicationState.Contents*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Count
  id: Count
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Count
  nameWithType: HttpApplicationState.Count
  fullName: System.Web.HttpApplicationState.Count
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取中的对象数<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>集合。"
  remarks: ''
  example:
  - "The following example executes only if the number of objects in the collection exceeds five.  \n  \n [!code-cs[Classic HttpApplicationState.Count Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_3_1.cs)]\n [!code-vb[Classic HttpApplicationState.Count Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_3_1.vb)]"
  syntax:
    content: public override int Count { get; }
    return:
      type: System.Int32
      description: "项集合中的对象数。 默认值为 0。"
  overload: System.Web.HttpApplicationState.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Get(System.Int32)
  id: Get(System.Int32)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Get(Int32)
  nameWithType: HttpApplicationState.Get(Int32)
  fullName: System.Web.HttpApplicationState.Get(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>按数字索引的对象。"
  remarks: ''
  example:
  - "The following example returns the first object (index = 0) from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.  \n  \n [!code-cs[Classic HttpApplicationState.Get1 Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_9_1.cs)]\n [!code-vb[Classic HttpApplicationState.Get1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_9_1.vb)]"
  syntax:
    content: public object Get (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "应用程序状态对象的索引。"
    return:
      type: System.Object
      description: "所引用的对象<code> index </code>。"
  overload: System.Web.HttpApplicationState.Get*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Get(System.String)
  id: Get(System.String)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Get(String)
  nameWithType: HttpApplicationState.Get(String)
  fullName: System.Web.HttpApplicationState.Get(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>按名称的对象。"
  remarks: "下面的示例返回一个名为从 MyAppVar1<xref:System.Web.HttpApplicationState>的内部函数的集合<xref:System.Web.HttpContext.Application%2A>对象，并将其复制到新的对象变量。</xref:System.Web.HttpContext.Application%2A> </xref:System.Web.HttpApplicationState>      ```vb#   Dim MyObject As Object   MyObject = Application.Get(&quot;MyAppVar1&quot;)   ```      ```c#   Object MyObject;   MyObject = Application.Get(&quot;MyAppVar1&quot;);   ```"
  syntax:
    content: public object Get (string name);
    parameters:
    - id: name
      type: System.String
      description: "对象的名称。"
    return:
      type: System.Object
      description: "所引用的对象<code> name </code>。"
  overload: System.Web.HttpApplicationState.Get*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.GetKey(System.Int32)
  id: GetKey(System.Int32)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: GetKey(Int32)
  nameWithType: HttpApplicationState.GetKey(Int32)
  fullName: System.Web.HttpApplicationState.GetKey(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>按索引的对象名称。"
  remarks: ''
  example:
  - "The following example returns the names of all the objects in the application state collection and stores the names in a string array.  \n  \n [!code-cs[Classic HttpApplicationState.GetKey Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_3_1.cs)]\n [!code-vb[Classic HttpApplicationState.GetKey Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_3_1.vb)]"
  syntax:
    content: public string GetKey (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "应用程序状态对象的索引。"
    return:
      type: System.String
      description: "应用程序状态对象已保存在其下的名称。"
  overload: System.Web.HttpApplicationState.GetKey*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: HttpApplicationState.Item(Int32)
  fullName: System.Web.HttpApplicationState.Item(Int32)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取单个<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>按索引的对象。"
  remarks: ''
  example:
  - "The following example returns the first object (index = 0) from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.  \n  \n [!code-vb[Classic HttpApplicationState.this1 Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_4_1.vb)]\n [!code-cs[Classic HttpApplicationState.this1 Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_4_1.cs)]"
  syntax:
    content: public object this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "集合中对象的数字索引。"
    return:
      type: System.Object
      description: "所引用的对象<code> index </code>。"
  overload: System.Web.HttpApplicationState.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Item(System.String)
  id: Item(System.String)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Item(String)
  nameWithType: HttpApplicationState.Item(String)
  fullName: System.Web.HttpApplicationState.Item(String)
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个值<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>按名称的对象。"
  remarks: ''
  example:
  - "The following example returns an object named `MyAppVar1` from the <xref:System.Web.HttpApplicationState> collection of the intrinsic <xref:System.Web.HttpContext.Application%2A> object and copies it to a new object variable.  \n  \n [!code-cs[Classic HttpApplicationState.this Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_0_1.cs)]\n [!code-vb[Classic HttpApplicationState.this Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_0_1.vb)]"
  syntax:
    content: public object this[string name] { get; set; }
    parameters:
    - id: name
      type: System.String
      description: "集合中对象的名称。"
    return:
      type: System.Object
      description: "所引用的对象<code> name </code>。"
  overload: System.Web.HttpApplicationState.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Lock
  id: Lock
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Lock()
  nameWithType: HttpApplicationState.Lock()
  fullName: System.Web.HttpApplicationState.Lock()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "锁定的访问<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>变量以便于访问同步。"
  remarks: "<xref:System.Web.HttpApplicationState>类执行自动的锁定和解锁与<xref:System.Web.HttpApplicationState.AllKeys%2A>和<xref:System.Web.HttpApplicationState.Count%2A>属性和<xref:System.Web.HttpApplicationState.Add%2A>， <xref:System.Web.HttpApplicationState.Clear%2A>， <xref:System.Web.HttpApplicationState.Get%2A>， <xref:System.Web.HttpApplicationState.GetKey%2A>， <xref:System.Web.HttpApplicationState.Remove%2A>，<xref:System.Web.HttpApplicationState.RemoveAt%2A>和<xref:System.Web.HttpApplicationState.Set%2A>方法。</xref:System.Web.HttpApplicationState.Set%2A> </xref:System.Web.HttpApplicationState.RemoveAt%2A> </xref:System.Web.HttpApplicationState.Remove%2A> </xref:System.Web.HttpApplicationState.GetKey%2A> </xref:System.Web.HttpApplicationState.Get%2A> </xref:System.Web.HttpApplicationState.Clear%2A> </xref:System.Web.HttpApplicationState.Add%2A> </xref:System.Web.HttpApplicationState.Count%2A> </xref:System.Web.HttpApplicationState.AllKeys%2A> </xref:System.Web.HttpApplicationState> 但是，显式使用锁定和<xref:System.Web.HttpApplicationState.UnLock%2A>时具有一系列操作的方法可能更加有效。</xref:System.Web.HttpApplicationState.UnLock%2A>"
  example:
  - "The following example uses the Lock method and <xref:System.Web.HttpApplicationState.UnLock%2A> method to prevent other sessions from changing the value of two application variables until after the local session has changed them.  \n  \n [!code-cs[Classic HttpApplicationState.Lock Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_7_1.cs)]\n [!code-vb[Classic HttpApplicationState.Lock Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_7_1.vb)]"
  syntax:
    content: public void Lock ();
    parameters: []
  overload: System.Web.HttpApplicationState.Lock*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Remove(System.String)
  id: Remove(System.String)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Remove(String)
  nameWithType: HttpApplicationState.Remove(String)
  fullName: System.Web.HttpApplicationState.Remove(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "删除已命名的对象从<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>集合。"
  remarks: ''
  example:
  - "The following example removes one application state variable from the collection.  \n  \n [!code-vb[Classic HttpApplicationState.Remove Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_1_1.vb)]\n [!code-cs[Classic HttpApplicationState.Remove Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_1_1.cs)]"
  syntax:
    content: public void Remove (string name);
    parameters:
    - id: name
      type: System.String
      description: "要从集合中移除的对象名称。"
  overload: System.Web.HttpApplicationState.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.RemoveAll
  id: RemoveAll
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: RemoveAll()
  nameWithType: HttpApplicationState.RemoveAll()
  fullName: System.Web.HttpApplicationState.RemoveAll()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "删除中的所有对象<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>集合。"
  remarks: "RemoveAll 是对<xref:System.Web.HttpApplicationState.Clear%2A>.</xref:System.Web.HttpApplicationState.Clear%2A>的内部调用"
  example:
  - "The following example removes all <xref:System.Web.HttpApplicationState> variables from the collection.  \n  \n [!code-cs[Classic HttpApplicationState.RemoveAll Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_2_1.cs)]\n [!code-vb[Classic HttpApplicationState.RemoveAll Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_2_1.vb)]"
  syntax:
    content: public void RemoveAll ();
    parameters: []
  overload: System.Web.HttpApplicationState.RemoveAll*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: HttpApplicationState.RemoveAt(Int32)
  fullName: System.Web.HttpApplicationState.RemoveAt(Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "删除<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>从索引集合的对象。"
  remarks: ''
  example:
  - "The following code example demonstrates how to insert two application variables into the collection, and then use the RemoveAt method to remove the first variable in a custom <xref:System.Web.HttpApplicationState> object.  \n  \n [!code-vb[HttpApplicationStateRemoveAt#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_4_1.aspx)]\n [!code-cs[HttpApplicationStateRemoveAt#1](~/add/codesnippet/csharp/m-system.web.httpapplica_4_1.aspx)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要移除的项的集合中的位置。"
  overload: System.Web.HttpApplicationState.RemoveAt*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.Set(System.String,System.Object)
  id: Set(System.String,System.Object)
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: Set(String,Object)
  nameWithType: HttpApplicationState.Set(String,Object)
  fullName: System.Web.HttpApplicationState.Set(String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "更新中的某个对象的值<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>集合。"
  remarks: ''
  example:
  - "The following example updates the value of an existing application state variable.  \n  \n [!code-cs[Classic HttpApplicationState.Set Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_5_1.cs)]\n [!code-vb[Classic HttpApplicationState.Set Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_5_1.vb)]"
  syntax:
    content: public void Set (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "要更新的对象名称。"
    - id: value
      type: System.Object
      description: "更新后的值的对象。"
  overload: System.Web.HttpApplicationState.Set*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.StaticObjects
  id: StaticObjects
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: StaticObjects
  nameWithType: HttpApplicationState.StaticObjects
  fullName: System.Web.HttpApplicationState.StaticObjects
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取声明的所有对象<xref uid=&quot;langword_csharp_&lt;object&gt;&quot; name=&quot;&lt;object&gt;&quot; href=&quot;&quot;></xref>范围为&quot;Application&quot;设置 ASP.NET 应用程序中的标记。"
  remarks: "在 Global.asax 文件中定义应用程序对象`<object runat=&quot;server&quot; scope=&quot;Application&quot;> </object>`标记。"
  example:
  - "The following example gets all application objects into a <xref:System.Web.HttpStaticObjectsCollection> variable and executes a routine only if the number of objects is greater than 0.  \n  \n [!code-cs[Classic HttpApplicationState.StaticObjects Example#1](~/add/codesnippet/csharp/p-system.web.httpapplica_2_1.cs)]\n [!code-vb[Classic HttpApplicationState.StaticObjects Example#1](~/add/codesnippet/visualbasic/p-system.web.httpapplica_2_1.vb)]"
  syntax:
    content: public System.Web.HttpStaticObjectsCollection StaticObjects { get; }
    return:
      type: System.Web.HttpStaticObjectsCollection
      description: "在页面上的对象的集合。"
  overload: System.Web.HttpApplicationState.StaticObjects*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplicationState.UnLock
  id: UnLock
  parent: System.Web.HttpApplicationState
  langs:
  - csharp
  name: UnLock()
  nameWithType: HttpApplicationState.UnLock()
  fullName: System.Web.HttpApplicationState.UnLock()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "取消锁定对访问<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>变量以便于访问同步。"
  remarks: "<xref:System.Web.HttpApplicationState>类执行自动的锁定和解锁与<xref:System.Web.HttpApplicationState.AllKeys%2A>和<xref:System.Web.HttpApplicationState.Count%2A>属性和<xref:System.Web.HttpApplicationState.Add%2A>， <xref:System.Web.HttpApplicationState.Clear%2A>， <xref:System.Web.HttpApplicationState.Get%2A>， <xref:System.Web.HttpApplicationState.GetKey%2A>， <xref:System.Web.HttpApplicationState.Remove%2A>，<xref:System.Web.HttpApplicationState.RemoveAt%2A>和<xref:System.Web.HttpApplicationState.Set%2A>方法。</xref:System.Web.HttpApplicationState.Set%2A> </xref:System.Web.HttpApplicationState.RemoveAt%2A> </xref:System.Web.HttpApplicationState.Remove%2A> </xref:System.Web.HttpApplicationState.GetKey%2A> </xref:System.Web.HttpApplicationState.Get%2A> </xref:System.Web.HttpApplicationState.Clear%2A> </xref:System.Web.HttpApplicationState.Add%2A> </xref:System.Web.HttpApplicationState.Count%2A> </xref:System.Web.HttpApplicationState.AllKeys%2A> </xref:System.Web.HttpApplicationState> 但是，显式使用<xref:System.Web.HttpApplicationState.Lock%2A>和解锁方法，当你具有一系列操作时可能会更有效。</xref:System.Web.HttpApplicationState.Lock%2A>"
  example:
  - "The following example uses the <xref:System.Web.HttpApplicationState.Lock%2A> method and UnLock method to prevent other sessions from changing the value of two application variables until after the local session has changed them.  \n  \n [!code-cs[Classic HttpApplicationState.Lock Example#1](~/add/codesnippet/csharp/m-system.web.httpapplica_6_1.cs)]\n [!code-vb[Classic HttpApplicationState.Lock Example#1](~/add/codesnippet/visualbasic/m-system.web.httpapplica_6_1.vb)]"
  syntax:
    content: public void UnLock ();
    parameters: []
  overload: System.Web.HttpApplicationState.UnLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Collections.Specialized.NameObjectCollectionBase
  isExternal: false
  name: System.Collections.Specialized.NameObjectCollectionBase
- uid: System.Web.HttpApplicationState.Add(System.String,System.Object)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Add(String,Object)
  nameWithType: HttpApplicationState.Add(String,Object)
  fullName: System.Web.HttpApplicationState.Add(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.HttpApplicationState.AllKeys
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: AllKeys
  nameWithType: HttpApplicationState.AllKeys
  fullName: System.Web.HttpApplicationState.AllKeys
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpApplicationState.Clear
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Clear()
  nameWithType: HttpApplicationState.Clear()
  fullName: System.Web.HttpApplicationState.Clear()
- uid: System.Web.HttpApplicationState.Contents
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Contents
  nameWithType: HttpApplicationState.Contents
  fullName: System.Web.HttpApplicationState.Contents
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.HttpApplicationState.Count
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Count
  nameWithType: HttpApplicationState.Count
  fullName: System.Web.HttpApplicationState.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.HttpApplicationState.Get(System.Int32)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Get(Int32)
  nameWithType: HttpApplicationState.Get(Int32)
  fullName: System.Web.HttpApplicationState.Get(Int32)
- uid: System.Web.HttpApplicationState.Get(System.String)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Get(String)
  nameWithType: HttpApplicationState.Get(String)
  fullName: System.Web.HttpApplicationState.Get(String)
- uid: System.Web.HttpApplicationState.GetKey(System.Int32)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: GetKey(Int32)
  nameWithType: HttpApplicationState.GetKey(Int32)
  fullName: System.Web.HttpApplicationState.GetKey(Int32)
- uid: System.Web.HttpApplicationState.Item(System.Int32)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Item(Int32)
  nameWithType: HttpApplicationState.Item(Int32)
  fullName: System.Web.HttpApplicationState.Item(Int32)
- uid: System.Web.HttpApplicationState.Item(System.String)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Item(String)
  nameWithType: HttpApplicationState.Item(String)
  fullName: System.Web.HttpApplicationState.Item(String)
- uid: System.Web.HttpApplicationState.Lock
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Lock()
  nameWithType: HttpApplicationState.Lock()
  fullName: System.Web.HttpApplicationState.Lock()
- uid: System.Web.HttpApplicationState.Remove(System.String)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Remove(String)
  nameWithType: HttpApplicationState.Remove(String)
  fullName: System.Web.HttpApplicationState.Remove(String)
- uid: System.Web.HttpApplicationState.RemoveAll
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: RemoveAll()
  nameWithType: HttpApplicationState.RemoveAll()
  fullName: System.Web.HttpApplicationState.RemoveAll()
- uid: System.Web.HttpApplicationState.RemoveAt(System.Int32)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: HttpApplicationState.RemoveAt(Int32)
  fullName: System.Web.HttpApplicationState.RemoveAt(Int32)
- uid: System.Web.HttpApplicationState.Set(System.String,System.Object)
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Set(String,Object)
  nameWithType: HttpApplicationState.Set(String,Object)
  fullName: System.Web.HttpApplicationState.Set(String,Object)
- uid: System.Web.HttpApplicationState.StaticObjects
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: StaticObjects
  nameWithType: HttpApplicationState.StaticObjects
  fullName: System.Web.HttpApplicationState.StaticObjects
- uid: System.Web.HttpStaticObjectsCollection
  parent: System.Web
  isExternal: false
  name: HttpStaticObjectsCollection
  nameWithType: HttpStaticObjectsCollection
  fullName: System.Web.HttpStaticObjectsCollection
- uid: System.Web.HttpApplicationState.UnLock
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: UnLock()
  nameWithType: HttpApplicationState.UnLock()
  fullName: System.Web.HttpApplicationState.UnLock()
- uid: System.Web.HttpApplicationState.Add*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Add
  nameWithType: HttpApplicationState.Add
- uid: System.Web.HttpApplicationState.AllKeys*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: AllKeys
  nameWithType: HttpApplicationState.AllKeys
- uid: System.Web.HttpApplicationState.Clear*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Clear
  nameWithType: HttpApplicationState.Clear
- uid: System.Web.HttpApplicationState.Contents*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Contents
  nameWithType: HttpApplicationState.Contents
- uid: System.Web.HttpApplicationState.Count*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Count
  nameWithType: HttpApplicationState.Count
- uid: System.Web.HttpApplicationState.Get*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Get
  nameWithType: HttpApplicationState.Get
- uid: System.Web.HttpApplicationState.GetKey*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: GetKey
  nameWithType: HttpApplicationState.GetKey
- uid: System.Web.HttpApplicationState.Item*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Item
  nameWithType: HttpApplicationState.Item
- uid: System.Web.HttpApplicationState.Lock*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Lock
  nameWithType: HttpApplicationState.Lock
- uid: System.Web.HttpApplicationState.Remove*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Remove
  nameWithType: HttpApplicationState.Remove
- uid: System.Web.HttpApplicationState.RemoveAll*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: RemoveAll
  nameWithType: HttpApplicationState.RemoveAll
- uid: System.Web.HttpApplicationState.RemoveAt*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: RemoveAt
  nameWithType: HttpApplicationState.RemoveAt
- uid: System.Web.HttpApplicationState.Set*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: Set
  nameWithType: HttpApplicationState.Set
- uid: System.Web.HttpApplicationState.StaticObjects*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: StaticObjects
  nameWithType: HttpApplicationState.StaticObjects
- uid: System.Web.HttpApplicationState.UnLock*
  parent: System.Web.HttpApplicationState
  isExternal: false
  name: UnLock
  nameWithType: HttpApplicationState.UnLock
