### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionInterop
  id: TransactionInterop
  children:
  - System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  - System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  - System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  - System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  - System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  - System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  - System.Transactions.TransactionInterop.GetWhereabouts
  - System.Transactions.TransactionInterop.PromoterTypeDtc
  langs:
  - csharp
  name: TransactionInterop
  nameWithType: TransactionInterop
  fullName: System.Transactions.TransactionInterop
  type: Class
  summary: "促进之间交互<xref href=&quot;System.Transactions&quot;></xref>和以前编写与 MSDTC、 COM + 中，进行交互的组件或<xref href=&quot;System.EnterpriseServices&quot;> </xref>。 此类不能被继承。"
  remarks: "此类提供用于事务传播方法。 此过程的工作原理的详细信息，请参阅[事务传播](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/b09541e6-4baf-4e37-b879-62884fbb0969.asp)。       使用此类提供的方法，你可以进行两种类型的事务传播，导出/导入 （推送模型） 和传输器/接收器 （拉取模型）。       导出/导入 （推送模型） 传播涉及以下步骤，1。  在远程计算机上的&quot;行踪&quot;这台计算机的事务管理器通过调用获取<xref:System.Transactions.TransactionInterop.GetWhereabouts%2A>方法。</xref:System.Transactions.TransactionInterop.GetWhereabouts%2A> 然后，你可以缓存此条供将来使用客户端计算机上的信息。      2.  发送包含客户端计算机使用任何首选的方法 3 到行踪的数据。  在客户端计算机上使用行踪到远程计算机&quot;导出&quot;事务并生成事务&quot;cookie&quot;。  这可通过调用<xref:System.Transactions.TransactionInterop.GetExportCookie%2A>并传递在远程计算机的行踪。</xref:System.Transactions.TransactionInterop.GetExportCookie%2A>      4.  将包含事务的数据&quot;cookie&quot;发送到远程计算机使用任何首选的方法 5。  在远程计算机，使用事务&quot;cookie&quot;通过调用获取的客户端事务的克隆<xref:System.Transactions.TransactionInterop.GetTransactionFromExportCookie%2A>方法。</xref:System.Transactions.TransactionInterop.GetTransactionFromExportCookie%2A>      6.  在远程计算机上使用克隆的事务登记资源管理器使用<xref:System.Transactions.Transaction.EnlistVolatile%2A>或<xref:System.Transactions.Transaction.EnlistDurable%2A>方法的<xref:System.Transactions.Transaction>类。</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.EnlistDurable%2A> </xref:System.Transactions.Transaction.EnlistVolatile%2A>       传输器/接收器 （拉取模型） 传播涉及以下步骤、-在客户端计算机上使用的事务调用而生成相应的&quot;传播标记&quot; <xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>-发送的数据包含在事务中的&quot;传播标记&quot;，到远程计算机的远程计算机上使用任何首选的方法-使用&quot;传播标记&quot;若要获取的客户端克隆事务通过调用<xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A>传输器/接收器模型提供更好的性能方案事务令牌发送到远程计算机的位置但远程计算机无法使用它来获得事务。</xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A> </xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>  这是因为事务不会传播直到<xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A>称为。</xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken%2A> 另一个优点是传播标记可以发送到任何远程计算机中，尽管可以提供行踪的计算机上仅使用导出 cookie。       但是，你还应注意，远程事务管理器行踪封装在所有的传播令牌，使其大于导出/导入模型中的相应事务 cookie。       **请注意**此类型使用<xref:System.Security.Permissions.SecurityAction>，防止它不受信任的代码中调用; 但是，仅限直接调用方需要拥有`FullTrust`权限集。</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static class TransactionInterop
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  id: GetDtcTransaction(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetDtcTransaction(Transaction)
  nameWithType: TransactionInterop.GetDtcTransaction(Transaction)
  fullName: System.Transactions.TransactionInterop.GetDtcTransaction(Transaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取<xref href=&quot;System.Transactions.IDtcTransaction&quot;></xref>实例，它表示<xref href=&quot;System.Transactions.Transaction&quot;> </xref>。"
  syntax:
    content: public static System.Transactions.IDtcTransaction GetDtcTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;> </xref>实例要封送处理。"
    return:
      type: System.Transactions.IDtcTransaction
      description: "<xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref>实例，它表示<xref href=&quot;System.Transactions.Transaction&quot;> </xref>。  <xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref>实例是符合的非托管形式[itransaction::](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/d40264be-f9b2-4044-aac6-84b43e5be666.asp) msdtc 以及托管形式使用<xref href=&quot;System.EnterpriseServices.ITransaction&quot;></xref>由<xref href=&quot;System.EnterpriseServices&quot;> </xref>。"
  overload: System.Transactions.TransactionInterop.GetDtcTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  id: GetExportCookie(System.Transactions.Transaction,System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetExportCookie(Transaction,Byte[])
  nameWithType: TransactionInterop.GetExportCookie(Transaction,Byte[])
  fullName: System.Transactions.TransactionInterop.GetExportCookie(Transaction,Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "将事务对象转换为导出事务 cookie。"
  remarks: "如果你想要将某个事务导出，请调用此方法。 `transaction`传递以及封送到事务 cookie。 然后，你可以将事务 cookie 发送到目标进程中。 这被称为进程或系统之间传播事务。 传播被视为可推送模型，其中将该本地事务推送到目标。  因此，信息包含在`whereabouts`必须描述目标事务管理器。       有关不同传播模型的详细信息，请参阅备注部分的<xref:System.Transactions.TransactionInterop>类。</xref:System.Transactions.TransactionInterop>"
  syntax:
    content: public static byte[] GetExportCookie (System.Transactions.Transaction transaction, byte[] whereabouts);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "<xref href=&quot;System.Transactions.Transaction&quot;> </xref>进行封送对象。"
    - id: whereabouts
      type: System.Byte[]
      description: "描述目标事务管理器的位置地址。 这允许两个事务管理器相互通信，从而将传播到另一个事务从一个系统。"
    return:
      type: System.Byte[]
      description: "表示指定的导出事务 cookie <xref href=&quot;System.Transactions.Transaction&quot;> </xref>对象。"
  overload: System.Transactions.TransactionInterop.GetExportCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  id: GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromDtcTransaction(IDtcTransaction)
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  fullName: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "生成<xref href=&quot;System.Transactions.Transaction&quot;></xref>从指定<xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref>。"
  remarks: "`transactionNative`的非托管形式与兼容[itransaction::](http://msdn.microsoft.com/library/default.asp?url=/library/cossdk/html/d40264be-f9b2-4044-aac6-84b43e5be666.asp) msdtc 以及<xref:System.EnterpriseServices.ITransaction>由<xref:System.EnterpriseServices>.</xref:System.EnterpriseServices></xref:System.EnterpriseServices.ITransaction>的托管形式使用"
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromDtcTransaction (System.Transactions.IDtcTransaction transactionNative);
    parameters:
    - id: transactionNative
      type: System.Transactions.IDtcTransaction
      description: "<xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref>进行封送对象。"
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;> </xref>实例，表示给定<xref href=&quot;System.Transactions.IDtcTransaction&quot;> </xref>。"
  overload: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  id: GetTransactionFromExportCookie(System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromExportCookie(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromExportCookie(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "生成<xref href=&quot;System.Transactions.Transaction&quot;></xref>从指定的导出 cookie。"
  remarks: "有关不同传播模型的详细信息，请参阅备注部分的<xref:System.Transactions.TransactionInterop>类。</xref:System.Transactions.TransactionInterop>"
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromExportCookie (byte[] cookie);
    parameters:
    - id: cookie
      type: System.Byte[]
      description: "事务对象封送处理的形式。"
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;> </xref>从指定的导出 cookie。"
  overload: System.Transactions.TransactionInterop.GetTransactionFromExportCookie*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  id: GetTransactionFromTransmitterPropagationToken(System.Byte[])
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransactionFromTransmitterPropagationToken(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "生成<xref href=&quot;System.Transactions.Transaction&quot;></xref>实例从指定的传输器传播标记。"
  remarks: "此方法，与一起<xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>方法，为&quot;pull&quot;传播，在其中事务，则&quot;拉取&quot;从远程计算机时调用此方法来拆收事务提供功能。</xref:System.Transactions.TransactionInterop.GetTransmitterPropagationToken%2A>       有关不同传播模型的详细信息，请参阅备注部分的<xref:System.Transactions.TransactionInterop>类。</xref:System.Transactions.TransactionInterop>"
  syntax:
    content: public static System.Transactions.Transaction GetTransactionFromTransmitterPropagationToken (byte[] propagationToken);
    parameters:
    - id: propagationToken
      type: System.Byte[]
      description: "表示事务的传播标记。"
    return:
      type: System.Transactions.Transaction
      description: "A <xref href=&quot;System.Transactions.Transaction&quot;> </xref>从指定的传输器传播标记。"
  overload: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*
  exceptions:
  - type: System.Transactions.TransactionManagerCommunicationException
    commentId: T:System.Transactions.TransactionManagerCommunicationException
    description: "事务的反序列化失败，因为无法联系事务管理器。 原因可能是网络防火墙或安全设置。"
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  id: GetTransmitterPropagationToken(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetTransmitterPropagationToken(Transaction)
  nameWithType: TransactionInterop.GetTransmitterPropagationToken(Transaction)
  fullName: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(Transaction)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "生成传播标记指定<xref href=&quot;System.Transactions.Transaction&quot;> </xref>。"
  syntax:
    content: public static byte[] GetTransmitterPropagationToken (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "要封送处理到传播标记中的事务。"
    return:
      type: System.Byte[]
      description: "此方法，与一起<xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*>方法，提供了用于传输器/接收器传播，在其中事务，则&quot;拉取&quot;从远程计算机时调用后者来拆收事务功能。</xref:System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*>       有关不同传播模型的详细信息，请参阅备注部分的<xref href=&quot;System.Transactions.TransactionInterop&quot;></xref>类。"
  overload: System.Transactions.TransactionInterop.GetTransmitterPropagationToken*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.GetWhereabouts
  id: GetWhereabouts
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: GetWhereabouts()
  nameWithType: TransactionInterop.GetWhereabouts()
  fullName: System.Transactions.TransactionInterop.GetWhereabouts()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取了 Whereabouts 分布式的事务管理器<xref href=&quot;System.Transactions&quot;></xref>使用。"
  remarks: "行踪包含描述事务管理器的位置的地址。 这允许两个事务管理器相互通信，从而将传播到另一个事务从一个系统。 此方法返回的信息可以用于提供位置信息，推送模型使用的事务传播<xref:System.Transactions.TransactionInterop.GetExportCookie%2A>方法。</xref:System.Transactions.TransactionInterop.GetExportCookie%2A>       有关不同传播模型的详细信息，请参阅备注部分的<xref:System.Transactions.TransactionInterop>类。</xref:System.Transactions.TransactionInterop>"
  syntax:
    content: public static byte[] GetWhereabouts ();
    parameters: []
    return:
      type: System.Byte[]
      description: "分布式的事务管理器行踪， <xref href=&quot;System.Transactions&quot;> </xref>使用。"
  overload: System.Transactions.TransactionInterop.GetWhereabouts*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionInterop.PromoterTypeDtc
  id: PromoterTypeDtc
  parent: System.Transactions.TransactionInterop
  langs:
  - csharp
  name: PromoterTypeDtc
  nameWithType: TransactionInterop.PromoterTypeDtc
  fullName: System.Transactions.TransactionInterop.PromoterTypeDtc
  type: Field
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "分布式的事务处理器的类型。"
  remarks: "此值用于`Transaction.PromoterType`属性，如果事务或将提升为 MSDTC 和`Transaction.GetPromotedToken`方法将返回的 MSDTC 事务传播令牌`byte[]`结果。"
  syntax:
    content: public static readonly Guid PromoterTypeDtc;
    return:
      type: System.Guid
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Transactions.TransactionManagerCommunicationException
  parent: System.Transactions
  isExternal: false
  name: TransactionManagerCommunicationException
  nameWithType: TransactionManagerCommunicationException
  fullName: System.Transactions.TransactionManagerCommunicationException
- uid: System.Transactions.TransactionInterop.GetDtcTransaction(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetDtcTransaction(Transaction)
  nameWithType: TransactionInterop.GetDtcTransaction(Transaction)
  fullName: System.Transactions.TransactionInterop.GetDtcTransaction(Transaction)
- uid: System.Transactions.IDtcTransaction
  parent: System.Transactions
  isExternal: false
  name: IDtcTransaction
  nameWithType: IDtcTransaction
  fullName: System.Transactions.IDtcTransaction
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionInterop.GetExportCookie(System.Transactions.Transaction,System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetExportCookie(Transaction,Byte[])
  nameWithType: TransactionInterop.GetExportCookie(Transaction,Byte[])
  fullName: System.Transactions.TransactionInterop.GetExportCookie(Transaction,Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(System.Transactions.IDtcTransaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromDtcTransaction(IDtcTransaction)
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
  fullName: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction(IDtcTransaction)
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromExportCookie(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromExportCookie(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromExportCookie(Byte[])
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(System.Byte[])
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromTransmitterPropagationToken(Byte[])
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
  fullName: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken(Byte[])
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(System.Transactions.Transaction)
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransmitterPropagationToken(Transaction)
  nameWithType: TransactionInterop.GetTransmitterPropagationToken(Transaction)
  fullName: System.Transactions.TransactionInterop.GetTransmitterPropagationToken(Transaction)
- uid: System.Transactions.TransactionInterop.GetWhereabouts
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetWhereabouts()
  nameWithType: TransactionInterop.GetWhereabouts()
  fullName: System.Transactions.TransactionInterop.GetWhereabouts()
- uid: System.Transactions.TransactionInterop.PromoterTypeDtc
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: PromoterTypeDtc
  nameWithType: TransactionInterop.PromoterTypeDtc
  fullName: System.Transactions.TransactionInterop.PromoterTypeDtc
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionInterop.GetDtcTransaction*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetDtcTransaction
  nameWithType: TransactionInterop.GetDtcTransaction
- uid: System.Transactions.TransactionInterop.GetExportCookie*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetExportCookie
  nameWithType: TransactionInterop.GetExportCookie
- uid: System.Transactions.TransactionInterop.GetTransactionFromDtcTransaction*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromDtcTransaction
  nameWithType: TransactionInterop.GetTransactionFromDtcTransaction
- uid: System.Transactions.TransactionInterop.GetTransactionFromExportCookie*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromExportCookie
  nameWithType: TransactionInterop.GetTransactionFromExportCookie
- uid: System.Transactions.TransactionInterop.GetTransactionFromTransmitterPropagationToken*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransactionFromTransmitterPropagationToken
  nameWithType: TransactionInterop.GetTransactionFromTransmitterPropagationToken
- uid: System.Transactions.TransactionInterop.GetTransmitterPropagationToken*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetTransmitterPropagationToken
  nameWithType: TransactionInterop.GetTransmitterPropagationToken
- uid: System.Transactions.TransactionInterop.GetWhereabouts*
  parent: System.Transactions.TransactionInterop
  isExternal: false
  name: GetWhereabouts
  nameWithType: TransactionInterop.GetWhereabouts
