### YamlMime:ManagedReference
items:
- uid: System.Data.IDataRecord
  id: IDataRecord
  children:
  - System.Data.IDataRecord.FieldCount
  - System.Data.IDataRecord.GetBoolean(System.Int32)
  - System.Data.IDataRecord.GetByte(System.Int32)
  - System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  - System.Data.IDataRecord.GetChar(System.Int32)
  - System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  - System.Data.IDataRecord.GetData(System.Int32)
  - System.Data.IDataRecord.GetDataTypeName(System.Int32)
  - System.Data.IDataRecord.GetDateTime(System.Int32)
  - System.Data.IDataRecord.GetDecimal(System.Int32)
  - System.Data.IDataRecord.GetDouble(System.Int32)
  - System.Data.IDataRecord.GetFieldType(System.Int32)
  - System.Data.IDataRecord.GetFloat(System.Int32)
  - System.Data.IDataRecord.GetGuid(System.Int32)
  - System.Data.IDataRecord.GetInt16(System.Int32)
  - System.Data.IDataRecord.GetInt32(System.Int32)
  - System.Data.IDataRecord.GetInt64(System.Int32)
  - System.Data.IDataRecord.GetName(System.Int32)
  - System.Data.IDataRecord.GetOrdinal(System.String)
  - System.Data.IDataRecord.GetString(System.Int32)
  - System.Data.IDataRecord.GetValue(System.Int32)
  - System.Data.IDataRecord.GetValues(System.Object[])
  - System.Data.IDataRecord.IsDBNull(System.Int32)
  - System.Data.IDataRecord.Item(System.Int32)
  - System.Data.IDataRecord.Item(System.String)
  langs:
  - csharp
  name: IDataRecord
  nameWithType: IDataRecord
  fullName: System.Data.IDataRecord
  type: Interface
  summary: "提供对中的每个行的列值的访问<xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref>，并由.NET Framework 数据提供程序访问关系数据库实现。"
  remarks: "<xref:System.Data.IDataReader>和 IDataRecord 接口可以使继承类实现`DataReader`类</xref:System.Data.IDataReader> 这提供了一种读取一个或多个结果集只进流。 有关详细信息`DataReader`类，请参阅[使用 DataReader 检索数据](~/add/includes/ajax-current-ext-md.md)。       应用程序不会直接创建 IDataRecord 接口的实例，但创建继承 IDataRecord 的类的实例。 通常情况下，你执行此操作通过获取`DataReader`通过`ExecuteReader`方法`Command`对象。       继承 IDataRecord 的类必须实现所有继承的成员，且通常定义其他成员来添加提供程序特定的功能。       提供程序实现`DataReader`所需公开公共语言运行时 (CLR) 类型中的数据。 对于 CLR 中不包括某些类型定义了类型强制。 这些值可能作为替代的类型符合与 CLR 类型进行访问。 例如下, 表列出从 OLE DB 数据类型到 CLR 类型，在括号中的其他类型的建议的映射。      |OLE DB 类型 |CLR 类型 |  |-----------------|--------------|  |DBTYPE_BOOL |Int16 |  |DBTYPE_BSTR | 字符串 |  |DBTYPE_BYTES | byte [] |  |DBTYPE_CY |十进制 |  |DBTYPE_DATE |DateTime |  |DBTYPE_DBDATE |DateTime |  |DBTYPE_DBTIME |DateTime |  |DBTYPE_DBTIMESTAMP |DateTime |  |DBTYPE_DECIMAL |十进制 |  |DBTYPE_EMPTY | null |  |DBTYPE_ERROR |ExternalException |  |DBTYPE_FILETIME |DateTime |  |DBTYPE_GUID |Guid |  |DBTYPE_HCHAPTER | 不支持 |  |DBTYPE_I1 |SByte |  |DBTYPE_I2 |Int16 |  |DBTYPE_I4 |Int32 |  |是 DBTYPE_I8 |Int64 |  |DBTYPE_IDISPATCH | 对象 |  |DBTYPE_IUNKNOWN | 对象 |  |DBTYPE_NULL |DBNull.Value|  |DBTYPE_NUMERIC |十进制 |  |DBTYPE_PROPVARIANT | 对象 |  |DBTYPE_R4 |单个 |  |DBTYPE_R8 |Double |  |DBTYPE_STR | 字符串 |  |以外，dbtype_udt 还 | 不支持 |  |DBTYPE_UI1 | 字节 (Int16) |  |DBTYPE_UI2 |UInt16 (Int32) |  |DBTYPE_UI4 |UInt32 (Int64) |  |DBTYPE_UI8 |UInt64 （小数） |  |DBTYPE_VARIANT | 对象 |  |DBTYPE_VARNUMERIC | 不支持 |  |DBTYPE_WSTR | 字符串 |"
  example:
  - "The following example creates instances of the derived classes, <xref:System.Data.SqlClient.SqlConnection>, <xref:System.Data.SqlClient.SqlCommand>, and <xref:System.Data.SqlClient.SqlDataReader>. The example reads through the data, writing it out to the console. Finally, the example closes the <xref:System.Data.SqlClient.SqlDataReader>, and then the <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-cs[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/csharp/t-system.data.idatarecord_1.cs)]\n [!code-vb[Classic WebData SqlDataReader.Read Example#1](~/add/codesnippet/visualbasic/t-system.data.idatarecord_1.vb)]"
  syntax:
    content: public interface IDataRecord
  implements: []
  platform:
  - net462
- uid: System.Data.IDataRecord.FieldCount
  id: FieldCount
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: FieldCount
  nameWithType: IDataRecord.FieldCount
  fullName: System.Data.IDataRecord.FieldCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取当前行中的列数。"
  remarks: "执行不返回行的查询后 (例如，使用<xref:System.Data.IDbCommand.ExecuteNonQuery%2A>方法)，FieldCount 返回-1。</xref:System.Data.IDbCommand.ExecuteNonQuery%2A>"
  syntax:
    content: public int FieldCount { get; }
    return:
      type: System.Int32
      description: "如果未放在有效的记录集，0;否则为中的当前记录的列数。 默认值为-1。"
  overload: System.Data.IDataRecord.FieldCount*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataRecord.GetBoolean(System.Int32)
  id: GetBoolean(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetBoolean(Int32)
  nameWithType: IDataRecord.GetBoolean(Int32)
  fullName: System.Data.IDataRecord.GetBoolean(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定列的值为布尔值。"
  remarks: "不进行任何转换。 因此，检索的数据必须已经是一个布尔值;否则将生成异常。"
  syntax:
    content: public bool GetBoolean (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Boolean
      description: "列的值。"
  overload: System.Data.IDataRecord.GetBoolean*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetByte(System.Int32)
  id: GetByte(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetByte(Int32)
  nameWithType: IDataRecord.GetByte(Int32)
  fullName: System.Data.IDataRecord.GetByte(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定列的 8 位无符号的整数值。"
  syntax:
    content: public byte GetByte (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Byte
      description: "指定列的 8 位无符号的整数值。"
  overload: System.Data.IDataRecord.GetByte*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  id: GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: IDataRecord.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.IDataRecord.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "读取字节的流的指定的列偏移量到缓冲区视为数组，给定的缓冲区偏移量处开始。"
  remarks: "GetBytes 返回的字段中的可用字节数。 通常它是字段的确切长度。 但是，返回的版本号可能会小于该字段的真实长度如果`GetBytes`具有用于从字段中获取字节。       如果传递的缓冲区，则`null`，GetBytes 返回的行的长度以字节为单位。       不进行任何转换;因此检索到的数据必须已经是字节数组。"
  syntax:
    content: public long GetBytes (int i, long fieldOffset, byte[] buffer, int bufferoffset, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "从零开始的列序号。"
    - id: fieldOffset
      type: System.Int64
      description: "中从其开始读取的操作的字段的索引。"
    - id: buffer
      type: System.Byte[]
      description: "要读取的字节流缓冲区。"
    - id: bufferoffset
      type: System.Int32
      description: "为索引`buffer`开始读取的操作。"
    - id: length
      type: System.Int32
      description: "要读取的字节数。"
    return:
      type: System.Int64
      description: "实际读取的字节数。"
  overload: System.Data.IDataRecord.GetBytes*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetChar(System.Int32)
  id: GetChar(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetChar(Int32)
  nameWithType: IDataRecord.GetChar(Int32)
  fullName: System.Data.IDataRecord.GetChar(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定列的字符值。"
  syntax:
    content: public char GetChar (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "从零开始的列序号。"
    return:
      type: System.Char
      description: "指定列的字符值。"
  overload: System.Data.IDataRecord.GetChar*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  id: GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: IDataRecord.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.IDataRecord.GetChars(Int32,Int64,Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "读取流的字符从指定的列偏移量到缓冲区视为数组，给定的缓冲区偏移量处开始。"
  remarks: "GetChars 返回的字段中的可用的字符数。 通常它是字段的确切长度。 但是，返回的版本号可能会小于该字段的确切长度如果`GetChars`具有用于从字段中获取字符。       如果传递的缓冲区，则`null`，`GetChars`以字符为单位返回字段的长度。       不进行任何转换;因此检索到的数据必须已经是字符数组。"
  syntax:
    content: public long GetChars (int i, long fieldoffset, char[] buffer, int bufferoffset, int length);
    parameters:
    - id: i
      type: System.Int32
      description: "从零开始的列序号。"
    - id: fieldoffset
      type: System.Int64
      description: "中从其开始读取的操作的行的索引。"
    - id: buffer
      type: System.Char[]
      description: "要读取的字节流缓冲区。"
    - id: bufferoffset
      type: System.Int32
      description: "为索引`buffer`开始读取的操作。"
    - id: length
      type: System.Int32
      description: "要读取的字节数。"
    return:
      type: System.Int64
      description: "实际读取的字符数。"
  overload: System.Data.IDataRecord.GetChars*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetData(System.Int32)
  id: GetData(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetData(Int32)
  nameWithType: IDataRecord.GetData(Int32)
  fullName: System.Data.IDataRecord.GetData(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "返回<xref href=&quot;System.Data.IDataReader&quot;></xref>为指定的列序号。"
  syntax:
    content: public System.Data.IDataReader GetData (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Data.IDataReader
      description: "<xref href=&quot;System.Data.IDataReader&quot;> </xref>为指定的列序号。"
  overload: System.Data.IDataRecord.GetData*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)
  id: GetDataTypeName(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetDataTypeName(Int32)
  nameWithType: IDataRecord.GetDataTypeName(Int32)
  fullName: System.Data.IDataRecord.GetDataTypeName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定的字段的数据类型信息。"
  remarks: "数据类型信息可能有所不同返回的类型信息`GetFieldType`，尤其是其中基础数据类型不会映射一对一语言支持的运行时类型。 (例如，`DataTypeName`可能是&quot;整数&quot;，而`Type.Name`可能&quot;Int32&quot;。)"
  syntax:
    content: public string GetDataTypeName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.String
      description: "数据类型指定字段的信息。"
  overload: System.Data.IDataRecord.GetDataTypeName*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetDateTime(System.Int32)
  id: GetDateTime(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetDateTime(Int32)
  nameWithType: IDataRecord.GetDateTime(Int32)
  fullName: System.Data.IDataRecord.GetDateTime(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定的字段的日期和时间数据值。"
  syntax:
    content: public DateTime GetDateTime (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.DateTime
      description: "日期和时间数据值的指定字段。"
  overload: System.Data.IDataRecord.GetDateTime*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetDecimal(System.Int32)
  id: GetDecimal(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetDecimal(Int32)
  nameWithType: IDataRecord.GetDecimal(Int32)
  fullName: System.Data.IDataRecord.GetDecimal(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定的字段的固定位置数值。"
  syntax:
    content: public decimal GetDecimal (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Decimal
      description: "指定字段的固定位置数字值。"
  overload: System.Data.IDataRecord.GetDecimal*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetDouble(System.Int32)
  id: GetDouble(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetDouble(Int32)
  nameWithType: IDataRecord.GetDouble(Int32)
  fullName: System.Data.IDataRecord.GetDouble(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定字段的双精度浮点数。"
  syntax:
    content: public double GetDouble (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Double
      description: "双精度浮点数字的指定字段。"
  overload: System.Data.IDataRecord.GetDouble*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetFieldType(System.Int32)
  id: GetFieldType(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetFieldType(Int32)
  nameWithType: IDataRecord.GetFieldType(Int32)
  fullName: System.Data.IDataRecord.GetFieldType(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取<xref:System.Type>对应的一种<xref:System.Object>，应由<xref:System.Data.IDataRecord.GetValue*>.</xref:System.Data.IDataRecord.GetValue*>返回</xref:System.Object>的信息</xref:System.Type>"
  remarks: "可以使用此信息以提高性能，该值指示要调用的强类型化访问器。 (例如，使用`GetInt32`大致是比使用更快&10; 倍`GetValue`。)"
  syntax:
    content: public Type GetFieldType (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Type
      description: "<xref:System.Type>信息对应的一种<xref:System.Object>将从<xref:System.Data.IDataRecord.GetValue*>.</xref:System.Data.IDataRecord.GetValue*> </xref:System.Object> </xref:System.Type>"
  overload: System.Data.IDataRecord.GetFieldType*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetFloat(System.Int32)
  id: GetFloat(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetFloat(Int32)
  nameWithType: IDataRecord.GetFloat(Int32)
  fullName: System.Data.IDataRecord.GetFloat(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定字段的单精度浮点数。"
  syntax:
    content: public float GetFloat (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Single
      description: "单精度浮点数字的指定字段。"
  overload: System.Data.IDataRecord.GetFloat*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetGuid(System.Int32)
  id: GetGuid(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetGuid(Int32)
  nameWithType: IDataRecord.GetGuid(Int32)
  fullName: System.Data.IDataRecord.GetGuid(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "返回指定的字段的 GUID 值。"
  syntax:
    content: public Guid GetGuid (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Guid
      description: "指定字段的 GUID 值。"
  overload: System.Data.IDataRecord.GetGuid*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetInt16(System.Int32)
  id: GetInt16(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetInt16(Int32)
  nameWithType: IDataRecord.GetInt16(Int32)
  fullName: System.Data.IDataRecord.GetInt16(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定的字段的 16 位有符号的整数值。"
  syntax:
    content: public short GetInt16 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Int16
      description: "指定字段的 16 位有符号的整数值。"
  overload: System.Data.IDataRecord.GetInt16*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetInt32(System.Int32)
  id: GetInt32(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetInt32(Int32)
  nameWithType: IDataRecord.GetInt32(Int32)
  fullName: System.Data.IDataRecord.GetInt32(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定的字段的 32 位有符号的整数值。"
  syntax:
    content: public int GetInt32 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Int32
      description: "指定字段的 32 位有符号的整数值。"
  overload: System.Data.IDataRecord.GetInt32*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetInt64(System.Int32)
  id: GetInt64(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetInt64(Int32)
  nameWithType: IDataRecord.GetInt64(Int32)
  fullName: System.Data.IDataRecord.GetInt64(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定的字段的 64 位有符号的整数值。"
  syntax:
    content: public long GetInt64 (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Int64
      description: "指定字段的 64 位有符号的整数值。"
  overload: System.Data.IDataRecord.GetInt64*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetName(System.Int32)
  id: GetName(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetName(Int32)
  nameWithType: IDataRecord.GetName(Int32)
  fullName: System.Data.IDataRecord.GetName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取要查找的字段的名称。"
  syntax:
    content: public string GetName (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.String
      description: "名称的字段或空字符串 (&quot;&quot;)，如果没有要返回的值。"
  overload: System.Data.IDataRecord.GetName*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetOrdinal(System.String)
  id: GetOrdinal(System.String)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetOrdinal(String)
  nameWithType: IDataRecord.GetOrdinal(String)
  fullName: System.Data.IDataRecord.GetOrdinal(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "返回命名的字段的索引。"
  remarks: "`GetOrdinal`第一次执行区分大小写的查找。 如果失败，进行第二个的不区分大小写搜索。 `GetOrdinal`不区分假名宽度。 如果未找到命名的字段的索引，`IndexOutOfRangeException`引发。       由于基于序号的查找，比命名查找更为有效，它是效率不高调用`GetOrdinal`在循环中。 通过调用来节省时间`GetOrdinal`一次并将结果分配给在循环内使用一个整数变量。"
  example:
  - "The following example demonstrates how to use the inherited <xref:System.Data.Odbc.OdbcDataReader.GetOrdinal%2A> method.  \n  \n [!code-vb[Classic WebData OdbcDataReader.GetOrdinal#1](~/add/codesnippet/visualbasic/m-system.data.idatarecor_1.vb)]\n [!code-cs[Classic WebData OdbcDataReader.GetOrdinal#1](~/add/codesnippet/csharp/m-system.data.idatarecor_1.cs)]"
  syntax:
    content: public int GetOrdinal (string name);
    parameters:
    - id: name
      type: System.String
      description: "要查找的字段的名称。"
    return:
      type: System.Int32
      description: "命名的字段的索引。"
  overload: System.Data.IDataRecord.GetOrdinal*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataRecord.GetString(System.Int32)
  id: GetString(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetString(Int32)
  nameWithType: IDataRecord.GetString(Int32)
  fullName: System.Data.IDataRecord.GetString(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取指定的字段的字符串值。"
  syntax:
    content: public string GetString (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.String
      description: "指定字段的字符串值。"
  overload: System.Data.IDataRecord.GetString*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetValue(System.Int32)
  id: GetValue(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetValue(Int32)
  nameWithType: IDataRecord.GetValue(Int32)
  fullName: System.Data.IDataRecord.GetValue(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "返回指定的字段的值。"
  syntax:
    content: public object GetValue (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Object
      description: "<xref:System.Object>其中将包含返回后的字段值。</xref:System.Object>"
  overload: System.Data.IDataRecord.GetValue*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.GetValues(System.Object[])
  id: GetValues(System.Object[])
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: GetValues(Object[])
  nameWithType: IDataRecord.GetValues(Object[])
  fullName: System.Data.IDataRecord.GetValues(Object[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "将填充使用列的当前记录的值的对象数组。"
  remarks: "对于大多数应用程序，GetValues 方法提供了一种高效的方法用于检索所有列，而不是单独都检索每个列。       你可以将传递<xref:System.Object>数组，其中包含的结果行中包含的列数少于。</xref:System.Object> 数据量<xref:System.Object>数组包含复制到数组。</xref:System.Object> 你还可以传递<xref:System.Object>其长度是多个结果行中包含的列数的数组。</xref:System.Object>"
  syntax:
    content: public int GetValues (object[] values);
    parameters:
    - id: values
      type: System.Object[]
      description: "数组<xref:System.Object>要复制到的属性字段。</xref:System.Object>"
    return:
      type: System.Int32
      description: "实例数<xref:System.Object>数组中。</xref:System.Object>"
  overload: System.Data.IDataRecord.GetValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataRecord.IsDBNull(System.Int32)
  id: IsDBNull(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: IsDBNull(Int32)
  nameWithType: IDataRecord.IsDBNull(Int32)
  fullName: System.Data.IDataRecord.IsDBNull(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "返回指定的字段是否设置为 null。"
  remarks: "调用此方法以查看是否存在 null 列的值在调用类型化的 get 方法 (例如， <xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>， <xref:System.Data.SqlClient.SqlDataReader.GetChar%2A>，依次类推) 以避免产生一个错误。</xref:System.Data.SqlClient.SqlDataReader.GetChar%2A> </xref:System.Data.SqlClient.SqlDataReader.GetByte%2A>"
  syntax:
    content: public bool IsDBNull (int i);
    parameters:
    - id: i
      type: System.Int32
      description: "要查找的字段的索引。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的字段设置为 null;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.IDataRecord.IsDBNull*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IDataRecord.Item(Int32)
  fullName: System.Data.IDataRecord.Item(Int32)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取位于指定索引处的列。"
  syntax:
    content: public object this[int i] { get; }
    parameters:
    - id: i
      type: System.Int32
      description: "要获取的列的从零开始的索引。"
    return:
      type: System.Object
      description: "位于指定索引为<xref:System.Object>。</xref:System.Object>列"
  overload: System.Data.IDataRecord.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "传递的索引已超出了 0 到<xref:System.Data.IDataRecord.FieldCount*>.</xref:System.Data.IDataRecord.FieldCount*>的范围"
  platform:
  - net462
- uid: System.Data.IDataRecord.Item(System.String)
  id: Item(System.String)
  parent: System.Data.IDataRecord
  langs:
  - csharp
  name: Item(String)
  nameWithType: IDataRecord.Item(String)
  fullName: System.Data.IDataRecord.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取具有指定名称的列。"
  remarks: "第一次执行区分大小写的查找。 如果失败，进行第二个的不区分大小写搜索。       此方法是不区分假名宽度。"
  syntax:
    content: public object this[string name] { get; }
    parameters:
    - id: name
      type: System.String
      description: "要查找的列的名称。"
    return:
      type: System.Object
      description: "具有指定名称为<xref:System.Object>。</xref:System.Object>列"
  overload: System.Data.IDataRecord.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "找到具有指定名称没有列。"
  platform:
  - net462
references:
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.Data.IDataRecord.FieldCount
  parent: System.Data.IDataRecord
  isExternal: false
  name: FieldCount
  nameWithType: IDataRecord.FieldCount
  fullName: System.Data.IDataRecord.FieldCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDataRecord.GetBoolean(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetBoolean(Int32)
  nameWithType: IDataRecord.GetBoolean(Int32)
  fullName: System.Data.IDataRecord.GetBoolean(Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.IDataRecord.GetByte(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetByte(Int32)
  nameWithType: IDataRecord.GetByte(Int32)
  fullName: System.Data.IDataRecord.GetByte(Int32)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.IDataRecord.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetBytes(Int32,Int64,Byte[],Int32,Int32)
  nameWithType: IDataRecord.GetBytes(Int32,Int64,Byte[],Int32,Int32)
  fullName: System.Data.IDataRecord.GetBytes(Int32,Int64,Byte[],Int32,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataRecord.GetChar(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetChar(Int32)
  nameWithType: IDataRecord.GetChar(Int32)
  fullName: System.Data.IDataRecord.GetChar(Int32)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Data.IDataRecord.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetChars(Int32,Int64,Char[],Int32,Int32)
  nameWithType: IDataRecord.GetChars(Int32,Int64,Char[],Int32,Int32)
  fullName: System.Data.IDataRecord.GetChars(Int32,Int64,Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataRecord.GetData(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetData(Int32)
  nameWithType: IDataRecord.GetData(Int32)
  fullName: System.Data.IDataRecord.GetData(Int32)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.IDataRecord.GetDataTypeName(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetDataTypeName(Int32)
  nameWithType: IDataRecord.GetDataTypeName(Int32)
  fullName: System.Data.IDataRecord.GetDataTypeName(Int32)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.IDataRecord.GetDateTime(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetDateTime(Int32)
  nameWithType: IDataRecord.GetDateTime(Int32)
  fullName: System.Data.IDataRecord.GetDateTime(Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Data.IDataRecord.GetDecimal(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetDecimal(Int32)
  nameWithType: IDataRecord.GetDecimal(Int32)
  fullName: System.Data.IDataRecord.GetDecimal(Int32)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Data.IDataRecord.GetDouble(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetDouble(Int32)
  nameWithType: IDataRecord.GetDouble(Int32)
  fullName: System.Data.IDataRecord.GetDouble(Int32)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Data.IDataRecord.GetFieldType(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetFieldType(Int32)
  nameWithType: IDataRecord.GetFieldType(Int32)
  fullName: System.Data.IDataRecord.GetFieldType(Int32)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Data.IDataRecord.GetFloat(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetFloat(Int32)
  nameWithType: IDataRecord.GetFloat(Int32)
  fullName: System.Data.IDataRecord.GetFloat(Int32)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Data.IDataRecord.GetGuid(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetGuid(Int32)
  nameWithType: IDataRecord.GetGuid(Int32)
  fullName: System.Data.IDataRecord.GetGuid(Int32)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.IDataRecord.GetInt16(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetInt16(Int32)
  nameWithType: IDataRecord.GetInt16(Int32)
  fullName: System.Data.IDataRecord.GetInt16(Int32)
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Data.IDataRecord.GetInt32(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetInt32(Int32)
  nameWithType: IDataRecord.GetInt32(Int32)
  fullName: System.Data.IDataRecord.GetInt32(Int32)
- uid: System.Data.IDataRecord.GetInt64(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetInt64(Int32)
  nameWithType: IDataRecord.GetInt64(Int32)
  fullName: System.Data.IDataRecord.GetInt64(Int32)
- uid: System.Data.IDataRecord.GetName(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetName(Int32)
  nameWithType: IDataRecord.GetName(Int32)
  fullName: System.Data.IDataRecord.GetName(Int32)
- uid: System.Data.IDataRecord.GetOrdinal(System.String)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetOrdinal(String)
  nameWithType: IDataRecord.GetOrdinal(String)
  fullName: System.Data.IDataRecord.GetOrdinal(String)
- uid: System.Data.IDataRecord.GetString(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetString(Int32)
  nameWithType: IDataRecord.GetString(Int32)
  fullName: System.Data.IDataRecord.GetString(Int32)
- uid: System.Data.IDataRecord.GetValue(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetValue(Int32)
  nameWithType: IDataRecord.GetValue(Int32)
  fullName: System.Data.IDataRecord.GetValue(Int32)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.IDataRecord.GetValues(System.Object[])
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetValues(Object[])
  nameWithType: IDataRecord.GetValues(Object[])
  fullName: System.Data.IDataRecord.GetValues(Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataRecord.IsDBNull(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: IsDBNull(Int32)
  nameWithType: IDataRecord.IsDBNull(Int32)
  fullName: System.Data.IDataRecord.IsDBNull(Int32)
- uid: System.Data.IDataRecord.Item(System.Int32)
  parent: System.Data.IDataRecord
  isExternal: false
  name: Item(Int32)
  nameWithType: IDataRecord.Item(Int32)
  fullName: System.Data.IDataRecord.Item(Int32)
- uid: System.Data.IDataRecord.Item(System.String)
  parent: System.Data.IDataRecord
  isExternal: false
  name: Item(String)
  nameWithType: IDataRecord.Item(String)
  fullName: System.Data.IDataRecord.Item(String)
- uid: System.Data.IDataRecord.FieldCount*
  parent: System.Data.IDataRecord
  isExternal: false
  name: FieldCount
  nameWithType: IDataRecord.FieldCount
- uid: System.Data.IDataRecord.GetBoolean*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetBoolean
  nameWithType: IDataRecord.GetBoolean
- uid: System.Data.IDataRecord.GetByte*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetByte
  nameWithType: IDataRecord.GetByte
- uid: System.Data.IDataRecord.GetBytes*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetBytes
  nameWithType: IDataRecord.GetBytes
- uid: System.Data.IDataRecord.GetChar*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetChar
  nameWithType: IDataRecord.GetChar
- uid: System.Data.IDataRecord.GetChars*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetChars
  nameWithType: IDataRecord.GetChars
- uid: System.Data.IDataRecord.GetData*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetData
  nameWithType: IDataRecord.GetData
- uid: System.Data.IDataRecord.GetDataTypeName*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetDataTypeName
  nameWithType: IDataRecord.GetDataTypeName
- uid: System.Data.IDataRecord.GetDateTime*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetDateTime
  nameWithType: IDataRecord.GetDateTime
- uid: System.Data.IDataRecord.GetDecimal*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetDecimal
  nameWithType: IDataRecord.GetDecimal
- uid: System.Data.IDataRecord.GetDouble*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetDouble
  nameWithType: IDataRecord.GetDouble
- uid: System.Data.IDataRecord.GetFieldType*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetFieldType
  nameWithType: IDataRecord.GetFieldType
- uid: System.Data.IDataRecord.GetFloat*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetFloat
  nameWithType: IDataRecord.GetFloat
- uid: System.Data.IDataRecord.GetGuid*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetGuid
  nameWithType: IDataRecord.GetGuid
- uid: System.Data.IDataRecord.GetInt16*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetInt16
  nameWithType: IDataRecord.GetInt16
- uid: System.Data.IDataRecord.GetInt32*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetInt32
  nameWithType: IDataRecord.GetInt32
- uid: System.Data.IDataRecord.GetInt64*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetInt64
  nameWithType: IDataRecord.GetInt64
- uid: System.Data.IDataRecord.GetName*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetName
  nameWithType: IDataRecord.GetName
- uid: System.Data.IDataRecord.GetOrdinal*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetOrdinal
  nameWithType: IDataRecord.GetOrdinal
- uid: System.Data.IDataRecord.GetString*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetString
  nameWithType: IDataRecord.GetString
- uid: System.Data.IDataRecord.GetValue*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetValue
  nameWithType: IDataRecord.GetValue
- uid: System.Data.IDataRecord.GetValues*
  parent: System.Data.IDataRecord
  isExternal: false
  name: GetValues
  nameWithType: IDataRecord.GetValues
- uid: System.Data.IDataRecord.IsDBNull*
  parent: System.Data.IDataRecord
  isExternal: false
  name: IsDBNull
  nameWithType: IDataRecord.IsDBNull
- uid: System.Data.IDataRecord.Item*
  parent: System.Data.IDataRecord
  isExternal: false
  name: Item
  nameWithType: IDataRecord.Item
