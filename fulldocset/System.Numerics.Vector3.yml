### YamlMime:ManagedReference
items:
- uid: System.Numerics.Vector3
  id: Vector3
  children:
  - System.Numerics.Vector3.#ctor(System.Single)
  - System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)
  - System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)
  - System.Numerics.Vector3.Abs(System.Numerics.Vector3)
  - System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.CopyTo(System.Single[])
  - System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)
  - System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Equals(System.Numerics.Vector3)
  - System.Numerics.Vector3.Equals(System.Object)
  - System.Numerics.Vector3.GetHashCode
  - System.Numerics.Vector3.Length
  - System.Numerics.Vector3.LengthSquared
  - System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)
  - System.Numerics.Vector3.Negate(System.Numerics.Vector3)
  - System.Numerics.Vector3.Normalize(System.Numerics.Vector3)
  - System.Numerics.Vector3.One
  - System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)
  - System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)
  - System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)
  - System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
  - System.Numerics.Vector3.ToString
  - System.Numerics.Vector3.ToString(System.String)
  - System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)
  - System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  - System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
  - System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  - System.Numerics.Vector3.UnitX
  - System.Numerics.Vector3.UnitY
  - System.Numerics.Vector3.UnitZ
  - System.Numerics.Vector3.X
  - System.Numerics.Vector3.Y
  - System.Numerics.Vector3.Z
  - System.Numerics.Vector3.Zero
  langs:
  - csharp
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
  type: Struct
  summary: "表示一个具有三个单精度浮点值的向量。"
  remarks: "Vector3 结构提供了对硬件加速的支持。"
  syntax:
    content: 'public struct Vector3 : IEquatable<System.Numerics.Vector3>, IFormattable'
  inheritance:
  - System.ValueType
  implements:
  - System.IEquatable<System.Numerics.Vector3>
  - System.IFormattable
  platform:
  - net462
- uid: System.Numerics.Vector3.#ctor(System.Single)
  id: '#ctor(System.Single)'
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Vector3(Single)
  nameWithType: Vector3.Vector3(Single)
  fullName: System.Numerics.Vector3.Vector3(Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "创建一个新<xref href=&quot;System.Numerics.Vector3&quot;></xref>其三个元素具有相同的值的对象。"
  syntax:
    content: public Vector3 (float value);
    parameters:
    - id: value
      type: System.Single
      description: "要分配给所有三个元素的值。"
  overload: System.Numerics.Vector3.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)
  id: '#ctor(System.Numerics.Vector2,System.Single)'
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Vector3(Vector2,Single)
  nameWithType: Vector3.Vector3(Vector2,Single)
  fullName: System.Numerics.Vector3.Vector3(Vector2,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "创建一个新<xref href=&quot;System.Numerics.Vector3&quot;></xref>从指定的对象<xref href=&quot;System.Numerics.Vector2&quot;></xref>对象和指定的值。"
  syntax:
    content: public Vector3 (System.Numerics.Vector2 value, float z);
    parameters:
    - id: value
      type: System.Numerics.Vector2
      description: "具有两个元素的向量。"
    - id: z
      type: System.Single
      description: "要分配给其他值<xref href=&quot;System.Numerics.Vector3.Z&quot;></xref>字段。"
  overload: System.Numerics.Vector3.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)
  id: '#ctor(System.Single,System.Single,System.Single)'
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Vector3(Single,Single,Single)
  nameWithType: Vector3.Vector3(Single,Single,Single)
  fullName: System.Numerics.Vector3.Vector3(Single,Single,Single)
  type: Constructor
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "创建一个向量，其元素具有指定的值。"
  syntax:
    content: public Vector3 (float x, float y, float z);
    parameters:
    - id: x
      type: System.Single
      description: "要分配给值<xref href=&quot;System.Numerics.Vector3.X&quot;></xref>字段。"
    - id: y
      type: System.Single
      description: "要分配给值<xref href=&quot;System.Numerics.Vector3.Y&quot;></xref>字段。"
    - id: z
      type: System.Single
      description: "要分配给值<xref href=&quot;System.Numerics.Vector3.Z&quot;></xref>字段。"
  overload: System.Numerics.Vector3.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Abs(System.Numerics.Vector3)
  id: Abs(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Abs(Vector3)
  nameWithType: Vector3.Abs(Vector3)
  fullName: System.Numerics.Vector3.Abs(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个向量，其元素是每个指定的向量的元素的绝对值。"
  syntax:
    content: public static System.Numerics.Vector3 Abs (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "一个向量。"
    return:
      type: System.Numerics.Vector3
      description: "绝对值向量。"
  overload: System.Numerics.Vector3.Abs*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Add(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Add(Vector3,Vector3)
  nameWithType: Vector3.Add(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Add(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "将两个向量相加。"
  syntax:
    content: public static System.Numerics.Vector3 Add (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "要相加的第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "要相加的第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "总和的向量。"
  overload: System.Numerics.Vector3.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  id: Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Clamp(Vector3,Vector3,Vector3)
  nameWithType: Vector3.Clamp(Vector3,Vector3,Vector3)
  fullName: System.Numerics.Vector3.Clamp(Vector3,Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "将向量的最小值和最大值之间的限制。"
  syntax:
    content: public static System.Numerics.Vector3 Clamp (System.Numerics.Vector3 value1, System.Numerics.Vector3 min, System.Numerics.Vector3 max);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "要限制的向量。"
    - id: min
      type: System.Numerics.Vector3
      description: "最小值。"
    - id: max
      type: System.Numerics.Vector3
      description: "最大值。"
    return:
      type: System.Numerics.Vector3
      description: "限制后的向量。"
  overload: System.Numerics.Vector3.Clamp*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.CopyTo(System.Single[])
  id: CopyTo(System.Single[])
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: CopyTo(Single[])
  nameWithType: Vector3.CopyTo(Single[])
  fullName: System.Numerics.Vector3.CopyTo(Single[])
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "将向量的元素复制到指定的数组。"
  remarks: '`array` must have at least three elements. The method copies the vector''s elements starting at index 0.'
  syntax:
    content: public void CopyTo (float[] array);
    parameters:
    - id: array
      type: System.Single[]
      description: "目标数组。"
  overload: System.Numerics.Vector3.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "当前实例中的元素的数目大于数组中。"
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>array</code>是多维的。"
  platform:
  - net462
- uid: System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)
  id: CopyTo(System.Single[],System.Int32)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: CopyTo(Single[],Int32)
  nameWithType: Vector3.CopyTo(Single[],Int32)
  fullName: System.Numerics.Vector3.CopyTo(Single[],Int32)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "位置的元素复制到指定的数组指定索引处开始的向量。"
  remarks: '`array`必须具有足够数量的元素，以适应三个矢量元素。 换而言之，元素`index`， `index` + 1，和`index`+ 2 必须已存在于`array`。'
  syntax:
    content: public void CopyTo (float[] array, int index);
    parameters:
    - id: array
      type: System.Single[]
      description: "目标数组。"
    - id: index
      type: System.Int32
      description: "用于复制向量的第一个元素索引。"
  overload: System.Numerics.Vector3.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "当前实例中的元素的数目大于数组中。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零。       -或-<code>index</code>大于或等于数组长度。"
  - type: System.RankException
    commentId: T:System.RankException
    description: "<code>array</code>是多维的。"
  platform:
  - net462
- uid: System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Cross(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Cross(Vector3,Vector3)
  nameWithType: Vector3.Cross(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Cross(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "计算两个向量的叉积。"
  syntax:
    content: public static System.Numerics.Vector3 Cross (System.Numerics.Vector3 vector1, System.Numerics.Vector3 vector2);
    parameters:
    - id: vector1
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: vector2
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "叉积。"
  overload: System.Numerics.Vector3.Cross*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Distance(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Distance(Vector3,Vector3)
  nameWithType: Vector3.Distance(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Distance(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "计算两个给定点之间的欧几里得距离。"
  syntax:
    content: public static float Distance (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "第一个点。"
    - id: value2
      type: System.Numerics.Vector3
      description: "第二个点。"
    return:
      type: System.Single
      description: "之间的距离。"
  overload: System.Numerics.Vector3.Distance*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
  id: DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: DistanceSquared(Vector3,Vector3)
  nameWithType: Vector3.DistanceSquared(Vector3,Vector3)
  fullName: System.Numerics.Vector3.DistanceSquared(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回欧几里得距离平方值之间的两个指定点。"
  syntax:
    content: public static float DistanceSquared (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "第一个点。"
    - id: value2
      type: System.Numerics.Vector3
      description: "第二个点。"
    return:
      type: System.Single
      description: "距离平方值。"
  overload: System.Numerics.Vector3.DistanceSquared*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Divide(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Divide(Vector3,Vector3)
  nameWithType: Vector3.Divide(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Divide(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "第一个向量除以第二个向量。"
  syntax:
    content: public static System.Numerics.Vector3 Divide (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "从除法得到的结果向量。"
  overload: System.Numerics.Vector3.Divide*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)
  id: Divide(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Divide(Vector3,Single)
  nameWithType: Vector3.Divide(Vector3,Single)
  fullName: System.Numerics.Vector3.Divide(Vector3,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "将指定的向量除以指定标量值。"
  syntax:
    content: public static System.Numerics.Vector3 Divide (System.Numerics.Vector3 left, float divisor);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "向量。"
    - id: divisor
      type: System.Single
      description: "标量值。"
    return:
      type: System.Numerics.Vector3
      description: "从除法得到的向量。"
  overload: System.Numerics.Vector3.Divide*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Dot(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Dot(Vector3,Vector3)
  nameWithType: Vector3.Dot(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Dot(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回两个向量的点积。"
  syntax:
    content: public static float Dot (System.Numerics.Vector3 vector1, System.Numerics.Vector3 vector2);
    parameters:
    - id: vector1
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: vector2
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Single
      description: "点积。"
  overload: System.Numerics.Vector3.Dot*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Equals(System.Numerics.Vector3)
  id: Equals(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Equals(Vector3)
  nameWithType: Vector3.Equals(Vector3)
  fullName: System.Numerics.Vector3.Equals(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个值，该值指示此实例与另一个向量是否相等。"
  remarks: "两个向量相等，如果其<xref:System.Numerics.Vector3>， <xref:System.Numerics.Vector3>，和<xref:System.Numerics.Vector3>元素是否相等。</xref:System.Numerics.Vector3> </xref:System.Numerics.Vector3> </xref:System.Numerics.Vector3>"
  syntax:
    content: public bool Equals (System.Numerics.Vector3 other);
    parameters:
    - id: other
      type: System.Numerics.Vector3
      description: "另一个向量。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个向量相等，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Numerics.Vector3.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Vector3.Equals(Object)
  fullName: System.Numerics.Vector3.Equals(Object)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个值，该值指示此实例与指定的对象是否相等。"
  remarks: "当前实例和`obj`相等如果`obj`是<xref:System.Numerics.Vector3>对象和其相应的元素是否相等。</xref:System.Numerics.Vector3>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与当前实例进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前实例和<code> obj </code>相等; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> <xref uid=&quot;langword_csharp_&quot; name=&quot;&quot; href=&quot;&quot;> </xref>。 If <code>obj</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>, the method returns <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Vector3.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Vector3.GetHashCode()
  fullName: System.Numerics.Vector3.GetHashCode()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回此实例的哈希代码。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "哈希代码。"
  overload: System.Numerics.Vector3.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Length
  id: Length
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Length()
  nameWithType: Vector3.Length()
  fullName: System.Numerics.Vector3.Length()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回此向量对象的长度。"
  syntax:
    content: public float Length ();
    parameters: []
    return:
      type: System.Single
      description: "向量的长度。"
  overload: System.Numerics.Vector3.Length*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.LengthSquared
  id: LengthSquared
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: LengthSquared()
  nameWithType: Vector3.LengthSquared()
  fullName: System.Numerics.Vector3.LengthSquared()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回的长度平方值的向量。"
  remarks: "此操作提供更好的性能比到调用<xref:System.Numerics.Vector3.Length%2A>方法。</xref:System.Numerics.Vector3.Length%2A>"
  syntax:
    content: public float LengthSquared ();
    parameters: []
    return:
      type: System.Single
      description: "向量的长度平方值。"
  overload: System.Numerics.Vector3.LengthSquared*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
  id: Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Lerp(Vector3,Vector3,Single)
  nameWithType: Vector3.Lerp(Vector3,Vector3,Single)
  fullName: System.Numerics.Vector3.Lerp(Vector3,Vector3,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "执行基于给定权重在两个向量之间的线性内插。"
  syntax:
    content: public static System.Numerics.Vector3 Lerp (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2, float amount);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: value2
      type: System.Numerics.Vector3
      description: "第二个向量。"
    - id: amount
      type: System.Single
      description: "介于 0 和 1，该值指示的权重`value2`。"
    return:
      type: System.Numerics.Vector3
      description: "内插的向量。"
  overload: System.Numerics.Vector3.Lerp*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Max(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Max(Vector3,Vector3)
  nameWithType: Vector3.Max(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Max(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个向量，其元素是每对两个指定向量中的元素的较大值。"
  syntax:
    content: public static System.Numerics.Vector3 Max (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: value2
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "最大化的向量。"
  overload: System.Numerics.Vector3.Max*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Min(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Min(Vector3,Vector3)
  nameWithType: Vector3.Min(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Min(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个向量，其元素是每对两个指定向量中的元素的较小值。"
  syntax:
    content: public static System.Numerics.Vector3 Min (System.Numerics.Vector3 value1, System.Numerics.Vector3 value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: value2
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "最小化的向量。"
  overload: System.Numerics.Vector3.Min*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Multiply(Vector3,Vector3)
  nameWithType: Vector3.Multiply(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Multiply(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "两个向量相乘。"
  syntax:
    content: public static System.Numerics.Vector3 Multiply (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "乘积向量。"
  overload: System.Numerics.Vector3.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)
  id: Multiply(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Multiply(Vector3,Single)
  nameWithType: Vector3.Multiply(Vector3,Single)
  fullName: System.Numerics.Vector3.Multiply(Vector3,Single)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "将向量乘以指定标量。"
  syntax:
    content: public static System.Numerics.Vector3 Multiply (System.Numerics.Vector3 left, float right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "要相乘的向量。"
    - id: right
      type: System.Single
      description: "标量值。"
    return:
      type: System.Numerics.Vector3
      description: "缩放后的向量。"
  overload: System.Numerics.Vector3.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)
  id: Multiply(System.Single,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Multiply(Single,Vector3)
  nameWithType: Vector3.Multiply(Single,Vector3)
  fullName: System.Numerics.Vector3.Multiply(Single,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "标量值乘以指定向量。"
  syntax:
    content: public static System.Numerics.Vector3 Multiply (float left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Single
      description: "缩放后的值。"
    - id: right
      type: System.Numerics.Vector3
      description: "向量。"
    return:
      type: System.Numerics.Vector3
      description: "缩放后的向量。"
  overload: System.Numerics.Vector3.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Negate(System.Numerics.Vector3)
  id: Negate(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Negate(Vector3)
  nameWithType: Vector3.Negate(Vector3)
  fullName: System.Numerics.Vector3.Negate(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "对指定的向量求反。"
  syntax:
    content: public static System.Numerics.Vector3 Negate (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "要求反的向量。"
    return:
      type: System.Numerics.Vector3
      description: "求反后的向量。"
  overload: System.Numerics.Vector3.Negate*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Normalize(System.Numerics.Vector3)
  id: Normalize(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Normalize(Vector3)
  nameWithType: Vector3.Normalize(Vector3)
  fullName: System.Numerics.Vector3.Normalize(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个向量相同方向与指定向量中，但长度为一。"
  syntax:
    content: public static System.Numerics.Vector3 Normalize (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "要规范化的向量。"
    return:
      type: System.Numerics.Vector3
      description: "规范化的向量。"
  overload: System.Numerics.Vector3.Normalize*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.One
  id: One
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: One
  nameWithType: Vector3.One
  fullName: System.Numerics.Vector3.One
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "获取一个其 3 个元素是等于 1 的向量。"
  syntax:
    content: public static System.Numerics.Vector3 One { get; }
    return:
      type: System.Numerics.Vector3
      description: "一个向量，其三个元素是等于&1; (即，它返回向量`(1,1,1)`。"
  overload: System.Numerics.Vector3.One*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Addition(Vector3,Vector3)
  nameWithType: Vector3.op_Addition(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Addition(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "将两个向量相加。"
  remarks: "添加方法定义的加法运算<xref:System.Numerics.Vector3>对象。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Addition (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "要相加的第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "要相加的第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "总和的向量。"
  overload: System.Numerics.Vector3.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Division(Vector3,Vector3)
  nameWithType: Vector3.op_Division(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Division(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "第一个向量除以第二个向量。"
  remarks: "分部方法定义的除法运算<xref:System.Numerics.Vector3>对象。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Division (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "从除以得到的向量<code> left </code>通过<code> right </code>。"
  overload: System.Numerics.Vector3.op_Division*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)
  id: op_Division(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Division(Vector3,Single)
  nameWithType: Vector3.op_Division(Vector3,Single)
  fullName: System.Numerics.Vector3.op_Division(Vector3,Single)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "将指定的向量除以指定标量值。"
  remarks: "分部方法定义的除法运算<xref:System.Numerics.Vector3>对象。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Division (System.Numerics.Vector3 value1, float value2);
    parameters:
    - id: value1
      type: System.Numerics.Vector3
      description: "向量。"
    - id: value2
      type: System.Single
      description: "标量值。"
    return:
      type: System.Numerics.Vector3
      description: "除法的结果。"
  overload: System.Numerics.Vector3.op_Division*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Equality(Vector3,Vector3)
  nameWithType: Vector3.op_Equality(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Equality(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个值，该值指示两个指定向量中元素的每对是否相等。"
  remarks: "两个<xref:System.Numerics.Vector3>对象是否相等，如果每个元素中的`left`等于中的相应元素`right`。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static bool op_Equality (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "要比较的第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "要比较的第二个向量。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Vector3.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Inequality(Vector3,Vector3)
  nameWithType: Vector3.op_Inequality(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Inequality(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个值，该值指示两个指定的向量是否不相等。"
  syntax:
    content: public static bool op_Inequality (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "要比较的第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "要比较的第二个向量。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>left</code> and <code>right</code> are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Numerics.Vector3.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Multiply(Vector3,Vector3)
  nameWithType: Vector3.op_Multiply(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "两个向量相乘。"
  remarks: "Multiply 方法定义的乘法运算<xref:System.Numerics.Vector3>对象。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Multiply (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "乘积向量。"
  overload: System.Numerics.Vector3.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)
  id: op_Multiply(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Multiply(Vector3,Single)
  nameWithType: Vector3.op_Multiply(Vector3,Single)
  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Single)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "乘以指定标量值的指定的向量。"
  remarks: "Multiply 方法定义的乘法运算<xref:System.Numerics.Vector3>对象。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Multiply (System.Numerics.Vector3 left, float right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "向量。"
    - id: right
      type: System.Single
      description: "标量值。"
    return:
      type: System.Numerics.Vector3
      description: "缩放后的向量。"
  overload: System.Numerics.Vector3.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)
  id: op_Multiply(System.Single,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Multiply(Single,Vector3)
  nameWithType: Vector3.op_Multiply(Single,Vector3)
  fullName: System.Numerics.Vector3.op_Multiply(Single,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "将标量值乘以指定向量。"
  remarks: "Multiply 方法定义的乘法运算<xref:System.Numerics.Vector3>对象。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Multiply (float left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Single
      description: "向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "标量值。"
    return:
      type: System.Numerics.Vector3
      description: "缩放后的向量。"
  overload: System.Numerics.Vector3.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
  id: op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_Subtraction(Vector3,Vector3)
  nameWithType: Vector3.op_Subtraction(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Subtraction(Vector3,Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "向量中减去第二个从第一个向量。"
  remarks: "减法方法定义的减法运算<xref:System.Numerics.Vector3>对象。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_Subtraction (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "从减去得到的向量<code> right </code>从<code> left </code>。"
  overload: System.Numerics.Vector3.op_Subtraction*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)
  id: op_UnaryNegation(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: op_UnaryNegation(Vector3)
  nameWithType: Vector3.op_UnaryNegation(Vector3)
  fullName: System.Numerics.Vector3.op_UnaryNegation(Vector3)
  type: Operator
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "对指定的向量求反。"
  remarks: "UnaryNegation 方法定义的一元求反运算<xref:System.Numerics.Vector3>对象。</xref:System.Numerics.Vector3>"
  syntax:
    content: public static System.Numerics.Vector3 op_UnaryNegation (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "要求反的向量。"
    return:
      type: System.Numerics.Vector3
      description: "求反后的向量。"
  overload: System.Numerics.Vector3.op_UnaryNegation*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Reflect(Vector3,Vector3)
  nameWithType: Vector3.Reflect(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Reflect(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回向量对具有指定的法线的表面的反射。"
  syntax:
    content: public static System.Numerics.Vector3 Reflect (System.Numerics.Vector3 vector, System.Numerics.Vector3 normal);
    parameters:
    - id: vector
      type: System.Numerics.Vector3
      description: "源向量。"
    - id: normal
      type: System.Numerics.Vector3
      description: "反射的表面的法线。"
    return:
      type: System.Numerics.Vector3
      description: "反射的向量。"
  overload: System.Numerics.Vector3.Reflect*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)
  id: SquareRoot(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: SquareRoot(Vector3)
  nameWithType: Vector3.SquareRoot(Vector3)
  fullName: System.Numerics.Vector3.SquareRoot(Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回一个向量，其元素是每个指定的向量的元素的平方根。"
  syntax:
    content: public static System.Numerics.Vector3 SquareRoot (System.Numerics.Vector3 value);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "一个向量。"
    return:
      type: System.Numerics.Vector3
      description: "平方根向量。"
  overload: System.Numerics.Vector3.SquareRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
  id: Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Subtract(Vector3,Vector3)
  nameWithType: Vector3.Subtract(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Subtract(Vector3,Vector3)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "向量中减去第二个从第一个向量。"
  syntax:
    content: public static System.Numerics.Vector3 Subtract (System.Numerics.Vector3 left, System.Numerics.Vector3 right);
    parameters:
    - id: left
      type: System.Numerics.Vector3
      description: "第一个向量。"
    - id: right
      type: System.Numerics.Vector3
      description: "第二个向量。"
    return:
      type: System.Numerics.Vector3
      description: "差向量。"
  overload: System.Numerics.Vector3.Subtract*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.ToString
  id: ToString
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: ToString()
  nameWithType: Vector3.ToString()
  fullName: System.Numerics.Vector3.ToString()
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回的字符串表示形式使用默认格式设置的当前实例。"
  remarks: "此方法返回在其中向量的每个元素格式都是使用&quot;G&quot;（常规） 格式字符串，并且当前线程区域性的格式设置约定的字符串。 &quot;\\<&quot;和&quot;1>&quot;字符用于开始和结束的字符串和当前区域性的<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>属性跟一个空格用于分隔每个元素。</xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "字符串表示形式的当前实例中。"
  overload: System.Numerics.Vector3.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: ToString(String)
  nameWithType: Vector3.ToString(String)
  fullName: System.Numerics.Vector3.ToString(String)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回的字符串表示形式的当前实例使用指定的格式字符串设置各个元素的格式。"
  remarks: "此方法返回在其中使用格式化向量的每个元素的字符串`format`和当前区域性的格式设置约定。 &quot;\\<&quot;和&quot;1>&quot;字符用于开始和结束的字符串和当前区域性的<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>属性跟一个空格用于分隔每个元素。</xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>"
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: "A[标准](~/add/includes/ajax-current-ext-md.md)或[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)，它定义各个元素的格式。"
    return:
      type: System.String
      description: "字符串表示形式的当前实例中。"
  overload: System.Numerics.Vector3.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: ToString(String,IFormatProvider)
  nameWithType: Vector3.ToString(String,IFormatProvider)
  fullName: System.Numerics.Vector3.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "返回的字符串表示形式的当前实例使用指定的格式字符串设置各个元素并使用指定的格式提供程序定义特定于区域性的格式设置的格式。"
  remarks: "此方法返回在其中使用格式化向量的每个元素的字符串`format`和`formatProvider`。 &quot;\\<&quot;和&quot;1>&quot;字符用于开始和结束的字符串和格式提供程序的<xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>属性跟一个空格用于分隔每个元素。</xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName>"
  syntax:
    content: public string ToString (string format, IFormatProvider formatProvider);
    parameters:
    - id: format
      type: System.String
      description: "A[标准](~/add/includes/ajax-current-ext-md.md)或[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)，它定义各个元素的格式。"
    - id: formatProvider
      type: System.IFormatProvider
      description: "一个提供区域性特定格式设置信息的格式提供。"
    return:
      type: System.String
      description: "字符串表示形式的当前实例中。"
  overload: System.Numerics.Vector3.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  id: Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Transform(Vector3,Matrix4x4)
  nameWithType: Vector3.Transform(Vector3,Matrix4x4)
  fullName: System.Numerics.Vector3.Transform(Vector3,Matrix4x4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "变换向量通过指定 4 x 4 矩阵。"
  syntax:
    content: public static System.Numerics.Vector3 Transform (System.Numerics.Vector3 position, System.Numerics.Matrix4x4 matrix);
    parameters:
    - id: position
      type: System.Numerics.Vector3
      description: "要变换的向量。"
    - id: matrix
      type: System.Numerics.Matrix4x4
      description: "变换矩阵。"
    return:
      type: System.Numerics.Vector3
      description: "转换后的向量。"
  overload: System.Numerics.Vector3.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
  id: Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Transform(Vector3,Quaternion)
  nameWithType: Vector3.Transform(Vector3,Quaternion)
  fullName: System.Numerics.Vector3.Transform(Vector3,Quaternion)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "通过指定的四元数旋转值变换向量。"
  syntax:
    content: public static System.Numerics.Vector3 Transform (System.Numerics.Vector3 value, System.Numerics.Quaternion rotation);
    parameters:
    - id: value
      type: System.Numerics.Vector3
      description: "要旋转的向量。"
    - id: rotation
      type: System.Numerics.Quaternion
      description: "要应用的旋转。"
    return:
      type: System.Numerics.Vector3
      description: "转换后的向量。"
  overload: System.Numerics.Vector3.Transform*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  id: TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: TransformNormal(Vector3,Matrix4x4)
  nameWithType: Vector3.TransformNormal(Vector3,Matrix4x4)
  fullName: System.Numerics.Vector3.TransformNormal(Vector3,Matrix4x4)
  type: Method
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "变换向量法线通过给定的 4 x 4 矩阵。"
  syntax:
    content: public static System.Numerics.Vector3 TransformNormal (System.Numerics.Vector3 normal, System.Numerics.Matrix4x4 matrix);
    parameters:
    - id: normal
      type: System.Numerics.Vector3
      description: "源向量。"
    - id: matrix
      type: System.Numerics.Matrix4x4
      description: "矩阵。"
    return:
      type: System.Numerics.Vector3
      description: "转换后的向量。"
  overload: System.Numerics.Vector3.TransformNormal*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.UnitX
  id: UnitX
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: UnitX
  nameWithType: Vector3.UnitX
  fullName: System.Numerics.Vector3.UnitX
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "获取向量 (1,0,0)。"
  syntax:
    content: public static System.Numerics.Vector3 UnitX { get; }
    return:
      type: System.Numerics.Vector3
      description: "向量`(1,0,0)`。"
  overload: System.Numerics.Vector3.UnitX*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.UnitY
  id: UnitY
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: UnitY
  nameWithType: Vector3.UnitY
  fullName: System.Numerics.Vector3.UnitY
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "获取向量 (0,1,0)。"
  syntax:
    content: public static System.Numerics.Vector3 UnitY { get; }
    return:
      type: System.Numerics.Vector3
      description: "向量`(0,1,0)`..."
  overload: System.Numerics.Vector3.UnitY*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.UnitZ
  id: UnitZ
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: UnitZ
  nameWithType: Vector3.UnitZ
  fullName: System.Numerics.Vector3.UnitZ
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "获取向量 (0,0,1)。"
  syntax:
    content: public static System.Numerics.Vector3 UnitZ { get; }
    return:
      type: System.Numerics.Vector3
      description: "向量`(0,0,1)`。"
  overload: System.Numerics.Vector3.UnitZ*
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.X
  id: X
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: X
  nameWithType: Vector3.X
  fullName: System.Numerics.Vector3.X
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "向量的 X 分量。"
  syntax:
    content: public float X;
    return:
      type: System.Single
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Y
  id: Y
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Y
  nameWithType: Vector3.Y
  fullName: System.Numerics.Vector3.Y
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "向量的 Y 分量。"
  syntax:
    content: public float Y;
    return:
      type: System.Single
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Z
  id: Z
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Z
  nameWithType: Vector3.Z
  fullName: System.Numerics.Vector3.Z
  type: Field
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "向量的 Z 分量。"
  syntax:
    content: public float Z;
    return:
      type: System.Single
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Numerics.Vector3.Zero
  id: Zero
  parent: System.Numerics.Vector3
  langs:
  - csharp
  name: Zero
  nameWithType: Vector3.Zero
  fullName: System.Numerics.Vector3.Zero
  type: Property
  assemblies:
  - System.Numerics
  namespace: System.Numerics
  summary: "获取一个其 3 个元素均为零的向量。"
  syntax:
    content: public static System.Numerics.Vector3 Zero { get; }
    return:
      type: System.Numerics.Vector3
      description: "一个向量，其三个元素是等于零 (即，它返回向量`(0,0,0)`。"
  overload: System.Numerics.Vector3.Zero*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.RankException
  isExternal: true
  name: System.RankException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Numerics.Vector3.#ctor(System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Vector3(Single)
  nameWithType: Vector3.Vector3(Single)
  fullName: System.Numerics.Vector3.Vector3(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.Vector3.#ctor(System.Numerics.Vector2,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Vector3(Vector2,Single)
  nameWithType: Vector3.Vector3(Vector2,Single)
  fullName: System.Numerics.Vector3.Vector3(Vector2,Single)
- uid: System.Numerics.Vector2
  parent: System.Numerics
  isExternal: false
  name: Vector2
  nameWithType: Vector2
  fullName: System.Numerics.Vector2
- uid: System.Numerics.Vector3.#ctor(System.Single,System.Single,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Vector3(Single,Single,Single)
  nameWithType: Vector3.Vector3(Single,Single,Single)
  fullName: System.Numerics.Vector3.Vector3(Single,Single,Single)
- uid: System.Numerics.Vector3.Abs(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Abs(Vector3)
  nameWithType: Vector3.Abs(Vector3)
  fullName: System.Numerics.Vector3.Abs(Vector3)
- uid: System.Numerics.Vector3
  parent: System.Numerics
  isExternal: false
  name: Vector3
  nameWithType: Vector3
  fullName: System.Numerics.Vector3
- uid: System.Numerics.Vector3.Add(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Add(Vector3,Vector3)
  nameWithType: Vector3.Add(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Add(Vector3,Vector3)
- uid: System.Numerics.Vector3.Clamp(System.Numerics.Vector3,System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Clamp(Vector3,Vector3,Vector3)
  nameWithType: Vector3.Clamp(Vector3,Vector3,Vector3)
  fullName: System.Numerics.Vector3.Clamp(Vector3,Vector3,Vector3)
- uid: System.Numerics.Vector3.CopyTo(System.Single[])
  parent: System.Numerics.Vector3
  isExternal: false
  name: CopyTo(Single[])
  nameWithType: Vector3.CopyTo(Single[])
  fullName: System.Numerics.Vector3.CopyTo(Single[])
- uid: System.Single[]
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single[]
  spec.csharp:
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: Single[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Numerics.Vector3.CopyTo(System.Single[],System.Int32)
  parent: System.Numerics.Vector3
  isExternal: false
  name: CopyTo(Single[],Int32)
  nameWithType: Vector3.CopyTo(Single[],Int32)
  fullName: System.Numerics.Vector3.CopyTo(Single[],Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.Vector3.Cross(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Cross(Vector3,Vector3)
  nameWithType: Vector3.Cross(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Cross(Vector3,Vector3)
- uid: System.Numerics.Vector3.Distance(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Distance(Vector3,Vector3)
  nameWithType: Vector3.Distance(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Distance(Vector3,Vector3)
- uid: System.Numerics.Vector3.DistanceSquared(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: DistanceSquared(Vector3,Vector3)
  nameWithType: Vector3.DistanceSquared(Vector3,Vector3)
  fullName: System.Numerics.Vector3.DistanceSquared(Vector3,Vector3)
- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Divide(Vector3,Vector3)
  nameWithType: Vector3.Divide(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Divide(Vector3,Vector3)
- uid: System.Numerics.Vector3.Divide(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Divide(Vector3,Single)
  nameWithType: Vector3.Divide(Vector3,Single)
  fullName: System.Numerics.Vector3.Divide(Vector3,Single)
- uid: System.Numerics.Vector3.Dot(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Dot(Vector3,Vector3)
  nameWithType: Vector3.Dot(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Dot(Vector3,Vector3)
- uid: System.Numerics.Vector3.Equals(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Equals(Vector3)
  nameWithType: Vector3.Equals(Vector3)
  fullName: System.Numerics.Vector3.Equals(Vector3)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.Vector3.Equals(System.Object)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Equals(Object)
  nameWithType: Vector3.Equals(Object)
  fullName: System.Numerics.Vector3.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.Vector3.GetHashCode
  parent: System.Numerics.Vector3
  isExternal: false
  name: GetHashCode()
  nameWithType: Vector3.GetHashCode()
  fullName: System.Numerics.Vector3.GetHashCode()
- uid: System.Numerics.Vector3.Length
  parent: System.Numerics.Vector3
  isExternal: false
  name: Length()
  nameWithType: Vector3.Length()
  fullName: System.Numerics.Vector3.Length()
- uid: System.Numerics.Vector3.LengthSquared
  parent: System.Numerics.Vector3
  isExternal: false
  name: LengthSquared()
  nameWithType: Vector3.LengthSquared()
  fullName: System.Numerics.Vector3.LengthSquared()
- uid: System.Numerics.Vector3.Lerp(System.Numerics.Vector3,System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Lerp(Vector3,Vector3,Single)
  nameWithType: Vector3.Lerp(Vector3,Vector3,Single)
  fullName: System.Numerics.Vector3.Lerp(Vector3,Vector3,Single)
- uid: System.Numerics.Vector3.Max(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Max(Vector3,Vector3)
  nameWithType: Vector3.Max(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Max(Vector3,Vector3)
- uid: System.Numerics.Vector3.Min(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Min(Vector3,Vector3)
  nameWithType: Vector3.Min(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Min(Vector3,Vector3)
- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Multiply(Vector3,Vector3)
  nameWithType: Vector3.Multiply(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Multiply(Vector3,Vector3)
- uid: System.Numerics.Vector3.Multiply(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Multiply(Vector3,Single)
  nameWithType: Vector3.Multiply(Vector3,Single)
  fullName: System.Numerics.Vector3.Multiply(Vector3,Single)
- uid: System.Numerics.Vector3.Multiply(System.Single,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Multiply(Single,Vector3)
  nameWithType: Vector3.Multiply(Single,Vector3)
  fullName: System.Numerics.Vector3.Multiply(Single,Vector3)
- uid: System.Numerics.Vector3.Negate(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Negate(Vector3)
  nameWithType: Vector3.Negate(Vector3)
  fullName: System.Numerics.Vector3.Negate(Vector3)
- uid: System.Numerics.Vector3.Normalize(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Normalize(Vector3)
  nameWithType: Vector3.Normalize(Vector3)
  fullName: System.Numerics.Vector3.Normalize(Vector3)
- uid: System.Numerics.Vector3.One
  parent: System.Numerics.Vector3
  isExternal: false
  name: One
  nameWithType: Vector3.One
  fullName: System.Numerics.Vector3.One
- uid: System.Numerics.Vector3.op_Addition(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Addition(Vector3,Vector3)
  nameWithType: Vector3.op_Addition(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Addition(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Division(Vector3,Vector3)
  nameWithType: Vector3.op_Division(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Division(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Division(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Division(Vector3,Single)
  nameWithType: Vector3.op_Division(Vector3,Single)
  fullName: System.Numerics.Vector3.op_Division(Vector3,Single)
- uid: System.Numerics.Vector3.op_Equality(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Equality(Vector3,Vector3)
  nameWithType: Vector3.op_Equality(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Equality(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Inequality(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Inequality(Vector3,Vector3)
  nameWithType: Vector3.op_Inequality(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Inequality(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Multiply(Vector3,Vector3)
  nameWithType: Vector3.op_Multiply(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_Multiply(System.Numerics.Vector3,System.Single)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Multiply(Vector3,Single)
  nameWithType: Vector3.op_Multiply(Vector3,Single)
  fullName: System.Numerics.Vector3.op_Multiply(Vector3,Single)
- uid: System.Numerics.Vector3.op_Multiply(System.Single,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Multiply(Single,Vector3)
  nameWithType: Vector3.op_Multiply(Single,Vector3)
  fullName: System.Numerics.Vector3.op_Multiply(Single,Vector3)
- uid: System.Numerics.Vector3.op_Subtraction(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Subtraction(Vector3,Vector3)
  nameWithType: Vector3.op_Subtraction(Vector3,Vector3)
  fullName: System.Numerics.Vector3.op_Subtraction(Vector3,Vector3)
- uid: System.Numerics.Vector3.op_UnaryNegation(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_UnaryNegation(Vector3)
  nameWithType: Vector3.op_UnaryNegation(Vector3)
  fullName: System.Numerics.Vector3.op_UnaryNegation(Vector3)
- uid: System.Numerics.Vector3.Reflect(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Reflect(Vector3,Vector3)
  nameWithType: Vector3.Reflect(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Reflect(Vector3,Vector3)
- uid: System.Numerics.Vector3.SquareRoot(System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: SquareRoot(Vector3)
  nameWithType: Vector3.SquareRoot(Vector3)
  fullName: System.Numerics.Vector3.SquareRoot(Vector3)
- uid: System.Numerics.Vector3.Subtract(System.Numerics.Vector3,System.Numerics.Vector3)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Subtract(Vector3,Vector3)
  nameWithType: Vector3.Subtract(Vector3,Vector3)
  fullName: System.Numerics.Vector3.Subtract(Vector3,Vector3)
- uid: System.Numerics.Vector3.ToString
  parent: System.Numerics.Vector3
  isExternal: false
  name: ToString()
  nameWithType: Vector3.ToString()
  fullName: System.Numerics.Vector3.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Numerics.Vector3.ToString(System.String)
  parent: System.Numerics.Vector3
  isExternal: false
  name: ToString(String)
  nameWithType: Vector3.ToString(String)
  fullName: System.Numerics.Vector3.ToString(String)
- uid: System.Numerics.Vector3.ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Vector3
  isExternal: false
  name: ToString(String,IFormatProvider)
  nameWithType: Vector3.ToString(String,IFormatProvider)
  fullName: System.Numerics.Vector3.ToString(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Transform(Vector3,Matrix4x4)
  nameWithType: Vector3.Transform(Vector3,Matrix4x4)
  fullName: System.Numerics.Vector3.Transform(Vector3,Matrix4x4)
- uid: System.Numerics.Matrix4x4
  parent: System.Numerics
  isExternal: false
  name: Matrix4x4
  nameWithType: Matrix4x4
  fullName: System.Numerics.Matrix4x4
- uid: System.Numerics.Vector3.Transform(System.Numerics.Vector3,System.Numerics.Quaternion)
  parent: System.Numerics.Vector3
  isExternal: false
  name: Transform(Vector3,Quaternion)
  nameWithType: Vector3.Transform(Vector3,Quaternion)
  fullName: System.Numerics.Vector3.Transform(Vector3,Quaternion)
- uid: System.Numerics.Quaternion
  parent: System.Numerics
  isExternal: false
  name: Quaternion
  nameWithType: Quaternion
  fullName: System.Numerics.Quaternion
- uid: System.Numerics.Vector3.TransformNormal(System.Numerics.Vector3,System.Numerics.Matrix4x4)
  parent: System.Numerics.Vector3
  isExternal: false
  name: TransformNormal(Vector3,Matrix4x4)
  nameWithType: Vector3.TransformNormal(Vector3,Matrix4x4)
  fullName: System.Numerics.Vector3.TransformNormal(Vector3,Matrix4x4)
- uid: System.Numerics.Vector3.UnitX
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitX
  nameWithType: Vector3.UnitX
  fullName: System.Numerics.Vector3.UnitX
- uid: System.Numerics.Vector3.UnitY
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitY
  nameWithType: Vector3.UnitY
  fullName: System.Numerics.Vector3.UnitY
- uid: System.Numerics.Vector3.UnitZ
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitZ
  nameWithType: Vector3.UnitZ
  fullName: System.Numerics.Vector3.UnitZ
- uid: System.Numerics.Vector3.X
  parent: System.Numerics.Vector3
  isExternal: false
  name: X
  nameWithType: Vector3.X
  fullName: System.Numerics.Vector3.X
- uid: System.Numerics.Vector3.Y
  parent: System.Numerics.Vector3
  isExternal: false
  name: Y
  nameWithType: Vector3.Y
  fullName: System.Numerics.Vector3.Y
- uid: System.Numerics.Vector3.Z
  parent: System.Numerics.Vector3
  isExternal: false
  name: Z
  nameWithType: Vector3.Z
  fullName: System.Numerics.Vector3.Z
- uid: System.Numerics.Vector3.Zero
  parent: System.Numerics.Vector3
  isExternal: false
  name: Zero
  nameWithType: Vector3.Zero
  fullName: System.Numerics.Vector3.Zero
- uid: System.Numerics.Vector3.#ctor*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Vector3
  nameWithType: Vector3.Vector3
- uid: System.Numerics.Vector3.Abs*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Abs
  nameWithType: Vector3.Abs
- uid: System.Numerics.Vector3.Add*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Add
  nameWithType: Vector3.Add
- uid: System.Numerics.Vector3.Clamp*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Clamp
  nameWithType: Vector3.Clamp
- uid: System.Numerics.Vector3.CopyTo*
  parent: System.Numerics.Vector3
  isExternal: false
  name: CopyTo
  nameWithType: Vector3.CopyTo
- uid: System.Numerics.Vector3.Cross*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Cross
  nameWithType: Vector3.Cross
- uid: System.Numerics.Vector3.Distance*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Distance
  nameWithType: Vector3.Distance
- uid: System.Numerics.Vector3.DistanceSquared*
  parent: System.Numerics.Vector3
  isExternal: false
  name: DistanceSquared
  nameWithType: Vector3.DistanceSquared
- uid: System.Numerics.Vector3.Divide*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Divide
  nameWithType: Vector3.Divide
- uid: System.Numerics.Vector3.Dot*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Dot
  nameWithType: Vector3.Dot
- uid: System.Numerics.Vector3.Equals*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Equals
  nameWithType: Vector3.Equals
- uid: System.Numerics.Vector3.GetHashCode*
  parent: System.Numerics.Vector3
  isExternal: false
  name: GetHashCode
  nameWithType: Vector3.GetHashCode
- uid: System.Numerics.Vector3.Length*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Length
  nameWithType: Vector3.Length
- uid: System.Numerics.Vector3.LengthSquared*
  parent: System.Numerics.Vector3
  isExternal: false
  name: LengthSquared
  nameWithType: Vector3.LengthSquared
- uid: System.Numerics.Vector3.Lerp*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Lerp
  nameWithType: Vector3.Lerp
- uid: System.Numerics.Vector3.Max*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Max
  nameWithType: Vector3.Max
- uid: System.Numerics.Vector3.Min*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Min
  nameWithType: Vector3.Min
- uid: System.Numerics.Vector3.Multiply*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Multiply
  nameWithType: Vector3.Multiply
- uid: System.Numerics.Vector3.Negate*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Negate
  nameWithType: Vector3.Negate
- uid: System.Numerics.Vector3.Normalize*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Normalize
  nameWithType: Vector3.Normalize
- uid: System.Numerics.Vector3.One*
  parent: System.Numerics.Vector3
  isExternal: false
  name: One
  nameWithType: Vector3.One
- uid: System.Numerics.Vector3.op_Addition*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Addition
  nameWithType: Vector3.op_Addition
- uid: System.Numerics.Vector3.op_Division*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Division
  nameWithType: Vector3.op_Division
- uid: System.Numerics.Vector3.op_Equality*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Equality
  nameWithType: Vector3.op_Equality
- uid: System.Numerics.Vector3.op_Inequality*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Inequality
  nameWithType: Vector3.op_Inequality
- uid: System.Numerics.Vector3.op_Multiply*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Multiply
  nameWithType: Vector3.op_Multiply
- uid: System.Numerics.Vector3.op_Subtraction*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_Subtraction
  nameWithType: Vector3.op_Subtraction
- uid: System.Numerics.Vector3.op_UnaryNegation*
  parent: System.Numerics.Vector3
  isExternal: false
  name: op_UnaryNegation
  nameWithType: Vector3.op_UnaryNegation
- uid: System.Numerics.Vector3.Reflect*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Reflect
  nameWithType: Vector3.Reflect
- uid: System.Numerics.Vector3.SquareRoot*
  parent: System.Numerics.Vector3
  isExternal: false
  name: SquareRoot
  nameWithType: Vector3.SquareRoot
- uid: System.Numerics.Vector3.Subtract*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Subtract
  nameWithType: Vector3.Subtract
- uid: System.Numerics.Vector3.ToString*
  parent: System.Numerics.Vector3
  isExternal: false
  name: ToString
  nameWithType: Vector3.ToString
- uid: System.Numerics.Vector3.Transform*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Transform
  nameWithType: Vector3.Transform
- uid: System.Numerics.Vector3.TransformNormal*
  parent: System.Numerics.Vector3
  isExternal: false
  name: TransformNormal
  nameWithType: Vector3.TransformNormal
- uid: System.Numerics.Vector3.UnitX*
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitX
  nameWithType: Vector3.UnitX
- uid: System.Numerics.Vector3.UnitY*
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitY
  nameWithType: Vector3.UnitY
- uid: System.Numerics.Vector3.UnitZ*
  parent: System.Numerics.Vector3
  isExternal: false
  name: UnitZ
  nameWithType: Vector3.UnitZ
- uid: System.Numerics.Vector3.Zero*
  parent: System.Numerics.Vector3
  isExternal: false
  name: Zero
  nameWithType: Vector3.Zero
