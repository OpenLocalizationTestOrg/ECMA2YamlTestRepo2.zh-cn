### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.XmlDataSource
  id: XmlDataSource
  children:
  - System.Web.UI.WebControls.XmlDataSource.#ctor
  - System.Web.UI.WebControls.XmlDataSource.CacheDuration
  - System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  - System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.XmlDataSource.Data
  - System.Web.UI.WebControls.XmlDataSource.DataFile
  - System.Web.UI.WebControls.XmlDataSource.EnableCaching
  - System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  - System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  - System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  - System.Web.UI.WebControls.XmlDataSource.Save
  - System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  - System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.WebControls.XmlDataSource.Transform
  - System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  - System.Web.UI.WebControls.XmlDataSource.TransformFile
  - System.Web.UI.WebControls.XmlDataSource.Transforming
  - System.Web.UI.WebControls.XmlDataSource.XPath
  langs:
  - csharp
  name: XmlDataSource
  nameWithType: XmlDataSource
  fullName: System.Web.UI.WebControls.XmlDataSource
  type: Class
  summary: "表示数据绑定控件的 XML 数据源。"
  remarks: "本主题中:-[简介](#introduction)      -   [XML 数据源](#source_of_xml_data)      -   [更新 XML 数据](#updating_xml_data)      -   [指定 XSL 转换](#specifying_an_xsl_transformation)      -   [筛选使用 XPath 表达式](#filtering_using_an_xpath_expression)      -   [Caching](#caching)      -   [附加功能](#additional_features)      -   [数据视图对象](#data_view_object)      -   [声明性语法](#declarative_syntax)<a name=&quot;introduction&quot;> </a> # # 简介 XmlDataSource 控件是一个数据源控件，显示的数据绑定控件的 XML 数据。       XmlDataSource 控件可以由数据绑定控件，用于显示层次结构和表格数据。 XmlDataSource 控件通常用于在只读方案中显示层次结构的 XML 数据。 因为 XmlDataSource 控件扩展<xref:System.Web.UI.HierarchicalDataSourceControl>类，它适用于层次结构数据。</xref:System.Web.UI.HierarchicalDataSourceControl> XmlDataSource 控件还实现<xref:System.Web.UI.IDataSource>接口，并适用于表格或列表样式、 数据。</xref:System.Web.UI.IDataSource>      1> [!NOTE]&1;> 出于安全考虑，无 XmlDataSource 控件属性存储在视图状态。 由于这是技术上可行，客户端的视图状态的内容进行解码，存储的数据结构或其内容的敏感信息可能会带来导致信息泄露威胁。 请注意，如果你需要存储信息，如<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性视图状态中，你可以启用加密，以通过设置保护的内容<xref:System.Web.UI.Page.ViewStateEncryptionMode%2A>上`@ Page`指令。</xref:System.Web.UI.Page.ViewStateEncryptionMode%2A> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>       页开发人员使用 XmlDataSource 控件以显示使用数据绑定控件的 XML 数据。      <a name=&quot;source_of_xml_data&quot;></a># # 源的 XML 数据 XmlDataSource 通常将 XML 数据加载从 XML 文件，由指定<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> 此外可以直接通过在字符串窗体中使用的数据源控件存储 XML 数据<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> 如果你想要将 XML 数据转换的数据绑定控件显示之前，你可以为转换提供可扩展样式表语言 (XSL) 样式表。 用于 XML 数据中，你从文件通常加载样式表，如由<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>属性，但你可以将其存储中直接使用的字符串形式<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> </xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>      <a name=&quot;updating_xml_data&quot;></a># # 更新 XML 数据 XmlDataSource 控件是方案中常用只读数据的数据绑定控件显示 XML 数据的位置。 但是，你还可以使用 XmlDataSource 控件编辑 XML 数据。 若要编辑的 XML 数据，调用<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法来检索<xref:System.Xml.XmlDataDocument>是 XML 数据的内存中表示的对象。</xref:System.Xml.XmlDataDocument> </xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> 你可以使用公开的对象模型<xref:System.Xml.XmlDataDocument>和<xref:System.Xml.XmlNode>对象它包含或使用 XPath 筛选表达式来操作文档中的数据。</xref:System.Xml.XmlNode> </xref:System.Xml.XmlDataDocument> 当对 XML 数据的内存中表示进行了更改时，你可以保存它以通过调用磁盘<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>       有的编辑功能 XmlDataSource 控件的一些限制:-必须将 XML 数据加载从 XML 文件所指示的<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>属性，不是从 XML 中指定的内联<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> </xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>      的可以在中指定任何 XSLT 转换<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>或<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>      -<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法不会处理并发保存操作的不同请求。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> 如果多个用户正在编辑通过 XmlDataSource XML 文件，则不能保证所有用户都使用相同的数据在都操作。 也可能是<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>操作由于这些相同的并发问题而失败。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>      <a name=&quot;specifying_an_xsl_transformation&quot;></a># # 指定的 XML 数据执行的 XSL 转换的常见操作将其转换从一个 XML 数据集中到另一个。 XmlDataSource 控件支持的 XML 转换<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>和<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>属性，指定要应用于 XML 数据传递到的数据绑定控件前一个 XSL 样式表，与<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>属性，它允许您提供动态的 XSLT 样式表参数以供一个 XSL 样式表在转换期间。</xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> </xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 如果指定筛选表达式使用 XPath<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性，它应用转换发生后。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>      1> [!NOTE]&1;> XmlDataSource 类使用不推荐使用<xref:System.Xml.Xsl.XslTransform>类来执行 XSL 转换。</xref:System.Xml.Xsl.XslTransform> 如果你想要使用的<xref:System.Xml.Xsl.XslTransform>类已弃用，应用通过使用<xref:System.Xml.Xsl.XslCompiledTransform>类</xref:System.Xml.Xsl.XslCompiledTransform>进行手动转换</xref:System.Xml.Xsl.XslTransform>后引入的样式表功能      <a name=&quot;filtering_using_an_xpath_expression&quot;></a># # 筛选使用 XPath 表达式︰ 默认情况下，控件将由标识的 XML 文件中的所有 XML 数据都加载 XmlDataSource<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>属性或在中的找到的内联<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>属性，但你可以使用 XPath 表达式对数据进行筛选。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> </xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> <xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性支持在完成加载 XML 数据并将其转换后应用的 XPath 语法筛选器。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>      <a name=&quot;caching&quot;></a># # 默认情况下，缓存的性能的目的，缓存启用 XmlDataSource 控件。 打开和读取 XML 文件服务器上的，每次在页请求可以减少你的应用程序的性能。 缓存允许你减少的处理负荷代价 Web 服务器; 上的内存是服务器上在大多数情况下这是一个良好的平衡。 XmlDataSource 自动缓存的数据时<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>属性设置为`true`，和<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>属性设置为前缓存失效的缓存中存储数据的秒数。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 你可以使用<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>以进一步微调数据源控件的缓存行为。</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>      <a name=&quot;additional_features&quot;></a># # 附加功能下表列出由 XmlDataSource 控件支持的其他功能。      |功能 |说明 |  |----------------|-----------------|  |排序 |中不受支持由 XmlDataSource 控件。 |  |筛选 |可以使用<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性来筛选使用相应的 XPath 表达式的 XML 数据。 |  |分页 |中不受支持由 XmlDataSource 控件。 |  |更新 |支持的直接操作<xref:System.Xml.XmlDataDocument>，然后再调用<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。 |  |删除 |支持的直接操作<xref:System.Xml.XmlDataDocument>，然后再调用<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。 |  |插入 |支持的直接操作<xref:System.Xml.XmlDataDocument>，然后再调用<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。 |  |缓存 |默认情况下，启用使用<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>属性设置为 0 （无限） 和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>属性设置为<xref:System.Web.UI.DataSourceCacheExpiry>。 |     <a name=&quot;data_view_object&quot;> </a> # # 数据视图对象因为 XmlDataSource 控件支持数据绑定控件显示分层数据，以及显示表格数据控件，数据源控件在其基础 XML 数据上支持多个类型的数据源视图对象。</xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> </xref:System.Xml.XmlDataDocument> </xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> </xref:System.Xml.XmlDataDocument> </xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> </xref:System.Xml.XmlDataDocument> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> XmlDataSource 控件中检索单个名为<xref:System.Web.UI.WebControls.XmlDataSourceView>对象显示表格格式数据的数据绑定控件一起使用时。</xref:System.Web.UI.WebControls.XmlDataSourceView> <xref:System.Web.UI.IDataSource.GetViewNames%2A>方法标识此单个命名视图。</xref:System.Web.UI.IDataSource.GetViewNames%2A> 如果用于显示分层数据的数据绑定控件，XmlDataSource 控件中检索<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>任何唯一的层次结构路径传递给<xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A>方法。</xref:System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView%2A> </xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>      <a name=&quot;declarative_syntax&quot;></a># # 声明性语法```   <asp:XmlDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       DataFile=&quot;string&quot;       EnableCaching=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       ID=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnInit=&quot;Init event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnTransforming=&quot;Transforming event handler&quot;       OnUnload=&quot;Unload event handler&quot;       runat=&quot;server&quot;       SkinID=&quot;string&quot;       TransformArgumentList=&quot;string&quot;       TransformFile=&quot;string&quot;       Visible=&quot;True|False&quot;       XPath=&quot;string&quot;   >       <Data>string</Data>       <Transform>string</Transform>   </asp:XmlDataSource>   ```"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an XmlDataSource control with a <xref:System.Web.UI.WebControls.TreeView> control to display XML data from the sample XML file. The second example demonstrates how to use an XmlDataSource control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data.  \n  \n The following code example demonstrates how to use an XmlDataSource control with a <xref:System.Web.UI.WebControls.TreeView> control to display XML data. The XmlDataSource loads XML data from the XML file identified by the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_22_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_22_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```  \n  \n The following code example demonstrates how to use an XmlDataSource control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data. The <xref:System.Web.UI.WebControls.Repeater> control uses an XPath data-binding expression to bind to data items within the XML document that the XmlDataSource represents. For more information about `XPath` and `XPathSelect` data-binding syntax, see the <xref:System.Web.UI.XPathBinder> class.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_14#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_22_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_14#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_22_2.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>  \n <orders>  \n   <order>  \n     <customer id=\"12345\" />  \n     <customername>  \n         <firstn>John</firstn>  \n         <lastn>Smith</lastn>  \n     </customername>  \n     <transaction id=\"12345\" />  \n     <shipaddress>  \n         <address1>1234 Tenth Avenue</address1>  \n         <city>Bellevue</city>  \n         <state>Washington</state>  \n         <zip>98001</zip>  \n     </shipaddress>  \n     <summary>  \n         <item dept=\"tools\">screwdriver</item>  \n         <item dept=\"tools\">hammer</item>  \n         <item dept=\"plumbing\">fixture</item>  \n     </summary>  \n   </order>  \n</orders>  \n```"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Transforming")]

      [System.ComponentModel.DefaultProperty("DataFile")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.XmlDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.XmlDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class XmlDataSource : System.Web.UI.HierarchicalDataSourceControl, System.ComponentModel.IListSource, System.Web.UI.IDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.HierarchicalDataSourceControl
  implements:
  - System.ComponentModel.IListSource
  - System.Web.UI.IDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnInit(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SaveViewState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.TrackViewState
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.HierarchicalDataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.HierarchicalDataSourceControl.ClientID
  - System.Web.UI.HierarchicalDataSourceControl.ClientIDMode
  - System.Web.UI.HierarchicalDataSourceControl.Controls
  - System.Web.UI.HierarchicalDataSourceControl.CreateControlCollection
  - System.Web.UI.HierarchicalDataSourceControl.EnableTheming
  - System.Web.UI.HierarchicalDataSourceControl.FindControl(System.String)
  - System.Web.UI.HierarchicalDataSourceControl.Focus
  - System.Web.UI.HierarchicalDataSourceControl.HasControls
  - System.Web.UI.HierarchicalDataSourceControl.OnDataSourceChanged(System.EventArgs)
  - System.Web.UI.HierarchicalDataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.HierarchicalDataSourceControl.SkinID
  - System.Web.UI.HierarchicalDataSourceControl.System#Web#UI#IHierarchicalDataSource#GetHierarchicalView(System.String)
  - System.Web.UI.HierarchicalDataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: XmlDataSource()
  nameWithType: XmlDataSource.XmlDataSource()
  fullName: System.Web.UI.WebControls.XmlDataSource.XmlDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "创建的新实例<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>类。"
  syntax:
    content: public XmlDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.XmlDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的总时间，以秒为单位，数据源控件，缓存的数据检索到它。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>以下情况适用时控件将自动缓存数据:-<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>属性设置为`true`。</xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.XmlDataSource>      -CacheDuration 属性设置为一个值大于 0，表示缓存失效前缓存中存储数据的秒数。       任何将更改为<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>属性或包含 XML 数据文件的内容会导致缓存失效。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>       默认情况下，CacheDuration 属性设置为 0，表示无限期的缓存，并更改它依赖于 XML 文件之前，数据源将缓存数据。       缓存的行为受持续时间的组合和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>设置。</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 如果<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>设置为<xref:System.Web.UI.DataSourceCacheExpiry>、<xref:System.Web.UI.WebControls.XmlDataSource>控制缓存上的第一个数据检索操作的数据、 将其保留在内存中保留 CacheDuration，指定时间和后经过的时间已使。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 然后在下一步操作时刷新缓存。 如果<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>设置为<xref:System.Web.UI.DataSourceCacheExpiry>，数据源控件在第一个数据检索操作上, 缓存数据，但将重置为在每个后续操作时的缓存的时间范围。</xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> 如果没有任何活动时间等于 CacheDuration 自上次数据检索，仅将过期缓存。"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> property is set to `true` and the CacheDuration is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_928_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_928_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "秒数<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控制缓存的数据检索操作的结果。 默认值为 0"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置结合来描述数据源控件使用缓存的缓存行为将缓存持续时间的缓存过期策略。"
  remarks: "缓存的行为由的组合<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>和 CacheExpirationPolicy 设置。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 如果 CacheExpirationPolicy 设置为<xref:System.Web.UI.DataSourceCacheExpiry>、<xref:System.Web.UI.WebControls.XmlDataSource>缓存上的第一个数据检索操作的数据、 将其保留在内存中保留指定的时间<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>，并使其无效后经过的时间已。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> 然后在下一步操作时刷新缓存。 如果 CacheExpirationPolicy 设置为<xref:System.Web.UI.DataSourceCacheExpiry>，数据源控件在第一个数据检索操作上, 缓存数据，但将重置为在每个后续操作时的缓存的时间范围。</xref:System.Web.UI.DataSourceCacheExpiry> 缓存将过期，仅当没有任何活动时间等于<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>自上次数据检索。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the <xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> property is set to `true` and the <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_427_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_427_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "之一<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref>值。 默认缓存过期策略设置是<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  id: CacheKeyContext
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置从视图状态的数据源控件的缓存密钥的值或添加的缓存密钥，若要查看状态。"
  remarks: "CacheKeyContext 属性使您能够手动创建的缓存键<xref:System.Web.UI.WebControls.XmlDataSource>控件。</xref:System.Web.UI.WebControls.XmlDataSource> 这是必需的仅当将分配一个对象，包含 XML 或 XSLT 数据而不是指定包含数据的文件的控件。 当将数据分配到控件时，数据不用于生成缓存密钥。 相反，你必须手动生成唯一的缓存密钥，如果你计划更新的数据对象。"
  syntax:
    content: public virtual string CacheKeyContext { get; set; }
    return:
      type: System.String
      description: "缓存键或空字符串如果缓存的键不是视图状态中的值。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置用户定义键依赖项链接到创建的数据源控件的所有数据缓存对象。 所有缓存对象显式都过期密钥过期后。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>控件支持数据缓存。</xref:System.Web.UI.WebControls.XmlDataSource> 数据被缓存，<xref:System.Web.UI.WebControls.XmlDataSource>从缓存而不是从基础数据文件中检索数据。</xref:System.Web.UI.WebControls.XmlDataSource> 在缓存过期，将从基础文件中检索数据，并重新缓存的数据。       你可以设置要创建的所有缓存项之间建立依赖关系的 CacheKeyDependency 属性<xref:System.Web.UI.WebControls.XmlDataSource>控件和密钥。</xref:System.Web.UI.WebControls.XmlDataSource> 通过使密钥过期可以以编程方式使所有缓存条目都无效在任何时间。       由于用于创建 CacheKeyDependency 的属性，很可能多个<xref:System.Web.UI.WebControls.XmlDataSource>控件可以使用，它们是从相同的 XML 文件加载相同数据和转换文件并具有相同的方案中的同一缓存<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A>设置。</xref:System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.XmlDataSource>"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "通过创建一个用于标识所有缓存对象键<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件。"
  overload: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Data
  id: Data
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Data
  nameWithType: XmlDataSource.Data
  fullName: System.Web.UI.WebControls.XmlDataSource.Data
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置数据源控件绑定到的 XML 数据块。"
  remarks: "在声明性方案中，数据属性指定为多行的内部属性<xref:System.Web.UI.WebControls.XmlDataSource>对象。</xref:System.Web.UI.WebControls.XmlDataSource> 内部属性是与 XML 数据兼容，因为它使您能够设置以任何方式 XML 数据的格式并忽略字符填充问题，例如填充引号字符。       如果这两个<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>和设置数据属性，则<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>属性优先和 XML 文件中的数据使用而不是数据属性中指定的 XML 数据。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>       如果你更改的数据属性中，值<xref:System.Web.UI.IDataSource.DataSourceChanged>引发事件。</xref:System.Web.UI.IDataSource.DataSourceChanged> 如果启用了缓存，并更改数据的值，缓存将会失效。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control to display inline XML data contained by the Data property with a <xref:System.Web.UI.WebControls.TreeView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_378_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_378_1.aspx)]"
  syntax:
    content: public virtual string Data { get; set; }
    return:
      type: System.String
      description: "内联 XML 数据字符串的<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件绑定到。 默认值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.Data*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在加载文档。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile
  id: DataFile
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: DataFile
  nameWithType: XmlDataSource.DataFile
  fullName: System.Web.UI.WebControls.XmlDataSource.DataFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "指定数据源绑定到的 XML 文件的文件名称。"
  remarks: "如果这两个数据文件和<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>属性设置、 数据文件属性优先和 XML 文件中的数据使用而不是中指定的 XML 数据<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>       如果更改数据文件属性值，该值<xref:System.Web.UI.IDataSource.DataSourceChanged>引发事件。</xref:System.Web.UI.IDataSource.DataSourceChanged> 如果启用了缓存，并更改数据文件的值，缓存将会失效。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control to display XML data contained in a file with a <xref:System.Web.UI.WebControls.TreeView> control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_472_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_472_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual string DataFile { get; set; }
    return:
      type: System.String
      description: "绝对物理路径或相对路径包含数据的 XML 文件， <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>控件表示。 默认值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.DataFile*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在加载文档。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件数据启用了缓存。"
  remarks: "<xref:System.Web.UI.WebControls.XmlDataSource>EnableCaching 属性设置为当控件将自动缓存数据`true`。</xref:System.Web.UI.WebControls.XmlDataSource> 默认情况下，<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>属性设置为 0，表示无限期的缓存，并且数据源将缓存数据，直到它依赖于在 XML 文件更改。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> 如果你设置<xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>属性大于 0 的值，在缓存中存储数据，许多秒钟后检索一组全新。</xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A>       如果 EnableCaching 属性设置为`true`和<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>属性设置，则不时参数更改转换自变量列表中会自动失效的缓存项。</xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> 在这种情况下，你必须编写代码以使缓存失效的通过设置<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>"
  example:
  - "The following code example demonstrates how to enable caching when using the <xref:System.Web.UI.WebControls.XmlDataSource> control to display data contained in an XML file. Caching is enabled when the EnableCaching property is set to `true` and the <xref:System.Web.UI.WebControls.XmlDataSource.CacheDuration%2A> is set to the number of seconds that the data is cached by the data source control.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_365_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_16#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_365_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<books>  \n   <computerbooks>  \n     <book title=\"Secrets of Silicon Valley\" author=\"Sheryl Hunter\"/>  \n     <book title=\"Straight Talk About Computers\" author=\"Dean Straight\"/>  \n     <book title=\"You Can Combat Computer Stress!\" author=\"Marjorie Green\"/>                  \n   </computerbooks>  \n   <cookbooks>  \n     <book title=\"Silicon Valley Gastronomic Treats\" author=\"Innes del Castill\"/>  \n   </cookbooks>  \n</books>  \n```"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果为数据源控件; 启用了数据缓存否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.XmlDataSource.EnableCaching*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  id: GetHierarchicalView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: GetHierarchicalView(String)
  nameWithType: XmlDataSource.GetHierarchicalView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取有关的数据源视图对象<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件。 <code> viewPath </code>参数可以为 XPath 表达式。"
  remarks: "你可以调用 GetHierarchicalView 方法来检索<xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.XmlDataSource>控件。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.WebControls.XmlHierarchicalDataSourceView> 如果指定`viewPath`值，<xref:System.Web.UI.WebControls.XmlDataSource>控件返回表示由标识的节点上的视图的数据源视图对象`viewPath`，以及所有子节点。</xref:System.Web.UI.WebControls.XmlDataSource> 如果你设置`viewPath`到<xref:System.String.Empty?displayProperty=fullName>、<xref:System.Web.UI.WebControls.XmlDataSource>控制检查<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性来确定要从中生成的数据源视图的根节点。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> </xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.String.Empty?displayProperty=fullName> 如果<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>设置属性，<xref:System.Web.UI.WebControls.XmlDataSource>控件使用它来返回数据源视图中相同方式`viewPath`使用表达式。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A> 如果<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>未设置属性，<xref:System.Web.UI.WebControls.XmlDataSource>控件的 XML 数据中返回的所有数据节点的视图。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>"
  syntax:
    content: protected override System.Web.UI.HierarchicalDataSourceView GetHierarchicalView (string viewPath);
    parameters:
    - id: viewPath
      type: System.String
      description: "标识从中生成当前层次结构视图的节点的 XPath 表达式。"
    return:
      type: System.Web.UI.HierarchicalDataSourceView
      description: "返回<xref href=&quot;System.Web.UI.WebControls.XmlHierarchicalDataSourceView&quot;></xref>对象，表示开头由标识的数据节点的数据的单一视图<code> viewPath </code>。"
  overload: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  id: GetXmlDocument
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: GetXmlDocument()
  nameWithType: XmlDataSource.GetXmlDocument()
  fullName: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "将 XML 数据加载到内存中，直接从基础数据存储区或从缓存中，并将其返回的形式<xref href=&quot;System.Xml.XmlDataDocument&quot;></xref>对象。"
  remarks: "用于直接访问基础 XML 数据的内存中表示 GetXmlDocument 方法。       你可以操作返回<xref:System.Xml.XmlDataDocument>对象，然后调用<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>以持久保存到指定的 XML 文件所做的更改<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Save%2A> </xref:System.Xml.XmlDataDocument> 之前，必须满足几个要求<xref:System.Xml.XmlDataDocument>对象可以成功保存。</xref:System.Xml.XmlDataDocument> 有关详细信息，请参阅<xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>方法。</xref:System.Web.UI.WebControls.XmlDataSource.Save%2A>"
  example:
  - "This section contains two code examples. The first example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The second example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The data is manipulated in memory using the GetXmlDocument method every time you select a <xref:System.Web.UI.WebControls.TreeView> node, and is then saved to the XML file. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_196_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_196_1.aspx)]  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file. As with the previous example, the data is manipulated in memory using the <xref:System.Xml.XmlDataDocument> retrieved by the GetXmlDocument method. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_196_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_196_2.aspx)]  \n  \n The XML file in the code examples has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n <bookstore xmlns:bk=\"urn:samples\">  \n   <book genre=\"novel\" publicationdate=\"1999\" bk:ISBN=\"0000000000\">  \n     <title>Secrets of Silicon Valley</title>  \n     <author>  \n       <first-name>Sheryl</first-name>  \n       <last-name>Hunter</last-name>  \n     </author>  \n     <price>24.95</price>\"   \n     </book>  \n   <book genre=\"novel\" publicationdate=\"1985\" bk:ISBN=\"1111111111\">  \n     <title>Straight Talk About Computers</title>  \n     <author>  \n       <first-name>Dean</first-name>  \n       <last-name>Straight</last-name>  \n     </author>  \n     <price>29.95</price>  \n   </book>  \n</bookstore>  \n```"
  syntax:
    content: public System.Xml.XmlDocument GetXmlDocument ();
    parameters: []
    return:
      type: System.Xml.XmlDocument
      description: "<xref href=&quot;System.Xml.XmlDataDocument&quot;> </xref>表示的 XML 中指定的对象<> *1> 属性或由标识的文件中<> *1> 属性，并进行任何转换和<xref:System.Web.UI.WebControls.XmlDataSource.XPath*>应用的查询。</xref:System.Web.UI.WebControls.XmlDataSource.XPath*>"
  overload: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "为指定 URL<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>属性; 但是， <xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;> </xref>控件不具有用于 Web 资源的正确权限。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, it is not an HTTP-based URL.  \n  \n \\- or -  \n  \n A design-time relative path was not mapped correctly by the designer before using the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control.  \n  \n \\- or -  \n  \n Both caching and client impersonation are enabled. The <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control does not support caching when client impersonation is enabled."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "为指定的路径被拒绝访问<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>属性。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  id: OnTransforming(System.EventArgs)
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: OnTransforming(EventArgs)
  nameWithType: XmlDataSource.OnTransforming(EventArgs)
  fullName: System.Web.UI.WebControls.XmlDataSource.OnTransforming(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.XmlDataSource.Transforming&quot;></xref>之前的事件<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件针对其 XML 数据执行 XSLT 转换。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnTransforming 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> object at runtime. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> object to the data source control by handling the <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> event with a custom event handler, which is identified by name of the method set for the OnTransforming method.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_60_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_60_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The XML transformation is performed using the following style sheet.  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: protected virtual void OnTransforming (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.XmlDataSource.OnTransforming*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Save
  id: Save
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Save()
  nameWithType: XmlDataSource.Save()
  fullName: System.Web.UI.WebControls.XmlDataSource.Save()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "将保存当前保存在内存中的 XML 数据<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件磁盘如果<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>属性设置。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>"
  remarks: "虽然<xref:System.Web.UI.WebControls.XmlDataSource>控件通常使用只读数据绑定方案中，则可以使用<xref:System.Web.UI.WebControls.XmlDataSource>控件编辑基础 XML 数据文件中的 XML 数据。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Web.UI.WebControls.XmlDataSource> 在这些情况下，XML 数据从 XML 文件加载由<xref:System.Web.UI.WebControls.XmlDataSource>控件。</xref:System.Web.UI.WebControls.XmlDataSource> 您修改<xref:System.Xml.XmlDataDocument>在内存中使用<xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A>方法，并保存到 XML 数据文件通过调用 Save 方法。</xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> </xref:System.Xml.XmlDataDocument> 满足以下条件时，此可编辑的 XML 方案有可能:-从由 XML 文件加载 XML 数据<xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>属性，不是从内联 XML 数据中指定<xref:System.Web.UI.WebControls.XmlDataSource.Data%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.Data%2A> </xref:System.Web.UI.WebControls.XmlDataSource.DataFile%2A>      的中指定任何 XSLT 转换<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>或<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>       Save 方法不处理并发保存操作的不同请求。 如果多个用户正在编辑 XML 文件通过<xref:System.Web.UI.WebControls.XmlDataSource>控件中，所有用户都使用相同的数据在都操作不能保证。</xref:System.Web.UI.WebControls.XmlDataSource> 还有可能为因这些相同的并发问题保存操作。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The second code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display and edit XML data contained in an XML file. The data is manipulated in memory using the <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> method every time you select a <xref:System.Web.UI.WebControls.TreeView> node, and is then saved to the XML file. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-cs[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_117_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.XmlDataSource_17#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_117_1.aspx)]  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display and edit XML data contained in an XML file. As with the previous example, the data is manipulated in memory using the <xref:System.Xml.XmlDataDocument> object retrieved by the <xref:System.Web.UI.WebControls.XmlDataSource.GetXmlDocument%2A> method. Finally, <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> is called on the <xref:System.Web.UI.WebControls.TreeView> control to refresh the data that it displays.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_117_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_18#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_117_2.aspx)]  \n  \n The XML file in the code examples has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"utf-8\"?>  \n <bookstore xmlns:bk=\"urn:samples\">  \n   <book genre=\"novel\" publicationdate=\"1999\" bk:ISBN=\"0000000000\">  \n     <title>Secrets of Silicon Valley</title>  \n     <author>  \n       <first-name>Sheryl</first-name>  \n       <last-name>Hunter</last-name>  \n     </author>  \n     <price>24.95</price>\"   \n     </book>  \n   <book genre=\"novel\" publicationdate=\"1985\" bk:ISBN=\"1111111111\">  \n     <title>Straight Talk About Computers</title>  \n     <author>  \n       <first-name>Dean</first-name>  \n       <last-name>Straight</last-name>  \n     </author>  \n     <price>29.95</price>  \n   </book>  \n</bookstore>  \n  \n```"
  syntax:
    content: public void Save ();
    parameters: []
  overload: System.Web.UI.WebControls.XmlDataSource.Save*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "XML data was loaded using the <xref:System.Web.UI.WebControls.XmlDataSource.Data*> property instead of the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property.  \n  \n \\- or -  \n  \n A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control does not have the correct permissions for the Web resource."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "A URL is specified for the <xref:System.Web.UI.WebControls.XmlDataSource.DataFile*> property; however, it is not an HTTP-based URL.  \n  \n \\- or -  \n  \n A design-time relative path was not mapped correctly by the designer before using the <xref href=\"System.Web.UI.WebControls.XmlDataSource\"></xref> control."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "为指定的路径被拒绝访问<xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>属性。</xref:System.Web.UI.WebControls.XmlDataSource.DataFile*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  id: System#ComponentModel#IListSource#ContainsListCollection
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅<xref:System.ComponentModel.IListSource.ContainsListCollection*>。</xref:System.ComponentModel.IListSource.ContainsListCollection*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.XmlDataSource>实例被强制转换为<xref:System.ComponentModel.IListSource>接口。</xref:System.ComponentModel.IListSource> </xref:System.Web.UI.WebControls.XmlDataSource>"
  syntax:
    content: bool System.ComponentModel.IListSource.ContainsListCollection { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该集合为的集合<xref:System.Collections.IList>对象; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IList>"
  overload: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  id: System#ComponentModel#IListSource#GetList
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.GetList()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅<xref:System.ComponentModel.IListSource.GetList*>。</xref:System.ComponentModel.IListSource.GetList*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.XmlDataSource>实例被强制转换为<xref:System.ComponentModel.IListSource>接口。</xref:System.ComponentModel.IListSource> </xref:System.Web.UI.WebControls.XmlDataSource>"
  syntax:
    content: System.Collections.IList IListSource.GetList ();
    parameters: []
    return:
      type: System.Collections.IList
      description: "一个对象，实现<xref:System.Collections.IList>，可以绑定到数据源。</xref:System.Collections.IList>"
  overload: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  id: System#Web#UI#IDataSource#GetView(System.String)
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.Web.UI.IDataSource.GetView(String)
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取与数据源控件关联的已命名的数据源视图。"
  syntax:
    content: System.Web.UI.DataSourceView IDataSource.GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "要检索的视图名称。 如果&lt;xref:System.String?displayProperty=fullName&gt;指定的默认视图<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>检索控件。"
    return:
      type: System.Web.UI.DataSourceView
      description: "返回命名<xref href=&quot;System.Web.UI.WebControls.XmlDataSourceView&quot;></xref>与关联的对象<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件。"
  overload: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  id: System#Web#UI#IDataSource#GetViewNames
  isEii: true
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: System.Web.UI.IDataSource.GetViewNames()
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅<xref:System.Web.UI.IDataSource.GetViewNames*>。</xref:System.Web.UI.IDataSource.GetViewNames*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.XmlDataSource>实例被强制转换为<xref:System.Web.UI.IDataSource>接口。</xref:System.Web.UI.IDataSource> </xref:System.Web.UI.WebControls.XmlDataSource>"
  syntax:
    content: System.Collections.ICollection IDataSource.GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "一个对象，实现<xref:System.Collections.ICollection>包含表示的视图对象的列表的名称与关联<xref href=&quot;System.Web.UI.IDataSource&quot;></xref>对象。</xref:System.Collections.ICollection>"
  overload: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Transform
  id: Transform
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Transform
  nameWithType: XmlDataSource.Transform
  fullName: System.Web.UI.WebControls.XmlDataSource.Transform
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置定义要管理的 XML 数据执行 XSLT 转换的可扩展样式表语言 (XSL) 数据块<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件。"
  remarks: "在声明性方案中，转换属性指定为多行的内部属性<xref:System.Web.UI.WebControls.XmlDataSource>对象。</xref:System.Web.UI.WebControls.XmlDataSource> 内部属性是 XSL 样式表数据，与兼容，因为它使您能够设置样式表以任何方式的格式并忽略字符填充问题，如填充引号字符。       如果这两个<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>且转换属性设置，则<xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A>属性优先，而不是在转换属性中指定的样式表元素使用 XSL 样式表文件 (.xsl) 中的数据。</xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> </xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> 如果使用设置 XPath 表达式<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性，应用后转换 XML 数据。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>       如果更改属性值的转换，<xref:System.Web.UI.IDataSource.DataSourceChanged>引发事件。</xref:System.Web.UI.IDataSource.DataSourceChanged> 如果启用了缓存并转换的值更改，缓存将会失效。      1> [!NOTE]&1;><xref:System.Web.UI.WebControls.XmlDataSource>类使用不推荐使用<xref:System.Xml.Xsl.XslTransform>类来执行 XSL 转换。</xref:System.Xml.Xsl.XslTransform> </xref:System.Web.UI.WebControls.XmlDataSource> 如果你想要使用的<xref:System.Xml.Xsl.XslTransform>类已弃用，应用通过使用<xref:System.Xml.Xsl.XslCompiledTransform>类</xref:System.Xml.Xsl.XslCompiledTransform>进行手动转换</xref:System.Xml.Xsl.XslTransform>后引入的样式表功能"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display transformed XML data. The style sheet that performs the transformation is defined inline by the Transform property of the data source control.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<?xml version=\"1.0\" encoding=\"iso-8859-1\"?>  \n <orders>  \n   <order>  \n     <customer id=\"12345\" />  \n     <customername>  \n         <firstn>Todd</firstn>  \n         <lastn>Rowe</lastn>  \n     </customername>  \n     <transaction id=\"12345\" />  \n     <shipaddress>  \n         <address1>1234 Tenth Avenue</address1>  \n         <city>Bellevue</city>  \n         <state>Washington</state>  \n         <zip>98001</zip>  \n     </shipaddress>  \n     <summary>  \n         <item dept=\"tools\">screwdriver</item>  \n         <item dept=\"tools\">hammer</item>  \n         <item dept=\"plumbing\">fixture</item>  \n     </summary>  \n   </order>  \n</orders>  \n```"
  syntax:
    content: public virtual string Transform { get; set; }
    return:
      type: System.String
      description: "内联定义 XML 转换中包含的数据上执行的 XSL 字符串<> *1> 或<> *1> 属性。 默认值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.Transform*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在加载文档。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  id: TransformArgumentList
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "提供用于定义的样式表的 XSLT 参数列表的<> *1> 或<> *1> 属性来执行转换的 XML 数据上。"
  remarks: "设置 TransformArgumentList 属性时<xref:System.Web.UI.WebControls.XmlDataSource.Transforming>引发事件以确保在 XSLT 转换应用于 XML 数据时可用的 XSLT 参数。</xref:System.Web.UI.WebControls.XmlDataSource.Transforming>       如果<xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A>属性设置为`true`和 TransformArgumentList 属性设置，则不时参数更改转换自变量列表中会自动失效的缓存项。</xref:System.Web.UI.WebControls.XmlDataSource.EnableCaching%2A> 在这种情况下，你必须编写代码以使缓存失效的通过设置<xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency%2A>"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> object at run time. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> to the data source control by handling the <xref:System.Web.UI.WebControls.XmlDataSource.Transforming> event with a custom event handler.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_437_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_437_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The transformation of the XML data is performed with the following style sheet.  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public virtual System.Xml.Xsl.XsltArgumentList TransformArgumentList { get; set; }
    return:
      type: System.Xml.Xsl.XsltArgumentList
      description: "<xref href=&quot;System.Xml.Xsl.XsltArgumentList&quot;> </xref>对象，其中包含 XSLT 参数和对象以将应用于 XML 数据的加载时<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile
  id: TransformFile
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformFile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "指定定义要管理的 XML 数据执行 XSLT 转换的可扩展样式表语言 (XSL) 文件 (.xsl) 的文件名称<xref href=&quot;System.Web.UI.WebControls.XmlDataSource&quot;></xref>控件。"
  remarks: "如果这两个 TransformFile 和<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>设置属性、 TransformFile 属性优先和 XSL 样式表文件 (.xsl) 中的数据使用而不是中指定的样式表元素<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>属性。</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 如果使用设置 XPath 表达式<xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>属性，应用后转换 XML 数据。</xref:System.Web.UI.WebControls.XmlDataSource.XPath%2A>       如果你更改的值<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>属性，<xref:System.Web.UI.IDataSource.DataSourceChanged>引发事件。</xref:System.Web.UI.IDataSource.DataSourceChanged> </xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A> 如果启用了缓存并更改的值<xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>，缓存失效。</xref:System.Web.UI.WebControls.XmlDataSource.Transform%2A>      1> [!NOTE]&1;><xref:System.Web.UI.WebControls.XmlDataSource>类使用不推荐使用<xref:System.Xml.Xsl.XslTransform>类来执行 XSL 转换。</xref:System.Xml.Xsl.XslTransform> </xref:System.Web.UI.WebControls.XmlDataSource> 如果你想要使用的<xref:System.Xml.Xsl.XslTransform>类已弃用，应用通过使用<xref:System.Xml.Xsl.XslCompiledTransform>类</xref:System.Xml.Xsl.XslCompiledTransform>进行手动转换</xref:System.Xml.Xsl.XslTransform>后引入的样式表功能"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control and a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data on a Web form. The transformation is performed using the style sheet indicated by the TransformFile property. You can optionally supply transformation arguments for the style sheet using an <xref:System.Xml.Xsl.XsltArgumentList>. For more information, see the <xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A> property.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_5#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_625_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_5#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_625_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The XSL style sheet that performs the XML transformation has the following structure:  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"price\">  \n       <xsl:value-of select=\"price\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public virtual string TransformFile { get; set; }
    return:
      type: System.String
      description: "绝对物理路径或相对路径定义 XML 转换中包含的数据上执行的 XSL 样式表文件<> *1> 或<> *1> 属性。 默认值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.TransformFile*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在加载文档。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.Transforming
  id: Transforming
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: Transforming
  nameWithType: XmlDataSource.Transforming
  fullName: System.Web.UI.WebControls.XmlDataSource.Transforming
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "在由定义的样式表之前发生<> *1> 属性或由标识<> *1> 属性应用于 XML 数据。"
  remarks: "处理 Transforming 事件，以设置<xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>属性<xref:System.Xml.Xsl.XsltArgumentList>对象之前<xref:System.Web.UI.WebControls.XmlDataSource>控件将执行 XML 转换。</xref:System.Web.UI.WebControls.XmlDataSource> </xref:System.Xml.Xsl.XsltArgumentList> </xref:System.Web.UI.WebControls.XmlDataSource.TransformArgumentList%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a <xref:System.Web.UI.WebControls.TreeView> control to display transformed XML data. The XML transformation is performed using the style sheet indicated by the <xref:System.Web.UI.WebControls.XmlDataSource.TransformFile%2A> property. Additionally, the style sheet uses transform arguments that are passed to the data source control in an <xref:System.Xml.Xsl.XsltArgumentList> at run time. The code example demonstrates how to pass the <xref:System.Xml.Xsl.XsltArgumentList> object to the data source control by handling the Transforming event with a custom event handler.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_49_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_9#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_49_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```  \n  \n The transformation of the XML data is performed with the following style sheet:  \n  \n```  \n<xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\">  \n <xsl:param name=\"purchdate\"/>  \n <xsl:template match=\"bookstore\">  \n   <bookstore>  \n     <xsl:apply-templates select=\"genre\"/>  \n   </bookstore>  \n </xsl:template>  \n <xsl:template match=\"genre\">  \n   <genre>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"book\"/>  \n   </genre>  \n </xsl:template>  \n <xsl:template match=\"book\">  \n   <book>  \n     <xsl:attribute name=\"ISBN\">  \n       <xsl:value-of select=\"@ISBN\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"title\">  \n       <xsl:value-of select=\"title\"/>  \n       Price: <xsl:value-of select=\"price\"/>  \n           15% discount if purchased by: <xsl:value-of select=\"$purchdate\"/>        \n     </xsl:attribute>  \n     <xsl:apply-templates select=\"chapters/chapter\" />  \n   </book>  \n </xsl:template>  \n <xsl:template match=\"chapter\">  \n   <chapter>  \n     <xsl:attribute name=\"num\">  \n       <xsl:value-of select=\"@num\"/>  \n     </xsl:attribute>  \n     <xsl:attribute name=\"name\">  \n       <xsl:value-of select=\"@name\"/>  \n     </xsl:attribute>  \n     <xsl:apply-templates/>  \n   </chapter>  \n </xsl:template>  \n</xsl:stylesheet>  \n```"
  syntax:
    content: public event EventHandler Transforming;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.XmlDataSource.XPath
  id: XPath
  parent: System.Web.UI.WebControls.XmlDataSource
  langs:
  - csharp
  name: XPath
  nameWithType: XmlDataSource.XPath
  fullName: System.Web.UI.WebControls.XmlDataSource.XPath
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "指定要应用于包含的 XML 数据的 XPath 表达式<> *1> 属性或由 XML 文件由<> *1> 属性。"
  remarks: "有关 XPath 数据绑定表达式的详细信息，请参阅[一个表格的控件绑定到 XmlDataSource 控件](http://msdn.microsoft.com/en-us/d6bf202f-6454-45fd-9424-e17f6c7eafe8)。"
  example:
  - "The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.XmlDataSource> control with a templated <xref:System.Web.UI.WebControls.Repeater> control to display XML data that has been filtered using an XPath expression. In this example, XPath syntax is used to filter the XML data when the XPath property of the data source control is set, and also binds elements of the <xref:System.Web.UI.WebControls.Repeater> control template to the XML data.  \n  \n [!code-vb[System.Web.UI.WebControls.XmlDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_422_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.XmlDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_422_1.aspx)]  \n  \n The XML file in the code example has the following data:  \n  \n```  \n<bookstore>  \n   <genre name=\"fiction\">  \n     <book ISBN=\"0000000000\">  \n       <title>Secrets of Silicon Valley</title>  \n       <price>12.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />             \n         <chapter num=\"2\" name=\"Body\" />            \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n   <genre name=\"novel\">  \n     <book genre=\"novel\" ISBN=\"1111111111\">  \n       <title>Straight Talk About Computers</title>  \n       <price>24.95</price>  \n       <chapters>  \n         <chapter num=\"1\" name=\"Introduction\" />   \n         <chapter num=\"2\" name=\"Body\" />  \n         <chapter num=\"3\" name=\"Conclusion\" />  \n       </chapters>  \n     </book>  \n   </genre>  \n</bookstore>  \n```"
  syntax:
    content: public virtual string XPath { get; set; }
    return:
      type: System.String
      description: "表示可用来进行筛选包含的数据的 XPath 表达式的字符串<> *1> 属性或由 XML 文件由<> *1> 属性。 默认值是&lt;xref:System.String.Empty?displayProperty=fullName&gt;。"
  overload: System.Web.UI.WebControls.XmlDataSource.XPath*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "正在加载文档。"
  platform:
  - net462
references:
- uid: System.Web.UI.HierarchicalDataSourceControl
  isExternal: false
  name: System.Web.UI.HierarchicalDataSourceControl
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XmlDataSource()
  nameWithType: XmlDataSource.XmlDataSource()
  fullName: System.Web.UI.WebControls.XmlDataSource.XmlDataSource()
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.XmlDataSource.Data
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Data
  nameWithType: XmlDataSource.Data
  fullName: System.Web.UI.WebControls.XmlDataSource.Data
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: DataFile
  nameWithType: XmlDataSource.DataFile
  fullName: System.Web.UI.WebControls.XmlDataSource.DataFile
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.XmlDataSource.EnableCaching
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetHierarchicalView(String)
  nameWithType: XmlDataSource.GetHierarchicalView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView(String)
- uid: System.Web.UI.HierarchicalDataSourceView
  parent: System.Web.UI
  isExternal: false
  name: HierarchicalDataSourceView
  nameWithType: HierarchicalDataSourceView
  fullName: System.Web.UI.HierarchicalDataSourceView
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetXmlDocument()
  nameWithType: XmlDataSource.GetXmlDocument()
  fullName: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument()
- uid: System.Xml.XmlDocument
  parent: System.Xml
  isExternal: false
  name: XmlDocument
  nameWithType: XmlDocument
  fullName: System.Xml.XmlDocument
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming(System.EventArgs)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: OnTransforming(EventArgs)
  nameWithType: XmlDataSource.OnTransforming(EventArgs)
  fullName: System.Web.UI.WebControls.XmlDataSource.OnTransforming(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.XmlDataSource.Save
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Save()
  nameWithType: XmlDataSource.Save()
  fullName: System.Web.UI.WebControls.XmlDataSource.Save()
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.GetList()
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.ComponentModel.IListSource.GetList()
- uid: System.Collections.IList
  parent: System.Collections
  isExternal: true
  name: IList
  nameWithType: IList
  fullName: System.Collections.IList
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView(System.String)
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetView(String)
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetViewNames()
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.XmlDataSource.System.Web.UI.IDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.XmlDataSource.Transform
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transform
  nameWithType: XmlDataSource.Transform
  fullName: System.Web.UI.WebControls.XmlDataSource.Transform
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList
- uid: System.Xml.Xsl.XsltArgumentList
  parent: System.Xml.Xsl
  isExternal: false
  name: XsltArgumentList
  nameWithType: XsltArgumentList
  fullName: System.Xml.Xsl.XsltArgumentList
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
  fullName: System.Web.UI.WebControls.XmlDataSource.TransformFile
- uid: System.Web.UI.WebControls.XmlDataSource.Transforming
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transforming
  nameWithType: XmlDataSource.Transforming
  fullName: System.Web.UI.WebControls.XmlDataSource.Transforming
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.UI.WebControls.XmlDataSource.XPath
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XPath
  nameWithType: XmlDataSource.XPath
  fullName: System.Web.UI.WebControls.XmlDataSource.XPath
- uid: System.Web.UI.WebControls.XmlDataSource.#ctor*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XmlDataSource
  nameWithType: XmlDataSource.XmlDataSource
- uid: System.Web.UI.WebControls.XmlDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: XmlDataSource.CacheDuration
- uid: System.Web.UI.WebControls.XmlDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: XmlDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyContext*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyContext
  nameWithType: XmlDataSource.CacheKeyContext
- uid: System.Web.UI.WebControls.XmlDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: XmlDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.XmlDataSource.Data*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Data
  nameWithType: XmlDataSource.Data
- uid: System.Web.UI.WebControls.XmlDataSource.DataFile*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: DataFile
  nameWithType: XmlDataSource.DataFile
- uid: System.Web.UI.WebControls.XmlDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: XmlDataSource.EnableCaching
- uid: System.Web.UI.WebControls.XmlDataSource.GetHierarchicalView*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetHierarchicalView
  nameWithType: XmlDataSource.GetHierarchicalView
- uid: System.Web.UI.WebControls.XmlDataSource.GetXmlDocument*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: GetXmlDocument
  nameWithType: XmlDataSource.GetXmlDocument
- uid: System.Web.UI.WebControls.XmlDataSource.OnTransforming*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: OnTransforming
  nameWithType: XmlDataSource.OnTransforming
- uid: System.Web.UI.WebControls.XmlDataSource.Save*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Save
  nameWithType: XmlDataSource.Save
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#ContainsListCollection*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.ContainsListCollection
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.ContainsListCollection
- uid: System.Web.UI.WebControls.XmlDataSource.System#ComponentModel#IListSource#GetList*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.ComponentModel.IListSource.GetList
  nameWithType: XmlDataSource.System.ComponentModel.IListSource.GetList
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetView*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetView
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetView
- uid: System.Web.UI.WebControls.XmlDataSource.System#Web#UI#IDataSource#GetViewNames*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: System.Web.UI.IDataSource.GetViewNames
  nameWithType: XmlDataSource.System.Web.UI.IDataSource.GetViewNames
- uid: System.Web.UI.WebControls.XmlDataSource.Transform*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: Transform
  nameWithType: XmlDataSource.Transform
- uid: System.Web.UI.WebControls.XmlDataSource.TransformArgumentList*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformArgumentList
  nameWithType: XmlDataSource.TransformArgumentList
- uid: System.Web.UI.WebControls.XmlDataSource.TransformFile*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: TransformFile
  nameWithType: XmlDataSource.TransformFile
- uid: System.Web.UI.WebControls.XmlDataSource.XPath*
  parent: System.Web.UI.WebControls.XmlDataSource
  isExternal: false
  name: XPath
  nameWithType: XmlDataSource.XPath
