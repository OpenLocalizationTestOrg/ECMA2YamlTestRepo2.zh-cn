### YamlMime:ManagedReference
items:
- uid: System.Xml.Xsl.XsltMessageEncounteredEventArgs
  id: XsltMessageEncounteredEventArgs
  children:
  - System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor
  - System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message
  langs:
  - csharp
  name: XsltMessageEncounteredEventArgs
  nameWithType: XsltMessageEncounteredEventArgs
  fullName: System.Xml.Xsl.XsltMessageEncounteredEventArgs
  type: Class
  summary: "提供有关数据<xref href=&quot;System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered&quot;></xref>事件。"
  remarks: "<xref:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered>事件发生在 XSLT 处理时期间`xsl:message`样式表中指定。</xref:System.Xml.Xsl.XsltArgumentList.XsltMessageEncountered>      1> [!NOTE]&1;> 如果`terminate`属性设置为`&quot;yes&quot;`，XSLT 处理器将停止处理消息后执行样式表将停止。"
  example:
  - "The following example uses the XsltMessageEncounteredEventArgs to display `xsl:message` content to the console. The sample writes the following message to the console:  `Message received:  Author name is not in the correct format <author><name>Plato</name></author>`.  \n  \n [!code-cs[XsltMessageEncountered#1](~/add/codesnippet/csharp/t-system.xml.xsl.xsltmes_1.cs)]\n [!code-vb[XsltMessageEncountered#1](~/add/codesnippet/visualbasic/t-system.xml.xsl.xsltmes_1.vb)]  \n  \n The example uses the following files as input:  \n  \n books.xml  \n  \n [!code-xml[XML_Core_Files#1](~/add/codesnippet/xml/t-system.xml.xsl.xsltmes_2.xml)]  \n  \n message.xsl  \n  \n [!code-xml[XsltMessageEncountered#2](~/add/codesnippet/xml/t-system.xml.xsl.xsltmes_3.xsl)]"
  syntax:
    content: 'public abstract class XsltMessageEncounteredEventArgs : EventArgs'
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor
  id: '#ctor'
  parent: System.Xml.Xsl.XsltMessageEncounteredEventArgs
  langs:
  - csharp
  name: XsltMessageEncounteredEventArgs()
  nameWithType: XsltMessageEncounteredEventArgs.XsltMessageEncounteredEventArgs()
  fullName: System.Xml.Xsl.XsltMessageEncounteredEventArgs.XsltMessageEncounteredEventArgs()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "初始化的新实例<xref href=&quot;System.Xml.Xsl.XsltMessageEncounteredEventArgs&quot;></xref>类。"
  syntax:
    content: protected XsltMessageEncounteredEventArgs ();
    parameters: []
  overload: System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message
  id: Message
  parent: System.Xml.Xsl.XsltMessageEncounteredEventArgs
  langs:
  - csharp
  name: Message
  nameWithType: XsltMessageEncounteredEventArgs.Message
  fullName: System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Xsl
  summary: "获取的内容`xsl:message`元素。"
  remarks: ''
  example:
  - "The following example uses the <xref:System.Xml.Xsl.XsltMessageEncounteredEventArgs> to display `xsl:message` content to the console. The sample writes the following message to the console:  `Message received:  Author name is not in the correct format <author><name>Plato</name></author>`.  \n  \n [!code-cs[XsltMessageEncountered#1](~/add/codesnippet/csharp/p-system.xml.xsl.xsltmes_1.cs)]\n [!code-vb[XsltMessageEncountered#1](~/add/codesnippet/visualbasic/p-system.xml.xsl.xsltmes_1.vb)]  \n  \n The example uses the following files as input:  \n  \n books.xml  \n  \n [!code-xml[XML_Core_Files#1](~/add/codesnippet/xml/p-system.xml.xsl.xsltmes_2.xml)]  \n  \n message.xsl  \n  \n [!code-xml[XsltMessageEncountered#2](~/add/codesnippet/xml/p-system.xml.xsl.xsltmes_3.xsl)]"
  syntax:
    content: public abstract string Message { get; }
    return:
      type: System.String
      description: "内容`xsl:message`元素。"
  overload: System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor
  parent: System.Xml.Xsl.XsltMessageEncounteredEventArgs
  isExternal: false
  name: XsltMessageEncounteredEventArgs()
  nameWithType: XsltMessageEncounteredEventArgs.XsltMessageEncounteredEventArgs()
  fullName: System.Xml.Xsl.XsltMessageEncounteredEventArgs.XsltMessageEncounteredEventArgs()
- uid: System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message
  parent: System.Xml.Xsl.XsltMessageEncounteredEventArgs
  isExternal: false
  name: Message
  nameWithType: XsltMessageEncounteredEventArgs.Message
  fullName: System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Xsl.XsltMessageEncounteredEventArgs.#ctor*
  parent: System.Xml.Xsl.XsltMessageEncounteredEventArgs
  isExternal: false
  name: XsltMessageEncounteredEventArgs
  nameWithType: XsltMessageEncounteredEventArgs.XsltMessageEncounteredEventArgs
- uid: System.Xml.Xsl.XsltMessageEncounteredEventArgs.Message*
  parent: System.Xml.Xsl.XsltMessageEncounteredEventArgs
  isExternal: false
  name: Message
  nameWithType: XsltMessageEncounteredEventArgs.Message
