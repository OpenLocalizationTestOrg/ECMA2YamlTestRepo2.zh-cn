### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.DateAndTime
  id: DateAndTime
  children:
  - Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  - Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  - Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.DateAndTime.DateString
  - Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  - Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  - Microsoft.VisualBasic.DateAndTime.Now
  - Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  - Microsoft.VisualBasic.DateAndTime.TimeOfDay
  - Microsoft.VisualBasic.DateAndTime.Timer
  - Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  - Microsoft.VisualBasic.DateAndTime.TimeString
  - Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  - Microsoft.VisualBasic.DateAndTime.Today
  - Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  - Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  - Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  langs:
  - csharp
  name: DateAndTime
  nameWithType: DateAndTime
  fullName: Microsoft.VisualBasic.DateAndTime
  type: Class
  summary: "<xref uid=&quot;langword_csharp_DateAndTime&quot; name=&quot;DateAndTime&quot; href=&quot;&quot;> </xref>模块包含的过程和在日期和时间的操作中使用的属性。"
  remarks: "此模块支持的 Visual Basic 语言关键字和获取当前日期或时间、 执行日期计算、 返回日期或时间、 设置的日期或时间，或记录过程的持续时间的运行时库成员。"
  example:
  - "This example uses the `Today` property to return the current system date.  \n  \n```  \nDim thisDate As Date  \nthisDate = Today   \n```"
  syntax:
    content: >-
      [Microsoft.VisualBasic.CompilerServices.StandardModule]

      public sealed class DateAndTime
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  id: DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateAdd(DateInterval,Double,DateTime)
  nameWithType: DateAndTime.DateAdd(DateInterval,Double,DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(DateInterval,Double,DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>包含已向其添加指定的时间间隔的日期和时间值的值。"
  remarks: "你可以使用`DateAdd`函数加上或减去从日期的指定的时间间隔。 例如，可以计算从今天或之前 45 分钟的时间现在的 30 天的日期。       若要添加第一天到`DateValue`，你可以使用`DateInterval.Day`， `DateInterval.DayOfYear`，或`DateInterval.Weekday`。 这些被视为等效项，因为`DayOfYear`和`Weekday`不是有意义的时间间隔。       `DateAdd`函数绝不会返回无效的日期。 如有必要，会生成日期的日部分向调整为结果结果年中月份的最后一天。 下面的示例将一个月添加到 1 月 31 日︰```vb#   Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)   ```在此示例中，`DateAdd`返回`#2/28/1995#`，而不`#2/31/1995#`。 如果`DateValue`是`#1/31/1996#`，它将返回`#2/29/1996#`因为 1996年是否为闰年。      1> [!NOTE]  >   `DateAdd`使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性<xref:System.Globalization.CultureInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值由**控制面板**设置。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>       由于每个`Date`支持值<xref:System.DateTime>结构，其方法提供了您添加时间间隔中的其他选项。</xref:System.DateTime> 例如，可以添加大量小数部分组成的天数，舍入到最接近的毫秒，为`Date`变量，如下所示︰ ```vb#   Dim NextTime As Date = Now        &quot; Current date and time.   NextTime = NextTime.AddDays(3.4)  &quot; Increment by 3 2/5 days.   ``` `Interval`自变量可以具有以下设置之一。      |枚举值 |字符串 |要添加的时间间隔单位 |  |-----------------------|------------|----------------------------------|  |`DateInterval.Day`|d|天;截断为整数值 |  |`DateInterval.DayOfYear`|y|天;截断为整数值 |  |`DateInterval.Hour`|h|小时;舍入为接近的毫秒 |  |`DateInterval.Minute`|n|分钟;舍入为接近的毫秒 |  |`DateInterval.Month`|m|月;截断为整数值 |  |`DateInterval.Quarter`|q|季度;截断为整数值 |  |`DateInterval.Second`|s|第二个;舍入为接近的毫秒 |  |`DateInterval.Weekday`|w|天;截断为整数值 |  |`DateInterval.WeekOfYear`|ww|周;截断为整数值 |  |`DateInterval.Year`|yyyy|年;截断为整数值 |"
  example:
  - "This example takes a date and, using the `DateAdd` function, displays a corresponding date a specified number of months in the future.  \n  \n [!code-vb[VbVbalrFunctions#25](~/add/codesnippet/visualbasic/1a306149-706d-46fd-9b1a-_1.vb)]"
  syntax:
    content: public static DateTime DateAdd (Microsoft.VisualBasic.DateInterval Interval, double Number, DateTime DateValue);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必需。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>枚举值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示你想要添加的时间间隔的表达式。"
    - id: Number
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. 浮点表达式，表示你想要添加的间隔数。 `Number`可以是正值 （以获取将来的日期/时间值） 或负值 （以获取过去的日期/时间值）。 它可以包含小数部分时`Interval`指定小时数、 分钟或秒。 有关的其他值`Interval`、 任何小数部分的一部分`Number`将被忽略。"
    - id: DateValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 一个表示的日期和时间的时间间隔是要添加的表达式。 `DateValue`本身不是在调用程序中进行更改。"
    return:
      type: System.DateTime
      description: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>包含已向其添加指定的时间间隔的日期和时间值的值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateAdd*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>不是强制转换为<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>不是有效的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "计算所得的日期可为 1，或晚于 12 月 31 日 23:59:59 每年的 1 月 1 日 00:00:00 之前 9999。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  id: DateAdd(System.String,System.Double,System.Object)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateAdd(String,Double,Object)
  nameWithType: DateAndTime.DateAdd(String,Double,Object)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(String,Double,Object)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>包含已向其添加指定的时间间隔的日期和时间值的值。"
  remarks: "你可以使用`DateAdd`函数加上或减去从日期的指定的时间间隔。 例如，可以计算从今天或之前 45 分钟的时间现在的 30 天的日期。       若要添加第一天到`DateValue`，你可以使用`DateInterval.Day`， `DateInterval.DayOfYear`，或`DateInterval.Weekday`。 这些被视为等效项，因为`DayOfYear`和`Weekday`不是有意义的时间间隔。       `DateAdd`函数绝不会返回无效的日期。 如有必要，会生成日期的日部分向调整为结果结果年中月份的最后一天。 下面的示例将一个月添加到 1 月 31 日︰```vb#   Dim NextMonth As Date = DateAdd(DateInterval.Month, 1, #1/31/1995#)   ```在此示例中，`DateAdd`返回`#2/28/1995#`，而不`#2/31/1995#`。 如果`DateValue`是`#1/31/1996#`，它将返回`#2/29/1996#`因为 1996年是否为闰年。      1> [!NOTE]  >   `DateAdd`使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性<xref:System.Globalization.CultureInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值由**控制面板**设置。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>       由于每个`Date`支持值<xref:System.DateTime>结构，其方法提供了您添加时间间隔中的其他选项。</xref:System.DateTime> 例如，可以添加大量小数部分组成的天数，舍入到最接近的毫秒，为`Date`变量，如下所示︰ ```vb#   Dim NextTime As Date = Now        &quot; Current date and time.   NextTime = NextTime.AddDays(3.4)  &quot; Increment by 3 2/5 days.   ``` `Interval`自变量可以具有以下设置之一。      |枚举值 |字符串 |要添加的时间间隔单位 |  |-----------------------|------------|----------------------------------|  |`DateInterval.Day`|d|天;截断为整数值 |  |`DateInterval.DayOfYear`|y|天;截断为整数值 |  |`DateInterval.Hour`|h|小时;舍入为接近的毫秒 |  |`DateInterval.Minute`|n|分钟;舍入为接近的毫秒 |  |`DateInterval.Month`|m|月;截断为整数值 |  |`DateInterval.Quarter`|q|季度;截断为整数值 |  |`DateInterval.Second`|s|第二个;舍入为接近的毫秒 |  |`DateInterval.Weekday`|w|天;截断为整数值 |  |`DateInterval.WeekOfYear`|ww|周;截断为整数值 |  |`DateInterval.Year`|yyyy|年;截断为整数值 |"
  example:
  - "This example takes a date and, using the `DateAdd` function, displays a corresponding date a specified number of months in the future.  \n  \n [!code-vb[VbVbalrFunctions#25](~/add/codesnippet/visualbasic/8ee426fa-d573-45a5-a0f5-_1.vb)]"
  syntax:
    content: public static DateTime DateAdd (string Interval, double Number, object DateValue);
    parameters:
    - id: Interval
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>枚举值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示你想要添加的时间间隔的表达式。"
    - id: Number
      type: System.Double
      description: "必需。 <xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>. 浮点表达式，表示你想要添加的间隔数。 `Number`可以是正值 （以获取将来的日期/时间值） 或负值 （以获取过去的日期/时间值）。 它可以包含小数部分时`Interval`指定小时数、 分钟或秒。 有关的其他值`Interval`、 任何小数部分的一部分`Number`将被忽略。"
    - id: DateValue
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 一个表示的日期和时间的时间间隔是要添加的表达式。 `DateValue`本身不是在调用程序中进行更改。"
    return:
      type: System.DateTime
      description: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>包含已向其添加指定的时间间隔的日期和时间值的值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateAdd*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>不是强制转换为<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>不是有效的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "计算所得的日期可为 1，或晚于 12 月 31 日 23:59:59 每年的 1 月 1 日 00:00:00 之前 9999。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>值，该值指定两个之间的时间间隔数<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "你可以使用`DateDiff`函数来确定两个日期/时间值之间存在多少指定的时间间隔。 例如，你可能使用`DateDiff`来计算的两个日期或今天和每年的结束之间的周数之间的天数。      ## 行为-**的参数处理。** `DateDiff`值中减去`Date1`的值从`Date2`得到差值。 两个值被更改调用程序中。      -**返回值。** 因为`Date1`和`Date2`的`Date`数据类型，它们持有日期和时间值精确到 100 毫微秒上的系统计时器。 但是，`DateDiff`始终返回作为时间间隔数`Long`值。           如果`Date1`表示的更高版本的日期和时间比`Date2`，`DateDiff`返回一个负数。      -**天间隔。** 如果`Interval`设置为`DateInterval.DayOfYear`，则将视为相同`DateInterval.Day`，这是因为`DayOfYear`时间间隔的不是一个有意义的单元。      -**周的时间间隔。** 如果`Interval`设置为`DateInterval.WeekOfYear`，返回值表示包含的周的第一天之间的周数`Date1`和包含的周的第一天`Date2`。 下面的示例演示这如何生成从不同的结果`DateInterval.Weekday`。           [!code-vb[VbVbalrFunctions #60](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_1.vb) ]在前面的示例中，`DateDiff`返回 0 到`wD`因为两个日期之间的区别是不超过七天，但它将返回 1 到`wY`因为七天之间没有区别各自日历周的第一天。      -**更大的间隔。** 如果`Interval`设置为`DateInterval.Year`，返回的值计算仅从的年份部分`Date1`和`Date2`。 返回值与此类似，`DateInterval.Month`仅从年份和月份部分的自变量，以及计算`DateInterval.Quarter`从包含两个日期的季度。           例如，比较年 12 月 31 日到下一年，1 月 1 日时`DateDiff`返回 1 `DateInterval.Year`， `DateInterval.Quarter`，或`DateInterval.Month`，即使最多只能一天已过。           对于区域性，如有多个纪元的日语`DateDiff`方法不返回差年，如果差异跨两个或多个纪元。 相反，你可以在其中计算返回的值之间的差异<xref:System.DateTime.Year%2A>属性，如下面的示例中所示︰ `date2.Year - date1.Year`。</xref:System.DateTime.Year%2A>      -**其他时间间隔。** 由于每个`Date`支持值<xref:System.DateTime>结构，其方法提供了查找时间间隔中的其他选项。</xref:System.DateTime> 例如，你可以使用`Subtract`方法重载形式之一︰<xref:System.DateTime.Subtract%2A?displayProperty=fullName>减去<xref:System.TimeSpan>从`Date`变量返回另一个`Date`值，和<xref:System.DateTime.Subtract%2A?displayProperty=fullName>减去`Date`值以返回一种<xref:System.TimeSpan>。</xref:System.TimeSpan> </xref:System.DateTime.Subtract%2A?displayProperty=fullName> </xref:System.TimeSpan> </xref:System.DateTime.Subtract%2A?displayProperty=fullName> 你可以为时间要找出所需，如以下示例所示的毫秒数的进程。           [!code-vb[VbVbalrFunctions&#61;](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_2.vb) ] `Interval`自变量可以具有以下设置之一。      |枚举值 |字符串值 |时间差的单位 |  |-----------------------|------------------|-----------------------------|  |`DateInterval.Day`|&quot;d&quot;|天 |  |`DateInterval.DayOfYear`|&quot;y&quot;|天 |  |`DateInterval.Hour`|&quot;h&quot;|小时 |  |`DateInterval.Minute`|&quot;n&quot;|分钟 |  |`DateInterval.Month`|&quot;m&quot;|月 |  |`DateInterval.Quarter`|&quot;q&quot;|季度 |  |`DateInterval.Second`|&quot;s&quot;|第二个 |  |`DateInterval.Weekday`|&quot;w&quot;|周 |  |`DateInterval.WeekOfYear`|&quot;ww&quot;|日历周 |  |`DateInterval.Year`|&quot;yyyy&quot;|年份 |      `DayOfWeek`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|在系统设置中指定的一周中的第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （默认值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |      `WeekOfYear`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|在系统设置中指定的年第一周 |  |`FirstWeekOfYear.Jan1`|1|1 月 1 日所在的周 （默认值） |  |`FirstWeekOfYear.FirstFourDays`|2|至少有四个天 （符合 ISO 8601 标准第 3.17 节） 的新建年份中的周 |  |`FirstWeekOfYear.FirstFullWeek`|3|新的一年中的第一个完整每周 |"
  example:
  - "This example uses the `DateDiff` function to display the number of days between a given date and today.  \n  \n [!code-vb[VbVbalrFunctions#26](~/add/codesnippet/visualbasic/e9b06095-1039-4b68-96e4-_3.vb)]"
  syntax:
    content: public static long DateDiff (Microsoft.VisualBasic.DateInterval Interval, DateTime Date1, DateTime Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必需。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>枚举值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示你想要使用作为单位之间的差异的时间间隔的表达式`Date1`和`Date2`。"
    - id: Date1
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 你想要在计算中使用第一个日期/时间值。"
    - id: Date2
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 你想要在计算中使用第二个日期/时间值。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>指定一周的第一天的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>使用。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;></xref>指定年份的第一周的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>使用。"
    return:
      type: System.Int64
      description: "返回<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>值，该值指定两个之间的时间间隔数<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateDiff*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Date1</code><code>Date2</code>，或<code>DayofWeek</code>超出范围。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Date1</code>或<code>Date2</code>类型无效。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>值，该值指定两个之间的时间间隔数<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "你可以使用`DateDiff`函数来确定两个日期/时间值之间存在多少指定的时间间隔。 例如，你可能使用`DateDiff`来计算的两个日期或今天和每年的结束之间的周数之间的天数。      ## 行为-**的参数处理。** `DateDiff`值中减去`Date1`的值从`Date2`得到差值。 两个值被更改调用程序中。      -**返回值。** 因为`Date1`和`Date2`的`Date`数据类型，它们持有日期和时间值精确到 100 毫微秒上的系统计时器。 但是，`DateDiff`始终返回作为时间间隔数`Long`值。           如果`Date1`表示的更高版本的日期和时间比`Date2`，`DateDiff`返回一个负数。      -**天间隔。** 如果`Interval`设置为`DateInterval.DayOfYear`，则将视为相同`DateInterval.Day`，这是因为`DayOfYear`时间间隔的不是一个有意义的单元。      -**周的时间间隔。** 如果`Interval`设置为`DateInterval.WeekOfYear`，返回值表示包含的周的第一天之间的周数`Date1`和包含的周的第一天`Date2`。 下面的示例演示这如何生成从不同的结果`DateInterval.Weekday`。           [!code-vb[VbVbalrFunctions #60](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_1.vb) ]在前面的示例中，`DateDiff`返回 0 到`wD`因为两个日期之间的区别是不超过七天，但它将返回 1 到`wY`因为七天之间没有区别各自日历周的第一天。      -**更大的间隔。** 如果`Interval`设置为`DateInterval.Year`，返回的值计算仅从的年份部分`Date1`和`Date2`。 返回值与此类似，`DateInterval.Month`仅从年份和月份部分的自变量，以及计算`DateInterval.Quarter`从包含两个日期的季度。           例如，比较年 12 月 31 日到下一年，1 月 1 日时`DateDiff`返回 1 `DateInterval.Year`， `DateInterval.Quarter`，或`DateInterval.Month`，即使最多只能一天已过。           对于区域性，如有多个纪元的日语`DateDiff`方法不返回差年，如果差异跨两个或多个纪元。 相反，你可以在其中计算返回的值之间的差异<xref:System.DateTime.Year%2A>属性，如下面的示例中所示︰ `date2.Year - date1.Year`。</xref:System.DateTime.Year%2A>      -**其他时间间隔。** 由于每个`Date`支持值<xref:System.DateTime>结构，其方法提供了查找时间间隔中的其他选项。</xref:System.DateTime> 例如，你可以使用`Subtract`方法重载形式之一︰<xref:System.DateTime.Subtract%2A?displayProperty=fullName>减去<xref:System.TimeSpan>从`Date`变量返回另一个`Date`值，和<xref:System.DateTime.Subtract%2A?displayProperty=fullName>减去`Date`值以返回一种<xref:System.TimeSpan>。</xref:System.TimeSpan> </xref:System.DateTime.Subtract%2A?displayProperty=fullName> </xref:System.TimeSpan> </xref:System.DateTime.Subtract%2A?displayProperty=fullName> 你可以为时间要找出所需，如以下示例所示的毫秒数的进程。           [!code-vb[VbVbalrFunctions&#61;](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_2.vb) ] `Interval`自变量可以具有以下设置之一。      |枚举值 |字符串值 |时间差的单位 |  |-----------------------|------------------|-----------------------------|  |`DateInterval.Day`|&quot;d&quot;|天 |  |`DateInterval.DayOfYear`|&quot;y&quot;|天 |  |`DateInterval.Hour`|&quot;h&quot;|小时 |  |`DateInterval.Minute`|&quot;n&quot;|分钟 |  |`DateInterval.Month`|&quot;m&quot;|月 |  |`DateInterval.Quarter`|&quot;q&quot;|季度 |  |`DateInterval.Second`|&quot;s&quot;|第二个 |  |`DateInterval.Weekday`|&quot;w&quot;|周 |  |`DateInterval.WeekOfYear`|&quot;ww&quot;|日历周 |  |`DateInterval.Year`|&quot;yyyy&quot;|年份 |      `DayOfWeek`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|在系统设置中指定的一周中的第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （默认值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |      `WeekOfYear`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|在系统设置中指定的年第一周 |  |`FirstWeekOfYear.Jan1`|1|1 月 1 日所在的周 （默认值） |  |`FirstWeekOfYear.FirstFourDays`|2|至少有四个天 （符合 ISO 8601 标准第 3.17 节） 的新建年份中的周 |  |`FirstWeekOfYear.FirstFullWeek`|3|新的一年中的第一个完整每周 |"
  example:
  - "This example uses the `DateDiff` function to display the number of days between a given date and today.  \n  \n [!code-vb[VbVbalrFunctions#26](~/add/codesnippet/visualbasic/46a9da0a-21fc-441c-a532-_3.vb)]"
  syntax:
    content: public static long DateDiff (string Interval, object Date1, object Date2, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>枚举值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示你想要使用作为单位之间的差异的时间间隔的表达式`Date1`和`Date2`。"
    - id: Date1
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 你想要在计算中使用第一个日期/时间值。"
    - id: Date2
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>. 你想要在计算中使用第二个日期/时间值。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>指定一周的第一天的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>使用。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;></xref>指定年份的第一周的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>使用。"
    return:
      type: System.Int64
      description: "返回<xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;></xref>值，该值指定两个之间的时间间隔数<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.DateAndTime.DateDiff*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Date1</code><code>Date2</code>，或<code>DayofWeek</code>超出范围。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>Date1</code>或<code>Date2</code>类型无效。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值包含指定的组件的给定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "你可以使用`DatePart`函数来评估的日期/时间值并返回特定的组件。 例如，你可能使用`DatePart`计算某个日期是星期几或当前小时。       如果你选择`DateInterval.Weekday`为`Interval`自变量，则返回的值是一致的值`FirstDayOfWeek`枚举。 如果你选择`DateInterval.WeekOfYear`，`DatePart`使用<xref:System.Globalization.Calendar>和<xref:System.Globalization.CultureInfo>类<xref:System.Globalization>命名空间，以确定当前的设置。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.Calendar>       `FirstDayOfWeekValue`参数会影响使用的计算`DateInterval.Weekday`和`DateInterval.WeekOfYear``Interval`设置。 `FirstWeekOfYearValue`参数对指定的计算的影响`DateInterval.WeekOfYear`为`Interval`。       由于每个`Date`支持值<xref:System.DateTime>结构，其方法提供了你中检索日期/时间部分的其他选项。</xref:System.DateTime> 例如，你可以获取的整个日期值`Date`变量，将时间值，如下所示设置为午夜，︰ ```vb#   Dim CurrDatTim As Date = Now   &quot; Current date and time.   Dim LastMidnight As Date = CurrDatTim.Date   &quot; At midnight.   ``` `Interval`自变量可以具有以下设置之一。      |枚举值 |字符串 |要返回的日期/时间值的一部分 |  |-----------------------|------------|----------------------------------------|  |`DateInterval.Day`|d|月 (1 到 31) 天 |  |`DateInterval.DayOfYear`|y|年 (1 到 366) 的一天 |  |`DateInterval.Hour`|h|小时 |  |`DateInterval.Minute`|n|分钟 |  |`DateInterval.Month`|m|月 |  |`DateInterval.Quarter`|q|季度 |  |`DateInterval.Second`|s|第二个 |  |`DateInterval.Weekday`|w|星期几 (1 到 7) |  |`DateInterval.WeekOfYear`|ww|年 (1 到 53) 周的 |  |`DateInterval.Year`|yyyy|年份 |      `FirstDayOfWeekValue`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|在系统设置中指定的一周中的第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （默认值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |      `FirstWeekOfYearValue`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|在系统设置中指定的年第一周 |  |`FirstWeekOfYear.Jan1`|1|1 月 1 日所在的周 （默认值） |  |`FirstWeekOfYear.FirstFourDays`|2|至少有四个天 （符合 ISO 8601 标准第 3.17 节） 的新建年份中的周 |  |`FirstWeekOfYear.FirstFullWeek`|3|新的一年中的第一个完整每周 |"
  example:
  - "This example takes a date and, using the `DatePart` function, displays the quarter of the year in which it occurs.  \n  \n [!code-vb[VbVbalrFunctions#27](~/add/codesnippet/visualbasic/982d49dd-7819-40e1-9b19-_1.vb)]"
  syntax:
    content: public static int DatePart (Microsoft.VisualBasic.DateInterval Interval, DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear FirstWeekOfYearValue = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: Microsoft.VisualBasic.DateInterval
      description: "必需。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>枚举值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示你想要返回的日期/时间值的一部分的表达式。"
    - id: DateValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>你想要评估的值。"
    - id: FirstDayOfWeekValue
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>指定一周的第一天的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>使用。"
    - id: FirstWeekOfYearValue
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;></xref>指定年份的第一周的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>使用。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值包含指定的组件的给定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.DateAndTime.DatePart*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>不是有效的。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>不是强制转换为<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  id: DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值包含指定的组件的给定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  remarks: "你可以使用`DatePart`函数来评估的日期/时间值并返回特定的组件。 例如，你可能使用`DatePart`计算某个日期是星期几或当前小时。       如果你选择`DateInterval.Weekday`为`Interval`自变量，则返回的值是一致的值`FirstDayOfWeek`枚举。 如果你选择`DateInterval.WeekOfYear`，`DatePart`使用<xref:System.Globalization.Calendar>和<xref:System.Globalization.CultureInfo>类<xref:System.Globalization>命名空间，以确定当前的设置。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.Calendar>       `FirstDayOfWeekValue`参数会影响使用的计算`DateInterval.Weekday`和`DateInterval.WeekOfYear``Interval`设置。 `FirstWeekOfYearValue`参数对指定的计算的影响`DateInterval.WeekOfYear`为`Interval`。       由于每个`Date`支持值<xref:System.DateTime>结构，其方法提供了你中检索日期/时间部分的其他选项。</xref:System.DateTime> 例如，你可以获取的整个日期值`Date`变量，将时间值，如下所示设置为午夜，︰ ```vb#   Dim CurrDatTim As Date = Now   &quot; Current date and time.   Dim LastMidnight As Date = CurrDatTim.Date   &quot; At midnight.   ``` `Interval`自变量可以具有以下设置之一。      |枚举值 |字符串 |要返回的日期/时间值的一部分 |  |-----------------------|------------|----------------------------------------|  |`DateInterval.Day`|d|月 (1 到 31) 天 |  |`DateInterval.DayOfYear`|y|年 (1 到 366) 的一天 |  |`DateInterval.Hour`|h|小时 |  |`DateInterval.Minute`|n|分钟 |  |`DateInterval.Month`|m|月 |  |`DateInterval.Quarter`|q|季度 |  |`DateInterval.Second`|s|第二个 |  |`DateInterval.Weekday`|w|星期几 (1 到 7) |  |`DateInterval.WeekOfYear`|ww|年 (1 到 53) 周的 |  |`DateInterval.Year`|yyyy|年份 |      `FirstDayOfWeekValue`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|在系统设置中指定的一周中的第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （默认值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |      `FirstWeekOfYearValue`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstWeekOfYear.System`|0|在系统设置中指定的年第一周 |  |`FirstWeekOfYear.Jan1`|1|1 月 1 日所在的周 （默认值） |  |`FirstWeekOfYear.FirstFourDays`|2|至少有四个天 （符合 ISO 8601 标准第 3.17 节） 的新建年份中的周 |  |`FirstWeekOfYear.FirstFullWeek`|3|新的一年中的第一个完整每周 |"
  example:
  - "This example takes a date and, using the `DatePart` function, displays the quarter of the year in which it occurs.  \n  \n [!code-vb[VbVbalrFunctions#27](~/add/codesnippet/visualbasic/682455c0-1619-4c4c-8238-_1.vb)]"
  syntax:
    content: public static int DatePart (string Interval, object DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday, Microsoft.VisualBasic.FirstWeekOfYear WeekOfYear = Microsoft.VisualBasic.FirstWeekOfYear.Jan1);
    parameters:
    - id: Interval
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_DateInterval&quot; name=&quot;DateInterval&quot; href=&quot;&quot;></xref>枚举值或<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示你想要返回的日期/时间值的一部分的表达式。"
    - id: DateValue
      type: System.Object
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>你想要评估的值。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>指定一周的第一天的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>使用。"
    - id: WeekOfYear
      type: Microsoft.VisualBasic.FirstWeekOfYear
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstWeekOfYear&quot; name=&quot;FirstWeekOfYear&quot; href=&quot;&quot;></xref>指定年份的第一周的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstWeekOfYear.Jan1&quot; name=&quot;FirstWeekOfYear.Jan1&quot; href=&quot;&quot;> </xref>使用。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>值，该值包含指定的组件的给定<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值。"
  overload: Microsoft.VisualBasic.DateAndTime.DatePart*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Interval</code>是无效的。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>DateValue</code>不是强制转换为<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  id: DateSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.DateSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.DateSerial(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值表示指定的年、 月和日，时间信息设置为午夜 (00:&00;:00)。"
  remarks: "在 Windows 98 或 Windows 2000 下的两位数年份`Year`的自变量解释基于用户定义的计算机的设置。 默认设置是从 0 到 29 值都会被解释为 2000 年到 2029 年和 30 到 99 的值都会被解释为 1930年 – 1999 年。 对于所有其他`Year`自变量、 使用四位数年份; 例如，选择 1924年。       早期版本的 Windows 解释基于前面所述的默认值的两位数年份。 若要确保该函数返回正确的值，请使用四位数`Year`。       下面的示例演示负，零，并且正自变量值。 在这里，`DateSerial`函数返回`Date`表示年之前当前年份; 10 年 3 月 1 日的第一天前一天换而言之，年 2 月十年以前的最后一天。      ```vb#   Dim EndFeb As Date = DateSerial(-10, 3, 0)   ```如果任一`Month`或`Day`超过其正常值，就会应用于下一步适当的更大单位。 例如，如果指定 32 天，其计算结果为一个月介于 1 到 4 天，具体取决于值`Month`。 如果`Year`大于 9999，或如果任何参数超出范围-2147483648 到 2147483647，<xref:System.ArgumentException>发生错误。</xref:System.ArgumentException> 如果由三个参数指定的日期为 9999，早于月 1 日，或晚于 12 月 31 日 23:59:59 每年的 1 月 1 日 00:00:00<xref:System.ArgumentOutOfRangeException>发生错误。</xref:System.ArgumentOutOfRangeException>       `Date`数据类型包括时间组件。 `DateSerial`设置所有这些为 0，因此返回的值表示计算的一天开始。       由于每个`Date`支持值<xref:System.DateTime>结构，其方法提供了附加选项中组合`Date`值。</xref:System.DateTime> 例如，你可以使用重载之一<xref:System.DateTime.%23ctor%2A>构造函数来填充`Date`变量时使用的组件所需的组合。</xref:System.DateTime.%23ctor%2A> 下面的示例设置`NewDateTime`1978 5 月 6，在上午 8:30 秒的十分之一到︰```vb#   Dim NewDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)   ```"
  example:
  - "This example uses the `DateSerial` function to return the date for the specified year, month, and day.  \n  \n [!code-vb[VbVbalrFunctions#28](~/add/codesnippet/visualbasic/2c6c2f83-8b90-492d-bf33-_1.vb)]"
  syntax:
    content: public static DateTime DateSerial (int Year, int Month, int Day);
    parameters:
    - id: Year
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 1 到 9999 的表达式。 但是，还接受小于此范围的值。 如果`Year`为 0 到 99 之间，它被解释为介于 1930年和 2029，如下面的&quot;备注&quot;部分中所述。 如果`Year`小于 1，从当前年份减去。"
    - id: Month
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 1 到 12 的表达式。 但是，还接受此范围之外的值。 值`Month`偏移量为 1 和应用于计算年份的 1 月。 换而言之，(`Month` -1) 添加到年 1 月。 如有必要，重新计算年份。 以下结果说明了此效果︰ 如果`Month`为 1，则结果是计算年份的 1 月。       如果`Month`为 0，则结果为的前一 12 年月。       如果`Month`为-1，结果为的前一&11; 年月。       如果`Month`为 13，则结果为以下年份的 1 月。"
    - id: Day
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 1 到 31 之间的表达式。 但是，还接受此范围之外的值。 值`Day`偏移量为 1 和应用于计算得出的月份的第一天。 换而言之，(`Day` -1) 添加到月份的第一。 如有必要，会重新计算的月份和年份。 以下结果说明了此效果︰ 如果`Day`为 1，结果是计算得出的月份的第一天。       如果`Day`为 0，则结果是与上个月份的最后一天。       如果`Day`为-1，则结果为与上个月份倒数第二天。       如果`Day`是的过去的末尾当前月份，结果为下个月的相应天。 例如，如果`Month`为 4 和`Day`为 31，则结果为 5 月 1。"
    return:
      type: System.DateTime
      description: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值表示指定的年、 月和日，时间信息设置为午夜 (00:&00;:00)。"
  overload: Microsoft.VisualBasic.DateAndTime.DateSerial*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateString
  id: DateString
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateString
  nameWithType: DateAndTime.DateString
  fullName: Microsoft.VisualBasic.DateAndTime.DateString
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回或设置<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，该值表示根据系统当前日期。"
  remarks: "`DateString`以 MM dd yyyy 格式，它使用月份的缩写的名称返回系统日期。 接受日期格式应为 M d yyyy，M d y、 年-月-日和年-/ y。 这适用于除使用双字节字符集 (DBCS) 的所有系统区域设置。 如果系统区域设置使用双字节字符集， `DateString` yyyy-月-日格式返回系统日期。 系统区域设置通过设置**时钟、 语言和区域**中项**控制面板**。       **请注意**`DateString`属性仅在为 yyyy-月-日格式返回系统日期`zh`（简体中文）， `ko` （朝鲜语） 和`ja`（日语） 的系统区域设置，如果你正在运行 Visual Basic 中 Silverlight。       要获取或设置在当前系统时间`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>       若要在你的区域设置的格式或自定义格式，请获取当前系统日期或时间，请提供<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>属性<xref:Microsoft.VisualBasic.Strings.Format%2A>函数，并指定预定义的或用户定义的日期/时间格式。</xref:Microsoft.VisualBasic.Strings.Format%2A> </xref:Microsoft.VisualBasic.DateAndTime.Now%2A> 下面的示例演示此操作。      ```   MsgBox(&quot;The formatted date is &quot; & Format(Now, &quot;dddd, d MMM yyyy&quot;))   ```若要访问的当前系统日期`Date`，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.Today%2A>      1> [!IMPORTANT]&1;> 设置系统日期或时间需要非托管的代码的权限，这可能会影响在部分信任情况下其执行。 有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>和[代码访问权限](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following example uses the `DateString` property to display the current system date.  \n  \n [!code-vb[VbVbalrDateProperties#1](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#1)]"
  syntax:
    content: public static string DateString { get; set; }
    return:
      type: System.String
      description: "返回或设置<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，该值表示根据系统当前日期。"
  overload: Microsoft.VisualBasic.DateAndTime.DateString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "用于设置的值的格式无效<xref uid=&quot;langword_csharp_DateString&quot; name=&quot;DateString&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  id: DateValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: DateValue(String)
  nameWithType: DateAndTime.DateValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.DateValue(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含由字符串，表示与设置为午夜的时间信息的日期信息 (00:&00;:00)。"
  remarks: "如果`StringDate`包括仅从 1 到 12 由有效的日期分隔符分隔的数字`DateValue`将识别月、 日和年根据为你的系统指定的短日期格式的顺序。 `DateValue`使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性<xref:System.Globalization.CultureInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值由**控制面板**设置。</xref:System.Globalization.CultureInfo.CurrentCulture%2A> 可以通过设置重写的短日期格式<xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>属性<xref:System.Globalization.DateTimeFormatInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.DateTimeFormatInfo> </xref:System.Globalization.DateTimeFormatInfo.ShortDatePattern%2A>       `DateValue`识别长、 缩写，和数字的窗体中的月份名称。 例如，除了识别 12/30/1991年和 12/30/91，`DateValue`还可识别 1991 年 12 月 30 和 1991 年 12 月 30。       如果年份部分的`StringDate`省略，`DateValue`使用从你的计算机的系统日期的当前年份。       如果`StringDate`自变量包含时间信息`DateValue`不包括在返回值。 但是，如果`StringDate`包括无效的时间信息，例如&quot;89:&98;&quot;<xref:System.InvalidCastException>发生错误。</xref:System.InvalidCastException>"
  example:
  - "This example uses the `DateValue` function to convert a string to a date. You can also use date literals to directly assign a date to an `Object` or `Date` variable, for example, `oldDate = #2/12/69#`.  \n  \n [!code-vb[VbVbalrFunctions#29](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._84_1.vb)]"
  syntax:
    content: public static DateTime DateValue (string StringDate);
    parameters:
    - id: StringDate
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>从 1 到 12 月 31 日 23:59:59 年 1 月 1 日 00:00:00 9999 表示的日期/时间值的表达式。"
    return:
      type: System.DateTime
      description: "<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>包含由字符串，表示与设置为午夜的时间信息的日期信息的值 (00:&00;:00)。"
  overload: Microsoft.VisualBasic.DateAndTime.DateValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>StringDate</code>包含无效的时间信息。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  id: Day(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Day(DateTime)
  nameWithType: DateAndTime.Day(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Day(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>介于 1 和 31 之间的月份值。"
  remarks: "如果你使用`Day`函数，你可能需要限定其与`Microsoft.VisualBasic`命名空间，因为<xref:System.Windows.Forms>命名空间定义<xref:System.Windows.Forms.Day>作为枚举。</xref:System.Windows.Forms.Day> </xref:System.Windows.Forms> 下面的示例演示如何合格`Day`解决这种混乱情况︰```vb#   Dim thisDay As Integer = Microsoft.VisualBasic.DateAndTime.Day(Now)   ```还可以通过调用来获取每月天数`DatePart`并指定`DateInterval.Day`为*间隔*自变量。"
  example:
  - "The following example uses the `Day` function to obtain the day of the month from a specified date. In the development environment, the date literal is displayed in standard short format (such as \"02/12/1969\") using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#30](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._126_1.vb)]  \n  \n `Day` is qualified to distinguish it from the <xref:System.Windows.Forms.Day?displayProperty=fullName> enumeration."
  syntax:
    content: public static int Day (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要从中提取一天的值。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>介于 1 和 31 之间的月份值。"
  overload: Microsoft.VisualBasic.DateAndTime.Day*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  id: Hour(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Hour(DateTime)
  nameWithType: DateAndTime.Hour(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Hour(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 0 到 23 表示一天 24 小时的值。"
  remarks: "你还可以通过调用获取一天中的小时`DatePart`并指定`DateInterval.Hour`为`Interval`自变量。"
  example:
  - "This example uses the `Hour` function to obtain the hour from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#32](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._192_1.vb)]"
  syntax:
    content: public static int Hour (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要从中提取小时的值。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 0 到 23 表示一天 24 小时的值。"
  overload: Microsoft.VisualBasic.DateAndTime.Hour*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  id: Minute(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Minute(DateTime)
  nameWithType: DateAndTime.Minute(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Minute(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 0 到 59 表示的小时分钟数的值。"
  remarks: "你还可以通过调用获取的小时分钟`DatePart`并指定`DateInterval.Minute`为`Interval`自变量。"
  example:
  - "This example uses the `Minute` function to obtain the minute of the hour from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#42](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._195_1.vb)]"
  syntax:
    content: public static int Minute (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要从中提取分钟的值。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 0 到 59 表示的小时分钟数的值。"
  overload: Microsoft.VisualBasic.DateAndTime.Minute*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  id: Month(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Month(DateTime)
  nameWithType: DateAndTime.Month(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Month(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 1 到 12 表示的年份的月的值。"
  remarks: "你还可以通过调用获取的年份的月`DatePart`并指定`DateInterval.Month`为`Interval`自变量。"
  example:
  - "This example uses the `Month` function to obtain the month from a specified date. In the development environment, the date literal is displayed in short date format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#43](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._213_1.vb)]"
  syntax:
    content: public static int Month (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要从中提取每月的值。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 1 到 12 表示的年份的月的值。"
  overload: Microsoft.VisualBasic.DateAndTime.Month*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  id: MonthName(System.Int32,System.Boolean)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: MonthName(Int32,Boolean)
  nameWithType: DateAndTime.MonthName(Int32,Boolean)
  fullName: Microsoft.VisualBasic.DateAndTime.MonthName(Int32,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，该值包含指定的月份的名称。"
  remarks: "返回的字符串`MonthName`取决于不仅在输入参数，但还**区域选项**Windows 中指定的设置**控制面板**。      1> [!NOTE]  >   `MonthName`使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性<xref:System.Globalization.CultureInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值由**控制面板**设置。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>"
  example:
  - "This example uses the `MonthName` function to determine the name of the month, by the integer given. The Boolean value will determine whether the full name (`False`) or the abbreviated name (`True`) will be displayed.  \n  \n [!code-vb[VbVbalrFunctions#44](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._194_1.vb)]"
  syntax:
    content: public static string MonthName (int Month, bool Abbreviate = false);
    parameters:
    - id: Month
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 月中，从 1 到 13; 数值表示形式1 表示一月，12 表示年 12 月。 你可以使用 13 个月的日历值 13。 如果你的系统使用 12 个月的日历和`Month`为 13， <xref uid=&quot;langword_csharp_MonthName&quot; name=&quot;MonthName&quot; href=&quot;&quot;> </xref>返回空字符串。"
    - id: Abbreviate
      type: System.Boolean
      description: "可选。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示是否月份名称是缩写。 如果省略，默认值是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>，这意味着对月份名称不缩写形式。"
    return:
      type: System.String
      description: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，该值包含指定的月份的名称。"
  overload: Microsoft.VisualBasic.DateAndTime.MonthName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Month</code>是小于 1 或大于 13。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Now
  id: Now
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Now
  nameWithType: DateAndTime.Now
  fullName: Microsoft.VisualBasic.DateAndTime.Now
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含当前日期和时间根据您的系统。"
  remarks: "若要设置系统日期，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.Today%2A> 若要设置的系统时间，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>"
  example:
  - "The following example uses the `Now` property to return the current system date and time.  \n  \n [!code-vb[VbVbalrDateProperties#4](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#4)]"
  syntax:
    content: public static DateTime Now { get; }
    return:
      type: System.DateTime
      description: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含当前日期和时间根据您的系统。"
  overload: Microsoft.VisualBasic.DateAndTime.Now*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  id: Second(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Second(DateTime)
  nameWithType: DateAndTime.Second(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Second(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 0 到 59 分钟的 60 秒的值。"
  remarks: "你还可以通过调用获取的第二个分钟`DatePart`并指定`DateInterval.Second`为`Interval`自变量。"
  example:
  - "The following example uses the `Second` function to obtain the second of the minute from a specified time. In the development environment, the time literal is displayed in short time format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#46](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._54_1.vb)]"
  syntax:
    content: public static int Second (DateTime TimeValue);
    parameters:
    - id: TimeValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要从中提取第二个值。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>从 0 到 59 分钟的 60 秒的值。"
  overload: Microsoft.VisualBasic.DateAndTime.Second*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  id: TimeOfDay
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
  fullName: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回或设置<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含根据您的系统的一天中的当前时间。"
  remarks: "`Date`数据类型包括日期组件。 如果返回的系统时间，则返回`TimeOfDay`设置为 1，所有这些，因此返回的值表示 1 年的第一天。 设置系统时间时`TimeOfDay`忽略日期部分。       若要访问在当前系统时间`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.TimeString%2A>       若要获取或设置当前系统日期，使用<xref:Microsoft.VisualBasic.DateAndTime.Today%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.Today%2A>      1> [!IMPORTANT]&1;> 设置系统日期或时间需要非托管的代码的权限，这可能会影响在部分信任情况下其执行。 有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>和[代码访问权限](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the `TimeOfDay` property to return the current system time.  \n  \n [!code-vb[VbVbalrDateProperties#3](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#3)]"
  syntax:
    content: public static DateTime TimeOfDay { get; set; }
    return:
      type: System.DateTime
      description: "返回或设置<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含根据您的系统的一天中的当前时间。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeOfDay*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Timer
  id: Timer
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Timer
  nameWithType: DateAndTime.Timer
  fullName: Microsoft.VisualBasic.DateAndTime.Timer
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>自午夜以来经过的值，该值表示的秒数。"
  remarks: "`Timer`属性返回最新的午夜以来的秒数和毫秒数。 中的返回值的整数部分时秒是和毫秒数为小数部分。"
  example:
  - "This example uses the `Timer` property to pause the application. It can perform other processing during the pause.  \n  \n [!code-vb[VbVbalrTimerProperty#1](~/add/codesnippet/visualbasic/VbVbalrTimerProperty/Form1.vb#1)]  \n  \n Note that you must qualify the `Timer` property with the <xref:Microsoft.VisualBasic?displayProperty=fullName> namespace, because `Timer` is also a defined class in the <xref:System.Threading?displayProperty=fullName>, <xref:System.Timers?displayProperty=fullName>, and <xref:System.Windows.Forms?displayProperty=fullName> namespaces."
  syntax:
    content: public static double Timer { get; }
    return:
      type: System.Double
      description: "返回<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>自午夜以来经过的值，该值表示的秒数。"
  overload: Microsoft.VisualBasic.DateAndTime.Timer*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  id: TimeSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.TimeSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeSerial(Int32,Int32,Int32)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值表示指定的小时、 分钟和秒，设置相对于 1 年 1 月 1 日的日期信息。"
  remarks: "下面的示例演示负，零，并且正自变量值。 `TimeSerial`函数返回表示之前在中午或上午 8:45:00 之前的三个小时的 15 分钟的时间。      ```vb#   Dim alarmTime As Date = TimeSerial(12 - 3, -15, 0)   ```如果任一`Minute`或`Second`超过其正常值，就会应用于下一步适当的更大单位。 例如，如果您指定 75 分钟，它会评估为 1 小时 15 分钟。       `TimeSerial`减少的总秒数取模 86400，这是一天中的秒数。 因此，返回的时间始终是 00:00:00 和 23:59:59 之间。       `Date`数据类型包括日期组件。 `TimeSerial`设置所有这些为 1，因此返回的值表示 1 年的第一天。 但是，如果自变量的值会导致计算得出的时间超过 24 小时，在一天会相应增加。 在下面的示例中，值`Hour`和`Minute`导致的合并时间为超过 24 小时。      ```vb#   MsgBox(TimeSerial(23, 75, 0))    &quot; The preceding statement displays &quot;1/2/0001 12:15:00 AM&quot;.   ```如果参数的值会导致负的计算时间，日期信息设置为 0001 年 1 月 1 日和 00:00:00 和 23:59:59 之间进行调整的时间信息。 但是，如果计算出的时间是小于负 24 小时，<xref:System.ArgumentOutOfRangeException>发生错误。</xref:System.ArgumentOutOfRangeException>       由于每个`Date`支持值<xref:System.DateTime?displayProperty=fullName>结构，其方法提供了附加选项中组合`Date`值。</xref:System.DateTime?displayProperty=fullName> 例如，你可以采用重载之一<xref:System.DateTime.%23ctor%2A>构造函数来填充`Date`变量时使用的组件所需的组合。</xref:System.DateTime.%23ctor%2A> 下面的示例设置`newDateTime`1978 5 月 6，在上午 8:30 秒的十分之一到︰```vb#   Dim newDateTime As Date = New Date(1978, 5, 6, 8, 29, 59, 900)   ```"
  example:
  - "The following example uses the `TimeSerial` function to return a time for the specified hour, minute, and second.  \n  \n [!code-vb[VbVbalrFunctions#50](~/add/codesnippet/visualbasic/4788d161-48a1-4476-aa26-_1.vb)]"
  syntax:
    content: public static DateTime TimeSerial (int Hour, int Minute, int Second);
    parameters:
    - id: Hour
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 到 23 之间的表达式。 但是，还接受此范围之外的值。"
    - id: Minute
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 到 59 之间的表达式。 但是，还接受此范围之外的值。 值`Minute`添加到计算小时数，因此负值指定该小时前的分钟数。"
    - id: Second
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>0 到 59 之间的表达式。 但是，还接受此范围之外的值。 值`Second`添加到计算的分钟数，因此负值指定该分钟前的秒数。"
    return:
      type: System.DateTime
      description: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值表示指定的小时、 分钟和秒，设置相对于 1 年 1 月 1 日的日期信息。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeSerial*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "自变量超出范围-2147483648 到 2147483647"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "计算得出的时间是小于负的 24 小时。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeString
  id: TimeString
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeString
  nameWithType: DateAndTime.TimeString
  fullName: Microsoft.VisualBasic.DateAndTime.TimeString
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回或设置<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示当前时间根据您的系统的一天中的值。"
  remarks: "`TimeString`始终返回&quot;hh: mm:&quot;中，在系统时间，这是 24 小时格式。 此格式是不依区域性而变的这意味着即使更改不会更改**区域选项**中**控制面板**。       要获取或设置的当前系统日期`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>       若要在你的区域设置的格式或自定义格式，请获取当前系统日期或时间，请提供<xref:Microsoft.VisualBasic.DateAndTime.Now%2A>属性<xref:Microsoft.VisualBasic.Strings.Format%2A>函数，并指定预定义的或用户定义的日期/时间格式。</xref:Microsoft.VisualBasic.Strings.Format%2A> </xref:Microsoft.VisualBasic.DateAndTime.Now%2A> 下面的示例演示此操作。      ```   MsgBox(&quot;The formatted time is &quot; & Format(Now, &quot;hh.mm.ss.fff tt&quot;))   ```若要访问在当前系统时间`Date`，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>      1> [!IMPORTANT]&1;> 设置系统日期或时间需要非托管的代码的权限，这可能会影响在部分信任情况下其执行。 有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>和[代码访问权限](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the `TimeString` property to display the current system time.  \n  \n [!code-vb[VbVbalrDateProperties#2](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#2)]"
  syntax:
    content: public static string TimeString { get; set; }
    return:
      type: System.String
      description: "返回或设置<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示当前时间根据您的系统的一天中的值。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeString*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "用于设置的值的格式无效<xref uid=&quot;langword_csharp_TimeString&quot; name=&quot;TimeString&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  id: TimeValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: TimeValue(String)
  nameWithType: DateAndTime.TimeValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeValue(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含由字符串，表示与设置为 1 年 1 月 1 日的日期信息的时间信息。"
  remarks: "你可以输入有效的时间采用 12 小时制或 24 小时制。 例如，`&quot;2:24 P.M.&quot;`和`&quot;14:24&quot;`都是有效`StringTime`自变量。       如果`StringTime`自变量包含日期信息`TimeValue`不包括在返回值。 但是，如果`StringTime`包括无效的日期信息，例如&quot;年 1 月 32，&quot;<xref:System.InvalidCastException>发生错误。</xref:System.InvalidCastException>"
  example:
  - "The following example uses the `TimeValue` function to convert a string to a time. You can also use date literals to directly assign a time to a `Date` variable.  \n  \n [!code-vb[VbVbalrFunctions#51](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._232_1.vb)]"
  syntax:
    content: public static DateTime TimeValue (string StringTime);
    parameters:
    - id: StringTime
      type: System.String
      description: "必需。 <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>从 1 到 12 月 31 日 23:59:59 年 1 月 1 日 00:00:00 9999 表示的日期/时间值的表达式。"
    return:
      type: System.DateTime
      description: "返回<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含由字符串，表示与设置为 1 年 1 月 1 日的日期信息的时间信息。"
  overload: Microsoft.VisualBasic.DateAndTime.TimeValue*
  exceptions:
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "<code>StringTime</code>包含无效的日期信息。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Today
  id: Today
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Today
  nameWithType: DateAndTime.Today
  fullName: Microsoft.VisualBasic.DateAndTime.Today
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回或设置<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含根据您的系统的当前日期。"
  remarks: "`Date`数据类型包括时间组件。 如果返回系统日期，则返回`Today`设置所有这些为 0，因此返回的值表示午夜 (00: 00:00)。 设置系统日期时`Today`忽略时间组件。       若要访问的当前系统日期`String`，使用<xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.DateString%2A>       若要获取或设置当前系统时间，使用<xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>属性。</xref:Microsoft.VisualBasic.DateAndTime.TimeOfDay%2A>      1> [!IMPORTANT]&1;> 设置系统日期或时间需要非托管的代码的权限，这可能会影响在部分信任情况下其执行。 有关详细信息，请参阅<xref:System.Security.Permissions.SecurityPermission>和[代码访问权限](http://msdn.microsoft.com/en-us/e5ae402f-6dda-4732-bbe8-77296630f675)。</xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "This example uses the `Today` property to return the current system date.  \n  \n [!code-vb[VbVbalrDateProperties#5](~/add/codesnippet/visualbasic/VbVbalrDateProperties/Module1.vb#5)]"
  syntax:
    content: public static DateTime Today { get; set; }
    return:
      type: System.DateTime
      description: "返回或设置<xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>值，该值包含根据您的系统的当前日期。"
  overload: Microsoft.VisualBasic.DateAndTime.Today*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  id: Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Weekday(DateTime,FirstDayOfWeek)
  nameWithType: DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>包含表示星期几的数字的值。"
  remarks: "返回的值`Weekday`函数对应的值`FirstDayOfWeek`枚举; 即，1 表示星期日，7 表示星期六。      1> [!NOTE]  >   `Weekday`使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性<xref:System.Globalization.CultureInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值由**控制面板**设置。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>       `DayOfWeek`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|在系统设置中指定的一周中的第一天 |  |`FirstDayOfWeek.Sunday`|1|星期日 （默认值） |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |"
  example:
  - "The following example uses the `Weekday` function to obtain the day of the week from a specified date.  \n  \n [!code-vb[VbVbalrFunctions#57](~/add/codesnippet/visualbasic/369e7ed8-1790-4eb8-9e17-_1.vb)]"
  syntax:
    content: public static int Weekday (DateTime DateValue, Microsoft.VisualBasic.FirstDayOfWeek DayOfWeek = Microsoft.VisualBasic.FirstDayOfWeek.Sunday);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>你要为其确定星期几的值。"
    - id: DayOfWeek
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>指定一周的第一天的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.Sunday&quot; name=&quot;FirstDayOfWeek.Sunday&quot; href=&quot;&quot;> </xref>使用。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>包含表示星期几的数字的值。"
  overload: Microsoft.VisualBasic.DateAndTime.Weekday*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>DayOfWeek</code>小于 0 或大于 7。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  id: WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: WeekdayName(Int32,Boolean,FirstDayOfWeek)
  nameWithType: DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，该值包含指定工作日的名称。"
  remarks: "返回的字符串`WeekdayName`取决于不仅在输入参数，但还**区域选项**Windows 中指定的设置**控制面板**。      1> [!NOTE]  >   `WeekdayName`使用中的当前日历设置<xref:System.Globalization.CultureInfo.CurrentCulture%2A>属性<xref:System.Globalization.CultureInfo>类<xref:System.Globalization>命名空间。</xref:System.Globalization> </xref:System.Globalization.CultureInfo> </xref:System.Globalization.CultureInfo.CurrentCulture%2A> 默认值<xref:System.Globalization.CultureInfo.CurrentCulture%2A>值由**控制面板**设置。</xref:System.Globalization.CultureInfo.CurrentCulture%2A>       `FirstDayOfWeekValue`自变量可以具有以下设置之一。      |枚举值 |值 |说明 |  |-----------------------|-----------|-----------------|  |`FirstDayOfWeek.System`|0|在系统中指定的一周中的第一天设置 （默认值） |  |`FirstDayOfWeek.Sunday`|1|星期日 |  |`FirstDayOfWeek.Monday`|2|星期一 （符合 ISO 8601 标准第 3.17 节） |  |`FirstDayOfWeek.Tuesday`|3|星期二 |  |`FirstDayOfWeek.Wednesday`|4|星期三 |  |`FirstDayOfWeek.Thursday`|5|星期四 |  |`FirstDayOfWeek.Friday`|6|星期五 |  |`FirstDayOfWeek.Saturday`|7|星期六 |"
  example:
  - "The following example uses the `Weekday` function to obtain the day of the week from a specified date, and then the `WeekDayName` function to obtain the name of the weekday from its number.  \n  \n [!code-vb[VbVbalrFunctions#58](~/add/codesnippet/visualbasic/3ef2fbeb-749b-412a-a8c7-_1.vb)]"
  syntax:
    content: public static string WeekdayName (int Weekday, bool Abbreviate = false, Microsoft.VisualBasic.FirstDayOfWeek FirstDayOfWeekValue = Microsoft.VisualBasic.FirstDayOfWeek.System);
    parameters:
    - id: Weekday
      type: System.Int32
      description: "必需。 <xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>. 周日期，从 1 到 7; 的的数字标识1 表示一周的第一天，7 表示一周中的最后一天。 第一个和最后一天的标识取决于的设置`FirstDayOfWeekValue`。"
    - id: Abbreviate
      type: System.Boolean
      description: "可选。 <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示是否要缩写的星期几名称。 如果省略，默认值是<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>，这意味着的星期几名称不缩写形式。"
    - id: FirstDayOfWeekValue
      type: Microsoft.VisualBasic.FirstDayOfWeek
      description: "可选。 从选择的值<xref uid=&quot;langword_csharp_FirstDayOfWeek&quot; name=&quot;FirstDayOfWeek&quot; href=&quot;&quot;></xref>指定一周的第一天的枚举。 如果未指定， <xref uid=&quot;langword_csharp_FirstDayOfWeek.System&quot; name=&quot;FirstDayOfWeek.System&quot; href=&quot;&quot;> </xref>使用。"
    return:
      type: System.String
      description: "返回<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>值，该值包含指定工作日的名称。"
  overload: Microsoft.VisualBasic.DateAndTime.WeekdayName*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>Weekday</code>小于 1 或大于 7，或<code>FirstDayOfWeekValue</code>小于 0 或大于 7。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  id: Year(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  langs:
  - csharp
  name: Year(DateTime)
  nameWithType: DateAndTime.Year(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Year(DateTime)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic
  summary: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>介于 1 和 9999 表示年份值。"
  remarks: "你还可以通过调用获取年份`DatePart`并指定`DateInterval.Year`为`Interval`自变量。"
  example:
  - "The following example uses the `Year` function to obtain the year from a specified date. In the development environment, the date literal is displayed in short date format using the locale settings of your code.  \n  \n [!code-vb[VbVbalrFunctions#59](~/add/codesnippet/visualbasic/m-microsoft.visualbasic._223_1.vb)]"
  syntax:
    content: public static int Year (DateTime DateValue);
    parameters:
    - id: DateValue
      type: System.DateTime
      description: "必需。 <xref uid=&quot;langword_csharp_Date&quot; name=&quot;Date&quot; href=&quot;&quot;></xref>要从中提取年份的值。"
    return:
      type: System.Int32
      description: "返回<xref uid=&quot;langword_csharp_Integer&quot; name=&quot;Integer&quot; href=&quot;&quot;></xref>介于 1 和 9999 表示年份值。"
  overload: Microsoft.VisualBasic.DateAndTime.Year*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(Microsoft.VisualBasic.DateInterval,System.Double,System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd(DateInterval,Double,DateTime)
  nameWithType: DateAndTime.DateAdd(DateInterval,Double,DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(DateInterval,Double,DateTime)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: Microsoft.VisualBasic.DateInterval
  parent: Microsoft.VisualBasic
  isExternal: false
  name: DateInterval
  nameWithType: DateInterval
  fullName: Microsoft.VisualBasic.DateInterval
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd(System.String,System.Double,System.Object)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd(String,Double,Object)
  nameWithType: DateAndTime.DateAdd(String,Double,Object)
  fullName: Microsoft.VisualBasic.DateAndTime.DateAdd(String,Double,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(Microsoft.VisualBasic.DateInterval,System.DateTime,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(DateInterval,DateTime,DateTime,FirstDayOfWeek,FirstWeekOfYear)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.FirstDayOfWeek
  parent: Microsoft.VisualBasic
  isExternal: false
  name: FirstDayOfWeek
  nameWithType: FirstDayOfWeek
  fullName: Microsoft.VisualBasic.FirstDayOfWeek
- uid: Microsoft.VisualBasic.FirstWeekOfYear
  parent: Microsoft.VisualBasic
  isExternal: false
  name: FirstWeekOfYear
  nameWithType: FirstWeekOfYear
  fullName: Microsoft.VisualBasic.FirstWeekOfYear
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff(System.String,System.Object,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DateDiff(String,Object,Object,FirstDayOfWeek,FirstWeekOfYear)
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(Microsoft.VisualBasic.DateInterval,System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(DateInterval,DateTime,FirstDayOfWeek,FirstWeekOfYear)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.VisualBasic.DateAndTime.DatePart(System.String,System.Object,Microsoft.VisualBasic.FirstDayOfWeek,Microsoft.VisualBasic.FirstWeekOfYear)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  nameWithType: DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
  fullName: Microsoft.VisualBasic.DateAndTime.DatePart(String,Object,FirstDayOfWeek,FirstWeekOfYear)
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.DateSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.DateSerial(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.DateAndTime.DateString
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateString
  nameWithType: DateAndTime.DateString
  fullName: Microsoft.VisualBasic.DateAndTime.DateString
- uid: Microsoft.VisualBasic.DateAndTime.DateValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateValue(String)
  nameWithType: DateAndTime.DateValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.DateValue(String)
- uid: Microsoft.VisualBasic.DateAndTime.Day(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Day(DateTime)
  nameWithType: DateAndTime.Day(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Day(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Hour(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Hour(DateTime)
  nameWithType: DateAndTime.Hour(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Hour(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Minute(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Minute(DateTime)
  nameWithType: DateAndTime.Minute(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Minute(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.Month(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Month(DateTime)
  nameWithType: DateAndTime.Month(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Month(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.MonthName(System.Int32,System.Boolean)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: MonthName(Int32,Boolean)
  nameWithType: DateAndTime.MonthName(Int32,Boolean)
  fullName: Microsoft.VisualBasic.DateAndTime.MonthName(Int32,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.DateAndTime.Now
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Now
  nameWithType: DateAndTime.Now
  fullName: Microsoft.VisualBasic.DateAndTime.Now
- uid: Microsoft.VisualBasic.DateAndTime.Second(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Second(DateTime)
  nameWithType: DateAndTime.Second(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Second(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
  fullName: Microsoft.VisualBasic.DateAndTime.TimeOfDay
- uid: Microsoft.VisualBasic.DateAndTime.Timer
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Timer
  nameWithType: DateAndTime.Timer
  fullName: Microsoft.VisualBasic.DateAndTime.Timer
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial(System.Int32,System.Int32,System.Int32)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeSerial(Int32,Int32,Int32)
  nameWithType: DateAndTime.TimeSerial(Int32,Int32,Int32)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeSerial(Int32,Int32,Int32)
- uid: Microsoft.VisualBasic.DateAndTime.TimeString
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeString
  nameWithType: DateAndTime.TimeString
  fullName: Microsoft.VisualBasic.DateAndTime.TimeString
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue(System.String)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeValue(String)
  nameWithType: DateAndTime.TimeValue(String)
  fullName: Microsoft.VisualBasic.DateAndTime.TimeValue(String)
- uid: Microsoft.VisualBasic.DateAndTime.Today
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Today
  nameWithType: DateAndTime.Today
  fullName: Microsoft.VisualBasic.DateAndTime.Today
- uid: Microsoft.VisualBasic.DateAndTime.Weekday(System.DateTime,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Weekday(DateTime,FirstDayOfWeek)
  nameWithType: DateAndTime.Weekday(DateTime,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.Weekday(DateTime,FirstDayOfWeek)
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName(System.Int32,System.Boolean,Microsoft.VisualBasic.FirstDayOfWeek)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: WeekdayName(Int32,Boolean,FirstDayOfWeek)
  nameWithType: DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
  fullName: Microsoft.VisualBasic.DateAndTime.WeekdayName(Int32,Boolean,FirstDayOfWeek)
- uid: Microsoft.VisualBasic.DateAndTime.Year(System.DateTime)
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Year(DateTime)
  nameWithType: DateAndTime.Year(DateTime)
  fullName: Microsoft.VisualBasic.DateAndTime.Year(DateTime)
- uid: Microsoft.VisualBasic.DateAndTime.DateAdd*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateAdd
  nameWithType: DateAndTime.DateAdd
- uid: Microsoft.VisualBasic.DateAndTime.DateDiff*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateDiff
  nameWithType: DateAndTime.DateDiff
- uid: Microsoft.VisualBasic.DateAndTime.DatePart*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DatePart
  nameWithType: DateAndTime.DatePart
- uid: Microsoft.VisualBasic.DateAndTime.DateSerial*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateSerial
  nameWithType: DateAndTime.DateSerial
- uid: Microsoft.VisualBasic.DateAndTime.DateString*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateString
  nameWithType: DateAndTime.DateString
- uid: Microsoft.VisualBasic.DateAndTime.DateValue*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: DateValue
  nameWithType: DateAndTime.DateValue
- uid: Microsoft.VisualBasic.DateAndTime.Day*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Day
  nameWithType: DateAndTime.Day
- uid: Microsoft.VisualBasic.DateAndTime.Hour*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Hour
  nameWithType: DateAndTime.Hour
- uid: Microsoft.VisualBasic.DateAndTime.Minute*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Minute
  nameWithType: DateAndTime.Minute
- uid: Microsoft.VisualBasic.DateAndTime.Month*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Month
  nameWithType: DateAndTime.Month
- uid: Microsoft.VisualBasic.DateAndTime.MonthName*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: MonthName
  nameWithType: DateAndTime.MonthName
- uid: Microsoft.VisualBasic.DateAndTime.Now*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Now
  nameWithType: DateAndTime.Now
- uid: Microsoft.VisualBasic.DateAndTime.Second*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Second
  nameWithType: DateAndTime.Second
- uid: Microsoft.VisualBasic.DateAndTime.TimeOfDay*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeOfDay
  nameWithType: DateAndTime.TimeOfDay
- uid: Microsoft.VisualBasic.DateAndTime.Timer*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Timer
  nameWithType: DateAndTime.Timer
- uid: Microsoft.VisualBasic.DateAndTime.TimeSerial*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeSerial
  nameWithType: DateAndTime.TimeSerial
- uid: Microsoft.VisualBasic.DateAndTime.TimeString*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeString
  nameWithType: DateAndTime.TimeString
- uid: Microsoft.VisualBasic.DateAndTime.TimeValue*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: TimeValue
  nameWithType: DateAndTime.TimeValue
- uid: Microsoft.VisualBasic.DateAndTime.Today*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Today
  nameWithType: DateAndTime.Today
- uid: Microsoft.VisualBasic.DateAndTime.Weekday*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Weekday
  nameWithType: DateAndTime.Weekday
- uid: Microsoft.VisualBasic.DateAndTime.WeekdayName*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: WeekdayName
  nameWithType: DateAndTime.WeekdayName
- uid: Microsoft.VisualBasic.DateAndTime.Year*
  parent: Microsoft.VisualBasic.DateAndTime
  isExternal: false
  name: Year
  nameWithType: DateAndTime.Year
