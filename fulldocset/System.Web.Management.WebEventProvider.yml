### YamlMime:ManagedReference
items:
- uid: System.Web.Management.WebEventProvider
  id: WebEventProvider
  children:
  - System.Web.Management.WebEventProvider.#ctor
  - System.Web.Management.WebEventProvider.Flush
  - System.Web.Management.WebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)
  - System.Web.Management.WebEventProvider.Shutdown
  langs:
  - csharp
  name: WebEventProvider
  nameWithType: WebEventProvider
  fullName: System.Web.Management.WebEventProvider
  type: Class
  summary: "为非缓冲的事件提供程序提供的基类。"
  remarks: "ASP.NET 运行状况监视，用于管理已部署的 Web 应用程序的生产和操作人员。 <xref:System.Web.Management>命名空间包含负责打包应用程序运行状况状态数据和负责处理此数据提供程序类型的运行状况事件类型。</xref:System.Web.Management> 它还包含在管理运行状况事件期间帮助的支持类型。       如果你想要自定义运行状况事件处理，你可以从要创建你自己的自定义提供程序的 WebEventProvider 类进行派生。      1> [!NOTE]&1;> 在大多数情况下，你将是一种能够使用 ASP.NET 运行状况监视类型，因为实现，并且将通过指定中的值控制运行状况监视系统`healthMonitoring`配置节。 你还可以从要创建你自己的自定义事件和提供程序的运行状况监视类型派生。 有关从 WebEventProvider 类派生的示例，请参阅本主题中提供的示例。"
  example:
  - "The following code example shows how to derive from the WebEventProvider class to create a custom provider that writes the configured events to a local file for which appropriate access rights must be granted. This custom provider example is simple and its main intent is to give you as developer full control of its basic mechanisms. In a real-world scenario, you could use this provider and especially the example buffered provider available at <xref:System.Web.Management.BufferedWebEventProvider>, as a preliminary probe into the behavior of an application. This can help you during the design stage to gain an understanding of the information available; then later you can direct this information to a more complex provider.  \n  \n The following configuration file excerpt shows a `healthMonitoring` section configuration that enables ASP.NET to use the custom provider defined above to process all health-monitoring events.  \n  \n```  \n<healthMonitoring   \n  heartBeatInterval=\"0\"   \n  enabled=\"true\">  \n  \n    <providers>  \n  \n      <add name=\"SampleWebEventProvider\"   \n        type=\"SamplesAspNet.SampleEventProvider,webeventprovider, Version=1.0.1773.33989, Culture=neutral, PublicKeyToken=cf85aa6c978d9dea, processorArchitecture=MSIL\" />  \n  \n    </providers>  \n  \n    <rules>  \n  \n      <rule   \n        name=\"Custom Event Provider\"  \n        eventName=\"All Events\"  \n        provider=\"SampleWebEventProvider\"  \n        profile=\"Default\" />  \n    </rules>  \n  \n</healthMonitoring>  \n```  \n  \n [!code-vb[System.Web.Management.WebEventProvider#1](~/add/codesnippet/visualbasic/t-system.web.management._8_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#1](~/add/codesnippet/csharp/t-system.web.management._8_1.cs)]"
  syntax:
    content: 'public abstract class WebEventProvider : System.Configuration.Provider.ProviderBase'
  inheritance:
  - System.Object
  - System.Configuration.Provider.ProviderBase
  implements: []
  inheritedMembers:
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  platform:
  - net462
- uid: System.Web.Management.WebEventProvider.#ctor
  id: '#ctor'
  parent: System.Web.Management.WebEventProvider
  langs:
  - csharp
  name: WebEventProvider()
  nameWithType: WebEventProvider.WebEventProvider()
  fullName: System.Web.Management.WebEventProvider.WebEventProvider()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Management
  summary: "初始化的新实例<xref href=&quot;System.Web.Management.WebEventProvider&quot;></xref>类。"
  remarks: "WebEventProvider 构造函数不应在代码中直接使用。 它由 ASP.NET 进行调用。 从<xref:System.Web.Management.WebEventProvider>类</xref:System.Web.Management.WebEventProvider>派生时，可以调用 WebEventProvider 构造函数"
  example:
  - "The following code example shows how to use this constructor in a custom event provider.  \n  \n [!code-vb[System.Web.Management.WebEventProvider#2](~/add/codesnippet/visualbasic/m-system.web.management._4_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#2](~/add/codesnippet/csharp/m-system.web.management._4_1.cs)]"
  syntax:
    content: protected WebEventProvider ();
    parameters: []
  overload: System.Web.Management.WebEventProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Management.WebEventProvider.Flush
  id: Flush
  parent: System.Web.Management.WebEventProvider
  langs:
  - csharp
  name: Flush()
  nameWithType: WebEventProvider.Flush()
  fullName: System.Web.Management.WebEventProvider.Flush()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Management
  summary: "将事件从提供程序的缓冲区移到事件日志。"
  remarks: "当调用此方法时，缓冲区中的事件都将立刻移从缓冲区到事件日志，而无论多少时间已经过去所有最后一次写入或多少事件是缓冲区中。 最后一次写入时将重置为刷新操作的时间。"
  example:
  - "The following code example shows how to use the Flush method.  \n  \n [!code-vb[System.Web.Management.WebEventProvider#3](~/add/codesnippet/visualbasic/m-system.web.management._8_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#3](~/add/codesnippet/csharp/m-system.web.management._8_1.cs)]"
  syntax:
    content: public abstract void Flush ();
    parameters: []
  overload: System.Web.Management.WebEventProvider.Flush*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Management.WebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)
  id: ProcessEvent(System.Web.Management.WebBaseEvent)
  parent: System.Web.Management.WebEventProvider
  langs:
  - csharp
  name: ProcessEvent(WebBaseEvent)
  nameWithType: WebEventProvider.ProcessEvent(WebBaseEvent)
  fullName: System.Web.Management.WebEventProvider.ProcessEvent(WebBaseEvent)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Management
  summary: "处理传递给提供的事件。"
  remarks: "这是，ASP.NET 运行状况监视对调用开始处理事件的方法。"
  example:
  - "The following code example shows how to implement the ProcessEvent method. This method appends the customized string representation of the event to a specific log file.  \n  \n [!code-vb[System.Web.Management.WebEventProvider#5](~/add/codesnippet/visualbasic/c7aedb1e-f1f1-4da6-99cd-_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#5](~/add/codesnippet/csharp/c7aedb1e-f1f1-4da6-99cd-_1.cs)]"
  syntax:
    content: public abstract void ProcessEvent (System.Web.Management.WebBaseEvent raisedEvent);
    parameters:
    - id: raisedEvent
      type: System.Web.Management.WebBaseEvent
      description: "<xref href=&quot;System.Web.Management.WebBaseEvent&quot;> </xref>对象传递给过程。"
  overload: System.Web.Management.WebEventProvider.ProcessEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Management.WebEventProvider.Shutdown
  id: Shutdown
  parent: System.Web.Management.WebEventProvider
  langs:
  - csharp
  name: Shutdown()
  nameWithType: WebEventProvider.Shutdown()
  fullName: System.Web.Management.WebEventProvider.Shutdown()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Management
  summary: "执行与关闭提供程序关联的任务。"
  remarks: "ASP.NET 调用<xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A>方法时托管 Web 应用程序的应用程序域终止。</xref:System.Web.Management.EventLogWebEventProvider.Shutdown%2A> 该方法调用以执行将允许应用程序，如关闭资源正常，结束的任务。"
  example:
  - "The following code example shows how to use the Shutdown method.  \n  \n [!code-vb[System.Web.Management.WebEventProvider#4](~/add/codesnippet/visualbasic/m-system.web.management._0_1.vb)]\n [!code-cs[System.Web.Management.WebEventProvider#4](~/add/codesnippet/csharp/m-system.web.management._0_1.cs)]"
  syntax:
    content: public abstract void Shutdown ();
    parameters: []
  overload: System.Web.Management.WebEventProvider.Shutdown*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: System.Configuration.Provider.ProviderBase
- uid: System.Web.Management.WebEventProvider.#ctor
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: WebEventProvider()
  nameWithType: WebEventProvider.WebEventProvider()
  fullName: System.Web.Management.WebEventProvider.WebEventProvider()
- uid: System.Web.Management.WebEventProvider.Flush
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: Flush()
  nameWithType: WebEventProvider.Flush()
  fullName: System.Web.Management.WebEventProvider.Flush()
- uid: System.Web.Management.WebEventProvider.ProcessEvent(System.Web.Management.WebBaseEvent)
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: ProcessEvent(WebBaseEvent)
  nameWithType: WebEventProvider.ProcessEvent(WebBaseEvent)
  fullName: System.Web.Management.WebEventProvider.ProcessEvent(WebBaseEvent)
- uid: System.Web.Management.WebBaseEvent
  parent: System.Web.Management
  isExternal: false
  name: WebBaseEvent
  nameWithType: WebBaseEvent
  fullName: System.Web.Management.WebBaseEvent
- uid: System.Web.Management.WebEventProvider.Shutdown
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: Shutdown()
  nameWithType: WebEventProvider.Shutdown()
  fullName: System.Web.Management.WebEventProvider.Shutdown()
- uid: System.Web.Management.WebEventProvider.#ctor*
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: WebEventProvider
  nameWithType: WebEventProvider.WebEventProvider
- uid: System.Web.Management.WebEventProvider.Flush*
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: Flush
  nameWithType: WebEventProvider.Flush
- uid: System.Web.Management.WebEventProvider.ProcessEvent*
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: ProcessEvent
  nameWithType: WebEventProvider.ProcessEvent
- uid: System.Web.Management.WebEventProvider.Shutdown*
  parent: System.Web.Management.WebEventProvider
  isExternal: false
  name: Shutdown
  nameWithType: WebEventProvider.Shutdown
