### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.WSDualHttpBinding
  id: WSDualHttpBinding
  children:
  - System.ServiceModel.WSDualHttpBinding.#ctor
  - System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  - System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  - System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  - System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  - System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  - System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  - System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  - System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  - System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  - System.ServiceModel.WSDualHttpBinding.MessageEncoding
  - System.ServiceModel.WSDualHttpBinding.ProxyAddress
  - System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  - System.ServiceModel.WSDualHttpBinding.ReliableSession
  - System.ServiceModel.WSDualHttpBinding.Scheme
  - System.ServiceModel.WSDualHttpBinding.Security
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  - System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  - System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  - System.ServiceModel.WSDualHttpBinding.TextEncoding
  - System.ServiceModel.WSDualHttpBinding.TransactionFlow
  - System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  langs:
  - csharp
  name: WSDualHttpBinding
  nameWithType: WSDualHttpBinding
  fullName: System.ServiceModel.WSDualHttpBinding
  type: Class
  summary: "一个安全且可互操作绑定，旨在用于双工服务协定，允许服务和客户端发送和接收消息。"
  remarks: "WSDualHttpBinding 提供相同的支持的 Web 服务协议作为<xref:System.ServiceModel.WSHttpBinding>，但用于双工协定。</xref:System.ServiceModel.WSHttpBinding> WSDualHttpBinding 仅支持 SOAP 安全，且需要可靠的消息传送。 此绑定要求客户端具有为服务提供回调终结点的公共 URI。 这是由<xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A>.</xref:System.ServiceModel.Channels.CompositeDuplexBindingElement.ClientBaseAddress%2A>提供 双向绑定公开到服务的客户端的 IP 地址。 客户端应使用安全来确保仅连接到服务它信任。       默认情况下 WSDualHttpBinding 生成以下绑定元素堆栈:- <xref:System.ServiceModel.Channels.TransactionFlowBindingElement>- <xref:System.ServiceModel.Channels.ReliableSessionBindingElement>- <xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement>- <xref:System.ServiceModel.Channels.CompositeDuplexBindingElement>- <xref:System.ServiceModel.Channels.OneWayBindingElement>- <xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement>- <xref:System.ServiceModel.Channels.HttpTransportBindingElement></xref:System.ServiceModel.Channels.HttpTransportBindingElement> </xref:System.ServiceModel.Channels.TextMessageEncodingBindingElement> </xref:System.ServiceModel.Channels.OneWayBindingElement> </xref:System.ServiceModel.Channels.CompositeDuplexBindingElement> </xref:System.ServiceModel.Channels.SymmetricSecurityBindingElement> </xref:System.ServiceModel.Channels.ReliableSessionBindingElement> </xref:System.ServiceModel.Channels.TransactionFlowBindingElement>"
  example:
  - "The following example shows how to specify the `wsDualHttpBinding` binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#134](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#134)]"
  syntax:
    content: 'public class WSDualHttpBinding : System.ServiceModel.Channels.Binding, System.ServiceModel.Channels.IBindingRuntimePreferences'
  inheritance:
  - System.ServiceModel.Channels.Binding
  implements:
  - System.ServiceModel.Channels.IBindingRuntimePreferences
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor
  id: '#ctor'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding()
  nameWithType: WSDualHttpBinding.WSDualHttpBinding()
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;></xref>类。"
  remarks: ''
  example:
  - "The following example shows how to use the default constructor for wsDualHttpBinding.  \n  \n [!code-cs[S_dualhttp#1](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#1)]\n [!code-vb[S_dualhttp#1](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#1)]"
  syntax:
    content: public WSDualHttpBinding ();
    parameters: []
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  id: '#ctor(System.ServiceModel.WSDualHttpSecurityMode)'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding(WSDualHttpSecurityMode)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;></xref>使用安全绑定所使用的指定类型的类。"
  remarks: "可靠消息传递是所必需的<xref:System.ServiceModel.WSDualHttpBinding>，因此，它提供要将其关闭，因为有处于<xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29><xref:System.ServiceModel.WSHttpBinding>。</xref:System.ServiceModel.WSHttpBinding>的构造函数</xref:System.ServiceModel.WSHttpBinding.%23ctor%28System.ServiceModel.SecurityMode%29>的交换机没有构造函数</xref:System.ServiceModel.WSDualHttpBinding>"
  example:
  - "The following example shows how to use the `wsDualHttpBinding` constructor with a security mode.  \n  \n [!code-cs[S_dualhttp#3](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#3)]\n [!code-vb[S_dualhttp#3](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#3)]"
  syntax:
    content: public WSDualHttpBinding (System.ServiceModel.WSDualHttpSecurityMode securityMode);
    parameters:
    - id: securityMode
      type: System.ServiceModel.WSDualHttpSecurityMode
      description: "值<xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;> </xref> ，它指定的 SOAP 消息和客户端使用的安全类型。"
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: WSDualHttpBinding(String)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(String)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(String)
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;></xref>由配置名称指定的绑定的类。"
  syntax:
    content: public WSDualHttpBinding (string configName);
    parameters:
    - id: configName
      type: System.String
      description: "绑定配置名称<xref href=&quot;System.ServiceModel.Configuration.WSHttpBindingElement&quot;> </xref>。"
  overload: System.ServiceModel.WSDualHttpBinding.#ctor*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "具有名称的绑定元素<code> configurationName </code>找不到。"
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  id: BypassProxyOnLocal
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
  fullName: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置一个值，该值指示是否跳过本地地址的代理服务器。"
  remarks: "如果它具有本地地址本地 Internet 资源。 本地地址是指位于同一台计算机、 本地 LAN 或 intranet 上和标识，语法上通过省略句点 （.） 如下所示的 Uri&quot;http://webserver/&quot;和&quot;http://localhost/&quot;。       属性设置 BypassProxyOnLocal 确定终结点是否配置了<xref:System.ServiceModel.WSDualHttpBinding>访问本地资源时使用代理服务器。</xref:System.ServiceModel.WSDualHttpBinding>       如果 BypassProxyOnLocal `true`，对本地 Internet 资源请求不使用代理服务器。 使用主机名 (而非`localhost`) 如果你希望客户端上的通信时服务在同一台计算机时此属性设置为经过代理`true`。       BypassProxyOnLocal 时`false`，所有 Internet 请求都都通过代理服务器。"
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n The following example sets this property to indicate that the proxy should be bypassed for local resources.  \n  \n [!code-cs[S_dualhttp#6](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#6)]\n [!code-vb[S_dualhttp#6](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#6)]  \n  \n The value of this property can also be set in the configuration file.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool BypassProxyOnLocal { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要绕过本地地址; 的代理服务器否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  id: ClientBaseAddress
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置客户端的基址。"
  remarks: "客户端的公共 URI 提供所需的服务时要联系客户端的协定是双工回调终结点。"
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#8](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#8)]\n [!code-vb[S_dualhttp#8](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#8)]"
  syntax:
    content: public Uri ClientBaseAddress { get; set; }
    return:
      type: System.Uri
      description: "<xref:System.Uri>，它是客户端的基址。</xref:System.Uri> 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  id: CreateBindingElements
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: CreateBindingElements()
  nameWithType: WSDualHttpBinding.CreateBindingElements()
  fullName: System.ServiceModel.WSDualHttpBinding.CreateBindingElements()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "返回绑定元素包含在当前绑定中的有序的集合。"
  remarks: ''
  example:
  - "The following example shows how to get an ordered collection of binding elements contained in the current binding.  \n  \n [!code-cs[S_dualhttp#20](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#20)]\n [!code-vb[S_dualhttp#20](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#20)]"
  syntax:
    content: public override System.ServiceModel.Channels.BindingElementCollection CreateBindingElements ();
    parameters: []
    return:
      type: System.ServiceModel.Channels.BindingElementCollection
      description: "A<xref:System.ServiceModel.Channels.BindingElementCollection>包括<xref href=&quot;System.ServiceModel.Channels.TransactionFlowBindingElement&quot;></xref>和，因为可靠会话是必需的<xref href=&quot;System.ServiceModel.WSDualHttpBinding&quot;> </xref>、 <xref href=&quot;System.ServiceModel.Channels.ReliableSessionBindingElement&quot;> </xref>。</xref:System.ServiceModel.Channels.BindingElementCollection>"
  overload: System.ServiceModel.WSDualHttpBinding.CreateBindingElements*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  id: EnvelopeVersion
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
  fullName: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取用于此绑定处理的消息的 SOAP 版本。"
  remarks: ''
  example:
  - "The following example shows how to get the version of SOAP that is used for messages that are processed by this binding.  \n  \n [!code-cs[S_dualhttp#21](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#21)]\n [!code-vb[S_dualhttp#21](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#21)]"
  syntax:
    content: public System.ServiceModel.EnvelopeVersion EnvelopeVersion { get; }
    return:
      type: System.ServiceModel.EnvelopeVersion
      description: "值<xref:System.ServiceModel.EnvelopeVersion>，与此绑定一起使用。</xref:System.ServiceModel.EnvelopeVersion> 值必须始终为 SOAP 1.2。"
  overload: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  id: HostNameComparisonMode
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
  fullName: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置一个值，该值指示是否使用主机名来访问服务时对 URI 进行匹配。"
  remarks: ''
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#9](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#9)]\n [!code-vb[S_dualhttp#9](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#9)]"
  syntax:
    content: public System.ServiceModel.HostNameComparisonMode HostNameComparisonMode { get; set; }
    return:
      type: System.ServiceModel.HostNameComparisonMode
      description: "<xref:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode*>值，该值指示是否使用主机名来访问服务，在对 URI 进行匹配时。</xref:System.ServiceModel.Configuration.WSDualHttpBindingElement.HostNameComparisonMode*> 默认值是<xref href=&quot;System.ServiceModel.HostNameComparisonMode&quot;> </xref>，表示忽略匹配项中的主机名。"
  overload: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  id: MaxBufferPoolSize
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置最大内存量，以字节为单位，可分配的接收在配置了此绑定的终结点的消息的消息缓冲区管理器。"
  remarks: "<xref:System.ServiceModel.Channels.BufferManager>利用缓冲池将使用缓冲区的成本降至最低。</xref:System.ServiceModel.Channels.BufferManager> 离开通道时使用缓冲区来处理这些消息按服务所需。 如果在缓冲池中无法处理消息负载中，没有足够的内存<xref:System.ServiceModel.Channels.BufferManager>必须从 CLR 堆，这会增加垃圾回收的系统开销分配更多内存。</xref:System.ServiceModel.Channels.BufferManager> 从 CLR 垃圾堆大量分配是的指示缓冲池大小是太小，通过增加 MaxBufferPoolSize 限制可以使用的更大的分配来提高性能。       对此处设置的缓冲区大小的限制是为了优化消息交换的性能。 如果消息超过为缓冲区设置的最大值，则不会丢弃。 相反，从 CLR 堆请求更多内存，这将带来更多的垃圾回收系统开销比使用缓冲区。"
  example:
  - "The following example shows how to set the `MaxBufferPoolSize`.  \n  \n [!code-cs[S_dualhttp#10](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#10)]\n [!code-vb[S_dualhttp#10](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#10)]"
  syntax:
    content: public long MaxBufferPoolSize { get; set; }
    return:
      type: System.Int64
      description: "以字节为单位，使用与此绑定配置的终结点的缓冲池的最大大小。 默认值为 524288 字节。"
  overload: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  id: MaxReceivedMessageSize
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置的最大大小，以字节为单位，可以使用此绑定配置的通道上接收的消息。"
  remarks: "可以通过使用服务在网络上接收的消息大小<xref:System.ServiceModel.WSDualHttpBinding>受为每个消息分配的内存量。</xref:System.ServiceModel.WSDualHttpBinding> 对消息大小的此限制旨在降低遭受-dos 攻击的可能性。       请注意，设置<xref:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize%2A>和<xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize%2A>都是本地行为设置。</xref:System.ServiceModel.BasicHttpBinding.MaxReceivedMessageSize%2A> </xref:System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize%2A> 这意味着，它们不会传输到元数据中的其他终结点。 如果从元数据具有 2 GB 的最大消息大小的服务生成代理，则代理仍然有默认值 64 K。 这会对消息和消息缓冲区大小适当限制的控制权处在本地管理员的管辖范围。"
  example:
  - "The following example shows how to get the MaxReceivedMessageSize property.  \n  \n [!code-cs[S_dualhttp#22](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#22)]\n [!code-vb[S_dualhttp#22](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#22)]"
  syntax:
    content: public long MaxReceivedMessageSize { get; set; }
    return:
      type: System.Int64
      description: "最大大小，以字节为单位，由绑定处理的消息。 默认值为 65,536 字节。"
  overload: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值小于零。"
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  id: MessageEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置是否使用 MTOM 还是文本 /XML 对 SOAP 消息进行编码。"
  remarks: ''
  example:
  - "The following example shows how to set the `WSMessageEncoding` property to MTOM.  \n  \n [!code-cs[S_dualhttp#11](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#11)]\n [!code-vb[S_dualhttp#11](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#11)]"
  syntax:
    content: public System.ServiceModel.WSMessageEncoding MessageEncoding { get; set; }
    return:
      type: System.ServiceModel.WSMessageEncoding
      description: "值<xref href=&quot;System.ServiceModel.WSMessageEncoding&quot;> </xref> ，该值指示使用 MTOM 还是文本 /XML 是 SOAP 消息进行编码。 默认值是<xref href=&quot;System.ServiceModel.WSMessageEncoding&quot;> </xref>。"
  overload: System.ServiceModel.WSDualHttpBinding.MessageEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  id: ProxyAddress
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置 HTTP 代理的 URI 地址。"
  remarks: "如果<xref:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy%2A>设置为`true`，忽略 ProxyAddress 的值。</xref:System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy%2A>"
  example:
  - "The following example shows how to specify the address of the HTTP proxy.  \n  \n [!code-cs[S_dualhttp#12](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#12)]\n [!code-vb[S_dualhttp#12](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#12)]"
  syntax:
    content: public Uri ProxyAddress { get; set; }
    return:
      type: System.Uri
      description: "A<xref:System.Uri>充当 HTTP 代理的地址。</xref:System.Uri> 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.WSDualHttpBinding.ProxyAddress*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  id: ReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
  fullName: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置可由配置了此绑定的终结点处理的 SOAP 消息的复杂性约束。"
  remarks: "复杂性约束包括最大元素深度和消息中字符串内容的最大长度等项。 约束可以抵御某种类型的拒绝服务 (DOS) 攻击试图利用消息复杂性来占用终结点处理资源。"
  example:
  - "The following example shows how to get the `ReaderQuotas` property.  \n  \n [!code-cs[S_dualhttp#13](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#13)]\n [!code-vb[S_dualhttp#13](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#13)]"
  syntax:
    content: public System.Xml.XmlDictionaryReaderQuotas ReaderQuotas { get; set; }
    return:
      type: System.Xml.XmlDictionaryReaderQuotas
      description: "<xref:System.Xml.XmlDictionaryReaderQuotas>指定复杂性约束。</xref:System.Xml.XmlDictionaryReaderQuotas>"
  overload: System.ServiceModel.WSDualHttpBinding.ReaderQuotas*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession
  id: ReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
  fullName: System.ServiceModel.WSDualHttpBinding.ReliableSession
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取一个对象，提供的可靠会话绑定元素时使用的系统提供绑定之一，可用的属性的便捷访问。"
  remarks: "可靠会话，则需要使用一种<xref:System.ServiceModel.WSDualHttpBinding>。</xref:System.ServiceModel.WSDualHttpBinding>配置服务"
  example:
  - "The following example shows how to get the ReliableSession property.  \n  \n [!code-cs[S_dualhttp#14](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#14)]\n [!code-vb[S_dualhttp#14](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#14)]"
  syntax:
    content: public System.ServiceModel.ReliableSession ReliableSession { get; set; }
    return:
      type: System.ServiceModel.ReliableSession
      description: "<xref href=&quot;System.ServiceModel.ReliableSession&quot;> </xref>可提供对可靠会话绑定元素时使用的系统提供绑定之一，可用的属性的便捷访问。"
  overload: System.ServiceModel.WSDualHttpBinding.ReliableSession*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.Scheme
  id: Scheme
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
  fullName: System.ServiceModel.WSDualHttpBinding.Scheme
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取的通道和用此绑定配置的侦听器的 URI 传输方案。"
  remarks: ''
  example:
  - "The following example shows how to specify the wsDualHttpBinding binding in a configuration file.  \n  \n [!code-cs[S_dualhttp#15](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#15)]\n [!code-vb[S_dualhttp#15](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#15)]"
  syntax:
    content: public override string Scheme { get; }
    return:
      type: System.String
      description: '传输方案:&quot;http&quot;。'
  overload: System.ServiceModel.WSDualHttpBinding.Scheme*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.Security
  id: Security
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: Security
  nameWithType: WSDualHttpBinding.Security
  fullName: System.ServiceModel.WSDualHttpBinding.Security
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取一个对象，指定与此绑定一起使用的安全设置。"
  remarks: "双向绑定公开到服务的客户端的 IP 地址。 客户端应使用安全来确保仅连接到服务它信任。"
  example:
  - "The following example shows how to get the type of security of the binding.  \n  \n [!code-cs[S_dualhttp#16](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#16)]\n [!code-vb[S_dualhttp#16](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#16)]"
  syntax:
    content: public System.ServiceModel.WSDualHttpSecurity Security { get; set; }
    return:
      type: System.ServiceModel.WSDualHttpSecurity
      description: "<xref href=&quot;System.ServiceModel.WSDualHttpSecurity&quot;> </xref> ，指定与绑定一起使用的安全设置。 默认值<xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;></xref>是<xref href=&quot;System.ServiceModel.WSDualHttpSecurityMode&quot;> </xref>。"
  overload: System.ServiceModel.WSDualHttpBinding.Security*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  id: ShouldSerializeReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeReaderQuotas()
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "返回一个值，该值指示是否<xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>属性已更改，从其默认值，且应序列化。</xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>"
  syntax:
    content: public bool ShouldSerializeReaderQuotas ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.WSDualHttpBinding.ReaderQuotas*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  id: ShouldSerializeReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeReliableSession()
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "返回一个值，该值指示是否<xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>属性已更改，从其默认值，且应序列化。</xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>"
  syntax:
    content: public bool ShouldSerializeReliableSession ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.WSDualHttpBinding.ReliableSession*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  id: ShouldSerializeSecurity
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeSecurity()
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "返回一个值，该值指示是否<xref:System.ServiceModel.WSDualHttpBinding.Security*>属性已更改，从其默认值，且应序列化。</xref:System.ServiceModel.WSDualHttpBinding.Security*>"
  syntax:
    content: public bool ShouldSerializeSecurity ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ServiceModel.WSDualHttpBinding.Security*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.WSDualHttpBinding.Security*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  id: ShouldSerializeTextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: ShouldSerializeTextEncoding()
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "返回一个值，该值指示是否<xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>属性已更改，从其默认值，且应序列化。</xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>"
  syntax:
    content: public bool ShouldSerializeTextEncoding ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.ServiceModel.WSDualHttpBinding.TextEncoding*>"
  overload: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  id: System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  isEii: true
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  fullName: System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取一个值，该值指示是否同步还是异步处理传入请求。"
  remarks: "此值可通过使用服务模型行为更改。"
  example:
  - "The following examples show how to get the <xref:System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously%2A> value.  \n  \n [!code-cs[S_dualhttp#23](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#23)]\n [!code-vb[S_dualhttp#23](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#23)]  \n  \n [!code-cs[S_dualhttp#24](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#24)]\n [!code-vb[S_dualhttp#24](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#24)]"
  syntax:
    content: bool System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果同步进行; 处理请求<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果异步处理。 返回的值始终是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>、 异步处理请求。"
  overload: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding
  id: TextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.TextEncoding
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置用于消息文本的字符编码。"
  remarks: ''
  example:
  - "The following example shows how to get the character encoding that is used for the message text.  \n  \n [!code-cs[S_dualhttp#17](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#17)]\n [!code-vb[S_dualhttp#17](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#17)]"
  syntax:
    content: public System.Text.Encoding TextEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>，该值指示使用的字符编码。</xref:System.Text.Encoding> 默认值为<xref:System.Text.UTF8Encoding>。</xref:System.Text.UTF8Encoding>"
  overload: System.ServiceModel.WSDualHttpBinding.TextEncoding*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  id: TransactionFlow
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
  fullName: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置一个值，该值指示此绑定是否应支持流动 Ws-transactions。"
  remarks: "默认值指定客户端事务不流，并且服务拒绝带有流的事务消息头的消息。"
  example:
  - "The following example shows how to set the `TransactionFlow` property to support the flowing of transactions.  \n  \n [!code-cs[S_dualhttp#18](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#18)]\n [!code-vb[S_dualhttp#18](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#18)]"
  syntax:
    content: public bool TransactionFlow { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果支持事务的流动，则;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.WSDualHttpBinding.TransactionFlow*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  id: UseDefaultWebProxy
  parent: System.ServiceModel.WSDualHttpBinding
  langs:
  - csharp
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
  fullName: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置一个值，该值指示是否应使用系统的自动配置 HTTP 代理，如果可用。"
  remarks: ''
  example:
  - "The following example shows how to set the `UseDefaultWebProxy` property to use the auto-configured HTTP proxy of the system.  \n  \n [!code-cs[S_dualhttp#19](~/add/codesnippet/csharp/s_dualhttp.cs/program.cs#19)]\n [!code-vb[S_dualhttp#19](~/add/codesnippet/visualbasic/s_dualhttp.cs/module1.vb#19)]"
  syntax:
    content: public bool UseDefaultWebProxy { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果应使用系统的自动配置 HTTP 代理，如果可用;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Channels.Binding
  isExternal: false
  name: System.ServiceModel.Channels.Binding
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ServiceModel.WSDualHttpBinding.#ctor
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding()
  nameWithType: WSDualHttpBinding.WSDualHttpBinding()
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding()
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.ServiceModel.WSDualHttpSecurityMode)
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding(WSDualHttpSecurityMode)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(WSDualHttpSecurityMode)
- uid: System.ServiceModel.WSDualHttpSecurityMode
  parent: System.ServiceModel
  isExternal: false
  name: WSDualHttpSecurityMode
  nameWithType: WSDualHttpSecurityMode
  fullName: System.ServiceModel.WSDualHttpSecurityMode
- uid: System.ServiceModel.WSDualHttpBinding.#ctor(System.String)
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding(String)
  nameWithType: WSDualHttpBinding.WSDualHttpBinding(String)
  fullName: System.ServiceModel.WSDualHttpBinding.WSDualHttpBinding(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
  fullName: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: CreateBindingElements()
  nameWithType: WSDualHttpBinding.CreateBindingElements()
  fullName: System.ServiceModel.WSDualHttpBinding.CreateBindingElements()
- uid: System.ServiceModel.Channels.BindingElementCollection
  parent: System.ServiceModel.Channels
  isExternal: true
  name: BindingElementCollection
  nameWithType: BindingElementCollection
  fullName: System.ServiceModel.Channels.BindingElementCollection
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
  fullName: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion
- uid: System.ServiceModel.EnvelopeVersion
  parent: System.ServiceModel
  isExternal: true
  name: EnvelopeVersion
  nameWithType: EnvelopeVersion
  fullName: System.ServiceModel.EnvelopeVersion
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
  fullName: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode
- uid: System.ServiceModel.HostNameComparisonMode
  parent: System.ServiceModel
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: HostNameComparisonMode
  fullName: System.ServiceModel.HostNameComparisonMode
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
  fullName: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.MessageEncoding
- uid: System.ServiceModel.WSMessageEncoding
  parent: System.ServiceModel
  isExternal: false
  name: WSMessageEncoding
  nameWithType: WSMessageEncoding
  fullName: System.ServiceModel.WSMessageEncoding
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
  fullName: System.ServiceModel.WSDualHttpBinding.ProxyAddress
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
  fullName: System.ServiceModel.WSDualHttpBinding.ReaderQuotas
- uid: System.Xml.XmlDictionaryReaderQuotas
  parent: System.Xml
  isExternal: true
  name: XmlDictionaryReaderQuotas
  nameWithType: XmlDictionaryReaderQuotas
  fullName: System.Xml.XmlDictionaryReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
  fullName: System.ServiceModel.WSDualHttpBinding.ReliableSession
- uid: System.ServiceModel.ReliableSession
  parent: System.ServiceModel
  isExternal: false
  name: ReliableSession
  nameWithType: ReliableSession
  fullName: System.ServiceModel.ReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.Scheme
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
  fullName: System.ServiceModel.WSDualHttpBinding.Scheme
- uid: System.ServiceModel.WSDualHttpBinding.Security
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Security
  nameWithType: WSDualHttpBinding.Security
  fullName: System.ServiceModel.WSDualHttpBinding.Security
- uid: System.ServiceModel.WSDualHttpSecurity
  parent: System.ServiceModel
  isExternal: false
  name: WSDualHttpSecurity
  nameWithType: WSDualHttpSecurity
  fullName: System.ServiceModel.WSDualHttpSecurity
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReaderQuotas()
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReliableSession()
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeSecurity()
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity()
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeTextEncoding()
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding()
  fullName: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding()
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  fullName: System.ServiceModel.WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
  fullName: System.ServiceModel.WSDualHttpBinding.TextEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
  fullName: System.ServiceModel.WSDualHttpBinding.TransactionFlow
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
  fullName: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy
- uid: System.ServiceModel.WSDualHttpBinding.#ctor*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: WSDualHttpBinding
  nameWithType: WSDualHttpBinding.WSDualHttpBinding
- uid: System.ServiceModel.WSDualHttpBinding.BypassProxyOnLocal*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: BypassProxyOnLocal
  nameWithType: WSDualHttpBinding.BypassProxyOnLocal
- uid: System.ServiceModel.WSDualHttpBinding.ClientBaseAddress*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ClientBaseAddress
  nameWithType: WSDualHttpBinding.ClientBaseAddress
- uid: System.ServiceModel.WSDualHttpBinding.CreateBindingElements*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: CreateBindingElements
  nameWithType: WSDualHttpBinding.CreateBindingElements
- uid: System.ServiceModel.WSDualHttpBinding.EnvelopeVersion*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: EnvelopeVersion
  nameWithType: WSDualHttpBinding.EnvelopeVersion
- uid: System.ServiceModel.WSDualHttpBinding.HostNameComparisonMode*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: HostNameComparisonMode
  nameWithType: WSDualHttpBinding.HostNameComparisonMode
- uid: System.ServiceModel.WSDualHttpBinding.MaxBufferPoolSize*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxBufferPoolSize
  nameWithType: WSDualHttpBinding.MaxBufferPoolSize
- uid: System.ServiceModel.WSDualHttpBinding.MaxReceivedMessageSize*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MaxReceivedMessageSize
  nameWithType: WSDualHttpBinding.MaxReceivedMessageSize
- uid: System.ServiceModel.WSDualHttpBinding.MessageEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: MessageEncoding
  nameWithType: WSDualHttpBinding.MessageEncoding
- uid: System.ServiceModel.WSDualHttpBinding.ProxyAddress*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ProxyAddress
  nameWithType: WSDualHttpBinding.ProxyAddress
- uid: System.ServiceModel.WSDualHttpBinding.ReaderQuotas*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReaderQuotas
  nameWithType: WSDualHttpBinding.ReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ReliableSession*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ReliableSession
  nameWithType: WSDualHttpBinding.ReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.Scheme*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Scheme
  nameWithType: WSDualHttpBinding.Scheme
- uid: System.ServiceModel.WSDualHttpBinding.Security*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: Security
  nameWithType: WSDualHttpBinding.Security
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReaderQuotas*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReaderQuotas
  nameWithType: WSDualHttpBinding.ShouldSerializeReaderQuotas
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeReliableSession*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeReliableSession
  nameWithType: WSDualHttpBinding.ShouldSerializeReliableSession
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeSecurity*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeSecurity
  nameWithType: WSDualHttpBinding.ShouldSerializeSecurity
- uid: System.ServiceModel.WSDualHttpBinding.ShouldSerializeTextEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: ShouldSerializeTextEncoding
  nameWithType: WSDualHttpBinding.ShouldSerializeTextEncoding
- uid: System.ServiceModel.WSDualHttpBinding.System#ServiceModel#Channels#IBindingRuntimePreferences#ReceiveSynchronously*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
  nameWithType: WSDualHttpBinding.System.ServiceModel.Channels.IBindingRuntimePreferences.ReceiveSynchronously
- uid: System.ServiceModel.WSDualHttpBinding.TextEncoding*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TextEncoding
  nameWithType: WSDualHttpBinding.TextEncoding
- uid: System.ServiceModel.WSDualHttpBinding.TransactionFlow*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: TransactionFlow
  nameWithType: WSDualHttpBinding.TransactionFlow
- uid: System.ServiceModel.WSDualHttpBinding.UseDefaultWebProxy*
  parent: System.ServiceModel.WSDualHttpBinding
  isExternal: false
  name: UseDefaultWebProxy
  nameWithType: WSDualHttpBinding.UseDefaultWebProxy
