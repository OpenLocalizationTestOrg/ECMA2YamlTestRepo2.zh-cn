### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionScope
  id: TransactionScope
  children:
  - System.Transactions.TransactionScope.#ctor
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  - System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  - System.Transactions.TransactionScope.Complete
  - System.Transactions.TransactionScope.Dispose
  langs:
  - csharp
  name: TransactionScope
  nameWithType: TransactionScope
  fullName: System.Transactions.TransactionScope
  type: Class
  summary: "使代码块事务。 此类不能被继承。"
  remarks: "<xref:System.Transactions>基础结构提供这两个显式编程模型基于<xref:System.Transactions.Transaction>类，以及使用 TransactionScope 类，在其中事务自动管理基础结构的隐式编程模型。</xref:System.Transactions.Transaction> </xref:System.Transactions>      1> [!IMPORTANT]&1;> 建议你创建使用 TransactionScope 类的隐式事务，以便为你自动管理的环境事务上下文。 你还应使用 TransactionScope 和<xref:System.Transactions.DependentTransaction>跨多个函数调用或多个线程调用需要在同一事务的使用的应用程序的类。</xref:System.Transactions.DependentTransaction> 在此模型上的详细信息，请参阅[实现隐式事务使用事务范围](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主题。 编写事务应用程序的详细信息，请参阅[编写一个事务应用程序](http://msdn.microsoft.com/en-us/4a7cc4d1-0891-4605-941f-a933b9ce5bc8)。       在实例化由 TransactionScope`new`语句，事务管理器确定参与的事务。 一旦确定，该范围将始终参与该事务。 决策基于两个因素︰ 是否存在环境事务和的值`TransactionScopeOption`构造函数中的参数。  你的代码中执行的事务是在环境事务。 你可以通过调用静态<xref:System.Transactions.Transaction.Current%2A>属性的<xref:System.Transactions.Transaction>类</xref:System.Transactions.Transaction></xref:System.Transactions.Transaction.Current%2A>来获取对环境事务的引用 有关如何使用此参数的详细信息，请参阅的&quot;事务流管理&quot;部分[实现隐式事务使用事务范围](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主题。       如果在事务范围内未不发生任何异常 (即之间 TransactionScope 初始化对象的调用和其<xref:System.Transactions.TransactionScope.Dispose%2A>方法)，则作用域所参与的事务允许以继续。</xref:System.Transactions.TransactionScope.Dispose%2A> 如果异常确实发生在事务范围内，它所参与的事务将回滚。       在你的应用程序完成所有工作时它想要在事务中执行，应调用<xref:System.Transactions.TransactionScope.Complete%2A>方法一次，以通知该事务管理器是可接受提交事务。</xref:System.Transactions.TransactionScope.Complete%2A> 无法调用此方法将中止事务。       调用<xref:System.Transactions.TransactionScope.Dispose%2A>方法将标记的事务范围的末尾。</xref:System.Transactions.TransactionScope.Dispose%2A> 调用此方法之后所发生的异常不会影响事务。       如果修改的值<xref:System.Transactions.Transaction.Current%2A>内一个作用域，将引发异常时<xref:System.Transactions.TransactionScope.Dispose%2A>称为。</xref:System.Transactions.TransactionScope.Dispose%2A> </xref:System.Transactions.Transaction.Current%2A> 但是，在作用域的结束时，以前的值将恢复。 此外，如果你调用<xref:System.Transactions.TransactionScope.Dispose%2A>上<xref:System.Transactions.Transaction.Current%2A>在事务范围创建事务，事务将中止范围的末尾。</xref:System.Transactions.Transaction.Current%2A> </xref:System.Transactions.TransactionScope.Dispose%2A>"
  example:
  - "The following example demonstrates how to use the TransactionScope class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/t-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/t-system.transactions.tr_0_1.cs)]"
  syntax:
    content: 'public sealed class TransactionScope : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor
  id: '#ctor'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类。"
  remarks: "此构造函数创建新的事务范围具有的事务作用域选项等于<xref:System.Transactions.TransactionScopeOption>.</xref:System.Transactions.TransactionScopeOption> 也就是说，通过新作用域需要使用事务，如果已存在使用该环境事务。 否则，它创建新的事务，然后才能进入该范围。"
  syntax:
    content: public TransactionScope ();
    parameters: []
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  id: '#ctor(System.Transactions.Transaction)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类并将设置指定的事务环境事务，以便该范围中进行的事务工作可以使用此事务。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要设置为环境事务，以便该范围中进行的事务工作使用此事务的事务。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 和更高版本中受支持]      初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类指定的异步流选项。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>描述是否在使用任务或异步/等待.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  id: '#ctor(System.Transactions.TransactionScopeOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类以指定的要求。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>枚举描述与此事务作用域关联的事务要求。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类带指定的超时值，并将指定的事务设置为环境事务，以便该范围中进行的事务工作使用此事务。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要设置为环境事务，以便该范围中进行的事务工作使用此事务的事务。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>其后的事务范围超时时，并中止此事务。</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 和更高版本中受支持]      初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类并将设置指定的事务环境事务，以便该范围中进行的事务工作可以使用此事务。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要设置为环境事务，以便该范围中进行的事务工作使用此事务的事务。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>描述是否在使用任务或异步/等待.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类具有指定的超时值和要求。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>枚举描述与此事务作用域关联的事务要求。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>其后的事务范围超时时，并中止此事务。</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类以指定的要求。"
  remarks: "当你使用`transactionOptions`参数来指定<xref:System.Transactions.IsolationLevel>，和作用域创建一个事务更高版本、 新的事务程序与指定的隔离级别。</xref:System.Transactions.IsolationLevel> 如果隔离级别与事务一起传入，事务必须具有完全相同的隔离级别，或引发异常。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>枚举描述与此事务作用域关联的事务要求。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>结构描述要使用如果创建了新事务的事务选项。 如果使用现有事务，则此参数中的超时值适用于该事务范围。 如果在作用域被释放之前，该时间过期，则中止此事务。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 和更高版本中受支持]      初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类指定的要求和异步流选项。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>枚举描述与此事务作用域关联的事务要求。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>描述是否在使用任务或异步/等待.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类具有指定的超时值和 COM + 互操作性要求，并将指定的事务设置为环境事务，以便该范围中进行的事务工作使用此事务。"
  remarks: '**请注意**此方法使用<xref:System.Security.Permissions.SecurityAction>，防止它不受信任的代码中调用; 但是，仅限直接调用方需要拥有`FullTrust`权限集。</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要设置为环境事务，以便该范围中进行的事务工作使用此事务的事务。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>其后的事务范围超时时，并中止此事务。</xref:System.TimeSpan>"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "实例<xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;></xref>枚举描述关联的事务与 COM + 事务交互的方式。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 和更高版本中受支持]      初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类带指定的超时值，并将指定的事务设置为环境事务，以便该范围中进行的事务工作使用此事务。"
  syntax:
    content: public TransactionScope (System.Transactions.Transaction transactionToUse, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: transactionToUse
      type: System.Transactions.Transaction
      description: "要设置为环境事务，以便该范围中进行的事务工作使用此事务的事务。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>其后的事务范围超时时，并中止此事务。</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>描述是否在使用任务或异步/等待.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 和更高版本中受支持]      初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类指定的超时值、 要求和异步流选项。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, TimeSpan scopeTimeout, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>枚举描述与此事务作用域关联的事务要求。"
    - id: scopeTimeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>其后的事务范围超时时，并中止此事务。</xref:System.TimeSpan>"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>描述是否在使用任务或异步/等待.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类与指定的作用域和 COM + 互操作性要求，以及事务选项。"
  remarks: "当你使用`transactionOptions`参数来指定<xref:System.Transactions.IsolationLevel>，和作用域创建一个事务更高版本、 新的事务程序与指定的隔离级别。</xref:System.Transactions.IsolationLevel> 如果隔离级别与事务一起传入，事务必须具有完全相同的隔离级别，或引发异常。       **请注意**此方法使用<xref:System.Security.Permissions.SecurityAction>，防止它不受信任的代码中调用; 但是，仅限直接调用方需要拥有`FullTrust`权限集。</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.EnterpriseServicesInteropOption interopOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>枚举描述与此事务作用域关联的事务要求。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>结构描述要使用如果创建了新事务的事务选项。 如果使用现有事务，则此参数中的超时值适用于该事务范围。 如果在作用域被释放之前，该时间过期，则中止此事务。"
    - id: interopOption
      type: System.Transactions.EnterpriseServicesInteropOption
      description: "实例<xref href=&quot;System.Transactions.EnterpriseServicesInteropOption&quot;></xref>枚举描述关联的事务与 COM + 事务交互的方式。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  id: '#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)'
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "[在.NET Framework 4.5.1 和更高版本中受支持]      初始化的新实例<xref href=&quot;System.Transactions.TransactionScope&quot;></xref>类指定的要求和异步流选项。"
  syntax:
    content: public TransactionScope (System.Transactions.TransactionScopeOption scopeOption, System.Transactions.TransactionOptions transactionOptions, System.Transactions.TransactionScopeAsyncFlowOption asyncFlowOption);
    parameters:
    - id: scopeOption
      type: System.Transactions.TransactionScopeOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeOption&quot;></xref>枚举描述与此事务作用域关联的事务要求。"
    - id: transactionOptions
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>结构描述要使用如果创建了新事务的事务选项。 如果使用现有事务，则此参数中的超时值适用于该事务范围。 如果在作用域被释放之前，该时间过期，则中止此事务。"
    - id: asyncFlowOption
      type: System.Transactions.TransactionScopeAsyncFlowOption
      description: "实例<xref href=&quot;System.Transactions.TransactionScopeAsyncFlowOption&quot;></xref>描述是否在使用任务或异步/等待.NET 异步编程模式时，与事务作用域关联的环境事务将跨线程延续流动的枚举。"
  overload: System.Transactions.TransactionScope.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Complete
  id: Complete
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "指示范围内的所有操作都已成功都完成。"
  remarks: "当您满意后，范围内的所有操作都已成功都完成，应调用此方法仅一次通知该事务管理器，跨所有资源的状态不一致，并且可以提交事务。 它是很好的做法，以将该调用的最后一个语句作为`using`块。       有关如何使用此方法的详细信息，请参阅[实现隐式事务使用事务范围](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主题。       无法调用此方法将中止事务，因为事务管理器将此解释为系统故障时，或在事务范围内引发的异常。 但是，您应该注意调用此方法不能保证提交事务。 它是状态的只是状态的一种通知您的事务管理器。 调用此方法后，你不能再访问环境事务通过<xref:System.Transactions.Transaction.Current%2A>属性，并尝试执行的操作是导致引发异常。</xref:System.Transactions.Transaction.Current%2A>       处发生之间的资源管理器提交的实际工作`End Using`语句如果<xref:System.Transactions.TransactionScope>创建事务对象。</xref:System.Transactions.TransactionScope> 如果它未创建事务，都会执行提交每当<xref:System.Transactions.CommittableTransaction.Commit%2A>的所有者调用<xref:System.Transactions.CommittableTransaction>对象。</xref:System.Transactions.CommittableTransaction> </xref:System.Transactions.CommittableTransaction.Commit%2A> 此时，事务管理器调用资源管理器，并告知用户提交或回滚，基于是否上调用了此方法<xref:System.Transactions.TransactionScope>对象。</xref:System.Transactions.TransactionScope>"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_1_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_1_1.cs)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Transactions.TransactionScope.Complete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此方法已一次调用。"
  platform:
  - net462
- uid: System.Transactions.TransactionScope.Dispose
  id: Dispose
  parent: System.Transactions.TransactionScope
  langs:
  - csharp
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "结束事务范围。"
  remarks: "调用此方法将标记事务范围的末尾。 如果<xref:System.Transactions.TransactionScope>创建对象的事务和<xref:System.Transactions.TransactionScope.Complete%2A>的作用域中，调用了<xref:System.Transactions.TransactionScope>对象尝试提交事务，当调用此方法。</xref:System.Transactions.TransactionScope> </xref:System.Transactions.TransactionScope.Complete%2A> </xref:System.Transactions.TransactionScope>       使用 C#`using`构造可确保即使发生异常时，调用此方法。 调用此方法之后所发生的异常不会影响事务。 此方法还将还原的环境事务到其原始状态。 A<xref:System.Transactions.TransactionAbortedException>也不会实际提交事务时引发。</xref:System.Transactions.TransactionAbortedException>       此方法是同步方法，并阻止，直到提交或中止事务。 因此，你应在 Windows 窗体 (WinForm) 应用程序中，使用此方法时请格外小心，或可能出现死锁。 如果调用中一个 WinForm 控件事件 （例如，单击的按钮），此方法，并且使用同步<xref:System.Windows.Forms.Control.Invoke%2A>方法来指示要执行中间处理将发生死锁的事务，一些 UI 任务 （例如，不断变化的颜色） 的控件。</xref:System.Windows.Forms.Control.Invoke%2A> 这是因为<xref:System.Windows.Forms.Control.Invoke%2A>方法是同步方法，并阻止工作线程，直到用户界面线程完成其作业。</xref:System.Windows.Forms.Control.Invoke%2A> 但是，在我们的方案，UI 线程正在还等待工作线程以提交事务。 结果是，所有线程都无法继续并且作用域将无限期等待完成的提交。 应使用<xref:System.Windows.Forms.Control.BeginInvoke%2A>而非<xref:System.Windows.Forms.Control.Invoke%2A>只要有可能，因为它是异步的因此不太容易发生死锁。</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>       有关如何使用此方法的详细信息，请参阅[实现隐式事务使用事务范围](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主题。"
  example:
  - "The following example demonstrates how to use the <xref:System.Transactions.TransactionScope> class to define a block of code to participate in a transaction.  \n  \n [!code-vb[TransactionScope#1](~/add/codesnippet/visualbasic/m-system.transactions.tr_0_1.vb)]\n [!code-cs[TransactionScope#1](~/add/codesnippet/csharp/m-system.transactions.tr_0_1.cs)]"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Transactions.TransactionScope.Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionScope.#ctor
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope()
  nameWithType: TransactionScope.TransactionScope()
  fullName: System.Transactions.TransactionScope.TransactionScope()
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction)
  nameWithType: TransactionScope.TransactionScope(Transaction)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScopeAsyncFlowOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeAsyncFlowOption
  nameWithType: TransactionScopeAsyncFlowOption
  fullName: System.Transactions.TransactionScopeAsyncFlowOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption)
- uid: System.Transactions.TransactionScopeOption
  parent: System.Transactions
  isExternal: false
  name: TransactionScopeOption
  nameWithType: TransactionScopeOption
  fullName: System.Transactions.TransactionScopeOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,EnterpriseServicesInteropOption)
- uid: System.Transactions.EnterpriseServicesInteropOption
  parent: System.Transactions
  isExternal: false
  name: EnterpriseServicesInteropOption
  nameWithType: EnterpriseServicesInteropOption
  fullName: System.Transactions.EnterpriseServicesInteropOption
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.Transaction,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(Transaction,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.TimeSpan,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TimeSpan,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.EnterpriseServicesInteropOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,EnterpriseServicesInteropOption)
- uid: System.Transactions.TransactionScope.#ctor(System.Transactions.TransactionScopeOption,System.Transactions.TransactionOptions,System.Transactions.TransactionScopeAsyncFlowOption)
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  nameWithType: TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
  fullName: System.Transactions.TransactionScope.TransactionScope(TransactionScopeOption,TransactionOptions,TransactionScopeAsyncFlowOption)
- uid: System.Transactions.TransactionScope.Complete
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete()
  nameWithType: TransactionScope.Complete()
  fullName: System.Transactions.TransactionScope.Complete()
- uid: System.Transactions.TransactionScope.Dispose
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose()
  nameWithType: TransactionScope.Dispose()
  fullName: System.Transactions.TransactionScope.Dispose()
- uid: System.Transactions.TransactionScope.#ctor*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: TransactionScope
  nameWithType: TransactionScope.TransactionScope
- uid: System.Transactions.TransactionScope.Complete*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Complete
  nameWithType: TransactionScope.Complete
- uid: System.Transactions.TransactionScope.Dispose*
  parent: System.Transactions.TransactionScope
  isExternal: false
  name: Dispose
  nameWithType: TransactionScope.Dispose
