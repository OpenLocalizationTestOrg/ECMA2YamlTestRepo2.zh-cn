### YamlMime:ManagedReference
items:
- uid: System.Activities.Statements.CompensationExtension
  id: CompensationExtension
  children:
  - System.Activities.Statements.CompensationExtension.#ctor
  - System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)
  - System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})
  - System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions
  - System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)
  langs:
  - csharp
  name: CompensationExtension
  nameWithType: CompensationExtension
  fullName: System.Activities.Statements.CompensationExtension
  type: Class
  summary: "表示一个扩展，与补偿活动挂钩，并保持与补偿相关的实例状态。"
  syntax:
    content: 'public class CompensationExtension : System.Activities.Persistence.PersistenceParticipant, System.Activities.Hosting.IWorkflowInstanceExtension'
  inheritance:
  - System.Object
  - System.Activities.Persistence.PersistenceParticipant
  implements:
  - System.Activities.Hosting.IWorkflowInstanceExtension
  inheritedMembers:
  - System.Activities.Persistence.PersistenceParticipant.MapValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object},System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})
  platform:
  - net462
- uid: System.Activities.Statements.CompensationExtension.#ctor
  id: '#ctor'
  parent: System.Activities.Statements.CompensationExtension
  langs:
  - csharp
  name: CompensationExtension()
  nameWithType: CompensationExtension.CompensationExtension()
  fullName: System.Activities.Statements.CompensationExtension.CompensationExtension()
  type: Constructor
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "初始化的新实例<xref href=&quot;System.Activities.Statements.CompensationExtension&quot;></xref>类。"
  syntax:
    content: public CompensationExtension ();
    parameters: []
  overload: System.Activities.Statements.CompensationExtension.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)
  id: CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)
  parent: System.Activities.Statements.CompensationExtension
  langs:
  - csharp
  name: CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)
  nameWithType: CompensationExtension.CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)
  fullName: System.Activities.Statements.CompensationExtension.CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "由宿主以收集读 / 写值和只写值要保持的补偿相关的调用。"
  syntax:
    content: protected override void CollectValues (out System.Collections.Generic.IDictionary<System.Xml.Linq.XName,object> readWriteValues, out System.Collections.Generic.IDictionary<System.Xml.Linq.XName,object> writeOnlyValues);
    parameters:
    - id: readWriteValues
      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}
      description: "要保留的读 / 写值。"
    - id: writeOnlyValues
      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}
      description: "要保持的只写值。"
  overload: System.Activities.Statements.CompensationExtension.CollectValues*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})
  id: PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})
  parent: System.Activities.Statements.CompensationExtension
  langs:
  - csharp
  name: PublishValues(IDictionary<XName,Object>)
  nameWithType: CompensationExtension.PublishValues(IDictionary<XName,Object>)
  fullName: System.Activities.Statements.CompensationExtension.PublishValues(IDictionary<XName,Object>)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "由宿主要传递的是最新的永久性事件的一部分的加载值的补偿相关的所有调用。"
  syntax:
    content: protected override void PublishValues (System.Collections.Generic.IDictionary<System.Xml.Linq.XName,object> readWriteValues);
    parameters:
    - id: readWriteValues
      type: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}
      description: "从持久性存储区中加载的读 / 写值。"
  overload: System.Activities.Statements.CompensationExtension.PublishValues*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions
  id: System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions
  isEii: true
  parent: System.Activities.Statements.CompensationExtension
  langs:
  - csharp
  name: System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()
  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()
  fullName: System.Activities.Statements.CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "返回的任何附加扩展与补偿活动。"
  syntax:
    content: System.Collections.Generic.IEnumerable<object> IWorkflowInstanceExtension.GetAdditionalExtensions ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Object}
      description: "附加工作流扩展的集合。"
  overload: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions*
  exceptions: []
  platform:
  - net462
- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)
  id: System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)
  isEii: true
  parent: System.Activities.Statements.CompensationExtension
  langs:
  - csharp
  name: System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)
  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)
  fullName: System.Activities.Statements.CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)
  type: Method
  assemblies:
  - System.Activities
  namespace: System.Activities.Statements
  summary: "设置的任何附加扩展与补偿活动。"
  syntax:
    content: void IWorkflowInstanceExtension.SetInstance (System.Activities.Hosting.WorkflowInstanceProxy instance);
    parameters:
    - id: instance
      type: System.Activities.Hosting.WorkflowInstanceProxy
      description: "要设置的目标工作流实例。"
  overload: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Activities.Persistence.PersistenceParticipant
  isExternal: false
  name: System.Activities.Persistence.PersistenceParticipant
- uid: System.Activities.Statements.CompensationExtension.#ctor
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: CompensationExtension()
  nameWithType: CompensationExtension.CompensationExtension()
  fullName: System.Activities.Statements.CompensationExtension.CompensationExtension()
- uid: System.Activities.Statements.CompensationExtension.CollectValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@,System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}@)
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)
  nameWithType: CompensationExtension.CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)
  fullName: System.Activities.Statements.CompensationExtension.CollectValues(IDictionary<XName,Object>,IDictionary<XName,Object>)
- uid: System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<XName,Object>
  nameWithType: IDictionary<XName,Object>
  fullName: System.Collections.Generic.IDictionary<System.Xml.Linq.XName,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.Xml.Linq.XName,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.Linq.XName
    name: XName
    nameWithType: XName
    fullName: XName
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Statements.CompensationExtension.PublishValues(System.Collections.Generic.IDictionary{System.Xml.Linq.XName,System.Object})
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: PublishValues(IDictionary<XName,Object>)
  nameWithType: CompensationExtension.PublishValues(IDictionary<XName,Object>)
  fullName: System.Activities.Statements.CompensationExtension.PublishValues(IDictionary<XName,Object>)
- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()
  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()
  fullName: System.Activities.Statements.CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions()
- uid: System.Collections.Generic.IEnumerable{System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Object>
  nameWithType: IEnumerable<Object>
  fullName: System.Collections.Generic.IEnumerable<System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance(System.Activities.Hosting.WorkflowInstanceProxy)
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)
  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)
  fullName: System.Activities.Statements.CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance(WorkflowInstanceProxy)
- uid: System.Activities.Hosting.WorkflowInstanceProxy
  parent: System.Activities.Hosting
  isExternal: false
  name: WorkflowInstanceProxy
  nameWithType: WorkflowInstanceProxy
  fullName: System.Activities.Hosting.WorkflowInstanceProxy
- uid: System.Activities.Statements.CompensationExtension.#ctor*
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: CompensationExtension
  nameWithType: CompensationExtension.CompensationExtension
- uid: System.Activities.Statements.CompensationExtension.CollectValues*
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: CollectValues
  nameWithType: CompensationExtension.CollectValues
- uid: System.Activities.Statements.CompensationExtension.PublishValues*
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: PublishValues
  nameWithType: CompensationExtension.PublishValues
- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#GetAdditionalExtensions*
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions
  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.GetAdditionalExtensions
- uid: System.Activities.Statements.CompensationExtension.System#Activities#Hosting#IWorkflowInstanceExtension#SetInstance*
  parent: System.Activities.Statements.CompensationExtension
  isExternal: false
  name: System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance
  nameWithType: CompensationExtension.System.Activities.Hosting.IWorkflowInstanceExtension.SetInstance
