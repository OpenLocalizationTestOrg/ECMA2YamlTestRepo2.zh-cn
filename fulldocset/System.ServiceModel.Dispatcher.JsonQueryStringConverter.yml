### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  id: JsonQueryStringConverter
  children:
  - System.ServiceModel.Dispatcher.JsonQueryStringConverter.#ctor
  - System.ServiceModel.Dispatcher.JsonQueryStringConverter.CanConvert(System.Type)
  - System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertStringToValue(System.String,System.Type)
  - System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertValueToString(System.Object,System.Type)
  langs:
  - csharp
  name: JsonQueryStringConverter
  nameWithType: JsonQueryStringConverter
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  type: Class
  summary: "收件人和从 JavaScript 对象表示法 (JSON) 进行此类转换参数值。"
  remarks: "可以在 URL 中的 JSON 查询字符串中指定参数。 此类控制 JSON 查询字符串参数如何映射到和从服务操作的参数时<xref:System.ServiceModel.Description.WebScriptEnablingBehavior>用于处理来自基于浏览器的 ASP.NET AJAX 客户端的 HTTP 请求。</xref:System.ServiceModel.Description.WebScriptEnablingBehavior>       内部使用此类[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]<xref:System.ServiceModel.Description.WebScriptEnablingBehavior>终结点配置为接受 HTTP GET/POST 请求使用的 URI 查询字符串编码的参数的类。</xref:System.ServiceModel.Description.WebScriptEnablingBehavior> 此类使用 CLR 对象和 URI 查询字符串中的各个操作请求参数值之间进行转换。 与其基类型不同，此类支持的基元和复杂类型的值。       JsonQueryStringConverter 派生自<xref:System.ServiceModel.Dispatcher.QueryStringConverter>，并支持以下类型:- <xref:System.Byte>- <xref:System.SByte>- <xref:System.Int16>- <xref:System.Int32>- <xref:System.Int64>- <xref:System.UInt16>- <xref:System.UInt32>- <xref:System.UInt64>- <xref:System.Single>- <xref:System.Double>- <xref:System.Char>- <xref:System.Decimal>- <xref:System.Boolean>- <xref:System.String>- <xref:System.DateTime>- <xref:System.TimeSpan>- <xref:System.Guid>-一个<xref:System.Array>类型的<xref:System.Byte>- <xref:System.Uri>-<xref:System.Object>不同其基类型，此转换器可以处理与数据协定模型相符的任何类型。</xref:System.Object> </xref:System.Uri> </xref:System.Byte> </xref:System.Array> </xref:System.Guid> </xref:System.TimeSpan> </xref:System.DateTime> </xref:System.String> </xref:System.Boolean> </xref:System.Decimal> </xref:System.Char> </xref:System.Double> </xref:System.Single> </xref:System.UInt64> </xref:System.UInt32> </xref:System.UInt16> </xref:System.Int64> </xref:System.Int32> </xref:System.Int16> </xref:System.SByte> </xref:System.Byte> </xref:System.ServiceModel.Dispatcher.QueryStringConverter> 转换器可重写<xref:System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString%28System.Object%2CSystem.Type%29>，以便每个参数序列化为 JSON 使用默认值<xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>和将 JSON XML 编写器配置为使用 utf-8 编码。</xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> </xref:System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString%28System.Object%2CSystem.Type%29> `null`参数将作为返回`null`。"
  syntax:
    content: 'public class JsonQueryStringConverter : System.ServiceModel.Dispatcher.QueryStringConverter'
  inheritance:
  - System.Object
  - System.ServiceModel.Dispatcher.QueryStringConverter
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.#ctor
  id: '#ctor'
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  langs:
  - csharp
  name: JsonQueryStringConverter()
  nameWithType: JsonQueryStringConverter.JsonQueryStringConverter()
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter.JsonQueryStringConverter()
  type: Constructor
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Dispatcher
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.Dispatcher.JsonQueryStringConverter&quot;></xref>类。"
  syntax:
    content: public JsonQueryStringConverter ();
    parameters: []
  overload: System.ServiceModel.Dispatcher.JsonQueryStringConverter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  langs:
  - csharp
  name: CanConvert(Type)
  nameWithType: JsonQueryStringConverter.CanConvert(Type)
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter.CanConvert(Type)
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Dispatcher
  summary: "获取一个值，该值指示指定的公共语言运行时 (CLR) 类型是否可以序列化和反序列化的已知的类型。"
  remarks: "这将检查是否可以在 JSON 查询字符串中使用 CLR 类型。 可以在此类字符串中使用的 CLR 类型是只是那些<xref:System.Runtime.Serialization.DataContractSerializer>.</xref:System.Runtime.Serialization.DataContractSerializer>支持"
  syntax:
    content: public override bool CanConvert (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "<xref:System.Type>验证。</xref:System.Type>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果类型可以序列化;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Dispatcher.JsonQueryStringConverter.CanConvert*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>type</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertStringToValue(System.String,System.Type)
  id: ConvertStringToValue(System.String,System.Type)
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  langs:
  - csharp
  name: ConvertStringToValue(String,Type)
  nameWithType: JsonQueryStringConverter.ConvertStringToValue(String,Type)
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertStringToValue(String,Type)
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Dispatcher
  summary: "反序列化 JavaScript 对象表示法 (JSON) 查询字符串参数为指定的公共语言运行时 (CLR) 类型。"
  syntax:
    content: public override object ConvertStringToValue (string parameter, Type parameterType);
    parameters:
    - id: parameter
      type: System.String
      description: "参数值的 JSON 形式。"
    - id: parameterType
      type: System.Type
      description: "<xref:System.Type>进行反序列化的参数。</xref:System.Type>"
    return:
      type: System.Object
      description: "参数值已转换为 CLR 类型的实例。"
  overload: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertStringToValue*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertValueToString(System.Object,System.Type)
  id: ConvertValueToString(System.Object,System.Type)
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  langs:
  - csharp
  name: ConvertValueToString(Object,Type)
  nameWithType: JsonQueryStringConverter.ConvertValueToString(Object,Type)
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertValueToString(Object,Type)
  type: Method
  assemblies:
  - System.ServiceModel.Web
  namespace: System.ServiceModel.Dispatcher
  summary: "序列化的 JavaScript 对象表示法 (JSON) 表示公共语言运行时 (CLR) 参数类型。"
  remarks: "转换器可重写<xref:System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString%28System.Object%2CSystem.Type%29>，以便每个参数序列化为 JSON 使用默认值<xref:System.Runtime.Serialization.Json.DataContractJsonSerializer>和将 JSON XML 编写器配置为使用 utf-8 编码。</xref:System.Runtime.Serialization.Json.DataContractJsonSerializer> </xref:System.ServiceModel.Dispatcher.QueryStringConverter.ConvertValueToString%28System.Object%2CSystem.Type%29> 与其基类型不同，此转换器可以处理与数据协定模型相符的任何类型。"
  example:
  - "Consider the following operation.  \n  \n```  \n[WebGet]  \n[OperationContract] public int GetOptionQuote(string ticker, DateTime dte, Option opt);  \n```  \n  \n This operation produces a URL that is a URL-encoded version of the following.  \n  \n```  \nhttp://localhost/quote.svc/GetOptionQuote?ticker=”MSFT”&dte=”\\/Date(50067823)\\/”&opt={“type”:”call”,”strikePrice”:”35”}  \n```"
  syntax:
    content: public override string ConvertValueToString (object parameter, Type parameterType);
    parameters:
    - id: parameter
      type: System.Object
      description: "要转换的参数值。"
    - id: parameterType
      type: System.Type
      description: "<xref:System.Type>要序列化的参数。</xref:System.Type>"
    return:
      type: System.String
      description: "JSON 查询字符串参数的序列化的 CLR 类型。 <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果参数返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertValueToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.QueryStringConverter
  isExternal: false
  name: System.ServiceModel.Dispatcher.QueryStringConverter
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.#ctor
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  isExternal: false
  name: JsonQueryStringConverter()
  nameWithType: JsonQueryStringConverter.JsonQueryStringConverter()
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter.JsonQueryStringConverter()
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.CanConvert(System.Type)
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  isExternal: false
  name: CanConvert(Type)
  nameWithType: JsonQueryStringConverter.CanConvert(Type)
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter.CanConvert(Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertStringToValue(System.String,System.Type)
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  isExternal: false
  name: ConvertStringToValue(String,Type)
  nameWithType: JsonQueryStringConverter.ConvertStringToValue(String,Type)
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertStringToValue(String,Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertValueToString(System.Object,System.Type)
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  isExternal: false
  name: ConvertValueToString(Object,Type)
  nameWithType: JsonQueryStringConverter.ConvertValueToString(Object,Type)
  fullName: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertValueToString(Object,Type)
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.#ctor*
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  isExternal: false
  name: JsonQueryStringConverter
  nameWithType: JsonQueryStringConverter.JsonQueryStringConverter
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.CanConvert*
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  isExternal: false
  name: CanConvert
  nameWithType: JsonQueryStringConverter.CanConvert
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertStringToValue*
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  isExternal: false
  name: ConvertStringToValue
  nameWithType: JsonQueryStringConverter.ConvertStringToValue
- uid: System.ServiceModel.Dispatcher.JsonQueryStringConverter.ConvertValueToString*
  parent: System.ServiceModel.Dispatcher.JsonQueryStringConverter
  isExternal: false
  name: ConvertValueToString
  nameWithType: JsonQueryStringConverter.ConvertValueToString
