### YamlMime:ManagedReference
items:
- uid: System.ResolveEventArgs
  id: ResolveEventArgs
  children:
  - System.ResolveEventArgs.#ctor(System.String)
  - System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)
  - System.ResolveEventArgs.Name
  - System.ResolveEventArgs.RequestingAssembly
  langs:
  - csharp
  name: ResolveEventArgs
  nameWithType: ResolveEventArgs
  fullName: System.ResolveEventArgs
  type: Class
  summary: "提供数据加载程序解析事件，如<xref href=&quot;System.AppDomain.TypeResolve&quot;> </xref>， <xref href=&quot;System.AppDomain.ResourceResolve&quot;> </xref>， <xref href=&quot;System.AppDomain.ReflectionOnlyAssemblyResolve&quot;> </xref>，和<xref href=&quot;System.AppDomain.AssemblyResolve&quot;></xref>事件。"
  remarks: "当加载程序无法解析程序集引用和处理程序针对提供了相应的加载程序解析事件，引发该事件和 ResolveEventArgs 包含有关要解析的项的信息。      -<xref:System.ResolveEventArgs.Name%2A>属性包含的要解析的项的名称。</xref:System.ResolveEventArgs.Name%2A>      -从[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]、<xref:System.ResolveEventArgs.RequestingAssembly%2A>属性包含请求可以提供命名的项程序集的程序集。</xref:System.ResolveEventArgs.RequestingAssembly%2A> 有关详细信息，请参阅<xref:System.ResolveEventArgs.RequestingAssembly%2A>属性。</xref:System.ResolveEventArgs.RequestingAssembly%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ResolveEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ResolveEventArgs.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.ResolveEventArgs
  langs:
  - csharp
  name: ResolveEventArgs(String)
  nameWithType: ResolveEventArgs.ResolveEventArgs(String)
  fullName: System.ResolveEventArgs.ResolveEventArgs(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.ResolveEventArgs&quot;></xref>类，指定要解析的项的名称。"
  remarks: "此构造函数通常仅由公共语言运行时调用。"
  syntax:
    content: public ResolveEventArgs (string name);
    parameters:
    - id: name
      type: System.String
      description: "要解析的项的名称。"
  overload: System.ResolveEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)
  id: '#ctor(System.String,System.Reflection.Assembly)'
  parent: System.ResolveEventArgs
  langs:
  - csharp
  name: ResolveEventArgs(String,Assembly)
  nameWithType: ResolveEventArgs.ResolveEventArgs(String,Assembly)
  fullName: System.ResolveEventArgs.ResolveEventArgs(String,Assembly)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.ResolveEventArgs&quot;></xref>类，指定要解析的项以及其依赖项所解析的程序集的名称。"
  syntax:
    content: public ResolveEventArgs (string name, System.Reflection.Assembly requestingAssembly);
    parameters:
    - id: name
      type: System.String
      description: "要解析的项的名称。"
    - id: requestingAssembly
      type: System.Reflection.Assembly
      description: "正在解析其依赖项程序集。"
  overload: System.ResolveEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ResolveEventArgs.Name
  id: Name
  parent: System.ResolveEventArgs
  langs:
  - csharp
  name: Name
  nameWithType: ResolveEventArgs.Name
  fullName: System.ResolveEventArgs.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取要解析的项的名称。"
  remarks: "有关<xref:System.AppDomain.AssemblyResolve>事件，应用策略之前名称是程序集名称。</xref:System.AppDomain.AssemblyResolve>"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "要解析的项的名称。"
  overload: System.ResolveEventArgs.Name*
  exceptions: []
  platform:
  - net462
- uid: System.ResolveEventArgs.RequestingAssembly
  id: RequestingAssembly
  parent: System.ResolveEventArgs
  langs:
  - csharp
  name: RequestingAssembly
  nameWithType: ResolveEventArgs.RequestingAssembly
  fullName: System.ResolveEventArgs.RequestingAssembly
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取要解析其依赖项的程序集。"
  remarks: "此属性返回的程序集是无法解析指定的项的程序集<xref:System.ResolveEventArgs.Name%2A>属性，因为该程序集中，不存在项中任何加载依赖项，或任何依赖关系中加载程序无法找到通过探测。</xref:System.ResolveEventArgs.Name%2A>       例如，假定当前程序集使用<xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName>方法以便使用类 CA 从外部的探测路径的目录中加载程序集 A。</xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName> 假设进一步该类 CA 使用类 CB，在程序集 B 和程序集 A 具有对程序集 B 的编译时引用也位于探测路径外。 当尝试实例化 CA 当前程序集时，加载程序将尝试解析对程序集 b。 引用但是，因为通过使用已加载程序集 A<xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName>方法，加载程序无法解析依赖项。</xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName> 如果没有处理程序<xref:System.AppDomain.AssemblyResolve?displayProperty=fullName>引发事件，该事件时，所生成的 RequestingAssembly 属性<xref:System.ResolveEventArgs>对象包含程序集 A，因为程序集 A 是程序集，缺少依赖关系。</xref:System.ResolveEventArgs> </xref:System.AppDomain.AssemblyResolve?displayProperty=fullName>       RequestingAssembly 属性的语义不同，具体取决于请求程序集的加载方式:-加载上下文︰ 属性的值可能是`null`。 加载上下文即可加载顺序无关和标识请求的程序集不一定有意义。 则会发生非 null 示例时<xref:System.Type.GetType%2A?displayProperty=fullName>调用方法和指定的类型不为请求的程序集或任何依赖项所知。</xref:System.Type.GetType%2A?displayProperty=fullName>      -加载源上下文︰ 属性可以用作探测的提示，但事件处理程序应获取对给定的程序集名称的多个请求。      -无上下文 (即，请求已加载程序集使用<xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName>方法，或作为字节流，或在混合模式下): 处理程序可以使用 RequestingAssembly 属性加载基于请求的程序集的标识相同程序集的不同实施。</xref:System.Reflection.Assembly.LoadFile%2A?displayProperty=fullName>"
  syntax:
    content: public System.Reflection.Assembly RequestingAssembly { get; }
    return:
      type: System.Reflection.Assembly
      description: "请求由指定的项的程序集<xref:System.ResolveEventArgs.Name*>属性。</xref:System.ResolveEventArgs.Name*>"
  overload: System.ResolveEventArgs.RequestingAssembly*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.ResolveEventArgs.#ctor(System.String)
  parent: System.ResolveEventArgs
  isExternal: false
  name: ResolveEventArgs(String)
  nameWithType: ResolveEventArgs.ResolveEventArgs(String)
  fullName: System.ResolveEventArgs.ResolveEventArgs(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ResolveEventArgs.#ctor(System.String,System.Reflection.Assembly)
  parent: System.ResolveEventArgs
  isExternal: false
  name: ResolveEventArgs(String,Assembly)
  nameWithType: ResolveEventArgs.ResolveEventArgs(String,Assembly)
  fullName: System.ResolveEventArgs.ResolveEventArgs(String,Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.ResolveEventArgs.Name
  parent: System.ResolveEventArgs
  isExternal: false
  name: Name
  nameWithType: ResolveEventArgs.Name
  fullName: System.ResolveEventArgs.Name
- uid: System.ResolveEventArgs.RequestingAssembly
  parent: System.ResolveEventArgs
  isExternal: false
  name: RequestingAssembly
  nameWithType: ResolveEventArgs.RequestingAssembly
  fullName: System.ResolveEventArgs.RequestingAssembly
- uid: System.ResolveEventArgs.#ctor*
  parent: System.ResolveEventArgs
  isExternal: false
  name: ResolveEventArgs
  nameWithType: ResolveEventArgs.ResolveEventArgs
- uid: System.ResolveEventArgs.Name*
  parent: System.ResolveEventArgs
  isExternal: false
  name: Name
  nameWithType: ResolveEventArgs.Name
- uid: System.ResolveEventArgs.RequestingAssembly*
  parent: System.ResolveEventArgs
  isExternal: false
  name: RequestingAssembly
  nameWithType: ResolveEventArgs.RequestingAssembly
