### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.XmlSchemaSet
  id: XmlSchemaSet
  children:
  - System.Xml.Schema.XmlSchemaSet.#ctor
  - System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)
  - System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)
  - System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)
  - System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)
  - System.Xml.Schema.XmlSchemaSet.CompilationSettings
  - System.Xml.Schema.XmlSchemaSet.Compile
  - System.Xml.Schema.XmlSchemaSet.Contains(System.String)
  - System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
  - System.Xml.Schema.XmlSchemaSet.Count
  - System.Xml.Schema.XmlSchemaSet.GlobalAttributes
  - System.Xml.Schema.XmlSchemaSet.GlobalElements
  - System.Xml.Schema.XmlSchemaSet.GlobalTypes
  - System.Xml.Schema.XmlSchemaSet.IsCompiled
  - System.Xml.Schema.XmlSchemaSet.NameTable
  - System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)
  - System.Xml.Schema.XmlSchemaSet.Schemas
  - System.Xml.Schema.XmlSchemaSet.Schemas(System.String)
  - System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
  - System.Xml.Schema.XmlSchemaSet.XmlResolver
  langs:
  - csharp
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
  type: Class
  summary: "包含 XML 架构定义语言 (XSD) 架构的缓存。"
  remarks: "> [!IMPORTANT]1>-不要使用来自未知或不受信任的源或位置的架构。 这样会危及你的代码的安全性。   1>-（包括内联架构） 的 XML 架构的本质上就容易受到拒绝服务攻击;不要在不受信任的情况下接受它们。   1>-架构验证错误消息和异常可能会公开有关内容模型或架构文件的 URI 路径的敏感信息。 请注意不要公开此信息来不受信任的调用方。   1>-在&quot;安全注意事项&quot;部分中介绍的其他安全注意事项。       XmlSchemaSet 是一个缓存或库可以在其中存储 XML 架构定义语言 (XSD) 架构。 XmlSchemaSet 缓存中内存而不是从文件或 URL 访问架构，从而提高了性能。 由命名空间 URI 标识每个架构和架构添加到集时的位置指定。 你使用<xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=fullName>要分配的 XML 读取器的 XmlSchemaSet 对象属性应该用于数据验证。</xref:System.Xml.XmlReaderSettings.Schemas%2A?displayProperty=fullName>      ## 安全注意事项-不要使用来自未知或不可信源的架构。 这样会危及你的代码的安全性。 外部命名空间或中引用的位置包括，导入和架构的重新定义元素均已解决方面包括或导入这些架构的基 URI。 例如，如果包括或导入架构的基 URI 为空或`null`，则外部位置来解析相对于当前目录。 <xref:System.Xml.XmlUrlResolver>类用于解析外部架构默认情况下。</xref:System.Xml.XmlUrlResolver> 若要禁用解析包含、 导入，而重新定义架构的元素，<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=fullName>属性`null`。</xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=fullName>      -XmlSchemaSet 类使用<xref:System.Text.RegularExpressions.Regex?displayProperty=fullName>类来分析和匹配 XML 架构中的正则表达式。</xref:System.Text.RegularExpressions.Regex?displayProperty=fullName> 使用 XML 架构中的正则表达式模式方面的验证可能涉及到增加的 CPU 使用率，应当避免在高可用性方案。      -由于使用 XmlSchemaSet 类，如而引发的异常<xref:System.Xml.Schema.XmlSchemaException>类可能包含不应在不受信任的方案中公开的敏感信息。</xref:System.Xml.Schema.XmlSchemaException> 例如，<xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>属性<xref:System.Xml.Schema.XmlSchemaException>返回导致异常的架构文件的 URI 路径。</xref:System.Xml.Schema.XmlSchemaException> </xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>属性不能在不受信任的方案中公开。</xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> 应正确处理异常，以便在不受信任的情况下不公开此敏感信息。"
  example:
  - "The following example validates an XML file using schemas stored in the XmlSchemaSet. The namespace in the XML file, `urn:bookstore-schema`, identifies which schema in the XmlSchemaSet to use for validation.  \n  \n [!code-cpp[XmlReader_Validate_SchemaSet#1](~/add/codesnippet/cpp/t-system.xml.schema.xmls_0_1.cpp)]\n [!code-cs[XmlReader_Validate_SchemaSet#1](~/add/codesnippet/csharp/t-system.xml.schema.xmls_0_1.cs)]\n [!code-vb[XmlReader_Validate_SchemaSet#1](~/add/codesnippet/visualbasic/t-system.xml.schema.xmls_0_1.vb)]  \n  \n## Input  \n The sample uses the following two input files.  \n  \n **booksSchemaFail.xml:**  \n  \n [!code-xml[XmlReader_Validate_SchemaSet#2](~/add/codesnippet/xml/t-system.xml.schema.xmls_0_2.xml)]  \n  \n **books.xsd:**  \n  \n [!code-xml[XmlReader_Validate_SchemaSet#3](~/add/codesnippet/xml/t-system.xml.schema.xmls_0_3.xsd)]  \n  \n## Output  \n Validation Error: The element 'book' in namespace 'urn:bookstore-schema' has invalid child element 'author' in namespace 'urn:bookstore-schema'. Expected 'title' in namespace 'urn:bookstore-schema'.  \n  \n Validation Error: The element 'author' in namespace 'urn:bookstore-schema' has invalid child element 'name' in namespace 'urn:bookstore-schema'. Expected 'first-name' in namespace 'urn:bookstore-schema'."
  syntax:
    content: public class XmlSchemaSet
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.#ctor
  id: '#ctor'
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: XmlSchemaSet()
  nameWithType: XmlSchemaSet.XmlSchemaSet()
  fullName: System.Xml.Schema.XmlSchemaSet.XmlSchemaSet()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新实例<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>类。"
  syntax:
    content: public XmlSchemaSet ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)
  id: '#ctor(System.Xml.XmlNameTable)'
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: XmlSchemaSet(XmlNameTable)
  nameWithType: XmlSchemaSet.XmlSchemaSet(XmlNameTable)
  fullName: System.Xml.Schema.XmlSchemaSet.XmlSchemaSet(XmlNameTable)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新实例<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>指定<xref:System.Xml.XmlNameTable>.</xref:System.Xml.XmlNameTable>类"
  syntax:
    content: public XmlSchemaSet (System.Xml.XmlNameTable nameTable);
    parameters:
    - id: nameTable
      type: System.Xml.XmlNameTable
      description: "<xref:System.Xml.XmlNameTable>要使用对象。</xref:System.Xml.XmlNameTable>"
  overload: System.Xml.Schema.XmlSchemaSet.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlNameTable>对象作为参数传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlNameTable>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)
  id: Add(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Add(XmlSchema)
  nameWithType: XmlSchemaSet.Add(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "将添加给定<xref:System.Xml.Schema.XmlSchema>到<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  remarks: "如果<xref:System.Xml.Schema.XmlSchema>对象已存在于<xref:System.Xml.Schema.XmlSchemaSet>，Add 方法不执行任何操作。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchema>       此方法的功能等同于的<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。</xref:System.Xml.Schema.XmlSchemaSet.Add%2A>"
  syntax:
    content: public System.Xml.Schema.XmlSchema Add (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>要添加到对象<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>对象架构是否有效。</xref:System.Xml.Schema.XmlSchema> 如果架构不是有效和<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>未指定，则<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>返回并引发相应的验证事件。 否则为<xref href=&quot;System.Xml.Schema.XmlSchemaException&quot;></xref>引发。"
  overload: System.Xml.Schema.XmlSchemaSet.Add*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "架构不是有效的。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>对象作为参数传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)
  id: Add(System.Xml.Schema.XmlSchemaSet)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Add(XmlSchemaSet)
  nameWithType: XmlSchemaSet.Add(XmlSchemaSet)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "将中的所有 XML 架构定义语言 (XSD) 架构都添加给定<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>到<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "可以将架构添加到之前<xref:System.Xml.Schema.XmlSchemaSet>，它必须成功预处理。</xref:System.Xml.Schema.XmlSchemaSet> 预处理执行以下基本任务。      1.  根据 W3C XML 架构的规则的结构化有效性检查该架构，但没有完全验证架构。      2.  对内部和外部架构组件的引用进行解析。 已成功检索到任何导入或包含架构也将添加到<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> 导入的架构添加为单独<xref:System.Xml.Schema.XmlSchema>对象，包括的架构进行和包括<xref:System.Xml.Schema.XmlSchema>。</xref:System.Xml.Schema.XmlSchema>的一部分</xref:System.Xml.Schema.XmlSchema>       如果<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性<xref:System.Xml.Schema.XmlSchemaSet>若要将添加`true`中的所有架构<xref:System.Xml.Schema.XmlSchemaSet>将添加到<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 如果<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性<xref:System.Xml.Schema.XmlSchemaSet>若要将添加`false`，添加每个架构在添加之前进行预处理。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 如果任何中新添加的架构<xref:System.Xml.Schema.XmlSchemaSet>无法进行预处理，不添加任何架构; 相反，<xref:System.Xml.Schema.XmlSchemaException>引发。</xref:System.Xml.Schema.XmlSchemaException> </xref:System.Xml.Schema.XmlSchemaSet> 因此，下面的两个代码示例不是等效的。      ```vb#   &quot; First example   schemaSet.Add(schemaSet1)      &quot; Second example   Dim schema As XmlSchema      For Each schema in schemaSet.Schemas()          schemaSet.Add(schema)      Next   ```      ```c#   // First example   schemaSet.Add(schemaSet1);      // Second example   foreach(XmlSchema schema in schemaSet.Schemas())   {       schemaSet.Add(schema);   }   ```前面的两个代码示例不是等效的。 在第一个示例中，如果了无效的架构中存在`schemaSet1`及其<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为`false`，任何架构将添加到`schemaSet`。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> 在第二个示例中，可以将大量的架构添加到`schemaSet`遇到了无效的架构和引发异常之前。"
  example:
  - "The following code example illustrates adding schemas to an <xref:System.Xml.Schema.XmlSchemaSet>, then adding the <xref:System.Xml.Schema.XmlSchemaSet> to a new <xref:System.Xml.Schema.XmlSchemaSet> using the Add method.  \n  \n```vb#  \nDim schemaSet1 As XmlSchemaSet = New XmlSchemaSet  \nschemaSet1.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\")  \nschemaSet1.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet1.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\")  \n  \nDim schemaSet2 As XmlSchemaSet = New XmlSchemaSet  \nschemaSet2.Add(schemaSet1)  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet1 = new XmlSchemaSet();  \nschemaSet1.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\");  \nschemaSet1.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet1.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\");  \n  \nXmlSchemaSet schemaSet2 = new XmlSchemaSet();  \nschemaSet2.Add(schemaSet1);  \n```"
  syntax:
    content: public void Add (System.Xml.Schema.XmlSchemaSet schemas);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>对象。"
  overload: System.Xml.Schema.XmlSchemaSet.Add*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "中的架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>无效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>对象作为参数传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)
  id: Add(System.String,System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Add(String,String)
  nameWithType: XmlSchemaSet.Add(String,String)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(String,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "将 XML 架构定义语言 (XSD) 架构添加到指定的 URL 处<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "可以将架构添加到之前<xref:System.Xml.Schema.XmlSchemaSet>，它必须成功预处理。</xref:System.Xml.Schema.XmlSchemaSet> 预处理执行以下基本任务。      1.  根据 W3C XML 架构的规则的结构化有效性检查该架构，但没有完全验证架构。      2.  对内部和外部架构组件的引用进行解析。 已成功检索到任何导入或包含架构也将添加到<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> 导入的架构添加为单独<xref:System.Xml.Schema.XmlSchema>对象，包括的架构进行和包括<xref:System.Xml.Schema.XmlSchema>。</xref:System.Xml.Schema.XmlSchema>的一部分</xref:System.Xml.Schema.XmlSchema>       以下是使用的 Add 方法时要考虑的重要说明。      -添加到架构<xref:System.Xml.Schema.XmlSchemaSet>具有相同目标命名空间和架构位置 URL 内已包含架构作为<xref:System.Xml.Schema.XmlSchemaSet>将返回原始的架构对象。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet>      -当新的架构已成功添加到<xref:System.Xml.Schema.XmlSchemaSet>、<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性<xref:System.Xml.Schema.XmlSchemaSet>设置为`false`。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> </xref:System.Xml.Schema.XmlSchemaSet>      的在将调用添加方法时，在 XML 架构中遇到任何包括或导入元素进行解析。 无法解析包含和导入架构验证警告的元素导致而且如果没有<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>为指定了<xref:System.Xml.Schema.XmlSchemaSet>对象，这些警告将不会报告。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>      -如果中已经存在具有相同架构的目标命名空间的架构<xref:System.Xml.Schema.XmlSchemaSet>添加到<xref:System.Xml.Schema.XmlSchemaSet>，添加两个架构。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet>          1> [!NOTE]&1;> 此行为不同于过时<xref:System.Xml.Schema.XmlSchemaCollection>对象。</xref:System.Xml.Schema.XmlSchemaCollection>      -的 Add 方法<xref:System.Xml.Schema.XmlSchemaSet>已使用的目标命名空间定义在架构中，而无需时将调用添加方法作为参数指定的目标命名空间的能力。</xref:System.Xml.Schema.XmlSchemaSet> 指定`null`中`targetNamespace`的 Add 方法的参数指示<xref:System.Xml.Schema.XmlSchemaSet>若要使用的架构中定义的目标命名空间，如下面的代码示例中所示。</xref:System.Xml.Schema.XmlSchemaSet>      ```vb#   Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()   schemaSet.Add(Nothing, &quot;books.xsd&quot;)      Dim schema As XmlSchema   For Each schema In schemaSet.Schemas(&quot;http://www.contoso.com/books&quot;)       schema.Write(Console.Out)   Next   ```      ```c#   XmlSchemaSet schemaSet = new XmlSchemaSet();   schemaSet.Add(null, &quot;books.xsd&quot;);      foreach(XmlSchema schema in schemaSet.Schemas(&quot;http://www.contoso.com/books&quot;))   {       schema.Write(Console.Out);   }   ```在上面的代码示例`null`指定为`targetNamespace`Add 方法的参数。 因此，`targetNamespace`定义 books.xml 中使用文件。 在这种情况下，调用的 Add 方法的结果将是完全相同，如果已指定作为 http://www.contoso.com/books`targetNamespace`参数。      -W3C XML 架构允许没有目标命名空间包括在架构中，与定义的目标命名空间的架构。 在这种情况下，没有定义的目标命名空间的架构是强制转换为包括架构的目标命名空间。 包含的架构被视为已定义该目标命名空间。 同样，可以将没有目标命名空间的架构添加到<xref:System.Xml.Schema.XmlSchemaSet>并被强迫 Add 方法，如下面的示例中所示指定的目标命名空间。</xref:System.Xml.Schema.XmlSchemaSet>      ```   <xs:schema xmlns:xs=&quot;http://www.w3.org/2001/XMLSchema&quot;>       <xs:element name=&quot;A&quot; type=&quot;xs:string&quot; />   </xs:schema>   ```如果上面的架构添加到<xref:System.Xml.Schema.XmlSchemaSet>与目标命名空间 http://www.contoso.com/new/targetnamespace （如下面的代码中所示），它将被视为架构中声明的目标命名空间已`http://www.contoso.com/new/targetnamespace`。</xref:System.Xml.Schema.XmlSchemaSet>      ```vb#   Dim schemaSet As XmlSchemaSet = New XmlSchemaSet()   schemaSet.Add(&quot;http://www.contoso.com/new/targetnamespace&quot;, &quot;http://www.contoso.com/targetnamespace.xsd&quot;)      Dim schema As XmlSchema      For Each schema in schemaSet.Schemas()          Console.WriteLine(schema.TargetNamespace)         Next   ```      ```c#   XmlSchemaSet schemaSet = new XmlSchemaSet();   schemaSet.Add(&quot;http://www.contoso.com/new/targetnamespace&quot;, &quot;http://www.contoso.com/targetnamespace.xsd&quot;);   foreach(XmlSchema schema in schemaSet.Schemas())   {       Console.WriteLine(schema.TargetNamespace);   }   ```"
  example:
  - "The following code example adds the http://www.contoso.com/books.xsd schema with a target namespace of http://www.contoso.com/books to the <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \n```  \n  \n The example uses the `books.xsd` file as input.  \n  \n [!code-xml[XmlSchemaSetOverall Example#3](~/add/codesnippet/xml/m-system.xml.schema.xmls_3_1.xsd)]"
  syntax:
    content: public System.Xml.Schema.XmlSchema Add (string targetNamespace, string schemaUri);
    parameters:
    - id: targetNamespace
      type: System.String
      description: "架构`targetNamespace`属性，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>使用`targetNamespace`架构中指定。"
    - id: schemaUri
      type: System.String
      description: "指定要加载的架构的 URL。"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>对象架构是否有效。</xref:System.Xml.Schema.XmlSchema> 如果架构不是有效和<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>未指定，则<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>返回并引发相应的验证事件。 否则为<xref href=&quot;System.Xml.Schema.XmlSchemaException&quot;></xref>引发。"
  overload: System.Xml.Schema.XmlSchemaSet.Add*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "架构不是有效的。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "作为参数传递的 URL 是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或<xref:System.String.Empty>。</xref:System.String.Empty>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)
  id: Add(System.String,System.Xml.XmlReader)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Add(String,XmlReader)
  nameWithType: XmlSchemaSet.Add(String,XmlReader)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(String,XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "将 XML 架构定义语言 (XSD) 架构中包含添加<xref:System.Xml.XmlReader>到<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.XmlReader>"
  remarks: "可以将架构添加到之前<xref:System.Xml.Schema.XmlSchemaSet>，它必须成功预处理。</xref:System.Xml.Schema.XmlSchemaSet> 预处理执行以下基本任务。      1.  根据 W3C XML 架构的规则的结构化有效性检查该架构，但没有完全验证架构。      2.  对内部和外部架构组件的引用进行解析。 已成功检索到任何导入或包含架构也将添加到<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> 导入的架构添加为单独<xref:System.Xml.Schema.XmlSchema>对象，包括的架构进行和包括<xref:System.Xml.Schema.XmlSchema>。</xref:System.Xml.Schema.XmlSchema>的一部分</xref:System.Xml.Schema.XmlSchema>       以下是使用的 Add 方法时要考虑的重要说明。      -已成功检索的架构导入或包含的<xref:System.Xml.XmlReader>也将添加到<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet></xref:System.Xml.XmlReader>中包含的架构      -如果<xref:System.Xml.XmlReader>未定位在的根元素，<xref:System.Xml.Schema.XmlSchemaException>引发除非当前项是一个元素。</xref:System.Xml.Schema.XmlSchemaException> </xref:System.Xml.XmlReader> 如果当前项`xs:schema`元素，架构文档读取到<xref:System.Xml.Schema.XmlSchemaSet>; 否则为<xref:System.Xml.Schema.XmlSchemaException>因为架构不是有效引发。</xref:System.Xml.Schema.XmlSchemaException> </xref:System.Xml.Schema.XmlSchemaSet>      -如果<xref:System.Xml.XmlReader>位于通过 XML 节点的序列，添加仅在序列中的第一个节点。</xref:System.Xml.XmlReader>      -如果从已创建的架构<xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName>方法调用、 的值<xref:System.Xml.Schema.XmlSchemaValidationFlags>属性被忽略，因为内联架构处理不应用于 W3C XML 架构文档。</xref:System.Xml.Schema.XmlSchemaValidationFlags> </xref:System.Xml.XmlReader.Create%2A?displayProperty=fullName>      -<xref:System.Xml.XmlResolver>属性<xref:System.Xml.XmlReader>不用于解析命名空间或架构中的位置的引用包含和导入元素。</xref:System.Xml.XmlReader> </xref:System.Xml.XmlResolver> 相反，<xref:System.Xml.XmlResolver>属性<xref:System.Xml.Schema.XmlSchemaSet>使用。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlResolver>      -的 Add 方法<xref:System.Xml.Schema.XmlSchemaSet>已使用的目标命名空间定义在架构中，而无需时将调用添加方法作为参数指定的目标命名空间的能力。</xref:System.Xml.Schema.XmlSchemaSet> 指定`null`或<xref:System.String.Empty?displayProperty=fullName>的 add 方法指示<xref:System.Xml.Schema.XmlSchemaSet>若要使用的架构中定义的目标命名空间。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.String.Empty?displayProperty=fullName> 此行为的一个示例，请参阅<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。</xref:System.Xml.Schema.XmlSchemaSet.Add%2A>       此方法的其他功能等同于的<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>方法。</xref:System.Xml.Schema.XmlSchemaSet.Add%2A>"
  example:
  - "The following code example adds the books.xsd schema contained in the <xref:System.Xml.XmlTextReader> with a target namespace of http://www.contoso.com/books to the <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/books\", New XmlTextReader(\"books.xsd\")  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", new XmlTextReader(\"books.xsd\");  \n```"
  syntax:
    content: public System.Xml.Schema.XmlSchema Add (string targetNamespace, System.Xml.XmlReader schemaDocument);
    parameters:
    - id: targetNamespace
      type: System.String
      description: "架构`targetNamespace`属性，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>使用`targetNamespace`架构中指定。"
    - id: schemaDocument
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>对象。</xref:System.Xml.XmlReader>"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>对象架构是否有效。</xref:System.Xml.Schema.XmlSchema> 如果架构不是有效和<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>未指定，则<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>返回并引发相应的验证事件。 否则为<xref href=&quot;System.Xml.Schema.XmlSchemaException&quot;></xref>引发。"
  overload: System.Xml.Schema.XmlSchemaSet.Add*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "架构不是有效的。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.XmlReader>对象作为参数传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.XmlReader>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.CompilationSettings
  id: CompilationSettings
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: CompilationSettings
  nameWithType: XmlSchemaSet.CompilationSettings
  fullName: System.Xml.Schema.XmlSchemaSet.CompilationSettings
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置<xref href=&quot;System.Xml.Schema.XmlSchemaCompilationSettings&quot;></xref>为<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "<xref:System.Xml.Schema.XmlSchemaCompilationSettings>类指定<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet>唯一粒子归属 (UPA) 验证选项</xref:System.Xml.Schema.XmlSchemaCompilationSettings> 有关启用 UPA 验证检查的详细信息，请参阅<xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A>属性。</xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck%2A>"
  syntax:
    content: public System.Xml.Schema.XmlSchemaCompilationSettings CompilationSettings { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaCompilationSettings
      description: "The <xref href=&quot;System.Xml.Schema.XmlSchemaCompilationSettings&quot;></xref> for the <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>. 默认值是<xref href=&quot;System.Xml.Schema.XmlSchemaCompilationSettings&quot;></xref>实例与<xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck*>属性设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchemaCompilationSettings.EnableUpaCheck*>"
  overload: System.Xml.Schema.XmlSchemaSet.CompilationSettings*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Compile
  id: Compile
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Compile()
  nameWithType: XmlSchemaSet.Compile()
  fullName: System.Xml.Schema.XmlSchemaSet.Compile()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "编译添加到 XML 架构定义语言 (XSD) 架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>成一个逻辑架构。"
  remarks: "需要验证时自动调用此方法与<xref:System.Xml.Schema.XmlSchemaSet>以前尚未编译-例如，当<xref:System.Xml.Schema.XmlSchemaSet>作为输入用于创建<xref:System.Xml.XmlReader>对象在<xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A>属性<xref:System.Xml.XmlReaderSettings>对象。</xref:System.Xml.XmlReaderSettings> </xref:System.Xml.Schema.XmlSchemaSet.Schemas%2A> </xref:System.Xml.XmlReader> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> 如果<xref:System.Xml.Schema.XmlSchemaSet>是已在编译的状态，此方法不会重新编译架构。</xref:System.Xml.Schema.XmlSchemaSet> 如果此方法成功执行，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为`true`。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>       以前编译的架构<xref:System.Xml.Schema.XmlSchemaSet>不重新编译。</xref:System.Xml.Schema.XmlSchemaSet> 但是，使用的编译方法编译的架构<xref:System.Xml.Schema.XmlSchema>将重新编译。</xref:System.Xml.Schema.XmlSchema>      1> [!NOTE]&1;> 你需要调用<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法，如果你已将其添加到<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet>后更改架构 （或其的包括/导入文件夹）</xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法将检查根据 W3C XML 架构的规则的结构化有效性的架构。</xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> 但是，它不会执行完整的验证检查。 它还会解析到内部和外部架构组件的引用。 已成功检索到任何导入或包含架构也将添加到<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> 导入的架构将添加为独立的<xref:System.Xml.Schema.XmlSchema>对象包括的架构进行的一部分包括<xref:System.Xml.Schema.XmlSchema>。</xref:System.Xml.Schema.XmlSchema>时</xref:System.Xml.Schema.XmlSchema> 若要重新处理的调用是否成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为 false。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>"
  example:
  - "```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Compile()  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Compile();  \n```"
  syntax:
    content: public void Compile ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaSet.Compile*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "验证和编译中的架构时出错，发生<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Contains(System.String)
  id: Contains(System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Contains(String)
  nameWithType: XmlSchemaSet.Contains(String)
  fullName: System.Xml.Schema.XmlSchemaSet.Contains(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "指示是否为指定的目标命名空间 URI 与 XML 架构定义语言 (XSD) 架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "间接添加到的架构<xref:System.Xml.Schema.XmlSchemaSet>检测到的 Contains 方法; 例如，导入架构。</xref:System.Xml.Schema.XmlSchemaSet> 因此，如果用于 http://www.contoso.com/retail 命名空间的架构的导入 http://www.contoso.com/books 命名空间架构添加到<xref:System.Xml.Schema.XmlSchemaSet>，调用与 Contains`http://www.contoso.com/books`作为参数，它将返回`true`。</xref:System.Xml.Schema.XmlSchemaSet>"
  syntax:
    content: public bool Contains (string targetNamespace);
    parameters:
    - id: targetNamespace
      type: System.String
      description: "架构`targetNamespace`属性。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果与指定的目标命名空间 URI 的架构是否在<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaSet.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)
  id: Contains(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Contains(XmlSchema)
  nameWithType: XmlSchemaSet.Contains(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Contains(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "指示是否指定的 XML 架构定义语言 (XSD)<xref:System.Xml.Schema.XmlSchema>对象处于<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  syntax:
    content: public bool Contains (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>对象。</xref:System.Xml.Schema.XmlSchema>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Xml.Schema.XmlSchema>对象处于<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Xml.Schema.XmlSchemaSet.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>参数原样传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
  id: CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: CopyTo(XmlSchema[],Int32)
  nameWithType: XmlSchemaSet.CopyTo(XmlSchema[],Int32)
  fullName: System.Xml.Schema.XmlSchemaSet.CopyTo(XmlSchema[],Int32)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "将所有复制<xref:System.Xml.Schema.XmlSchema>对象从<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>到给定数组中，从给定索引处开始。</xref:System.Xml.Schema.XmlSchema>"
  remarks: ''
  example:
  - "The following example copies all the <xref:System.Xml.Schema.XmlSchema> objects in the <xref:System.Xml.Schema.XmlSchemaSet> to an array of <xref:System.Xml.Schema.XmlSchema> objects.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\")  \n  \nDim schemas(schemaSet.Count) As XmlSchema  \nschemaSet.CopyTo(schemas, 0)  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\");  \n  \nXmlSchema[] schemas = new XmlSchema[schemaSet.Count];  \nschemaSet.CopyTo(schemas, 0);  \n```"
  syntax:
    content: public void CopyTo (System.Xml.Schema.XmlSchema[] schemas, int index);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchema[]
      description: "要向其复制对象的数组。"
    - id: index
      type: System.Int32
      description: "中开始复制的数组的索引。"
  overload: System.Xml.Schema.XmlSchemaSet.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Count
  id: Count
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Count
  nameWithType: XmlSchemaSet.Count
  fullName: System.Xml.Schema.XmlSchemaSet.Count
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取数逻辑 XML 架构定义语言 (XSD) 架构中<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "如果没有命名空间的两个架构`http://www.contoso.com`中<xref:System.Xml.Schema.XmlSchemaSet>，Count 属性将返回 1，因为架构被视为单个逻辑架构来进行验证。</xref:System.Xml.Schema.XmlSchemaSet> 但是，如果用于命名空间的架构`http://www.contoso.com/retail`导入的架构`http://www.contoso.com/books`命名空间，计数属性的值将为 2。"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "中的逻辑架构数<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaSet.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.GlobalAttributes
  id: GlobalAttributes
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: GlobalAttributes
  nameWithType: XmlSchemaSet.GlobalAttributes
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalAttributes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取所有 XML 架构定义中的所有全局特性语言 (XSD) 架构中<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaObjectTable GlobalAttributes { get; }
    return:
      type: System.Xml.Schema.XmlSchemaObjectTable
      description: "属性特性的集合。"
  overload: System.Xml.Schema.XmlSchemaSet.GlobalAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.GlobalElements
  id: GlobalElements
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: GlobalElements
  nameWithType: XmlSchemaSet.GlobalElements
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalElements
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取所有 XML 架构定义中的所有全局元素语言 (XSD) 架构中<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaObjectTable GlobalElements { get; }
    return:
      type: System.Xml.Schema.XmlSchemaObjectTable
      description: "全局元素的集合。"
  overload: System.Xml.Schema.XmlSchemaSet.GlobalElements*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.GlobalTypes
  id: GlobalTypes
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: GlobalTypes
  nameWithType: XmlSchemaSet.GlobalTypes
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalTypes
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取所有全局简单和复杂类型中的所有 XML 架构定义语言 (XSD) 架构中的<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "GlobalTypes 属性始终返回一个表示类型`xs:anyType`复杂类型。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaObjectTable GlobalTypes { get; }
    return:
      type: System.Xml.Schema.XmlSchemaObjectTable
      description: "全局简单和复杂类型的集合。"
  overload: System.Xml.Schema.XmlSchemaSet.GlobalTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.IsCompiled
  id: IsCompiled
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: IsCompiled
  nameWithType: XmlSchemaSet.IsCompiled
  fullName: System.Xml.Schema.XmlSchemaSet.IsCompiled
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取一个值，该值指示是否中的 XML 架构定义语言 (XSD) 架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>已编译。"
  remarks: "如果在<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet>编辑了架构不受影响的 IsCompiled 属性 中的单个架构更新<xref:System.Xml.Schema.XmlSchemaSet>不会跟踪。</xref:System.Xml.Schema.XmlSchemaSet> 因此，IsCompiled 属性可`true`即使<xref:System.Xml.Schema.XmlSchemaSet>已被更改，只要没有添加或删除从<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet>任何架构</xref:System.Xml.Schema.XmlSchemaSet>中包含一个架构"
  example:
  - For an example of the IsCompiled property, see the <xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> method.
  syntax:
    content: public bool IsCompiled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果中的架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>以来上次架构已添加或删除从已被编译<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaSet.IsCompiled*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.NameTable
  id: NameTable
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: NameTable
  nameWithType: XmlSchemaSet.NameTable
  fullName: System.Xml.Schema.XmlSchemaSet.NameTable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取默认<xref:System.Xml.XmlNameTable>由<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>时加载新的 XML 架构定义语言 (XSD) 架构。</xref:System.Xml.XmlNameTable>"
  syntax:
    content: public System.Xml.XmlNameTable NameTable { get; }
    return:
      type: System.Xml.XmlNameTable
      description: "原子化的字符串对象表。"
  overload: System.Xml.Schema.XmlSchemaSet.NameTable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)
  id: Remove(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Remove(XmlSchema)
  nameWithType: XmlSchemaSet.Remove(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Remove(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "删除指定的 XML 架构定义语言 (XSD) 的架构从<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "删除从架构<xref:System.Xml.Schema.XmlSchemaSet>设置<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性`false`。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> </xref:System.Xml.Schema.XmlSchemaSet>"
  example:
  - "The following example illustrates adding multiple schemas to an <xref:System.Xml.Schema.XmlSchemaSet>, then removing one of the schemas using the Remove method.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\")  \n  \nDim schema As XmlSchema  \n  \nFor Each schema In schemaSet.Schemas()  \n  \n    If schema.TargetNamespace = \"http://www.contoso.com/music\" Then  \n        schemaSet.Remove(schema)  \n    End If  \n  \nNext  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\");  \n  \nforeach (XmlSchema schema in schemaSet.Schemas())  \n{  \n    if (schema.TargetNamespace == \"http://www.contoso.com/music\")  \n    {  \n        schemaSet.Remove(schema);  \n    }  \n}  \n```"
  syntax:
    content: public System.Xml.Schema.XmlSchema Remove (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>要从移除对象<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>从删除的对象<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果中找不到架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Xml.Schema.XmlSchemaSet.Remove*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "架构不是有效的架构。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>参数原样传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)
  id: RemoveRecursive(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: RemoveRecursive(XmlSchema)
  nameWithType: XmlSchemaSet.RemoveRecursive(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.RemoveRecursive(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "删除指定的 XML 架构定义语言 (XSD) 架构和它从中导入的所有架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "RemoveRecursive 方法中删除指定的架构和它从中导入的所有架构<xref:System.Xml.Schema.XmlSchemaSet>，只要有不依赖于架构或其导入的架构。</xref:System.Xml.Schema.XmlSchemaSet> 如果不存在架构或在其导入的架构上的依赖关系<xref:System.Xml.Schema.XmlSchemaSet>，执行任何操作将删除并且 RemoveRecursive 返回`false`。</xref:System.Xml.Schema.XmlSchemaSet> 如果`false`返回和<xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>是定义，警告被发送到事件处理程序描述的相关性。</xref:System.Xml.Schema.XmlSchemaSet.ValidationEventHandler>       如果指定的架构导入其他架构和以前移除了指定的架构<xref:System.Xml.Schema.XmlSchemaSet.Remove%2A>方法，RemoveRecursive 方法不会删除导入的架构并将返回`false`。</xref:System.Xml.Schema.XmlSchemaSet.Remove%2A> 例如，如果`parentSchema`导入`childSchema1`和`childSchema2`下面的代码只会删除`parentSchema`，但不是导入`childSchema1`和`childSchema2`架构︰```   XmlSchemaSet ss = new XmlSchemaSet();   XmlSchema xs = XmlSchema.Read(XmlReader.Create(&quot;parentSchema.xsd&quot;), null);   ss.Add(xs);   ss.Compile();   ss.Remove(xs);   ss.Compile();   ss.RemoveRecursive(xs);   ss.Compile();   ```下面的代码将删除`parentSchema`和导入的架构︰ ```   XmlSchemaSet ss = new XmlSchemaSet();   XmlSchema xs = XmlSchema.Read(XmlReader.Create(&quot;parentSchema.xsd&quot;), null);   ss.Add(xs);   ss.Compile();   ss.RemoveRecursive(xs);   ss.Compile();   ``` RemoveRecursive 方法不起作用的状态<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>"
  example:
  - "The following code example illustrates adding multiple schemas to an <xref:System.Xml.Schema.XmlSchemaSet>, then removing one of the schemas and all the schemas it imports using the RemoveRecursive method.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\")  \n  \nDim schema As XmlSchema  \n  \nFor Each schema In schemaSet.Schemas()  \n  \n    If schema.TargetNamespace = \"http://www.contoso.com/music\" Then  \n        schemaSet.RemoveRecursive(schema)  \n    End If  \n  \nNext  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/retail\", \"http://www.contoso.com/retail.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Add(\"http://www.contoso.com/music\", \"http://www.contoso.com/music.xsd\");  \n  \nforeach (XmlSchema schema in schemaSet.Schemas())  \n{  \n    if (schema.TargetNamespace == \"http://www.contoso.com/music\")  \n    {  \n        schemaSet.RemoveRecursive(schema);  \n    }  \n}  \n```"
  syntax:
    content: public bool RemoveRecursive (System.Xml.Schema.XmlSchema schemaToRemove);
    parameters:
    - id: schemaToRemove
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>要从移除对象<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Xml.Schema.XmlSchema>对象和所有导入已成功删除; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  overload: System.Xml.Schema.XmlSchemaSet.RemoveRecursive*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>参数原样传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)
  id: Reprocess(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Reprocess(XmlSchema)
  nameWithType: XmlSchemaSet.Reprocess(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Reprocess(XmlSchema)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "重新处理中已存在一个 XML 架构定义语言 (XSD) 架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "重新处理架构执行针对架构执行的所有预处理步骤时<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>调用方法。</xref:System.Xml.Schema.XmlSchemaSet.Add%2A> 如果重新处理调用成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为`false`。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>       重新处理方法应使用后架构<xref:System.Xml.Schema.XmlSchemaSet>已被修改，之后<xref:System.Xml.Schema.XmlSchemaSet>执行编译。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet>      1> [!NOTE]&1;> 你需要将其添加到<xref:System.Xml.Schema.XmlSchemaSet>。</xref:System.Xml.Schema.XmlSchemaSet>后如果您已更改架构 （或其的包括/导入之一） 调用重新处理方法 重新处理方法将检查根据 W3C XML 架构的规则的结构化有效性的架构。 但是，它不会执行完整的验证检查。 它还会解析到内部和外部架构组件的引用。 已成功检索到任何导入或包含架构也将添加到<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet> 导入的架构将添加为独立的<xref:System.Xml.Schema.XmlSchema>对象包括的架构进行的一部分包括<xref:System.Xml.Schema.XmlSchema>。</xref:System.Xml.Schema.XmlSchema>时</xref:System.Xml.Schema.XmlSchema> 若要重新处理的调用是否成功，<xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>属性设置为 false。</xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A>"
  example:
  - "The following example illustrates reprocessing a schema added to the <xref:System.Xml.Schema.XmlSchemaSet>. After the <xref:System.Xml.Schema.XmlSchemaSet> is compiled using the <xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> method, and the schema added to the <xref:System.Xml.Schema.XmlSchemaSet> is modified, the <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> property will be set to `true`, even though a schema in the <xref:System.Xml.Schema.XmlSchemaSet> has been modified. Calling the Reprocess method performs all the preprocessing performed by the <xref:System.Xml.Schema.XmlSchemaSet.Add%2A> method and sets the <xref:System.Xml.Schema.XmlSchemaSet.IsCompiled%2A> property to `false`.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet()  \nDim schema As XmlSchema = schemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \nschemaSet.Compile()  \n  \nDim element As XmlSchemaElement = New XmlSchemaElement()  \nschema.Items.Add(element)  \nelement.Name = \"book\"  \nelement.SchemaTypeName = New XmlQualifiedName(\"string\", \"http://www.w3.org/2001/XMLSchema\")  \n  \nschemaSet.Reprocess(schema)  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nXmlSchema schema = schemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \nschemaSet.Compile();  \n  \nXmlSchemaElement element = new XmlSchemaElement();  \nschema.Items.Add(element);  \nelement.Name = \"book\";  \nelement.SchemaTypeName = new XmlQualifiedName(\"string\", \"http://www.w3.org/2001/XMLSchema\");  \n  \nschemaSet.Reprocess(schema);  \n```"
  syntax:
    content: public System.Xml.Schema.XmlSchema Reprocess (System.Xml.Schema.XmlSchema schema);
    parameters:
    - id: schema
      type: System.Xml.Schema.XmlSchema
      description: "要重新处理的架构。"
    return:
      type: System.Xml.Schema.XmlSchema
      description: "<xref:System.Xml.Schema.XmlSchema>对象架构是否是有效的架构。</xref:System.Xml.Schema.XmlSchema> 如果架构不是有效和<xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;></xref>指定，则<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>返回并引发相应的验证事件。 否则为<xref href=&quot;System.Xml.Schema.XmlSchemaException&quot;></xref>引发。"
  overload: System.Xml.Schema.XmlSchemaSet.Reprocess*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaException
    commentId: T:System.Xml.Schema.XmlSchemaException
    description: "架构不是有效的。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<xref:System.Xml.Schema.XmlSchema>对象作为参数传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<xref:System.Xml.Schema.XmlSchema>对象传递参数中已不存在，因此<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Schema.XmlSchema>"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Schemas
  id: Schemas
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Schemas()
  nameWithType: XmlSchemaSet.Schemas()
  fullName: System.Xml.Schema.XmlSchemaSet.Schemas()
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回集合的所有 XML 架构定义语言 (XSD) 架构中的<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。"
  remarks: "此方法返回间接添加到的架构<xref:System.Xml.Schema.XmlSchemaSet>因为它们已导入。</xref:System.Xml.Schema.XmlSchemaSet>      1> [!NOTE]&1;> 架构方法等效于<xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A>过时<xref:System.Xml.Schema.XmlSchemaCollection>。</xref:System.Xml.Schema.XmlSchemaCollection>方法</xref:System.Xml.Schema.XmlSchemaCollection.GetEnumerator%2A>"
  example:
  - "The following example illustrates how to iterate over all the schemas in the <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \n  \nDim schema As XmlSchema  \n  \nFor Each schema In schemaSet.Schemas()  \n  \n    schema.Write(Console.Out)  \n  \nNext  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \n  \nforeach (XmlSchema schema in schemaSet.Schemas())  \n{  \n    schema.Write(Console.Out);  \n}  \n```"
  syntax:
    content: public System.Collections.ICollection Schemas ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>对象，其中包含已添加到的所有架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Collections.ICollection> 如果没有架构已添加到<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，空<xref:System.Collections.ICollection>返回对象。</xref:System.Collections.ICollection>"
  overload: System.Xml.Schema.XmlSchemaSet.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.Schemas(System.String)
  id: Schemas(System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: Schemas(String)
  nameWithType: XmlSchemaSet.Schemas(String)
  fullName: System.Xml.Schema.XmlSchemaSet.Schemas(String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "返回集合的所有 XML 架构定义语言 (XSD) 架构中的<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>属于给定的命名空间。"
  remarks: "如果`targetNamespace`参数是`null`或<xref:System.String.Empty>，则返回所有没有命名空间的架构。</xref:System.String.Empty>       此方法返回间接添加到的架构<xref:System.Xml.Schema.XmlSchemaSet>因为它们已导入。</xref:System.Xml.Schema.XmlSchemaSet>      1> [!NOTE]&1;> 架构方法等效于<xref:System.Xml.Schema.XmlSchemaCollection.Item%2A>过时<xref:System.Xml.Schema.XmlSchemaCollection>。</xref:System.Xml.Schema.XmlSchemaCollection>方法</xref:System.Xml.Schema.XmlSchemaCollection.Item%2A>"
  example:
  - "The following example illustrates how to iterate over all the schemas in the http://www.contoso.com/books namespace in the <xref:System.Xml.Schema.XmlSchemaSet>.  \n  \n```vb#  \nDim schemaSet As XmlSchemaSet = New XmlSchemaSet  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\")  \n  \nDim schema As XmlSchema  \n  \nFor Each schema In schemaSet.Schemas(\"http://www.contoso.com/books\")  \n  \n    schema.Write(Console.Out)  \n  \nNext  \n```  \n  \n```c#  \nXmlSchemaSet schemaSet = new XmlSchemaSet();  \nschemaSet.Add(\"http://www.contoso.com/books\", \"http://www.contoso.com/books.xsd\");  \n  \nforeach (XmlSchema schema in schemaSet.Schemas(\"http://www.contoso.com/books\"))  \n{  \n    schema.Write(Console.Out);  \n}  \n```"
  syntax:
    content: public System.Collections.ICollection Schemas (string targetNamespace);
    parameters:
    - id: targetNamespace
      type: System.String
      description: "架构`targetNamespace`属性。"
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>对象，其中包含已添加到的所有架构<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>属于给定的命名空间。</xref:System.Collections.ICollection> 如果没有架构已添加到<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，空<xref:System.Collections.ICollection>返回对象。</xref:System.Collections.ICollection>"
  overload: System.Xml.Schema.XmlSchemaSet.Schemas*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
  id: ValidationEventHandler
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: ValidationEventHandler
  nameWithType: XmlSchemaSet.ValidationEventHandler
  fullName: System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
  type: Event
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "指定的事件处理程序接收有关 XML 架构定义语言 (XSD) 架构验证错误的信息。"
  remarks: "设置事件处理程序，用于接收有关架构验证错误的信息时<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>或<xref:System.Xml.Schema.XmlSchemaSet.Compile%2A>方法<xref:System.Xml.Schema.XmlSchemaSet>称为。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet.Compile%2A> </xref:System.Xml.Schema.XmlSchemaSet.Add%2A>       如果未定义事件处理程序，<xref:System.Xml.Schema.XmlSchemaException>引发任何验证错误在其中<xref:System.Xml.Schema.XmlSeverityType>为<xref:System.Xml.Schema.XmlSeverityType>。</xref:System.Xml.Schema.XmlSeverityType> </xref:System.Xml.Schema.XmlSeverityType> </xref:System.Xml.Schema.XmlSchemaException> <xref:System.Xml.Schema.XmlSeverityType> <xref:System.Xml.Schema.XmlSeverityType>.</xref:System.Xml.Schema.XmlSeverityType>的</xref:System.Xml.Schema.XmlSeverityType>验证错误不会引发异常"
  example:
  - "The following code example illustrates adding a ValidationEventHandler to capture errors and warnings when validating an XML document against a schema.  \n  \n [!code-cs[XmlSchemaSetOverall Example#1](~/add/codesnippet/csharp/e-system.xml.schema.xmls_2_1.cs)]\n [!code-cpp[XmlSchemaSetOverall Example#1](~/add/codesnippet/cpp/e-system.xml.schema.xmls_2_1.cpp)]\n [!code-vb[XmlSchemaSetOverall Example#1](~/add/codesnippet/visualbasic/e-system.xml.schema.xmls_2_1.vb)]  \n  \n The example uses the books.xml file as an input.  \n  \n [!code-xml[XmlSchemaSetOverall Example#2](~/add/codesnippet/xml/e-system.xml.schema.xmls_2_2.xml)]  \n  \n The example uses the books.xsd file as an input.  \n  \n [!code-xml[XmlSchemaSetOverall Example#3](~/add/codesnippet/xml/e-system.xml.schema.xmls_2_3.xsd)]"
  syntax:
    content: public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;
    return:
      type: System.Xml.Schema.ValidationEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaSet.XmlResolver
  id: XmlResolver
  parent: System.Xml.Schema.XmlSchemaSet
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlSchemaSet.XmlResolver
  fullName: System.Xml.Schema.XmlSchemaSet.XmlResolver
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "集<xref href=&quot;System.Xml.XmlResolver&quot;></xref>用于解析包含和导入架构的元素命名空间或中引用的位置。"
  remarks: "<xref:System.Xml.XmlResolver>的<xref:System.Xml.Schema.XmlSchemaSet>用于解析包含和导入的架构，元素的随时使用添加架构命名空间或中引用的位置<xref:System.Xml.Schema.XmlSchemaSet.Add%2A>或<xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A>方法。</xref:System.Xml.Schema.XmlSchemaSet.Reprocess%2A> </xref:System.Xml.Schema.XmlSchemaSet.Add%2A> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlResolver>      1> [!IMPORTANT]&1;> 包括外部命名空间或中引用的位置，导入和架构的重新定义元素解析方面包括或导入这些架构的基 URI。 例如，如果包括或导入架构的基 URI 为空或`null`，则外部位置来解析相对于当前目录。 <xref:System.Xml.XmlUrlResolver>类用于解析外部架构默认情况下。</xref:System.Xml.XmlUrlResolver> 若要禁用的包含的解决方法，导入和重新定义架构，元素将 XmlResolver 属性设置为`null`。"
  syntax:
    content: public System.Xml.XmlResolver XmlResolver { set; }
    return:
      type: System.Xml.XmlResolver
      description: "<xref href=&quot;System.Xml.XmlResolver&quot;> </xref>用于解析包含和导入架构的元素命名空间或中引用的位置。"
  overload: System.Xml.Schema.XmlSchemaSet.XmlResolver*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xml.Schema.XmlSchemaException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaException
  nameWithType: XmlSchemaException
  fullName: System.Xml.Schema.XmlSchemaException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.Schema.XmlSchemaSet.#ctor
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlSchemaSet()
  nameWithType: XmlSchemaSet.XmlSchemaSet()
  fullName: System.Xml.Schema.XmlSchemaSet.XmlSchemaSet()
- uid: System.Xml.Schema.XmlSchemaSet.#ctor(System.Xml.XmlNameTable)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlSchemaSet(XmlNameTable)
  nameWithType: XmlSchemaSet.XmlSchemaSet(XmlNameTable)
  fullName: System.Xml.Schema.XmlSchemaSet.XmlSchemaSet(XmlNameTable)
- uid: System.Xml.XmlNameTable
  parent: System.Xml
  isExternal: true
  name: XmlNameTable
  nameWithType: XmlNameTable
  fullName: System.Xml.XmlNameTable
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add(XmlSchema)
  nameWithType: XmlSchemaSet.Add(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(XmlSchema)
- uid: System.Xml.Schema.XmlSchema
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.Xml.Schema.XmlSchemaSet)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add(XmlSchemaSet)
  nameWithType: XmlSchemaSet.Add(XmlSchemaSet)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.String,System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add(String,String)
  nameWithType: XmlSchemaSet.Add(String,String)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Schema.XmlSchemaSet.Add(System.String,System.Xml.XmlReader)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add(String,XmlReader)
  nameWithType: XmlSchemaSet.Add(String,XmlReader)
  fullName: System.Xml.Schema.XmlSchemaSet.Add(String,XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Schema.XmlSchemaSet.CompilationSettings
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: CompilationSettings
  nameWithType: XmlSchemaSet.CompilationSettings
  fullName: System.Xml.Schema.XmlSchemaSet.CompilationSettings
- uid: System.Xml.Schema.XmlSchemaCompilationSettings
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaCompilationSettings
  nameWithType: XmlSchemaCompilationSettings
  fullName: System.Xml.Schema.XmlSchemaCompilationSettings
- uid: System.Xml.Schema.XmlSchemaSet.Compile
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Compile()
  nameWithType: XmlSchemaSet.Compile()
  fullName: System.Xml.Schema.XmlSchemaSet.Compile()
- uid: System.Xml.Schema.XmlSchemaSet.Contains(System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Contains(String)
  nameWithType: XmlSchemaSet.Contains(String)
  fullName: System.Xml.Schema.XmlSchemaSet.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Schema.XmlSchemaSet.Contains(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Contains(XmlSchema)
  nameWithType: XmlSchemaSet.Contains(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Contains(XmlSchema)
- uid: System.Xml.Schema.XmlSchemaSet.CopyTo(System.Xml.Schema.XmlSchema[],System.Int32)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: CopyTo(XmlSchema[],Int32)
  nameWithType: XmlSchemaSet.CopyTo(XmlSchema[],Int32)
  fullName: System.Xml.Schema.XmlSchemaSet.CopyTo(XmlSchema[],Int32)
- uid: System.Xml.Schema.XmlSchema[]
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchema
  nameWithType: XmlSchema
  fullName: System.Xml.Schema.XmlSchema[]
  spec.csharp:
  - uid: System.Xml.Schema.XmlSchema
    name: XmlSchema
    nameWithType: XmlSchema
    fullName: XmlSchema[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xml.Schema.XmlSchemaSet.Count
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Count
  nameWithType: XmlSchemaSet.Count
  fullName: System.Xml.Schema.XmlSchemaSet.Count
- uid: System.Xml.Schema.XmlSchemaSet.GlobalAttributes
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalAttributes
  nameWithType: XmlSchemaSet.GlobalAttributes
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalAttributes
- uid: System.Xml.Schema.XmlSchemaObjectTable
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaObjectTable
  nameWithType: XmlSchemaObjectTable
  fullName: System.Xml.Schema.XmlSchemaObjectTable
- uid: System.Xml.Schema.XmlSchemaSet.GlobalElements
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalElements
  nameWithType: XmlSchemaSet.GlobalElements
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalElements
- uid: System.Xml.Schema.XmlSchemaSet.GlobalTypes
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalTypes
  nameWithType: XmlSchemaSet.GlobalTypes
  fullName: System.Xml.Schema.XmlSchemaSet.GlobalTypes
- uid: System.Xml.Schema.XmlSchemaSet.IsCompiled
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: IsCompiled
  nameWithType: XmlSchemaSet.IsCompiled
  fullName: System.Xml.Schema.XmlSchemaSet.IsCompiled
- uid: System.Xml.Schema.XmlSchemaSet.NameTable
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: NameTable
  nameWithType: XmlSchemaSet.NameTable
  fullName: System.Xml.Schema.XmlSchemaSet.NameTable
- uid: System.Xml.Schema.XmlSchemaSet.Remove(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Remove(XmlSchema)
  nameWithType: XmlSchemaSet.Remove(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Remove(XmlSchema)
- uid: System.Xml.Schema.XmlSchemaSet.RemoveRecursive(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: RemoveRecursive(XmlSchema)
  nameWithType: XmlSchemaSet.RemoveRecursive(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.RemoveRecursive(XmlSchema)
- uid: System.Xml.Schema.XmlSchemaSet.Reprocess(System.Xml.Schema.XmlSchema)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Reprocess(XmlSchema)
  nameWithType: XmlSchemaSet.Reprocess(XmlSchema)
  fullName: System.Xml.Schema.XmlSchemaSet.Reprocess(XmlSchema)
- uid: System.Xml.Schema.XmlSchemaSet.Schemas
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Schemas()
  nameWithType: XmlSchemaSet.Schemas()
  fullName: System.Xml.Schema.XmlSchemaSet.Schemas()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Xml.Schema.XmlSchemaSet.Schemas(System.String)
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Schemas(String)
  nameWithType: XmlSchemaSet.Schemas(String)
  fullName: System.Xml.Schema.XmlSchemaSet.Schemas(String)
- uid: System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: ValidationEventHandler
  nameWithType: XmlSchemaSet.ValidationEventHandler
  fullName: System.Xml.Schema.XmlSchemaSet.ValidationEventHandler
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.Schema.XmlSchemaSet.XmlResolver
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlResolver
  nameWithType: XmlSchemaSet.XmlResolver
  fullName: System.Xml.Schema.XmlSchemaSet.XmlResolver
- uid: System.Xml.XmlResolver
  parent: System.Xml
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
- uid: System.Xml.Schema.XmlSchemaSet.#ctor*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet.XmlSchemaSet
- uid: System.Xml.Schema.XmlSchemaSet.Add*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Add
  nameWithType: XmlSchemaSet.Add
- uid: System.Xml.Schema.XmlSchemaSet.CompilationSettings*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: CompilationSettings
  nameWithType: XmlSchemaSet.CompilationSettings
- uid: System.Xml.Schema.XmlSchemaSet.Compile*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Compile
  nameWithType: XmlSchemaSet.Compile
- uid: System.Xml.Schema.XmlSchemaSet.Contains*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Contains
  nameWithType: XmlSchemaSet.Contains
- uid: System.Xml.Schema.XmlSchemaSet.CopyTo*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: CopyTo
  nameWithType: XmlSchemaSet.CopyTo
- uid: System.Xml.Schema.XmlSchemaSet.Count*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Count
  nameWithType: XmlSchemaSet.Count
- uid: System.Xml.Schema.XmlSchemaSet.GlobalAttributes*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalAttributes
  nameWithType: XmlSchemaSet.GlobalAttributes
- uid: System.Xml.Schema.XmlSchemaSet.GlobalElements*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalElements
  nameWithType: XmlSchemaSet.GlobalElements
- uid: System.Xml.Schema.XmlSchemaSet.GlobalTypes*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: GlobalTypes
  nameWithType: XmlSchemaSet.GlobalTypes
- uid: System.Xml.Schema.XmlSchemaSet.IsCompiled*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: IsCompiled
  nameWithType: XmlSchemaSet.IsCompiled
- uid: System.Xml.Schema.XmlSchemaSet.NameTable*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: NameTable
  nameWithType: XmlSchemaSet.NameTable
- uid: System.Xml.Schema.XmlSchemaSet.Remove*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Remove
  nameWithType: XmlSchemaSet.Remove
- uid: System.Xml.Schema.XmlSchemaSet.RemoveRecursive*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: RemoveRecursive
  nameWithType: XmlSchemaSet.RemoveRecursive
- uid: System.Xml.Schema.XmlSchemaSet.Reprocess*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Reprocess
  nameWithType: XmlSchemaSet.Reprocess
- uid: System.Xml.Schema.XmlSchemaSet.Schemas*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: Schemas
  nameWithType: XmlSchemaSet.Schemas
- uid: System.Xml.Schema.XmlSchemaSet.XmlResolver*
  parent: System.Xml.Schema.XmlSchemaSet
  isExternal: false
  name: XmlResolver
  nameWithType: XmlSchemaSet.XmlResolver
