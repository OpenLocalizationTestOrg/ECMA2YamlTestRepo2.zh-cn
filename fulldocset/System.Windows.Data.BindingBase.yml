### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.BindingBase
  id: BindingBase
  children:
  - System.Windows.Data.BindingBase.BindingGroupName
  - System.Windows.Data.BindingBase.Delay
  - System.Windows.Data.BindingBase.FallbackValue
  - System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  - System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  - System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  - System.Windows.Data.BindingBase.StringFormat
  - System.Windows.Data.BindingBase.TargetNullValue
  langs:
  - csharp
  name: BindingBase
  nameWithType: BindingBase
  fullName: System.Windows.Data.BindingBase
  type: Class
  summary: "定义的共性<xref href=&quot;System.Windows.Data.Binding&quot;> </xref>， <xref href=&quot;System.Windows.Data.PriorityBinding&quot;> </xref>，和<xref href=&quot;System.Windows.Data.MultiBinding&quot;></xref>类。"
  remarks: "因为<xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=fullName>方法密封的从 BindingBase 派生的自定义绑定类无法正常运行，作为[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]标记扩展。</xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=fullName>"
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)]

      [System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Object))]

      public abstract class BindingBase : System.Windows.Markup.MarkupExtension
  inheritance:
  - System.Windows.Markup.MarkupExtension
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Data.BindingBase.BindingGroupName
  id: BindingGroupName
  parent: System.Windows.Data.BindingBase
  langs:
  - csharp
  name: BindingGroupName
  nameWithType: BindingBase.BindingGroupName
  fullName: System.Windows.Data.BindingBase.BindingGroupName
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置的名称<xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>此绑定的所属。"
  remarks: "如果未设置 BindingGroupName，绑定所属<xref:System.Windows.Data.BindingGroup>仅当绑定的源和<xref:System.Windows.FrameworkElement.DataContext%2A>具有的父元素的<xref:System.Windows.Data.BindingGroup>相同的对象。</xref:System.Windows.Data.BindingGroup> </xref:System.Windows.FrameworkElement.DataContext%2A> </xref:System.Windows.Data.BindingGroup>       如果 BindingGroupName 设置为一个值，绑定所属<xref:System.Windows.Data.BindingGroup>如果满足以下条件:-<xref:System.Windows.Data.BindingGroup.Name%2A>的<xref:System.Windows.Data.BindingGroup>和 BindingGroupName 是否相等。</xref:System.Windows.Data.BindingGroup> </xref:System.Windows.Data.BindingGroup.Name%2A> </xref:System.Windows.Data.BindingGroup>      -<xref:System.Windows.Data.BindingGroup>所属的绑定目标元素的父元素。</xref:System.Windows.Data.BindingGroup>       如果 BindingGroupName 设置为`null`，则绑定从不是一种<xref:System.Windows.Data.BindingGroup>。</xref:System.Windows.Data.BindingGroup>的一部分       你可以包含具有不同于源的绑定<xref:System.Windows.FrameworkElement.DataContext%2A>具有的父元素的<xref:System.Windows.Data.BindingGroup>通过设置<xref:System.Windows.Data.BindingGroup.Name%2A>的<xref:System.Windows.Data.BindingGroup>和 BindingGroupName 属性的一种绑定到相同的值。</xref:System.Windows.Data.BindingGroup> </xref:System.Windows.Data.BindingGroup.Name%2A> </xref:System.Windows.Data.BindingGroup> </xref:System.Windows.FrameworkElement.DataContext%2A>  你可以排除具有相同的源的绑定<xref:System.Windows.FrameworkElement.DataContext%2A>具有的父元素的<xref:System.Windows.Data.BindingGroup>通过设置<xref:System.Windows.Data.BindingGroup.Name%2A>的<xref:System.Windows.Data.BindingGroup>和 BindingGroupName 属性的一种绑定到不同的值。</xref:System.Windows.Data.BindingGroup> </xref:System.Windows.Data.BindingGroup.Name%2A> </xref:System.Windows.Data.BindingGroup> </xref:System.Windows.FrameworkElement.DataContext%2A>"
  example:
  - "The following examples are part of an application that checks whether the user has set the properties of two objects to equal values. The first example creates two <xref:System.Windows.Controls.TextBox> controls, each of which is data bound to a different source: The binding of the first <xref:System.Windows.Controls.TextBox> is part of the <xref:System.Windows.Data.BindingGroup> because the <xref:System.Windows.Controls.TextBox> inherits the <xref:System.Windows.FrameworkElement.DataContext%2A> and <xref:System.Windows.Data.BindingGroup> from its parent <xref:System.Windows.Controls.StackPanel>  \n  \n The binding on the second <xref:System.Windows.Controls.TextBox> is part of the <xref:System.Windows.Data.BindingGroup> because the <xref:System.Windows.Data.BindingGroup.Name%2A> of the <xref:System.Windows.Data.BindingGroup> and the BindingGroupName of the <xref:System.Windows.Data.Binding> are both set to `bindingGroup`.  \n  \n [!code-xml[BindingGroupSnippets#BindingGroupName](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#bindinggroupname)]  \n[!code-xml[BindingGroupSnippets#ValidationAdornerSite](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#validationadornersite)]  \n  \n The following example shows the <xref:System.Windows.Controls.ValidationRule> that the previous example uses.  In the <xref:System.Windows.Controls.ValidationRule.Validate%2A> method, the example gets each source object from the <xref:System.Windows.Data.BindingGroup> and checks whether the properties of the objects are equal.  \n  \n [!code-cs[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/csharp/BindingGroupSnippets/Window3.xaml.cs#bindinggroupnamevalidationrule)]\n [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/add/codesnippet/visualbasic/bindinggroupsnippets/window3.xaml.vb#bindinggroupnamevalidationrule)]"
  syntax:
    content: public string BindingGroupName { get; set; }
    return:
      type: System.String
      description: "名称<xref href=&quot;System.Windows.Data.BindingGroup&quot;></xref>此绑定的所属。"
  overload: System.Windows.Data.BindingBase.BindingGroupName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingBase.Delay
  id: Delay
  parent: System.Windows.Data.BindingBase
  langs:
  - csharp
  name: Delay
  nameWithType: BindingBase.Delay
  fullName: System.Windows.Data.BindingBase.Delay
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置的时间，以毫秒为单位的值的目标更改之后更新绑定源前等待。"
  remarks: "当你使用绑定更新绑定源属性的值在目标上发生更改时，您设置<xref:System.Windows.Data.Binding.Mode%2A>属性<xref:System.Windows.Data.BindingMode>和<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>到<xref:System.Windows.Data.UpdateSourceTrigger>。</xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.Binding.Mode%2A>  在此情况下，你可以使用延迟属性来指定是否应之间更改了目标时，在更新源时的时间延迟。  当你想要使用户能够更改源对象的属性，但你不希望每次更改会立即提交到源时，这非常有用。  例如，假设你有一个被数据双向绑定到数据对象的属性的文本框。  当用户更改的值的文本框中时，源获取更新。  若要启用这种情况下，你设置<xref:System.Windows.Data.Binding.Mode%2A>属性名添加<xref:System.Windows.Data.Binding>到<xref:System.Windows.Data.BindingMode>和<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>到<xref:System.Windows.Data.UpdateSourceTrigger>。</xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding.Mode%2A>  若要避免每次按键使用更新的源对象，设置为合理的值导致要更新仅在用户停止键入经过这段时间后的绑定的延迟属性。"
  syntax:
    content: public int Delay { get; set; }
    return:
      type: System.Int32
      description: "时间 （毫秒），更新绑定源之前要等待的量。"
  overload: System.Windows.Data.BindingBase.Delay*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingBase.FallbackValue
  id: FallbackValue
  parent: System.Windows.Data.BindingBase
  langs:
  - csharp
  name: FallbackValue
  nameWithType: BindingBase.FallbackValue
  fullName: System.Windows.Data.BindingBase.FallbackValue
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置要使用的绑定时找不返回值的值。"
  remarks: "绑定返回一个值成功如果︰ 1。  已成功解析到绑定源的路径。      2.  值转换器，如果有的话，就能够将转换生成的值。      3.  生成的值是有效的绑定目标 （目标） 属性。       如果 1 和 2 返回<xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>，如果有的话，目标属性设置为传输的值。</xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName> 如果没有传输，使用的目标属性的默认值。       值<xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>不被视为成功的返回值。</xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>      <a name=&quot;xamlTextUsage_FallbackValue&quot;></a># # XAML 文本用法```   <object FallbackValue=&quot;fallbackValue&quot; />   ``` **-** ```   <object>     <object.FallbackValue>       fallbackValue       </object.FallbackValue>   </object>   ``` <a name=&quot;xamlValues_FallbackValue&quot;> </a> # # XAML 值*传输*目标属性具有相同类型的属性或对象元素值。                    请参阅 XAML 用法的信息的该类型的文档。 该类型可能或可能不支持属性语法为它的值，或可能或可能不支持对象元素语法 （它需要对该类型的默认构造函数）。 因此，目标属性类型将影响用于传输属性的值的语法。"
  syntax:
    content: public object FallbackValue { get; set; }
    return:
      type: System.Object
      description: "默认值是<xref href=&quot;System.Windows.DependencyProperty.UnsetValue&quot;> </xref>。"
  overload: System.Windows.Data.BindingBase.FallbackValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  id: ProvideValue(System.IServiceProvider)
  parent: System.Windows.Data.BindingBase
  langs:
  - csharp
  name: ProvideValue(IServiceProvider)
  nameWithType: BindingBase.ProvideValue(IServiceProvider)
  fullName: System.Windows.Data.BindingBase.ProvideValue(IServiceProvider)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "返回一个应在应用了此绑定和扩展的属性设置的对象。"
  remarks: "这种实现提供通过绑定的基本语法支持[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]为所有提供的实际的派生的类 (<xref:System.Windows.Data.Binding>， <xref:System.Windows.Data.PriorityBinding>，和<xref:System.Windows.Data.MultiBinding>)。</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.PriorityBinding> </xref:System.Windows.Data.Binding>       <xref:System.Windows.Data.BindingBase>类实现此方法应返回一个表达式对象，它的绑定结果。</xref:System.Windows.Data.BindingBase> 通过给定<xref:System.Windows.DependencyProperty>的时间为给定的<xref:System.Windows.DependencyObject>。</xref:System.Windows.DependencyObject></xref:System.Windows.DependencyProperty>以目标绑定属性配合使用 这两个部分信息传输的查询<xref:System.Windows.Markup.IProvideValueTarget>上的实现`serviceProvider`，后者[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)][!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]读取器使可绑定的分析过程。</xref:System.Windows.Markup.IProvideValueTarget> 此基类实现负责检查输入有效的<xref:System.Windows.DependencyProperty>和<xref:System.Windows.DependencyObject>。</xref:System.Windows.DependencyObject> </xref:System.Windows.DependencyProperty> 如果找到这些，返回绑定表达式的实际实现将位于到各种派生类中，具有基类调用内部的抽象方法的实施方式。 否则，该扩展返回的绑定对象本身。 返回绑定本身会导致类型不匹配错误，但这不应在正常情况下发生。      1> [!IMPORTANT]&1;> 由于通过绑定的语法[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]在中实现此方法依赖于实现内部重写，以及 ProvideValue 本身密封的因为自定义绑定类派生自<xref:System.Windows.Data.BindingBase>将不正常作为[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]标记扩展。</xref:System.Windows.Data.BindingBase>"
  syntax:
    content: public override sealed object ProvideValue (IServiceProvider serviceProvider);
    parameters:
    - id: serviceProvider
      type: System.IServiceProvider
      description: "可为标记扩展提供服务的对象。 可能是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; 请参阅备注部分以了解更多信息。"
    return:
      type: System.Object
      description: "要在绑定目标属性上设置的值。"
  overload: System.Windows.Data.BindingBase.ProvideValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  id: ShouldSerializeFallbackValue
  parent: System.Windows.Data.BindingBase
  langs:
  - csharp
  name: ShouldSerializeFallbackValue()
  nameWithType: BindingBase.ShouldSerializeFallbackValue()
  fullName: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "返回一个值，该值指示序列化进程是否应序列化<xref:System.Windows.Data.BindingBase.FallbackValue*>此类的实例上的属性</xref:System.Windows.Data.BindingBase.FallbackValue*>的有效值"
  syntax:
    content: public bool ShouldSerializeFallbackValue ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Data.BindingBase.FallbackValue*>属性值应序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Data.BindingBase.FallbackValue*>"
  overload: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  id: ShouldSerializeTargetNullValue
  parent: System.Windows.Data.BindingBase
  langs:
  - csharp
  name: ShouldSerializeTargetNullValue()
  nameWithType: BindingBase.ShouldSerializeTargetNullValue()
  fullName: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "返回一个值，该值指示是否<xref:System.Windows.Data.BindingBase.TargetNullValue*>应序列化属性。</xref:System.Windows.Data.BindingBase.TargetNullValue*>"
  syntax:
    content: public bool ShouldSerializeTargetNullValue ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Data.BindingBase.TargetNullValue*>属性应为序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Data.BindingBase.TargetNullValue*>"
  overload: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingBase.StringFormat
  id: StringFormat
  parent: System.Windows.Data.BindingBase
  langs:
  - csharp
  name: StringFormat
  nameWithType: BindingBase.StringFormat
  fullName: System.Windows.Data.BindingBase.StringFormat
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个字符串，指定如何设置绑定的格式，如果它显示为字符串绑定的值。"
  remarks: "StringFormat 可以是预定义、 撰写的或自定义字符串格式。 有关字符串格式的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。       如果你设置<xref:System.Windows.Data.Binding.Converter%2A>和 StringFormat 属性，该转换器首先，适用于数据值，然后应用 StringFormat。</xref:System.Windows.Data.Binding.Converter%2A>       当上设置 StringFormat<xref:System.Windows.Data.Binding>为复合字符串格式，你可以指定只有一个参数。</xref:System.Windows.Data.Binding>       当你使用的<xref:System.Windows.Data.MultiBinding>、 StringFormat 属性适用仅当其设置<xref:System.Windows.Data.MultiBinding>。</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.MultiBinding>  StringFormat 任何子级设置的值<xref:System.Windows.Data.Binding>忽略的对象。</xref:System.Windows.Data.Binding>  复合字符串格式中的参数数目不能超过子<xref:System.Windows.Data.Binding><xref:System.Windows.Data.MultiBinding>.</xref:System.Windows.Data.MultiBinding>中的对象</xref:System.Windows.Data.Binding>的数目       当你使用<xref:System.Windows.Data.PriorityBinding>，您可以对设置 StringFormat <xref:System.Windows.Data.PriorityBinding>、 对子绑定对象，或者这两者。</xref:System.Windows.Data.PriorityBinding> </xref:System.Windows.Data.PriorityBinding>  如果 StringFormat 上应用的子绑定设置，则使用该值。  如果 StringFormat 未设置子级上绑定，则应用的 StringFormat<xref:System.Windows.Data.PriorityBinding>如果它被设置，则应用。</xref:System.Windows.Data.PriorityBinding>"
  example:
  - "The following example uses the StringFormat property to convert `Price`, which is a <xref:System.Double>, to a string that represents a currency.  \n  \n [!code-xml[ContentStringSnippets#Binding](~/add/codesnippet/xaml/ContentStringSnippets/Window1.xaml#binding)]  \n  \n The following example uses the StringFormat property on a <xref:System.Windows.Data.MultiBinding> to build a string that includes the `Description` and `Price` of each item in a <xref:System.Windows.Controls.ListBox>.  \n  \n [!code-xml[ContentStringSnippets#MultiBinding](~/add/codesnippet/xaml/ContentStringSnippets/Window1.xaml#multibinding)]"
  syntax:
    content: public string StringFormat { get; set; }
    return:
      type: System.String
      description: "一个字符串，指定如何设置绑定的格式，如果它显示为字符串绑定的值。"
  overload: System.Windows.Data.BindingBase.StringFormat*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.BindingBase.TargetNullValue
  id: TargetNullValue
  parent: System.Windows.Data.BindingBase
  langs:
  - csharp
  name: TargetNullValue
  nameWithType: BindingBase.TargetNullValue
  fullName: System.Windows.Data.BindingBase.TargetNullValue
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置目标中使用的值，当源的值为时<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  remarks: "<a name=&quot;xamlTextUsage_TargetNullValue&quot;></a># # XAML 文本用法```   <object TargetNullValue=&quot;nullValue&quot; />   ``` **-** ```   <object>     <object.TargetNullValue>       nullValue       </object.TargetNullValue>   </object>   ``` <a name=&quot;xamlValues_TargetNullValue&quot;> </a> # # XAML 值*nullValue*目标属性具有相同类型的属性或对象元素值。                    请参阅 XAML 用法的信息的该类型的文档。 该类型可能或可能不支持属性语法为它的值，或可能或可能不支持对象元素语法 （它需要对该类型的默认构造函数）。"
  example:
  - "The following example binds a <xref:System.Windows.Controls.TextBox> to a property of an object.  If the property is `null`, the <xref:System.Windows.Controls.TextBox> displays \"please enter a string.\"  \n  \n [!code-xml[BindingGroupSnippets#TargetNullValue](~/add/codesnippet/xaml/BindingGroupSnippets/Window3.xaml#targetnullvalue)]"
  syntax:
    content: public object TargetNullValue { get; set; }
    return:
      type: System.Object
      description: "源的值时，在目标中使用的值<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.BindingBase.TargetNullValue*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Markup.MarkupExtension
  isExternal: false
  name: System.Windows.Markup.MarkupExtension
- uid: System.Windows.Data.BindingBase.BindingGroupName
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: BindingGroupName
  nameWithType: BindingBase.BindingGroupName
  fullName: System.Windows.Data.BindingBase.BindingGroupName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Data.BindingBase.Delay
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: Delay
  nameWithType: BindingBase.Delay
  fullName: System.Windows.Data.BindingBase.Delay
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Data.BindingBase.FallbackValue
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: FallbackValue
  nameWithType: BindingBase.FallbackValue
  fullName: System.Windows.Data.BindingBase.FallbackValue
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: ProvideValue(IServiceProvider)
  nameWithType: BindingBase.ProvideValue(IServiceProvider)
  fullName: System.Windows.Data.BindingBase.ProvideValue(IServiceProvider)
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: ShouldSerializeFallbackValue()
  nameWithType: BindingBase.ShouldSerializeFallbackValue()
  fullName: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: ShouldSerializeTargetNullValue()
  nameWithType: BindingBase.ShouldSerializeTargetNullValue()
  fullName: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue()
- uid: System.Windows.Data.BindingBase.StringFormat
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: StringFormat
  nameWithType: BindingBase.StringFormat
  fullName: System.Windows.Data.BindingBase.StringFormat
- uid: System.Windows.Data.BindingBase.TargetNullValue
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: TargetNullValue
  nameWithType: BindingBase.TargetNullValue
  fullName: System.Windows.Data.BindingBase.TargetNullValue
- uid: System.Windows.Data.BindingBase.BindingGroupName*
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: BindingGroupName
  nameWithType: BindingBase.BindingGroupName
- uid: System.Windows.Data.BindingBase.Delay*
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: Delay
  nameWithType: BindingBase.Delay
- uid: System.Windows.Data.BindingBase.FallbackValue*
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: FallbackValue
  nameWithType: BindingBase.FallbackValue
- uid: System.Windows.Data.BindingBase.ProvideValue*
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: ProvideValue
  nameWithType: BindingBase.ProvideValue
- uid: System.Windows.Data.BindingBase.ShouldSerializeFallbackValue*
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: ShouldSerializeFallbackValue
  nameWithType: BindingBase.ShouldSerializeFallbackValue
- uid: System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue*
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: ShouldSerializeTargetNullValue
  nameWithType: BindingBase.ShouldSerializeTargetNullValue
- uid: System.Windows.Data.BindingBase.StringFormat*
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: StringFormat
  nameWithType: BindingBase.StringFormat
- uid: System.Windows.Data.BindingBase.TargetNullValue*
  parent: System.Windows.Data.BindingBase
  isExternal: false
  name: TargetNullValue
  nameWithType: BindingBase.TargetNullValue
