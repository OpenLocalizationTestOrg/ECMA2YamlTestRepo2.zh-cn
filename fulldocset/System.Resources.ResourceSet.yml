### YamlMime:ManagedReference
items:
- uid: System.Resources.ResourceSet
  id: ResourceSet
  children:
  - System.Resources.ResourceSet.#ctor
  - System.Resources.ResourceSet.#ctor(System.IO.Stream)
  - System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)
  - System.Resources.ResourceSet.#ctor(System.String)
  - System.Resources.ResourceSet.Close
  - System.Resources.ResourceSet.Dispose
  - System.Resources.ResourceSet.Dispose(System.Boolean)
  - System.Resources.ResourceSet.GetDefaultReader
  - System.Resources.ResourceSet.GetDefaultWriter
  - System.Resources.ResourceSet.GetEnumerator
  - System.Resources.ResourceSet.GetObject(System.String)
  - System.Resources.ResourceSet.GetObject(System.String,System.Boolean)
  - System.Resources.ResourceSet.GetString(System.String)
  - System.Resources.ResourceSet.GetString(System.String,System.Boolean)
  - System.Resources.ResourceSet.Reader
  - System.Resources.ResourceSet.ReadResources
  - System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator
  - System.Resources.ResourceSet.Table
  langs:
  - csharp
  name: ResourceSet
  nameWithType: ResourceSet
  fullName: System.Resources.ResourceSet
  type: Class
  summary: "存储有关某个特定区域性，忽略所有其他区域性，包括任何代用规则已本地化的所有资源。       **安全说明**︰ 在此类的不受信任的数据中调用方法会带来安全风险。 仅使用受信任的数据类中调用的方法。 有关详细信息，请参阅[不受信任的数据安全风险](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks)。"
  remarks: "ResourceSet 类枚举<xref:System.Resources.IResourceReader>，加载每个名称和值，并将它们存储在一种<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable> </xref:System.Resources.IResourceReader> 自定义<xref:System.Resources.IResourceReader>可用。</xref:System.Resources.IResourceReader>       可以通过调用表示特定区域性的资源的 ResourceSet 对象实例化<xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName>方法。</xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=fullName>      1> [!IMPORTANT]&1;> 此类型实现<xref:System.IDisposable>接口。</xref:System.IDisposable> 完成后使用类型的操作后，你应释放类型直接或间接。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</xref:System.IDisposable.Dispose%2A> 若要间接释放类型，使用一种语言构造如`using`（在 C# 中) 或`Using`（在 Visual Basic 中)。 有关详细信息，请参阅中的&quot;使用实现 IDisposable 的对象&quot;部分<xref:System.IDisposable>接口主题。</xref:System.IDisposable>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ResourceSet : IDisposable, System.Collections.IEnumerable
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerable
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.#ctor
  id: '#ctor'
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ResourceSet()
  nameWithType: ResourceSet.ResourceSet()
  fullName: System.Resources.ResourceSet.ResourceSet()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "初始化的新实例<xref href=&quot;System.Resources.ResourceSet&quot;></xref>使用默认属性的类。"
  syntax:
    content: protected ResourceSet ();
    parameters: []
  overload: System.Resources.ResourceSet.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ResourceSet(Stream)
  nameWithType: ResourceSet.ResourceSet(Stream)
  fullName: System.Resources.ResourceSet.ResourceSet(Stream)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "创建的新实例<xref href=&quot;System.Resources.ResourceSet&quot;></xref>类使用的系统默认<xref href=&quot;System.Resources.ResourceReader&quot;></xref>从给定流中读取资源。"
  syntax:
    content: public ResourceSet (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>要读取的资源。</xref:System.IO.Stream> 流应引用现有的资源文件。"
  overload: System.Resources.ResourceSet.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> stream </code>不可读。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>stream</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)
  id: '#ctor(System.Resources.IResourceReader)'
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ResourceSet(IResourceReader)
  nameWithType: ResourceSet.ResourceSet(IResourceReader)
  fullName: System.Resources.ResourceSet.ResourceSet(IResourceReader)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "创建的新实例<xref href=&quot;System.Resources.ResourceSet&quot;></xref>类使用指定的资源的读取器。"
  remarks: "你可以使用此构造函数来支持自定义资源格式使用一用户提供<xref:System.Resources.IResourceReader>。</xref:System.Resources.IResourceReader>"
  syntax:
    content: public ResourceSet (System.Resources.IResourceReader reader);
    parameters:
    - id: reader
      type: System.Resources.IResourceReader
      description: "将使用读取器。"
  overload: System.Resources.ResourceSet.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>reader</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Resources.ResourceSet.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ResourceSet(String)
  nameWithType: ResourceSet.ResourceSet(String)
  fullName: System.Resources.ResourceSet.ResourceSet(String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "创建的新实例<xref href=&quot;System.Resources.ResourceSet&quot;></xref>类使用的系统默认<xref href=&quot;System.Resources.ResourceReader&quot;></xref>打开并读取从给定的文件的资源。"
  remarks: ''
  example:
  - "The following code example defines a new instance of the <xref:System.Resources.ResourceSet> class for a specific file, iterates through the resources used by that file, and displays their contents to the console.  \n  \n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_2_1.cpp)]\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_2_1.cs)]\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_2_1.vb)]"
  syntax:
    content: public ResourceSet (string fileName);
    parameters:
    - id: fileName
      type: System.String
      description: "要读取的资源文件。"
  overload: System.Resources.ResourceSet.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>fileName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Resources.ResourceSet.Close
  id: Close
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Close()
  nameWithType: ResourceSet.Close()
  fullName: System.Resources.ResourceSet.Close()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "关闭并释放使用的任何资源<xref href=&quot;System.Resources.ResourceSet&quot;> </xref>。"
  remarks: "对方法的所有调用<xref:System.Resources.ResourceSet>后对此方法的调用可能会失败。</xref:System.Resources.ResourceSet>       关闭可以安全地调用多次。      1> [!NOTE]&1;> 关闭调用的当前实现<xref:System.Resources.ResourceSet.Dispose%2A>(`true`)。</xref:System.Resources.ResourceSet.Dispose%2A>"
  example:
  - "The following code example uses the Close method to release all resources used by the calling <xref:System.Resources.ResourceSet> instance.  \n  \n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_15_1.cpp)]\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_15_1.cs)]\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_15_1.vb)]"
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Resources.ResourceSet.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.Dispose
  id: Dispose
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Dispose()
  nameWithType: ResourceSet.Dispose()
  fullName: System.Resources.ResourceSet.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "释放当前实例所使用的资源 （内存除外） <xref href=&quot;System.Resources.ResourceSet&quot;> </xref>。"
  remarks: "调用<xref:System.Resources.ResourceSet.Dispose%2A>在完成使用<xref:System.Resources.ResourceSet>.</xref:System.Resources.ResourceSet>时</xref:System.Resources.ResourceSet.Dispose%2A> <xref:System.Resources.ResourceSet.Dispose%2A>方法使<xref:System.Resources.ResourceSet>中不可用状态。</xref:System.Resources.ResourceSet> </xref:System.Resources.ResourceSet.Dispose%2A> 在调用<xref:System.Resources.ResourceSet.Dispose%2A>，必须释放对所有引用<xref:System.Resources.ResourceSet>以便可以通过垃圾回收回收其占用的内存。</xref:System.Resources.ResourceSet> </xref:System.Resources.ResourceSet.Dispose%2A>      1> [!NOTE]&1;> 当前方法是<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>的实现 此实现中调用<xref:System.Resources.ResourceSet.Dispose%2A>(`true`)。</xref:System.Resources.ResourceSet.Dispose%2A>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Resources.ResourceSet.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ResourceSet.Dispose(Boolean)
  fullName: System.Resources.ResourceSet.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "释放资源 （内存除外） 与当前实例，如果请求关闭内部托管的对象相关联。"
  remarks: "如果`dispose`参数是`true`，当前方法释放关联与它以及与之关联的所有对象的所有资源。 如果`dispose`是`false`，当前方法只释放资源分配给它，并忽略与之关联的任何对象。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "指示是否应显式关闭当前实例中包含的对象。"
  overload: System.Resources.ResourceSet.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetDefaultReader
  id: GetDefaultReader
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetDefaultReader()
  nameWithType: ResourceSet.GetDefaultReader()
  fullName: System.Resources.ResourceSet.GetDefaultReader()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "返回的首选的资源读取器类这类<xref href=&quot;System.Resources.ResourceSet&quot;> </xref>。"
  syntax:
    content: public virtual Type GetDefaultReader ();
    parameters: []
    return:
      type: System.Type
      description: "返回<xref:System.Type>有关这种类型的首选的资源阅读器的<xref href=&quot;System.Resources.ResourceSet&quot;> </xref>。</xref:System.Type>"
  overload: System.Resources.ResourceSet.GetDefaultReader*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetDefaultWriter
  id: GetDefaultWriter
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetDefaultWriter()
  nameWithType: ResourceSet.GetDefaultWriter()
  fullName: System.Resources.ResourceSet.GetDefaultWriter()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "返回的首选的资源编写器类这类<xref href=&quot;System.Resources.ResourceSet&quot;> </xref>。"
  syntax:
    content: public virtual Type GetDefaultWriter ();
    parameters: []
    return:
      type: System.Type
      description: "返回<xref:System.Type>有关这种类型的首选的资源编写器的<xref href=&quot;System.Resources.ResourceSet&quot;> </xref>。</xref:System.Type>"
  overload: System.Resources.ResourceSet.GetDefaultWriter*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetEnumerator
  id: GetEnumerator
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: ResourceSet.GetEnumerator()
  fullName: System.Resources.ResourceSet.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "返回<xref:System.Collections.IDictionaryEnumerator>可以循环访问<xref href=&quot;System.Resources.ResourceSet&quot;> </xref>。</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "枚举器只允许读取集合中的数据。 枚举器不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A> 在此位置，调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       该枚举数传递到集合的末尾之后，将放在集合中，最后一个元素后面且调用<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果更改到集合，如添加、 修改或删除元素，则枚举数将失效且不可恢复，并且下次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>将返回到，设置的元素，即使枚举数已经无效。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       你可以使用<xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName>属性来访问存储在当前元素的值。</xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=fullName> 使用<xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName>属性来访问当前元素的键。</xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=fullName> 使用<xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>属性来访问当前元素的值。</xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=fullName>       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following example demonstrates how to create a <xref:System.Resources.ResourceSet>`rs` for the file `items.resources`. Next, the GetEnumerator method is used to create an <xref:System.Collections.IDictionaryEnumerator> for `rs`. The <xref:System.Collections.IDictionaryEnumerator> iterates through `rs` and displays the contents to the console.  \n  \n [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/cpp/m-system.resources.resou_5_1.cpp)]\n [!code-cs[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/csharp/m-system.resources.resou_5_1.cs)]\n [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/add/codesnippet/visualbasic/m-system.resources.resou_5_1.vb)]"
  syntax:
    content: public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for this <xref href=&quot;System.Resources.ResourceSet&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Resources.ResourceSet.GetEnumerator*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已关闭或释放对资源集。"
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetObject(System.String)
  id: GetObject(System.String)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetObject(String)
  nameWithType: ResourceSet.GetObject(String)
  fullName: System.Resources.ResourceSet.GetObject(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "搜索具有指定名称的资源对象。"
  remarks: "资源对象的名称是区分大小写。 对于不区分大小写的搜索，使用<xref:System.Resources.ResourceSet.GetObject%2A>.</xref:System.Resources.ResourceSet.GetObject%2A>"
  syntax:
    content: public virtual object GetObject (string name);
    parameters:
    - id: name
      type: System.String
      description: "要搜索的资源的区分大小写名称。"
    return:
      type: System.Object
      description: "请求的资源。"
  overload: System.Resources.ResourceSet.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已关闭或释放该对象。"
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetObject(System.String,System.Boolean)
  id: GetObject(System.String,System.Boolean)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetObject(String,Boolean)
  nameWithType: ResourceSet.GetObject(String,Boolean)
  fullName: System.Resources.ResourceSet.GetObject(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "搜索具有指定名称的资源对象的方式不区分大小写，如果请求。"
  remarks: "如果值`ignoreCase`参数是`true`，具有名称&quot;资源&quot;的资源相当于具有名称&quot;资源&quot;的资源。 但请注意，此方法始终执行不区分大小写的字符串比较使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> 优点是，此方法执行不区分大小写的字符串比较的结果是无论区域性的所有计算机上相同。 其缺点在于结果不一致的所有区域性的大小写规则。       例如，在土耳其语字母表具有字符 i︰ 一个带有圆点的两个版本，另一个不带点。 在土耳其语字符我 (Unicode 0049) 被视为不同的字符 ı (Unicode 0131) 的大写版本。 I (Unicode 0069) 的字符被视为另一种字符 İ (Unicode 0130) 的小写形式。 根据这些大小写规则，不区分大小写的字符串比较的字符 i (Unicode 0069) 和我 (Unicode 0049) 应失败区域性&quot;TR-TR&quot;（土耳其中的土耳其语）。 使用`GetObject`方法替换`ignoreCase`设置为`true`，这种比较成功。"
  syntax:
    content: public virtual object GetObject (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: "要搜索的资源的名称。"
    - id: ignoreCase
      type: System.Boolean
      description: "指示是否应忽略指定名称的大小写。"
    return:
      type: System.Object
      description: "请求的资源。"
  overload: System.Resources.ResourceSet.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已关闭或释放该对象。"
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetString(System.String)
  id: GetString(System.String)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetString(String)
  nameWithType: ResourceSet.GetString(String)
  fullName: System.Resources.ResourceSet.GetString(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "搜索<xref:System.String>具有指定名称的资源。</xref:System.String>"
  syntax:
    content: public virtual string GetString (string name);
    parameters:
    - id: name
      type: System.String
      description: "要搜索的资源的名称。"
    return:
      type: System.String
      description: "资源，如果值是一种<xref:System.String>。</xref:System.String>的值"
  overload: System.Resources.ResourceSet.GetString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的资源<code> name </code>不是一种<xref:System.String>。</xref:System.String>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已关闭或释放该对象。"
  platform:
  - net462
- uid: System.Resources.ResourceSet.GetString(System.String,System.Boolean)
  id: GetString(System.String,System.Boolean)
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: GetString(String,Boolean)
  nameWithType: ResourceSet.GetString(String,Boolean)
  fullName: System.Resources.ResourceSet.GetString(String,Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "搜索<xref:System.String>具有指定名称的方式不区分大小写，如果请求的资源。</xref:System.String>"
  remarks: "如果值`ignoreCase`参数是`true`，具有名称&quot;资源&quot;的资源相当于具有名称&quot;资源&quot;的资源。 但请注意，此方法始终执行不区分大小写的字符串比较使用<xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName>.</xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=fullName> 优点是，此方法执行不区分大小写的字符串比较的结果是无论区域性的所有计算机上相同。 其缺点在于结果不一致的所有区域性的大小写规则。       例如，在土耳其语字母表具有字符 i︰ 一个带有圆点的两个版本，另一个不带点。 在土耳其语字符我 (Unicode 0049) 被视为不同的字符 ı (Unicode 0131) 的大写版本。 I (Unicode 0069) 的字符被视为另一种字符 İ (Unicode 0130) 的小写形式。 根据这些大小写规则，不区分大小写的字符串比较的字符 i (Unicode 0069) 和我 (Unicode 0049) 应失败区域性&quot;TR-TR&quot;（土耳其中的土耳其语）。 使用`GetString`方法替换`ignoreCase`设置为`true`，这种比较成功。"
  syntax:
    content: public virtual string GetString (string name, bool ignoreCase);
    parameters:
    - id: name
      type: System.String
      description: "要搜索的资源的名称。"
    - id: ignoreCase
      type: System.Boolean
      description: "指示是否应忽略指定名称的大小写的大小写。"
    return:
      type: System.String
      description: "资源，如果值是一种<xref:System.String>。</xref:System.String>的值"
  overload: System.Resources.ResourceSet.GetString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>name</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "指定的资源<code> name </code>不是一种<xref:System.String>。</xref:System.String>"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已关闭或释放该对象。"
  platform:
  - net462
- uid: System.Resources.ResourceSet.Reader
  id: Reader
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Reader
  nameWithType: ResourceSet.Reader
  fullName: System.Resources.ResourceSet.Reader
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "指示<xref href=&quot;System.Resources.IResourceReader&quot;></xref>用于读取资源。"
  syntax:
    content: protected System.Resources.IResourceReader Reader;
    return:
      type: System.Resources.IResourceReader
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.ReadResources
  id: ReadResources
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: ReadResources()
  nameWithType: ResourceSet.ReadResources()
  fullName: System.Resources.ResourceSet.ReadResources()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "读取所有资源，并将它们存储在<xref href=&quot;System.Collections.Hashtable&quot;></xref>中所示<xref href=&quot;System.Resources.ResourceSet.Table&quot;></xref>属性。"
  syntax:
    content: protected virtual void ReadResources ();
    parameters: []
  overload: System.Resources.ResourceSet.ReadResources*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResourceSet.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "返回<xref:System.Collections.IEnumerator>对象以避免争用情况与<xref uid=&quot;langword_csharp_Dispose&quot; name=&quot;Dispose&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IEnumerator> 此成员不应在代码中直接使用。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "当前的枚举数<xref href=&quot;System.Resources.ResourceSet&quot;></xref>对象。"
  overload: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Resources.ResourceSet.Table
  id: Table
  parent: System.Resources.ResourceSet
  langs:
  - csharp
  name: Table
  nameWithType: ResourceSet.Table
  fullName: System.Resources.ResourceSet.Table
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Resources
  summary: "<xref href=&quot;System.Collections.Hashtable&quot;> </xref>中的资源存储。"
  syntax:
    content: protected System.Collections.Hashtable Table;
    return:
      type: System.Collections.Hashtable
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Resources.ResourceSet.#ctor
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet()
  nameWithType: ResourceSet.ResourceSet()
  fullName: System.Resources.ResourceSet.ResourceSet()
- uid: System.Resources.ResourceSet.#ctor(System.IO.Stream)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet(Stream)
  nameWithType: ResourceSet.ResourceSet(Stream)
  fullName: System.Resources.ResourceSet.ResourceSet(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet(IResourceReader)
  nameWithType: ResourceSet.ResourceSet(IResourceReader)
  fullName: System.Resources.ResourceSet.ResourceSet(IResourceReader)
- uid: System.Resources.IResourceReader
  parent: System.Resources
  isExternal: false
  name: IResourceReader
  nameWithType: IResourceReader
  fullName: System.Resources.IResourceReader
- uid: System.Resources.ResourceSet.#ctor(System.String)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet(String)
  nameWithType: ResourceSet.ResourceSet(String)
  fullName: System.Resources.ResourceSet.ResourceSet(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Resources.ResourceSet.Close
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Close()
  nameWithType: ResourceSet.Close()
  fullName: System.Resources.ResourceSet.Close()
- uid: System.Resources.ResourceSet.Dispose
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Dispose()
  nameWithType: ResourceSet.Dispose()
  fullName: System.Resources.ResourceSet.Dispose()
- uid: System.Resources.ResourceSet.Dispose(System.Boolean)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ResourceSet.Dispose(Boolean)
  fullName: System.Resources.ResourceSet.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Resources.ResourceSet.GetDefaultReader
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetDefaultReader()
  nameWithType: ResourceSet.GetDefaultReader()
  fullName: System.Resources.ResourceSet.GetDefaultReader()
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Resources.ResourceSet.GetDefaultWriter
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetDefaultWriter()
  nameWithType: ResourceSet.GetDefaultWriter()
  fullName: System.Resources.ResourceSet.GetDefaultWriter()
- uid: System.Resources.ResourceSet.GetEnumerator
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetEnumerator()
  nameWithType: ResourceSet.GetEnumerator()
  fullName: System.Resources.ResourceSet.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Resources.ResourceSet.GetObject(System.String)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetObject(String)
  nameWithType: ResourceSet.GetObject(String)
  fullName: System.Resources.ResourceSet.GetObject(String)
- uid: System.Resources.ResourceSet.GetObject(System.String,System.Boolean)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetObject(String,Boolean)
  nameWithType: ResourceSet.GetObject(String,Boolean)
  fullName: System.Resources.ResourceSet.GetObject(String,Boolean)
- uid: System.Resources.ResourceSet.GetString(System.String)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetString(String)
  nameWithType: ResourceSet.GetString(String)
  fullName: System.Resources.ResourceSet.GetString(String)
- uid: System.Resources.ResourceSet.GetString(System.String,System.Boolean)
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetString(String,Boolean)
  nameWithType: ResourceSet.GetString(String,Boolean)
  fullName: System.Resources.ResourceSet.GetString(String,Boolean)
- uid: System.Resources.ResourceSet.Reader
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Reader
  nameWithType: ResourceSet.Reader
  fullName: System.Resources.ResourceSet.Reader
- uid: System.Resources.ResourceSet.ReadResources
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ReadResources()
  nameWithType: ResourceSet.ReadResources()
  fullName: System.Resources.ResourceSet.ReadResources()
- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator
  parent: System.Resources.ResourceSet
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Resources.ResourceSet.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Resources.ResourceSet.Table
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Table
  nameWithType: ResourceSet.Table
  fullName: System.Resources.ResourceSet.Table
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Resources.ResourceSet.#ctor*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ResourceSet
  nameWithType: ResourceSet.ResourceSet
- uid: System.Resources.ResourceSet.Close*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Close
  nameWithType: ResourceSet.Close
- uid: System.Resources.ResourceSet.Dispose*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: Dispose
  nameWithType: ResourceSet.Dispose
- uid: System.Resources.ResourceSet.GetDefaultReader*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetDefaultReader
  nameWithType: ResourceSet.GetDefaultReader
- uid: System.Resources.ResourceSet.GetDefaultWriter*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetDefaultWriter
  nameWithType: ResourceSet.GetDefaultWriter
- uid: System.Resources.ResourceSet.GetEnumerator*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetEnumerator
  nameWithType: ResourceSet.GetEnumerator
- uid: System.Resources.ResourceSet.GetObject*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetObject
  nameWithType: ResourceSet.GetObject
- uid: System.Resources.ResourceSet.GetString*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: GetString
  nameWithType: ResourceSet.GetString
- uid: System.Resources.ResourceSet.ReadResources*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: ReadResources
  nameWithType: ResourceSet.ReadResources
- uid: System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Resources.ResourceSet
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: ResourceSet.System.Collections.IEnumerable.GetEnumerator
