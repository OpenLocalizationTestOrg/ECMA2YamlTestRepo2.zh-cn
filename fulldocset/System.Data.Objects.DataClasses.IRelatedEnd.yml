### YamlMime:ManagedReference
items:
- uid: System.Data.Objects.DataClasses.IRelatedEnd
  id: IRelatedEnd
  children:
  - System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)
  - System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)
  - System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery
  - System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator
  - System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
  - System.Data.Objects.DataClasses.IRelatedEnd.Load
  - System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)
  - System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
  - System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
  - System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  - System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)
  - System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
  - System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
  langs:
  - csharp
  name: IRelatedEnd
  nameWithType: IRelatedEnd
  fullName: System.Data.Objects.DataClasses.IRelatedEnd
  type: Interface
  summary: "定义关系的一端。"
  remarks: "IRelatedEnd 定义表示关联中的一端的对象的要求。 此接口实现的<xref:System.Data.Objects.DataClasses.RelatedEnd>类。</xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.RelatedEnd>是的基类<xref:System.Data.Objects.DataClasses.EntityCollection%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601>类。</xref:System.Data.Objects.DataClasses.EntityReference%601> </xref:System.Data.Objects.DataClasses.EntityCollection%601></xref:System.Data.Objects.DataClasses.RelatedEnd>"
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832), which was generated by the [Entity Data Model Wizard](http://msdn.microsoft.com/en-us/423ec9a7-5464-43b7-a7ef-9f5f000848b5).  \n  \n The following example adds new `SalesOrderHeader` entities to the `Contact` entity. Then it gets all related ends from the `Contact` entity and displays relationship name, source role name, and target role name for each related end.  \n  \n [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#irelatedend)]\n [!code-cs[DP ObjectServices Concepts#IRelatedEnd](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#irelatedend)]"
  syntax:
    content: public interface IRelatedEnd
  implements: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  id: Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Add(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Add(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Add(IEntityWithRelationships)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "将对象添加到相关端。"
  remarks: "<xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A>方法将对象添加到相关端。</xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> 相关的端必须是<xref:System.Data.Objects.DataClasses.EntityCollection%601>.</xref:System.Data.Objects.DataClasses.EntityCollection%601>       当源对象实现<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>和中跟踪<xref:System.Data.Objects.ObjectStateManager>，还跟踪所添加的对象。</xref:System.Data.Objects.ObjectStateManager> </xref:System.Data.Objects.DataClasses.IEntityWithRelationships>       <xref:System.Data.Objects.DataClasses.RelatedEnd>类显式实现<xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A>方法。</xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A> </xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>类使用此实现。</xref:System.Data.Objects.DataClasses.EntityCollection%601> 有关详细信息，请参阅<xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>。</xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>       如果相关的端<xref:System.Data.Objects.DataClasses.EntityReference%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A>该引用的属性不是`null`，此方法将引发异常。</xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> </xref:System.Data.Objects.DataClasses.EntityReference%601>"
  syntax:
    content: public void Add (System.Data.Objects.DataClasses.IEntityWithRelationships entity);
    parameters:
    - id: entity
      type: System.Data.Objects.DataClasses.IEntityWithRelationships
      description: "要添加到集合的对象。 `entity`必须实现<xref href=&quot;System.Data.Objects.DataClasses.IEntityWithRelationships&quot;> </xref>。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)
  id: Add(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Add(Object)
  nameWithType: IRelatedEnd.Add(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Add(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "将对象添加到相关端。"
  remarks: "对于未实现<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships>的实体类，使用此方法重载 使用<xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A>执行实现<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships>的实体类的方法</xref:System.Data.Objects.DataClasses.IRelatedEnd.Add%2A>       Add 方法将对象添加到相关端。 相关的端必须是<xref:System.Data.Objects.DataClasses.EntityCollection%601>.</xref:System.Data.Objects.DataClasses.EntityCollection%601>       <xref:System.Data.Objects.DataClasses.RelatedEnd>类显式实现的 Add 方法。</xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>类使用此实现。</xref:System.Data.Objects.DataClasses.EntityCollection%601> 有关详细信息，请参阅<xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>。</xref:System.Data.Objects.DataClasses.EntityCollection%601.Add%2A>       如果相关的端<xref:System.Data.Objects.DataClasses.EntityReference%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A>该引用的属性不是`null`，此方法将引发异常。</xref:System.Data.Objects.DataClasses.EntityReference%601.Value%2A> </xref:System.Data.Objects.DataClasses.EntityReference%601>"
  syntax:
    content: public void Add (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "要添加到集合的对象。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  id: Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Attach(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Attach(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Attach(IEntityWithRelationships)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "定义两个附加对象之间的关系。"
  remarks: "<xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>方法用于定义附加到相同的两个对象之间的关系<xref:System.Data.Objects.ObjectContext>实例。</xref:System.Data.Objects.ObjectContext> </xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>       <xref:System.Data.Objects.DataClasses.RelatedEnd>类显式实现<xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>方法。</xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A> </xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>类使用此实现定义附加的源对象和附加到集合的对象之间的关系。</xref:System.Data.Objects.DataClasses.EntityCollection%601> 有关详细信息，请参阅[附加和分离对象](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。"
  syntax:
    content: public void Attach (System.Data.Objects.DataClasses.IEntityWithRelationships entity);
    parameters:
    - id: entity
      type: System.Data.Objects.DataClasses.IEntityWithRelationships
      description: "要附加的对象。 `entity`必须实现<xref href=&quot;System.Data.Objects.DataClasses.IEntityWithRelationships&quot;> </xref>。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Attach*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)
  id: Attach(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Attach(Object)
  nameWithType: IRelatedEnd.Attach(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Attach(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "定义两个附加对象之间的关系。"
  remarks: "对于未实现<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships>的实体类，使用此方法重载 使用<xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>执行实现<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships>的实体类的方法</xref:System.Data.Objects.DataClasses.IRelatedEnd.Attach%2A>       Attach 方法用于定义附加到相同的两个对象之间的关系<xref:System.Data.Objects.ObjectContext>实例。</xref:System.Data.Objects.ObjectContext>       <xref:System.Data.Objects.DataClasses.RelatedEnd>类显式实现的附加方法。</xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>类使用此实现定义附加的源对象和附加到集合的对象之间的关系。</xref:System.Data.Objects.DataClasses.EntityCollection%601> 有关详细信息，请参阅[附加和分离对象](http://msdn.microsoft.com/en-us/41d5c1ef-1b78-4502-aa10-7e1438d62d23)。"
  syntax:
    content: public void Attach (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "要附加的对象。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Attach*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery
  id: CreateSourceQuery
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: CreateSourceQuery()
  nameWithType: IRelatedEnd.CreateSourceQuery()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "返回<xref:System.Collections.IEnumerable>，它表示属于相关端对象。</xref:System.Collections.IEnumerable>"
  remarks: "由<xref:System.Data.Objects.DataClasses.RelatedEnd>类</xref:System.Data.Objects.DataClasses.RelatedEnd>显式实现 CreateSourceQuery 方法  <xref:System.Data.Objects.DataClasses.EntityCollection%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601>类都重写<xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23CreateSourceQuery%2A>方法以返回<xref:System.Data.Objects.ObjectQuery%601>，它是在执行时，返回属于相关端的对象属于同一套。</xref:System.Data.Objects.ObjectQuery%601> </xref:System.Data.Objects.DataClasses.RelatedEnd.System%23Data%23Objects%23DataClasses%23IRelatedEnd%23CreateSourceQuery%2A> </xref:System.Data.Objects.DataClasses.EntityReference%601> </xref:System.Data.Objects.DataClasses.EntityCollection%601>"
  syntax:
    content: public System.Collections.IEnumerable CreateSourceQuery ();
    parameters: []
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>，它表示属于相关端对象。</xref:System.Collections.IEnumerable>"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator
  id: GetEnumerator
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: IRelatedEnd.GetEnumerator()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "返回<xref:System.Collections.IEnumerator>，它循环访问的相关对象的集合。</xref:System.Collections.IEnumerator>"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>，它循环访问的相关对象的集合。</xref:System.Collections.IEnumerator>"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
  id: IsLoaded
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: IsLoaded
  nameWithType: IRelatedEnd.IsLoaded
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "获取一个值，该值指示是否已加载所有相关的对象。"
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>类实现<xref:System.Data.Objects.DataClasses.IRelatedEnd>.</xref:System.Data.Objects.DataClasses.IRelatedEnd> IsLoaded 方法</xref:System.Data.Objects.DataClasses.RelatedEnd> 有关详细信息，请参阅<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>。</xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>       <xref:System.Data.Objects.DataClasses.EntityCollection%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601>从<xref:System.Data.Objects.DataClasses.RelatedEnd>.</xref:System.Data.Objects.DataClasses.RelatedEnd>继承类</xref:System.Data.Objects.DataClasses.EntityReference%601></xref:System.Data.Objects.DataClasses.EntityCollection%601>"
  example:
  - '[Defining and Managing Relationships](http://msdn.microsoft.com/en-us/2c92c097-56bd-4145-989e-16d92475ecda)'
  syntax:
    content: public bool IsLoaded { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果相关的端包含从数据库中; 的所有相关的实体否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load
  id: Load
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Load()
  nameWithType: IRelatedEnd.Load()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Load()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "到此相关端使用默认合并选项加载相关的对象。"
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>类实现<xref:System.Data.Objects.DataClasses.IRelatedEnd>.</xref:System.Data.Objects.DataClasses.IRelatedEnd>的 Load 方法</xref:System.Data.Objects.DataClasses.RelatedEnd> 有关详细信息，请参阅<xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>。</xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>       [加载](~/add/includes/ajax-current-ext-md.md)调用以从导航属性公开的相关端显式加载相关的对象。 有关详细信息，请参阅[加载相关对象](http://msdn.microsoft.com/en-us/452347d2-7b3b-44cd-9001-231299a28cb1)。       <xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>方法将加载相关的对象从数据源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。</xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A> </xref:System.Data.Objects.DataClasses.RelatedEnd.Load%2A>"
  syntax:
    content: public void Load ();
    parameters: []
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)
  id: Load(System.Data.Objects.MergeOption)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Load(MergeOption)
  nameWithType: IRelatedEnd.Load(MergeOption)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Load(MergeOption)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "到相关端使用指定的合并选项加载相关的对象。"
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>类实现负载方法。</xref:System.Data.Objects.DataClasses.RelatedEnd> 同时<xref:System.Data.Objects.DataClasses.EntityCollection%601>和<xref:System.Data.Objects.DataClasses.EntityReference%601>类重写此实现。</xref:System.Data.Objects.DataClasses.EntityReference%601> </xref:System.Data.Objects.DataClasses.EntityCollection%601>       `Load`调用以从相关端中的导航属性公开显式加载相关的对象。 有关详细信息，请参阅[加载相关对象](http://msdn.microsoft.com/en-us/452347d2-7b3b-44cd-9001-231299a28cb1)。       Load 方法将相关的对象加载从数据源是否<xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>是`true`。</xref:System.Data.Objects.DataClasses.RelatedEnd.IsLoaded%2A>"
  syntax:
    content: public void Load (System.Data.Objects.MergeOption mergeOption);
    parameters:
    - id: mergeOption
      type: System.Data.Objects.MergeOption
      description: "<xref href=&quot;System.Data.Objects.MergeOption&quot;> </xref>合并到现有对象时要使用&lt;xref:System.Data.Objects.DataClasses.EntityCollection%601&gt;。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Load*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
  id: RelationshipName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: RelationshipName
  nameWithType: IRelatedEnd.RelationshipName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "获取此相关的端所参与的关系的名称。"
  remarks: ''
  example:
  - "The example in this topic is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832), which was generated by the [Entity Data Model Wizard](http://msdn.microsoft.com/en-us/423ec9a7-5464-43b7-a7ef-9f5f000848b5).  \n  \n The following example adds new `SalesOrderHeader` entities to the `Contact` entity. Then it gets all related ends from the `Contact` entity and displays the relationship name, source role name, and target role name for each related end.  \n  \n [!code-vb[DP ObjectServices Concepts#IRelatedEnd](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#irelatedend)]\n [!code-cs[DP ObjectServices Concepts#IRelatedEnd](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#irelatedend)]"
  syntax:
    content: public string RelationshipName { get; }
    return:
      type: System.String
      description: "在此关系的名称<xref href=&quot;System.Data.Objects.DataClasses.IRelatedEnd&quot;></xref>是否正在参与。 关系名称不是命名空间限定。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
  id: RelationshipSet
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: RelationshipSet
  nameWithType: IRelatedEnd.RelationshipSet
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "返回到相关端的元数据的引用。"
  syntax:
    content: public System.Data.Metadata.Edm.RelationshipSet RelationshipSet { get; }
    return:
      type: System.Data.Metadata.Edm.RelationshipSet
      description: "A <xref href=&quot;System.Data.Metadata.Edm.RelationshipSet&quot;> </xref>包含关系一端的元数据的对象。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  id: Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Remove(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Remove(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Remove(IEntityWithRelationships)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "从相关端的对象集合中移除一个对象。"
  remarks: "<xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A>方法从相关端移除一个对象。</xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> 相关的端必须是<xref:System.Data.Objects.DataClasses.EntityCollection%601>.</xref:System.Data.Objects.DataClasses.EntityCollection%601>       <xref:System.Data.Objects.DataClasses.RelatedEnd>类显式实现<xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A>方法。</xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A> </xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>类使用此实现。</xref:System.Data.Objects.DataClasses.EntityCollection%601> 有关详细信息，请参阅<xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>。</xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>"
  syntax:
    content: public bool Remove (System.Data.Objects.DataClasses.IEntityWithRelationships entity);
    parameters:
    - id: entity
      type: System.Data.Objects.DataClasses.IEntityWithRelationships
      description: "要从集合中移除的对象。 `entity`必须实现<xref href=&quot;System.Data.Objects.DataClasses.IEntityWithRelationships&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>entity</code> was successfully removed, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if <code>entity</code> was not part of the <xref href=&quot;System.Data.Objects.DataClasses.IRelatedEnd&quot;></xref>."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: IRelatedEnd.Remove(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Remove(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "从相关端的对象集合中移除一个对象。"
  remarks: "对于未实现<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships>的实体类，使用此方法重载 使用<xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A>执行实现<xref:System.Data.Objects.DataClasses.IEntityWithRelationships>.</xref:System.Data.Objects.DataClasses.IEntityWithRelationships>的实体类的方法</xref:System.Data.Objects.DataClasses.IRelatedEnd.Remove%2A>       Remove 方法从相关端移除一个对象。 相关的端必须是<xref:System.Data.Objects.DataClasses.EntityCollection%601>.</xref:System.Data.Objects.DataClasses.EntityCollection%601>       <xref:System.Data.Objects.DataClasses.RelatedEnd>类显式实现移除方法。</xref:System.Data.Objects.DataClasses.RelatedEnd> <xref:System.Data.Objects.DataClasses.EntityCollection%601>类使用此实现。</xref:System.Data.Objects.DataClasses.EntityCollection%601> 有关详细信息，请参阅<xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>。</xref:System.Data.Objects.DataClasses.EntityCollection%601.Remove%2A>"
  syntax:
    content: public bool Remove (object entity);
    parameters:
    - id: entity
      type: System.Object
      description: "要从集合中移除的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> entity </code>已成功删除;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if <code>entity</code> was not part of the <xref href=&quot;System.Data.Objects.DataClasses.IRelatedEnd&quot;></xref>."
  overload: System.Data.Objects.DataClasses.IRelatedEnd.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
  id: SourceRoleName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: SourceRoleName
  nameWithType: IRelatedEnd.SourceRoleName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "获取关系的源端的角色名称。"
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>类实现 SourceRoleName 属性。</xref:System.Data.Objects.DataClasses.RelatedEnd> 有关详细信息，请参阅<xref:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName%2A>。</xref:System.Data.Objects.DataClasses.RelatedEnd.SourceRoleName%2A>       角色名称由指定`Role`属性`End`概念模型中定义此关系的关联中的元素。 有关详细信息，请参阅[关联元素 (CSDL)](http://msdn.microsoft.com/en-us/c305169a-8af7-432f-9ba7-800a163aed41)。"
  syntax:
    content: public string SourceRoleName { get; }
    return:
      type: System.String
      description: "关系的源端的角色名称。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
  id: TargetRoleName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  langs:
  - csharp
  name: TargetRoleName
  nameWithType: IRelatedEnd.TargetRoleName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data.Objects.DataClasses
  summary: "获取关系的目标端的角色名称。"
  remarks: "<xref:System.Data.Objects.DataClasses.RelatedEnd>类实现 TargetRoleName 属性。</xref:System.Data.Objects.DataClasses.RelatedEnd> 有关详细信息，请参阅<xref:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName%2A>。</xref:System.Data.Objects.DataClasses.RelatedEnd.TargetRoleName%2A>       角色名称由指定`Role`属性`End`概念模型中定义此关系的关联中的元素。 有关详细信息，请参阅[关联元素 (CSDL)](http://msdn.microsoft.com/en-us/c305169a-8af7-432f-9ba7-800a163aed41)。"
  syntax:
    content: public string TargetRoleName { get; }
    return:
      type: System.String
      description: "关系的目标端的角色名称。"
  overload: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Add(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Add(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Add(IEntityWithRelationships)
- uid: System.Data.Objects.DataClasses.IEntityWithRelationships
  parent: System.Data.Objects.DataClasses
  isExternal: false
  name: IEntityWithRelationships
  nameWithType: IEntityWithRelationships
  fullName: System.Data.Objects.DataClasses.IEntityWithRelationships
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Add(Object)
  nameWithType: IRelatedEnd.Add(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Add(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Attach(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Attach(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Attach(IEntityWithRelationships)
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Attach(Object)
  nameWithType: IRelatedEnd.Attach(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Attach(Object)
- uid: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: CreateSourceQuery()
  nameWithType: IRelatedEnd.CreateSourceQuery()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery()
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: GetEnumerator()
  nameWithType: IRelatedEnd.GetEnumerator()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: IsLoaded
  nameWithType: IRelatedEnd.IsLoaded
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Load()
  nameWithType: IRelatedEnd.Load()
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Load()
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load(System.Data.Objects.MergeOption)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Load(MergeOption)
  nameWithType: IRelatedEnd.Load(MergeOption)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Load(MergeOption)
- uid: System.Data.Objects.MergeOption
  parent: System.Data.Objects
  isExternal: false
  name: MergeOption
  nameWithType: MergeOption
  fullName: System.Data.Objects.MergeOption
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: RelationshipName
  nameWithType: IRelatedEnd.RelationshipName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: RelationshipSet
  nameWithType: IRelatedEnd.RelationshipSet
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet
- uid: System.Data.Metadata.Edm.RelationshipSet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: RelationshipSet
  nameWithType: RelationshipSet
  fullName: System.Data.Metadata.Edm.RelationshipSet
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Data.Objects.DataClasses.IEntityWithRelationships)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Remove(IEntityWithRelationships)
  nameWithType: IRelatedEnd.Remove(IEntityWithRelationships)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Remove(IEntityWithRelationships)
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove(System.Object)
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Remove(Object)
  nameWithType: IRelatedEnd.Remove(Object)
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.Remove(Object)
- uid: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: SourceRoleName
  nameWithType: IRelatedEnd.SourceRoleName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName
- uid: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: TargetRoleName
  nameWithType: IRelatedEnd.TargetRoleName
  fullName: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Add*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Add
  nameWithType: IRelatedEnd.Add
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Attach*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Attach
  nameWithType: IRelatedEnd.Attach
- uid: System.Data.Objects.DataClasses.IRelatedEnd.CreateSourceQuery*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: CreateSourceQuery
  nameWithType: IRelatedEnd.CreateSourceQuery
- uid: System.Data.Objects.DataClasses.IRelatedEnd.GetEnumerator*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: GetEnumerator
  nameWithType: IRelatedEnd.GetEnumerator
- uid: System.Data.Objects.DataClasses.IRelatedEnd.IsLoaded*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: IsLoaded
  nameWithType: IRelatedEnd.IsLoaded
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Load*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Load
  nameWithType: IRelatedEnd.Load
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipName*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: RelationshipName
  nameWithType: IRelatedEnd.RelationshipName
- uid: System.Data.Objects.DataClasses.IRelatedEnd.RelationshipSet*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: RelationshipSet
  nameWithType: IRelatedEnd.RelationshipSet
- uid: System.Data.Objects.DataClasses.IRelatedEnd.Remove*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: Remove
  nameWithType: IRelatedEnd.Remove
- uid: System.Data.Objects.DataClasses.IRelatedEnd.SourceRoleName*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: SourceRoleName
  nameWithType: IRelatedEnd.SourceRoleName
- uid: System.Data.Objects.DataClasses.IRelatedEnd.TargetRoleName*
  parent: System.Data.Objects.DataClasses.IRelatedEnd
  isExternal: false
  name: TargetRoleName
  nameWithType: IRelatedEnd.TargetRoleName
