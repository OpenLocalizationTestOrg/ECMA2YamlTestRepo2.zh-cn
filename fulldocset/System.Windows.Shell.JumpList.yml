### YamlMime:ManagedReference
items:
- uid: System.Windows.Shell.JumpList
  id: JumpList
  children:
  - System.Windows.Shell.JumpList.#ctor
  - System.Windows.Shell.JumpList.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)
  - System.Windows.Shell.JumpList.AddToRecentCategory(System.String)
  - System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpPath)
  - System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpTask)
  - System.Windows.Shell.JumpList.Apply
  - System.Windows.Shell.JumpList.BeginInit
  - System.Windows.Shell.JumpList.EndInit
  - System.Windows.Shell.JumpList.GetJumpList(System.Windows.Application)
  - System.Windows.Shell.JumpList.JumpItems
  - System.Windows.Shell.JumpList.JumpItemsRejected
  - System.Windows.Shell.JumpList.JumpItemsRemovedByUser
  - System.Windows.Shell.JumpList.SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)
  - System.Windows.Shell.JumpList.ShowFrequentCategory
  - System.Windows.Shell.JumpList.ShowRecentCategory
  langs:
  - csharp
  name: JumpList
  nameWithType: JumpList
  fullName: System.Windows.Shell.JumpList
  type: Class
  summary: "表示项和作为菜单上显示的任务列表[!INCLUDE[win7](~/add/includes/win7-md.md)]任务栏按钮。"
  remarks: "[!INCLUDE[win7](~/add/includes/win7-md.md)]任务栏提供了用于直接从任务栏按钮启动程序，通过使用跳转列表的增强的功能。 跳转列表也用在[!INCLUDE[win7](~/add/includes/win7-md.md)]开始菜单。 通过右击任务栏按钮或通过单击开始菜单中的某个程序旁边的箭头访问跳转列表。 有关跳转列表的详细信息，请参阅[任务栏](http://go.microsoft.com/fwlink/?LinkId=178478)的 Windows 用户体验交互准则的部分。       JumpList 类提供托管的包装中的跳转列表功能[!INCLUDE[win7](~/add/includes/win7-md.md)]任务栏和管理的数据传递给[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]shell。 由 JumpList 类公开的功能不可用的版本中[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]早于[!INCLUDE[win7](~/add/includes/win7-md.md)]。 使用 JumpList 类应用程序将运行的其他版本中[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]，但不是能跳转列表。 有关 Windows 外壳程序和本机跳转列表 Api 的详细信息，请参阅[任务栏扩展](http://go.microsoft.com/fwlink/?LinkId=178479)。       下图显示跳转列表 Windows Media Player，与中的项**任务**和**常用**类别。       ![Windows Media Player 跳转菜单](~/add/media/wpfshell-jumplist.png &quot;Windows Media Player 跳转菜单&quot;)Windows Media Player 跳转菜单 # # 配置跳转列表跳转列表可以包含两种类型的项，<xref:System.Windows.Shell.JumpTask>和<xref:System.Windows.Shell.JumpPath>。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask> A<xref:System.Windows.Shell.JumpTask>是程序的链接和<xref:System.Windows.Shell.JumpPath>是指向文件的链接。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask> 你可以直观地分隔跳转列表中的项，通过创建<xref:System.Windows.Shell.JumpTask>没有<xref:System.Windows.Shell.JumpTask.Title%2A>和<xref:System.Windows.Shell.JumpItem.CustomCategory%2A>指定。</xref:System.Windows.Shell.JumpItem.CustomCategory%2A> </xref:System.Windows.Shell.JumpTask.Title%2A> </xref:System.Windows.Shell.JumpTask> 此空<xref:System.Windows.Shell.JumpTask>将显示为水平线跳转列表中。</xref:System.Windows.Shell.JumpTask>      1> [!NOTE]&1;> 如果在指定的文件类型<xref:System.Windows.Shell.JumpPath>未注册到你的应用程序，该文件将不会出现在跳转列表中。</xref:System.Windows.Shell.JumpPath> 例如，如果你添加<xref:System.Windows.Shell.JumpPath>指向.txt 文件，必须注册你的应用程序用于处理.txt 文件。</xref:System.Windows.Shell.JumpPath> 有关详细信息，请参阅[文件关联的简介](http://go.microsoft.com/fwlink/?LinkId=178480)。       跳转项放入 JumpList 中的类别中。 默认情况下，<xref:System.Windows.Shell.JumpItem>中显示**任务**类别。</xref:System.Windows.Shell.JumpItem> 或者，你可以指定<xref:System.Windows.Shell.JumpItem.CustomCategory%2A><xref:System.Windows.Shell.JumpItem>。</xref:System.Windows.Shell.JumpItem> </xref:System.Windows.Shell.JumpItem.CustomCategory%2A>       你可以指定是否标准**最近**和**常用**类别显示在 JumpList 通过设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>和<xref:System.Windows.Shell.JumpList.ShowFrequentCategory%2A>属性。</xref:System.Windows.Shell.JumpList.ShowFrequentCategory%2A> </xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A> 这些类别的内容管理的[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]shell。 因为这些类别中可能包含许多相同的数据，你通常显示一个或另一个你 JumpList，但不同时。 [!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]自动管理最近使用的项目，如果它们是通过通用文件对话框打开还是用来打开通过文件类型关联的应用程序。 通过跳转列表访问某一项，可以通知[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]外壳程序以向其中添加项**最近**通过调用类别<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>方法。</xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>      ## 将跳转列表应用于 Windows Shell 你无法直接访问 shell 的跳转列表或其内容读入 JumpList 类。 相反，JumpList 类提供的表示形式跳转的列表，你可以使用，以及然后将应用于[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]shell。 通常，你将创建 JumpList 并将其设置时首次运行应用程序的一次。 但是，你可以修改，或者在运行时替换 JumpList。       时设置 JumpList 属性，必须先将 JumpList 应用于 Windows shell 中，其内容显示在任务栏跳转列表中之前。 当 JumpList 首次附加到的应用程序，在 XAML 中或在调用时自动完成<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法。</xref:System.Windows.Shell.JumpList.SetJumpList%2A> 如果在运行时修改 JumpList 的内容，则必须调用<xref:System.Windows.Shell.JumpList.Apply%2A>方法将其当前的内容应用到 Windows 外壳程序。</xref:System.Windows.Shell.JumpList.Apply%2A>      ## 在 XAML A JumpList 中设置跳转列表未自动附加到<xref:System.Windows.Application>对象。</xref:System.Windows.Application> 附加到 JumpList<xref:System.Windows.Application>使用附加的属性的语法通过 XAML 中的对象。</xref:System.Windows.Application> JumpList 类实现<xref:System.ComponentModel.ISupportInitialize>接口以支持 XAML 声明 JumpList。</xref:System.ComponentModel.ISupportInitialize> 如果在 XAML 中声明并附加到当前 JumpList <xref:System.Windows.Application>，它将自动应用于[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]shell 时初始化 JumpList。</xref:System.Windows.Application>      ## 设置和修改你的代码中的跳转列表将附加到 JumpList<xref:System.Windows.Application>对象在代码中通过调用静态<xref:System.Windows.Shell.JumpList.SetJumpList%2A>方法。</xref:System.Windows.Shell.JumpList.SetJumpList%2A> </xref:System.Windows.Application> 这也适用到 JumpList [!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)] shell。       若要在运行时修改 JumpList，你调用<xref:System.Windows.Shell.JumpList.GetJumpList%2A>方法以获取当前相连<xref:System.Windows.Application>.</xref:System.Windows.Application> JumpList</xref:System.Windows.Shell.JumpList.GetJumpList%2A> 修改了 JumpList 的属性之后，必须调用<xref:System.Windows.Shell.JumpList.Apply%2A>方法以将更改应用于 Windows 外壳程序。</xref:System.Windows.Shell.JumpList.Apply%2A>      1> [!NOTE]&1;> 通常创建附加到的一个 JumpList<xref:System.Windows.Application>并应用于[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]shell。</xref:System.Windows.Application> 但是，你可以创建多个 JumpList 对象。 一次只有一个 JumpList 可以应用于[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]外壳，和唯一一个 JumpList 一次可与<xref:System.Windows.Application>.</xref:System.Windows.Application>相关联 .NET Framework 不需要这些是相同的 JumpList。      1> [!NOTE]&1;> 此类包含在类级别应用于所有成员的链接要求。 A<xref:System.Security.SecurityException>直接调用方没有完全信任权限时，将引发。</xref:System.Security.SecurityException> 有关安全要求的详细信息，请参阅[链接需求](~/add/includes/ajax-current-ext-md.md)和[的继承需求](http://msdn.microsoft.com/en-us/28b9adbb-8f08-4f10-b856-dbf59eb932d9)。"
  example:
  - "The following example shows an application with a Jump List. The application has three buttons that enable you to add a task to the current Jump List, clear the contents of the Jump List, and apply a new Jump List to the application.  \n  \n The following example shows how to declare a JumpList in markup. The JumpList contains two <xref:System.Windows.Shell.JumpTask> links and one <xref:System.Windows.Shell.JumpPath>. Applying the <xref:System.Windows.Shell.JumpPath> to the shell will fail if the application is not registered to handle the .txt file name extension.  \n  \n [!code-xml[Shell_JumpListSample#000](~/add/codesnippet/xaml/jumplistsample/app.xaml#000)]  \n  \n The following example shows the code-behind page for `App.xaml`. This code handles the <xref:System.Windows.Shell.JumpList.JumpItemsRejected> and <xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser> events.  \n  \n [!code-cs[Shell_JumpListSample#100](~/add/codesnippet/csharp/jumplistsample/app.xaml.cs#100)]  \n  \n The following example shows the markup used to create the application user interface.  \n  \n [!code-xml[Shell_JumpListSample#300](~/add/codesnippet/xaml/jumplistsample/mainwindow.xaml#300)]  \n  \n The following example shows the code-behind page for `MainWindow.xaml`. This code demonstrates how to modify, clear, and create a JumpList in procedural code. For the new Jump List, the static <xref:System.Windows.Shell.JumpList.SetJumpList%2A> method is called to associate the JumpList with the current application and apply the JumpList to the Windows shell.  \n  \n [!code-cs[Shell_JumpListSample#200](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#200)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical]

      [System.Windows.Markup.ContentProperty("JumpItems")]

      public sealed class JumpList : System.ComponentModel.ISupportInitialize
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.ISupportInitialize
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.#ctor
  id: '#ctor'
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpList()
  nameWithType: JumpList.JumpList()
  fullName: System.Windows.Shell.JumpList.JumpList()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "初始化的新实例<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>类。"
  syntax:
    content: public JumpList ();
    parameters: []
  overload: System.Windows.Shell.JumpList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)'
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  nameWithType: JumpList.JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  fullName: System.Windows.Shell.JumpList.JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "初始化的新实例<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>使用指定的参数的类。"
  remarks: "**最近**和**常用**类别通常包含许多相同的跳转项。 因此，应用程序通常显示**最近**或**常用**跳转列表中，但不同时的类别。"
  syntax:
    content: public JumpList (System.Collections.Generic.IEnumerable<System.Windows.Shell.JumpItem> items, bool showFrequent, bool showRecent);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem}
      description: "集合<xref href=&quot;System.Windows.Shell.JumpItem&quot;></xref>跳转列表中显示的对象。"
    - id: showFrequent
      type: System.Boolean
      description: "一个值，该值指示是否跳转列表中显示经常使用的项目。"
    - id: showRecent
      type: System.Boolean
      description: "一个值，该值指示是否跳转列表中显示最近使用的项。"
  overload: System.Windows.Shell.JumpList.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.String)
  id: AddToRecentCategory(System.String)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: AddToRecentCategory(String)
  nameWithType: JumpList.AddToRecentCategory(String)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "将添加到指定的项路径**最近**跳转列表的类别。"
  remarks: "内容**最近**类别由 Windows 外壳程序。 若要跳转列表中显示最近使用的项，请设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>属性`true`。</xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>       你可以调用要请求 Windows 外壳程序添加到项路径的 AddToRecentCategory 方法**最近**项列表。 如果你的应用程序未注册为处理的项的文件类型，它将不会出现在**最近**列表和 AddToRecentCategory 对的调用将以静默方式失败。"
  syntax:
    content: public static void AddToRecentCategory (string itemPath);
    parameters:
    - id: itemPath
      type: System.String
      description: "要添加到跳转列表的路径。"
  overload: System.Windows.Shell.JumpList.AddToRecentCategory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpPath)
  id: AddToRecentCategory(System.Windows.Shell.JumpPath)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: AddToRecentCategory(JumpPath)
  nameWithType: JumpList.AddToRecentCategory(JumpPath)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(JumpPath)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "添加到所指定的跳转路径**最近**跳转列表的类别。"
  remarks: "内容**最近**类别由 Windows 外壳程序。 若要跳转列表中显示最近使用的项，请设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>属性`true`。</xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>       你可以调用 AddToRecentCategory 方法来请求 Windows 外壳程序添加到指定的跳转路径**最近**项列表。 如果你的应用程序未注册为处理的项的文件类型，它将不会出现在**最近**列表和 AddToRecentCategory 对的调用将以静默方式失败。"
  syntax:
    content: public static void AddToRecentCategory (System.Windows.Shell.JumpPath jumpPath);
    parameters:
    - id: jumpPath
      type: System.Windows.Shell.JumpPath
      description: "<xref href=&quot;System.Windows.Shell.JumpPath&quot;> </xref>将添加到跳转列表。"
  overload: System.Windows.Shell.JumpList.AddToRecentCategory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpTask)
  id: AddToRecentCategory(System.Windows.Shell.JumpTask)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: AddToRecentCategory(JumpTask)
  nameWithType: JumpList.AddToRecentCategory(JumpTask)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(JumpTask)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "添加到指定的跳转任务**最近**跳转列表的类别。"
  remarks: "内容**最近**类别由 Windows 外壳程序。 若要跳转列表中显示最近使用的项，请设置<xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>属性`true`。</xref:System.Windows.Shell.JumpList.ShowRecentCategory%2A>       你可以调用 AddToRecentCategory 方法来请求 Windows 外壳程序添加到指定的跳转任务**最近**项列表。"
  syntax:
    content: public static void AddToRecentCategory (System.Windows.Shell.JumpTask jumpTask);
    parameters:
    - id: jumpTask
      type: System.Windows.Shell.JumpTask
      description: "<xref href=&quot;System.Windows.Shell.JumpTask&quot;> </xref>将添加到跳转列表。"
  overload: System.Windows.Shell.JumpList.AddToRecentCategory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.Apply
  id: Apply
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: Apply()
  nameWithType: JumpList.Apply()
  fullName: System.Windows.Shell.JumpList.Apply()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "发送<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>到 Windows 外壳程序在其当前状态。"
  remarks: "Apply 方法发送的内容<xref:System.Windows.Shell.JumpList>到其当前状态中的 Windows 外壳。</xref:System.Windows.Shell.JumpList> 此调用完成后，<xref:System.Windows.Shell.JumpList.JumpItems%2A>属性修改为包含 Windows 外壳程序已成功添加到其任务栏跳转列表中的项目。</xref:System.Windows.Shell.JumpList.JumpItems%2A> 你可以通过事件处理程序中访问删除的项的列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。</xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser> </xref:System.Windows.Shell.JumpList.JumpItemsRejected>"
  example:
  - "The following example shows how to get the current <xref:System.Windows.Shell.JumpList> and clear the contents of the <xref:System.Windows.Shell.JumpList.JumpItems%2A> collection. The Apply method is then called to apply the <xref:System.Windows.Shell.JumpList> changes to the Windows shell. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#230](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#230)]"
  syntax:
    content: public void Apply ();
    parameters: []
  overload: System.Windows.Shell.JumpList.Apply*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>未完全初始化。"
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.BeginInit
  id: BeginInit
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: BeginInit()
  nameWithType: JumpList.BeginInit()
  fullName: System.Windows.Shell.JumpList.BeginInit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "用信号通知的开始<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>初始化。"
  remarks: "<xref:System.Windows.Shell.JumpList>类实现该<xref:System.ComponentModel.ISupportInitialize>接口以支持的一种<xref:System.Windows.Shell.JumpList>。</xref:System.Windows.Shell.JumpList>的 XAML 声明</xref:System.ComponentModel.ISupportInitialize></xref:System.Windows.Shell.JumpList> BeginInit 方法时，才调用<xref:System.Windows.Shell.JumpList>则会在 XAML 中声明并附加到<xref:System.Windows.Application>使用附加的属性的语法通过。</xref:System.Windows.Application> </xref:System.Windows.Shell.JumpList> 不在代码中调用此方法。"
  syntax:
    content: public void BeginInit ();
    parameters: []
  overload: System.Windows.Shell.JumpList.BeginInit*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此调用 BeginInit 嵌套在 BeginInit 的以前调用。"
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.EndInit
  id: EndInit
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: EndInit()
  nameWithType: JumpList.EndInit()
  fullName: System.Windows.Shell.JumpList.EndInit()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "表示结束的<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>初始化。"
  remarks: "<xref:System.Windows.Shell.JumpList>类实现该<xref:System.ComponentModel.ISupportInitialize>接口以支持的一种<xref:System.Windows.Shell.JumpList>。</xref:System.Windows.Shell.JumpList>的 XAML 声明</xref:System.ComponentModel.ISupportInitialize></xref:System.Windows.Shell.JumpList> EndInit 方法时，才调用<xref:System.Windows.Shell.JumpList>则会在 XAML 中声明并附加到<xref:System.Windows.Application>使用附加的属性的语法通过。</xref:System.Windows.Application> </xref:System.Windows.Shell.JumpList> 不在代码中调用此方法。       EndInit 方法具有相同的效果<xref:System.Windows.Shell.JumpList.Apply%2A>方法。</xref:System.Windows.Shell.JumpList.Apply%2A> EndInit 发送的内容<xref:System.Windows.Shell.JumpList>到其当前状态中的 Windows 外壳。</xref:System.Windows.Shell.JumpList> 此调用完成后，<xref:System.Windows.Shell.JumpList.JumpItems%2A>属性修改为包含 Windows 外壳程序已成功添加到跳转列表中的项目。</xref:System.Windows.Shell.JumpList.JumpItems%2A> 你可以通过事件处理程序中访问删除的项的列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。</xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser> </xref:System.Windows.Shell.JumpList.JumpItemsRejected>"
  syntax:
    content: public void EndInit ();
    parameters: []
  overload: System.Windows.Shell.JumpList.EndInit*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "通过调用<xref:System.Windows.Shell.JumpList.BeginInit*>.</xref:System.Windows.Shell.JumpList.BeginInit*>未配对到 EndInit 此调用"
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.GetJumpList(System.Windows.Application)
  id: GetJumpList(System.Windows.Application)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: GetJumpList(Application)
  nameWithType: JumpList.GetJumpList(Application)
  fullName: System.Windows.Shell.JumpList.GetJumpList(Application)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "返回<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>与应用程序关联的对象。"
  remarks: "你可以调用要获取<xref:System.Windows.Shell.JumpList>当前与<xref:System.Windows.Application>.</xref:System.Windows.Application>相关联</xref:System.Windows.Shell.JumpList>的 GetJumpList 方法 .NET Framework 不需要，这是<xref:System.Windows.Shell.JumpList>，当前应用于 Windows 外壳程序。</xref:System.Windows.Shell.JumpList>"
  example:
  - "The following example shows how to get the <xref:System.Windows.Shell.JumpList> associated with the current application. A <xref:System.Windows.Shell.JumpTask> is added to the <xref:System.Windows.Shell.JumpList.JumpItems%2A> collection and added to the **Recent** category. The <xref:System.Windows.Shell.JumpList.Apply%2A> method is called to apply the updated <xref:System.Windows.Shell.JumpList> to the Windows shell. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#240](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#240)]"
  syntax:
    content: public static System.Windows.Shell.JumpList GetJumpList (System.Windows.Application application);
    parameters:
    - id: application
      type: System.Windows.Application
      description: "关联的应用程序<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>。"
    return:
      type: System.Windows.Shell.JumpList
      description: "<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>与指定的应用程序关联的对象。"
  overload: System.Windows.Shell.JumpList.GetJumpList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.JumpItems
  id: JumpItems
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpItems
  nameWithType: JumpList.JumpItems
  fullName: System.Windows.Shell.JumpList.JumpItems
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "获取的集合<xref href=&quot;System.Windows.Shell.JumpItem&quot;></xref>跳转列表中显示的对象。"
  remarks: "跳转列表可以包含两种类型的项，<xref:System.Windows.Shell.JumpTask>和<xref:System.Windows.Shell.JumpPath>。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask> A<xref:System.Windows.Shell.JumpTask>是程序的链接和<xref:System.Windows.Shell.JumpPath>是指向文件的链接。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask>       当<xref:System.Windows.Shell.JumpList>创建 JumpItems 集合为空。</xref:System.Windows.Shell.JumpList> 可以添加任何<xref:System.Windows.Shell.JumpTask>或<xref:System.Windows.Shell.JumpPath>到集合的对象。</xref:System.Windows.Shell.JumpPath> </xref:System.Windows.Shell.JumpTask> 集合将只包含已通过您的程序添加的项。 后<xref:System.Windows.Shell.JumpList>通过成功调用传递给 Windows shell<xref:System.Windows.Shell.JumpList.EndInit%2A>或<xref:System.Windows.Shell.JumpList.Apply%2A>方法，JumpItems 集合将包含已成功添加到任务栏跳转列表的项。</xref:System.Windows.Shell.JumpList.Apply%2A> </xref:System.Windows.Shell.JumpList.EndInit%2A> </xref:System.Windows.Shell.JumpList> 未成功添加的项是从 JumpItems 集合中移除。 你可以通过事件处理程序中访问删除的项的列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。</xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser> </xref:System.Windows.Shell.JumpList.JumpItemsRejected>"
  example:
  - "The following example shows how to get the current <xref:System.Windows.Shell.JumpList> and clear the contents of the JumpItems collection. The <xref:System.Windows.Shell.JumpList.Apply%2A> method is then called to apply the <xref:System.Windows.Shell.JumpList> changes to the Windows shell. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#230](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#230)]"
  syntax:
    content: public System.Collections.Generic.List<System.Windows.Shell.JumpItem> JumpItems { get; }
    return:
      type: System.Collections.Generic.List{System.Windows.Shell.JumpItem}
      description: "集合<xref href=&quot;System.Windows.Shell.JumpItem&quot;></xref>跳转列表中显示的对象。 默认值为空集合。"
  overload: System.Windows.Shell.JumpList.JumpItems*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.JumpItemsRejected
  id: JumpItemsRejected
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpItemsRejected
  nameWithType: JumpList.JumpItemsRejected
  fullName: System.Windows.Shell.JumpList.JumpItemsRejected
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "跳转项目都不成功添加到跳转列表 Windows shell 时发生。"
  remarks: "内容后<xref:System.Windows.Shell.JumpList>适用于 Windows shell 中，<xref:System.Windows.Shell.JumpList.JumpItems%2A>属性修改为包含 Windows 外壳程序已成功添加到跳转列表中的项目。</xref:System.Windows.Shell.JumpList.JumpItems%2A> </xref:System.Windows.Shell.JumpList> 你可以通过事件处理程序访问删除的项的列表 JumpItemsRejected 和<xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>事件。</xref:System.Windows.Shell.JumpList.JumpItemsRemovedByUser>"
  example:
  - "The following example shows how to handle the JumpItemsRejected event to display the rejected items in a message box. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#110](~/add/codesnippet/csharp/jumplistsample/app.xaml.cs#110)]"
  syntax:
    content: public event EventHandler<System.Windows.Shell.JumpItemsRejectedEventArgs> JumpItemsRejected;
    return:
      type: System.EventHandler{System.Windows.Shell.JumpItemsRejectedEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.JumpItemsRemovedByUser
  id: JumpItemsRemovedByUser
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: JumpItemsRemovedByUser
  nameWithType: JumpList.JumpItemsRemovedByUser
  fullName: System.Windows.Shell.JumpList.JumpItemsRemovedByUser
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "跳转项以前在跳转列表由用户从列表中删除时发生。"
  remarks: "内容后<xref:System.Windows.Shell.JumpList>适用于 Windows shell 中，<xref:System.Windows.Shell.JumpList.JumpItems%2A>属性修改为包含 Windows 外壳程序已成功添加到跳转列表中的项目。</xref:System.Windows.Shell.JumpList.JumpItems%2A> </xref:System.Windows.Shell.JumpList> 你可以通过事件处理程序中访问删除的项的列表<xref:System.Windows.Shell.JumpList.JumpItemsRejected>和 JumpItemsRemovedByUser 事件。</xref:System.Windows.Shell.JumpList.JumpItemsRejected>"
  example:
  - "The following example shows how to handle the JumpItemsRemovedByUser event to display the rejected items in a message box. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#120](~/add/codesnippet/csharp/jumplistsample/app.xaml.cs#120)]"
  syntax:
    content: public event EventHandler<System.Windows.Shell.JumpItemsRemovedEventArgs> JumpItemsRemovedByUser;
    return:
      type: System.EventHandler{System.Windows.Shell.JumpItemsRemovedEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)
  id: SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: SetJumpList(Application,JumpList)
  nameWithType: JumpList.SetJumpList(Application,JumpList)
  fullName: System.Windows.Shell.JumpList.SetJumpList(Application,JumpList)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "集<xref href=&quot;System.Windows.Shell.JumpList&quot;></xref>与应用程序关联的对象。"
  remarks: "你可以创建多个<xref:System.Windows.Shell.JumpList>对象。</xref:System.Windows.Shell.JumpList> 但是，<xref:System.Windows.Shell.JumpList>一次可与相关联<xref:System.Windows.Application>.</xref:System.Windows.Application></xref:System.Windows.Shell.JumpList>只有一个 调用要设置<xref:System.Windows.Shell.JumpList>当前<xref:System.Windows.Application>.</xref:System.Windows.Application>与关联</xref:System.Windows.Shell.JumpList>的 SetJumpList 方法"
  example:
  - "The following example shows how to create a <xref:System.Windows.Shell.JumpList> in code. The static SetJumpList method is called to associate the <xref:System.Windows.Shell.JumpList> with the current application. The <xref:System.Windows.Shell.JumpList> is automatically applied to the Windows shell when it is set. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-cs[Shell_JumpListSample#210](~/add/codesnippet/csharp/jumplistsample/mainwindow.xaml.cs#210)]"
  syntax:
    content: public static void SetJumpList (System.Windows.Application application, System.Windows.Shell.JumpList value);
    parameters:
    - id: application
      type: System.Windows.Application
      description: "关联的应用程序<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>。"
    - id: value
      type: System.Windows.Shell.JumpList
      description: "<xref href=&quot;System.Windows.Shell.JumpList&quot;> </xref>要与应用程序关联。"
  overload: System.Windows.Shell.JumpList.SetJumpList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.ShowFrequentCategory
  id: ShowFrequentCategory
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: ShowFrequentCategory
  nameWithType: JumpList.ShowFrequentCategory
  fullName: System.Windows.Shell.JumpList.ShowFrequentCategory
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "获取或设置一个值，该值指示是否跳转列表中显示经常使用的项目。"
  remarks: "内容**常用**类别由 Windows 外壳程序。 若要跳转列表中显示经常使用的项目，请将 ShowFrequentCategory 属性设置为`true`。       **最近**和**常用**类别通常包含许多相同的跳转项。 因此，应用程序通常显示**最近**或**常用**跳转列表中，但不同时的类别。"
  example:
  - "The following example shows a <xref:System.Windows.Shell.JumpList> configured to show the **Frequent** category. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-xml[Shell_JumpListSample#001](~/add/codesnippet/xaml/jumplistsample/app.xaml#001)]"
  syntax:
    content: public bool ShowFrequentCategory { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果经常使用的项目显示在跳转列表;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Shell.JumpList.ShowFrequentCategory*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Shell.JumpList.ShowRecentCategory
  id: ShowRecentCategory
  parent: System.Windows.Shell.JumpList
  langs:
  - csharp
  name: ShowRecentCategory
  nameWithType: JumpList.ShowRecentCategory
  fullName: System.Windows.Shell.JumpList.ShowRecentCategory
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Shell
  summary: "获取或设置一个值，该值指示是否跳转列表中显示最近使用的项。"
  remarks: "内容**最近**类别由 Windows 外壳程序。 若要跳转列表中显示经常使用的项目，请将 ShowRecentCategory 属性设置为`true`。       **最近**和**常用**类别通常包含许多相同的跳转项。 因此，应用程序通常显示**最近**或**常用**跳转列表中，但不同时的类别。       你可以调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>方法来请求 Windows 外壳程序添加到的项**最近**项列表。</xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A> 如果你的应用程序未注册要处理的项的文件名类型，它将不会出现在**最近**列表和对调用<xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>将以静默方式失败。</xref:System.Windows.Shell.JumpList.AddToRecentCategory%2A>"
  example:
  - "The following example shows a <xref:System.Windows.Shell.JumpList> configured to show the **Recent** category. This example is part of a larger example available in the <xref:System.Windows.Shell.JumpList> class overview.  \n  \n [!code-xml[Shell_JumpListSample#001](~/add/codesnippet/xaml/jumplistsample/app.xaml#001)]"
  syntax:
    content: public bool ShowRecentCategory { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果最近使用的项显示在跳转列表;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Shell.JumpList.ShowRecentCategory*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Windows.Shell.JumpList.#ctor
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpList()
  nameWithType: JumpList.JumpList()
  fullName: System.Windows.Shell.JumpList.JumpList()
- uid: System.Windows.Shell.JumpList.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem},System.Boolean,System.Boolean)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  nameWithType: JumpList.JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
  fullName: System.Windows.Shell.JumpList.JumpList(IEnumerable<JumpItem>,Boolean,Boolean)
- uid: System.Collections.Generic.IEnumerable{System.Windows.Shell.JumpItem}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<JumpItem>
  nameWithType: IEnumerable<JumpItem>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Shell.JumpItem>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Shell.JumpItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Shell.JumpItem
    name: JumpItem
    nameWithType: JumpItem
    fullName: JumpItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.String)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: AddToRecentCategory(String)
  nameWithType: JumpList.AddToRecentCategory(String)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpPath)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: AddToRecentCategory(JumpPath)
  nameWithType: JumpList.AddToRecentCategory(JumpPath)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(JumpPath)
- uid: System.Windows.Shell.JumpPath
  parent: System.Windows.Shell
  isExternal: false
  name: JumpPath
  nameWithType: JumpPath
  fullName: System.Windows.Shell.JumpPath
- uid: System.Windows.Shell.JumpList.AddToRecentCategory(System.Windows.Shell.JumpTask)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: AddToRecentCategory(JumpTask)
  nameWithType: JumpList.AddToRecentCategory(JumpTask)
  fullName: System.Windows.Shell.JumpList.AddToRecentCategory(JumpTask)
- uid: System.Windows.Shell.JumpTask
  parent: System.Windows.Shell
  isExternal: false
  name: JumpTask
  nameWithType: JumpTask
  fullName: System.Windows.Shell.JumpTask
- uid: System.Windows.Shell.JumpList.Apply
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: Apply()
  nameWithType: JumpList.Apply()
  fullName: System.Windows.Shell.JumpList.Apply()
- uid: System.Windows.Shell.JumpList.BeginInit
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: BeginInit()
  nameWithType: JumpList.BeginInit()
  fullName: System.Windows.Shell.JumpList.BeginInit()
- uid: System.Windows.Shell.JumpList.EndInit
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: EndInit()
  nameWithType: JumpList.EndInit()
  fullName: System.Windows.Shell.JumpList.EndInit()
- uid: System.Windows.Shell.JumpList.GetJumpList(System.Windows.Application)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: GetJumpList(Application)
  nameWithType: JumpList.GetJumpList(Application)
  fullName: System.Windows.Shell.JumpList.GetJumpList(Application)
- uid: System.Windows.Shell.JumpList
  parent: System.Windows.Shell
  isExternal: false
  name: JumpList
  nameWithType: JumpList
  fullName: System.Windows.Shell.JumpList
- uid: System.Windows.Application
  parent: System.Windows
  isExternal: false
  name: Application
  nameWithType: Application
  fullName: System.Windows.Application
- uid: System.Windows.Shell.JumpList.JumpItems
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpItems
  nameWithType: JumpList.JumpItems
  fullName: System.Windows.Shell.JumpList.JumpItems
- uid: System.Collections.Generic.List{System.Windows.Shell.JumpItem}
  parent: System.Collections.Generic
  isExternal: true
  name: List<JumpItem>
  nameWithType: List<JumpItem>
  fullName: System.Collections.Generic.List<System.Windows.Shell.JumpItem>
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: List<System.Windows.Shell.JumpItem>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Shell.JumpItem
    name: JumpItem
    nameWithType: JumpItem
    fullName: JumpItem
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Shell.JumpList.JumpItemsRejected
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpItemsRejected
  nameWithType: JumpList.JumpItemsRejected
  fullName: System.Windows.Shell.JumpList.JumpItemsRejected
- uid: System.EventHandler{System.Windows.Shell.JumpItemsRejectedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<JumpItemsRejectedEventArgs>
  nameWithType: EventHandler<JumpItemsRejectedEventArgs>
  fullName: System.EventHandler<System.Windows.Shell.JumpItemsRejectedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Shell.JumpItemsRejectedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Shell.JumpItemsRejectedEventArgs
    name: JumpItemsRejectedEventArgs
    nameWithType: JumpItemsRejectedEventArgs
    fullName: JumpItemsRejectedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Shell.JumpList.JumpItemsRemovedByUser
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpItemsRemovedByUser
  nameWithType: JumpList.JumpItemsRemovedByUser
  fullName: System.Windows.Shell.JumpList.JumpItemsRemovedByUser
- uid: System.EventHandler{System.Windows.Shell.JumpItemsRemovedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<JumpItemsRemovedEventArgs>
  nameWithType: EventHandler<JumpItemsRemovedEventArgs>
  fullName: System.EventHandler<System.Windows.Shell.JumpItemsRemovedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Shell.JumpItemsRemovedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Shell.JumpItemsRemovedEventArgs
    name: JumpItemsRemovedEventArgs
    nameWithType: JumpItemsRemovedEventArgs
    fullName: JumpItemsRemovedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Shell.JumpList.SetJumpList(System.Windows.Application,System.Windows.Shell.JumpList)
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: SetJumpList(Application,JumpList)
  nameWithType: JumpList.SetJumpList(Application,JumpList)
  fullName: System.Windows.Shell.JumpList.SetJumpList(Application,JumpList)
- uid: System.Windows.Shell.JumpList.ShowFrequentCategory
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: ShowFrequentCategory
  nameWithType: JumpList.ShowFrequentCategory
  fullName: System.Windows.Shell.JumpList.ShowFrequentCategory
- uid: System.Windows.Shell.JumpList.ShowRecentCategory
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: ShowRecentCategory
  nameWithType: JumpList.ShowRecentCategory
  fullName: System.Windows.Shell.JumpList.ShowRecentCategory
- uid: System.Windows.Shell.JumpList.#ctor*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpList
  nameWithType: JumpList.JumpList
- uid: System.Windows.Shell.JumpList.AddToRecentCategory*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: AddToRecentCategory
  nameWithType: JumpList.AddToRecentCategory
- uid: System.Windows.Shell.JumpList.Apply*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: Apply
  nameWithType: JumpList.Apply
- uid: System.Windows.Shell.JumpList.BeginInit*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: BeginInit
  nameWithType: JumpList.BeginInit
- uid: System.Windows.Shell.JumpList.EndInit*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: EndInit
  nameWithType: JumpList.EndInit
- uid: System.Windows.Shell.JumpList.GetJumpList*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: GetJumpList
  nameWithType: JumpList.GetJumpList
- uid: System.Windows.Shell.JumpList.JumpItems*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: JumpItems
  nameWithType: JumpList.JumpItems
- uid: System.Windows.Shell.JumpList.SetJumpList*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: SetJumpList
  nameWithType: JumpList.SetJumpList
- uid: System.Windows.Shell.JumpList.ShowFrequentCategory*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: ShowFrequentCategory
  nameWithType: JumpList.ShowFrequentCategory
- uid: System.Windows.Shell.JumpList.ShowRecentCategory*
  parent: System.Windows.Shell.JumpList
  isExternal: false
  name: ShowRecentCategory
  nameWithType: JumpList.ShowRecentCategory
