### YamlMime:ManagedReference
items:
- uid: System.Messaging.ActiveXMessageFormatter
  id: ActiveXMessageFormatter
  children:
  - System.Messaging.ActiveXMessageFormatter.#ctor
  - System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)
  - System.Messaging.ActiveXMessageFormatter.Clone
  - System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)
  - System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)
  - System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)
  langs:
  - csharp
  name: ActiveXMessageFormatter
  nameWithType: ActiveXMessageFormatter
  fullName: System.Messaging.ActiveXMessageFormatter
  type: Class
  summary: "序列化或反序列化基元数据类型和其他对象到或从使用一种格式，与 MSMQ ActiveX 组件兼容的消息队列消息的正文。"
  remarks: "ActiveXMessageFormatter 是使用消息队列 COM 组件发送的消息与兼容允许与使用 MSMQ COM 控件的应用程序互操作性。       大多数基元，以及实现的对象，可以序列化 ActiveXMessageFormatter `IPersistStream` OLE 接口。 它可以反序列化一组相同的基元，但需要进一步工作量，反序列化实现的 COM 对象 （例如，使用 Visual Basic 6.0 中创建的对象） 时`IPersistStream`。 要反序列化的对象必须在内存中的第一个对象导入.NET Framework 应用程序。       当应用程序发送一条消息到使用的实例的队列<xref:System.Messaging.MessageQueue>类，格式化程序对象序列化为流，并将它插入到消息正文。</xref:System.Messaging.MessageQueue> 当从使用<xref:System.Messaging.MessageQueue>、 格式化程序反序列化消息数据<xref:System.Messaging.Message.Body%2A>的一种<xref:System.Messaging.Message>。</xref:System.Messaging.Message>属性</xref:System.Messaging.Message.Body%2A>插入</xref:System.Messaging.MessageQueue>队列中读取       ActiveX 序列化是非常简洁，这使得使用 ActiveXMessageFormatter 和 MSMQ COM 控制序列化的非常快方法。"
  syntax:
    content: 'public class ActiveXMessageFormatter : ICloneable, System.Messaging.IMessageFormatter'
  inheritance:
  - System.Object
  implements:
  - System.ICloneable
  - System.Messaging.IMessageFormatter
  inheritedMembers: []
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.#ctor
  id: '#ctor'
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: ActiveXMessageFormatter()
  nameWithType: ActiveXMessageFormatter.ActiveXMessageFormatter()
  fullName: System.Messaging.ActiveXMessageFormatter.ActiveXMessageFormatter()
  type: Constructor
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "初始化的新实例<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;></xref>类。"
  syntax:
    content: public ActiveXMessageFormatter ();
    parameters: []
  overload: System.Messaging.ActiveXMessageFormatter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)
  id: CanRead(System.Messaging.Message)
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: CanRead(Message)
  nameWithType: ActiveXMessageFormatter.CanRead(Message)
  fullName: System.Messaging.ActiveXMessageFormatter.CanRead(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "确定格式化程序是否可以反序列化消息的内容。"
  remarks: "CanRead 返回`false`如果消息正文不是一个基元，消息队列 ActiveX 控件可以反序列化，或如果它未实现`IPersistStream`接口。"
  syntax:
    content: public bool CanRead (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>检查。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;></xref>可以反序列化消息; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Messaging.ActiveXMessageFormatter.CanRead*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.Clone
  id: Clone
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: Clone()
  nameWithType: ActiveXMessageFormatter.Clone()
  fullName: System.Messaging.ActiveXMessageFormatter.Clone()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "创建的实例<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;></xref>等同于当前的类<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;> </xref>。"
  remarks: "使用此方法的<xref:System.Messaging.MessageQueue>为了在同一时间接收多个消息 （例如，如果应用程序以异步方式接收） 的类。</xref:System.Messaging.MessageQueue> 通常不需要在应用程序代码中调用此方法。"
  syntax:
    content: public object Clone ();
    parameters: []
    return:
      type: System.Object
      description: "其属性与此相同一个对象<xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;> </xref>。"
  overload: System.Messaging.ActiveXMessageFormatter.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)
  id: InitStreamedObject(System.Object)
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: InitStreamedObject(Object)
  nameWithType: ActiveXMessageFormatter.InitStreamedObject(Object)
  fullName: System.Messaging.ActiveXMessageFormatter.InitStreamedObject(Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "提供了一个实用工具，以帮助序列化 COM 对象实现<xref uid=&quot;langword_csharp_IPersistStream&quot; name=&quot;IPersistStream&quot; href=&quot;&quot;></xref>和需要<xref uid=&quot;langword_csharp_IPersistStreamInit&quot; name=&quot;IPersistStreamInit&quot; href=&quot;&quot;></xref>调用。"
  syntax:
    content: public static void InitStreamedObject (object streamedObject);
    parameters:
    - id: streamedObject
      type: System.Object
      description: "实现的 OLE 对象<xref uid=&quot;langword_csharp_IPersistStreamInit&quot; name=&quot;IPersistStreamInit&quot; href=&quot;&quot;> </xref>。"
  overload: System.Messaging.ActiveXMessageFormatter.InitStreamedObject*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)
  id: Read(System.Messaging.Message)
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: Read(Message)
  nameWithType: ActiveXMessageFormatter.Read(Message)
  fullName: System.Messaging.ActiveXMessageFormatter.Read(Message)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从给定的消息读取内容并创建包含反序列化的消息的对象。"
  remarks: "如果消息的正文表示基元类型，该消息的<xref:System.Messaging.Message.BodyType%2A>属性必须是下表中的托管类型之一。</xref:System.Messaging.Message.BodyType%2A>      |BodyType 值 |托管类型 |  |--------------------|------------------|  |VT_LPSTR |<xref:System.Char>数组 （反序列化使用 ASCII 编码） |  |VT_BSTR、 VT_LPWSTR |<xref:System.String>（反序列化使用 Unicode 编码） |  |VT_VECTOR |VT_UI1 |<xref:System.Byte>数组 |  |VT_BOOL |<xref:System.Boolean>|  |VT_CLSID |<xref:System.Guid>|  |VT_CY |<xref:System.Decimal>|  |VT_DATE |<xref:System.DateTime>|  |VT_I1、 VT_UI1 |<xref:System.Byte>|  |VT_I2 |<xref:System.Int16>|  |VT_UI2 |<xref:System.UInt16>|  |VT_I4 |<xref:System.Int32>|  |VT_UI4 |<xref:System.UInt32>|  |VT_I8 |<xref:System.Int64>|  |VT_UI8 |<xref:System.UInt64>|  |VT_R4 |<xref:System.Single>|  |VT_R8 |<xref:System.Double>|  |VT_NULL |`null`|  |VT_STREAMED_OBJECT |<xref:System.Object>|</xref:System.Object></xref:System.Double></xref:System.Single></xref:System.UInt64></xref:System.Int64></xref:System.UInt32></xref:System.Int32></xref:System.UInt16></xref:System.Int16></xref:System.Byte></xref:System.DateTime></xref:System.Decimal></xref:System.Guid></xref:System.Boolean></xref:System.Byte></xref:System.String></xref:System.Char>"
  syntax:
    content: public object Read (System.Messaging.Message message);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>，采用 MSMQ ActiveX 控件格式，以便反序列化。"
    return:
      type: System.Object
      description: "反序列化的消息。"
  overload: System.Messaging.ActiveXMessageFormatter.Read*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Messaging.Message.BodyType*>属性<code> message </code>传递因为参数不能映射到基元类型，也不影响不表示一个流的对象。</xref:System.Messaging.Message.BodyType*>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "正文表示存储的对象。 <xref href=&quot;System.Messaging.ActiveXMessageFormatter&quot;> </xref>不支持的存储的对象的反序列化。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)
  id: Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.ActiveXMessageFormatter
  langs:
  - csharp
  name: Write(Message,Object)
  nameWithType: ActiveXMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.ActiveXMessageFormatter.Write(Message,Object)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "对象序列化为消息的正文。"
  remarks: "下表显示托管类型之间的关系和<xref:System.Messaging.Message.BodyType%2A>属性。</xref:System.Messaging.Message.BodyType%2A> 在序列化的对象必须是其中一种托管类型或必须实现 OLE`IPersistStream`接口。      |BodyType 值 |托管类型 |  |--------------------|------------------|  |VT_LPSTR |<xref:System.Char>|  |VT_BSTR、 VT_LPWSTR |<xref:System.String>|  |VT_VECTOR |VT_UI1 |<xref:System.Byte>|  |VT_BOOL |<xref:System.Boolean>|  |VT_CLSID |<xref:System.Guid>|  |VT_CY |<xref:System.Decimal>|  |VT_DATE |<xref:System.DateTime>|  |VT_I1、 VT_UI1 |<xref:System.Byte>|  |VT_I2 |<xref:System.Int16>|  |VT_UI2 |<xref:System.UInt16>|  |VT_I4 |<xref:System.Int32>|  |VT_UI4 |<xref:System.UInt32>|  |VT_I8 |<xref:System.Int64>|  |VT_UI8 |<xref:System.UInt64>|  |VT_R4 |<xref:System.Single>|  |VT_R8 |<xref:System.Double>|  |VT_NULL |`null`|  |VT_STREAMED_OBJECT |`IPersistStream` (OLE) <xref:System.Object>|</xref:System.Object></xref:System.Double></xref:System.Single></xref:System.UInt64></xref:System.Int64></xref:System.UInt32></xref:System.Int32></xref:System.UInt16></xref:System.Int16></xref:System.Byte></xref:System.DateTime></xref:System.Decimal></xref:System.Guid></xref:System.Boolean></xref:System.Byte></xref:System.String></xref:System.Char>"
  syntax:
    content: public void Write (System.Messaging.Message message, object obj);
    parameters:
    - id: message
      type: System.Messaging.Message
      description: "<xref href=&quot;System.Messaging.Message&quot;> </xref>其<xref:System.Messaging.Message.Body*>属性将包含序列化的对象。</xref:System.Messaging.Message.Body*>"
    - id: obj
      type: System.Object
      description: "要进行序列化到消息正文的对象。"
  overload: System.Messaging.ActiveXMessageFormatter.Write*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "要序列化的对象是既不是基元也不实现 OLE 的经过流处理的对象<xref uid=&quot;langword_csharp_IPersistStream&quot; name=&quot;IPersistStream&quot; href=&quot;&quot;></xref>接口。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>message</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Messaging.ActiveXMessageFormatter.#ctor
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: ActiveXMessageFormatter()
  nameWithType: ActiveXMessageFormatter.ActiveXMessageFormatter()
  fullName: System.Messaging.ActiveXMessageFormatter.ActiveXMessageFormatter()
- uid: System.Messaging.ActiveXMessageFormatter.CanRead(System.Messaging.Message)
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: CanRead(Message)
  nameWithType: ActiveXMessageFormatter.CanRead(Message)
  fullName: System.Messaging.ActiveXMessageFormatter.CanRead(Message)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.ActiveXMessageFormatter.Clone
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Clone()
  nameWithType: ActiveXMessageFormatter.Clone()
  fullName: System.Messaging.ActiveXMessageFormatter.Clone()
- uid: System.Messaging.ActiveXMessageFormatter.InitStreamedObject(System.Object)
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: InitStreamedObject(Object)
  nameWithType: ActiveXMessageFormatter.InitStreamedObject(Object)
  fullName: System.Messaging.ActiveXMessageFormatter.InitStreamedObject(Object)
- uid: System.Messaging.ActiveXMessageFormatter.Read(System.Messaging.Message)
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Read(Message)
  nameWithType: ActiveXMessageFormatter.Read(Message)
  fullName: System.Messaging.ActiveXMessageFormatter.Read(Message)
- uid: System.Messaging.ActiveXMessageFormatter.Write(System.Messaging.Message,System.Object)
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Write(Message,Object)
  nameWithType: ActiveXMessageFormatter.Write(Message,Object)
  fullName: System.Messaging.ActiveXMessageFormatter.Write(Message,Object)
- uid: System.Messaging.ActiveXMessageFormatter.#ctor*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: ActiveXMessageFormatter
  nameWithType: ActiveXMessageFormatter.ActiveXMessageFormatter
- uid: System.Messaging.ActiveXMessageFormatter.CanRead*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: CanRead
  nameWithType: ActiveXMessageFormatter.CanRead
- uid: System.Messaging.ActiveXMessageFormatter.Clone*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Clone
  nameWithType: ActiveXMessageFormatter.Clone
- uid: System.Messaging.ActiveXMessageFormatter.InitStreamedObject*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: InitStreamedObject
  nameWithType: ActiveXMessageFormatter.InitStreamedObject
- uid: System.Messaging.ActiveXMessageFormatter.Read*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Read
  nameWithType: ActiveXMessageFormatter.Read
- uid: System.Messaging.ActiveXMessageFormatter.Write*
  parent: System.Messaging.ActiveXMessageFormatter
  isExternal: false
  name: Write
  nameWithType: ActiveXMessageFormatter.Write
