### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.Extensions
  id: Extensions
  children:
  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  - System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  - System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  langs:
  - csharp
  name: Extensions
  nameWithType: Extensions
  fullName: System.Xml.Schema.Extensions
  type: Class
  summary: "此类包含[!INCLUDE[sqltecxlinq](~/add/includes/sqltecxlinq-md.md)]用于进行 XSD 验证的扩展方法。"
  remarks: "此类还包含方法来获取已验证的 XML 节点的架构验证信息集 (PSVI)。       当验证<xref:System.Xml.Linq.XDocument>， <xref:System.Xml.Linq.XElement>，或<xref:System.Xml.Linq.XAttribute>，你也可以填充用架构验证后信息集的 XML 树。</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Linq.XElement> </xref:System.Xml.Linq.XDocument> 作为类型<xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>.</xref:System.Xml.Schema.XmlSchemaInfo?displayProperty=fullName>的批注添加 PSVI 信息"
  example:
  - "The XSD in [Sample XSD File: Customers and Orders](~/add/includes/ajax-current-ext-md.md) contains a schema that can be used to validate the XML document in [Sample XML File: Customers and Orders (LINQ to XML)](~/add/includes/ajax-current-ext-md.md). The following example loads the schema and the document, validates the document, changes the document so that the `xs:key` and `xs:keyref` relationship is not valid, and then attempts to validate again.  \n  \n```c#  \n  \n                XmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", \"CustomersOrders.xsd\");  \n  \nXDocument custOrd = XDocument.Load(\"CustomersOrders.xml\");  \n  \nConsole.WriteLine(\"Validating custOrd\");  \nbool errors = false;  \ncustOrd.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrd {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// Modify the custOrd tree so that it is no longer valid.  \ncustOrd.Root.Element(\"Orders\").Element(\"Order\").Element(\"CustomerID\").Value = \"AAAAA\";  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating custOrd\");  \nerrors = false;  \ncustOrd.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"custOrd {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", \"CustomersOrders.xsd\")  \n  \n    Console.WriteLine(\"Validating custOrd\")  \n    Dim custOrd As XDocument = XDocument.Load(\"CustomersOrders.xml\")  \n    errors = False  \n    custOrd.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"custOrd {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating custOrd\")  \n    ' Modify the source document so that it will not validate.  \n    custOrd.Root.Element(\"Orders\").Element(\"Order\").Element(\"CustomerID\").Value = \"AAAAA\"  \n    errors = False  \n    custOrd.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"custOrd {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating custOrd  \ncustOrd validated  \n  \nValidating custOrd  \nThe key sequence 'AAAAA' in Keyref fails to refer to some key.  \ncustOrd did not validate  \n```"
  syntax:
    content: public static class Extensions
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  id: GetSchemaInfo(System.Xml.Linq.XAttribute@)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: GetSchemaInfo(XAttribute)
  nameWithType: Extensions.GetSchemaInfo(XAttribute)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XAttribute)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "获取验证的属性的架构验证信息集 (PSVI)。"
  remarks: "你可以使用<xref:System.Xml.Schema.IXmlSchemaInfo>返回此方法来确定验证的属性的某些特征。</xref:System.Xml.Schema.IXmlSchemaInfo> 例如，你可以确定属性是否来自 XSD 中的默认属性值。       你使用<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A>属性来获取部分验证类型 (<xref:System.Xml.Schema.XmlSchemaAttribute>)。</xref:System.Xml.Schema.XmlSchemaAttribute> </xref:System.Xml.Schema.IXmlSchemaInfo.SchemaAttribute%2A> 可用于重新验证某个属性，而无需验证整个文档。       此属性的示例，请参阅<xref:System.Xml.Schema.Extensions.Validate%2A>。</xref:System.Xml.Schema.Extensions.Validate%2A>"
  syntax:
    content: public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XAttribute source);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "<xref:System.Xml.Linq.XAttribute>已经过以前验证。</xref:System.Xml.Linq.XAttribute>"
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "A <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref>包含<xref:System.Xml.Linq.XAttribute>.</xref:System.Xml.Linq.XAttribute>的架构验证信息集"
  overload: System.Xml.Schema.Extensions.GetSchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  id: GetSchemaInfo(System.Xml.Linq.XElement@)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: GetSchemaInfo(XElement)
  nameWithType: Extensions.GetSchemaInfo(XElement)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XElement)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "获取已验证元素的架构验证信息集 (PSVI)。"
  remarks: "你可以使用<xref:System.Xml.Schema.IXmlSchemaInfo>返回此方法以确定已验证元素的某些特征。</xref:System.Xml.Schema.IXmlSchemaInfo> 例如，你可以确定元素的动态架构类型。       你使用<xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A>属性来获取部分验证类型 (<xref:System.Xml.Schema.XmlSchemaElement>)。</xref:System.Xml.Schema.XmlSchemaElement> </xref:System.Xml.Schema.IXmlSchemaInfo.SchemaElement%2A> 可用于重新具有其根处的元素的子树验证而无需验证整个文档。       此属性的示例，请参阅<xref:System.Xml.Schema.Extensions.Validate%2A>。</xref:System.Xml.Schema.Extensions.Validate%2A>"
  example:
  - "The following example populates the tree with a PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  \n  \n```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n    string xsdMarkup =  \n         @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n   <xsd:simpleType name='GCType'>  \n    <xsd:restriction base='xsd:token'>  \n     <xsd:enumeration value='AAA'/>  \n     <xsd:enumeration value='BBB'/>  \n    </xsd:restriction>  \n   </xsd:simpleType>  \n   <xsd:element name='Root'>  \n    <xsd:complexType>  \n     <xsd:sequence>  \n      <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n       <xsd:complexType>  \n        <xsd:sequence>  \n         <xsd:element name='GrandChild1' type='GCType'/>  \n         <xsd:element name='GrandChild2' type='GCType'/>  \n         <xsd:element name='GrandChild3' type='GCType'/>  \n        </xsd:sequence>  \n       </xsd:complexType>  \n      </xsd:element>  \n     </xsd:sequence>  \n    </xsd:complexType>  \n   </xsd:element>  \n  </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XElement(\"Child1\",  \n                new XElement(\"GrandChild1\", \"AAA\"),  \n                new XElement(\"GrandChild2\", \"ZZZ\"),  \n                new XElement(\"GrandChild3\", \"ZZZ\")  \n            )  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:simpleType name='GCType'>  \n            <xsd:restriction base='xsd:token'>  \n                <xsd:enumeration value='AAA'/>  \n                <xsd:enumeration value='BBB'/>  \n            </xsd:restriction>  \n        </xsd:simpleType>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                        <xsd:complexType>  \n                            <xsd:sequence>  \n                                <xsd:element name='GrandChild1' type='GCType'/>  \n                                <xsd:element name='GrandChild2' type='GCType'/>  \n                                <xsd:element name='GrandChild3' type='GCType'/>  \n                            </xsd:sequence>  \n                        </xsd:complexType>  \n                    </xsd:element>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>  \n            <GrandChild1>AAA</GrandChild1>  \n            <GrandChild2>ZZZ</GrandChild2>  \n            <GrandChild3>ZZZ</GrandChild3>  \n        </Child1>  \n    </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \nThe 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \nThe 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \ndoc1 did not validate  \nInvalid Element /Root  \nInvalid Element /Root/Child1  \nInvalid Element /Root/Child1/GrandChild2  \nInvalid Element /Root/Child1/GrandChild3  \n```"
  syntax:
    content: public static System.Xml.Schema.IXmlSchemaInfo GetSchemaInfo (this System.Xml.Linq.XElement source);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "<xref:System.Xml.Linq.XElement>已经过以前验证。</xref:System.Xml.Linq.XElement>"
    return:
      type: System.Xml.Schema.IXmlSchemaInfo
      description: "A <xref href=&quot;System.Xml.Schema.IXmlSchemaInfo&quot;> </xref>包含<xref:System.Xml.Linq.XElement>.</xref:System.Xml.Linq.XElement>的架构验证信息集 (PSVI)"
  overload: System.Xml.Schema.Extensions.GetSchemaInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "此方法验证<xref:System.Xml.Linq.XDocument>符合中的 XSD <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Linq.XDocument>"
  remarks: "此扩展方法验证<xref:System.Xml.Linq.XDocument>符合<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet>中的架构内容模型</xref:System.Xml.Linq.XDocument>"
  example:
  - "The following example creates an <xref:System.Xml.Schema.XmlSchemaSet>, then validates two <xref:System.Xml.Linq.XDocument> objects against the schema set. One of the documents is valid, the other is not.  \n  \n```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child2\", \"content1\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     });  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'/>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>content1</Child1>  \n        <Child2>content2</Child2>  \n    </Root>  \n  \n    Dim doc2 As XDocument = _  \n    <?xml version='1.0'?>  \n    <Root>  \n        <Child1>content1</Child1>  \n        <Child3>content1</Child3>  \n    </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XDocument
      description: "<xref:System.Xml.Linq.XDocument>验证。</xref:System.Xml.Linq.XDocument>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>以对进行验证。"
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref>读取器遇到验证错误时发生的事件。 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，将引发异常时验证错误。"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "XML 架构定义语言 (XSD) 验证发生错误时引发。"
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "此方法验证<xref:System.Xml.Linq.XAttribute>符合指定<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;></xref>和<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Linq.XAttribute>"
  remarks: "你可以使用此方法以验证<xref:System.Xml.Linq.XAttribute>符合架构。</xref:System.Xml.Linq.XAttribute> 通常，当您修改了属性，并且你想要确保它仍然其架构相符，可使用此方法。 无法验证整个文档，但是它将只验证该属性缩短处理时间。       如果你通过`null`为`validationEventHandler`，此方法将引发异常时验证错误。 验证警告不会引发异常。       若要验证属性，你使用<xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>的实例 你可以获取此实例以各种方式。 如下所示的简单方法是︰ 1。  验证文档符合架构。      2.  通过调用添加的架构验证信息集 (PSVI)<xref:System.Xml.Schema.Extensions.Validate%2A>扩展方法。</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  调用<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>扩展方法来检索用于实现<xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo>的对象</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 从所检索到的对象，你可以获取<xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>          -如果你获取<xref:System.Xml.Schema.XmlSchemaObject><xref:System.Xml.Linq.XElement>的类型将是<xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> 、</xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -如果你获取<xref:System.Xml.Schema.XmlSchemaObject><xref:System.Xml.Linq.XAttribute>的类型将是<xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> 、</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       实例后<xref:System.Xml.Schema.XmlSchemaObject>，你可以使用此方法来验证属性。</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:simpleContent>  \n          <xsd:extension base='xsd:string'>  \n           <xsd:attribute name='Lang' use='required'>  \n            <xsd:simpleType>  \n             <xsd:restriction base='xsd:token'>  \n              <xsd:enumeration value='C#'/>  \n              <xsd:enumeration value='VB'/>  \n             </xsd:restriction>  \n            </xsd:simpleType>  \n           </xsd:attribute>  \n          </xsd:extension>  \n         </xsd:simpleContent>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XAttribute(\"Lang\", \"C#\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1 ...\");  \nbool errors = false;  \ndoc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Lang attribute ...\");  \nXAttribute lang = doc1.Root.Attribute(\"Lang\");  \n  \nerrors = false;  \nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// the following makes the Lang attribute invalid according to the schema  \nlang.Value = \"VC\";  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Lang attribute ...\");  \n  \nerrors = false;  \nlang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n      <?xml version='1.0'?>  \n      <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n          <xsd:element name='Root'>  \n              <xsd:complexType>  \n                  <xsd:simpleContent>  \n                      <xsd:extension base='xsd:string'>  \n                          <xsd:attribute name='Lang' use='required'>  \n                              <xsd:simpleType>  \n                                  <xsd:restriction base='xsd:token'>  \n                                      <xsd:enumeration value='C#'/>  \n                                      <xsd:enumeration value='VB'/>  \n                                  </xsd:restriction>  \n                              </xsd:simpleType>  \n                          </xsd:attribute>  \n                      </xsd:extension>  \n                  </xsd:simpleContent>  \n              </xsd:complexType>  \n          </xsd:element>  \n      </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root Lang='C#'/>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n    Dim lang As XAttribute = doc1.Root.Attribute(\"Lang\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    ' the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\"  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Lang attribute ...  \nlang validated  \n  \nValidating Lang attribute ...  \nThe 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  \nlang did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "<xref:System.Xml.Linq.XAttribute>验证。</xref:System.Xml.Linq.XAttribute>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> ，它指定要验证的子树。"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>以对进行验证。"
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref>读取器遇到验证错误时发生的事件。 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，将引发异常时验证错误。"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "XML 架构定义语言 (XSD) 验证发生错误时引发。"
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "验证<xref:System.Xml.Linq.XDocument>符合中的 XSD <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，还可以选择填充 XML 树与架构验证信息集 (PSVI)。</xref:System.Xml.Linq.XDocument>"
  remarks: "此扩展方法验证<xref:System.Xml.Linq.XDocument>符合<xref:System.Xml.Schema.XmlSchemaSet>.</xref:System.Xml.Schema.XmlSchemaSet>中的架构内容模型</xref:System.Xml.Linq.XDocument>       如果`addSchemaInfo`是`true`，此方法使用填充 XML 树的架构验证信息集 (PSVI)。       有两个步骤填充具有 PSVI 的 XML 树。      1.  首先，将批注添加到工作树，以使您能够调用中的所有节点<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>或<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>元素或在树中的属性。</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> </xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>      2.  其次，将默认元素和 XSD 中定义的属性添加到 XML 树中。 通过调用之一<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>方法，你可以决定是否将特定元素或属性已添加从 XSD 作为默认元素或属性。</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>"
  example:
  - "The following example contains an XSD that defines the `Child2` element with an `Att1` attribute with a default value. After successfully validating the document, the attribute with the default value is added to the XML tree. Note that the default attribute is not added to `doc2`, which does not validate against the schema.  \n  \n```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:simpleContent>  \n             <xsd:extension base='xsd:string'>  \n              <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n             </xsd:extension>  \n            </xsd:simpleContent>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"c1\"),  \n        new XElement(\"Child2\", \"c2\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                           {  \n                               Console.WriteLine(\"{0}\", e.Message);  \n                               errors = true;  \n                           }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc1:\");  \nConsole.WriteLine(doc1);  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc2:\");  \nConsole.WriteLine(doc2);  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n    <?xml version='1.0'?>  \n    <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n        <xsd:element name='Root'>  \n            <xsd:complexType>  \n                <xsd:sequence>  \n                    <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                    <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n                        <xsd:complexType>  \n                            <xsd:simpleContent>  \n                                <xsd:extension base='xsd:string'>  \n                                    <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n                                </xsd:extension>  \n                            </xsd:simpleContent>  \n                        </xsd:complexType>  \n                    </xsd:element>  \n                </xsd:sequence>  \n            </xsd:complexType>  \n        </xsd:element>  \n    </xsd:schema>  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root>  \n                                <Child1>c1</Child1>  \n                                <Child2>c2</Child2>  \n                            </Root>  \n    Dim doc2 As XDocument = <?xml version='1.0'?>  \n                            <Root>  \n                                <Child1>content1</Child1>  \n                                <Child3>content1</Child3>  \n                            </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc1:\")  \n    Console.WriteLine(doc1)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc2:\")  \n    Console.WriteLine(doc2)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n  \nContents of doc1:  \n<Root>  \n  <Child1>c1</Child1>  \n  <Child2 Att1=\"Att1 Default Value\">c2</Child2>  \n</Root>  \n  \nContents of doc2:  \n<Root>  \n  <Child1>content1</Child1>  \n  <Child3>content1</Child3>  \n</Root>  \n```  \n  \n The following example populates the tree with PSVI. After validation, it prints all elements and attributes in the tree that are invalid according to the PSVI.  \n  \n```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n   string xsdMarkup =  \n        @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n           <xsd:simpleType name='GCType'>  \n            <xsd:restriction base='xsd:token'>  \n             <xsd:enumeration value='AAA'/>  \n             <xsd:enumeration value='BBB'/>  \n            </xsd:restriction>  \n           </xsd:simpleType>  \n           <xsd:element name='Root'>  \n            <xsd:complexType>  \n             <xsd:sequence>  \n              <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n               <xsd:complexType>  \n                <xsd:sequence>  \n                 <xsd:element name='GrandChild1' type='GCType'/>  \n                 <xsd:element name='GrandChild2' type='GCType'/>  \n                 <xsd:element name='GrandChild3' type='GCType'/>  \n                </xsd:sequence>  \n               </xsd:complexType>  \n              </xsd:element>  \n             </xsd:sequence>  \n            </xsd:complexType>  \n           </xsd:element>  \n          </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XElement(\"Child1\",  \n                new XElement(\"GrandChild1\", \"AAA\"),  \n                new XElement(\"GrandChild2\", \"ZZZ\"),  \n                new XElement(\"GrandChild3\", \"ZZZ\")  \n            )  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n        {  \n            Console.WriteLine(e.Message);  \n            errors = true;  \n        }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:simpleType name='GCType'>  \n                <xsd:restriction base='xsd:token'>  \n                    <xsd:enumeration value='AAA'/>  \n                    <xsd:enumeration value='BBB'/>  \n                </xsd:restriction>  \n            </xsd:simpleType>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:sequence>  \n                                    <xsd:element name='GrandChild1' type='GCType'/>  \n                                    <xsd:element name='GrandChild2' type='GCType'/>  \n                                    <xsd:element name='GrandChild3' type='GCType'/>  \n                                </xsd:sequence>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>  \n                <GrandChild1>AAA</GrandChild1>  \n                <GrandChild2>ZZZ</GrandChild2>  \n                <GrandChild3>ZZZ</GrandChild3>  \n            </Child1>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \nThe 'GrandChild2' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \nThe 'GrandChild3' element is invalid - The value 'ZZZ' is invalid according to its datatype 'GCType' - The Enumeration constraint failed.  \ndoc1 did not validate  \nInvalid Element /Root  \nInvalid Element /Root/Child1  \nInvalid Element /Root/Child1/GrandChild2  \nInvalid Element /Root/Child1/GrandChild3  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XDocument source, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XDocument
      description: "<xref:System.Xml.Linq.XDocument>验证。</xref:System.Xml.Linq.XDocument>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>以对进行验证。"
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref>读取器遇到验证错误时发生的事件。 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，将引发异常时验证错误。"
    - id: addSchemaInfo
      type: System.Boolean
      description: "A <xref:System.Boolean>，该值指示是否填充架构验证信息集 (PSVI)。</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "XML 架构定义语言 (XSD) 验证发生错误时引发。"
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  id: Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "此方法验证<xref:System.Xml.Linq.XElement>子树是否符合指定<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;></xref>和<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.Linq.XElement>"
  remarks: "你可以使用此方法验证子树 (与<xref:System.Xml.Linq.XElement>其根部) 是否与架构相符。</xref:System.Xml.Linq.XElement> 通常，当您修改了子树中，并且你想要确保它仍然其架构相符，可使用此方法。 无法验证整个文档，但是它将只验证缩短处理时间子树。       如果你通过`null`为`validationEventHandler`，则此方法将引发异常时验证错误。 验证警告不会引发异常。       若要验证子树，你使用<xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>的实例 你可以获取此实例以各种方式。 如下所示的简单方法是︰ 1。  验证文档符合架构。      2.  通过调用添加的架构验证信息集 (PSVI)<xref:System.Xml.Schema.Extensions.Validate%2A>扩展方法。</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  调用<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>扩展方法来检索用于实现<xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo>的对象</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 从所检索到的对象，你可以获取<xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>          -如果你获取<xref:System.Xml.Schema.XmlSchemaObject><xref:System.Xml.Linq.XElement>的类型将是<xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> 、</xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -如果你获取<xref:System.Xml.Schema.XmlSchemaObject><xref:System.Xml.Linq.XAttribute>的类型将是<xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> 、</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       实例后<xref:System.Xml.Schema.XmlSchemaObject>，你可以使用此方法验证子树。</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:sequence>  \n             <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  \n             <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  \n            </xsd:sequence>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\",  \n            new XElement(\"GrandChild1\", \"gc\"),  \n            new XElement(\"GrandChild2\", \"gc\")  \n        )  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1 ...\");  \nbool errors = false;  \ndoc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Child1 after first edit ...\");  \nXElement child1 = doc1.Element(\"Root\").Element(\"Child1\");  \nchild1.Add(new XElement(\"GrandChild2\", \"gc\"));  \nerrors = false;  \nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"child1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \n// the following makes the Child1 element invalid according to the schema  \nchild1.Add(new XElement(\"GrandChild3\", \"gc\"));  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating Child1 after second edit ...\");  \nchild1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    });  \nConsole.WriteLine(\"child1 {0}\", errors ? \"did not validate\" : \"validated\");  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:sequence>  \n                                    <xsd:element name='GrandChild1' minOccurs='1' maxOccurs='1'/>  \n                                    <xsd:element name='GrandChild2' minOccurs='1' maxOccurs='2'/>  \n                                </xsd:sequence>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>  \n                <GrandChild1>gc</GrandChild1>  \n                <GrandChild2>gc</GrandChild2>  \n            </Child1>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Child1 after first edit ...\")  \n    Dim child1 As XElement = doc1.Element(\"Root\").Element(\"Child1\")  \n    child1.Add(<GrandChild2>gc</GrandChild2>)  \n    errors = False  \n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"child1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    ' the following makes the Child1 element invalid according to the schema  \n    child1.Add(<GrandChild3>gc</GrandChild3>)  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Child1 after second edit ...\")  \n    child1.Validate(child1.GetSchemaInfo().SchemaElement, schemas, AddressOf XSDErrors)  \n    Console.WriteLine(\"child1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Child1 after first edit ...  \nchild1 validated  \n  \nValidating Child1 after second edit ...  \nThe element 'Child1' has invalid child element 'GrandChild3'.  \nchild1 did not validate  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "<xref:System.Xml.Linq.XElement>验证。</xref:System.Xml.Linq.XElement>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> ，它指定要验证的子树。"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>以对进行验证。"
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref>读取器遇到验证错误时发生的事件。 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，将引发异常时验证错误。"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "XML 架构定义语言 (XSD) 验证发生错误时引发。"
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "验证<xref:System.Xml.Linq.XAttribute>符合指定<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;></xref>和<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，还可以选择填充 XML 树与架构验证信息集 (PSVI)。</xref:System.Xml.Linq.XAttribute>"
  remarks: "你可以使用此方法以验证<xref:System.Xml.Linq.XAttribute>符合架构。</xref:System.Xml.Linq.XAttribute> 通常，当您修改了属性，并且你想要确保它仍然其架构相符，可使用此方法。 无法验证整个文档，但是它将只验证该属性缩短处理时间。       如果`addSchemaInfo`是`true`，此方法填充具有架构验证信息集 (PSVI) 的属性。 已填充具有 PSVI 的 XML 树之后，你可以调用<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName>上验证的属性。</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A?displayProperty=fullName> 这是很有用，如果你正在编写依赖于<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>.</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>返回数据的代码       如果你通过`null`为`validationEventHandler`，则此方法将引发异常时验证错误。 验证警告不会引发异常。       若要验证属性，你使用<xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>的实例 你可以获取此实例以各种方式。 如下所示的简单方法是︰ 1。  验证文档符合架构。      2.  通过调用添加的架构验证信息集 (PSVI)<xref:System.Xml.Schema.Extensions.Validate%2A>扩展方法。</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  调用<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>扩展方法来检索用于实现<xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo>的对象</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 从所检索到的对象，你可以获取<xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>          -如果你获取<xref:System.Xml.Schema.XmlSchemaObject><xref:System.Xml.Linq.XElement>的类型将是<xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> 、</xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -如果你获取<xref:System.Xml.Schema.XmlSchemaObject><xref:System.Xml.Linq.XAttribute>的类型将是<xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> 、</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       实例后<xref:System.Xml.Schema.XmlSchemaObject>，你可以使用此方法来验证属性。</xref:System.Xml.Schema.XmlSchemaObject>"
  example:
  - "```c#  \n  \n                static void DumpInvalidNodes(XElement el)  \n{  \n    if (el.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n        Console.WriteLine(\"Invalid Element {0}\",  \n            el.AncestorsAndSelf()  \n            .InDocumentOrder()  \n            .Aggregate(\"\", (s, i) => s + \"/\" + i.Name.ToString()));  \n    foreach (XAttribute att in el.Attributes())  \n        if (att.GetSchemaInfo().Validity != XmlSchemaValidity.Valid)  \n            Console.WriteLine(\"Invalid Attribute {0}\",  \n                att  \n                .Parent  \n                .AncestorsAndSelf()  \n                .InDocumentOrder()  \n                .Aggregate(\"\",  \n                    (s, i) => s + \"/\" + i.Name.ToString()) + \"/@\" + att.Name.ToString()  \n                );  \n    foreach (XElement child in el.Elements())  \n        DumpInvalidNodes(child);  \n}  \n  \nstatic void Main(string[] args)  \n{  \n    string xsdMarkup =  \n        @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:simpleContent>  \n          <xsd:extension base='xsd:string'>  \n           <xsd:attribute name='Lang' use='required'>  \n            <xsd:simpleType>  \n             <xsd:restriction base='xsd:token'>  \n              <xsd:enumeration value='C#'/>  \n              <xsd:enumeration value='VB'/>  \n             </xsd:restriction>  \n            </xsd:simpleType>  \n           </xsd:attribute>  \n          </xsd:extension>  \n         </xsd:simpleContent>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \n  \n    XmlSchemaSet schemas = new XmlSchemaSet();  \n    schemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \n    XDocument doc1 = new XDocument(  \n        new XElement(\"Root\",  \n            new XAttribute(\"Lang\", \"C#\")  \n        )  \n    );  \n  \n    Console.WriteLine(\"Validating doc1 ...\");  \n    bool errors = false;  \n    doc1.Validate(schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n  \n    Console.WriteLine();  \n    Console.WriteLine(\"Validating Lang attribute ...\");  \n    XAttribute lang = doc1.Element(\"Root\").Attribute(\"Lang\");  \n  \n    errors = false;  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n  \n    // the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\";  \n  \n    Console.WriteLine();  \n    Console.WriteLine(\"Validating Lang attribute ...\");  \n  \n    errors = false;  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, (sender, e) =>  \n    {  \n        Console.WriteLine(e.Message);  \n        errors = true;  \n    }, true);  \n    Console.WriteLine(\"lang {0}\", errors ? \"did not validate\" : \"validated\");  \n    DumpInvalidNodes(doc1.Root);  \n}  \n```  \n  \n```vb  \n  \n                Private Sub DumpInvalidNodes(ByVal el As XElement)  \n    If el.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n        Console.WriteLine(\"Invalid Element {0}\", _  \n            el _  \n            .AncestorsAndSelf _  \n            .InDocumentOrder() _  \n            .Aggregate(\"\", _  \n                Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()))  \n    End If  \n    For Each att As XAttribute In el.Attributes()  \n        If att.GetSchemaInfo.Validity <> XmlSchemaValidity.Valid Then  \n            Console.WriteLine(\"Invalid Attribute {0}\", _  \n                att _  \n                .Parent _  \n                .AncestorsAndSelf() _  \n                .InDocumentOrder() _  \n                .Aggregate(\"\", _  \n                    Function(ByVal s, ByVal i) s + \"/\" + i.Name.ToString()) + _  \n                    \"/@\" + att.Name.ToString())  \n        End If  \n    Next  \n    For Each child As XElement In el.Elements()  \n        DumpInvalidNodes(child)  \n    Next  \nEnd Sub  \n  \nDim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:simpleContent>  \n                        <xsd:extension base='xsd:string'>  \n                            <xsd:attribute name='Lang' use='required'>  \n                                <xsd:simpleType>  \n                                    <xsd:restriction base='xsd:token'>  \n                                        <xsd:enumeration value='C#'/>  \n                                        <xsd:enumeration value='VB'/>  \n                                    </xsd:restriction>  \n                                </xsd:simpleType>  \n                            </xsd:attribute>  \n                        </xsd:extension>  \n                    </xsd:simpleContent>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = <?xml version='1.0'?>  \n                            <Root Lang='C#'/>  \n  \n    Console.WriteLine(\"Validating doc1 ...\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n    Dim lang As XAttribute = doc1.Element(\"Root\").Attribute(\"Lang\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \n  \n    ' the following makes the Lang attribute invalid according to the schema  \n    lang.Value = \"VC\"  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating Lang attribute ...\")  \n  \n    errors = False  \n    lang.Validate(lang.GetSchemaInfo().SchemaAttribute, schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"lang {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n    DumpInvalidNodes(doc1.Root)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1 ...  \ndoc1 validated  \n  \nValidating Lang attribute ...  \nlang validated  \n  \nValidating Lang attribute ...  \nThe 'Lang' attribute is invalid - The value 'VC' is invalid according to its datatype 'Token' - The Enumeration constraint failed.  \nlang did not validate  \nInvalid Attribute /Root/@Lang  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XAttribute source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XAttribute
      description: "<xref:System.Xml.Linq.XAttribute>验证。</xref:System.Xml.Linq.XAttribute>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> ，它指定要验证的子树。"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>以对进行验证。"
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref>读取器遇到验证错误时发生的事件。 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，将引发异常时验证错误。"
    - id: addSchemaInfo
      type: System.Boolean
      description: "A <xref:System.Boolean>，该值指示是否填充架构验证信息集 (PSVI)。</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "XML 架构定义语言 (XSD) 验证发生错误时引发。"
  platform:
  - net462
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  id: Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  langs:
  - csharp
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  type: Method
  assemblies:
  - System.Xml.Linq
  namespace: System.Xml.Schema
  summary: "验证<xref:System.Xml.Linq.XElement>子树是否符合指定<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;></xref>和<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>，还可以选择填充 XML 树与架构验证信息集 (PSVI)。</xref:System.Xml.Linq.XElement>"
  remarks: "你可以使用此方法验证子树 (与<xref:System.Xml.Linq.XElement>根目录下的子树) 是否与架构相符。</xref:System.Xml.Linq.XElement> 通常，当您修改了子树中，并且你想要确保它仍然其架构相符，可使用此方法。 无法验证整个文档，但是它将只验证缩短处理时间子树。       如果`addSchemaInfo`是`true`，则此方法使用填充 XML 树的架构验证信息集 (PSVI)。       有两个方面的填充具有 PSVI 的 XML 树。       首先，批注添加到树中的所有节点以便现在，您可以调用<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>元素或在树中的属性。</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>       其次，将默认元素和 XSD 中定义的属性添加到 XML 树中。 通过调用之一<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>方法，你可以决定是否将特定元素或属性已添加从 XSD 作为默认元素或属性。</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>       如果你通过`null`为`validationEventHandler`，则此方法将引发异常时验证错误。 验证警告不会引发异常。       若要验证子树，你使用<xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>的实例 你可以获取此实例以各种方式。 如下所示的简单方法是︰ 1。  验证文档符合架构。      2.  通过调用添加的架构验证信息集 (PSVI)<xref:System.Xml.Schema.Extensions.Validate%2A>扩展方法。</xref:System.Xml.Schema.Extensions.Validate%2A>      3.  调用<xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A>扩展方法来检索用于实现<xref:System.Xml.Schema.IXmlSchemaInfo>.</xref:System.Xml.Schema.IXmlSchemaInfo>的对象</xref:System.Xml.Schema.Extensions.GetSchemaInfo%2A> 从所检索到的对象，你可以获取<xref:System.Xml.Schema.XmlSchemaObject>.</xref:System.Xml.Schema.XmlSchemaObject>          -如果你获取<xref:System.Xml.Schema.XmlSchemaObject><xref:System.Xml.Linq.XElement>的类型将是<xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> 、</xref:System.Xml.Linq.XElement> </xref:System.Xml.Schema.XmlSchemaObject>          -如果你获取<xref:System.Xml.Schema.XmlSchemaObject><xref:System.Xml.Linq.XAttribute>的类型将是<xref:System.Xml.Schema.XmlSchemaAttribute>.</xref:System.Xml.Schema.XmlSchemaAttribute> 、</xref:System.Xml.Linq.XAttribute> </xref:System.Xml.Schema.XmlSchemaObject>       后<xref:System.Xml.Schema.XmlSchemaObject>，你可以使用此方法以验证子树..</xref:System.Xml.Schema.XmlSchemaObject>实例"
  example:
  - "```c#  \n  \n                string xsdMarkup =  \n    @\"<xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n       <xsd:element name='Root'>  \n        <xsd:complexType>  \n         <xsd:sequence>  \n          <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n          <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n           <xsd:complexType>  \n            <xsd:simpleContent>  \n             <xsd:extension base='xsd:string'>  \n              <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n             </xsd:extension>  \n            </xsd:simpleContent>  \n           </xsd:complexType>  \n          </xsd:element>  \n         </xsd:sequence>  \n        </xsd:complexType>  \n       </xsd:element>  \n      </xsd:schema>\";  \nXmlSchemaSet schemas = new XmlSchemaSet();  \nschemas.Add(\"\", XmlReader.Create(new StringReader(xsdMarkup)));  \n  \nXDocument doc1 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"c1\"),  \n        new XElement(\"Child2\", \"c2\")  \n    )  \n);  \n  \nXDocument doc2 = new XDocument(  \n    new XElement(\"Root\",  \n        new XElement(\"Child1\", \"content1\"),  \n        new XElement(\"Child3\", \"content1\")  \n    )  \n);  \n  \nConsole.WriteLine(\"Validating doc1\");  \nbool errors = false;  \ndoc1.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc1 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Validating doc2\");  \nerrors = false;  \ndoc2.Validate(schemas, (o, e) =>  \n                     {  \n                         Console.WriteLine(\"{0}\", e.Message);  \n                         errors = true;  \n                     }, true);  \nConsole.WriteLine(\"doc2 {0}\", errors ? \"did not validate\" : \"validated\");  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc1:\");  \nConsole.WriteLine(doc1);  \n  \nConsole.WriteLine();  \nConsole.WriteLine(\"Contents of doc2:\");  \nConsole.WriteLine(doc2);  \n```  \n  \n```vb  \n  \n                Dim errors As Boolean = False  \n  \nPrivate Sub XSDErrors(ByVal o As Object, ByVal e As ValidationEventArgs)  \n    Console.WriteLine(\"{0}\", e.Message)  \n    errors = True  \nEnd Sub  \n  \nSub Main()  \n    Dim xsdMarkup As XDocument = _  \n        <?xml version='1.0'?>  \n        <xsd:schema xmlns:xsd='http://www.w3.org/2001/XMLSchema'>  \n            <xsd:element name='Root'>  \n                <xsd:complexType>  \n                    <xsd:sequence>  \n                        <xsd:element name='Child1' minOccurs='1' maxOccurs='1'/>  \n                        <xsd:element name='Child2' minOccurs='1' maxOccurs='1'>  \n                            <xsd:complexType>  \n                                <xsd:simpleContent>  \n                                    <xsd:extension base='xsd:string'>  \n                                        <xsd:attribute name='Att1' default='Att1 Default Value'/>  \n                                    </xsd:extension>  \n                                </xsd:simpleContent>  \n                            </xsd:complexType>  \n                        </xsd:element>  \n                    </xsd:sequence>  \n                </xsd:complexType>  \n            </xsd:element>  \n        </xsd:schema>  \n    Dim schemas As XmlSchemaSet = New XmlSchemaSet()  \n    schemas.Add(\"\", xsdMarkup.CreateReader)  \n  \n    Dim doc1 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>c1</Child1>  \n            <Child2>c2</Child2>  \n        </Root>  \n  \n    Dim doc2 As XDocument = _  \n        <?xml version='1.0'?>  \n        <Root>  \n            <Child1>content1</Child1>  \n            <Child3>content1</Child3>  \n        </Root>  \n  \n    Console.WriteLine(\"Validating doc1\")  \n    errors = False  \n    doc1.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc1 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Validating doc2\")  \n    errors = False  \n    doc2.Validate(schemas, AddressOf XSDErrors, True)  \n    Console.WriteLine(\"doc2 {0}\", IIf(errors, \"did not validate\", \"validated\"))  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc1:\")  \n    Console.WriteLine(doc1)  \n  \n    Console.WriteLine()  \n    Console.WriteLine(\"Contents of doc2:\")  \n    Console.WriteLine(doc2)  \nEnd Sub  \n```  \n  \n This example produces the following output:  \n  \n```  \nValidating doc1  \ndoc1 validated  \n  \nValidating doc2  \nThe element 'Root' has invalid child element 'Child3'. List of possible elements expected: 'Child2'.  \ndoc2 did not validate  \n  \nContents of doc1:  \n<Root>  \n  <Child1>c1</Child1>  \n  <Child2 Att1=\"Att1 Default Value\">c2</Child2>  \n</Root>  \n  \nContents of doc2:  \n<Root>  \n  <Child1>content1</Child1>  \n  <Child3>content1</Child3>  \n</Root>  \n```"
  syntax:
    content: public static void Validate (this System.Xml.Linq.XElement source, System.Xml.Schema.XmlSchemaObject partialValidationType, System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.ValidationEventHandler validationEventHandler, bool addSchemaInfo);
    parameters:
    - id: source
      type: System.Xml.Linq.XElement
      description: "<xref:System.Xml.Linq.XElement>验证。</xref:System.Xml.Linq.XElement>"
    - id: partialValidationType
      type: System.Xml.Schema.XmlSchemaObject
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaObject&quot;> </xref> ，它指定要验证的子树。"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>以对进行验证。"
    - id: validationEventHandler
      type: System.Xml.Schema.ValidationEventHandler
      description: "A <xref href=&quot;System.Xml.Schema.ValidationEventHandler&quot;> </xref>读取器遇到验证错误时发生的事件。 如果<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，将引发异常时验证错误。"
    - id: addSchemaInfo
      type: System.Boolean
      description: "A <xref:System.Boolean>，该值指示是否填充架构验证信息集 (PSVI)。</xref:System.Boolean>"
  overload: System.Xml.Schema.Extensions.Validate*
  exceptions:
  - type: System.Xml.Schema.XmlSchemaValidationException
    commentId: T:System.Xml.Schema.XmlSchemaValidationException
    description: "XML 架构定义语言 (XSD) 验证发生错误时引发。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.Schema.XmlSchemaValidationException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaValidationException
  nameWithType: XmlSchemaValidationException
  fullName: System.Xml.Schema.XmlSchemaValidationException
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XAttribute@)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo(XAttribute)
  nameWithType: Extensions.GetSchemaInfo(XAttribute)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XAttribute)
- uid: System.Xml.Schema.IXmlSchemaInfo
  parent: System.Xml.Schema
  isExternal: false
  name: IXmlSchemaInfo
  nameWithType: IXmlSchemaInfo
  fullName: System.Xml.Schema.IXmlSchemaInfo
- uid: System.Xml.Linq.XAttribute
  parent: System.Xml.Linq
  isExternal: true
  name: XAttribute
  nameWithType: XAttribute
  fullName: System.Xml.Linq.XAttribute
- uid: System.Xml.Schema.Extensions.GetSchemaInfo(System.Xml.Linq.XElement@)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo(XElement)
  nameWithType: Extensions.GetSchemaInfo(XElement)
  fullName: System.Xml.Schema.Extensions.GetSchemaInfo(XElement)
- uid: System.Xml.Linq.XElement
  parent: System.Xml.Linq
  isExternal: true
  name: XElement
  nameWithType: XElement
  fullName: System.Xml.Linq.XElement
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Linq.XDocument
  parent: System.Xml.Linq
  isExternal: true
  name: XDocument
  nameWithType: XDocument
  fullName: System.Xml.Linq.XDocument
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.Schema.ValidationEventHandler
  parent: System.Xml.Schema
  isExternal: false
  name: ValidationEventHandler
  nameWithType: ValidationEventHandler
  fullName: System.Xml.Schema.ValidationEventHandler
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Schema.XmlSchemaObject
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaObject
  nameWithType: XmlSchemaObject
  fullName: System.Xml.Schema.XmlSchemaObject
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XDocument@,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XDocument,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler)
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XAttribute@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XAttribute,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Xml.Schema.Extensions.Validate(System.Xml.Linq.XElement@,System.Xml.Schema.XmlSchemaObject,System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.ValidationEventHandler,System.Boolean)
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  nameWithType: Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
  fullName: System.Xml.Schema.Extensions.Validate(XElement,XmlSchemaObject,XmlSchemaSet,ValidationEventHandler,Boolean)
- uid: System.Xml.Schema.Extensions.GetSchemaInfo*
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: GetSchemaInfo
  nameWithType: Extensions.GetSchemaInfo
- uid: System.Xml.Schema.Extensions.Validate*
  parent: System.Xml.Schema.Extensions
  isExternal: false
  name: Validate
  nameWithType: Extensions.Validate
