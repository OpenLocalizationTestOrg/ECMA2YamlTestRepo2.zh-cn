### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Eventing.EventProvider
  id: EventProvider
  children:
  - System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)
  - System.Diagnostics.Eventing.EventProvider.Close
  - System.Diagnostics.Eventing.EventProvider.CreateActivityId
  - System.Diagnostics.Eventing.EventProvider.Dispose
  - System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)
  - System.Diagnostics.Eventing.EventProvider.Finalize
  - System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError
  - System.Diagnostics.Eventing.EventProvider.IsEnabled
  - System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)
  - System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)
  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])
  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)
  - System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)
  - System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)
  - System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)
  - System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])
  - System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)
  langs:
  - csharp
  name: EventProvider
  nameWithType: EventProvider
  fullName: System.Diagnostics.Eventing.EventProvider
  type: Class
  summary: "此类用于写入事件。"
  remarks: "若要使用事件使用编写<xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>和<xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A>方法，事件都必须定义清单; 中写入使用事件<xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A>方法不需要清单。</xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A> </xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> </xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>       事件可以包含以下托管的数据类型︰ bool 的布尔值的字节的字符-十进制-双击浮点型的 Guid 的 int-IntPtr-长-sbyte-短-字符串-uint-UInt64 如果你的清单中的事件使用`Boolean`，类型不能写入数据元素使用`Boolean`托管代码中的数据类型。 `Boolean`类型在清单中需要 4 字节值，和一个`Boolean`在托管代码中的数据类型为 1 字节。 相反，你必须使用`int`写值的数据类型。 如果你想要登录`Boolean`值，请使用 UInt8 类型在清单中。"
  syntax:
    content: 'public class EventProvider : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)
  id: '#ctor(System.Guid)'
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: EventProvider(Guid)
  nameWithType: EventProvider.EventProvider(Guid)
  fullName: System.Diagnostics.Eventing.EventProvider.EventProvider(Guid)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.Eventing.EventProvider&quot;></xref>类。"
  remarks: "注册提供程序。 若要删除的注册完成后，调用<xref:System.Diagnostics.Eventing.EventProvider.Close%2A>方法。</xref:System.Diagnostics.Eventing.EventProvider.Close%2A>"
  syntax:
    content: public EventProvider (Guid providerGuid);
    parameters:
    - id: providerGuid
      type: System.Guid
      description: "唯一标识提供程序的 Guid。"
  overload: System.Diagnostics.Eventing.EventProvider.#ctor*
  exceptions:
  - type: System.InsufficientMemoryException
    commentId: T:System.InsufficientMemoryException
    description: "没有足够的内存来完成该操作。"
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "中的类<xref href=&quot;System.Diagnostics.Eventing&quot;></xref>仅在 Windows Vista 上的命名空间工作。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> providerGuid </code>参数不能为 null。"
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "返回 ETW 子系统的错误。"
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.Close
  id: Close
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: Close()
  nameWithType: EventProvider.Close()
  fullName: System.Diagnostics.Eventing.EventProvider.Close()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "从 ETW 子系统中移除的提供程序注册并释放所有的非托管的资源。"
  remarks: "你应调用此方法完成而不是等待系统后，若要释放的资源。"
  syntax:
    content: public virtual void Close ();
    parameters: []
  overload: System.Diagnostics.Eventing.EventProvider.Close*
  exceptions:
  - type: System.ComponentModel.Win32Exception
    commentId: T:System.ComponentModel.Win32Exception
    description: "返回 ETW 子系统的错误。"
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId
  id: CreateActivityId
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: CreateActivityId()
  nameWithType: EventProvider.CreateActivityId()
  fullName: System.Diagnostics.Eventing.EventProvider.CreateActivityId()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "为提供程序创建的唯一活动标识符。"
  remarks: "这是静态方法。"
  syntax:
    content: public static Guid CreateActivityId ();
    parameters: []
    return:
      type: System.Guid
      description: "在调用时使用的唯一 Guid<xref:System.Diagnostics.Eventing.EventProvider.SetActivityId*>方法以设置为提供程序的活动标识符。</xref:System.Diagnostics.Eventing.EventProvider.SetActivityId*>"
  overload: System.Diagnostics.Eventing.EventProvider.CreateActivityId*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.Dispose
  id: Dispose
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: Dispose()
  nameWithType: EventProvider.Dispose()
  fullName: System.Diagnostics.Eventing.EventProvider.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "释放由此资源<xref href=&quot;System.Diagnostics.Eventing.EventProvider&quot;></xref>对象。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.Eventing.EventProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventProvider.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.EventProvider.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "释放由此资源<xref href=&quot;System.Diagnostics.Eventing.EventProvider&quot;></xref>对象。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "由于没有非托管的资源，此方法会忽略此参数。"
  overload: System.Diagnostics.Eventing.EventProvider.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.Finalize
  id: Finalize
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: Finalize()
  nameWithType: EventProvider.Finalize()
  fullName: System.Diagnostics.Eventing.EventProvider.Finalize()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "释放资源并执行内部清理之前通过垃圾回收回收实例。"
  syntax:
    content: ~EventProvider ();
    parameters: []
  overload: System.Diagnostics.Eventing.EventProvider.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError
  id: GetLastWriteEventError
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: GetLastWriteEventError()
  nameWithType: EventProvider.GetLastWriteEventError()
  fullName: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "获取与事件写入失败关联的最后一个错误。"
  remarks: "<xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>， <xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A>，和<xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A>方法将此值进行了设置，如果他们未能写入该事件。</xref:System.Diagnostics.Eventing.EventProvider.WriteTransferEvent%2A> </xref:System.Diagnostics.Eventing.EventProvider.WriteMessageEvent%2A> </xref:System.Diagnostics.Eventing.EventProvider.WriteEvent%2A>       这是静态方法。"
  syntax:
    content: public static System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode GetLastWriteEventError ();
    parameters: []
    return:
      type: System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode
      description: "使用值以确定事件写入失败的原因。"
  overload: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled
  id: IsEnabled
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: IsEnabled()
  nameWithType: EventProvider.IsEnabled()
  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "确定是否启用任何会话的提供程序，而不考虑用于启用提供程序的级别和关键字值。"
  remarks: "通常情况下，提供程序不调用此方法以确定是否已由会话; 启用提供程序提供程序只需写入该事件，并 ETW 确定是否将事件记录到会话。 一个提供程序可能想要调用此函数，如果提供程序需要执行额外的工作，以生成事件。 在这种情况下，调用此函数首先可以节省资源和时间。"
  syntax:
    content: public bool IsEnabled ();
    parameters: []
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果提供程序启用到任何会话; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Diagnostics.Eventing.EventProvider.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)
  id: IsEnabled(System.Byte,System.Int64)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: IsEnabled(Byte,Int64)
  nameWithType: EventProvider.IsEnabled(Byte,Int64)
  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled(Byte,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "确定任何会话是否正在从提供程序请求指定的事件。"
  remarks: "通常情况下，提供程序不调用此方法以确定是否会话请求指定的事件;提供程序只需写入该事件，并 ETW 确定是否将事件记录到会话。 一个提供程序可能想要调用此函数，如果提供程序需要执行额外的工作，以生成事件。 在这种情况下，调用此函数首先确定是否会话或不请求的事件，可以节省资源和时间。"
  syntax:
    content: public bool IsEnabled (byte level, long keywords);
    parameters:
    - id: level
      type: System.Byte
      description: "事件中包括的详细程度。"
    - id: keywords
      type: System.Int64
      description: "指定的事件类别的位掩码。 此掩码应为事件清单中定义的关键字掩码相同。"
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果任何会话正在请求指定的事件中; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Diagnostics.Eventing.EventProvider.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)
  id: SetActivityId(System.Guid@)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: SetActivityId(Guid)
  nameWithType: EventProvider.SetActivityId(Guid)
  fullName: System.Diagnostics.Eventing.EventProvider.SetActivityId(Guid)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "设置使用的当前活动标识符<xref:System.Diagnostics.Eventing.EventProvider.WriteEvent*>方法。</xref:System.Diagnostics.Eventing.EventProvider.WriteEvent*>"
  remarks: "标识符存储在线程上下文中。       请注意，在.NET framework 版本 3.5 中，你必须设置`id`此方法的参数和<xref:System.Diagnostics.CorrelationManager.ActivityId%2A>属性值设置为相同的标识符值。</xref:System.Diagnostics.CorrelationManager.ActivityId%2A> 但是，在的 framework 版本 4.0，SetActivityId 方法自动设置的相关活动标识符为你。       这是静态方法。"
  syntax:
    content: public static void SetActivityId (ref Guid id);
    parameters:
    - id: id
      type: System.Guid
      description: "唯一活动标识符，<xref:System.Diagnostics.Eventing.EventProvider.CreateActivityId*>方法返回。</xref:System.Diagnostics.Eventing.EventProvider.CreateActivityId*>"
  overload: System.Diagnostics.Eventing.EventProvider.SetActivityId*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])
  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteEvent(EventDescriptor,Object[])
  nameWithType: EventProvider.WriteEvent(EventDescriptor,Object[])
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Object[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "写入事件。 事件数据指定为对象的数组。"
  remarks: "如果调用<xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>方法，以指定事件，此方法的活动标识符从线程上下文中检索的标识符和与该事件包含它。</xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>       如果不支持的对象类型，则该方法将对象的值<xref:System.Object.ToString%2A?displayProperty=fullName>负载中的方法。</xref:System.Object.ToString%2A?displayProperty=fullName> 有关受支持的对象类型的列表，请参阅<xref:System.Diagnostics.Eventing.EventProvider>类</xref:System.Diagnostics.Eventing.EventProvider>的备注"
  example:
  - "```  \nprivate static Guid providerId = new Guid(\"{FB33FDA8-45FB-4df0-8A55-EEB4BA88E7E7}\");  \n  \nenum Keyword  \n{  \n    Read = 0x1,  \n    Write = 0x2,  \n    Local = 0x4,  \n    Remote = 0x8  \n}  \n  \nenum Level  \n{  \n    Critical = 1,  \n    Error,  \n    Warning,  \n    Information,  \n    Verbose  \n}  \n  \n    EventProvider provider = new EventProvider(providerId);  \n    EventDescriptor readEvent;  \n    string path = @\"<PATHGOESHERE>\";  \n    UInt64 bytesRead = <ASSIGNVALUE>;  \n  \n    if (provider.IsEnabled(Level.Information, (long)Keyword.Read))  \n    {  \n        unchecked  \n        {  \n            readEvent = new EventDescriptor(0x1, 0x0, 0x10, 0x4, 0x0, 0x0, (long)0x8000000000000005);  \n        }  \n  \n        if (!provider.WriteEvent(ref readEvent, new object[] { path, bytesRead }))  \n            Console.WriteLine(EventProvider.GetLastWriteEventError());  \n    }  \n  \n    provider.Close();  \n```"
  syntax:
    content: public bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, object[] eventPayload);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "实例<xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;> </xref> ，它标识要写入的事件。"
    - id: eventPayload
      type: System.Object[]
      description: "包含要写入的事件数据的对象的数组。 对象必须在清单中指定的顺序。 数组被限制为 32 对象，其中只有八个可以是字符串。 事件的最大数据大小被限制为 64 KB 减事件标头的大小。 事件的大小小于如果会话的缓冲区大小小于而且会话中包括的扩展的数据与事件的项。       此参数可以为 null。"
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件将写入; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果为 false，则调用&lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt;方法来确定失败的原因。"
  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> eventPayload </code>参数包含太多对象或字符串。"
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)
  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteEvent(EventDescriptor,String)
  nameWithType: EventProvider.WriteEvent(EventDescriptor,String)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "写入事件。 事件数据指定为字符串。"
  remarks: "如果调用<xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>方法，以指定事件，此方法的活动标识符从线程上下文中检索的标识符和与该事件包含它。</xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>       最大字符串长度为减事件标头的大小限制为 64 KB。 事件的大小小于如果会话的缓冲区大小小于而且会话中包括的扩展的数据与事件的项。"
  example:
  - "```  \nprivate static Guid providerId = new Guid(\"{FB33FDA8-45FB-4df0-8A55-EEB4BA88E7E7}\");  \n  \nEventProvider provider = new EventProvider(providerId);  \nEventDescriptor writeEvent;  \n  \nif (provider.IsEnabled())  \n{  \n     unchecked  \n     {  \n          writeEvent = new EventDescriptor(0x2, 0x0, 0x10, 0x3, 0x0, 0x0, (long)0x8000000000000006);  \n     }  \n  \n     if (!provider.WriteEvent(ref writeEvent, \"Write event.\"))  \n          Console.WriteLine(EventProvider.GetLastWriteEventError());  \n}  \n  \nprovider.Close();  \n```"
  syntax:
    content: public bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, string data);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "实例<xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;> </xref> ，它标识要写入的事件。"
    - id: data
      type: System.String
      description: "要作为事件数据写入的字符串。"
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件将写入; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果为 false，则调用&lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt;方法来确定失败的原因。"
  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If <code>data</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)
  id: WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteEvent(EventDescriptor,Int32,IntPtr)
  nameWithType: EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "写入事件。 事件数据指定为的内存块。"
  remarks: "如果调用<xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>方法，以指定事件，此方法的活动标识符从线程上下文中检索的标识符和与该事件包含它。</xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>"
  syntax:
    content: protected bool WriteEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, int dataCount, IntPtr data);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "实例<xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;> </xref> ，它标识要写入的事件。"
    - id: dataCount
      type: System.Int32
      description: "将事件数据的大小`data`参数点。 最大事件数据的大小被限制为 64 KB 减事件标头的大小。 事件的大小小于如果会话的缓冲区大小小于而且会话中包括的扩展的数据与事件的项。"
    - id: data
      type: System.IntPtr
      description: "指向要写入的事件数据的指针。"
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件将写入; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果为 false，则调用&lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt;方法来确定失败的原因。"
  overload: System.Diagnostics.Eventing.EventProvider.WriteEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)
  id: WriteMessageEvent(System.String)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteMessageEvent(String)
  nameWithType: EventProvider.WriteMessageEvent(String)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "写入包含字符串作为其数据的事件。"
  remarks: "最大字符串长度为减事件标头的大小限制为 64 KB。 事件的大小小于如果会话的缓冲区大小小于而且会话中包括的扩展的数据与事件的项。"
  example:
  - "```  \nif (!provider.WriteMessageEvent(\"Event string.\"))  \n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \n```"
  syntax:
    content: public bool WriteMessageEvent (string eventMessage);
    parameters:
    - id: eventMessage
      type: System.String
      description: "要作为事件数据写入字符串。"
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件将写入; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果为 false，则调用&lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt;方法来确定失败的原因。"
  overload: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If <code>eventMessage</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)
  id: WriteMessageEvent(System.String,System.Byte,System.Int64)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteMessageEvent(String,Byte,Int64)
  nameWithType: EventProvider.WriteMessageEvent(String,Byte,Int64)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String,Byte,Int64)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "写入事件，其中包含一个字符串作为其数据，如果级别和关键字值匹配由会话请求的事件。"
  remarks: "最大字符串长度为减事件标头的大小限制为 64 KB。 事件的大小小于如果会话的缓冲区大小小于而且会话中包括的扩展的数据与事件的项。"
  example:
  - "```  \n// Calling this method with level and keyword set to zero is the same  \n// as calling WriteMessageEvent(string); the event is always written.  \nif (!provider.WriteMessageEvent(\"Event string.\", 0, 0))  \n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \n  \n// Event is written if the level value of the session is less than or equal to 3, and bit 1 of the session  \n// keyword bit-mask is set.  \nif (!provider.WriteMessageEvent(\"Event string.\", 3, 2))  \n    Console.WriteLine(EventProvider.GetLastWriteEventError());  \n```"
  syntax:
    content: public bool WriteMessageEvent (string eventMessage, byte eventLevel, long eventKeywords);
    parameters:
    - id: eventMessage
      type: System.String
      description: "要作为事件数据写入字符串。"
    - id: eventLevel
      type: System.Byte
      description: "事件中包括的详细程度。 如果提供程序使用清单来定义该事件，则将此值设置为清单中定义的相同级别。"
    - id: eventKeywords
      type: System.Int64
      description: "指定的事件类别的位掩码。 如果提供程序使用清单来定义该事件，则将此值设置为清单中定义的关键字掩码相同。"
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件将写入; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果为 false，则调用&lt;xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError%2A?displayProperty=fullName&gt;方法来确定失败的原因。"
  overload: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "If <code>eventMessage</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])
  id: WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteTransferEvent(EventDescriptor,Guid,Object[])
  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])
  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "事件链接在一起在跟踪过程中的端到端方案中的事件。 事件数据指定为对象的数组。"
  remarks: "方法使用的线程上下文中设置的活动 ID 来标识此组件。 若要设置活动 ID，调用<xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>方法。</xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>       如果你使用<xref:System.Diagnostics.Trace>类，不使用<xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>方法，以指定活动 id。</xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A> </xref:System.Diagnostics.Trace> 相反，访问<xref:System.Diagnostics.Trace.CorrelationManager%2A>属性来获取<xref:System.Diagnostics.CorrelationManager>对象。</xref:System.Diagnostics.CorrelationManager> </xref:System.Diagnostics.Trace.CorrelationManager%2A> 然后，设置<xref:System.Diagnostics.CorrelationManager.ActivityId%2A>属性设置为活动 id。</xref:System.Diagnostics.CorrelationManager.ActivityId%2A> 你还必须设置`relatedActivityId`到<xref:System.Diagnostics.CorrelationManager.ActivityId%2A>值。</xref:System.Diagnostics.CorrelationManager.ActivityId%2A>"
  syntax:
    content: public bool WriteTransferEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, Guid relatedActivityId, object[] eventPayload);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "实例<xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;> </xref> ，它标识要写入的事件。"
    - id: relatedActivityId
      type: System.Guid
      description: "从以前的组件的活动标识符。 此参数用于将您的组件的事件链接到前一组件的事件。"
    - id: eventPayload
      type: System.Object[]
      description: "包含要写入的事件数据的对象的数组。 数据必须在清单中指定的顺序。 数组被限制为 32 对象，其中只有八个可以是字符串。 事件的最大数据大小被限制为 64 KB 减事件标头的大小。 事件的大小小于如果会话的缓冲区大小小于而且会话中包括的扩展的数据与事件的项。"
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件将写入; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果为 false，则调用<xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*>方法来确定失败的原因。</xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*>"
  overload: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "如果<code> eventPayload </code>包含太多对象或字符串。"
  platform:
  - net462
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)
  id: WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)
  parent: System.Diagnostics.Eventing.EventProvider
  langs:
  - csharp
  name: WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing
  summary: "事件链接在一起在跟踪过程中的端到端方案中的事件。 事件数据指定为的内存块。"
  remarks: "方法使用的线程上下文中设置的活动 ID 来标识此组件。 若要设置活动 ID，调用<xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>方法。</xref:System.Diagnostics.Eventing.EventProvider.SetActivityId%2A>"
  syntax:
    content: protected bool WriteTransferEvent (ref System.Diagnostics.Eventing.EventDescriptor eventDescriptor, Guid relatedActivityId, int dataCount, IntPtr data);
    parameters:
    - id: eventDescriptor
      type: System.Diagnostics.Eventing.EventDescriptor
      description: "实例<xref href=&quot;System.Diagnostics.Eventing.EventDescriptor&quot;> </xref> ，它标识要写入的事件。"
    - id: relatedActivityId
      type: System.Guid
      description: "从以前的组件的活动标识符。 此参数用于将您的组件的事件链接到前一组件的事件。"
    - id: dataCount
      type: System.Int32
      description: "将事件数据的大小`data`参数点。 最大事件数据的大小被限制为 64 KB 减事件标头的大小。 事件的大小小于如果会话的缓冲区大小小于而且会话中包括的扩展的数据与事件的项。"
    - id: data
      type: System.IntPtr
      description: "指向要写入的事件数据的指针。"
    return:
      type: System.Boolean
      description: "是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件将写入; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 如果为 false，则调用<xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*>方法来确定失败的原因。</xref:System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*>"
  overload: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InsufficientMemoryException
  parent: System
  isExternal: false
  name: InsufficientMemoryException
  nameWithType: InsufficientMemoryException
  fullName: System.InsufficientMemoryException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ComponentModel.Win32Exception
  parent: System.ComponentModel
  isExternal: false
  name: Win32Exception
  nameWithType: Win32Exception
  fullName: System.ComponentModel.Win32Exception
- uid: System.Diagnostics.Eventing.EventProvider.#ctor(System.Guid)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: EventProvider(Guid)
  nameWithType: EventProvider.EventProvider(Guid)
  fullName: System.Diagnostics.Eventing.EventProvider.EventProvider(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Diagnostics.Eventing.EventProvider.Close
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Close()
  nameWithType: EventProvider.Close()
  fullName: System.Diagnostics.Eventing.EventProvider.Close()
- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: CreateActivityId()
  nameWithType: EventProvider.CreateActivityId()
  fullName: System.Diagnostics.Eventing.EventProvider.CreateActivityId()
- uid: System.Diagnostics.Eventing.EventProvider.Dispose
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Dispose()
  nameWithType: EventProvider.Dispose()
  fullName: System.Diagnostics.Eventing.EventProvider.Dispose()
- uid: System.Diagnostics.Eventing.EventProvider.Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventProvider.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.EventProvider.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Eventing.EventProvider.Finalize
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Finalize()
  nameWithType: EventProvider.Finalize()
  fullName: System.Diagnostics.Eventing.EventProvider.Finalize()
- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: GetLastWriteEventError()
  nameWithType: EventProvider.GetLastWriteEventError()
  fullName: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError()
- uid: System.Diagnostics.Eventing.EventProvider.WriteEventErrorCode
  parent: System.Diagnostics.Eventing
  isExternal: false
  name: EventProvider+WriteEventErrorCode
  nameWithType: EventProvider+WriteEventErrorCode
  fullName: System.Diagnostics.Eventing.EventProvider+WriteEventErrorCode
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: IsEnabled()
  nameWithType: EventProvider.IsEnabled()
  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled()
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled(System.Byte,System.Int64)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: IsEnabled(Byte,Int64)
  nameWithType: EventProvider.IsEnabled(Byte,Int64)
  fullName: System.Diagnostics.Eventing.EventProvider.IsEnabled(Byte,Int64)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId(System.Guid@)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: SetActivityId(Guid)
  nameWithType: EventProvider.SetActivityId(Guid)
  fullName: System.Diagnostics.Eventing.EventProvider.SetActivityId(Guid)
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Object[])
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteEvent(EventDescriptor,Object[])
  nameWithType: EventProvider.WriteEvent(EventDescriptor,Object[])
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Object[])
- uid: System.Diagnostics.Eventing.EventDescriptor
  parent: System.Diagnostics.Eventing
  isExternal: false
  name: EventDescriptor
  nameWithType: EventDescriptor
  fullName: System.Diagnostics.Eventing.EventDescriptor
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.String)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteEvent(EventDescriptor,String)
  nameWithType: EventProvider.WriteEvent(EventDescriptor,String)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Int32,System.IntPtr)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteEvent(EventDescriptor,Int32,IntPtr)
  nameWithType: EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteEvent(EventDescriptor,Int32,IntPtr)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteMessageEvent(String)
  nameWithType: EventProvider.WriteMessageEvent(String)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String)
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(System.String,System.Byte,System.Int64)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteMessageEvent(String,Byte,Int64)
  nameWithType: EventProvider.WriteMessageEvent(String,Byte,Int64)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent(String,Byte,Int64)
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Object[])
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteTransferEvent(EventDescriptor,Guid,Object[])
  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])
  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Object[])
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(System.Diagnostics.Eventing.EventDescriptor@,System.Guid,System.Int32,System.IntPtr)
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  nameWithType: EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
  fullName: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent(EventDescriptor,Guid,Int32,IntPtr)
- uid: System.Diagnostics.Eventing.EventProvider.#ctor*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: EventProvider
  nameWithType: EventProvider.EventProvider
- uid: System.Diagnostics.Eventing.EventProvider.Close*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Close
  nameWithType: EventProvider.Close
- uid: System.Diagnostics.Eventing.EventProvider.CreateActivityId*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: CreateActivityId
  nameWithType: EventProvider.CreateActivityId
- uid: System.Diagnostics.Eventing.EventProvider.Dispose*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Dispose
  nameWithType: EventProvider.Dispose
- uid: System.Diagnostics.Eventing.EventProvider.Finalize*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: Finalize
  nameWithType: EventProvider.Finalize
- uid: System.Diagnostics.Eventing.EventProvider.GetLastWriteEventError*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: GetLastWriteEventError
  nameWithType: EventProvider.GetLastWriteEventError
- uid: System.Diagnostics.Eventing.EventProvider.IsEnabled*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: IsEnabled
  nameWithType: EventProvider.IsEnabled
- uid: System.Diagnostics.Eventing.EventProvider.SetActivityId*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: SetActivityId
  nameWithType: EventProvider.SetActivityId
- uid: System.Diagnostics.Eventing.EventProvider.WriteEvent*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteEvent
  nameWithType: EventProvider.WriteEvent
- uid: System.Diagnostics.Eventing.EventProvider.WriteMessageEvent*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteMessageEvent
  nameWithType: EventProvider.WriteMessageEvent
- uid: System.Diagnostics.Eventing.EventProvider.WriteTransferEvent*
  parent: System.Diagnostics.Eventing.EventProvider
  isExternal: false
  name: WriteTransferEvent
  nameWithType: EventProvider.WriteTransferEvent
