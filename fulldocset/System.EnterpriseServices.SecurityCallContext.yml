### YamlMime:ManagedReference
items:
- uid: System.EnterpriseServices.SecurityCallContext
  id: SecurityCallContext
  children:
  - System.EnterpriseServices.SecurityCallContext.Callers
  - System.EnterpriseServices.SecurityCallContext.CurrentCall
  - System.EnterpriseServices.SecurityCallContext.DirectCaller
  - System.EnterpriseServices.SecurityCallContext.IsCallerInRole(System.String)
  - System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled
  - System.EnterpriseServices.SecurityCallContext.IsUserInRole(System.String,System.String)
  - System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel
  - System.EnterpriseServices.SecurityCallContext.NumCallers
  - System.EnterpriseServices.SecurityCallContext.OriginalCaller
  langs:
  - csharp
  name: SecurityCallContext
  nameWithType: SecurityCallContext
  fullName: System.EnterpriseServices.SecurityCallContext
  type: Class
  summary: "描述导致当前方法调用的调用方的链。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of the SecurityCallContext class to interrogate the security context of calls to the methods of a <xref:System.EnterpriseServices.ServicedComponent> class.  \n  \n [!code-cpp[EnterpriseServices_Security#4](~/add/codesnippet/cpp/t-system.enterpriseservi_21_1.cpp)]\n [!code-cs[EnterpriseServices_Security#4](~/add/codesnippet/csharp/t-system.enterpriseservi_21_1.cs)]\n [!code-vb[EnterpriseServices_Security#4](~/add/codesnippet/visualbasic/t-system.enterpriseservi_21_1.vb)]"
  syntax:
    content: public sealed class SecurityCallContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.Callers
  id: Callers
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: Callers
  nameWithType: SecurityCallContext.Callers
  fullName: System.EnterpriseServices.SecurityCallContext.Callers
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取<xref href=&quot;System.EnterpriseServices.SecurityCallers&quot;></xref>描述调用方的对象。"
  remarks: "调用方访问`Callers`中项`ISecurityCallContext`COM + 中的集合。"
  syntax:
    content: public System.EnterpriseServices.SecurityCallers Callers { get; }
    return:
      type: System.EnterpriseServices.SecurityCallers
      description: "<xref href=&quot;System.EnterpriseServices.SecurityCallers&quot;> </xref>描述调用方的对象。"
  overload: System.EnterpriseServices.SecurityCallContext.Callers*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "没有安全上下文。"
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.CurrentCall
  id: CurrentCall
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: CurrentCall
  nameWithType: SecurityCallContext.CurrentCall
  fullName: System.EnterpriseServices.SecurityCallContext.CurrentCall
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取<xref href=&quot;System.EnterpriseServices.SecurityCallContext&quot;></xref>描述的安全调用上下文的对象。"
  remarks: "静态 CurrentCall 属性是访问的安全调用上下文的建议的方式。"
  example:
  - "The following code example demonstrates the use of this method to obtain a <xref:System.EnterpriseServices.SecurityCallContext> object describing the security context of a method call.  \n  \n [!code-cpp[EnterpriseServices_Security#6](~/add/codesnippet/cpp/p-system.enterpriseservi_25_1.cpp)]\n [!code-cs[EnterpriseServices_Security#6](~/add/codesnippet/csharp/p-system.enterpriseservi_25_1.cs)]\n [!code-vb[EnterpriseServices_Security#6](~/add/codesnippet/visualbasic/p-system.enterpriseservi_25_1.vb)]"
  syntax:
    content: public static System.EnterpriseServices.SecurityCallContext CurrentCall { get; }
    return:
      type: System.EnterpriseServices.SecurityCallContext
      description: "<xref href=&quot;System.EnterpriseServices.SecurityCallContext&quot;> </xref>描述的安全调用上下文的对象。"
  overload: System.EnterpriseServices.SecurityCallContext.CurrentCall*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.DirectCaller
  id: DirectCaller
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: DirectCaller
  nameWithType: SecurityCallContext.DirectCaller
  fullName: System.EnterpriseServices.SecurityCallContext.DirectCaller
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取<xref href=&quot;System.EnterpriseServices.SecurityIdentity&quot;></xref>介绍此方法的直接调用方的对象。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this method to check the identity of the direct caller of a <xref:System.EnterpriseServices.ServicedComponent> method.  \n  \n [!code-cpp[EnterpriseServices_Security#7](~/add/codesnippet/cpp/p-system.enterpriseservi_26_1.cpp)]\n [!code-cs[EnterpriseServices_Security#7](~/add/codesnippet/csharp/p-system.enterpriseservi_26_1.cs)]\n [!code-vb[EnterpriseServices_Security#7](~/add/codesnippet/visualbasic/p-system.enterpriseservi_26_1.vb)]"
  syntax:
    content: public System.EnterpriseServices.SecurityIdentity DirectCaller { get; }
    return:
      type: System.EnterpriseServices.SecurityIdentity
      description: "A <xref href=&quot;System.EnterpriseServices.SecurityIdentity&quot;></xref> value."
  overload: System.EnterpriseServices.SecurityCallContext.DirectCaller*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.IsCallerInRole(System.String)
  id: IsCallerInRole(System.String)
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: IsCallerInRole(String)
  nameWithType: SecurityCallContext.IsCallerInRole(String)
  fullName: System.EnterpriseServices.SecurityCallContext.IsCallerInRole(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "验证直接调用方是指定角色的成员。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this method to determine if the caller of a <xref:System.EnterpriseServices.ServicedComponent> method is in a specified role.  \n  \n [!code-cpp[EnterpriseServices_Security#6](~/add/codesnippet/cpp/m-system.enterpriseservi_10_1.cpp)]\n [!code-cs[EnterpriseServices_Security#6](~/add/codesnippet/csharp/m-system.enterpriseservi_10_1.cs)]\n [!code-vb[EnterpriseServices_Security#6](~/add/codesnippet/visualbasic/m-system.enterpriseservi_10_1.vb)]"
  syntax:
    content: public bool IsCallerInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "指定的角色。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果直接调用方是指定角色; 的成员否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.EnterpriseServices.SecurityCallContext.IsCallerInRole*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled
  id: IsSecurityEnabled
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: IsSecurityEnabled
  nameWithType: SecurityCallContext.IsSecurityEnabled
  fullName: System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "确定是否在当前上下文中启用了安全检查。"
  syntax:
    content: public bool IsSecurityEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果安全检查在当前上下文中; 中启用否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: SecurityCallContext.IsUserInRole(String,String)
  fullName: System.EnterpriseServices.SecurityCallContext.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "验证指定的用户属于指定角色。"
  syntax:
    content: public bool IsUserInRole (string user, string role);
    parameters:
    - id: user
      type: System.String
      description: "指定的用户。"
    - id: role
      type: System.String
      description: "指定的角色。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的用户是指定角色; 的成员否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.EnterpriseServices.SecurityCallContext.IsUserInRole*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel
  id: MinAuthenticationLevel
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: MinAuthenticationLevel
  nameWithType: SecurityCallContext.MinAuthenticationLevel
  fullName: System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取<xref uid=&quot;langword_csharp_MinAuthenticationLevel&quot; name=&quot;MinAuthenticationLevel&quot; href=&quot;&quot;></xref>值从<xref uid=&quot;langword_csharp_ISecurityCallContext&quot; name=&quot;ISecurityCallContext&quot; href=&quot;&quot;> </xref> COM + 中的集合。"
  remarks: "MinAuthenticationLevel 是链中的所有调用方的最不安全的身份验证级别。"
  syntax:
    content: public int MinAuthenticationLevel { get; }
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_MinAuthenticationLevel&quot; name=&quot;MinAuthenticationLevel&quot; href=&quot;&quot;> </xref>值从<xref uid=&quot;langword_csharp_ISecurityCallContext&quot; name=&quot;ISecurityCallContext&quot; href=&quot;&quot;> </xref> COM + 中的集合。"
  overload: System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.NumCallers
  id: NumCallers
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: NumCallers
  nameWithType: SecurityCallContext.NumCallers
  fullName: System.EnterpriseServices.SecurityCallContext.NumCallers
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取<xref uid=&quot;langword_csharp_NumCallers&quot; name=&quot;NumCallers&quot; href=&quot;&quot;></xref>值从<xref uid=&quot;langword_csharp_ISecurityCallContext&quot; name=&quot;ISecurityCallContext&quot; href=&quot;&quot;> </xref> COM + 中的集合。"
  remarks: "NumCallers 是调用链中的调用方的数目。"
  syntax:
    content: public int NumCallers { get; }
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_NumCallers&quot; name=&quot;NumCallers&quot; href=&quot;&quot;> </xref>值从<xref uid=&quot;langword_csharp_ISecurityCallContext&quot; name=&quot;ISecurityCallContext&quot; href=&quot;&quot;> </xref> COM + 中的集合。"
  overload: System.EnterpriseServices.SecurityCallContext.NumCallers*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityCallContext.OriginalCaller
  id: OriginalCaller
  parent: System.EnterpriseServices.SecurityCallContext
  langs:
  - csharp
  name: OriginalCaller
  nameWithType: SecurityCallContext.OriginalCaller
  fullName: System.EnterpriseServices.SecurityCallContext.OriginalCaller
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取<xref href=&quot;System.EnterpriseServices.SecurityIdentity&quot;></xref>描述原始调用方。"
  syntax:
    content: public System.EnterpriseServices.SecurityIdentity OriginalCaller { get; }
    return:
      type: System.EnterpriseServices.SecurityIdentity
      description: "之一<xref href=&quot;System.EnterpriseServices.SecurityIdentity&quot;></xref>值。"
  overload: System.EnterpriseServices.SecurityCallContext.OriginalCaller*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.EnterpriseServices.SecurityCallContext.Callers
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: Callers
  nameWithType: SecurityCallContext.Callers
  fullName: System.EnterpriseServices.SecurityCallContext.Callers
- uid: System.EnterpriseServices.SecurityCallers
  parent: System.EnterpriseServices
  isExternal: false
  name: SecurityCallers
  nameWithType: SecurityCallers
  fullName: System.EnterpriseServices.SecurityCallers
- uid: System.EnterpriseServices.SecurityCallContext.CurrentCall
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: CurrentCall
  nameWithType: SecurityCallContext.CurrentCall
  fullName: System.EnterpriseServices.SecurityCallContext.CurrentCall
- uid: System.EnterpriseServices.SecurityCallContext
  parent: System.EnterpriseServices
  isExternal: false
  name: SecurityCallContext
  nameWithType: SecurityCallContext
  fullName: System.EnterpriseServices.SecurityCallContext
- uid: System.EnterpriseServices.SecurityCallContext.DirectCaller
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: DirectCaller
  nameWithType: SecurityCallContext.DirectCaller
  fullName: System.EnterpriseServices.SecurityCallContext.DirectCaller
- uid: System.EnterpriseServices.SecurityIdentity
  parent: System.EnterpriseServices
  isExternal: false
  name: SecurityIdentity
  nameWithType: SecurityIdentity
  fullName: System.EnterpriseServices.SecurityIdentity
- uid: System.EnterpriseServices.SecurityCallContext.IsCallerInRole(System.String)
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: IsCallerInRole(String)
  nameWithType: SecurityCallContext.IsCallerInRole(String)
  fullName: System.EnterpriseServices.SecurityCallContext.IsCallerInRole(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: IsSecurityEnabled
  nameWithType: SecurityCallContext.IsSecurityEnabled
  fullName: System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled
- uid: System.EnterpriseServices.SecurityCallContext.IsUserInRole(System.String,System.String)
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: SecurityCallContext.IsUserInRole(String,String)
  fullName: System.EnterpriseServices.SecurityCallContext.IsUserInRole(String,String)
- uid: System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: MinAuthenticationLevel
  nameWithType: SecurityCallContext.MinAuthenticationLevel
  fullName: System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.EnterpriseServices.SecurityCallContext.NumCallers
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: NumCallers
  nameWithType: SecurityCallContext.NumCallers
  fullName: System.EnterpriseServices.SecurityCallContext.NumCallers
- uid: System.EnterpriseServices.SecurityCallContext.OriginalCaller
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: OriginalCaller
  nameWithType: SecurityCallContext.OriginalCaller
  fullName: System.EnterpriseServices.SecurityCallContext.OriginalCaller
- uid: System.EnterpriseServices.SecurityCallContext.Callers*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: Callers
  nameWithType: SecurityCallContext.Callers
- uid: System.EnterpriseServices.SecurityCallContext.CurrentCall*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: CurrentCall
  nameWithType: SecurityCallContext.CurrentCall
- uid: System.EnterpriseServices.SecurityCallContext.DirectCaller*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: DirectCaller
  nameWithType: SecurityCallContext.DirectCaller
- uid: System.EnterpriseServices.SecurityCallContext.IsCallerInRole*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: IsCallerInRole
  nameWithType: SecurityCallContext.IsCallerInRole
- uid: System.EnterpriseServices.SecurityCallContext.IsSecurityEnabled*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: IsSecurityEnabled
  nameWithType: SecurityCallContext.IsSecurityEnabled
- uid: System.EnterpriseServices.SecurityCallContext.IsUserInRole*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: IsUserInRole
  nameWithType: SecurityCallContext.IsUserInRole
- uid: System.EnterpriseServices.SecurityCallContext.MinAuthenticationLevel*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: MinAuthenticationLevel
  nameWithType: SecurityCallContext.MinAuthenticationLevel
- uid: System.EnterpriseServices.SecurityCallContext.NumCallers*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: NumCallers
  nameWithType: SecurityCallContext.NumCallers
- uid: System.EnterpriseServices.SecurityCallContext.OriginalCaller*
  parent: System.EnterpriseServices.SecurityCallContext
  isExternal: false
  name: OriginalCaller
  nameWithType: SecurityCallContext.OriginalCaller
