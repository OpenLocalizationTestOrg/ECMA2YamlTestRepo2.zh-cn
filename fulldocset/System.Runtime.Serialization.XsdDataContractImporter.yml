### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.XsdDataContractImporter
  id: XsdDataContractImporter
  children:
  - System.Runtime.Serialization.XsdDataContractImporter.#ctor
  - System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)
  - System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)
  - System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})
  - System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)
  - System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
  - System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit
  - System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)
  - System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)
  - System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)
  - System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)
  - System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})
  - System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)
  - System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
  - System.Runtime.Serialization.XsdDataContractImporter.Options
  langs:
  - csharp
  name: XsdDataContractImporter
  nameWithType: XsdDataContractImporter
  fullName: System.Runtime.Serialization.XsdDataContractImporter
  type: Class
  summary: "用于将一组 XML 架构文件 (.xsd) 转换为公共语言运行时 (CLR) 类型。"
  remarks: "如果你要创建必须进行互操作 Web 服务，与现有 Web 服务，或从 XML 架构创建数据协定类型，请使用 XsdDataContractImporter。 XsdDataContractImporter 能够转换一组 XML 架构，并且创建[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]的类型，表示数据协定中用所选的编程语言。 若要创建的代码，使用中的类<xref:System.CodeDom>命名空间。</xref:System.CodeDom>       相反，使用<xref:System.Runtime.Serialization.XsdDataContractExporter>类时创建的 Web 服务包含由 CLR 类型表示的数据以及何时需要个将使用其他 Web 服务的每种数据类型导出 XML 架构。</xref:System.Runtime.Serialization.XsdDataContractExporter> 也就是说，<xref:System.Runtime.Serialization.XsdDataContractExporter>将一组 CLR 类型转换成一组 XML 架构。</xref:System.Runtime.Serialization.XsdDataContractExporter>      1> [!NOTE]&1;> 若要从 XML 架构生成 CLR 类型，在设计时，请使用[ServiceModel 元数据实用工具 (Svcutil.exe)](~/add/includes/ajax-current-ext-md.md)。 若要从 XSD 文件生成代码，请使用`/dataContractOnly`交换机的工具。 如果需要更多控制对过程或者需要以编程方式执行，也可以使用 XsdDataContractImporter。"
  example:
  - "The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>. The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.  \n  \n [!code-cs[XsdDataContractImporter#0](~/add/codesnippet/csharp/t-system.runtime.seriali_7_1.cs)]\n [!code-vb[XsdDataContractImporter#0](~/add/codesnippet/visualbasic/t-system.runtime.seriali_7_1.vb)]"
  syntax:
    content: public class XsdDataContractImporter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.#ctor
  id: '#ctor'
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: XsdDataContractImporter()
  nameWithType: XsdDataContractImporter.XsdDataContractImporter()
  fullName: System.Runtime.Serialization.XsdDataContractImporter.XsdDataContractImporter()
  type: Constructor
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "初始化的新实例<xref href=&quot;System.Runtime.Serialization.XsdDataContractImporter&quot;></xref>类。"
  syntax:
    content: public XsdDataContractImporter ();
    parameters: []
  overload: System.Runtime.Serialization.XsdDataContractImporter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)
  id: '#ctor(System.CodeDom.CodeCompileUnit)'
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: XsdDataContractImporter(CodeCompileUnit)
  nameWithType: XsdDataContractImporter.XsdDataContractImporter(CodeCompileUnit)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.XsdDataContractImporter(CodeCompileUnit)
  type: Constructor
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "初始化的新实例<xref href=&quot;System.Runtime.Serialization.XsdDataContractImporter&quot;></xref>类，该类具有<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;></xref>将用于生成 CLR 代码。"
  remarks: "使用此构造函数添加到的更多代码<xref:System.CodeDom.CodeCompileUnit>已生成。</xref:System.CodeDom.CodeCompileUnit>"
  example:
  - "The following example creates an <xref:System.Xml.Schema.XmlSchemaSet> and calls the <xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> method to create a <xref:System.CodeDom.CodeCompileUnit>. The <xref:System.CodeDom.CodeCompileUnit> is then used to create both Visual C# and Visual Basic code files.  \n  \n [!code-cs[XsdDataContractImporter#1](~/add/codesnippet/csharp/03617d2d-d820-45ea-9187-_1.cs)]\n [!code-vb[XsdDataContractImporter#1](~/add/codesnippet/visualbasic/03617d2d-d820-45ea-9187-_1.vb)]"
  syntax:
    content: public XsdDataContractImporter (System.CodeDom.CodeCompileUnit codeCompileUnit);
    parameters:
    - id: codeCompileUnit
      type: System.CodeDom.CodeCompileUnit
      description: "<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref>将用于存储代码。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)
  id: CanImport(System.Xml.Schema.XmlSchemaSet)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: CanImport(XmlSchemaSet)
  nameWithType: XsdDataContractImporter.CanImport(XmlSchemaSet)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CanImport(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "获取一个值，该值指示架构是否包含在<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>可以转换为<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example calls the CanImport method to determine whether the <xref:System.CodeDom.CodeCompileUnit> can be generated.  \n  \n [!code-cs[XsdDataContractImporter#2](~/add/codesnippet/csharp/b2b83fee-fce3-4860-9703-_1.cs)]\n [!code-vb[XsdDataContractImporter#2](~/add/codesnippet/visualbasic/b2b83fee-fce3-4860-9703-_1.vb)]"
  syntax:
    content: public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "A <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> ，其中包含要转换的架构。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果架构可以转换到数据协定类型;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.CanImport*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>schemas</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Runtime.Serialization.InvalidDataContractException
    commentId: T:System.Runtime.Serialization.InvalidDataContractException
    description: "导入过程中所涉及的数据协定无效。"
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})
  id: CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: CanImport(XmlSchemaSet,ICollection<XmlQualifiedName>)
  nameWithType: XsdDataContractImporter.CanImport(XmlSchemaSet,ICollection<XmlQualifiedName>)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CanImport(XmlSchemaSet,ICollection<XmlQualifiedName>)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "获取一个值，该值指示指定的类型集是否包含在<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>可以转换为生成到 CLR 类型<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref>。"
  syntax:
    content: public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection<System.Xml.XmlQualifiedName> typeNames);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "A <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> ，其中包含要转换的架构。"
    - id: typeNames
      type: System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName}
      description: "&lt;Xref:System.Collections.Generic.ICollection%601&gt;的<xref:System.Xml.XmlQualifiedName>，它表示要导入的架构类型的组。</xref:System.Xml.XmlQualifiedName>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果架构可以转换;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.CanImport*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>schemas</code> or <code>typeNames</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Runtime.Serialization.InvalidDataContractException
    commentId: T:System.Runtime.Serialization.InvalidDataContractException
    description: "导入过程中所涉及的数据协定无效。"
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)
  id: CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: CanImport(XmlSchemaSet,XmlSchemaElement)
  nameWithType: XsdDataContractImporter.CanImport(XmlSchemaSet,XmlSchemaElement)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CanImport(XmlSchemaSet,XmlSchemaElement)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "获取一个值，该值指示的特定架构元素是否包含在<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>可以导入。"
  remarks: "此方法检查的类型和从它所引用的所有架构类型。"
  syntax:
    content: public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>导入。"
    - id: element
      type: System.Xml.Schema.XmlSchemaElement
      description: "特定<xref href=&quot;System.Xml.Schema.XmlSchemaElement&quot;></xref>签入的架构集中。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该元素可以导入;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.CanImport*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>schemas</code> or <code>element</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Runtime.Serialization.InvalidDataContractException
    commentId: T:System.Runtime.Serialization.InvalidDataContractException
    description: "导入过程中所涉及的数据协定无效。"
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
  id: CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: CanImport(XmlSchemaSet,XmlQualifiedName)
  nameWithType: XsdDataContractImporter.CanImport(XmlSchemaSet,XmlQualifiedName)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CanImport(XmlSchemaSet,XmlQualifiedName)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "获取一个值，该值指示架构是否包含在<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>可以转换为<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref>。"
  remarks: "有关可导入的类型的详细信息，请参阅[类型受数据协定序列化程序](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool CanImport (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "A <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> ，它包含架构表示。"
    - id: typeName
      type: System.Xml.XmlQualifiedName
      description: "<xref:System.Collections.IList>的<xref:System.Xml.XmlQualifiedName>，它指定需要从导入的架构类型的名称<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>。</xref:System.Xml.XmlQualifiedName> </xref:System.Collections.IList>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果架构可以转换到数据协定类型;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.CanImport*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>schemas</code> or <code>typeName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Runtime.Serialization.InvalidDataContractException
    commentId: T:System.Runtime.Serialization.InvalidDataContractException
    description: "导入过程中所涉及的数据协定无效。"
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit
  id: CodeCompileUnit
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: CodeCompileUnit
  nameWithType: XsdDataContractImporter.CodeCompileUnit
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit
  type: Property
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "获取<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;></xref>用于存储生成的 CLR 类型。"
  remarks: "导入使用的架构后，调用此属性<xref:System.Runtime.Serialization.XsdDataContractImporter>访问<xref:System.CodeDom.CodeCompileUnit>所有存储生成的代码。</xref:System.CodeDom.CodeCompileUnit> </xref:System.Runtime.Serialization.XsdDataContractImporter>"
  example:
  - "The following example uses creates a <xref:System.CodeDom.CodeCompileUnit>. The <xref:System.CodeDom.CodeCompileUnit> is then used to create both a Visual C# and Visual Basic code file.  \n  \n [!code-cs[XsdDataContractImporter#1](~/add/codesnippet/csharp/p-system.runtime.seriali_1_1.cs)]\n [!code-vb[XsdDataContractImporter#1](~/add/codesnippet/visualbasic/p-system.runtime.seriali_1_1.vb)]"
  syntax:
    content: public System.CodeDom.CodeCompileUnit CodeCompileUnit { get; }
    return:
      type: System.CodeDom.CodeCompileUnit
      description: "A <xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref>用于存储生成的 CLR 类型。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)
  id: GetCodeTypeReference(System.Xml.XmlQualifiedName)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: GetCodeTypeReference(XmlQualifiedName)
  nameWithType: XsdDataContractImporter.GetCodeTypeReference(XmlQualifiedName)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(XmlQualifiedName)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "返回<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>到为具有指定<xref:System.Xml.XmlQualifiedName>.</xref:System.Xml.XmlQualifiedName>的架构类型生成的 CLR 类型"
  remarks: "使用此方法之后调用查找对生成的 CLR 类型的引用<xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A>方法。</xref:System.Runtime.Serialization.XsdDataContractImporter.Import%2A> <xref:System.CodeDom.CodeTypeReference>包含生成的类型的名称，并可用于查找相应<xref:System.CodeDom.CodeTypeDeclaration>的<xref:System.CodeDom.CodeCompileUnit>。</xref:System.CodeDom.CodeCompileUnit> </xref:System.CodeDom.CodeTypeDeclaration> </xref:System.CodeDom.CodeTypeReference>"
  syntax:
    content: public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName);
    parameters:
    - id: typeName
      type: System.Xml.XmlQualifiedName
      description: "<xref:System.Xml.XmlQualifiedName>，它指定要查找的架构类型</xref:System.Xml.XmlQualifiedName>"
    return:
      type: System.CodeDom.CodeTypeReference
      description: "A <xref href=&quot;System.CodeDom.CodeTypeReference&quot;> </xref>对架构类型生成的 CLR 类型引用<code> typeName </code>指定。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)
  id: GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: GetCodeTypeReference(XmlQualifiedName,XmlSchemaElement)
  nameWithType: XsdDataContractImporter.GetCodeTypeReference(XmlQualifiedName,XmlSchemaElement)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(XmlQualifiedName,XmlSchemaElement)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "返回<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>指定的 xml 限定元素和架构元素。"
  remarks: "有关在元素范围内指定的类型的数据需要使用架构元素。 的一个主要示例是 XSD 属性`nillable`。 在架构中，设置`nillable`到`true`元素上指定了包含架构而 CLR 类型<xref:System.Nullable%601>.</xref:System.Nullable%601>用表示 null 的概念 元素中的传递，以便此导入程序可以查找元素级信息并相应地返回正确的类型引用。       在导入 WSDL，每个参数都会分别导并因此需要分别传入参数元素。"
  syntax:
    content: public System.CodeDom.CodeTypeReference GetCodeTypeReference (System.Xml.XmlQualifiedName typeName, System.Xml.Schema.XmlSchemaElement element);
    parameters:
    - id: typeName
      type: System.Xml.XmlQualifiedName
      description: "<xref:System.Xml.XmlQualifiedName>指定要查找的架构类型的 XML 限定的名称</xref:System.Xml.XmlQualifiedName>"
    - id: element
      type: System.Xml.Schema.XmlSchemaElement
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaElement&quot;> </xref> ，它指定 XML 架构中的元素。"
    return:
      type: System.CodeDom.CodeTypeReference
      description: "A <xref href=&quot;System.CodeDom.CodeTypeReference&quot;> </xref>表示为指定的架构类型生成的类型。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)
  id: GetKnownTypeReferences(System.Xml.XmlQualifiedName)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: GetKnownTypeReferences(XmlQualifiedName)
  nameWithType: XsdDataContractImporter.GetKnownTypeReferences(XmlQualifiedName)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(XmlQualifiedName)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "返回的列表<xref href=&quot;System.CodeDom.CodeTypeReference&quot;></xref>表示生成为指定的架构类型生成代码时的已知的类型的对象。"
  remarks: "在生成架构类型的 CLR 类型时，还会在架构中存在的所有派生类型生成已知的类型。 在许多情况下，这些已知的类型将添加使用到生成的代码的属性。 （有关示例，请参阅<xref:System.Runtime.Serialization.KnownTypeAttribute>类。</xref:System.Runtime.Serialization.KnownTypeAttribute> ） 但是，对于顶级类型，需要一种方法以返回生成的已知类型集。 此方法返回<xref:System.CodeDom.CodeTypeReference>为特定的架构类型生成的已知类型。</xref:System.CodeDom.CodeTypeReference>       有关详细信息，请参阅[数据协定已知类型](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Collections.Generic.ICollection<System.CodeDom.CodeTypeReference> GetKnownTypeReferences (System.Xml.XmlQualifiedName typeName);
    parameters:
    - id: typeName
      type: System.Xml.XmlQualifiedName
      description: "<xref:System.Xml.XmlQualifiedName>表示要查找已知的类型为架构类型</xref:System.Xml.XmlQualifiedName>"
    return:
      type: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeReference}
      description: "A &lt;xref:System.Collections.Generic.IList%601&gt;类型的<xref href=&quot;System.CodeDom.CodeTypeReference&quot;> </xref>。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)
  id: Import(System.Xml.Schema.XmlSchemaSet)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: Import(XmlSchemaSet)
  nameWithType: XsdDataContractImporter.Import(XmlSchemaSet)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Import(XmlSchemaSet)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "中包含的 XML 架构的一组指定转换<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>到<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example uses the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method to test whether a set of schemas can be imported. If the <xref:System.Runtime.Serialization.XsdDataContractImporter.CanImport%2A> method returns `true`, the code invokes the Import method.  \n  \n [!code-cs[XsdDataContractImporter#2](~/add/codesnippet/csharp/8343a280-8e19-434b-8b6b-_1.cs)]\n [!code-vb[XsdDataContractImporter#2](~/add/codesnippet/visualbasic/8343a280-8e19-434b-8b6b-_1.vb)]"
  syntax:
    content: public void Import (System.Xml.Schema.XmlSchemaSet schemas);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "A <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> ，它包含架构表示，以生成 CLR 类型。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>schemas</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})
  id: Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: Import(XmlSchemaSet,ICollection<XmlQualifiedName>)
  nameWithType: XsdDataContractImporter.Import(XmlSchemaSet,ICollection<XmlQualifiedName>)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Import(XmlSchemaSet,ICollection<XmlQualifiedName>)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "中包含的架构类型的指定一组转换<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>到生成的 CLR 类型到<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref>。"
  syntax:
    content: public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Collections.Generic.ICollection<System.Xml.XmlQualifiedName> typeNames);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "A <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> ，它包含架构表示。"
    - id: typeNames
      type: System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName}
      description: "A &lt;xref:System.Collections.Generic.ICollection%601&gt; (的<xref:System.Xml.XmlQualifiedName>)，它表示要导入的架构类型的组。</xref:System.Xml.XmlQualifiedName>"
  overload: System.Runtime.Serialization.XsdDataContractImporter.Import*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)
  id: Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: Import(XmlSchemaSet,XmlSchemaElement)
  nameWithType: XsdDataContractImporter.Import(XmlSchemaSet,XmlSchemaElement)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Import(XmlSchemaSet,XmlSchemaElement)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "转换到指定的 XML 架构集中的指定的架构元素<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;></xref>并返回<xref:System.Xml.XmlQualifiedName>，表示指定的元素的数据协定名称。</xref:System.Xml.XmlQualifiedName>"
  syntax:
    content: public System.Xml.XmlQualifiedName Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.Schema.XmlSchemaElement element);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> ，其中包含要转换的架构。"
    - id: element
      type: System.Xml.Schema.XmlSchemaElement
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaElement&quot;> </xref> ，表示要转换的特定架构元素。"
    return:
      type: System.Xml.XmlQualifiedName
      description: "<xref:System.Xml.XmlQualifiedName>，它表示指定的元素。</xref:System.Xml.XmlQualifiedName>"
  overload: System.Runtime.Serialization.XsdDataContractImporter.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>schemas</code> or <code>element</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
  id: Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: Import(XmlSchemaSet,XmlQualifiedName)
  nameWithType: XsdDataContractImporter.Import(XmlSchemaSet,XmlQualifiedName)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Import(XmlSchemaSet,XmlQualifiedName)
  type: Method
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "中包含的指定的 XML 架构类型转换<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>到<xref href=&quot;System.CodeDom.CodeCompileUnit&quot;> </xref>。"
  syntax:
    content: public void Import (System.Xml.Schema.XmlSchemaSet schemas, System.Xml.XmlQualifiedName typeName);
    parameters:
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "A <xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref> ，它包含架构表示。"
    - id: typeName
      type: System.Xml.XmlQualifiedName
      description: "A<xref:System.Xml.XmlQualifiedName>表示要导入特定的架构类型。</xref:System.Xml.XmlQualifiedName>"
  overload: System.Runtime.Serialization.XsdDataContractImporter.Import*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>schemas</code> or <code>typeName</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Serialization.XsdDataContractImporter.Options
  id: Options
  parent: System.Runtime.Serialization.XsdDataContractImporter
  langs:
  - csharp
  name: Options
  nameWithType: XsdDataContractImporter.Options
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Options
  type: Property
  assemblies:
  - System.Runtime.Serialization
  namespace: System.Runtime.Serialization
  summary: "获取或设置<xref href=&quot;System.Runtime.Serialization.ImportOptions&quot;> </xref> ，它包含导入操作的可设置选项。"
  remarks: "使用<xref:System.Runtime.Serialization.ImportOptions>类自定义如何在架构导入期间生成的 CLR 类型的。</xref:System.Runtime.Serialization.ImportOptions>"
  syntax:
    content: public System.Runtime.Serialization.ImportOptions Options { get; set; }
    return:
      type: System.Runtime.Serialization.ImportOptions
      description: "A <xref href=&quot;System.Runtime.Serialization.ImportOptions&quot;> </xref> ，它包含可设置选项。"
  overload: System.Runtime.Serialization.XsdDataContractImporter.Options*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.Serialization.InvalidDataContractException
  isExternal: true
  name: System.Runtime.Serialization.InvalidDataContractException
- uid: System.Runtime.Serialization.XsdDataContractImporter.#ctor
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: XsdDataContractImporter()
  nameWithType: XsdDataContractImporter.XsdDataContractImporter()
  fullName: System.Runtime.Serialization.XsdDataContractImporter.XsdDataContractImporter()
- uid: System.Runtime.Serialization.XsdDataContractImporter.#ctor(System.CodeDom.CodeCompileUnit)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: XsdDataContractImporter(CodeCompileUnit)
  nameWithType: XsdDataContractImporter.XsdDataContractImporter(CodeCompileUnit)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.XsdDataContractImporter(CodeCompileUnit)
- uid: System.CodeDom.CodeCompileUnit
  parent: System.CodeDom
  isExternal: false
  name: CodeCompileUnit
  nameWithType: CodeCompileUnit
  fullName: System.CodeDom.CodeCompileUnit
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: CanImport(XmlSchemaSet)
  nameWithType: XsdDataContractImporter.CanImport(XmlSchemaSet)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CanImport(XmlSchemaSet)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: CanImport(XmlSchemaSet,ICollection<XmlQualifiedName>)
  nameWithType: XsdDataContractImporter.CanImport(XmlSchemaSet,ICollection<XmlQualifiedName>)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CanImport(XmlSchemaSet,ICollection<XmlQualifiedName>)
- uid: System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XmlQualifiedName>
  nameWithType: ICollection<XmlQualifiedName>
  fullName: System.Collections.Generic.ICollection<System.Xml.XmlQualifiedName>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xml.XmlQualifiedName>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.XmlQualifiedName
    name: XmlQualifiedName
    nameWithType: XmlQualifiedName
    fullName: XmlQualifiedName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: CanImport(XmlSchemaSet,XmlSchemaElement)
  nameWithType: XsdDataContractImporter.CanImport(XmlSchemaSet,XmlSchemaElement)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CanImport(XmlSchemaSet,XmlSchemaElement)
- uid: System.Xml.Schema.XmlSchemaElement
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaElement
  nameWithType: XmlSchemaElement
  fullName: System.Xml.Schema.XmlSchemaElement
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: CanImport(XmlSchemaSet,XmlQualifiedName)
  nameWithType: XsdDataContractImporter.CanImport(XmlSchemaSet,XmlQualifiedName)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CanImport(XmlSchemaSet,XmlQualifiedName)
- uid: System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: CodeCompileUnit
  nameWithType: XsdDataContractImporter.CodeCompileUnit
  fullName: System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit
- uid: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: GetCodeTypeReference(XmlQualifiedName)
  nameWithType: XsdDataContractImporter.GetCodeTypeReference(XmlQualifiedName)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(XmlQualifiedName)
- uid: System.CodeDom.CodeTypeReference
  parent: System.CodeDom
  isExternal: false
  name: CodeTypeReference
  nameWithType: CodeTypeReference
  fullName: System.CodeDom.CodeTypeReference
- uid: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(System.Xml.XmlQualifiedName,System.Xml.Schema.XmlSchemaElement)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: GetCodeTypeReference(XmlQualifiedName,XmlSchemaElement)
  nameWithType: XsdDataContractImporter.GetCodeTypeReference(XmlQualifiedName,XmlSchemaElement)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference(XmlQualifiedName,XmlSchemaElement)
- uid: System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(System.Xml.XmlQualifiedName)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: GetKnownTypeReferences(XmlQualifiedName)
  nameWithType: XsdDataContractImporter.GetKnownTypeReferences(XmlQualifiedName)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences(XmlQualifiedName)
- uid: System.Collections.Generic.ICollection{System.CodeDom.CodeTypeReference}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<CodeTypeReference>
  nameWithType: ICollection<CodeTypeReference>
  fullName: System.Collections.Generic.ICollection<System.CodeDom.CodeTypeReference>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.CodeDom.CodeTypeReference>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.CodeDom.CodeTypeReference
    name: CodeTypeReference
    nameWithType: CodeTypeReference
    fullName: CodeTypeReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: Import(XmlSchemaSet)
  nameWithType: XsdDataContractImporter.Import(XmlSchemaSet)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Import(XmlSchemaSet)
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Collections.Generic.ICollection{System.Xml.XmlQualifiedName})
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: Import(XmlSchemaSet,ICollection<XmlQualifiedName>)
  nameWithType: XsdDataContractImporter.Import(XmlSchemaSet,ICollection<XmlQualifiedName>)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Import(XmlSchemaSet,ICollection<XmlQualifiedName>)
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.Schema.XmlSchemaElement)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: Import(XmlSchemaSet,XmlSchemaElement)
  nameWithType: XsdDataContractImporter.Import(XmlSchemaSet,XmlSchemaElement)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Import(XmlSchemaSet,XmlSchemaElement)
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import(System.Xml.Schema.XmlSchemaSet,System.Xml.XmlQualifiedName)
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: Import(XmlSchemaSet,XmlQualifiedName)
  nameWithType: XsdDataContractImporter.Import(XmlSchemaSet,XmlQualifiedName)
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Import(XmlSchemaSet,XmlQualifiedName)
- uid: System.Runtime.Serialization.XsdDataContractImporter.Options
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: Options
  nameWithType: XsdDataContractImporter.Options
  fullName: System.Runtime.Serialization.XsdDataContractImporter.Options
- uid: System.Runtime.Serialization.ImportOptions
  parent: System.Runtime.Serialization
  isExternal: false
  name: ImportOptions
  nameWithType: ImportOptions
  fullName: System.Runtime.Serialization.ImportOptions
- uid: System.Runtime.Serialization.XsdDataContractImporter.#ctor*
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: XsdDataContractImporter
  nameWithType: XsdDataContractImporter.XsdDataContractImporter
- uid: System.Runtime.Serialization.XsdDataContractImporter.CanImport*
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: CanImport
  nameWithType: XsdDataContractImporter.CanImport
- uid: System.Runtime.Serialization.XsdDataContractImporter.CodeCompileUnit*
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: CodeCompileUnit
  nameWithType: XsdDataContractImporter.CodeCompileUnit
- uid: System.Runtime.Serialization.XsdDataContractImporter.GetCodeTypeReference*
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: GetCodeTypeReference
  nameWithType: XsdDataContractImporter.GetCodeTypeReference
- uid: System.Runtime.Serialization.XsdDataContractImporter.GetKnownTypeReferences*
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: GetKnownTypeReferences
  nameWithType: XsdDataContractImporter.GetKnownTypeReferences
- uid: System.Runtime.Serialization.XsdDataContractImporter.Import*
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: Import
  nameWithType: XsdDataContractImporter.Import
- uid: System.Runtime.Serialization.XsdDataContractImporter.Options*
  parent: System.Runtime.Serialization.XsdDataContractImporter
  isExternal: false
  name: Options
  nameWithType: XsdDataContractImporter.Options
