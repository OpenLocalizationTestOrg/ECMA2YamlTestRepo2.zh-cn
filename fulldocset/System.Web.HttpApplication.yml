### YamlMime:ManagedReference
items:
- uid: System.Web.HttpApplication
  id: HttpApplication
  children:
  - System.Web.HttpApplication.#ctor
  - System.Web.HttpApplication.AcquireRequestState
  - System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  - System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  - System.Web.HttpApplication.Application
  - System.Web.HttpApplication.AuthenticateRequest
  - System.Web.HttpApplication.AuthorizeRequest
  - System.Web.HttpApplication.BeginRequest
  - System.Web.HttpApplication.CompleteRequest
  - System.Web.HttpApplication.Context
  - System.Web.HttpApplication.Dispose
  - System.Web.HttpApplication.Disposed
  - System.Web.HttpApplication.EndRequest
  - System.Web.HttpApplication.Error
  - System.Web.HttpApplication.Events
  - System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  - System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  - System.Web.HttpApplication.Init
  - System.Web.HttpApplication.LogRequest
  - System.Web.HttpApplication.MapRequestHandler
  - System.Web.HttpApplication.Modules
  - System.Web.HttpApplication.PostAcquireRequestState
  - System.Web.HttpApplication.PostAuthenticateRequest
  - System.Web.HttpApplication.PostAuthorizeRequest
  - System.Web.HttpApplication.PostLogRequest
  - System.Web.HttpApplication.PostMapRequestHandler
  - System.Web.HttpApplication.PostReleaseRequestState
  - System.Web.HttpApplication.PostRequestHandlerExecute
  - System.Web.HttpApplication.PostResolveRequestCache
  - System.Web.HttpApplication.PostUpdateRequestCache
  - System.Web.HttpApplication.PreRequestHandlerExecute
  - System.Web.HttpApplication.PreSendRequestContent
  - System.Web.HttpApplication.PreSendRequestHeaders
  - System.Web.HttpApplication.RegisterModule(System.Type)
  - System.Web.HttpApplication.ReleaseRequestState
  - System.Web.HttpApplication.Request
  - System.Web.HttpApplication.RequestCompleted
  - System.Web.HttpApplication.ResolveRequestCache
  - System.Web.HttpApplication.Response
  - System.Web.HttpApplication.Server
  - System.Web.HttpApplication.Session
  - System.Web.HttpApplication.Site
  - System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  - System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  - System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  - System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  - System.Web.HttpApplication.UpdateRequestCache
  - System.Web.HttpApplication.User
  langs:
  - csharp
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
  type: Class
  summary: "定义方法、 属性和事件所共有的 ASP.NET 应用程序中的所有应用程序对象。 此类是由 Global.asax 文件中的用户定义的应用程序的基类。"
  remarks: "HttpApplication 类的实例中的 ASP.NET 基础结构，不是由用户直接创建。 HttpApplication 类的一个实例用于其生存期内处理多请求。 但是，它可以一次处理只请求一次。 因此，可以使用成员变量来存储每个请求数据。       应用程序引发的事件可以由实现的自定义模块<xref:System.Web.IHttpModule>接口或通过在 Global.asax 中定义的事件处理程序代码文件。</xref:System.Web.IHttpModule> 实现的自定义模块<xref:System.Web.IHttpModule>接口可置于 App_Code 文件夹中或在 DLL 中的 Bin 文件夹中。</xref:System.Web.IHttpModule>       HttpApplication 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE] 1> Bin 文件夹或 App_Code 文件夹中的自定义模块时在集成模式下运行 IIS 7.0，适用于请求管道中的所有请求。 事件处理程序代码放在 Global.asax 文件仅适用于映射到 ASP.NET 处理程序的请求。       应用程序事件将按照以下顺序引发︰ 1。  <xref:System.Web.HttpApplication.BeginRequest>2。</xref:System.Web.HttpApplication.BeginRequest>  <xref:System.Web.HttpApplication.AuthenticateRequest>3。</xref:System.Web.HttpApplication.AuthenticateRequest>  <xref:System.Web.HttpApplication.PostAuthenticateRequest>4。</xref:System.Web.HttpApplication.PostAuthenticateRequest>  <xref:System.Web.HttpApplication.AuthorizeRequest>5。</xref:System.Web.HttpApplication.AuthorizeRequest>  <xref:System.Web.HttpApplication.PostAuthorizeRequest>6。</xref:System.Web.HttpApplication.PostAuthorizeRequest>  <xref:System.Web.HttpApplication.ResolveRequestCache>7。</xref:System.Web.HttpApplication.ResolveRequestCache>  <xref:System.Web.HttpApplication.PostResolveRequestCache>后<xref:System.Web.HttpApplication.PostResolveRequestCache>事件和之前<xref:System.Web.HttpApplication.PostMapRequestHandler>事件，创建事件处理程序 （这是对应的请求 URL 的页面）。</xref:System.Web.HttpApplication.PostMapRequestHandler> </xref:System.Web.HttpApplication.PostResolveRequestCache></xref:System.Web.HttpApplication.PostResolveRequestCache> 当服务器在运行 IIS 7.0，在集成模式下和在最低.NET Framework 版本 3.0，<xref:System.Web.HttpApplication.MapRequestHandler>引发事件。</xref:System.Web.HttpApplication.MapRequestHandler> 当服务器运行 IIS 7.0 经典模式或早期版本的 IIS 中时，无法处理此事件。      8.  <xref:System.Web.HttpApplication.PostMapRequestHandler>9。</xref:System.Web.HttpApplication.PostMapRequestHandler> <xref:System.Web.HttpApplication.AcquireRequestState>10。</xref:System.Web.HttpApplication.AcquireRequestState> <xref:System.Web.HttpApplication.PostAcquireRequestState>11。</xref:System.Web.HttpApplication.PostAcquireRequestState> <xref:System.Web.HttpApplication.PreRequestHandlerExecute>执行事件处理程序。</xref:System.Web.HttpApplication.PreRequestHandlerExecute>      12. <xref:System.Web.HttpApplication.PostRequestHandlerExecute>为 13。</xref:System.Web.HttpApplication.PostRequestHandlerExecute> <xref:System.Web.HttpApplication.ReleaseRequestState>14。</xref:System.Web.HttpApplication.ReleaseRequestState> <xref:System.Web.HttpApplication.PostReleaseRequestState>后<xref:System.Web.HttpApplication.PostReleaseRequestState>引发事件，任何现有的响应筛选器将筛选的输出。</xref:System.Web.HttpApplication.PostReleaseRequestState></xref:System.Web.HttpApplication.PostReleaseRequestState>      15. <xref:System.Web.HttpApplication.UpdateRequestCache>16。</xref:System.Web.HttpApplication.UpdateRequestCache> <xref:System.Web.HttpApplication.PostUpdateRequestCache>17。</xref:System.Web.HttpApplication.PostUpdateRequestCache> <xref:System.Web.HttpApplication.LogRequest>.</xref:System.Web.HttpApplication.LogRequest>           在 IIS 7.0 集成模式下和在支持此事件最低.NET Framework 3.0 18。 <xref:System.Web.HttpApplication.PostLogRequest>此事件是受支持的 IIS 7.0 集成模式下并且至少.NET Framework 3.0 19。</xref:System.Web.HttpApplication.PostLogRequest> <xref:System.Web.HttpApplication.EndRequest></xref:System.Web.HttpApplication.EndRequest>"
  example:
  - "The following two examples demonstrate how to use the HttpApplication class and its events. The first example demonstrates how to create a custom HTTP module and connect an event to it. The second example demonstrates how to modify the Web.config file.  \n  \n The following example demonstrates how to create a custom HTTP module and connect the <xref:System.Web.HttpApplication.AcquireRequestState> event to the HTTP module. HTTP modules intercept each request to Web application resources, thereby allowing you to filter client requests. Any HTTP module that subscribes to an HttpApplication event must implement the <xref:System.Web.IHttpModule> interface.  \n  \n [!code-cs[System.Web.HttpApplication1#1](~/add/codesnippet/csharp/t-system.web.httpapplica_1.cs)]\n [!code-vb[System.Web.HttpApplication1#1](~/add/codesnippet/visualbasic/t-system.web.httpapplica_1.vb)]  \n  \n Before an event in a custom HTTP module can occur, you must modify the configuration settings in the Web.config file to notify ASP.NET about the HTTP module. The following example shows the appropriate configuration setting in the `httpModules` section of the Web.config file. The following setting applies to IIS 7.0 Classic mode and to earlier versions of IIS.  \n  \n```c#  \n<configuration>  \n  <system.web>  \n    <httpModules>  \n      <add type=\"Samples.AspNet.CS.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </httpModules>  \n  </system.web>  \n</configuration>  \n```  \n  \n```vb#  \n<configuration>  \n  <system.web>  \n    <httpModules>  \n      <add type=\"Samples.AspNet.VB.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </httpModules>  \n  </system.web>  \n</configuration>  \n```  \n  \n The following setting applies to IIS 7.0 Integrated mode.  \n  \n```c#  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <add type=\"Samples.AspNet.CS.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      </modules>  \n  </system.webServer>  \n</configuration>  \n```  \n  \n```vb#  \n<configuration>  \n  <system.webServer>  \n    <modules>  \n      <add type=\"Samples.AspNet.VB.CustomHTTPModule\"  \n        name=\"CustomHttpModule\" />  \n      <modules>  \n  </system.webServer>  \n</configuration>  \n```"
  syntax:
    content: >-
      [System.ComponentModel.ToolboxItem(false)]

      public class HttpApplication : IDisposable, System.ComponentModel.IComponent, System.Web.IHttpAsyncHandler
  inheritance:
  - System.Object
  implements:
  - System.ComponentModel.IComponent
  - System.IDisposable
  - System.Web.IHttpAsyncHandler
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpApplication.#ctor
  id: '#ctor'
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: HttpApplication()
  nameWithType: HttpApplication.HttpApplication()
  fullName: System.Web.HttpApplication.HttpApplication()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "初始化的新实例<xref href=&quot;System.Web.HttpApplication&quot;></xref>类。"
  syntax:
    content: public HttpApplication ();
    parameters: []
  overload: System.Web.HttpApplication.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AcquireRequestState
  id: AcquireRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AcquireRequestState
  nameWithType: HttpApplication.AcquireRequestState
  fullName: System.Web.HttpApplication.AcquireRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 获取与当前请求相关联的当前状态 （例如，会话状态） 时发生。"
  remarks: "创建事件处理程序后，将引发 AcquireRequestState 事件。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - For an example of handling the AcquireRequestState event, see the <xref:System.Web.HttpApplication> overview topic.
  syntax:
    content: public event EventHandler AcquireRequestState;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnAcquireRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnAcquireRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnAuthenticateRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnAuthenticateRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.AuthenticateRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnAuthorizeRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnAuthorizeRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.AuthorizeRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnBeginRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnBeginRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnBeginRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.BeginRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnBeginRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnEndRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnEndRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnEndRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnEndRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>为当前请求的事件处理程序。"
  remarks: "AddOnLogRequestAsync 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddOnLogRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnLogRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>为当前请求的事件处理程序。"
  remarks: "AddOnMapRequestHandlerAsync 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddOnMapRequestHandlerAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnMapRequestHandlerAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostAcquireRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostAcquireRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostAcquireRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostAuthenticateRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostAuthenticateRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostAuthenticateRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostAuthorizeRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>到异步集合<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostAuthorizeRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostAuthorizeRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;></xref>为当前请求的事件处理程序。"
  remarks: "AddOnPostLogRequestAsync 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void AddOnPostLogRequestAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostLogRequestAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostLogRequest&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostMapRequestHandlerAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostMapRequestHandlerAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostMapRequestHandler&quot;></xref>集合。"
  overload: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostReleaseRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostReleaseRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostReleaseRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostRequestHandlerExecuteAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostRequestHandlerExecuteAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostRequestHandlerExecute&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostResolveRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostResolveRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostResolveRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostUpdateRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPostUpdateRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>启动事件的异步处理。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PostUpdateRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPreRequestHandlerExecuteAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnPreRequestHandlerExecuteAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.PreRequestHandlerExecute&quot;></xref>集合。"
  overload: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnReleaseRequestStateAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnReleaseRequestStateAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.ReleaseRequestState&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;></xref>到集合的异步事件处理程序<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnResolveRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;></xref>到集合的异步事件处理程序<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnResolveRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.ResolveRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  id: AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnUpdateRequestCacheAsync (System.Web.BeginEventHandler bh, System.Web.EndEventHandler eh);
    parameters:
    - id: bh
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
    - id: eh
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  id: AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;></xref>事件的异步集合到<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;></xref>为当前请求的事件处理程序。"
  syntax:
    content: public void AddOnUpdateRequestCacheAsync (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, object state);
    parameters:
    - id: beginHandler
      type: System.Web.BeginEventHandler
      description: "<xref href=&quot;System.Web.BeginEventHandler&quot;> </xref>开头的异步处理<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
    - id: endHandler
      type: System.Web.EndEventHandler
      description: "<xref href=&quot;System.Web.EndEventHandler&quot;> </xref>结束异步处理<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
    - id: state
      type: System.Object
      description: "关联的状态将添加到异步<xref href=&quot;System.Web.HttpApplication.UpdateRequestCache&quot;> </xref>。"
  overload: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Application
  id: Application
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Application
  nameWithType: HttpApplication.Application
  fullName: System.Web.HttpApplication.Application
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取应用程序的当前状态。"
  remarks: "应用程序的当前状态包含可用于存储.NET Framework 对象和标量值从多个客户端相关的多个 Web 请求的应用程序范围对象的键/值字典。"
  syntax:
    content: public System.Web.HttpApplicationState Application { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "<xref href=&quot;System.Web.HttpApplicationState&quot;> </xref>为当前请求。"
  overload: System.Web.HttpApplication.Application*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AuthenticateRequest
  id: AuthenticateRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AuthenticateRequest
  nameWithType: HttpApplication.AuthenticateRequest
  fullName: System.Web.HttpApplication.AuthenticateRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "安全模块已建立的用户标识时发生。"
  remarks: "用信号通知 AuthenticateRequest 事件，配置的身份验证机制已经身份验证当前的请求。 订阅 AuthenticateRequest 事件可确保在处理附加的模块或事件处理程序之前将身份验证请求。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler AuthenticateRequest;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.AuthorizeRequest
  id: AuthorizeRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: AuthorizeRequest
  nameWithType: HttpApplication.AuthorizeRequest
  fullName: System.Web.HttpApplication.AuthorizeRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "安全模块已验证用户身份验证时发生。"
  remarks: "AuthorizeRequest 事件表示 ASP.NET 已授权当前请求。 订阅 AuthorizeRequest 事件可确保请求将进行身份验证和授权在处理附加的模块或事件处理程序之前。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler AuthorizeRequest;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.BeginRequest
  id: BeginRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: BeginRequest
  nameWithType: HttpApplication.BeginRequest
  fullName: System.Web.HttpApplication.BeginRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "在 ASP.NET 响应请求的形式执行的 HTTP 管道链中的第一个事件发生。"
  remarks: "BeginRequest 事件表示任何给定的新请求的创建。 此事件始终引发，并且始终要请求的处理过程中发生的第一个事件。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler BeginRequest;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.CompleteRequest
  id: CompleteRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: CompleteRequest()
  nameWithType: HttpApplication.CompleteRequest()
  fullName: System.Web.HttpApplication.CompleteRequest()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使 ASP.NET 可以绕过所有事件，并在 HTTP 中进行筛选管道的执行链并直接执行<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>事件。"
  syntax:
    content: public void CompleteRequest ();
    parameters: []
  overload: System.Web.HttpApplication.CompleteRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Context
  id: Context
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Context
  nameWithType: HttpApplication.Context
  fullName: System.Web.HttpApplication.Context
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取有关当前请求的 HTTP 特定信息。"
  syntax:
    content: public System.Web.HttpContext Context { get; }
    return:
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前请求。"
  overload: System.Web.HttpApplication.Context*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Dispose
  id: Dispose
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Dispose()
  nameWithType: HttpApplication.Dispose()
  fullName: System.Web.HttpApplication.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "释放<xref href=&quot;System.Web.HttpApplication&quot;></xref>实例。"
  remarks: "<xref:System.Web.HttpApplication.Request%2A>， <xref:System.Web.HttpApplication.Response%2A>， <xref:System.Web.HttpApplication.Session%2A>，和<xref:System.Web.HttpApplication.Application%2A>执行 Dispose 方法时，属性不是可供使用。</xref:System.Web.HttpApplication.Application%2A> </xref:System.Web.HttpApplication.Session%2A> </xref:System.Web.HttpApplication.Response%2A> </xref:System.Web.HttpApplication.Request%2A>       Dispose 方法调用<xref:System.Web.IHttpModule.Dispose%2A>上每个已注册的方法<xref:System.Web.Configuration.SystemWebSectionGroup.HttpModules%2A>中的应用程序实例和引发<xref:System.Web.HttpApplication.Disposed>事件。</xref:System.Web.HttpApplication.Disposed> </xref:System.Web.Configuration.SystemWebSectionGroup.HttpModules%2A> </xref:System.Web.IHttpModule.Dispose%2A>"
  syntax:
    content: public virtual void Dispose ();
    parameters: []
  overload: System.Web.HttpApplication.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Disposed
  id: Disposed
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Disposed
  nameWithType: HttpApplication.Disposed
  fullName: System.Web.HttpApplication.Disposed
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "释放应用程序时发生。"
  remarks: "在创建已释放的委托时，需要标识处理事件的方法。 若要将事件与事件处理程序关联，请将 Disposed 的一个实例添加到事件的委托。 除非移除了该已释放的委托，称为每当发生该事件时，事件处理程序。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler Disposed;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.EndRequest
  id: EndRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: EndRequest
  nameWithType: HttpApplication.EndRequest
  fullName: System.Web.HttpApplication.EndRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "在 ASP.NET 响应请求的形式执行的 HTTP 管道链中的最后一个事件发生。"
  remarks: "始终是 EndRequest 事件时引发<xref:System.Web.HttpApplication.CompleteRequest%2A>调用方法。</xref:System.Web.HttpApplication.CompleteRequest%2A>       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler EndRequest;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Error
  id: Error
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Error
  nameWithType: HttpApplication.Error
  fullName: System.Web.HttpApplication.Error
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当引发未处理的异常时发生。"
  remarks: "引发错误事件的异常可以访问通过调用<xref:System.Web.HttpServerUtility.GetLastError%2A>方法。</xref:System.Web.HttpServerUtility.GetLastError%2A> 如果你的应用程序生成自定义错误输出，禁止显示默认的错误消息，通过调用由 ASP.NET 生成<xref:System.Web.HttpServerUtility.ClearError%2A>方法。</xref:System.Web.HttpServerUtility.ClearError%2A>      1> [!NOTE]&1;> 如果 Web 应用程序包含 XML Web 服务，你无法将错误事件，用于这些服务的全局异常处理。 XML Web 服务的 HTTP 处理程序使用 XML Web 服务中出现，并将其转换为 SOAP 错误之前调用的错误的任何异常。 若要处理 XML Web 服务异常，生成的 SOAP 扩展来处理自定义全局异常处理程序中的 Web 服务异常。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler Error;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Events
  id: Events
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Events
  nameWithType: HttpApplication.Events
  fullName: System.Web.HttpApplication.Events
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取处理所有的应用程序事件的处理程序委托的事件的列表。"
  syntax:
    content: protected System.ComponentModel.EventHandlerList Events { get; }
    return:
      type: System.ComponentModel.EventHandlerList
      description: "<xref href=&quot;System.ComponentModel.EventHandlerList&quot;> </xref> ，其中包含事件处理程序委托的名称。"
  overload: System.Web.HttpApplication.Events*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  id: GetOutputCacheProviderName(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: GetOutputCacheProviderName(HttpContext)
  nameWithType: HttpApplication.GetOutputCacheProviderName(HttpContext)
  fullName: System.Web.HttpApplication.GetOutputCacheProviderName(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取网站的默认输出缓存提供程序配置的名称。"
  remarks: "你可以重写此方法，并使用它返回为网站配置任何输出缓存提供程序的名称。 ASP.NET 检索命名的提供程序的引用，并使用它来存储当前正在执行的请求的输出缓存数据。       默认情况下，在 ASP.NET 中，所有 HTTP 响应，呈现页面和控件都使用内存中输出缓存。 你可以更改的默认输出缓存提供程序指定不同的提供程序名称的 Web 应用程序由`defaultProvider`。       此外，你可以选择不同的输出缓存提供程序针对各个控件和的各个请求。 选择不同的输出缓存提供程序为不同 Web 用户控件的最简单方法是以声明方式使用新进行`providerName`属性中的页或控件的指令，如下面的示例中所示︰```   <%@ OutputCache Duration=&quot;60&quot; VaryByParam=&quot;None&quot;        providerName=&quot;DiskCache&quot; %>   ```若要指定的 HTTP 请求不同的输出缓存提供程序，你重写此方法要以编程方式指定要用于特定请求的提供程序的 Global.asax 文件中。 有关详细信息，请参阅[ASP.NET 缓存概述](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to programmatically specify the cache provider named `DiskCache` for any HTTP request that goes to the Advanced.aspx page.  \n  \n [Visual Basic]  \n  \n```  \nPublic Overloads Overrides Sub GetOutputCacheProviderName(ByVal context _  \n        As HttpContext) As String   \n    If context.Request.Path.EndsWith(\"Advanced.aspx\") Then   \n        Return \"DiskCache\"   \n    Else   \n        Return MyBase.GetOutputCacheProviderName(context)   \n    End If   \nEnd Sub  \n```  \n  \n```c#  \npublic override string GetOutputCacheProviderName(HttpContext context)  \n{  \n    if (context.Request.Path.EndsWith(\"Advanced.aspx\"))  \n        return \"DiskCache\";  \n    else  \n        return base.GetOutputCacheProviderName(context);  \n}  \n```"
  syntax:
    content: public virtual string GetOutputCacheProviderName (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref> ，它提供对用于 HTTP 请求提供服务的内部服务器对象的引用。"
    return:
      type: System.String
      description: "默认提供程序的名称。"
  overload: System.Web.HttpApplication.GetOutputCacheProviderName*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>context</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或为空字符串。"
  platform:
  - net462
- uid: System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  id: GetVaryByCustomString(System.Web.HttpContext,System.String)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: GetVaryByCustomString(HttpContext,String)
  nameWithType: HttpApplication.GetVaryByCustomString(HttpContext,String)
  fullName: System.Web.HttpApplication.GetVaryByCustomString(HttpContext,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "提供的应用程序范围内实现<xref:System.Web.UI.PartialCachingAttribute.VaryByCustom*>属性。</xref:System.Web.UI.PartialCachingAttribute.VaryByCustom*>"
  remarks: '您可以重写 GetVaryByCustomString 添加计算基于当前请求的自定义不同的值的新方法。 此实现必须调用基类的无法识别的自定义值。 有关详细信息，请参阅[How to︰ 页使用的自定义字符串的缓存版本](~/add/includes/ajax-current-ext-md.md)。'
  syntax:
    content: public virtual string GetVaryByCustomString (System.Web.HttpContext context, string custom);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>对象，其中包含有关当前 Web 请求的信息。"
    - id: custom
      type: System.String
      description: "自定义字符串，指定使用哪个缓存的响应对当前请求作出响应。"
    return:
      type: System.String
      description: "如果值<code> custom </code>参数是<xref uid=&quot;langword_csharp_&quot;browser&quot;&quot; name=&quot;&quot;browser&quot;&quot; href=&quot;&quot;> </xref>，浏览器的<xref:System.Web.Configuration.HttpCapabilitiesBase.Type*>; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Web.Configuration.HttpCapabilitiesBase.Type*>"
  overload: System.Web.HttpApplication.GetVaryByCustomString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Init
  id: Init
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Init()
  nameWithType: HttpApplication.Init()
  fullName: System.Web.HttpApplication.Init()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "添加事件处理程序的所有模块后，请执行自定义的初始化代码。"
  remarks: "在派生类中，你可以重写要添加自定义的一次性初始化代码的 Init 方法。"
  syntax:
    content: public virtual void Init ();
    parameters: []
  overload: System.Web.HttpApplication.Init*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.LogRequest
  id: LogRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: LogRequest
  nameWithType: HttpApplication.LogRequest
  fullName: System.Web.HttpApplication.LogRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 为当前请求执行任何日志记录之前发生。"
  remarks: "即使发生错误，将引发 LogRequest 事件。 你可以提供的事件处理程序 LogRequest 事件以便提供自定义日志记录请求。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       LogRequest 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates how to provide an event handler for the LogRequest event. The event handler also handles several other events. Therefore, the <xref:System.Web.HttpContext.CurrentNotification%2A> and <xref:System.Web.HttpContext.IsPostNotification%2A> properties are used to determine what code to run.  \n  \n [!code-cs[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/csharp/e-system.web.httpapplica_1.cs)]\n [!code-vb[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/visualbasic/e-system.web.httpapplica_1.vb)]"
  syntax:
    content: public event EventHandler LogRequest;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.MapRequestHandler
  id: MapRequestHandler
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: MapRequestHandler
  nameWithType: HttpApplication.MapRequestHandler
  fullName: System.Web.HttpApplication.MapRequestHandler
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当处理程序选择对请求作出响应时发生。"
  remarks: "MapRequestHandler 事件由 ASP.NET 基础结构用于确定当前请求的请求处理程序。 有关详细信息，请参阅[如何︰ 注册 HTTP 处理程序](~/add/includes/ajax-current-ext-md.md)。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       MapRequestHandler 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event EventHandler MapRequestHandler;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Modules
  id: Modules
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Modules
  nameWithType: HttpApplication.Modules
  fullName: System.Web.HttpApplication.Modules
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取当前应用程序的模块的集合。"
  syntax:
    content: public System.Web.HttpModuleCollection Modules { get; }
    return:
      type: System.Web.HttpModuleCollection
      description: "<xref href=&quot;System.Web.HttpModuleCollection&quot;> </xref> ，其中包含应用程序的模块的名称。"
  overload: System.Web.HttpApplication.Modules*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAcquireRequestState
  id: PostAcquireRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAcquireRequestState
  nameWithType: HttpApplication.PostAcquireRequestState
  fullName: System.Web.HttpApplication.PostAcquireRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取与当前请求相关联的请求状态 （例如，会话状态） 时发生。"
  remarks: "PostAcquireRequestState 事件引发之后<xref:System.Web.HttpApplication.AcquireRequestState>已发生事件。</xref:System.Web.HttpApplication.AcquireRequestState> 订阅的功能<xref:System.Web.HttpApplication.AcquireRequestState>事件可以访问由 PostAcquireRequestState 处理任何数据。</xref:System.Web.HttpApplication.AcquireRequestState>       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PostAcquireRequestState;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAuthenticateRequest
  id: PostAuthenticateRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAuthenticateRequest
  nameWithType: HttpApplication.PostAuthenticateRequest
  fullName: System.Web.HttpApplication.PostAuthenticateRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "安全模块已建立的用户标识时发生。"
  remarks: "PostAuthenticateRequest 事件引发之后<xref:System.Web.HttpApplication.AuthenticateRequest>已发生事件。</xref:System.Web.HttpApplication.AuthenticateRequest> 订阅 PostAuthenticateRequest 事件的功能可以访问由 PostAuthenticateRequest 处理任何数据。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PostAuthenticateRequest;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostAuthorizeRequest
  id: PostAuthorizeRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostAuthorizeRequest
  nameWithType: HttpApplication.PostAuthorizeRequest
  fullName: System.Web.HttpApplication.PostAuthorizeRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当前请求的用户已被授权时发生。"
  remarks: "PostAuthorizeRequest 事件表示 ASP.NET 已授权当前请求。 订阅 PostAuthorizeRequest 事件可确保身份验证和授权的请求，然后处理的附加的模块或事件处理程序。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PostAuthorizeRequest;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostLogRequest
  id: PostLogRequest
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostLogRequest
  nameWithType: HttpApplication.PostLogRequest
  fullName: System.Web.HttpApplication.PostLogRequest
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当 ASP.NET 已完成处理的事件处理程序时发生<xref href=&quot;System.Web.HttpApplication.LogRequest&quot;></xref>事件。"
  remarks: "有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       PostLogRequest 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event EventHandler PostLogRequest;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostMapRequestHandler
  id: PostMapRequestHandler
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostMapRequestHandler
  nameWithType: HttpApplication.PostMapRequestHandler
  fullName: System.Web.HttpApplication.PostMapRequestHandler
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 已映射到相应的事件处理程序的当前请求时发生。"
  remarks: '有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PostMapRequestHandler;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostReleaseRequestState
  id: PostReleaseRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostReleaseRequestState
  nameWithType: HttpApplication.PostReleaseRequestState
  fullName: System.Web.HttpApplication.PostReleaseRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当 ASP.NET 已完成执行所有请求事件处理程序和数据已存储的请求状态时发生。"
  remarks: '有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PostReleaseRequestState;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostRequestHandlerExecute
  id: PostRequestHandlerExecute
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostRequestHandlerExecute
  nameWithType: HttpApplication.PostRequestHandlerExecute
  fullName: System.Web.HttpApplication.PostRequestHandlerExecute
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当 ASP.NET 事件处理程序 （例如，一个页面或 XML Web 服务） 完成执行时发生。"
  remarks: '有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PostRequestHandlerExecute;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostResolveRequestCache
  id: PostResolveRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostResolveRequestCache
  nameWithType: HttpApplication.PostResolveRequestCache
  fullName: System.Web.HttpApplication.PostResolveRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当 ASP.NET 绕过的当前事件处理程序的执行，并允许缓存的模块，若要为缓存请求提供服务时发生。"
  remarks: '有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PostResolveRequestCache;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PostUpdateRequestCache
  id: PostUpdateRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PostUpdateRequestCache
  nameWithType: HttpApplication.PostUpdateRequestCache
  fullName: System.Web.HttpApplication.PostUpdateRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当 ASP.NET 完成更新缓存模块和存储用于为从缓存的后续请求提供服务的响应时发生。"
  remarks: "PostUpdateRequestCache 事件引发之后<xref:System.Web.HttpApplication.UpdateRequestCache>已发生事件。</xref:System.Web.HttpApplication.UpdateRequestCache> 当引发 PostUpdateRequestCache 时，ASP.NET 已完成处理代码，并最终确定缓存的内容时。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PostUpdateRequestCache;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreRequestHandlerExecute
  id: PreRequestHandlerExecute
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreRequestHandlerExecute
  nameWithType: HttpApplication.PreRequestHandlerExecute
  fullName: System.Web.HttpApplication.PreRequestHandlerExecute
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 开始执行 （例如，一个页面或 XML Web 服务） 的事件处理程序之前发生。"
  remarks: '有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PreRequestHandlerExecute;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreSendRequestContent
  id: PreSendRequestContent
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreSendRequestContent
  nameWithType: HttpApplication.PreSendRequestContent
  fullName: System.Web.HttpApplication.PreSendRequestContent
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 将内容发送到客户端之前发生。"
  remarks: "PreSendRequestContent 事件可能出现多次。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler PreSendRequestContent;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.PreSendRequestHeaders
  id: PreSendRequestHeaders
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: PreSendRequestHeaders
  nameWithType: HttpApplication.PreSendRequestHeaders
  fullName: System.Web.HttpApplication.PreSendRequestHeaders
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 将 HTTP 标头发送到客户端之前发生。"
  remarks: '有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler PreSendRequestHeaders;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.RegisterModule(System.Type)
  id: RegisterModule(System.Type)
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: RegisterModule(Type)
  nameWithType: HttpApplication.RegisterModule(Type)
  fullName: System.Web.HttpApplication.RegisterModule(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "注册应用程序模块。"
  syntax:
    content: public static void RegisterModule (Type moduleType);
    parameters:
    - id: moduleType
      type: System.Type
      description: "模块类型。"
  overload: System.Web.HttpApplication.RegisterModule*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.ReleaseRequestState
  id: ReleaseRequestState
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: ReleaseRequestState
  nameWithType: HttpApplication.ReleaseRequestState
  fullName: System.Web.HttpApplication.ReleaseRequestState
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "ASP.NET 完成执行所有请求事件处理程序后发生。 此事件导致状态模块，若要保存当前的状态数据。"
  remarks: "当引发 ReleaseRequestState 事件时，应用程序完成了对请求和 ASP.NET 处于有信号状态存储请求状态。       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event EventHandler ReleaseRequestState;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Request
  id: Request
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Request
  nameWithType: HttpApplication.Request
  fullName: System.Web.HttpApplication.Request
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取当前请求的内部请求对象。"
  syntax:
    content: public System.Web.HttpRequest Request { get; }
    return:
      type: System.Web.HttpRequest
      description: "<xref href=&quot;System.Web.HttpRequest&quot;> </xref>处理应用程序的对象。"
  overload: System.Web.HttpApplication.Request*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.HttpRequest&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.RequestCompleted
  id: RequestCompleted
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: RequestCompleted
  nameWithType: HttpApplication.RequestCompleted
  fullName: System.Web.HttpApplication.RequestCompleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "已发布与请求关联的托管的对象时发生。"
  remarks: "事件称为毕竟 RequestCompleted 托管模块并调用了 ASP.NET 管道中的处理程序。 它使模块以清理的资源执行所有托管的模块和处理程序。 如果您需要显式释放在请求期间创建的托管资源的特定时间，请使用此事件。"
  syntax:
    content: public event EventHandler RequestCompleted;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.ResolveRequestCache
  id: ResolveRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: ResolveRequestCache
  nameWithType: HttpApplication.ResolveRequestCache
  fullName: System.Web.HttpApplication.ResolveRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当 ASP.NET 完成授权事件以便缓存模块为从缓存中，跳过事件处理程序 （例如，一个页面或 XML Web 服务） 执行的请求提供服务时发生。"
  remarks: '有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler ResolveRequestCache;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Response
  id: Response
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Response
  nameWithType: HttpApplication.Response
  fullName: System.Web.HttpApplication.Response
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取当前请求的内部函数的响应对象。"
  syntax:
    content: public System.Web.HttpResponse Response { get; }
    return:
      type: System.Web.HttpResponse
      description: "<xref href=&quot;System.Web.HttpResponse&quot;> </xref>处理应用程序的对象。"
  overload: System.Web.HttpApplication.Response*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.HttpResponse&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.Server
  id: Server
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Server
  nameWithType: HttpApplication.Server
  fullName: System.Web.HttpApplication.Server
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取当前请求的内部服务器对象。"
  syntax:
    content: public System.Web.HttpServerUtility Server { get; }
    return:
      type: System.Web.HttpServerUtility
      description: "<xref href=&quot;System.Web.HttpServerUtility&quot;> </xref>处理应用程序的对象。"
  overload: System.Web.HttpApplication.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.Session
  id: Session
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Session
  nameWithType: HttpApplication.Session
  fullName: System.Web.HttpApplication.Session
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取提供对会话数据的访问的内部函数的会话对象。"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Session { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "<xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref>当前会话的对象。"
  overload: System.Web.HttpApplication.Session*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The <xref href=&quot;System.Web.SessionState.HttpSessionState&quot;></xref> object is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpApplication.Site
  id: Site
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: Site
  nameWithType: HttpApplication.Site
  fullName: System.Web.HttpApplication.Site
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置的网站接口<xref href=&quot;System.ComponentModel.IComponent&quot;></xref>实现。"
  syntax:
    content: public System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "<xref href=&quot;System.ComponentModel.ISite&quot;> </xref>允许容器管理并与及其子组件通信的对象。"
  overload: System.Web.HttpApplication.Site*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  id: System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "启动对 HTTP 事件处理程序的异步调用。"
  syntax:
    content: IAsyncResult IHttpAsyncHandler.BeginProcessRequest (System.Web.HttpContext context, AsyncCallback cb, object extraData);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref> ，它提供对用于 HTTP 请求提供服务的内部服务器对象的引用。"
    - id: cb
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>异步方法调用已完成时调用。</xref:System.AsyncCallback> 如果`cb`参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，不会调用的委托。"
    - id: extraData
      type: System.Object
      description: "处理请求所需的任何额外数据。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>包含状态信息的过程。</xref:System.IAsyncResult>"
  overload: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  id: System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "提供一个异步过程<xref uid=&quot;langword_csharp_End&quot; name=&quot;End&quot; href=&quot;&quot;></xref>方法在进程完成时。"
  remarks: "可以使用 IHttpAsyncHandler.EndProcessRequest 方法引发在异步过程中捕获的任何异常。"
  syntax:
    content: void IHttpAsyncHandler.EndProcessRequest (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>包含状态信息的过程。</xref:System.IAsyncResult>"
  overload: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  id: System#Web#IHttpHandler#IsReusable
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>值，该值指示是否可以使用另一个请求<xref href=&quot;System.Web.IHttpHandler&quot;></xref>对象。"
  remarks: "若要显式设置`IsReusable`属性`true`或`false`，提供代码重写`IsReusable`属性访问器。"
  syntax:
    content: bool System.Web.IHttpHandler.IsReusable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Web.IHttpHandler&quot;></xref>对象是可重用; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  id: System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  isEii: true
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: System.Web.IHttpHandler.ProcessRequest(HttpContext)
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "可以实现一个自定义 HTTP 处理程序处理 HTTP Web 请求<xref href=&quot;System.Web.IHttpHandler&quot;></xref>接口。"
  remarks: "继承的类<xref:System.Web.IHttpModule>和<xref:System.Web.IHttpHandler>接口提供的引用<xref:System.Web.HttpContext>为当前 HTTP 请求的对象。</xref:System.Web.HttpContext> </xref:System.Web.IHttpHandler> </xref:System.Web.IHttpModule> 对象提供对内部函数访问`Request`， `Response`，和`Server`请求的对象。"
  syntax:
    content: void IHttpHandler.ProcessRequest (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref> ，它提供对用于 HTTP 请求提供服务的内部服务器对象的引用。"
  overload: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "在所有情况下。"
  platform:
  - net462
- uid: System.Web.HttpApplication.UpdateRequestCache
  id: UpdateRequestCache
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: UpdateRequestCache
  nameWithType: HttpApplication.UpdateRequestCache
  fullName: System.Web.HttpApplication.UpdateRequestCache
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "当 ASP.NET 完成执行事件处理程序以便让缓存模块存储将用于为从缓存的后续请求提供服务的响应时发生。"
  remarks: '有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: public event EventHandler UpdateRequestCache;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpApplication.User
  id: User
  parent: System.Web.HttpApplication
  langs:
  - csharp
  name: User
  nameWithType: HttpApplication.User
  fullName: System.Web.HttpApplication.User
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取当前请求的内部函数的用户对象。"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>对象，表示当前经过身份验证或匿名用户。</xref:System.Security.Principal.IPrincipal>"
  overload: System.Web.HttpApplication.User*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref:System.Security.Principal.IPrincipal>对象是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Security.Principal.IPrincipal>"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.HttpApplication.#ctor
  parent: System.Web.HttpApplication
  isExternal: false
  name: HttpApplication()
  nameWithType: HttpApplication.HttpApplication()
  fullName: System.Web.HttpApplication.HttpApplication()
- uid: System.Web.HttpApplication.AcquireRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: AcquireRequestState
  nameWithType: HttpApplication.AcquireRequestState
  fullName: System.Web.HttpApplication.AcquireRequestState
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.BeginEventHandler
  parent: System.Web
  isExternal: false
  name: BeginEventHandler
  nameWithType: BeginEventHandler
  fullName: System.Web.BeginEventHandler
- uid: System.Web.EndEventHandler
  parent: System.Web
  isExternal: false
  name: EndEventHandler
  nameWithType: EndEventHandler
  fullName: System.Web.EndEventHandler
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnBeginRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnEndRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnEndRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostLogRequestAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnReleaseRequestStateAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnResolveRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler)
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
  fullName: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync(BeginEventHandler,EndEventHandler,Object)
- uid: System.Web.HttpApplication.Application
  parent: System.Web.HttpApplication
  isExternal: false
  name: Application
  nameWithType: HttpApplication.Application
  fullName: System.Web.HttpApplication.Application
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.HttpApplication.AuthenticateRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: AuthenticateRequest
  nameWithType: HttpApplication.AuthenticateRequest
  fullName: System.Web.HttpApplication.AuthenticateRequest
- uid: System.Web.HttpApplication.AuthorizeRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: AuthorizeRequest
  nameWithType: HttpApplication.AuthorizeRequest
  fullName: System.Web.HttpApplication.AuthorizeRequest
- uid: System.Web.HttpApplication.BeginRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: BeginRequest
  nameWithType: HttpApplication.BeginRequest
  fullName: System.Web.HttpApplication.BeginRequest
- uid: System.Web.HttpApplication.CompleteRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: CompleteRequest()
  nameWithType: HttpApplication.CompleteRequest()
  fullName: System.Web.HttpApplication.CompleteRequest()
- uid: System.Web.HttpApplication.Context
  parent: System.Web.HttpApplication
  isExternal: false
  name: Context
  nameWithType: HttpApplication.Context
  fullName: System.Web.HttpApplication.Context
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.HttpApplication.Dispose
  parent: System.Web.HttpApplication
  isExternal: false
  name: Dispose()
  nameWithType: HttpApplication.Dispose()
  fullName: System.Web.HttpApplication.Dispose()
- uid: System.Web.HttpApplication.Disposed
  parent: System.Web.HttpApplication
  isExternal: false
  name: Disposed
  nameWithType: HttpApplication.Disposed
  fullName: System.Web.HttpApplication.Disposed
- uid: System.Web.HttpApplication.EndRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: EndRequest
  nameWithType: HttpApplication.EndRequest
  fullName: System.Web.HttpApplication.EndRequest
- uid: System.Web.HttpApplication.Error
  parent: System.Web.HttpApplication
  isExternal: false
  name: Error
  nameWithType: HttpApplication.Error
  fullName: System.Web.HttpApplication.Error
- uid: System.Web.HttpApplication.Events
  parent: System.Web.HttpApplication
  isExternal: false
  name: Events
  nameWithType: HttpApplication.Events
  fullName: System.Web.HttpApplication.Events
- uid: System.ComponentModel.EventHandlerList
  parent: System.ComponentModel
  isExternal: false
  name: EventHandlerList
  nameWithType: EventHandlerList
  fullName: System.ComponentModel.EventHandlerList
- uid: System.Web.HttpApplication.GetOutputCacheProviderName(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetOutputCacheProviderName(HttpContext)
  nameWithType: HttpApplication.GetOutputCacheProviderName(HttpContext)
  fullName: System.Web.HttpApplication.GetOutputCacheProviderName(HttpContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpApplication.GetVaryByCustomString(System.Web.HttpContext,System.String)
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetVaryByCustomString(HttpContext,String)
  nameWithType: HttpApplication.GetVaryByCustomString(HttpContext,String)
  fullName: System.Web.HttpApplication.GetVaryByCustomString(HttpContext,String)
- uid: System.Web.HttpApplication.Init
  parent: System.Web.HttpApplication
  isExternal: false
  name: Init()
  nameWithType: HttpApplication.Init()
  fullName: System.Web.HttpApplication.Init()
- uid: System.Web.HttpApplication.LogRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: LogRequest
  nameWithType: HttpApplication.LogRequest
  fullName: System.Web.HttpApplication.LogRequest
- uid: System.Web.HttpApplication.MapRequestHandler
  parent: System.Web.HttpApplication
  isExternal: false
  name: MapRequestHandler
  nameWithType: HttpApplication.MapRequestHandler
  fullName: System.Web.HttpApplication.MapRequestHandler
- uid: System.Web.HttpApplication.Modules
  parent: System.Web.HttpApplication
  isExternal: false
  name: Modules
  nameWithType: HttpApplication.Modules
  fullName: System.Web.HttpApplication.Modules
- uid: System.Web.HttpModuleCollection
  parent: System.Web
  isExternal: false
  name: HttpModuleCollection
  nameWithType: HttpModuleCollection
  fullName: System.Web.HttpModuleCollection
- uid: System.Web.HttpApplication.PostAcquireRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAcquireRequestState
  nameWithType: HttpApplication.PostAcquireRequestState
  fullName: System.Web.HttpApplication.PostAcquireRequestState
- uid: System.Web.HttpApplication.PostAuthenticateRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAuthenticateRequest
  nameWithType: HttpApplication.PostAuthenticateRequest
  fullName: System.Web.HttpApplication.PostAuthenticateRequest
- uid: System.Web.HttpApplication.PostAuthorizeRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostAuthorizeRequest
  nameWithType: HttpApplication.PostAuthorizeRequest
  fullName: System.Web.HttpApplication.PostAuthorizeRequest
- uid: System.Web.HttpApplication.PostLogRequest
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostLogRequest
  nameWithType: HttpApplication.PostLogRequest
  fullName: System.Web.HttpApplication.PostLogRequest
- uid: System.Web.HttpApplication.PostMapRequestHandler
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostMapRequestHandler
  nameWithType: HttpApplication.PostMapRequestHandler
  fullName: System.Web.HttpApplication.PostMapRequestHandler
- uid: System.Web.HttpApplication.PostReleaseRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostReleaseRequestState
  nameWithType: HttpApplication.PostReleaseRequestState
  fullName: System.Web.HttpApplication.PostReleaseRequestState
- uid: System.Web.HttpApplication.PostRequestHandlerExecute
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostRequestHandlerExecute
  nameWithType: HttpApplication.PostRequestHandlerExecute
  fullName: System.Web.HttpApplication.PostRequestHandlerExecute
- uid: System.Web.HttpApplication.PostResolveRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostResolveRequestCache
  nameWithType: HttpApplication.PostResolveRequestCache
  fullName: System.Web.HttpApplication.PostResolveRequestCache
- uid: System.Web.HttpApplication.PostUpdateRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: PostUpdateRequestCache
  nameWithType: HttpApplication.PostUpdateRequestCache
  fullName: System.Web.HttpApplication.PostUpdateRequestCache
- uid: System.Web.HttpApplication.PreRequestHandlerExecute
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreRequestHandlerExecute
  nameWithType: HttpApplication.PreRequestHandlerExecute
  fullName: System.Web.HttpApplication.PreRequestHandlerExecute
- uid: System.Web.HttpApplication.PreSendRequestContent
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreSendRequestContent
  nameWithType: HttpApplication.PreSendRequestContent
  fullName: System.Web.HttpApplication.PreSendRequestContent
- uid: System.Web.HttpApplication.PreSendRequestHeaders
  parent: System.Web.HttpApplication
  isExternal: false
  name: PreSendRequestHeaders
  nameWithType: HttpApplication.PreSendRequestHeaders
  fullName: System.Web.HttpApplication.PreSendRequestHeaders
- uid: System.Web.HttpApplication.RegisterModule(System.Type)
  parent: System.Web.HttpApplication
  isExternal: false
  name: RegisterModule(Type)
  nameWithType: HttpApplication.RegisterModule(Type)
  fullName: System.Web.HttpApplication.RegisterModule(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.HttpApplication.ReleaseRequestState
  parent: System.Web.HttpApplication
  isExternal: false
  name: ReleaseRequestState
  nameWithType: HttpApplication.ReleaseRequestState
  fullName: System.Web.HttpApplication.ReleaseRequestState
- uid: System.Web.HttpApplication.Request
  parent: System.Web.HttpApplication
  isExternal: false
  name: Request
  nameWithType: HttpApplication.Request
  fullName: System.Web.HttpApplication.Request
- uid: System.Web.HttpRequest
  parent: System.Web
  isExternal: false
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: System.Web.HttpRequest
- uid: System.Web.HttpApplication.RequestCompleted
  parent: System.Web.HttpApplication
  isExternal: false
  name: RequestCompleted
  nameWithType: HttpApplication.RequestCompleted
  fullName: System.Web.HttpApplication.RequestCompleted
- uid: System.Web.HttpApplication.ResolveRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: ResolveRequestCache
  nameWithType: HttpApplication.ResolveRequestCache
  fullName: System.Web.HttpApplication.ResolveRequestCache
- uid: System.Web.HttpApplication.Response
  parent: System.Web.HttpApplication
  isExternal: false
  name: Response
  nameWithType: HttpApplication.Response
  fullName: System.Web.HttpApplication.Response
- uid: System.Web.HttpResponse
  parent: System.Web
  isExternal: false
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: System.Web.HttpResponse
- uid: System.Web.HttpApplication.Server
  parent: System.Web.HttpApplication
  isExternal: false
  name: Server
  nameWithType: HttpApplication.Server
  fullName: System.Web.HttpApplication.Server
- uid: System.Web.HttpServerUtility
  parent: System.Web
  isExternal: false
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
- uid: System.Web.HttpApplication.Session
  parent: System.Web.HttpApplication
  isExternal: false
  name: Session
  nameWithType: HttpApplication.Session
  fullName: System.Web.HttpApplication.Session
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.HttpApplication.Site
  parent: System.Web.HttpApplication
  isExternal: false
  name: Site
  nameWithType: HttpApplication.Site
  fullName: System.Web.HttpApplication.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest(System.Web.HttpContext,System.AsyncCallback,System.Object)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest(HttpContext,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest(System.IAsyncResult)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
  fullName: System.Web.HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest(IAsyncResult)
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.IsReusable
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest(System.Web.HttpContext)
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.ProcessRequest(HttpContext)
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
  fullName: System.Web.HttpApplication.System.Web.IHttpHandler.ProcessRequest(HttpContext)
- uid: System.Web.HttpApplication.UpdateRequestCache
  parent: System.Web.HttpApplication
  isExternal: false
  name: UpdateRequestCache
  nameWithType: HttpApplication.UpdateRequestCache
  fullName: System.Web.HttpApplication.UpdateRequestCache
- uid: System.Web.HttpApplication.User
  parent: System.Web.HttpApplication
  isExternal: false
  name: User
  nameWithType: HttpApplication.User
  fullName: System.Web.HttpApplication.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.HttpApplication.#ctor*
  parent: System.Web.HttpApplication
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication.HttpApplication
- uid: System.Web.HttpApplication.AddOnAcquireRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAcquireRequestStateAsync
  nameWithType: HttpApplication.AddOnAcquireRequestStateAsync
- uid: System.Web.HttpApplication.AddOnAuthenticateRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthenticateRequestAsync
  nameWithType: HttpApplication.AddOnAuthenticateRequestAsync
- uid: System.Web.HttpApplication.AddOnAuthorizeRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnAuthorizeRequestAsync
  nameWithType: HttpApplication.AddOnAuthorizeRequestAsync
- uid: System.Web.HttpApplication.AddOnBeginRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnBeginRequestAsync
  nameWithType: HttpApplication.AddOnBeginRequestAsync
- uid: System.Web.HttpApplication.AddOnEndRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnEndRequestAsync
  nameWithType: HttpApplication.AddOnEndRequestAsync
- uid: System.Web.HttpApplication.AddOnLogRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnLogRequestAsync
  nameWithType: HttpApplication.AddOnLogRequestAsync
- uid: System.Web.HttpApplication.AddOnMapRequestHandlerAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnMapRequestHandlerAsync
  nameWithType: HttpApplication.AddOnMapRequestHandlerAsync
- uid: System.Web.HttpApplication.AddOnPostAcquireRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAcquireRequestStateAsync
  nameWithType: HttpApplication.AddOnPostAcquireRequestStateAsync
- uid: System.Web.HttpApplication.AddOnPostAuthenticateRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthenticateRequestAsync
  nameWithType: HttpApplication.AddOnPostAuthenticateRequestAsync
- uid: System.Web.HttpApplication.AddOnPostAuthorizeRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostAuthorizeRequestAsync
  nameWithType: HttpApplication.AddOnPostAuthorizeRequestAsync
- uid: System.Web.HttpApplication.AddOnPostLogRequestAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostLogRequestAsync
  nameWithType: HttpApplication.AddOnPostLogRequestAsync
- uid: System.Web.HttpApplication.AddOnPostMapRequestHandlerAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostMapRequestHandlerAsync
  nameWithType: HttpApplication.AddOnPostMapRequestHandlerAsync
- uid: System.Web.HttpApplication.AddOnPostReleaseRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostReleaseRequestStateAsync
  nameWithType: HttpApplication.AddOnPostReleaseRequestStateAsync
- uid: System.Web.HttpApplication.AddOnPostRequestHandlerExecuteAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostRequestHandlerExecuteAsync
  nameWithType: HttpApplication.AddOnPostRequestHandlerExecuteAsync
- uid: System.Web.HttpApplication.AddOnPostResolveRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostResolveRequestCacheAsync
  nameWithType: HttpApplication.AddOnPostResolveRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnPostUpdateRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPostUpdateRequestCacheAsync
  nameWithType: HttpApplication.AddOnPostUpdateRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnPreRequestHandlerExecuteAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnPreRequestHandlerExecuteAsync
  nameWithType: HttpApplication.AddOnPreRequestHandlerExecuteAsync
- uid: System.Web.HttpApplication.AddOnReleaseRequestStateAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnReleaseRequestStateAsync
  nameWithType: HttpApplication.AddOnReleaseRequestStateAsync
- uid: System.Web.HttpApplication.AddOnResolveRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnResolveRequestCacheAsync
  nameWithType: HttpApplication.AddOnResolveRequestCacheAsync
- uid: System.Web.HttpApplication.AddOnUpdateRequestCacheAsync*
  parent: System.Web.HttpApplication
  isExternal: false
  name: AddOnUpdateRequestCacheAsync
  nameWithType: HttpApplication.AddOnUpdateRequestCacheAsync
- uid: System.Web.HttpApplication.Application*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Application
  nameWithType: HttpApplication.Application
- uid: System.Web.HttpApplication.CompleteRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: CompleteRequest
  nameWithType: HttpApplication.CompleteRequest
- uid: System.Web.HttpApplication.Context*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Context
  nameWithType: HttpApplication.Context
- uid: System.Web.HttpApplication.Dispose*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Dispose
  nameWithType: HttpApplication.Dispose
- uid: System.Web.HttpApplication.Events*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Events
  nameWithType: HttpApplication.Events
- uid: System.Web.HttpApplication.GetOutputCacheProviderName*
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetOutputCacheProviderName
  nameWithType: HttpApplication.GetOutputCacheProviderName
- uid: System.Web.HttpApplication.GetVaryByCustomString*
  parent: System.Web.HttpApplication
  isExternal: false
  name: GetVaryByCustomString
  nameWithType: HttpApplication.GetVaryByCustomString
- uid: System.Web.HttpApplication.Init*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Init
  nameWithType: HttpApplication.Init
- uid: System.Web.HttpApplication.Modules*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Modules
  nameWithType: HttpApplication.Modules
- uid: System.Web.HttpApplication.RegisterModule*
  parent: System.Web.HttpApplication
  isExternal: false
  name: RegisterModule
  nameWithType: HttpApplication.RegisterModule
- uid: System.Web.HttpApplication.Request*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Request
  nameWithType: HttpApplication.Request
- uid: System.Web.HttpApplication.Response*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Response
  nameWithType: HttpApplication.Response
- uid: System.Web.HttpApplication.Server*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Server
  nameWithType: HttpApplication.Server
- uid: System.Web.HttpApplication.Session*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Session
  nameWithType: HttpApplication.Session
- uid: System.Web.HttpApplication.Site*
  parent: System.Web.HttpApplication
  isExternal: false
  name: Site
  nameWithType: HttpApplication.Site
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#BeginProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.BeginProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.BeginProcessRequest
- uid: System.Web.HttpApplication.System#Web#IHttpAsyncHandler#EndProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpAsyncHandler.EndProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpAsyncHandler.EndProcessRequest
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#IsReusable*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.IsReusable
  nameWithType: HttpApplication.System.Web.IHttpHandler.IsReusable
- uid: System.Web.HttpApplication.System#Web#IHttpHandler#ProcessRequest*
  parent: System.Web.HttpApplication
  isExternal: false
  name: System.Web.IHttpHandler.ProcessRequest
  nameWithType: HttpApplication.System.Web.IHttpHandler.ProcessRequest
- uid: System.Web.HttpApplication.User*
  parent: System.Web.HttpApplication
  isExternal: false
  name: User
  nameWithType: HttpApplication.User
