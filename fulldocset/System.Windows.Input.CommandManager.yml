### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.CommandManager
  id: CommandManager
  children:
  - System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandManager.CanExecuteEvent
  - System.Windows.Input.CommandManager.ExecutedEvent
  - System.Windows.Input.CommandManager.InvalidateRequerySuggested
  - System.Windows.Input.CommandManager.PreviewCanExecuteEvent
  - System.Windows.Input.CommandManager.PreviewExecutedEvent
  - System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)
  - System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)
  - System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  - System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  - System.Windows.Input.CommandManager.RequerySuggested
  langs:
  - csharp
  name: CommandManager
  nameWithType: CommandManager
  fullName: System.Windows.Input.CommandManager
  type: Class
  summary: "提供相关的命令实用工具方法，用于注册<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>和<xref href=&quot;System.Windows.Input.InputBinding&quot;></xref>对象为类所有者和命令，添加和删除命令事件处理程序，以及提供用于查询命令的状态的服务。"
  remarks: "CommandManager 负责管理路由的命令。  有关命令的详细信息，请参阅[命令概述](~/add/includes/ajax-current-ext-md.md)。       使用<xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A>注册<xref:System.Windows.Input.CommandBinding>而不是实例的类。</xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandManager.RegisterClassCommandBinding%2A>       使用<xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>注册<xref:System.Windows.Input.InputBinding>而不是实例的类。</xref:System.Windows.Input.InputBinding> </xref:System.Windows.Input.CommandManager.RegisterClassInputBinding%2A>       <xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>方法强制 CommandManager 引发<xref:System.Windows.Input.CommandManager.RequerySuggested>事件。</xref:System.Windows.Input.CommandManager.RequerySuggested> </xref:System.Windows.Input.CommandManager.InvalidateRequerySuggested%2A>  <xref:System.Windows.Input.CommandManager.RequerySuggested>事件通知的命令源来查询它的关联以确定是否可以执行此命令的命令。</xref:System.Windows.Input.CommandManager.RequerySuggested>"
  syntax:
    content: public sealed class CommandManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  nameWithType: CommandManager.AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "将附加指定<xref href=&quot;System.Windows.Input.CanExecuteRoutedEventHandler&quot;></xref>到指定的元素。"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \n  \n First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  \n  \n Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  \n  \n And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the AddCanExecuteHandler and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]"
  syntax:
    content: public static void AddCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.UIElement
      description: "要附加的元素`handler`到。"
    - id: handler
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "可以执行处理程序。"
  overload: System.Windows.Input.CommandManager.AddCanExecuteHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  id: AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  nameWithType: CommandManager.AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "将附加指定<xref href=&quot;System.Windows.Input.ExecutedRoutedEventHandler&quot;></xref>到指定的元素。"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \n  \n First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  \n  \n Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  \n  \n And finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and AddExecutedHandler.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]"
  syntax:
    content: public static void AddExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.UIElement
      description: "要附加的元素`handler`到。"
    - id: handler
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "执行处理程序。"
  overload: System.Windows.Input.CommandManager.AddExecutedHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  nameWithType: CommandManager.AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "将附加指定<xref href=&quot;System.Windows.Input.CanExecuteRoutedEventHandler&quot;></xref>到指定的元素。"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \n  \n First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  \n  \n Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  \n  \n Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]"
  syntax:
    content: public static void AddPreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.UIElement
      description: "要附加的元素`handler`到。"
    - id: handler
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "可以执行处理程序。"
  overload: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  id: AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  nameWithType: CommandManager.AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "将附加指定<xref href=&quot;System.Windows.Input.ExecutedRoutedEventHandler&quot;></xref>到指定的元素。"
  remarks: ''
  example:
  - "The following example creates a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> and attaches them to a <xref:System.Windows.Controls.Button> which is a command source for the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \n  \n First, the <xref:System.Windows.Controls.Button> is created and associated with the <xref:System.Windows.Input.ApplicationCommands.Help%2A> command.  \n  \n [!code-xml[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlersXAML](~/add/codesnippet/xaml/CommandingOverviewSnippets/Window1.xaml#commandingoverviewcmdmanageraddhandlersxaml)]  \n  \n Next, the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and the <xref:System.Windows.Input.ExecutedRoutedEventHandler> are created.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerexecutedhandler)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerExecutedHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerexecutedhandler)]  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagercanexecutehandler)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerCanExecuteHandler](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagercanexecutehandler)]  \n  \n Finally, the handlers are attached to the <xref:System.Windows.Controls.Button> using the <xref:System.Windows.Input.CommandManager.AddCanExecuteHandler%2A> and <xref:System.Windows.Input.CommandManager.AddExecutedHandler%2A>.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanageraddhandlers)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerAddHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanageraddhandlers)]"
  syntax:
    content: public static void AddPreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.UIElement
      description: "要附加的元素`handler`到。"
    - id: handler
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "可以执行处理程序。"
  overload: System.Windows.Input.CommandManager.AddPreviewExecutedHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.CanExecuteEvent
  id: CanExecuteEvent
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: CanExecuteEvent
  nameWithType: CommandManager.CanExecuteEvent
  fullName: System.Windows.Input.CommandManager.CanExecuteEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "标识<xref:System.Windows.Input.CommandManager.CanExecute>附加事件。</xref:System.Windows.Input.CommandManager.CanExecute>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent CanExecuteEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.ExecutedEvent
  id: ExecutedEvent
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: ExecutedEvent
  nameWithType: CommandManager.ExecutedEvent
  fullName: System.Windows.Input.CommandManager.ExecutedEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "标识<xref:System.Windows.Input.CommandManager.Executed>附加事件。</xref:System.Windows.Input.CommandManager.Executed>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent ExecutedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.InvalidateRequerySuggested
  id: InvalidateRequerySuggested
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: InvalidateRequerySuggested()
  nameWithType: CommandManager.InvalidateRequerySuggested()
  fullName: System.Windows.Input.CommandManager.InvalidateRequerySuggested()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "强制<xref href=&quot;System.Windows.Input.CommandManager&quot;></xref>引发<xref href=&quot;System.Windows.Input.CommandManager.RequerySuggested&quot;></xref>事件。"
  remarks: "<xref:System.Windows.Input.CommandManager>仅关注特定条件确定命令目标已更改时，例如，在键盘焦点的更改。</xref:System.Windows.Input.CommandManager>  在情况下其中<xref:System.Windows.Input.CommandManager>未充分确定更改的条件下，会导致不能执行的命令，可以调用 InvalidateRequerySuggested 以进行强制<xref:System.Windows.Input.CommandManager>引发<xref:System.Windows.Input.CommandManager.RequerySuggested>事件。</xref:System.Windows.Input.CommandManager.RequerySuggested> </xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager>"
  example:
  - "The following example uses a <xref:System.Windows.Threading.DispatcherTimer> to periodically call InvalidateRequerySuggested to force the <xref:System.Windows.Input.CommandManager> to raise the <xref:System.Windows.Input.CommandManager.RequerySuggested> event.  \n  \n [!code-vb[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/visualbasic/invalidaterequerywithdispatchertimer/window1.xaml.vb#invalidatesampledispatchertimer)]\n [!code-cs[InvalidateRequeryWithDispatcherTimer#InvalidateSampleDispatcherTimer](~/add/codesnippet/csharp/InvalidateRequeryWithDispatcherTimer/Window1.xaml.cs#invalidatesampledispatchertimer)]"
  syntax:
    content: public static void InvalidateRequerySuggested ();
    parameters: []
  overload: System.Windows.Input.CommandManager.InvalidateRequerySuggested*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.PreviewCanExecuteEvent
  id: PreviewCanExecuteEvent
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: PreviewCanExecuteEvent
  nameWithType: CommandManager.PreviewCanExecuteEvent
  fullName: System.Windows.Input.CommandManager.PreviewCanExecuteEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "标识<xref:System.Windows.Input.CommandManager.PreviewCanExecute>附加事件。</xref:System.Windows.Input.CommandManager.PreviewCanExecute>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewCanExecuteEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.PreviewExecutedEvent
  id: PreviewExecutedEvent
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: PreviewExecutedEvent
  nameWithType: CommandManager.PreviewExecutedEvent
  fullName: System.Windows.Input.CommandManager.PreviewExecutedEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "标识<xref:System.Windows.Input.CommandManager.PreviewExecuted>附加事件。</xref:System.Windows.Input.CommandManager.PreviewExecuted>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent PreviewExecutedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)
  id: RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: RegisterClassCommandBinding(Type,CommandBinding)
  nameWithType: CommandManager.RegisterClassCommandBinding(Type,CommandBinding)
  fullName: System.Windows.Input.CommandManager.RegisterClassCommandBinding(Type,CommandBinding)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "注册<xref href=&quot;System.Windows.Input.CommandBinding&quot;></xref>使用指定的类型。"
  remarks: "此方法实现了<xref:System.Windows.Input.CommandBinding>要而类的实例不是通过与类相关联</xref:System.Windows.Input.CommandBinding>"
  syntax:
    content: public static void RegisterClassCommandBinding (Type type, System.Windows.Input.CommandBinding commandBinding);
    parameters:
    - id: type
      type: System.Type
      description: "用来注册类`commandBinding`。"
    - id: commandBinding
      type: System.Windows.Input.CommandBinding
      description: "要注册的命令绑定。"
  overload: System.Windows.Input.CommandManager.RegisterClassCommandBinding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>commandBinding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)
  id: RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: RegisterClassInputBinding(Type,InputBinding)
  nameWithType: CommandManager.RegisterClassInputBinding(Type,InputBinding)
  fullName: System.Windows.Input.CommandManager.RegisterClassInputBinding(Type,InputBinding)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "注册指定<xref href=&quot;System.Windows.Input.InputBinding&quot;></xref>使用指定的类型。"
  remarks: "此方法实现了<xref:System.Windows.Input.InputBinding>要与类型而不是类的实例相关联</xref:System.Windows.Input.InputBinding>"
  syntax:
    content: public static void RegisterClassInputBinding (Type type, System.Windows.Input.InputBinding inputBinding);
    parameters:
    - id: type
      type: System.Type
      description: "要注册的类型`inputBinding`使用。"
    - id: inputBinding
      type: System.Windows.Input.InputBinding
      description: "要注册的输入的绑定。"
  overload: System.Windows.Input.CommandManager.RegisterClassInputBinding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>or <code>inputBinding</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  nameWithType: CommandManager.RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "分离指定<xref href=&quot;System.Windows.Input.CanExecuteRoutedEventHandler&quot;></xref>从指定的元素。"
  remarks: ''
  example:
  - "The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]"
  syntax:
    content: public static void RemoveCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.UIElement
      description: "要移除的元素`handler`从。"
    - id: handler
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "可以执行处理程序。"
  overload: System.Windows.Input.CommandManager.RemoveCanExecuteHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  id: RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  nameWithType: CommandManager.RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "分离指定<xref href=&quot;System.Windows.Input.ExecutedRoutedEventHandler&quot;></xref>从指定的元素。"
  remarks: ''
  example:
  - "The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]"
  syntax:
    content: public static void RemoveExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.UIElement
      description: "要移除的元素`handler`从。"
    - id: handler
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "执行处理程序。"
  overload: System.Windows.Input.CommandManager.RemoveExecutedHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  id: RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  nameWithType: CommandManager.RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "分离指定<xref href=&quot;System.Windows.Input.CanExecuteRoutedEventHandler&quot;></xref>从指定的元素。"
  remarks: ''
  example:
  - "The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]"
  syntax:
    content: public static void RemovePreviewCanExecuteHandler (System.Windows.UIElement element, System.Windows.Input.CanExecuteRoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.UIElement
      description: "要移除的元素`handler`从。"
    - id: handler
      type: System.Windows.Input.CanExecuteRoutedEventHandler
      description: "可以执行处理程序。"
  overload: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  id: RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  nameWithType: CommandManager.RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "分离指定<xref href=&quot;System.Windows.Input.ExecutedRoutedEventHandler&quot;></xref>从指定的元素。"
  remarks: ''
  example:
  - "The following example detaches a <xref:System.Windows.Input.CanExecuteRoutedEventHandler> and an <xref:System.Windows.Input.ExecutedRoutedEventHandler> which had previously been attached to a <xref:System.Windows.Controls.Button>.  \n  \n [!code-cs[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/csharp/CommandingOverviewSnippets/Window1.xaml.cs#commandingoverviewcmdmanagerremovehandlers)]\n [!code-vb[commandingoverviewsnippets#CommandingOverviewCmdManagerRemoveHandlers](~/add/codesnippet/visualbasic/commandingoverviewsnippets/window1.xaml.vb#commandingoverviewcmdmanagerremovehandlers)]"
  syntax:
    content: public static void RemovePreviewExecutedHandler (System.Windows.UIElement element, System.Windows.Input.ExecutedRoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.UIElement
      description: "要移除的元素`handler`从。"
    - id: handler
      type: System.Windows.Input.ExecutedRoutedEventHandler
      description: "执行处理程序。"
  overload: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>or <code>handler</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.CommandManager.RequerySuggested
  id: RequerySuggested
  parent: System.Windows.Input.CommandManager
  langs:
  - csharp
  name: RequerySuggested
  nameWithType: CommandManager.RequerySuggested
  fullName: System.Windows.Input.CommandManager.RequerySuggested
  type: Event
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "发生时<xref href=&quot;System.Windows.Input.CommandManager&quot;></xref>检测到可能会更改要执行的命令的能力的条件。"
  remarks: "由于此事件是静态的它将仅保存到该处理程序作为弱引用。  侦听此事件的对象应保持到其事件处理程序，以避免对它进行垃圾回收的强引用。 这可以通过创建一个私有字段和将该处理程序分配作为值之前或之后将附加到此事件。"
  syntax:
    content: public static event EventHandler RequerySuggested;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.CommandManager.AddCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  nameWithType: CommandManager.AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.AddCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
- uid: System.Windows.UIElement
  parent: System.Windows
  isExternal: false
  name: UIElement
  nameWithType: UIElement
  fullName: System.Windows.UIElement
- uid: System.Windows.Input.CanExecuteRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: CanExecuteRoutedEventHandler
  nameWithType: CanExecuteRoutedEventHandler
  fullName: System.Windows.Input.CanExecuteRoutedEventHandler
- uid: System.Windows.Input.CommandManager.AddExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  nameWithType: CommandManager.AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.AddExecutedHandler(UIElement,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  parent: System.Windows.Input
  isExternal: false
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
- uid: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  nameWithType: CommandManager.AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CommandManager.AddPreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  nameWithType: CommandManager.AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.AddPreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.CommandManager.CanExecuteEvent
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: CanExecuteEvent
  nameWithType: CommandManager.CanExecuteEvent
  fullName: System.Windows.Input.CommandManager.CanExecuteEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Input.CommandManager.ExecutedEvent
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: ExecutedEvent
  nameWithType: CommandManager.ExecutedEvent
  fullName: System.Windows.Input.CommandManager.ExecutedEvent
- uid: System.Windows.Input.CommandManager.InvalidateRequerySuggested
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: InvalidateRequerySuggested()
  nameWithType: CommandManager.InvalidateRequerySuggested()
  fullName: System.Windows.Input.CommandManager.InvalidateRequerySuggested()
- uid: System.Windows.Input.CommandManager.PreviewCanExecuteEvent
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: PreviewCanExecuteEvent
  nameWithType: CommandManager.PreviewCanExecuteEvent
  fullName: System.Windows.Input.CommandManager.PreviewCanExecuteEvent
- uid: System.Windows.Input.CommandManager.PreviewExecutedEvent
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: PreviewExecutedEvent
  nameWithType: CommandManager.PreviewExecutedEvent
  fullName: System.Windows.Input.CommandManager.PreviewExecutedEvent
- uid: System.Windows.Input.CommandManager.RegisterClassCommandBinding(System.Type,System.Windows.Input.CommandBinding)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RegisterClassCommandBinding(Type,CommandBinding)
  nameWithType: CommandManager.RegisterClassCommandBinding(Type,CommandBinding)
  fullName: System.Windows.Input.CommandManager.RegisterClassCommandBinding(Type,CommandBinding)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.Input.CommandBinding
  parent: System.Windows.Input
  isExternal: false
  name: CommandBinding
  nameWithType: CommandBinding
  fullName: System.Windows.Input.CommandBinding
- uid: System.Windows.Input.CommandManager.RegisterClassInputBinding(System.Type,System.Windows.Input.InputBinding)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RegisterClassInputBinding(Type,InputBinding)
  nameWithType: CommandManager.RegisterClassInputBinding(Type,InputBinding)
  fullName: System.Windows.Input.CommandManager.RegisterClassInputBinding(Type,InputBinding)
- uid: System.Windows.Input.InputBinding
  parent: System.Windows.Input
  isExternal: false
  name: InputBinding
  nameWithType: InputBinding
  fullName: System.Windows.Input.InputBinding
- uid: System.Windows.Input.CommandManager.RemoveCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  nameWithType: CommandManager.RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.RemoveCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CommandManager.RemoveExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  nameWithType: CommandManager.RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.RemoveExecutedHandler(UIElement,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(System.Windows.UIElement,System.Windows.Input.CanExecuteRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  nameWithType: CommandManager.RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler(UIElement,CanExecuteRoutedEventHandler)
- uid: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(System.Windows.UIElement,System.Windows.Input.ExecutedRoutedEventHandler)
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  nameWithType: CommandManager.RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
  fullName: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler(UIElement,ExecutedRoutedEventHandler)
- uid: System.Windows.Input.CommandManager.RequerySuggested
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RequerySuggested
  nameWithType: CommandManager.RequerySuggested
  fullName: System.Windows.Input.CommandManager.RequerySuggested
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Input.CommandManager.AddCanExecuteHandler*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: AddCanExecuteHandler
  nameWithType: CommandManager.AddCanExecuteHandler
- uid: System.Windows.Input.CommandManager.AddExecutedHandler*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: AddExecutedHandler
  nameWithType: CommandManager.AddExecutedHandler
- uid: System.Windows.Input.CommandManager.AddPreviewCanExecuteHandler*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: AddPreviewCanExecuteHandler
  nameWithType: CommandManager.AddPreviewCanExecuteHandler
- uid: System.Windows.Input.CommandManager.AddPreviewExecutedHandler*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: AddPreviewExecutedHandler
  nameWithType: CommandManager.AddPreviewExecutedHandler
- uid: System.Windows.Input.CommandManager.InvalidateRequerySuggested*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: InvalidateRequerySuggested
  nameWithType: CommandManager.InvalidateRequerySuggested
- uid: System.Windows.Input.CommandManager.RegisterClassCommandBinding*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RegisterClassCommandBinding
  nameWithType: CommandManager.RegisterClassCommandBinding
- uid: System.Windows.Input.CommandManager.RegisterClassInputBinding*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RegisterClassInputBinding
  nameWithType: CommandManager.RegisterClassInputBinding
- uid: System.Windows.Input.CommandManager.RemoveCanExecuteHandler*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RemoveCanExecuteHandler
  nameWithType: CommandManager.RemoveCanExecuteHandler
- uid: System.Windows.Input.CommandManager.RemoveExecutedHandler*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RemoveExecutedHandler
  nameWithType: CommandManager.RemoveExecutedHandler
- uid: System.Windows.Input.CommandManager.RemovePreviewCanExecuteHandler*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RemovePreviewCanExecuteHandler
  nameWithType: CommandManager.RemovePreviewCanExecuteHandler
- uid: System.Windows.Input.CommandManager.RemovePreviewExecutedHandler*
  parent: System.Windows.Input.CommandManager
  isExternal: false
  name: RemovePreviewExecutedHandler
  nameWithType: CommandManager.RemovePreviewExecutedHandler
