### YamlMime:ManagedReference
items:
- uid: System.Configuration.SettingsPropertyValue
  id: SettingsPropertyValue
  children:
  - System.Configuration.SettingsPropertyValue.#ctor(System.Configuration.SettingsProperty)
  - System.Configuration.SettingsPropertyValue.Deserialized
  - System.Configuration.SettingsPropertyValue.IsDirty
  - System.Configuration.SettingsPropertyValue.Name
  - System.Configuration.SettingsPropertyValue.Property
  - System.Configuration.SettingsPropertyValue.PropertyValue
  - System.Configuration.SettingsPropertyValue.SerializedValue
  - System.Configuration.SettingsPropertyValue.UsingDefaultValue
  langs:
  - csharp
  name: SettingsPropertyValue
  nameWithType: SettingsPropertyValue
  fullName: System.Configuration.SettingsPropertyValue
  type: Class
  summary: "包含一个设置属性，可以加载和存储的实例的值<xref href=&quot;System.Configuration.SettingsBase&quot;> </xref>。"
  remarks: "实际配置文件的数据块的类表示。 A<xref:System.Configuration.SettingsProperty>实例描述的 SettingsPropertyValue 对象实例中存储的值。</xref:System.Configuration.SettingsProperty>"
  syntax:
    content: public class SettingsPropertyValue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.SettingsPropertyValue.#ctor(System.Configuration.SettingsProperty)
  id: '#ctor(System.Configuration.SettingsProperty)'
  parent: System.Configuration.SettingsPropertyValue
  langs:
  - csharp
  name: SettingsPropertyValue(SettingsProperty)
  nameWithType: SettingsPropertyValue.SettingsPropertyValue(SettingsProperty)
  fullName: System.Configuration.SettingsPropertyValue.SettingsPropertyValue(SettingsProperty)
  type: Constructor
  assemblies:
  - System
  namespace: System.Configuration
  summary: "初始化的新实例<xref href=&quot;System.Configuration.SettingsPropertyValue&quot;></xref>类，基于提供的参数。"
  remarks: "> [!IMPORTANT]1> 调用此方法不受信任的数据会带来安全风险。 调用此方法仅受信任的数据。 有关详细信息，请参阅[不受信任的数据安全风险](http://go.microsoft.com/fwlink/?LinkId=330378)。       <xref:System.Configuration.SettingsProperty>对象描述有关存储的值信息<xref:System.Configuration.SettingsPropertyValue>对象。</xref:System.Configuration.SettingsPropertyValue> </xref:System.Configuration.SettingsProperty>"
  syntax:
    content: public SettingsPropertyValue (System.Configuration.SettingsProperty property);
    parameters:
    - id: property
      type: System.Configuration.SettingsProperty
      description: "指定<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。"
  overload: System.Configuration.SettingsPropertyValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsPropertyValue.Deserialized
  id: Deserialized
  parent: System.Configuration.SettingsPropertyValue
  langs:
  - csharp
  name: Deserialized
  nameWithType: SettingsPropertyValue.Deserialized
  fullName: System.Configuration.SettingsPropertyValue.Deserialized
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取或设置是否的值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象已反序列化。"
  remarks: "仅按需执行反序列化的属性值。"
  syntax:
    content: public bool Deserialized { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象已反序列化; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Configuration.SettingsPropertyValue.Deserialized*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsPropertyValue.IsDirty
  id: IsDirty
  parent: System.Configuration.SettingsPropertyValue
  langs:
  - csharp
  name: IsDirty
  nameWithType: SettingsPropertyValue.IsDirty
  fullName: System.Configuration.SettingsPropertyValue.IsDirty
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取或设置是否的值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象已更改。"
  remarks: "IsDirty 属性指示此类存储的值已更改。 默认值是`false`。 IsDirty 属性设置为`true`以下情况下︰ 1。  中包含的值<xref:System.Configuration.SettingsPropertyValue>对象更改。</xref:System.Configuration.SettingsPropertyValue>      2.  中包含的值<xref:System.Configuration.SettingsPropertyValue>访问对象时，和值不是字符串或基元类型如`int`， `float`， `real`，或`DateTime`。</xref:System.Configuration.SettingsPropertyValue> 托管的值<xref:System.Configuration.SettingsPropertyValue>对象是复杂类型 (例如<xref:System.Collections.ArrayList>)，没有为方法<xref:System.Configuration.SettingsPropertyValue>对象无法检测何时进行了更改。</xref:System.Configuration.SettingsPropertyValue> </xref:System.Collections.ArrayList> </xref:System.Configuration.SettingsPropertyValue> 因此，<xref:System.Configuration.SettingsPropertyValue>对象保守地认为复杂类型有问题，一旦它已被访问从<xref:System.Configuration.SettingsPropertyValue.PropertyValue%2A>属性。</xref:System.Configuration.SettingsPropertyValue.PropertyValue%2A> </xref:System.Configuration.SettingsPropertyValue>"
  syntax:
    content: public bool IsDirty { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>已更改对象; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Configuration.SettingsPropertyValue.IsDirty*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsPropertyValue.Name
  id: Name
  parent: System.Configuration.SettingsPropertyValue
  langs:
  - csharp
  name: Name
  nameWithType: SettingsPropertyValue.Name
  fullName: System.Configuration.SettingsPropertyValue.Name
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取属性的名称从关联<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "名称<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。"
  overload: System.Configuration.SettingsPropertyValue.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsPropertyValue.Property
  id: Property
  parent: System.Configuration.SettingsPropertyValue
  langs:
  - csharp
  name: Property
  nameWithType: SettingsPropertyValue.Property
  fullName: System.Configuration.SettingsPropertyValue.Property
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。"
  syntax:
    content: public System.Configuration.SettingsProperty Property { get; }
    return:
      type: System.Configuration.SettingsProperty
      description: "<xref href=&quot;System.Configuration.SettingsProperty&quot;> </xref>对象，描述<xref href=&quot;System.Configuration.SettingsPropertyValue&quot;></xref>对象。"
  overload: System.Configuration.SettingsPropertyValue.Property*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.SettingsPropertyValue.PropertyValue
  id: PropertyValue
  parent: System.Configuration.SettingsPropertyValue
  langs:
  - csharp
  name: PropertyValue
  nameWithType: SettingsPropertyValue.PropertyValue
  fullName: System.Configuration.SettingsPropertyValue.PropertyValue
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取或设置的值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。"
  syntax:
    content: public object PropertyValue { get; set; }
    return:
      type: System.Object
      description: "值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。 当设置此值时， <> </> *1> 属性设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>和<> *1> 设置为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。       如果从 PropertyValue 属性中，首次访问一个值，而且值最初存储到<xref href=&quot;System.Configuration.SettingsPropertyValue&quot;></xref>对象作为序列化表示形式使用<> *1> 属性，PropertyValue 属性将触发基础值的反序列化。副作用， <> </> *1> 属性将设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。       如果在 ASP.NET 中，发生此事件链和反序列化过程中发生错误时，会记录此错误，使用 ASP.NET 的运行状况监视功能。 默认情况下，这意味着，反序列化错误将显示应用程序事件日志中在 ASP.NET 下运行时。 如果此过程发生在 ASP.NET 外，反序列化过程中发生错误，如果被禁止显示错误，并且在反序列化过程的逻辑的剩余部分时发生。 如果没有序列化的值进行反序列化时反序列化，将尝试，然后<xref href=&quot;System.Configuration.SettingsPropertyValue&quot;></xref>对象而是尝试将返回默认值，如果其中一个已配置为在关联上定义<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>实例。 在这种情况下，如果<> *1> 属性已设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，或为字符串&quot;[null]&quot;，则<xref href=&quot;System.Configuration.SettingsPropertyValue&quot;></xref>对象将初始化为 PropertyValue 属性<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>对于引用类型，或关联的值类型的默认值。另一方面，如果<> *1> 属性持有有效的对象引用或字符串值 （&quot;[除 null 之外]&quot;），则<> *1> 属性改为返回。     如果没有任何序列化的值进行反序列化时尝试反序列化，则和未指定任何默认值，然后将字符串类型返回空字符串。对于所有其他类型的默认实例将返回通过调用<> *1>-对于引用类型这意味着将尝试创建对象实例使用的默认构造函数。  如果此尝试失败，然后<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>返回。"
  overload: System.Configuration.SettingsPropertyValue.PropertyValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "尝试使用的默认值时<> *1> 属性时出错。任一尝试转换<> *1> 的有效类型的属性失败，或生成的值不是与<xref:System.Configuration.SettingsProperty.PropertyType*>.</xref:System.Configuration.SettingsProperty.PropertyType*>所定义的类型兼容"
  platform:
  - net462
- uid: System.Configuration.SettingsPropertyValue.SerializedValue
  id: SerializedValue
  parent: System.Configuration.SettingsPropertyValue
  langs:
  - csharp
  name: SerializedValue
  nameWithType: SettingsPropertyValue.SerializedValue
  fullName: System.Configuration.SettingsPropertyValue.SerializedValue
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取或设置序列化的值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。"
  remarks: "如果<xref:System.Configuration.SettingsPropertyValue>实例检测<xref:System.Configuration.SettingsPropertyValue.PropertyValue%2A>属性已更改。 由于上一次调用 SerializedValue 属性，它将导致<xref:System.Configuration.SettingsPropertyValue.PropertyValue%2A>属性转换为其序列化表示形式。</xref:System.Configuration.SettingsPropertyValue.PropertyValue%2A> </xref:System.Configuration.SettingsPropertyValue.PropertyValue%2A> </xref:System.Configuration.SettingsPropertyValue> 由定义要使用的特定序列化机制<xref:System.Configuration.SettingsProperty.SerializeAs%2A>属性<xref:System.Configuration.SettingsProperty>与关联实例<xref:System.Configuration.SettingsPropertyValue>实例。</xref:System.Configuration.SettingsPropertyValue> </xref:System.Configuration.SettingsProperty> </xref:System.Configuration.SettingsProperty.SerializeAs%2A> 这些当前支持的序列化选项，可将对象转换为字符串使用的字符串类型转换器、 序列化使用<xref:System.Xml.Serialization.XmlSerializer>，或执行二进制序列化。</xref:System.Xml.Serialization.XmlSerializer>      1> [!NOTE]&1;> 基础的序列化程序可能会在序列化过程中引发异常。       直接调用方代码需要<xref:System.Security.Permissions.SecurityPermissionFlag>权限 (权限可用作之一的一部分<xref:System.Security.Permissions.SecurityPermission>) 来调用此属性的 getter 或 setter。</xref:System.Security.Permissions.SecurityPermission> </xref:System.Security.Permissions.SecurityPermissionFlag>  此权限强制实施与<xref:System.Security.Permissions.SecurityAction>枚举值。</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public object SerializedValue { get; set; }
    return:
      type: System.Object
      description: "序列化的值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。"
  overload: System.Configuration.SettingsPropertyValue.SerializedValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "属性的序列化选项指示使用字符串类型转换器，但未提供的类型转换器。"
  platform:
  - net462
- uid: System.Configuration.SettingsPropertyValue.UsingDefaultValue
  id: UsingDefaultValue
  parent: System.Configuration.SettingsPropertyValue
  langs:
  - csharp
  name: UsingDefaultValue
  nameWithType: SettingsPropertyValue.UsingDefaultValue
  fullName: System.Configuration.SettingsPropertyValue.UsingDefaultValue
  type: Property
  assemblies:
  - System
  namespace: System.Configuration
  summary: "获取布尔值，该值指定是否的值<xref href=&quot;System.Configuration.SettingsPropertyValue&quot;></xref>对象是默认值由定义<xref:System.Configuration.SettingsProperty.DefaultValue*>上关联的属性值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象。</xref:System.Configuration.SettingsProperty.DefaultValue*>"
  syntax:
    content: public bool UsingDefaultValue { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<xref href=&quot;System.Configuration.SettingsProperty&quot;></xref>对象是默认值; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Configuration.SettingsPropertyValue.UsingDefaultValue*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.SettingsPropertyValue.#ctor(System.Configuration.SettingsProperty)
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: SettingsPropertyValue(SettingsProperty)
  nameWithType: SettingsPropertyValue.SettingsPropertyValue(SettingsProperty)
  fullName: System.Configuration.SettingsPropertyValue.SettingsPropertyValue(SettingsProperty)
- uid: System.Configuration.SettingsProperty
  parent: System.Configuration
  isExternal: false
  name: SettingsProperty
  nameWithType: SettingsProperty
  fullName: System.Configuration.SettingsProperty
- uid: System.Configuration.SettingsPropertyValue.Deserialized
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: Deserialized
  nameWithType: SettingsPropertyValue.Deserialized
  fullName: System.Configuration.SettingsPropertyValue.Deserialized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Configuration.SettingsPropertyValue.IsDirty
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: IsDirty
  nameWithType: SettingsPropertyValue.IsDirty
  fullName: System.Configuration.SettingsPropertyValue.IsDirty
- uid: System.Configuration.SettingsPropertyValue.Name
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: Name
  nameWithType: SettingsPropertyValue.Name
  fullName: System.Configuration.SettingsPropertyValue.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.SettingsPropertyValue.Property
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: Property
  nameWithType: SettingsPropertyValue.Property
  fullName: System.Configuration.SettingsPropertyValue.Property
- uid: System.Configuration.SettingsPropertyValue.PropertyValue
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: PropertyValue
  nameWithType: SettingsPropertyValue.PropertyValue
  fullName: System.Configuration.SettingsPropertyValue.PropertyValue
- uid: System.Configuration.SettingsPropertyValue.SerializedValue
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: SerializedValue
  nameWithType: SettingsPropertyValue.SerializedValue
  fullName: System.Configuration.SettingsPropertyValue.SerializedValue
- uid: System.Configuration.SettingsPropertyValue.UsingDefaultValue
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: UsingDefaultValue
  nameWithType: SettingsPropertyValue.UsingDefaultValue
  fullName: System.Configuration.SettingsPropertyValue.UsingDefaultValue
- uid: System.Configuration.SettingsPropertyValue.#ctor*
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: SettingsPropertyValue
  nameWithType: SettingsPropertyValue.SettingsPropertyValue
- uid: System.Configuration.SettingsPropertyValue.Deserialized*
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: Deserialized
  nameWithType: SettingsPropertyValue.Deserialized
- uid: System.Configuration.SettingsPropertyValue.IsDirty*
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: IsDirty
  nameWithType: SettingsPropertyValue.IsDirty
- uid: System.Configuration.SettingsPropertyValue.Name*
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: Name
  nameWithType: SettingsPropertyValue.Name
- uid: System.Configuration.SettingsPropertyValue.Property*
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: Property
  nameWithType: SettingsPropertyValue.Property
- uid: System.Configuration.SettingsPropertyValue.PropertyValue*
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: PropertyValue
  nameWithType: SettingsPropertyValue.PropertyValue
- uid: System.Configuration.SettingsPropertyValue.SerializedValue*
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: SerializedValue
  nameWithType: SettingsPropertyValue.SerializedValue
- uid: System.Configuration.SettingsPropertyValue.UsingDefaultValue*
  parent: System.Configuration.SettingsPropertyValue
  isExternal: false
  name: UsingDefaultValue
  nameWithType: SettingsPropertyValue.UsingDefaultValue
