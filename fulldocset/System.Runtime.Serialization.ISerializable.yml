### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.ISerializable
  id: ISerializable
  children:
  - System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  langs:
  - csharp
  name: ISerializable
  nameWithType: ISerializable
  fullName: System.Runtime.Serialization.ISerializable
  type: Interface
  summary: "允许对象以控制其自己的序列化和反序列化。"
  remarks: "必须使用<xref:System.SerializableAttribute>。</xref:System.SerializableAttribute>标记任何可能会进行序列化的类 如果需要控制其序列化过程的一个类，它可以实现 ISerializable 接口。 <xref:System.Runtime.Serialization.Formatter>调用<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>在序列化时，填充提供<xref:System.Runtime.Serialization.SerializationInfo>表示该对象所需的所有数据。</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> </xref:System.Runtime.Serialization.Formatter> <xref:System.Runtime.Serialization.Formatter>创建<xref:System.Runtime.Serialization.SerializationInfo>与图中的对象的类型。</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.Formatter> 需要向代理发送本身就可以使用的对象<xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>和<xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A>方法<xref:System.Runtime.Serialization.SerializationInfo>若要更改所传输的信息。</xref:System.Runtime.Serialization.SerializationInfo> </xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> </xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A>       对于类继承，则可以序列化从实现 ISerializable 的基类派生的类。 在这种情况下，派生的类应调用基类实现的<xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A><xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>.</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>其实现内部</xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> 否则，从基类数据不会序列化。       ISerializable 接口隐含签名构造函数的构造函数 (<xref:System.Runtime.Serialization.SerializationInfo>信息，<xref:System.Runtime.Serialization.StreamingContext>上下文)。</xref:System.Runtime.Serialization.StreamingContext> </xref:System.Runtime.Serialization.SerializationInfo> 在反序列化时，当前的构造函数调用中的数据后才<xref:System.Runtime.Serialization.SerializationInfo>消息格式化程序已反序列化。</xref:System.Runtime.Serialization.SerializationInfo> 一般情况下，如果类未密封，则应保护此构造函数。       无法保证对象被反序列化的顺序。 例如，如果一个类型引用的类型，不反序列化尚未，将发生异常。 如果要创建具有此类依赖项的类型，你可以解决此问题通过实现`IDeserializationCallback`接口和`OnDeserialization`方法。       序列化体系结构处理扩展<xref:System.MarshalByRefObject>扩展<xref:System.Object>.</xref:System.Object>的类型相同</xref:System.MarshalByRefObject>的对象类型 这些类型可标记为<xref:System.SerializableAttribute>，并且实现 ISerializable 接口作为任何其他对象类型。</xref:System.SerializableAttribute> 将捕获其对象状态，并将其保存到流。       通过<xref:System.Runtime.Remoting>、 远程处理基础结构提供的代理项，它会抢占典型的序列化，并改为序列化到<xref:System.MarshalByRefObject>。</xref:System.MarshalByRefObject>代理</xref:System.Runtime.Remoting>正在时使用这些类型 代理项是一个帮助器，知道如何序列化和反序列化的特定类型的对象。 代理，对在大多数情况下，用户不可见的类型<xref:System.Runtime.Remoting.ObjRef>.</xref:System.Runtime.Remoting.ObjRef>将为       为常规设计模式中，它将是很少会类可以同时标记为可序列化的属性和扩展<xref:System.MarshalByRefObject>.</xref:System.MarshalByRefObject> 开发人员应仔细考虑可能的序列化和远程处理方案组合使用这两个特性。 这可能是适用的一个示例是以<xref:System.IO.MemoryStream>.</xref:System.IO.MemoryStream> 尽管的基本类<xref:System.IO.MemoryStream>(<xref:System.IO.Stream>) 从<xref:System.MarshalByRefObject>，可以捕获的状态<xref:System.IO.MemoryStream>并将其还原随意。</xref:System.IO.MemoryStream> </xref:System.MarshalByRefObject> </xref:System.IO.Stream> </xref:System.IO.MemoryStream> 它，因此，可能有意义的此流的状态序列化到数据库并将其在后面某个时间点还原时间。 但是，当使用通过远程处理，此类型的对象将设置代理。       有关更多信息<xref:System.MarshalByRefObject>，请参阅<xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>。</xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector></xref:System.MarshalByRefObject>扩展的类的序列化 有关实现 ISerializable 的详细信息，请参阅[自定义序列化](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates the use of the ISerializable interface to define custom serialization behavior for a class.  \n  \n [!code-cpp[ISerializable Interface Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_4_1.cpp)]\n [!code-cs[ISerializable Interface Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_4_1.cs)]\n [!code-vb[ISerializable Interface Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_4_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public interface ISerializable
  implements: []
  platform:
  - net462
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  langs:
  - csharp
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "填充<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>序列化目标对象所需的数据。"
  remarks: "中包含的任何对象<xref:System.Runtime.Serialization.SerializationInfo>会自动跟踪和序列化格式化程序。</xref:System.Runtime.Serialization.SerializationInfo>       调用 GetObjectData 的代码需要<xref:System.Security.Permissions.SecurityPermission>提供序列化服务。</xref:System.Security.Permissions.SecurityPermission> 关联的枚举︰ <xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>.</xref:System.Security.Permissions.SecurityPermissionFlag?displayProperty=fullName>      1> [!NOTE]&1;> 不保证，此方法将调用一次每个对象实例在序列化过程。 因此，该方法应实现其行为将无论它调用次数相同的方式。"
  example:
  - "The following example uses the GetObjectData method to set alternate values for a serialized object. The code uses the <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> method of the <xref:System.Runtime.Serialization.SerializationInfo> class to store the alternate values when the object is serialized. Conversely, when the constructor of the `Person` class is called during deserialization, the alternatve values are retrieved using the <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> method and reassigned to the object's fields.  \n  \n [!code-cs[ISerializable_GetObjectData#0](~/add/codesnippet/csharp/8416df17-ca26-45ef-baab-_1.cs)]\n [!code-vb[ISerializable_GetObjectData#0](~/add/codesnippet/visualbasic/8416df17-ca26-45ef-baab-_1.vb)]"
  syntax:
    content: public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>要填充数据。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "目标 (请参阅<xref:System.Runtime.Serialization.StreamingContext>) 此序列化。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Runtime.Serialization.ISerializable.GetObjectData*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有所要求的权限。"
  platform:
  - net462
references:
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Runtime.Serialization.ISerializable.GetObjectData*
  parent: System.Runtime.Serialization.ISerializable
  isExternal: false
  name: GetObjectData
  nameWithType: ISerializable.GetObjectData
