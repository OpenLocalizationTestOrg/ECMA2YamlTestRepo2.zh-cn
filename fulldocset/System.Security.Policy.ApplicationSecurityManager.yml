### YamlMime:ManagedReference
items:
- uid: System.Security.Policy.ApplicationSecurityManager
  id: ApplicationSecurityManager
  children:
  - System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager
  - System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)
  - System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts
  langs:
  - csharp
  name: ApplicationSecurityManager
  nameWithType: ApplicationSecurityManager
  fullName: System.Security.Policy.ApplicationSecurityManager
  type: Class
  summary: "管理清单激活的应用程序信任决定。"
  remarks: "ApplicationSecurityManager 类提供了基于清单的应用程序的执行有关的基本信息。 <xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A>属性标识负责确定应用程序是否受信任的信任关系管理器。</xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> <xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A>方法调用应用程序信任管理器以确定应用程序是否受信任。</xref:System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust%2A> <xref:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts%2A>属性包含用户缓存的信任决定。</xref:System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts%2A>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public static class ApplicationSecurityManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager
  id: ApplicationTrustManager
  parent: System.Security.Policy.ApplicationSecurityManager
  langs:
  - csharp
  name: ApplicationTrustManager
  nameWithType: ApplicationSecurityManager.ApplicationTrustManager
  fullName: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取当前应用程序信任关系管理器。"
  remarks: "在当前版本中没有只有一个信任关系管理器，它可以是自定义实现的<xref:System.Security.Policy.IApplicationTrustManager>接口。</xref:System.Security.Policy.IApplicationTrustManager> 默认信任关系管理器实现提示用户输入的权限安装应用程序，提升到应用程序授予的权限。 其他信任关系管理器实现可能具有不同的用户体验。 例如，实现可能会检查企业列表以获取受信任的应用程序，而不是提示用户输入此信息。"
  syntax:
    content: public static System.Security.Policy.IApplicationTrustManager ApplicationTrustManager { get; }
    return:
      type: System.Security.Policy.IApplicationTrustManager
      description: "<xref href=&quot;System.Security.Policy.IApplicationTrustManager&quot;> </xref> ，它表示当前的信任关系管理器。"
  overload: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager*
  exceptions:
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "此应用程序上的策略没有信任关系管理器。"
  platform:
  - net462
- uid: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)
  id: DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)
  parent: System.Security.Policy.ApplicationSecurityManager
  langs:
  - csharp
  name: DetermineApplicationTrust(ActivationContext,TrustManagerContext)
  nameWithType: ApplicationSecurityManager.DetermineApplicationTrust(ActivationContext,TrustManagerContext)
  fullName: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(ActivationContext,TrustManagerContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "确定用户是否批准指定的应用程序以执行请求的权限集。"
  remarks: "DetermineApplicationTrust 使用配置<xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A>属性来确定是否允许应用程序清单中请求的权限集与指定的应用程序的执行。</xref:System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager%2A> 信任关系管理器的行为是依赖于信任关系管理器实现，并且信息传递中`context`参数。 信任关系管理器的默认行为是建立的用户界面 (UI) 对话框，以确定用户的批准。 但是，信任关系管理器还可以确定基于其他条件，如决策企业数据库提供的应用程序的信任状态。 可以保留信任决定，具体取决于`context`参数属性和信任关系管理器实现。 如果该应用程序信任决定基于用户对话框中保持不变，将来调用<xref:System.Security.Policy.ApplicationSecurityManager>不存在为该应用程序的每个请求的用户界面对话框。</xref:System.Security.Policy.ApplicationSecurityManager> DetermineApplicationTrust 称为清单之后，但之前应用程序已下载到本地系统。"
  syntax:
    content: public static bool DetermineApplicationTrust (ActivationContext activationContext, System.Security.Policy.TrustManagerContext context);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref>标识应用程序的激活上下文。"
    - id: context
      type: System.Security.Policy.TrustManagerContext
      description: "A <xref href=&quot;System.Security.Policy.TrustManagerContext&quot;> </xref>标识应用程序的信任管理器上下文。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要执行指定的应用程序;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>activationContext</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts
  id: UserApplicationTrusts
  parent: System.Security.Policy.ApplicationSecurityManager
  langs:
  - csharp
  name: UserApplicationTrusts
  nameWithType: ApplicationSecurityManager.UserApplicationTrusts
  fullName: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Policy
  summary: "获取包含用户的缓存的信任决定的应用程序信任集合。"
  remarks: "集合中的信任决定将保留使用方法的集合，如<xref:System.Security.Policy.ApplicationTrustCollection.Add%2A>方法或<xref:System.Security.Policy.ApplicationTrustCollection.Remove%2A>方法。</xref:System.Security.Policy.ApplicationTrustCollection.Remove%2A> </xref:System.Security.Policy.ApplicationTrustCollection.Add%2A>"
  syntax:
    content: public static System.Security.Policy.ApplicationTrustCollection UserApplicationTrusts { get; }
    return:
      type: System.Security.Policy.ApplicationTrustCollection
      description: "<xref href=&quot;System.Security.Policy.ApplicationTrustCollection&quot;> </xref> ，其中包含用户缓存的信任决定。"
  overload: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager
  parent: System.Security.Policy.ApplicationSecurityManager
  isExternal: false
  name: ApplicationTrustManager
  nameWithType: ApplicationSecurityManager.ApplicationTrustManager
  fullName: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager
- uid: System.Security.Policy.IApplicationTrustManager
  parent: System.Security.Policy
  isExternal: false
  name: IApplicationTrustManager
  nameWithType: IApplicationTrustManager
  fullName: System.Security.Policy.IApplicationTrustManager
- uid: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(System.ActivationContext,System.Security.Policy.TrustManagerContext)
  parent: System.Security.Policy.ApplicationSecurityManager
  isExternal: false
  name: DetermineApplicationTrust(ActivationContext,TrustManagerContext)
  nameWithType: ApplicationSecurityManager.DetermineApplicationTrust(ActivationContext,TrustManagerContext)
  fullName: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust(ActivationContext,TrustManagerContext)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Security.Policy.TrustManagerContext
  parent: System.Security.Policy
  isExternal: false
  name: TrustManagerContext
  nameWithType: TrustManagerContext
  fullName: System.Security.Policy.TrustManagerContext
- uid: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts
  parent: System.Security.Policy.ApplicationSecurityManager
  isExternal: false
  name: UserApplicationTrusts
  nameWithType: ApplicationSecurityManager.UserApplicationTrusts
  fullName: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts
- uid: System.Security.Policy.ApplicationTrustCollection
  parent: System.Security.Policy
  isExternal: false
  name: ApplicationTrustCollection
  nameWithType: ApplicationTrustCollection
  fullName: System.Security.Policy.ApplicationTrustCollection
- uid: System.Security.Policy.ApplicationSecurityManager.ApplicationTrustManager*
  parent: System.Security.Policy.ApplicationSecurityManager
  isExternal: false
  name: ApplicationTrustManager
  nameWithType: ApplicationSecurityManager.ApplicationTrustManager
- uid: System.Security.Policy.ApplicationSecurityManager.DetermineApplicationTrust*
  parent: System.Security.Policy.ApplicationSecurityManager
  isExternal: false
  name: DetermineApplicationTrust
  nameWithType: ApplicationSecurityManager.DetermineApplicationTrust
- uid: System.Security.Policy.ApplicationSecurityManager.UserApplicationTrusts*
  parent: System.Security.Policy.ApplicationSecurityManager
  isExternal: false
  name: UserApplicationTrusts
  nameWithType: ApplicationSecurityManager.UserApplicationTrusts
