### YamlMime:ManagedReference
items:
- uid: System.Data.Odbc.OdbcParameter
  id: OdbcParameter
  children:
  - System.Data.Odbc.OdbcParameter.#ctor
  - System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType)
  - System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Object)
  - System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32)
  - System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.String)
  - System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)
  - System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)
  - System.Data.Odbc.OdbcParameter.DbType
  - System.Data.Odbc.OdbcParameter.Direction
  - System.Data.Odbc.OdbcParameter.IsNullable
  - System.Data.Odbc.OdbcParameter.OdbcType
  - System.Data.Odbc.OdbcParameter.ParameterName
  - System.Data.Odbc.OdbcParameter.Precision
  - System.Data.Odbc.OdbcParameter.ResetDbType
  - System.Data.Odbc.OdbcParameter.ResetOdbcType
  - System.Data.Odbc.OdbcParameter.Scale
  - System.Data.Odbc.OdbcParameter.Size
  - System.Data.Odbc.OdbcParameter.SourceColumn
  - System.Data.Odbc.OdbcParameter.SourceColumnNullMapping
  - System.Data.Odbc.OdbcParameter.SourceVersion
  - System.Data.Odbc.OdbcParameter.System#ICloneable#Clone
  - System.Data.Odbc.OdbcParameter.ToString
  - System.Data.Odbc.OdbcParameter.Value
  langs:
  - csharp
  name: OdbcParameter
  nameWithType: OdbcParameter
  fullName: System.Data.Odbc.OdbcParameter
  type: Class
  summary: "表示参数传递给<xref href=&quot;System.Data.Odbc.OdbcCommand&quot;></xref>和 （可选） 到其映射<xref href=&quot;System.Data.DataColumn&quot;> </xref>。 此类不能被继承。"
  remarks: "参数名称不区分大小写。       在查询用于 Oracle (MSDAORA) 和 ODBC.NET Framework 数据提供程序的 Microsoft OLE DB 提供程序的 Oracle 数据库时，使用`LIKE`子句为固定长度字段中的查询值可能不会返回所有预期的匹配项。 原因是当 Oracle 匹配中的固定长度字段值时`LIKE`子句，它与相匹配的字符串，包括任何填充尾随空格的整个长度。 例如，如果表中的 Oracle 数据库包含一个名为&quot;Field1&quot;定义为字段`char(3)`，并输入值&quot;a&quot;到该表中，下面的代码的行不会返回行。      ```vb#   Dim queryString As String = &quot;SELECT * FROM Table1 WHERE Field1 LIKE ?&quot;   Dim command As OleDbCommand = New OleDbCommand(queryString, connection)   command.Parameters.Add(&quot;@p1&quot;, OleDbType.Char, 3).Value = &quot;a&quot;   Dim reader As OleDbDataReader = command.ExecuteReader()   ```      ```c#   string queryString = &quot;SELECT * FROM Table1 WHERE Field1 LIKE ?&quot;;   OleDbCommand command = new OleDbCommand(queryString, connection);   command.Parameters.Add(&quot;@p1&quot;, OleDbType.Char, 3).Value = &quot;a&quot;;   OleDbDataReader reader = command.ExecuteReader();   ```这是因为 Oracle 存储&quot;a&quot;形式的列值 (填充&quot;a&quot;以尾随空格，以达到固定的字段长度为 3)，其中 Oracle 不会将其作为&quot;a&quot;的参数值的匹配项的情况下`LIKE`固定长度的字段的比较。       若要解决此问题，请将百分比 （&quot;%&quot;） 通配符字符追加到的参数值 (`&quot;a%&quot;`)，或改用 SQL`=`比较相反。"
  example:
  - "The following example creates multiple instances of OdbcParameter through the <xref:System.Data.Odbc.OdbcParameterCollection> within the <xref:System.Data.Odbc.OdbcDataAdapter>. These parameters are used to select data from the data source and place the data in the <xref:System.Data.DataSet>. This example assumes that a <xref:System.Data.DataSet> and an <xref:System.Data.Odbc.OdbcDataAdapter> have already been created by using the appropriate schema, commands, and connection.  \n  \n [!code-cs[Classic WebData OdbcParameter#1](~/add/codesnippet/csharp/t-system.data.odbc.odbcp_1_1.cs)]\n [!code-vb[Classic WebData OdbcParameter#1](~/add/codesnippet/visualbasic/t-system.data.odbc.odbcp_1_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Data.Odbc.OdbcParameter/OdbcParameterConverter))]

      public sealed class OdbcParameter : System.Data.Common.DbParameter, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.Data.Common.DbParameter
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.Data.Common.DbParameter.System#Data#IDbDataParameter#Precision
  - System.Data.Common.DbParameter.System#Data#IDbDataParameter#Scale
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.#ctor
  id: '#ctor'
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: OdbcParameter()
  nameWithType: OdbcParameter.OdbcParameter()
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "初始化的新实例<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;></xref>类。"
  remarks: "基构造函数初始化为其默认值的所有字段。"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData OdbcParameter.OdbcParameter#1](~/add/codesnippet/csharp/m-system.data.odbc.odbcp_1_1.cs)]\n [!code-vb[Classic WebData OdbcParameter.OdbcParameter#1](~/add/codesnippet/visualbasic/m-system.data.odbc.odbcp_1_1.vb)]"
  syntax:
    content: public OdbcParameter ();
    parameters: []
  overload: System.Data.Odbc.OdbcParameter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType)
  id: '#ctor(System.String,System.Data.Odbc.OdbcType)'
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: OdbcParameter(String,OdbcType)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "初始化的新实例<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;></xref>类，该类使用参数名称和数据类型。"
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OdbcParameter.OdbcParameter1#1](~/add/codesnippet/visualbasic/dcf1840c-d8ee-4878-9114-_1.vb)]\n [!code-cs[Classic WebData OdbcParameter.OdbcParameter1#1](~/add/codesnippet/csharp/dcf1840c-d8ee-4878-9114-_1.cs)]"
  syntax:
    content: public OdbcParameter (string name, System.Data.Odbc.OdbcType type);
    parameters:
    - id: name
      type: System.String
      description: "参数的名称。"
    - id: type
      type: System.Data.Odbc.OdbcType
      description: "之一<xref href=&quot;System.Data.Odbc.OdbcType&quot;></xref>值。"
  overload: System.Data.Odbc.OdbcParameter.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中提供的值<code> type </code>参数不是无效的后端数据类型。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: OdbcParameter(String,Object)
  nameWithType: OdbcParameter.OdbcParameter(String,Object)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,Object)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "初始化的新实例<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;></xref>类，该类使用参数名称和<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;></xref>对象。"
  remarks: "你使用的此重载时要格外小心<xref:System.Data.Odbc.OdbcParameter>构造函数来指定整数参数值。</xref:System.Data.Odbc.OdbcParameter> 因为此重载接受`value`类型的<xref:System.Object>，必须将转换到的整数值<xref:System.Object>键入时的值为零，如下面的 C# 示例所示。</xref:System.Object> </xref:System.Object>      ```   Parameter = new OdbcParameter(&quot;@pname&quot;, Convert.ToInt32(0));   ```如果不执行此转换，则编译器将认为你尝试调用<xref:System.Data.Odbc.OdbcParameter.%23ctor%2A?displayProperty=fullName>构造函数重载。</xref:System.Data.Odbc.OdbcParameter.%23ctor%2A?displayProperty=fullName>"
  syntax:
    content: public OdbcParameter (string name, object value);
    parameters:
    - id: name
      type: System.String
      description: "参数的名称。"
    - id: value
      type: System.Object
      description: "<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref>对象。"
  overload: System.Data.Odbc.OdbcParameter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32)
  id: '#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32)'
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: OdbcParameter(String,OdbcType,Int32)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType,Int32)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType,Int32)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "初始化的新实例<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;></xref>类，该类使用参数名称、 数据类型和长度。"
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData OdbcParameter.OdbcParameter2#1](~/add/codesnippet/csharp/7ed6d552-f3e9-4f28-af5c-_1.cs)]\n [!code-vb[Classic WebData OdbcParameter.OdbcParameter2#1](~/add/codesnippet/visualbasic/7ed6d552-f3e9-4f28-af5c-_1.vb)]"
  syntax:
    content: public OdbcParameter (string name, System.Data.Odbc.OdbcType type, int size);
    parameters:
    - id: name
      type: System.String
      description: "参数的名称。"
    - id: type
      type: System.Data.Odbc.OdbcType
      description: "之一<xref href=&quot;System.Data.Odbc.OdbcType&quot;></xref>值。"
    - id: size
      type: System.Int32
      description: "参数的长度。"
  overload: System.Data.Odbc.OdbcParameter.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中提供的值<code> type </code>参数不是无效的后端数据类型。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.String)
  id: '#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.String)'
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: OdbcParameter(String,OdbcType,Int32,String)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType,Int32,String)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType,Int32,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "初始化的新实例<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;></xref>类，该类使用参数名称、 数据类型、 长度和源列名。"
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData OdbcParameter.OdbcParameter3#1](~/add/codesnippet/csharp/6bdbd90e-e8bb-418c-bf3d-_1.cs)]\n [!code-vb[Classic WebData OdbcParameter.OdbcParameter3#1](~/add/codesnippet/visualbasic/6bdbd90e-e8bb-418c-bf3d-_1.vb)]"
  syntax:
    content: public OdbcParameter (string name, System.Data.Odbc.OdbcType type, int size, string sourcecolumn);
    parameters:
    - id: name
      type: System.String
      description: "参数的名称。"
    - id: type
      type: System.Data.Odbc.OdbcType
      description: "之一<xref href=&quot;System.Data.Odbc.OdbcType&quot;></xref>值。"
    - id: size
      type: System.Int32
      description: "参数的长度。"
    - id: sourcecolumn
      type: System.String
      description: "源列的名称。"
  overload: System.Data.Odbc.OdbcParameter.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中提供的值<code> type </code>参数不是无效的后端数据类型。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)
  id: '#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)'
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: OdbcParameter(String,OdbcType,Int32,ParameterDirection,Boolean,Byte,Byte,String,DataRowVersion,Object)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType,Int32,ParameterDirection,Boolean,Byte,Byte,String,DataRowVersion,Object)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType,Int32,ParameterDirection,Boolean,Byte,Byte,String,DataRowVersion,Object)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "初始化的新实例<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;></xref>类，该类使用参数名称、 数据类型、 长度、 源列名、 参数方向、 数值精度和其他属性。"
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and displays the <xref:System.Data.Odbc.OdbcParameter.ParameterName%2A>.  \n  \n [!code-cs[Classic WebData OdbcParameter.OdbcParameter4#1](~/add/codesnippet/csharp/46568e54-ed99-4cb1-9dd6-_1.cs)]\n [!code-vb[Classic WebData OdbcParameter.OdbcParameter4#1](~/add/codesnippet/visualbasic/46568e54-ed99-4cb1-9dd6-_1.vb)]"
  syntax:
    content: public OdbcParameter (string parameterName, System.Data.Odbc.OdbcType odbcType, int size, System.Data.ParameterDirection parameterDirection, bool isNullable, byte precision, byte scale, string srcColumn, System.Data.DataRowVersion srcVersion, object value);
    parameters:
    - id: parameterName
      type: System.String
      description: "参数的名称。"
    - id: odbcType
      type: System.Data.Odbc.OdbcType
      description: "之一<xref href=&quot;System.Data.Odbc.OdbcType&quot;></xref>值。"
    - id: size
      type: System.Int32
      description: "参数的长度。"
    - id: parameterDirection
      type: System.Data.ParameterDirection
      description: "之一<xref href=&quot;System.Data.ParameterDirection&quot;></xref>值。"
    - id: isNullable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果字段的值可以为 null;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: precision
      type: System.Byte
      description: "总数的位数向左和向其小数点右侧<xref:System.Data.Odbc.OdbcParameter.Value*>得到解决。</xref:System.Data.Odbc.OdbcParameter.Value*>"
    - id: scale
      type: System.Byte
      description: "小数位数的总数<xref:System.Data.Odbc.OdbcParameter.Value*>得到解决。</xref:System.Data.Odbc.OdbcParameter.Value*>"
    - id: srcColumn
      type: System.String
      description: "源列的名称。"
    - id: srcVersion
      type: System.Data.DataRowVersion
      description: "之一<xref href=&quot;System.Data.DataRowVersion&quot;></xref>值。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>的值<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref>。</xref:System.Object>"
  overload: System.Data.Odbc.OdbcParameter.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中提供的值<code> type </code>参数不是无效的后端数据类型。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)
  id: '#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)'
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: OdbcParameter(String,OdbcType,Int32,ParameterDirection,Byte,Byte,String,DataRowVersion,Boolean,Object)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType,Int32,ParameterDirection,Byte,Byte,String,DataRowVersion,Boolean,Object)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType,Int32,ParameterDirection,Byte,Byte,String,DataRowVersion,Boolean,Object)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "初始化的新实例<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;></xref>类，该类使用参数名称、 数据类型、 长度、 源列名、 参数方向、 数值精度和其他属性。"
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and displays the <xref:System.Data.Odbc.OdbcParameter.ParameterName%2A>.  \n  \n```vb#  \nPublic Sub CreateOdbcParameter()  \n  Dim parameter As New OdbcParameter(\"Description\", OdbcType.VarChar, 11, ParameterDirection.Output, True, 0, 0, \"Description\", DataRowVersion.Current, False, \"garden hose\")  \n  MessageBox.Show(parameter.ToString())  \nEnd Sub  \n```  \n  \n```c#  \npublic void CreateOdbcParameter()   \n{  \n  OdbcParameter parameter = new OdbcParameter(\"Description\",OdbcType.VarChar,  \n              11,ParameterDirection.Output,true,0,0,\"Description\",  \n              DataRowVersion.Current, false, \"garden hose\");  \n  MessageBox.Show(parameter.ToString());  \n}  \n```"
  syntax:
    content: public OdbcParameter (string parameterName, System.Data.Odbc.OdbcType odbcType, int size, System.Data.ParameterDirection parameterDirection, byte precision, byte scale, string sourceColumn, System.Data.DataRowVersion sourceVersion, bool sourceColumnNullMapping, object value);
    parameters:
    - id: parameterName
      type: System.String
      description: "参数的名称。"
    - id: odbcType
      type: System.Data.Odbc.OdbcType
      description: "之一<xref:System.Data.Odbc.OdbcParameter.OdbcType*>值。</xref:System.Data.Odbc.OdbcParameter.OdbcType*>"
    - id: size
      type: System.Int32
      description: "参数的长度。"
    - id: parameterDirection
      type: System.Data.ParameterDirection
      description: "之一<xref href=&quot;System.Data.ParameterDirection&quot;></xref>值。"
    - id: precision
      type: System.Byte
      description: "总数的位数向左和向其小数点右侧<xref:System.Data.Odbc.OdbcParameter.Value*>得到解决。</xref:System.Data.Odbc.OdbcParameter.Value*>"
    - id: scale
      type: System.Byte
      description: "小数位数的总数<xref:System.Data.Odbc.OdbcParameter.Value*>得到解决。</xref:System.Data.Odbc.OdbcParameter.Value*>"
    - id: sourceColumn
      type: System.String
      description: "源列的名称。"
    - id: sourceVersion
      type: System.Data.DataRowVersion
      description: "之一<xref href=&quot;System.Data.DataRowVersion&quot;></xref>值。"
    - id: sourceColumnNullMapping
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果相应的源列可以为 null;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果它不是。"
    - id: value
      type: System.Object
      description: "<xref:System.Object>的值<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref>。</xref:System.Object>"
  overload: System.Data.Odbc.OdbcParameter.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中提供的值<code> type </code>参数不是无效的后端数据类型。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.DbType
  id: DbType
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: DbType
  nameWithType: OdbcParameter.DbType
  fullName: System.Data.Odbc.OdbcParameter.DbType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置<xref href=&quot;System.Data.DbType&quot;></xref>的参数。"
  remarks: "<xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>和链接的 DbType。</xref:System.Data.Odbc.OdbcParameter.OdbcType%2A> 因此，设置 DbType 更改<xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>到支持<xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>。</xref:System.Data.Odbc.OdbcParameter.OdbcType%2A> </xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>       有关支持的数据类型的列表，请参阅相应<xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>成员。</xref:System.Data.Odbc.OdbcParameter.OdbcType%2A> 有关详细信息，请参阅[DataAdapter 参数](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;><xref:System.Data.DbType>用于 ODBC 的 Microsoft.NET Framework 数据提供程序不支持。</xref:System.Data.DbType>"
  example:
  - "The following example calls a **Stored Procedure** with three parameters using the ODBC managed provider.  \n  \n [!code-vb[Classic WebData OdbcParameter.DbType#1](~/add/codesnippet/visualbasic/p-system.data.odbc.odbcp_1_1.vb)]\n [!code-cs[Classic WebData OdbcParameter.DbType#1](~/add/codesnippet/csharp/p-system.data.odbc.odbcp_1_1.cs)]"
  syntax:
    content: public override System.Data.DbType DbType { get; set; }
    return:
      type: System.Data.DbType
      description: "之一<xref href=&quot;System.Data.DbType&quot;></xref>值。 默认值为<xref:System.String>。</xref:System.String>"
  overload: System.Data.Odbc.OdbcParameter.DbType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "该属性未设置为有效<xref href=&quot;System.Data.DbType&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.Direction
  id: Direction
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: Direction
  nameWithType: OdbcParameter.Direction
  fullName: System.Data.Odbc.OdbcParameter.Direction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置一个值，该值指示参数是只可输入，输出、 双向参数还是存储的过程返回值参数。"
  remarks: "如果<xref:System.Data.ParameterDirection>是`Output`，和执行的关联<xref:System.Data.Odbc.OdbcCommand>不返回一个值，<xref:System.Data.Odbc.OdbcParameter>将包含 null 值。</xref:System.Data.Odbc.OdbcParameter> </xref:System.Data.Odbc.OdbcCommand> </xref:System.Data.ParameterDirection> 处理 null 值使用<xref:System.DBNull>类。</xref:System.DBNull>       `Output``InputOut`，和`ReturnValue`参数返回通过调用<xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>无法访问，直到你调用<xref:System.Data.Odbc.OdbcDataReader.Close%2A>或`Dispose` <xref:System.Data.Odbc.OdbcDataReader>。</xref:System.Data.Odbc.OdbcDataReader> </xref:System.Data.Odbc.OdbcDataReader.Close%2A> </xref:System.Data.Odbc.OdbcCommand.ExecuteReader%2A>"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n```vb#  \nPublic Sub CreateMyProc(connection As OdbcConnection)  \n  \n   Dim command As OdbcCommand = connection.CreateCommand()  \n   command.CommandText = \"{ call MyProc(?,?,?) }\"  \n   command.Parameters.Add(\"\", OdbcType.Int).Value = 1  \n   command.Parameters.Add(\"\", OdbcType.Decimal).Value = 2  \n   command.Parameters.Add(\"\", OdbcType.Decimal).Value = 3  \n  \nEnd Sub  \n```  \n  \n```c#  \npublic void CreateMyProc(OdbcConnection connection)   \n{  \n   OdbcCommand command = connection.CreateCommand();  \n   command.CommandText = \"{ call MyProc(?,?,?) }\";  \n   command.Parameters.Add(\"\", OdbcType.Int).Value = 1;  \n   command.Parameters.Add(\"\", OdbcType.Decimal).Value = 2;  \n   command.Parameters.Add(\"\", OdbcType.Decimal).Value = 3;  \n}  \n```"
  syntax:
    content: public override System.Data.ParameterDirection Direction { get; set; }
    return:
      type: System.Data.ParameterDirection
      description: "之一<xref href=&quot;System.Data.ParameterDirection&quot;></xref>值。 默认值是<xref uid=&quot;langword_csharp_Input&quot; name=&quot;Input&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Odbc.OdbcParameter.Direction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "该属性未设置为一个有效<xref href=&quot;System.Data.ParameterDirection&quot;></xref>值。"
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.IsNullable
  id: IsNullable
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: IsNullable
  nameWithType: OdbcParameter.IsNullable
  fullName: System.Data.Odbc.OdbcParameter.IsNullable
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置一个值，该值指示参数是否接受 null 值。"
  remarks: "处理 null 值使用<xref:System.DBNull>类。</xref:System.DBNull>"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n```vb#  \nPublic Sub CreateOdbcParameter()  \n   Dim parameter As New OdbcParameter(\"Description\", OdbcType.VarChar, 88)  \n   parameter.IsNullable = True  \n   parameter.Direction = ParameterDirection.Output  \nEnd Sub  \n```  \n  \n```c#  \npublic void CreateOdbcParameter()   \n{  \n   OdbcParameter parameter = new OdbcParameter(\"Description\", OdbcType.VarChar, 88);  \n   parameter.IsNullable = true;  \n   parameter.Direction = ParameterDirection.Output;  \n}  \n```"
  syntax:
    content: public override bool IsNullable { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果接受 null 值;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Odbc.OdbcParameter.IsNullable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.OdbcType
  id: OdbcType
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: OdbcType
  nameWithType: OdbcParameter.OdbcType
  fullName: System.Data.Odbc.OdbcParameter.OdbcType
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置<xref href=&quot;System.Data.Odbc.OdbcType&quot;></xref>的参数。"
  remarks: "OdbcType 和<xref:System.Data.Odbc.OdbcParameter.DbType%2A>链接。</xref:System.Data.Odbc.OdbcParameter.DbType%2A> 因此，设置<xref:System.Data.Odbc.OdbcParameter.DbType%2A>更改为支持<xref:System.Data.Odbc.OdbcType>。</xref:System.Data.Odbc.OdbcType> OdbcType</xref:System.Data.Odbc.OdbcParameter.DbType%2A>       有关支持的数据类型的列表，请参阅相应<xref:System.Data.Odbc.OdbcType>成员。</xref:System.Data.Odbc.OdbcType> 有关详细信息，请参阅[DataAdapter 参数](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Data.Odbc.OdbcType OdbcType { get; set; }
    return:
      type: System.Data.Odbc.OdbcType
      description: "<xref href=&quot;System.Data.Odbc.OdbcType&quot;> </xref>值，该值是<xref href=&quot;System.Data.Odbc.OdbcType&quot;></xref>的参数。 默认值是<xref uid=&quot;langword_csharp_Nchar&quot; name=&quot;Nchar&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Odbc.OdbcParameter.OdbcType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.ParameterName
  id: ParameterName
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: ParameterName
  nameWithType: OdbcParameter.ParameterName
  fullName: System.Data.Odbc.OdbcParameter.ParameterName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置的名称<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref>。"
  remarks: "使用而不是命名参数，ODBC.NET 提供程序用问号 （？） 标记的位置参数在命令文本的语法。 中的参数对象<xref:System.Data.Odbc.OdbcParameterCollection>和实际参数接受的存储过程或参数化的 SQL 语句对应于根据的顺序彼此<xref:System.Data.Odbc.OdbcParameter>对象插入到的集合，而不是由参数名称。</xref:System.Data.Odbc.OdbcParameter> </xref:System.Data.Odbc.OdbcParameterCollection> 参数名称可以提供，但将参数对象绑定过程中忽略。"
  example:
  - "The following example assumes that the data source has a table name **MyTable** and a stored procedure named MyProc that is defined as:  \n  \n```  \nCREATE TABLE MyTable (col1 int, col2 smallmoney, col3 decimal)  \nCREATE PROC MyProc (@p1 int, @p2 smallmoney, @p3 decimal) AS INSERT INTO MyTable VALUES (@p1, @p2, @p3)  \n```  \n  \n The following example creates parameters and calls the MyProc stored procedure:  \n  \n```vb#  \nPublic Sub CreateMyProc(connection As OdbcConnection)  \n  \n   Dim command As OdbcCommand = connection.CreateCommand()  \n  \n   command.CommandText = \"{ call MyProc(?,?,?) }\"  \n   command.Parameters.Add(\"\", OdbcType.Int).Value = 1  \n   command.Parameters.Add(\"\", OdbcType.Decimal).Value = 2  \n   command.Parameters.Add(\"\", OdbcType.Decimal).Value = 3  \n  \nEnd Sub  \n```  \n  \n```c#  \npublic void CreateMyProc(OdbcConnection connection)   \n{  \n   OdbcCommand command = myConnection.CreateCommand();  \n  \n   command.CommandText = \"{ call MyProc(?,?,?) }\";  \n   command.Parameters.Add(\"\", OdbcType.Int).Value = 1;  \n   command.Parameters.Add(\"\", OdbcType.Decimal).Value = 2;  \n   command.Parameters.Add(\"\", OdbcType.Decimal).Value = 3;  \n}  \n```"
  syntax:
    content: public override string ParameterName { get; set; }
    return:
      type: System.String
      description: "名称<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref>。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Data.Odbc.OdbcParameter.ParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.Precision
  id: Precision
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: Precision
  nameWithType: OdbcParameter.Precision
  fullName: System.Data.Odbc.OdbcParameter.Precision
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置用于表示的数字个数<xref:System.Data.Odbc.OdbcParameter.Value*>属性。</xref:System.Data.Odbc.OdbcParameter.Value*>"
  remarks: "此属性设置为数据库中的值以外的值取决于数据提供程序的实现，并可能会返回错误代码，截断或舍入数据。       精度属性仅会影响参数其<xref:System.Data.Odbc.OdbcType>是`Decimal`或`Numeric`。</xref:System.Data.Odbc.OdbcType> 对于其他数据类型，则忽略精度。      1> [!NOTE]&1;> 不支持此属性的使用将数据强制传递到数据库。 若要舍入、 截断，或者将其传递到数据库之前强制数据，使用<xref:System.Math>类属于`System`之前将值分配给参数的命名空间`Value`属性。</xref:System.Math>"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n```vb#  \nPublic Sub CreateOdbcParameter()  \n    Dim parameter As New OdbcParameter(\"Price\", OdbcType.Decimal)  \n    parameter.Value = 3.1416  \n    parameter.Precision = 8  \n    parameter.Scale = 4  \nEnd Sub   \n```  \n  \n```c#  \npublic void CreateOdbcParameter()   \n {  \n    OdbcParameter parameter = new OdbcParameter(\"Price\", OdbcType.Decimal);  \n    parameter.Value = 3.1416;  \n    parameter.Precision = 8;  \n    parameter.Scale = 4;  \n }  \n```"
  syntax:
    content: public byte Precision { get; set; }
    return:
      type: System.Byte
      description: "用于表示的数字的最大数<> *1> 属性。默认值为 0，它表示的数据提供程序设置的精度<> *1>。"
  overload: System.Data.Odbc.OdbcParameter.Precision*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.ResetDbType
  id: ResetDbType
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: ResetDbType()
  nameWithType: OdbcParameter.ResetDbType()
  fullName: System.Data.Odbc.OdbcParameter.ResetDbType()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "重置与此关联的类型<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref>。"
  remarks: "执行命令时包括参数值、 代码可以显式设置参数的类型或参数可以推断出类型的值。 调用此方法将重置参数，以便它可以再次推断出类型参数中传递的值。 调用此方法会影响这两个的<xref:System.Data.Odbc.OdbcParameter.DbType%2A>和<xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>的<xref:System.Data.Odbc.OdbcParameter>。</xref:System.Data.Odbc.OdbcParameter>属性</xref:System.Data.Odbc.OdbcParameter.OdbcType%2A></xref:System.Data.Odbc.OdbcParameter.DbType%2A>       调用 ResetDbType 重置<xref:System.Data.Odbc.OdbcParameter.DbType%2A>为其默认值 （字符串）。</xref:System.Data.Odbc.OdbcParameter.DbType%2A>"
  syntax:
    content: public override void ResetDbType ();
    parameters: []
  overload: System.Data.Odbc.OdbcParameter.ResetDbType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.ResetOdbcType
  id: ResetOdbcType
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: ResetOdbcType()
  nameWithType: OdbcParameter.ResetOdbcType()
  fullName: System.Data.Odbc.OdbcParameter.ResetOdbcType()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "重置与此关联的类型<xref href=&quot;System.Data.Odbc.OdbcParameter&quot;> </xref>。"
  remarks: "执行命令时包括参数值、 代码可以显式设置参数的类型或参数可以推断出类型的值。 调用此方法将重置参数，以便它可以再次推断出类型参数中传递的值。 调用此方法会影响这两个的<xref:System.Data.Odbc.OdbcParameter.DbType%2A>和<xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>的<xref:System.Data.Odbc.OdbcParameter>。</xref:System.Data.Odbc.OdbcParameter>属性</xref:System.Data.Odbc.OdbcParameter.OdbcType%2A></xref:System.Data.Odbc.OdbcParameter.DbType%2A>"
  syntax:
    content: public void ResetOdbcType ();
    parameters: []
  overload: System.Data.Odbc.OdbcParameter.ResetOdbcType*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.Scale
  id: Scale
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: Scale
  nameWithType: OdbcParameter.Scale
  fullName: System.Data.Odbc.OdbcParameter.Scale
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置到的小数位数<xref:System.Data.Odbc.OdbcParameter.Value*>得到解决。</xref:System.Data.Odbc.OdbcParameter.Value*>"
  remarks: "小数位数属性仅用于 decimal 和 numeric 输入参数。       为数据库中的值以外的值设置此属性的效果取决于数据提供程序的实现并可能返回错误代码，或截断或舍入的数据。       缩放属性仅会影响参数其<xref:System.Data.Odbc.OdbcType>是`Decimal`或`Numeric`。</xref:System.Data.Odbc.OdbcType> 对于其他数据类型，则忽略缩放。       使用 SQL Server 本机客户端时 10 （或更高版本） 若要绑定的类型为 Decimal、 Numeric、 VarNumeric、 DBDate 或 DBTimeStamp 的参数，必须手动指定适当的缩放值。      1> [!NOTE]&1;> 不支持此属性的使用将数据强制传递到数据库。 若要舍入、 截断，或者将其传递到数据库之前强制数据，使用<xref:System.Math>类属于`System`之前将值分配给参数的命名空间`Value`属性。</xref:System.Math>      1> [!NOTE] 1> 附带.NET Framework 1.0 版的.NET framework 数据提供程序不验证`scale`的<xref:System.Decimal>参数值。</xref:System.Decimal> 这会导致修改后的数据在数据源处插入。 如果你使用的.NET Framework 1.0 版，验证 s`cale`的 d`ecimal`之前设置参数值的值。 当你使用.NET Framework 1.1 版或更高版本，`scale`值超出了`decimal`参数的小数位数可能仅会被截断在刻度中，如果是基础的 ODBC 驱动程序的行为。"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n```vb#  \nPublic Sub CreateOdbcParameter()  \n    Dim parameter As New OdbcParameter(\"Price\", OdbcType.Decimal)  \n    parameter.Value = 3.1416  \n    parameter.Precision = 8  \n    parameter.Scale = 4  \nEnd Sub   \n```  \n  \n```c#  \npublic void CreateOdbcParameter()   \n {  \n    OdbcParameter parameter = new OdbcParameter(\"Price\", OdbcType.Decimal);  \n    parameter.Value = 3.1416;  \n    parameter.Precision = 8;  \n    parameter.Scale = 4;  \n }  \n```"
  syntax:
    content: public byte Scale { get; set; }
    return:
      type: System.Byte
      description: "小数位数数<xref:System.Data.Odbc.OdbcParameter.Value*>得到解决。</xref:System.Data.Odbc.OdbcParameter.Value*> 默认值为 0。"
  overload: System.Data.Odbc.OdbcParameter.Scale*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.Size
  id: Size
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: Size
  nameWithType: OdbcParameter.Size
  fullName: System.Data.Odbc.OdbcParameter.Size
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置列中数据的最大大小。"
  remarks: "大小属性用于二进制和字符串类型。       对于非字符串数据类型和 ANSI 字符串数据，大小属性引用的字节数。 Unicode 字符串数据大小是指的字符数。 字符串的计数不包括结尾的字符。       对于可变长度数据类型，`Size`描述数据传输到服务器的最大数量。 例如，对于 Unicode 字符串值，`Size`无法用于限制发送到服务器以首先一百个字符的数据量。       对于双向和输出参数和返回值，你必须设置的值`Size`。 这不是必需的输入参数，并且如果没有显式设置的值推断从指定的参数的实际大小执行参数化的语句时。       <xref:System.Data.Common.DbParameter.DbType%2A>， <xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>，并且可以通过设置<xref:System.Data.Odbc.OdbcParameter.Value%2A>.</xref:System.Data.Odbc.OdbcParameter.Value%2A>推断的参数的大小属性</xref:System.Data.Odbc.OdbcParameter.OdbcType%2A></xref:System.Data.Common.DbParameter.DbType%2A> 因此，不需要指定它们。 但是，它们未公开在<xref:System.Data.Odbc.OdbcParameter>属性设置。</xref:System.Data.Odbc.OdbcParameter> 例如，如果已推断出参数的大小，`Size`语句执行后，不包含推断的值。      1> [!NOTE]&1;> 为`OdbcParameter`与<xref:System.Data.Odbc.OdbcParameter.Direction%2A>的`ParameterDirection.Output`， `ParameterDirection.InputOutput`，或`ParameterDirection.ReturnValue`，如果数据源返回的值的大小超过指定执行命令时，将引发异常`Size`的<xref:System.Data.Odbc.OdbcParameter>。</xref:System.Data.Odbc.OdbcParameter> </xref:System.Data.Odbc.OdbcParameter.Direction%2A>       对于固定长度的数据类型的值`Size`将被忽略。 它可以检索用于信息说明，并返回最大传输到服务器参数的值时，提供程序使用的字节数。"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n```vb#  \nPublic Sub CreateOdbcParameter()  \n    Dim myValue As String = \"12 foot scarf - multiple colors, one previous owner\"  \n    Dim parameter As New OdbcParameter(\"Description\", OdbcType.VarChar)  \n    parameter.Direction = ParameterDirection.Output  \n    parameter.Size = myValue.Length  \n    parameter.Value = myValue  \nEnd Sub   \n```  \n  \n```c#  \npublic void CreateOdbcParameter()   \n {  \n    string myValue = \"12 foot scarf - multiple colors, one previous owner\";  \n    OdbcParameter parameter = new OdbcParameter(\"Description\", OdbcType.VarChar);  \n    parameter.Direction = ParameterDirection.Output;  \n    parameter.Size = myValue.Length;  \n    parameter.Value = myValue;  \n }  \n```"
  syntax:
    content: public override int Size { get; set; }
    return:
      type: System.Int32
      description: "列中数据的最大大小。 根据参数值，默认值进行推断。"
  overload: System.Data.Odbc.OdbcParameter.Size*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.SourceColumn
  id: SourceColumn
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: SourceColumn
  nameWithType: OdbcParameter.SourceColumn
  fullName: System.Data.Odbc.OdbcParameter.SourceColumn
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置映射到的源列的名称<xref href=&quot;System.Data.DataSet&quot;></xref>和用于加载或返回<xref:System.Data.Odbc.OdbcParameter.Value*>.</xref:System.Data.Odbc.OdbcParameter.Value*>"
  remarks: "参数的值在 SourceColumn 设置为一个空字符串之外的任何内容，从具有的列检索`SourceColumn`名称。 如果<xref:System.Data.Odbc.OdbcParameter.Direction%2A>设置为`Input`，值取自<xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.Odbc.OdbcParameter.Direction%2A> 如果`Direction`设置为`Output`，从数据源中获取的值。 A`Direction`的`InputOutput`是这两者的组合。       有关如何使用 SourceColumn 属性的详细信息，请参阅[DataAdapter 参数](~/add/includes/ajax-current-ext-md.md)和[使用 Dataadapter 更新数据源](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n```vb#  \nPublic Sub CreateOdbcParameter()  \n    Dim parameter As New OdbcParameter(\"Description\", OdbcType.VarChar, 88)  \n    parameter.SourceColumn = \"Description\"  \nEnd Sub   \n```  \n  \n```c#  \npublic void CreateOdbcParameter()   \n {  \n    OdbcParameter parameter = new OdbcParameter(\"Description\", OdbcType.VarChar, 88);  \n    parameter.SourceColumn = \"Description\";  \n }  \n```"
  syntax:
    content: public override string SourceColumn { get; set; }
    return:
      type: System.String
      description: "将用于设置此参数的值的源列的名称。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Data.Odbc.OdbcParameter.SourceColumn*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.SourceColumnNullMapping
  id: SourceColumnNullMapping
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: SourceColumnNullMapping
  nameWithType: OdbcParameter.SourceColumnNullMapping
  fullName: System.Data.Odbc.OdbcParameter.SourceColumnNullMapping
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "设置或获取一个值，该值指示源列是否可以为 null。 这样<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;></xref>正确地生成 Update 语句为 null 的列。"
  remarks: "通过使用 SourceColumnNullMapping<xref:System.Data.Common.DbCommandBuilder>时处理可以为 null 的列正确生成更新命令。</xref:System.Data.Common.DbCommandBuilder> 通常情况下，使用 SourceColumnNullMapping 受到开发人员从<xref:System.Data.Common.DbCommandBuilder>.</xref:System.Data.Common.DbCommandBuilder>继承       <xref:System.Data.Common.DbCommandBuilder>使用此属性来确定源列是否可以为 null，并将此属性设置为`true`是否可以为 null，和`false`如果它不是。</xref:System.Data.Common.DbCommandBuilder> 当<xref:System.Data.Common.DbCommandBuilder>是生成其 Update 语句，检查每个参数 SourceColumnNullMapping。</xref:System.Data.Common.DbCommandBuilder> 如果属性是`true`，<xref:System.Data.Common.DbCommandBuilder>生成 WHERE 子句，如下例所示。</xref:System.Data.Common.DbCommandBuilder> 在此查询表达式中，&quot;FieldName&quot;表示的字段的名称︰```   ((@IsNull_FieldName = 1 AND FieldName IS NULL) OR      (FieldName = @Original_FieldName))   ```字段如果 SourceColumnNullMapping 为 false，<xref:System.Data.Common.DbCommandBuilder>生成以下 WHERE 子句︰```   FieldName = @OriginalFieldName   ```此外，@IsNull_FieldName如果源字段包含 null 值和 0，如果它不包含 1。</xref:System.Data.Common.DbCommandBuilder> 此机制允许 SQL Server 中的一个性能优化，并提供的可以在多个提供程序的通用代码。"
  syntax:
    content: public override bool SourceColumnNullMapping { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果源列可以为 null;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果它不是。"
  overload: System.Data.Odbc.OdbcParameter.SourceColumnNullMapping*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.SourceVersion
  id: SourceVersion
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: SourceVersion
  nameWithType: OdbcParameter.SourceVersion
  fullName: System.Data.Odbc.OdbcParameter.SourceVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置<xref href=&quot;System.Data.DataRowVersion&quot;></xref>加载<xref:System.Data.Odbc.OdbcParameter.Value*>.</xref:System.Data.Odbc.OdbcParameter.Value*>时要使用"
  remarks: "`SourceVersion`由<xref:System.Data.Odbc.OdbcDataAdapter.UpdateCommand%2A>期间<xref:System.Data.DbDataAdapter.Common.Update%2A>操作，以确定是否将参数值设置为当前或原始。</xref:System.Data.DbDataAdapter.Common.Update%2A> </xref:System.Data.Odbc.OdbcDataAdapter.UpdateCommand%2A> 这样，要更新的主键。       此属性设置为的新版<xref:System.Data.DataRow>通过以下任一方法使用`Item`属性 (`DataRow`索引器)，或<xref:System.Data.DataRow.GetChildRows%2A>方法。</xref:System.Data.DataRow.GetChildRows%2A> </xref:System.Data.DataRow>"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n```vb#  \nPublic Sub CreateOdbcParameter()  \n    Dim parameter As New OdbcParameter(\"Description\", OdbcType.VarChar, 88)  \n    parameter.SourceColumn = \"Description\"  \n    parameter.SourceVersion = DataRowVersion.Current  \nEnd Sub   \n```  \n  \n```c#  \npublic void CreateOdbcParameter()   \n {  \n    OdbcParameter parameter = new OdbcParameter(\"Description\", OdbcType.VarChar, 88);  \n    parameter.SourceColumn = \"Description\";  \n    parameter.SourceVersion = DataRowVersion.Current;  \n }  \n```"
  syntax:
    content: public override System.Data.DataRowVersion SourceVersion { get; set; }
    return:
      type: System.Data.DataRowVersion
      description: "之一<xref href=&quot;System.Data.DataRowVersion&quot;></xref>值。 默认值为当前。"
  overload: System.Data.Odbc.OdbcParameter.SourceVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OdbcParameter.System.ICloneable.Clone()
  fullName: System.Data.Odbc.OdbcParameter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "有关此成员的说明，请参阅&lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.Odbc.OdbcParameter>实例被强制转换为<xref:System.ICloneable>接口。</xref:System.ICloneable> </xref:System.Data.Odbc.OdbcParameter>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "一个新<xref:System.Object>，它是此实例的副本。</xref:System.Object>"
  overload: System.Data.Odbc.OdbcParameter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.ToString
  id: ToString
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: ToString()
  nameWithType: OdbcParameter.ToString()
  fullName: System.Data.Odbc.OdbcParameter.ToString()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取一个字符串，包含<xref:System.Data.Odbc.OdbcParameter.ParameterName*>.</xref:System.Data.Odbc.OdbcParameter.ParameterName*>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "一个字符串，包含<xref:System.Data.Odbc.OdbcParameter.ParameterName*>.</xref:System.Data.Odbc.OdbcParameter.ParameterName*>"
  overload: System.Data.Odbc.OdbcParameter.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Odbc.OdbcParameter.Value
  id: Value
  parent: System.Data.Odbc.OdbcParameter
  langs:
  - csharp
  name: Value
  nameWithType: OdbcParameter.Value
  fullName: System.Data.Odbc.OdbcParameter.Value
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Odbc
  summary: "获取或设置参数的值。"
  remarks: "用于输入参数的值绑定到<xref:System.Data.Odbc.OdbcCommand>，发送到服务器。</xref:System.Data.Odbc.OdbcCommand> 对于输出参数和返回值参数，该数值将在完成<xref:System.Data.Odbc.OdbcCommand>后<xref:System.Data.Odbc.OdbcDataReader>已关闭。</xref:System.Data.Odbc.OdbcDataReader> </xref:System.Data.Odbc.OdbcCommand>       当你向服务器发送 null 参数值时，用户必须指定<xref:System.DBNull>，而不是 null。</xref:System.DBNull> 系统中的 null 值是一个空的对象具有任何值。 <xref:System.DBNull>用于表示 null 值。</xref:System.DBNull> 如果使用参数调用存储的过程参数具有默认值，将值设置为 null 的原因要使用的默认值。       如果应用程序指定数据库类型，绑定的值转换为该类型时提供程序将数据发送到服务器。 提供程序尝试将任何类型的值的转换，如果它支持<xref:System.IConvertible>接口。</xref:System.IConvertible> 如果指定的类型不兼容的值，可能会导致转换错误。       同时<xref:System.Data.Odbc.OdbcParameter.DbType%2A>和<xref:System.Data.Odbc.OdbcParameter.OdbcType%2A>属性可以通过设置值推断出。</xref:System.Data.Odbc.OdbcParameter.OdbcType%2A> </xref:System.Data.Odbc.OdbcParameter.DbType%2A> 如果适用，大小、 精度和小数位数是同样被推断从值执行参数化的语句时。 但是，不向用户公开推断出的值。       Value 属性会被覆盖`Update`方法。"
  example:
  - "The following example creates an <xref:System.Data.Odbc.OdbcParameter> and sets some of its properties.  \n  \n```vb#  \nPublic Sub CreateOdbcParameter()  \n    Dim parameter As New OdbcParameter(\"Description\", OdbcType.VarChar, 88)  \n    parameter.Value = \"garden hose\"  \nEnd Sub   \n```  \n  \n```c#  \npublic void CreateOdbcParameter()   \n {  \n    OdbcParameter parameter = new OdbcParameter(\"Description\", OdbcType.VarChar, 88);  \n    parameter.Value = \"garden hose\";  \n }  \n```"
  syntax:
    content: public override object Value { get; set; }
    return:
      type: System.Object
      description: "<xref:System.Object>的参数的值。</xref:System.Object> 默认值为 null。"
  overload: System.Data.Odbc.OdbcParameter.Value*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbParameter
  isExternal: false
  name: System.Data.Common.DbParameter
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Data.Odbc.OdbcParameter.#ctor
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcParameter()
  nameWithType: OdbcParameter.OdbcParameter()
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter()
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType)
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcParameter(String,OdbcType)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Odbc.OdbcType
  parent: System.Data.Odbc
  isExternal: false
  name: OdbcType
  nameWithType: OdbcType
  fullName: System.Data.Odbc.OdbcType
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Object)
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcParameter(String,Object)
  nameWithType: OdbcParameter.OdbcParameter(String,Object)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32)
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcParameter(String,OdbcType,Int32)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType,Int32)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.String)
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcParameter(String,OdbcType,Int32,String)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType,Int32,String)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType,Int32,String)
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Boolean,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Object)
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcParameter(String,OdbcType,Int32,ParameterDirection,Boolean,Byte,Byte,String,DataRowVersion,Object)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType,Int32,ParameterDirection,Boolean,Byte,Byte,String,DataRowVersion,Object)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType,Int32,ParameterDirection,Boolean,Byte,Byte,String,DataRowVersion,Object)
- uid: System.Data.ParameterDirection
  parent: System.Data
  isExternal: false
  name: ParameterDirection
  nameWithType: ParameterDirection
  fullName: System.Data.ParameterDirection
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Data.DataRowVersion
  parent: System.Data
  isExternal: false
  name: DataRowVersion
  nameWithType: DataRowVersion
  fullName: System.Data.DataRowVersion
- uid: System.Data.Odbc.OdbcParameter.#ctor(System.String,System.Data.Odbc.OdbcType,System.Int32,System.Data.ParameterDirection,System.Byte,System.Byte,System.String,System.Data.DataRowVersion,System.Boolean,System.Object)
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcParameter(String,OdbcType,Int32,ParameterDirection,Byte,Byte,String,DataRowVersion,Boolean,Object)
  nameWithType: OdbcParameter.OdbcParameter(String,OdbcType,Int32,ParameterDirection,Byte,Byte,String,DataRowVersion,Boolean,Object)
  fullName: System.Data.Odbc.OdbcParameter.OdbcParameter(String,OdbcType,Int32,ParameterDirection,Byte,Byte,String,DataRowVersion,Boolean,Object)
- uid: System.Data.Odbc.OdbcParameter.DbType
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: DbType
  nameWithType: OdbcParameter.DbType
  fullName: System.Data.Odbc.OdbcParameter.DbType
- uid: System.Data.DbType
  parent: System.Data
  isExternal: false
  name: DbType
  nameWithType: DbType
  fullName: System.Data.DbType
- uid: System.Data.Odbc.OdbcParameter.Direction
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Direction
  nameWithType: OdbcParameter.Direction
  fullName: System.Data.Odbc.OdbcParameter.Direction
- uid: System.Data.Odbc.OdbcParameter.IsNullable
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: IsNullable
  nameWithType: OdbcParameter.IsNullable
  fullName: System.Data.Odbc.OdbcParameter.IsNullable
- uid: System.Data.Odbc.OdbcParameter.OdbcType
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcType
  nameWithType: OdbcParameter.OdbcType
  fullName: System.Data.Odbc.OdbcParameter.OdbcType
- uid: System.Data.Odbc.OdbcParameter.ParameterName
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: ParameterName
  nameWithType: OdbcParameter.ParameterName
  fullName: System.Data.Odbc.OdbcParameter.ParameterName
- uid: System.Data.Odbc.OdbcParameter.Precision
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Precision
  nameWithType: OdbcParameter.Precision
  fullName: System.Data.Odbc.OdbcParameter.Precision
- uid: System.Data.Odbc.OdbcParameter.ResetDbType
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: ResetDbType()
  nameWithType: OdbcParameter.ResetDbType()
  fullName: System.Data.Odbc.OdbcParameter.ResetDbType()
- uid: System.Data.Odbc.OdbcParameter.ResetOdbcType
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: ResetOdbcType()
  nameWithType: OdbcParameter.ResetOdbcType()
  fullName: System.Data.Odbc.OdbcParameter.ResetOdbcType()
- uid: System.Data.Odbc.OdbcParameter.Scale
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Scale
  nameWithType: OdbcParameter.Scale
  fullName: System.Data.Odbc.OdbcParameter.Scale
- uid: System.Data.Odbc.OdbcParameter.Size
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Size
  nameWithType: OdbcParameter.Size
  fullName: System.Data.Odbc.OdbcParameter.Size
- uid: System.Data.Odbc.OdbcParameter.SourceColumn
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: SourceColumn
  nameWithType: OdbcParameter.SourceColumn
  fullName: System.Data.Odbc.OdbcParameter.SourceColumn
- uid: System.Data.Odbc.OdbcParameter.SourceColumnNullMapping
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: SourceColumnNullMapping
  nameWithType: OdbcParameter.SourceColumnNullMapping
  fullName: System.Data.Odbc.OdbcParameter.SourceColumnNullMapping
- uid: System.Data.Odbc.OdbcParameter.SourceVersion
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: SourceVersion
  nameWithType: OdbcParameter.SourceVersion
  fullName: System.Data.Odbc.OdbcParameter.SourceVersion
- uid: System.Data.Odbc.OdbcParameter.System#ICloneable#Clone
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OdbcParameter.System.ICloneable.Clone()
  fullName: System.Data.Odbc.OdbcParameter.System.ICloneable.Clone()
- uid: System.Data.Odbc.OdbcParameter.ToString
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: ToString()
  nameWithType: OdbcParameter.ToString()
  fullName: System.Data.Odbc.OdbcParameter.ToString()
- uid: System.Data.Odbc.OdbcParameter.Value
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Value
  nameWithType: OdbcParameter.Value
  fullName: System.Data.Odbc.OdbcParameter.Value
- uid: System.Data.Odbc.OdbcParameter.#ctor*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcParameter
  nameWithType: OdbcParameter.OdbcParameter
- uid: System.Data.Odbc.OdbcParameter.DbType*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: DbType
  nameWithType: OdbcParameter.DbType
- uid: System.Data.Odbc.OdbcParameter.Direction*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Direction
  nameWithType: OdbcParameter.Direction
- uid: System.Data.Odbc.OdbcParameter.IsNullable*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: IsNullable
  nameWithType: OdbcParameter.IsNullable
- uid: System.Data.Odbc.OdbcParameter.OdbcType*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: OdbcType
  nameWithType: OdbcParameter.OdbcType
- uid: System.Data.Odbc.OdbcParameter.ParameterName*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: ParameterName
  nameWithType: OdbcParameter.ParameterName
- uid: System.Data.Odbc.OdbcParameter.Precision*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Precision
  nameWithType: OdbcParameter.Precision
- uid: System.Data.Odbc.OdbcParameter.ResetDbType*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: ResetDbType
  nameWithType: OdbcParameter.ResetDbType
- uid: System.Data.Odbc.OdbcParameter.ResetOdbcType*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: ResetOdbcType
  nameWithType: OdbcParameter.ResetOdbcType
- uid: System.Data.Odbc.OdbcParameter.Scale*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Scale
  nameWithType: OdbcParameter.Scale
- uid: System.Data.Odbc.OdbcParameter.Size*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Size
  nameWithType: OdbcParameter.Size
- uid: System.Data.Odbc.OdbcParameter.SourceColumn*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: SourceColumn
  nameWithType: OdbcParameter.SourceColumn
- uid: System.Data.Odbc.OdbcParameter.SourceColumnNullMapping*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: SourceColumnNullMapping
  nameWithType: OdbcParameter.SourceColumnNullMapping
- uid: System.Data.Odbc.OdbcParameter.SourceVersion*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: SourceVersion
  nameWithType: OdbcParameter.SourceVersion
- uid: System.Data.Odbc.OdbcParameter.System#ICloneable#Clone*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OdbcParameter.System.ICloneable.Clone
- uid: System.Data.Odbc.OdbcParameter.ToString*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: ToString
  nameWithType: OdbcParameter.ToString
- uid: System.Data.Odbc.OdbcParameter.Value*
  parent: System.Data.Odbc.OdbcParameter
  isExternal: false
  name: Value
  nameWithType: OdbcParameter.Value
