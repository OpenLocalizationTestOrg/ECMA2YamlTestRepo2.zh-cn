### YamlMime:ManagedReference
items:
- uid: System.Data.Linq.Binary
  id: Binary
  children:
  - System.Data.Linq.Binary.#ctor(System.Byte[])
  - System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)
  - System.Data.Linq.Binary.Equals(System.Object)
  - System.Data.Linq.Binary.GetHashCode
  - System.Data.Linq.Binary.Length
  - System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  - System.Data.Linq.Binary.op_Implicit(System.Byte[])
  - System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  - System.Data.Linq.Binary.ToArray
  - System.Data.Linq.Binary.ToString
  langs:
  - csharp
  name: Binary
  nameWithType: Binary
  fullName: System.Data.Linq.Binary
  type: Class
  summary: "表示不可变的二进制数据块。"
  syntax:
    content: >-
      [System.Runtime.Serialization.DataContract]

      public sealed class Binary : IEquatable<System.Data.Linq.Binary>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.Linq.Binary>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.#ctor(System.Byte[])
  id: '#ctor(System.Byte[])'
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: Binary(Byte[])
  nameWithType: Binary.Binary(Byte[])
  fullName: System.Data.Linq.Binary.Binary(Byte[])
  type: Constructor
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "初始化的新实例<xref href=&quot;System.Data.Linq.Binary&quot;></xref>类。"
  remarks: "当`null`传递给此构造函数，而不是所需的字节，数组<xref:System.ArgumentNullException?displayProperty=fullName>引发异常。</xref:System.ArgumentNullException?displayProperty=fullName> 不要依赖于此行为，因为它可能会在将来更改。"
  syntax:
    content: public Binary (byte[] value);
    parameters:
    - id: value
      type: System.Byte[]
      description: "表示二进制数据的字节。"
  overload: System.Data.Linq.Binary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)
  id: Equals(System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: Equals(Binary)
  nameWithType: Binary.Equals(Binary)
  fullName: System.Data.Linq.Binary.Equals(Binary)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "确定两个二进制对象是否相等。"
  syntax:
    content: public bool Equals (System.Data.Linq.Binary other);
    parameters:
    - id: other
      type: System.Data.Linq.Binary
      description: "<xref:System.Object>到其比较当前对象。</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个二进制对象相等，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Binary.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Binary.Equals(Object)
  fullName: System.Data.Linq.Binary.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "确定是否<xref:System.Object>等于当前<xref:System.Object>.</xref:System.Object></xref:System.Object>指定"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>要与当前<xref:System.Object>.</xref:System.Object>进行比较</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个二进制对象相等，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Binary.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.GetHashCode
  id: GetHashCode
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Binary.GetHashCode()
  fullName: System.Data.Linq.Binary.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "用作特定类型的哈希函数。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的二进制对象的哈希代码。"
  overload: System.Data.Linq.Binary.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.Length
  id: Length
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: Length
  nameWithType: Binary.Length
  fullName: System.Data.Linq.Binary.Length
  type: Property
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "获取二进制对象的长度。"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "表示长度的整数。"
  overload: System.Data.Linq.Binary.Length*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  id: op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: op_Equality(Binary,Binary)
  nameWithType: Binary.op_Equality(Binary,Binary)
  fullName: System.Data.Linq.Binary.op_Equality(Binary,Binary)
  type: Operator
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "描述两个二进制对象之间的相等性关系。"
  remarks: "返回`true`如果两者都`null`但返回`false`如果只有一个是`null`。"
  syntax:
    content: public static bool op_Equality (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);
    parameters:
    - id: binary1
      type: System.Data.Linq.Binary
      description: "第一个二进制对象。"
    - id: binary2
      type: System.Data.Linq.Binary
      description: "第二个二进制对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个二进制对象相等，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Binary.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.op_Implicit(System.Byte[])
  id: op_Implicit(System.Byte[])
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: op_Implicit(Byte[])
  nameWithType: Binary.op_Implicit(Byte[])
  fullName: System.Data.Linq.Binary.op_Implicit(Byte[])
  type: Operator
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  syntax:
    content: public static System.Data.Linq.Binary op_Implicit (byte[] value);
    parameters:
    - id: value
      type: System.Byte[]
      description: "要添加。"
    return:
      type: System.Data.Linq.Binary
      description: "要添加。"
  overload: System.Data.Linq.Binary.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  id: op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: op_Inequality(Binary,Binary)
  nameWithType: Binary.op_Inequality(Binary,Binary)
  fullName: System.Data.Linq.Binary.op_Inequality(Binary,Binary)
  type: Operator
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "描述两个二进制对象之间的不等关系。"
  remarks: "返回`false`如果两者都`null`，但返回`true`如果存在任何一种`null`。"
  syntax:
    content: public static bool op_Inequality (System.Data.Linq.Binary binary1, System.Data.Linq.Binary binary2);
    parameters:
    - id: binary1
      type: System.Data.Linq.Binary
      description: "第一个二进制对象。"
    - id: binary2
      type: System.Data.Linq.Binary
      description: "第二个二进制对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个二进制对象是否不相等;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Linq.Binary.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.ToArray
  id: ToArray
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: ToArray()
  nameWithType: Binary.ToArray()
  fullName: System.Data.Linq.Binary.ToArray()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "返回表示当前的二进制对象的字节数组。"
  syntax:
    content: public byte[] ToArray ();
    parameters: []
    return:
      type: System.Byte[]
      description: "包含当前二进制对象的值的字节数组。"
  overload: System.Data.Linq.Binary.ToArray*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Linq.Binary.ToString
  id: ToString
  parent: System.Data.Linq.Binary
  langs:
  - csharp
  name: ToString()
  nameWithType: Binary.ToString()
  fullName: System.Data.Linq.Binary.ToString()
  type: Method
  assemblies:
  - System.Data.Linq
  namespace: System.Data.Linq
  summary: "返回<xref:System.String>，表示当前的二进制对象。</xref:System.String>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A <xref:System.String>，表示当前的二进制对象。</xref:System.String>"
  overload: System.Data.Linq.Binary.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Data.Linq.Binary.#ctor(System.Byte[])
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Binary(Byte[])
  nameWithType: Binary.Binary(Byte[])
  fullName: System.Data.Linq.Binary.Binary(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.Linq.Binary.Equals(System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Equals(Binary)
  nameWithType: Binary.Equals(Binary)
  fullName: System.Data.Linq.Binary.Equals(Binary)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Linq.Binary
  parent: System.Data.Linq
  isExternal: false
  name: Binary
  nameWithType: Binary
  fullName: System.Data.Linq.Binary
- uid: System.Data.Linq.Binary.Equals(System.Object)
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Equals(Object)
  nameWithType: Binary.Equals(Object)
  fullName: System.Data.Linq.Binary.Equals(Object)
- uid: System.Data.Linq.Binary.GetHashCode
  parent: System.Data.Linq.Binary
  isExternal: false
  name: GetHashCode()
  nameWithType: Binary.GetHashCode()
  fullName: System.Data.Linq.Binary.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Linq.Binary.Length
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Length
  nameWithType: Binary.Length
  fullName: System.Data.Linq.Binary.Length
- uid: System.Data.Linq.Binary.op_Equality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Equality(Binary,Binary)
  nameWithType: Binary.op_Equality(Binary,Binary)
  fullName: System.Data.Linq.Binary.op_Equality(Binary,Binary)
- uid: System.Data.Linq.Binary.op_Implicit(System.Byte[])
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Implicit(Byte[])
  nameWithType: Binary.op_Implicit(Byte[])
  fullName: System.Data.Linq.Binary.op_Implicit(Byte[])
- uid: System.Data.Linq.Binary.op_Inequality(System.Data.Linq.Binary,System.Data.Linq.Binary)
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Inequality(Binary,Binary)
  nameWithType: Binary.op_Inequality(Binary,Binary)
  fullName: System.Data.Linq.Binary.op_Inequality(Binary,Binary)
- uid: System.Data.Linq.Binary.ToArray
  parent: System.Data.Linq.Binary
  isExternal: false
  name: ToArray()
  nameWithType: Binary.ToArray()
  fullName: System.Data.Linq.Binary.ToArray()
- uid: System.Data.Linq.Binary.ToString
  parent: System.Data.Linq.Binary
  isExternal: false
  name: ToString()
  nameWithType: Binary.ToString()
  fullName: System.Data.Linq.Binary.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Linq.Binary.#ctor*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Binary
  nameWithType: Binary.Binary
- uid: System.Data.Linq.Binary.Equals*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Equals
  nameWithType: Binary.Equals
- uid: System.Data.Linq.Binary.GetHashCode*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: GetHashCode
  nameWithType: Binary.GetHashCode
- uid: System.Data.Linq.Binary.Length*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: Length
  nameWithType: Binary.Length
- uid: System.Data.Linq.Binary.op_Equality*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Equality
  nameWithType: Binary.op_Equality
- uid: System.Data.Linq.Binary.op_Implicit*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Implicit
  nameWithType: Binary.op_Implicit
- uid: System.Data.Linq.Binary.op_Inequality*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: op_Inequality
  nameWithType: Binary.op_Inequality
- uid: System.Data.Linq.Binary.ToArray*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: ToArray
  nameWithType: Binary.ToArray
- uid: System.Data.Linq.Binary.ToString*
  parent: System.Data.Linq.Binary
  isExternal: false
  name: ToString
  nameWithType: Binary.ToString
