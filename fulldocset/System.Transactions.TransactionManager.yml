### YamlMime:ManagedReference
items:
- uid: System.Transactions.TransactionManager
  id: TransactionManager
  children:
  - System.Transactions.TransactionManager.DefaultTimeout
  - System.Transactions.TransactionManager.DistributedTransactionStarted
  - System.Transactions.TransactionManager.HostCurrentCallback
  - System.Transactions.TransactionManager.MaximumTimeout
  - System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  - System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  langs:
  - csharp
  name: TransactionManager
  nameWithType: TransactionManager
  fullName: System.Transactions.TransactionManager
  type: Class
  summary: "包含用于事务管理的方法。 此类不能被继承。"
  remarks: "此类包含静态属性和方法用于获取事务处理选项的默认值有关的信息。 它还包含用于恢复的持久的资源，持久资源失败时的若干静态方法。 如果 Microsoft 分布式事务处理协调器 (MSDTC) 失败，不不需要持久资源的任何特殊操作。"
  syntax:
    content: public static class TransactionManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DefaultTimeout
  id: DefaultTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取新事务的默认超时的间隔。"
  remarks: "事务的超时时间间隔是必须在其中完成该事务的时间。 如果事务管理器在超时间隔内未收到来自所有事务参与者，它会中止的事务。       可以将此值设置`DefaultSettingsSection`的配置文件。"
  syntax:
    content: public static TimeSpan DefaultTimeout { get; }
    return:
      type: System.TimeSpan
      description: "A<xref:System.TimeSpan>值，该值指定新事务的超时间隔。</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionManager.DefaultTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  id: DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
  type: Event
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "指示已开始分布式的事务。"
  remarks: "**警告︰**注册此事件，从而降低服务器的所有分布式事务的性能。 如性能影响更多，不会监视本地事务。       **请注意**此方法使用<xref:System.Security.Permissions.SecurityAction>，防止它不受信任的代码中调用; 但是，仅限直接调用方需要拥有`FullTrust`权限集。</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static event System.Transactions.TransactionStartedEventHandler DistributedTransactionStarted;
    return:
      type: System.Transactions.TransactionStartedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  id: HostCurrentCallback
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取或设置自定义事务工厂。"
  remarks: '**请注意**此方法使用<xref:System.Security.Permissions.SecurityAction>，防止它不受信任的代码中调用; 但是，仅限直接调用方需要拥有`FullTrust`权限集。</xref:System.Security.Permissions.SecurityAction>'
  syntax:
    content: public static System.Transactions.HostCurrentTransactionCallback HostCurrentCallback { get; set; }
    return:
      type: System.Transactions.HostCurrentTransactionCallback
      description: "A <xref href=&quot;System.Transactions.HostCurrentTransactionCallback&quot;> </xref> ，包含自定义事务工厂。"
  overload: System.Transactions.TransactionManager.HostCurrentCallback*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.MaximumTimeout
  id: MaximumTimeout
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取新事务的默认最大超时的间隔。"
  remarks: "超时间隔的说明，请参阅的文档<xref:System.Transactions.TransactionManager.DefaultTimeout%2A>属性。</xref:System.Transactions.TransactionManager.DefaultTimeout%2A>       可以将此值设置`MachineSettingsSection`的配置文件。"
  syntax:
    content: public static TimeSpan MaximumTimeout { get; }
    return:
      type: System.TimeSpan
      description: "A<xref:System.TimeSpan>值，该值指定创建新事务时允许的最大超时间隔。</xref:System.TimeSpan>"
  overload: System.Transactions.TransactionManager.MaximumTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  id: RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "通知事务管理器资源管理器从故障中恢复已完成所有未解决的事务中登记。"
  remarks: "所有持久资源管理器应执行恢复时在首次启动通过调用<xref:System.Transactions.TransactionManager.Reenlist%2A>对于每个未完成事务的方法。</xref:System.Transactions.TransactionManager.Reenlist%2A>  仅当所有 reenlistments 完成资源管理器应调用 RecoveryComplete。       有关恢复的详细信息，请参阅[执行恢复](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)。       **请注意**此方法使用<xref:System.Security.Permissions.SecurityAction>，防止它不受信任的代码中调用; 但是，仅限直接调用方需要拥有`FullTrust`权限集。</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static void RecoveryComplete (Guid resourceManagerIdentifier);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "A<xref:System.Guid>唯一标识要从恢复的资源。</xref:System.Guid>"
  overload: System.Transactions.TransactionManager.RecoveryComplete*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>resourceManagerIdentifier</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  id: Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  langs:
  - csharp
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "重新登记在事务中的持久参与者。"
  remarks: "资源管理器通过在资源失败之后登记事务参与者来促进的在事务中的持久登记的解决。       `resourceManagerIdentifier`参数用于一致地标记资源失败时事务的参与者。  调用重新登记在方法时，资源管理器必须提供相同`resourceManagerIdentifier`作为它最初调用时，使用<xref:System.Transactions.Transaction.EnlistDurable%2A>期间登记，方法或<xref:System.Transactions.TransactionException>引发。</xref:System.Transactions.TransactionException> </xref:System.Transactions.Transaction.EnlistDurable%2A>       当重新登记参与者时使用此方法的第 2 阶段方法<xref:System.Transactions.IEnlistmentNotification>对应于事务的结果 (即， <xref:System.Transactions.IEnlistmentNotification.Commit%2A>，<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>或<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>) 相应地调用。</xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.Commit%2A> </xref:System.Transactions.IEnlistmentNotification>       参与者已成功重新登记后，应调用<xref:System.Transactions.TransactionManager.RecoveryComplete%2A>完成恢复。</xref:System.Transactions.TransactionManager.RecoveryComplete%2A>       资源管理器重新启动从故障时，仅应调用此方法。 此外，应该仅重新登记在两阶段提交的初始准备阶段中由资源管理器记录的未解析的事务。 任何尝试在无效的时间调用此方法可以产生错误的结果。       如果事务管理器失败，并且你的资源管理器执行恢复只在短时间调用后<xref:System.Transactions.PreparingEnlistment.Prepared%2A>第 1 阶段中的两阶段提交协议的登记的方法，资源管理器可能会收到<xref:System.Transactions.IEnlistmentNotification.InDoubt%2A>或<xref:System.Transactions.IEnlistmentNotification.Rollback%2A>回调。</xref:System.Transactions.IEnlistmentNotification.Rollback%2A> </xref:System.Transactions.IEnlistmentNotification.InDoubt%2A> </xref:System.Transactions.PreparingEnlistment.Prepared%2A>       有关恢复的详细信息，请参阅[执行恢复](http://msdn.microsoft.com/en-us/d342c5c7-da64-4a4c-8e63-b52f4fbf2691)。       **请注意**此方法使用<xref:System.Security.Permissions.SecurityAction>，防止它不受信任的代码中调用; 但是，仅限直接调用方需要拥有`FullTrust`权限集。</xref:System.Security.Permissions.SecurityAction>"
  syntax:
    content: public static System.Transactions.Enlistment Reenlist (Guid resourceManagerIdentifier, byte[] recoveryInformation, System.Transactions.IEnlistmentNotification enlistmentNotification);
    parameters:
    - id: resourceManagerIdentifier
      type: System.Guid
      description: "A<xref:System.Guid>唯一标识资源管理器。</xref:System.Guid>"
    - id: recoveryInformation
      type: System.Byte[]
      description: "包含恢复信息的其他的信息。"
    - id: enlistmentNotification
      type: System.Transactions.IEnlistmentNotification
      description: "资源实现的对象， <xref href=&quot;System.Transactions.IEnlistmentNotification&quot;> </xref>以接收通知。"
    return:
      type: System.Transactions.Enlistment
      description: "<xref href=&quot;System.Transactions.Enlistment&quot;> </xref>描述登记。"
  overload: System.Transactions.TransactionManager.Reenlist*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>recoveryInformation</code>是无效的。       -或-事务管理器中的信息<code>recoveryInformation</code>与已配置的事务管理器不匹配。       -<code>RecoveryInformation</code>无法识别的<xref href=&quot;System.Transactions&quot;> </xref>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Transactions.TransactionManager.RecoveryComplete*>已调用指定<code> resourceManagerIdentifier </code>。</xref:System.Transactions.TransactionManager.RecoveryComplete*> 重新登记被拒绝。"
  - type: System.Transactions.TransactionException
    commentId: T:System.Transactions.TransactionException
    description: "<code> resourceManagerIdentifier </code>与中的指定的恢复信息的内容不匹配<code> recoveryInformation </code>。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Transactions.TransactionException
  parent: System.Transactions
  isExternal: false
  name: TransactionException
  nameWithType: TransactionException
  fullName: System.Transactions.TransactionException
- uid: System.Transactions.TransactionManager.DefaultTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
  fullName: System.Transactions.TransactionManager.DefaultTimeout
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.TransactionManager.DistributedTransactionStarted
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DistributedTransactionStarted
  nameWithType: TransactionManager.DistributedTransactionStarted
  fullName: System.Transactions.TransactionManager.DistributedTransactionStarted
- uid: System.Transactions.TransactionStartedEventHandler
  parent: System.Transactions
  isExternal: false
  name: TransactionStartedEventHandler
  nameWithType: TransactionStartedEventHandler
  fullName: System.Transactions.TransactionStartedEventHandler
- uid: System.Transactions.TransactionManager.HostCurrentCallback
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
  fullName: System.Transactions.TransactionManager.HostCurrentCallback
- uid: System.Transactions.HostCurrentTransactionCallback
  parent: System.Transactions
  isExternal: false
  name: HostCurrentTransactionCallback
  nameWithType: HostCurrentTransactionCallback
  fullName: System.Transactions.HostCurrentTransactionCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
  fullName: System.Transactions.TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete(System.Guid)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete(Guid)
  nameWithType: TransactionManager.RecoveryComplete(Guid)
  fullName: System.Transactions.TransactionManager.RecoveryComplete(Guid)
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Transactions.TransactionManager.Reenlist(System.Guid,System.Byte[],System.Transactions.IEnlistmentNotification)
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist(Guid,Byte[],IEnlistmentNotification)
  nameWithType: TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
  fullName: System.Transactions.TransactionManager.Reenlist(Guid,Byte[],IEnlistmentNotification)
- uid: System.Transactions.Enlistment
  parent: System.Transactions
  isExternal: false
  name: Enlistment
  nameWithType: Enlistment
  fullName: System.Transactions.Enlistment
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Transactions.IEnlistmentNotification
  parent: System.Transactions
  isExternal: false
  name: IEnlistmentNotification
  nameWithType: IEnlistmentNotification
  fullName: System.Transactions.IEnlistmentNotification
- uid: System.Transactions.TransactionManager.DefaultTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: DefaultTimeout
  nameWithType: TransactionManager.DefaultTimeout
- uid: System.Transactions.TransactionManager.HostCurrentCallback*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: HostCurrentCallback
  nameWithType: TransactionManager.HostCurrentCallback
- uid: System.Transactions.TransactionManager.MaximumTimeout*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: MaximumTimeout
  nameWithType: TransactionManager.MaximumTimeout
- uid: System.Transactions.TransactionManager.RecoveryComplete*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: RecoveryComplete
  nameWithType: TransactionManager.RecoveryComplete
- uid: System.Transactions.TransactionManager.Reenlist*
  parent: System.Transactions.TransactionManager
  isExternal: false
  name: Reenlist
  nameWithType: TransactionManager.Reenlist
