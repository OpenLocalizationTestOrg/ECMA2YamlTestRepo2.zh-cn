### YamlMime:ManagedReference
items:
- uid: System.Xml.Serialization.SoapTypeAttribute
  id: SoapTypeAttribute
  children:
  - System.Xml.Serialization.SoapTypeAttribute.#ctor
  - System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)
  - System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)
  - System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
  - System.Xml.Serialization.SoapTypeAttribute.Namespace
  - System.Xml.Serialization.SoapTypeAttribute.TypeName
  langs:
  - csharp
  name: SoapTypeAttribute
  nameWithType: SoapTypeAttribute
  fullName: System.Xml.Serialization.SoapTypeAttribute
  type: Class
  summary: "控制由生成的架构<xref:System.Xml.Serialization.XmlSerializer>当类实例序列化为 SOAP 编码 XML。</xref:System.Xml.Serialization.XmlSerializer>"
  remarks: "SoapTypeAttribute 类属于一系列属性，用于控制如何<xref:System.Xml.Serialization.XmlSerializer>序列化或反序列化对象作为编码的 SOAP XML。</xref:System.Xml.Serialization.XmlSerializer> 结果 XML 符合万维网联合会 (www.w3.org) 文档，&quot;简单对象访问协议 (SOAP) 1.1&quot;的第 5 节。 类似的属性的完整列表，请参阅[属性，控制编码 SOAP 序列化](~/add/includes/ajax-current-ext-md.md)。       要序列化作为编码 SOAP 消息的对象，构造<xref:System.Xml.Serialization.XmlSerializer>使用<xref:System.Xml.Serialization.XmlTypeMapping>创建使用<xref:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping%2A>方法的<xref:System.Xml.Serialization.SoapReflectionImporter>类。</xref:System.Xml.Serialization.SoapReflectionImporter> </xref:System.Xml.Serialization.SoapReflectionImporter.ImportTypeMapping%2A> </xref:System.Xml.Serialization.XmlTypeMapping> </xref:System.Xml.Serialization.XmlSerializer>       SoapTypeAttribute 可以仅应用于类声明中。       <xref:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema%2A>属性确定是否生成 XML 流的 XML 架构文档 (.xsd) 中包含生成的 XML 元素类型。</xref:System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema%2A> 若要查看架构，请将该类编译为 DLL 文件中。 将生成的文件的自变量作为传递[XML 架构定义工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)。 该工具将生成 XML 流类序列化的<xref:System.Xml.Serialization.XmlSerializer>类</xref:System.Xml.Serialization.XmlSerializer>实例时生成 XML 架构       设置不同的命名空间将导致 Xsd.exe 要写入序列化类时生成的 XML 流的不同架构 (.xsd) 文件。"
  example:
  - "The following example serializes a class named `Group`. The SoapTypeAttribute is applied to the class, with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The SoapTypeAttribute is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/t-system.xml.serializati_5_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/t-system.xml.serializati_5_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/t-system.xml.serializati_5_1.cpp)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Interface)]

      public class SoapTypeAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor
  id: '#ctor'
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: SoapTypeAttribute()
  nameWithType: SoapTypeAttribute.SoapTypeAttribute()
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "初始化的新实例<xref href=&quot;System.Xml.Serialization.SoapTypeAttribute&quot;></xref>类。"
  remarks: "创建<xref:System.Xml.Serialization.SoapTypeAttribute>时重写一种类型的序列化。</xref:System.Xml.Serialization.SoapTypeAttribute> 将对象分配给<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>属性<xref:System.Xml.Serialization.SoapAttributes>并将添加<xref:System.Xml.Serialization.SoapAttributes>到<xref:System.Xml.Serialization.SoapAttributeOverrides>。</xref:System.Xml.Serialization.SoapAttributeOverrides> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes.SoapType%2A> 请参阅<xref:System.Xml.Serialization.SoapAttributeOverrides>类概述有关重写 SOAP 序列化的详细信息。</xref:System.Xml.Serialization.SoapAttributeOverrides>"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.serializati_8_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.serializati_8_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.serializati_8_1.cpp)]"
  syntax:
    content: public SoapTypeAttribute ();
    parameters: []
  overload: System.Xml.Serialization.SoapTypeAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: SoapTypeAttribute(String)
  nameWithType: SoapTypeAttribute.SoapTypeAttribute(String)
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute(String)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "初始化的新实例<xref href=&quot;System.Xml.Serialization.SoapTypeAttribute&quot;></xref>类，并指定 XML 类型的名称。"
  remarks: "创建<xref:System.Xml.Serialization.SoapTypeAttribute>时重写一种类型的序列化。</xref:System.Xml.Serialization.SoapTypeAttribute> 将对象分配给<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>属性<xref:System.Xml.Serialization.SoapAttributes>并将添加<xref:System.Xml.Serialization.SoapAttributes>到<xref:System.Xml.Serialization.SoapAttributeOverrides>。</xref:System.Xml.Serialization.SoapAttributeOverrides> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes.SoapType%2A> 请参阅<xref:System.Xml.Serialization.SoapAttributeOverrides>类概述有关重写 SOAP 序列化的详细信息。</xref:System.Xml.Serialization.SoapAttributeOverrides>"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/m-system.xml.serializati_11_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/m-system.xml.serializati_11_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/m-system.xml.serializati_11_1.cpp)]"
  syntax:
    content: public SoapTypeAttribute (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "XML 名称键入<xref:System.Xml.Serialization.XmlSerializer>时它序列化的类实例 （并识别它进行反序列化的类实例时），将生成。</xref:System.Xml.Serialization.XmlSerializer>"
  overload: System.Xml.Serialization.SoapTypeAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: SoapTypeAttribute(String,String)
  nameWithType: SoapTypeAttribute.SoapTypeAttribute(String,String)
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute(String,String)
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "初始化的新实例<xref href=&quot;System.Xml.Serialization.SoapTypeAttribute&quot;></xref>类，并指定名称和类型的 XML 命名空间。"
  remarks: "创建<xref:System.Xml.Serialization.SoapTypeAttribute>时重写一种类型的序列化。</xref:System.Xml.Serialization.SoapTypeAttribute> 将对象分配给<xref:System.Xml.Serialization.SoapAttributes.SoapType%2A>属性<xref:System.Xml.Serialization.SoapAttributes>并将添加<xref:System.Xml.Serialization.SoapAttributes>到<xref:System.Xml.Serialization.SoapAttributeOverrides>。</xref:System.Xml.Serialization.SoapAttributeOverrides> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes> </xref:System.Xml.Serialization.SoapAttributes.SoapType%2A> 请参阅<xref:System.Xml.Serialization.SoapAttributeOverrides>重写 SOAP 序列化的更多详细信息的类概述。</xref:System.Xml.Serialization.SoapAttributeOverrides>       如果你设置<xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A>多个类型的值 (即，如果将特性应用于多个替换为其他类<xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A>为每个值)，则[XML 架构定义工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)生成每种类型的单独的架构文件 (.xsd)。</xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A> </xref:System.Xml.Serialization.SoapTypeAttribute.Namespace%2A> 这是因为将设置不同的命名空间为每种类型会呈现每个类型不同于其他，这样，就需要对要写一个独立的实体为每个类型。"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/b7d7a27e-07c4-4ae2-8b05-_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/b7d7a27e-07c4-4ae2-8b05-_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/b7d7a27e-07c4-4ae2-8b05-_1.cpp)]"
  syntax:
    content: public SoapTypeAttribute (string typeName, string ns);
    parameters:
    - id: typeName
      type: System.String
      description: "XML 名称键入<xref:System.Xml.Serialization.XmlSerializer>时它序列化的类实例 （并识别它进行反序列化的类实例时），将生成。</xref:System.Xml.Serialization.XmlSerializer>"
    - id: ns
      type: System.String
      description: "类型的 XML 命名空间。"
  overload: System.Xml.Serialization.SoapTypeAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
  id: IncludeInSchema
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: IncludeInSchema
  nameWithType: SoapTypeAttribute.IncludeInSchema
  fullName: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "获取或设置一个值，该值指示是否要包含在 SOAP 编码的 XML 架构文档中的类型。"
  remarks: "应用<xref:System.Xml.Serialization.SoapTypeAttribute>到类声明，以指定是否要包含在 XML 架构文档中的类型。</xref:System.Xml.Serialization.SoapTypeAttribute> 若要查看的属性设置结果<xref:System.Xml.Serialization.SoapTypeAttribute>类，编译应用程序作为可执行文件或 DLL，并将传递到生成的文件[XML 架构定义工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)。</xref:System.Xml.Serialization.SoapTypeAttribute> 该工具将架构，包括类序列化时生成的 XML 流的类型定义。"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/p-system.xml.serializati_18_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/p-system.xml.serializati_18_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/p-system.xml.serializati_18_1.cpp)]"
  syntax:
    content: public bool IncludeInSchema { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>要包含在 SOAP 编码的 XML 架构文档; 中的类型否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.Namespace
  id: Namespace
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: Namespace
  nameWithType: SoapTypeAttribute.Namespace
  fullName: System.Xml.Serialization.SoapTypeAttribute.Namespace
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "获取或设置 XML 类型的命名空间。"
  remarks: "如果多个类型的 Namespace 值设置 （即，如果将特性应用到多个具有不同的 Namespace 值为每个类），则[XML 架构定义工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)生成每种类型的单独的架构文件 (.xsd)。 这是因为将设置不同的命名空间为每种类型会呈现每个类型不同于其他，这样，就需要对要写一个独立的实体为每个类型。"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the <xref:System.Xml.Serialization.SoapTypeAttribute.TypeName%2A> to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/p-system.xml.serializati_2_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/p-system.xml.serializati_2_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/p-system.xml.serializati_2_1.cpp)]"
  syntax:
    content: public string Namespace { get; set; }
    return:
      type: System.String
      description: "XML 类型的命名空间。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Xml.Serialization.SoapTypeAttribute.Namespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Serialization.SoapTypeAttribute.TypeName
  id: TypeName
  parent: System.Xml.Serialization.SoapTypeAttribute
  langs:
  - csharp
  name: TypeName
  nameWithType: SoapTypeAttribute.TypeName
  fullName: System.Xml.Serialization.SoapTypeAttribute.TypeName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Serialization
  summary: "获取或设置 XML 类型的名称。"
  remarks: "应用<xref:System.Xml.Serialization.SoapTypeAttribute>于类，以指定的 XML 类型的命名空间、 XML 类型名称，以及是否要包含在 XML 架构文档中的类型。</xref:System.Xml.Serialization.SoapTypeAttribute> 若要查看的结果设置<xref:System.Xml.Serialization.SoapTypeAttribute>对象的属性，编译应用程序作为可执行文件或 DLL，并将传递到生成的文件[XML 架构定义工具 (Xsd.exe)](~/add/includes/ajax-current-ext-md.md)。</xref:System.Xml.Serialization.SoapTypeAttribute> 该工具将架构，包括类型定义。"
  example:
  - "The following example serializes a class named `Group`. The <xref:System.Xml.Serialization.SoapTypeAttribute> is applied to the class with the TypeName set to \"SoapGroupType\". The <xref:System.Xml.Serialization.SoapTypeAttribute> is also overridden, changing the TypeName to \"Team\". Both versions are serialized, resulting in two files: SoapType.xml and SoapType2.xml.  \n  \n [!code-cs[SoapTypeAttribute Example#1](~/add/codesnippet/csharp/p-system.xml.serializati_14_1.cs)]\n [!code-vb[SoapTypeAttribute Example#1](~/add/codesnippet/visualbasic/p-system.xml.serializati_14_1.vb)]\n [!code-cpp[SoapTypeAttribute Example#1](~/add/codesnippet/cpp/p-system.xml.serializati_14_1.cpp)]"
  syntax:
    content: public string TypeName { get; set; }
    return:
      type: System.String
      description: "XML 类型的名称。 默认值为类名。"
  overload: System.Xml.Serialization.SoapTypeAttribute.TypeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: SoapTypeAttribute()
  nameWithType: SoapTypeAttribute.SoapTypeAttribute()
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute()
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String)
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: SoapTypeAttribute(String)
  nameWithType: SoapTypeAttribute.SoapTypeAttribute(String)
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor(System.String,System.String)
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: SoapTypeAttribute(String,String)
  nameWithType: SoapTypeAttribute.SoapTypeAttribute(String,String)
  fullName: System.Xml.Serialization.SoapTypeAttribute.SoapTypeAttribute(String,String)
- uid: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: IncludeInSchema
  nameWithType: SoapTypeAttribute.IncludeInSchema
  fullName: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Serialization.SoapTypeAttribute.Namespace
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: Namespace
  nameWithType: SoapTypeAttribute.Namespace
  fullName: System.Xml.Serialization.SoapTypeAttribute.Namespace
- uid: System.Xml.Serialization.SoapTypeAttribute.TypeName
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: TypeName
  nameWithType: SoapTypeAttribute.TypeName
  fullName: System.Xml.Serialization.SoapTypeAttribute.TypeName
- uid: System.Xml.Serialization.SoapTypeAttribute.#ctor*
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: SoapTypeAttribute
  nameWithType: SoapTypeAttribute.SoapTypeAttribute
- uid: System.Xml.Serialization.SoapTypeAttribute.IncludeInSchema*
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: IncludeInSchema
  nameWithType: SoapTypeAttribute.IncludeInSchema
- uid: System.Xml.Serialization.SoapTypeAttribute.Namespace*
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: Namespace
  nameWithType: SoapTypeAttribute.Namespace
- uid: System.Xml.Serialization.SoapTypeAttribute.TypeName*
  parent: System.Xml.Serialization.SoapTypeAttribute
  isExternal: false
  name: TypeName
  nameWithType: SoapTypeAttribute.TypeName
