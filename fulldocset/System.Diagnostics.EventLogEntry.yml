### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventLogEntry
  id: EventLogEntry
  children:
  - System.Diagnostics.EventLogEntry.Category
  - System.Diagnostics.EventLogEntry.CategoryNumber
  - System.Diagnostics.EventLogEntry.Data
  - System.Diagnostics.EventLogEntry.EntryType
  - System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)
  - System.Diagnostics.EventLogEntry.EventID
  - System.Diagnostics.EventLogEntry.Index
  - System.Diagnostics.EventLogEntry.InstanceId
  - System.Diagnostics.EventLogEntry.MachineName
  - System.Diagnostics.EventLogEntry.Message
  - System.Diagnostics.EventLogEntry.ReplacementStrings
  - System.Diagnostics.EventLogEntry.Source
  - System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Diagnostics.EventLogEntry.TimeGenerated
  - System.Diagnostics.EventLogEntry.TimeWritten
  - System.Diagnostics.EventLogEntry.UserName
  langs:
  - csharp
  name: EventLogEntry
  nameWithType: EventLogEntry
  fullName: System.Diagnostics.EventLogEntry
  type: Class
  summary: "封装单个记录事件日志中。 此类不能被继承。"
  remarks: "你通常不会创建 EventLogEntry 的实例直接时使用的<xref:System.Diagnostics.EventLog>类。</xref:System.Diagnostics.EventLog> <xref:System.Diagnostics.EventLog.Entries%2A>的成员<xref:System.Diagnostics.EventLog>类包含 EventLogEntry 实例，通过使用读取时循环访问集合<xref:System.Diagnostics.EventLogEntryCollection.Item%2A?displayProperty=fullName>类索引成员。</xref:System.Diagnostics.EventLogEntryCollection.Item%2A?displayProperty=fullName> </xref:System.Diagnostics.EventLog> </xref:System.Diagnostics.EventLog.Entries%2A>      1> [!IMPORTANT]&1;> 此类型实现<xref:System.IDisposable>接口。</xref:System.IDisposable> 完成后使用类型的操作后，你应释放类型直接或间接。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</xref:System.IDisposable.Dispose%2A> 若要间接释放类型，使用一种语言构造如`using`（在 C# 中) 或`Using`（在 Visual Basic 中)。 有关详细信息，请参阅中的&quot;使用实现 IDisposable 的对象&quot;部分<xref:System.IDisposable>接口主题。</xref:System.IDisposable>"
  example:
  - "The following code example demonstrates the use of the EventLogEntry class. In this example, a `switch` statement uses console input to search for event log entries for the specified event type.  If a match is found, log entry source information is displayed at the console.  \n  \n [!code-cpp[EventLogEntry_Source#1](~/add/codesnippet/cpp/t-system.diagnostics.eve_4_1.cpp)]\n [!code-cs[EventLogEntry_Source#1](~/add/codesnippet/csharp/t-system.diagnostics.eve_4_1.cs)]\n [!code-vb[EventLogEntry_Source#1](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DesignTimeVisible(false)]

      [System.ComponentModel.ToolboxItem(false)]

      public sealed class EventLogEntry : System.ComponentModel.Component, System.Runtime.Serialization.ISerializable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements:
  - System.Runtime.Serialization.ISerializable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Category
  id: Category
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Category
  nameWithType: EventLogEntry.Category
  fullName: System.Diagnostics.EventLogEntry.Category
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取与关联的文本<xref:System.Diagnostics.EventLogEntry.CategoryNumber*>此项的属性。</xref:System.Diagnostics.EventLogEntry.CategoryNumber*>"
  remarks: "每个应用程序 （事件源） 可以定义自己带编号的类别以及它们映射到的文本字符串。 事件查看器可以在日志中使用的类别筛选事件。"
  syntax:
    content: public string Category { get; }
    return:
      type: System.String
      description: "应用程序特定类别文本。"
  overload: System.Diagnostics.EventLogEntry.Category*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "与类别关联的插入字符串之一，无法分配空间。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.CategoryNumber
  id: CategoryNumber
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: CategoryNumber
  nameWithType: EventLogEntry.CategoryNumber
  fullName: System.Diagnostics.EventLogEntry.CategoryNumber
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取事件日志项的类别号。"
  remarks: "每个应用程序 （事件源） 可以定义自己带编号的类别以及它们映射到的文本字符串。 事件查看器可以在日志中使用的类别筛选事件。 类别必须是连续编号开头使用数字 1。 指定的类别号<xref:System.Diagnostics.EventInstance.CategoryId%2A?displayProperty=fullName>属性。</xref:System.Diagnostics.EventInstance.CategoryId%2A?displayProperty=fullName> 事件查看器可将类别显示为数字值，或者它可以作为资源标识符使用类别，以显示本地化的类别字符串。 有关详细信息，请参阅<xref:System.Diagnostics.EventInstance>。</xref:System.Diagnostics.EventInstance>"
  syntax:
    content: public short CategoryNumber { get; }
    return:
      type: System.Int16
      description: "此项应用程序特定类别号。"
  overload: System.Diagnostics.EventLogEntry.CategoryNumber*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Data
  id: Data
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Data
  nameWithType: EventLogEntry.Data
  fullName: System.Diagnostics.EventLogEntry.Data
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取与此项关联的二进制数据。"
  remarks: "获取此属性创建一个数组，其中包含的项的特定事件的二进制数据，其中显示组合的十六进制转义序列和文本格式中的事件查看器的副本。 特定于事件的数据有时用来存储应用程序将独立于事件查看器中，例如处理的信息，以使报表从日志文件。"
  syntax:
    content: public byte[] Data { get; }
    return:
      type: System.Byte[]
      description: "包含与此项关联的二进制数据的字节数组。"
  overload: System.Diagnostics.EventLogEntry.Data*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.EntryType
  id: EntryType
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: EntryType
  nameWithType: EventLogEntry.EntryType
  fullName: System.Diagnostics.EventLogEntry.EntryType
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取此项的事件类型。"
  remarks: "所有事件类型具有定义完善的常用数据，并且可以根据需要包含特定于事件的数据。 每个事件是应用程序将指示它在报告事件时的单一类型。 事件查看器使用的事件类型来确定要在事件日志的列表视图中显示的图标。"
  example:
  - "The following code example demonstrates the use of the EntryType property. In this example, a `switch` statement uses console input to search for event log entries for the specified EntryType.  If a match is found, log entry source information is displayed at the console.  \n  \n [!code-cpp[EventLogEntry_Source#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_4_1.cpp)]\n [!code-cs[EventLogEntry_Source#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_4_1.cs)]\n [!code-vb[EventLogEntry_Source#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_4_1.vb)]"
  syntax:
    content: public System.Diagnostics.EventLogEntryType EntryType { get; }
    return:
      type: System.Diagnostics.EventLogEntryType
      description: "与事件日志中的条目相关联的事件类型。"
  overload: System.Diagnostics.EventLogEntry.EntryType*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)
  id: Equals(System.Diagnostics.EventLogEntry)
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Equals(EventLogEntry)
  nameWithType: EventLogEntry.Equals(EventLogEntry)
  fullName: System.Diagnostics.EventLogEntry.Equals(EventLogEntry)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "执行两个事件日志条目之间的比较。"
  remarks: "此方法执行两个对象之间的逐字节比较。 它不会不确定是否两个<xref:System.Diagnostics.EventLogEntry>实例引用同一对象。</xref:System.Diagnostics.EventLogEntry>"
  syntax:
    content: public bool Equals (System.Diagnostics.EventLogEntry otherEntry);
    parameters:
    - id: otherEntry
      type: System.Diagnostics.EventLogEntry
      description: "<xref href=&quot;System.Diagnostics.EventLogEntry&quot;> </xref>进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Diagnostics.EventLogEntry&quot;></xref>对象是完全相同; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Diagnostics.EventLogEntry.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.EventID
  id: EventID
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: EventID
  nameWithType: EventLogEntry.EventID
  fullName: System.Diagnostics.EventLogEntry.EventID
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取当前事件项的应用程序特定事件标识符。"
  remarks: "事件日志，并且最顶部的两位掩码中，此值表示的项的事件标识符。 <xref:System.Diagnostics.EventLogEntry.InstanceId%2A>一个事件日志条目的属性表示为事件源的消息资源文件中的事件的完整的 32 位资源标识符。</xref:System.Diagnostics.EventLogEntry.InstanceId%2A> 来自同一源的两个事件日志条目可以拥有匹配的 EventID 值，但具有不同<xref:System.Diagnostics.EventLogEntry.InstanceId%2A>存在差异导致的事件标识符最高两位的值。</xref:System.Diagnostics.EventLogEntry.InstanceId%2A>       如果应用程序写入事件项使用之一<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法，EventID 属性匹配可选`eventId`参数。</xref:System.Diagnostics.EventLog.WriteEntry%2A> 如果应用程序编写事件使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>或 Win32 API `ReportEvent`、 EventID 属性匹配的事件的资源标识符、 顶部与两个位掩码的关闭</xref:System.Diagnostics.EventLog.WriteEvent%2A>"
  syntax:
    content: public int EventID { get; }
    return:
      type: System.Int32
      description: "事件消息的应用程序特定标识符。"
  overload: System.Diagnostics.EventLogEntry.EventID*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Index
  id: Index
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Index
  nameWithType: EventLogEntry.Index
  fullName: System.Diagnostics.EventLogEntry.Index
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "事件日志中获取此项的索引。"
  remarks: "此数量不一定是从零开始。"
  syntax:
    content: public int Index { get; }
    return:
      type: System.Int32
      description: "事件日志中此项的索引。"
  overload: System.Diagnostics.EventLogEntry.Index*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.InstanceId
  id: InstanceId
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: InstanceId
  nameWithType: EventLogEntry.InstanceId
  fullName: System.Diagnostics.EventLogEntry.InstanceId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取指定事件项的消息文本的资源标识符。"
  remarks: "InstanceId 属性唯一地标识配置的事件源的事件条目。 事件日志条目 InstanceId 表示为事件源的消息资源文件中的事件的完整的 32 位资源标识符。 <xref:System.Diagnostics.EventLogEntry.EventID%2A>属性值等于 InstanceId 使用屏蔽的前两个位关闭。</xref:System.Diagnostics.EventLogEntry.EventID%2A> 来自同一源的两个事件日志项可以有匹配<xref:System.Diagnostics.EventLogEntry.EventID%2A>值，但具有不同的 InstanceId 值存在差异导致的资源标识符最高两位。</xref:System.Diagnostics.EventLogEntry.EventID%2A>       如果应用程序写入事件项使用之一<xref:System.Diagnostics.EventLog.WriteEntry%2A>方法，InstanceId 属性匹配可选`eventId`参数。</xref:System.Diagnostics.EventLog.WriteEntry%2A> 如果应用程序编写事件使用<xref:System.Diagnostics.EventLog.WriteEvent%2A>，InstanceId 属性中指定的资源标识符匹配<xref:System.Diagnostics.EventInstance.InstanceId%2A>的`instance`参数。</xref:System.Diagnostics.EventInstance.InstanceId%2A> </xref:System.Diagnostics.EventLog.WriteEvent%2A> 如果应用程序写入事件使用 Win32 API `ReportEvent`，InstanceId 属性中指定的资源标识符匹配`dwEventID`参数。       有关如何定义事件消息和生成事件日志资源文件的详细信息，请参阅处平台 SDK 文档中的&quot;消息编译器&quot;主题[http://msdn.microsoft.com](http://msdn.microsoft.com/)。 有关事件日志的标识符的详细信息，请参阅平台 SDK 中的&quot;事件标识符&quot;主题。"
  example:
  - "The following code example searches an event log for entries with a particular resource identifier. The code example displays the event message for each matching entry, and counts the total number of matching entries in the log. The message text for each entry may or may not be the same; each event message depends on the event source message file, insertion strings, and parameters used when it was written.  \n  \n [!code-cpp[EventLog_WriteEvent#10](~/add/codesnippet/cpp/p-system.diagnostics.eve_20_1.cpp)]\n [!code-vb[EventLog_WriteEvent#10](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_20_1.vb)]\n [!code-cs[EventLog_WriteEvent#10](~/add/codesnippet/csharp/p-system.diagnostics.eve_20_1.cs)]"
  syntax:
    content: public long InstanceId { get; }
    return:
      type: System.Int64
      description: "资源标识符，对应于事件源的消息资源文件中的字符串定义。"
  overload: System.Diagnostics.EventLogEntry.InstanceId*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.MachineName
  id: MachineName
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: MachineName
  nameWithType: EventLogEntry.MachineName
  fullName: System.Diagnostics.EventLogEntry.MachineName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取在其生成该项的计算机的名称。"
  syntax:
    content: public string MachineName { get; }
    return:
      type: System.String
      description: "包含事件日志的计算机的名称。"
  overload: System.Diagnostics.EventLogEntry.MachineName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Message
  id: Message
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Message
  nameWithType: EventLogEntry.Message
  fullName: System.Diagnostics.EventLogEntry.Message
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取与该事件项关联的本地化的消息。"
  remarks: "获取此属性将打开注册表项以确定包含本地化后的文本的.dll 文件的文件名。 如果测试你的源代码时，你会收到注册表错误，请验证计算机上存在的.dll 文件。 如果插入字符串包含消息中，捕获其分配中的错误。"
  syntax:
    content: public string Message { get; }
    return:
      type: System.String
      description: "消息的格式化、 本地化文本。 这包括关联的替换字符串。"
  overload: System.Diagnostics.EventLogEntry.Message*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "与消息关联的插入字符串之一，无法分配空间。"
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.ReplacementStrings
  id: ReplacementStrings
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: ReplacementStrings
  nameWithType: EventLogEntry.ReplacementStrings
  fullName: System.Diagnostics.EventLogEntry.ReplacementStrings
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取与事件日志项关联的替换字符串。"
  remarks: "此属性只检索的替换字符串的项。 若要检索完整的消息，请阅读<xref:System.Diagnostics.EventLogEntry.Message%2A>属性。</xref:System.Diagnostics.EventLogEntry.Message%2A>       ReplacementStrings 属性包含在事件日志条目中使用的替换字符串的本地化的版本。 如果你提供包含在你的应用程序每个目标语言的字符串的资源文件，你可以发出该计算机使用的语言中的事件日志消息。 为此，请创建的实例<xref:System.Resources.ResourceManager>包含替换字符串的资源程序集的类。</xref:System.Resources.ResourceManager> 第一个参数<xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29>构造函数标识要使用的资源程序集。</xref:System.Resources.ResourceManager.%23ctor%28System.String%2CSystem.Reflection.Assembly%29> 使用<xref:System.Resources.ResourceManager.GetString%2A>该实例提供本地化的消息的日志事件的方法。</xref:System.Resources.ResourceManager.GetString%2A> 下面的代码会自动设置用于当前区域性的语言的消息。      ```   ResourceManager LocRM = new ResourceManager(&quot;ReplacementStrings.TestStrings&quot;,          typeof(Program).Assembly);   EventLog e1 = new EventLog(&quot;LocTest&quot;, &quot;MyMachine&quot;, &quot;LocTest&quot;);   // Get the string associated with the current culture.   e1.WriteEntry(LocRM.GetString(&quot;strMessage&quot;),      EventLogEntryType.Information);   ```"
  syntax:
    content: public string[] ReplacementStrings { get; }
    return:
      type: System.String[]
      description: "包含的替换字符串数组存储在事件项。"
  overload: System.Diagnostics.EventLogEntry.ReplacementStrings*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.Source
  id: Source
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: Source
  nameWithType: EventLogEntry.Source
  fullName: System.Diagnostics.EventLogEntry.Source
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取生成此事件的应用程序的名称。"
  remarks: "事件源指示什么来记录事件。 它通常是应用程序的名称或应用程序的子组件名称如果应用程序非常大。 应用程序和服务通常写入到 （并且因此可用于的资源） 应用程序日志或自定义日志。 设备驱动程序通常写入系统日志。"
  example:
  - "The following code example demonstrates the use of the Source property. In this example, a `switch` statement uses console input to search for event log entries for the specified <xref:System.Diagnostics.EventLogEntry.EntryType%2A>.  If a match is found, the Source property information is displayed at the console.  \n  \n [!code-cpp[EventLogEntry_Source#1](~/add/codesnippet/cpp/p-system.diagnostics.eve_27_1.cpp)]\n [!code-cs[EventLogEntry_Source#1](~/add/codesnippet/csharp/p-system.diagnostics.eve_27_1.cs)]\n [!code-vb[EventLogEntry_Source#1](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_27_1.vb)]"
  syntax:
    content: public string Source { get; }
    return:
      type: System.String
      description: "事件日志中注册为此事件的源的名称。"
  overload: System.Diagnostics.EventLogEntry.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  id: System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  isEii: true
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Diagnostics.EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "填充<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;></xref>序列化目标对象所需的数据。"
  syntax:
    content: void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: info
      type: System.Runtime.Serialization.SerializationInfo
      description: "<xref href=&quot;System.Runtime.Serialization.SerializationInfo&quot;> </xref>要填充数据。"
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "目标 (请参阅<xref:System.Runtime.Serialization.StreamingContext>) 此序列化。</xref:System.Runtime.Serialization.StreamingContext>"
  overload: System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.TimeGenerated
  id: TimeGenerated
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: TimeGenerated
  nameWithType: EventLogEntry.TimeGenerated
  fullName: System.Diagnostics.EventLogEntry.TimeGenerated
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取生成该事件的本地时间。"
  remarks: "此成员包含生成事件的时间。 这可能不是事件日志中的事件信息写入时的时间相同。 对于后者，读取<xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>属性。</xref:System.Diagnostics.EventLogEntry.TimeWritten%2A>       通常是生成一个事件的时间和它记录的时间之间的延迟。 很多重要知道生成事件的除非你想要查看的日志记录是否存在显著的滞后。 如果日志文件位于不同的服务器上并且在遇到瓶颈，则可能发生的。"
  syntax:
    content: public DateTime TimeGenerated { get; }
    return:
      type: System.DateTime
      description: "生成该事件的本地时间。"
  overload: System.Diagnostics.EventLogEntry.TimeGenerated*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.TimeWritten
  id: TimeWritten
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: TimeWritten
  nameWithType: EventLogEntry.TimeWritten
  fullName: System.Diagnostics.EventLogEntry.TimeWritten
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取日志中写入此事件的本地时间。"
  remarks: "此成员包含某一事件的信息写入事件日志的时间。 这可能不在同一生成事件的时间。 对于后者，读取<xref:System.Diagnostics.EventLogEntry.TimeGenerated%2A>属性。</xref:System.Diagnostics.EventLogEntry.TimeGenerated%2A>"
  syntax:
    content: public DateTime TimeWritten { get; }
    return:
      type: System.DateTime
      description: "日志中写入此事件的本地时间。"
  overload: System.Diagnostics.EventLogEntry.TimeWritten*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.EventLogEntry.UserName
  id: UserName
  parent: System.Diagnostics.EventLogEntry
  langs:
  - csharp
  name: UserName
  nameWithType: EventLogEntry.UserName
  fullName: System.Diagnostics.EventLogEntry.UserName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取负责该事件的用户的名称。"
  remarks: "此属性通常是空白中而不是安全日志的日志的事件。"
  syntax:
    content: public string UserName { get; }
    return:
      type: System.String
      description: "唯一标识用户或组安全标识符 (SID)。"
  overload: System.Diagnostics.EventLogEntry.UserName*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "无法为用户的 SID 获取帐户信息。"
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.Diagnostics.EventLogEntry.Category
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Category
  nameWithType: EventLogEntry.Category
  fullName: System.Diagnostics.EventLogEntry.Category
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.EventLogEntry.CategoryNumber
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: CategoryNumber
  nameWithType: EventLogEntry.CategoryNumber
  fullName: System.Diagnostics.EventLogEntry.CategoryNumber
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Diagnostics.EventLogEntry.Data
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Data
  nameWithType: EventLogEntry.Data
  fullName: System.Diagnostics.EventLogEntry.Data
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogEntry.EntryType
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: EntryType
  nameWithType: EventLogEntry.EntryType
  fullName: System.Diagnostics.EventLogEntry.EntryType
- uid: System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics.EventLogEntry.Equals(System.Diagnostics.EventLogEntry)
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Equals(EventLogEntry)
  nameWithType: EventLogEntry.Equals(EventLogEntry)
  fullName: System.Diagnostics.EventLogEntry.Equals(EventLogEntry)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.EventLogEntry
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntry
  nameWithType: EventLogEntry
  fullName: System.Diagnostics.EventLogEntry
- uid: System.Diagnostics.EventLogEntry.EventID
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: EventID
  nameWithType: EventLogEntry.EventID
  fullName: System.Diagnostics.EventLogEntry.EventID
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventLogEntry.Index
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Index
  nameWithType: EventLogEntry.Index
  fullName: System.Diagnostics.EventLogEntry.Index
- uid: System.Diagnostics.EventLogEntry.InstanceId
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: InstanceId
  nameWithType: EventLogEntry.InstanceId
  fullName: System.Diagnostics.EventLogEntry.InstanceId
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Diagnostics.EventLogEntry.MachineName
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: MachineName
  nameWithType: EventLogEntry.MachineName
  fullName: System.Diagnostics.EventLogEntry.MachineName
- uid: System.Diagnostics.EventLogEntry.Message
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Message
  nameWithType: EventLogEntry.Message
  fullName: System.Diagnostics.EventLogEntry.Message
- uid: System.Diagnostics.EventLogEntry.ReplacementStrings
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: ReplacementStrings
  nameWithType: EventLogEntry.ReplacementStrings
  fullName: System.Diagnostics.EventLogEntry.ReplacementStrings
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.EventLogEntry.Source
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Source
  nameWithType: EventLogEntry.Source
  fullName: System.Diagnostics.EventLogEntry.Source
- uid: System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  nameWithType: EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
  fullName: System.Diagnostics.EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData(SerializationInfo,StreamingContext)
- uid: System.Runtime.Serialization.SerializationInfo
  parent: System.Runtime.Serialization
  isExternal: false
  name: SerializationInfo
  nameWithType: SerializationInfo
  fullName: System.Runtime.Serialization.SerializationInfo
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Diagnostics.EventLogEntry.TimeGenerated
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: TimeGenerated
  nameWithType: EventLogEntry.TimeGenerated
  fullName: System.Diagnostics.EventLogEntry.TimeGenerated
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Diagnostics.EventLogEntry.TimeWritten
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: TimeWritten
  nameWithType: EventLogEntry.TimeWritten
  fullName: System.Diagnostics.EventLogEntry.TimeWritten
- uid: System.Diagnostics.EventLogEntry.UserName
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: UserName
  nameWithType: EventLogEntry.UserName
  fullName: System.Diagnostics.EventLogEntry.UserName
- uid: System.Diagnostics.EventLogEntry.Category*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Category
  nameWithType: EventLogEntry.Category
- uid: System.Diagnostics.EventLogEntry.CategoryNumber*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: CategoryNumber
  nameWithType: EventLogEntry.CategoryNumber
- uid: System.Diagnostics.EventLogEntry.Data*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Data
  nameWithType: EventLogEntry.Data
- uid: System.Diagnostics.EventLogEntry.EntryType*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: EntryType
  nameWithType: EventLogEntry.EntryType
- uid: System.Diagnostics.EventLogEntry.Equals*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Equals
  nameWithType: EventLogEntry.Equals
- uid: System.Diagnostics.EventLogEntry.EventID*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: EventID
  nameWithType: EventLogEntry.EventID
- uid: System.Diagnostics.EventLogEntry.Index*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Index
  nameWithType: EventLogEntry.Index
- uid: System.Diagnostics.EventLogEntry.InstanceId*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: InstanceId
  nameWithType: EventLogEntry.InstanceId
- uid: System.Diagnostics.EventLogEntry.MachineName*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: MachineName
  nameWithType: EventLogEntry.MachineName
- uid: System.Diagnostics.EventLogEntry.Message*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Message
  nameWithType: EventLogEntry.Message
- uid: System.Diagnostics.EventLogEntry.ReplacementStrings*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: ReplacementStrings
  nameWithType: EventLogEntry.ReplacementStrings
- uid: System.Diagnostics.EventLogEntry.Source*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: Source
  nameWithType: EventLogEntry.Source
- uid: System.Diagnostics.EventLogEntry.System#Runtime#Serialization#ISerializable#GetObjectData*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: System.Runtime.Serialization.ISerializable.GetObjectData
  nameWithType: EventLogEntry.System.Runtime.Serialization.ISerializable.GetObjectData
- uid: System.Diagnostics.EventLogEntry.TimeGenerated*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: TimeGenerated
  nameWithType: EventLogEntry.TimeGenerated
- uid: System.Diagnostics.EventLogEntry.TimeWritten*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: TimeWritten
  nameWithType: EventLogEntry.TimeWritten
- uid: System.Diagnostics.EventLogEntry.UserName*
  parent: System.Diagnostics.EventLogEntry
  isExternal: false
  name: UserName
  nameWithType: EventLogEntry.UserName
