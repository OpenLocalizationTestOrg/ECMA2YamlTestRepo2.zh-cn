### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CspParameters
  id: CspParameters
  children:
  - System.Security.Cryptography.CspParameters.#ctor
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  - System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  - System.Security.Cryptography.CspParameters.CryptoKeySecurity
  - System.Security.Cryptography.CspParameters.Flags
  - System.Security.Cryptography.CspParameters.KeyContainerName
  - System.Security.Cryptography.CspParameters.KeyNumber
  - System.Security.Cryptography.CspParameters.KeyPassword
  - System.Security.Cryptography.CspParameters.ParentWindowHandle
  - System.Security.Cryptography.CspParameters.ProviderName
  - System.Security.Cryptography.CspParameters.ProviderType
  langs:
  - csharp
  name: CspParameters
  nameWithType: CspParameters
  fullName: System.Security.Cryptography.CspParameters
  type: Class
  summary: "包含传递给加密计算的加密服务提供程序 (CSP) 的参数。 此类不能被继承。"
  remarks: "CspParameters 类表示可以将它们传递给托管的加密类可在内部使用 Microsoft 加密服务提供商 (Csp) 从非托管的 Microsoft 加密 API (CAPI) 的参数。 名称结尾&quot;CryptoServiceProvider&quot;中的类是相应的 CSP 的托管的代码包装。       CspParameters 类用于执行以下操作:-通过将传递到的提供程序类型中指定特定的 CSP<xref:System.Security.Cryptography.CspParameters.ProviderType>或<xref:System.Security.Cryptography.CspParameters.ProviderName>属性。</xref:System.Security.Cryptography.CspParameters.ProviderName> </xref:System.Security.Cryptography.CspParameters.ProviderType>  你还可以指定 CSP 使用的构造函数重载。      -创建可以在其中存储加密密钥的密钥容器。  密钥容器提供的最安全的方法以持久保存加密密钥并将它们其恶意第三方保密。  有关创建密钥容器的详细信息，请参阅[如何︰ 存储非对称密钥存储在密钥容器](~/add/includes/ajax-current-ext-md.md)。      -指定是要创建非对称签名密钥还是非对称交换密钥使用<xref:System.Security.Cryptography.CspParameters.KeyNumber>属性。</xref:System.Security.Cryptography.CspParameters.KeyNumber>"
  example:
  - "The following code example creates a key container using the CspParameters class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/t-system.security.crypto_47_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/t-system.security.crypto_47_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/t-system.security.crypto_47_1.cs)]  \n  \n The following code example uses the CspParameters class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.  \n  \n [!code-cs[Cryptography.SmartCardCSP#1](~/add/codesnippet/csharp/t-system.security.crypto_47_2.cs)]\n [!code-cpp[Cryptography.SmartCardCSP#1](~/add/codesnippet/cpp/t-system.security.crypto_47_2.cpp)]\n [!code-vb[Cryptography.SmartCardCSP#1](~/add/codesnippet/visualbasic/t-system.security.crypto_47_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CspParameters
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters()
  nameWithType: CspParameters.CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>类。"
  remarks: "这种形式的 CspParameters 初始化<xref:System.Security.Cryptography.CspParameters.ProviderType>字段的值为`24`，它指定 PROV_RSA_AES 提供程序。</xref:System.Security.Cryptography.CspParameters.ProviderType>  此默认的提供程序与兼容<xref:System.Security.Cryptography.Aes>算法。</xref:System.Security.Cryptography.Aes>       有关其他提供程序类型的信息，请参阅<xref:System.Security.Cryptography.CspParameters.ProviderType>字段。</xref:System.Security.Cryptography.CspParameters.ProviderType>"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/m-system.security.crypto_108_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_108_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/m-system.security.crypto_108_1.cs)]"
  syntax:
    content: public CspParameters ();
    parameters: []
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32)
  nameWithType: CspParameters.CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>类替换为指定的提供程序类型代码。"
  remarks: "使用 CspParameters 构造函数通过将传递一个数字值，表示该提供程序指定的提供程序类型。  WinCrypt.h 标头文件中定义的数值表示默认提供程序类型:-若要指定与兼容的提供<xref:System.Security.Cryptography.RSA>算法，传递的值`1`到`dwTypeIn`参数。</xref:System.Security.Cryptography.RSA>      -若要指定与兼容的提供<xref:System.Security.Cryptography.DSA>算法，传递的值`13`到`dwTypeIn`参数。</xref:System.Security.Cryptography.DSA>       有关其他提供程序类型值的信息，请参阅<xref:System.Security.Cryptography.CspParameters.ProviderType>字段。</xref:System.Security.Cryptography.CspParameters.ProviderType>  有关默认提供程序类型和它们的行为的详细信息，请参阅 MSDN 库中的 Microsoft 加密 API (CAPI) 文档。"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/m-system.security.crypto_129_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/m-system.security.crypto_129_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/m-system.security.crypto_129_1.cs)]"
  syntax:
    content: public CspParameters (int dwTypeIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "指定的提供商联系以创建类型提供程序类型代码。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  id: '#ctor(System.Int32,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String)
  nameWithType: CspParameters.CspParameters(Int32,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>使用指定的提供程序类型代码和名称的类。"
  remarks: "使用 CspParameters 构造函数指定提供程序类型和名称。       通过将传递一个数字值，表示所需的提供程序类型中指定的提供程序类型。  WinCrypt.h 标头文件中定义的数值表示默认提供程序类型:-若要指定与兼容的提供<xref:System.Security.Cryptography.RSA>算法，传递的值`1`到`dwTypeIn`参数。</xref:System.Security.Cryptography.RSA>      -若要指定与兼容的提供<xref:System.Security.Cryptography.DSA>算法，传递的值`13`到`dwTypeIn`参数。</xref:System.Security.Cryptography.DSA>       有关其他提供程序类型值的信息，请参阅<xref:System.Security.Cryptography.CspParameters.ProviderType>字段。</xref:System.Security.Cryptography.CspParameters.ProviderType>  有关默认提供程序类型和它们的行为的详细信息，请参阅 MSDN 库中的 Microsoft 加密 API (CAPI) 文档。"
  example:
  - "The following code example uses the <xref:System.Security.Cryptography.CspParameters> class to select a Smart Card Cryptographic Service Provider.  It then signs and verifies data using the smart card.  \n  \n [!code-cs[Cryptography.SmartCardCSP#1](~/add/codesnippet/csharp/3115faba-ad85-4109-97d8-_1.cs)]\n [!code-cpp[Cryptography.SmartCardCSP#1](~/add/codesnippet/cpp/3115faba-ad85-4109-97d8-_1.cpp)]\n [!code-vb[Cryptography.SmartCardCSP#1](~/add/codesnippet/visualbasic/3115faba-ad85-4109-97d8-_1.vb)]"
  syntax:
    content: public CspParameters (int dwTypeIn, string strProviderNameIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "指定的提供商联系以创建类型提供程序类型代码。"
    - id: strProviderNameIn
      type: System.String
      description: "提供程序名称。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  id: '#ctor(System.Int32,System.String,System.String)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String)
  nameWithType: CspParameters.CspParameters(Int32,String,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>与指定的提供程序类型代码和名称，以及指定的容器名称的类。"
  remarks: "使用 CspParameters 构造函数指定的提供程序类型、 提供程序名称，以及容器名称。       容器名称可用于检索该容器内的键。       通过将传递一个数字值，表示所需的提供程序类型中指定的提供程序类型。  WinCrypt.h 标头文件中定义的数值表示默认提供程序类型:-若要指定与兼容的提供<xref:System.Security.Cryptography.RSA>算法，传递的值`1`到`dwTypeIn`参数。</xref:System.Security.Cryptography.RSA>      -若要指定与兼容的提供<xref:System.Security.Cryptography.DSA>算法，传递的值`13`到`dwTypeIn`参数。</xref:System.Security.Cryptography.DSA>       有关其他提供程序类型值的信息，请参阅<xref:System.Security.Cryptography.CspParameters.ProviderType>字段。</xref:System.Security.Cryptography.CspParameters.ProviderType>  有关默认提供程序类型和它们的行为的详细信息，请参阅 MSDN 库中的 Microsoft 加密 API (CAPI) 文档。"
  syntax:
    content: public CspParameters (int dwTypeIn, string strProviderNameIn, string strContainerNameIn);
    parameters:
    - id: dwTypeIn
      type: System.Int32
      description: "指定的提供商联系以创建类型提供程序类型代码。"
    - id: strProviderNameIn
      type: System.String
      description: "提供程序名称。"
    - id: strContainerNameIn
      type: System.String
      description: "容器名称。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  id: '#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>类使用的提供程序类型、 提供程序名称、 容器名称、 访问信息和非托管的智能卡密码对话框的句柄。"
  remarks: "容器名称可用于检索该容器内的键。       通过将传递一个数字值，表示所需的提供程序类型中指定的提供程序类型。  WinCrypt.h 标头文件中定义的数值表示默认提供程序类型:-若要指定与兼容的提供<xref:System.Security.Cryptography.RSA>算法，传递的值`1`到`dwTypeIn`参数。</xref:System.Security.Cryptography.RSA>      -若要指定与兼容的提供<xref:System.Security.Cryptography.DSA>算法，传递的值`13`到`dwTypeIn`参数。</xref:System.Security.Cryptography.DSA>       有关其他提供程序类型值的信息，请参阅<xref:System.Security.Cryptography.CspParameters.ProviderType>字段。</xref:System.Security.Cryptography.CspParameters.ProviderType>  有关默认提供程序类型和它们的行为的详细信息，请参阅 MSDN 库中的 Microsoft 加密 API (CAPI) 文档。"
  syntax:
    content: public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, IntPtr parentWindowHandle);
    parameters:
    - id: providerType
      type: System.Int32
      description: "指定的提供商联系以创建类型提供程序类型代码。"
    - id: providerName
      type: System.String
      description: "提供程序名称。"
    - id: keyContainerName
      type: System.String
      description: "容器名称。"
    - id: cryptoKeySecurity
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "容器规则表示访问权限和审核的对象。"
    - id: parentWindowHandle
      type: System.IntPtr
      description: "智能卡密码对话框父窗口的句柄。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  id: '#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)'
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>类使用的提供程序类型、 提供程序名称、 容器名称、 访问信息和与智能卡密钥相关的密码。"
  remarks: "容器名称可用于检索该容器内的键。       通过将传递一个数字值，表示所需的提供程序类型中指定的提供程序类型。  WinCrypt.h 标头文件中定义的数值表示默认提供程序类型:-若要指定与兼容的提供<xref:System.Security.Cryptography.RSA>算法，传递的值`1`到`dwTypeIn`参数。</xref:System.Security.Cryptography.RSA>      -若要指定与兼容的提供<xref:System.Security.Cryptography.DSA>算法，传递的值`13`到`dwTypeIn`参数。</xref:System.Security.Cryptography.DSA>       有关其他提供程序类型值的信息，请参阅<xref:System.Security.Cryptography.CspParameters.ProviderType>字段。</xref:System.Security.Cryptography.CspParameters.ProviderType>  有关默认提供程序类型和它们的行为的详细信息，请参阅 MSDN 库中的 Microsoft 加密 API (CAPI) 文档。"
  syntax:
    content: public CspParameters (int providerType, string providerName, string keyContainerName, System.Security.AccessControl.CryptoKeySecurity cryptoKeySecurity, System.Security.SecureString keyPassword);
    parameters:
    - id: providerType
      type: System.Int32
      description: "指定的提供商联系以创建类型提供程序类型代码。"
    - id: providerName
      type: System.String
      description: "提供程序名称。"
    - id: keyContainerName
      type: System.String
      description: "容器名称。"
    - id: cryptoKeySecurity
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "容器规则表示访问权限和审核的对象。"
    - id: keyPassword
      type: System.Security.SecureString
      description: "与智能卡密钥相关的密码。"
  overload: System.Security.Cryptography.CspParameters.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  id: CryptoKeySecurity
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
  fullName: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取或设置<xref href=&quot;System.Security.AccessControl.CryptoKeySecurity&quot;></xref>对象表示访问权限和审核规则的容器。"
  remarks: "CryptoKeySecurity 属性用于指定<xref:System.Security.AccessControl.CryptoKeySecurity>对象，用于管理创建的自由访问控制列表 (DACL) 和系统访问控制列表 (SACL) 容器。</xref:System.Security.AccessControl.CryptoKeySecurity>"
  syntax:
    content: public System.Security.AccessControl.CryptoKeySecurity CryptoKeySecurity { get; set; }
    return:
      type: System.Security.AccessControl.CryptoKeySecurity
      description: "A <xref href=&quot;System.Security.AccessControl.CryptoKeySecurity&quot;> </xref>对象表示访问权限和审核规则的容器。"
  overload: System.Security.Cryptography.CspParameters.CryptoKeySecurity*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.Flags
  id: Flags
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: Flags
  nameWithType: CspParameters.Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示的标志<xref href=&quot;System.Security.Cryptography.CspParameters&quot;></xref>修改加密服务提供程序 (CSP) 的行为。"
  syntax:
    content: public System.Security.Cryptography.CspProviderFlags Flags { get; set; }
    return:
      type: System.Security.Cryptography.CspProviderFlags
      description: "一个枚举值或枚举值的按位组合。"
  overload: System.Security.Cryptography.CspParameters.Flags*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "值不是有效的枚举值。"
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  id: KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyContainerName
  nameWithType: CspParameters.KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示的密钥容器名称<xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>。"
  remarks: "KeyContainerName 字段用于指定密钥容器的名称。  容器名称可用于检索该容器中保存的密钥。       有关创建密钥容器的详细信息，请参阅[如何︰ 存储非对称密钥存储在密钥容器](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example creates a key container using the <xref:System.Security.Cryptography.CspParameters> class and saves the key in the container.  \n  \n [!code-cpp[capikey#1](~/add/codesnippet/cpp/f-system.security.crypto_6_1.cpp)]\n [!code-vb[capikey#1](~/add/codesnippet/visualbasic/f-system.security.crypto_6_1.vb)]\n [!code-cs[capikey#1](~/add/codesnippet/csharp/f-system.security.crypto_6_1.cs)]"
  syntax:
    content: public string KeyContainerName;
    return:
      type: System.String
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  id: KeyNumber
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyNumber
  nameWithType: CspParameters.KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "指定是否将非对称密钥创建为签名密钥还是交换密钥。"
  remarks: "KeyNumber 字段初始化<xref:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber%2A>属性初始化时<xref:System.Security.Cryptography.CspKeyContainerInfo>对象<xref:System.Security.Cryptography.CspParameters>对象。</xref:System.Security.Cryptography.CspParameters> </xref:System.Security.Cryptography.CspKeyContainerInfo> </xref:System.Security.Cryptography.CspKeyContainerInfo.KeyNumber%2A>       交换密钥是用于加密会话密钥，以便它们可以安全地存储以及与其他用户交换非对称密钥对。  你可以使用<xref:System.Security.Cryptography.KeyNumber>值 (`1`) 来指定交换密钥。</xref:System.Security.Cryptography.KeyNumber>  此值对应于`AT_KEYEXCHANGE`使用非托管在 Microsoft 加密 API (CAPI) 的值。       签名密钥是用于验证数字签名的消息或文件的非对称密钥对。  你可以使用<xref:System.Security.Cryptography.KeyNumber>值 (`2`) 来指定签名密钥。</xref:System.Security.Cryptography.KeyNumber>  此值对应于`AT_SIGNATURE`CAPI 中使用的值。       默认情况下，KeyNumber 字段指定交换密钥。"
  example:
  - "The following code example demonstrates how to use the <xref:System.Security.Cryptography.KeyNumber> enumeration to specify a key type for an <xref:System.Security.Cryptography.RSACryptoServiceProvider> object.  \n  \n [!code-cs[Cryptography.KeyNumber#1](~/add/codesnippet/csharp/f-system.security.crypto_8_1.cs)]\n [!code-cpp[Cryptography.KeyNumber#1](~/add/codesnippet/cpp/f-system.security.crypto_8_1.cpp)]\n [!code-vb[Cryptography.KeyNumber#1](~/add/codesnippet/visualbasic/f-system.security.crypto_8_1.vb)]"
  syntax:
    content: public int KeyNumber;
    return:
      type: System.Int32
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.KeyPassword
  id: KeyPassword
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
  fullName: System.Security.Cryptography.CspParameters.KeyPassword
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取或设置与智能卡密钥相关的密码。"
  remarks: "KeyPassword 属性用于提供智能卡密钥的密码。  指定使用此属性的密码时，密码对话框中将不向用户显示。"
  syntax:
    content: public System.Security.SecureString KeyPassword { get; set; }
    return:
      type: System.Security.SecureString
      description: "与智能卡密钥相关的密码。"
  overload: System.Security.Cryptography.CspParameters.KeyPassword*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  id: ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取或设置一个句柄的非托管的父窗口的智能卡的密码对话框。"
  remarks: "ParentWindowHandle 属性用于指定智能卡的密码对话框的非托管的父窗口的句柄。  指定使用此属性的句柄时，将向用户显示一个智能卡的密码对话框。       通过显式指定密码，通过提供智能卡的密码对话框，可以避免<xref:System.Security.Cryptography.CspParameters.KeyPassword%2A>属性。</xref:System.Security.Cryptography.CspParameters.KeyPassword%2A>"
  syntax:
    content: public IntPtr ParentWindowHandle { get; set; }
    return:
      type: System.IntPtr
      description: "智能卡的密码对话框的父窗口句柄。"
  overload: System.Security.Cryptography.CspParameters.ParentWindowHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ProviderName
  id: ProviderName
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ProviderName
  nameWithType: CspParameters.ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示的提供程序名称<xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>。"
  remarks: "提供程序名称，请参阅 MSDN 库的详细信息中的 Microsoft 加密 API (CAPI) 文档。"
  syntax:
    content: public string ProviderName;
    return:
      type: System.String
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CspParameters.ProviderType
  id: ProviderType
  parent: System.Security.Cryptography.CspParameters
  langs:
  - csharp
  name: ProviderType
  nameWithType: CspParameters.ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "表示的提供程序类型代码<xref href=&quot;System.Security.Cryptography.CspParameters&quot;> </xref>。"
  remarks: "提供程序类型字段用于通过将传递一个数字值，表示该提供程序指定的提供程序类型。  WinCrypt.h 标头文件中定义的数值表示默认提供程序类型:-若要指定与兼容的提供<xref:System.Security.Cryptography.RSA>类中，将值传递`1`。</xref:System.Security.Cryptography.RSA>      -若要指定与兼容的提供<xref:System.Security.Cryptography.DSA>类中，将值传递`13`。</xref:System.Security.Cryptography.DSA>       下表列出提供程序类型和其对应的数字值在 WinCrypt.h 标头文件中定义。      |提供程序类型 |数字值 |  |-------------------|-------------------|  |`PROV_RSA_FULL`|1|  |`PROV_RSA_SIG`|2|  |`PROV_DSS`|3|  |`PROV_FORTEZZA`|4|  |`PROV_MS_EXCHANGE`|5|  |`PROV_SSL`|6|  |`PROV_RSA_SCHANNEL`|12|  |`PROV_DSS_DH`|13|  |`PROV_EC_ECDSA_SIG`|14|  |`PROV_EC_ECNRA_SIG`|15|  |`PROV_EC_ECDSA_FULL`|16|  |`PROV_EC_ECNRA_FULL`|17|  |`PROV_DH_SCHANNEL`|18|  |`PROV_SPYRUS_LYNKS`|20|  |`PROV_RNG`|21|  |`PROV_INTEL_SEC`|22|  |`PROV_REPLACE_OWF`|23|  |`PROV_RSA_AES`|24|      有关默认提供程序类型和它们的行为的详细信息，请参阅 MSDN 库中的 Microsoft 加密 API (CAPI) 文档。"
  syntax:
    content: public int ProviderType;
    return:
      type: System.Int32
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.CspParameters.#ctor
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters()
  nameWithType: CspParameters.CspParameters()
  fullName: System.Security.Cryptography.CspParameters.CspParameters()
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32)
  nameWithType: CspParameters.CspParameters(Int32)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String)
  nameWithType: CspParameters.CspParameters(Int32,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String)
  nameWithType: CspParameters.CspParameters(Int32,String,String)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String)
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.IntPtr)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,IntPtr)
- uid: System.Security.AccessControl.CryptoKeySecurity
  parent: System.Security.AccessControl
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CryptoKeySecurity
  fullName: System.Security.AccessControl.CryptoKeySecurity
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CspParameters.#ctor(System.Int32,System.String,System.String,System.Security.AccessControl.CryptoKeySecurity,System.Security.SecureString)
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  nameWithType: CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
  fullName: System.Security.Cryptography.CspParameters.CspParameters(Int32,String,String,CryptoKeySecurity,SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
  fullName: System.Security.Cryptography.CspParameters.CryptoKeySecurity
- uid: System.Security.Cryptography.CspParameters.Flags
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: Flags
  nameWithType: CspParameters.Flags
  fullName: System.Security.Cryptography.CspParameters.Flags
- uid: System.Security.Cryptography.CspProviderFlags
  parent: System.Security.Cryptography
  isExternal: false
  name: CspProviderFlags
  nameWithType: CspProviderFlags
  fullName: System.Security.Cryptography.CspProviderFlags
- uid: System.Security.Cryptography.CspParameters.KeyContainerName
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyContainerName
  nameWithType: CspParameters.KeyContainerName
  fullName: System.Security.Cryptography.CspParameters.KeyContainerName
- uid: System.Security.Cryptography.CspParameters.KeyNumber
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyNumber
  nameWithType: CspParameters.KeyNumber
  fullName: System.Security.Cryptography.CspParameters.KeyNumber
- uid: System.Security.Cryptography.CspParameters.KeyPassword
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
  fullName: System.Security.Cryptography.CspParameters.KeyPassword
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
  fullName: System.Security.Cryptography.CspParameters.ParentWindowHandle
- uid: System.Security.Cryptography.CspParameters.ProviderName
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ProviderName
  nameWithType: CspParameters.ProviderName
  fullName: System.Security.Cryptography.CspParameters.ProviderName
- uid: System.Security.Cryptography.CspParameters.ProviderType
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ProviderType
  nameWithType: CspParameters.ProviderType
  fullName: System.Security.Cryptography.CspParameters.ProviderType
- uid: System.Security.Cryptography.CspParameters.#ctor*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CspParameters
  nameWithType: CspParameters.CspParameters
- uid: System.Security.Cryptography.CspParameters.CryptoKeySecurity*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: CryptoKeySecurity
  nameWithType: CspParameters.CryptoKeySecurity
- uid: System.Security.Cryptography.CspParameters.Flags*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: Flags
  nameWithType: CspParameters.Flags
- uid: System.Security.Cryptography.CspParameters.KeyPassword*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: KeyPassword
  nameWithType: CspParameters.KeyPassword
- uid: System.Security.Cryptography.CspParameters.ParentWindowHandle*
  parent: System.Security.Cryptography.CspParameters
  isExternal: false
  name: ParentWindowHandle
  nameWithType: CspParameters.ParentWindowHandle
