### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbConnectionStringBuilder
  id: OleDbConnectionStringBuilder
  children:
  - System.Data.OleDb.OleDbConnectionStringBuilder.#ctor
  - System.Data.OleDb.OleDbConnectionStringBuilder.#ctor(System.String)
  - System.Data.OleDb.OleDbConnectionStringBuilder.Clear
  - System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey(System.String)
  - System.Data.OleDb.OleDbConnectionStringBuilder.DataSource
  - System.Data.OleDb.OleDbConnectionStringBuilder.FileName
  - System.Data.OleDb.OleDbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)
  - System.Data.OleDb.OleDbConnectionStringBuilder.Item(System.String)
  - System.Data.OleDb.OleDbConnectionStringBuilder.Keys
  - System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices
  - System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo
  - System.Data.OleDb.OleDbConnectionStringBuilder.Provider
  - System.Data.OleDb.OleDbConnectionStringBuilder.Remove(System.String)
  - System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  langs:
  - csharp
  name: OleDbConnectionStringBuilder
  nameWithType: OleDbConnectionStringBuilder
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder
  type: Class
  summary: "提供一种简单的方法来创建和管理使用的连接字符串的内容<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;></xref>类。"
  remarks: "The connection string builder lets developers programmatically create syntactically correct connection strings, and parse and rebuild existing connection strings, using properties and methods of the class. The connection string builder provides strongly typed properties corresponding to the known key/value pairs allowed by OLE DB connections, and developers can add arbitrary key/value pairs for any other connection string values. The OleDbConnectionStringBuilder class implements the <xref:System.ComponentModel.ICustomTypeDescriptor> interface. This means that the class works with Visual Studio .NET designers at design time. When developers use the designer to build strongly typed DataSets and strongly typed connections within Visual Studio .NET, the strongly typed connection string builder class will display the properties associated with its type and will also have converters that can map common values for known keys.  \n  \n Developers needing to create connection strings as part of applications can use the OleDbConnectionStringBuilder class to build and modify connection strings. The class also makes it easy to manage connection strings stored in an application configuration file. The OleDbConnectionStringBuilder performs checks only for the limited set of known key/value pairs. Therefore, this class can be used to create invalid connection strings. The following table lists the known keys and their corresponding properties within the OleDbConnectionStringBuilder class, and their default values. Besides these specific values, developers can add any key/value pairs to the collection that is contained within the OleDbConnectionStringBuilder instance:  \n  \n|Key|Property|Default value|  \n|---------|--------------|-------------------|  \n|File Name|<xref:System.Data.OleDb.OleDbConnectionStringBuilder.FileName%2A>|\"\"|  \n|Provider|<xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A>|\"\"|  \n|Data Source|<xref:System.Data.OleDb.OleDbConnectionStringBuilder.DataSource%2A>|\"\"|  \n|Persist Security Info|<xref:System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo%2A>|False|  \n|OLE DB Services|<xref:System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices%2A>|-13|  \n  \n The <xref:System.Data.OleDb.OleDbConnectionStringBuilder.Item%2A> property handles attempts to insert malicious entries. For example, the following code, using the default <xref:System.Data.OleDb.OleDbConnectionStringBuilder.Item%2A> property (the indexer, in C#) correctly escapes the nested key/value pair:  \n  \n```vb#  \nDim builder As _  \n    New System.Data.OleDb.OleDbConnectionStringBuilder  \nbuilder(\"Provider\") = \"Microsoft.Jet.OLEDB.4.0\"  \nbuilder(\"Data Source\") = \"C:\\Sample.mdb\"  \nbuilder(\"User Id\") = \"Admin;NewValue=Bad\"  \n```  \n  \n```c#  \nSystem.Data.OleDb.OleDbConnectionStringBuilder builder =   \n    new System.Data.OleDb.OleDbConnectionStringBuilder();  \nbuilder[\"Provider\"] = \"Microsoft.Jet.OLEDB.4.0\";  \nbuilder[\"Data Source\"] = \"C:\\\\Sample.mdb\";  \nbuilder[\"User Id\"] = \"Admin;NewValue=Bad\";  \n```  \n  \n The result is the following connection string that handles the invalid value in a safe manner:  \n  \n```  \nProvider=Microsoft.Jet.OLEDB.4.0;Data Source=C:\\Sample.mdb;User ID=\"Admin;NewValue=Bad\"  \n```"
  example:
  - "The following console application builds connection strings for several OLE DB databases. First, the example creates a connection string for a Microsoft Access database, and then creates a connection string for an IBM DB2 database. The example also parses an existing connection string, and demonstrates various ways of manipulating the connection string's contents.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how OleDbConnectionStringBuilder works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-vb[DataWorks OleDbConnectionStringBuilder#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_1_1.vb)]\n [!code-cs[DataWorks OleDbConnectionStringBuilder#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_1_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("Provider")]

      [System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)]

      [System.ComponentModel.TypeConverter(typeof(System.Data.OleDb.OleDbConnectionStringBuilder/OleDbConnectionStringBuilderConverter))]

      public sealed class OleDbConnectionStringBuilder : System.Data.Common.DbConnectionStringBuilder
  inheritance:
  - System.Object
  - System.Data.Common.DbConnectionStringBuilder
  implements: []
  inheritedMembers:
  - System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)
  - System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)
  - System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)
  - System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString
  - System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors
  - System.Data.Common.DbConnectionStringBuilder.ConnectionString
  - System.Data.Common.DbConnectionStringBuilder.Count
  - System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
  - System.Data.Common.DbConnectionStringBuilder.IsFixedSize
  - System.Data.Common.DbConnectionStringBuilder.IsReadOnly
  - System.Data.Common.DbConnectionStringBuilder.ShouldSerialize(System.String)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)
  - System.Data.Common.DbConnectionStringBuilder.ToString
  - System.Data.Common.DbConnectionStringBuilder.Values
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.#ctor
  id: '#ctor'
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: OleDbConnectionStringBuilder()
  nameWithType: OleDbConnectionStringBuilder.OleDbConnectionStringBuilder()
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbConnectionStringBuilder()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新实例<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;></xref>类。"
  syntax:
    content: public OleDbConnectionStringBuilder ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: OleDbConnectionStringBuilder(String)
  nameWithType: OleDbConnectionStringBuilder.OleDbConnectionStringBuilder(String)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbConnectionStringBuilder(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新实例<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;></xref>类。 提供的连接字符串为实例的内部连接信息提供数据。"
  remarks: "设置<xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A>属性，直接 (通过设置<xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A>属性) 或通过将连接字符串作为参数传递给构造函数，可能会影响中包含的键/值对的一套<xref:System.Data.OleDb.OleDbConnectionStringBuilder>实例。</xref:System.Data.OleDb.OleDbConnectionStringBuilder> </xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A> </xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A> 设置<xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A>到&quot;sqloledb，&quot;的属性，例如，添加所有的标准 SQL 连接字符串属性。</xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A> 请参阅有关此行为的演示本主题中的示例。       对于某些提供程序，将连接字符串内的分配<xref:System.Data.OleDb.OleDbConnectionStringBuilder>构造函数将导致提供的键/值对的顺序重新排列。</xref:System.Data.OleDb.OleDbConnectionStringBuilder>"
  example:
  - "The following example creates multiple <xref:System.Data.OleDb.OleDbConnectionStringBuilder> instances, passing a different connection string to the constructor in each case. Note how setting the provider associated with the connection changes the set of predefined key/value pairs within the object's collection.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how <xref:System.Data.OleDb.OleDbConnectionStringBuilder> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-vb[DataWorks OleDbConnectionStringBuilder.Ctor#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_18_1.vb)]\n [!code-cs[DataWorks OleDbConnectionStringBuilder.Ctor#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_18_1.cs)]"
  syntax:
    content: public OleDbConnectionStringBuilder (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "对象的内部连接信息的基础。 分析为键/值对。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "连接字符串格式不正确 （可能缺少必需的&quot;=&quot;中的键/值对）。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Clear
  id: Clear
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: Clear()
  nameWithType: OleDbConnectionStringBuilder.Clear()
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "清除的内容<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;></xref>实例。"
  remarks: "Clear 方法中移除所有键/值对，从<xref:System.Data.OleDb.OleDbConnectionStringBuilder>，并将所有对应的属性重置为其默认值。</xref:System.Data.OleDb.OleDbConnectionStringBuilder> 这包括设置<xref:System.Data.Common.DbConnectionStringBuilder.Count%2A>属性为 0，并设置<xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A>属性为空字符串。</xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A> </xref:System.Data.Common.DbConnectionStringBuilder.Count%2A>"
  example:
  - "The following example demonstrates the effect of calling the Clear method. This example populates the <xref:System.Data.OleDb.OleDbConnectionStringBuilder> with some key/value pairs, and then calls the Clear method and shows the results.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how <xref:System.Data.OleDb.OleDbConnectionStringBuilder> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-cs[DataWorks OleDbConnectionStringBuilder.Clear#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_29_1.cs)]\n [!code-vb[DataWorks OleDbConnectionStringBuilder.Clear#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_29_1.vb)]"
  syntax:
    content: public override void Clear ();
    parameters: []
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: ContainsKey(String)
  nameWithType: OleDbConnectionStringBuilder.ContainsKey(String)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "确定是否<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;></xref>包含特定键。"
  remarks: "虽然设置<xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A>属性提供程序可能会隐式填充中相应的键/值对，ContainsKey 方法不返回`true`为隐式提供的键。</xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A> 此方法返回`true`仅为显式提供的键。"
  example:
  - The following example creates an <xref:System.Data.OleDb.OleDbConnectionStringBuilder> instance, sets some of its properties, and then tries to determine whether various keys exist within the object by calling the ContainsKey method.
  syntax:
    content: public override bool ContainsKey (string keyword);
    parameters:
    - id: keyword
      type: System.String
      description: "要查找中的键<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "true <xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;> </xref>包含的元素，具有指定键; 否则为 false。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyword</code>为 null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.DataSource
  id: DataSource
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: DataSource
  nameWithType: OleDbConnectionStringBuilder.DataSource
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置要连接到的数据源的名称。"
  remarks: "如果你尝试设置属性时中, 传递的值为 null，将重置的 DataSource 属性。 如果未设置值，并且在开发人员尝试检索该属性，则返回值是`String.Empty`。 此属性与连接字符串内的&quot;数据源&quot;键相对应。"
  example:
  - "The following example console application creates a new <xref:System.Data.OleDb.OleDbConnectionStringBuilder> instance, and then sets the DataSource and <xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A> properties. Finally, the example creates a new <xref:System.Data.OleDb.OleDbConnection> instance, and uses that object to connect to the indicated data store.  \n  \n [!code-vb[DataWorks OleDbConnectionStringBuilder.DataSource#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_25_1.vb)]\n [!code-cs[DataWorks OleDbConnectionStringBuilder.DataSource#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_25_1.cs)]"
  syntax:
    content: public string DataSource { get; set; }
    return:
      type: System.String
      description: "数据源属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.FileName
  id: FileName
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: FileName
  nameWithType: OleDbConnectionStringBuilder.FileName
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.FileName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置用于连接到数据源的通用数据链接 (UDL) 文件的名称。"
  remarks: "如果你尝试设置属性时中, 传递的值为 null，FileName 属性将重置。 如果未设置值，并且在开发人员尝试检索该属性，则返回值是`String.Empty`。 此属性与连接字符串内的&quot;FileName&quot;键相对应。       设置此属性不会导致<xref:System.Data.OleDb.OleDbConnectionStringBuilder>实例以读取的引用的文件的内容，即使该文件存在并且包含有效的连接信息。</xref:System.Data.OleDb.OleDbConnectionStringBuilder> 将此属性设置不起作用以外以指示要连接到数据源时读取的文件。"
  syntax:
    content: public string FileName { get; set; }
    return:
      type: System.String
      description: "FileName 属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.FileName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)
  id: GetProperties(System.Collections.Hashtable)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: GetProperties(Hashtable)
  nameWithType: OleDbConnectionStringBuilder.GetProperties(Hashtable)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.GetProperties(Hashtable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void GetProperties (System.Collections.Hashtable propertyDescriptors);
    parameters:
    - id: propertyDescriptors
      type: System.Collections.Hashtable
      description: "要添加。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Item(System.String)
  id: Item(System.String)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: Item(String)
  nameWithType: OleDbConnectionStringBuilder.Item(String)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置与指定键关联的值。 在 C# 中，此属性是索引器。"
  remarks: "因为设置<xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A>属性可能将对应的项添加到 （具体取决于特定的提供程序的行为） 的键/值对的集合，你可能能够检索您以前未显式设置键的值。</xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A> 例如，只要你已设置<xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A>属性为&quot;sqloledb，&quot;你可以检索&quot;Workstation ID&quot;值，即使你尚未设置它自己。</xref:System.Data.OleDb.OleDbConnectionStringBuilder.Provider%2A> 请参阅有关演示此主题中的示例。"
  example:
  - "The following example uses the Item property (the indexer, in C#) to retrieve and set values within the collection of key/value pairs. Note that setting the provider, in this case, also provides default values for all the key/value pairs associated with the selected provider.  \n  \n [!code-cs[DataWorks OleDbConnectionStringBuilder.Item#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_5_1.cs)]\n [!code-vb[DataWorks OleDbConnectionStringBuilder.Item#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_5_1.vb)]"
  syntax:
    content: public override object this[string keyword] { get; set; }
    parameters:
    - id: keyword
      type: System.String
      description: "要获取或设置项的键。"
    return:
      type: System.Object
      description: "与指定键关联的值。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.Item*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "连接字符串格式不正确 （可能缺少必需的&quot;=&quot;中的键/值对）。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyword</code>为空引用 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Keys
  id: Keys
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: Keys
  nameWithType: OleDbConnectionStringBuilder.Keys
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Keys
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取<xref:System.Collections.ICollection>包含中的键<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;> </xref>。</xref:System.Collections.ICollection>"
  remarks: "中的值的顺序<xref:System.Collections.ICollection>未指定，但它是中的关联值顺序相同<xref:System.Collections.ICollection>返回<xref:System.Data.Common.DbConnectionStringBuilder.Values%2A>属性。</xref:System.Data.Common.DbConnectionStringBuilder.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>"
  example:
  - "The following console application example creates a new <xref:System.Data.OleDb.OleDbConnectionStringBuilder>. The code loops through the <xref:System.Collections.ICollection> returned by the Keys property displaying the key/value pairs.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how <xref:System.Data.OleDb.OleDbConnectionStringBuilder> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-cs[DataWorks OleDbConnectionStringBuilder.Keys#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_10_1.cs)]\n [!code-vb[DataWorks OleDbConnectionStringBuilder.Keys#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_10_1.vb)]"
  syntax:
    content: public override System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>包含中的键<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices
  id: OleDbServices
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: OleDbServices
  nameWithType: OleDbConnectionStringBuilder.OleDbServices
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置要为连接字符串内的 OLE DB 服务密钥传递的值。"
  remarks: "连接字符串内的 OLE DB 服务键定义，开发人员可以启用或禁用 OLE DB 服务的值的组合。 属性包含 OLE DB 文档中描述的值的按位组合。 有关为此属性的相应值的详细信息，请参阅 OLE DB 程序员参考，具体而言，&quot;重写提供程序服务默认值。&quot; 此属性的默认值为-13。 这对应于资源池、 自动事务登记、 会话级别聚合和任何客户端游标引擎的请求。"
  example:
  - "The following example works with the OleDbServices property in two ways. First, it assigns a value directly to the property, demonstrating the effect this action has on the resulting connection string. Then, the example clears the <xref:System.Data.OleDb.OleDbConnectionStringBuilder> and assigns a complete connection string that contains a value for the OLE DB Services key. This step demonstrates that setting the value from the connection string modifies the OleDbServices property, as well.  \n  \n [!code-cs[DataWorks OleDbConnectionStringBuilder.OleDbServices#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_8_1.cs)]\n [!code-vb[DataWorks OleDbConnectionStringBuilder.OleDbServices#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_8_1.vb)]"
  syntax:
    content: public int OleDbServices { get; set; }
    return:
      type: System.Int32
      description: "返回与连接字符串内的 OLE DB 服务键相对应的值。 默认情况下，值是-13。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo
  id: PersistSecurityInfo
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: PersistSecurityInfo
  nameWithType: OleDbConnectionStringBuilder.PersistSecurityInfo
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置一个布尔值，该值指示是否连接是打开的或者一直处于打开状态是否作为连接的一部分返回安全敏感信息，如密码。"
  remarks: "此属性与连接字符串内的&quot;Persist Security Info&quot;键相对应。"
  example:
  - "The following example works with the PersistSecurityInfo property in two ways. First, it assigns a value directly to the property, demonstrating the effect this action has on the resulting connection string. Then, the example clears the <xref:System.Data.OleDb.OleDbConnectionStringBuilder> and assigns a complete connection string that contains a value for the \"Persist Security Info\" key. This step demonstrates that setting the value from the connection string modifies the PersistSecurityInfo property, as well.  \n  \n [!code-cs[DataWorks OleDbConnectionStringBuilder.PersistSecurityInfo#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_23_1.cs)]\n [!code-vb[DataWorks OleDbConnectionStringBuilder.PersistSecurityInfo#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_23_1.vb)]"
  syntax:
    content: public bool PersistSecurityInfo { get; set; }
    return:
      type: System.Boolean
      description: "PersistSecurityInfo 属性的值或<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Provider
  id: Provider
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: Provider
  nameWithType: OleDbConnectionStringBuilder.Provider
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Provider
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置一个字符串，包含与内部连接字符串关联的数据提供程序的名称。"
  remarks: "如果你尝试设置属性时中, 传递的值为 null，将重置的提供程序属性。 如果未设置值，并且在开发人员尝试检索该属性，则返回值是`String.Empty`。 此属性与连接字符串内的&quot;提供程序&quot;键相对应。       值设置`Provider`属性，直接 (通过设置<xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A>属性) 或通过将连接字符串作为参数传递给构造函数，可能会影响中包含的键/值对的一套<xref:System.Data.OleDb.OleDbConnectionStringBuilder>实例。</xref:System.Data.OleDb.OleDbConnectionStringBuilder> </xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A> 例如，提供程序将属性设置为&quot;sqloledb，&quot;添加所有的标准 SQL 连接字符串属性。 请参阅有关此行为的演示本主题中的示例。       对于某些提供程序，将连接字符串内的分配<xref:System.Data.OleDb.OleDbConnectionStringBuilder>构造函数将导致提供的键/值对的顺序重新排列。</xref:System.Data.OleDb.OleDbConnectionStringBuilder>"
  example:
  - "The following example creates multiple <xref:System.Data.OleDb.OleDbConnectionStringBuilder> instances, passing a different connection string to the constructor in each case. Note how setting the provider associated with the connection changes the set of predefined key/value pairs within the object's collection.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how <xref:System.Data.OleDb.OleDbConnectionStringBuilder> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-vb[DataWorks OleDbConnectionStringBuilder.Provider#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_24_1.vb)]\n [!code-cs[DataWorks OleDbConnectionStringBuilder.Provider#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_24_1.cs)]"
  syntax:
    content: public string Provider { get; set; }
    return:
      type: System.String
      description: "提供程序属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.Provider*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Remove(System.String)
  id: Remove(System.String)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: Remove(String)
  nameWithType: OleDbConnectionStringBuilder.Remove(String)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Remove(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "具有指定键中移除的项<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;></xref>实例。"
  remarks: "删除方法返回一个值，指示其是否成功，因为它不需要查找的键是否存在之前尝试删除的键/值对从<xref:System.Data.OleDb.OleDbConnectionStringBuilder>实例。</xref:System.Data.OleDb.OleDbConnectionStringBuilder>"
  example:
  - "The following example creates a <xref:System.Data.OleDb.OleDbConnectionStringBuilder> and demonstrates the behavior of the Remove method.  \n  \n [!code-cs[DataWorks OleDbConnectionStringBuilder.Remove#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_22_1.cs)]\n [!code-vb[DataWorks OleDbConnectionStringBuilder.Remove#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_22_1.vb)]"
  syntax:
    content: public override bool Remove (string keyword);
    parameters:
    - id: keyword
      type: System.String
      description: "在此连接字符串移除的键/值对的键<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该密钥的连接字符串中存在并已删除， <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果该键不存在。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyword</code>为 null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  id: TryGetValue(System.String,System.Object@)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  langs:
  - csharp
  name: TryGetValue(String,Object)
  nameWithType: OleDbConnectionStringBuilder.TryGetValue(String,Object)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue(String,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "检索从提供的键相对应的值<xref href=&quot;System.Data.OleDb.OleDbConnectionStringBuilder&quot;></xref>实例。"
  remarks: "TryGetValue 方法允许开发人员安全地检索的值从<xref:System.Data.OleDb.OleDbConnectionStringBuilder>而无需验证提供的键名是否为有效的键名。</xref:System.Data.OleDb.OleDbConnectionStringBuilder> TryGetValue 不会引发异常时调用它，传递中不存在的键，因为你不必在检索其值之前查找键。 调用具有不存在的键 TryGetValue 会将值为 null (`Nothing`在 Visual Basic 中) 中`value`参数。"
  example:
  - "The following example demonstrates the behavior of the TryGetValue method.  \n  \n [!code-vb[DataWorks OleDbConnectionStringBuilder.TryGetValue#1](~/add/codesnippet/visualbasic/c608ef8d-2ee4-49df-a105-_1.vb)]\n [!code-cs[DataWorks OleDbConnectionStringBuilder.TryGetValue#1](~/add/codesnippet/csharp/c608ef8d-2ee4-49df-a105-_1.cs)]"
  syntax:
    content: public override bool TryGetValue (string keyword, out object value);
    parameters:
    - id: keyword
      type: System.String
      description: "要检索的项的键。"
    - id: value
      type: System.Object
      description: "与对应的值`keyword.`"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> keyword </code>在连接字符串中找到; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyword</code>包含一个 null 值 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)。"
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnectionStringBuilder
  isExternal: false
  name: System.Data.Common.DbConnectionStringBuilder
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.#ctor
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: OleDbConnectionStringBuilder()
  nameWithType: OleDbConnectionStringBuilder.OleDbConnectionStringBuilder()
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbConnectionStringBuilder()
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.#ctor(System.String)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: OleDbConnectionStringBuilder(String)
  nameWithType: OleDbConnectionStringBuilder.OleDbConnectionStringBuilder(String)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbConnectionStringBuilder(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Clear
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Clear()
  nameWithType: OleDbConnectionStringBuilder.Clear()
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Clear()
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey(System.String)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: ContainsKey(String)
  nameWithType: OleDbConnectionStringBuilder.ContainsKey(String)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.DataSource
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: DataSource
  nameWithType: OleDbConnectionStringBuilder.DataSource
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.DataSource
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.FileName
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: FileName
  nameWithType: OleDbConnectionStringBuilder.FileName
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.FileName
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.GetProperties(System.Collections.Hashtable)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: GetProperties(Hashtable)
  nameWithType: OleDbConnectionStringBuilder.GetProperties(Hashtable)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.GetProperties(Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Item(System.String)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Item(String)
  nameWithType: OleDbConnectionStringBuilder.Item(String)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Item(String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Keys
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Keys
  nameWithType: OleDbConnectionStringBuilder.Keys
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: OleDbServices
  nameWithType: OleDbConnectionStringBuilder.OleDbServices
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: PersistSecurityInfo
  nameWithType: OleDbConnectionStringBuilder.PersistSecurityInfo
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Provider
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Provider
  nameWithType: OleDbConnectionStringBuilder.Provider
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Provider
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Remove(System.String)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Remove(String)
  nameWithType: OleDbConnectionStringBuilder.Remove(String)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.Remove(String)
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: TryGetValue(String,Object)
  nameWithType: OleDbConnectionStringBuilder.TryGetValue(String,Object)
  fullName: System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue(String,Object)
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.#ctor*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: OleDbConnectionStringBuilder
  nameWithType: OleDbConnectionStringBuilder.OleDbConnectionStringBuilder
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Clear*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Clear
  nameWithType: OleDbConnectionStringBuilder.Clear
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.ContainsKey*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: ContainsKey
  nameWithType: OleDbConnectionStringBuilder.ContainsKey
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.DataSource*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: DataSource
  nameWithType: OleDbConnectionStringBuilder.DataSource
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.FileName*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: FileName
  nameWithType: OleDbConnectionStringBuilder.FileName
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.GetProperties*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: GetProperties
  nameWithType: OleDbConnectionStringBuilder.GetProperties
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Item*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Item
  nameWithType: OleDbConnectionStringBuilder.Item
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Keys*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Keys
  nameWithType: OleDbConnectionStringBuilder.Keys
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.OleDbServices*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: OleDbServices
  nameWithType: OleDbConnectionStringBuilder.OleDbServices
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.PersistSecurityInfo*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: PersistSecurityInfo
  nameWithType: OleDbConnectionStringBuilder.PersistSecurityInfo
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Provider*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Provider
  nameWithType: OleDbConnectionStringBuilder.Provider
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.Remove*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: Remove
  nameWithType: OleDbConnectionStringBuilder.Remove
- uid: System.Data.OleDb.OleDbConnectionStringBuilder.TryGetValue*
  parent: System.Data.OleDb.OleDbConnectionStringBuilder
  isExternal: false
  name: TryGetValue
  nameWithType: OleDbConnectionStringBuilder.TryGetValue
