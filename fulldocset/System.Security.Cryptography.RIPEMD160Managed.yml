### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.RIPEMD160Managed
  id: RIPEMD160Managed
  children:
  - System.Security.Cryptography.RIPEMD160Managed.#ctor
  - System.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.RIPEMD160Managed.HashFinal
  - System.Security.Cryptography.RIPEMD160Managed.Initialize
  langs:
  - csharp
  name: RIPEMD160Managed
  nameWithType: RIPEMD160Managed
  fullName: System.Security.Cryptography.RIPEMD160Managed
  type: Class
  summary: "计算<xref href=&quot;System.Security.Cryptography.RIPEMD160&quot;></xref>使用托管的库的输入数据的哈希。"
  remarks: "Ripemd-160 是 160 位加密哈希函数。 它旨在以用作 128 位哈希函数 MD4、 MD5 和 RIPEMD 安全的替代。 RIPEMD 被开发欧洲项目 RIPE （争用完整性基元评估版，1988年 1992年） 的框架。      1> [!NOTE]&1;> RIPEMD160Managed 已被取代的安全哈希算法 sha-256 和 SHA&512; 和它们的派生的类。 <xref:System.Security.Cryptography.SHA256Managed>和<xref:System.Security.Cryptography.SHA512Managed>提供更好的安全和性能比 RIPEMD160Managed。</xref:System.Security.Cryptography.SHA512Managed></xref:System.Security.Cryptography.SHA256Managed> RIPEMD160Managed 仅用于与旧的应用程序和数据的兼容性。"
  example:
  - "The following code example shows how to encode a file using the RIPEMD160Managed class and then how to decode the file.  \n  \n [!code-cpp[RIPEMD160#1](~/add/codesnippet/cpp/t-system.security.crypto_87_1.cpp)]\n [!code-vb[RIPEMD160#1](~/add/codesnippet/visualbasic/t-system.security.crypto_87_1.vb)]\n [!code-cs[RIPEMD160#1](~/add/codesnippet/csharp/t-system.security.crypto_87_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class RIPEMD160Managed : System.Security.Cryptography.RIPEMD160
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.RIPEMD160
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.RIPEMD160.Create
  - System.Security.Cryptography.RIPEMD160.Create(System.String)
  platform:
  - net462
- uid: System.Security.Cryptography.RIPEMD160Managed.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.RIPEMD160Managed
  langs:
  - csharp
  name: RIPEMD160Managed()
  nameWithType: RIPEMD160Managed.RIPEMD160Managed()
  fullName: System.Security.Cryptography.RIPEMD160Managed.RIPEMD160Managed()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.RIPEMD160&quot;></xref>类。"
  remarks: "哈希用作表示大量的数据的固定大小的唯一值。 当且仅当相应的数据还将匹配，则应与匹配的两个数据集的哈希值。 中大型不可预测的哈希变化的数据结果的小改动。       哈希大小<xref:System.Security.Cryptography.RIPEMD160>算法为 160 位。</xref:System.Security.Cryptography.RIPEMD160>"
  example:
  - "The following code example computes the <xref:System.Security.Cryptography.RIPEMD160Managed> class hash for all files in a directory.  \n  \n [!code-cpp[RIPEMD160#1](~/add/codesnippet/cpp/m-system.security.crypto_65_1.cpp)]\n [!code-vb[RIPEMD160#1](~/add/codesnippet/visualbasic/m-system.security.crypto_65_1.vb)]\n [!code-cs[RIPEMD160#1](~/add/codesnippet/csharp/m-system.security.crypto_65_1.cs)]"
  syntax:
    content: public RIPEMD160Managed ();
    parameters: []
  overload: System.Security.Cryptography.RIPEMD160Managed.#ctor*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "策略不符合符合 FIPS 的算法。"
  platform:
  - net462
- uid: System.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RIPEMD160Managed
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: RIPEMD160Managed.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RIPEMD160Managed.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，将写入到的对象数据的路由<xref href=&quot;System.Security.Cryptography.RIPEMD160&quot;></xref>哈希算法以计算哈希值。"
  remarks: "由应用程序代码不调用此方法。       此抽象方法执行哈希计算。 每次写入到加密流对象传递数据，通过此方法。 对于每个数据块，此方法更新哈希对象的状态，以便在数据流的末尾，则返回正确的哈希值。"
  syntax:
    content: protected override void HashCore (byte[] rgb, int ibStart, int cbSize);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "输入的数据。"
    - id: ibStart
      type: System.Int32
      description: "偏移量从其开始使用数据的字节数组。"
    - id: cbSize
      type: System.Int32
      description: "要用作数据的数组中的字节数。"
  overload: System.Security.Cryptography.RIPEMD160Managed.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RIPEMD160Managed.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.RIPEMD160Managed
  langs:
  - csharp
  name: HashFinal()
  nameWithType: RIPEMD160Managed.HashFinal()
  fullName: System.Security.Cryptography.RIPEMD160Managed.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，请在加密流对象处理完最后的数据后完成哈希计算。"
  remarks: "由应用程序代码不调用此方法。 此方法完成任何部分计算并返回数据流的正确哈希值。"
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "字节数组中的计算所得的哈希代码。"
  overload: System.Security.Cryptography.RIPEMD160Managed.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.RIPEMD160Managed.Initialize
  id: Initialize
  parent: System.Security.Cryptography.RIPEMD160Managed
  langs:
  - csharp
  name: Initialize()
  nameWithType: RIPEMD160Managed.Initialize()
  fullName: System.Security.Cryptography.RIPEMD160Managed.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的实例<xref href=&quot;System.Security.Cryptography.RIPEMD160Managed&quot;></xref>类使用的托管的库。"
  remarks: "Ripemd-160 是 160 位加密哈希函数。 它旨在以用作 128 位哈希函数 MD4、 MD5 和 RIPEMD 安全的替代。 RIPEMD 被开发欧洲项目 RIPE （争用完整性基元评估版，1988年 1992年） 的框架。"
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.RIPEMD160Managed.Initialize*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.Cryptography.RIPEMD160
  isExternal: false
  name: System.Security.Cryptography.RIPEMD160
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.Cryptography.RIPEMD160Managed.#ctor
  parent: System.Security.Cryptography.RIPEMD160Managed
  isExternal: false
  name: RIPEMD160Managed()
  nameWithType: RIPEMD160Managed.RIPEMD160Managed()
  fullName: System.Security.Cryptography.RIPEMD160Managed.RIPEMD160Managed()
- uid: System.Security.Cryptography.RIPEMD160Managed.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.RIPEMD160Managed
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: RIPEMD160Managed.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.RIPEMD160Managed.HashCore(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.RIPEMD160Managed.HashFinal
  parent: System.Security.Cryptography.RIPEMD160Managed
  isExternal: false
  name: HashFinal()
  nameWithType: RIPEMD160Managed.HashFinal()
  fullName: System.Security.Cryptography.RIPEMD160Managed.HashFinal()
- uid: System.Security.Cryptography.RIPEMD160Managed.Initialize
  parent: System.Security.Cryptography.RIPEMD160Managed
  isExternal: false
  name: Initialize()
  nameWithType: RIPEMD160Managed.Initialize()
  fullName: System.Security.Cryptography.RIPEMD160Managed.Initialize()
- uid: System.Security.Cryptography.RIPEMD160Managed.#ctor*
  parent: System.Security.Cryptography.RIPEMD160Managed
  isExternal: false
  name: RIPEMD160Managed
  nameWithType: RIPEMD160Managed.RIPEMD160Managed
- uid: System.Security.Cryptography.RIPEMD160Managed.HashCore*
  parent: System.Security.Cryptography.RIPEMD160Managed
  isExternal: false
  name: HashCore
  nameWithType: RIPEMD160Managed.HashCore
- uid: System.Security.Cryptography.RIPEMD160Managed.HashFinal*
  parent: System.Security.Cryptography.RIPEMD160Managed
  isExternal: false
  name: HashFinal
  nameWithType: RIPEMD160Managed.HashFinal
- uid: System.Security.Cryptography.RIPEMD160Managed.Initialize*
  parent: System.Security.Cryptography.RIPEMD160Managed
  isExternal: false
  name: Initialize
  nameWithType: RIPEMD160Managed.Initialize
