### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.HtmlElement
  id: HtmlElement
  children:
  - System.Windows.Forms.HtmlElement.All
  - System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.CanHaveChildren
  - System.Windows.Forms.HtmlElement.Children
  - System.Windows.Forms.HtmlElement.Click
  - System.Windows.Forms.HtmlElement.ClientRectangle
  - System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  - System.Windows.Forms.HtmlElement.Document
  - System.Windows.Forms.HtmlElement.DomElement
  - System.Windows.Forms.HtmlElement.DoubleClick
  - System.Windows.Forms.HtmlElement.Drag
  - System.Windows.Forms.HtmlElement.DragEnd
  - System.Windows.Forms.HtmlElement.DragLeave
  - System.Windows.Forms.HtmlElement.DragOver
  - System.Windows.Forms.HtmlElement.Enabled
  - System.Windows.Forms.HtmlElement.Equals(System.Object)
  - System.Windows.Forms.HtmlElement.FirstChild
  - System.Windows.Forms.HtmlElement.Focus
  - System.Windows.Forms.HtmlElement.Focusing
  - System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  - System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  - System.Windows.Forms.HtmlElement.GetHashCode
  - System.Windows.Forms.HtmlElement.GotFocus
  - System.Windows.Forms.HtmlElement.Id
  - System.Windows.Forms.HtmlElement.InnerHtml
  - System.Windows.Forms.HtmlElement.InnerText
  - System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  - System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  - System.Windows.Forms.HtmlElement.KeyDown
  - System.Windows.Forms.HtmlElement.KeyPress
  - System.Windows.Forms.HtmlElement.KeyUp
  - System.Windows.Forms.HtmlElement.LosingFocus
  - System.Windows.Forms.HtmlElement.LostFocus
  - System.Windows.Forms.HtmlElement.MouseDown
  - System.Windows.Forms.HtmlElement.MouseEnter
  - System.Windows.Forms.HtmlElement.MouseLeave
  - System.Windows.Forms.HtmlElement.MouseMove
  - System.Windows.Forms.HtmlElement.MouseOver
  - System.Windows.Forms.HtmlElement.MouseUp
  - System.Windows.Forms.HtmlElement.Name
  - System.Windows.Forms.HtmlElement.NextSibling
  - System.Windows.Forms.HtmlElement.OffsetParent
  - System.Windows.Forms.HtmlElement.OffsetRectangle
  - System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  - System.Windows.Forms.HtmlElement.OuterHtml
  - System.Windows.Forms.HtmlElement.OuterText
  - System.Windows.Forms.HtmlElement.Parent
  - System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  - System.Windows.Forms.HtmlElement.RemoveFocus
  - System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  - System.Windows.Forms.HtmlElement.ScrollLeft
  - System.Windows.Forms.HtmlElement.ScrollRectangle
  - System.Windows.Forms.HtmlElement.ScrollTop
  - System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  - System.Windows.Forms.HtmlElement.Style
  - System.Windows.Forms.HtmlElement.TabIndex
  - System.Windows.Forms.HtmlElement.TagName
  langs:
  - csharp
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
  type: Class
  summary: "表示网页内的一个 HTML 元素。"
  remarks: "HtmlElement 表示 HTML 文档中的元素的任何可能的类型，如`BODY`， `TABLE`，和`FORM`，等等。 该类会公开你可能需要查找所有元素的最常见属性。       大多数元素可以拥有*子元素*︰ 放置在其下其他 HTML 元素。 使用<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>属性来测试是否给定的元素没有子级，和<xref:System.Windows.Forms.HtmlElement.Children%2A>要循环访问这些集合。</xref:System.Windows.Forms.HtmlElement.Children%2A> </xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> <xref:System.Windows.Forms.HtmlElement.Parent%2A>属性返回当前元素嵌套在其中 HtmlElement。</xref:System.Windows.Forms.HtmlElement.Parent%2A>       你经常需要访问特性、 属性和方法的基础元素不直接公开的 HtmlElement，如`SRC`属性`IMG`元素或`Submit`方法`FORM`。 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>和<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>方法使你能够检索并更改任何属性或属性上的特定元素，而<xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>提供对任何不公开中托管的文档对象模型 (DOM) 的方法的访问。</xref:System.Windows.Forms.HtmlElement.InvokeMember%2A> </xref:System.Windows.Forms.HtmlElement.SetAttribute%2A> </xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 如果你的应用程序具有非托管代码权限，你还可以访问未公开的属性和方法<xref:System.Windows.Forms.HtmlElement.DomElement%2A>属性。</xref:System.Windows.Forms.HtmlElement.DomElement%2A>       使用<xref:System.Windows.Forms.HtmlElement.TagName%2A>用于测试元素是否是特定类型的属性。</xref:System.Windows.Forms.HtmlElement.TagName%2A>       在运行时，可以修改任何 HTML 文档。 您可以创建与新 HtmlElement 对象<xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>方法<xref:System.Windows.Forms.HtmlDocument>，并将它们添加到另一个元素使用<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>或<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>方法。</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A> </xref:System.Windows.Forms.HtmlDocument> </xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> 此外可以创建作为 HTML 标记的元素，并将它们分配给现有元素的<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>属性。</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>"
  example:
  - "The following code example shows how to examine an arbitrary HTML document and derive a string describing the HTML elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public sealed class HtmlElement
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.All
  id: All
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;></xref>的当前元素下的所有元素。"
  remarks: "若要访问其具有为其直接父项的当前元素的元素，使用<xref:System.Windows.Forms.HtmlElement.Children%2A>集合相反。</xref:System.Windows.Forms.HtmlElement.Children%2A>       不一定将按源顺序会返回此集合中的元素。"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection All { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "当前元素的直接或间接子级的所有元素的集合。 如果当前元素是`TABLE`，例如，所有将返回每个`TH`， `TR`，和`TD`元素在该表中，以及任何其他元素，如`DIV`和`SPAN`在单元格内包含的元素。"
  overload: System.Windows.Forms.HtmlElement.All*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  id: AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将元素添加到另一个元素的子树。"
  remarks: "HTML 文档对象模型 (DOM)，可更改此的多种方式将 HTML 文件的运行时内容。 使用 AppendChild，将新元素添加到现有的文档，或在页上移动的元素。       如果元素已经有父级，将一个元素追加到另一个元素将自动该元素从删除以前的父级。       在运行时向文档所做的任何添加使用 AppendChild 不会保留在调用时<xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>方法<xref:System.Windows.Forms.WebBrowser>控件。</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.ShowSaveAsDialog%2A>"
  example:
  - "The following code example creates a new hyperlink using the <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> method and adds it to end of a page using `AppendChild` on the `BODY` element. The example requires that your application contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement AppendChild (System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>要追加到树中此位置。"
    return:
      type: System.Windows.Forms.HtmlElement
      description: "已添加到树之后的元素。"
  overload: System.Windows.Forms.HtmlElement.AppendChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  id: AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将事件处理程序的命名事件添加 HTML 文档对象模型 (DOM)。"
  remarks: "管理文档对象模型 (DOM) 公开的选择数目的事件。 仅为特定类型的元素，则定义大部分未公开的事件如`submit`事件，即仅在上有效`FORM`元素。 使用 AttachEventHandler 将事件处理程序添加到这些未公开的事件。       文档完成加载之前，不应将事件附加到文档或其对象之一。 中的最早，应调用此方法是<xref:System.Windows.Forms.WebBrowser.DocumentCompleted>事件<xref:System.Windows.Forms.WebBrowser>控件。</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.DocumentCompleted>       有关可用的非托管事件的详细信息，请参阅[上托管 HTML 文档对象模型访问未公开成员](~/add/includes/ajax-current-ext-md.md)和给定接口︰[给定](http://go.microsoft.com/fwlink/?LinkId=104876)， [IHTMLElement2](http://go.microsoft.com/fwlink/?LinkId=104877)， [IHTMLElement3](http://go.microsoft.com/fwlink/?LinkId=104878)， [IHTMLElement4](http://go.microsoft.com/fwlink/?LinkId=104879)。"
  syntax:
    content: public void AttachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "你想要处理事件的名称。"
    - id: eventHandler
      type: System.EventHandler
      description: "用于处理事件的托管的代码。"
  overload: System.Windows.Forms.HtmlElement.AttachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  id: CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示此元素是否可以拥有子元素。"
  remarks: "某些元素，如`IMG`和`SCRIPT`，不能具有任何子级。 使用此属性，然后才能调用<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>或<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>上任意元素。</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A>"
  example:
  - "The following code example handles the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>. If an element was not previous selected using a mouse click, the code assigns the element to a private class variable named `MoveElement`. If an element was selected, the code attempts to append it to the element that was just clicked. This code example requires that your application hosts a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have already added an event handler for the <xref:System.Windows.Forms.HtmlElement.Click> event on <xref:System.Windows.Forms.HtmlDocument>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#2)]\n [!code-cs[System.Windows.Forms.HtmlElement#2](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#2)]"
  syntax:
    content: public bool CanHaveChildren { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果元素可以拥有子元素;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.HtmlElement.CanHaveChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Children
  id: Children
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;></xref>的当前元素的所有子级。"
  remarks: "许多在某一 HTML 文件内的元素可以在其下的其他 HTML 元素。 子集合提供简单的机制，用于浏览文档树结构。       子级仅公开其直接父元素是当前元素的元素。 如果你有<xref:System.Windows.Forms.HtmlElement>为`TABLE`元素，子级将为你提供的所有`TR`（行） 元素内的`TABLE`。</xref:System.Windows.Forms.HtmlElement> 若要检索`TD`（单元格） 元素内包含`TR`元素，你将需要使用上每个单独的子集合`TR`元素或使用<xref:System.Windows.Forms.HtmlElement.All%2A><xref:System.Windows.Forms.HtmlElement>。</xref:System.Windows.Forms.HtmlElement>集合</xref:System.Windows.Forms.HtmlElement.All%2A>       不保证此集合中的元素都是按源顺序排列。       如果<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>是`false`，`Children`将始终为空。</xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>"
  example:
  - "The following code example examines an arbitrary HTML document and derive a string describing the elements, with indentation and level numbers used to indicate how deeply nested the elements are in the document. It does this by searching the `Children` collection of all elements recursively, starting with the HTML element at the top of the document. This code example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#1)]\n [!code-cs[System.Windows.Forms.HtmlElement#1](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#1)]"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection Children { get; }
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "所有的集合<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>具有当前元素作为父级的对象。"
  overload: System.Windows.Forms.HtmlElement.Children*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Click
  id: Click
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户单击鼠标左键的元素上时发生。"
  remarks: "你可以通过设置取消的上一个元素的单击事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的单击事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       如果用户单击在不当前具有输入焦点的元素上，单击事件会发生后<xref:System.Windows.Forms.HtmlElement.Focusing>事件，但之前<xref:System.Windows.Forms.HtmlElement.LostFocus>该元素的事件。</xref:System.Windows.Forms.HtmlElement.LostFocus> </xref:System.Windows.Forms.HtmlElement.Focusing>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Click event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Click event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#432](~/add/codesnippet/csharp/e-system.windows.forms.h_5_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#432](~/add/codesnippet/visualbasic/e-system.windows.forms.h_5_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Click;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  id: ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取 HTML 文档中的元素的客户端区域的边界。"
  remarks: "ClientRectangle 将返回只为显式高度和宽度，已分配的元素或使用绝对定位的元素的位置数据。 如果其位置样式设置为绝对定位文档`absolute`之后该它可以放置在 HTML 页上的任何坐标。"
  example:
  - "Assume you have loaded the following HTML page into a hosted instance of the <xref:System.Windows.Forms.WebBrowser> control.  \n  \n```  \n<HTML>  \n  \n    <BODY>  \n  \n        <DIV id=\"div1\" style=\"position:absolute;top:100px;left:100px;border-      style:solid;border-width:1px;\">  \n            Edit this text.  \n        </DIV>  \n  \n    </BODY>  \n  \n</HTML>  \n```  \n  \n The following code example demonstrates retrieving this element and expanding its dimensions if the client area is less than 400 pixels wide by 50 pixels high, and also sets the `DIV` to the `contentEditable` state so that the user can input text.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#3)]\n [!code-cs[System.Windows.Forms.HtmlElement#3](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#3)]"
  syntax:
    content: public System.Drawing.Rectangle ClientRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "占用了元素，减去占用边框和滚动条的任何区域的客户端区域。 若要获取其修饰性的元素的大小和位置，请使用<xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>相反。</xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>"
  overload: System.Windows.Forms.HtmlElement.ClientRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  id: DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "从 HTML 文档对象模型 (DOM) 的命名事件中移除事件处理程序。"
  syntax:
    content: public void DetachEventHandler (string eventName, EventHandler eventHandler);
    parameters:
    - id: eventName
      type: System.String
      description: "你想要处理事件的名称。"
    - id: eventHandler
      type: System.EventHandler
      description: "用于处理事件的托管的代码。"
  overload: System.Windows.Forms.HtmlElement.DetachEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Document
  id: Document
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.HtmlDocument&quot;></xref>此元素所属。"
  remarks: "一些 HTML 页可以承载框架使用`FRAMESET`标记。 在此情况下，每个单独`FRAME`元素将包含自己的<xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument>实例 当你具有从事件处理程序中收到元素的引用，此属性是最有用<xref:System.Windows.Forms.HtmlElementEventArgs>，并且需要对文档元素驻留在其中执行某些操作。</xref:System.Windows.Forms.HtmlElementEventArgs>"
  syntax:
    content: public System.Windows.Forms.HtmlDocument Document { get; }
    return:
      type: System.Windows.Forms.HtmlDocument
      description: "此元素的父文档。"
  overload: System.Windows.Forms.HtmlElement.Document*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DomElement
  id: DomElement
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取此元素的非托管的接口指针。"
  remarks: "<xref:System.Windows.Forms.HtmlElement>是包装的 Internet 资源管理器文档对象模型 (DOM)，它们编写使用组件对象模型 (COM)。</xref:System.Windows.Forms.HtmlElement> 如果你需要访问未公开的属性或方法的基础 COM 接口，例如`IHTMLElement`，可用于此对象查询它们。       若要使用的非托管的接口，你将需要 MSHTML 库 (mshtml.dll) 导入你的应用程序。 但是，你还可以执行未公开的属性和方法使用`Invoke`方法。"
  example:
  - "The following code example uses unmanaged interfaces to take the currently selected text and convert it into a hyperlink, with the URL chosen by the user. This code was written under the assumption that your form has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`, and that you have added the unmanaged MSHTML library as a reference to your project.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#4)]\n [!code-cs[System.Windows.Forms.HtmlElement#4](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#4)]"
  syntax:
    content: public object DomElement { get; }
    return:
      type: System.Object
      description: "COM`IUnknown`了元素，它可以强制转换为一个 HTML 元素的指针接口，如`IHTMLElement`。"
  overload: System.Windows.Forms.HtmlElement.DomElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  id: DoubleClick
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户单击鼠标左键在元素上元素两次，在短期内时发生。"
  remarks: "由用户的操作系统的鼠标设置确定一次双击。 用户可以设置单击鼠标按钮它认为是双击而不是两次单击之间的时间。       你可以通过设置取消的上一个元素的 DoubleClick 事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的 DoubleClick 事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DoubleClick event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DoubleClick event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#433](~/add/codesnippet/csharp/e-system.windows.forms.h_26_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#433](~/add/codesnippet/visualbasic/e-system.windows.forms.h_26_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DoubleClick;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Drag
  id: Drag
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户将文本拖动到各个位置时发生。"
  remarks: "文本拖动到以下位置时发生此事件:-内部或之间中承载的 HTML 页面<xref:System.Windows.Forms.WebBrowser>控制或到另一个应用程序的 Internet Explorer 到 Windows 桌面，则可以通过设置取消在元素上拖动事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A> </xref:System.Windows.Forms.WebBrowser>       在元素上的拖动事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Drag event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Drag event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#434](~/add/codesnippet/csharp/e-system.windows.forms.h_11_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#434](~/add/codesnippet/visualbasic/e-system.windows.forms.h_11_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Drag;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragEnd
  id: DragEnd
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户完成拖动操作时发生。"
  remarks: "你可以通过设置取消的上一个元素的 DragEnd 事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的 DragEnd 事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragEnd event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragEnd event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#435](~/add/codesnippet/csharp/e-system.windows.forms.h_35_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#435](~/add/codesnippet/visualbasic/e-system.windows.forms.h_35_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragEnd;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragLeave
  id: DragLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户不再将项拖动到此元素上时发生。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#436](~/add/codesnippet/csharp/e-system.windows.forms.h_21_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#436](~/add/codesnippet/visualbasic/e-system.windows.forms.h_21_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.DragOver
  id: DragOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户将文本拖动到元素上时发生。"
  remarks: "你可以通过设置取消的上一个元素的拖动事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的拖动事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the DragOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the DragOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#437](~/add/codesnippet/csharp/e-system.windows.forms.h_31_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#437](~/add/codesnippet/visualbasic/e-system.windows.forms.h_31_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler DragOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Enabled
  id: Enabled
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置是否用户可以向此元素输入数据。"
  remarks: "有关`FORM`元素如文本框和单选按钮，将 Enabled 设置为`false`会阻止用户使用这些窗体字段。 对于其他元素，如`DIV`或`SPAN`，将 Enabled 设置为`false`将导致以灰色显示的元素中的所有文本; 但是，文本将仍能选择。 若要取消所选内容，添加的事件处理程序未公开`onselectstart`事件使用<xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>方法。</xref:System.Windows.Forms.HtmlElement.AttachEventHandler%2A>"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此元素允许用户输入;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.HtmlElement.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "测试提供的对象是否等于当前元素。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要测试相等性的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>obj</code> is an <xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Forms.HtmlElement.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.FirstChild
  id: FirstChild
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取文档树中此元素下的下一个元素。"
  remarks: "结合使用 FirstChild<xref:System.Windows.Forms.HtmlElement.NextSibling%2A>遍历的 HTML 文档的文档树。</xref:System.Windows.Forms.HtmlElement.NextSibling%2A>"
  syntax:
    content: public System.Windows.Forms.HtmlElement FirstChild { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>表示包含当前元素，按源顺序下的第一个元素。"
  overload: System.Windows.Forms.HtmlElement.FirstChild*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focus
  id: Focus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将用户输入的焦点置于当前元素上。"
  remarks: "将焦点设置在元素上，同时会显示该元素的焦点并便于 active 元素;例如，具有焦点的元素将返回<xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A><xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument>属性</xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>       在调用焦点后，由用户输入的任何键击将发送到该元素。"
  syntax:
    content: public void Focus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.Focus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Focusing
  id: Focusing
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当元素首次接收用户输入的焦点时发生。"
  remarks: "用户切换到另一个应用程序使用任务栏或 ALT + TAB 键将接收 Focusing 之前具有焦点的元素和<xref:System.Windows.Forms.HtmlElement.GotFocus>事件再次时用户切换回你的应用程序。</xref:System.Windows.Forms.HtmlElement.GotFocus>       无法取消此事件的默认行为。 若要从元素中删除焦点，请调用<xref:System.Windows.Forms.HtmlElement.Focus%2A>中不同元素上<xref:System.Windows.Forms.HtmlElement.GotFocus>事件。</xref:System.Windows.Forms.HtmlElement.GotFocus> </xref:System.Windows.Forms.HtmlElement.Focus%2A>       上一个元素的 Focusing 事件也会出现在该元素的父元素以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the Focusing event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the Focusing event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#438](~/add/codesnippet/csharp/e-system.windows.forms.h_10_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#438](~/add/codesnippet/visualbasic/e-system.windows.forms.h_10_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler Focusing;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  id: GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "检索元素的命名属性的值。"
  remarks: "HTML 中的属性是该元素的任何有效的名称/值对。 <xref:System.Windows.Forms.HtmlElement>公开所有元素，而忽略仅适用于某些类型的元素，则共有的属性`SRC`是预定义的属性`IMG`标记，例如，但不是能为`DIV`标记。</xref:System.Windows.Forms.HtmlElement> 使用 GetAttribute 和<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>操作不公开上托管的文档对象模型 (DOM) 的属性。</xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>       GetAttribute 和<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>不区分大小写。</xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>"
  example:
  - "The following code example retrieves all of the `META` tags within an HTML document, using GetAttribute to find the `META` tag with the name `Description`. The example requires that your application has a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/visualbasic/HtmlDocumentProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlDocument#6](~/add/codesnippet/csharp/HtmlDocumentProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public string GetAttribute (string attributeName);
    parameters:
    - id: attributeName
      type: System.String
      description: "属性的名称。 此参数是不区分大小写。"
    return:
      type: System.String
      description: "元素，此属性的值作为<xref:System.String>值。</xref:System.String> 如果此元素上不存在指定的特性，则返回空字符串。"
  overload: System.Windows.Forms.HtmlElement.GetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  id: GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "检索表示在 HTML 中由指定的元素集合`HTML`标记。"
  syntax:
    content: public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);
    parameters:
    - id: tagName
      type: System.String
      description: "标记名称其<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>你想要检索的对象。"
    return:
      type: System.Windows.Forms.HtmlElementCollection
      description: "<xref href=&quot;System.Windows.Forms.HtmlElementCollection&quot;> </xref>其中所有元素其`HTML`标记名等于<code> tagName </code>。"
  overload: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  id: GetHashCode
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "用作特定类型的哈希函数。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前<xref:System.Object>.</xref:System.Object>哈希代码"
  overload: System.Windows.Forms.HtmlElement.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.GotFocus
  id: GotFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当元素已收到用户输入的焦点时发生。"
  remarks: "不能取消此事件的默认行为，或防止冒泡。 若要从元素中删除焦点，请调用<xref:System.Windows.Forms.HtmlElement.Focus%2A>GotFocus 事件中的不同元素上。</xref:System.Windows.Forms.HtmlElement.Focus%2A>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "Save the following HTML code into a file, and load the file into a <xref:System.Windows.Forms.WebBrowser> control in a Windows Forms project.  \n  \n```  \n<HTML>  \n    <BODY>  \n        <FORM name=\"form1\">  \n            <INPUT type=\"text\" size=20 name=\"text1\">  \n            <INPUT type=\"text\" size=20 name=\"text2\">  \n            <INPUT type=\"text\" size=20 name=\"text3\">  \n        </FORM>  \n    </BODY>  \n</HTML>  \n```  \n  \n The following code example prevents the next `INPUT` element in the tab order from receiving user input focus if the previous element contains less than five characters. The example requires that the previously mentioned HTML file is loaded into an instance of the <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#15)]\n [!code-cs[System.Windows.Forms.HtmlElement#15](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#15)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler GotFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Id
  id: Id
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置用于标识此元素的标签。"
  remarks: "Id 必须是唯一的;不能包含具有相同 Id 在同一文档内的两个元素。 使用<xref:System.Windows.Forms.HtmlElement.Name%2A>属性以便相同的标识符的一组逻辑上相关的元素。</xref:System.Windows.Forms.HtmlElement.Name%2A>"
  syntax:
    content: public string Id { get; set; }
    return:
      type: System.String
      description: "元素的唯一标识符。"
  overload: System.Windows.Forms.HtmlElement.Id*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  id: InnerHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置此元素下的 HTML 标记。"
  remarks: "有几种方法来将新元素添加到一个现有的 HTML 页，比如<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>和<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>方法。</xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A> </xref:System.Windows.Forms.HtmlElement.AppendChild%2A> 使用 InnerHtml 通常是添加新的内容，当您必须在将新元素上设置多个属性或样式时的最快方法。       InnerHtml 区别<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>在于 InnerHtml 不会包括表示对象的 HTML 调用。</xref:System.Windows.Forms.HtmlElement.OuterHtml%2A> 请参阅<xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>有关这两个属性之间的差异的详细信息。</xref:System.Windows.Forms.HtmlElement.OuterHtml%2A>       设置 InnerHtml 销毁任何以前追加到此元素的子级。 如果你从 DOM 检索某个元素，然后将新的 html 代码分配给其父级的 InnerHtml 属性，引用与该元素将是无用的并且在它调用其属性和方法时其行为是未定义。       对于某些元素，设置 InnerHtml 不是有效操作。 一些 HTML 标记具有没有结束标记，如`IMG`标记，并因此不能包含嵌套的元素。 一些标记，如`SCRIPT`标记中，只能包含文本内容; 设置 InnerHtml 将导致错误。 两种类型的标记，<xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A>属性将返回`false`。</xref:System.Windows.Forms.HtmlElement.CanHaveChildren%2A> 但是，你还不能设置 InnerHtml 上`TABLE`和`TR`元素，作为指定给这些元素的格式不正确的 HTML 可能会损坏文档的呈现。 使用<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>或`insertRow`和`insertCell`方法上的非托管`IHTMLTable`接口来添加行和单元格到`TABLE`。</xref:System.Windows.Forms.HtmlElement.AppendChild%2A>       如果你只需将文本分配给某个元素而不是 HTML 标记，使用<xref:System.Windows.Forms.HtmlElement.InnerText%2A>属性改为。</xref:System.Windows.Forms.HtmlElement.InnerText%2A>       将一个值分配给 InnerHtml 将会破坏以前分配使用任何文本值<xref:System.Windows.Forms.HtmlElement.InnerText%2A>.</xref:System.Windows.Forms.HtmlElement.InnerText%2A>"
  syntax:
    content: public string InnerHtml { get; set; }
    return:
      type: System.String
      description: "定义当前元素的子元素的 HTML 标记。"
  overload: System.Windows.Forms.HtmlElement.InnerHtml*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "不允许在此元素上创建子元素。"
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InnerText
  id: InnerText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置分配给此元素的文本。"
  remarks: "如果你尝试将 HTML 分配给具有 InnerText 的元素，就像您查看的 HTML 文本文件中的 HTML 代码将显示为在文档中，文本中。 如果将 HTML 分配给元素使用<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>属性，InnerText 将返回的所有文本中，使用标记的 HTML 中删除。</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>       将一个值分配给 InnerText 将销毁属于元素任何子元素。"
  example:
  - "The following code creates a new hyperlink using <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>, and assigns text to the link using the InnerText property.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#8)]\n [!code-cs[System.Windows.Forms.HtmlElement#8](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#8)]"
  syntax:
    content: public string InnerText { get; set; }
    return:
      type: System.String
      description: "元素的文本，不包括任何 HTML 标记。 如果此元素包含子元素，将保留那些子元素中的文本。"
  overload: System.Windows.Forms.HtmlElement.InnerText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "指定的元素不能包含文本 (例如，`IMG`元素)。"
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  id: InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将新元素插入到文档对象模型 (DOM)。"
  remarks: "不调用此方法之前之后<xref:System.Windows.Forms.WebBrowser.DocumentCompleted>上的事件<xref:System.Windows.Forms.WebBrowser>控件发生。</xref:System.Windows.Forms.WebBrowser> </xref:System.Windows.Forms.WebBrowser.DocumentCompleted> 之前调用此方法可能会导致异常，如文档将未完成加载。       一个值是否<xref:System.Windows.Forms.HtmlElementInsertionOrientation>有效将取决于元素的类型。</xref:System.Windows.Forms.HtmlElementInsertionOrientation> 例如，<xref:System.Windows.Forms.HtmlElementInsertionOrientation>如果元素为有效`DIV`，但如果它是`SCRIPT`或`IMG`元素，两种可以包含子元素。</xref:System.Windows.Forms.HtmlElementInsertionOrientation>"
  example:
  - "The following code example inserts a `DIV` element into the top of every page that users view outside of the ADatum.com server. The example requires that your form contains a <xref:System.Windows.Forms.WebBrowser> control named `WebBrowser1`. Your sample must also import the namespace <xref:System.Text.RegularExpressions>.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#9)]\n [!code-cs[System.Windows.Forms.HtmlElement#9](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#9)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement InsertAdjacentElement (System.Windows.Forms.HtmlElementInsertionOrientation orient, System.Windows.Forms.HtmlElement newElement);
    parameters:
    - id: orient
      type: System.Windows.Forms.HtmlElementInsertionOrientation
      description: "此元素相对于当前元素要插入的位置。"
    - id: newElement
      type: System.Windows.Forms.HtmlElement
      description: "要插入的新元素。"
    return:
      type: System.Windows.Forms.HtmlElement
      description: "<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>刚才插入。 如果插入失败，这将返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  id: InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "此元素的基础 DOM 元素上执行未公开的方法。"
  remarks: "此方法可以用于调用的方法从文档对象模型 (DOM) 在托管代码中没有等效项。 使用此版本的属于 InvokeMember 来执行未公开的方法不采用自变量。 有关示例，请参阅<xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>。</xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>"
  syntax:
    content: public object InvokeMember (string methodName);
    parameters:
    - id: methodName
      type: System.String
      description: "要调用方法的属性的名称。"
    return:
      type: System.Object
      description: "此方法返回的元素表示为<xref:System.Object>.</xref:System.Object> 如果此<xref:System.Object>为另一个 HTML 元素，并且引用了添加到项目的非托管 MSHTML 库，你可以将其转换为与其对应的非托管接口。</xref:System.Object>"
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  id: InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "执行在当前 HTML 页面中定义的脚本语言的函数。"
  remarks: "此方法可以用于调用的方法从文档对象模型 (DOM) 在托管代码中没有等效项。 提供给属于 InvokeMember 的所有自变量将被转换为 Win32`VARIANT`数据类型在传递到命名的脚本函数之前。"
  example:
  - "The following code example gets a `TABLE` called `dataTable` and uses the unexposed `moveRow` method to move a row from the end of the table to the beginning.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#11)]\n [!code-cs[System.Windows.Forms.HtmlElement#11](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#11)]"
  syntax:
    content: public object InvokeMember (string methodName, object[] parameter);
    parameters:
    - id: methodName
      type: System.String
      description: "要调用方法的属性的名称。"
    - id: parameter
      type: System.Object[]
      description: "要传递的参数列表。"
    return:
      type: System.Object
      description: "函数，返回的元素表示为<xref:System.Object>.</xref:System.Object> 如果此<xref:System.Object>为另一个 HTML 元素，并且引用了添加到项目的非托管 MSHTML 库，你可以将其转换为与其对应的非托管接口。</xref:System.Object>"
  overload: System.Windows.Forms.HtmlElement.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyDown
  id: KeyDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户按下键盘上的某个键时发生。"
  remarks: "KeyDown 发生之前<xref:System.Windows.Forms.HtmlElement.KeyPress>，在将发生之前<xref:System.Windows.Forms.HtmlElement.KeyUp>.</xref:System.Windows.Forms.HtmlElement.KeyUp> </xref:System.Windows.Forms.HtmlElement.KeyPress>       你可以通过设置取消的上一个元素的 KeyDown 事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的 KeyDown 事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#442](~/add/codesnippet/csharp/e-system.windows.forms.h_1_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#442](~/add/codesnippet/visualbasic/e-system.windows.forms.h_1_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyPress
  id: KeyPress
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户按下并释放键盘上的某个键时发生。"
  remarks: "在<xref:System.Windows.Forms.HtmlElement.KeyDown>和之前<xref:System.Windows.Forms.HtmlElement.KeyUp>.</xref:System.Windows.Forms.HtmlElement.KeyUp></xref:System.Windows.Forms.HtmlElement.KeyDown>后发生 KeyPress       你可以通过设置取消的上一个元素的 KeyPress 事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的 KeyPress 事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyPress event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyPress event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#443](~/add/codesnippet/csharp/e-system.windows.forms.h_16_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#443](~/add/codesnippet/visualbasic/e-system.windows.forms.h_16_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyPress;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.KeyUp
  id: KeyUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户释放键盘上的某个键时发生。"
  remarks: "KeyUp 发生后<xref:System.Windows.Forms.HtmlElement.KeyPress>，就会出现在<xref:System.Windows.Forms.HtmlElement.KeyDown>.</xref:System.Windows.Forms.HtmlElement.KeyDown>后</xref:System.Windows.Forms.HtmlElement.KeyPress>       无法取消此事件。       上一个元素的 KeyUp 事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the KeyUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the KeyUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#444](~/add/codesnippet/csharp/e-system.windows.forms.h_3_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#444](~/add/codesnippet/visualbasic/e-system.windows.forms.h_3_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler KeyUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  id: LosingFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当元素正在失去用户输入的焦点时发生。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LosingFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LosingFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#440](~/add/codesnippet/csharp/e-system.windows.forms.h_12_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#440](~/add/codesnippet/visualbasic/e-system.windows.forms.h_12_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.LostFocus
  id: LostFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当元素已失去用户输入的焦点时发生。"
  remarks: "元素将不再接收此键击事件 LostFocus 发生，直到它重新获得焦点，由用户选择的页上或通过应用程序调用后<xref:System.Windows.Forms.HtmlElement.Focus%2A>上该元素的方法。</xref:System.Windows.Forms.HtmlElement.Focus%2A>       无法取消此事件。       上一个元素的 LostFocus 事件也会出现在该元素的父元素以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the LostFocus event. This report helps you to learn when the event occurs and can assist you in debugging.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the LostFocus event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#441](~/add/codesnippet/csharp/e-system.windows.forms.h_0_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#441](~/add/codesnippet/visualbasic/e-system.windows.forms.h_0_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler LostFocus;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseDown
  id: MouseDown
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户按下鼠标按钮时发生。"
  remarks: "你可以通过设置取消的上一个元素的 MouseDown 事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的 MouseDown 事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseDown event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseDown event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#446](~/add/codesnippet/csharp/e-system.windows.forms.h_32_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#446](~/add/codesnippet/visualbasic/e-system.windows.forms.h_32_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseDown;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  id: MouseEnter
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户第一次将鼠标光标移到当前元素上时发生。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseEnter event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseEnter event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#449](~/add/codesnippet/csharp/e-system.windows.forms.h_28_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#449](~/add/codesnippet/visualbasic/e-system.windows.forms.h_28_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseEnter;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  id: MouseLeave
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户将鼠标光标从当前元素中移出时发生。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseLeave event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseLeave event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#450](~/add/codesnippet/csharp/e-system.windows.forms.h_33_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#450](~/add/codesnippet/visualbasic/e-system.windows.forms.h_33_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseMove
  id: MouseMove
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户将鼠标光标通过元素时发生。"
  remarks: "无法取消此事件。       上一个元素的 MouseMove 事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseMove event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseMove event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#445](~/add/codesnippet/csharp/e-system.windows.forms.h_15_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#445](~/add/codesnippet/visualbasic/e-system.windows.forms.h_15_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseMove;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseOver
  id: MouseOver
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当鼠标光标进入元素的边界时发生。"
  remarks: "你可以通过设置取消的上一个元素的鼠标悬停事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的鼠标悬停事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseOver event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseOver event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#447](~/add/codesnippet/csharp/e-system.windows.forms.h_29_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#447](~/add/codesnippet/visualbasic/e-system.windows.forms.h_29_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseOver;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.MouseUp
  id: MouseUp
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "当用户释放鼠标按钮时发生。"
  remarks: "你可以通过设置取消的上一个元素的 MouseUp 事件的默认操作<xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.ReturnValue%2A>       上一个元素的 MouseUp 事件也会在该元素的父元素上以及在<xref:System.Windows.Forms.HtmlDocument>类本身，除非你设置<xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A>属性<xref:System.Windows.Forms.HtmlElementEventArgs>类到`true`。</xref:System.Windows.Forms.HtmlElementEventArgs> </xref:System.Windows.Forms.HtmlElementEventArgs.BubbleEvent%2A> </xref:System.Windows.Forms.HtmlDocument>       有关取消事件上传和取消事件的默认操作之间的差异的详细信息，请参阅[关于 DHTML 对象模型](http://msdn.microsoft.com/library/ms533022.aspx)。"
  example:
  - "The following code example demonstrates the use of this member. In the example, an event handler reports on the occurrence of the MouseUp event. This report helps you to learn when the event occurs and can assist you in debugging. To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=fullName> with <xref:System.Console.WriteLine%2A?displayProperty=fullName> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.  \n  \n To run the example code, paste it into a project that contains an instance of type <xref:System.Windows.Forms.HtmlElement> named `HtmlElement1`. Then ensure that the event handler is associated with the MouseUp event.  \n  \n [!code-cs[System.Windows.Forms.EventExamples#448](~/add/codesnippet/csharp/e-system.windows.forms.h_17_1.cs)]\n [!code-vb[System.Windows.Forms.EventExamples#448](~/add/codesnippet/visualbasic/e-system.windows.forms.h_17_1.vb)]"
  syntax:
    content: public event System.Windows.Forms.HtmlElementEventHandler MouseUp;
    return:
      type: System.Windows.Forms.HtmlElementEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Name
  id: Name
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置元素的名称。"
  remarks: "使用 Name 属性来检索中使用<xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A>的<xref:System.Windows.Forms.HtmlElement.All%2A><xref:System.Windows.Forms.HtmlDocument>.</xref:System.Windows.Forms.HtmlDocument>属性</xref:System.Windows.Forms.HtmlElement.All%2A>上的方法</xref:System.Windows.Forms.HtmlElementCollection.GetElementsByName%2A>的文档元素       当应用于`INPUT`元素，其形式提交到服务器时名称定义该元素的数据的变量名称。"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>表示元素的名称。</xref:System.String>"
  overload: System.Windows.Forms.HtmlElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.NextSibling
  id: NextSibling
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取文档树中与此元素的相同级别的下一个元素。"
  remarks: "结合使用 NextSibling<xref:System.Windows.Forms.HtmlElement.FirstChild%2A>遍历 HTML 元素的文档树。</xref:System.Windows.Forms.HtmlElement.FirstChild%2A>"
  syntax:
    content: public System.Windows.Forms.HtmlElement NextSibling { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>右侧的当前元素表示的元素。"
  overload: System.Windows.Forms.HtmlElement.NextSibling*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  id: OffsetParent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "从中获取的元素<xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>计算。</xref:System.Windows.Forms.HtmlElement.OffsetRectangle*>"
  remarks: "元素可将其置于三种方式之一中的 HTML 页︰ 默认流定位;相对定位中的元素偏移固定量相对于其父级;和绝对定位，在该元素给定固定协调文档相对于文档的左上角位置。       当文档的元素使用相对或绝对定位时，你可以使用`OffsetParent`计算的工作区中的元素的坐标位置。       有关详细信息元素定位在 HTML 中，请参阅[有关元素定位](http://msdn.microsoft.com/library/ms533005.aspx)。"
  example:
  - "The following code example shows how OffsetParent and <xref:System.Windows.Forms.HtmlElement.OffsetRectangle%2A> differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement OffsetParent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "从中计算偏移量的元素。       如果某个元素的父级或元素的层次结构中的其他元素使用相对或绝对定位， <xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;> </xref>将当前元素嵌套在其中的第一个相对或绝对定位的元素。 如果在当前元素的上方的元素绝对或相对定位的<xref uid=&quot;langword_csharp_OffsetParent&quot; name=&quot;OffsetParent&quot; href=&quot;&quot;></xref>将`BODY`文档的标记。"
  overload: System.Windows.Forms.HtmlElement.OffsetParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  id: OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取相对于其父元素的位置。"
  remarks: "元素可将其置于三种方式之一中的 HTML 页:-默认流定位。      -相对定位在按固定量相对于其父级偏移的元素。      -绝对定位，在该元素给定固定协调文档相对于文档的左上角位置。       有关详细信息元素定位在 HTML 中，请参阅[有关元素定位](http://msdn.microsoft.com/library/ms533005.aspx)。"
  example:
  - "The following code example shows how <xref:System.Windows.Forms.HtmlElement.OffsetParent%2A> and OffsetRectangle differ for `span1`, `span2` and `span3`:  \n  \n```  \n<HTML>  \n    <BODY id=\"documentBody\">  \n  \n        <DIV id=\"div1\">  \n            <SPAN id=\"span1\">Placeholder text 1.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div2\" style=\"position:relative;top:100px;left:100px;\">  \n            <SPAN id=\"span2\">Placeholder text 2.</SPAN>  \n        </DIV>  \n  \n        <DIV id=\"div3\" style=\"position:absolute;top:200px;left:200px;\">  \n            <DIV id=\"div4\" style=\"position:relative;top:100px;left:100px;\">  \n                <SPAN id=\"span3\">Placeholder text 3.</SPAN>  \n            </DIV>  \n        </DIV>  \n  \n    </BODY>  \n</HTML>  \n```  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#6)]\n [!code-cs[System.Windows.Forms.HtmlElement#6](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#6)]"
  syntax:
    content: public System.Drawing.Rectangle OffsetRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "个元素，以及其宽度和高度，相对于其父级的 x 坐标和 y 坐标位置。       如果元素的父级为相对或绝对定位，OffsetRectangle 将返回父元素的偏移量。 如果该元素本身为相对于其父级定位，OffsetRectangle 将返回从其父级的偏移量。"
  overload: System.Windows.Forms.HtmlElement.OffsetRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "比较两个元素相等。"
  remarks: "相等运算符测试`IUnknown`包装由所提供的基础 COM 对象的指针<xref:System.Windows.Forms.HtmlElement>类。</xref:System.Windows.Forms.HtmlElement>"
  syntax:
    content: public static bool op_Equality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "第一个<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>。"
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "第二个<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个参数均<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，或如果两个元素具有相同的基础 COM 接口; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.HtmlElement.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  id: op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  type: Operator
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "比较两个<xref href=&quot;System.Windows.Forms.HtmlElement&quot;></xref>对象是否不相等。"
  syntax:
    content: public static bool op_Inequality (System.Windows.Forms.HtmlElement left, System.Windows.Forms.HtmlElement right);
    parameters:
    - id: left
      type: System.Windows.Forms.HtmlElement
      description: "第一个<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>。"
    - id: right
      type: System.Windows.Forms.HtmlElement
      description: "第二个<xref href=&quot;System.Windows.Forms.HtmlElement&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>是仅有一个元素是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，或两个对象不相等; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.HtmlElement.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  id: OuterHtml
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置当前元素的 HTML 代码。"
  remarks: "OuterHtml 而<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>将返回 （当前元素的周围标记除外） 的当前元素中包含的所有 HTML，包括当前元素的标记，以及的 HTML 标记包含，例如︰ `<HTML>` `<BODY>` `<DIV id=&quot;div1&quot;>` `Hello` `<DIV id=&quot;div2&quot;>` `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` `</DIV>` `</DIV>` `</BODY>` `</HTML>`在此示例中，在调用 OuterHtml`div2`将都返回︰ `<DIV id=&quot;div2&quot;>` `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>` `</DIV>`调用<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>将都返回︰ `World` `<DIV id=&quot;div3&quot;>` `How are you?` `</DIV>`到 OuterHtml 分配新值，如果当前元素引用将变为无效; 它将不会反映名称你只需分配的 html 的属性和子内容。                     </xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>                                                                                                                        </xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>"
  syntax:
    content: public string OuterHtml { get; set; }
    return:
      type: System.String
      description: "当前元素及其子级的 HTML 代码。"
  overload: System.Windows.Forms.HtmlElement.OuterHtml*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.OuterText
  id: OuterText
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置当前元素的文本。"
  remarks: "如果你尝试将 HTML 分配给具有 OuterText 的元素，就像您查看的 HTML 文本文件中的 HTML 代码将显示为在文档中，文本中。 如果将 HTML 分配给元素使用<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>属性，OuterText 将返回的所有文本中，使用标记的 HTML 中删除。</xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>       将一个值分配给 OuterText 将销毁属于元素任何子元素。"
  syntax:
    content: public string OuterText { get; set; }
    return:
      type: System.String
      description: "当前元素及此元素的子级中的文本。"
  overload: System.Windows.Forms.HtmlElement.OuterText*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "不能设置此元素之外的文本。"
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Parent
  id: Parent
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取当前元素的父元素。"
  remarks: "父属性启用发现的元素的上下文。 它是最有用事件处理程序内如<xref:System.Windows.Forms.HtmlElement.Click>，这可以激发的文档的对象层次结构中的任意位置的任何元素。</xref:System.Windows.Forms.HtmlElement.Click>       HTML 元素 （HTML 文档的顶部） 的父属性点回发到自身。 如果循环内调用父，验证循环的中断条件将当前元素的类型和类型进行比较`Parent`属性，否则你的代码可能会执行一个无限循环。"
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the Parent property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public System.Windows.Forms.HtmlElement Parent { get; }
    return:
      type: System.Windows.Forms.HtmlElement
      description: "HTML 文档层次结构中的当前元素之上的元素。"
  overload: System.Windows.Forms.HtmlElement.Parent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  id: RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "使指定的事件调用所有已注册的事件处理程序。"
  remarks: "此方法用于访问 HTML 文档对象模型 (DOM) 事件。 直接调用[IHTMLElement3::fireEvent](http://go.microsoft.com/fwlink/?LinkId=103189)方法。 有关如何使用通过 DOM<xref:System.Windows.Forms.HtmlElement>类，请参阅[上托管 HTML 文档对象模型访问未公开成员](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.Forms.HtmlElement>"
  syntax:
    content: public void RaiseEvent (string eventName);
    parameters:
    - id: eventName
      type: System.String
      description: "要引发的事件的名称。"
  overload: System.Windows.Forms.HtmlElement.RaiseEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  id: RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "如果该元素具有焦点的当前元素中，焦点中删除。"
  remarks: "调用此方法将引发<xref:System.Windows.Forms.HtmlElement.LostFocus>元素的事件。</xref:System.Windows.Forms.HtmlElement.LostFocus>       当焦点清除中使用此方法的元素时，它提供指向包含的元素，不适用于的 tab 键顺序的下一个元素的文档。"
  syntax:
    content: public void RemoveFocus ();
    parameters: []
  overload: System.Windows.Forms.HtmlElement.RemoveFocus*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "滚动包含此元素，直到此元素的顶部或底部边缘对齐与文档的窗口的文档。"
  remarks: ''
  example:
  - "The following code example finds an element by name and scrolls through the page so that the top of the element is aligned with the top of the visible page.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#12)]\n [!code-cs[System.Windows.Forms.HtmlElement#12](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#12)]"
  syntax:
    content: public void ScrollIntoView (bool alignWithTop);
    parameters:
    - id: alignWithTop
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，则对象顶部将显示在窗口的顶部。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，则对象底部将显示在窗口的底部。"
  overload: System.Windows.Forms.HtmlElement.ScrollIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  id: ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置元素边缘与其内容的左边的缘之间的距离。"
  remarks: "滚动区域的完整尺寸有使用<xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>;`ScrollLeft`和<xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>独立公开，因为这些是开发人员可以将设置滚动区域的仅有两个属性。</xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> </xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>"
  syntax:
    content: public int ScrollLeft { get; set; }
    return:
      type: System.Int32
      description: "以像素为单位，元素的左边的缘与其内容的左边的缘之间的距离。"
  overload: System.Windows.Forms.HtmlElement.ScrollLeft*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  id: ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取元素的可滚动区尺寸。"
  remarks: "如果其维度的大小超过了其内容除非元素上的溢出样式禁止呈现滚动条的元素将具有可滚动区域。       您无法直接修改滚动区域的大小，但你可以修改的元素的边缘和滚动区域的边缘之间的距离。 使用<xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>和<xref:System.Windows.Forms.HtmlElement.ScrollTop%2A>属性来实现此目的。</xref:System.Windows.Forms.HtmlElement.ScrollTop%2A> </xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>"
  syntax:
    content: public System.Drawing.Rectangle ScrollRectangle { get; }
    return:
      type: System.Drawing.Rectangle
      description: "元素的可滚动区大小和坐标位置。"
  overload: System.Windows.Forms.HtmlElement.ScrollRectangle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  id: ScrollTop
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置元素边缘与其内容的上边缘之间的距离。"
  remarks: "滚动区域的完整尺寸有使用<xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>;<xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A>和`ScrollTop`独立公开，因为这些是开发人员可以将设置滚动区域的仅有两个属性。</xref:System.Windows.Forms.HtmlElement.ScrollLeft%2A> </xref:System.Windows.Forms.HtmlElement.ScrollRectangle%2A>"
  syntax:
    content: public int ScrollTop { get; set; }
    return:
      type: System.Int32
      description: "以像素为单位，该元素的上边缘和上的边缘与其内容之间的距离。"
  overload: System.Windows.Forms.HtmlElement.ScrollTop*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  id: SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "在元素上设置已命名特性的值。"
  remarks: "HTML 中的属性是任何有效的名称-值对，该元素。 <xref:System.Windows.Forms.HtmlElement>公开所有元素，而忽略仅适用于某些类型的元素，则共有的属性`SRC`是预定义的属性`IMG`标记，例如，但不是能为`DIV`标记。</xref:System.Windows.Forms.HtmlElement> 使用<xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>和 SetAttribute 操作不公开上托管的文档对象模型 (DOM) 的属性。</xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>       如果`attributeName`不是定义的属性在元素上，SetAttribute 将定义它的新特性的元素上。       <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>和 SetAttribute 不区分大小写。</xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>       若要设置`class`属性<xref:System.Windows.Forms.HtmlElement>，你必须引用属性作为`className`指定 SetAttribute 的第一个参数时</xref:System.Windows.Forms.HtmlElement>"
  example:
  - "The following code example adds a new `IMG` element to the current document, using SetAttribute to set the `SRC` attribute for the image.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#13)]\n [!code-cs[System.Windows.Forms.HtmlElement#13](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#13)]"
  syntax:
    content: public void SetAttribute (string attributeName, string value);
    parameters:
    - id: attributeName
      type: System.String
      description: "要设置的属性的名称。"
    - id: value
      type: System.String
      description: "此属性的新值。"
  overload: System.Windows.Forms.HtmlElement.SetAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.Style
  id: Style
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置当前元素的样式的以分号分隔的列表。"
  remarks: "HTML 文档对象模型 (DOM) 使用样式 World Wide Web 协会级联样式表规范中定义以控制元素的显示。 中的样式属性的样式采用分号分隔名称-值对，与每个对，如下所示以分号分隔的格式︰`style-name1:value1;...;[style-nameN:valueN;]`设置字体`DIV`到 14 点 Times New Roman 粗体的元素，例如，您可以分配以下字符串︰ `font-face:Times New Roman;font-size:14px;font-weight:bold;` HTML DOM 中的所有可用的样式的完整列表，请参阅[样式属性](http://msdn.microsoft.com/library/ms534651.aspx)。"
  syntax:
    content: public string Style { get; set; }
    return:
      type: System.String
      description: "一个字符串，包含的所有元素的样式"
  overload: System.Windows.Forms.HtmlElement.Style*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TabIndex
  id: TabIndex
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置此元素的位置的 tab 键顺序。"
  remarks: "TabIndex 确定当用户按下 TAB 键时，HTML 文档中的哪个元素下一步将接收焦点。 默认情况下，包括在 tab 键顺序的仅有元素是`INPUT`元素，`SELECT`控件，并且任何元素其`contentEditable`属性设置为`true`。 你可以包括任何 HTML 元素的 tab 键顺序，例如`DIV`，通过将它分配显式 TabIndex。       TabIndex 范围-32767 到 32767 之间的有效值。"
  syntax:
    content: public short TabIndex { get; set; }
    return:
      type: System.Int16
      description: "Tab 键顺序中的元素的数字索引。"
  overload: System.Windows.Forms.HtmlElement.TabIndex*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.HtmlElement.TagName
  id: TagName
  parent: System.Windows.Forms.HtmlElement
  langs:
  - csharp
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取 HTML 标记的名称。"
  remarks: "在 HTML 文档对象模型中的许多元素都有属性、 属性和对这些元素，则是唯一的方法如`HREF`属性`A`元素，或`Submit`方法`FORM`。 当有一个元素可能任意类型，并且需要执行特定类型的操作，请使用 TagName。"
  example:
  - "The following code example finds all of the `IMG` tags in a document, and uses the `TagName` property to test whether the `IMG` is hyperlinked to another page; if it is, the code assigns the URL to the `ALT` attribute of the `IMG` tag, so that users can mouse over the image to see where it will take them.  \n  \n [!code-vb[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/visualbasic/HtmlElementProject/Form1.vb#7)]\n [!code-cs[System.Windows.Forms.HtmlElement#7](~/add/codesnippet/csharp/HtmlElementProjectCSharp/Form1.cs#7)]"
  syntax:
    content: public string TagName { get; }
    return:
      type: System.String
      description: "用于创建使用 HTML 标记此元素的名称。"
  overload: System.Windows.Forms.HtmlElement.TagName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Windows.Forms.HtmlElement.All
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
  fullName: System.Windows.Forms.HtmlElement.All
- uid: System.Windows.Forms.HtmlElementCollection
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementCollection
  nameWithType: HtmlElementCollection
  fullName: System.Windows.Forms.HtmlElementCollection
- uid: System.Windows.Forms.HtmlElement.AppendChild(System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild(HtmlElement)
  nameWithType: HtmlElement.AppendChild(HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.AppendChild(HtmlElement)
- uid: System.Windows.Forms.HtmlElement
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElement
  nameWithType: HtmlElement
  fullName: System.Windows.Forms.HtmlElement
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.AttachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.AttachEventHandler(String,EventHandler)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
  fullName: System.Windows.Forms.HtmlElement.CanHaveChildren
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.HtmlElement.Children
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
  fullName: System.Windows.Forms.HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.Click
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Click
  nameWithType: HtmlElement.Click
  fullName: System.Windows.Forms.HtmlElement.Click
- uid: System.Windows.Forms.HtmlElementEventHandler
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementEventHandler
  nameWithType: HtmlElementEventHandler
  fullName: System.Windows.Forms.HtmlElementEventHandler
- uid: System.Windows.Forms.HtmlElement.ClientRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
  fullName: System.Windows.Forms.HtmlElement.ClientRectangle
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler(System.String,System.EventHandler)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler(String,EventHandler)
  nameWithType: HtmlElement.DetachEventHandler(String,EventHandler)
  fullName: System.Windows.Forms.HtmlElement.DetachEventHandler(String,EventHandler)
- uid: System.Windows.Forms.HtmlElement.Document
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
  fullName: System.Windows.Forms.HtmlElement.Document
- uid: System.Windows.Forms.HtmlDocument
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlDocument
  nameWithType: HtmlDocument
  fullName: System.Windows.Forms.HtmlDocument
- uid: System.Windows.Forms.HtmlElement.DomElement
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
  fullName: System.Windows.Forms.HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.DoubleClick
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DoubleClick
  nameWithType: HtmlElement.DoubleClick
  fullName: System.Windows.Forms.HtmlElement.DoubleClick
- uid: System.Windows.Forms.HtmlElement.Drag
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Drag
  nameWithType: HtmlElement.Drag
  fullName: System.Windows.Forms.HtmlElement.Drag
- uid: System.Windows.Forms.HtmlElement.DragEnd
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragEnd
  nameWithType: HtmlElement.DragEnd
  fullName: System.Windows.Forms.HtmlElement.DragEnd
- uid: System.Windows.Forms.HtmlElement.DragLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragLeave
  nameWithType: HtmlElement.DragLeave
  fullName: System.Windows.Forms.HtmlElement.DragLeave
- uid: System.Windows.Forms.HtmlElement.DragOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DragOver
  nameWithType: HtmlElement.DragOver
  fullName: System.Windows.Forms.HtmlElement.DragOver
- uid: System.Windows.Forms.HtmlElement.Enabled
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
  fullName: System.Windows.Forms.HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals(System.Object)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals(Object)
  nameWithType: HtmlElement.Equals(Object)
  fullName: System.Windows.Forms.HtmlElement.Equals(Object)
- uid: System.Windows.Forms.HtmlElement.FirstChild
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
  fullName: System.Windows.Forms.HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus()
  nameWithType: HtmlElement.Focus()
  fullName: System.Windows.Forms.HtmlElement.Focus()
- uid: System.Windows.Forms.HtmlElement.Focusing
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focusing
  nameWithType: HtmlElement.Focusing
  fullName: System.Windows.Forms.HtmlElement.Focusing
- uid: System.Windows.Forms.HtmlElement.GetAttribute(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute(String)
  nameWithType: HtmlElement.GetAttribute(String)
  fullName: System.Windows.Forms.HtmlElement.GetAttribute(String)
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName(String)
  nameWithType: HtmlElement.GetElementsByTagName(String)
  fullName: System.Windows.Forms.HtmlElement.GetElementsByTagName(String)
- uid: System.Windows.Forms.HtmlElement.GetHashCode
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode()
  nameWithType: HtmlElement.GetHashCode()
  fullName: System.Windows.Forms.HtmlElement.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.HtmlElement.GotFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GotFocus
  nameWithType: HtmlElement.GotFocus
  fullName: System.Windows.Forms.HtmlElement.GotFocus
- uid: System.Windows.Forms.HtmlElement.Id
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
  fullName: System.Windows.Forms.HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
  fullName: System.Windows.Forms.HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
  fullName: System.Windows.Forms.HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement(System.Windows.Forms.HtmlElementInsertionOrientation,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  nameWithType: HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.InsertAdjacentElement(HtmlElementInsertionOrientation,HtmlElement)
- uid: System.Windows.Forms.HtmlElementInsertionOrientation
  parent: System.Windows.Forms
  isExternal: false
  name: HtmlElementInsertionOrientation
  nameWithType: HtmlElementInsertionOrientation
  fullName: System.Windows.Forms.HtmlElementInsertionOrientation
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String)
  nameWithType: HtmlElement.InvokeMember(String)
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String)
- uid: System.Windows.Forms.HtmlElement.InvokeMember(System.String,System.Object[])
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember(String,Object[])
  nameWithType: HtmlElement.InvokeMember(String,Object[])
  fullName: System.Windows.Forms.HtmlElement.InvokeMember(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.HtmlElement.KeyDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyDown
  nameWithType: HtmlElement.KeyDown
  fullName: System.Windows.Forms.HtmlElement.KeyDown
- uid: System.Windows.Forms.HtmlElement.KeyPress
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyPress
  nameWithType: HtmlElement.KeyPress
  fullName: System.Windows.Forms.HtmlElement.KeyPress
- uid: System.Windows.Forms.HtmlElement.KeyUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: KeyUp
  nameWithType: HtmlElement.KeyUp
  fullName: System.Windows.Forms.HtmlElement.KeyUp
- uid: System.Windows.Forms.HtmlElement.LosingFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LosingFocus
  nameWithType: HtmlElement.LosingFocus
  fullName: System.Windows.Forms.HtmlElement.LosingFocus
- uid: System.Windows.Forms.HtmlElement.LostFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: LostFocus
  nameWithType: HtmlElement.LostFocus
  fullName: System.Windows.Forms.HtmlElement.LostFocus
- uid: System.Windows.Forms.HtmlElement.MouseDown
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseDown
  nameWithType: HtmlElement.MouseDown
  fullName: System.Windows.Forms.HtmlElement.MouseDown
- uid: System.Windows.Forms.HtmlElement.MouseEnter
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseEnter
  nameWithType: HtmlElement.MouseEnter
  fullName: System.Windows.Forms.HtmlElement.MouseEnter
- uid: System.Windows.Forms.HtmlElement.MouseLeave
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseLeave
  nameWithType: HtmlElement.MouseLeave
  fullName: System.Windows.Forms.HtmlElement.MouseLeave
- uid: System.Windows.Forms.HtmlElement.MouseMove
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseMove
  nameWithType: HtmlElement.MouseMove
  fullName: System.Windows.Forms.HtmlElement.MouseMove
- uid: System.Windows.Forms.HtmlElement.MouseOver
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseOver
  nameWithType: HtmlElement.MouseOver
  fullName: System.Windows.Forms.HtmlElement.MouseOver
- uid: System.Windows.Forms.HtmlElement.MouseUp
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: MouseUp
  nameWithType: HtmlElement.MouseUp
  fullName: System.Windows.Forms.HtmlElement.MouseUp
- uid: System.Windows.Forms.HtmlElement.Name
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
  fullName: System.Windows.Forms.HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
  fullName: System.Windows.Forms.HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
  fullName: System.Windows.Forms.HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
  fullName: System.Windows.Forms.HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Equality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Equality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.op_Inequality(System.Windows.Forms.HtmlElement,System.Windows.Forms.HtmlElement)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality(HtmlElement,HtmlElement)
  nameWithType: HtmlElement.op_Inequality(HtmlElement,HtmlElement)
  fullName: System.Windows.Forms.HtmlElement.op_Inequality(HtmlElement,HtmlElement)
- uid: System.Windows.Forms.HtmlElement.OuterHtml
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
  fullName: System.Windows.Forms.HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
  fullName: System.Windows.Forms.HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
  fullName: System.Windows.Forms.HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent(System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent(String)
  nameWithType: HtmlElement.RaiseEvent(String)
  fullName: System.Windows.Forms.HtmlElement.RaiseEvent(String)
- uid: System.Windows.Forms.HtmlElement.RemoveFocus
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus()
  nameWithType: HtmlElement.RemoveFocus()
  fullName: System.Windows.Forms.HtmlElement.RemoveFocus()
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView(System.Boolean)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView(Boolean)
  nameWithType: HtmlElement.ScrollIntoView(Boolean)
  fullName: System.Windows.Forms.HtmlElement.ScrollIntoView(Boolean)
- uid: System.Windows.Forms.HtmlElement.ScrollLeft
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
  fullName: System.Windows.Forms.HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
  fullName: System.Windows.Forms.HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
  fullName: System.Windows.Forms.HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute(System.String,System.String)
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute(String,String)
  nameWithType: HtmlElement.SetAttribute(String,String)
  fullName: System.Windows.Forms.HtmlElement.SetAttribute(String,String)
- uid: System.Windows.Forms.HtmlElement.Style
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
  fullName: System.Windows.Forms.HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
  fullName: System.Windows.Forms.HtmlElement.TabIndex
- uid: System.Int16
  parent: System
  isExternal: true
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Windows.Forms.HtmlElement.TagName
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
  fullName: System.Windows.Forms.HtmlElement.TagName
- uid: System.Windows.Forms.HtmlElement.All*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: All
  nameWithType: HtmlElement.All
- uid: System.Windows.Forms.HtmlElement.AppendChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AppendChild
  nameWithType: HtmlElement.AppendChild
- uid: System.Windows.Forms.HtmlElement.AttachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: AttachEventHandler
  nameWithType: HtmlElement.AttachEventHandler
- uid: System.Windows.Forms.HtmlElement.CanHaveChildren*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: CanHaveChildren
  nameWithType: HtmlElement.CanHaveChildren
- uid: System.Windows.Forms.HtmlElement.Children*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Children
  nameWithType: HtmlElement.Children
- uid: System.Windows.Forms.HtmlElement.ClientRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ClientRectangle
  nameWithType: HtmlElement.ClientRectangle
- uid: System.Windows.Forms.HtmlElement.DetachEventHandler*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DetachEventHandler
  nameWithType: HtmlElement.DetachEventHandler
- uid: System.Windows.Forms.HtmlElement.Document*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Document
  nameWithType: HtmlElement.Document
- uid: System.Windows.Forms.HtmlElement.DomElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: DomElement
  nameWithType: HtmlElement.DomElement
- uid: System.Windows.Forms.HtmlElement.Enabled*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Enabled
  nameWithType: HtmlElement.Enabled
- uid: System.Windows.Forms.HtmlElement.Equals*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Equals
  nameWithType: HtmlElement.Equals
- uid: System.Windows.Forms.HtmlElement.FirstChild*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: FirstChild
  nameWithType: HtmlElement.FirstChild
- uid: System.Windows.Forms.HtmlElement.Focus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Focus
  nameWithType: HtmlElement.Focus
- uid: System.Windows.Forms.HtmlElement.GetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetAttribute
  nameWithType: HtmlElement.GetAttribute
- uid: System.Windows.Forms.HtmlElement.GetElementsByTagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetElementsByTagName
  nameWithType: HtmlElement.GetElementsByTagName
- uid: System.Windows.Forms.HtmlElement.GetHashCode*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: GetHashCode
  nameWithType: HtmlElement.GetHashCode
- uid: System.Windows.Forms.HtmlElement.Id*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Id
  nameWithType: HtmlElement.Id
- uid: System.Windows.Forms.HtmlElement.InnerHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerHtml
  nameWithType: HtmlElement.InnerHtml
- uid: System.Windows.Forms.HtmlElement.InnerText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InnerText
  nameWithType: HtmlElement.InnerText
- uid: System.Windows.Forms.HtmlElement.InsertAdjacentElement*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InsertAdjacentElement
  nameWithType: HtmlElement.InsertAdjacentElement
- uid: System.Windows.Forms.HtmlElement.InvokeMember*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: InvokeMember
  nameWithType: HtmlElement.InvokeMember
- uid: System.Windows.Forms.HtmlElement.Name*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Name
  nameWithType: HtmlElement.Name
- uid: System.Windows.Forms.HtmlElement.NextSibling*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: NextSibling
  nameWithType: HtmlElement.NextSibling
- uid: System.Windows.Forms.HtmlElement.OffsetParent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetParent
  nameWithType: HtmlElement.OffsetParent
- uid: System.Windows.Forms.HtmlElement.OffsetRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OffsetRectangle
  nameWithType: HtmlElement.OffsetRectangle
- uid: System.Windows.Forms.HtmlElement.op_Equality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Equality
  nameWithType: HtmlElement.op_Equality
- uid: System.Windows.Forms.HtmlElement.op_Inequality*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: op_Inequality
  nameWithType: HtmlElement.op_Inequality
- uid: System.Windows.Forms.HtmlElement.OuterHtml*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterHtml
  nameWithType: HtmlElement.OuterHtml
- uid: System.Windows.Forms.HtmlElement.OuterText*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: OuterText
  nameWithType: HtmlElement.OuterText
- uid: System.Windows.Forms.HtmlElement.Parent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Parent
  nameWithType: HtmlElement.Parent
- uid: System.Windows.Forms.HtmlElement.RaiseEvent*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RaiseEvent
  nameWithType: HtmlElement.RaiseEvent
- uid: System.Windows.Forms.HtmlElement.RemoveFocus*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: RemoveFocus
  nameWithType: HtmlElement.RemoveFocus
- uid: System.Windows.Forms.HtmlElement.ScrollIntoView*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollIntoView
  nameWithType: HtmlElement.ScrollIntoView
- uid: System.Windows.Forms.HtmlElement.ScrollLeft*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollLeft
  nameWithType: HtmlElement.ScrollLeft
- uid: System.Windows.Forms.HtmlElement.ScrollRectangle*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollRectangle
  nameWithType: HtmlElement.ScrollRectangle
- uid: System.Windows.Forms.HtmlElement.ScrollTop*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: ScrollTop
  nameWithType: HtmlElement.ScrollTop
- uid: System.Windows.Forms.HtmlElement.SetAttribute*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: SetAttribute
  nameWithType: HtmlElement.SetAttribute
- uid: System.Windows.Forms.HtmlElement.Style*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: Style
  nameWithType: HtmlElement.Style
- uid: System.Windows.Forms.HtmlElement.TabIndex*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TabIndex
  nameWithType: HtmlElement.TabIndex
- uid: System.Windows.Forms.HtmlElement.TagName*
  parent: System.Windows.Forms.HtmlElement
  isExternal: false
  name: TagName
  nameWithType: HtmlElement.TagName
