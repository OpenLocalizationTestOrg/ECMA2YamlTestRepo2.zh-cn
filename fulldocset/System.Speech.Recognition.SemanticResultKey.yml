### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultKey
  id: SemanticResultKey
  children:
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  - System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  - System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
  type: Class
  summary: "将相关联的密钥字符串<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>值来定义<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>对象。"
  remarks: "System.Speech 中的语义表达式的基本单位是<xref:System.Speech.Recognition.SemanticValue>，这是一个键/值对。</xref:System.Speech.Recognition.SemanticValue>       使用 SemanticResultKey 对象，你将标记<xref:System.Speech.Recognition.SemanticResultValue>实例中包含<xref:System.Speech.Recognition.GrammarBuilder>对象和字符串，以便可以轻松访问的值从<xref:System.Speech.Recognition.SemanticValue>上识别的实例。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>       你可以使用<xref:System.Speech.Recognition.SemanticResultValue>和 SemanticResultKey 对象，结合<xref:System.Speech.Recognition.GrammarBuilder>和<xref:System.Speech.Recognition.Choices>对象，可以定义语音识别语法的语义结构。</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> 若要访问识别结果中的语义信息，请获取<xref:System.Speech.Recognition.SemanticValue>通过<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A><xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase>属性</xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A></xref:System.Speech.Recognition.SemanticValue>的实例       有关使用<xref:System.Speech.Recognition.SemanticResultValue>和 SemanticResultKey 对象，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)和[使用 SemanticResultKey 提取 SemanticResultValue](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa)中[系统语音.NET Framework 4.0 编程指南](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043)。</xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged with a semantic key, and the <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag to verify that a password input has occurred.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized += delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n  {  \n    SemanticValue semantics = eventArgs.Result.Semantics;  \n    RecognitionResult result=eventArgs.Result;  \n  \n    if (!semantics.ContainsKey(\"Password\"))   \n    {  \n      SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n    }  \n    else   \n    {  \n      RecognizedAudio pwdAudio = result.GetAudioForWordRange(result.Words[3], result.Words[result.Words.Count - 1]);  \n      MemoryStream pwdMemoryStream = new MemoryStream();  \n      pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n      if (!IsValidPwd(pwdMemoryStream))   \n      {  \n        string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n        FileStream waveStream = new FileStream(badPwd, FileMode.Create);  \n        pwdAudio.WriteToWaveStream(waveStream);  \n        waveStream.Flush();  \n        waveStream.Close();  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);  \n  \n      }  \n    }  \n  };  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_semanticKey.DebugSummary}")]

      public class SemanticResultKey
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  id: '#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将语义密钥分配给一个或多个<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>用于创建语音识别语法的对象。"
  remarks: "由于隐式转换，`builders`参数支持<xref:System.Speech.Recognition.SemanticResultValue>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.Choices>，和<xref:System.String>对象也。</xref:System.String> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 有关隐式转换的详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>。</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>       当执行识别操作，<xref:System.Speech.Recognition.GrammarBuilder>中提供的对象`builders`自变量将被视为为顺序。</xref:System.Speech.Recognition.GrammarBuilder> 例如，如果以下<xref:System.Speech.Recognition.SemanticResultValue>用于构造<xref:System.Speech.Recognition.Grammar>，识别引擎的输入必须能够识别的序列中包含单词&quot;the quick brown fox&quot;。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(       &quot;stringTest&quot;, new GrammarBuilder[] {       new GrammarBuilder(&quot;the&quot;),       new GrammarBuilder(&quot;quick&quot;),       new GrammarBuilder(&quot;brown&quot;),       new GrammarBuilder(&quot;fox&quot;)});   ````semanticResultKey`自变量包含使用标记访问<xref:System.Speech.Recognition.SemanticValue>这可能会返回。</xref:System.Speech.Recognition.SemanticValue>       <xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>由<xref:System.Speech.Recognition.GrammarBuilder>提供的实例`builders`参数。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       如果<xref:System.Speech.Recognition.GrammarBuilder>对象包含的任何定义实例<xref:System.Speech.Recognition.SemanticResultValue>的值<xref:System.Speech.Recognition.SemanticValue>是`null`。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>       如果<xref:System.Speech.Recognition.GrammarBuilder>中提供的对象`builders`参数提供无标记 (不与关联<xref:System.Speech.Recognition.SemanticResultKey>对象)<xref:System.Speech.Recognition.SemanticResultValue>识别逻辑，该实例使用的实例<xref:System.Speech.Recognition.SemanticResultValue>将定义<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>生成。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder>       应该发出一个，并只有一个无标记<xref:System.Speech.Recognition.SemanticResultValue>实例中<xref:System.Speech.Recognition.GrammarBuilder>指定的对象`builders`参数。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue> 如果多个实例无标记<xref:System.Speech.Recognition.SemanticResultValue>与关联<xref:System.Speech.Recognition.SemanticResultKey>，每个将尝试对集的值<xref:System.Speech.Recognition.SemanticValue>识别结果的生成。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 不允许这样做，并且在它尝试使用时，识别器将生成异常<xref:System.Speech.Recognition.Grammar>创建使用如<xref:System.Speech.Recognition.SemanticResultKey>实例。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Grammar>       实例<xref:System.Speech.Recognition.SemanticResultValue>中包含<xref:System.Speech.Recognition.GrammarBuilder>指定的对象`builders`参数和已与另一个关联<xref:System.Speech.Recognition.SemanticResultKey>对当前没有影响<xref:System.Speech.Recognition.SemanticResultKey>实例。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> to recognize password input of the form \"My password is …\", where the actual input is matched with a wildcard.  \n  \n The wildcard is tagged by a <xref:System.Speech.Recognition.SpeechRecognizer> whose key value is \"Password\". The <xref:System.Speech.Recognition.Grammar.SpeechRecognized> handler checks for the presence of this tag, obtains the audio input of the password, and verifies the password.  \n  \n```c#  \nprivate void pwdGrammar()   \n{  \n  GrammarBuilder pwdBuilder = new GrammarBuilder(\"My Password is\");  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey wildcardKey= new SemanticResultKey(\"Password\", wildcardBuilder);  \n  pwdBuilder+=wildcardKey;  \n  Grammar grammar = new Grammar(pwdBuilder);  \n  grammar.Name = \"Password input\";  \n  \n  grammar.SpeechRecognized +=   \n    delegate(object sender, SpeechRecognizedEventArgs eventArgs)   \n    {  \n      SemanticValue semantics = eventArgs.Result.Semantics;  \n      RecognitionResult result=eventArgs.Result;  \n  \n      if (!semantics.ContainsKey(\"Password\"))   \n      {  \n        SpeechUI.SendTextFeedback(eventArgs.Result, \"No Password Provided\", false);  \n      }  \n      else   \n      {  \n        RecognizedAudio pwdAudio = result.GetAudioForWordRange(  \n                  result.Words[3],  \n                  result.Words[result.Words.Count - 1]);  \n                  MemoryStream pwdMemoryStream = new MemoryStream();  \n                  pwdAudio.WriteToAudioStream(pwdMemoryStream);  \n        if (!IsValidPwd(pwdMemoryStream))   \n        {  \n          string badPwd = System.IO.Path.GetTempPath() + \"BadPwd\" + (new Random()).Next().ToString() + \".wav\";  \n          FileStream waveStream = new FileStream(badPwd, FileMode.Create);    \n          pwdAudio.WriteToWaveStream(waveStream);  \n          waveStream.Flush();  \n          waveStream.Close();  \n          SpeechUI.SendTextFeedback(eventArgs.Result, \"Invalid Password\", false);      \n        }  \n      }  \n    };  \n  \n  grammar.Enabled = true;  \n  _recognizer.LoadGrammar(grammar);  \n  UpdateGrammarTree(_grammarTreeView, _recognizer);  \n  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, System.Speech.Recognition.GrammarBuilder[] builders);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "在标记上以用作语义密钥访问<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>与关联实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>指定的对象`builders`自变量。"
    - id: builders
      type: System.Speech.Recognition.GrammarBuilder[]
      description: "将与关联的语法组件数组<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>对象中定义的标记与访问`semanticResultKey`。"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  id: '#ctor(System.String,System.String[])'
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将语义密钥分配给一个或多个<xref:System.String>用于创建语音识别语法的实例。</xref:System.String>"
  remarks: "当执行识别操作，<xref:System.String>中使用的对象`phrases`参数将被视为为顺序。</xref:System.String> 例如，如果以下<xref:System.Speech.Recognition.SemanticResultValue>用于构造<xref:System.Speech.Recognition.Grammar>，识别引擎的输入必须能够识别的序列中包含单词&quot;the quick brown fox&quot;。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticResultValue>      ```c#   SemanticResultKey stringTest=new SemanticResultKey(&quot;stringTest&quot;,                                    new string[] {                                                  &quot;the&quot;,                                                  &quot;quick&quot;,                                                  &quot;brown&quot;,                                                  &quot;fox&quot;});   ````semanticResultKey`自变量确定使用的密钥访问<xref:System.Speech.Recognition.SemanticValue>这可能会返回。</xref:System.Speech.Recognition.SemanticValue>       如果构造<xref:System.Speech.Recognition.Grammar>使用<xref:System.Speech.Recognition.GrammarBuilder>对象，其中包含对具有字符串对象的数组的语义键<xref:System.Speech.Recognition.SemanticValue.Value%2A>的<xref:System.Speech.Recognition.SemanticValue>由识别操作产生将为识别中使用的字符串。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar> 在前面的示例中，这意味着，<xref:System.Speech.Recognition.SemanticValue.Value%2A>将&quot;the quick brown fox&quot;。</xref:System.Speech.Recognition.SemanticValue.Value%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> from a <xref:System.Speech.Recognition.GrammarBuilder> object that uses a <xref:System.Speech.Recognition.SemanticResultKey>, which is defined by an array of <xref:System.String> objects.  \n  \n A recognition engine using the <xref:System.Speech.Recognition.Grammar> created will recognize the phrase \"color red green blue zero\". The semantics of the <xref:System.Speech.Recognition.RecognizedPhrase> returned by recognition will contain a <xref:System.Speech.Recognition.SemanticValue> with a <xref:System.Speech.Recognition.SemanticValue.Value%2A> of \"red green blue\". You can access the <xref:System.Speech.Recognition.SemanticValue> using the \"code\" tag.  \n  \n Because of the `SemanticResultValue(\"zero\", 5)` appended to the <xref:System.Speech.Recognition.GrammarBuilder>, the root <xref:System.Speech.Recognition.SemanticValue> object in the <xref:System.Speech.Recognition.RecognizedPhrase> will have a value of 5.  \n  \n```c#  \nprivate void keyTest()   \n{  \n  // Say \"color red green blue zero\"  \n  GrammarBuilder gb = new GrammarBuilder(\"color\") +  \n                        new SemanticResultKey(\"code\",   \n                          (new string[] {\"red\", \"green\", \"blue\"})) +  \n                        new SemanticResultValue(\"zero\", 5);  \n  Grammar g = new Grammar(gb);  \n  g.Name = \"keyTest\";  \n  _recognizer.LoadGrammar(g);  \n}  \n```"
  syntax:
    content: public SemanticResultKey (string semanticResultKey, string[] phrases);
    parameters:
    - id: semanticResultKey
      type: System.String
      description: "标记要使用访问<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>与关联实例<xref:System.String>指定的对象`phrases`自变量。</xref:System.String>"
    - id: phrases
      type: System.String[]
      description: "一个或多个<xref:System.String>其串联的文本将与关联的对象<xref href=&quot;System.Speech.Recognition.SemanticValue&quot;></xref>对象中定义的标记与访问`semanticResultKey`。</xref:System.String>"
  overload: System.Speech.Recognition.SemanticResultKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "返回的实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>构造从当前<xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;></xref>实例。"
  remarks: "使用<xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>相当于使用<xref:System.Speech.Recognition.GrammarBuilder>构造函数采用<xref:System.Speech.Recognition.SemanticResultKey>作为自变量 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29>)。</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultKey%29> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder%2A>"
  example:
  - "The following example creates a <xref:System.Speech.Recognition.Grammar> object that supports commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances. The <xref:System.Speech.Recognition.GrammarBuilder> instances are obtained through the ToGrammarBuilder method on the <xref:System.Speech.Recognition.SemanticResultValue> objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling ToGrammarBuilder on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in `colorChoice`.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RGB.  \n  // Choices constructors do not take SemanticResultValue parameters, so cast   \n  // the SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n    SemanticResultValue colorValue=new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.  \n    colorChoice.Add(colorValue.ToGrammarBuilder());      \n  }  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with introductory phrase and the color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the Grammar object, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] {makeBackgroundBuilder, configureBackgroundBuilder}));  \n  grammar.Name = \"Make Background /Configure background as\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "返回的实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>构造从当前<xref href=&quot;System.Speech.Recognition.SemanticResultKey&quot;></xref>实例。"
  overload: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.Speech.Recognition.GrammarBuilder[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,GrammarBuilder[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,GrammarBuilder[])
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder[]
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder[]
  spec.csharp:
  - uid: System.Speech.Recognition.GrammarBuilder
    name: GrammarBuilder
    nameWithType: GrammarBuilder
    fullName: GrammarBuilder[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.#ctor(System.String,System.String[])
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey(String,String[])
  nameWithType: SemanticResultKey.SemanticResultKey(String,String[])
  fullName: System.Speech.Recognition.SemanticResultKey.SemanticResultKey(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultKey.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultKey.#ctor*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey.SemanticResultKey
- uid: System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultKey
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultKey.ToGrammarBuilder
