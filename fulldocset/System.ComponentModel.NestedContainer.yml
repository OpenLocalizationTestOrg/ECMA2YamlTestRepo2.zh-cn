### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.NestedContainer
  id: NestedContainer
  children:
  - System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  - System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  - System.ComponentModel.NestedContainer.GetService(System.Type)
  - System.ComponentModel.NestedContainer.Owner
  - System.ComponentModel.NestedContainer.OwnerName
  langs:
  - csharp
  name: NestedContainer
  nameWithType: NestedContainer
  fullName: System.ComponentModel.NestedContainer
  type: Class
  summary: "提供的基实现<xref href=&quot;System.ComponentModel.INestedContainer&quot;></xref>接口，使容器具有所属的组件。"
  remarks: "NestedContainer 类是的简单实现<xref:System.ComponentModel.INestedContainer>接口，定义了逻辑上包含零个或多个其他组件，并且由父组件的组件。</xref:System.ComponentModel.INestedContainer> 嵌套容器的行为不同于标准<xref:System.ComponentModel.Container>多种使用方式上，其中包括:-如站点特征<xref:System.ComponentModel.Component.DesignMode%2A>和<xref:System.ComponentModel.Component.GetService%2A>路由通过所属组件的站点。</xref:System.ComponentModel.Component.GetService%2A> </xref:System.ComponentModel.Component.DesignMode%2A> </xref:System.ComponentModel.Container>      -此站点的<xref:System.ComponentModel.ISite.Name%2A>属性是限定的名中包含所属组件的名称后, 跟一个句点 （.） 和子组件的名称。</xref:System.ComponentModel.ISite.Name%2A>      -<xref:System.ComponentModel.NestedContainer.GetService%2A>支持<xref:System.ComponentModel.INestedContainer>作为一项服务。</xref:System.ComponentModel.INestedContainer> </xref:System.ComponentModel.NestedContainer.GetService%2A>      -当释放所属的组件，以及已释放的容器。       此外，设计器将以不同方式处理嵌套的容器。 设计器宿主才容器感兴趣-与主机相关联。 因此，组件添加和移除事件不会引发一个组件添加到或从嵌套容器中移除时。 但是，因为服务流过到嵌套的容器时，更改嵌套容器中的组件时，将引发组件更改事件。       此差别在跟踪事件还会影响撤消功能，它与序列化密切相关。 标准撤消引擎使用<xref:System.ComponentModel.Design.IReferenceService>来跟踪对组件所做的更改。</xref:System.ComponentModel.Design.IReferenceService> 如果撤消引擎无法识别通过引用服务组件的名称，引擎将忽略该组件的任何的更改。 仅当它们公开为中其所有者的相同名称的公共只读属性，此服务自动识别对包含的组件的更改。 否则，开发人员必须通过由所有者组件更改事件。 例如，如果嵌套组件的`Text`属性重新呈现为其所属组件上`Address`属性，当`Text`属性发生更改时，属性必须以编程方式更改相应`Address`属性，否则无需通过撤消将不跟踪更改。"
  syntax:
    content: 'public class NestedContainer : System.ComponentModel.Container, IDisposable, System.ComponentModel.INestedContainer'
  inheritance:
  - System.Object
  - System.ComponentModel.Container
  implements:
  - System.ComponentModel.INestedContainer
  - System.IDisposable
  inheritedMembers:
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.Add(System.ComponentModel.IComponent,System.String)
  - System.ComponentModel.Container.Components
  - System.ComponentModel.Container.Dispose
  - System.ComponentModel.Container.Remove(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.RemoveWithoutUnsiting(System.ComponentModel.IComponent)
  - System.ComponentModel.Container.ValidateName(System.ComponentModel.IComponent,System.String)
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  id: '#ctor(System.ComponentModel.IComponent)'
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: NestedContainer(IComponent)
  nameWithType: NestedContainer.NestedContainer(IComponent)
  fullName: System.ComponentModel.NestedContainer.NestedContainer(IComponent)
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.NestedContainer&quot;></xref>类。"
  remarks: "此构造函数在其所有者中登记<xref:System.ComponentModel.IComponent.Disposed>事件以便嵌套的容器的<xref:System.ComponentModel.NestedContainer.Dispose%2A>将自动调用方法。</xref:System.ComponentModel.NestedContainer.Dispose%2A> </xref:System.ComponentModel.IComponent.Disposed>"
  syntax:
    content: public NestedContainer (System.ComponentModel.IComponent owner);
    parameters:
    - id: owner
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>拥有此嵌套的容器。"
  overload: System.ComponentModel.NestedContainer.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>owner</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  id: CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: CreateSite(IComponent,String)
  nameWithType: NestedContainer.CreateSite(IComponent,String)
  fullName: System.ComponentModel.NestedContainer.CreateSite(IComponent,String)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建一个网站，用于在容器内的组件。"
  remarks: "如果`name`参数是`null`、<xref:System.ComponentModel.IComponent>添加到嵌套容器没有标识的名称。</xref:System.ComponentModel.IComponent>"
  syntax:
    content: protected override System.ComponentModel.ISite CreateSite (System.ComponentModel.IComponent component, string name);
    parameters:
    - id: component
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>若要创建一个站点。"
    - id: name
      type: System.String
      description: "要分配给名称`component`，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>要跳过的名称分配。"
    return:
      type: System.ComponentModel.ISite
      description: "新创建<xref href=&quot;System.ComponentModel.ISite&quot;> </xref>。"
  overload: System.ComponentModel.NestedContainer.CreateSite*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>component</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: NestedContainer.Dispose(Boolean)
  fullName: System.ComponentModel.NestedContainer.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "释放由嵌套容器使用的资源。"
  remarks: "此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.ComponentModel.NestedContainer>引用。</xref:System.ComponentModel.NestedContainer> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.ComponentModel.NestedContainer.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: NestedContainer.GetService(Type)
  fullName: System.ComponentModel.NestedContainer.GetService(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "如果可用，请获取指定类型的服务对象。"
  remarks: "此方法将替代<xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName>方法。</xref:System.ComponentModel.Container.GetService%2A?displayProperty=fullName> 此实现仅解决请求<xref:System.ComponentModel.INestedContainer>和<xref:System.ComponentModel.IContainer>服务。</xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.INestedContainer>"
  syntax:
    content: protected override object GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "<xref:System.Type>要检索的服务。</xref:System.Type>"
    return:
      type: System.Object
      description: "<xref:System.Object>实现请求的服务，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果无法解析服务。</xref:System.Object>"
  overload: System.ComponentModel.NestedContainer.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.Owner
  id: Owner
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: Owner
  nameWithType: NestedContainer.Owner
  fullName: System.ComponentModel.NestedContainer.Owner
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取此嵌套容器所属的组件。"
  remarks: "所属的组件是区分嵌套的容器和普通的容器的特征。"
  syntax:
    content: public System.ComponentModel.IComponent Owner { get; }
    return:
      type: System.ComponentModel.IComponent
      description: "<xref href=&quot;System.ComponentModel.IComponent&quot;> </xref>拥有此嵌套的容器。"
  overload: System.ComponentModel.NestedContainer.Owner*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.NestedContainer.OwnerName
  id: OwnerName
  parent: System.ComponentModel.NestedContainer
  langs:
  - csharp
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
  fullName: System.ComponentModel.NestedContainer.OwnerName
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取拥有的组件的名称。"
  remarks: "可能会重写此属性以提供自定义的所有者名称。 默认实现将搜索该所有者的站点<xref:System.ComponentModel.INestedSite>和调用<xref:System.ComponentModel.INestedSite.FullName%2A>，或<xref:System.ComponentModel.ISite.Name%2A>如果有任何嵌套的站点。</xref:System.ComponentModel.ISite.Name%2A> </xref:System.ComponentModel.INestedSite.FullName%2A> </xref:System.ComponentModel.INestedSite> 如果都不可用，此属性返回`null`。"
  syntax:
    content: protected virtual string OwnerName { get; }
    return:
      type: System.String
      description: "所属的组件的名称。"
  overload: System.ComponentModel.NestedContainer.OwnerName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Container
  isExternal: false
  name: System.ComponentModel.Container
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.NestedContainer.#ctor(System.ComponentModel.IComponent)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: NestedContainer(IComponent)
  nameWithType: NestedContainer.NestedContainer(IComponent)
  fullName: System.ComponentModel.NestedContainer.NestedContainer(IComponent)
- uid: System.ComponentModel.IComponent
  parent: System.ComponentModel
  isExternal: false
  name: IComponent
  nameWithType: IComponent
  fullName: System.ComponentModel.IComponent
- uid: System.ComponentModel.NestedContainer.CreateSite(System.ComponentModel.IComponent,System.String)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: CreateSite(IComponent,String)
  nameWithType: NestedContainer.CreateSite(IComponent,String)
  fullName: System.ComponentModel.NestedContainer.CreateSite(IComponent,String)
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.NestedContainer.Dispose(System.Boolean)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: NestedContainer.Dispose(Boolean)
  fullName: System.ComponentModel.NestedContainer.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.NestedContainer.GetService(System.Type)
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: GetService(Type)
  nameWithType: NestedContainer.GetService(Type)
  fullName: System.ComponentModel.NestedContainer.GetService(Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.NestedContainer.Owner
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Owner
  nameWithType: NestedContainer.Owner
  fullName: System.ComponentModel.NestedContainer.Owner
- uid: System.ComponentModel.NestedContainer.OwnerName
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
  fullName: System.ComponentModel.NestedContainer.OwnerName
- uid: System.ComponentModel.NestedContainer.#ctor*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: NestedContainer
  nameWithType: NestedContainer.NestedContainer
- uid: System.ComponentModel.NestedContainer.CreateSite*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: CreateSite
  nameWithType: NestedContainer.CreateSite
- uid: System.ComponentModel.NestedContainer.Dispose*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Dispose
  nameWithType: NestedContainer.Dispose
- uid: System.ComponentModel.NestedContainer.GetService*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: GetService
  nameWithType: NestedContainer.GetService
- uid: System.ComponentModel.NestedContainer.Owner*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: Owner
  nameWithType: NestedContainer.Owner
- uid: System.ComponentModel.NestedContainer.OwnerName*
  parent: System.ComponentModel.NestedContainer
  isExternal: false
  name: OwnerName
  nameWithType: NestedContainer.OwnerName
