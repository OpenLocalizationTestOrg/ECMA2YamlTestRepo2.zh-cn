### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.SqlDataSourceView
  id: SqlDataSourceView
  children:
  - System.Web.UI.WebControls.SqlDataSourceView.#ctor(System.Web.UI.WebControls.SqlDataSource,System.String,System.Web.HttpContext)
  - System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter
  - System.Web.UI.WebControls.SqlDataSourceView.CanDelete
  - System.Web.UI.WebControls.SqlDataSourceView.CanInsert
  - System.Web.UI.WebControls.SqlDataSourceView.CanPage
  - System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount
  - System.Web.UI.WebControls.SqlDataSourceView.CanSort
  - System.Web.UI.WebControls.SqlDataSourceView.CanUpdate
  - System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection
  - System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand
  - System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType
  - System.Web.UI.WebControls.SqlDataSourceView.Deleted
  - System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters
  - System.Web.UI.WebControls.SqlDataSourceView.Deleting
  - System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)
  - System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.SqlDataSourceView.FilterExpression
  - System.Web.UI.WebControls.SqlDataSourceView.Filtering
  - System.Web.UI.WebControls.SqlDataSourceView.FilterParameters
  - System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.SqlDataSourceView.InsertCommand
  - System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType
  - System.Web.UI.WebControls.SqlDataSourceView.Inserted
  - System.Web.UI.WebControls.SqlDataSourceView.Inserting
  - System.Web.UI.WebControls.SqlDataSourceView.InsertParameters
  - System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState
  - System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)
  - System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString
  - System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  - System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix
  - System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)
  - System.Web.UI.WebControls.SqlDataSourceView.SaveViewState
  - System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)
  - System.Web.UI.WebControls.SqlDataSourceView.SelectCommand
  - System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType
  - System.Web.UI.WebControls.SqlDataSourceView.Selected
  - System.Web.UI.WebControls.SqlDataSourceView.Selecting
  - System.Web.UI.WebControls.SqlDataSourceView.SelectParameters
  - System.Web.UI.WebControls.SqlDataSourceView.SortParameterName
  - System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState
  - System.Web.UI.WebControls.SqlDataSourceView.TrackViewState
  - System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand
  - System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType
  - System.Web.UI.WebControls.SqlDataSourceView.Updated
  - System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters
  - System.Web.UI.WebControls.SqlDataSourceView.Updating
  langs:
  - csharp
  name: SqlDataSourceView
  nameWithType: SqlDataSourceView
  fullName: System.Web.UI.WebControls.SqlDataSourceView
  type: Class
  summary: "支持<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件并提供用于数据绑定控件可以执行对关系数据库的 SQL 数据操作的接口。"
  remarks: "SqlDataSourceView 类主要用于数据绑定控件，而不是页的代码中的可编程对象使用。       ASP.NET 数据源控件包含一个或多个数据的列表，表示由数据源视图对象。 SqlDataSourceView 类扩展<xref:System.Web.UI.DataSourceView>类中，定义的功能<xref:System.Web.UI.WebControls.SqlDataSource>控件与它关联，并实现数据源控件的基本数据功能。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.DataSourceView> SqlDataSourceView 类实现的数据功能<xref:System.Web.UI.WebControls.SqlDataSource>控制，包括<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>， <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A>， <xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A>，和<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>操作，排序、 筛选和管理保留在视图状态的设置。</xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.Insert%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> </xref:System.Web.UI.WebControls.SqlDataSource>       尽管 SqlDataSourceView 对象不直接公开对页面开发人员<xref:System.Web.UI.WebControls.SqlDataSource>控件，许多其属性都是。</xref:System.Web.UI.WebControls.SqlDataSource> 数据源视图执行的最基本操作是从基础数据库使用的数据检索<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法，检索<xref:System.Collections.IEnumerable>数据项的集合。</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> SqlDataSourceView 类实现从关系数据库使用 SQL 查询检索数据。 以获得更大的灵活性和安全性，可以参数化 SQL 查询。 以下数据检索方法、 属性和事件由 SqlDataSourceView 实现并直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向页开发人员和其他调用方的控件:-<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>属性-<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>属性-<xref:System.Web.UI.WebControls.SqlDataSource.Selecting>事件-<xref:System.Web.UI.WebControls.SqlDataSource.Selected>事件 SqlDataSourceView 对象关系数据库使用 SQL 命令中支持更新数据。</xref:System.Web.UI.WebControls.SqlDataSource.Selected> </xref:System.Web.UI.WebControls.SqlDataSource.Selecting> </xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 以获得更大的灵活性和安全性，可以参数化 SQL 命令。 数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>，可以配置为自动通过 SqlDataSourceView，而其他控件则不能执行更新。</xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> 以下更新方法、 属性和事件由 SqlDataSourceView 实现并直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向页开发人员和其他调用方的控件:-<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A>属性-<xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A>属性-<xref:System.Web.UI.WebControls.SqlDataSource.Updating>事件-<xref:System.Web.UI.WebControls.SqlDataSource.Updated>事件 SqlDataSourceView 支持将新的数据行插入到关系数据库。</xref:System.Web.UI.WebControls.SqlDataSource.Updated> </xref:System.Web.UI.WebControls.SqlDataSource.Updating> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 中指定的 SQL 命令<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>属性可以参数化以获得更大的灵活性和安全性。</xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>，可以配置为执行自动使用 SqlDataSourceView，而其他控件则不能插入。</xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> 以下插入方法、 属性和事件是由 SqlDataSourceView 实现并且直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向页开发人员和其他调用方的控件:-<xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A>属性-<xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A>属性-<xref:System.Web.UI.WebControls.SqlDataSource.Inserting>事件-<xref:System.Web.UI.WebControls.SqlDataSource.Inserted>事件 SqlDataSourceView 对象还支持从关系数据库中删除数据。</xref:System.Web.UI.WebControls.SqlDataSource.Inserted> </xref:System.Web.UI.WebControls.SqlDataSource.Inserting> </xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 与其他命令一样的 SQL 命令中指定<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>属性可以参数化以获得更大的灵活性和安全性。</xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>，可以配置为执行自动使用 SqlDataSourceView，而其他控件则不能删除。</xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> 以下删除方法、 属性和事件是由 SqlDataSourceView 实现并且直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向页开发人员和其他调用方的控件:-<xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A>属性-<xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A>属性-<xref:System.Web.UI.WebControls.SqlDataSource.Deleting>事件-<xref:System.Web.UI.WebControls.SqlDataSource.Deleted>动态用于数据检索过程中筛选的数据的子句时，事件数据检索是更强大。</xref:System.Web.UI.WebControls.SqlDataSource.Deleted> </xref:System.Web.UI.WebControls.SqlDataSource.Deleting> </xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSource> 换而言之，SQL 查询使用静态其中子句不为灵活而有效的 SQL 查询作为其中 WHERE 子句中的值绑定到可以更改，如 Web 窗体页上的控件中显示的值的值。 而不是重新生成 SQL 查询和设置<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>每个页面加载的属性，可以使用<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>和<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>属性要应用到数据检索的动态筛选。</xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 这些属性由 SqlDataSourceView 实现并直接通过公开其<xref:System.Web.UI.WebControls.SqlDataSource>向数据绑定控件和其他调用方的控件。</xref:System.Web.UI.WebControls.SqlDataSource>       您可以通过在检索数据进行排序<xref:System.Web.UI.WebControls.SqlDataSource>控件通过添加一个 ORDER BY 子句，这会导致数据库以执行为你排序，当你检索数据时，或对数据进行排序在内存中检索之后。</xref:System.Web.UI.WebControls.SqlDataSource> 你可以通过设置提供到 SqlDataSourceView 排序表达式<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>属性<xref:System.Web.UI.DataSourceSelectArguments>对象传递给<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> </xref:System.Web.UI.DataSourceSelectArguments> </xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> 语法<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>属性是相同的语法<xref:System.Data.DataView.Sort%2A?displayProperty=fullName>属性。</xref:System.Data.DataView.Sort%2A?displayProperty=fullName> </xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A> 如果使用存储的过程来检索数据，你还可以使用<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>属性指定一个参数，专门用于对存储的过程调用的结果进行排序。</xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>       如果多个用户可以同时更改数据库，则并发冲突的可能性。 <xref:System.Web.UI.WebControls.SqlDataSource>控件具有通过控件并发<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection?displayProperty=fullName>属性。</xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource> 中实现的功能<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection?displayProperty=fullName>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection?displayProperty=fullName>       与许多其他 Web 服务器控件中，实现 SqlDataSourceView<xref:System.Web.UI.IStateManager>接口并使用视图状态在页请求之间跟踪其状态。</xref:System.Web.UI.IStateManager> 实现<xref:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState%2A>和属性和<xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A>， <xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>，和<xref:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState%2A>方法用于启用控件的视图状态跟踪。</xref:System.Web.UI.WebControls.SqlDataSourceView.TrackViewState%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.LoadViewState%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState%2A> 有关详细信息，请参阅[ASP.NET 状态管理概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: 'public class SqlDataSourceView : System.Web.UI.DataSourceView, System.Web.UI.IStateManager'
  inheritance:
  - System.Object
  - System.Web.UI.DataSourceView
  implements:
  - System.Web.UI.IStateManager
  inheritedMembers:
  - System.Web.UI.DataSourceView.CanExecute(System.String)
  - System.Web.UI.DataSourceView.DataSourceViewChanged
  - System.Web.UI.DataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  - System.Web.UI.DataSourceView.Events
  - System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.DataSourceView.ExecuteCommand(System.String,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  - System.Web.UI.DataSourceView.Insert(System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  - System.Web.UI.DataSourceView.Name
  - System.Web.UI.DataSourceView.OnDataSourceViewChanged(System.EventArgs)
  - System.Web.UI.DataSourceView.Select(System.Web.UI.DataSourceSelectArguments,System.Web.UI.DataSourceViewSelectCallback)
  - System.Web.UI.DataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary,System.Web.UI.DataSourceViewOperationCallback)
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.#ctor(System.Web.UI.WebControls.SqlDataSource,System.String,System.Web.HttpContext)
  id: '#ctor(System.Web.UI.WebControls.SqlDataSource,System.String,System.Web.HttpContext)'
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: SqlDataSourceView(SqlDataSource,String,HttpContext)
  nameWithType: SqlDataSourceView.SqlDataSourceView(SqlDataSource,String,HttpContext)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SqlDataSourceView(SqlDataSource,String,HttpContext)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>设置指定的类<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件作为当前视图的所有者。"
  remarks: "将调用 SqlDataSourceView 构造函数<xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A>方法以返回具有指定的数据源视图的新实例`name`参数。</xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A> <xref:System.Web.UI.WebControls.SqlDataSource>控件所关联只使用一个<xref:System.Web.UI.WebControls.SqlDataSourceView>对象在任一时刻，并始终将视图命名`Table`，尽管此命名限制施加的<xref:System.Web.UI.WebControls.SqlDataSource>控制，不<xref:System.Web.UI.WebControls.SqlDataSourceView>。</xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSource> 您可以重写<xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A>方法，以支持具有不同的命名约定的视图。</xref:System.Web.UI.WebControls.SqlDataSource.GetView%2A>       <xref:System.Web.HttpContext>通过传递的对象`context`如访问参数对象的数据源视图通过使用参数<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>和<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> </xref:System.Web.HttpContext>"
  syntax:
    content: public SqlDataSourceView (System.Web.UI.WebControls.SqlDataSource owner, string name, System.Web.HttpContext context);
    parameters:
    - id: owner
      type: System.Web.UI.WebControls.SqlDataSource
      description: "数据源控件与其<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>关联。"
    - id: name
      type: System.String
      description: "拥有它的数据源控件的作用域内的数据源视图中唯一名称。"
    - id: context
      type: System.Web.HttpContext
      description: "当前<xref href=&quot;System.Web.HttpContext&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter
  id: CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSourceView.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否任何参数时，数据检索操作已取消中包含<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters*>集合的计算结果为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters*>"
  remarks: "值<xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>属性存储在视图状态。</xref:System.Web.UI.WebControls.SqlDataSource.CancelSelectOnNullParameter%2A>"
  syntax:
    content: public bool CancelSelectOnNullParameter { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数据检索操作已取消时中包含的某个参数<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters*>集合的计算结果为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectParameters*> 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanDelete
  id: CanDelete
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: CanDelete
  nameWithType: SqlDataSourceView.CanDelete
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanDelete
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象与当前的<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件支持删除操作。"
  remarks: "CanDelete 属性返回`true`如果<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>属性设置。</xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> 如果所有数据属性未设置或未正确设置，删除操作可能仍会失败。"
  syntax:
    content: public override bool CanDelete { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果支持该操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.CanDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanInsert
  id: CanInsert
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: CanInsert
  nameWithType: SqlDataSourceView.CanInsert
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanInsert
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象与当前的<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件支持插入操作。"
  remarks: "CanInsert 属性返回`true`如果<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>属性设置。</xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> 如果所有数据属性未设置或未正确设置，插入操作可能仍会失败。"
  syntax:
    content: public override bool CanInsert { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果支持该操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.CanInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanPage
  id: CanPage
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: CanPage
  nameWithType: SqlDataSourceView.CanPage
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanPage
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象与当前的<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件支持对检索到的数据进行分页。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView>对象不支持分页。</xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: public override bool CanPage { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>在所有情况下。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.CanPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount
  id: CanRetrieveTotalRowCount
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: CanRetrieveTotalRowCount
  nameWithType: SqlDataSourceView.CanRetrieveTotalRowCount
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象与当前的<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件支持检索数据行，集以及数据的总行数。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView>对象不支持检索行计数。</xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: public override bool CanRetrieveTotalRowCount { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>在所有情况下。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanSort
  id: CanSort
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: CanSort
  nameWithType: SqlDataSourceView.CanSort
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanSort
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象与当前的<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件支持检索到的数据的排序的视图。"
  remarks: "CanSort 属性返回`true`，如果当前<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode>值和<xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A>属性设置。</xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName%2A> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>"
  syntax:
    content: public override bool CanSort { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果支持进行排序;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.CanSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanUpdate
  id: CanUpdate
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: CanUpdate
  nameWithType: SqlDataSourceView.CanUpdate
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanUpdate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象与当前的<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件支持更新操作。"
  remarks: "CanUpdate 属性返回`true`如果<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>属性设置。</xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> 如果所有数据属性未设置或未正确设置，删除操作可能仍会失败。"
  syntax:
    content: public override bool CanUpdate { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果支持该操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.CanUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: SqlDataSourceView.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置值，该值指示如何<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件执行更新和删除操作时在基础的行中的数据操作期间数据库更改。"
  remarks: "ConflictDetection 属性确定的旧和新值的参数适用于`Update`方法。 例如，如果该命令是指定<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性返回<xref:System.Data.DataSet>对象包含列`Name`和`Number`，和 ConflictDetection 属性设置为<xref:System.Web.UI.ConflictOptions>值，参数为创建`Name`和`Number`更新操作。</xref:System.Web.UI.ConflictOptions> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 如果 ConflictDetection 属性设置为<xref:System.Web.UI.ConflictOptions>值，参数为创建`Name`， `Number`， `original_Name`，和`original_Number`。</xref:System.Web.UI.ConflictOptions> (取决于原始值的参数的确切名称<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>。)</xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>然后，<xref:System.Web.UI.WebControls.SqlDataSourceView>对象确定方法是否在指定<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>属性具有匹配的参数。</xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView>       并发控制是一种数据存储区使用来控制如何读取和更改存储区中，在访问和操作同一数据多个客户端数据的技术。 例如，一台客户端读取数据，并将其呈现给用户，而另一个客户端读取同一数据，并将其呈现给其他用户。 如果两个用户更新的数据，并将其提交至数据存储，则可能会发生某种意外的结果，因为两个客户端可能会更新相同数据的不同值。 这是被视为冲突。 ConflictDetection 属性设置为<xref:System.Web.UI.ConflictOptions>值，更新操作然后可以将比较到原始的数据源，以检测冲突，并根据需要处理它们的旧和新值。</xref:System.Web.UI.ConflictOptions>       属性是 ConflictDetection 的值存储在视图状态。"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "之一<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。 默认值是<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "所选的值不是之一<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: SqlDataSourceView.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "执行删除操作使用<> *1> SQL 字符串中指定任何参数<> *1> 集合，并且在指定的值<code> keys </code>和<code> oldValues </code>集合。"
  remarks: "删除方法调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A>方法，并传递`keys`和`oldValues`参数。</xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete%2A>"
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>的对象或行键值的<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete*>操作以删除。</xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete*> </xref:System.Collections.IDictionary>"
    - id: oldValues
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>包含行值，其计算结果仅当<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*>属性设置为<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。</xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*> </xref:System.Collections.IDictionary>"
    return:
      type: System.Int32
      description: "一个值，表示从基础数据库中删除的行数。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.Delete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Web.UI.WebControls.SqlDataSource\"></xref> cannot establish a connection with the underlying data source.  \n  \n \\- or -  \n  \n The <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*> property is set to the <xref href=\"System.Web.UI.ConflictOptions\"></xref> value and no <code>oldValues</code> parameters are passed."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Web.UI.WebControls.SqlDataSourceView.CanDelete*>属性是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.CanDelete*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand
  id: DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: SqlDataSourceView.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置 SQL 字符串<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>用于从基础数据库中删除数据。"
  remarks: "由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前 ADO.NET 提供程序正在使用中，由标识<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>       如果 SQL 字符串是一个参数化的查询或命令，则参数的占位符还取决于正在使用的 ADO.NET 提供程序。 例如，如果该提供程序是<xref:System.Data.SqlClient?displayProperty=fullName>，这是默认提供程序<xref:System.Web.UI.WebControls.SqlDataSource>类，则参数的占位符是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 但是，如果提供程序设置为<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，则参数的占位符为`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 参数化的 SQL 查询和命令的详细信息，请参阅[SqlDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。       如果基础数据库支持存储的过程，DeleteCommand 可以是一个 SQL 字符串或存储过程的名称。       属性是 DeleteCommand 的值存储在视图状态。"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database Orders table. Data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> renders a **Delete** button automatically when the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true` and automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> collection and calls the <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> method when the **Delete** button is clicked. Finally, because this example deletes data, an event handler is added to attempt to back up the database to disk before the delete operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_947_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_947_1.aspx)]"
  syntax:
    content: public string DeleteCommand { get; set; }
    return:
      type: System.String
      description: "SQL 字符串<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>用于删除数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType
  id: DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: DeleteCommandType
  nameWithType: SqlDataSourceView.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否中的文本<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand*>属性为 SQL 语句或存储过程的名称。</xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand*>"
  remarks: "属性是 DeleteCommandType 的值存储在视图状态。"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType DeleteCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "之一<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。 默认值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "所选的值不是之一<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Deleted
  nameWithType: SqlDataSourceView.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "当删除操作已完成时发生。"
  remarks: "处理已删除事件，以完成删除操作后检查输出参数的值。 输出参数均可用从<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件相关联的对象。</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: SqlDataSourceView.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取包含所使用的参数的参数集合<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand*>"
  remarks: "如果<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>属性包含参数化的 SQL 查询，DeleteParameters 集合包含任何<xref:System.Web.UI.WebControls.Parameter>对应于 SQL 字符串中的参数占位符的对象。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>       参数名称可能会影响<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>属性; 具体而言，如果该名称标识为主键，如密钥指定使用`DataKeyNames`属性的数据绑定控件，或在删除和更新在其中的方案<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>值和一组`oldValues`传递给相应的数据方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> 在这种情况下，格式字符串应用于在每个参数名`oldValues`集合。       具体取决于 ADO.NET 提供程序，DeleteParameters 集合中参数的顺序可能会很重要。 <xref:System.Data.OleDb?displayProperty=fullName>和<xref:System.Data.Odbc?displayProperty=fullName>提供程序将根据参数在参数化 SQL 查询中出现的顺序集合中的参数相关联。</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>提供程序，这是默认的 ADO.NET 提供程序为<xref:System.Web.UI.WebControls.SqlDataSource>控件，通过使用 SQL 查询中的占位符匹配参数的名称来关联集合中的参数。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 参数化的 SQL 查询和命令的详细信息，请参阅[SqlDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteCommand%2A> text to delete an order from the Northwind database. Initially, data is retrieved from the Orders table and displayed in a <xref:System.Web.UI.WebControls.DropDownList> control. You must explicitly declare the <xref:System.Web.UI.WebControls.SqlDataSource.DeleteParameters%2A> property and call the <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> method when using data-bound controls, such as the <xref:System.Web.UI.WebControls.DropDownList> (unlike controls, such as the <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView>, which automatically populate the parameters and call the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method on a data source control). In this example, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is delegated to the private <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> event handler, which explicitly calls the <xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A> method of the <xref:System.Web.UI.WebControls.SqlDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1005_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_11sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1005_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含使用的参数<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Deleting
  nameWithType: SqlDataSourceView.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "在删除操作之前发生。"
  remarks: "处理删除事件，以执行特定于应用程序，以验证参数的值的附加初始化操作或要更改参数值之前<xref:System.Web.UI.WebControls.SqlDataSource>控件将执行删除操作。</xref:System.Web.UI.WebControls.SqlDataSource>       与基础数据源的连接未尚未打开时，会调用事件处理程序委托。 因此，无法取消<xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A>直接通过调用操作<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>由公开的对象<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> 但是，可以通过设置取消该操作<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>到`true`。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> event that is raised before a delete operation occurs. Because this example deletes data from the Northwind database, an <xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> handler is added to attempt to back up the database to disk before the delete operation is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_97_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_97_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: ExecuteDelete(IDictionary,IDictionary)
  nameWithType: SqlDataSourceView.ExecuteDelete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "执行删除操作使用<> *1> SQL 字符串中指定任何参数<> *1> 集合，并且在指定的值<code> keys </code>和<code> oldValues </code>集合。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承<xref:System.Web.UI.DataSourceView.ExecuteDelete%2A>方法从数据库删除数据。</xref:System.Web.UI.DataSourceView.ExecuteDelete%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView> 页开发人员和数据绑定控件作者不 ExecuteDelete 方法直接调用;请改为使用公开提供<xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Delete%2A>       中包含的值`keys`集合将进行计算并与包含的任何值合并<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>集合。</xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>值、 中包含的值`oldValues`集合都将使用<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>属性并合并。</xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>       执行删除操作之前，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A>调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting>事件。</xref:System.Web.UI.WebControls.SqlDataSourceView.Deleting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleting%2A> 你可以处理此事件，检查的参数的值并执行在删除之前任何预处理。       若要执行删除操作，<xref:System.Web.UI.WebControls.SqlDataSourceView>对象生成<xref:System.Data.Common.DbCommand>对象使用<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A>文本和任何关联<xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A>属性，然后执行<xref:System.Data.Common.DbCommand>对基础数据库对象。</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView> 删除操作完成后，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A>调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted>事件。</xref:System.Web.UI.WebControls.SqlDataSourceView.Deleted> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnDeleted%2A> 你可以处理此事件，检查任何返回值和错误代码并执行任何后续处理。"
  syntax:
    content: protected override int ExecuteDelete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>的对象或行键值的 ExecuteDelete 操作以删除。</xref:System.Collections.IDictionary>"
    - id: oldValues
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>包含行值，其计算结果仅当<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*>属性设置为<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。</xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*> </xref:System.Collections.IDictionary>"
    return:
      type: System.Int32
      description: "一个值，表示从基础数据库中删除的行数。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Web.UI.WebControls.SqlDataSource\"></xref> cannot establish a connection with the underlying data source.  \n  \n \\- or -  \n  \n The <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*> property is set to the <xref href=\"System.Web.UI.ConflictOptions\"></xref> value and no <code>oldValues</code> parameters are passed."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The current user does not have the correct permissions to access to the database.  \n  \n \\- or -  \n  \n The instance of the control is an <xref href=\"System.Web.UI.WebControls.AccessDataSource\"></xref> control and access is denied to the path specified for the <xref:System.Web.UI.WebControls.AccessDataSource.DataFile*> property."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <xref:System.Web.UI.WebControls.SqlDataSourceView.CanDelete*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n A design-time relative path was not mapped correctly by the designer before using an instance of the <xref href=\"System.Web.UI.WebControls.AccessDataSource\"></xref> control."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)
  id: ExecuteInsert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: ExecuteInsert(IDictionary)
  nameWithType: SqlDataSourceView.ExecuteInsert(IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "执行插入操作使用<> *1> SQL 字符串中指定任何参数<> *1> 集合，并且在指定的值<code> values </code>集合。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承<xref:System.Web.UI.DataSourceView.ExecuteInsert%2A>方法将数据插入数据库。</xref:System.Web.UI.DataSourceView.ExecuteInsert%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView> 页开发人员和数据绑定控件作者不 ExecuteInsert 方法直接调用;请改为使用公开提供<xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A>       执行插入操作之前，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A>调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting>事件。</xref:System.Web.UI.WebControls.SqlDataSourceView.Inserting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> 你可以处理此事件，检查的参数的值并执行之前插入任何预处理。       若要执行插入操作，<xref:System.Web.UI.WebControls.SqlDataSourceView>对象生成<xref:System.Data.Common.DbCommand>对象使用<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>文本和任何关联<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A>属性，然后执行<xref:System.Data.Common.DbCommand>对基础数据库对象。</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView> 完成插入后，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A>调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted>事件。</xref:System.Web.UI.WebControls.SqlDataSourceView.Inserted> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> 你可以处理此事件，检查任何返回值和错误代码并执行任何后续处理。"
  syntax:
    content: protected override int ExecuteInsert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>的值用于<> *1> 属性以执行插入数据库操作。</xref:System.Collections.IDictionary>如果没有与查询关联的参数，或如果<> *1> 属性不是参数化的 SQL 查询，则传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Int32
      description: "一个值，表示基础数据库中插入的行数。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>无法建立与基础数据源的连接。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "当前用户没有访问数据库的正确权限。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Web.UI.WebControls.SqlDataSourceView.CanInsert*>属性是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.CanInsert*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)
  id: ExecuteSelect(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: ExecuteSelect(DataSourceSelectArguments)
  nameWithType: SqlDataSourceView.ExecuteSelect(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(DataSourceSelectArguments)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "从使用基础数据库中检索数据<> *1> SQL 字符串和任何参数，位于<> *1> 集合。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承的 ExecuteSelect 方法，可以从数据库中检索数据。</xref:System.Web.UI.WebControls.SqlDataSourceView> 页开发人员和数据绑定控件作者不 ExecuteSelect 方法直接调用;请改为使用公开提供<xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Select%2A>       执行数据检索之前，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A>调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting>事件。</xref:System.Web.UI.WebControls.SqlDataSourceView.Selecting> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelecting%2A> 你可以处理此事件，检查的参数的值并执行任何预处理之前检索数据。       若要执行此操作，<xref:System.Web.UI.WebControls.SqlDataSourceView>对象生成<xref:System.Data.Common.DbCommand>对象使用<xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A>文本和任何关联<xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A>，并对基础数据库执行它。</xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView> 在操作完成后，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A>调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSource.Selected>事件。</xref:System.Web.UI.WebControls.SqlDataSource.Selected> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnSelected%2A> 你可以处理此事件以检查任何返回值，错误代码，并执行任何后续处理。       ExecuteSelect 方法返回<xref:System.Data.DataView>对象如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode>，或<xref:System.Data.IDataReader>对象如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode>。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Data.IDataReader> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Data.DataView> 关闭<xref:System.Data.IDataReader>对象读取数据完毕。</xref:System.Data.IDataReader>       如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode>和启用缓存，则<xref:System.Web.UI.WebControls.SqlDataSourceView>检索中的数据和数据操作期间将数据保存到缓存。</xref:System.Web.UI.WebControls.SqlDataSourceView> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> 创建缓存，丢弃，或刷新基于指定的组合的缓存行为<xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A>属性。</xref:System.Web.UI.WebControls.SqlDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.SqlDataSource.CacheDuration%2A>      1> [!IMPORTANT]&1;> 时的第一个用户访问数据时使用的在 Windows 身份验证的客户端模拟，缓存数据。 如果另一个用户请求相同的数据，从缓存检索数据。 不通过另一个调用到数据库，以验证用户的访问数据检索的数据。 如果希望多个用户访问数据，并且你希望每个检索到的数据库的安全配置验证的数据，不使用缓存。       如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode>和<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>已指定，以及提供的所有计算<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>数据检索操作期间生成的筛选器应用于数据的列表。</xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>"
  syntax:
    content: protected override System.Collections.IEnumerable ExecuteSelect (System.Web.UI.DataSourceSelectArguments arguments);
    parameters:
    - id: arguments
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;> </xref>用于请求对数据执行基本的数据检索操作的对象。"
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>的数据行的列表。</xref:System.Collections.IEnumerable>"
  overload: System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>arguments</code> passed to the ExecuteSelect method specify that the data source should perform some additional work while retrieving data to enable paging or sorting through the retrieved data, but the data source control does not support the requested capability.  \n  \n \\- or -  \n  \n Caching is enabled but the <xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode*> property of the data source is not set to <xref href=\"System.Web.UI.WebControls.SqlDataSourceMode\"></xref>.  \n  \n \\- or -  \n  \n The <xref:System.Web.UI.WebControls.SqlDataSourceView.SortParameterName*> property is set but <xref:System.Data.SqlClient.SqlCommand.CommandType*> is not set to <xref href=\"System.Data.CommandType\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The data source cannot create a database connection.  \n  \n \\- or -  \n  \n Caching is enabled but the internal cache and command types do not match."
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  nameWithType: SqlDataSourceView.ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "执行更新操作使用<> *1> SQL 字符串，位于任何参数<> *1> 集合，并且在指定的值<code> keys </code>， <code> values </code>，和<code> oldValues </code>集合。"
  remarks: "<xref:System.Web.UI.WebControls.SqlDataSourceView>类实现继承的 ExecuteUpdate 方法，来更新数据库中的数据。</xref:System.Web.UI.WebControls.SqlDataSourceView> 页开发人员和数据绑定控件作者不调用 ExecuteUpdate 方法直接;请改为使用公开提供<xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Update%2A>       中包含的值`keys`和`values`集合将进行计算并与包含的任何值合并<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> 如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>中, 包含的值`oldValues`集合都将使用<xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A>和也合并了。</xref:System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>       执行更新操作之前，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A>调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Updating>事件。</xref:System.Web.UI.WebControls.SqlDataSourceView.Updating> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdating%2A> 你可以处理此事件来检查参数的值并执行更新之前任何预处理。       若要执行此操作，<xref:System.Web.UI.WebControls.SqlDataSourceView>生成<xref:System.Data.Common.DbCommand>对象使用<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>文本和任何关联<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A>属性，然后执行<xref:System.Data.Common.DbCommand>对基础数据库对象。</xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A> </xref:System.Data.Common.DbCommand> </xref:System.Web.UI.WebControls.SqlDataSourceView> 在操作完成后，<xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A>调用方法来引发<xref:System.Web.UI.WebControls.SqlDataSourceView.Updated>事件。</xref:System.Web.UI.WebControls.SqlDataSourceView.Updated> </xref:System.Web.UI.WebControls.SqlDataSourceView.OnUpdated%2A> 你可以处理此事件，检查任何返回值和错误代码并执行任何后续处理。"
  syntax:
    content: protected override int ExecuteUpdate (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>的主键，若要使用<> *1> 属性以执行更新数据库操作。</xref:System.Collections.IDictionary>如果不没有与查询关联的任何密钥，或如果<> *1> 属性不是参数化的 SQL 查询，则传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: values
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>要使用的值<> *1> 属性以执行更新数据库操作。</xref:System.Collections.IDictionary>如果没有与查询关联的参数，或如果<> *1> 不是参数化的 SQL 查询，则传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: oldValues
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>表示数据库中的原始值。</xref:System.Collections.IDictionary> 如果没有与查询关联的参数，或如果<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>属性不是参数化的 SQL 查询，则传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>"
    return:
      type: System.Int32
      description: "一个值，表示基础数据库中更新的行数。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "The <xref href=\"System.Web.UI.WebControls.SqlDataSource\"></xref> cannot establish a connection with the underlying data source.  \n  \n \\- or -  \n  \n The <xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*> property is set to the <xref href=\"System.Web.UI.ConflictOptions\"></xref> value and no <code>oldValues</code> parameters are passed."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "当前用户没有访问数据库的正确权限。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate*>属性是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: FilterExpression
  nameWithType: SqlDataSourceView.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSourceView.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置筛选表达式时应用<xref:System.Web.UI.WebControls.SqlDataSourceView.Select*>调用方法。</xref:System.Web.UI.WebControls.SqlDataSourceView.Select*>"
  remarks: "用于 FilterExpression 属性的语法是一种格式字符串样式语法。 你可以在 FilterExpression 属性中包含参数。 如果参数的类型是字符串或字符，将参数括在单引号中。 如果参数是数值类型，则不需要，引号引起来。       <xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>集合包含的参数，其计算结果中找到的占位符<xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A>属性。</xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterParameters%2A>       <xref:System.Web.UI.WebControls.SqlDataSource>控件支持筛选数据时，才在`DataSet`模式。</xref:System.Web.UI.WebControls.SqlDataSource>       属性是 FilterExpression 的值存储在视图状态。      1> [!IMPORTANT]&1;> 应验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换到筛选器表达式，并将其应用于<xref:System.Data.DataView>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView> 如果你使用<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施来限制返回，你必须筛选发生之前验证参数值的项的数目。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control is applied any time the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property contains a placeholder for a filter parameter, which is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. In this example, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the <xref:System.Web.UI.WebControls.DropDownList> selection causes the page to post to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1180_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1180_1.aspx)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示使用检索数据时应用的筛选表达式<xref:System.Web.UI.WebControls.SqlDataSource.Select*>方法。</xref:System.Web.UI.WebControls.SqlDataSource.Select*>"
  overload: System.Web.UI.WebControls.SqlDataSourceView.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "时，已设置 FilterExpression 属性<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>处于<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceMode&quot;></xref>模式。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Filtering
  nameWithType: SqlDataSourceView.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "筛选器操作前发生。"
  remarks: "处理筛选事件，以验证对值执行操作筛选器参数之前<xref:System.Web.UI.WebControls.SqlDataSourceView>对象执行筛选器操作。</xref:System.Web.UI.WebControls.SqlDataSourceView> 你可以取消<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法通过设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs>对象传递给`true`。</xref:System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> 仅当引发该事件<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>属性设置。</xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>      1> [!IMPORTANT]&1;> 应验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换到筛选器表达式，并将其应用于<xref:System.Data.DataView>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView> 如果你使用<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施来限制返回，你必须筛选发生之前验证参数值的项的数目。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: FilterParameters
  nameWithType: SqlDataSourceView.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取与中的任何参数占位符相关联的参数的集合<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression*>字符串。</xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression*>"
  remarks: "FilterParameters 集合中的参数是中指定所有参数相关联<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A> 中指定的参数占位符<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>将按顺序进行计算并与 FilterParameters 集合中的参数对象匹配时<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>调用方法。</xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression%2A>      1> [!IMPORTANT]&1;> 应验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换到筛选器表达式，并将其应用于<xref:System.Data.DataView>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView> 如果你使用<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施来限制返回，你必须筛选发生之前验证参数值的项的数目。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database and filter it using the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties. The <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control is applied any time the <xref:System.Web.UI.WebControls.SqlDataSource.Select%2A> method is executed to retrieve data. In this example, the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> property contains a placeholder for a filter parameter, which is contained in the <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> collection. In addition, the filter parameter is a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the <xref:System.Web.UI.WebControls.ListControl.SelectedValue%2A> property of the <xref:System.Web.UI.WebControls.DropDownList> control. Because the <xref:System.Web.UI.WebControls.DropDownList> control has its <xref:System.Web.UI.WebControls.ListControl.AutoPostBack%2A> property set to `true`, any change in the <xref:System.Web.UI.WebControls.DropDownList> selection causes the page to post information back to the server and the <xref:System.Web.UI.WebControls.GridView> control to rebind to the data source control with the new filter.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_165_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_17sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_165_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含与在中找到任何参数占位符关联的参数集<xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.FilterExpression*>"
  overload: System.Web.UI.WebControls.SqlDataSourceView.FilterParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: SqlDataSourceView.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "执行插入操作使用<> *1> SQL 字符串中指定任何参数<> *1> 集合，并且在指定的值<code> values </code>集合。"
  remarks: "Insert 方法调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A>方法，并传递`values`参数。</xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert%2A>"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>的参数<> *1> 属性用来执行该插入数据库操作。</xref:System.Collections.IDictionary>如果没有与查询关联的参数，或如果<> *1> 不是参数化的 SQL 查询，则传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Int32
      description: "一个值，表示基础数据库中插入的行数。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.Insert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>无法建立与基础数据源的连接。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Web.UI.WebControls.SqlDataSourceView.CanInsert*>属性是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.CanInsert*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertCommand
  id: InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: InsertCommand
  nameWithType: SqlDataSourceView.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSourceView.InsertCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置 SQL 字符串<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象用于将数据插入到基础数据库。"
  remarks: "由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前 ADO.NET 提供程序正在使用中，由标识<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果 SQL 字符串是一个参数化的查询或命令，则参数的占位符还取决于正在使用的 ADO.NET 提供程序。 例如，如果该提供程序是<xref:System.Data.SqlClient?displayProperty=fullName>，这是默认提供程序<xref:System.Web.UI.WebControls.SqlDataSource>类，则参数的占位符是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 但是，如果提供程序设置为<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，则参数的占位符为`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 参数化的 SQL 查询和命令的详细信息，请参阅[SqlDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。       如果数据源支持存储的过程，InsertCommand 属性可以是一个 SQL 字符串或存储过程的名称。       属性是 InsertCommand 的值存储在视图状态。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control. The second code example demonstrates how to retrieve data from Microsoft SQL Server, display it in a <xref:System.Web.UI.WebControls.GridView> control, and use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control. The current data in the table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database and the <xref:System.Web.UI.WebControls.DropDownList> is refreshed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1299_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1299_1.aspx)]  \n  \n The following code example demonstrates how to retrieve data from SQL Server, display it in a <xref:System.Web.UI.WebControls.GridView> control, and use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensure that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted by the <xref:System.Web.UI.WebControls.DetailsView> control into the database, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1299_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1299_2.aspx)]"
  syntax:
    content: public string InsertCommand { get; set; }
    return:
      type: System.String
      description: "SQL 字符串<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>用于插入数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType
  id: InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: InsertCommandType
  nameWithType: SqlDataSourceView.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否中的文本<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand*>属性为 SQL 语句或存储过程的名称。</xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand*>"
  remarks: "属性是 InsertCommandType 的值存储在视图状态。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server, display it in a <xref:System.Web.UI.WebControls.GridView> control, and use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n The <xref:System.Web.UI.WebControls.GridView> control displays a set of data and the <xref:System.Web.UI.WebControls.DetailsView> control displays the details for a particular row. If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. The stored procedure name is set in the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommand%2A> property and is identified as a stored procedure by setting the <xref:System.Web.UI.WebControls.SqlDataSource.InsertCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value.  \n  \n Finally, after data is inserted by the <xref:System.Web.UI.WebControls.DetailsView> control into the database, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_733_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_733_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType InsertCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "之一<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。 值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "所选的值不是之一<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Inserted
  nameWithType: SqlDataSourceView.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "当插入操作已完成时发生。"
  remarks: "处理插入事件，以完成插入操作后检查输出参数的值。 输出参数均可用从<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件相关联的对象。</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server and display it in a <xref:System.Web.UI.WebControls.GridView> control. The example also uses a <xref:System.Web.UI.WebControls.DetailsView> control to display details of the selected row in the <xref:System.Web.UI.WebControls.GridView>, and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView>. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensure that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface that is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted by the <xref:System.Web.UI.WebControls.DetailsView> control into the database, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_39_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_39_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Inserting
  nameWithType: SqlDataSourceView.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "在插入操作之前发生。"
  remarks: "处理插入事件，以执行特定于应用程序，以验证参数的值的附加初始化操作或要更改参数值之前<xref:System.Web.UI.WebControls.SqlDataSource>控件将执行插入操作。</xref:System.Web.UI.WebControls.SqlDataSource>       与基础数据源的连接未尚未打开时，会调用事件处理程序委托。 因此，将无法取消该数据库操作，直接通过调用<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>由公开的对象<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> 但是，可以通过设置来取消该数据库操作<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>到`true`。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server, display it in a <xref:System.Web.UI.WebControls.GridView> control. The example also uses a <xref:System.Web.UI.WebControls.DetailsView> control to display details of the selected row in the <xref:System.Web.UI.WebControls.GridView>, and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensure that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object, and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted by the <xref:System.Web.UI.WebControls.DetailsView> control into the database, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_104_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_104_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: InsertParameters
  nameWithType: SqlDataSourceView.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取包含所使用的参数的参数集合<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand*>"
  remarks: "如果<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>属性包含参数化的 SQL 查询，InsertParameters 集合包含任何<xref:System.Web.UI.WebControls.Parameter>对应于 SQL 字符串中的参数占位符的对象。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand%2A>       具体取决于 ADO.NET 提供程序，InsertParameters 集合中参数的顺序可能会很重要。 <xref:System.Data.OleDb?displayProperty=fullName>和<xref:System.Data.Odbc?displayProperty=fullName>提供程序将根据参数在参数化 SQL 查询中出现的顺序集合中的参数相关联。</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>提供程序，这是默认的 ADO.NET 提供程序为<xref:System.Web.UI.WebControls.SqlDataSource>控件中，将集合中的参数相关联的 SQL 查询中的占位符别名的参数的名称匹配。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 参数化的 SQL 查询和命令的详细信息，请参阅[SqlDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to insert data into a database using the <xref:System.Web.UI.WebControls.SqlDataSource> control and a simple Web Forms page. The current data in the table is displayed in the <xref:System.Web.UI.WebControls.DropDownList> control. You can add new records by entering values in the <xref:System.Web.UI.WebControls.TextBox> controls, and then clicking the **Insert** button. When the **Insert** button is clicked, the specified values are inserted into the database and the <xref:System.Web.UI.WebControls.DropDownList> is refreshed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_530_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_24sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_530_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含使用的参数<xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.InsertCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSourceView.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState
  id: IsTrackingViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: IsTrackingViewState
  nameWithType: SqlDataSourceView.IsTrackingViewState
  fullName: System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象是否保存对其视图状态的更改。"
  syntax:
    content: protected bool IsTrackingViewState { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数据源视图被标记为保存其状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: SqlDataSourceView.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "还原的数据源视图的以前保存的视图状态。"
  remarks: "此方法主要由[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]基础结构，不应在代码中直接使用。  但是，控件开发人员可以重写此方法以指定自定义服务器控件还原其视图状态的方式。 有关详细信息，请参阅[ASP.NET 状态管理概述](~/add/includes/ajax-current-ext-md.md)。       LoadViewState 方法还原视图状态信息<xref:System.Web.UI.WebControls.SqlDataSourceView>对象从已保存的上一个页面请求<xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A>方法。</xref:System.Web.UI.WebControls.SqlDataSourceView.SaveViewState%2A> </xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: protected virtual void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "一个对象，表示<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>要还原状态。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSourceView.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置要应用于传递给任何参数的名称格式字符串<> *1> 或<> *1> 方法。"
  remarks: "OldValuesParameterFormatString 格式字符串应用于仅，主键如那些由标识`DataKeyNames`属性的数据绑定控件或在删除和更新方案其中<xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>值和一组`oldValues`传递给相应的数据方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection%2A> 在这种情况下，格式字符串应用于在每个参数名`oldValues`集合。 有关详细信息，请参阅<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString?displayProperty=fullName>。</xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString?displayProperty=fullName>       属性是 OldValuesParameterFormatString 的值存储在视图状态。"
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示一个格式字符串应用于的任何名称<code> oldValues </code>参数传递给<> *1> 或<> *1> 方法。 默认值为&quot;{0}&quot;。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  id: OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnDeleted(SqlDataSourceStatusEventArgs)
  nameWithType: SqlDataSourceView.OnDeleted(SqlDataSourceStatusEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(SqlDataSourceStatusEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Deleted&quot;></xref>事件之后<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件已完成删除操作。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnDeleted 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected virtual void OnDeleted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceStatusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnDeleted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  id: OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnDeleting(SqlDataSourceCommandEventArgs)
  nameWithType: SqlDataSourceView.OnDeleting(SqlDataSourceCommandEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(SqlDataSourceCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Deleting&quot;></xref>之前的事件<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件尝试执行删除操作。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnDeleting 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  example:
  - "The following code example demonstrates how to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Deleting> event, which is raised before a <xref:System.Web.UI.WebControls.SqlDataSourceView.Delete%2A> operation occurs. Because this example deletes data from the Northwind database, an OnDeleting handler is added to attempt to back up the database to disk before the delete is performed.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/visualbasic/359c75a9-ee0e-4d55-bdc1-_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_10sql#1](~/add/codesnippet/csharp/359c75a9-ee0e-4d55-bdc1-_1.aspx)]"
  syntax:
    content: protected virtual void OnDeleting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnDeleting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)
  id: OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnFiltering(SqlDataSourceFilteringEventArgs)
  nameWithType: SqlDataSourceView.OnFiltering(SqlDataSourceFilteringEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(SqlDataSourceFilteringEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Filtering&quot;></xref>之前的事件<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控制选项选择操作的结果进行筛选。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnFiltering 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected virtual void OnFiltering (System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnFiltering*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  id: OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnInserted(SqlDataSourceStatusEventArgs)
  nameWithType: SqlDataSourceView.OnInserted(SqlDataSourceStatusEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnInserted(SqlDataSourceStatusEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Inserted&quot;></xref>事件之后<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件已完成插入操作。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnInserted 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server, display it in a <xref:System.Web.UI.WebControls.GridView> control, and use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensure that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserting%2A> event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted by the <xref:System.Web.UI.WebControls.DetailsView> control into the database, the OnInserted event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/81209d4c-52a2-4147-b8d8-_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/81209d4c-52a2-4147-b8d8-_1.aspx)]"
  syntax:
    content: protected virtual void OnInserted (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceStatusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnInserted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  id: OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnInserting(SqlDataSourceCommandEventArgs)
  nameWithType: SqlDataSourceView.OnInserting(SqlDataSourceCommandEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnInserting(SqlDataSourceCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Inserting&quot;></xref>之前的事件<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件尝试在插入操作。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnInserting 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  example:
  - "The following code example demonstrates how to retrieve data from Microsoft SQL Server, display it in a <xref:System.Web.UI.WebControls.GridView> control, and use a <xref:System.Web.UI.WebControls.DetailsView> control to see details of a selected row in the <xref:System.Web.UI.WebControls.GridView> and as a form to insert new records.  \n  \n Initially, the data is displayed in the <xref:System.Web.UI.WebControls.GridView> control and the selected row of the <xref:System.Web.UI.WebControls.GridView> is also displayed in the <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.GridView> and <xref:System.Web.UI.WebControls.DetailsView> controls use different data source controls; the one that is associated with the <xref:System.Web.UI.WebControls.DetailsView> has the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties, which ensure that the selected row of the <xref:System.Web.UI.WebControls.GridView> is displayed.  \n  \n If you click the automatically generated **Insert** button of the <xref:System.Web.UI.WebControls.DetailsView> control, the <xref:System.Web.UI.WebControls.DetailsView> shows a different user interface, which is used to insert a new record. The example uses a stored procedure to insert records and returns the primary key of the inserted row. If you insert a record, the <xref:System.Web.UI.WebControls.DetailsView> automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.InsertParameters%2A> collection with values from the bound columns and calls the <xref:System.Web.UI.WebControls.SqlDataSource.Insert%2A> method. The <xref:System.Web.UI.WebControls.DetailsView> can infer the correct parameters from any <xref:System.Web.UI.WebControls.BoundField> object and a parameter for the <xref:System.Web.UI.WebControls.TemplateField> object when the ASP.NET two-way data-binding syntax is used. In this example, an additional parameter is added in the OnInserting event handler to handle the primary key that is returned by the stored procedure.  \n  \n Finally, after data is inserted by the <xref:System.Web.UI.WebControls.DetailsView> control into the database, the <xref:System.Web.UI.WebControls.SqlDataSourceView.OnInserted%2A> event handler is called to handle the <xref:System.Web.UI.WebControls.SqlDataSource.Inserted> event, the value of the primary key of the inserted row is displayed, and the <xref:System.Web.UI.WebControls.BaseDataBoundControl.DataBind%2A> method of the <xref:System.Web.UI.WebControls.GridView> control is called explicitly to refresh the data.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/csharp/ff2f58f9-1a94-4cce-ae83-_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_15sql#1](~/add/codesnippet/visualbasic/ff2f58f9-1a94-4cce-ae83-_1.aspx)]"
  syntax:
    content: protected virtual void OnInserting (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnInserting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  id: OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnSelected(SqlDataSourceStatusEventArgs)
  nameWithType: SqlDataSourceView.OnSelected(SqlDataSourceStatusEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnSelected(SqlDataSourceStatusEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Selected&quot;></xref>事件之后<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件已完成数据检索操作。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnSelected 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected virtual void OnSelected (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceStatusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnSelected*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)
  id: OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnSelecting(SqlDataSourceSelectingEventArgs)
  nameWithType: SqlDataSourceView.OnSelecting(SqlDataSourceSelectingEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(SqlDataSourceSelectingEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Selecting&quot;></xref>之前的事件<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件尝试执行数据检索操作。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnSelecting 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected virtual void OnSelecting (System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnSelecting*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  id: OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnUpdated(SqlDataSourceStatusEventArgs)
  nameWithType: SqlDataSourceView.OnUpdated(SqlDataSourceStatusEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(SqlDataSourceStatusEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Updated&quot;></xref>事件之后<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件已完成更新操作。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnUpdated 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  example:
  - "The following code example demonstrates how to display and update data retrieved from an ODBC database in a <xref:System.Web.UI.WebControls.GridView> control. After a record is successfully updated, the <xref:System.Web.UI.WebControls.SqlDataSource.Updated> event is handled by an event handler to perform a post-processing step where an e-mail message notification is sent.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/9236d411-d01f-4dc8-b1eb-_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/9236d411-d01f-4dc8-b1eb-_1.aspx)]"
  syntax:
    content: protected virtual void OnUpdated (System.Web.UI.WebControls.SqlDataSourceStatusEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceStatusEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  id: OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: OnUpdating(SqlDataSourceCommandEventArgs)
  nameWithType: SqlDataSourceView.OnUpdating(SqlDataSourceCommandEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(SqlDataSourceCommandEventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView.Updating&quot;></xref>之前的事件<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;></xref>控件尝试更新操作。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnUpdating 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  example:
  - "The following code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/29c8c16e-94d1-48d3-be46-_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/29c8c16e-94d1-48d3-be46-_1.aspx)]"
  syntax:
    content: protected virtual void OnUpdating (System.Web.UI.WebControls.SqlDataSourceCommandEventArgs e);
    parameters:
    - id: e
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventArgs
      description: "A <xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.OnUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix
  id: ParameterPrefix
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: ParameterPrefix
  nameWithType: SqlDataSourceView.ParameterPrefix
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取用于在参数化 SQL 查询中的参数占位符前缀的字符串。"
  remarks: "SQL 查询和命令可以参数化，因为它们包含在运行时绑定到查询的值的占位符。 具体取决于为设置的 ADO.NET 提供程序<xref:System.Web.UI.WebControls.SqlDataSource>控件，它由<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性，这些参数由计算别名或通过它们的顺序在<xref:System.Web.UI.WebControls.ParameterCollection>对象。</xref:System.Web.UI.WebControls.ParameterCollection> </xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> </xref:System.Web.UI.WebControls.SqlDataSource>       如果<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>未设置或设置为<xref:System.Data.SqlClient?displayProperty=fullName>、 参数计算的别名来和 ParameterPrefix 属性用于将添加到参数前缀<xref:System.Web.UI.WebControls.Parameter.Name%2A>每个属性<xref:System.Web.UI.WebControls.Parameter>对象在<xref:System.Web.UI.WebControls.ParameterCollection>在数据检索或数据操作操作过程。</xref:System.Web.UI.WebControls.ParameterCollection> </xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Data.SqlClient?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性设置为<xref:System.Data.OleDb?displayProperty=fullName>或<xref:System.Data.Odbc?displayProperty=fullName>，参数计算的顺序和 ParameterPrefix 和<xref:System.Web.UI.WebControls.Parameter.Name%2A>属性会被忽略。</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>       如果扩展<xref:System.Web.UI.WebControls.SqlDataSourceView>类，你可以重写 ParameterPrefix 属性以提供一个前缀以外`&quot;@&quot;`字符串，如果所需。</xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: protected virtual string ParameterPrefix { get; }
    return:
      type: System.String
      description: "&quot;@&quot;字符串。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)
  id: RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  nameWithType: SqlDataSourceView.RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "为请求的功能的对比<> *1> 针对那些视图并支持，则操作由调用<> *1> 方法。"
  remarks: "数据源视图使用 RaiseUnsupportedCapabilityError 方法检查每个请求的数据绑定控件的功能，由表示<xref:System.Web.UI.DataSourceSelectArguments>对象传递给<xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A>方法，并将这些功能支持的数据源视图的功能进行比较。</xref:System.Web.UI.WebControls.SqlDataSourceView.Select%2A> </xref:System.Web.UI.DataSourceSelectArguments> 由表示的功能<xref:System.Web.UI.DataSourceSelectArguments>对象和数据源视图中，不支持<xref:System.NotSupportedException>引发异常。</xref:System.NotSupportedException> </xref:System.Web.UI.DataSourceSelectArguments>"
  syntax:
    content: protected override void RaiseUnsupportedCapabilityError (System.Web.UI.DataSourceCapabilities capability);
    parameters:
    - id: capability
      type: System.Web.UI.DataSourceCapabilities
      description: "之一<xref href=&quot;System.Web.UI.DataSourceCapabilities&quot;></xref>与视图支持的功能进行比较的值。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "数据源不具有所选<code> capability </code>启用。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: SqlDataSourceView.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "将所做的更改保存到的视图状态<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>自页回发到服务器时间以来的控件。"
  remarks: "SaveViewState 方法主要由控件开发人员使用。       视图状态是累积的服务器控件属性的值。 这些值会自动放在<xref:System.Web.UI.Control.ViewState%2A>服务器控件，它是<xref:System.Web.UI.StateBag>类</xref:System.Web.UI.StateBag>的实例的属性</xref:System.Web.UI.Control.ViewState%2A> <xref:System.Web.UI.Control.ViewState%2A>服务器控件随后会保存到一个字符串对象的保存状态的服务器控件生命周期阶段后的值。</xref:System.Web.UI.Control.ViewState%2A>       视图状态保存时，保存状态的服务器控件生命周期阶段后保持的字符串对象返回到客户端作为变量存储在 HTML`Hidden`元素。 在创作自定义服务器控件时，你可以通过重写 SaveViewState 方法并修改提高效率`ViewState`服务器控件的属性。 有关详细信息，请参阅[ASP.NET 状态管理概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: protected virtual object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "包含的更改的对象<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>视图状态; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果没有与对象关联的视图状态。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)
  id: Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSourceView.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Select(DataSourceSelectArguments)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "从使用基础数据库中检索数据<> *1> SQL 字符串和任何参数，位于<> *1> 集合。"
  remarks: "选择方法调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>方法，并传递`selectArgs`参数。</xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>       <xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A>方法返回<xref:System.Data.DataView>对象，如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode>值或者它将返回<xref:System.Data.IDataReader>对象，如果<xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A>属性设置为<xref:System.Web.UI.WebControls.SqlDataSourceMode>值。</xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Data.IDataReader> </xref:System.Web.UI.WebControls.SqlDataSourceMode> </xref:System.Web.UI.WebControls.SqlDataSource.DataSourceMode%2A> </xref:System.Data.DataView> </xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect%2A> 关闭<xref:System.Data.IDataReader>对象读取数据完毕。</xref:System.Data.IDataReader>"
  syntax:
    content: public System.Collections.IEnumerable Select (System.Web.UI.DataSourceSelectArguments arguments);
    parameters:
    - id: arguments
      type: System.Web.UI.DataSourceSelectArguments
      description: "A <xref href=&quot;System.Web.UI.DataSourceSelectArguments&quot;> </xref>用于对数据执行基本的数据检索的请求操作。"
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>的数据行的列表。</xref:System.Collections.IEnumerable>"
  overload: System.Web.UI.WebControls.SqlDataSourceView.Select*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code> selectArgs </code>传递到选择方法指定数据源应执行一些其他工作的同时检索数据，以使分页或排序检索的数据，但数据源控件不支持请求的功能。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>无法建立与基础数据源的连接。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectCommand
  id: SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: SelectCommand
  nameWithType: SqlDataSourceView.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SelectCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置 SQL 字符串<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象用于从基础数据库中检索数据。"
  remarks: "由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前 ADO.NET 提供程序正在使用中，由标识<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果 SQL 字符串是一个参数化的查询或命令，则参数的占位符还取决于正在使用的 ADO.NET 提供程序。 例如，如果该提供程序是<xref:System.Data.SqlClient?displayProperty=fullName>，这是默认提供程序<xref:System.Web.UI.WebControls.SqlDataSource>类，则参数的占位符是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 但是，如果提供程序设置为<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，则参数的占位符为`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 参数化的 SQL 查询和命令的详细信息，请参阅[SqlDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。       如果数据源支持存储的过程，SelectCommand 属性可以是一个 SQL 字符串或存储过程的名称。      1> [!IMPORTANT]&1;> 会更安全，要比使用 SQL 语句的存储的过程用于 SelectCommand 属性。       属性是 SelectCommand 的值存储在视图状态。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to a basic SQL query to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control. The second code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to the name of a stored procedure to retrieve data from a SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList>.  \n  \n The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to a basic SQL query to retrieve data from a SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.Button> and <xref:System.Web.UI.WebControls.TextBox> controls are provided as a simple interface to update the address for the selected user in the <xref:System.Web.UI.WebControls.DropDownList>.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_519_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_519_1.aspx)]  \n  \n The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to the name of a stored procedure to retrieve data from a SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property can be an SQL query or the name of a stored procedure, if the data source supports stored procedures.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_519_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_519_2.aspx)]"
  syntax:
    content: public string SelectCommand { get; set; }
    return:
      type: System.String
      description: "SQL 字符串<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>用于检索数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType
  id: SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: SelectCommandType
  nameWithType: SqlDataSourceView.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否中的文本<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand*>属性为 SQL 查询或存储过程的名称。</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand*>"
  remarks: "属性是 SelectCommandType 的值存储在视图状态。"
  example:
  - "The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> text to the name of a stored procedure and the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommandType%2A> property to the <xref:System.Web.UI.WebControls.SqlDataSourceCommandType> value to retrieve data from a Microsoft SQL Server database and display it in a <xref:System.Web.UI.WebControls.DropDownList>.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_934_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_14sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_934_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType SelectCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "之一<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。 默认值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "所选的值不是之一<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Selected
  id: Selected
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Selected
  nameWithType: SqlDataSourceView.Selected
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "当数据检索操作已完成时发生。"
  remarks: "处理所选事件，以完成数据检索操作后检查输出参数的值。 输出参数均可用从<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件相关联的对象。</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Selecting
  nameWithType: SqlDataSourceView.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "数据检索操作前发生。"
  remarks: "处理选择事件，以执行特定于应用程序，以验证参数的值的附加初始化操作或要更改参数值之前<xref:System.Web.UI.WebControls.SqlDataSource>控件将执行数据检索操作。</xref:System.Web.UI.WebControls.SqlDataSource>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: SelectParameters
  nameWithType: SqlDataSourceView.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取包含所使用的参数的参数集合<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand*>"
  remarks: "如果<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性包含参数化的 SQL 查询，SelectParameters 集合包含任何<xref:System.Web.UI.WebControls.Parameter>对应于 SQL 字符串中的参数占位符的对象。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>       具体取决于 ADO.NET 提供程序，SelectParameters 集合中参数的顺序可能会很重要。 <xref:System.Data.OleDb?displayProperty=fullName>和<xref:System.Data.Odbc?displayProperty=fullName>提供程序将根据参数在参数化 SQL 查询中出现的顺序集合中的参数相关联。</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>提供程序，这是默认的 ADO.NET 提供程序为<xref:System.Web.UI.WebControls.SqlDataSource>控件中，将集合中的参数相关联的 SQL 查询中的占位符别名的参数的名称匹配。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 参数化的 SQL 查询和命令的详细信息，请参阅[SqlDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to retrieve data from the Northwind database in Microsoft SQL Server by setting the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property to an SQL query. The SQL query is parameterized and the placeholder in the <xref:System.Web.UI.WebControls.SqlDataSource.SelectCommand%2A> property is matched to the <xref:System.Web.UI.WebControls.ControlParameter> object that is added to the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> collection. In this way, the <xref:System.Web.UI.WebControls.DropDownList> control, to which the <xref:System.Web.UI.WebControls.ControlParameter> is bound, acts as a filter for what is displayed in the <xref:System.Web.UI.WebControls.ListBox> control.  \n  \n> [!NOTE]\n>  Because the parameter is used in a WHERE clause, the use of the <xref:System.Web.UI.WebControls.SqlDataSource.SelectParameters%2A> property in this code example is functionally equivalent to using both the <xref:System.Web.UI.WebControls.SqlDataSource.FilterExpression%2A> and <xref:System.Web.UI.WebControls.SqlDataSource.FilterParameters%2A> properties.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_723_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_2sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_723_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含使用的参数<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSourceView.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: SortParameterName
  nameWithType: SqlDataSourceView.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置用于对检索到的数据进行排序时使用存储的过程执行数据检索的存储的过程参数的名称。"
  remarks: "计算 SortParameterName 属性仅当 SQL 命令，它是包含<xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A>属性是存储过程的名称。</xref:System.Web.UI.WebControls.SqlDataSourceView.SelectCommand%2A> 在这种情况下，如果 SortParameterName 属性设置，它包含用于对存储过程的结果进行排序的参数的名称。       如果<xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>属性设置，则前面预置 SortParameterName 属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix%2A>       属性是 SortParameterName 的值存储在视图状态。"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "用于对检索到的数据进行排序时使用存储的过程执行数据检索的存储的过程参数的名称。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState
  id: System#Web#UI#IStateManager#IsTrackingViewState
  isEii: true
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: System.Web.UI.IStateManager.IsTrackingViewState
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.IsTrackingViewState
  fullName: System.Web.UI.WebControls.SqlDataSourceView.System.Web.UI.IStateManager.IsTrackingViewState
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅<xref:System.Web.UI.IStateManager.IsTrackingViewState*>。</xref:System.Web.UI.IStateManager.IsTrackingViewState*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.SqlDataSourceView>实例被强制转换为<xref:System.Web.UI.IStateManager>接口。</xref:System.Web.UI.IStateManager> </xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: bool System.Web.UI.IStateManager.IsTrackingViewState { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数据源视图被标记为保存其状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState(System.Object)
  id: System#Web#UI#IStateManager#LoadViewState(System.Object)
  isEii: true
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: System.Web.UI.IStateManager.LoadViewState(Object)
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.System.Web.UI.IStateManager.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅&lt;xref:System.Web.UI.IStateManager.LoadViewState%28System.Object%29?displayProperty=fullName&gt;。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.SqlDataSourceView>实例被强制转换为<xref:System.Web.UI.IStateManager>接口。</xref:System.Web.UI.IStateManager> </xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: void IStateManager.LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "一个对象，表示<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>要还原状态。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState
  id: System#Web#UI#IStateManager#SaveViewState
  isEii: true
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: System.Web.UI.IStateManager.SaveViewState()
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSourceView.System.Web.UI.IStateManager.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅<xref href=&quot;System.Web.UI.IStateManager.SaveViewState&quot;> </xref>。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.SqlDataSourceView>实例被强制转换为<xref:System.Web.UI.IStateManager>接口。</xref:System.Web.UI.IStateManager> </xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: object IStateManager.SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "包含的更改的对象<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>视图状态; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果没有与对象关联的视图状态。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState
  id: System#Web#UI#IStateManager#TrackViewState
  isEii: true
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: System.Web.UI.IStateManager.TrackViewState()
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSourceView.System.Web.UI.IStateManager.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅<xref:System.Web.UI.IStateManager.TrackViewState*>。</xref:System.Web.UI.IStateManager.TrackViewState*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.SqlDataSourceView>实例被强制转换为<xref:System.Web.UI.IStateManager>接口。</xref:System.Web.UI.IStateManager> </xref:System.Web.UI.WebControls.SqlDataSourceView>"
  syntax:
    content: void IStateManager.TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: SqlDataSourceView.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSourceView.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "导致<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象来跟踪其视图状态的更改，以便这些更改可以存储在<xref href=&quot;System.Web.UI.StateBag&quot;></xref>控制和不同请求间保留在相同页的对象。"
  syntax:
    content: protected virtual void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.SqlDataSourceView.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: SqlDataSourceView.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "执行更新操作使用<> *1> SQL 字符串，位于任何参数<> *1> 集合，并且在指定的值<code> keys </code>， <code> values </code>，和<code> oldValues </code>集合。"
  remarks: "更新方法调用<xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A>方法，并传递`keys`， `values`，和`oldValues`参数。</xref:System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate%2A> 有关详细信息，请参阅<xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand?displayProperty=fullName>。</xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand?displayProperty=fullName>"
  example:
  - "The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is set with a parameterized SQL statement and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the Update method explicitly.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/0d500e90-6fd2-4112-8e56-_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/0d500e90-6fd2-4112-8e56-_1.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>的主键，若要使用<> *1> 属性以执行更新数据库操作。</xref:System.Collections.IDictionary>如果不没有与查询关联的任何密钥，或如果<> *1> 不是参数化的 SQL 查询，则传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: values
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>要使用的值<> *1> 属性以执行更新数据库操作。</xref:System.Collections.IDictionary>如果没有与查询关联的参数，或如果<> *1> 不是参数化的 SQL 查询，则传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: oldValues
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>表示数据库中的原始值。</xref:System.Collections.IDictionary> 如果没有与查询关联的参数，或如果<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>不是参数化的 SQL 查询，则传递<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>"
    return:
      type: System.Int32
      description: "一个值，表示基础数据库中更新的行数。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.Update*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.UI.WebControls.SqlDataSource&quot;> </xref>无法建立与基础数据源的连接。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate*>属性是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Web.UI.WebControls.SqlDataSourceView.CanUpdate*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand
  id: UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: SqlDataSourceView.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置 SQL 字符串<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>对象用来更新基础数据库中的数据。"
  remarks: "由于不同的数据库产品使用不同类型的 SQL，因此 SQL 字符串的语法取决于当前 ADO.NET 提供程序正在使用中，由标识<xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A>属性。</xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> 如果 SQL 字符串是一个参数化的查询或命令，则参数的占位符还取决于正在使用的 ADO.NET 提供程序。 例如，如果该提供程序是<xref:System.Data.SqlClient?displayProperty=fullName>，这是默认提供程序<xref:System.Web.UI.WebControls.SqlDataSource>类，则参数的占位符是`&quot;@parameterName&quot;`。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 但是，如果提供程序设置为<xref:System.Data.Odbc?displayProperty=fullName>或<xref:System.Data.OleDb?displayProperty=fullName>，则参数的占位符为`&quot;?&quot;`。</xref:System.Data.OleDb?displayProperty=fullName> </xref:System.Data.Odbc?displayProperty=fullName> 参数化的 SQL 查询和命令的详细信息，请参阅[SqlDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。       如果数据源支持存储的过程，限于 UpdateCommand 属性可以是一个 SQL 字符串或存储过程的名称。       属性是限于 UpdateCommand 的值存储在视图状态。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a Microsoft SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The second code example demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control.  \n  \n The following code example demonstrates how to set the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property of the <xref:System.Web.UI.WebControls.SqlDataSource> control and update data in a SQL Server database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.GridView> control automatically populates the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection, inferring the parameters from the <xref:System.Web.UI.WebControls.BoundField> objects, and calls the <xref:System.Web.UI.WebControls.SqlDataSourceView.Update%2A> method when the **Update** link on the editable <xref:System.Web.UI.WebControls.GridView> control is selected. This example also includes some post-processing—after a record is updated, an e-mail message notification is sent.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1335_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1335_1.aspx)]  \n  \n The following code example, which is functionally identical to the preceding code example, demonstrates how to update data in an ODBC database using the <xref:System.Web.UI.WebControls.GridView> control. The <xref:System.Web.UI.WebControls.SqlDataSource.ProviderName%2A> property is set to the ADO.NET provider for ODBC, the <xref:System.Data.Odbc?displayProperty=fullName>, and the <xref:System.Web.UI.WebControls.SqlDataSource.ConnectionString%2A> property is set to the name of an ODBC data source name (DSN).  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1335_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1335_2.aspx)]"
  syntax:
    content: public string UpdateCommand { get; set; }
    return:
      type: System.String
      description: "SQL 字符串<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceView&quot;></xref>用来更新数据。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType
  id: UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: UpdateCommandType
  nameWithType: SqlDataSourceView.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否中的文本<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>属性为 SQL 语句或存储过程的名称。</xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>"
  remarks: "属性是 UpdateCommandType 的值存储在视图状态。"
  syntax:
    content: public System.Web.UI.WebControls.SqlDataSourceCommandType UpdateCommandType { get; set; }
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandType
      description: "之一<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。 默认值是<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  overload: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "所选的值不是之一<xref href=&quot;System.Web.UI.WebControls.SqlDataSourceCommandType&quot;></xref>值。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Updated
  id: Updated
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Updated
  nameWithType: SqlDataSourceView.Updated
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "当更新操作已完成时发生。"
  remarks: "处理更新事件以更新操作完成后检查输出参数的值。 输出参数均可用从<xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>与事件相关联的对象。</xref:System.Web.UI.WebControls.SqlDataSourceStatusEventArgs>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to display and update data that is retrieved from an ODBC database in a <xref:System.Web.UI.WebControls.GridView> control. After a record is successfully updated, the <xref:System.Web.UI.WebControls.SqlDataSource.Updated> event is handled by an event handler to perform a post-processing step where an e-mail message notification is sent.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_139_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_7odbc#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_139_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: SqlDataSourceView.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取包含所使用的参数的参数集合<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>"
  remarks: "如果<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>属性包含参数化的 SQL 查询，UpdateParameters 集合包含任何<xref:System.Web.UI.WebControls.Parameter>对应于 SQL 字符串中的参数占位符的对象。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand%2A>       参数名称可能会影响<xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A>属性; 具体而言，如果该名称标识为主键，如密钥指定使用`DataKeyNames`属性，或在删除和更新方案其中<xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>值和一组`oldValues`传递给相应的数据方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.SqlDataSource.ConflictDetection%2A> </xref:System.Web.UI.WebControls.SqlDataSource.OldValuesParameterFormatString%2A> 在这种情况下，格式字符串应用于在每个参数名`oldValues`集合。       具体取决于 ADO.NET 提供程序，UpdateParameters 集合中参数的顺序可能会很重要。 <xref:System.Data.OleDb?displayProperty=fullName>和<xref:System.Data.Odbc?displayProperty=fullName>提供程序将根据参数在参数化 SQL 查询中出现的顺序集合中的参数相关联。</xref:System.Data.Odbc?displayProperty=fullName> </xref:System.Data.OleDb?displayProperty=fullName> <xref:System.Data.SqlClient?displayProperty=fullName>提供程序，这是默认的 ADO.NET 提供程序为<xref:System.Web.UI.WebControls.SqlDataSource>控件中，将集合中的参数相关联的 SQL 查询中的占位符别名的参数的名称匹配。</xref:System.Web.UI.WebControls.SqlDataSource> </xref:System.Data.SqlClient?displayProperty=fullName> 参数化的 SQL 查询和命令的详细信息，请参阅[SqlDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.SqlDataSource> control to display data in a <xref:System.Web.UI.WebControls.DropDownList> control and update data when the **Submit** button is clicked. The <xref:System.Web.UI.WebControls.SqlDataSource.UpdateCommand%2A> property is set with a parameterized SQL statement, and two <xref:System.Web.UI.WebControls.ControlParameter> parameters are added to the <xref:System.Web.UI.WebControls.SqlDataSource.UpdateParameters%2A> collection. When the **Submit** button is clicked, the <xref:System.Web.UI.WebControls.Button.OnClick%2A> event is handled to call the <xref:System.Web.UI.WebControls.SqlDataSource.Update%2A> method explicitly.  \n  \n [!code-cs[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1249_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.SqlDataSource_8sql#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1249_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含使用的参数<xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>属性。</xref:System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*>"
  overload: System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.SqlDataSourceView.Updating
  id: Updating
  parent: System.Web.UI.WebControls.SqlDataSourceView
  langs:
  - csharp
  name: Updating
  nameWithType: SqlDataSourceView.Updating
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "在更新操作之前发生。"
  remarks: "处理更新事件，以执行特定于应用程序，以验证参数的值的附加初始化操作或要更改参数值之前<xref:System.Web.UI.WebControls.SqlDataSource>控件将执行更新操作。</xref:System.Web.UI.WebControls.SqlDataSource>       与基础数据源的连接未尚未打开时，会调用事件处理程序委托。 因此，将无法取消该操作，直接通过调用<xref:System.Data.Common.DbCommand.Cancel%2A>方法<xref:System.Data.Common.DbCommand>由公开的对象<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>对象。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommand.Cancel%2A> 但是，可以通过设置来取消该数据库操作<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs>到`true`。</xref:System.Web.UI.WebControls.SqlDataSourceCommandEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following code example demonstrates how to display data that is retrieved from a Microsoft SQL Server database in a <xref:System.Web.UI.WebControls.DropDownList> control and update the record using a <xref:System.Web.UI.WebControls.TextBox> control. The example shows how you can use a <xref:System.Data.Common.DbTransaction> object to add transaction context when using the <xref:System.Web.UI.WebControls.SqlDataSource> control to update data.  \n  \n [!code-vb[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_45_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.SqlDataSource_9sql#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_45_1.aspx)]"
  syntax:
    content: public event System.Web.UI.WebControls.SqlDataSourceCommandEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceView
  isExternal: false
  name: System.Web.UI.DataSourceView
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.UI.WebControls.SqlDataSourceView.#ctor(System.Web.UI.WebControls.SqlDataSource,System.String,System.Web.HttpContext)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SqlDataSourceView(SqlDataSource,String,HttpContext)
  nameWithType: SqlDataSourceView.SqlDataSourceView(SqlDataSource,String,HttpContext)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SqlDataSourceView(SqlDataSource,String,HttpContext)
- uid: System.Web.UI.WebControls.SqlDataSource
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSource
  nameWithType: SqlDataSource
  fullName: System.Web.UI.WebControls.SqlDataSource
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSourceView.CancelSelectOnNullParameter
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanDelete
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanDelete
  nameWithType: SqlDataSourceView.CanDelete
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanDelete
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanInsert
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanInsert
  nameWithType: SqlDataSourceView.CanInsert
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanInsert
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanPage
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanPage
  nameWithType: SqlDataSourceView.CanPage
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanPage
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanRetrieveTotalRowCount
  nameWithType: SqlDataSourceView.CanRetrieveTotalRowCount
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanSort
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanSort
  nameWithType: SqlDataSourceView.CanSort
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanSort
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanUpdate
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanUpdate
  nameWithType: SqlDataSourceView.CanUpdate
  fullName: System.Web.UI.WebControls.SqlDataSourceView.CanUpdate
- uid: System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSourceView.ConflictDetection
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.SqlDataSourceView.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: SqlDataSourceView.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSourceView.DeleteCommand
  fullName: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSourceView.DeleteCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceCommandType
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandType
  nameWithType: SqlDataSourceCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceView.Deleted
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Deleted
  nameWithType: SqlDataSourceView.Deleted
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Deleted
- uid: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceStatusEventHandler
  nameWithType: SqlDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSourceView.DeleteParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.SqlDataSourceView.Deleting
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Deleting
  nameWithType: SqlDataSourceView.Deleting
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Deleting
- uid: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandEventHandler
  nameWithType: SqlDataSourceCommandEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandEventHandler
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ExecuteDelete(IDictionary,IDictionary)
  nameWithType: SqlDataSourceView.ExecuteDelete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete(IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ExecuteInsert(IDictionary)
  nameWithType: SqlDataSourceView.ExecuteInsert(IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert(IDictionary)
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ExecuteSelect(DataSourceSelectArguments)
  nameWithType: SqlDataSourceView.ExecuteSelect(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect(DataSourceSelectArguments)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.DataSourceSelectArguments
  parent: System.Web.UI
  isExternal: false
  name: DataSourceSelectArguments
  nameWithType: DataSourceSelectArguments
  fullName: System.Web.UI.DataSourceSelectArguments
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  nameWithType: SqlDataSourceView.ExecuteUpdate(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.SqlDataSourceView.FilterExpression
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSourceView.FilterExpression
  fullName: System.Web.UI.WebControls.SqlDataSourceView.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSourceView.Filtering
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Filtering
  nameWithType: SqlDataSourceView.Filtering
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Filtering
- uid: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceFilteringEventHandler
  nameWithType: SqlDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.SqlDataSourceView.FilterParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSourceView.FilterParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSourceView.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: SqlDataSourceView.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Insert(IDictionary)
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertCommand
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSourceView.InsertCommand
  fullName: System.Web.UI.WebControls.SqlDataSourceView.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSourceView.InsertCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceView.Inserted
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Inserted
  nameWithType: SqlDataSourceView.Inserted
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Inserted
- uid: System.Web.UI.WebControls.SqlDataSourceView.Inserting
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Inserting
  nameWithType: SqlDataSourceView.Inserting
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Inserting
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSourceView.InsertParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: IsTrackingViewState
  nameWithType: SqlDataSourceView.IsTrackingViewState
  fullName: System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: SqlDataSourceView.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSourceView.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnDeleted(SqlDataSourceStatusEventArgs)
  nameWithType: SqlDataSourceView.OnDeleted(SqlDataSourceStatusEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnDeleted(SqlDataSourceStatusEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceStatusEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceStatusEventArgs
  nameWithType: SqlDataSourceStatusEventArgs
  fullName: System.Web.UI.WebControls.SqlDataSourceStatusEventArgs
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnDeleting(SqlDataSourceCommandEventArgs)
  nameWithType: SqlDataSourceView.OnDeleting(SqlDataSourceCommandEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnDeleting(SqlDataSourceCommandEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceCommandEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceCommandEventArgs
  nameWithType: SqlDataSourceCommandEventArgs
  fullName: System.Web.UI.WebControls.SqlDataSourceCommandEventArgs
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnFiltering(SqlDataSourceFilteringEventArgs)
  nameWithType: SqlDataSourceView.OnFiltering(SqlDataSourceFilteringEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnFiltering(SqlDataSourceFilteringEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceFilteringEventArgs
  nameWithType: SqlDataSourceFilteringEventArgs
  fullName: System.Web.UI.WebControls.SqlDataSourceFilteringEventArgs
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnInserted(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnInserted(SqlDataSourceStatusEventArgs)
  nameWithType: SqlDataSourceView.OnInserted(SqlDataSourceStatusEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnInserted(SqlDataSourceStatusEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnInserting(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnInserting(SqlDataSourceCommandEventArgs)
  nameWithType: SqlDataSourceView.OnInserting(SqlDataSourceCommandEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnInserting(SqlDataSourceCommandEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnSelected(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnSelected(SqlDataSourceStatusEventArgs)
  nameWithType: SqlDataSourceView.OnSelected(SqlDataSourceStatusEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnSelected(SqlDataSourceStatusEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnSelecting(SqlDataSourceSelectingEventArgs)
  nameWithType: SqlDataSourceView.OnSelecting(SqlDataSourceSelectingEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnSelecting(SqlDataSourceSelectingEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceSelectingEventArgs
  nameWithType: SqlDataSourceSelectingEventArgs
  fullName: System.Web.UI.WebControls.SqlDataSourceSelectingEventArgs
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(System.Web.UI.WebControls.SqlDataSourceStatusEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnUpdated(SqlDataSourceStatusEventArgs)
  nameWithType: SqlDataSourceView.OnUpdated(SqlDataSourceStatusEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnUpdated(SqlDataSourceStatusEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(System.Web.UI.WebControls.SqlDataSourceCommandEventArgs)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnUpdating(SqlDataSourceCommandEventArgs)
  nameWithType: SqlDataSourceView.OnUpdating(SqlDataSourceCommandEventArgs)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.OnUpdating(SqlDataSourceCommandEventArgs)
- uid: System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ParameterPrefix
  nameWithType: SqlDataSourceView.ParameterPrefix
  fullName: System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix
- uid: System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(System.Web.UI.DataSourceCapabilities)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  nameWithType: SqlDataSourceView.RaiseUnsupportedCapabilityError(DataSourceCapabilities)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError(DataSourceCapabilities)
- uid: System.Web.UI.DataSourceCapabilities
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCapabilities
  nameWithType: DataSourceCapabilities
  fullName: System.Web.UI.DataSourceCapabilities
- uid: System.Web.UI.WebControls.SqlDataSourceView.SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SaveViewState()
  nameWithType: SqlDataSourceView.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SaveViewState()
- uid: System.Web.UI.WebControls.SqlDataSourceView.Select(System.Web.UI.DataSourceSelectArguments)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Select(DataSourceSelectArguments)
  nameWithType: SqlDataSourceView.Select(DataSourceSelectArguments)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Select(DataSourceSelectArguments)
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectCommand
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSourceView.SelectCommand
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSourceView.SelectCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceView.Selected
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Selected
  nameWithType: SqlDataSourceView.Selected
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Selected
- uid: System.Web.UI.WebControls.SqlDataSourceView.Selecting
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Selecting
  nameWithType: SqlDataSourceView.Selecting
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Selecting
- uid: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: SqlDataSourceSelectingEventHandler
  nameWithType: SqlDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.SqlDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSourceView.SelectParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSourceView.SortParameterName
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSourceView.SortParameterName
  fullName: System.Web.UI.WebControls.SqlDataSourceView.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: System.Web.UI.IStateManager.IsTrackingViewState
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.IsTrackingViewState
  fullName: System.Web.UI.WebControls.SqlDataSourceView.System.Web.UI.IStateManager.IsTrackingViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: System.Web.UI.IStateManager.LoadViewState(Object)
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.System.Web.UI.IStateManager.LoadViewState(Object)
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: System.Web.UI.IStateManager.SaveViewState()
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.SaveViewState()
  fullName: System.Web.UI.WebControls.SqlDataSourceView.System.Web.UI.IStateManager.SaveViewState()
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: System.Web.UI.IStateManager.TrackViewState()
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSourceView.System.Web.UI.IStateManager.TrackViewState()
- uid: System.Web.UI.WebControls.SqlDataSourceView.TrackViewState
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: TrackViewState()
  nameWithType: SqlDataSourceView.TrackViewState()
  fullName: System.Web.UI.WebControls.SqlDataSourceView.TrackViewState()
- uid: System.Web.UI.WebControls.SqlDataSourceView.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: SqlDataSourceView.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSourceView.UpdateCommand
  fullName: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSourceView.UpdateCommandType
  fullName: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceView.Updated
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Updated
  nameWithType: SqlDataSourceView.Updated
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Updated
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSourceView.UpdateParameters
  fullName: System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters
- uid: System.Web.UI.WebControls.SqlDataSourceView.Updating
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Updating
  nameWithType: SqlDataSourceView.Updating
  fullName: System.Web.UI.WebControls.SqlDataSourceView.Updating
- uid: System.Web.UI.WebControls.SqlDataSourceView.#ctor*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SqlDataSourceView
  nameWithType: SqlDataSourceView.SqlDataSourceView
- uid: System.Web.UI.WebControls.SqlDataSourceView.CancelSelectOnNullParameter*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CancelSelectOnNullParameter
  nameWithType: SqlDataSourceView.CancelSelectOnNullParameter
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanDelete*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanDelete
  nameWithType: SqlDataSourceView.CanDelete
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanInsert*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanInsert
  nameWithType: SqlDataSourceView.CanInsert
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanPage*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanPage
  nameWithType: SqlDataSourceView.CanPage
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanRetrieveTotalRowCount*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanRetrieveTotalRowCount
  nameWithType: SqlDataSourceView.CanRetrieveTotalRowCount
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanSort*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanSort
  nameWithType: SqlDataSourceView.CanSort
- uid: System.Web.UI.WebControls.SqlDataSourceView.CanUpdate*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: CanUpdate
  nameWithType: SqlDataSourceView.CanUpdate
- uid: System.Web.UI.WebControls.SqlDataSourceView.ConflictDetection*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ConflictDetection
  nameWithType: SqlDataSourceView.ConflictDetection
- uid: System.Web.UI.WebControls.SqlDataSourceView.Delete*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Delete
  nameWithType: SqlDataSourceView.Delete
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommand*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataSourceView.DeleteCommand
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteCommandType*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: DeleteCommandType
  nameWithType: SqlDataSourceView.DeleteCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceView.DeleteParameters*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: DeleteParameters
  nameWithType: SqlDataSourceView.DeleteParameters
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteDelete*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ExecuteDelete
  nameWithType: SqlDataSourceView.ExecuteDelete
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteInsert*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ExecuteInsert
  nameWithType: SqlDataSourceView.ExecuteInsert
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteSelect*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ExecuteSelect
  nameWithType: SqlDataSourceView.ExecuteSelect
- uid: System.Web.UI.WebControls.SqlDataSourceView.ExecuteUpdate*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ExecuteUpdate
  nameWithType: SqlDataSourceView.ExecuteUpdate
- uid: System.Web.UI.WebControls.SqlDataSourceView.FilterExpression*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: FilterExpression
  nameWithType: SqlDataSourceView.FilterExpression
- uid: System.Web.UI.WebControls.SqlDataSourceView.FilterParameters*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: FilterParameters
  nameWithType: SqlDataSourceView.FilterParameters
- uid: System.Web.UI.WebControls.SqlDataSourceView.Insert*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Insert
  nameWithType: SqlDataSourceView.Insert
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertCommand*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataSourceView.InsertCommand
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertCommandType*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: InsertCommandType
  nameWithType: SqlDataSourceView.InsertCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceView.InsertParameters*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: InsertParameters
  nameWithType: SqlDataSourceView.InsertParameters
- uid: System.Web.UI.WebControls.SqlDataSourceView.IsTrackingViewState*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: IsTrackingViewState
  nameWithType: SqlDataSourceView.IsTrackingViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.LoadViewState*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: LoadViewState
  nameWithType: SqlDataSourceView.LoadViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: SqlDataSourceView.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnDeleted*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnDeleted
  nameWithType: SqlDataSourceView.OnDeleted
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnDeleting*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnDeleting
  nameWithType: SqlDataSourceView.OnDeleting
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnFiltering*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnFiltering
  nameWithType: SqlDataSourceView.OnFiltering
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnInserted*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnInserted
  nameWithType: SqlDataSourceView.OnInserted
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnInserting*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnInserting
  nameWithType: SqlDataSourceView.OnInserting
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnSelected*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnSelected
  nameWithType: SqlDataSourceView.OnSelected
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnSelecting*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnSelecting
  nameWithType: SqlDataSourceView.OnSelecting
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnUpdated*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnUpdated
  nameWithType: SqlDataSourceView.OnUpdated
- uid: System.Web.UI.WebControls.SqlDataSourceView.OnUpdating*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: OnUpdating
  nameWithType: SqlDataSourceView.OnUpdating
- uid: System.Web.UI.WebControls.SqlDataSourceView.ParameterPrefix*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: ParameterPrefix
  nameWithType: SqlDataSourceView.ParameterPrefix
- uid: System.Web.UI.WebControls.SqlDataSourceView.RaiseUnsupportedCapabilityError*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: RaiseUnsupportedCapabilityError
  nameWithType: SqlDataSourceView.RaiseUnsupportedCapabilityError
- uid: System.Web.UI.WebControls.SqlDataSourceView.SaveViewState*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SaveViewState
  nameWithType: SqlDataSourceView.SaveViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.Select*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Select
  nameWithType: SqlDataSourceView.Select
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectCommand*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataSourceView.SelectCommand
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectCommandType*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SelectCommandType
  nameWithType: SqlDataSourceView.SelectCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceView.SelectParameters*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SelectParameters
  nameWithType: SqlDataSourceView.SelectParameters
- uid: System.Web.UI.WebControls.SqlDataSourceView.SortParameterName*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: SortParameterName
  nameWithType: SqlDataSourceView.SortParameterName
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#IsTrackingViewState*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: System.Web.UI.IStateManager.IsTrackingViewState
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.IsTrackingViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#LoadViewState*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: System.Web.UI.IStateManager.LoadViewState
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.LoadViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#SaveViewState*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: System.Web.UI.IStateManager.SaveViewState
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.SaveViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.System#Web#UI#IStateManager#TrackViewState*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: System.Web.UI.IStateManager.TrackViewState
  nameWithType: SqlDataSourceView.System.Web.UI.IStateManager.TrackViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.TrackViewState*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: TrackViewState
  nameWithType: SqlDataSourceView.TrackViewState
- uid: System.Web.UI.WebControls.SqlDataSourceView.Update*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: Update
  nameWithType: SqlDataSourceView.Update
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommand*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataSourceView.UpdateCommand
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateCommandType*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: UpdateCommandType
  nameWithType: SqlDataSourceView.UpdateCommandType
- uid: System.Web.UI.WebControls.SqlDataSourceView.UpdateParameters*
  parent: System.Web.UI.WebControls.SqlDataSourceView
  isExternal: false
  name: UpdateParameters
  nameWithType: SqlDataSourceView.UpdateParameters
