### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.SemaphoreAccessRule
  id: SemaphoreAccessRule
  children:
  - System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  - System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  langs:
  - csharp
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule
  fullName: System.Security.AccessControl.SemaphoreAccessRule
  type: Class
  summary: "表示一组允许或拒绝用户或组的访问权限。 此类不能被继承。"
  remarks: "SemaphoreAccessRule 类是一套.NET Framework 提供了用于管理已命名的系统信号量上的 Windows 访问控制安全性的类之一。 这些类和二者关系的基础 Windows 访问控制结构的概述，请参阅<xref:System.Security.AccessControl.SemaphoreSecurity>。</xref:System.Security.AccessControl.SemaphoreSecurity>      1> [!NOTE]&1;> Windows 访问控制安全性是仅为有意义的已命名系统信号量。 如果<xref:System.Threading.Semaphore>对象表示本地信号量，则访问控制不起作用。</xref:System.Threading.Semaphore>       若要获取当前应用于命名信号量的规则的列表，请使用<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>方法以获取<xref:System.Security.AccessControl.SemaphoreSecurity>对象，然后使用其<xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A>方法来获取 SemaphoreAccessRule 对象的集合。</xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> </xref:System.Security.AccessControl.SemaphoreSecurity> </xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>       SemaphoreAccessRule 对象不映射一对一与基础的自由访问控制列表 (DACL) 中的访问控制项。 当你的所有访问规则集信号量时，该集合将包含当前表示所有访问控制项所需要的规则最小数量。      1> [!NOTE]&1;> 的基础的访问控制项更改，因为将应用并删除规则。 如果可能，合并规则中的信息来维护最少数量的访问控制项。 因此，当读取的规则的当前列表，它可能不完全一样已添加的所有规则的列表。       SemaphoreAccessRule 对象用于指定允许或拒绝用户或组的访问权限。 对象始终表示 SemaphoreAccessRule 允许访问，或拒绝访问，永远不会同时。       若要将规则应用于已命名的系统信号量，使用<xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName>方法以获取<xref:System.Security.AccessControl.SemaphoreSecurity>对象。</xref:System.Security.AccessControl.SemaphoreSecurity> </xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> 修改<xref:System.Security.AccessControl.SemaphoreSecurity>对象通过使用其方法来添加规则，然后使用<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>方法重新附加安全对象。</xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.SemaphoreSecurity>      1> [!IMPORTANT]&1;> 对所做的更改<xref:System.Security.AccessControl.SemaphoreSecurity>对象并不会影响命名信号量的访问级别，直到你调用<xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>方法以将修改过的安全对象分配给命名信号量。</xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName> </xref:System.Security.AccessControl.SemaphoreSecurity>       SemaphoreAccessRule 对象是不可变。 使用的方法修改信号量的安全<xref:System.Security.AccessControl.SemaphoreSecurity>类来添加或删除规则; 执行此操作时，修改的基础的访问控制项。</xref:System.Security.AccessControl.SemaphoreSecurity>      1> [!NOTE] 1> Windows 98 或 Windows Millennium Edition 不支持同步对象的安全性。"
  example:
  - "The following code example demonstrates the separation between <xref:System.Security.AccessControl.AccessControlType> rules and <xref:System.Security.AccessControl.AccessControlType> rules, and shows the combination of rights in compatible rules. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/t-system.security.access_3_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/t-system.security.access_3_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class SemaphoreAccessRule : System.Security.AccessControl.AccessRule
  inheritance:
  - System.Object
  - System.Security.AccessControl.AuthorizationRule
  - System.Security.AccessControl.AccessRule
  implements: []
  inheritedMembers:
  - System.Security.AccessControl.AccessRule.AccessControlType
  - System.Security.AccessControl.AuthorizationRule.AccessMask
  - System.Security.AccessControl.AuthorizationRule.IdentityReference
  - System.Security.AccessControl.AuthorizationRule.InheritanceFlags
  - System.Security.AccessControl.AuthorizationRule.IsInherited
  - System.Security.AccessControl.AuthorizationRule.PropagationFlags
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "初始化的新实例<xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref>类，指定的用户或组，该规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。"
  remarks: "若要输入<xref:System.Threading.Semaphore>，例如通过调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法，用户必须具有<xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>访问。</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Semaphore> 退出信号量，通过调用<xref:System.Threading.Semaphore.Release%2A>方法，用户必须具有<xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>访问。</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.Semaphore.Release%2A>"
  syntax:
    content: public SemaphoreAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.Security.Principal.IdentityReference
      description: "用户或此规则适用于的组中。 类型必须为<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>或类型，如<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>可以转换为类型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>。"
    - id: eventRights
      type: System.Security.AccessControl.SemaphoreRights
      description: "按位组合<xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;></xref>值指定的权限允许或拒绝。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "之一<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>值指定是否允许或拒绝权限。"
  overload: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>指定了一个无效值。       -或-<code>type</code>指定了一个无效值。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -或-<code>eventRights</code>为零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>既不属于类型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;></xref>也不的类型，如<xref href=&quot;System.Security.Principal.NTAccount&quot;></xref>可以转换为类型<xref href=&quot;System.Security.Principal.SecurityIdentifier&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  id: '#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)'
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "初始化的新实例<xref href=&quot;System.Security.AccessControl.SemaphoreAccessRule&quot;></xref>类，指定名称的用户或组，该规则适用于的访问权限，以及是否允许或拒绝指定的访问权限。"
  remarks: "若要输入<xref:System.Threading.Semaphore>，例如通过调用<xref:System.Threading.WaitHandle.WaitOne%2A>方法，用户必须具有<xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>访问。</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.Semaphore> 退出信号量，通过调用<xref:System.Threading.Semaphore.Release%2A>方法，用户必须具有<xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName>访问。</xref:System.Security.AccessControl.SemaphoreRights?displayProperty=fullName> </xref:System.Threading.Semaphore.Release%2A>       此构造函数等效于创建<xref:System.Security.Principal.NTAccount>对象，通过传递`identity`到<xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName>构造函数，并传递新创建<xref:System.Security.Principal.NTAccount>对象传递给<xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29>构造函数。</xref:System.Security.AccessControl.SemaphoreAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.SemaphoreRights%2CSystem.Security.AccessControl.AccessControlType%29> </xref:System.Security.Principal.NTAccount> </xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=fullName> </xref:System.Security.Principal.NTAccount>"
  example:
  - "The following code example demonstrates the use of this constructor to create <xref:System.Security.AccessControl.SemaphoreAccessRule> objects. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/09c19b7f-c894-4d29-aa9f-_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/09c19b7f-c894-4d29-aa9f-_1.vb)]"
  syntax:
    content: public SemaphoreAccessRule (string identity, System.Security.AccessControl.SemaphoreRights eventRights, System.Security.AccessControl.AccessControlType type);
    parameters:
    - id: identity
      type: System.String
      description: "该规则适用于用户或组的名称。"
    - id: eventRights
      type: System.Security.AccessControl.SemaphoreRights
      description: "按位组合<xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;></xref>值指定的权限允许或拒绝。"
    - id: type
      type: System.Security.AccessControl.AccessControlType
      description: "之一<xref href=&quot;System.Security.AccessControl.AccessControlType&quot;></xref>值指定是否允许或拒绝权限。"
  overload: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>eventRights</code>指定了一个无效值。       -或-<code>type</code>指定了一个无效值。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>eventRights</code>为零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>identity</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -或-<code>identity</code>是零长度字符串。       -或-<code>identity</code>长度超过 512 个字符。"
  platform:
  - net462
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  id: SemaphoreRights
  parent: System.Security.AccessControl.SemaphoreAccessRule
  langs:
  - csharp
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  type: Property
  assemblies:
  - System
  namespace: System.Security.AccessControl
  summary: "获取允许或拒绝访问规则的权限。"
  remarks: "<xref:System.Security.AccessControl.SemaphoreAccessRule>对象是不可变。</xref:System.Security.AccessControl.SemaphoreAccessRule> 你可以创建新的访问规则，以表示不同的用户，不同的权限，或不同<xref:System.Security.AccessControl.AccessControlType>，但不是能修改现有的访问规则。</xref:System.Security.AccessControl.AccessControlType>"
  example:
  - "The following code example demonstrates the use of the SemaphoreRights property to display the rights in the set of rules contained in a <xref:System.Security.AccessControl.SemaphoreSecurity> object. The example creates a <xref:System.Security.AccessControl.SemaphoreSecurity> object, adds rules that allow and deny various rights for the current user, and displays the resulting pair of rules. The example then allows new rights for the current user and displays the result, showing that the new rights are merged with the existing <xref:System.Security.AccessControl.AccessControlType> rule.  \n  \n> [!NOTE]\n>  This example does not attach the security object to a <xref:System.Threading.Semaphore> object. Examples that attach security objects can be found in <xref:System.Threading.Semaphore.GetAccessControl%2A?displayProperty=fullName> and <xref:System.Threading.Semaphore.SetAccessControl%2A?displayProperty=fullName>.  \n  \n [!code-cs[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/csharp/p-system.security.access_1_1.cs)]\n [!code-vb[System.Security.AccessControl.SemaphoreSecurity.AddAccessRule#1](~/add/codesnippet/visualbasic/p-system.security.access_1_1.vb)]"
  syntax:
    content: public System.Security.AccessControl.SemaphoreRights SemaphoreRights { get; }
    return:
      type: System.Security.AccessControl.SemaphoreRights
      description: "按位组合<xref href=&quot;System.Security.AccessControl.SemaphoreRights&quot;></xref>值，该值指示权限允许或拒绝访问规则。"
  overload: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Security.AccessControl.AccessRule
  isExternal: false
  name: System.Security.AccessControl.AccessRule
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(IdentityReference,SemaphoreRights,AccessControlType)
- uid: System.Security.Principal.IdentityReference
  parent: System.Security.Principal
  isExternal: false
  name: IdentityReference
  nameWithType: IdentityReference
  fullName: System.Security.Principal.IdentityReference
- uid: System.Security.AccessControl.SemaphoreRights
  parent: System.Security.AccessControl
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreRights
- uid: System.Security.AccessControl.AccessControlType
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlType
  nameWithType: AccessControlType
  fullName: System.Security.AccessControl.AccessControlType
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor(System.String,System.Security.AccessControl.SemaphoreRights,System.Security.AccessControl.AccessControlType)
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreAccessRule(String,SemaphoreRights,AccessControlType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
  fullName: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights
- uid: System.Security.AccessControl.SemaphoreAccessRule.#ctor*
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreAccessRule
  nameWithType: SemaphoreAccessRule.SemaphoreAccessRule
- uid: System.Security.AccessControl.SemaphoreAccessRule.SemaphoreRights*
  parent: System.Security.AccessControl.SemaphoreAccessRule
  isExternal: false
  name: SemaphoreRights
  nameWithType: SemaphoreAccessRule.SemaphoreRights
