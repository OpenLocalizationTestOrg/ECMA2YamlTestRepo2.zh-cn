### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.XmlSchemaInference
  id: XmlSchemaInference
  children:
  - System.Xml.Schema.XmlSchemaInference.#ctor
  - System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)
  - System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
  - System.Xml.Schema.XmlSchemaInference.Occurrence
  - System.Xml.Schema.XmlSchemaInference.TypeInference
  langs:
  - csharp
  name: XmlSchemaInference
  nameWithType: XmlSchemaInference
  fullName: System.Xml.Schema.XmlSchemaInference
  type: Class
  summary: "从推理出 XML 架构定义语言 (XSD) 架构的 XML 文档。 XmlSchemaInference 类不能被继承。"
  remarks: "> [!IMPORTANT]1>-不要使用来自未知或不受信任的源或位置的架构。 这样会危及你的代码的安全性。   1>-（包括内联架构） 的 XML 架构的本质上就容易受到拒绝服务攻击;不要在不受信任的情况下接受它们。   1>-架构验证错误消息和异常可能会公开有关内容模型或架构文件的 URI 路径的敏感信息。 请注意不要公开此信息来不受信任的调用方。       中的 XmlSchemaInference 类<xref:System.Xml.Schema?displayProperty=fullName>命名空间，可推断 XML 架构定义语言 (XSD) 架构从 XML 文档的结构。</xref:System.Xml.Schema?displayProperty=fullName> XmlSchemaInference 类输出的 XML 架构可以验证 XML 文档。       XmlSchemaInference 类支持 W3C XML 和 XML 架构标准。 它可以在推断新架构，或以优化现有架构。"
  example:
  - "This example takes an XML file as input, and generates a schema that can validate the example XML.  \n  \n [!code-cs[XmlSchemaInferenceExamples#1](~/add/codesnippet/csharp/t-system.xml.schema.xmls_24_1.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#1](~/add/codesnippet/cpp/t-system.xml.schema.xmls_24_1.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#1](~/add/codesnippet/visualbasic/t-system.xml.schema.xmls_24_1.vb)]  \n  \n The following is the input XML file.  \n  \n [!code-xml[XmlSchemaInferenceExamples#5](~/add/codesnippet/xml/t-system.xml.schema.xmls_24_2.xml)]  \n  \n The following is the schema inferred from the XML document.  \n  \n [!code-xml[XmlSchemaInferenceExamples#6](~/add/codesnippet/xml/t-system.xml.schema.xmls_24_3.xsd)]"
  syntax:
    content: public sealed class XmlSchemaInference
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.#ctor
  id: '#ctor'
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: XmlSchemaInference()
  nameWithType: XmlSchemaInference.XmlSchemaInference()
  fullName: System.Xml.Schema.XmlSchemaInference.XmlSchemaInference()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新实例<xref href=&quot;System.Xml.Schema.XmlSchemaInference&quot;></xref>类。"
  syntax:
    content: public XmlSchemaInference ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaInference.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)
  id: InferSchema(System.Xml.XmlReader)
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: InferSchema(XmlReader)
  nameWithType: XmlSchemaInference.InferSchema(XmlReader)
  fullName: System.Xml.Schema.XmlSchemaInference.InferSchema(XmlReader)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "从推理出 XML 架构定义语言 (XSD) 架构中包含的 XML 文档<xref:System.Xml.XmlReader>指定对象。</xref:System.Xml.XmlReader>"
  remarks: "InferSchema 方法推断出一个或多个 W3C XML 架构定义语言 (XSD) 架构从 XML 实例中包含文档<xref:System.Xml.XmlReader>指定对象。</xref:System.Xml.XmlReader> 如果 XML 文档包含的元素和属性从多个命名空间，则生成多个架构︰ 一个用于每个命名空间的文档中使用。 主架构架构可以验证整个 XML 文档，且其目标命名空间的 XML 文档的文档元素的命名空间相同。       以下是使用 InferSchema 方法时要考虑的重要说明。      -InferSchema 方法将忽略任何`xsi:type`， `xsi:schemaLocation`，或`xsi:noNamespaceSchemaLocation`XML 文档中的属性。      -如果<xref:System.Xml.XmlReader>类型化对象，它包含的类型信息被忽略。</xref:System.Xml.XmlReader>      -如果<xref:System.Xml.XmlReader>对象定位在不是 XML 文档的根元素的元素上，仅为该元素推断的架构。</xref:System.Xml.XmlReader> 如果<xref:System.Xml.XmlReader>对象未放置在元素上，<xref:System.Xml.XmlReader.Read%2A>方法调用<xref:System.Xml.XmlReader>参数直到遇到元素 (例如，当<xref:System.Xml.XmlReader.NodeType%2A>是<xref:System.Xml.XmlNodeType>)。</xref:System.Xml.XmlNodeType> </xref:System.Xml.XmlReader.NodeType%2A> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlReader.Read%2A> </xref:System.Xml.XmlReader> 在此情况中，推断过程将开始从该元素。 如果没有元素遇到文档，结束之前一直<xref:System.ArgumentException>引发。</xref:System.ArgumentException>"
  example:
  - "This example takes an XML file as input, and generates a schema that can validate the example XML.  \n  \n [!code-cs[XmlSchemaInferenceExamples#1](~/add/codesnippet/csharp/m-system.xml.schema.xmls_6_1.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#1](~/add/codesnippet/cpp/m-system.xml.schema.xmls_6_1.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#1](~/add/codesnippet/visualbasic/m-system.xml.schema.xmls_6_1.vb)]  \n  \n The following is the input XML file.  \n  \n [!code-xml[XmlSchemaInferenceExamples#5](~/add/codesnippet/xml/m-system.xml.schema.xmls_6_2.xml)]  \n  \n The following is the schema inferred from the XML document.  \n  \n [!code-xml[XmlSchemaInferenceExamples#6](~/add/codesnippet/xml/m-system.xml.schema.xmls_6_3.xsd)]"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument);
    parameters:
    - id: instanceDocument
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>对象包含 XML 文档推断架构从。</xref:System.Xml.XmlReader>"
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>包含推断出的架构对象。"
  overload: System.Xml.Schema.XmlSchemaInference.InferSchema*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 文档不是格式正确的。"
  - type: System.Xml.Schema.XmlSchemaInferenceException
    commentId: T:System.Xml.Schema.XmlSchemaInferenceException
    description: "<xref:System.Xml.XmlReader>对象未放置在根节点或在元素上。</xref:System.Xml.XmlReader> 在架构推断过程就会出错。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
  id: InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: InferSchema(XmlReader,XmlSchemaSet)
  nameWithType: XmlSchemaInference.InferSchema(XmlReader,XmlSchemaSet)
  fullName: System.Xml.Schema.XmlSchemaInference.InferSchema(XmlReader,XmlSchemaSet)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "从推理出 XML 架构定义语言 (XSD) 架构中包含的 XML 文档<xref:System.Xml.XmlReader>对象指定，并且重新使用现有的架构中推断出的架构定义了<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;></xref>用相同的目标命名空间指定的对象。</xref:System.Xml.XmlReader>"
  remarks: "InferSchema 方法推断出一个或多个 W3C XML 架构定义语言 (XSD) 架构从 XML 实例中包含文档<xref:System.Xml.XmlReader>指定对象。</xref:System.Xml.XmlReader> 如果 XML 文档包含来自多个命名空间元素和属性，则会生成多个架构︰ 一个用于每个命名空间的文档中使用。 主架构架构可以验证整个 XML 文档，且其目标命名空间的 XML 文档的文档元素的命名空间相同。       以下是使用 InferSchema 方法时要考虑的重要说明。      -InferSchema 方法将忽略任何`xsi:type`， `xsi:schemaLocation`，或`xsi:noNamespaceSchemaLocation`XML 文档中的属性。      -如果<xref:System.Xml.XmlReader>类型化对象，它包含的类型信息被忽略。</xref:System.Xml.XmlReader>      -如果<xref:System.Xml.XmlReader>对象定位在不是 XML 文档的根元素的元素上，仅为该元素推断的架构。</xref:System.Xml.XmlReader> 如果<xref:System.Xml.XmlReader>对象未放置在元素上，<xref:System.Xml.XmlReader.Read%2A>方法调用<xref:System.Xml.XmlReader>参数直到遇到元素 (例如，当<xref:System.Xml.XmlReader.NodeType%2A>是<xref:System.Xml.XmlNodeType>)。</xref:System.Xml.XmlNodeType> </xref:System.Xml.XmlReader.NodeType%2A> </xref:System.Xml.XmlReader> </xref:System.Xml.XmlReader.Read%2A> </xref:System.Xml.XmlReader> 在此情况中，推断过程将开始从该元素。 如果没有元素遇到文档，结束之前一直<xref:System.ArgumentException>引发。</xref:System.ArgumentException>      -如果<xref:System.Xml.Schema.XmlSchemaSet>对象作为参数，并对其元素传递<xref:System.Xml.XmlReader>定位对象在一个中的架构中定义<xref:System.Xml.Schema.XmlSchemaSet>，推断出的架构用于优化中的现有架构<xref:System.Xml.Schema.XmlSchemaSet>参数具有相同的目标命名空间; 否则，新的架构会被推断为命名空间。</xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.Schema.XmlSchemaSet> </xref:System.Xml.XmlReader> </xref:System.Xml.Schema.XmlSchemaSet>"
  example:
  - "The following example code takes XML document 1 as an input and generates a schema that can validate XML document 1. The example code then takes XML document 2 and refines the schema generated from XML document 1, based on the changes found in XML document 2.  \n  \n The following is XML document 1.  \n  \n [!code-xml[XmlSchemaInferenceExamples#13](~/add/codesnippet/xml/0c36415c-5ade-4e0e-8494-_1.xml)]  \n  \n The following is XML document 2.  \n  \n [!code-xml[XmlSchemaInferenceExamples#14](~/add/codesnippet/xml/0c36415c-5ade-4e0e-8494-_2.xml)]  \n  \n The following example code infers a schema from the first XML document contained in `reader`, and then refines the inferred schema with the changes found in the second XML document contained in `reader1`. The example code uses the first overloaded <xref:System.Xml.Schema.XmlSchemaInference.InferSchema%2A> method to infer the schema, and the second overloaded InferSchema method to refine the existing schema in the <xref:System.Xml.Schema.XmlSchemaSet> object.  \n  \n [!code-cs[XmlSchemaInferenceExamples#4](~/add/codesnippet/csharp/0c36415c-5ade-4e0e-8494-_3.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#4](~/add/codesnippet/cpp/0c36415c-5ade-4e0e-8494-_3.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#4](~/add/codesnippet/visualbasic/0c36415c-5ade-4e0e-8494-_3.vb)]  \n  \n The following schema is the schema inferred from XML document 1.  \n  \n [!code-xml[XmlSchemaInferenceExamples#15](~/add/codesnippet/xml/0c36415c-5ade-4e0e-8494-_4.xml)]  \n  \n The following schema is the refined version of the schema above, based on XML document 2.  \n  \n [!code-xml[XmlSchemaInferenceExamples#16](~/add/codesnippet/xml/0c36415c-5ade-4e0e-8494-_5.xml)]"
  syntax:
    content: public System.Xml.Schema.XmlSchemaSet InferSchema (System.Xml.XmlReader instanceDocument, System.Xml.Schema.XmlSchemaSet schemas);
    parameters:
    - id: instanceDocument
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>对象包含 XML 文档推断架构从。</xref:System.Xml.XmlReader>"
    - id: schemas
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>对象，其中包含现有架构用于优化推断出的架构。"
    return:
      type: System.Xml.Schema.XmlSchemaSet
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaSet&quot;> </xref>包含推断出的架构对象。"
  overload: System.Xml.Schema.XmlSchemaInference.InferSchema*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "XML 文档不是格式正确的。"
  - type: System.Xml.Schema.XmlSchemaInferenceException
    commentId: T:System.Xml.Schema.XmlSchemaInferenceException
    description: "<xref:System.Xml.XmlReader>对象未放置在根节点或在元素上。</xref:System.Xml.XmlReader> 在架构推断过程就会出错。"
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.Occurrence
  id: Occurrence
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: Occurrence
  nameWithType: XmlSchemaInference.Occurrence
  fullName: System.Xml.Schema.XmlSchemaInference.Occurrence
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>影响从 XML 文档推断的架构匹配项声明的值。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  remarks: "如果匹配项属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>、 XML 文档中遇到的第一个时间元素、 架构声明将被推断为`minOccurs=&quot;1&quot;`。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption> 当遇到特性时，架构声明将被推断为`use=&quot;required&quot;`。       如果匹配项属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>，元素架构声明均推断为`minOccurs=&quot;0&quot;`，和属性架构声明会被推断为`use=&quot;optional&quot;`。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>       匹配项属性的默认值为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  example:
  - "This example illustrates how occurrence is affected by the Occurrence property. The example code infers occurrence from an XML file in two different ways: relaxed and restricted. The following is the example XML file.  \n  \n [!code-xml[XmlSchemaInferenceExamples#7](~/add/codesnippet/xml/p-system.xml.schema.xmls_3_1.xml)]  \n  \n The following example code instructs the <xref:System.Xml.Schema.XmlSchemaInference> class to infer occurrence of elements and attributes in a relaxed way.  \n  \n [!code-cs[XmlSchemaInferenceExamples#2](~/add/codesnippet/csharp/p-system.xml.schema.xmls_3_2.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#2](~/add/codesnippet/cpp/p-system.xml.schema.xmls_3_2.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#2](~/add/codesnippet/visualbasic/p-system.xml.schema.xmls_3_2.vb)]  \n  \n Because the Occurrence property was set to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>, the following schema was generated.  \n  \n [!code-xml[XmlSchemaInferenceExamples#8](~/add/codesnippet/xml/p-system.xml.schema.xmls_3_3.xml)]  \n  \n In the example code above, if the Occurrence property was not set to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>, the <xref:System.Xml.Schema.XmlSchemaInference> class would have defaulted to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption> and generated the following schema.  \n  \n [!code-xml[XmlSchemaInferenceExamples#9](~/add/codesnippet/xml/p-system.xml.schema.xmls_3_4.xml)]"
  syntax:
    content: public System.Xml.Schema.XmlSchemaInference.InferenceOption Occurrence { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaInference.InferenceOption
      description: "<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>对象。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  overload: System.Xml.Schema.XmlSchemaInference.Occurrence*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaInference.TypeInference
  id: TypeInference
  parent: System.Xml.Schema.XmlSchemaInference
  langs:
  - csharp
  name: TypeInference
  nameWithType: XmlSchemaInference.TypeInference
  fullName: System.Xml.Schema.XmlSchemaInference.TypeInference
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>会影响从 XML 文档推理出的类型的值。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  remarks: "如果 TypeInference 属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>，具有简单内容的 XML 文档中的元素和属性的推断的类型始终是`xs:string`。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption> 如果 TypeInference 属性设置为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>，推断更具体的类型，如`xs:date`， `xs:decimal`， `xs:unsignedByte`，依次类推。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>       TypeInference 属性的默认值为<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  example:
  - "This example illustrates how type inference is affected by the TypeInference property. The example code infers types from an XML file in two different ways: relaxed and restricted. The following is the example XML file.  \n  \n [!code-xml[XmlSchemaInferenceExamples#10](~/add/codesnippet/xml/p-system.xml.schema.xmls_0_1.xml)]  \n  \n The following example code instructs the <xref:System.Xml.Schema.XmlSchemaInference> class to infer `xs:string` for elements and attributes with simple content.  \n  \n [!code-cs[XmlSchemaInferenceExamples#3](~/add/codesnippet/csharp/p-system.xml.schema.xmls_0_2.cs)]\n [!code-cpp[XmlSchemaInferenceExamples#3](~/add/codesnippet/cpp/p-system.xml.schema.xmls_0_2.cpp)]\n [!code-vb[XmlSchemaInferenceExamples#3](~/add/codesnippet/visualbasic/p-system.xml.schema.xmls_0_2.vb)]  \n  \n Because the TypeInference property was set to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>, the following schema was generated.  \n  \n [!code-xml[XmlSchemaInferenceExamples#11](~/add/codesnippet/xml/p-system.xml.schema.xmls_0_3.xml)]  \n  \n In the example code above, if the TypeInference property was not set to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>, the <xref:System.Xml.Schema.XmlSchemaInference> class would have defaulted to <xref:System.Xml.Schema.XmlSchemaInference.InferenceOption> and generated the following schema.  \n  \n [!code-xml[XmlSchemaInferenceExamples#12](~/add/codesnippet/xml/p-system.xml.schema.xmls_0_4.xml)]"
  syntax:
    content: public System.Xml.Schema.XmlSchemaInference.InferenceOption TypeInference { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaInference.InferenceOption
      description: "<xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>对象。</xref:System.Xml.Schema.XmlSchemaInference.InferenceOption>"
  overload: System.Xml.Schema.XmlSchemaInference.TypeInference*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.Xml.Schema.XmlSchemaInferenceException
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaInferenceException
  nameWithType: XmlSchemaInferenceException
  fullName: System.Xml.Schema.XmlSchemaInferenceException
- uid: System.Xml.Schema.XmlSchemaInference.#ctor
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: XmlSchemaInference()
  nameWithType: XmlSchemaInference.XmlSchemaInference()
  fullName: System.Xml.Schema.XmlSchemaInference.XmlSchemaInference()
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader)
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: InferSchema(XmlReader)
  nameWithType: XmlSchemaInference.InferSchema(XmlReader)
  fullName: System.Xml.Schema.XmlSchemaInference.InferSchema(XmlReader)
- uid: System.Xml.Schema.XmlSchemaSet
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaSet
  nameWithType: XmlSchemaSet
  fullName: System.Xml.Schema.XmlSchemaSet
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema(System.Xml.XmlReader,System.Xml.Schema.XmlSchemaSet)
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: InferSchema(XmlReader,XmlSchemaSet)
  nameWithType: XmlSchemaInference.InferSchema(XmlReader,XmlSchemaSet)
  fullName: System.Xml.Schema.XmlSchemaInference.InferSchema(XmlReader,XmlSchemaSet)
- uid: System.Xml.Schema.XmlSchemaInference.Occurrence
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: Occurrence
  nameWithType: XmlSchemaInference.Occurrence
  fullName: System.Xml.Schema.XmlSchemaInference.Occurrence
- uid: System.Xml.Schema.XmlSchemaInference.InferenceOption
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaInference+InferenceOption
  nameWithType: XmlSchemaInference+InferenceOption
  fullName: System.Xml.Schema.XmlSchemaInference+InferenceOption
- uid: System.Xml.Schema.XmlSchemaInference.TypeInference
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: TypeInference
  nameWithType: XmlSchemaInference.TypeInference
  fullName: System.Xml.Schema.XmlSchemaInference.TypeInference
- uid: System.Xml.Schema.XmlSchemaInference.#ctor*
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: XmlSchemaInference
  nameWithType: XmlSchemaInference.XmlSchemaInference
- uid: System.Xml.Schema.XmlSchemaInference.InferSchema*
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: InferSchema
  nameWithType: XmlSchemaInference.InferSchema
- uid: System.Xml.Schema.XmlSchemaInference.Occurrence*
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: Occurrence
  nameWithType: XmlSchemaInference.Occurrence
- uid: System.Xml.Schema.XmlSchemaInference.TypeInference*
  parent: System.Xml.Schema.XmlSchemaInference
  isExternal: false
  name: TypeInference
  nameWithType: XmlSchemaInference.TypeInference
