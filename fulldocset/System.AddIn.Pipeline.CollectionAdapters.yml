### YamlMime:ManagedReference
items:
- uid: System.AddIn.Pipeline.CollectionAdapters
  id: CollectionAdapters
  children:
  - System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract`1)
  - System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  - System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})
  - System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  langs:
  - csharp
  name: CollectionAdapters
  nameWithType: CollectionAdapters
  fullName: System.AddIn.Pipeline.CollectionAdapters
  type: Class
  summary: "使集合外接程序和其主机应用程序之间传递。"
  remarks: "此类提供方法，以便能够<xref:System.Collections.Generic.IList%601>集合转换为<xref:System.AddIn.Contract.IListContract%601>集合。</xref:System.AddIn.Contract.IListContract%601> </xref:System.Collections.Generic.IList%601> <xref:System.AddIn.Contract.IListContract%601>跨隔离边界传递集合并将其转换回<xref:System.Collections.Generic.IList%601>外接程序或主机应用程序可以使用的集合。</xref:System.Collections.Generic.IList%601> </xref:System.AddIn.Contract.IListContract%601>       集合中的对象必须是可远程处理。 有关你可以将传递的对象类型的详细信息，请参阅[协定、 视图和适配器](http://msdn.microsoft.com/en-us/a6460173-9507-4b87-8c07-d4ee245d715c)。"
  syntax:
    content: public static class CollectionAdapters
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract`1)
  id: ToIList``1(System.AddIn.Contract.IListContract`1)
  parent: System.AddIn.Pipeline.CollectionAdapters
  langs:
  - csharp
  name: ToIList(IListContract<T>)
  nameWithType: CollectionAdapters.ToIList(IListContract<T>)
  fullName: System.AddIn.Pipeline.CollectionAdapters.ToIList(IListContract<T>)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  syntax:
    content: public static System.Collections.Generic.IList<T> ToIList<T> (System.AddIn.Contract.IListContract<T> collection);
    parameters:
    - id: collection
      type: System.AddIn.Contract.IListContract`1
      description: "要添加。"
    return:
      type: System.Collections.Generic.IList{T}
      description: "要添加。"
  overload: System.AddIn.Pipeline.CollectionAdapters.ToIList<T>*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  id: ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  langs:
  - csharp
  name: ToIList(IListContract<TContract>,Converter<TContract,TView>,Converter<TView,TContract>)
  nameWithType: CollectionAdapters.ToIList(IListContract<TContract>,Converter<TContract,TView>,Converter<TView,TContract>)
  fullName: System.AddIn.Pipeline.CollectionAdapters.ToIList(IListContract<TContract>,Converter<TContract,TView>,Converter<TView,TContract>)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  syntax:
    content: public static System.Collections.Generic.IList<TView> ToIList<TContract,TView> (System.AddIn.Contract.IListContract<TContract> collection, Converter<TContract,TView> contractViewAdapter, Converter<TView,TContract> viewContractAdapter);
    parameters:
    - id: collection
      type: System.AddIn.Contract.IListContract{TContract}
      description: "要添加。"
    - id: contractViewAdapter
      type: System.Converter{TContract,TView}
      description: "要添加。"
    - id: viewContractAdapter
      type: System.Converter{TView,TContract}
      description: "要添加。"
    return:
      type: System.Collections.Generic.IList{TView}
      description: "要添加。"
  overload: System.AddIn.Pipeline.CollectionAdapters.ToIList<TContract,TView>*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})
  id: ToIListContract``1(System.Collections.Generic.IList{``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  langs:
  - csharp
  name: ToIListContract(IList<T>)
  nameWithType: CollectionAdapters.ToIListContract(IList<T>)
  fullName: System.AddIn.Pipeline.CollectionAdapters.ToIListContract(IList<T>)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  syntax:
    content: public static System.AddIn.Contract.IListContract<T> ToIListContract<T> (System.Collections.Generic.IList<T> collection);
    parameters:
    - id: collection
      type: System.Collections.Generic.IList{T}
      description: "要添加。"
    return:
      type: System.AddIn.Contract.IListContract`1
      description: "要添加。"
  overload: System.AddIn.Pipeline.CollectionAdapters.ToIListContract<T>*
  exceptions: []
  platform:
  - net462
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  id: ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  langs:
  - csharp
  name: ToIListContract(IList<TView>,Converter<TView,TContract>,Converter<TContract,TView>)
  nameWithType: CollectionAdapters.ToIListContract(IList<TView>,Converter<TView,TContract>,Converter<TContract,TView>)
  fullName: System.AddIn.Pipeline.CollectionAdapters.ToIListContract(IList<TView>,Converter<TView,TContract>,Converter<TContract,TView>)
  type: Method
  assemblies:
  - System.AddIn
  namespace: System.AddIn.Pipeline
  syntax:
    content: public static System.AddIn.Contract.IListContract<TContract> ToIListContract<TView,TContract> (System.Collections.Generic.IList<TView> collection, Converter<TView,TContract> viewContractAdapter, Converter<TContract,TView> contractViewAdapter);
    parameters:
    - id: collection
      type: System.Collections.Generic.IList{TView}
      description: "要添加。"
    - id: viewContractAdapter
      type: System.Converter{TView,TContract}
      description: "要添加。"
    - id: contractViewAdapter
      type: System.Converter{TContract,TView}
      description: "要添加。"
    return:
      type: System.AddIn.Contract.IListContract{TContract}
      description: "要添加。"
  overload: System.AddIn.Pipeline.CollectionAdapters.ToIListContract<TView,TContract>*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``1(System.AddIn.Contract.IListContract`1)
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIList(IListContract<T>)
  nameWithType: CollectionAdapters.ToIList(IListContract<T>)
  fullName: System.AddIn.Pipeline.CollectionAdapters.ToIList(IListContract<T>)
- uid: System.Collections.Generic.IList{T}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<T>
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.AddIn.Contract.IListContract`1
  parent: System.AddIn.Contract
  isExternal: false
  name: IListContract<T>
  nameWithType: IListContract<T>
  fullName: System.AddIn.Contract.IListContract<T>
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList``2(System.AddIn.Contract.IListContract{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIList(IListContract<TContract>,Converter<TContract,TView>,Converter<TView,TContract>)
  nameWithType: CollectionAdapters.ToIList(IListContract<TContract>,Converter<TContract,TView>,Converter<TView,TContract>)
  fullName: System.AddIn.Pipeline.CollectionAdapters.ToIList(IListContract<TContract>,Converter<TContract,TView>,Converter<TView,TContract>)
- uid: System.Collections.Generic.IList{TView}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<TView>
  nameWithType: IList<TView>
  fullName: System.Collections.Generic.IList<TView>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<TView>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TView
    name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.AddIn.Contract.IListContract{TContract}
  parent: System.AddIn.Contract
  isExternal: false
  name: IListContract<TContract>
  nameWithType: IListContract<TContract>
  fullName: System.AddIn.Contract.IListContract<TContract>
  spec.csharp:
  - uid: System.AddIn.Contract.IListContract`1
    name: IListContract
    nameWithType: IListContract
    fullName: IListContract<TContract>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TContract
    name: TContract
    nameWithType: TContract
    fullName: TContract
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Converter{TContract,TView}
  parent: System
  isExternal: false
  name: Converter<TContract,TView>
  nameWithType: Converter<TContract,TView>
  fullName: System.Converter<TContract,TView>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: Converter<TContract,TView>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TContract
    name: TContract
    nameWithType: TContract
    fullName: TContract
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TView
    name: TView
    nameWithType: TView
    fullName: TView
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Converter{TView,TContract}
  parent: System
  isExternal: false
  name: Converter<TView,TContract>
  nameWithType: Converter<TView,TContract>
  fullName: System.Converter<TView,TContract>
  spec.csharp:
  - uid: System.Converter`2
    name: Converter
    nameWithType: Converter
    fullName: Converter<TView,TContract>
  - name: <
    nameWithType: <
    fullName: <
  - uid: TView
    name: TView
    nameWithType: TView
    fullName: TView
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TContract
    name: TContract
    nameWithType: TContract
    fullName: TContract
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``1(System.Collections.Generic.IList{``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIListContract(IList<T>)
  nameWithType: CollectionAdapters.ToIListContract(IList<T>)
  fullName: System.AddIn.Pipeline.CollectionAdapters.ToIListContract(IList<T>)
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract``2(System.Collections.Generic.IList{``0},System.Converter{``0,``1},System.Converter{``1,``0})
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIListContract(IList<TView>,Converter<TView,TContract>,Converter<TContract,TView>)
  nameWithType: CollectionAdapters.ToIListContract(IList<TView>,Converter<TView,TContract>,Converter<TContract,TView>)
  fullName: System.AddIn.Pipeline.CollectionAdapters.ToIListContract(IList<TView>,Converter<TView,TContract>,Converter<TContract,TView>)
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList<T>*
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIList<T>
  nameWithType: CollectionAdapters.ToIList<T>
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIList<TContract,TView>*
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIList<TContract,TView>
  nameWithType: CollectionAdapters.ToIList<TContract,TView>
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract<T>*
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIListContract<T>
  nameWithType: CollectionAdapters.ToIListContract<T>
- uid: System.AddIn.Pipeline.CollectionAdapters.ToIListContract<TView,TContract>*
  parent: System.AddIn.Pipeline.CollectionAdapters
  isExternal: false
  name: ToIListContract<TView,TContract>
  nameWithType: CollectionAdapters.ToIListContract<TView,TContract>
