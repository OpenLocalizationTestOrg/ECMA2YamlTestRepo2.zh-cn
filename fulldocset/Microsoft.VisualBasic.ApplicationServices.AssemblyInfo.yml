### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  id: AssemblyInfo
  children:
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.#ctor(System.Reflection.Assembly)
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyName
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.CompanyName
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Copyright
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Description
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.DirectoryPath
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.LoadedAssemblies
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.ProductName
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.StackTrace
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Trademark
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Version
  - Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.WorkingSet
  langs:
  - csharp
  name: AssemblyInfo
  nameWithType: AssemblyInfo
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  type: Class
  summary: "提供用于获取有关应用程序，如版本号、 描述、 加载的程序集和等等的信息的属性。"
  remarks: "公开的属性的某些`My.Application.Info`对象返回应用程序的程序集信息。 若要在应用程序的程序集中设置的信息，必须使用**程序集信息**对话框中，可从访问**应用程序**窗格**项目设计器**。       `My.Application.Info`对象提供的功能类似于<xref:System.Diagnostics.FileVersionInfo>类，但具有作用域以让最常见的属性的快速访问。</xref:System.Diagnostics.FileVersionInfo>       其他属性，如`LoadedAssemblies`，提供对应用程序的当前状态的访问。"
  example:
  - "This example uses the `My.Application.Info.Version` property to display the version of the application.  \n  \n [!code-vb[VbVbalrMyApplication#30](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#30)]"
  syntax:
    content: public class AssemblyInfo
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.#ctor(System.Reflection.Assembly)
  id: '#ctor(System.Reflection.Assembly)'
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: AssemblyInfo(Assembly)
  nameWithType: AssemblyInfo.AssemblyInfo(Assembly)
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyInfo(Assembly)
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "初始化的新实例<xref href=&quot;Microsoft.VisualBasic.ApplicationServices.AssemblyInfo&quot;></xref>与指定的程序集信息的类。"
  syntax:
    content: public AssemblyInfo (System.Reflection.Assembly currentAssembly);
    parameters:
    - id: currentAssembly
      type: System.Reflection.Assembly
      description: "<xref:System.Reflection.Assembly>.</xref:System.Reflection.Assembly> 为要获取其信息的程序集。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyName
  id: AssemblyName
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: AssemblyName
  nameWithType: AssemblyInfo.AssemblyName
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取不带扩展名的应用程序的程序集文件的名称。"
  remarks: "`My.Application.Info.AssemblyName`属性获取包含清单的文件的名称。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.AssemblyName` property to display the name of the application.  \n  \n [!code-vb[VbVbalrMyApplication#20](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#20)]"
  syntax:
    content: public string AssemblyName { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>包含文件名称。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyName*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.CompanyName
  id: CompanyName
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: CompanyName
  nameWithType: AssemblyInfo.CompanyName
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.CompanyName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取与应用程序关联的公司名称。"
  remarks: "`My.Application.Info.CompanyName`属性获取与应用程序关联的公司名称。       您可以通过更改的值来更改公司名称**公司**中**程序集信息**对话框中，可从访问**应用程序**窗格**项目设计器**。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.CompanyName` property to display the company name associated with the application.  \n  \n [!code-vb[VbVbalrMyApplication#21](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#21)]"
  syntax:
    content: public string CompanyName { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ，其中包含与应用程序关联的公司名称。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.CompanyName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "程序集没有<xref:System.Reflection.AssemblyCompanyAttribute>属性。</xref:System.Reflection.AssemblyCompanyAttribute>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Copyright
  id: Copyright
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: Copyright
  nameWithType: AssemblyInfo.Copyright
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Copyright
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取与应用程序关联的版权声明。"
  remarks: "`My.Application.Info.Copyright`属性获取与应用程序关联的版权声明。       你可以通过更改的值来更改在未事先得到**版权**中**程序集信息**对话框中，可从访问**应用程序**窗格**项目设计器**。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.Copyright` property to display the company name associated with the application.  \n  \n [!code-vb[VbVbalrMyApplication#22](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#22)]"
  syntax:
    content: public string Copyright { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>包含与应用程序关联的版权声明。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Copyright*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "程序集没有<xref:System.Reflection.AssemblyCopyrightAttribute>属性。</xref:System.Reflection.AssemblyCopyrightAttribute>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Description
  id: Description
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: Description
  nameWithType: AssemblyInfo.Description
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Description
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取与该应用程序关联的说明。"
  remarks: "`My.Application.Info.Description`属性获取与该应用程序关联的说明。       您可以通过更改的值更改描述**说明**中**程序集信息**对话框中，可从访问**应用程序**窗格**项目设计器**。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.Description` property to display the description associated with the application.  \n  \n [!code-vb[VbVbalrMyApplication#23](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#23)]"
  syntax:
    content: public string Description { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>包含与应用程序关联的说明。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Description*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "程序集没有<xref:System.Reflection.AssemblyDescriptionAttribute>属性。</xref:System.Reflection.AssemblyDescriptionAttribute>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.DirectoryPath
  id: DirectoryPath
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: DirectoryPath
  nameWithType: AssemblyInfo.DirectoryPath
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.DirectoryPath
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取存储应用程序的目录。"
  remarks: "`My.Application.Info.DirectoryPath`属性获取存储应用程序的目录。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.DirectoryPath` property to display the directory path where the application is stored.  \n  \n [!code-vb[VbVbalrMyApplication#24](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#24)]"
  syntax:
    content: public string DirectoryPath { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ，其中包含存储应用程序的目录。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.DirectoryPath*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.LoadedAssemblies
  id: LoadedAssemblies
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: LoadedAssemblies
  nameWithType: AssemblyInfo.LoadedAssemblies
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.LoadedAssemblies
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取应用程序加载的所有程序集的集合。"
  remarks: "`My.Application.Info.LoadedAssemblies`属性是类似于<xref:System.AppDomain.GetAssemblies%2A>方法。</xref:System.AppDomain.GetAssemblies%2A>      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.LoadedAssemblies` property to display the assemblies loaded by the application.  \n  \n [!code-vb[VbVbalrMyApplication#25](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#25)]  \n  \n This example requires that your Windows Forms application has a <xref:System.Windows.Forms.ListBox> control named `ListBox1`."
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Reflection.Assembly> LoadedAssemblies { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Reflection.Assembly}
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;的<xref:System.Reflection.Assembly>包含所有的程序集加载的应用程序。</xref:System.Reflection.Assembly>"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.LoadedAssemblies*
  exceptions:
  - type: System.AppDomainUnloadedException
    commentId: T:System.AppDomainUnloadedException
    description: "未加载的应用程序域。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.ProductName
  id: ProductName
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: ProductName
  nameWithType: AssemblyInfo.ProductName
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.ProductName
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取与应用程序关联的产品名称。"
  remarks: "`My.Application.Info.ProductName`属性获取与应用程序关联的产品名称。       您可以通过更改的值更改的产品名称**产品**中**程序集信息**对话框中，可从访问**应用程序**窗格**项目设计器**。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.ProductName` property to display the product name associated with the application.  \n  \n [!code-vb[VbVbalrMyApplication#26](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#26)]"
  syntax:
    content: public string ProductName { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>包含产品名称与应用程序关联。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.ProductName*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "程序集没有<xref:System.Reflection.AssemblyProductAttribute>属性。</xref:System.Reflection.AssemblyProductAttribute>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.StackTrace
  id: StackTrace
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: StackTrace
  nameWithType: AssemblyInfo.StackTrace
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.StackTrace
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取当前的堆栈跟踪信息。"
  remarks: "`My.Application.Info.StackTrace`属性列出顺序的逆序方法调用 — 即，首先，描述最新的方法调用，以及它列出在单独的行上的堆栈上每个方法调用。 但是，`My.Application.Info.StackTrace`属性可能不报告任意多个方法调用预期，由于优化期间发生代码转换。       通常情况下，堆栈跟踪信息用于调试应用程序。       每个方法调用的堆栈跟踪信息的格式如下:&quot;在*FullClassName*。*MethodName*(*MethodParams*) 中*FileName*︰ 行*LineNumber* &quot;&quot;at&quot;文本前面是三个空格，文字&quot;in&quot;和&quot;: 行&quot;省略了如果调试符号不可用。 占位符`FullClassName`， `MethodName`， `MethodParams`， `FileName`，和`LineNumber`将替换为实际值，定义如下: |一部分 |说明 |  |----------|-----------------|  |*FullClassName*|类，包括命名空间的完整名称。 |  |*MethodName*|方法的名称。 |  |*MethodParams*|参数类型/名称对的列表。 每个对隔开逗号 （，）。 如果省略此信息*MethodName*具有零参数。 |  |*FileName*|源的名称文件，其中*MethodName*声明方法。 如果调试符号不可用，则省略此信息。 |  |*LineNumber*|中的行数*FileName* ，其中包含从源代码*MethodName*指令调用堆栈上。 如果调试符号不可用，则省略此信息。 |      `My.Applicaiton.Info.StackTrace`属性提供的功能类似于<xref:System.Environment.StackTrace%2A>属性。</xref:System.Environment.StackTrace%2A>      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.StackTrace` property to display the stack trace of the application from the point at which the code executes.  \n  \n [!code-vb[VbVbalrMyApplication#27](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#27)]"
  syntax:
    content: public string StackTrace { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>包含当前的堆栈跟踪信息。 返回值可以是<xref:System.String>.</xref:System.String>"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.StackTrace*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "请求的堆栈跟踪信息超出了范围。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title
  id: Title
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: Title
  nameWithType: AssemblyInfo.Title
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取与应用程序相关联的标题。"
  remarks: "`My.Application.Info.Title`属性获取与应用程序相关联的标题。       你可以通过更改的值更改标题**标题**中**程序集信息**对话框中，可从访问**应用程序**窗格**项目设计器**。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.Title` property to display the title associated with the application.  \n  \n [!code-vb[VbVbalrMyApplication#28](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#28)]"
  syntax:
    content: public string Title { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>包含<xref:System.Reflection.AssemblyTitleAttribute>与应用程序关联。</xref:System.Reflection.AssemblyTitleAttribute>"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "程序集没有<xref:System.Reflection.AssemblyTitleAttribute>属性。</xref:System.Reflection.AssemblyTitleAttribute>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Trademark
  id: Trademark
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: Trademark
  nameWithType: AssemblyInfo.Trademark
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Trademark
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取与应用程序关联的商标声明。"
  remarks: "`My.Application.Info.Trademark`属性获取与应用程序关联的商标声明。       您可以通过更改的值更改商标声明**商标**中**程序集信息**对话框中，可从访问**应用程序**窗格**项目设计器**。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.Trademark` property to display the trademark information associated with the application.  \n  \n [!code-vb[VbVbalrMyApplication#29](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#29)]"
  syntax:
    content: public string Trademark { get; }
    return:
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref>包含商标声明与应用程序关联。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Trademark*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "程序集没有<xref:System.Reflection.AssemblyTrademarkAttribute>属性。</xref:System.Reflection.AssemblyTrademarkAttribute>"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Version
  id: Version
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: Version
  nameWithType: AssemblyInfo.Version
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Version
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取应用程序的版本号。"
  remarks: "`My.Application.Info.Version`属性可以获取<xref:System.Version>对象，其中包含应用程序的版本号。</xref:System.Version> 你可以使用<xref:System.Version.Major%2A>， <xref:System.Version.Minor%2A>， <xref:System.Version.Build%2A>，和<xref:System.Version.Revision%2A>属性<xref:System.Version>来访问应用程序有关的特定版本信息的对象。</xref:System.Version> </xref:System.Version.Revision%2A> </xref:System.Version.Build%2A> </xref:System.Version.Minor%2A> </xref:System.Version.Major%2A>       ClickOnce 部署的应用程序应使用<xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A>属性<xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.Deployment%2A>属性。</xref:Microsoft.VisualBasic.ApplicationServices.ConsoleApplicationBase.Deployment%2A> </xref:System.Deployment.Application.ApplicationDeployment.CurrentVersion%2A>      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.Version` property to display the version of the application.  \n  \n [!code-vb[VbVbalrMyApplication#30](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#30)]"
  syntax:
    content: public Version Version { get; }
    return:
      type: System.Version
      description: "A<xref:System.Version>对象，其中包含应用程序的版本号。</xref:System.Version>"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Version*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "应用程序没有足够的权限以访问程序集版本。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.WorkingSet
  id: WorkingSet
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  langs:
  - csharp
  name: WorkingSet
  nameWithType: AssemblyInfo.WorkingSet
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.WorkingSet
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取映射到进程上下文的物理内存量。"
  remarks: "`My.Application.Info.WorkingSet`属性具有相同的行为<xref:System.Environment.WorkingSet%2A>属性。</xref:System.Environment.WorkingSet%2A>      1> [!NOTE] 1> 此属性始终返回零 Windows 98 和 Windows Millennium Edition。      ## 项目类型的可用性 |项目类型 |可用 |  |------------------|---------------|  |Windows 窗体应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 窗体控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Application.Info.WorkingSet` property to display the number of bytes of physical memory mapped to the application.  \n  \n [!code-vb[VbVbalrMyApplication#31](~/add/codesnippet/visualbasic/VbVbalrMyApplication/Form1.vb#31)]"
  syntax:
    content: public long WorkingSet { get; }
    return:
      type: System.Int64
      description: "A <xref uid=&quot;langword_csharp_Long&quot; name=&quot;Long&quot; href=&quot;&quot;> </xref>包含映射到进程上下文的物理内存的字节数。"
  overload: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.WorkingSet*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "中的部分信任存在，并且用户的情况下缺少必要的权限。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.AppDomainUnloadedException
  parent: System
  isExternal: false
  name: AppDomainUnloadedException
  nameWithType: AppDomainUnloadedException
  fullName: System.AppDomainUnloadedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.#ctor(System.Reflection.Assembly)
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: AssemblyInfo(Assembly)
  nameWithType: AssemblyInfo.AssemblyInfo(Assembly)
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyInfo(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyName
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyInfo.AssemblyName
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.CompanyName
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: CompanyName
  nameWithType: AssemblyInfo.CompanyName
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.CompanyName
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Copyright
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Copyright
  nameWithType: AssemblyInfo.Copyright
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Copyright
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Description
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Description
  nameWithType: AssemblyInfo.Description
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Description
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.DirectoryPath
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: DirectoryPath
  nameWithType: AssemblyInfo.DirectoryPath
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.DirectoryPath
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.LoadedAssemblies
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: LoadedAssemblies
  nameWithType: AssemblyInfo.LoadedAssemblies
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.LoadedAssemblies
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Reflection.Assembly}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<Assembly>
  nameWithType: ReadOnlyCollection<Assembly>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Reflection.Assembly>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.ProductName
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: ProductName
  nameWithType: AssemblyInfo.ProductName
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.ProductName
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.StackTrace
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: StackTrace
  nameWithType: AssemblyInfo.StackTrace
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.StackTrace
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Title
  nameWithType: AssemblyInfo.Title
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Trademark
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Trademark
  nameWithType: AssemblyInfo.Trademark
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Trademark
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Version
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Version
  nameWithType: AssemblyInfo.Version
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Version
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.WorkingSet
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: WorkingSet
  nameWithType: AssemblyInfo.WorkingSet
  fullName: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.WorkingSet
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.#ctor*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: AssemblyInfo
  nameWithType: AssemblyInfo.AssemblyInfo
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.AssemblyName*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: AssemblyName
  nameWithType: AssemblyInfo.AssemblyName
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.CompanyName*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: CompanyName
  nameWithType: AssemblyInfo.CompanyName
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Copyright*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Copyright
  nameWithType: AssemblyInfo.Copyright
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Description*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Description
  nameWithType: AssemblyInfo.Description
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.DirectoryPath*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: DirectoryPath
  nameWithType: AssemblyInfo.DirectoryPath
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.LoadedAssemblies*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: LoadedAssemblies
  nameWithType: AssemblyInfo.LoadedAssemblies
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.ProductName*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: ProductName
  nameWithType: AssemblyInfo.ProductName
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.StackTrace*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: StackTrace
  nameWithType: AssemblyInfo.StackTrace
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Title*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Title
  nameWithType: AssemblyInfo.Title
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Trademark*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Trademark
  nameWithType: AssemblyInfo.Trademark
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.Version*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: Version
  nameWithType: AssemblyInfo.Version
- uid: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo.WorkingSet*
  parent: Microsoft.VisualBasic.ApplicationServices.AssemblyInfo
  isExternal: false
  name: WorkingSet
  nameWithType: AssemblyInfo.WorkingSet
