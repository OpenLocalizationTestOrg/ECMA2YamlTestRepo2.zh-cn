### YamlMime:ManagedReference
items:
- uid: System.Windows.Point
  id: Point
  children:
  - System.Windows.Point.#ctor(System.Double,System.Double)
  - System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.Equals(System.Object)
  - System.Windows.Point.Equals(System.Windows.Point)
  - System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.GetHashCode
  - System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  - System.Windows.Point.Offset(System.Double,System.Double)
  - System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  - System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  - System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  - System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.Parse(System.String)
  - System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  - System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  - System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Windows.Point.ToString
  - System.Windows.Point.ToString(System.IFormatProvider)
  - System.Windows.Point.X
  - System.Windows.Point.Y
  langs:
  - csharp
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
  type: Struct
  summary: "表示二维空间中的 x 坐标和 y 坐标对。"
  remarks: "在 XAML 中，之间的分隔符<xref:System.Windows.Point.X%2A>和<xref:System.Windows.Point.Y%2A>点的值可以是逗号或空格。</xref:System.Windows.Point.Y%2A> </xref:System.Windows.Point.X%2A>       某些区域性可能会使用逗号字符作为小数分隔符而不是句点字符。 XAML 处理固定区域性为 EN-US 在大多数 XAML 处理器实现中，默认设置，并且需要要将小数分隔符的段。 应避免使用逗号字符作为小数分隔符如果在 XAML 中，指定点，将能与一个点属性值的字符串类型转换冲突因为<xref:System.Windows.Point.X%2A>和<xref:System.Windows.Point.Y%2A>组件。</xref:System.Windows.Point.Y%2A> </xref:System.Windows.Point.X%2A>      <a name=&quot;xamlAttributeUsage_Duration&quot;></a># # XAML 属性用法```   <object property=&quot;x,y&quot;/>   -or-   <object property=&quot;x y&quot;/>   ``` <a name=&quot;xamlValues_MinWidth&quot;> </a> # # XAML 值*x*此点的 x 坐标。             *y*此点的 y 坐标。"
  example:
  - "The following example shows how to check if two Point structures are not equal.  It also illustrates how to assign values to a Point structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.PointConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.PointValueSerializer))]

      public struct Point : IFormattable
  inheritance:
  - System.ValueType
  implements:
  - System.IFormattable
  platform:
  - net462
- uid: System.Windows.Point.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Windows.Point
  langs:
  - csharp
  name: Point(Double,Double)
  nameWithType: Point.Point(Double,Double)
  fullName: System.Windows.Point.Point(Double,Double)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "创建一个新<xref href=&quot;System.Windows.Point&quot;></xref>结构，其中包含指定的坐标。"
  syntax:
    content: public Point (double x, double y);
    parameters:
    - id: x
      type: System.Double
      description: "新的 x 坐标<xref href=&quot;System.Windows.Point&quot;></xref>结构。"
    - id: y
      type: System.Double
      description: "新的 y 坐标<xref href=&quot;System.Windows.Point&quot;></xref>结构。"
  overload: System.Windows.Point.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  id: Add(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Add(Point,Vector)
  nameWithType: Point.Add(Point,Vector)
  fullName: System.Windows.Point.Add(Point,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将添加<xref href=&quot;System.Windows.Vector&quot;></xref>到<xref href=&quot;System.Windows.Point&quot;></xref>并返回结果作为<xref href=&quot;System.Windows.Point&quot;></xref>结构。"
  remarks: "添加<xref:System.Windows.Point>结构<xref:System.Windows.Point>结构将被禁止。</xref:System.Windows.Point> </xref:System.Windows.Point>"
  example:
  - "This example adds a <xref:System.Windows.Point> to a <xref:System.Windows.Vector> and returns the result as a <xref:System.Windows.Vector> structure.  \n  \n [!code-cs[PointExamples_snip#AddPointAndVectorExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#addpointandvectorexample_csharp)]"
  syntax:
    content: public static System.Windows.Point Add (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "<xref href=&quot;System.Windows.Point&quot;> </xref>要添加一个。"
    - id: vector
      type: System.Windows.Vector
      description: "<xref href=&quot;System.Windows.Vector&quot;> </xref>要添加一个。"
    return:
      type: System.Windows.Point
      description: "Returns the sum of <code>point</code> and <code>vector</code>."
  overload: System.Windows.Point.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: System.Windows.Point.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "确定是否指定<xref:System.Object>是<xref href=&quot;System.Windows.Point&quot;></xref>以及它是否包含与此相同的坐标<xref href=&quot;System.Windows.Point&quot;> </xref>。</xref:System.Object>"
  remarks: "<xref:System.Windows.Point>使用描述坐标<xref:System.Double>值。</xref:System.Double></xref:System.Windows.Point> 因为的值<xref:System.Double>可能会丢失精度运算时，比较两个<xref:System.Windows.Point>逻辑上相等的值可能会失败。</xref:System.Windows.Point> </xref:System.Double>"
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the non-static Equals method.  \n  \n [!code-cs[PointExamples_snip#NonStaticEqualsExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#nonstaticequalsexample_csharp)]"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref:System.Object>进行比较。</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>o</code> is a <xref href=&quot;System.Windows.Point&quot;></xref> and contains the same <>*> and <>*> values as this <xref href=&quot;System.Windows.Point&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Equals(System.Windows.Point)
  id: Equals(System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Point)
  nameWithType: Point.Equals(Point)
  fullName: System.Windows.Point.Equals(Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较两个<xref href=&quot;System.Windows.Point&quot;></xref>是否相等的结构。"
  remarks: "<xref:System.Windows.Point>坐标来表示使用<xref:System.Double>值。</xref:System.Double></xref:System.Windows.Point> 因为的值<xref:System.Double>可能会丢失精度上比较两个运行时<xref:System.Windows.Point>逻辑上相等的值可能会失败。</xref:System.Windows.Point> </xref:System.Double>"
  syntax:
    content: public bool Equals (System.Windows.Point value);
    parameters:
    - id: value
      type: System.Windows.Point
      description: "要与此实例进行比较的点。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果这两个<xref href=&quot;System.Windows.Point&quot;></xref>结构都包含相同<> *1> 和<> *1> 值; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  id: Equals(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Equals(Point,Point)
  nameWithType: Point.Equals(Point,Point)
  fullName: System.Windows.Point.Equals(Point,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较两个<xref href=&quot;System.Windows.Point&quot;></xref>是否相等的结构。"
  remarks: "使用描述点坐标<xref:System.Double>值。</xref:System.Double> 因为的值<xref:System.Double>可能会丢失精度运算时，比较两个<xref:System.Windows.Point>逻辑上相等的值可能会失败。</xref:System.Windows.Point> </xref:System.Double>"
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the static Equals method.  \n  \n [!code-cs[PointExamples_snip#StaticEqualsExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#staticequalsexample_csharp)]"
  syntax:
    content: public static bool Equals (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "要比较的第一个点。"
    - id: point2
      type: System.Windows.Point
      description: "要比较的第二个点。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>point1</code> and <code>point2</code> contain the same <>*> and <>*> values; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Point.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.GetHashCode
  id: GetHashCode
  parent: System.Windows.Point
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: System.Windows.Point.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回此哈希代码<xref href=&quot;System.Windows.Point&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to get the hash code of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#gethashcodeexample_csharp)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "此哈希代码<xref href=&quot;System.Windows.Point&quot;></xref>结构。"
  overload: System.Windows.Point.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  id: Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Multiply(Point,Matrix)
  nameWithType: Point.Multiply(Point,Matrix)
  fullName: System.Windows.Point.Multiply(Point,Matrix)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "转换指定<xref href=&quot;System.Windows.Point&quot;></xref>由指定的结构<xref href=&quot;System.Windows.Media.Matrix&quot;></xref>结构。"
  remarks: ''
  example:
  - "The following example shows how to multiply a <xref:System.Windows.Point> structure by a <xref:System.Windows.Media.Matrix> structure using the Multiply method.  \n  \n [!code-cs[PointExamples_snip#MultiplyPointByMatrixExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#multiplypointbymatrixexample_csharp)]"
  syntax:
    content: public static System.Windows.Point Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "要变换的点。"
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "变换矩阵。"
    return:
      type: System.Windows.Point
      description: "已转换的点。"
  overload: System.Windows.Point.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Offset(System.Double,System.Double)
  id: Offset(System.Double,System.Double)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Offset(Double,Double)
  nameWithType: Point.Offset(Double,Double)
  fullName: System.Windows.Point.Offset(Double,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "偏移量的点<> *1> 和<> *1> 坐标指定的量。"
  remarks: "此操作等效于将添加<xref:System.Windows.Point>到<xref:System.Windows.Vector>。</xref:System.Windows.Vector> </xref:System.Windows.Point>       请注意，调用偏移量方法将仅拥有一种效果如果可以更改<xref:System.Windows.Point.X%2A>和<xref:System.Windows.Point.Y%2A>属性直接。</xref:System.Windows.Point.Y%2A> </xref:System.Windows.Point.X%2A> 因为<xref:System.Windows.Point>是值类型，如果引用<xref:System.Windows.Point>对象使用的属性或索引，你将获得一份对象，未对对象的引用。</xref:System.Windows.Point> </xref:System.Windows.Point> 如果你尝试更改<xref:System.Windows.Point.X%2A>或<xref:System.Windows.Point.Y%2A>上的属性或索引器的引用，则编译器将发生错误。</xref:System.Windows.Point.Y%2A> </xref:System.Windows.Point.X%2A> 同样，在属性或索引器调用偏移量不会更改基础对象。  如果你想要更改的值<xref:System.Windows.Point>引用为属性或索引器，创建一个新<xref:System.Windows.Point>修改其字段，然后将分配<xref:System.Windows.Point>回属性或索引器。</xref:System.Windows.Point> </xref:System.Windows.Point> </xref:System.Windows.Point>"
  example:
  - "The following example shows how to offset the <xref:System.Windows.Point.X%2A> and <xref:System.Windows.Point.Y%2A> values of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#OffsetExample_csharp](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#offsetexample_csharp)]"
  syntax:
    content: public void Offset (double offsetX, double offsetY);
    parameters:
    - id: offsetX
      type: System.Double
      description: "点的偏移量<xref:System.Windows.Point.X*>协调。</xref:System.Windows.Point.X*>"
    - id: offsetY
      type: System.Double
      description: "点的偏移量<xref:System.Windows.Point.Y*>协调。</xref:System.Windows.Point.Y*>"
  overload: System.Windows.Point.Offset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  id: op_Addition(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Addition(Point,Vector)
  nameWithType: Point.op_Addition(Point,Vector)
  fullName: System.Windows.Point.op_Addition(Point,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定<xref href=&quot;System.Windows.Point&quot;></xref>由指定<xref href=&quot;System.Windows.Vector&quot;></xref>并返回结果。"
  remarks: ''
  example:
  - "The following example shows how to add a <xref:System.Windows.Point> to a <xref:System.Windows.Vector> using the overloaded (+) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedAdditionOperatorExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedadditionoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedAdditionOperatorExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedadditionoperatorexample)]"
  syntax:
    content: public static System.Windows.Point op_Addition (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "要转换的点。"
    - id: vector
      type: System.Windows.Vector
      description: "通过它转换量`point`。"
    return:
      type: System.Windows.Point
      description: "将指定的点转换平移指定向量的结果。"
  overload: System.Windows.Point.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  id: op_Equality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Equality(Point,Point)
  nameWithType: Point.op_Equality(Point,Point)
  fullName: System.Windows.Point.op_Equality(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较两个<xref href=&quot;System.Windows.Point&quot;></xref>是否相等的结构。"
  remarks: "使用描述点的坐标<xref:System.Double>值。</xref:System.Double> 因为的值<xref:System.Double>在它们，比较两个执行算术运算时可能会丢失精度<xref:System.Windows.Point>逻辑上相等的值可能会失败。</xref:System.Windows.Point> </xref:System.Double>"
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are equal using the overloaded (==) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedequalityoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedequalityoperatorexample)]"
  syntax:
    content: public static bool op_Equality (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "第一个<xref href=&quot;System.Windows.Point&quot;></xref>结构进行比较。"
    - id: point2
      type: System.Windows.Point
      description: "第二个<xref href=&quot;System.Windows.Point&quot;></xref>结构进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if both the <>*> and <>*> coordinates of <code>point1</code> and <code>point2</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Point.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  id: op_Explicit(System.Windows.Point to System.Windows.Size)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: public static System.Windows.Size op_Explicit (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "要添加。"
    return:
      type: System.Windows.Size
      description: "要添加。"
  overload: System.Windows.Point.op_Explicit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  id: op_Explicit(System.Windows.Point to System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: public static System.Windows.Vector op_Explicit (System.Windows.Point point);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "要添加。"
    return:
      type: System.Windows.Vector
      description: "要添加。"
  overload: System.Windows.Point.op_Explicit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  id: op_Inequality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Inequality(Point,Point)
  nameWithType: Point.op_Inequality(Point,Point)
  fullName: System.Windows.Point.op_Inequality(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较两个<xref href=&quot;System.Windows.Point&quot;></xref>是否不相等的结构。"
  remarks: "点的<xref:System.Windows.Point.X%2A>和<xref:System.Windows.Point.Y%2A>坐标介绍使用<xref:System.Double>值。</xref:System.Double> </xref:System.Windows.Point.Y%2A> </xref:System.Windows.Point.X%2A> 因为<xref:System.Double>值可能会丢失精度上比较两个运行时<xref:System.Windows.Point>逻辑上相等的值可能会失败。</xref:System.Windows.Point> </xref:System.Double>"
  example:
  - "The following example shows how to check whether two <xref:System.Windows.Point> structures are not equal, using the overloaded (!=) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedinequalityoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedinequalityoperatorexample)]"
  syntax:
    content: public static bool op_Inequality (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "要比较的第一个点。"
    - id: point2
      type: System.Windows.Point
      description: "要比较的第二个点。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>point1</code> and <code>point2</code> have different <>*> or <>*> coordinates;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref> if <code>point1</code> and <code>point2</code> have the same <>*> and <>*> coordinates."
  overload: System.Windows.Point.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  id: op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Multiply(Point,Matrix)
  nameWithType: Point.op_Multiply(Point,Matrix)
  fullName: System.Windows.Point.op_Multiply(Point,Matrix)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "转换指定<xref href=&quot;System.Windows.Point&quot;></xref>由指定<xref href=&quot;System.Windows.Media.Matrix&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to multiply a <xref:System.Windows.Point> by a <xref:System.Windows.Media.Matrix> using the overloaded (*) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedMultiplyPointByMatrixOperatorExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedmultiplypointbymatrixoperatorexample)]\n [!code-vb[PointExamples_snip#OverloadedMultiplyPointByMatrixOperatorExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedmultiplypointbymatrixoperatorexample)]"
  syntax:
    content: public static System.Windows.Point op_Multiply (System.Windows.Point point, System.Windows.Media.Matrix matrix);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "要变换的点。"
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "变换矩阵。"
    return:
      type: System.Windows.Point
      description: "转换使用指定的矩阵的指定的点的结果。"
  overload: System.Windows.Point.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  id: op_Subtraction(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Subtraction(Point,Point)
  nameWithType: Point.op_Subtraction(Point,Point)
  fullName: System.Windows.Point.op_Subtraction(Point,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "中减去指定<xref href=&quot;System.Windows.Point&quot;></xref>从另一个指定<xref href=&quot;System.Windows.Point&quot;></xref>并返回的差异为<xref href=&quot;System.Windows.Vector&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Point> from another <xref:System.Windows.Point> and return a <xref:System.Windows.Vector> using the overloaded (-) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedSubtractionOperatorExample2](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedsubtractionoperatorexample2)]\n [!code-vb[PointExamples_snip#OverloadedSubtractionOperatorExample2](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedsubtractionoperatorexample2)]"
  syntax:
    content: public static System.Windows.Vector op_Subtraction (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "起始位置的点`point2`减去。"
    - id: point2
      type: System.Windows.Point
      description: "要从中减去的点`point1`。"
    return:
      type: System.Windows.Vector
      description: "The difference between <code>point1</code> and <code>point2</code>."
  overload: System.Windows.Point.op_Subtraction*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  id: op_Subtraction(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: op_Subtraction(Point,Vector)
  nameWithType: Point.op_Subtraction(Point,Vector)
  fullName: System.Windows.Point.op_Subtraction(Point,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "中减去指定<xref href=&quot;System.Windows.Vector&quot;></xref>从指定<xref href=&quot;System.Windows.Point&quot;> </xref> ，并返回结果<xref href=&quot;System.Windows.Point&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Vector> from a <xref:System.Windows.Point> using the overloaded (-) operator.  \n  \n [!code-cs[PointExamples_snip#OverloadedSubtractionOperatorExample1](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#overloadedsubtractionoperatorexample1)]\n [!code-vb[PointExamples_snip#OverloadedSubtractionOperatorExample1](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#overloadedsubtractionoperatorexample1)]"
  syntax:
    content: public static System.Windows.Point op_Subtraction (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "起始位置的点`vector`减去。"
    - id: vector
      type: System.Windows.Vector
      description: "要从中减去的向量`point1`"
    return:
      type: System.Windows.Point
      description: "The difference between <code>point</code> and <code>vector</code>."
  overload: System.Windows.Point.op_Subtraction*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Point.Parse(String)
  fullName: System.Windows.Point.Parse(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "构造<xref href=&quot;System.Windows.Point&quot;></xref>指定<xref:System.String>。</xref:System.String>"
  remarks: ''
  example:
  - "The following example shows how to use the Parse method to convert a <xref:System.String> representation of a point into a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#ParseExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#parseexample)]\n [!code-vb[PointExamples_snip#ParseExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#parseexample)]"
  syntax:
    content: public static System.Windows.Point Parse (string source);
    parameters:
    - id: source
      type: System.String
      description: "点的字符串表示形式。"
    return:
      type: System.Windows.Point
      description: "等效于<xref href=&quot;System.Windows.Point&quot;></xref>结构。"
  overload: System.Windows.Point.Parse*
  exceptions:
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>source</code>不是两个用逗号或空格分隔的双精度值组成的。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>source</code>不包含两个数字。       -或-<code>source</code>包含太多的分隔符。"
  platform:
  - net462
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  id: Subtract(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Subtract(Point,Point)
  nameWithType: Point.Subtract(Point,Point)
  fullName: System.Windows.Point.Subtract(Point,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "中减去指定<xref href=&quot;System.Windows.Point&quot;></xref>从另一个指定<xref href=&quot;System.Windows.Point&quot;></xref>并返回的差异为<xref href=&quot;System.Windows.Vector&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Point> from another <xref:System.Windows.Point> using the static Subtract method.  \n  \n [!code-cs[PointExamples_snip#SubtractExample2](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#subtractexample2)]\n [!code-vb[PointExamples_snip#SubtractExample2](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#subtractexample2)]"
  syntax:
    content: public static System.Windows.Vector Subtract (System.Windows.Point point1, System.Windows.Point point2);
    parameters:
    - id: point1
      type: System.Windows.Point
      description: "起始位置的点`point2`减去。"
    - id: point2
      type: System.Windows.Point
      description: "要从中减去的点`point1`。"
    return:
      type: System.Windows.Vector
      description: "The difference between <code>point1</code> and <code>point2</code>."
  overload: System.Windows.Point.Subtract*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  id: Subtract(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  langs:
  - csharp
  name: Subtract(Point,Vector)
  nameWithType: Point.Subtract(Point,Vector)
  fullName: System.Windows.Point.Subtract(Point,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "中减去指定<xref href=&quot;System.Windows.Vector&quot;></xref>从指定<xref href=&quot;System.Windows.Point&quot;> </xref> ，并返回结果<xref href=&quot;System.Windows.Point&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to subtract a <xref:System.Windows.Vector> from a <xref:System.Windows.Point> using the static Subtract method.  \n  \n [!code-cs[PointExamples_snip#SubtractExample1](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#subtractexample1)]\n [!code-vb[PointExamples_snip#SubtractExample1](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#subtractexample1)]"
  syntax:
    content: public static System.Windows.Point Subtract (System.Windows.Point point, System.Windows.Vector vector);
    parameters:
    - id: point
      type: System.Windows.Point
      description: "起始位置的点`vector`减去。"
    - id: vector
      type: System.Windows.Vector
      description: "`vector`要从中减去`point`。"
    return:
      type: System.Windows.Point
      description: "The difference between <code>point</code> and <code>vector</code>."
  overload: System.Windows.Point.Subtract*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Windows.Point
  langs:
  - csharp
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Point.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Point.System.IFormattable.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "此成员支持[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]基础结构，不应在代码中直接使用。 有关此成员的说明，请参阅<xref:System.IFormattable.ToString*>。</xref:System.IFormattable.ToString*>"
  syntax:
    content: string IFormattable.ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: "指定要使用的格式的字符串。       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>若要使用的类型定义的默认格式<xref:System.IFormattable>实现。</xref:System.IFormattable>"
    - id: provider
      type: System.IFormatProvider
      description: "<xref uid=&quot;langword_csharp_IFormatProvider&quot; name=&quot;IFormatProvider&quot; href=&quot;&quot;> </xref>用于设置格式的值。       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>从操作系统的当前区域设置获取数字格式信息。"
    return:
      type: System.String
      description: "包含指定的格式中的当前实例的值的字符串。"
  overload: System.Windows.Point.System#IFormattable#ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.ToString
  id: ToString
  parent: System.Windows.Point
  langs:
  - csharp
  name: ToString()
  nameWithType: Point.ToString()
  fullName: System.Windows.Point.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "创建<xref:System.String>这种表示形式<xref href=&quot;System.Windows.Point&quot;> </xref>。</xref:System.String>"
  remarks: ''
  example:
  - "The following example shows how to use the ToString method to get a <xref:System.String> representation of a <xref:System.Windows.Point> structure.  \n  \n [!code-cs[PointExamples_snip#ToStringExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#tostringexample)]\n [!code-vb[PointExamples_snip#ToStringExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#tostringexample)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A<xref:System.String>包含<> *1> 和<> *1> 值<xref href=&quot;System.Windows.Point&quot;></xref>结构。</xref:System.String>"
  overload: System.Windows.Point.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Windows.Point
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Point.ToString(IFormatProvider)
  fullName: System.Windows.Point.ToString(IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "创建<xref:System.String>这种表示形式<xref href=&quot;System.Windows.Point&quot;> </xref>。</xref:System.String>"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "区域性特定格式设置信息。"
    return:
      type: System.String
      description: "A<xref:System.String>包含<> *1> 和<> *1> 值<xref href=&quot;System.Windows.Point&quot;></xref>结构。</xref:System.String>"
  overload: System.Windows.Point.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.X
  id: X
  parent: System.Windows.Point
  langs:
  - csharp
  name: X
  nameWithType: Point.X
  fullName: System.Windows.Point.X
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取或设置的 X 坐标值<xref href=&quot;System.Windows.Point&quot;></xref>结构。"
  remarks: ''
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are not equal.  It also illustrates how to assign values to a <xref:System.Windows.Point> structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: public double X { get; set; }
    return:
      type: System.Double
      description: "X 坐标值<xref href=&quot;System.Windows.Point&quot;></xref>结构。  默认值为 `0`。"
  overload: System.Windows.Point.X*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Point.Y
  id: Y
  parent: System.Windows.Point
  langs:
  - csharp
  name: Y
  nameWithType: Point.Y
  fullName: System.Windows.Point.Y
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取或设置的 Y 坐标值<xref href=&quot;System.Windows.Point&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to check if two <xref:System.Windows.Point> structures are not equal.  It also illustrates how to assign values to a <xref:System.Windows.Point> structure when the structure is being declared and after the structure has been declared.  \n  \n [!code-cs[PointExamples_snip#PointInequalityExample](~/add/codesnippet/csharp/PointExamples_snip/PointExample.cs#pointinequalityexample)]\n [!code-vb[PointExamples_snip#PointInequalityExample](~/add/codesnippet/visualbasic/pointexamples_snip/pointexample.vb#pointinequalityexample)]"
  syntax:
    content: public double Y { get; set; }
    return:
      type: System.Double
      description: "Y 坐标值<xref href=&quot;System.Windows.Point&quot;></xref>结构。  默认值为 `0`。"
  overload: System.Windows.Point.Y*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Point.#ctor(System.Double,System.Double)
  parent: System.Windows.Point
  isExternal: false
  name: Point(Double,Double)
  nameWithType: Point.Point(Double,Double)
  fullName: System.Windows.Point.Point(Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Point.Add(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: Add(Point,Vector)
  nameWithType: Point.Add(Point,Vector)
  fullName: System.Windows.Point.Add(Point,Vector)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Vector
  parent: System.Windows
  isExternal: false
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Windows.Point.Equals(System.Object)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Object)
  nameWithType: Point.Equals(Object)
  fullName: System.Windows.Point.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Point.Equals(System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Point)
  nameWithType: Point.Equals(Point)
  fullName: System.Windows.Point.Equals(Point)
- uid: System.Windows.Point.Equals(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Equals(Point,Point)
  nameWithType: Point.Equals(Point,Point)
  fullName: System.Windows.Point.Equals(Point,Point)
- uid: System.Windows.Point.GetHashCode
  parent: System.Windows.Point
  isExternal: false
  name: GetHashCode()
  nameWithType: Point.GetHashCode()
  fullName: System.Windows.Point.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Point.Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  isExternal: false
  name: Multiply(Point,Matrix)
  nameWithType: Point.Multiply(Point,Matrix)
  fullName: System.Windows.Point.Multiply(Point,Matrix)
- uid: System.Windows.Media.Matrix
  parent: System.Windows.Media
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Windows.Media.Matrix
- uid: System.Windows.Point.Offset(System.Double,System.Double)
  parent: System.Windows.Point
  isExternal: false
  name: Offset(Double,Double)
  nameWithType: Point.Offset(Double,Double)
  fullName: System.Windows.Point.Offset(Double,Double)
- uid: System.Windows.Point.op_Addition(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Addition(Point,Vector)
  nameWithType: Point.op_Addition(Point,Vector)
  fullName: System.Windows.Point.op_Addition(Point,Vector)
- uid: System.Windows.Point.op_Equality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Equality(Point,Point)
  nameWithType: Point.op_Equality(Point,Point)
  fullName: System.Windows.Point.op_Equality(Point,Point)
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Size)
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Point.op_Explicit(System.Windows.Point to System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit(Point)
  nameWithType: Point.op_Explicit(Point)
  fullName: System.Windows.Point.op_Explicit(Point)
- uid: System.Windows.Point.op_Inequality(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Inequality(Point,Point)
  nameWithType: Point.op_Inequality(Point,Point)
  fullName: System.Windows.Point.op_Inequality(Point,Point)
- uid: System.Windows.Point.op_Multiply(System.Windows.Point,System.Windows.Media.Matrix)
  parent: System.Windows.Point
  isExternal: false
  name: op_Multiply(Point,Matrix)
  nameWithType: Point.op_Multiply(Point,Matrix)
  fullName: System.Windows.Point.op_Multiply(Point,Matrix)
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction(Point,Point)
  nameWithType: Point.op_Subtraction(Point,Point)
  fullName: System.Windows.Point.op_Subtraction(Point,Point)
- uid: System.Windows.Point.op_Subtraction(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction(Point,Vector)
  nameWithType: Point.op_Subtraction(Point,Vector)
  fullName: System.Windows.Point.op_Subtraction(Point,Vector)
- uid: System.Windows.Point.Parse(System.String)
  parent: System.Windows.Point
  isExternal: false
  name: Parse(String)
  nameWithType: Point.Parse(String)
  fullName: System.Windows.Point.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Point)
  parent: System.Windows.Point
  isExternal: false
  name: Subtract(Point,Point)
  nameWithType: Point.Subtract(Point,Point)
  fullName: System.Windows.Point.Subtract(Point,Point)
- uid: System.Windows.Point.Subtract(System.Windows.Point,System.Windows.Vector)
  parent: System.Windows.Point
  isExternal: false
  name: Subtract(Point,Vector)
  nameWithType: Point.Subtract(Point,Vector)
  fullName: System.Windows.Point.Subtract(Point,Vector)
- uid: System.Windows.Point.System#IFormattable#ToString(System.String,System.IFormatProvider)
  parent: System.Windows.Point
  isExternal: false
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Point.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Point.System.IFormattable.ToString(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Windows.Point.ToString
  parent: System.Windows.Point
  isExternal: false
  name: ToString()
  nameWithType: Point.ToString()
  fullName: System.Windows.Point.ToString()
- uid: System.Windows.Point.ToString(System.IFormatProvider)
  parent: System.Windows.Point
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Point.ToString(IFormatProvider)
  fullName: System.Windows.Point.ToString(IFormatProvider)
- uid: System.Windows.Point.X
  parent: System.Windows.Point
  isExternal: false
  name: X
  nameWithType: Point.X
  fullName: System.Windows.Point.X
- uid: System.Windows.Point.Y
  parent: System.Windows.Point
  isExternal: false
  name: Y
  nameWithType: Point.Y
  fullName: System.Windows.Point.Y
- uid: System.Windows.Point.#ctor*
  parent: System.Windows.Point
  isExternal: false
  name: Point
  nameWithType: Point.Point
- uid: System.Windows.Point.Add*
  parent: System.Windows.Point
  isExternal: false
  name: Add
  nameWithType: Point.Add
- uid: System.Windows.Point.Equals*
  parent: System.Windows.Point
  isExternal: false
  name: Equals
  nameWithType: Point.Equals
- uid: System.Windows.Point.GetHashCode*
  parent: System.Windows.Point
  isExternal: false
  name: GetHashCode
  nameWithType: Point.GetHashCode
- uid: System.Windows.Point.Multiply*
  parent: System.Windows.Point
  isExternal: false
  name: Multiply
  nameWithType: Point.Multiply
- uid: System.Windows.Point.Offset*
  parent: System.Windows.Point
  isExternal: false
  name: Offset
  nameWithType: Point.Offset
- uid: System.Windows.Point.op_Addition*
  parent: System.Windows.Point
  isExternal: false
  name: op_Addition
  nameWithType: Point.op_Addition
- uid: System.Windows.Point.op_Equality*
  parent: System.Windows.Point
  isExternal: false
  name: op_Equality
  nameWithType: Point.op_Equality
- uid: System.Windows.Point.op_Explicit*
  parent: System.Windows.Point
  isExternal: false
  name: op_Explicit
  nameWithType: Point.op_Explicit
- uid: System.Windows.Point.op_Inequality*
  parent: System.Windows.Point
  isExternal: false
  name: op_Inequality
  nameWithType: Point.op_Inequality
- uid: System.Windows.Point.op_Multiply*
  parent: System.Windows.Point
  isExternal: false
  name: op_Multiply
  nameWithType: Point.op_Multiply
- uid: System.Windows.Point.op_Subtraction*
  parent: System.Windows.Point
  isExternal: false
  name: op_Subtraction
  nameWithType: Point.op_Subtraction
- uid: System.Windows.Point.Parse*
  parent: System.Windows.Point
  isExternal: false
  name: Parse
  nameWithType: Point.Parse
- uid: System.Windows.Point.Subtract*
  parent: System.Windows.Point
  isExternal: false
  name: Subtract
  nameWithType: Point.Subtract
- uid: System.Windows.Point.System#IFormattable#ToString*
  parent: System.Windows.Point
  isExternal: false
  name: System.IFormattable.ToString
  nameWithType: Point.System.IFormattable.ToString
- uid: System.Windows.Point.ToString*
  parent: System.Windows.Point
  isExternal: false
  name: ToString
  nameWithType: Point.ToString
- uid: System.Windows.Point.X*
  parent: System.Windows.Point
  isExternal: false
  name: X
  nameWithType: Point.X
- uid: System.Windows.Point.Y*
  parent: System.Windows.Point
  isExternal: false
  name: Y
  nameWithType: Point.Y
