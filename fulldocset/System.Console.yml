### YamlMime:ManagedReference
items:
- uid: System.Console
  id: Console
  children:
  - System.Console.BackgroundColor
  - System.Console.Beep
  - System.Console.Beep(System.Int32,System.Int32)
  - System.Console.BufferHeight
  - System.Console.BufferWidth
  - System.Console.CancelKeyPress
  - System.Console.CapsLock
  - System.Console.Clear
  - System.Console.CursorLeft
  - System.Console.CursorSize
  - System.Console.CursorTop
  - System.Console.CursorVisible
  - System.Console.Error
  - System.Console.ForegroundColor
  - System.Console.In
  - System.Console.InputEncoding
  - System.Console.IsErrorRedirected
  - System.Console.IsInputRedirected
  - System.Console.IsOutputRedirected
  - System.Console.KeyAvailable
  - System.Console.LargestWindowHeight
  - System.Console.LargestWindowWidth
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  - System.Console.NumberLock
  - System.Console.OpenStandardError
  - System.Console.OpenStandardError(System.Int32)
  - System.Console.OpenStandardInput
  - System.Console.OpenStandardInput(System.Int32)
  - System.Console.OpenStandardOutput
  - System.Console.OpenStandardOutput(System.Int32)
  - System.Console.Out
  - System.Console.OutputEncoding
  - System.Console.Read
  - System.Console.ReadKey
  - System.Console.ReadKey(System.Boolean)
  - System.Console.ReadLine
  - System.Console.ResetColor
  - System.Console.SetBufferSize(System.Int32,System.Int32)
  - System.Console.SetCursorPosition(System.Int32,System.Int32)
  - System.Console.SetError(System.IO.TextWriter)
  - System.Console.SetIn(System.IO.TextReader)
  - System.Console.SetOut(System.IO.TextWriter)
  - System.Console.SetWindowPosition(System.Int32,System.Int32)
  - System.Console.SetWindowSize(System.Int32,System.Int32)
  - System.Console.Title
  - System.Console.TreatControlCAsInput
  - System.Console.WindowHeight
  - System.Console.WindowLeft
  - System.Console.WindowTop
  - System.Console.WindowWidth
  - System.Console.Write(System.Boolean)
  - System.Console.Write(System.Char)
  - System.Console.Write(System.Char[])
  - System.Console.Write(System.Decimal)
  - System.Console.Write(System.Double)
  - System.Console.Write(System.Int32)
  - System.Console.Write(System.Int64)
  - System.Console.Write(System.Object)
  - System.Console.Write(System.Single)
  - System.Console.Write(System.String)
  - System.Console.Write(System.UInt32)
  - System.Console.Write(System.UInt64)
  - System.Console.Write(System.String,System.Object)
  - System.Console.Write(System.String,System.Object[])
  - System.Console.Write(System.Char[],System.Int32,System.Int32)
  - System.Console.Write(System.String,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object)
  - System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  - System.Console.WriteLine
  - System.Console.WriteLine(System.Boolean)
  - System.Console.WriteLine(System.Char)
  - System.Console.WriteLine(System.Char[])
  - System.Console.WriteLine(System.Decimal)
  - System.Console.WriteLine(System.Double)
  - System.Console.WriteLine(System.Int32)
  - System.Console.WriteLine(System.Int64)
  - System.Console.WriteLine(System.Object)
  - System.Console.WriteLine(System.Single)
  - System.Console.WriteLine(System.String)
  - System.Console.WriteLine(System.UInt32)
  - System.Console.WriteLine(System.UInt64)
  - System.Console.WriteLine(System.String,System.Object)
  - System.Console.WriteLine(System.String,System.Object[])
  - System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  - System.Console.WriteLine(System.String,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  - System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  langs:
  - csharp
  name: Console
  nameWithType: Console
  fullName: System.Console
  type: Class
  summary: "表示用于控制台应用程序标准的输入、 输出和错误流。 此类不能被继承。       若要浏览此类型的.NET Framework 源代码，请参阅[引用源](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4)。"
  remarks: "> [!NOTE]\n>  To view the .NET Framework source code for this type, see the [Reference Source](http://referencesource.microsoft.com/#mscorlib/system/console.cs#f907d79481da6ba4). You can browse through the source code online, download the reference for offline viewing, and step through the sources (including patches and updates) during debugging; see [instructions](http://referencesource.microsoft.com/).  \n  \n The console is an operating system window where users interact with the operating system or with a text-based console application by entering text input through the computer keyboard, and by reading text output from the computer terminal. For example, in the Windows operating system, the console is called the Command Prompt window and accepts MS-DOS commands. The Console class provides basic support for applications that read characters from, and write characters to, the console.  \n  \n For information about developing with the Console class, see the following sections:  \n  \n-   [Console I/O Streams](#Streams)  \n  \n-   [Screen Buffer and Console Window](#Buffer)  \n  \n-   [Unicode Support for the Console](#Unicode)  \n  \n-   [Common Operations](#Operations)  \n  \n-   [.NET Core Notes](#Core)  \n  \n<a name=\"Streams\"></a>   \n## Console I/O Streams  \n When a console application starts, the operating system automatically associates three I/O streams with the console: standard input stream, standard output stream, and standard error output stream. Your application can read user input from the standard input stream; write normal data to the standard output stream; and write error data to the standard error output stream. These streams are presented to your application as the values of the <xref:System.Console.In%2A?displayProperty=fullName>, <xref:System.Console.Out%2A?displayProperty=fullName>, and <xref:System.Console.Error%2A?displayProperty=fullName> properties.  \n  \n By default, the value of the <xref:System.Console.In%2A> property is a <xref:System.IO.TextReader?displayProperty=fullName> object that represents the keyboard, and the values of the <xref:System.Console.Out%2A> and <xref:System.Console.Error%2A> properties are <xref:System.IO.TextWriter?displayProperty=fullName> objects that represent a console window. However, you can set these properties to streams that do not represent the console window or keyboard; for example, you can set these properties to streams that represent files. To redirect the standard input, standard output, or standard error stream, call the <xref:System.Console.SetIn%2A?displayProperty=fullName>, <xref:System.Console.SetOut%2A?displayProperty=fullName>, or <xref:System.Console.SetError%2A?displayProperty=fullName> method, respectively. I/O operations that use these streams are synchronized, which means that multiple threads can read from, or write to, the streams. This means that methods that are ordinarily asynchronous, such as <xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>, execute synchronously if the object represents a console stream.  \n  \n> [!NOTE]\n>  Do not use the Console class to display output in unattended applications, such as server applications. Calls to methods such as <xref:System.Console.Write%2A?displayProperty=fullName> and <xref:System.Console.WriteLine%2A?displayProperty=fullName> have no effect in GUI applications.  \n  \n Console class members that work normally when the underlying stream is directed to a console might throw an exception if the stream is redirected, for example, to a file. Program your application to catch <xref:System.IO.IOException?displayProperty=fullName> exceptions if you redirect a standard stream. You can also use the <xref:System.Console.IsOutputRedirected%2A>, <xref:System.Console.IsInputRedirected%2A>, and <xref:System.Console.IsErrorRedirected%2A> properties to determine whether a standard stream is redirected before performing an operation that throws an <xref:System.IO.IOException?displayProperty=fullName> exception.  \n  \n It is sometimes useful to explicitly call the members of the stream objects represented by the <xref:System.Console.In%2A>, <xref:System.Console.Out%2A>, and <xref:System.Console.Error%2A> properties. For example, by default, the <xref:System.Console.ReadLine%2A?displayProperty=fullName> method reads input from the standard input stream. Similarly, the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method writes data to the standard output stream, and the data is followed by the default line termination string, which is  a carriage return and line feed (\"\\r\\n\"). However, the Console class does not provide a corresponding method to write data to the standard error output stream, or a property to change the line termination string for data written to that stream.  \n  \n You can solve this problem by setting the <xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> property of the <xref:System.Console.Out%2A> or <xref:System.Console.Error%2A> property to another line termination string. For example, the following C# statement sets the line termination string for the standard error output stream to two carriage return and line feed sequences:  \n  \n `Console.Error.NewLine = \"\\r\\n\\r\\n\";`  \n  \n You can then explicitly call the <xref:System.IO.TextWriter.WriteLine%2A> method of the error output stream object, as in the following C# statement:  \n  \n `Console.Error.WriteLine();`  \n  \n<a name=\"Buffer\"></a>   \n## Screen Buffer and Console Window  \n Two closely related features of the console are the screen buffer and the console window. Text is actually read from or written to streams owned by the console, but appear to be read from or written to an area owned by the console called the screen buffer. The screen buffer is an attribute of the console, and is organized as a rectangular grid of rows and columns where each grid intersection, or character cell, can contain a character. Each character has its own foreground color, and each character cell has its own background color.  \n  \n The screen buffer is viewed through a rectangular region called the console window. The console window is another attribute of the console; it is not the console itself, which is an operating system window. The console window is arranged in rows and columns, is less than or equal to the size of the screen buffer, and can be moved to view different areas of the underlying screen buffer. If the screen buffer is larger than the console window, the console automatically displays scroll bars so the console window can be repositioned over the screen buffer area.  \n  \n A cursor indicates the screen buffer position where text is currently read or written. The cursor can be hidden or made visible, and its height can be changed. If the cursor is visible, the console window position is moved automatically so the cursor is always in view.  \n  \n The origin for character cell coordinates in the screen buffer is the upper left corner, and the positions of the cursor and the console window are measured relative to that origin. Use zero-based indexes to specify positions; that is, specify the topmost row as row 0, and the leftmost column as column 0. The maximum value for the row and column indexes is <xref:System.Int16.MaxValue?displayProperty=fullName>.  \n  \n<a name=\"Unicode\"></a>   \n## Unicode Support for the Console  \n In general, the console reads input and writes output by using the current console code page, which the system locale defines by default. A code page can handle only a subset of available Unicode characters, so if you try to display characters that are not mapped by a particular code page, the console won't be able to display all characters or represent them accurately. The following example illustrates this problem. It tries to display the characters of the Cyrillic alphabet from U+0410 to U+044F to the console. If you run the example on a system that uses console code page 437, each character is replaced by a question mark (?), because Cyrillic characters do not map to the characters in code page 437.  \n  \n [!code-cs[System.Console.Class#1](~/add/codesnippet/csharp/t-system.console_1.cs)]\n [!code-vb[System.Console.Class#1](~/add/codesnippet/visualbasic/t-system.console_1.vb)]  \n  \n In addition to supporting code pages, the Console class supports UTF-8 encoding with the <xref:System.Text.UTF8Encoding> class. Beginning with the .NET Framework 4.5, the Console class also supports UTF-16 encoding with the <xref:System.Text.UnicodeEncoding> class. To display Unicode characters to the console. you set the <xref:System.Console.OutputEncoding%2A> property to either <xref:System.Text.UTF8Encoding> or  <xref:System.Text.UnicodeEncoding>.  \n  \n Support for Unicode characters requires the encoder to recognize a particular Unicode character, and also requires a font that has the glyphs needed to render that character. To successfully display Unicode characters to the console, the console font must be set to a non-raster or TrueType font such as Consolas or Lucida Console. The following example shows how you can programmatically change the font from a raster font to Lucida Console.  \n  \n [!code-cs[System.Console.Class.Unsafe#3](~/add/codesnippet/csharp/setfont1/setfont1.cs#3)]\n [!code-vb[System.Console.Class.Unsafe#3](~/add/codesnippet/visualbasic/t-system.console_2.vb)]  \n  \n However, TrueType fonts can display only a subset of glyphs. For example, the Lucida Console font displays only 643 of the approximately 64,000 available characters from U+0021 to U+FB02. To see which characters a particular font supports, open the **Fonts** applet in Control Panel, choose the **Find a character** option, and choose the font whose character set you'd like to examine in the **Font** list of the **Character Map** window.  \n  \n Windows uses font linking to display glyphs that are not available in a particular font. For information about font linking to display additional character sets, see [Globalization Step-by-Step: Fonts](http://go.microsoft.com/fwlink/?LinkId=229111). Linked fonts are defined in the HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\FontLink\\SystemLink subkey of the registry. Each entry associated with this subkey corresponds to the name of a base font, and its value is a string array that defines the font files and the fonts that are linked to the base font. Each member of the array defines a linked font and takes the form *font-file-name*,*font-name*. The following example illustrates how you can programmatically define a linked font named SimSun found in a font file named simsun.ttc that displays Simplified Han characters.  \n  \n [!code-cs[System.Console.Class#2](~/add/codesnippet/csharp/t-system.console_3.cs)]\n [!code-vb[System.Console.Class#2](~/add/codesnippet/visualbasic/t-system.console_3.vb)]  \n  \n Unicode support for the console has the following limitations:  \n  \n-   UTF-32 encoding is not supported. The only supported Unicode encodings are UTF-8 and UTF-16, which are represented by the <xref:System.Text.UTF8Encoding> and <xref:System.Text.UnicodeEncoding> classes, respectively.  \n  \n-   Bidirectional output is not supported.  \n  \n-   Display of characters outside the Basic Multilingual Plane (that is, of surrogate pairs) is not supported, even if they are defined in a linked font file.  \n  \n-   Display of characters in complex scripts is not supported.  \n  \n-   Combining character sequences (that is, characters that consist of a base character and one or more combining characters) are displayed as separate characters. To work around this limitation, you can normalize the string to be displayed by calling the <xref:System.String.Normalize%2A?displayProperty=fullName> method before sending output to the console. In the following example, a string that contains the combining character sequence U+0061 U+0308 is displayed to the console as two characters before the output string is normalized, and as a single character after the <xref:System.String.Normalize%2A?displayProperty=fullName> method is called.  \n  \n     [!code-cs[System.Console.Class#5](~/add/codesnippet/csharp/t-system.console_4.cs)]\n     [!code-vb[System.Console.Class#5](~/add/codesnippet/visualbasic/t-system.console_4.vb)]  \n  \n     Note that normalization is a viable solution only if the Unicode standard for the character includes a pre-composed form that corresponds to a particular combining character sequence.  \n  \n-   If a font provides a glyph for a code point in the private use area, that glyph will be displayed. However, because characters in the private use area are application-specific, this may not be the expected glyph.  \n  \n The following example displays a range of Unicode characters to the console. The example accepts three command-line parameters: the start of the range to display, the end of the range to display, and whether to use the current console encoding (`false`) or UTF-16 encoding (`true`). It assumes that the console is using a TrueType font.  \n  \n [!code-cs[System.Console.Class#4](~/add/codesnippet/csharp/t-system.console_5.cs)]\n [!code-vb[System.Console.Class#4](~/add/codesnippet/visualbasic/t-system.console_5.vb)]  \n  \n<a name=\"Operations\"></a>   \n## Common Operations  \n The Console class contains the following methods for reading console input and writing console output:  \n  \n-   The overloads of the <xref:System.Console.ReadKey%2A> method read an individual character.  \n  \n-   The <xref:System.Console.ReadLine%2A> method reads an entire line of input.  \n  \n-   The <xref:System.Console.Write%2A> method overloads convert an instance of a value type, an array of characters, or a set of objects to a formatted or unformatted string, and then write that string to the console.  \n  \n-   A parallel set of <xref:System.Console.WriteLine%2A> method overloads output the same string as the <xref:System.Console.Write%2A> overloads but also add a line termination string.  \n  \n The Console class also contains methods and properties to perform the following operations:  \n  \n-   Get or set the size of the screen buffer. The <xref:System.Console.BufferHeight%2A> and <xref:System.Console.BufferWidth%2A> properties let you get or set the buffer height and width, respectively, and the <xref:System.Console.SetBufferSize%2A> method lets you set the buffer size in a single method call.  \n  \n-   Get or set the size of the console window. The <xref:System.Console.WindowHeight%2A> and <xref:System.Console.WindowWidth%2A> properties let you get or set the window height and width, respectively, and the <xref:System.Console.SetWindowSize%2A> method lets you set the window size in a single method call.  \n  \n-   Get or set the size of the cursor. The <xref:System.Console.CursorSize%2A> property specifies the height of the cursor in a character cell.  \n  \n-   Get or set the position of the console window relative to the screen buffer. The <xref:System.Console.WindowTop%2A> and <xref:System.Console.WindowLeft%2A> properties let you get or set the top row and leftmost column of the screen buffer that appears in the console window, and the <xref:System.Console.SetWindowPosition%2A> method lets you set these values in a single method call.  \n  \n-   Get or set the position of the cursor by getting or setting the <xref:System.Console.CursorTop%2A> and <xref:System.Console.CursorLeft%2A> properties, or set the position of the cursor by calling the <xref:System.Console.SetCursorPosition%2A> method.  \n  \n-   Move or clear data in the screen buffer by calling the <xref:System.Console.MoveBufferArea%2A> or <xref:System.Console.Clear%2A> method.  \n  \n-   Get or set the foreground and background colors by using the <xref:System.Console.ForegroundColor%2A> and <xref:System.Console.BackgroundColor%2A> properties, or reset the background and foreground to their default colors by calling the <xref:System.Console.ResetColor%2A> method.  \n  \n-   Play the sound of a beep through the console speaker by calling the <xref:System.Console.Beep%2A> method.  \n  \n<a name=\"Core\"></a>   \n## [!INCLUDE[net_core](~/add/includes/net-core-md.md)] Notes  \n In the .NET Framework on the desktop, the Console class uses the encoding returned by `GetConsoleCP` and `GetConsoleOutputCP`, which typically is a code page encoding. For example code, on systems whose culture is English (United States), code page 437 is the encoding that is used by default. However, [!INCLUDE[net_core](~/add/includes/net-core-md.md)] may make only a limited subset of these encodings available. Where this is the case, <xref:System.Text.Encoding.UTF8%2A?displayProperty=fullName> is used as the default encoding for the console.  \n  \n If your app depends on specific code page encodings, you can still make them available by doing the following *before* you call any Console methods:  \n  \n1.  Add a reference to the System.Text.Encoding.CodePages.dll assembly to your project.  \n  \n2.  Retrieve the <xref:System.Text.EncodingProvider> object from the <xref:System.Text.CodePagesEncodingProvider.Instance%2A?displayProperty=fullName> property.  \n  \n3.  Pass the <xref:System.Text.EncodingProvider> object to the <xref:System.Text.Encoding.RegisterProvider%2A?displayProperty=fullName> method to make the additional encodings supported by the encoding provider available.  \n  \n The Console class will then automatically use the default system encoding rather than UTF8, provided that you have registered the encoding provider before calling any Console output methods."
  example:
  - "The following example demonstrates how to read data from, and write data to, the standard input and output streams. Note that these streams can be redirected by using the <xref:System.Console.SetIn%2A> and <xref:System.Console.SetOut%2A> methods.  \n  \n [!code-cs[Classic Console Example#1](~/add/codesnippet/csharp/t-system.console_6.cs)]\n [!code-cpp[Classic Console Example#1](~/add/codesnippet/cpp/t-system.console_6.cpp)]\n [!code-vb[Classic Console Example#1](~/add/codesnippet/visualbasic/t-system.console_6.vb)]"
  syntax:
    content: public static class Console
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Console.BackgroundColor
  id: BackgroundColor
  parent: System.Console
  langs:
  - csharp
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置控制台的背景色。"
  remarks: "对 BackgroundColor 属性的更改会影响更改背景色后写入单个字符单元格的仅限 output。 若要更改作为一个整体控制台窗口的背景色，设置 BackgroundColor 属性并调用<xref:System.Console.Clear%2A>方法。</xref:System.Console.Clear%2A> 下面的示例所示。       [!code-vb[System.Console.BackgroundColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_1.vb)][!code-cs[System.Console.BackgroundColor#1](~/add/codesnippet/csharp/p-system.console.backgro_1.cs) ]对于基于 Windows 的应用程序，在其中一个控制台不存在，get 操作返回<xref:System.ConsoleColor?displayProperty=fullName>.</xref:System.ConsoleColor?displayProperty=fullName>  "
  example:
  - "The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the BackgroundColor and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.backgro_2.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.backgro_2.cs)]"
  syntax:
    content: public static ConsoleColor BackgroundColor { get; set; }
    return:
      type: System.ConsoleColor
      description: "一个值，指定控制台; 的背景色随即出现之后的每个字符的颜色。 默认值为黑色。"
  overload: System.Console.BackgroundColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "在集运算中指定的颜色不是有效的成员<xref href=&quot;System.ConsoleColor&quot;> </xref>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Beep
  id: Beep
  parent: System.Console
  langs:
  - csharp
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "播放声音通过控制台扬声器播放提示音。"
  remarks: "默认情况下，播放提示音为 800 赫兹频率的 200 毫秒的持续时间。      1> [!NOTE] 1><xref:System.Console.Beep%2A>方法不支持在 64 位版本的 Windows Vista 和 Windows XP 上。</xref:System.Console.Beep%2A>       提示音包装对 Windows 的调用[鸣叫函数](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)。 提示音是否生成的 Windows 7 之前的 Windows 版本上声音取决于存在的 8254 可编程间隔计时器芯片。 从 Windows 7 开始，它依赖于默认声音设备。"
  example:
  - "The following example demonstrates the Beep method. The example accepts a number from 1 through 9 as a command line argument, and plays the beep that number of times.  \n  \n [!code-cs[console.beep#1](~/add/codesnippet/csharp/m-system.console.beep_1.cs)]\n [!code-cpp[console.beep#1](~/add/codesnippet/cpp/m-system.console.beep_1.cpp)]\n [!code-vb[console.beep#1](~/add/codesnippet/visualbasic/m-system.console.beep_1.vb)]"
  syntax:
    content: public static void Beep ();
    parameters: []
  overload: System.Console.Beep*
  exceptions:
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "在服务器上，例如 SQL Server，不允许用户接口的访问权限执行此方法。"
  platform:
  - net462
- uid: System.Console.Beep(System.Int32,System.Int32)
  id: Beep(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Beep(Int32,Int32)
  nameWithType: Console.Beep(Int32,Int32)
  fullName: System.Console.Beep(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "播放声音的具有指定的频率和持续时间通过控制台扬声器播放提示音。"
  remarks: "<xref:System.Console.Beep%2A>包装对 Windows 的调用[鸣叫函数](https://msdn.microsoft.com/library/windows/desktop/ms679277.aspx)。</xref:System.Console.Beep%2A> 是否<xref:System.Console.Beep%2A>在 Windows 7 取决于是否存在的 8254 可编程间隔计时器芯片前生成的 Windows 版本上声音。</xref:System.Console.Beep%2A> 从 Windows 7 开始，它依赖于默认声音设备。      1> [!NOTE] 1><xref:System.Console.Beep%2A>方法不支持在 64 位版本的 Windows Vista 和 Windows XP 上。</xref:System.Console.Beep%2A>"
  example:
  - "This example demonstrates the Beep method by playing the first few notes of a song through the console speaker.  \n  \n [!code-cpp[console.beep2#1](~/add/codesnippet/cpp/m-system.console.beep-sy_1.cpp)]\n [!code-vb[console.beep2#1](~/add/codesnippet/visualbasic/m-system.console.beep-sy_1.vb)]\n [!code-cs[console.beep2#1](~/add/codesnippet/csharp/m-system.console.beep-sy_1.cs)]"
  syntax:
    content: public static void Beep (int frequency, int duration);
    parameters:
    - id: frequency
      type: System.Int32
      description: "提示音，介于 37 到 32767 赫兹之间的频率。"
    - id: duration
      type: System.Int32
      description: "提示音的持续时间以毫秒为单位。"
  overload: System.Console.Beep*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>frequency</code>小于 37 或大于 32767 赫兹。       -或-<code>duration</code>小于或等于零。"
  - type: System.Security.HostProtectionException
    commentId: T:System.Security.HostProtectionException
    description: "在服务器上，例如 SQL Server，不允许访问控制台执行此方法。"
  platform:
  - net462
- uid: System.Console.BufferHeight
  id: BufferHeight
  parent: System.Console
  langs:
  - csharp
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置缓冲区的高度。"
  remarks: "此属性定义行 （或行），它存储在控制台模式窗口访问的缓冲区的数。 与此相反，<xref:System.Console.WindowHeight%2A>属性定义的实际显示在控制台窗口在任何特定时间的行数。</xref:System.Console.WindowHeight%2A> 如果实际写入缓冲区的行数超过所定义的行数<xref:System.Console.WindowHeight%2A>属性，以便它可显示的连续相等的行数可垂直滚动窗口<xref:System.Console.WindowHeight%2A>属性，也位于任意位置缓冲区中。</xref:System.Console.WindowHeight%2A> </xref:System.Console.WindowHeight%2A>       如果设置操作减少 BufferHeight 属性的值，将删除最顶部的行。 例如，如果行数都会从 300 减少到 250、 行 0 到 49 被移除，而现有行 50 到 299 成为行 0 是通过 249。"
  example:
  - "This example demonstrates the BufferHeight and <xref:System.Console.BufferWidth%2A> properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \n  \n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferh_1.cs)]\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferh_1.cpp)]\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferh_1.vb)]"
  syntax:
    content: public static int BufferHeight { get; set; }
    return:
      type: System.Int32
      description: "在行中，缓冲区的当前高度。"
  overload: System.Console.BufferHeight*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中的值小于或等于零。       -或-在集运算中的值是大于或等于&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -或-在集运算中的值是小于<> *1> + <> </> *1>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.BufferWidth
  id: BufferWidth
  parent: System.Console
  langs:
  - csharp
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置缓冲区的宽度。"
  remarks: "如果设置操作减少 BufferWidth 属性的值，则会删除最右边的列。 例如，如果从 80 情况下，列数减少到 60，会删除 60 79 个每个行和列。"
  example:
  - "This example demonstrates the <xref:System.Console.BufferHeight%2A> and BufferWidth properties. The example reports the dimensions of an operating system window set to a buffer size of 300 rows and 85 columns.  \n  \n [!code-cs[console.bufferHW#1](~/add/codesnippet/csharp/p-system.console.bufferw_1.cs)]\n [!code-cpp[console.bufferHW#1](~/add/codesnippet/cpp/p-system.console.bufferw_1.cpp)]\n [!code-vb[console.bufferHW#1](~/add/codesnippet/visualbasic/p-system.console.bufferw_1.vb)]"
  syntax:
    content: public static int BufferWidth { get; set; }
    return:
      type: System.Int32
      description: "当前的宽度的缓冲区列中。"
  overload: System.Console.BufferWidth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中的值小于或等于零。       -或-在集运算中的值是大于或等于&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -或-在集运算中的值是小于<> *1> + <> </> *1>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.CancelKeyPress
  id: CancelKeyPress
  parent: System.Console
  langs:
  - csharp
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
  type: Event
  assemblies:
  - mscorlib
  namespace: System
  summary: "发生时<xref href=&quot;System.ConsoleModifiers&quot;></xref>修改键 (Ctrl) 和<xref href=&quot;System.ConsoleKey&quot;> </xref> console 键 (C) 或 Break 键同时按住 （Ctrl + C 或 Ctrl + Break）。"
  remarks: "与<xref:System.ConsoleCancelEventHandler?displayProperty=fullName>和<xref:System.ConsoleCancelEventArgs?displayProperty=fullName>。</xref:System.ConsoleCancelEventArgs?displayProperty=fullName></xref:System.ConsoleCancelEventHandler?displayProperty=fullName>结合使用此事件 CancelKeyPress 事件可以截获 Ctrl + C 信号，以便事件处理程序可以决定是继续执行，还是终止将控制台应用程序。 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。       当用户按下 Ctrl + C 或 Ctrl + Break，激发事件 CancelKeyPress 和应用程序的<xref:System.ConsoleCancelEventHandler>执行事件处理程序。</xref:System.ConsoleCancelEventHandler> 事件处理程序传递<xref:System.ConsoleCancelEventArgs>具有两个有用的属性的对象:- <xref:System.ConsoleCancelEventArgs.SpecialKey%2A>，可用于确定是否由于用户按 Ctrl + C 调用处理程序 (该属性值将<xref:System.ConsoleSpecialKey?displayProperty=fullName>) 或 Ctrl + Break (该属性值将<xref:System.ConsoleSpecialKey?displayProperty=fullName>)。</xref:System.ConsoleSpecialKey?displayProperty=fullName> </xref:System.ConsoleSpecialKey?displayProperty=fullName> </xref:System.ConsoleCancelEventArgs.SpecialKey%2A> </xref:System.ConsoleCancelEventArgs>      - <xref:System.ConsoleCancelEventArgs.Cancel%2A>，可用于确定如何向应用程序应响应用户按 Ctrl + C 或 Ctrl + Break。</xref:System.ConsoleCancelEventArgs.Cancel%2A> 默认情况下，<xref:System.ConsoleCancelEventArgs.Cancel%2A>属性是`false`，其原因程序终止事件处理程序退出时的执行。</xref:System.ConsoleCancelEventArgs.Cancel%2A> 更改其属性`true`指定应用程序应继续执行。      1> [!TIP]&1;> 如果你的应用程序具有简单的要求，则可以使用<xref:System.Console.TreatControlCAsInput%2A>而不是此事件的属性。</xref:System.Console.TreatControlCAsInput%2A> 通过将此属性设置为`false`，你可以确保应用程序始终退出如果用户按下 Ctrl + C。 通过将它设置为`true`，你可以确保，按 Ctrl + C 将不会终止应用程序。       此事件的事件处理程序是在线程池线程上执行的。"
  example:
  - "The following example demonstrates how the CancelKeyPress event is used. When you press Ctrl+C, the read operation is interrupted and the `myHandler` event handler is invoked. Upon entry to the event handler, the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property is `false`, which means that the current process will terminate when the event handler terminates. However, the event handler sets the <xref:System.ConsoleCancelEventArgs.Cancel%2A?displayProperty=fullName> property to `true`, which means that the process will not terminate and the read operation will resume.  \n  \n [!code-cs[console.cancelkeypress#1](~/add/codesnippet/csharp/e-system.console.cancelk_1.cs)]\n [!code-cpp[console.cancelkeypress#1](~/add/codesnippet/cpp/e-system.console.cancelk_1.cpp)]\n [!code-vb[console.cancelkeypress#1](~/add/codesnippet/visualbasic/e-system.console.cancelk_1.vb)]"
  syntax:
    content: public static event ConsoleCancelEventHandler CancelKeyPress;
    return:
      type: System.ConsoleCancelEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Console.CapsLock
  id: CapsLock
  parent: System.Console
  langs:
  - csharp
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取一个值，该值指示 CAPS LOCK 键盘切换键是打开还是关闭。"
  syntax:
    content: public static bool CapsLock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 CAPS LOCK 处于打开状态;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果 CAPS LOCK 处于关闭状态。"
  overload: System.Console.CapsLock*
  exceptions: []
  platform:
  - net462
- uid: System.Console.Clear
  id: Clear
  parent: System.Console
  langs:
  - csharp
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "清除控制台缓冲区和相应的控制台窗口的显示信息。"
  remarks: "使用清除方法是等效的调用 MS-DOS`cls`命令在命令提示符窗口。 当调用清除方法时，光标自动滚动到窗口的左上角和屏幕缓冲区的内容设置为使用当前前景色背景色的空白。      1> [!NOTE]&1;> 试图调用清除方法，在控制台应用程序的输出定向到一个文件时将引发一种<xref:System.IO.IOException>。</xref:System.IO.IOException> 若要防止此情况，始终将包装对中的清除方法的调用`try`...`catch` 块。"
  example:
  - "The following example uses the Clear method to clear the console before it executes a loop, prompts the user to select a foreground and background color and to enter a string to display. If the user chooses not to exit the program, the console's original foreground and background colors are restored and the Clear method is called again before re-executing the loop.  \n  \n [!code-vb[System.Console.Clear#1](~/add/codesnippet/visualbasic/m-system.console.clear_1.vb)]\n [!code-cs[System.Console.Clear#1](~/add/codesnippet/csharp/m-system.console.clear_1.cs)]  \n  \n The example relies on a `GetKeyPress` method to validate the user's selection of a foreground and background color.  \n  \n This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and Clear methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.clear_2.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.clear_2.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.clear_2.vb)]"
  syntax:
    content: public static void Clear ();
    parameters: []
  overload: System.Console.Clear*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.CursorLeft
  id: CursorLeft
  parent: System.Console
  langs:
  - csharp
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置缓冲区中的光标的列位置。"
  remarks: ''
  example:
  - "This example demonstrates the CursorLeft and <xref:System.Console.CursorTop%2A> properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursorl_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursorl_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursorl_1.vb)]"
  syntax:
    content: public static int CursorLeft { get; set; }
    return:
      type: System.Int32
      description: "中的光标的列的当前位置。"
  overload: System.Console.CursorLeft*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中的值小于零。       -或者-在集运算中的值是大于或等于<xref:System.Console.BufferWidth*>.</xref:System.Console.BufferWidth*>"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.CursorSize
  id: CursorSize
  parent: System.Console
  langs:
  - csharp
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置在字符单元格中光标的高度。"
  remarks: "光标外观将发生变化，从底部的单元格一条水平线，当属性值为 1，到完全填充单元格，当属性值为 100。"
  example:
  - "This example demonstrates the CursorSize property. The example increases the size of the cursor each time any console key is pressed, then restores the cursor to its original size before terminating.  \n  \n [!code-cs[console.cursorsize#1](~/add/codesnippet/csharp/p-system.console.cursors_1.cs)]\n [!code-cpp[console.cursorsize#1](~/add/codesnippet/cpp/p-system.console.cursors_1.cpp)]\n [!code-vb[console.cursorsize#1](~/add/codesnippet/visualbasic/p-system.console.cursors_1.vb)]"
  syntax:
    content: public static int CursorSize { get; set; }
    return:
      type: System.Int32
      description: "以字符单元格中的高度的百分比表示光标的大小。 属性值的范围从 1 到 100 之间。"
  overload: System.Console.CursorSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中指定的值是小于 1 或大于 100。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.CursorTop
  id: CursorTop
  parent: System.Console
  langs:
  - csharp
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置缓冲区中的光标的行位置。"
  remarks: ''
  example:
  - "This example demonstrates the <xref:System.Console.CursorLeft%2A> and CursorTop properties, and the <xref:System.Console.SetCursorPosition%2A> and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/p-system.console.cursortop_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/p-system.console.cursortop_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/p-system.console.cursortop_1.vb)]"
  syntax:
    content: public static int CursorTop { get; set; }
    return:
      type: System.Int32
      description: "中的光标的行的当前位置。"
  overload: System.Console.CursorTop*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中的值小于零。       -或者-在集运算中的值是大于或等于<xref:System.Console.BufferHeight*>.</xref:System.Console.BufferHeight*>"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.CursorVisible
  id: CursorVisible
  parent: System.Console
  langs:
  - csharp
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置一个值，该值指示光标是否可见。"
  remarks: ''
  example:
  - "This example demonstrates the CursorVisible property. The example makes the cursor visible if the first column of input is a '+' character or invisible if the input is a '-' character.  \n  \n [!code-cs[console.cursorvis#1](~/add/codesnippet/csharp/p-system.console.cursorv_1.cs)]\n [!code-vb[console.cursorvis#1](~/add/codesnippet/visualbasic/p-system.console.cursorv_1.vb)]\n [!code-cpp[console.cursorvis#1](~/add/codesnippet/cpp/p-system.console.cursorv_1.cpp)]"
  syntax:
    content: public static bool CursorVisible { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果光标可见，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.CursorVisible*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Error
  id: Error
  parent: System.Console
  langs:
  - csharp
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准错误输出流。"
  remarks: "默认情况下，此标准错误流设置到控制台。 它可以设置到另一个流<xref:System.Console.SetError%2A>方法。</xref:System.Console.SetError%2A> 标准错误流重定向后，它可以重新获取通过调用<xref:System.Console.OpenStandardError%2A>方法。</xref:System.Console.OpenStandardError%2A>       在控制台应用程序的信息性输出通常定向到一个文件，可通过错误属性的标准错误流可以用于向控制台显示的信息，即使重定向输出。 下面的示例从 1 开始的一次显示 10 个数字的产品表。 后的 10 个数的每个集，使用错误属性来询问用户是否显示下一组。 如果标准输出定向到一个文件，则仍例程是否应生成的下一步的一套产品要求用户。       [!code-cs[System.Console.Error#1](~/add/codesnippet/csharp/p-system.console.error_1.cs)][!code-vb[System.Console.Error#1  ](~/add/codesnippet/visualbasic/p-system.console.error_1.vb)]"
  example:
  - "The following example is a command line utility named ExpandTabs that replaces tab characters in a text file with four spaces, the value defined by the `tabSize` variable. It redirects the standard input and output streams to files, but uses the Error property to write the standard error stream to the console. It can be launched from the command line by supplying the name of the file that contains tab characters and the name of the output file.  \n  \n [!code-cpp[Console-EXPANDTABSEX#1](~/add/codesnippet/cpp/p-system.console.error_2.cpp)]\n [!code-cs[Console-EXPANDTABSEX#1](~/add/codesnippet/csharp/p-system.console.error_2.cs)]\n [!code-vb[Console-EXPANDTABSEX#1](~/add/codesnippet/visualbasic/p-system.console.error_2.vb)]  \n  \n The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the <xref:System.Console.OpenStandardError%2A> method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \n  \n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/p-system.console.error_3.cs)]\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/p-system.console.error_3.vb)]  \n  \n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered."
  syntax:
    content: public static System.IO.TextWriter Error { get; }
    return:
      type: System.IO.TextWriter
      description: "A<xref:System.IO.TextWriter>表示标准错误输出流。</xref:System.IO.TextWriter>"
  overload: System.Console.Error*
  exceptions: []
  platform:
  - net462
- uid: System.Console.ForegroundColor
  id: ForegroundColor
  parent: System.Console
  langs:
  - csharp
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置控制台的前景色。"
  remarks: "对于基于 Windows 的应用程序，在其中一个控制台不存在，get 操作返回<xref:System.ConsoleColor>.</xref:System.ConsoleColor>"
  example:
  - "The following example checks whether the console's background color is black and, if it is, it changes the background color to red and the foreground color to black.  \n  \n [!code-cs[System.ConsoleColor#2](~/add/codesnippet/csharp/p-system.console.foregro_1.cs)]\n [!code-vb[System.ConsoleColor#2](~/add/codesnippet/visualbasic/p-system.console.foregro_1.vb)]  \n  \n The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and ForegroundColor properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the <xref:System.Console.ResetColor%2A> method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/p-system.console.foregro_2.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/p-system.console.foregro_2.cs)]"
  syntax:
    content: public static ConsoleColor ForegroundColor { get; set; }
    return:
      type: System.ConsoleColor
      description: "A <xref href=&quot;System.ConsoleColor&quot;> </xref> ，指定控制台的前景色; 也就是说，每个字符颜色显示。 默认值为灰色。"
  overload: System.Console.ForegroundColor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "在集运算中指定的颜色不是有效的成员<xref href=&quot;System.ConsoleColor&quot;> </xref>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.In
  id: In
  parent: System.Console
  langs:
  - csharp
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准输入的流。"
  remarks: "默认情况下，此属性设置为标准输入流。 此属性可以设置为另一个流<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A>       读取操作的标准输入流上同步执行。 也就是说，它们受阻，直到指定的读取的操作完成。 这甚至适用如果异步方法，如<xref:System.IO.TextReader.ReadLineAsync%2A>，调用<xref:System.IO.TextReader>In 属性返回的对象。</xref:System.IO.TextReader> </xref:System.IO.TextReader.ReadLineAsync%2A>"
  example:
  - "The following sample illustrates the use of the `In` property.  \n  \n [!code-cpp[consolein#1](~/add/codesnippet/cpp/p-system.console.in_1.cpp)]\n [!code-cs[consolein#1](~/add/codesnippet/csharp/p-system.console.in_1.cs)]\n [!code-vb[consolein#1](~/add/codesnippet/visualbasic/p-system.console.in_1.vb)]"
  syntax:
    content: public static System.IO.TextReader In { get; }
    return:
      type: System.IO.TextReader
      description: "A<xref:System.IO.TextReader>表示标准输入的流。</xref:System.IO.TextReader>"
  overload: System.Console.In*
  exceptions: []
  platform:
  - net462
- uid: System.Console.InputEncoding
  id: InputEncoding
  parent: System.Console
  langs:
  - csharp
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置控制台用于读取输入的编码。"
  remarks: "控制台使用要将键盘输入转换为相应的字符编码的输入。 输入编码用到了映射到单独字符的 256 键盘字符代码的代码页。 不同代码页包含不同的特殊字符，通常为一种语言或一组语言进行自定义。       从开始[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，属性 get 操作可以返回而不是控制台的当前输入编码的缓存的值。 发生这种情况 InputEncoding 属性的值修改分配给 InputEncoding 属性，例如在调用 Windows 以外的其他一些方式`SetConsoleCP`函数或使用`chcp`命令从 PowerShell 脚本。"
  syntax:
    content: public static System.Text.Encoding InputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "用于读取控制台输入的编码。"
  overload: System.Console.InputEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "在集运算中的属性值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "在执行此操作期间出错。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "你的应用程序没有权限执行此操作。"
  platform:
  - net462
- uid: System.Console.IsErrorRedirected
  id: IsErrorRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取一个值，该值指示错误输出流是否已经从标准错误流定位。"
  syntax:
    content: public static bool IsErrorRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果错误输出重定向;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.IsErrorRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.IsInputRedirected
  id: IsInputRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取一个值，该值指示输入是否已经从标准输入流定位。"
  syntax:
    content: public static bool IsInputRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果输入重定向;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.IsInputRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.IsOutputRedirected
  id: IsOutputRedirected
  parent: System.Console
  langs:
  - csharp
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取一个值，该值指示输出是否已经从标准输出流定位。"
  syntax:
    content: public static bool IsOutputRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果输出重定向;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.IsOutputRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Console.KeyAvailable
  id: KeyAvailable
  parent: System.Console
  langs:
  - csharp
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取一个值，该值指示按键输入流中是否可用。"
  remarks: "立即; 返回的属性值也就是说，KeyAvailable 属性不会阻止输入，直到按键操作可用。       将 KeyAvailable 属性结合使用并且仅带有<xref:System.Console.ReadKey%2A>方法，不<xref:System.Console.Read%2A>或<xref:System.Console.ReadLine%2A>方法。</xref:System.Console.ReadLine%2A> </xref:System.Console.Read%2A> </xref:System.Console.ReadKey%2A>"
  example:
  - "The following example demonstrates how to use the KeyAvailable property to create a loop that runs until a key is pressed.  \n  \n [!code-cs[console.keyavailable#1](~/add/codesnippet/csharp/p-system.console.keyavai_1.cs)]\n [!code-cpp[console.keyavailable#1](~/add/codesnippet/cpp/p-system.console.keyavai_1.cpp)]\n [!code-vb[console.keyavailable#1](~/add/codesnippet/visualbasic/p-system.console.keyavai_1.vb)]"
  syntax:
    content: public static bool KeyAvailable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果按键操作可用;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.KeyAvailable*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "标准输入重定向到文件而不是键盘。"
  platform:
  - net462
- uid: System.Console.LargestWindowHeight
  id: LargestWindowHeight
  parent: System.Console
  langs:
  - csharp
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取具有最大可能的控制台窗口行数，根据当前字体和屏幕分辨率。"
  syntax:
    content: public static int LargestWindowHeight { get; }
    return:
      type: System.Int32
      description: "最大可能的控制台窗口的高度，以行为单位。"
  overload: System.Console.LargestWindowHeight*
  exceptions: []
  platform:
  - net462
- uid: System.Console.LargestWindowWidth
  id: LargestWindowWidth
  parent: System.Console
  langs:
  - csharp
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取尽可能多的控制台窗口的列，根据当前字体和屏幕分辨率。"
  syntax:
    content: public static int LargestWindowWidth { get; }
    return:
      type: System.Int32
      description: "最大可能的控制台窗口的宽度，以列为单位。"
  overload: System.Console.LargestWindowWidth*
  exceptions: []
  platform:
  - net462
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将屏幕缓冲区的指定的源区域复制到指定的目标区域。"
  remarks: "如果目标和源参数指定位于当前屏幕缓冲区的边界之外的位置，则复制仅适合目标区域的源区域的部分。 也就是说，源区域进行剪裁以适应当前屏幕缓冲区的大小。       MoveBufferArea 方法将源区域复制到目标区域。 如果目标区域不相交的源区域，用空格使用当前的前景色和背景色填充源区域。 否则，将不填充源区域相交的部分。"
  syntax:
    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop);
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "源区域最左边的列。"
    - id: sourceTop
      type: System.Int32
      description: "源区域最顶部行。"
    - id: sourceWidth
      type: System.Int32
      description: "源区域中的列数。"
    - id: sourceHeight
      type: System.Int32
      description: "源区域中的行数。"
    - id: targetLeft
      type: System.Int32
      description: "目标区域最左边的列。"
    - id: targetTop
      type: System.Int32
      description: "目标区域最顶部行。"
  overload: System.Console.MoveBufferArea*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "一个或多个参数小于零。       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <>*>.      -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <>*>.      -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <>*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  id: MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  langs:
  - csharp
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将屏幕缓冲区的指定的源区域复制到指定的目标区域。"
  remarks: "如果目标和源参数指定的位置位于超出当前屏幕缓冲区的边界，则复制仅适合目标区域的源区域的部分。 也就是说，源区域进行剪裁以适应当前屏幕缓冲区的大小。       <xref:System.Console.MoveBufferArea%2A>方法将源区域复制到的目标区域。</xref:System.Console.MoveBufferArea%2A> 如果目标区域不相交的源区域，使用指定的字符填充源区域`sourceChar`，使用指定的颜色`sourceForeColor`和`sourceBackColor`。 否则，将不填充源区域相交的部分。       <xref:System.Console.MoveBufferArea%2A>方法执行任何操作，如果`sourceWidth`或`sourceHeight`为零。</xref:System.Console.MoveBufferArea%2A>"
  syntax:
    content: public static void MoveBufferArea (int sourceLeft, int sourceTop, int sourceWidth, int sourceHeight, int targetLeft, int targetTop, char sourceChar, ConsoleColor sourceForeColor, ConsoleColor sourceBackColor);
    parameters:
    - id: sourceLeft
      type: System.Int32
      description: "源区域最左边的列。"
    - id: sourceTop
      type: System.Int32
      description: "源区域最顶部行。"
    - id: sourceWidth
      type: System.Int32
      description: "源区域中的列数。"
    - id: sourceHeight
      type: System.Int32
      description: "源区域中的行数。"
    - id: targetLeft
      type: System.Int32
      description: "目标区域最左边的列。"
    - id: targetTop
      type: System.Int32
      description: "目标区域最顶部行。"
    - id: sourceChar
      type: System.Char
      description: "用于填充源区域的字符。"
    - id: sourceForeColor
      type: System.ConsoleColor
      description: "用于填充源区域的前景颜色。"
    - id: sourceBackColor
      type: System.ConsoleColor
      description: "用于填充源区域的背景颜色。"
  overload: System.Console.MoveBufferArea*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "一个或多个参数小于零。       -or-       <code>sourceLeft</code> or <code>targetLeft</code> is greater than or equal to <>*>.      -or-       <code>sourceTop</code> or <code>targetTop</code> is greater than or equal to <>*>.       -or-       <code>sourceTop</code> + <code>sourceHeight</code> is greater than or equal to <>*>.      -or-       <code>sourceLeft</code> + <code>sourceWidth</code> is greater than or equal to <>*>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "一个或两个颜色参数不是成员的<xref href=&quot;System.ConsoleColor&quot;></xref>枚举。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.NumberLock
  id: NumberLock
  parent: System.Console
  langs:
  - csharp
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取一个值，该值指示 NUM LOCK 键盘切换键是打开还是关闭。"
  syntax:
    content: public static bool NumberLock { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 NUM LOCK 处于打开状态;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果 NUM LOCK 处于关闭状态。"
  overload: System.Console.NumberLock*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardError
  id: OpenStandardError
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准错误流。"
  remarks: "此方法可以用于已由更改后重新获取标准错误流<xref:System.Console.SetError%2A>方法。</xref:System.Console.SetError%2A>"
  example:
  - "The following example is a simple text file viewer that displays the contents of one or more text files to the console. If there are no command line arguments, or if any files passed as command line arguments do not exist, the example calls the <xref:System.Console.SetError%2A> method to redirect error information to a file, calls the OpenStandardError method in the process of reacquiring the standard error stream, and indicates that error information was written to a file.  \n  \n [!code-cs[System.Console.OpenStandardError#1](~/add/codesnippet/csharp/m-system.console.opensta_4_1.cs)]\n [!code-vb[System.Console.OpenStandardError#1](~/add/codesnippet/visualbasic/m-system.console.opensta_4_1.vb)]  \n  \n Note that the <xref:System.IO.StreamWriter.AutoFlush%2A?displayProperty=fullName> property is set to `true` before reacquiring the error stream. This ensures that output will be sent to the console immediately rather than buffered."
  syntax:
    content: public static System.IO.Stream OpenStandardError ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "标准错误流中。"
  overload: System.Console.OpenStandardError*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardError(System.Int32)
  id: OpenStandardError(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardError(Int32)
  nameWithType: Console.OpenStandardError(Int32)
  fullName: System.Console.OpenStandardError(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准错误流，它设置为指定的缓冲区大小。"
  remarks: "此方法可以用于已由更改后重新获取标准错误流<xref:System.Console.SetError%2A>方法。</xref:System.Console.SetError%2A>"
  syntax:
    content: public static System.IO.Stream OpenStandardError (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "内部流缓冲区大小。"
    return:
      type: System.IO.Stream
      description: "标准错误流中。"
  overload: System.Console.OpenStandardError*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>小于或等于零。"
  platform:
  - net462
- uid: System.Console.OpenStandardInput
  id: OpenStandardInput
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准输入的流。"
  remarks: "此方法可以用于已由更改后重新获取标准输入的流<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A>"
  example:
  - "The following example illustrates the use of the `OpenStandardInput` property.  \n  \n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_3_1.cs)]\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_3_1.vb)]\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_3_1.cpp)]"
  syntax:
    content: public static System.IO.Stream OpenStandardInput ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "标准输入的流。"
  overload: System.Console.OpenStandardInput*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardInput(System.Int32)
  id: OpenStandardInput(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardInput(Int32)
  nameWithType: Console.OpenStandardInput(Int32)
  fullName: System.Console.OpenStandardInput(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取设置为指定的缓冲区大小的标准输入的流。"
  remarks: "此方法可以用于已由更改后重新获取标准输出流<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A>"
  example:
  - "The following example illustrates the use of the `OpenStandardInput` property.  \n  \n [!code-cs[System.Console.OpenStandartInput#1](~/add/codesnippet/csharp/m-system.console.opensta_2_1.cs)]\n [!code-vb[System.Console.OpenStandartInput#1](~/add/codesnippet/visualbasic/m-system.console.opensta_2_1.vb)]\n [!code-cpp[System.Console.OpenStandartInput#1](~/add/codesnippet/cpp/m-system.console.opensta_2_1.cpp)]"
  syntax:
    content: public static System.IO.Stream OpenStandardInput (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "内部流缓冲区大小。"
    return:
      type: System.IO.Stream
      description: "标准输入的流。"
  overload: System.Console.OpenStandardInput*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>小于或等于零。"
  platform:
  - net462
- uid: System.Console.OpenStandardOutput
  id: OpenStandardOutput
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准输出流。"
  remarks: "此方法可以用于已由更改后重新获取标准输出流<xref:System.Console.SetOut%2A>方法。</xref:System.Console.SetOut%2A>"
  example:
  - "The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command-line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_0_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_0_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_0_1.cs)]"
  syntax:
    content: public static System.IO.Stream OpenStandardOutput ();
    parameters: []
    return:
      type: System.IO.Stream
      description: "标准输出流中。"
  overload: System.Console.OpenStandardOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OpenStandardOutput(System.Int32)
  id: OpenStandardOutput(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: OpenStandardOutput(Int32)
  nameWithType: Console.OpenStandardOutput(Int32)
  fullName: System.Console.OpenStandardOutput(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准输出流，它设置为指定的缓冲区大小。"
  remarks: "此方法可以用于已由更改后重新获取标准输出流<xref:System.Console.SetOut%2A>方法。</xref:System.Console.SetOut%2A>"
  example:
  - "The following example illustrates the use of the OpenStandardOutput method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.opensta_1_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.opensta_1_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.opensta_1_1.cs)]"
  syntax:
    content: public static System.IO.Stream OpenStandardOutput (int bufferSize);
    parameters:
    - id: bufferSize
      type: System.Int32
      description: "内部流缓冲区大小。"
    return:
      type: System.IO.Stream
      description: "标准输出流中。"
  overload: System.Console.OpenStandardOutput*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>bufferSize</code>小于或等于零。"
  platform:
  - net462
- uid: System.Console.Out
  id: Out
  parent: System.Console
  langs:
  - csharp
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准输出流。"
  remarks: "默认情况下，此属性设置为标准输出流。 此属性可以设置为另一个流<xref:System.Console.SetOut%2A>方法。</xref:System.Console.SetOut%2A>       请注意，调用`Console.Out.WriteLine`方法是等效于调用相应<xref:System.Console.WriteLine%2A>方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example uses the Out property to display an array containing the names of files in the application's current directory to the standard output device. It then sets the standard output to a file named Files.txt and lists the array elements to the file. Finally, it sets the output to the standard output stream and again displays the array elements to the standard output device.  \n  \n [!code-cs[System.Console.Out#1](~/add/codesnippet/csharp/p-system.console.out_1.cs)]\n [!code-vb[System.Console.Out#1](~/add/codesnippet/visualbasic/p-system.console.out_1.vb)]"
  syntax:
    content: public static System.IO.TextWriter Out { get; }
    return:
      type: System.IO.TextWriter
      description: "A<xref:System.IO.TextWriter>表示标准输出流。</xref:System.IO.TextWriter>"
  overload: System.Console.Out*
  exceptions: []
  platform:
  - net462
- uid: System.Console.OutputEncoding
  id: OutputEncoding
  parent: System.Console
  langs:
  - csharp
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置控制台用于写入输出的编码。"
  remarks: "控制台使用的输出编码将转换控制台显示的相应字符的应用程序写入的字符转换。 该控制台使用的默认代码页由系统区域设置确定。       从开始[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，属性 get 操作可以返回而不是控制台的当前输出编码的缓存的值。 发生这种情况 OutputEncoding 属性的值修改分配给 OutputEncoding 属性，例如在调用 Windows 以外的其他一些方式`SetConsoleOutputCP`函数。"
  syntax:
    content: public static System.Text.Encoding OutputEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "用于写入控制台输出的编码。"
  overload: System.Console.OutputEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "在集运算中的属性值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "在执行此操作期间出错。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "你的应用程序没有权限执行此操作。"
  platform:
  - net462
- uid: System.Console.Read
  id: Read
  parent: System.Console
  langs:
  - csharp
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "从标准输入流读取下一个字符。"
  remarks: "Read 方法阻止其返回值时键入输入的字符;它终止时按<xref:System.ConsoleKey>密钥。</xref:System.ConsoleKey> 按 Enter 将依赖于平台的行终止序列追加到你的输入 （例如，Windows 追加回车换行符序列）。 Read 方法的后续调用一次检索你输入的一个字符。 读取检索最后一个字符后，阻止其返回再次并重复上述循环。      1> [!IMPORTANT]&1;><xref:System.Console.ReadLine%2A>方法，或<xref:System.Console.KeyAvailable%2A>属性和<xref:System.Console.ReadKey%2A>方法要优于使用读取方法。</xref:System.Console.ReadKey%2A> </xref:System.Console.KeyAvailable%2A> </xref:System.Console.ReadLine%2A>       请注意该方法不会不返回-1，除非你执行以下操作之一:-同时按<xref:System.ConsoleModifiers>修改键和<xref:System.ConsoleKey>控制台键 (Ctrl + Z)，指示文件尾条件。</xref:System.ConsoleKey> </xref:System.ConsoleModifiers>      -按等效键，用于通知的文件尾条件，例如在 Windows 中的 F6 函数密钥。      -输入将流重定向到的源，如的文本文件，包含实际的文件尾字符。"
  example:
  - "The following example demonstrates the Read method.  \n  \n [!code-cpp[console.read#1](~/add/codesnippet/cpp/m-system.console.read_1.cpp)]\n [!code-cs[console.read#1](~/add/codesnippet/csharp/m-system.console.read_1.cs)]\n [!code-vb[console.read#1](~/add/codesnippet/visualbasic/m-system.console.read_1.vb)]"
  syntax:
    content: public static int Read ();
    parameters: []
    return:
      type: System.Int32
      description: "下一个字符从输入流，则为负一 (-1) 如果当前有更多要读取的字符。"
  overload: System.Console.Read*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.ReadKey
  id: ReadKey
  parent: System.Console
  langs:
  - csharp
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取用户按下的下一个字符或功能键。 按下的键显示在控制台窗口中。"
  remarks: "也就是说，ReadKey 方法等待直到按下字符或功能键颁发 ReadKey 方法中，在线程上的块。 字符或功能键可以为同一个或多个 Alt、 Ctrl 或 shift 键修改键一起按下组合。 但是，修改键按下不会导致 ReadKey 方法以返回。       具体取决于你的应用程序，你可能想要结合使用 ReadKey 方法<xref:System.Console.KeyAvailable%2A>属性。</xref:System.Console.KeyAvailable%2A>       即使标准输入重定向到的文件，从键盘读取 ReadKey 方法<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A>"
  example:
  - "One of the most common uses of the ReadKey method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app.  \n  \n [!code-cs[System.Console.ReadKey#1](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]\n [!code-vb[System.Console.ReadKey#1](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]  \n  \n Note that this overload of the <xref:System.Console.ReadKey%2A> method by default echoes any displayable keys that the user presses to the console. To suppress them, call the  <xref:System.Console.ReadKey%2A> method with an `intercept` argument of `true`.  \n  \n The following example uses the ReadKey method to display information about which key the user pressed..  \n  \n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]"
  syntax:
    content: public static ConsoleKeyInfo ReadKey ();
    parameters: []
    return:
      type: System.ConsoleKeyInfo
      description: "一个对象，描述<xref href=&quot;System.ConsoleKey&quot;></xref>常量和 Unicode 字符，如果有的话，对应于按下的控制台键。 <xref href=&quot;System.ConsoleKeyInfo&quot;> </xref>对象还中描述的按位组合<xref href=&quot;System.ConsoleModifiers&quot;></xref>值，是否一个或多个 Shift、 Alt 和 Ctrl 修改键的同时按下控制台键。"
  overload: System.Console.ReadKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Console.In*>属性从控制台以外的某个流重定向。</xref:System.Console.In*>"
  platform:
  - net462
- uid: System.Console.ReadKey(System.Boolean)
  id: ReadKey(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取用户按下的下一个字符或功能键。 按下的键可以选择显示在控制台窗口中。"
  remarks: "<xref:System.Console.ReadKey%2A>方法，即等待线程颁发上的块<xref:System.Console.ReadKey%2A>方法，直到按下字符或功能键。</xref:System.Console.ReadKey%2A> </xref:System.Console.ReadKey%2A> 字符或功能键可以为同一个或多个 Alt、 Ctrl 或 shift 键修改键一起按下组合。 但是，修改键按下不会导致<xref:System.Console.ReadKey%2A>方法以返回。</xref:System.Console.ReadKey%2A>       如果`intercept`参数是`true`，截获按下的键，并且不显示在控制台窗口中; 否则为将显示按下的键。       具体取决于你的应用程序，你可能想要使用<xref:System.Console.ReadKey%2A>方法结合<xref:System.Console.KeyAvailable%2A>属性。</xref:System.Console.KeyAvailable%2A> </xref:System.Console.ReadKey%2A>       <xref:System.Console.ReadKey%2A>即使标准输入重定向到的文件，方法将读取从键盘<xref:System.Console.SetIn%2A>方法。</xref:System.Console.SetIn%2A> </xref:System.Console.ReadKey%2A>"
  example:
  - "One of the most common uses of the <xref:System.Console.ReadKey%2A> method is to halt program execution until the user presses a key and the app either terminates or displays an additional window of information. The following example uses the  ReadKey method to wait for the user to press the Enter key before terminating the app. Note that, if the user presses any other key, it is not echoed to the console.  \n  \n [!code-vb[System.Console.ReadKey#2](~/add/codesnippet/visualbasic/m-system.console.readkey_1.vb)]\n [!code-cs[System.Console.ReadKey#2](~/add/codesnippet/csharp/m-system.console.readkey_1.cs)]  \n  \n The following example uses the ReadKey method to display information about the key pressed by a user without echoing that key to the console.  \n  \n [!code-cs[console.readkey2#1](~/add/codesnippet/csharp/m-system.console.readkey_2.cs)]\n [!code-cpp[console.readkey2#1](~/add/codesnippet/cpp/m-system.console.readkey_2.cpp)]\n [!code-vb[console.readkey2#1](~/add/codesnippet/visualbasic/m-system.console.readkey_2.vb)]"
  syntax:
    content: public static ConsoleKeyInfo ReadKey (bool intercept);
    parameters:
    - id: intercept
      type: System.Boolean
      description: "确定是否在控制台窗口中显示按下的键。 <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>不显示按下的键;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.ConsoleKeyInfo
      description: "一个对象，描述<xref href=&quot;System.ConsoleKey&quot;></xref>常量和 Unicode 字符，如果有的话，对应于按下的控制台键。 <xref href=&quot;System.ConsoleKeyInfo&quot;> </xref>对象还中描述的按位组合<xref href=&quot;System.ConsoleModifiers&quot;></xref>值，是否一个或多个 Shift、 Alt 和 Ctrl 修改键的同时按下控制台键。"
  overload: System.Console.ReadKey*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.Console.In*>属性从控制台以外的某个流重定向。</xref:System.Console.In*>"
  platform:
  - net462
- uid: System.Console.ReadLine
  id: ReadLine
  parent: System.Console
  langs:
  - csharp
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "从标准输入流读取下的一行字符。"
  remarks: "ReadLine 方法从标准输入流中读取一行。 （有关行的定义，请参阅段落后下面的列表。）这意味着:-如果标准的输入的设备 ReadLine 方法受到阻止，直到用户按下键盘**Enter**密钥。           最常见的一个用途的 ReadLine 方法是暂停程序执行之前清除控制台并显示新信息，或者提示用户按下 Enter 键，然后终止应用程序。 下面的示例阐释了这一点。           [!code-cpp[System.Console.ReadLine#6](~/add/codesnippet/cpp/m-system.console.readline_1.cpp)][!code-vb[System.Console.ReadLine#6](~/add/codesnippet/visualbasic/m-system.console.readline_1.vb)][!code-cs[System.Console.ReadLine#6](~/add/codesnippet/csharp/m-system.console.readline_1.cs) ] -标准输入定向到一个文件，如果 ReadLine 方法从文件中读取一行文本。             例如，下面是一个名为 ReadLine1.txt 文本文件︰```          This is the first line.       This is the second line.       This is the third line.       This is the fourth line.          ```下面的示例使用 ReadLine 方法来读取从文件重定向的输入。 读取的操作终止时该方法返回`null`，这指示没有线仍要读取。           [!code-cs[System.Console.ReadLine#3](~/add/codesnippet/csharp/m-system.console.readline_2.cs)][!code-vb[System.Console.ReadLine#3](~/add/codesnippet/visualbasic/m-system.console.readline_2.vb) ]后编译到名为 ReadLine1.exe 的可执行文件的示例，你可以运行从命令行中使用语法```       ReadLine1 < ReadLine1.txt       ```读取文件的内容并将它们显示到控制台。             将行定义为字符后跟回车符 (十六进制 0x000d)、 换行符 (十六进制 0x000a) 或值的序列<xref:System.Environment.NewLine%2A?displayProperty=fullName>属性。</xref:System.Environment.NewLine%2A?displayProperty=fullName> 返回的字符串不包含的终止字符。 默认情况下，该方法读取输入 256 个字符输入缓冲区中。 因为这包括<xref:System.Environment.NewLine%2A?displayProperty=fullName>字符，该方法可以读取包含超过 254 个字符的行。</xref:System.Environment.NewLine%2A?displayProperty=fullName> 若要读取较长的行，调用<xref:System.Console.OpenStandardInput%28System.Int32%29>方法。</xref:System.Console.OpenStandardInput%28System.Int32%29>       ReadLine 方法以同步方式执行。 即，被阻止，直至读取行或按下 Ctrl + Z 键盘组合。 <xref:System.Console.In%2A>属性返回<xref:System.IO.TextReader>对象，它表示标准输入的流并具有这两个同步<xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName>方法和异步<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>方法。</xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName> </xref:System.IO.TextReader.ReadLine%2A?displayProperty=fullName> </xref:System.IO.TextReader> </xref:System.Console.In%2A> 但是，当用作控制台的标准输入流，<xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>同步而不是以异步方式执行，并返回`Task<String>`仅完成读取的操作后。</xref:System.IO.TextReader.ReadLineAsync%2A?displayProperty=fullName>       如果此方法将引发<xref:System.OutOfMemoryException>异常，而在基础读取器的位置<xref:System.IO.Stream>对象高级按该方法无法读取的字符数，但是已到内部 ReadLine 缓冲区中读取的字符将被放弃。</xref:System.IO.Stream> </xref:System.OutOfMemoryException> 由于不能更改流中读取器的位置，因此已读取的字符是不可恢复，并可以访问仅通过重新初始化<xref:System.IO.TextReader>.</xref:System.IO.TextReader> 如果流中的初始位置是未知或流不支持查找，基础<xref:System.IO.Stream>还需要重新初始化。</xref:System.IO.Stream> 若要避免这种情况并生成可靠的代码，应使用<xref:System.Console.KeyAvailable%2A>属性和<xref:System.Console.ReadKey%2A>只读方法和应用商店中预先分配的缓冲区的字符。</xref:System.Console.ReadKey%2A> </xref:System.Console.KeyAvailable%2A>       如果该方法是从控制台读取输入时按 Ctrl + Z 字符，该方法返回`null`。 这使用户能够在循环中调用 ReadLine 方法时阻止进一步的键盘输入。 下面的示例阐释了这种情况。       [!code-cpp[System.Console.ReadLine#1](~/add/codesnippet/cpp/m-system.console.readline_3.cpp)][!code-cs[System.Console.ReadLine#1](~/add/codesnippet/csharp/m-system.console.readline_3.cs)][!code-vb[System.Console.ReadLine#1    ](~/add/codesnippet/visualbasic/m-system.console.readline_3.vb)]"
  example:
  - "The following example requires two command line arguments: the name of an existing text file, and the name of a file to write the output to. It opens the existing text file and redirects the standard input from the keyboard to that file. It also redirects the standard output from the console to the output file. It then uses the ReadLine method to read each line in the file, replaces every sequence of four spaces with a tab character, and uses the <xref:System.Console.WriteLine%2A?displayProperty=fullName> method to write the result to the output file.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.readline_4.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.readline_4.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.readline_4.cs)]"
  syntax:
    content: public static string ReadLine ();
    parameters: []
    return:
      type: System.String
      description: "下的一行字符从输入流中，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有更多的可用行。"
  overload: System.Console.ReadLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.OutOfMemoryException
    commentId: T:System.OutOfMemoryException
    description: "没有足够的内存来为返回的字符串分配缓冲区。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "下一行字符中的字符数大于&lt;xref:System.Int32.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Console.ResetColor
  id: ResetColor
  parent: System.Console
  langs:
  - csharp
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "前景色和背景控制台色设置为各自的默认值。"
  remarks: "前景色和背景颜色将还原为当前进程开始时存在的颜色。 有关详细信息，请参阅<xref:System.Console.ForegroundColor%2A>和<xref:System.Console.BackgroundColor%2A>属性。</xref:System.Console.BackgroundColor%2A> </xref:System.Console.ForegroundColor%2A>"
  example:
  - "The following example saves the values of the <xref:System.ConsoleColor> enumeration to an array and stores the current values of the <xref:System.Console.BackgroundColor%2A> and <xref:System.Console.ForegroundColor%2A> properties to variables. It then changes the foreground color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current background, and it changes the background color to each color in the <xref:System.ConsoleColor> enumeration except to the color that matches the current foreground. (If the foreground color is the same as the background color, the text isn't visible.) Finally, it calls the ResetColor method to restore the original console colors.  \n  \n [!code-vb[System.ConsoleColor#1](~/add/codesnippet/visualbasic/m-system.console.resetco_1.vb)]\n [!code-cs[System.ConsoleColor#1](~/add/codesnippet/csharp/m-system.console.resetco_1.cs)]"
  syntax:
    content: public static void ResetColor ();
    parameters: []
  overload: System.Console.ResetColor*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  id: SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetBufferSize(Int32,Int32)
  nameWithType: Console.SetBufferSize(Int32,Int32)
  fullName: System.Console.SetBufferSize(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将的高度和宽度的屏幕缓冲区设置为指定的值。"
  remarks: ''
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, SetBufferSize, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setbuff_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setbuff_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setbuff_1.cs)]"
  syntax:
    content: public static void SetBufferSize (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "缓冲区的宽度，以列为单位。"
    - id: height
      type: System.Int32
      description: "缓冲区的高度，以行为单位。"
  overload: System.Console.SetBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>height</code>或<code>width</code>小于或等于零。       -<code>height</code>或<code>width</code>大于或等于&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -or-       <code>width</code> is less than <xref:System.Console.WindowLeft*> + <xref:System.Console.WindowWidth*>.       -or-       <code>height</code> is less than <xref:System.Console.WindowTop*> + <xref:System.Console.WindowHeight*>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  id: SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetCursorPosition(Int32,Int32)
  nameWithType: Console.SetCursorPosition(Int32,Int32)
  fullName: System.Console.SetCursorPosition(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "设置光标的位置。"
  remarks: "使用 SetCursorPosition 方法指定控制台窗口中的下一步写入操作即将开始。 如果指定的光标的位置是在控制台窗口是当前可见区域之外，则窗口原点将自动更改以使光标可见。       光标自动移动到每次一个字符写入到控制台窗口的下一个字符位置。 如果光标位于控制台窗口的底部右侧的字符位置下, 一个写入操作将导致控制台窗口滚动，以使光标保持可见。 如果你想要而不会导致控制台窗口中，以向下滚动，请使用将字符写入底部右侧的字符位置<xref:System.Console.MoveBufferArea%2A>方法将移到该位置的字符。</xref:System.Console.MoveBufferArea%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.CursorTop%2A> properties, and the SetCursorPosition and <xref:System.Console.Clear%2A> methods. The example positions the cursor, which determines where the next write will occur, to draw a 5 character by 5 character rectangle using a combination of \"+\", \"&#124;\", and \"-\" strings. Note that the rectangle could be drawn with fewer steps using a combination of other strings.  \n  \n [!code-cs[console.cursorLTS#1](~/add/codesnippet/csharp/m-system.console.setcurs_1.cs)]\n [!code-cpp[console.cursorLTS#1](~/add/codesnippet/cpp/m-system.console.setcurs_1.cpp)]\n [!code-vb[console.cursorLTS#1](~/add/codesnippet/visualbasic/m-system.console.setcurs_1.vb)]"
  syntax:
    content: public static void SetCursorPosition (int left, int top);
    parameters:
    - id: left
      type: System.Int32
      description: "光标的列位置。 列是从左到右从 0 开始编号的。"
    - id: top
      type: System.Int32
      description: "光标的行位置。 从上到下，从 0 开始为行编号。"
  overload: System.Console.SetCursorPosition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>left</code>或<code>top</code>小于零。       -<code>left</code>大于或等于<xref:System.Console.BufferWidth*>。       -<code>top</code>大于或等于<xref:System.Console.BufferHeight*>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.SetError(System.IO.TextWriter)
  id: SetError(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(TextWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "集<xref:System.Console.Error*>属性设置为指定<xref:System.IO.TextWriter>对象。</xref:System.IO.TextWriter> </xref:System.Console.Error*>"
  remarks: "默认情况下，<xref:System.Console.Error%2A>属性设置为标准错误输出流。</xref:System.Console.Error%2A>       A<xref:System.IO.StreamWriter>封装<xref:System.IO.FileStream>可以用于将错误消息发送到一个文件。</xref:System.IO.FileStream> </xref:System.IO.StreamWriter>"
  example:
  - "The following example shows how to redirect the standard error stream to a file.  \n  \n [!code-vb[System.Console.SetError#1](~/add/codesnippet/visualbasic/m-system.console.seterro_1.vb)]\n [!code-cs[System.Console.SetError#1](~/add/codesnippet/csharp/m-system.console.seterro_1.cs)]\n [!code-cpp[System.Console.SetError#1](~/add/codesnippet/cpp/m-system.console.seterro_1.cpp)]"
  syntax:
    content: public static void SetError (System.IO.TextWriter newError);
    parameters:
    - id: newError
      type: System.IO.TextWriter
      description: "是的新的标准错误输出流。"
  overload: System.Console.SetError*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newError</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有所要求的权限。"
  platform:
  - net462
- uid: System.Console.SetIn(System.IO.TextReader)
  id: SetIn(System.IO.TextReader)
  parent: System.Console
  langs:
  - csharp
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(TextReader)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "集<xref:System.Console.In*>属性设置为指定<xref:System.IO.TextReader>对象。</xref:System.IO.TextReader> </xref:System.Console.In*>"
  remarks: "默认情况下，<xref:System.Console.In%2A>属性设置为标准输入流。</xref:System.Console.In%2A>       A<xref:System.IO.StreamReader>封装<xref:System.IO.FileStream>可用于接收来自文件的输入。</xref:System.IO.FileStream> </xref:System.IO.StreamReader>"
  example:
  - "The following example illustrates the use of the SetIn method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setin-s_1.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setin-s_1.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setin-s_1.cs)]"
  syntax:
    content: public static void SetIn (System.IO.TextReader newIn);
    parameters:
    - id: newIn
      type: System.IO.TextReader
      description: "是新的标准输入流。"
  overload: System.Console.SetIn*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newIn</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有所要求的权限。"
  platform:
  - net462
- uid: System.Console.SetOut(System.IO.TextWriter)
  id: SetOut(System.IO.TextWriter)
  parent: System.Console
  langs:
  - csharp
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(TextWriter)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "集<xref:System.Console.Out*>属性设置为指定<xref:System.IO.TextWriter>对象。</xref:System.IO.TextWriter> </xref:System.Console.Out*>"
  remarks: "默认情况下，<xref:System.Console.Out%2A>属性设置为标准输出流。</xref:System.Console.Out%2A>       A<xref:System.IO.StreamWriter>封装<xref:System.IO.FileStream>可以用于将输出发送到一个文件。</xref:System.IO.FileStream> </xref:System.IO.StreamWriter> 例如︰ [!code-cs [System.Console.SetOut#1](~/add/codesnippet/csharp/m-system.console.setout-_1.cs)][!code-vb[System.Console.SetOut#1](~/add/codesnippet/visualbasic/m-system.console.setout-_1.vb)][!code-cpp[System.Console.SetOut#1    ](~/add/codesnippet/cpp/m-system.console.setout-_1.cpp)]"
  example:
  - "The following example illustrates the use of the SetOut method. It replaces four consecutive space characters in a string with a tab character. To run it, you must supply two command line arguments. The first is the name of an existing text file to redirect the standard input stream to. The second is the name of a file to redirect the standard output stream to. This file need not exist. If it does, its contents will be overwritten.  \n  \n [!code-cpp[System.Console-INSERTTABS#1](~/add/codesnippet/cpp/m-system.console.setout-_2.cpp)]\n [!code-vb[System.Console-INSERTTABS#1](~/add/codesnippet/visualbasic/m-system.console.setout-_2.vb)]\n [!code-cs[System.Console-INSERTTABS#1](~/add/codesnippet/csharp/m-system.console.setout-_2.cs)]"
  syntax:
    content: public static void SetOut (System.IO.TextWriter newOut);
    parameters:
    - id: newOut
      type: System.IO.TextWriter
      description: "是的新的标准输出流。"
  overload: System.Console.SetOut*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>newOut</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有所要求的权限。"
  platform:
  - net462
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  id: SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetWindowPosition(Int32,Int32)
  nameWithType: Console.SetWindowPosition(Int32,Int32)
  fullName: System.Console.SetWindowPosition(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "设置控制台窗口相对于屏幕缓冲区的位置。"
  remarks: "操作系统窗口显示控制台窗口中，并控制台窗口会显示屏幕缓冲区的一部分。 SetWindowPosition 方法影响控制台窗口相对于屏幕缓冲区的位置，但不会影响相对于桌面操作系统窗口的位置。       控制台和操作系统 windows 通常不会影响每个其他。 但是，如果屏幕缓冲区无法显示在控制台窗口的当前边界，操作系统会自动将滚动条到操作系统窗口。 在这种情况下，移动操作系统窗口滚动条影响的位置的控制台窗口中，并将控制台窗口移动具有 SetWindowPosition 方法影响操作系统窗口滚动条的位置。"
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, <xref:System.Console.WindowTop%2A>, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the SetWindowPosition, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/m-system.console.setwind_0_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/m-system.console.setwind_0_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/m-system.console.setwind_0_1.cs)]"
  syntax:
    content: public static void SetWindowPosition (int left, int top);
    parameters:
    - id: left
      type: System.Int32
      description: "控制台窗口左上角的列位置。"
    - id: top
      type: System.Int32
      description: "控制台窗口左上角的行位置。"
  overload: System.Console.SetWindowPosition*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>left</code>或<code>top</code>小于零。       - <code>left</code>  + <xref:System.Console.WindowWidth*>大于<xref:System.Console.BufferWidth*>。       - <code>top</code>  + <xref:System.Console.WindowHeight*>大于<xref:System.Console.BufferHeight*>。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  id: SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: SetWindowSize(Int32,Int32)
  nameWithType: Console.SetWindowSize(Int32,Int32)
  fullName: System.Console.SetWindowSize(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "设置为指定值的高度和宽度的控制台窗口。"
  remarks: ''
  example:
  - "This example demonstrates the SetWindowSize method, and the <xref:System.Console.WindowWidth%2A> and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key to be pressed. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed, the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/m-system.console.setwind_1_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/m-system.console.setwind_1_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/m-system.console.setwind_1_1.cs)]"
  syntax:
    content: public static void SetWindowSize (int width, int height);
    parameters:
    - id: width
      type: System.Int32
      description: "控制台窗口的宽度，以列为单位。"
    - id: height
      type: System.Int32
      description: "控制台窗口的高度，以行为单位。"
  overload: System.Console.SetWindowSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>width</code>或<code>height</code>小于或等于零。       -<code>width</code>加上<xref:System.Console.WindowLeft*>或<code>height</code>加上<xref:System.Console.WindowTop*>大于或等于&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -<code>width</code>或<code>height</code>大于最大可能的窗口宽度或当前屏幕分辨率和控制台字体的高度。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有权限执行此操作。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Title
  id: Title
  parent: System.Console
  langs:
  - csharp
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置要在控制台标题栏中显示的标题。"
  remarks: ''
  example:
  - "This example demonstrates the Title property. The example displays the current title of the operating system window, waits for a key press, then displays a new title.  \n  \n [!code-cs[console.title#1](~/add/codesnippet/csharp/p-system.console.title_1.cs)]\n [!code-cpp[console.title#1](~/add/codesnippet/cpp/p-system.console.title_1.cpp)]\n [!code-vb[console.title#1](~/add/codesnippet/visualbasic/p-system.console.title_1.vb)]"
  syntax:
    content: public static string Title { get; set; }
    return:
      type: System.String
      description: "要在控制台的标题栏中显示的字符串。 标题字符串的最大长度是 24500 个字符。"
  overload: System.Console.Title*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在 get 操作中，检索到的标题的长度超过 24500 个字符。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中，指定的标题的长度超过 24500 个字符。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "在集运算中，指定的标题是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.TreatControlCAsInput
  id: TreatControlCAsInput
  parent: System.Console
  langs:
  - csharp
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置一个值，该值指示是否的组合<xref href=&quot;System.ConsoleModifiers&quot;></xref>修改键和<xref href=&quot;System.ConsoleKey&quot;> </xref> console 键 (Ctrl + C) 视为普通输入，还是视为由操作系统处理的中断。"
  remarks: "如果 TreatControlCAsInput 属性的值是`false`并按下 Ctrl + C，按下的密钥不存储输入缓冲区中，并且操作系统终止当前正在执行的进程。 此为默认值。      1> [!CAUTION]&1;> 谨慎地使用此属性，因为将其设置为`true`具有如此显著的影响。 大多数用户期望 Ctrl + C 终止一个控制台应用程序。 如果禁用 Ctrl + C 的效果，用户必须记得使用 Ctrl + Break 终止该应用程序，这是不太常见的键组合。"
  example:
  - "The following example demonstrates the TreatControlCAsInput property.  \n  \n [!code-cs[console.readkey1#1](~/add/codesnippet/csharp/p-system.console.treatco_1.cs)]\n [!code-cpp[console.readkey1#1](~/add/codesnippet/cpp/p-system.console.treatco_1.cpp)]\n [!code-vb[console.readkey1#1](~/add/codesnippet/visualbasic/p-system.console.treatco_1.vb)]"
  syntax:
    content: public static bool TreatControlCAsInput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果将 Ctrl + C 视为普通输入;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.TreatControlCAsInput*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "无法获取或设置控制台输入缓冲区的输入的模式。"
  platform:
  - net462
- uid: System.Console.WindowHeight
  id: WindowHeight
  parent: System.Console
  langs:
  - csharp
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置控制台窗口区域的高度。"
  remarks: "试图设置 WindowHeight 属性的值在输出重定向时将引发或者<xref:System.ArgumentOutOfRangeException>或<xref:System.IO.IOException>异常。</xref:System.IO.IOException> </xref:System.ArgumentOutOfRangeException> 若要防止出现异常，可以设置此属性仅当值<xref:System.Console.IsOutputRedirected%2A>属性返回`false`。</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the <xref:System.Console.WindowWidth%2A> and WindowHeight properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windowh_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windowh_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windowh_1.cs)]"
  syntax:
    content: public static int WindowHeight { get; set; }
    return:
      type: System.Int32
      description: "控制台窗口的高度，以行为单位。"
  overload: System.Console.WindowHeight*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<> *1> 属性或 WindowHeight 属性的值是小于或等于 0。      -WindowHeight 属性的值加上的值<> *1> 属性为大于或等于&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。       -的值<xref:System.Console.WindowWidth*>属性或 WindowHeight 属性的值是大于最大可能的窗口宽度或当前屏幕分辨率和控制台字体的高度。</xref:System.Console.WindowWidth*>"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "错误读取或写入信息。"
  platform:
  - net462
- uid: System.Console.WindowLeft
  id: WindowLeft
  parent: System.Console
  langs:
  - csharp
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置控制台窗口区域相对于屏幕缓冲区的最左边的位置。"
  remarks: "控制台到更大的矩形缓冲区区域表示的矩形窗口。 窗口和缓冲区垂直测量了通过它们的行数和水平方向的列数。 通过定义缓冲区的尺寸<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>属性。</xref:System.Console.BufferWidth%2A> </xref:System.Console.BufferHeight%2A> 通过定义控制台区域的维度<xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>属性。</xref:System.Console.WindowWidth%2A> </xref:System.Console.WindowHeight%2A> WindowLeft 属性确定缓冲区的列显示在控制台窗口的第一列。 WindowLeft 属性的值可以介于 0 到<xref:System.Console.BufferWidth%2A>- <xref:System.Console.WindowWidth%2A>.</xref:System.Console.WindowWidth%2A> </xref:System.Console.BufferWidth%2A> 尝试将其设置为该范围以外的值将引发<xref:System.ArgumentOutOfRangeException>.</xref:System.ArgumentOutOfRangeException>       当首次打开控制台窗口时，WindowLeft 属性的默认值为零，这表示控制台所示的第一列对应于在缓冲区中的第一列 （位置零上的列）。 控制台窗口和缓冲区的默认宽度为 80 的列。 这意味着 WindowLeft 属性在控制台窗口变窄或缓冲区变宽，才可以进行修改。       请注意，是否缓冲区的宽度超过控制台窗口的宽度，WindowLeft 属性的值自动调整当用户使用水平滚动条来到缓冲区定义窗口的关系。       正在尝试设置 WindowLeft 属性的值，输出时重定向的引发<xref:System.IO.IOException>异常。</xref:System.IO.IOException> 若要避免此异常，可以设置此属性仅当值<xref:System.Console.IsOutputRedirected%2A>属性返回`false`。</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "The following example opens an 80-column console window and defines a buffer area that is 120 columns wide. It displays information on window and buffer size, and then waits for the user to press either the LEFT ARROW key or the RIGHT ARROW key. In the former case, it decrements the value of the WindowLeft property by one if the result is a legal value. In the latter case, it increases the value of the WindowLeft property by one if the result would be legal. Note that the example does not have to handle an <xref:System.ArgumentOutOfRangeException>, because it checks that the value to be assigned to the WindowLeft property is not negative and does not cause the sum of the WindowLeft and <xref:System.Console.WindowWidth%2A> properties to exceed the <xref:System.Console.BufferWidth%2A> property value.  \n  \n [!code-vb[System.Console.WindowLeft#1](~/add/codesnippet/visualbasic/p-system.console.windowl_1.vb)]\n [!code-cs[System.Console.WindowLeft#1](~/add/codesnippet/csharp/p-system.console.windowl_1.cs)]\n [!code-cpp[System.Console.WindowLeft#1](~/add/codesnippet/cpp/p-system.console.windowl_1.cpp)]"
  syntax:
    content: public static int WindowLeft { get; set; }
    return:
      type: System.Int32
      description: "最左侧的控制台窗口的位置，以列为单位。"
  overload: System.Console.WindowLeft*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中，要分配的值小于零。       -或-赋值之后，WindowLeft 加号<> *1> 将超过<> *1>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "错误读取或写入信息。"
  platform:
  - net462
- uid: System.Console.WindowTop
  id: WindowTop
  parent: System.Console
  langs:
  - csharp
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置控制台窗口区域相对于屏幕缓冲区的最顶部位置。"
  remarks: "控制台到更大的矩形缓冲区区域表示的矩形窗口。 窗口和缓冲区垂直测量了通过它们的行数和水平方向的列数。 通过定义缓冲区的尺寸<xref:System.Console.BufferHeight%2A>和<xref:System.Console.BufferWidth%2A>属性。</xref:System.Console.BufferWidth%2A> </xref:System.Console.BufferHeight%2A> 通过定义控制台区域的维度<xref:System.Console.WindowHeight%2A>和<xref:System.Console.WindowWidth%2A>属性。</xref:System.Console.WindowWidth%2A> </xref:System.Console.WindowHeight%2A> WindowTop 属性确定缓冲区的行显示在控制台窗口的第一列。 WindowTop 属性的值可以介于 0 到<xref:System.Console.BufferHeight%2A>- <xref:System.Console.WindowHeight%2A>.</xref:System.Console.WindowHeight%2A> </xref:System.Console.BufferHeight%2A> 尝试将其设置为该范围以外的值将引发<xref:System.ArgumentOutOfRangeException>.</xref:System.ArgumentOutOfRangeException>       正在尝试设置 WindowTop 属性的值，输出时重定向的引发<xref:System.IO.IOException>异常。</xref:System.IO.IOException> 若要避免此异常，可以设置此属性仅当值<xref:System.Console.IsOutputRedirected%2A>属性返回`false`。</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "The following example demonstrates the <xref:System.Console.WindowLeft%2A>, WindowTop, <xref:System.Console.WindowWidth%2A>, <xref:System.Console.WindowHeight%2A>, <xref:System.Console.BufferWidth%2A>, <xref:System.Console.BufferHeight%2A>, and <xref:System.Console.CursorVisible%2A> properties; and the <xref:System.Console.SetWindowPosition%2A>, <xref:System.Console.SetBufferSize%2A>, and <xref:System.Console.ReadKey%2A> methods. The example draws a grid pattern in the screen buffer based on the screen buffer width. Then the example moves the console window in response to which of the UP ARROW, DOWN ARROW, LEFT ARROW, or RIGHT ARROW console keys is pressed. The grid pattern helps you see the movement of the console window relative to the screen buffer.  \n  \n [!code-cpp[console.windowLT#1](~/add/codesnippet/cpp/p-system.console.windowtop_1.cpp)]\n [!code-vb[console.windowLT#1](~/add/codesnippet/visualbasic/p-system.console.windowtop_1.vb)]\n [!code-cs[console.windowLT#1](~/add/codesnippet/csharp/p-system.console.windowtop_1.cs)]"
  syntax:
    content: public static int WindowTop { get; set; }
    return:
      type: System.Int32
      description: "最顶部的控制台窗口的位置，以行为单位。"
  overload: System.Console.WindowTop*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中，要分配的值小于零。       -或-赋值之后，WindowTop 加号<> *1> 将超过<> *1>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "错误读取或写入信息。"
  platform:
  - net462
- uid: System.Console.WindowWidth
  id: WindowWidth
  parent: System.Console
  langs:
  - csharp
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取或设置控制台窗口的宽度。"
  remarks: "试图设置 WindowWidth 属性的值在输出重定向时将引发或者<xref:System.ArgumentOutOfRangeException>或<xref:System.IO.IOException>异常。</xref:System.IO.IOException> </xref:System.ArgumentOutOfRangeException> 若要防止出现异常，可以设置此属性仅当值<xref:System.Console.IsOutputRedirected%2A>属性返回`false`。</xref:System.Console.IsOutputRedirected%2A>"
  example:
  - "This example demonstrates the <xref:System.Console.SetWindowSize%2A> method, and the WindowWidth and <xref:System.Console.WindowHeight%2A> properties. You must run the example to see the full effect of changing the console window size.  \n  \n The example reports the dimensions of a console window set to 85 columns and 43 rows, then waits for a key press. When any key is pressed, the dimensions of the console window are halved, the new dimensions are reported, and the example waits for another key press. Finally, when any key is pressed the console window is restored to its original dimensions and the example terminates.  \n  \n [!code-cpp[console.setwindowsize#1](~/add/codesnippet/cpp/p-system.console.windoww_1.cpp)]\n [!code-vb[console.setwindowsize#1](~/add/codesnippet/visualbasic/p-system.console.windoww_1.vb)]\n [!code-cs[console.setwindowsize#1](~/add/codesnippet/csharp/p-system.console.windoww_1.cs)]"
  syntax:
    content: public static int WindowWidth { get; set; }
    return:
      type: System.Int32
      description: "控制台窗口的宽度，以列为单位。"
  overload: System.Console.WindowWidth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "WindowWidth 属性或值的值<> *1> 属性小于或等于 0。      -的值<> *1> 属性和值<> *1> 属性为大于或等于&lt;xref:System.Int16.MaxValue?displayProperty=fullName&gt;。      -WindowWidth 属性的值或值<> *1> 属性值大于最大可能的窗口宽度或当前屏幕分辨率和控制台字体的高度。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "错误读取或写入信息。"
  platform:
  - net462
- uid: System.Console.Write(System.Boolean)
  id: Write(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的布尔值的文本表示写入标准输出流。"
  remarks: "文本表示形式`value`通过调用<xref:System.Boolean.ToString%2A?displayProperty=fullName>，该操作会输出<xref:System.Boolean.TrueString?displayProperty=fullName>或<xref:System.Boolean.FalseString?displayProperty=fullName>。</xref:System.Boolean.FalseString?displayProperty=fullName></xref:System.Boolean.TrueString?displayProperty=fullName></xref:System.Boolean.ToString%2A?displayProperty=fullName>生成"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_8_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_8_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_8_1.cpp)]"
  syntax:
    content: public static void Write (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.Char)
  id: Write(System.Char)
  parent: System.Console
  langs:
  - csharp
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的 Unicode 字符值写入标准输出流。"
  remarks: ''
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_9_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_9_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_9_1.cpp)]"
  syntax:
    content: public static void Write (char value);
    parameters:
    - id: value
      type: System.Char
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.Char[])
  id: Write(System.Char[])
  parent: System.Console
  langs:
  - csharp
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的 Unicode 字符数组写入标准输出流。"
  syntax:
    content: public static void Write (char[] buffer);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 字符数组。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.Decimal)
  id: Write(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定<xref:System.Decimal>值写入标准输出流。</xref:System.Decimal>"
  remarks: "文本表示形式`value`通过调用<xref:System.Decimal.ToString%2A?displayProperty=fullName>.</xref:System.Decimal.ToString%2A?displayProperty=fullName>生成"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_12_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_12_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_12_1.cpp)]"
  syntax:
    content: public static void Write (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.Double)
  id: Write(System.Double)
  parent: System.Console
  langs:
  - csharp
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的双精度浮点值的文本表示写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.Double.ToString%2A?displayProperty=fullName>方法。</xref:System.Double.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_6_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_6_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_6_1.cpp)]"
  syntax:
    content: public static void Write (double value);
    parameters:
    - id: value
      type: System.Double
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.Int32)
  id: Write(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的 32 位有符号的整数值的文本表示写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.Int32.ToString%2A?displayProperty=fullName>方法。</xref:System.Int32.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_10_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_10_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_10_1.cpp)]"
  syntax:
    content: public static void Write (int value);
    parameters:
    - id: value
      type: System.Int32
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.Int64)
  id: Write(System.Int64)
  parent: System.Console
  langs:
  - csharp
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的 64 位有符号的整数值的文本表示写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.Int64.ToString%2A?displayProperty=fullName>方法。</xref:System.Int64.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_0_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_0_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_0_1.cpp)]"
  syntax:
    content: public static void Write (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.Object)
  id: Write(System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的对象的文本表示写入标准输出流。"
  remarks: "如果`value`是`null`，则不写入，并且会引发任何异常。 否则为`ToString`方法`value`调用以生成其字符串表示形式中，并且生成的字符串会写入到标准输出流。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_3_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_3_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_3_1.cpp)]"
  syntax:
    content: public static void Write (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要写入的值或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.Single)
  id: Write(System.Single)
  parent: System.Console
  langs:
  - csharp
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的单精度浮点值的文本表示写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.Single.ToString%2A?displayProperty=fullName>方法。</xref:System.Single.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_1_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_1_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_1_1.cpp)]"
  syntax:
    content: public static void Write (float value);
    parameters:
    - id: value
      type: System.Single
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.String)
  id: Write(System.String)
  parent: System.Console
  langs:
  - csharp
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的字符串值写入标准输出流。"
  remarks: "如果值为`null`，则不写入到标准输出流。"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_5_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_5_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_5_1.cpp)]"
  syntax:
    content: public static void Write (string value);
    parameters:
    - id: value
      type: System.String
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.UInt32)
  id: Write(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的 32 位无符号的整数值的文本表示写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.UInt32.ToString%2A?displayProperty=fullName>方法。</xref:System.UInt32.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_7_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_7_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_7_1.cpp)]"
  syntax:
    content: public static void Write (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.UInt64)
  id: Write(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的 64 位无符号的整数值的文本表示写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.UInt64.ToString%2A?displayProperty=fullName>方法。</xref:System.UInt64.ToString%2A?displayProperty=fullName>"
  example:
  - "The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_4_1.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_4_1.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_4_1.cpp)]"
  syntax:
    content: public static void Write (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: "要写入的值。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object)
  id: Write(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object)
  nameWithType: Console.Write(String,Object)
  fullName: System.Console.Write(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的对象的文本表示写入标准输出流使用指定的格式信息。"
  remarks: "此方法使用[复合格式设置功能](~/add/includes/ajax-current-ext-md.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。       `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。       格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`、 它指定一个强制索引、 可选长度和对齐方式的带格式的文本，并设置控制如何对象的值的相应的格式说明符字符的一个可选的字符串的格式。       .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。      -有关详细信息如方法支持复合格式设置功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关格式设置的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_2_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_2_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_1.vb)]  \n  \n The following example illustrates the use of the Write method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_2_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_2_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_2_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg0
      type: System.Object
      description: "要写入使用对象`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object[])
  id: Write(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object[])
  nameWithType: Console.Write(String,Object[])
  fullName: System.Console.Write(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的对象数组的文本表示写入标准输出流使用指定的格式信息。"
  remarks: "此方法使用[复合格式设置功能](~/add/includes/ajax-current-ext-md.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。       `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。       格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`、 它指定一个强制索引、 可选长度和对齐方式的带格式的文本，并设置控制如何对象的值的相应的格式说明符字符的一个可选的字符串的格式。       .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。      -有关详细信息如方法支持复合格式设置功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关格式设置的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。       `arg`参数是一个参数数组。 作为数组或五个或多个项的列表，则可以将自变量传递给方法。 这些示例说明了两种形式的方法调用。"
  example:
  - "The following example defines a `Person` class with a number of properties that provide information about a person. Its `GetDescription` method returns an array that contains all of the property values except one. The example then uses the array returned by the  `GetDescription` method  to display the values of the Person object.  \n  \n [!code-cs[System.Console.Write#1](~/add/codesnippet/csharp/m-system.console.write-s_13_1.cs)]\n [!code-vb[System.Console.Write#1](~/add/codesnippet/visualbasic/m-system.console.write-s_13_1.vb)]  \n  \n Note that the example calls the Write method rather than the [WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=False&autoUpgrade=False) method because it attempts to display the value of the `Person.Remarks` property on the same line. To do this, it examines the value of the <xref:System.Console.CursorLeft%2A> and <xref:System.Console.WindowWidth%2A> properties to determine whether there is enough space for the remark to fit.  If there is, it displays the line. If not, it writes a line, indents three spaces, and displays the remark.  \n  \n The following example is identical to the first, except that it supplies a five-item list as the `arg` argument instead of a parameter array.  \n  \n [!code-vb[System.Console.Write#2](~/add/codesnippet/visualbasic/m-system.console.write-s_13_2.vb)]\n [!code-cs[System.Console.Write#2](~/add/codesnippet/csharp/m-system.console.write-s_13_2.cs)]"
  syntax:
    content: public static void Write (string format, object[] arg);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg
      type: System.Object[]
      description: "若要编写使用的对象的数组`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>or <code>arg</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: Write(Char[],Int32,Int32)
  nameWithType: Console.Write(Char[],Int32,Int32)
  fullName: System.Console.Write(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的 Unicode 字符子数组写入标准输出流。"
  remarks: "此方法将写入`count`字符位置开始`index`的`buffer`写入标准输出流。"
  syntax:
    content: public static void Write (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 字符的数组。"
    - id: index
      type: System.Int32
      description: "中的起始位置`buffer`。"
    - id: count
      type: System.Int32
      description: "要写入的字符数。"
  overload: System.Console.Write*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>或<code>count</code>小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>加上<code>count</code>指定不在两者之间的位置<code>buffer</code>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object)
  nameWithType: Console.Write(String,Object,Object)
  fullName: System.Console.Write(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的对象的文本表示写入标准输出流使用指定的格式信息。"
  remarks: "此方法使用[复合格式设置功能](~/add/includes/ajax-current-ext-md.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。       `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。       格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`、 它指定一个强制索引、 可选长度和对齐方式的带格式的文本，并设置控制如何对象的值的相应的格式说明符字符的一个可选的字符串的格式。       .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。      -有关详细信息如方法支持复合格式设置功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关格式设置的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_14_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_14_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_1.vb)]  \n  \n The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_14_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_14_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_14_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg0
      type: System.Object
      description: "要写入使用的第一个对象`format`。"
    - id: arg1
      type: System.Object
      description: "要写入使用的第二个对象`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的对象的文本表示写入标准输出流使用指定的格式信息。"
  remarks: "此方法使用[复合格式设置功能](~/add/includes/ajax-current-ext-md.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。       `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。       格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`、 它指定一个强制索引、 可选长度和对齐方式的带格式的文本，并设置控制如何对象的值的相应的格式说明符字符的一个可选的字符串的格式。       .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。      -有关详细信息如方法支持复合格式设置功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关格式设置的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses the `WriteLine` method to demonstrate the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.write-s_11_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.write-s_11_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_1.vb)]  \n  \n The following example illustrates the use of the `Write` method.  \n  \n [!code-vb[System.Console-REFORMAT#1](~/add/codesnippet/visualbasic/m-system.console.write-s_11_2.vb)]\n [!code-cs[System.Console-REFORMAT#1](~/add/codesnippet/csharp/m-system.console.write-s_11_2.cs)]\n [!code-cpp[System.Console-REFORMAT#1](~/add/codesnippet/cpp/m-system.console.write-s_11_2.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg0
      type: System.Object
      description: "要写入使用的第一个对象`format`。"
    - id: arg1
      type: System.Object
      description: "要写入使用的第二个对象`format`。"
    - id: arg2
      type: System.Object
      description: "要写入使用的第三个对象`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  id: Write(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: Write(String,Object,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的对象和可变长度参数列表的文本表示写入标准输出流使用指定的格式信息。"
  remarks: "> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.Write(String, Object\\[\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.Write(String, Object\\[\\])](assetId:///M:System.Console.Write(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \n  \n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \n  \n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md)."
  example:
  - "The following example illustrates the use of variable parameters with the Write method. The method is called with a composite format string and five format items.  \n  \n [!code-cpp[System.Console.Write#3](~/add/codesnippet/cpp/04cf3884-a7cc-4915-bdb2-_1.cpp)]"
  syntax:
    content: public static void Write (string format, object arg0, object arg1, object arg2, object arg3);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg0
      type: System.Object
      description: "要写入使用的第一个对象`format`。"
    - id: arg1
      type: System.Object
      description: "要写入使用的第二个对象`format`。"
    - id: arg2
      type: System.Object
      description: "要写入使用的第三个对象`format`。"
    - id: arg3
      type: System.Object
      description: "要写入使用的第四个对象`format`。"
  overload: System.Console.Write*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.WriteLine
  id: WriteLine
  parent: System.Console
  langs:
  - csharp
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将当前行终止符写入标准输出流。"
  remarks: "默认的行终止符是其值是回车符后跟换行符的字符串 (&quot;\\r&quot;在 C# 中，或`vbCrLf`在 Visual Basic 中)。 你可以通过设置更改的行终止符<xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName>属性<xref:System.Console.Out%2A>到另一个字符串的属性。</xref:System.Console.Out%2A> </xref:System.IO.TextWriter.NewLine%2A?displayProperty=fullName> 示例进行了说明。"
  example:
  - "The example changes the line terminator from its default value of \"\\r\\n\" or `vbCrLf` to \"\\r\\n\\r\\n\" or `vbCrLf` + `vbCrLf`. It then calls the WriteLine and <xref:System.Console.WriteLine%28System.String%29> methods to display output to the console.  \n  \n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeline_1.cpp)]\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeline_1.cs)]\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeline_1.vb)]"
  syntax:
    content: public static void WriteLine ();
    parameters: []
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Boolean)
  id: WriteLine(System.Boolean)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的布尔值后, 跟当前行终止符，写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.Boolean.ToString%2A?displayProperty=fullName>方法。</xref:System.Boolean.ToString%2A?displayProperty=fullName>       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example generates ten random integers and uses the WriteLine method to indicate whether they are even.  \n  \n [!code-cpp[System.Console.WriteLine#4](~/add/codesnippet/cpp/m-system.console.writeli_5_1.cpp)]\n [!code-cs[System.Console.WriteLine#4](~/add/codesnippet/csharp/m-system.console.writeli_5_1.cs)]\n [!code-vb[System.Console.WriteLine#4](~/add/codesnippet/visualbasic/m-system.console.writeli_5_1.vb)]"
  syntax:
    content: public static void WriteLine (bool value);
    parameters:
    - id: value
      type: System.Boolean
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char)
  id: WriteLine(System.Char)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将指定的 Unicode 字符后, 跟当前行终止符写入标准输出流的值。"
  remarks: "有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the WriteLine method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_13_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_13_1.vb)]"
  syntax:
    content: public static void WriteLine (char value);
    parameters:
    - id: value
      type: System.Char
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char[])
  id: WriteLine(System.Char[])
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(Char[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入指定的 Unicode 字符后, 跟当前行终止符，写入标准输出流数组。"
  remarks: "有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  syntax:
    content: public static void WriteLine (char[] buffer);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 字符数组。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Decimal)
  id: WriteLine(System.Decimal)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(Decimal)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定<xref:System.Decimal>值后, 跟当前行终止符，写入标准输出流。</xref:System.Decimal>"
  remarks: "文本表示形式`value`由调用<xref:System.Decimal.ToString%2A?displayProperty=fullName>方法。</xref:System.Decimal.ToString%2A?displayProperty=fullName>       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_3_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_3_1.vb)]"
  syntax:
    content: public static void WriteLine (decimal value);
    parameters:
    - id: value
      type: System.Decimal
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Double)
  id: WriteLine(System.Double)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(Double)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式跟当前行终止符，写入标准输出流的指定双精度浮点值。"
  remarks: "文本表示形式`value`由调用<xref:System.Double.ToString%2A?displayProperty=fullName>方法。</xref:System.Double.ToString%2A?displayProperty=fullName>       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_2_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_2_1.vb)]"
  syntax:
    content: public static void WriteLine (double value);
    parameters:
    - id: value
      type: System.Double
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Int32)
  id: WriteLine(System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的 32 位有符号的整数值后, 跟当前行终止符，写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.Int32.ToString%2A?displayProperty=fullName>方法。</xref:System.Int32.ToString%2A?displayProperty=fullName>       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_1_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_1_1.vb)]"
  syntax:
    content: public static void WriteLine (int value);
    parameters:
    - id: value
      type: System.Int32
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Int64)
  id: WriteLine(System.Int64)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的 64 位有符号的整数值后, 跟当前行终止符，写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.Int64.ToString%2A?displayProperty=fullName>方法。</xref:System.Int64.ToString%2A?displayProperty=fullName>       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_10_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_10_1.vb)]"
  syntax:
    content: public static void WriteLine (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Object)
  id: WriteLine(System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定对象后, 跟当前行终止符，写入标准输出流。"
  remarks: "如果`value`是`null`，写入仅行终止符。 否则为`ToString`方法`value`调用以生成其字符串表示形式中，并且生成的字符串会写入到标准输出流。       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example uses the WriteLine method to display each value in an object array to the console.  \n  \n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\n [!code-cpp[System.Console.WriteLine#3](~/add/codesnippet/cpp/m-system.console.writeli_6_1.cpp)]\n [!code-cs[System.Console.WriteLine#3](~/add/codesnippet/csharp/m-system.console.writeli_6_1.cs)]\n [!code-vb[System.Console.WriteLine#3](~/add/codesnippet/visualbasic/m-system.console.writeli_6_1.vb)]"
  syntax:
    content: public static void WriteLine (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Single)
  id: WriteLine(System.Single)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(Single)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式跟当前行终止符，写入标准输出流的指定单精度浮点值。"
  remarks: "文本表示形式`value`由调用<xref:System.Single.ToString%2A?displayProperty=fullName>方法。</xref:System.Single.ToString%2A?displayProperty=fullName>       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_4_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_4_1.vb)]"
  syntax:
    content: public static void WriteLine (float value);
    parameters:
    - id: value
      type: System.Single
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String)
  id: WriteLine(System.String)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入指定的字符串值后, 跟当前行终止符，写入标准输出流。"
  remarks: "如果值为`null`，只将行终止符写入标准输出流。       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine>方法。</xref:System.Console.WriteLine>"
  example:
  - "The example changes the line terminator from its default value of \"\\r\\n\" or `vbCrLf` to \"\\r\\n\\r\\n\" or `vbCrLf` + `vbCrLf`. It then calls the <xref:System.Console.WriteLine> and WriteLine methods to display output to the console.  \n  \n [!code-cpp[System.Console.WriteLine#2](~/add/codesnippet/cpp/m-system.console.writeli_0_1.cpp)]\n [!code-cs[System.Console.WriteLine#2](~/add/codesnippet/csharp/m-system.console.writeli_0_1.cs)]\n [!code-vb[System.Console.WriteLine#2](~/add/codesnippet/visualbasic/m-system.console.writeli_0_1.vb)]"
  syntax:
    content: public static void WriteLine (string value);
    parameters:
    - id: value
      type: System.String
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.UInt32)
  id: WriteLine(System.UInt32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(UInt32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的 32 位无符号的整数值后, 跟当前行终止符，写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.UInt32.ToString%2A?displayProperty=fullName>方法。</xref:System.UInt32.ToString%2A?displayProperty=fullName>       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_8_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_8_1.vb)]"
  syntax:
    content: public static void WriteLine (uint value);
    parameters:
    - id: value
      type: System.UInt32
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.UInt64)
  id: WriteLine(System.UInt64)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(UInt64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的 64 位无符号的整数值后, 跟当前行终止符，写入标准输出流。"
  remarks: "文本表示形式`value`由调用<xref:System.UInt64.ToString%2A?displayProperty=fullName>方法。</xref:System.UInt64.ToString%2A?displayProperty=fullName>       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_12_1.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_12_1.vb)]"
  syntax:
    content: public static void WriteLine (ulong value);
    parameters:
    - id: value
      type: System.UInt64
      description: "要写入的值。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object)
  id: WriteLine(System.String,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object)
  nameWithType: Console.WriteLine(String,Object)
  fullName: System.Console.WriteLine(String,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定对象后, 跟当前行终止符，到使用指定的格式信息的标准输出流。"
  remarks: "此方法使用[复合格式设置功能](~/add/includes/ajax-current-ext-md.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。       `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。       格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`、 它指定一个强制索引、 可选长度和对齐方式的带格式的文本，并设置控制如何对象的值的相应的格式说明符字符的一个可选的字符串的格式。       .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。      -有关详细信息如方法支持复合格式设置功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关格式设置的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example calls the WriteLine method to display five randomly generated <xref:System.Boolean> values.  \n  \n [!code-vb[System.Console.WriteLine#6](~/add/codesnippet/visualbasic/m-system.console.writeli_9_1.vb)]\n [!code-cs[System.Console.WriteLine#6](~/add/codesnippet/csharp/m-system.console.writeli_9_1.cs)]  \n  \n The following example calls the WriteLine method to display the current date.   Note that the format item in the `format` argument uses the \"D\" [standard date and time format string](../Topic/Standard%20Date%20and%20Time%20Format%20Strings.md) to display the date in the long date format of the current culture.  \n  \n [!code-vb[System.Console.WriteLine#7](~/add/codesnippet/visualbasic/m-system.console.writeli_9_2.vb)]\n [!code-cs[System.Console.WriteLine#7](~/add/codesnippet/csharp/m-system.console.writeli_9_2.cs)]"
  syntax:
    content: public static void WriteLine (string format, object arg0);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg0
      type: System.Object
      description: "要写入使用对象`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object[])
  id: WriteLine(System.String,System.Object[])
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object[])
  nameWithType: Console.WriteLine(String,Object[])
  fullName: System.Console.WriteLine(String,Object[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的对象后, 跟当前行终止符，使用指定的格式信息的标准输出流到数组。"
  remarks: "此方法使用[复合格式设置功能](~/add/includes/ajax-current-ext-md.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。       `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。       格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`、 它指定一个强制索引、 可选长度和对齐方式的带格式的文本，并设置控制如何对象的值的相应的格式说明符字符的一个可选的字符串的格式。       .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。      -有关详细信息如方法支持复合格式设置功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关格式设置的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_11_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_11_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_11_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_11_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object[] arg);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg
      type: System.Object[]
      description: "若要编写使用的对象的数组`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>or <code>arg</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  id: WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(Char[],Int32,Int32)
  nameWithType: Console.WriteLine(Char[],Int32,Int32)
  fullName: System.Console.WriteLine(Char[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入指定的 Unicode 字符后, 跟当前行终止符，写入标准输出流的子数组。"
  remarks: "此方法将写入`count`字符位置开始`index`的`buffer`写入标准输出流。       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  syntax:
    content: public static void WriteLine (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "Unicode 字符的数组。"
    - id: index
      type: System.Int32
      description: "中的起始位置`buffer`。"
    - id: count
      type: System.Int32
      description: "要写入的字符数。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>或<code>count</code>小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>index</code>加上<code>count</code>指定不在两者之间的位置<code>buffer</code>。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的对象后, 跟当前行终止符，到使用指定的格式信息的标准输出流。"
  remarks: "此方法使用[复合格式设置功能](~/add/includes/ajax-current-ext-md.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。       `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。       格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`、 它指定一个强制索引、 可选长度和对齐方式的带格式的文本，并设置控制如何对象的值的相应的格式说明符字符的一个可选的字符串的格式。       .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。      -有关详细信息如方法支持复合格式设置功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关格式设置的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/m-system.console.writeli_7_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/m-system.console.writeli_7_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/m-system.console.writeli_7_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/m-system.console.writeli_7_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg0
      type: System.Object
      description: "要写入使用的第一个对象`format`。"
    - id: arg1
      type: System.Object
      description: "要写入使用的第二个对象`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的对象后, 跟当前行终止符，到使用指定的格式信息的标准输出流。"
  remarks: "此方法使用[复合格式设置功能](~/add/includes/ajax-current-ext-md.md)要将对象的值转换为它的文本表示形式，并将该表示形式嵌入在字符串中的.NET framework。 生成的字符串写入到输出流。       `format`参数由零个或多个文本混和组成，零个或多个索引占位符称为格式项，对应于此方法的参数列表中的对象。 格式设置的过程将每个格式项替换的文本表示形式相应对象的值。       格式项的语法是`{`*索引*[`,`*对齐*] [`:`*formatString*]`}`、 它指定一个强制索引、 可选长度和对齐方式的带格式的文本，并设置控制如何对象的值的相应的格式说明符字符的一个可选的字符串的格式。       .NET Framework 提供了广泛的格式设置支持，以下的格式设置主题中的更详细地介绍。      -有关详细信息如方法支持复合格式设置功能<xref:System.String.Format%2A>， <xref:System.Text.StringBuilder.AppendFormat%2A>，和的某些重载<xref:System.Console.WriteLine%2A>，请参阅[复合格式设置](../Topic/Composite%20Formatting.md)。</xref:System.Console.WriteLine%2A> </xref:System.Text.StringBuilder.AppendFormat%2A> </xref:System.String.Format%2A>      -有关数字格式说明符的详细信息，请参阅[标准数字格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义数字格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关日期和时间格式说明符的详细信息，请参阅[标准日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)和[自定义日期和时间格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关枚举格式说明符的详细信息，请参阅[枚举格式字符串](~/add/includes/ajax-current-ext-md.md)。      -有关格式设置的详细信息，请参阅[格式化类型](~/add/includes/ajax-current-ext-md.md)。       有关行终止符的详细信息，请参阅备注部分的<xref:System.Console.WriteLine%2A>不带参数的方法。</xref:System.Console.WriteLine%2A>"
  example:
  - "The following example demonstrates the standard formatting specifiers for numbers, dates, and enumerations.  \n  \n [!code-cpp[console.writelineFmt1#1](~/add/codesnippet/cpp/ecdde448-c375-4488-93b7-_1.cpp)]\n [!code-cs[console.writelineFmt1#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_1.cs)]\n [!code-vb[console.writelineFmt1#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_1.vb)]  \n  \n The following example is a tip calculator that calculates an 18% tip and uses the <xref:System.Console.WriteLine%2A> method to display the amount of the original charge, the amount of the tip, and the total amount. The example is a console application that requires the user to supply the amount of the original charge as a command-line parameter.  \n  \n [!code-cs[System.Console.WriteLine#1](~/add/codesnippet/csharp/ecdde448-c375-4488-93b7-_2.cs)]\n [!code-vb[System.Console.WriteLine#1](~/add/codesnippet/visualbasic/ecdde448-c375-4488-93b7-_2.vb)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1, object arg2);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg0
      type: System.Object
      description: "要写入使用的第一个对象`format`。"
    - id: arg1
      type: System.Object
      description: "要写入使用的第二个对象`format`。"
    - id: arg2
      type: System.Object
      description: "要写入使用的第三个对象`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  id: WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  langs:
  - csharp
  name: WriteLine(String,Object,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "写入的文本表示形式指定的对象和可变长度参数列表后, 跟当前行终止符，到使用指定的格式信息的标准输出流。"
  remarks: "> [!NOTE]\n>  This API is not CLS-compliant. The CLS-compliant alternative is [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False). The C# and Visual Basic compilers automatically resolve a call to this method as a call to [Console.WriteLine(String, Object\\[\\])](assetId:///M:System.Console.WriteLine(System.String,System.Object[])?qualifyHint=True&autoUpgrade=False).  \n  \n This method uses the [composite formatting feature](~/add/includes/ajax-current-ext-md.md) of the .NET Framework to convert the value of an object to its text representation and embed that representation in a string. The resulting string is written to the output stream.  \n  \n The `format` parameter consists of zero or more runs of text intermixed with zero or more indexed placeholders, called format items, that correspond to an object in the parameter list of this method. The formatting process replaces each format item with the text representation of the value of the corresponding object.  \n  \n The syntax of a format item is `{`*index*[`,`*alignment*][`:`*formatString*]`}`, which specifies a mandatory index, the optional length and alignment of the formatted text, and an optional string of format specifier characters that govern how the value of the corresponding object is formatted.  \n  \n The .NET Framework provides extensive formatting support, which is described in greater detail in the following formatting topics.  \n  \n-   For more information about the composite formatting feature supported by methods such as <xref:System.String.Format%2A>, <xref:System.Text.StringBuilder.AppendFormat%2A>, and some overloads of <xref:System.Console.WriteLine%2A>, see [Composite Formatting](../Topic/Composite%20Formatting.md).  \n  \n-   For more information about numeric format specifiers, see [Standard Numeric Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Numeric Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about date and time format specifiers, see [Standard Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md) and [Custom Date and Time Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about enumeration format specifiers, see [Enumeration Format Strings](~/add/includes/ajax-current-ext-md.md).  \n  \n-   For more information about formatting, see [Formatting Types](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about the line terminator, see the Remarks section of the <xref:System.Console.WriteLine%2A> method that takes no parameters."
  example:
  - "The following example illustrates the use of variable arguments with the WriteLine method. The method is called with a composite format string and five format items.  \n  \n [!code-cpp[System.Console.WriteLine#5](~/add/codesnippet/cpp/b0d255a7-f5e0-4135-8d9b-_1.cpp)]"
  syntax:
    content: public static void WriteLine (string format, object arg0, object arg1, object arg2, object arg3);
    parameters:
    - id: format
      type: System.String
      description: "复合格式字符串 （请参阅备注）。"
    - id: arg0
      type: System.Object
      description: "要写入使用的第一个对象`format`。"
    - id: arg1
      type: System.Object
      description: "要写入使用的第二个对象`format`。"
    - id: arg2
      type: System.Object
      description: "要写入使用的第三个对象`format`。"
    - id: arg3
      type: System.Object
      description: "要写入使用的第四个对象`format`。"
  overload: System.Console.WriteLine*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>format</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "中的格式规范<code> format </code>无效。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Security.HostProtectionException
  parent: System.Security
  isExternal: false
  name: HostProtectionException
  nameWithType: HostProtectionException
  fullName: System.Security.HostProtectionException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.OutOfMemoryException
  isExternal: true
  name: System.OutOfMemoryException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.Console.BackgroundColor
  parent: System.Console
  isExternal: false
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
  fullName: System.Console.BackgroundColor
- uid: System.ConsoleColor
  parent: System
  isExternal: false
  name: ConsoleColor
  nameWithType: ConsoleColor
  fullName: System.ConsoleColor
- uid: System.Console.Beep
  parent: System.Console
  isExternal: false
  name: Beep()
  nameWithType: Console.Beep()
  fullName: System.Console.Beep()
- uid: System.Console.Beep(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: Beep(Int32,Int32)
  nameWithType: Console.Beep(Int32,Int32)
  fullName: System.Console.Beep(Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Console.BufferHeight
  parent: System.Console
  isExternal: false
  name: BufferHeight
  nameWithType: Console.BufferHeight
  fullName: System.Console.BufferHeight
- uid: System.Console.BufferWidth
  parent: System.Console
  isExternal: false
  name: BufferWidth
  nameWithType: Console.BufferWidth
  fullName: System.Console.BufferWidth
- uid: System.Console.CancelKeyPress
  parent: System.Console
  isExternal: false
  name: CancelKeyPress
  nameWithType: Console.CancelKeyPress
  fullName: System.Console.CancelKeyPress
- uid: System.ConsoleCancelEventHandler
  parent: System
  isExternal: false
  name: ConsoleCancelEventHandler
  nameWithType: ConsoleCancelEventHandler
  fullName: System.ConsoleCancelEventHandler
- uid: System.Console.CapsLock
  parent: System.Console
  isExternal: false
  name: CapsLock
  nameWithType: Console.CapsLock
  fullName: System.Console.CapsLock
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Console.Clear
  parent: System.Console
  isExternal: false
  name: Clear()
  nameWithType: Console.Clear()
  fullName: System.Console.Clear()
- uid: System.Console.CursorLeft
  parent: System.Console
  isExternal: false
  name: CursorLeft
  nameWithType: Console.CursorLeft
  fullName: System.Console.CursorLeft
- uid: System.Console.CursorSize
  parent: System.Console
  isExternal: false
  name: CursorSize
  nameWithType: Console.CursorSize
  fullName: System.Console.CursorSize
- uid: System.Console.CursorTop
  parent: System.Console
  isExternal: false
  name: CursorTop
  nameWithType: Console.CursorTop
  fullName: System.Console.CursorTop
- uid: System.Console.CursorVisible
  parent: System.Console
  isExternal: false
  name: CursorVisible
  nameWithType: Console.CursorVisible
  fullName: System.Console.CursorVisible
- uid: System.Console.Error
  parent: System.Console
  isExternal: false
  name: Error
  nameWithType: Console.Error
  fullName: System.Console.Error
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Console.ForegroundColor
  parent: System.Console
  isExternal: false
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
  fullName: System.Console.ForegroundColor
- uid: System.Console.In
  parent: System.Console
  isExternal: false
  name: In
  nameWithType: Console.In
  fullName: System.Console.In
- uid: System.IO.TextReader
  parent: System.IO
  isExternal: true
  name: TextReader
  nameWithType: TextReader
  fullName: System.IO.TextReader
- uid: System.Console.InputEncoding
  parent: System.Console
  isExternal: false
  name: InputEncoding
  nameWithType: Console.InputEncoding
  fullName: System.Console.InputEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Console.IsErrorRedirected
  parent: System.Console
  isExternal: false
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
  fullName: System.Console.IsErrorRedirected
- uid: System.Console.IsInputRedirected
  parent: System.Console
  isExternal: false
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
  fullName: System.Console.IsInputRedirected
- uid: System.Console.IsOutputRedirected
  parent: System.Console
  isExternal: false
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
  fullName: System.Console.IsOutputRedirected
- uid: System.Console.KeyAvailable
  parent: System.Console
  isExternal: false
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
  fullName: System.Console.KeyAvailable
- uid: System.Console.LargestWindowHeight
  parent: System.Console
  isExternal: false
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
  fullName: System.Console.LargestWindowHeight
- uid: System.Console.LargestWindowWidth
  parent: System.Console
  isExternal: false
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
  fullName: System.Console.LargestWindowWidth
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Console.MoveBufferArea(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Char,System.ConsoleColor,System.ConsoleColor)
  parent: System.Console
  isExternal: false
  name: MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  nameWithType: Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
  fullName: System.Console.MoveBufferArea(Int32,Int32,Int32,Int32,Int32,Int32,Char,ConsoleColor,ConsoleColor)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Console.NumberLock
  parent: System.Console
  isExternal: false
  name: NumberLock
  nameWithType: Console.NumberLock
  fullName: System.Console.NumberLock
- uid: System.Console.OpenStandardError
  parent: System.Console
  isExternal: false
  name: OpenStandardError()
  nameWithType: Console.OpenStandardError()
  fullName: System.Console.OpenStandardError()
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Console.OpenStandardError(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardError(Int32)
  nameWithType: Console.OpenStandardError(Int32)
  fullName: System.Console.OpenStandardError(Int32)
- uid: System.Console.OpenStandardInput
  parent: System.Console
  isExternal: false
  name: OpenStandardInput()
  nameWithType: Console.OpenStandardInput()
  fullName: System.Console.OpenStandardInput()
- uid: System.Console.OpenStandardInput(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardInput(Int32)
  nameWithType: Console.OpenStandardInput(Int32)
  fullName: System.Console.OpenStandardInput(Int32)
- uid: System.Console.OpenStandardOutput
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput()
  nameWithType: Console.OpenStandardOutput()
  fullName: System.Console.OpenStandardOutput()
- uid: System.Console.OpenStandardOutput(System.Int32)
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput(Int32)
  nameWithType: Console.OpenStandardOutput(Int32)
  fullName: System.Console.OpenStandardOutput(Int32)
- uid: System.Console.Out
  parent: System.Console
  isExternal: false
  name: Out
  nameWithType: Console.Out
  fullName: System.Console.Out
- uid: System.Console.OutputEncoding
  parent: System.Console
  isExternal: false
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
  fullName: System.Console.OutputEncoding
- uid: System.Console.Read
  parent: System.Console
  isExternal: false
  name: Read()
  nameWithType: Console.Read()
  fullName: System.Console.Read()
- uid: System.Console.ReadKey
  parent: System.Console
  isExternal: false
  name: ReadKey()
  nameWithType: Console.ReadKey()
  fullName: System.Console.ReadKey()
- uid: System.ConsoleKeyInfo
  parent: System
  isExternal: false
  name: ConsoleKeyInfo
  nameWithType: ConsoleKeyInfo
  fullName: System.ConsoleKeyInfo
- uid: System.Console.ReadKey(System.Boolean)
  parent: System.Console
  isExternal: false
  name: ReadKey(Boolean)
  nameWithType: Console.ReadKey(Boolean)
  fullName: System.Console.ReadKey(Boolean)
- uid: System.Console.ReadLine
  parent: System.Console
  isExternal: false
  name: ReadLine()
  nameWithType: Console.ReadLine()
  fullName: System.Console.ReadLine()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Console.ResetColor
  parent: System.Console
  isExternal: false
  name: ResetColor()
  nameWithType: Console.ResetColor()
  fullName: System.Console.ResetColor()
- uid: System.Console.SetBufferSize(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetBufferSize(Int32,Int32)
  nameWithType: Console.SetBufferSize(Int32,Int32)
  fullName: System.Console.SetBufferSize(Int32,Int32)
- uid: System.Console.SetCursorPosition(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetCursorPosition(Int32,Int32)
  nameWithType: Console.SetCursorPosition(Int32,Int32)
  fullName: System.Console.SetCursorPosition(Int32,Int32)
- uid: System.Console.SetError(System.IO.TextWriter)
  parent: System.Console
  isExternal: false
  name: SetError(TextWriter)
  nameWithType: Console.SetError(TextWriter)
  fullName: System.Console.SetError(TextWriter)
- uid: System.Console.SetIn(System.IO.TextReader)
  parent: System.Console
  isExternal: false
  name: SetIn(TextReader)
  nameWithType: Console.SetIn(TextReader)
  fullName: System.Console.SetIn(TextReader)
- uid: System.Console.SetOut(System.IO.TextWriter)
  parent: System.Console
  isExternal: false
  name: SetOut(TextWriter)
  nameWithType: Console.SetOut(TextWriter)
  fullName: System.Console.SetOut(TextWriter)
- uid: System.Console.SetWindowPosition(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetWindowPosition(Int32,Int32)
  nameWithType: Console.SetWindowPosition(Int32,Int32)
  fullName: System.Console.SetWindowPosition(Int32,Int32)
- uid: System.Console.SetWindowSize(System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: SetWindowSize(Int32,Int32)
  nameWithType: Console.SetWindowSize(Int32,Int32)
  fullName: System.Console.SetWindowSize(Int32,Int32)
- uid: System.Console.Title
  parent: System.Console
  isExternal: false
  name: Title
  nameWithType: Console.Title
  fullName: System.Console.Title
- uid: System.Console.TreatControlCAsInput
  parent: System.Console
  isExternal: false
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
  fullName: System.Console.TreatControlCAsInput
- uid: System.Console.WindowHeight
  parent: System.Console
  isExternal: false
  name: WindowHeight
  nameWithType: Console.WindowHeight
  fullName: System.Console.WindowHeight
- uid: System.Console.WindowLeft
  parent: System.Console
  isExternal: false
  name: WindowLeft
  nameWithType: Console.WindowLeft
  fullName: System.Console.WindowLeft
- uid: System.Console.WindowTop
  parent: System.Console
  isExternal: false
  name: WindowTop
  nameWithType: Console.WindowTop
  fullName: System.Console.WindowTop
- uid: System.Console.WindowWidth
  parent: System.Console
  isExternal: false
  name: WindowWidth
  nameWithType: Console.WindowWidth
  fullName: System.Console.WindowWidth
- uid: System.Console.Write(System.Boolean)
  parent: System.Console
  isExternal: false
  name: Write(Boolean)
  nameWithType: Console.Write(Boolean)
  fullName: System.Console.Write(Boolean)
- uid: System.Console.Write(System.Char)
  parent: System.Console
  isExternal: false
  name: Write(Char)
  nameWithType: Console.Write(Char)
  fullName: System.Console.Write(Char)
- uid: System.Console.Write(System.Char[])
  parent: System.Console
  isExternal: false
  name: Write(Char[])
  nameWithType: Console.Write(Char[])
  fullName: System.Console.Write(Char[])
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Console.Write(System.Decimal)
  parent: System.Console
  isExternal: false
  name: Write(Decimal)
  nameWithType: Console.Write(Decimal)
  fullName: System.Console.Write(Decimal)
- uid: System.Decimal
  parent: System
  isExternal: true
  name: Decimal
  nameWithType: Decimal
  fullName: System.Decimal
- uid: System.Console.Write(System.Double)
  parent: System.Console
  isExternal: false
  name: Write(Double)
  nameWithType: Console.Write(Double)
  fullName: System.Console.Write(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Console.Write(System.Int32)
  parent: System.Console
  isExternal: false
  name: Write(Int32)
  nameWithType: Console.Write(Int32)
  fullName: System.Console.Write(Int32)
- uid: System.Console.Write(System.Int64)
  parent: System.Console
  isExternal: false
  name: Write(Int64)
  nameWithType: Console.Write(Int64)
  fullName: System.Console.Write(Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Console.Write(System.Object)
  parent: System.Console
  isExternal: false
  name: Write(Object)
  nameWithType: Console.Write(Object)
  fullName: System.Console.Write(Object)
- uid: System.Console.Write(System.Single)
  parent: System.Console
  isExternal: false
  name: Write(Single)
  nameWithType: Console.Write(Single)
  fullName: System.Console.Write(Single)
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Console.Write(System.String)
  parent: System.Console
  isExternal: false
  name: Write(String)
  nameWithType: Console.Write(String)
  fullName: System.Console.Write(String)
- uid: System.Console.Write(System.UInt32)
  parent: System.Console
  isExternal: false
  name: Write(UInt32)
  nameWithType: Console.Write(UInt32)
  fullName: System.Console.Write(UInt32)
- uid: System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Console.Write(System.UInt64)
  parent: System.Console
  isExternal: false
  name: Write(UInt64)
  nameWithType: Console.Write(UInt64)
  fullName: System.Console.Write(UInt64)
- uid: System.UInt64
  parent: System
  isExternal: true
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Console.Write(System.String,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object)
  nameWithType: Console.Write(String,Object)
  fullName: System.Console.Write(String,Object)
- uid: System.Console.Write(System.String,System.Object[])
  parent: System.Console
  isExternal: false
  name: Write(String,Object[])
  nameWithType: Console.Write(String,Object[])
  fullName: System.Console.Write(String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Console.Write(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: Write(Char[],Int32,Int32)
  nameWithType: Console.Write(Char[],Int32,Int32)
  fullName: System.Console.Write(Char[],Int32,Int32)
- uid: System.Console.Write(System.String,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object)
  nameWithType: Console.Write(String,Object,Object)
  fullName: System.Console.Write(String,Object,Object)
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object)
- uid: System.Console.Write(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: Write(String,Object,Object,Object,Object)
  nameWithType: Console.Write(String,Object,Object,Object,Object)
  fullName: System.Console.Write(String,Object,Object,Object,Object)
- uid: System.Console.WriteLine
  parent: System.Console
  isExternal: false
  name: WriteLine()
  nameWithType: Console.WriteLine()
  fullName: System.Console.WriteLine()
- uid: System.Console.WriteLine(System.Boolean)
  parent: System.Console
  isExternal: false
  name: WriteLine(Boolean)
  nameWithType: Console.WriteLine(Boolean)
  fullName: System.Console.WriteLine(Boolean)
- uid: System.Console.WriteLine(System.Char)
  parent: System.Console
  isExternal: false
  name: WriteLine(Char)
  nameWithType: Console.WriteLine(Char)
  fullName: System.Console.WriteLine(Char)
- uid: System.Console.WriteLine(System.Char[])
  parent: System.Console
  isExternal: false
  name: WriteLine(Char[])
  nameWithType: Console.WriteLine(Char[])
  fullName: System.Console.WriteLine(Char[])
- uid: System.Console.WriteLine(System.Decimal)
  parent: System.Console
  isExternal: false
  name: WriteLine(Decimal)
  nameWithType: Console.WriteLine(Decimal)
  fullName: System.Console.WriteLine(Decimal)
- uid: System.Console.WriteLine(System.Double)
  parent: System.Console
  isExternal: false
  name: WriteLine(Double)
  nameWithType: Console.WriteLine(Double)
  fullName: System.Console.WriteLine(Double)
- uid: System.Console.WriteLine(System.Int32)
  parent: System.Console
  isExternal: false
  name: WriteLine(Int32)
  nameWithType: Console.WriteLine(Int32)
  fullName: System.Console.WriteLine(Int32)
- uid: System.Console.WriteLine(System.Int64)
  parent: System.Console
  isExternal: false
  name: WriteLine(Int64)
  nameWithType: Console.WriteLine(Int64)
  fullName: System.Console.WriteLine(Int64)
- uid: System.Console.WriteLine(System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(Object)
  nameWithType: Console.WriteLine(Object)
  fullName: System.Console.WriteLine(Object)
- uid: System.Console.WriteLine(System.Single)
  parent: System.Console
  isExternal: false
  name: WriteLine(Single)
  nameWithType: Console.WriteLine(Single)
  fullName: System.Console.WriteLine(Single)
- uid: System.Console.WriteLine(System.String)
  parent: System.Console
  isExternal: false
  name: WriteLine(String)
  nameWithType: Console.WriteLine(String)
  fullName: System.Console.WriteLine(String)
- uid: System.Console.WriteLine(System.UInt32)
  parent: System.Console
  isExternal: false
  name: WriteLine(UInt32)
  nameWithType: Console.WriteLine(UInt32)
  fullName: System.Console.WriteLine(UInt32)
- uid: System.Console.WriteLine(System.UInt64)
  parent: System.Console
  isExternal: false
  name: WriteLine(UInt64)
  nameWithType: Console.WriteLine(UInt64)
  fullName: System.Console.WriteLine(UInt64)
- uid: System.Console.WriteLine(System.String,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object)
  nameWithType: Console.WriteLine(String,Object)
  fullName: System.Console.WriteLine(String,Object)
- uid: System.Console.WriteLine(System.String,System.Object[])
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object[])
  nameWithType: Console.WriteLine(String,Object[])
  fullName: System.Console.WriteLine(String,Object[])
- uid: System.Console.WriteLine(System.Char[],System.Int32,System.Int32)
  parent: System.Console
  isExternal: false
  name: WriteLine(Char[],Int32,Int32)
  nameWithType: Console.WriteLine(Char[],Int32,Int32)
  fullName: System.Console.WriteLine(Char[],Int32,Int32)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object)
- uid: System.Console.WriteLine(System.String,System.Object,System.Object,System.Object,System.Object)
  parent: System.Console
  isExternal: false
  name: WriteLine(String,Object,Object,Object,Object)
  nameWithType: Console.WriteLine(String,Object,Object,Object,Object)
  fullName: System.Console.WriteLine(String,Object,Object,Object,Object)
- uid: System.Console.BackgroundColor*
  parent: System.Console
  isExternal: false
  name: BackgroundColor
  nameWithType: Console.BackgroundColor
- uid: System.Console.Beep*
  parent: System.Console
  isExternal: false
  name: Beep
  nameWithType: Console.Beep
- uid: System.Console.BufferHeight*
  parent: System.Console
  isExternal: false
  name: BufferHeight
  nameWithType: Console.BufferHeight
- uid: System.Console.BufferWidth*
  parent: System.Console
  isExternal: false
  name: BufferWidth
  nameWithType: Console.BufferWidth
- uid: System.Console.CapsLock*
  parent: System.Console
  isExternal: false
  name: CapsLock
  nameWithType: Console.CapsLock
- uid: System.Console.Clear*
  parent: System.Console
  isExternal: false
  name: Clear
  nameWithType: Console.Clear
- uid: System.Console.CursorLeft*
  parent: System.Console
  isExternal: false
  name: CursorLeft
  nameWithType: Console.CursorLeft
- uid: System.Console.CursorSize*
  parent: System.Console
  isExternal: false
  name: CursorSize
  nameWithType: Console.CursorSize
- uid: System.Console.CursorTop*
  parent: System.Console
  isExternal: false
  name: CursorTop
  nameWithType: Console.CursorTop
- uid: System.Console.CursorVisible*
  parent: System.Console
  isExternal: false
  name: CursorVisible
  nameWithType: Console.CursorVisible
- uid: System.Console.Error*
  parent: System.Console
  isExternal: false
  name: Error
  nameWithType: Console.Error
- uid: System.Console.ForegroundColor*
  parent: System.Console
  isExternal: false
  name: ForegroundColor
  nameWithType: Console.ForegroundColor
- uid: System.Console.In*
  parent: System.Console
  isExternal: false
  name: In
  nameWithType: Console.In
- uid: System.Console.InputEncoding*
  parent: System.Console
  isExternal: false
  name: InputEncoding
  nameWithType: Console.InputEncoding
- uid: System.Console.IsErrorRedirected*
  parent: System.Console
  isExternal: false
  name: IsErrorRedirected
  nameWithType: Console.IsErrorRedirected
- uid: System.Console.IsInputRedirected*
  parent: System.Console
  isExternal: false
  name: IsInputRedirected
  nameWithType: Console.IsInputRedirected
- uid: System.Console.IsOutputRedirected*
  parent: System.Console
  isExternal: false
  name: IsOutputRedirected
  nameWithType: Console.IsOutputRedirected
- uid: System.Console.KeyAvailable*
  parent: System.Console
  isExternal: false
  name: KeyAvailable
  nameWithType: Console.KeyAvailable
- uid: System.Console.LargestWindowHeight*
  parent: System.Console
  isExternal: false
  name: LargestWindowHeight
  nameWithType: Console.LargestWindowHeight
- uid: System.Console.LargestWindowWidth*
  parent: System.Console
  isExternal: false
  name: LargestWindowWidth
  nameWithType: Console.LargestWindowWidth
- uid: System.Console.MoveBufferArea*
  parent: System.Console
  isExternal: false
  name: MoveBufferArea
  nameWithType: Console.MoveBufferArea
- uid: System.Console.NumberLock*
  parent: System.Console
  isExternal: false
  name: NumberLock
  nameWithType: Console.NumberLock
- uid: System.Console.OpenStandardError*
  parent: System.Console
  isExternal: false
  name: OpenStandardError
  nameWithType: Console.OpenStandardError
- uid: System.Console.OpenStandardInput*
  parent: System.Console
  isExternal: false
  name: OpenStandardInput
  nameWithType: Console.OpenStandardInput
- uid: System.Console.OpenStandardOutput*
  parent: System.Console
  isExternal: false
  name: OpenStandardOutput
  nameWithType: Console.OpenStandardOutput
- uid: System.Console.Out*
  parent: System.Console
  isExternal: false
  name: Out
  nameWithType: Console.Out
- uid: System.Console.OutputEncoding*
  parent: System.Console
  isExternal: false
  name: OutputEncoding
  nameWithType: Console.OutputEncoding
- uid: System.Console.Read*
  parent: System.Console
  isExternal: false
  name: Read
  nameWithType: Console.Read
- uid: System.Console.ReadKey*
  parent: System.Console
  isExternal: false
  name: ReadKey
  nameWithType: Console.ReadKey
- uid: System.Console.ReadLine*
  parent: System.Console
  isExternal: false
  name: ReadLine
  nameWithType: Console.ReadLine
- uid: System.Console.ResetColor*
  parent: System.Console
  isExternal: false
  name: ResetColor
  nameWithType: Console.ResetColor
- uid: System.Console.SetBufferSize*
  parent: System.Console
  isExternal: false
  name: SetBufferSize
  nameWithType: Console.SetBufferSize
- uid: System.Console.SetCursorPosition*
  parent: System.Console
  isExternal: false
  name: SetCursorPosition
  nameWithType: Console.SetCursorPosition
- uid: System.Console.SetError*
  parent: System.Console
  isExternal: false
  name: SetError
  nameWithType: Console.SetError
- uid: System.Console.SetIn*
  parent: System.Console
  isExternal: false
  name: SetIn
  nameWithType: Console.SetIn
- uid: System.Console.SetOut*
  parent: System.Console
  isExternal: false
  name: SetOut
  nameWithType: Console.SetOut
- uid: System.Console.SetWindowPosition*
  parent: System.Console
  isExternal: false
  name: SetWindowPosition
  nameWithType: Console.SetWindowPosition
- uid: System.Console.SetWindowSize*
  parent: System.Console
  isExternal: false
  name: SetWindowSize
  nameWithType: Console.SetWindowSize
- uid: System.Console.Title*
  parent: System.Console
  isExternal: false
  name: Title
  nameWithType: Console.Title
- uid: System.Console.TreatControlCAsInput*
  parent: System.Console
  isExternal: false
  name: TreatControlCAsInput
  nameWithType: Console.TreatControlCAsInput
- uid: System.Console.WindowHeight*
  parent: System.Console
  isExternal: false
  name: WindowHeight
  nameWithType: Console.WindowHeight
- uid: System.Console.WindowLeft*
  parent: System.Console
  isExternal: false
  name: WindowLeft
  nameWithType: Console.WindowLeft
- uid: System.Console.WindowTop*
  parent: System.Console
  isExternal: false
  name: WindowTop
  nameWithType: Console.WindowTop
- uid: System.Console.WindowWidth*
  parent: System.Console
  isExternal: false
  name: WindowWidth
  nameWithType: Console.WindowWidth
- uid: System.Console.Write*
  parent: System.Console
  isExternal: false
  name: Write
  nameWithType: Console.Write
- uid: System.Console.WriteLine*
  parent: System.Console
  isExternal: false
  name: WriteLine
  nameWithType: Console.WriteLine
