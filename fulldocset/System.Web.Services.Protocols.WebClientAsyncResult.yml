### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.WebClientAsyncResult
  id: WebClientAsyncResult
  children:
  - System.Web.Services.Protocols.WebClientAsyncResult.Abort
  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  - System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  - System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  - System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  langs:
  - csharp
  name: WebClientAsyncResult
  nameWithType: WebClientAsyncResult
  fullName: System.Web.Services.Protocols.WebClientAsyncResult
  type: Class
  summary: "提供的实现<xref:System.IAsyncResult>以供 XML Web 服务代理实现的标准异步方法模式。</xref:System.IAsyncResult>"
  remarks: "When you call the `BeginMyMethodName` method, where `MyMethodName` is the synchronous version of the method, on an XML Web service proxy class, an instance of the WebClientAsyncResult is returned. Following the standard asynchronous design pattern, that instance of WebClientAsyncResult must later be passed to `EndMyMethodName` to complete the asynchronous method call.  \n  \n For details on calling XML Web services asynchronously, see [&#91;\\<topic://cpconInvokingWebServicesAsynchronously>&#93;](http://msdn.microsoft.com/en-us/f9e26a43-063a-440a-8c73-a02f2ccf3ea0)."
  syntax:
    content: 'public class WebClientAsyncResult : IAsyncResult'
  inheritance:
  - System.Object
  implements:
  - System.IAsyncResult
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort
  id: Abort
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: Abort()
  nameWithType: WebClientAsyncResult.Abort()
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()
  type: Method
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "取消的异步的 XML Web 服务请求。"
  remarks: ''
  example:
  - The XML Web service request is canceled if the underlying transport supports the <xref:System.Net.WebRequest.Abort%2A?displayProperty=fullName> method. If the corresponding `End` method is subsequently called after the Abort method, a <xref:System.Net.WebException> is thrown, setting the <xref:System.Net.WebException.Status%2A> property to <xref:System.Net.WebExceptionStatus>.
  syntax:
    content: public void Abort ();
    parameters: []
  overload: System.Web.Services.Protocols.WebClientAsyncResult.Abort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  id: AsyncState
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取到的最后一个参数中提供的对象<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>方法异步调用。"
  syntax:
    content: public object AsyncState { get; }
    return:
      type: System.Object
      description: "<xref:System.Object>到的最后一个参数中提供<xref uid=&quot;langword_csharp_Begin&quot; name=&quot;Begin&quot; href=&quot;&quot;></xref>方法调用。</xref:System.Object>"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  id: AsyncWaitHandle
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取<xref:System.Threading.WaitHandle>用于等待异步操作以完成。</xref:System.Threading.WaitHandle>"
  remarks: "<xref:System.Threading.WaitHandle>可以用于执行<xref:System.Threading.WaitHandle.WaitOne%2A>， <xref:System.Threading.WaitHandle.WaitAny%2A>，或<xref:System.Threading.WaitHandle.WaitAll%2A>等待异步调用完成。</xref:System.Threading.WaitHandle.WaitAll%2A> </xref:System.Threading.WaitHandle.WaitAny%2A> </xref:System.Threading.WaitHandle.WaitOne%2A> </xref:System.Threading.WaitHandle>       有关详细信息，请参阅<xref:System.IAsyncResult.AsyncWaitHandle%2A>。</xref:System.IAsyncResult.AsyncWaitHandle%2A>"
  syntax:
    content: public System.Threading.WaitHandle AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A<xref:System.Threading.WaitHandle>用于等待异步操作以完成。</xref:System.Threading.WaitHandle>"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  id: CompletedSynchronously
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取一个值，该值指示是否同步完成开始调用。"
  remarks: "如果 CompletedSynchronously 设置为`true`内<xref:System.AsyncCallback>委托，但很可能，调用线程<xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A>是当前线程。</xref:System.Web.Services.Protocols.SoapHttpClientProtocol.BeginInvoke%2A> </xref:System.AsyncCallback> 在这种情况下，你应谨慎进行另一个异步 Begin 从回调方法中调用，因为它可能会导致堆栈增长而无需绑定如果在调用继续同步完成。 相反，应在原始调用站点，外部的回调方法完成的调用。"
  syntax:
    content: public bool CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果开始调用完成同步进行;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  id: IsCompleted
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  langs:
  - csharp
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取一个值，该值指示是否已完成的异步的 XML Web 服务请求。"
  syntax:
    content: public bool IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果异步 XML Web 服务请求已完成;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: Abort()
  nameWithType: WebClientAsyncResult.Abort()
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.Abort()
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
  fullName: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted
- uid: System.Web.Services.Protocols.WebClientAsyncResult.Abort*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: Abort
  nameWithType: WebClientAsyncResult.Abort
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncState*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncState
  nameWithType: WebClientAsyncResult.AsyncState
- uid: System.Web.Services.Protocols.WebClientAsyncResult.AsyncWaitHandle*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: AsyncWaitHandle
  nameWithType: WebClientAsyncResult.AsyncWaitHandle
- uid: System.Web.Services.Protocols.WebClientAsyncResult.CompletedSynchronously*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: CompletedSynchronously
  nameWithType: WebClientAsyncResult.CompletedSynchronously
- uid: System.Web.Services.Protocols.WebClientAsyncResult.IsCompleted*
  parent: System.Web.Services.Protocols.WebClientAsyncResult
  isExternal: false
  name: IsCompleted
  nameWithType: WebClientAsyncResult.IsCompleted
