### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider
  id: IInstanceProvider
  children:
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  - System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  - System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  langs:
  - csharp
  name: IInstanceProvider
  nameWithType: IInstanceProvider
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider
  type: Interface
  summary: "声明提供服务的方法对象或回收服务对象的[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]服务。"
  remarks: "实现 IInstanceProvider 接口来控制创建和回收服务对象时一个请求或释放<xref:System.ServiceModel.InstanceContext>对象。</xref:System.ServiceModel.InstanceContext>       IInstanceProvider 接口实现后，你必须将分配到你自定义实例提供程序对象<xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>使用终结点行为的属性 (<xref:System.ServiceModel.Description.IEndpointBehavior>对象) 或协定行为 (<xref:System.ServiceModel.Description.IContractBehavior>对象)。</xref:System.ServiceModel.Description.IContractBehavior> </xref:System.ServiceModel.Description.IEndpointBehavior> </xref:System.ServiceModel.Dispatcher.DispatchRuntime.InstanceProvider%2A>       如果插入机制为终结点行为还可以实现<xref:System.ServiceModel.Configuration.BehaviorExtensionElement>可以插入自定义行为使用配置文件的对象。</xref:System.ServiceModel.Configuration.BehaviorExtensionElement> 如果插入机制为协定行为，您可以插入的行为在打开服务主机之前以编程方式，也可以实现自定义属性。 （有关此协定行为的示例，请参阅示例部分）。     IInstanceProvider 有两个方法，<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>并且<xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>.</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> 通常，实现这些方法，创建使用非默认构造函数的服务对象或用于初始化或释放的对象的生存期相关的一些状态。 服务对象池就属于自定义 IInstanceProvider 功能的一个示例。       通常情况下，<xref:System.ServiceModel.InstanceContext>时，将调用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>时<xref:System.ServiceModel.InstanceContext>首次创建并调用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>方法时<xref:System.ServiceModel.InstanceContext>已关闭。</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> </xref:System.ServiceModel.InstanceContext>       有两种方法，以使<xref:System.ServiceModel.InstanceContext>对象释放服务对象之前<xref:System.ServiceModel.InstanceContext>已关闭。</xref:System.ServiceModel.InstanceContext> </xref:System.ServiceModel.InstanceContext> 第一种方法是将设置<xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A>到<xref:System.ServiceModel.ReleaseInstanceMode>或<xref:System.ServiceModel.ReleaseInstanceMode>.</xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.ReleaseInstanceMode> </xref:System.ServiceModel.OperationBehaviorAttribute.ReleaseInstanceMode%2A> 第二种方法是调用<xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>方法。</xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> 如果此操作后，<xref:System.ServiceModel.InstanceContext>调用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>调度程序的实例提供程序方法。</xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.InstanceContext> 如果新消息到达后释放实例，[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]创建新的实例使用<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>方法。</xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>      1> [!NOTE]&1;> 如果<xref:System.ServiceModel.InstanceContextMode>服务是<xref:System.ServiceModel.InstanceContextMode>、<xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A>或<xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A>方法，即使用户未提供已知的服务对象，除非用户直接调用<xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A>，然后调用<xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A>.</xref:System.ServiceModel.InstanceContext.GetServiceInstance%2A> </xref:System.ServiceModel.InstanceContext.ReleaseServiceInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance%2A> </xref:System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance%2A> ，系统不会调用</xref:System.ServiceModel.InstanceContextMode></xref:System.ServiceModel.InstanceContextMode>"
  example:
  - "The following code example shows how to implement IInstanceProvider that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public interface IInstanceProvider
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  id: GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "返回给出指定的服务对象<xref:System.ServiceModel.InstanceContext>对象。</xref:System.ServiceModel.InstanceContext>"
  remarks: "使用 GetInstance 方法来控制的确切服务对象[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]时尝试创建一个新服务接收。"
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "当前<xref:System.ServiceModel.InstanceContext>对象。</xref:System.ServiceModel.InstanceContext>"
    return:
      type: System.Object
      description: "一个用户定义的服务对象。"
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  id: GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "返回给出指定的服务对象<xref:System.ServiceModel.InstanceContext>对象。</xref:System.ServiceModel.InstanceContext>"
  remarks: "使用 GetInstance 方法来控制的确切服务对象[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]时尝试创建一个新服务接收。"
  example:
  - "The following code example shows how to implement <xref:System.ServiceModel.Dispatcher.IInstanceProvider> that provides \"singleton\" behavior; it always returns the same service instance and does not recycle it.  \n  \n [!code-cs[IContractBehavior#1](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#1)]\n [!code-vb[IContractBehavior#1](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#1)]  \n  \n The following code example shows how to implement a custom attribute that implements <xref:System.ServiceModel.Description.IContractBehavior> to insert the custom service instance provider. It also implements <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, which binds its use to a specific contract.  \n  \n [!code-cs[IContractBehavior#2](~/add/codesnippet/csharp/icontractbehavior.client/objectproviderbehavior.cs#2)]\n [!code-vb[IContractBehavior#2](~/add/codesnippet/visualbasic/icontractbehavior.client/objectproviderbehavior.vb#2)]"
  syntax:
    content: public object GetInstance (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.Channels.Message message);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "当前<xref:System.ServiceModel.InstanceContext>对象。</xref:System.ServiceModel.InstanceContext>"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "触发服务对象的创建消息。"
    return:
      type: System.Object
      description: "服务对象中。"
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  id: ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  langs:
  - csharp
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "时调用<xref:System.ServiceModel.InstanceContext>对象回收服务对象。</xref:System.ServiceModel.InstanceContext>"
  remarks: "ReleaseInstance 方法用于在服务回收服务对象时执行某些自定义资源释放操作或其他回收自定义。"
  syntax:
    content: public void ReleaseInstance (System.ServiceModel.InstanceContext instanceContext, object instance);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "服务的实例上下文。"
    - id: instance
      type: System.Object
      description: "要回收服务对象。"
  overload: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(System.ServiceModel.InstanceContext,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance(InstanceContext,Message)
  nameWithType: IInstanceProvider.GetInstance(InstanceContext,Message)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance(InstanceContext,Message)
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(System.ServiceModel.InstanceContext,System.Object)
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance(InstanceContext,Object)
  nameWithType: IInstanceProvider.ReleaseInstance(InstanceContext,Object)
  fullName: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance(InstanceContext,Object)
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.GetInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: GetInstance
  nameWithType: IInstanceProvider.GetInstance
- uid: System.ServiceModel.Dispatcher.IInstanceProvider.ReleaseInstance*
  parent: System.ServiceModel.Dispatcher.IInstanceProvider
  isExternal: false
  name: ReleaseInstance
  nameWithType: IInstanceProvider.ReleaseInstance
