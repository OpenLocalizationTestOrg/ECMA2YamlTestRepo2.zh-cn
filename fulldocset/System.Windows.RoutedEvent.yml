### YamlMime:ManagedReference
items:
- uid: System.Windows.RoutedEvent
  id: RoutedEvent
  children:
  - System.Windows.RoutedEvent.AddOwner(System.Type)
  - System.Windows.RoutedEvent.HandlerType
  - System.Windows.RoutedEvent.Name
  - System.Windows.RoutedEvent.OwnerType
  - System.Windows.RoutedEvent.RoutingStrategy
  - System.Windows.RoutedEvent.ToString
  langs:
  - csharp
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
  type: Class
  summary: "表示和标识路由的事件并声明其特征。"
  remarks: "此类包含<xref:System.Windows.RoutedEvent.Name%2A>， <xref:System.Windows.RoutedEvent.RoutingStrategy%2A>， <xref:System.Windows.RoutedEvent.HandlerType%2A>，和<xref:System.Windows.RoutedEvent.OwnerType%2A>属性。</xref:System.Windows.RoutedEvent.OwnerType%2A> </xref:System.Windows.RoutedEvent.HandlerType%2A> </xref:System.Windows.RoutedEvent.RoutingStrategy%2A> </xref:System.Windows.RoutedEvent.Name%2A> 这些成员不可以具有 null 值。       此类具有以独占方式适用于提供的值的 XAML 用法<xref:System.Windows.EventTrigger.RoutedEvent%2A>属性<xref:System.Windows.EventTrigger>（或派生类），或为<xref:System.Windows.EventSetter.Event%2A>属性<xref:System.Windows.EventSetter>（或派生类）。</xref:System.Windows.EventSetter> </xref:System.Windows.EventSetter.Event%2A> </xref:System.Windows.EventTrigger> </xref:System.Windows.EventTrigger.RoutedEvent%2A> 有关详细信息<xref:System.Windows.EventTrigger>， <xref:System.Windows.EventSetter>，并为这些类的 XAML 用法查看[路由事件概述](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.EventSetter> </xref:System.Windows.EventTrigger>      <a name=&quot;xamlAttributeUsage_RoutedEvent&quot;></a># # XAML 属性用法```   <object property=&quot;eventName&quot;/>   - or -   <object property=&quot;type.eventName&quot;/>      ``` <a name=&quot;xamlValues_RoutedEvent&quot;> </a> # # XAML 值*eventName*非限定的事件名称，等效于<xref:System.Windows.RoutedEvent.Name%2A>RoutedEvent 字段的属性、 不在类型 RoutedEvent 标识符字段的实际成员名称。</xref:System.Windows.RoutedEvent.Name%2A>       而无需限定， *eventName*必须命名为中<xref:System.Windows.Style.TargetType%2A>的当前样式包含<xref:System.Windows.EventSetter>或<xref:System.Windows.EventTrigger>。</xref:System.Windows.EventTrigger></xref:System.Windows.EventSetter></xref:System.Windows.Style.TargetType%2A>的类型都可以找到事件       *类型*要使用来限定事件名称的类型。 如果未使用的前缀，提供*类型*预计会默认 XAML 命名空间中的类型和，可以映射到现有 CLR 类型。 自定义事件，或位于默认 XAML 命名空间的字符串之外的类型的事件*类型*可以包括映射的 XAML 命名空间的前缀。 XAML 命名空间应包含的 XAML 类型可以映射到后备 CLR 类型，并且该 CLR 类型应定义的所需的路由的事件标识符。 有关 XAML 命名空间映射的详细信息，请参阅[XAML 命名空间和 WPF XAML Namespace 映射](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter("System.Windows.Markup.RoutedEventConverter, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      [System.Windows.Markup.ValueSerializer("System.Windows.Markup.RoutedEventValueSerializer, PresentationFramework, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35, Custom=null")]

      public sealed class RoutedEvent
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.AddOwner(System.Type)
  id: AddOwner(System.Type)
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: AddOwner(Type)
  nameWithType: RoutedEvent.AddOwner(Type)
  fullName: System.Windows.RoutedEvent.AddOwner(Type)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "将另一个所有者类型与所表示的路由事件相关联<xref href=&quot;System.Windows.RoutedEvent&quot;></xref>实例，并启用路由的事件和其处理。"
  remarks: "所有者类型时在内部使用解析事件按名称。"
  example:
  - "The following example adds the current class as another owner of an event defined in a different class. Here, `AnotherEditContainer` is the current class, and the `EditStateChangedEvent`<xref:System.Windows.RoutedEvent> field is defined as a member of that class. The `MyEditContainer` class originally defined the event, registering it with the identically named `EditStateChangedEvent`identifier.  \n  \n [!code-vb[ClassHandling#RoutedEventAddOwner](~/add/codesnippet/visualbasic/ClassHandling.sdksamplelibrary/class1.vb#routedeventaddowner)]\n [!code-cs[ClassHandling#RoutedEventAddOwner](~/add/codesnippet/csharp/ClassHandling/SDKSampleLibrary/class1.cs#routedeventaddowner)]"
  syntax:
    content: public System.Windows.RoutedEvent AddOwner (Type ownerType);
    parameters:
    - id: ownerType
      type: System.Type
      description: "其中添加路由的事件的类型。"
    return:
      type: System.Windows.RoutedEvent
      description: "事件标识符字段。 此返回值应用于设置的公共静态只读字段，将对所属类型存储的表示形式的路由事件的标识符。 此字段通常定义的公共访问权限，因为用户代码必须引用的字段，以便将附加的路由事件时使用的任何实例处理<xref:System.Windows.UIElement.AddHandler*>的实用工具方法。</xref:System.Windows.UIElement.AddHandler*>"
  overload: System.Windows.RoutedEvent.AddOwner*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.HandlerType
  id: HandlerType
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: HandlerType
  nameWithType: RoutedEvent.HandlerType
  fullName: System.Windows.RoutedEvent.HandlerType
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取路由事件的处理程序类型。"
  remarks: "处理程序类型是实现将侦听此<xref:System.Windows.RoutedEvent>。</xref:System.Windows.RoutedEvent>所表示的事件的处理程序时，应使用的事件处理程序委托"
  syntax:
    content: public Type HandlerType { get; }
    return:
      type: System.Type
      description: "路由事件处理程序类型。"
  overload: System.Windows.RoutedEvent.HandlerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.Name
  id: Name
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: Name
  nameWithType: RoutedEvent.Name
  fullName: System.Windows.RoutedEvent.Name
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取路由事件的标识名称。"
  remarks: "路由事件的名称必须是唯一在每个所有者类型中，但不需要是全局唯一的。       此属性的值来自<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>方法，它定义一种<xref:System.Windows.RoutedEvent>。</xref:System.Windows.RoutedEvent> </xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 具体而言，名称的值是`name`于<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>传递的参数值"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "路由事件的名称。"
  overload: System.Windows.RoutedEvent.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.OwnerType
  id: OwnerType
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: OwnerType
  nameWithType: RoutedEvent.OwnerType
  fullName: System.Windows.RoutedEvent.OwnerType
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取路由事件的注册的所有者类型。"
  remarks: "此类型可以是任何对象类型，不一定限于<xref:System.Windows.DependencyObject>.</xref:System.Windows.DependencyObject> 在具有添加的所有者的路由事件的情况下，此属性将返回第一个声明的所有者。       此属性的值来自<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>方法，它定义一种<xref:System.Windows.RoutedEvent>。</xref:System.Windows.RoutedEvent> </xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 具体而言，所有者类型的值是`ownerType`于<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>传递的参数值"
  syntax:
    content: public Type OwnerType { get; }
    return:
      type: System.Type
      description: "路由事件的所有者类型。"
  overload: System.Windows.RoutedEvent.OwnerType*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.RoutingStrategy
  id: RoutingStrategy
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: RoutingStrategy
  nameWithType: RoutedEvent.RoutingStrategy
  fullName: System.Windows.RoutedEvent.RoutingStrategy
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "获取路由事件的路由策略。"
  remarks: "按照约定，隧道的路由的事件都具有名称前缀&quot;预览&quot;和相关联的冒泡事件定义。 它应该很少见，将有只有隧道版本而不匹配的冒泡版本。 有关详细信息，请参阅[如何︰ 创建自定义路由事件](~/add/includes/ajax-current-ext-md.md)。       此属性的值来自<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>方法，它定义一种<xref:System.Windows.RoutedEvent>。</xref:System.Windows.RoutedEvent> </xref:System.Windows.EventManager.RegisterRoutedEvent%2A> 具体而言，RoutingStrategy 的值是`routingStrategy`于<xref:System.Windows.EventManager.RegisterRoutedEvent%2A>。</xref:System.Windows.EventManager.RegisterRoutedEvent%2A>传递的参数值"
  syntax:
    content: public System.Windows.RoutingStrategy RoutingStrategy { get; }
    return:
      type: System.Windows.RoutingStrategy
      description: "枚举值之一。 默认值为枚举默认版本， <xref href=&quot;System.Windows.RoutingStrategy&quot;> </xref>。"
  overload: System.Windows.RoutedEvent.RoutingStrategy*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.RoutedEvent.ToString
  id: ToString
  parent: System.Windows.RoutedEvent
  langs:
  - csharp
  name: ToString()
  nameWithType: RoutedEvent.ToString()
  fullName: System.Windows.RoutedEvent.ToString()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows
  summary: "返回的字符串表示形式这<xref href=&quot;System.Windows.RoutedEvent&quot;> </xref>。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "此对象，它是等于<xref:System.Windows.RoutedEvent.Name*>.</xref:System.Windows.RoutedEvent.Name*>返回的值的字符串表示形式"
  overload: System.Windows.RoutedEvent.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.RoutedEvent.AddOwner(System.Type)
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: AddOwner(Type)
  nameWithType: RoutedEvent.AddOwner(Type)
  fullName: System.Windows.RoutedEvent.AddOwner(Type)
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.RoutedEvent.HandlerType
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: HandlerType
  nameWithType: RoutedEvent.HandlerType
  fullName: System.Windows.RoutedEvent.HandlerType
- uid: System.Windows.RoutedEvent.Name
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: Name
  nameWithType: RoutedEvent.Name
  fullName: System.Windows.RoutedEvent.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.RoutedEvent.OwnerType
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: OwnerType
  nameWithType: RoutedEvent.OwnerType
  fullName: System.Windows.RoutedEvent.OwnerType
- uid: System.Windows.RoutedEvent.RoutingStrategy
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutedEvent.RoutingStrategy
  fullName: System.Windows.RoutedEvent.RoutingStrategy
- uid: System.Windows.RoutingStrategy
  parent: System.Windows
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutingStrategy
  fullName: System.Windows.RoutingStrategy
- uid: System.Windows.RoutedEvent.ToString
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: ToString()
  nameWithType: RoutedEvent.ToString()
  fullName: System.Windows.RoutedEvent.ToString()
- uid: System.Windows.RoutedEvent.AddOwner*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: AddOwner
  nameWithType: RoutedEvent.AddOwner
- uid: System.Windows.RoutedEvent.HandlerType*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: HandlerType
  nameWithType: RoutedEvent.HandlerType
- uid: System.Windows.RoutedEvent.Name*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: Name
  nameWithType: RoutedEvent.Name
- uid: System.Windows.RoutedEvent.OwnerType*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: OwnerType
  nameWithType: RoutedEvent.OwnerType
- uid: System.Windows.RoutedEvent.RoutingStrategy*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: RoutingStrategy
  nameWithType: RoutedEvent.RoutingStrategy
- uid: System.Windows.RoutedEvent.ToString*
  parent: System.Windows.RoutedEvent
  isExternal: false
  name: ToString
  nameWithType: RoutedEvent.ToString
