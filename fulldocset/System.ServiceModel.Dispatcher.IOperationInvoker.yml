### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.IOperationInvoker
  id: IOperationInvoker
  children:
  - System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs
  - System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)
  - System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)
  - System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)
  - System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
  langs:
  - csharp
  name: IOperationInvoker
  nameWithType: IOperationInvoker
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker
  type: Interface
  summary: "声明的对象以及从消息中提取的参数的数组，调用上使用这些参数，该对象的方法并返回方法的返回值和输出参数的方法。"
  remarks: "实现 IOperationInvoker 接口来控制对该对象的强类型方法调用从非类型化的对象和数组的参数转换。 它拥有一个同步<xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A>方法，它使用一个实例和的输入类型对象的集合并返回一个对象和类型对象的输出一组。</xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A> 它还具有<xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin%2A>和[InvokeEnd (对象、 对象\\[\\]，IAsyncResult)](assetId:///M:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)?qualifyHint=False&autoUpgrade=True)变体。</xref:System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin%2A>  <xref:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous%2A>属性指定是否应使用同步或异步方法。</xref:System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous%2A>"
  syntax:
    content: public interface IOperationInvoker
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs
  id: AllocateInputs
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: AllocateInputs()
  nameWithType: IOperationInvoker.AllocateInputs()
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "返回&lt;xref:System.Array?displayProperty=fullName&gt;的参数对象。"
  remarks: "实现此接口可以返回的操作的参数数组。 格式化程序填充此数组并将其传递回调用方时<xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A>称为。</xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke%2A>"
  syntax:
    content: public object[] AllocateInputs ();
    parameters: []
    return:
      type: System.Object[]
      description: "所要用作操作自变量的参数。"
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)
  id: Invoke(System.Object,System.Object[],System.Object[]@)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: Invoke(Object,Object[],Object[])
  nameWithType: IOperationInvoker.Invoke(Object,Object[],Object[])
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(Object,Object[],Object[])
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "从一个实例和输入对象的集合中返回一个对象和一组输出对象。"
  syntax:
    content: public object Invoke (object instance, object[] inputs, out object[] outputs);
    parameters:
    - id: instance
      type: System.Object
      description: "要调用的对象。"
    - id: inputs
      type: System.Object[]
      description: "该方法的输入。"
    - id: outputs
      type: System.Object[]
      description: "从方法输出。"
    return:
      type: System.Object
      description: "返回的值。"
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)
  id: InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: InvokeBegin(Object,Object[],AsyncCallback,Object)
  nameWithType: IOperationInvoker.InvokeBegin(Object,Object[],AsyncCallback,Object)
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(Object,Object[],AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "异步实现<xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke*>方法。</xref:System.ServiceModel.Dispatcher.IOperationInvoker.Invoke*>"
  syntax:
    content: public IAsyncResult InvokeBegin (object instance, object[] inputs, AsyncCallback callback, object state);
    parameters:
    - id: instance
      type: System.Object
      description: "要调用的对象。"
    - id: inputs
      type: System.Object[]
      description: "该方法的输入。"
    - id: callback
      type: System.AsyncCallback
      description: "异步回调对象中。"
    - id: state
      type: System.Object
      description: "关联的状态数据。"
    return:
      type: System.IAsyncResult
      description: "A &lt;xref:System.IAsyncResult?displayProperty=fullName&gt;用于完成异步调用。"
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)
  id: InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: InvokeEnd(Object,Object[],IAsyncResult)
  nameWithType: IOperationInvoker.InvokeEnd(Object,Object[],IAsyncResult)
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(Object,Object[],IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "异步结束方法。"
  syntax:
    content: public object InvokeEnd (object instance, out object[] outputs, IAsyncResult result);
    parameters:
    - id: instance
      type: System.Object
      description: "调用的对象。"
    - id: outputs
      type: System.Object[]
      description: "从方法输出。"
    - id: result
      type: System.IAsyncResult
      description: "&lt;Xref:System.IAsyncResult?displayProperty=fullName&gt;对象。"
    return:
      type: System.Object
      description: "返回的值。"
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
  id: IsSynchronous
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  langs:
  - csharp
  name: IsSynchronous
  nameWithType: IOperationInvoker.IsSynchronous
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "获取一个值，指定是否<> *1> 或<> *1> 调度程序调用方法。"
  remarks: "默认调用程序默认情况下，将分派到同步操作的消息。 此值由调度程序缓存，因此不应更改实现<xref:System.ServiceModel.Dispatcher.IOperationInvoker>.</xref:System.ServiceModel.Dispatcher.IOperationInvoker>的对象的生存期内"
  syntax:
    content: public bool IsSynchronous { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果调度程序调用同步操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: AllocateInputs()
  nameWithType: IOperationInvoker.AllocateInputs()
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs()
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(System.Object,System.Object[],System.Object[]@)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: Invoke(Object,Object[],Object[])
  nameWithType: IOperationInvoker.Invoke(Object,Object[],Object[])
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke(Object,Object[],Object[])
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(System.Object,System.Object[],System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: InvokeBegin(Object,Object[],AsyncCallback,Object)
  nameWithType: IOperationInvoker.InvokeBegin(Object,Object[],AsyncCallback,Object)
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin(Object,Object[],AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(System.Object,System.Object[]@,System.IAsyncResult)
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: InvokeEnd(Object,Object[],IAsyncResult)
  nameWithType: IOperationInvoker.InvokeEnd(Object,Object[],IAsyncResult)
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd(Object,Object[],IAsyncResult)
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: IsSynchronous
  nameWithType: IOperationInvoker.IsSynchronous
  fullName: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.AllocateInputs*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: AllocateInputs
  nameWithType: IOperationInvoker.AllocateInputs
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.Invoke*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: Invoke
  nameWithType: IOperationInvoker.Invoke
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeBegin*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: InvokeBegin
  nameWithType: IOperationInvoker.InvokeBegin
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.InvokeEnd*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: InvokeEnd
  nameWithType: IOperationInvoker.InvokeEnd
- uid: System.ServiceModel.Dispatcher.IOperationInvoker.IsSynchronous*
  parent: System.ServiceModel.Dispatcher.IOperationInvoker
  isExternal: false
  name: IsSynchronous
  nameWithType: IOperationInvoker.IsSynchronous
