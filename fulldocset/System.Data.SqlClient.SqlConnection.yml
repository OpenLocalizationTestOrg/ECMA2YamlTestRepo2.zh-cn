### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlConnection
  id: SqlConnection
  children:
  - System.Data.SqlClient.SqlConnection.#ctor
  - System.Data.SqlClient.SqlConnection.#ctor(System.String)
  - System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  - System.Data.SqlClient.SqlConnection.AccessToken
  - System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  - System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  - System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  - System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  - System.Data.SqlClient.SqlConnection.ClearAllPools
  - System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlConnection.ClientConnectionId
  - System.Data.SqlClient.SqlConnection.Close
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  - System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  - System.Data.SqlClient.SqlConnection.ConnectionString
  - System.Data.SqlClient.SqlConnection.ConnectionTimeout
  - System.Data.SqlClient.SqlConnection.CreateCommand
  - System.Data.SqlClient.SqlConnection.CreateDbCommand
  - System.Data.SqlClient.SqlConnection.Credential
  - System.Data.SqlClient.SqlConnection.Database
  - System.Data.SqlClient.SqlConnection.DataSource
  - System.Data.SqlClient.SqlConnection.DbProviderFactory
  - System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  - System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  - System.Data.SqlClient.SqlConnection.GetSchema
  - System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  - System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  - System.Data.SqlClient.SqlConnection.InfoMessage
  - System.Data.SqlClient.SqlConnection.Open
  - System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.SqlClient.SqlConnection.PacketSize
  - System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  - System.Data.SqlClient.SqlConnection.ResetStatistics
  - System.Data.SqlClient.SqlConnection.RetrieveStatistics
  - System.Data.SqlClient.SqlConnection.ServerVersion
  - System.Data.SqlClient.SqlConnection.State
  - System.Data.SqlClient.SqlConnection.StatisticsEnabled
  - System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  - System.Data.SqlClient.SqlConnection.WorkstationId
  langs:
  - csharp
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
  type: Class
  summary: "表示与的开放连接[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]数据库。 此类不能被继承。"
  remarks: "A SqlConnection object represents a unique session to a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] data source. With a client/server database system, it is equivalent to a network connection to the server. SqlConnection is used together with <xref:System.Data.SqlClient.SqlDataAdapter> and <xref:System.Data.SqlClient.SqlCommand> to increase performance when connecting to a Microsoft [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. For all third-party [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] products, and other OLE DB-supported data sources, use <xref:System.Data.OleDb.OleDbConnection>.  \n  \n When you create an instance of SqlConnection, all properties are set to their initial values. For a list of these values, see the SqlConnection constructor.  \n  \n See <xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> for a list of the keywords in a connection string.  \n  \n If the SqlConnection goes out of scope, it won't be closed. Therefore, you must explicitly close the connection by calling `Close` or `Dispose`. `Close` and `Dispose` are functionally equivalent. If the connection pooling value `Pooling` is set to `true` or `yes`, the underlying connection is returned back to the connection pool. On the other hand, if `Pooling` is set to `false` or `no`, the underlying connection to the server is actually closed.  \n  \n> [!NOTE]\n>  Login and logout events will not be raised on the server when a connection is fetched from or returned to the connection pool, because the connection is not actually closed when it is returned to the connection pool. For more information, see [SQL Server Connection Pooling (ADO.NET)](~/add/includes/ajax-current-ext-md.md).  \n  \n To ensure that connections are always closed, open the connection inside of a `using` block, as shown in the following code fragment. Doing so ensures that the connection is automatically closed when the code exits the block.  \n  \n```vb#  \nUsing connection As New SqlConnection(connectionString)  \n    connection.Open()  \n    ' Do work here; connection closed on following line.  \nEnd Using  \n  \n```  \n  \n```c#  \nusing (SqlConnection connection = new SqlConnection(connectionString))  \n    {  \n        connection.Open();  \n        // Do work here; connection closed on following line.  \n    }  \n```  \n  \n> [!NOTE]\n>  To deploy high-performance applications, you must use connection pooling. When you use the [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)] Data Provider for [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)], you do not have to enable connection pooling because the provider manages this automatically, although you can modify some settings. For more information, see [SQL Server Connection Pooling (ADO.NET)](../Topic/SQL%20Server%20Connection%20Pooling%20\\(ADO.NET\\).md).  \n  \n If a <xref:System.Data.SqlClient.SqlException> is generated by the method executing a <xref:System.Data.SqlClient.SqlCommand>, the SqlConnection remains open when the severity level is 19 or less. When the severity level is 20 or greater, the server ordinarily closes the SqlConnection. However, the user can reopen the connection and continue.  \n  \n An application that creates an instance of the SqlConnection object can require all direct and indirect callers to have sufficient permission to the code by setting declarative or imperative security demands. SqlConnection makes security demands using the <xref:System.Data.SqlClient.SqlClientPermission> object. Users can verify that their code has sufficient permissions by using the <xref:System.Data.SqlClient.SqlClientPermissionAttribute> object. Users and administrators can also use the [Caspol.exe (Code Access Security Policy Tool)](~/add/includes/ajax-current-ext-md.md) to modify security policy at the machine, user, and enterprise levels. For more information, see [Security](~/add/includes/ajax-current-ext-md.md). For an example demonstrating how to use security demands, see [Code Access Security and ADO.NET](~/add/includes/ajax-current-ext-md.md).  \n  \n For more information about handling warning and informational messages from the server, see [Connection Events](~/add/includes/ajax-current-ext-md.md). [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] engine errors and error messages are documented in [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] Books Online.  \n  \n> [!CAUTION]\n>  You can force TCP instead of shared memory. You can do that by prefixing tcp: to the server name in the connection string or you can use localhost."
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlCommand> and a SqlConnection. The SqlConnection is opened and set as the <xref:System.Data.SqlClient.SqlCommand.Connection%2A> for the <xref:System.Data.SqlClient.SqlCommand>. The example then calls <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A>. To accomplish this, the <xref:System.Data.SqlClient.SqlCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is a [!INCLUDE[tsql](~/add/includes/tsql-md.md)] INSERT statement. The connection is closed automatically when the code exits the using block.  \n  \n [!code-cs[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._4_1.cs)]\n [!code-vb[Classic WebData SqlCommand.ExecuteNonQuery Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      public sealed class SqlConnection : System.Data.Common.DbConnection, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection()
  nameWithType: SqlConnection.SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>类。"
  remarks: "新实例时<xref:System.Data.SqlClient.SqlConnection>创建读/写属性设置为以下初始值，除非它们专门设置使用在其关联的关键字<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>属性。</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>| 空字符串 (&quot;&quot;) |  |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|&15; |  |<xref:System.Data.SqlClient.SqlConnection.Database%2A>| 空字符串 (&quot;&quot;) |  |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>| 空字符串 (&quot;&quot;) |      你可以更改这些属性的值只能通过使用<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>属性。</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection.DataSource%2A> </xref:System.Data.SqlClient.SqlConnection.Database%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> <xref:System.Data.SqlClient.SqlConnectionStringBuilder>类提供用于创建和管理的连接字符串的内容的功能。</xref:System.Data.SqlClient.SqlConnectionStringBuilder>"
  example:
  - "The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-vb[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._17_1.vb)]\n [!code-cs[Classic WebData SqlConnection.SqlConnection Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._17_1.cs)]"
  syntax:
    content: public SqlConnection ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection(String)
  nameWithType: SqlConnection.SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>类如果给定包含连接字符串的字符串。"
  remarks: "新实例时<xref:System.Data.SqlClient.SqlConnection>创建读/写属性设置为以下初始值，除非它们专门设置使用在其关联的关键字<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>属性。</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>|`connectionString`|  |<xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A>|&15; |  |<xref:System.Data.SqlClient.SqlConnection.Database%2A>| 空字符串 (&quot;&quot;) |  |<xref:System.Data.SqlClient.SqlConnection.DataSource%2A>| 空字符串 (&quot;&quot;) |      你可以更改这些属性的值只能通过使用<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>属性。</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> </xref:System.Data.SqlClient.SqlConnection.DataSource%2A> </xref:System.Data.SqlClient.SqlConnection.Database%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionTimeout%2A> </xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> <xref:System.Data.SqlClient.SqlConnection>类提供用于创建和管理的连接字符串的内容的功能。</xref:System.Data.SqlClient.SqlConnection>"
  example:
  - "The following example creates and opens a <xref:System.Data.SqlClient.SqlConnection>.  \n  \n [!code-vb[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._38_1.vb)]\n [!code-cs[Classic WebData SqlConnection.SqlConnection1 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._38_1.cs)]"
  syntax:
    content: public SqlConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "用于打开的连接[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]数据库。"
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  id: '#ctor(System.String,System.Data.SqlClient.SqlCredential)'
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: SqlConnection(String,SqlCredential)
  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>给定连接字符串，不使用的类<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;></xref>和<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>对象，其中包含用户 ID 和密码。"
  syntax:
    content: public SqlConnection (string connectionString, System.Data.SqlClient.SqlCredential credential);
    parameters:
    - id: connectionString
      type: System.String
      description: '不使用任何以下连接字符串关键字的连接字符串︰ <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>，或<xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>; 或不使用<xref uid=&quot;langword_csharp_ContextConnection = true&quot; name=&quot;ContextConnection = true&quot; href=&quot;&quot;> </xref>。'
    - id: credential
      type: System.Data.SqlClient.SqlCredential
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref> object. 如果`credential`是 null，SqlConnection 功能上等效于&lt;xref:System.Data.SqlClient.SqlConnection.%23ctor%2A&gt;。"
  overload: System.Data.SqlClient.SqlConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.AccessToken
  id: AccessToken
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
  fullName: System.Data.SqlClient.SqlConnection.AccessToken
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置连接的访问令牌。"
  syntax:
    content: public string AccessToken { get; set; }
    return:
      type: System.String
      description: "连接的访问令牌。"
  overload: System.Data.SqlClient.SqlConnection.AccessToken*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "要添加。"
    return:
      type: System.Data.Common.DbTransaction
      description: "要添加。"
  overload: System.Data.SqlClient.SqlConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: SqlConnection.BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "开始数据库事务。"
  remarks: "此命令将映射到[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]BEGIN TRANSACTION 的实现。       你必须显式提交或回滚事务使用<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>或<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 若要确保[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]事务管理模型是否正常运行，请不要使用其他事务管理模型，例如由[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。      1> [!NOTE]&1;> 如果你不指定隔离级别，则使用默认隔离级别。 若要指定隔离级别与<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>方法，请使用采用的重载`iso`参数 (<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>)。</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 设置事务的隔离级别仍然保持事务完成后，直到关闭或断开连接。 隔离将级别设置为**快照**不启用快照隔离级别时的数据库中不会引发异常。 事务将在完成使用的默认隔离级别。      1> [!CAUTION] 1> 如果级别 16 或更高版本的错误发生在服务器上启动事务，事务将不会回滚直到<xref:System.Data.SqlClient.SqlDataReader.Read%2A>调用方法。</xref:System.Data.SqlClient.SqlDataReader.Read%2A> 不引发任何异常**ExecuteReader**。      1> [!CAUTION]&1;> 时，你的查询返回大量的数据和调用`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>因为引发[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]使用 MARS 时不允许并行事务。</xref:System.Data.SqlClient.SqlException> 若要避免此问题，始终将关联事务与命令和 / 或连接之前任何读取器处于打开状态。       有关详细信息[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]事务，请参阅&quot;显式事务&quot;和&quot;编码高效事务&quot;中[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the BeginTransaction, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._1_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._1_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "表示新事务的对象。"
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "使用多个活动结果集 (MARS) 时，不允许并行事务。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不支持并行事务。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "以指定的隔离级别启动数据库事务。"
  remarks: "此命令将映射到[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]BEGIN TRANSACTION 的实现。       你必须显式提交或回滚事务使用<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>或<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 若要确保[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]事务管理模型是否正常运行，请不要使用其他事务管理模型，例如由[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。      1> [!NOTE]&1;> 提交或回滚事务后，事务的隔离级别保持不变，是在自动模式下的所有后续命令 ([!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]默认值)。 这可能会产生意外的结果，如保持和锁定在行外的其他用户 REPEATABLE READ 隔离级别。 若要重置为默认值 (READ COMMITTED) 的隔离级别，请执行[!INCLUDE[tsql](~/add/includes/tsql-md.md)]设置事务隔离级别 READ COMMITTED 语句，或调用的<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName>紧随<xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>.</xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> 有关详细信息[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]隔离级别，请参阅中的&quot;数据库引擎中的隔离级别&quot;[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。       有关详细信息[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]事务，请参阅&quot;显式事务&quot;和&quot;编码高效事务&quot;中[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。      1> [!CAUTION]&1;> 时，你的查询返回大量的数据和调用`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>因为引发[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]使用 MARS 时不允许并行事务。</xref:System.Data.SqlClient.SqlException> 若要避免此问题，始终将关联事务与命令和 / 或连接之前任何读取器处于打开状态。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-vb[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/visualbasic/b09ea924-5f89-4203-b010-_1.vb)]\n [!code-cs[Classic WebData SqlConnection.BeginTransaction1 Example#1](~/add/codesnippet/csharp/b09ea924-5f89-4203-b010-_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso);
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "应在其下运行事务隔离级别。"
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "表示新事务的对象。"
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "使用多个活动结果集 (MARS) 时，不允许并行事务。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不支持并行事务。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  id: BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(String)
  nameWithType: SqlConnection.BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "以指定的事务名称启动数据库事务。"
  remarks: "此命令将映射到[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]BEGIN TRANSACTION 的实现。       长度`transactionName`参数不能超过 32 个字符; 否则将引发异常。       中的值`transactionName`参数可在更高版本调用<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>并在`savePoint`参数<xref:System.Data.SqlClient.SqlTransaction.Save%2A>方法。</xref:System.Data.SqlClient.SqlTransaction.Save%2A> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       你必须显式提交或回滚事务使用<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>或<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 若要确保[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]事务管理模型是否正常运行，请不要使用其他事务管理模型，例如由[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。       有关详细信息[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]事务，请参阅&quot;显式事务&quot;和&quot;编码高效事务&quot;中[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。      1> [!CAUTION]&1;> 时，你的查询返回大量的数据和调用`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>因为引发[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]使用 MARS 时不允许并行事务。</xref:System.Data.SqlClient.SqlException> 若要避免此问题，始终将关联事务与命令和 / 或连接之前任何读取器处于打开状态。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._36_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._36_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (string transactionName);
    parameters:
    - id: transactionName
      type: System.String
      description: "事务的名称。"
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "表示新事务的对象。"
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "使用多个活动结果集 (MARS) 时，不允许并行事务。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不支持并行事务。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  id: BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel,String)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "使用指定的隔离级别和事务名称启动数据库事务。"
  remarks: "此命令将映射到[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]BEGIN TRANSACTION 的实现。       中的值`transactionName`参数可在更高版本调用<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>并在`savePoint`参数<xref:System.Data.SqlClient.SqlTransaction.Save%2A>方法。</xref:System.Data.SqlClient.SqlTransaction.Save%2A> </xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>       你必须显式提交或回滚事务使用<xref:System.Data.SqlClient.SqlTransaction.Commit%2A>或<xref:System.Data.SqlClient.SqlTransaction.Rollback%2A>方法。</xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> </xref:System.Data.SqlClient.SqlTransaction.Commit%2A> 若要确保[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]事务管理模型是否正常运行，请不要使用其他事务管理模型，例如由[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。      1> [!NOTE]&1;> 提交或回滚事务后，事务的隔离级别保持不变，是在自动模式下的所有后续命令 ([!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]默认值)。 这可能会产生意外的结果，如保持和锁定在行外的其他用户 REPEATABLE READ 隔离级别。 若要重置为默认值 (READ COMMITTED) 的隔离级别，请执行[!INCLUDE[tsql](~/add/includes/tsql-md.md)]设置事务隔离级别 READ COMMITTED 语句，或调用的<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName>紧随<xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName>.</xref:System.Data.SqlClient.SqlTransaction.Commit%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A?displayProperty=fullName> 有关详细信息[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]隔离级别，请参阅中的&quot;数据库引擎中的隔离级别&quot;[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。       有关详细信息[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]事务，请参阅&quot;显式事务&quot;和&quot;编码高效事务&quot;中[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。      1> [!CAUTION]&1;> 时，你的查询返回大量的数据和调用`BeginTransaction`、<xref:System.Data.SqlClient.SqlException>因为引发[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]使用 MARS 时不允许并行事务。</xref:System.Data.SqlClient.SqlException> 若要避免此问题，始终将关联事务与命令和 / 或连接之前任何读取器处于打开状态。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and a <xref:System.Data.SqlClient.SqlTransaction>. It also demonstrates how to use the <xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>, a <xref:System.Data.SqlClient.SqlTransaction.Commit%2A>, and <xref:System.Data.SqlClient.SqlTransaction.Rollback%2A> methods.  \n  \n [!code-cs[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/csharp/1f00ab5d-aff7-46ea-8f1d-_1.cs)]\n [!code-vb[Classic WebData SqlConnection.BeginTransaction3 Example#1](~/add/codesnippet/visualbasic/1f00ab5d-aff7-46ea-8f1d-_1.vb)]"
  syntax:
    content: public System.Data.SqlClient.SqlTransaction BeginTransaction (System.Data.IsolationLevel iso, string transactionName);
    parameters:
    - id: iso
      type: System.Data.IsolationLevel
      description: "应在其下运行事务隔离级别。"
    - id: transactionName
      type: System.String
      description: "事务的名称。"
    return:
      type: System.Data.SqlClient.SqlTransaction
      description: "表示新事务的对象。"
  overload: System.Data.SqlClient.SqlConnection.BeginTransaction*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "使用多个活动结果集 (MARS) 时，不允许并行事务。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不支持并行事务。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: SqlConnection.ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "更改当前数据库已打开<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>。"
  remarks: "中提供的值`database`参数必须是有效的数据库名称。 `database`参数不能包含 null 值、 空字符串或仅有空白字符的字符串。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._10_1.cs)]\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._10_1.vb)]"
  syntax:
    content: public override void ChangeDatabase (string database);
    parameters:
    - id: database
      type: System.String
      description: "要使用而不是当前数据库的数据库的名称。"
  overload: System.Data.SqlClient.SqlConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数据库名称无效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "连接未打开。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "无法更改数据库。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  id: ChangePassword(System.String,System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangePassword(String,String)
  nameWithType: SqlConnection.ChangePassword(String,String)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "更改[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]用户密码提供新密码的连接字符串中所示。"
  remarks: "如果要使用[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]Windows 服务器上，开发人员可以利用使客户端应用程序提供当前和新密码才能更改现有密码的功能。 应用程序可以实现功能，如在初始登录期间提示用户输入新密码，如果旧已过期，并且可以完成此操作，而无需管理员干预。       ChangePassword 方法更改[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]用户密码所示提供`connectionString`参数中提供的值`newPassword`参数。 如果连接字符串将包括集成安全性的选项 (即&quot;集成的安全性 = True&quot;或同等身份)，将引发异常。       若要确定的密码已过期，这将调用的<xref:System.Data.SqlClient.SqlConnection.Open%2A>方法将引发一种<xref:System.Data.SqlClient.SqlException>。</xref:System.Data.SqlClient.SqlException> </xref:System.Data.SqlClient.SqlConnection.Open%2A> 若要指示，则必须重置连接字符串中包含的密码，<xref:System.Data.SqlClient.SqlException.Number%2A>异常的属性包含状态值 18487 或 18488。</xref:System.Data.SqlClient.SqlException.Number%2A> 第一个值 (18487) 指示的密码已过期，而第二个 (18488) 指示在登录之前，必须重置密码。       此方法打开其自己的连接到服务器，请求密码更改，并已完成后立即关闭连接。 此连接不检索从，也不会返回到，[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]连接池。"
  example:
  - "The following is a simple example of changing a password:  \n  \n```  \nclass Program {  \n   static void Main(string[] args) {  \n      System.Data.SqlClient.SqlConnection.ChangePassword(  \n        \"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\",   \n       \"new_password\");  \n   }  \n}  \n  \n```  \n  \n```  \nModule Module1  \n    Sub Main()  \nSystem.Data.SqlClient.SqlConnection.ChangePassword(  \n        \"Data Source=a_server;Initial Catalog=a_database;UID=user;PWD=old_password\",   \n       \"new_password\")  \n    End Sub  \nEnd Module  \n  \n```  \n  \n The following console application demonstrates the issues involved in changing a user's password because the current password has expired.  \n  \n [!code-cs[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/csharp/7b66f468-c7fc-4a76-bd4e-_1.cs)]\n [!code-vb[DataWorks SqlConnection.ChangePassword#1](~/add/codesnippet/visualbasic/7b66f468-c7fc-4a76-bd4e-_1.vb)]"
  syntax:
    content: public static void ChangePassword (string connectionString, string newPassword);
    parameters:
    - id: connectionString
      type: System.String
      description: "包含足够的信息来连接到服务器所需的连接字符串。 连接字符串必须包含的用户 ID 和当前密码。"
    - id: newPassword
      type: System.String
      description: "要设置的新密码。 此密码必须符合在服务器上，包括最小长度、 特定字符，依次类推要求设置的任何密码安全策略。"
  overload: System.Data.SqlClient.SqlConnection.ChangePassword*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "该连接字符串包含要使用集成的安全性的选项。       或者<code> newPassword </code>超过 128 个字符。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "任一<code> connectionString </code>或<code> newPassword </code>参数为 null。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  id: ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ChangePassword(String,SqlCredential,SecureString)
  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "更改[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]用户密码中所示<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>对象。"
  syntax:
    content: public static void ChangePassword (string connectionString, System.Data.SqlClient.SqlCredential credential, System.Security.SecureString newSecurePassword);
    parameters:
    - id: connectionString
      type: System.String
      description: '包含足够的信息来连接到服务器的连接字符串。 连接字符串不应使用任何以下连接字符串关键字︰ <xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>，或<xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>; 或<xref uid=&quot;langword_csharp_ContextConnection = true&quot; name=&quot;ContextConnection = true&quot; href=&quot;&quot;> </xref>。'
    - id: credential
      type: System.Data.SqlClient.SqlCredential
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref> object."
    - id: newSecurePassword
      type: System.Security.SecureString
      description: "新密码。 `newSecurePassword`必须为只读模式。 该密码也必须符合 （例如，最小长度和特定字符要求） 在服务器上设置任何密码安全策略。"
  overload: System.Data.SqlClient.SqlConnection.ChangePassword*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "1.连接字符串包含的任意组合<xref uid=&quot;langword_csharp_UserId&quot; name=&quot;UserId&quot; href=&quot;&quot;> </xref>， <xref uid=&quot;langword_csharp_Password&quot; name=&quot;Password&quot; href=&quot;&quot;> </xref>，或<xref uid=&quot;langword_csharp_Integrated Security=true&quot; name=&quot;Integrated Security=true&quot; href=&quot;&quot;> </xref>。      2.  连接字符串包含<xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;> </xref>。      3.  <code>newSecurePassword</code>大于 128 个字符。      4.  <code>newSecurePassword</code>不是只读。      5.  <code>newSecurePassword</code>为一个空字符串。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "One of the parameters (<code>connectionString</code>, <code>credential</code>, or <code>newSecurePassword</code>) is null."
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  id: ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClearAllPools()
  nameWithType: SqlConnection.ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "清空连接池。"
  remarks: "ClearAllPools 重置 （或清空） 的连接池。 如果在调用时使用的连接，它们进行相应的标记并且将被放弃 （而不返回到池） 时<xref:System.Data.SqlClient.SqlConnection.Close%2A>对其调用。</xref:System.Data.SqlClient.SqlConnection.Close%2A>"
  syntax:
    content: public static void ClearAllPools ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.ClearAllPools*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  id: ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClearPool(SqlConnection)
  nameWithType: SqlConnection.ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "清空与指定的连接关联的连接池。"
  remarks: "ClearPool 清除与关联的连接池`connection`。 如果其他连接与关联`connection`是在使用中时调用的它们进行相应的标记，将被丢弃 （而不返回到池） 时<xref:System.Data.SqlClient.SqlConnection.Close%2A>对其调用。</xref:System.Data.SqlClient.SqlConnection.Close%2A>"
  syntax:
    content: public static void ClearPool (System.Data.SqlClient.SqlConnection connection);
    parameters:
    - id: connection
      type: System.Data.SqlClient.SqlConnection
      description: "<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>从池中清除。"
  overload: System.Data.SqlClient.SqlConnection.ClearPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  id: ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "最新的连接尝试，无论该尝试是成功还是失败的连接 ID。"
  remarks: "无论你连接到服务器的哪些版本的 ClientConnectionId 都会正常工作，但扩展的事件日志和上连接环形缓冲区错误项将不会显示在[!INCLUDE[sskatmai_r2](~/add/includes/ajax-current-ext-md.md)]及更早版本。       你可以扩展的事件日志，以查看是否在服务器上已失败是否启用日志记录连接 ID 的扩展的事件中找到的连接 ID。 你还可以连接环形缓冲区中找到的连接 ID ([连接中使用连接环形缓冲区的 SQL Server 2008 的故障排除](http://go.microsoft.com/fwlink/?LinkId=207752)) 对于某些连接错误。 如果连接 ID 不是连接环形缓冲区中，你可以假定网络错误。"
  syntax:
    content: public Guid ClientConnectionId { get; }
    return:
      type: System.Guid
      description: "尝试最新的连接的连接 ID。"
  overload: System.Data.SqlClient.SqlConnection.ClientConnectionId*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Close
  id: Close
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Close()
  nameWithType: SqlConnection.Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "关闭到数据库的连接。 这是关闭任何打开连接的首选的方法。"
  remarks: "Close 方法回滚任何挂起的事务。 然后，它将释放到连接池，连接或关闭的连接，如果禁用连接池。      1> [!NOTE]&1;> 挂起的事务开始使用[!INCLUDE[tsql](~/add/includes/tsql-md.md)]或<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>连接重置时，如果启用了连接池时将自动回滚。</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A> 如果连接池处于关闭状态，则事务将回滚之后`SqlConnection.Close`调用。 通过启动事务<xref:System.Transactions>通过控制`System.Transactions`基础结构，而不受`SqlConnection.Close`。</xref:System.Transactions>       应用程序可以调用关闭不止一次。 不会生成异常。       如果<xref:System.Data.SqlClient.SqlConnection>超出范围，则不会关闭。</xref:System.Data.SqlClient.SqlConnection> 因此，必须显式关闭连接通过调用`Close`或`Dispose`。 `Close`和`Dispose`在功能上等效。 如果连接池值`Pooling`设置为`true`或`yes`，则基础连接返回到连接池。 另一方面，如果`Pooling`设置为`false`或`no`，则基础到服务器的连接已关闭。      1> [!NOTE]&1;> 登录和注销事件将不会引发在服务器上时从提取连接或将其返回到连接池，因为未返回到连接池时实际上关闭连接。 有关详细信息，请参阅[SQL Server 连接池 (ADO.NET)](~/add/includes/ajax-current-ext-md.md)。      1> [!CAUTION]&1;> 不调用`Close`或`Dispose`连接、 DataReader 或在任何其他托管的对象上`Finalize`你类的方法。 在终结器中，你应仅释放类直接拥有的非托管的资源。 如果你的类不拥有任何非托管的资源，不包括`Finalize`在类定义的方法。 有关详细信息，请参阅[垃圾回收](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, displays some of its properties. The connection is automatically closed at the end of the `using` block.  \n  \n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._20_1.vb)]\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._20_1.cs)]"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.Close*
  exceptions:
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "在打开连接时出现连接级别错误。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  id: ColumnEncryptionKeyCacheTtl
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置的生存时间的列加密密钥条目的列加密密钥缓存中为[始终加密](https://msdn.microsoft.com/library/mt163865.aspx)功能。 默认值为 2 小时。 0 表示无缓存根本。"
  syntax:
    content: public static TimeSpan ColumnEncryptionKeyCacheTtl { get; set; }
    return:
      type: System.TimeSpan
      description: "时间间隔中。"
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  id: ColumnEncryptionQueryMetadataCacheEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个值，该值指示是否启用查询元数据缓存 (true) 或不针对运行参数化查询的 (false)[始终加密](https://msdn.microsoft.com/library/mt163865.aspx)启用了数据库。 默认值为 true。"
  remarks: "对于参数化查询，SqlClient 往返将向发出 SQL Server 的参数元数据，以查看它需要加密的参数以及如何 （应使用哪个密钥和算法）。 如果应用程序调用相同的查询多个时间，一个额外往返生成指向服务器的每个时，这会降低应用程序性能。       与**ColumnEncryptionQueryMetadataCacheEnabled**设置为 true，如果多次调用了相同的查询，到服务器往返将进行一次。 缓存中有一个非可配置的最大大小参数，设置为 2000年查询。"
  syntax:
    content: public static bool ColumnEncryptionQueryMetadataCacheEnabled { get; set; }
    return:
      type: System.Boolean
      description: "如果启用查询元数据缓存，则返回 true否则为 false。 默认值为 true。"
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  id: ColumnEncryptionTrustedMasterKeyPaths
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "可以为数据库服务器设置受信任密钥路径的列表。 如果在处理应用程序查询驱动程序接收到不在列表的密钥路径，则查询将失败。 此属性提供针对安全攻击涉及提供伪造密钥路径，这可能导致密钥存储凭据泄露受威胁的 SQL Server 的额外保护。"
  syntax:
    content: public static System.Collections.Generic.IDictionary<string,System.Collections.Generic.IList<string>> ColumnEncryptionTrustedMasterKeyPaths { get; }
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}
      description: "适用于列加密的受信任的主密钥路径的列表。"
  overload: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置用来打开字符串[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]数据库。"
  remarks: "ConnectionString 类似于一个 OLE DB 连接字符串，但并不完全相同。 与 OLE DB 或 ADO，不同的连接字符串，则返回等同于用户设置 ConnectionString，安全信息减如果 Persist Security Info 值设置为`false`（默认值）。 [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]不会保留或返回一个连接字符串中的密码，除非 Persist Security Info 设置为`true`。       ConnectionString 属性可用于连接到数据库。 下面的示例演示一个典型的连接字符串。      ```   &quot;Persist Security Info=False;Integrated Security=true;Initial Catalog=Northwind;server=(local)&quot;   ```使用新<xref:System.Data.SqlClient.SqlConnectionStringBuilder>可以在运行时构造有效的连接字符串。</xref:System.Data.SqlClient.SqlConnectionStringBuilder> 有关详细信息，请参阅[连接字符串生成器](~/add/includes/ajax-current-ext-md.md)。       仅当连接关闭时，可以设置 ConnectionString 属性。 连接字符串值的许多具有相应的只读属性。 当设置连接字符串时，将更新这些属性，除非当检测到错误。 在这种情况下，不会更新任何属性。 <xref:System.Data.SqlClient.SqlConnection>属性返回中 ConnectionString 仅包含那些设置。</xref:System.Data.SqlClient.SqlConnection>       若要连接到本地计算机，指定&quot;(local)&quot;的服务器。 如果未指定服务器名称，将尝试连接到本地计算机上的默认实例。       所有连接字符串值 （和相关的属性） 包括密码重置已关闭的连接的连接字符串将重都置。 例如，如果你设置的连接字符串，包括&quot;数据库 = AdventureWorks&quot;，然后重置的连接字符串&quot;数据源 = myserver; 集成的安全性 = true&quot;，则<xref:System.Data.SqlClient.SqlConnection.Database%2A>属性不能再设置为&quot;AdventureWorks&quot;。</xref:System.Data.SqlClient.SqlConnection.Database%2A>       在设置之后立即分析连接字符串。 如果在分析时，运行时异常，如发现语法中的错误<xref:System.ArgumentException>，生成。</xref:System.ArgumentException> 仅当尝试打开连接时，可以找到其他错误。       连接字符串的基本格式包含一系列的用分号分隔的关键字/值对。 等号 （=） 连接每个关键字和它的值。 若要包含的值包含分号、 单引号字符或双引号字符，则该值必须括在双引号内。 如果值包含分号和双引号字符，则该值可以括在单引号中。 单引号也是有用的值以双引号字符开头。 相反，如果值以单引号开头，则可以使用双引号。 如果值包含单引号和双引号字符，每次它的值中发生时，用于将值括起来的引号字符必须采用双重方括号。       若要包含前导或尾随空格的字符串值，则该值必须括在单引号或双引号中。 忽略任何前导空格或尾随空格围绕整数、 布尔值或枚举的值，即使用引号引起来。 但是，将保留在字符串文字关键字或值中的空间。 而不使用分隔符，可能在连接字符串中使用单引号或双引号引号 (例如，数据源 = my&quot;Server 或数据源 = 我的&quot;服务器)，除非引号字符的值中的第一个或最后一个字符。       关键字不区分大小写。       下表列出 ConnectionString 内的关键字值的有效的名称。        以下列表包含连接池内 ConnectionString 的值的有效的名称。 有关详细信息，请参阅[SQL Server 连接池 (ADO.NET)](~/add/includes/ajax-current-ext-md.md)。      -Connection Lifetime （或 Load Balance Timeout）-登记的最大池大小的最小池大小-池当您设置关键字或连接池需要一个布尔值的值时，你可以使用是而不是 &quot;true&quot;，和否而不是 &quot;false&quot;。 整数值表示为字符串。      1> [!NOTE]&1;>[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]使用其自己的协议与进行通信[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。 因此，它不支持使用 ODBC 数据源名称 (DSN) 的连接时到[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]因为它不会添加一个 ODBC 层。      1> [!NOTE]&1;> 通用数据链接 (UDL) 文件不支持[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。      1> [!CAUTION]&1;> 在此版本中，应用程序时应小心构造连接字符串基于用户输入 （例如，从一个对话框，并将其追加到连接字符串中检索用户 ID 和密码信息时）。 应用程序应确保用户不能嵌入在这些值中的其他连接字符串参数 (例如，输入一个密码作为&quot;validpassword; 数据库 = somedb&quot;尝试附加到不同数据库中)。 如果你需要构造基于用户输入的连接字符串，使用新<xref:System.Data.SqlClient.SqlConnectionStringBuilder>，它验证的连接字符串，并有助于避免此问题。</xref:System.Data.SqlClient.SqlConnectionStringBuilder> 请参阅[连接字符串生成器](../Topic/Connection%20String%20Builders.md)有关详细信息。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the ConnectionString property before opening the connection.  \n  \n [!code-vb[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._24_1.vb)]\n [!code-cs[Classic WebData SqlConnection.ConnectionString Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._24_1.cs)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "连接字符串中包含源数据库名称和建立初始连接所需的其他参数。 默认值为空字符串。"
  overload: System.Data.SqlClient.SqlConnection.ConnectionString*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "已提供了无效的连接字符串自变量，或没有提供所需的连接字符串自变量。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取在尝试建立在终止尝试并生成错误之前的连接时所等待的时间。"
  remarks: "你可以通过使用连接等待的时间量设置为超时`Connect``Timeout`或`Connection Timeout`连接字符串中的关键字。 值为 0 表示没有限制，，应当避免在<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>由于尝试连接将无限期等待。</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and sets the `Connection Timeout` to 30 seconds in the connection string. The code opens the connection and displays the ConnectionTimeout property in the console window.  \n  \n [!code-vb[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._28_1.vb)]\n [!code-cs[Classic WebData SqlConnection.ConnectionTimeout Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._28_1.cs)]"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "（以秒为单位） 的时间等待连接打开。 默认值为 15 秒。"
  overload: System.Data.SqlClient.SqlConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "设置的值小于 0。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: SqlConnection.CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "创建并返回<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>与关联的对象<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>。"
  remarks: ''
  example:
  - >-
    [!code-vb[SqlConnection_CreateCommand#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._32_1.vb)]
     [!code-cs[SqlConnection_CreateCommand#1](~/add/codesnippet/csharp/m-system.data.sqlclient._32_1.cs)]
  syntax:
    content: public System.Data.SqlClient.SqlCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref> object."
  overload: System.Data.SqlClient.SqlConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: SqlConnection.CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "要添加。"
  overload: System.Data.SqlClient.SqlConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Credential
  id: Credential
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Credential
  nameWithType: SqlConnection.Credential
  fullName: System.Data.SqlClient.SqlConnection.Credential
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>此连接的对象。"
  remarks: "`Persist Security Info = true`获取的值所需<xref:System.Data.SqlClient.SqlCredential>使用凭据的对象。</xref:System.Data.SqlClient.SqlCredential>       凭据的默认值为 null。       <xref:System.InvalidOperationException>将引发异常:-如果在打开的连接上设置凭据。</xref:System.InvalidOperationException>      -如果凭据设置时`Context Connection=true`。      -如果凭据设置时`Integrated Security = true`。      -如果在连接字符串使用时，设置凭据`Password`。      -如果在连接字符串使用时，设置凭据`UserID`。"
  syntax:
    content: public System.Data.SqlClient.SqlCredential Credential { get; set; }
    return:
      type: System.Data.SqlClient.SqlCredential
      description: "<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;> </xref>此连接的对象。"
  overload: System.Data.SqlClient.SqlConnection.Credential*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Database
  id: Database
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Database
  nameWithType: SqlConnection.Database
  fullName: System.Data.SqlClient.SqlConnection.Database
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取当前数据库或打开连接后要使用的数据库的名称。"
  remarks: "数据库属性会动态更新。 如果你更改当前的数据库使用[!INCLUDE[tsql](~/add/includes/tsql-md.md)]语句或<xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>方法，发送一条信息性消息，并自动更新的属性。</xref:System.Data.SqlClient.SqlConnection.ChangeDatabase%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-cs[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._26_1.cs)]\n [!code-vb[Classic WebData SqlConnection.Database Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._26_1.vb)]"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "当前数据库或数据库打开连接后要使用的名称的名称。 默认值为空字符串。"
  overload: System.Data.SqlClient.SqlConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.DataSource
  id: DataSource
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: SqlConnection.DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取的实例的名称[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]来进行连接。"
  remarks: >-
    > [!NOTE]

    >  The DataSource property returns `null` if the connection string for the <xref:System.Data.SqlClient.SqlConnection> is "context connection=true".
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._62_1.vb)]\n [!code-cs[Classic WebData SqlConnection.DataSource Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._62_1.cs)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "实例的名称[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]来进行连接。 默认值为空字符串。"
  overload: System.Data.SqlClient.SqlConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory
  id: DbProviderFactory
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.DbProviderFactory DbProviderFactory { get; }
    return:
      type: System.Data.Common.DbProviderFactory
      description: "要添加。"
  overload: System.Data.SqlClient.SqlConnection.DbProviderFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: SqlConnection.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "要添加。"
  overload: System.Data.SqlClient.SqlConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "在为分布式事务的指定事务中登记。"
  remarks: "你可以使用<xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>方法在分布式事务中登记。</xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> 因为它登记中的连接<xref:System.Transactions.Transaction>实例， **EnlistTransaction**中可用的功能利用<xref:System.Transactions>命名空间用于管理分布式事务，使其优于**EnlistDistributedTransaction**为此目的。</xref:System.Transactions> </xref:System.Transactions.Transaction> 有关详细信息，请参阅[分布式事务](~/add/includes/ajax-current-ext-md.md)。       你可以继续在现有使用分布式的事务中登记**EnlistDistributedTransaction**方法如果禁用了自动登记。 在现有分布式事务中登记可以确保，如果事务是提交还是回滚，数据源的代码所做的修改也提交或回滚。       `EnlistDistributedTransaction`如果返回的异常<xref:System.Data.SqlClient.SqlConnection>已经启动了使用<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>在某个事务</xref:System.Data.SqlClient.SqlConnection> 但是，如果事务是在数据源上开始的本地事务 (例如，通过显式执行 BEGIN TRANSACTION 语句使用<xref:System.Data.SqlClient.SqlCommand>对象)， **EnlistDistributedTransaction**回滚该本地事务并根据请求在现有分布式事务中登记。</xref:System.Data.SqlClient.SqlCommand> 你不会收到通知，该本地事务已回滚，并且会负责管理任何本地事务没有启动使用<xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>.</xref:System.Data.SqlClient.SqlConnection.BeginTransaction%2A>"
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction transaction);
    parameters:
    - id: transaction
      type: System.EnterpriseServices.ITransaction
      description: "对现有的引用<xref href=&quot;System.EnterpriseServices.ITransaction&quot;></xref>用于登记的。"
  overload: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: SqlConnection.EnlistTransaction(Transaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "在为分布式事务的指定事务中登记。"
  remarks: 'EnlistTransaction 方法可用于分布式事务中登记。 因为它登记中的连接<xref:System.Transactions.Transaction>实例， **EnlistTransaction**中可用的功能利用<xref:System.Transactions>命名空间用于管理分布式事务，使其优于**EnlistDistributedTransaction**，它使用**System.EnterpriseServices.ITransaction**对象。</xref:System.Transactions> </xref:System.Transactions.Transaction> 它还具有略有不同的语义︰ 后在事务中显式登记连接，不能取消登记或第一个事务完成之前在另一个事务中登记。 有关分布式事务的详细信息，请参阅[分布式事务](~/add/includes/ajax-current-ext-md.md)。'
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "对现有的引用<xref href=&quot;System.Transactions.Transaction&quot;></xref>用于登记的。"
  overload: System.Data.SqlClient.SqlConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  id: FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置 FireInfoMessageEventOnUserErrors 属性。"
  remarks: "当设置为的 FireInfoMessageEventOnUserErrors `true`，则以前视为作为现在处理异常的错误<xref:System.Data.SqlClient.SqlConnection.InfoMessage>事件。</xref:System.Data.SqlClient.SqlConnection.InfoMessage> 立即激发和事件处理程序处理的所有事件。 如果是 FireInfoMessageEventOnUserErrors 设置为`false`，然后<xref:System.Data.SqlClient.SqlConnection.InfoMessage>事件处理过程的结尾处。</xref:System.Data.SqlClient.SqlConnection.InfoMessage>      1> [!NOTE] 1> 错误会导致服务器停止处理命令的严重性级别为 17 或更高版本需要作为异常进行处理。 在这种情况下，将引发异常而不考虑如何在中处理错误<xref:System.Data.SqlClient.SqlConnection.InfoMessage>事件。</xref:System.Data.SqlClient.SqlConnection.InfoMessage>       有关处理事件的详细信息，请参阅[连接事件](~/add/includes/ajax-current-ext-md.md)。 有关详细信息生成的错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]引擎，请参阅[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。"
  syntax:
    content: public bool FireInfoMessageEventOnUserErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未设置该 FireInfoMessageEventOnUserErrors 属性;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema
  id: GetSchema
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: SqlConnection.GetSchema()
  fullName: System.Data.SqlClient.SqlConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "返回此数据源的架构信息<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>。 有关方案的详细信息，请参阅[SQL Server 架构集合](http://msdn.microsoft.com/library/ms254969.aspx)。"
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>包含架构信息。"
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: SqlConnection.GetSchema(String)
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "返回此数据源的架构信息<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>使用架构名称指定的字符串。"
  remarks: "你可能需要数据库、 表或列的架构的信息。 此示例:-使用 GetSchema 获取架构信息。      -使用架构限制可获取指定的信息。      -获取架构信息的数据库、 表和某些列。       运行示例之前，你需要创建示例数据库中，使用以下[!INCLUDE[tsql](~/add/includes/tsql-md.md)]: ```   USE [master]   GO      CREATE DATABASE [MySchool]       GO      USE [MySchool]   GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Course](~/add/includes/ajax-current-ext-md.md [nvarchar](10) NOT NULL,   [Year] [smallint] NOT NULL,   [Title] [nvarchar](100) NOT NULL,   [Credits] [int] NOT NULL,   [DepartmentID] [int] NOT NULL,    CONSTRAINT [PK_Course] PRIMARY KEY CLUSTERED    (   [CourseID] ASC,   [Year] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      SET ANSI_NULLS ON   GO   SET QUOTED_IDENTIFIER ON   GO   CREATE TABLE [dbo].[Department](~/add/includes/ajax-current-ext-md.md [int] IDENTITY(1,1) NOT NULL,   [Name] [nvarchar](50) NOT NULL,   [Budget] [money] NOT NULL,   [StartDate] [datetime] NOT NULL,   [Administrator] [int] NULL,    CONSTRAINT [PK_Department] PRIMARY KEY CLUSTERED    (   [DepartmentID] ASC   )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]) ON [PRIMARY]      GO      INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C1045&quot;, 2012, N&quot;Calculus&quot;, 4, 7)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C1061&quot;, 2012, N&quot;Physics&quot;, 4, 1)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C2021&quot;, 2012, N&quot;Composition&quot;, 3, 2)   INSERT [dbo].[Course] ([CourseID], [Year], [Title], [Credits], [DepartmentID]) VALUES (N&quot;C2042&quot;, 2012, N&quot;Literature&quot;, 4, 2)      SET IDENTITY_INSERT [dbo].[Department] ON       INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (1, N&quot;Engineering&quot;, 350000.0000, CAST(0x0000999C00000000 AS DateTime), 2)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (2, N&quot;English&quot;, 120000.0000, CAST(0x0000999C00000000 AS DateTime), 6)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (4, N&quot;Economics&quot;, 200000.0000, CAST(0x0000999C00000000 AS DateTime), 4)   INSERT [dbo].[Department] ([DepartmentID], [Name], [Budget], [StartDate], [Administrator]) VALUES (7, N&quot;Mathematics&quot;, 250024.0000, CAST(0x0000999C00000000 AS DateTime), 3)   SET IDENTITY_INSERT [dbo].[Department] OFF      ALTER TABLE [dbo].[Course]  WITH CHECK ADD  CONSTRAINT [FK_Course_Department] FOREIGN KEY([DepartmentID])   REFERENCES [dbo].[Department] ([DepartmentID])   GO   ALTER TABLE [dbo].[Course] CHECK CONSTRAINT [FK_Course_Department]   GO   ```[如何从数据库获取架构信息](http://code.msdn.microsoft.com/How-to-Get-Schema-b66d62e2)一个 Visual Studio 项目中有此代码示例的 C# 和 Visual Basic 版本。             ```   using System;   using System.Data;   using System.Data.SqlClient;      class Program {      static void Main(string[] args) {            using (SqlConnection conn = new SqlConnection(&quot;Data Source=(local);Initial Catalog=MySchool;Integrated Security=True;Asynchronous Processing=true;&quot;)) {            conn.Open();               // Get the Meta Data for Supported Schema Collections            DataTable metaDataTable = conn.GetSchema(&quot;MetaDataCollections&quot;);               Console.WriteLine(&quot;Meta Data for Supported Schema Collections:&quot;);            ShowDataTable(metaDataTable, 25);            Console.WriteLine();               // Get the schema information of Databases in your instance            DataTable databasesSchemaTable = conn.GetSchema(&quot;Databases&quot;);               Console.WriteLine(&quot;Schema Information of Databases:&quot;);            ShowDataTable(databasesSchemaTable, 25);            Console.WriteLine();               // First, get schema information of all the tables in current database;            DataTable allTablesSchemaTable = conn.GetSchema(&quot;Tables&quot;);               Console.WriteLine(&quot;Schema Information of All Tables:&quot;);            ShowDataTable(allTablesSchemaTable, 20);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Table Type to get             // the specified table(s).            // You can use four restrictions for Table, so you should create a 4 members array.            String[] tableRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Table Type.             // Now we specify the Table Name of the table what we want to get schema information.            tableRestrictions[2] = &quot;Course&quot;;               DataTable courseTableSchemaTable = conn.GetSchema(&quot;Tables&quot;, tableRestrictions);               Console.WriteLine(&quot;Schema Information of Course Tables:&quot;);            ShowDataTable(courseTableSchemaTable, 20);            Console.WriteLine();               // First, get schema information of all the columns in current database.            DataTable allColumnsSchemaTable = conn.GetSchema(&quot;Columns&quot;);               Console.WriteLine(&quot;Schema Information of All Columns:&quot;);            ShowColumns(allColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Column Name to get the specified column(s).            // You can use four restrictions for Column, so you should create a 4 members array.            String[] columnRestrictions = new String[4];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            columnRestrictions[2] = &quot;Course&quot;;            columnRestrictions[3] = &quot;DepartmentID&quot;;               DataTable departmentIDSchemaTable = conn.GetSchema(&quot;Columns&quot;, columnRestrictions);               Console.WriteLine(&quot;Schema Information of DepartmentID Column in Course Table:&quot;);            ShowColumns(departmentIDSchemaTable);            Console.WriteLine();               // First, get schema information of all the IndexColumns in current database            DataTable allIndexColumnsSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;);               Console.WriteLine(&quot;Schema Information of All IndexColumns:&quot;);            ShowIndexColumns(allIndexColumnsSchemaTable);            Console.WriteLine();               // You can specify the Catalog, Schema, Table Name, Constraint Name, Column Name to             // get the specified column(s).            // You can use five restrictions for Column, so you should create a 5 members array.            String[] indexColumnsRestrictions = new String[5];               // For the array, 0-member represents Catalog; 1-member represents Schema;             // 2-member represents Table Name; 3-member represents Constraint Name;4-member represents Column Name.             // Now we specify the Table_Name and Column_Name of the columns what we want to get schema information.            indexColumnsRestrictions[2] = &quot;Course&quot;;            indexColumnsRestrictions[4] = &quot;CourseID&quot;;               DataTable courseIdIndexSchemaTable = conn.GetSchema(&quot;IndexColumns&quot;, indexColumnsRestrictions);               Console.WriteLine(&quot;Index Schema Information of CourseID Column in Course Table:&quot;);            ShowIndexColumns(courseIdIndexSchemaTable);            Console.WriteLine();         }            Console.WriteLine(&quot;Please press any key to exit...&quot;);         Console.ReadKey();      }         private static void ShowDataTable(DataTable table, Int32 length) {         foreach (DataColumn col in table.Columns) {            Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, col.ColumnName);         }         Console.WriteLine();            foreach (DataRow row in table.Rows) {            foreach (DataColumn col in table.Columns) {               if (col.DataType.Equals(typeof(DateTime)))                  Console.Write(&quot;{0,-&quot; + length + &quot;:d}&quot;, row[col]);               else if (col.DataType.Equals(typeof(Decimal)))                  Console.Write(&quot;{0,-&quot; + length + &quot;:C}&quot;, row[col]);               else                  Console.Write(&quot;{0,-&quot; + length + &quot;}&quot;, row[col]);            }            Console.WriteLine();         }      }         private static void ShowDataTable(DataTable table) {         ShowDataTable(table, 14);      }         private static void ShowColumns(DataTable columnsTable) {         var selectedRows = from info in columnsTable.AsEnumerable()                            select new {                               TableCatalog = info[&quot;TABLE_CATALOG&quot;],                               TableSchema = info[&quot;TABLE_SCHEMA&quot;],                               TableName = info[&quot;TABLE_NAME&quot;],                               ColumnName = info[&quot;COLUMN_NAME&quot;],                               DataType = info[&quot;DATA_TYPE&quot;]                            };            Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, &quot;TableCatalog&quot;, &quot;TABLE_SCHEMA&quot;,             &quot;TABLE_NAME&quot;, &quot;COLUMN_NAME&quot;, &quot;DATA_TYPE&quot;);         foreach (var row in selectedRows) {            Console.WriteLine(&quot;{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}&quot;, row.TableCatalog,                row.TableSchema, row.TableName, row.ColumnName, row.DataType);         }      }         private static void ShowIndexColumns(DataTable indexColumnsTable) {         var selectedRows = from info in indexColumnsTable.AsEnumerable()                            select new {                               TableSchema = info[&quot;table_schema&quot;],                               TableName = info[&quot;table_name&quot;],                               ColumnName = info[&quot;column_name&quot;],                               ConstraintSchema = info[&quot;constraint_schema&quot;],                               ConstraintName = info[&quot;constraint_name&quot;],                               KeyType = info[&quot;KeyType&quot;]                            };            Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, &quot;table_schema&quot;, &quot;table_name&quot;, &quot;column_name&quot;, &quot;constraint_schema&quot;, &quot;constraint_name&quot;, &quot;KeyType&quot;);         foreach (var row in selectedRows) {            Console.WriteLine(&quot;{0,-14}{1,-11}{2,-14}{3,-18}{4,-16}{5,-8}&quot;, row.TableSchema,                row.TableName, row.ColumnName, row.ConstraintSchema, row.ConstraintName, row.KeyType);         }      }   }   ```"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "指定要返回的架构的名称。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>包含架构信息。"
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>指定为 null。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: SqlConnection.GetSchema(String,String[])
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "返回此数据源的架构信息<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>架构名称和指定的字符串数组的限制值使用指定的字符串。"
  remarks: "`restrictionValues`参数可以提供*n*深度的值，指定特定集合的限制集合。 若要对给定的限制，设置值，并且未设置其他限制的值，你需要将前面的限制条件设置为`null`然后将为你想要为指定值的限制中的相应值。       此示例为&quot;表&quot;集合。 如果&quot;表&quot;集合具有三个限制-数据库、 所有者、 表名称--并且想要取回仅与&quot;Carl&quot;的所有者关联的表，请将传递以下值︰ null，&quot;Carl&quot;。 如果未传入限制值，默认值用于该限制。 这是相同的映射与传入`null`，即不同于传入的参数值为空字符串。 在这种情况下，空字符串 (&quot;&quot;) 被视为可为指定的参数的值。       有关演示 GetSchema 的代码示例，请参阅<xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>。</xref:System.Data.SqlClient.SqlConnection.GetSchema%2A>"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "指定要返回的架构的名称。"
    - id: restrictionValues
      type: System.String[]
      description: "请求的架构的限制值的一组。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>包含架构信息。"
  overload: System.Data.SqlClient.SqlConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>指定为 null。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: SqlConnection.InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "发生时[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]返回警告或信息性消息。"
  remarks: "要处理警告或信息性消息由服务器发送客户端应创建<xref:System.Data.SqlClient.SqlInfoMessageEventHandler>委托来侦听此事件。</xref:System.Data.SqlClient.SqlInfoMessageEventHandler>       InfoMessage 事件发生时的严重级别为 10 的消息或小于返回[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。 11 到 20 之间的严重性的消息将引发错误和消息严重性相比，20 原因要关闭的连接。 有关详细信息[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]错误级别，请参阅中的&quot;数据库引擎错误严重性&quot;[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。       有关详细信息及示例，请参阅[连接事件](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.Data.SqlClient.SqlInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.SqlClient.SqlInfoMessageEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.Open
  id: Open
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: Open()
  nameWithType: SqlConnection.Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指定受支持<xref:System.Data.SqlClient.SqlConnection.ConnectionString*>。</xref:System.Data.SqlClient.SqlConnection.ConnectionString*>属性设置打开一个数据库连接"
  remarks: "<xref:System.Data.SqlClient.SqlConnection>从连接池中绘制的开放连接，如果有的话。</xref:System.Data.SqlClient.SqlConnection> 否则，它在建立新连接到的实例[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。      1> [!NOTE]&1;> 如果<xref:System.Data.SqlClient.SqlConnection>超出范围，它没有闭合是。</xref:System.Data.SqlClient.SqlConnection> 因此，你显式必须通过调用<xref:System.Data.SqlClient.SqlConnection.Close%2A>.</xref:System.Data.SqlClient.SqlConnection.Close%2A>关闭连接      1> [!NOTE] 1> 如果指定的端口号 1433 时要连接到的实例不[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]和使用以外的其他 TCP/IP 协议，Open 方法失败。 若要指定除 1433年以外的端口号，包括&quot;server = machinename，端口号&quot;中的连接字符串和使用 TCP/IP 协议。      1> [!NOTE]&1;>[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]需要使用&quot;允许对非托管程序集调用&quot;启用安全权限 (<xref:System.Security.Permissions.SecurityPermission>与<xref:System.Security.Permissions.SecurityPermissionFlag>设置为`UnmanagedCode`) 以打开<xref:System.Data.SqlClient.SqlConnection>启用 SQL 调试。</xref:System.Data.SqlClient.SqlConnection> </xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermission>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, opens it, and displays some of its properties. The connection is automatically closed at the end of the `using` block.  \n  \n [!code-vb[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._18_1.vb)]\n [!code-cs[Classic WebData SqlConnection.Open Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._18_1.cs)]"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "无法打开的连接，而无需指定数据源或服务器。       或连接已打开。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "打开连接时出现连接级别错误。 如果<> *1> 属性包含值 18487 或 18488，这表明指定的密码已过期或必须重置。请参阅<> *1> 有关详细信息的方法。       <xref uid=&quot;langword_csharp_&lt;system.data.localdb&gt;&quot; name=&quot;&lt;system.data.localdb&gt;&quot; href=&quot;&quot;> </xref> App.config 文件中的标记具有无效或未知元素。"
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "有两个条目具有相同名称在<xref uid=&quot;langword_csharp_&lt;localdbinstances&gt;&quot; name=&quot;&lt;localdbinstances&gt;&quot; href=&quot;&quot;></xref>部分。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  id: OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: OpenAsync(CancellationToken)
  nameWithType: SqlConnection.OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "异步版本<> *1>，可与由指定的属性设置打开数据库连接<> *1>。 取消标记可用于请求在连接超时超过前放弃操作。  异常将通过返回的任务传播。 如果连接超时时间已过未成功连接，则返回的任务将被标记为附带异常出错。 实现返回一个任务，而不会阻止调用线程用于共用和非共用连接。"
  remarks: "调用 OpenAsync 之后,<xref:System.Data.SqlClient.SqlConnection.State%2A>必须返回<xref:System.Data.ConnectionState>直到返回<xref:System.Threading.Tasks.Task>完成。</xref:System.Threading.Tasks.Task> </xref:System.Data.ConnectionState> </xref:System.Data.SqlClient.SqlConnection.State%2A> 然后，如果连接成功，<xref:System.Data.SqlClient.SqlConnection.State%2A>必须返回<xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.SqlClient.SqlConnection.State%2A> 如果连接失败，<xref:System.Data.SqlClient.SqlConnection.State%2A>必须返回<xref:System.Data.ConnectionState>.</xref:System.Data.ConnectionState> </xref:System.Data.SqlClient.SqlConnection.State%2A>       调用<xref:System.Data.SqlClient.SqlConnection.Close%2A>将尝试取消或关闭相应的 OpenAsync 调用。</xref:System.Data.SqlClient.SqlConnection.Close%2A>       有关中的异步编程的详细信息[!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]数据提供程序[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，请参阅[异步编程](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override System.Threading.Tasks.Task OpenAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消指令。"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步操作的任务。"
  overload: System.Data.SqlClient.SqlConnection.OpenAsync*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "完成任务前对同一个实例多次调用 OpenAsync。       <xref uid=&quot;langword_csharp_Context Connection=true&quot; name=&quot;Context Connection=true&quot; href=&quot;&quot;></xref>连接字符串中指定。       连接不可用，因而从连接池中之前经过连接超时时间。"
  - type: System.Data.SqlClient.SqlException
    commentId: T:System.Data.SqlClient.SqlException
    description: "返回任何错误[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]打开连接时出现。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  id: PacketSize
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取用来与实例通信的网络数据包的大小 （以字节为单位） [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。"
  remarks: "如果应用程序执行大容量复制操作，或发送或接收大量文本或图像数据，数据包大小大于默认值可能会提高效率，因为它会导致更少的网络读取和写入操作。 如果应用程序发送和接收的信息的信息量很小，你可以将数据包大小设置为 512 个字节 (使用中的数据包大小值<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>)，这对于大多数数据传输操作已经足够。</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A> 对于大多数应用程序，默认数据包大小为最佳数值。       数据包大小可能是中的 512 和 32767 之间的字节范围的值。 如果值超出了此范围，则会生成异常。       将默认值设置为一个数字大于 8000 将导致将使用多页的分配器的实例上的数据包[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]而不要高效得多 SinglePage 分配器，从而减少的总体可伸缩性[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。 有关详细信息如何[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]使用内存，请参阅[内存体系结构](http://go.microsoft.com/fwlink/?LinkId=143705)中[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection>, including setting the `Packet Size` to 512 in the connection string. It displays the PacketSize and <xref:System.Data.SqlClient.SqlConnection.ServerVersion%2A> properties in the console window.  \n  \n [!code-vb[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._63_1.vb)]\n [!code-cs[Classic WebData SqlConnection.PacketSize Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._63_1.cs)]"
  syntax:
    content: public int PacketSize { get; }
    return:
      type: System.Int32
      description: "网络数据包大小 （以字节为单位）。 默认值为 8000。"
  overload: System.Data.SqlClient.SqlConnection.PacketSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  id: RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "注册列加密密钥存储提供程序。"
  syntax:
    content: public static void RegisterColumnEncryptionKeyStoreProviders (System.Collections.Generic.IDictionary<string,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider> customProviders);
    parameters:
    - id: customProviders
      type: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}
      description: "自定义提供程序"
  overload: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  id: ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ResetStatistics()
  nameWithType: SqlConnection.ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "如果启用了统计信息收集，所有值将重都置为零。"
  remarks: "如果未启用统计信息收集，并且在调用此方法，不会引发错误。"
  syntax:
    content: public void ResetStatistics ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnection.ResetStatistics*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  id: RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: RetrieveStatistics()
  nameWithType: SqlConnection.RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "在调用此方法时返回的点处的统计信息的名称值对集合。"
  remarks: "当调用此方法时，检索到的值是当前点处的时间。 如果你继续使用该连接，则值是不正确。 你需要重新执行该方法来获取最新的值。"
  syntax:
    content: public System.Collections.IDictionary RetrieveStatistics ();
    parameters: []
    return:
      type: System.Collections.IDictionary
      description: "返回类型的引用<xref:System.Collections.IDictionary>的<xref:System.Collections.DictionaryEntry>项。</xref:System.Collections.DictionaryEntry> </xref:System.Collections.IDictionary>"
  overload: System.Data.SqlClient.SqlConnection.RetrieveStatistics*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取一个字符串，包含的实例的版本[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]到客户端连接。"
  remarks: "版本的形式*# #。 # #。 # # #*，其中前两个数字是否为主要版本，接下来的两位数字是次要版本，，最后四位数是发布版本。 字符串的形式*major.minor.build*，其中主要和次要是恰好两位，生成是四位数字。       ServerVersion 时返回的任务未完成，且为<xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>。</xref:System.Data.SqlClient.SqlConnection.OpenAsync%2A>调用后未打开连接时被调用"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the ServerVersion property.  \n  \n [!code-vb[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._30_1.vb)]\n [!code-cs[Classic WebData ISqlConnection.ServerVersion Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._30_1.cs)]"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "实例的版本[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]。"
  overload: System.Data.SqlClient.SqlConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "连接已关闭。       ServerVersion 时返回的任务未完成，且为<xref:System.Data.SqlClient.SqlConnection.OpenAsync*>。</xref:System.Data.SqlClient.SqlConnection.OpenAsync*>调用后未打开连接时被调用"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.State
  id: State
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: State
  nameWithType: SqlConnection.State
  fullName: System.Data.SqlClient.SqlConnection.State
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "指示的状态<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>最新的网络操作期间连接上的执行。"
  remarks: "返回<xref:System.Data.ConnectionState>枚举，该值指示<xref:System.Data.SqlClient.SqlConnection>.</xref:System.Data.SqlClient.SqlConnection>的状态</xref:System.Data.ConnectionState> 关闭并重新打开连接将会刷新状态的值。"
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "<xref href=&quot;System.Data.ConnectionState&quot;> </xref>枚举。"
  overload: System.Data.SqlClient.SqlConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  id: StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "当设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，启用统计信息收集当前连接。"
  remarks: "启用统计信息收集小但却显著提高对性能有影响，因此应启用需要时。"
  syntax:
    content: public bool StatisticsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>统计信息收集是否已启用; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>默认值。"
  overload: System.Data.SqlClient.SqlConnection.StatisticsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: SqlConnection.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "创建当前实例副本的新对象。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.SqlClient.SqlConnection>实例被强制转换为<xref:System.ICloneable>接口。</xref:System.ICloneable> </xref:System.Data.SqlClient.SqlConnection>       此成员仅受.NET Compact Framework。"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "此实例副本的新对象。"
  overload: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  id: WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  langs:
  - csharp
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取一个字符串，标识数据库客户端。"
  remarks: "字符串通常包含客户端的网络名称。 WorkstationId 属性对应于`Workstation ID`连接字符串属性。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnection> and displays the WorkstationId property.  \n  \n [!code-vb[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._7_1.vb)]\n [!code-cs[Classic WebData SqlConnection.WorkstationId Example#1](~/add/codesnippet/csharp/p-system.data.sqlclient._7_1.cs)]"
  syntax:
    content: public string WorkstationId { get; }
    return:
      type: System.String
      description: "一个字符串，标识数据库客户端。 如果未指定，客户端计算机的名称。 如果未指定这，值为空字符串。"
  overload: System.Data.SqlClient.SqlConnection.WorkstationId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.Data.SqlClient.SqlException
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlException
  nameWithType: SqlException
  fullName: System.Data.SqlClient.SqlException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Data.SqlClient.SqlConnection.#ctor
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection()
  nameWithType: SqlConnection.SqlConnection()
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection()
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection(String)
  nameWithType: SqlConnection.SqlConnection(String)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlConnection.#ctor(System.String,System.Data.SqlClient.SqlCredential)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection(String,SqlCredential)
  nameWithType: SqlConnection.SqlConnection(String,SqlCredential)
  fullName: System.Data.SqlClient.SqlConnection.SqlConnection(String,SqlCredential)
- uid: System.Data.SqlClient.SqlCredential
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCredential
  nameWithType: SqlCredential
  fullName: System.Data.SqlClient.SqlCredential
- uid: System.Data.SqlClient.SqlConnection.AccessToken
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
  fullName: System.Data.SqlClient.SqlConnection.AccessToken
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: SqlConnection.BeginTransaction()
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction()
- uid: System.Data.SqlClient.SqlTransaction
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlTransaction
  nameWithType: SqlTransaction
  fullName: System.Data.SqlClient.SqlTransaction
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(String)
  nameWithType: SqlConnection.BeginTransaction(String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(String)
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction(System.Data.IsolationLevel,System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel,String)
  nameWithType: SqlConnection.BeginTransaction(IsolationLevel,String)
  fullName: System.Data.SqlClient.SqlConnection.BeginTransaction(IsolationLevel,String)
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: SqlConnection.ChangeDatabase(String)
  fullName: System.Data.SqlClient.SqlConnection.ChangeDatabase(String)
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword(String,String)
  nameWithType: SqlConnection.ChangePassword(String,String)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,String)
- uid: System.Data.SqlClient.SqlConnection.ChangePassword(System.String,System.Data.SqlClient.SqlCredential,System.Security.SecureString)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword(String,SqlCredential,SecureString)
  nameWithType: SqlConnection.ChangePassword(String,SqlCredential,SecureString)
  fullName: System.Data.SqlClient.SqlConnection.ChangePassword(String,SqlCredential,SecureString)
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearAllPools()
  nameWithType: SqlConnection.ClearAllPools()
  fullName: System.Data.SqlClient.SqlConnection.ClearAllPools()
- uid: System.Data.SqlClient.SqlConnection.ClearPool(System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearPool(SqlConnection)
  nameWithType: SqlConnection.ClearPool(SqlConnection)
  fullName: System.Data.SqlClient.SqlConnection.ClearPool(SqlConnection)
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
  fullName: System.Data.SqlClient.SqlConnection.ClientConnectionId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Data.SqlClient.SqlConnection.Close
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Close()
  nameWithType: SqlConnection.Close()
  fullName: System.Data.SqlClient.SqlConnection.Close()
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
  fullName: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
- uid: System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IList{System.String}}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,IList<String>>
  nameWithType: IDictionary<String,IList<String>>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Collections.Generic.IList<System.String>>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Collections.Generic.IList<System.String>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlConnection.ConnectionString
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
  fullName: System.Data.SqlClient.SqlConnection.ConnectionString
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
  fullName: System.Data.SqlClient.SqlConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlConnection.CreateCommand
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: SqlConnection.CreateCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateCommand()
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: SqlConnection.CreateDbCommand()
  fullName: System.Data.SqlClient.SqlConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.SqlClient.SqlConnection.Credential
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Credential
  nameWithType: SqlConnection.Credential
  fullName: System.Data.SqlClient.SqlConnection.Credential
- uid: System.Data.SqlClient.SqlConnection.Database
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Database
  nameWithType: SqlConnection.Database
  fullName: System.Data.SqlClient.SqlConnection.Database
- uid: System.Data.SqlClient.SqlConnection.DataSource
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DataSource
  nameWithType: SqlConnection.DataSource
  fullName: System.Data.SqlClient.SqlConnection.DataSource
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
  fullName: System.Data.SqlClient.SqlConnection.DbProviderFactory
- uid: System.Data.Common.DbProviderFactory
  parent: System.Data.Common
  isExternal: false
  name: DbProviderFactory
  nameWithType: DbProviderFactory
  fullName: System.Data.Common.DbProviderFactory
- uid: System.Data.SqlClient.SqlConnection.Dispose(System.Boolean)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: SqlConnection.Dispose(Boolean)
  fullName: System.Data.SqlClient.SqlConnection.Dispose(Boolean)
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: SqlConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: SqlConnection.EnlistTransaction(Transaction)
  fullName: System.Data.SqlClient.SqlConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
  fullName: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors
- uid: System.Data.SqlClient.SqlConnection.GetSchema
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema()
  nameWithType: SqlConnection.GetSchema()
  fullName: System.Data.SqlClient.SqlConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: SqlConnection.GetSchema(String)
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String)
- uid: System.Data.SqlClient.SqlConnection.GetSchema(System.String,System.String[])
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: SqlConnection.GetSchema(String,String[])
  fullName: System.Data.SqlClient.SqlConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SqlClient.SqlConnection.InfoMessage
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: InfoMessage
  nameWithType: SqlConnection.InfoMessage
  fullName: System.Data.SqlClient.SqlConnection.InfoMessage
- uid: System.Data.SqlClient.SqlInfoMessageEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlInfoMessageEventHandler
  nameWithType: SqlInfoMessageEventHandler
  fullName: System.Data.SqlClient.SqlInfoMessageEventHandler
- uid: System.Data.SqlClient.SqlConnection.Open
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Open()
  nameWithType: SqlConnection.Open()
  fullName: System.Data.SqlClient.SqlConnection.Open()
- uid: System.Data.SqlClient.SqlConnection.OpenAsync(System.Threading.CancellationToken)
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: OpenAsync(CancellationToken)
  nameWithType: SqlConnection.OpenAsync(CancellationToken)
  fullName: System.Data.SqlClient.SqlConnection.OpenAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Data.SqlClient.SqlConnection.PacketSize
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
  fullName: System.Data.SqlClient.SqlConnection.PacketSize
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider})
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
  fullName: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders(IDictionary<String,SqlColumnEncryptionKeyStoreProvider>)
- uid: System.Collections.Generic.IDictionary{System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>
  nameWithType: IDictionary<String,SqlColumnEncryptionKeyStoreProvider>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Data.SqlClient.SqlColumnEncryptionKeyStoreProvider
    name: SqlColumnEncryptionKeyStoreProvider
    nameWithType: SqlColumnEncryptionKeyStoreProvider
    fullName: SqlColumnEncryptionKeyStoreProvider
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ResetStatistics()
  nameWithType: SqlConnection.ResetStatistics()
  fullName: System.Data.SqlClient.SqlConnection.ResetStatistics()
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RetrieveStatistics()
  nameWithType: SqlConnection.RetrieveStatistics()
  fullName: System.Data.SqlClient.SqlConnection.RetrieveStatistics()
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Data.SqlClient.SqlConnection.ServerVersion
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
  fullName: System.Data.SqlClient.SqlConnection.ServerVersion
- uid: System.Data.SqlClient.SqlConnection.State
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: State
  nameWithType: SqlConnection.State
  fullName: System.Data.SqlClient.SqlConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
  fullName: System.Data.SqlClient.SqlConnection.StatisticsEnabled
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: SqlConnection.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlConnection.WorkstationId
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
  fullName: System.Data.SqlClient.SqlConnection.WorkstationId
- uid: System.Data.SqlClient.SqlConnection.#ctor*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection.SqlConnection
- uid: System.Data.SqlClient.SqlConnection.AccessToken*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: AccessToken
  nameWithType: SqlConnection.AccessToken
- uid: System.Data.SqlClient.SqlConnection.BeginDbTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: SqlConnection.BeginDbTransaction
- uid: System.Data.SqlClient.SqlConnection.BeginTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: SqlConnection.BeginTransaction
- uid: System.Data.SqlClient.SqlConnection.ChangeDatabase*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: SqlConnection.ChangeDatabase
- uid: System.Data.SqlClient.SqlConnection.ChangePassword*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ChangePassword
  nameWithType: SqlConnection.ChangePassword
- uid: System.Data.SqlClient.SqlConnection.ClearAllPools*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearAllPools
  nameWithType: SqlConnection.ClearAllPools
- uid: System.Data.SqlClient.SqlConnection.ClearPool*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClearPool
  nameWithType: SqlConnection.ClearPool
- uid: System.Data.SqlClient.SqlConnection.ClientConnectionId*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ClientConnectionId
  nameWithType: SqlConnection.ClientConnectionId
- uid: System.Data.SqlClient.SqlConnection.Close*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Close
  nameWithType: SqlConnection.Close
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionKeyCacheTtl*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionKeyCacheTtl
  nameWithType: SqlConnection.ColumnEncryptionKeyCacheTtl
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionQueryMetadataCacheEnabled
  nameWithType: SqlConnection.ColumnEncryptionQueryMetadataCacheEnabled
- uid: System.Data.SqlClient.SqlConnection.ColumnEncryptionTrustedMasterKeyPaths*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ColumnEncryptionTrustedMasterKeyPaths
  nameWithType: SqlConnection.ColumnEncryptionTrustedMasterKeyPaths
- uid: System.Data.SqlClient.SqlConnection.ConnectionString*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionString
  nameWithType: SqlConnection.ConnectionString
- uid: System.Data.SqlClient.SqlConnection.ConnectionTimeout*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: SqlConnection.ConnectionTimeout
- uid: System.Data.SqlClient.SqlConnection.CreateCommand*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateCommand
  nameWithType: SqlConnection.CreateCommand
- uid: System.Data.SqlClient.SqlConnection.CreateDbCommand*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: SqlConnection.CreateDbCommand
- uid: System.Data.SqlClient.SqlConnection.Credential*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Credential
  nameWithType: SqlConnection.Credential
- uid: System.Data.SqlClient.SqlConnection.Database*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Database
  nameWithType: SqlConnection.Database
- uid: System.Data.SqlClient.SqlConnection.DataSource*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DataSource
  nameWithType: SqlConnection.DataSource
- uid: System.Data.SqlClient.SqlConnection.DbProviderFactory*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: DbProviderFactory
  nameWithType: SqlConnection.DbProviderFactory
- uid: System.Data.SqlClient.SqlConnection.Dispose*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Dispose
  nameWithType: SqlConnection.Dispose
- uid: System.Data.SqlClient.SqlConnection.EnlistDistributedTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: SqlConnection.EnlistDistributedTransaction
- uid: System.Data.SqlClient.SqlConnection.EnlistTransaction*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: SqlConnection.EnlistTransaction
- uid: System.Data.SqlClient.SqlConnection.FireInfoMessageEventOnUserErrors*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: FireInfoMessageEventOnUserErrors
  nameWithType: SqlConnection.FireInfoMessageEventOnUserErrors
- uid: System.Data.SqlClient.SqlConnection.GetSchema*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: GetSchema
  nameWithType: SqlConnection.GetSchema
- uid: System.Data.SqlClient.SqlConnection.Open*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: Open
  nameWithType: SqlConnection.Open
- uid: System.Data.SqlClient.SqlConnection.OpenAsync*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: OpenAsync
  nameWithType: SqlConnection.OpenAsync
- uid: System.Data.SqlClient.SqlConnection.PacketSize*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnection.PacketSize
- uid: System.Data.SqlClient.SqlConnection.RegisterColumnEncryptionKeyStoreProviders*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RegisterColumnEncryptionKeyStoreProviders
  nameWithType: SqlConnection.RegisterColumnEncryptionKeyStoreProviders
- uid: System.Data.SqlClient.SqlConnection.ResetStatistics*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ResetStatistics
  nameWithType: SqlConnection.ResetStatistics
- uid: System.Data.SqlClient.SqlConnection.RetrieveStatistics*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: RetrieveStatistics
  nameWithType: SqlConnection.RetrieveStatistics
- uid: System.Data.SqlClient.SqlConnection.ServerVersion*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: ServerVersion
  nameWithType: SqlConnection.ServerVersion
- uid: System.Data.SqlClient.SqlConnection.State*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: State
  nameWithType: SqlConnection.State
- uid: System.Data.SqlClient.SqlConnection.StatisticsEnabled*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: StatisticsEnabled
  nameWithType: SqlConnection.StatisticsEnabled
- uid: System.Data.SqlClient.SqlConnection.System#ICloneable#Clone*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: SqlConnection.System.ICloneable.Clone
- uid: System.Data.SqlClient.SqlConnection.WorkstationId*
  parent: System.Data.SqlClient.SqlConnection
  isExternal: false
  name: WorkstationId
  nameWithType: SqlConnection.WorkstationId
