### YamlMime:ManagedReference
items:
- uid: System.Web.DynamicData.DynamicFilterExpression
  id: DynamicFilterExpression
  children:
  - System.Web.DynamicData.DynamicFilterExpression.#ctor
  - System.Web.DynamicData.DynamicFilterExpression.ControlID
  - System.Web.DynamicData.DynamicFilterExpression.GetQueryable(System.Linq.IQueryable)
  - System.Web.DynamicData.DynamicFilterExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  langs:
  - csharp
  name: DynamicFilterExpression
  nameWithType: DynamicFilterExpression
  fullName: System.Web.DynamicData.DynamicFilterExpression
  type: Class
  summary: "通过使用指定的筛选器控件中的值修改数据库查询。"
  remarks: "DynamicFilterExpression 类使你能够修改数据库查询使用在分配的值，<xref:System.Web.DynamicData.DynamicFilter>控件。</xref:System.Web.DynamicData.DynamicFilter> 此控件的生成任务委托<xref:System.Linq.IQueryable>查询到专用的控件，例如<xref:System.Web.DynamicData.QueryableFilterRepeater>控件或<xref:System.Web.DynamicData.DynamicFilter>控件。</xref:System.Web.DynamicData.DynamicFilter> </xref:System.Web.DynamicData.QueryableFilterRepeater> </xref:System.Linq.IQueryable>       筛选器控件对它们引用的筛选器模板的查询生成任务反过来委托。 通过引用的数据源控件然后执行查询<xref:System.Web.UI.WebControls.QueryExtender>控件。</xref:System.Web.UI.WebControls.QueryExtender>       若要在页中使用 DynamicFilterExpression 类，你可以执行以下步骤:-添加<xref:System.Web.UI.WebControls.QueryExtender>到页面的控件。</xref:System.Web.UI.WebControls.QueryExtender>      -将设置`TargetControlID`属性<xref:System.Web.UI.WebControls.QueryExtender>控件以引用数据源控件。</xref:System.Web.UI.WebControls.QueryExtender>      -添加 DynamicFilterExpression 对象的子级作为<xref:System.Web.UI.WebControls.QueryExtender>控件。</xref:System.Web.UI.WebControls.QueryExtender>      -将设置`ControlID`DynamicFilterExpression 对象，以引用筛选器控件的属性。       在前面的步骤假定页中定义的相关筛选器控件、 数据绑定控件和数据源控件。"
  example:
  - "The following example shows how to use the DynamicFilterExpression control to select a filter template in a page. The filter template is selected by the <xref:System.Web.DynamicData.DynamicFilter> control that is identified by DynamicFilterExpression control through its `ControID` property.  \n  \n```  \n<asp:QueryExtender ID=\"QueryExtender1\"   \n    TargetControlID=\"GridDataSource\" runat=\"server\">  \n    <asp:DynamicFilterExpression ControlID=\"CategoryFilterID\" />  \n</asp:QueryExtender>  \n```"
  syntax:
    content: 'public class DynamicFilterExpression : System.Web.UI.WebControls.Expressions.DataSourceExpression'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.Expressions.DataSourceExpression
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Context
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.DataSource
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.IsTrackingViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.LoadViewState(System.Object)
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.Owner
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.SaveViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.SetDirty
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#IsTrackingViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#LoadViewState(System.Object)
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#SaveViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.System#Web#UI#IStateManager#TrackViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.TrackViewState
  - System.Web.UI.WebControls.Expressions.DataSourceExpression.ViewState
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilterExpression.#ctor
  id: '#ctor'
  parent: System.Web.DynamicData.DynamicFilterExpression
  langs:
  - csharp
  name: DynamicFilterExpression()
  nameWithType: DynamicFilterExpression.DynamicFilterExpression()
  fullName: System.Web.DynamicData.DynamicFilterExpression.DynamicFilterExpression()
  type: Constructor
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "初始化的新实例<xref href=&quot;System.Web.DynamicData.DynamicFilterExpression&quot;></xref>类。"
  syntax:
    content: public DynamicFilterExpression ();
    parameters: []
  overload: System.Web.DynamicData.DynamicFilterExpression.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilterExpression.ControlID
  id: ControlID
  parent: System.Web.DynamicData.DynamicFilterExpression
  langs:
  - csharp
  name: ControlID
  nameWithType: DynamicFilterExpression.ControlID
  fullName: System.Web.DynamicData.DynamicFilterExpression.ControlID
  type: Property
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "获取或设置筛选器控件标识符。"
  remarks: "使用此控件标识符<xref:System.Web.DynamicData.DynamicFilterExpression>类，以选择的筛选器控制委托给生成的查询，后者反过来执行由数据源控件的任务。</xref:System.Web.DynamicData.DynamicFilterExpression>       筛选器控制将委托将查询生成的筛选器模板到它引用的任务。 通过引用的数据源控件然后执行查询<xref:System.Web.UI.WebControls.QueryExtender>控件。</xref:System.Web.UI.WebControls.QueryExtender>"
  example:
  - "The following example shows how to use the <xref:System.Web.DynamicData.DynamicFilterExpression> class to select a filter control in a page.  \n  \n```  \n<asp:QueryExtender ID=\"QueryExtender1\"   \n    TargetControlID=\"GridDataSource\" runat=\"server\">  \n    <asp:DynamicFilterExpression ControlID=\"CategoryFilterID\" />  \n</asp:QueryExtender>  \n```"
  syntax:
    content: public string ControlID { get; set; }
    return:
      type: System.String
      description: "筛选器控件标识符。"
  overload: System.Web.DynamicData.DynamicFilterExpression.ControlID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilterExpression.GetQueryable(System.Linq.IQueryable)
  id: GetQueryable(System.Linq.IQueryable)
  parent: System.Web.DynamicData.DynamicFilterExpression
  langs:
  - csharp
  name: GetQueryable(IQueryable)
  nameWithType: DynamicFilterExpression.GetQueryable(IQueryable)
  fullName: System.Web.DynamicData.DynamicFilterExpression.GetQueryable(IQueryable)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "获取已修改的查询使用当前的筛选器值。"
  remarks: "GetQueryable 方法会委托到由指定的筛选器控件引用的筛选器模板将查询生成的任务<xref:System.Web.DynamicData.DynamicFilterExpression.ControlID%2A>属性。</xref:System.Web.DynamicData.DynamicFilterExpression.ControlID%2A>"
  syntax:
    content: public override System.Linq.IQueryable GetQueryable (System.Linq.IQueryable source);
    parameters:
    - id: source
      type: System.Linq.IQueryable
      description: "要修改的数据源查询。"
    return:
      type: System.Linq.IQueryable
      description: "使用中包含的当前值来修改数据源查询<xref href=&quot;System.Web.DynamicData.DynamicFilterExpression&quot;></xref>实例。"
  overload: System.Web.DynamicData.DynamicFilterExpression.GetQueryable*
  exceptions: []
  platform:
  - net462
- uid: System.Web.DynamicData.DynamicFilterExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  id: SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  parent: System.Web.DynamicData.DynamicFilterExpression
  langs:
  - csharp
  name: SetContext(Control,HttpContext,IQueryableDataSource)
  nameWithType: DynamicFilterExpression.SetContext(Control,HttpContext,IQueryableDataSource)
  fullName: System.Web.DynamicData.DynamicFilterExpression.SetContext(Control,HttpContext,IQueryableDataSource)
  type: Method
  assemblies:
  - System.Web.DynamicData
  namespace: System.Web.DynamicData
  summary: "初始化表达式与数据源信息。"
  syntax:
    content: public override void SetContext (System.Web.UI.Control owner, System.Web.HttpContext context, System.Web.UI.WebControls.IQueryableDataSource dataSource);
    parameters:
    - id: owner
      type: System.Web.UI.Control
      description: "包含的控件<xref href=&quot;System.Web.DynamicData.DynamicFilterExpression&quot;></xref>实例，如<xref href=&quot;System.Web.UI.WebControls.QueryExtender&quot;></xref>控件。"
    - id: context
      type: System.Web.HttpContext
      description: "当前<xref href=&quot;System.Web.HttpContext&quot;></xref>对象。"
    - id: dataSource
      type: System.Web.UI.WebControls.IQueryableDataSource
      description: "目标数据源<xref href=&quot;System.Web.DynamicData.DynamicFilterExpression&quot;></xref>实例。"
  overload: System.Web.DynamicData.DynamicFilterExpression.SetContext*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.Expressions.DataSourceExpression
  isExternal: false
  name: System.Web.UI.WebControls.Expressions.DataSourceExpression
- uid: System.Web.DynamicData.DynamicFilterExpression.#ctor
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: DynamicFilterExpression()
  nameWithType: DynamicFilterExpression.DynamicFilterExpression()
  fullName: System.Web.DynamicData.DynamicFilterExpression.DynamicFilterExpression()
- uid: System.Web.DynamicData.DynamicFilterExpression.ControlID
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: ControlID
  nameWithType: DynamicFilterExpression.ControlID
  fullName: System.Web.DynamicData.DynamicFilterExpression.ControlID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.DynamicData.DynamicFilterExpression.GetQueryable(System.Linq.IQueryable)
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: GetQueryable(IQueryable)
  nameWithType: DynamicFilterExpression.GetQueryable(IQueryable)
  fullName: System.Web.DynamicData.DynamicFilterExpression.GetQueryable(IQueryable)
- uid: System.Linq.IQueryable
  parent: System.Linq
  isExternal: true
  name: IQueryable
  nameWithType: IQueryable
  fullName: System.Linq.IQueryable
- uid: System.Web.DynamicData.DynamicFilterExpression.SetContext(System.Web.UI.Control,System.Web.HttpContext,System.Web.UI.WebControls.IQueryableDataSource)
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: SetContext(Control,HttpContext,IQueryableDataSource)
  nameWithType: DynamicFilterExpression.SetContext(Control,HttpContext,IQueryableDataSource)
  fullName: System.Web.DynamicData.DynamicFilterExpression.SetContext(Control,HttpContext,IQueryableDataSource)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.UI.WebControls.IQueryableDataSource
  parent: System.Web.UI.WebControls
  isExternal: false
  name: IQueryableDataSource
  nameWithType: IQueryableDataSource
  fullName: System.Web.UI.WebControls.IQueryableDataSource
- uid: System.Web.DynamicData.DynamicFilterExpression.#ctor*
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: DynamicFilterExpression
  nameWithType: DynamicFilterExpression.DynamicFilterExpression
- uid: System.Web.DynamicData.DynamicFilterExpression.ControlID*
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: ControlID
  nameWithType: DynamicFilterExpression.ControlID
- uid: System.Web.DynamicData.DynamicFilterExpression.GetQueryable*
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: GetQueryable
  nameWithType: DynamicFilterExpression.GetQueryable
- uid: System.Web.DynamicData.DynamicFilterExpression.SetContext*
  parent: System.Web.DynamicData.DynamicFilterExpression
  isExternal: false
  name: SetContext
  nameWithType: DynamicFilterExpression.SetContext
