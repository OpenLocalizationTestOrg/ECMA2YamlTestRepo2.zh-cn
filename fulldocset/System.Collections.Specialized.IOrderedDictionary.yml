### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.IOrderedDictionary
  id: IOrderedDictionary
  children:
  - System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  - System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  - System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  - System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  langs:
  - csharp
  name: IOrderedDictionary
  nameWithType: IOrderedDictionary
  fullName: System.Collections.Specialized.IOrderedDictionary
  type: Interface
  summary: "表示键/值对的索引的集合。"
  remarks: "可以访问 IOrderedDictionary 元素，与键或索引。       每个元素是存储在一个键/值对<xref:System.Collections.DictionaryEntry>结构。</xref:System.Collections.DictionaryEntry>       每个对必须具有唯一键不`null`，但该值可以为`null`和不必是唯一的。 IOrderedDictionary 接口允许的所包含的键和值进行枚举，但它并不表示任何特定的排序顺序。       `foreach` C# 语言的语句 (`For Each`在 Visual Basic 中) 返回集合中的元素的类型的对象。 因为每个元素的<xref:System.Collections.IDictionary>是一个键/值对，元素类型不是键的类型或值的类型。</xref:System.Collections.IDictionary> 相反，元素类型是<xref:System.Collections.DictionaryEntry>，如下面的示例所示。</xref:System.Collections.DictionaryEntry>       [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/csharp/t-system.collections.spe_7_1.cs)][!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/cpp/t-system.collections.spe_7_1.cpp)][!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#03](~/add/codesnippet/visualbasic/t-system.collections.spe_7_1.vb) ] `foreach`语句是枚举器，允许从，不写入集合只能读取允许周围的包装器。    "
  example:
  - "The following code example demonstrates the implementation of a simple IOrderedDictionary based on the <xref:System.Collections.ArrayList> class. The implemented IOrderedDictionary stores first names as the keys and last names as the values, with the added requirement that each first name is unique.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/cpp/t-system.collections.spe_7_2.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/csharp/t-system.collections.spe_7_2.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#00](~/add/codesnippet/visualbasic/t-system.collections.spe_7_2.vb)]"
  syntax:
    content: 'public interface IOrderedDictionary : System.Collections.IDictionary'
  implements:
  - System.Collections.IDictionary
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: IOrderedDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "返回的枚举数循环访问<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref>集合。"
  remarks: "[Visual Basic、 C#]      `foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A>  在此位置上，<xref:System.Collections.IEnumerator.Current%2A>属性是不确定。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，则枚举数将失效且不可恢复，而且其行为是不确定。       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以锁定在整个枚举期间的集合。  若要允许访问集合以进行读取和写入的多个线程，则必须实现自己的同步。"
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_15_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_15_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_15_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>整个<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref>集合。</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  id: Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: Insert(Int32,Object,Object)
  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "将键/值对插入到集合中指定索引处。"
  remarks: "<xref:System.Collections.Specialized.IOrderedDictionary>接受`null`作为有效的值，并允许重复的元素。</xref:System.Collections.Specialized.IOrderedDictionary>       如果`index`参数等于<xref:System.Collections.ICollection.Count%2A>、`value`参数添加到末尾<xref:System.Collections.Specialized.IOrderedDictionary>集合。</xref:System.Collections.Specialized.IOrderedDictionary> </xref:System.Collections.ICollection.Count%2A>       在集合中的连续元素，如列表，在插入点之后的元素将下移以容纳新元素。 如果集合具有索引，则移动的元素的索引也将更新。 此行为不适用于元素按概念划分在一起，如哈希表的集合。"
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/36355794-2a11-4b04-824e-_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/36355794-2a11-4b04-824e-_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/36355794-2a11-4b04-824e-_1.vb)]"
  syntax:
    content: public void Insert (int index, object key, object value);
    parameters:
    - id: index
      type: System.Int32
      description: "从零开始的索引，应在此处插入的键/值对。"
    - id: key
      type: System.Object
      description: "要用作要添加的元素的键的对象。"
    - id: value
      type: System.Object
      description: "要用作要添加的元素的值的对象。  该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.IOrderedDictionary.Insert*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于 0。       -<code>index</code>大于<xref:System.Collections.ICollection.Count*>。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中已存在具有相同键的元素<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;></xref>集合。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref>集合是只读的。       -或- <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref>集合具有固定的大小。"
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: IOrderedDictionary.Item(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取或设置指定索引处的元素。"
  remarks: "<xref:System.Collections.Specialized.IOrderedDictionary>接受`null`作为有效的值，并允许重复的元素。</xref:System.Collections.Specialized.IOrderedDictionary>       C# 语言使用关键字来定义而不是实现项属性的索引器。 Visual Basic 实现为默认属性，它提供相同的索引功能的项。       此属性允许你通过使用以下语法访问集合中的特定元素︰ [!code-cs [System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/csharp/p-system.collections.spe_12_1.cs)][!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#04](~/add/codesnippet/cpp/p-system.collections.spe_12_1.cpp)][!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#04    ](~/add/codesnippet/visualbasic/p-system.collections.spe_12_1.vb)]"
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/p-system.collections.spe_12_2.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/p-system.collections.spe_12_2.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/p-system.collections.spe_12_2.vb)]"
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "要获取或设置元素的从零开始索引。"
    return:
      type: System.Object
      description: "指定索引处的元素。"
  overload: System.Collections.Specialized.IOrderedDictionary.Item*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于 0。       -<code>index</code>等于或大于<xref:System.Collections.ICollection.Count*>。"
  platform:
  - net462
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "移除指定索引处的元素。"
  remarks: "在由连续的元素，如列表，集合中移除的元素下面的元素的元素将上移以占据空出的位置。 如果集合具有索引，则移动的元素的索引也将更新。 此行为不适用于元素按概念划分在一起，如哈希表的集合。"
  example:
  - "The following code example demonstrates the implementation of a simple <xref:System.Collections.Specialized.IOrderedDictionary> based on the <xref:System.Collections.ArrayList> class. The implemented <xref:System.Collections.Specialized.IOrderedDictionary> stores first names as the keys and last names as the values, with the added requirement that each first name is unique. This code is part of a larger code example provided for the <xref:System.Collections.Specialized.IOrderedDictionary> class.  \n  \n [!code-cpp[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/cpp/m-system.collections.spe_23_1.cpp)]\n [!code-cs[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/csharp/m-system.collections.spe_23_1.cs)]\n [!code-vb[System.Collections.Specialized.IOrderedDictionary_Implementation#01](~/add/codesnippet/visualbasic/m-system.collections.spe_23_1.vb)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "要移除的元素的从零开始的索引。"
  overload: System.Collections.Specialized.IOrderedDictionary.RemoveAt*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于 0。       -<code>index</code>等于或大于<xref:System.Collections.ICollection.Count*>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref>集合是只读的。       -或- <xref href=&quot;System.Collections.Specialized.IOrderedDictionary&quot;> </xref>集合具有固定的大小。"
  platform:
  - net462
references:
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: IOrderedDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.IOrderedDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert(System.Int32,System.Object,System.Object)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Insert(Int32,Object,Object)
  nameWithType: IOrderedDictionary.Insert(Int32,Object,Object)
  fullName: System.Collections.Specialized.IOrderedDictionary.Insert(Int32,Object,Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Specialized.IOrderedDictionary.Item(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Item(Int32)
  nameWithType: IOrderedDictionary.Item(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.Item(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt(System.Int32)
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: IOrderedDictionary.RemoveAt(Int32)
  fullName: System.Collections.Specialized.IOrderedDictionary.RemoveAt(Int32)
- uid: System.Collections.Specialized.IOrderedDictionary.GetEnumerator*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: IOrderedDictionary.GetEnumerator
- uid: System.Collections.Specialized.IOrderedDictionary.Insert*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Insert
  nameWithType: IOrderedDictionary.Insert
- uid: System.Collections.Specialized.IOrderedDictionary.Item*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: Item
  nameWithType: IOrderedDictionary.Item
- uid: System.Collections.Specialized.IOrderedDictionary.RemoveAt*
  parent: System.Collections.Specialized.IOrderedDictionary
  isExternal: false
  name: RemoveAt
  nameWithType: IOrderedDictionary.RemoveAt
