### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.SemanticResultValue
  id: SemanticResultValue
  children:
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  - System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  - System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  langs:
  - csharp
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
  type: Class
  summary: "表示一个语义值并根据需要将值与语音识别语法的组件相关联。"
  remarks: "使用 SemanticResultValue 和<xref:System.Speech.Recognition.SemanticResultKey>对象，结合<xref:System.Speech.Recognition.GrammarBuilder>，并且<xref:System.Speech.Recognition.Choices>，为设计的一种<xref:System.Speech.Recognition.Grammar>。</xref:System.Speech.Recognition.Grammar>语义结构的最简单方法</xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder></xref:System.Speech.Recognition.SemanticResultKey> 通过获取的实例访问的短语的语义信息<xref:System.Speech.Recognition.SemanticValue>，通过<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>.</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> </xref:System.Speech.Recognition.SemanticValue>      1> [!NOTE]&1;> 由 SemanticResultValue 对象的值由定义<xref:System.Object>实例传递给其构造函数。</xref:System.Object> 基础类型<xref:System.Object>必须`bool`， `int`， `float`，或`string`。</xref:System.Object> 任何其他类型将阻止构造<xref:System.Speech.Recognition.Grammar>实例与 SemanticResultValue。</xref:System.Speech.Recognition.Grammar>       典型使用 SemanticResultValue 实例将该实例关联的可识别组件<xref:System.Speech.Recognition.Grammar>，例如，如果是短语，一条规则，或<xref:System.Speech.Recognition.Choices>对象。</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.Grammar> 如果关联的组件用作识别操作的一部分，SemanticResultValue 用于返回短语的语义中定义的值。       有两种基本方法将 SemanticResultValue 实例语法元素，具体取决于用于创建 SemanticResultValue 的构造函数与相关联。      如果仅值 (由的实例指定<xref:System.Object>) 是用于构造 SemanticResultValue 对象，SemanticResultValue 是与前面，除了该语法组件关联<xref:System.Speech.Recognition.GrammarBuilder>对象。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Object>           例如，在下面，如果中的代码片段<xref:System.Speech.Recognition.Grammar>构造使用此<xref:System.Speech.Recognition.GrammarBuilder>实例识别的单词&quot;后台&quot;，值为`true`设置中识别的短语语义。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>          ```c#       GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);       backgroundGB.Append(new SemanticResultValue(true));       ```有关详细信息，请参阅<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>的说明      -如果将一个字符串值，短语或特定<xref:System.Speech.Recognition.GrammarBuilder>实例是使用以及<xref:System.Object>，指定 SemanticResultValue 值，值会自动与字符串值短语关联或<xref:System.Speech.Recognition.GrammarBuilder>实例。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Object> </xref:System.Speech.Recognition.GrammarBuilder>  如果短语或<xref:System.Speech.Recognition.GrammarBuilder>对象用于识别的过程中，值将分配给所识别的短语的语义。</xref:System.Speech.Recognition.GrammarBuilder>           下面的示例阐释了这一点，并在功能上等效于前面的示例，用于在用户显式调用<xref:System.Speech.Recognition.GrammarBuilder.Append%2A>和<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29>。</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Object%29> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> 如果识别逻辑使用 word&quot;后台&quot;值`true`将添加到可识别的语义。          ```c#       fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;, true));       ```有关详细信息，请参阅<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>和<xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29>.</xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.String%2CSystem.Object%29></xref:System.Speech.Recognition.SemanticResultValue.%23ctor%28System.Speech.Recognition.GrammarBuilder%2CSystem.Object%29>的说明       用于<xref:System.Speech.Recognition.Grammar>在识别中，所有 SemanticResultValue 实例必须都是与一个<xref:System.Speech.Recognition.SemanticValue>对象由该<xref:System.Speech.Recognition.Grammar>.</xref:System.Speech.Recognition.Grammar></xref:System.Speech.Recognition.SemanticValue>相关联</xref:System.Speech.Recognition.Grammar>都 这可通过将语义密钥与 SemanticResultValue 相关联。       语义密钥可以显式附加到 SemanticResultValue 使用<xref:System.Speech.Recognition.SemanticResultKey>对象。</xref:System.Speech.Recognition.SemanticResultKey>  未显式附加到一个密钥 SemanticResultValue 实例附加到默认<xref:System.Speech.Recognition.SemanticValue>.</xref:System.Speech.Recognition.SemanticValue>的根密钥       若要设置应用程序使用，SemanticResultValue 使用后<xref:System.Speech.Recognition.SemanticValue.Value%2A>、 是否使用默认根密钥也可通过任何特定标记<xref:System.Speech.Recognition.SemanticResultKey>、 不能修改该值，或将在识别操作期间发生异常。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticValue.Value%2A>       下面的示例将导致异常，因为它设置，然后修改根<xref:System.Speech.Recognition.SemanticValue.Value%2A>的一种<xref:System.Speech.Recognition.Grammar>。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.SemanticValue.Value%2A>      ```c#   GrammarBuilder gb=new GrammarBuilder();   gb.Append(new SemanticResultValue(&quot;One&quot;));   gb.Append(new SemanticResultValue(&quot;Two&quot;));   ```另一方面，允许在下面的示例代码。 虽然它定义 SemanticResultValue 的多个实例，但是它们包含在<xref:System.Speech.Recognition.Choices>对象，并且只有一个将不断可用于设置键的值`bgOrfgText`。</xref:System.Speech.Recognition.Choices>      ```c#   Choices fgOrbgChoice = new Choices();   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;background&quot;));   fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(&quot;foreground&quot;));   SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(&quot;BgOrFgText&quot;, fgOrbgChoice);   ```有关使用 SemanticResultValue 的详细信息和<xref:System.Speech.Recognition.SemanticResultKey>对象，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)和[使用 SemanticResultKey 提取 SemanticResultValue](http://msdn.microsoft.com/en-us/198e29b8-845f-4cec-a25e-f55c0eaf46aa)中[系统语音.NET Framework 4.0 编程指南](http://msdn.microsoft.com/en-us/610116c7-3817-40ff-857b-5d41e8511043)。</xref:System.Speech.Recognition.SemanticResultKey>"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\".  SemanticResultValue and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(new SemanticResultValue(introGB, String.Format(\"Command: {0}\", introString)));  \n  }    \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n        (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                       cmdIntro,  \n                       new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{_tag.DebugSummary}")]

      public class SemanticResultValue
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>类并指定一个语义的值。"
  remarks: "A`SemanticResultValue`返回此构造函数不是与任何特定语法元素相关联。 关联必须来进行显式转换使用的实例`SemanticResultValue`结合<xref:System.Speech.Recognition.GrammarBuilder>.</xref:System.Speech.Recognition.GrammarBuilder>       例如，在下面，如果中的代码片段<xref:System.Speech.Recognition.Grammar>构造使用此<xref:System.Speech.Recognition.GrammarBuilder>实例识别的单词&quot;后台&quot;，值为`true`设置中识别的短语语义。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>      ```c#   GrammarBuilder backgroundGB=new GrammarBuilder(&quot;background&quot;);   backgroundGB.Append(new SemanticResultValue(true));   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n                 (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n        cmdIntro,   \n        new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (object value);
    parameters:
    - id: value
      type: System.Object
      description: "值由<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>。 Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>类并将关联的语义值<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象。"
  remarks: "如果指定的语法元素<xref:System.Speech.Recognition.GrammarBuilder>识别逻辑中, 使用`value`将识别输出的语义。</xref:System.Speech.Recognition.GrammarBuilder>       下面，如果代码片段中识别逻辑构造<xref:System.Speech.Recognition.GrammarBuilder>实例 (`myGb`) 使用<xref:System.Speech.Recognition.Choices>对象 (`myChoice`) 来标识输入，则这`true`添加到可识别的语义。</xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>      ```c#   myGb.Append(new SemanticResultValue(myChoice, true);   ```作为<xref:System.Speech.Recognition.GrammarBuilder>支持隐式转换为<xref:System.Speech.Recognition.Choices>， `SemanticResultValue`，和<xref:System.Speech.Recognition.SemanticResultKey>，此构造函数可以使用这些对象也。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```c#  \n  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow the command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }           \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n              (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n    }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(  \n                      cmdIntro,  \n                      new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public SemanticResultValue (System.Speech.Recognition.GrammarBuilder builder, object value);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "要在识别中使用的语法组件。"
    - id: value
      type: System.Object
      description: "值由<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>。 Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  id: '#ctor(System.String,System.Object)'
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>类并将关联的语义值<xref:System.String>对象。</xref:System.String>"
  remarks: "如果指定的字符串`phrase`识别逻辑中, 使用`value`将识别输出的语义。       在以下代码片段中，如果使用构造识别逻辑<xref:System.Speech.Recognition.GrammarBuilder>实例 (`myGb`) 使用字符串&quot;我抵押&quot;来标识输入，则这`true`将添加到可识别的语义。</xref:System.Speech.Recognition.GrammarBuilder>      ```c#   myGb.Append(new SemanticResultValue(&quot;my mortgage&quot;, true);   ```"
  example:
  - "The following example returns a <xref:System.Speech.Recognition.Grammar> that recognizes the command \"Set/Change/Alter Foreground/Background … [color list]\". <xref:System.Speech.Recognition.SemanticResultValue> and <xref:System.Speech.Recognition.SemanticResultKey> instances (in conjunction with <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects) are used to define semantics that can be parsed on recognition.  The parsed semantics will determine which color was requested and whether the foreground or background is to be modified.  \n  \n```  \nprivate Grammar FgBgColorGrammar()   \n{  \n  Grammar grammar = null;  \n  \n  // Allow command to begin with set, alter, change.  \n  Choices introChoices = new Choices();  \n  foreach (string introString in new string[] { \"Change\", \"Set\", \"Alter\" })   \n  {  \n    GrammarBuilder introGB = new GrammarBuilder(introString);  \n    introChoices.Add(  \n                  new SemanticResultValue(introGB,  \n                  String.Format(\"Command: {0}\", introString)));  \n  }  \n  \n  GrammarBuilder cmdIntro = new GrammarBuilder(introChoices);  \n  \n  // Define the arguments for the command to select foreground or background   \n  // and to change their color as semantic values.  \n  Choices fgOrbgChoice = new Choices();  \n  GrammarBuilder backgroundGB=new GrammarBuilder(\"background\");  \n  backgroundGB.Append(new SemanticResultValue(true));  \n  fgOrbgChoice.Add(backgroundGB);  \n  fgOrbgChoice.Add((GrammarBuilder)new SemanticResultValue(\"foreground\", false));  \n  SemanticResultKey fgOrbgChoiceKey = new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice);  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    colorChoice.Add(  \n          (GrammarBuilder) (new SemanticResultValue(colorName, (Color.FromName(colorName)).Name)));  \n  }  \n  \n  // Create a GrammarBuilder for CmdArgs to be appended to CmdIntro using  \n  // semantic keys.  \n  GrammarBuilder cmdArgs = new GrammarBuilder();  \n  cmdArgs.Append(new SemanticResultKey(\"BgOrFgBool\", fgOrbgChoice));  \n  cmdArgs.AppendWildcard();  \n  cmdArgs.Append(new SemanticResultKey(\"colorStringList\", colorChoice));  \n  \n  GrammarBuilder cmds =   \n      GrammarBuilder.Add(cmdIntro,  \n                         new GrammarBuilder(new SemanticResultKey(\"Cmd Args\", cmdArgs)));  \n  grammar = new Grammar(cmds);  \n  grammar.Name = \"Tree [Set,change,alter] [foreground,background] * color\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public SemanticResultValue (string phrase, object value);
    parameters:
    - id: phrase
      type: System.String
      description: "用于用于识别的短语。"
    - id: value
      type: System.Object
      description: "值由<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;> </xref>。 Must be of type <xref uid=&quot;langword_csharp_bool&quot; name=&quot;bool&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_int&quot; name=&quot;int&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_float&quot; name=&quot;float&quot; href=&quot;&quot;></xref>, or <xref uid=&quot;langword_csharp_string&quot; name=&quot;string&quot; href=&quot;&quot;></xref>."
  overload: System.Speech.Recognition.SemanticResultValue.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  id: ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  langs:
  - csharp
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "返回的实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>构造从当前<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>实例。"
  remarks: "ToGrammarBuilder 利用相当于使用<xref:System.Speech.Recognition.GrammarBuilder>构造函数采用<xref:System.Speech.Recognition.SemanticResultValue>作为自变量 (<xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29>)。</xref:System.Speech.Recognition.GrammarBuilder.%23ctor%28System.Speech.Recognition.SemanticResultValue%29> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example creates <xref:System.Speech.Recognition.Grammar> objects that support commands to change the background color.  \n  \n A <xref:System.Speech.Recognition.Choices> object (`colorChoice`) containing the list of options for background colors is filled using the [Add(GrammarBuilder\\[\\])](assetId:///M:System.Speech.Recognition.Choices.Add(System.Speech.Recognition.GrammarBuilder[])?qualifyHint=False&autoUpgrade=False) method with <xref:System.Speech.Recognition.GrammarBuilder> instances that are obtained from the <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> method on the `SemanticResultValue` objects created from color strings.  \n  \n A <xref:System.Speech.Recognition.GrammarBuilder> is then obtained by calling <xref:System.Speech.Recognition.SemanticResultKey.ToGrammarBuilder> on a <xref:System.Speech.Recognition.SemanticResultKey> instance, which will be used to key the semantic choices in the `colorChoice` instance.  \n  \n```c#  \n  \nprivate Grammar CreateGrammarBuilderRGBSemantics()   \n{  \n  \n  // Create a set of choices, each a lookup from a color name to RBG.  \n  // Choices constructors do not take a SemanticResultValue parameter, so  \n  // cast SemanticResultValue to GrammarBuilder.  \n  Choices colorChoice = new Choices();  \n  foreach (string colorName in System.Enum.GetNames(typeof(KnownColor)))   \n  {  \n  \n    // Use implicit conversion of SemanticResultValue to GrammarBuilder.      \n    SemanticResultValue colorValue =   \n        new SemanticResultValue(colorName, Color.FromName(colorName).ToArgb());  \n    colorChoice.Add(colorValue.ToGrammarBuilder());  \n  }  \n  \n  SemanticResultKey choiceKey = new SemanticResultKey(\"rgb\", colorChoice);  \n  GrammarBuilder choiceBuilder = choiceKey.ToGrammarBuilder();  \n  \n  // Create two intermediate grammars with an introductory phrase and the  \n  // color choice.  \n  GrammarBuilder makeBackgroundBuilder = \"Make background\";  \n  makeBackgroundBuilder.Append(choiceBuilder);  \n  \n  GrammarBuilder configureBackgroundBuilder = new GrammarBuilder(\"Configure background as\");  \n  configureBackgroundBuilder.Append((new SemanticResultKey(\"rgb\", colorChoice)).ToGrammarBuilder());  \n  \n  // Create the final grammar, which recognizes either intermediate grammar.  \n  Grammar grammar = new Grammar(new Choices(new GrammarBuilder[] { makeBackgroundBuilder, configureBackgroundBuilder }));  \n  grammar.Name = \"Set Background Color\";  \n  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public System.Speech.Recognition.GrammarBuilder ToGrammarBuilder ();
    parameters: []
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "返回的实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>构造从当前<xref href=&quot;System.Speech.Recognition.SemanticResultValue&quot;></xref>实例。"
  overload: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(Object)
  nameWithType: SemanticResultValue.SemanticResultValue(Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(Object)
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.Speech.Recognition.GrammarBuilder,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(GrammarBuilder,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(GrammarBuilder,Object)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.SemanticResultValue.#ctor(System.String,System.Object)
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue(String,Object)
  nameWithType: SemanticResultValue.SemanticResultValue(String,Object)
  fullName: System.Speech.Recognition.SemanticResultValue.SemanticResultValue(String,Object)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder()
  nameWithType: SemanticResultValue.ToGrammarBuilder()
  fullName: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder()
- uid: System.Speech.Recognition.SemanticResultValue.#ctor*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue.SemanticResultValue
- uid: System.Speech.Recognition.SemanticResultValue.ToGrammarBuilder*
  parent: System.Speech.Recognition.SemanticResultValue
  isExternal: false
  name: ToGrammarBuilder
  nameWithType: SemanticResultValue.ToGrammarBuilder
