### YamlMime:ManagedReference
items:
- uid: System.Reflection.Binder
  id: Binder
  children:
  - System.Reflection.Binder.#ctor
  - System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  - System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  - System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  - System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  - System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  - System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  langs:
  - csharp
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
  type: Class
  summary: "从候选项列表中选择成员并执行从实参类型到形参类型的类型转换。"
  remarks: "联编程序类的实现使用的方法<xref:System.Type.InvokeMember%2A?displayProperty=fullName>，如从一组的可能的成员，若要执行，选择基于一组参数类型和自变量值;<xref:System.Type.GetMethod%2A?displayProperty=fullName>，后者选择基于参数类型; 等的方法。</xref:System.Type.GetMethod%2A?displayProperty=fullName> </xref:System.Type.InvokeMember%2A?displayProperty=fullName>       联编程序类的默认实现由<xref:System.Type.DefaultBinder%2A?displayProperty=fullName>属性。</xref:System.Type.DefaultBinder%2A?displayProperty=fullName>"
  example:
  - "The following example implements and demonstrates all members of the `Binder` class. The private method `CanConvertFrom` finds compatible types for a given type.  \n  \n [!code-cpp[Binder_1#1](~/add/codesnippet/cpp/t-system.reflection.binder_1.cpp)]\n [!code-vb[Binder_1#1](~/add/codesnippet/visualbasic/t-system.reflection.binder_1.vb)]\n [!code-cs[Binder_1#1](~/add/codesnippet/csharp/t-system.reflection.binder_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDual)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class Binder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Reflection.Binder.#ctor
  id: '#ctor'
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "初始化的新实例<xref href=&quot;System.Reflection.Binder&quot;></xref>类。"
  remarks: "派生类中，可将在这种类型的状态初始化的构造函数将调用此构造函数。"
  syntax:
    content: protected Binder ();
    parameters: []
  overload: System.Reflection.Binder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  id: BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "从给定的一组字段，基于指定条件中选择一个字段。"
  remarks: "如果`bindingAttr`不包括<xref:System.Reflection.BindingFlags?displayProperty=fullName>，由提供的默认联编程序实现<xref:System.Type.DefaultBinder%2A?displayProperty=fullName>只是返回的第一个元素`match`。</xref:System.Type.DefaultBinder%2A?displayProperty=fullName> </xref:System.Reflection.BindingFlags?displayProperty=fullName> 不进行选择。       此方法由<xref:System.Type.InvokeMember%2A?displayProperty=fullName>.</xref:System.Type.InvokeMember%2A?displayProperty=fullName>绑定的控件"
  syntax:
    content: public abstract System.Reflection.FieldInfo BindToField (System.Reflection.BindingFlags bindingAttr, System.Reflection.FieldInfo[] match, object value, System.Globalization.CultureInfo culture);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "按位组合<xref href=&quot;System.Reflection.BindingFlags&quot;></xref>值。"
    - id: match
      type: System.Reflection.FieldInfo[]
      description: "用于匹配的候选项的字段集。 例如，当<xref href=&quot;System.Reflection.Binder&quot;></xref>使用对象&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;，此参数指定的反射已确定为可能的字段集匹配项，通常是因为它们具有正确的成员名称。 由提供的默认实现&lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt;更改此数组的顺序。"
    - id: value
      type: System.Object
      description: "用于查找匹配的字段的字段值。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "实例<xref:System.Globalization.CultureInfo>用于控制类型强制的数据，强制类型的联编程序实现中。</xref:System.Globalization.CultureInfo> 如果`culture`是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Globalization.CultureInfo>则使用当前线程。</xref:System.Globalization.CultureInfo>       注意︰ 对于示例中，如果联编程序实现允许将值强制转换字符串为数值类型，此参数是必需的要转换<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示 1000 到<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>值，因为不同的区域性以不同方式表示 1000年。 默认的联编程序不执行此类字符串强制。"
    return:
      type: System.Reflection.FieldInfo
      description: "匹配字段。"
  overload: System.Reflection.Binder.BindToField*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "对于默认联编程序， <code> bindingAttr </code>包括<xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>，和<code> match </code>包含同样很好的匹配项的多个字段<code> value </code>。 例如， <code> value </code>包含`MyClass`实现对象`IMyClass`接口，和<code> match </code>包含类型的字段`MyClass`和类型的字段`IMyClass`。"
  - type: System.MissingFieldException
    commentId: T:System.MissingFieldException
    description: "对于默认联编程序， <code> bindingAttr </code>包括<xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>，和<code> match </code>不包含可以接受任何字段<code> value </code>。"
  - type: System.NullReferenceException
    commentId: T:System.NullReferenceException
    description: "对于默认联编程序， <code> bindingAttr </code>包括<xref href=&quot;System.Reflection.BindingFlags&quot;> </xref>，和<code> match </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或为空数组。       -or-       <code>bindingAttr</code> includes <xref href=&quot;System.Reflection.BindingFlags&quot;></xref>, and <code>value</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  id: BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "选择要从给定的一组方法，根据所提供的参数调用的方法。"
  remarks: "默认的联编程序会考虑这两个参数具有值和`params`数组 (`ParamArray` Visual Basic 中的数组)。 因此，很可能在情况下查找匹配项其中`args`和`match`不包含相同数量的元素。       联编程序使客户端将参数数组的映射回其原始格式，如果自变量数组具有已由 BindToMethod 操作。 使用此重新映射功能时应存在的此类参数取回按引用自变量。 当你按名称传递自变量时，活页夹重新排序自变量数组。 `state`参数将跟踪的参数重新排序，从而使活页夹的<xref:System.Reflection.Binder.ReorderArgumentArray%2A>方法能够为其原始形式自变量数组重新排序。</xref:System.Reflection.Binder.ReorderArgumentArray%2A>       将使用 BindToMethod 方法的<xref:System.Type.InvokeMember%2A?displayProperty=fullName>方法。</xref:System.Type.InvokeMember%2A?displayProperty=fullName>"
  syntax:
    content: public abstract System.Reflection.MethodBase BindToMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, ref object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] names, out object state);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "按位组合<xref href=&quot;System.Reflection.BindingFlags&quot;></xref>值。"
    - id: match
      type: System.Reflection.MethodBase[]
      description: "方法用于匹配的候选项集。 例如，当<xref href=&quot;System.Reflection.Binder&quot;></xref>使用对象&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;，此参数指定的反射已确定为可能的方法集匹配项，通常是因为它们具有正确的成员名称。 由提供的默认实现&lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt;更改此数组的顺序。"
    - id: args
      type: System.Object[]
      description: "在传递的参数。 联编程序可以更改此数组中; 中的自变量的顺序例如，默认的联编程序更改参数的顺序，如果`names`参数用于指定位置顺序以外顺序。 如果联编程序实现将自变量类型强制转换，可以以及更改的类型和参数的值。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "启用绑定，以便与在其中修改类型的参数签名一起工作的参数修饰符的数组。 默认的联编程序实现不使用此参数。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "实例<xref:System.Globalization.CultureInfo>用于控制类型强制的数据，强制类型的联编程序实现中。</xref:System.Globalization.CultureInfo> 如果`culture`是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Globalization.CultureInfo>则使用当前线程。</xref:System.Globalization.CultureInfo>       注意︰ 对于示例中，如果联编程序实现允许将值强制转换字符串为数值类型，此参数是必需的要转换<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示 1000 到<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>值，因为不同的区域性以不同方式表示 1000年。 默认的联编程序不执行此类字符串强制。"
    - id: names
      type: System.String[]
      description: "参数名称，如果参数名称都视为匹配时，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果的被视为纯位置自变量。 例如，如果自变量不按位置顺序提供，则必须使用参数名称。"
    - id: state
      type: System.Object
      description: "该方法返回后，`state`包含一个提供联编程序的对象，用于跟踪的参数重新排序。 联编程序创建此对象，并活页夹是此对象的唯一使用者。 如果`state`不<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>时<xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;></xref>返回时，必须传递`state`到<xref:System.Reflection.Binder.ReorderArgumentArray*>方法如果你想要还原`args`到其原始顺序，例如，以便你可以检索的值<xref uid=&quot;langword_csharp_ref&quot; name=&quot;ref&quot; href=&quot;&quot;></xref>参数 (<xref uid=&quot;langword_csharp_ByRef&quot; name=&quot;ByRef&quot; href=&quot;&quot;> </xref>参数在 Visual Basic 中的)。</xref:System.Reflection.Binder.ReorderArgumentArray*>"
    return:
      type: System.Reflection.MethodBase
      description: "匹配的方法。"
  overload: System.Reflection.Binder.BindToMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "对于默认联编程序， <code> match </code>包含同样很好的匹配项的多个方法<code> args </code>。 例如， <code> args </code>包含`MyClass`实现对象`IMyClass`接口，和<code> match </code>包含采用的方法`MyClass`和采用的方法`IMyClass`。"
  - type: System.MissingMethodException
    commentId: T:System.MissingMethodException
    description: "对于默认联编程序， <code> match </code>包含可以接受中提供的参数没有方法<code> args </code>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "对于默认联编程序， <code> match </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或为空数组。"
  platform:
  - net462
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  id: ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "类型更改给定<xref uid=&quot;langword_csharp_Object&quot; name=&quot;Object&quot; href=&quot;&quot;></xref>到给定<xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>。"
  remarks: "反射建模常规类型系统可访问性的规则。 例如，如果调用方在同一程序集，调用方不将特殊权限需要用于内部成员。 否则，调用方需要<xref:System.Security.Permissions.ReflectionPermission>.</xref:System.Security.Permissions.ReflectionPermission> 这是与受保护的成员的查找一致、 专用和等。       一般原则是，`ChangeType`应执行仅扩大强制转换，永远不会丢失数据。 扩大强制的一个示例强制转换为 64 位有符号的整数的值将 32 位有符号的整数的值。 这被有别于收缩强制不同，后者可能会丢失数据。 收缩强制的一个示例强制转换为 32 位有符号整数一个 64 位带符号的整数。       下表列出了默认情况下执行的强制`ChangeType`。      |源类型 |目标类型 |  |-----------------|-----------------|  |任何类型 |与其基类型。 |  |任何类型 |它实现的接口。 |  |Char |UInt16、 UInt32、 Int32、 UInt64、 Int64、 Single、 Double |  |字节 |Char、 UInt16、 Int16、 UInt32、 Int32、 UInt64、 Int64、 Single、 Double |  |SByte |Int16、 Int32、 Int64、 Single、 Double |  |UInt16 |UInt32、 Int32、 UInt64、 Int64、 Single、 Double |  |Int16 |Int32、 Int64、 Single、 Double |  |UInt32 |UInt64、 Int64、 Single、 Double |  |Int32 |Int64、 单，双击 |  |UInt64 |单个，双精度型 |  |Int64 |单个，双精度型 |  |单个 |Double |  |非引用 |按引用。 |"
  syntax:
    content: public abstract object ChangeType (object value, Type type, System.Globalization.CultureInfo culture);
    parameters:
    - id: value
      type: System.Object
      description: "要将更改为一个新的对象<xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref>。"
    - id: type
      type: System.Type
      description: "新<xref uid=&quot;langword_csharp_Type&quot; name=&quot;Type&quot; href=&quot;&quot;> </xref> ，`value`将变得。"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "实例<xref:System.Globalization.CultureInfo>用于控制类型强制的数据。</xref:System.Globalization.CultureInfo> 如果`culture`是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>、<xref:System.Globalization.CultureInfo>则使用当前线程。</xref:System.Globalization.CultureInfo>       注意︰ 对于示例中，此参数是必需要转换<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>表示 1000 到<xref uid=&quot;langword_csharp_Double&quot; name=&quot;Double&quot; href=&quot;&quot;></xref>值，因为不同的区域性以不同方式表示 1000年。"
    return:
      type: System.Object
      description: "一个包含给定的值作为新类型的对象。"
  overload: System.Reflection.Binder.ChangeType*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  id: ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "返回从时<xref:System.Reflection.Binder.BindToMethod*>，还原<code> args </code>它来自时自变量<xref uid=&quot;langword_csharp_BindToMethod&quot; name=&quot;BindToMethod&quot; href=&quot;&quot;> </xref>。</xref:System.Reflection.Binder.BindToMethod*>"
  remarks: "公共语言运行时调用此方法，如果`state`不`null`后从返回`BindToMethod`。"
  syntax:
    content: public abstract void ReorderArgumentArray (ref object[] args, object state);
    parameters:
    - id: args
      type: System.Object[]
      description: "在传递的实际自变量。 可以更改的类型和参数的值。"
    - id: state
      type: System.Object
      description: "一个提供联编程序的对象，用于跟踪的参数重新排序。"
  overload: System.Reflection.Binder.ReorderArgumentArray*
  exceptions: []
  platform:
  - net462
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  id: SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "从给定的一组方法，根据自变量类型选择的方法。"
  remarks: "此方法应返回`null`如果没有方法与条件匹配。 此方法控制由所选内容`GetConstructor`和`GetMethod`方法`Type`。"
  syntax:
    content: public abstract System.Reflection.MethodBase SelectMethod (System.Reflection.BindingFlags bindingAttr, System.Reflection.MethodBase[] match, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "按位组合<xref href=&quot;System.Reflection.BindingFlags&quot;></xref>值。"
    - id: match
      type: System.Reflection.MethodBase[]
      description: "方法用于匹配的候选项集。 例如，当<xref href=&quot;System.Reflection.Binder&quot;></xref>使用对象&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;，此参数指定的反射已确定为可能的方法集匹配项，通常是因为它们具有正确的成员名称。 由提供的默认实现&lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt;更改此数组的顺序。"
    - id: types
      type: System.Type[]
      description: "用于定位匹配方法的参数类型。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "启用绑定，以便与在其中修改类型的参数签名一起工作的参数修饰符的数组。"
    return:
      type: System.Reflection.MethodBase
      description: "匹配方法，如果找到了;否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Reflection.Binder.SelectMethod*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "对于默认联编程序， <code> match </code>包含很好的匹配项所描述的参数类型的多个方法<code> types </code>。 例如中的数组<code> types </code>包含<xref:System.Type>对象`MyClass`和中的数组<code> match </code>包含采用的基类的方法`MyClass`和采用接口的方法`MyClass`实现。</xref:System.Type>"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "对于默认联编程序， <code> match </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或为空数组。       -的元素<code> types </code>派生自<xref:System.Type>，但不是类型<xref uid=&quot;langword_csharp_RuntimeType&quot; name=&quot;RuntimeType&quot; href=&quot;&quot;> </xref>。</xref:System.Type>"
  platform:
  - net462
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  langs:
  - csharp
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Reflection
  summary: "从给定的一组属性，基于指定条件中选择一个属性。"
  remarks: "此方法控制由所选内容`GetProperty`方法`Type`。"
  syntax:
    content: public abstract System.Reflection.PropertyInfo SelectProperty (System.Reflection.BindingFlags bindingAttr, System.Reflection.PropertyInfo[] match, Type returnType, Type[] indexes, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "按位组合<xref href=&quot;System.Reflection.BindingFlags&quot;></xref>值。"
    - id: match
      type: System.Reflection.PropertyInfo[]
      description: "用于匹配的候选项的属性集。 例如，当<xref href=&quot;System.Reflection.Binder&quot;></xref>使用对象&lt;xref:System.Type.InvokeMember%2A?displayProperty=fullName&gt;，此参数指定的反射已确定为可能的属性集匹配项，通常是因为它们具有正确的成员名称。 由提供的默认实现&lt;xref:System.Type.DefaultBinder%2A?displayProperty=fullName&gt;更改此数组的顺序。"
    - id: returnType
      type: System.Type
      description: "必须具有返回值匹配的属性。"
    - id: indexes
      type: System.Type[]
      description: "要搜索的属性索引类型。 用于索引属性，例如一个类的索引器。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "启用绑定，以便与在其中修改类型的参数签名一起工作的参数修饰符的数组。"
    return:
      type: System.Reflection.PropertyInfo
      description: "匹配的属性。"
  overload: System.Reflection.Binder.SelectProperty*
  exceptions:
  - type: System.Reflection.AmbiguousMatchException
    commentId: T:System.Reflection.AmbiguousMatchException
    description: "对于默认联编程序， <code> match </code>包含多个属性都同样很好的匹配项<code> returnType </code>和<code> indexes </code>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "对于默认联编程序， <code> match </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或为空数组。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Reflection.AmbiguousMatchException
  isExternal: true
  name: System.Reflection.AmbiguousMatchException
- uid: System.MissingFieldException
  isExternal: true
  name: System.MissingFieldException
- uid: System.NullReferenceException
  isExternal: true
  name: System.NullReferenceException
- uid: System.MissingMethodException
  isExternal: true
  name: System.MissingMethodException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Reflection.Binder.#ctor
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder()
  nameWithType: Binder.Binder()
  fullName: System.Reflection.Binder.Binder()
- uid: System.Reflection.Binder.BindToField(System.Reflection.BindingFlags,System.Reflection.FieldInfo[],System.Object,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  nameWithType: Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
  fullName: System.Reflection.Binder.BindToField(BindingFlags,FieldInfo[],Object,CultureInfo)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Reflection.Binder.BindToMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Object[]@,System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[],System.Object@)
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  nameWithType: Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
  fullName: System.Reflection.Binder.BindToMethod(BindingFlags,MethodBase[],Object[],ParameterModifier[],CultureInfo,String[],Object)
- uid: System.Reflection.MethodBase
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase
- uid: System.Reflection.MethodBase[]
  parent: System.Reflection
  isExternal: true
  name: MethodBase
  nameWithType: MethodBase
  fullName: System.Reflection.MethodBase[]
  spec.csharp:
  - uid: System.Reflection.MethodBase
    name: MethodBase
    nameWithType: MethodBase
    fullName: MethodBase[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.ChangeType(System.Object,System.Type,System.Globalization.CultureInfo)
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType(Object,Type,CultureInfo)
  nameWithType: Binder.ChangeType(Object,Type,CultureInfo)
  fullName: System.Reflection.Binder.ChangeType(Object,Type,CultureInfo)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Reflection.Binder.ReorderArgumentArray(System.Object[]@,System.Object)
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray(Object[],Object)
  nameWithType: Binder.ReorderArgumentArray(Object[],Object)
  fullName: System.Reflection.Binder.ReorderArgumentArray(Object[],Object)
- uid: System.Reflection.Binder.SelectMethod(System.Reflection.BindingFlags,System.Reflection.MethodBase[],System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  nameWithType: Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectMethod(BindingFlags,MethodBase[],Type[],ParameterModifier[])
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.SelectProperty(System.Reflection.BindingFlags,System.Reflection.PropertyInfo[],System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  nameWithType: Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
  fullName: System.Reflection.Binder.SelectProperty(BindingFlags,PropertyInfo[],Type,Type[],ParameterModifier[])
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.Binder.#ctor*
  parent: System.Reflection.Binder
  isExternal: false
  name: Binder
  nameWithType: Binder.Binder
- uid: System.Reflection.Binder.BindToField*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToField
  nameWithType: Binder.BindToField
- uid: System.Reflection.Binder.BindToMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: BindToMethod
  nameWithType: Binder.BindToMethod
- uid: System.Reflection.Binder.ChangeType*
  parent: System.Reflection.Binder
  isExternal: false
  name: ChangeType
  nameWithType: Binder.ChangeType
- uid: System.Reflection.Binder.ReorderArgumentArray*
  parent: System.Reflection.Binder
  isExternal: false
  name: ReorderArgumentArray
  nameWithType: Binder.ReorderArgumentArray
- uid: System.Reflection.Binder.SelectMethod*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectMethod
  nameWithType: Binder.SelectMethod
- uid: System.Reflection.Binder.SelectProperty*
  parent: System.Reflection.Binder
  isExternal: false
  name: SelectProperty
  nameWithType: Binder.SelectProperty
