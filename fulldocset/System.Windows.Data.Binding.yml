### YamlMime:ManagedReference
items:
- uid: System.Windows.Data.Binding
  id: Binding
  children:
  - System.Windows.Data.Binding.#ctor
  - System.Windows.Data.Binding.#ctor(System.String)
  - System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.AsyncState
  - System.Windows.Data.Binding.BindsDirectlyToSource
  - System.Windows.Data.Binding.Converter
  - System.Windows.Data.Binding.ConverterCulture
  - System.Windows.Data.Binding.ConverterParameter
  - System.Windows.Data.Binding.DoNothing
  - System.Windows.Data.Binding.ElementName
  - System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  - System.Windows.Data.Binding.IndexerName
  - System.Windows.Data.Binding.IsAsync
  - System.Windows.Data.Binding.Mode
  - System.Windows.Data.Binding.NotifyOnSourceUpdated
  - System.Windows.Data.Binding.NotifyOnTargetUpdated
  - System.Windows.Data.Binding.NotifyOnValidationError
  - System.Windows.Data.Binding.Path
  - System.Windows.Data.Binding.RelativeSource
  - System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  - System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  - System.Windows.Data.Binding.ShouldSerializePath
  - System.Windows.Data.Binding.ShouldSerializeSource
  - System.Windows.Data.Binding.ShouldSerializeValidationRules
  - System.Windows.Data.Binding.Source
  - System.Windows.Data.Binding.SourceUpdatedEvent
  - System.Windows.Data.Binding.TargetUpdatedEvent
  - System.Windows.Data.Binding.UpdateSourceExceptionFilter
  - System.Windows.Data.Binding.UpdateSourceTrigger
  - System.Windows.Data.Binding.ValidatesOnDataErrors
  - System.Windows.Data.Binding.ValidatesOnExceptions
  - System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  - System.Windows.Data.Binding.ValidationRules
  - System.Windows.Data.Binding.XmlNamespaceManagerProperty
  - System.Windows.Data.Binding.XPath
  langs:
  - csharp
  name: Binding
  nameWithType: Binding
  fullName: System.Windows.Data.Binding
  type: Class
  summary: "提供对绑定连接绑定目标对象的属性的定义的高级访问权限 (通常情况下，[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]元素)，和任何数据源 (例如，一个数据库，[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]文件或包含数据的任何对象)。"
  remarks: "[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]数据绑定提供了简单的应用程序为与数据交互和呈现的一致方法。 数据绑定可使你可以同步两个不同的对象的属性的值。       若要建立一个绑定，使用的绑定类或某个其他类的继承<xref:System.Windows.Data.BindingBase>.</xref:System.Windows.Data.BindingBase> 你正在绑定而不考虑哪些对象和数据源的性质，每个绑定遵循以下图所示的模型。       ![基本数据绑定示意图](~/add/media/databindingmostbasic.png &quot;基本数据绑定示意图&quot;)图演示以下基本[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]数据绑定概念。      -每个绑定通常具有四个组件︰ 绑定目标对象、 目标属性、 绑定源和一个<xref:System.Windows.Data.Binding.Path%2A>到要使用的绑定源中的值。</xref:System.Windows.Data.Binding.Path%2A> 例如，如果你想要绑定的内容<xref:System.Windows.Controls.TextBox>Employee 对象的名称属性中，你的目标对象是<xref:System.Windows.Controls.TextBox>，target 属性不<xref:System.Windows.Controls.TextBox.Text%2A>属性，要使用的值是名称，并且源对象是 Employee 对象。</xref:System.Windows.Controls.TextBox.Text%2A> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.TextBox>      -目标属性必须是依赖项属性。 这也意味着你无法将的字段绑定。 大部分属性<xref:System.Windows.UIElement>对象是依赖项属性，大多数依赖项属性，除了只读属性，默认情况下支持数据绑定。</xref:System.Windows.UIElement> （仅<xref:System.Windows.DependencyObject>类型可以定义依赖项属性和所有<xref:System.Windows.UIElement>对象都派生自<xref:System.Windows.DependencyObject>。）     -尽管图中未指定，但应注意的是绑定源对象不限制为正在自定义[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]对象。</xref:System.Windows.DependencyObject> </xref:System.Windows.UIElement> </xref:System.Windows.DependencyObject> [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]数据绑定支持数据中的窗体[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]对象和[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]。 若要提供一些示例，您的绑定源可能是<xref:System.Windows.UIElement>，任何列表对象、[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]与关联的对象[!INCLUDE[TLA#tla_adonet](~/add/includes/tlasharptla-adonet-md.md)]数据或 Web 服务或包含是 XmlNode 你[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]数据。</xref:System.Windows.UIElement>       使用<xref:System.Windows.Data.Binding.Mode%2A>属性来指定数据流的方向。</xref:System.Windows.Data.Binding.Mode%2A> 若要检测源更改中单向或双向绑定，源必须实现适当的属性更改通知机制，例如<xref:System.ComponentModel.INotifyPropertyChanged>.</xref:System.ComponentModel.INotifyPropertyChanged> 有关示例，请参阅[如何︰ 实现属性更改通知](~/add/includes/ajax-current-ext-md.md)。 <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>属性指定的源更新的计时。</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> 有关详细信息，请参阅&quot;基本数据绑定概念&quot;[数据绑定概述](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlAttributeUsage_PriorityBinding&quot;></a># # XAML 属性用法```   <object property=&quot;{Binding  declaration}&quot;/>   ``` <a name=&quot;xamlValues_PriorityBinding&quot;> </a> # # XAML 值*声明*由逗号 （，） 分隔的零个或多个属性赋值子句。       有关详细信息，请参阅[绑定标记扩展](~/add/includes/ajax-current-ext-md.md)或[绑定声明概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: 'public class Binding : System.Windows.Data.BindingBase'
  inheritance:
  - System.Windows.Markup.MarkupExtension
  - System.Windows.Data.BindingBase
  implements: []
  inheritedMembers:
  - System.Windows.Data.BindingBase.BindingGroupName
  - System.Windows.Data.BindingBase.Delay
  - System.Windows.Data.BindingBase.FallbackValue
  - System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)
  - System.Windows.Data.BindingBase.ShouldSerializeFallbackValue
  - System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue
  - System.Windows.Data.BindingBase.StringFormat
  - System.Windows.Data.BindingBase.TargetNullValue
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor
  id: '#ctor'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "初始化的新实例<xref href=&quot;System.Windows.Data.Binding&quot;></xref>类。"
  syntax:
    content: public Binding ();
    parameters: []
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "初始化的新实例<xref href=&quot;System.Windows.Data.Binding&quot;></xref>使用初始路径的类。"
  syntax:
    content: public Binding (string path);
    parameters:
    - id: path
      type: System.String
      description: "初始<xref:System.Windows.Data.Binding.Path*>绑定。</xref:System.Windows.Data.Binding.Path*>"
  overload: System.Windows.Data.Binding.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "添加的处理程序<xref:System.Windows.Data.Binding.SourceUpdated>附加事件。</xref:System.Windows.Data.Binding.SourceUpdated>"
  remarks: "此方法支持中的附加的事件使用情况[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public static void AddSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>侦听事件。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "要添加的处理程序。"
  overload: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "添加的处理程序<xref:System.Windows.Data.Binding.TargetUpdated>附加事件。</xref:System.Windows.Data.Binding.TargetUpdated>"
  remarks: "此方法支持中的附加的事件使用情况[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public static void AddTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>侦听事件。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "要添加的处理程序。"
  overload: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.AsyncState
  id: AsyncState
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置传递给异步数据调度程序的不透明数据。"
  syntax:
    content: public object AsyncState { get; set; }
    return:
      type: System.Object
      description: "数据传递给异步数据调度程序。"
  overload: System.Windows.Data.Binding.AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  id: BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示是否计算<xref:System.Windows.Data.Binding.Path*>相对于数据项或<xref href=&quot;System.Windows.Data.DataSourceProvider&quot;></xref>对象。</xref:System.Windows.Data.Binding.Path*>"
  remarks: "正常行为 (当此属性是`false`) 包括特殊处理的<xref:System.Windows.Data.DataSourceProvider>对象。</xref:System.Windows.Data.DataSourceProvider> 在这种情况下，绑定引擎的计算结果<xref:System.Windows.Data.Binding.Path%2A>相对于获取从对象<xref:System.Windows.Data.DataSourceProvider.Data%2A>属性。</xref:System.Windows.Data.DataSourceProvider.Data%2A> </xref:System.Windows.Data.Binding.Path%2A> 此外，绑定还侦听<xref:System.Windows.Data.DataSourceProvider.DataChanged>事件并相应地作出反应。</xref:System.Windows.Data.DataSourceProvider.DataChanged> 此属性设置为`true`重写此行为，并提供的属性绑定访问<xref:System.Windows.Data.DataSourceProvider>对象本身。</xref:System.Windows.Data.DataSourceProvider>"
  syntax:
    content: public bool BindsDirectlyToSource { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>若要计算的路径，相对于数据项然后重试。否则为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.BindsDirectlyToSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Converter
  id: Converter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置要使用的转换器。"
  remarks: "尝试执行类型转换，源值和目标值之间的默认转换器隐式使用的绑定。 如果无法进行转换，则默认转换器返回`null`。       如果你想要将自定义值转换器与绑定相关联，则应创建一个类以实现<xref:System.Windows.Data.IValueConverter>接口，并提供实现<xref:System.Windows.Data.IValueConverter.Convert%2A>和<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>方法。</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> </xref:System.Windows.Data.IValueConverter> 值转换器可以将数据从一种类型更改为另一个、 区域性的详细信息，例如字符集，之间进行转换或修改其表示形式的其他方面。 有关典型转换方案的示例，请参阅&quot;数据转换&quot;[数据绑定概述](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlAttributeUsage_Converter&quot;></a># # XAML 属性用法```   <object Converter=&quot;myConverter&quot;/>   ``` <a name=&quot;xamlValues_Converter&quot;> </a> # # XAML 值*myConverter*对实现的类的资源引用<xref:System.Windows.Data.IValueConverter>接口，包括的实现<xref:System.Windows.Data.IValueConverter.Convert%2A>和<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>方法。</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A> </xref:System.Windows.Data.IValueConverter>       若要引用的值转换器，请使用[否则标记扩展](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Windows.Data.IValueConverter Converter { get; set; }
    return:
      type: System.Windows.Data.IValueConverter
      description: "类型的值<xref href=&quot;System.Windows.Data.IValueConverter&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.Converter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterCulture
  id: ConverterCulture
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置计算转换器要使用的区域性。"
  remarks: "如果未设置此属性，则绑定引擎会使用`Language`绑定目标对象的属性。 在[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]这默认为&quot;EN-US&quot;或从根元素 （或任何元素） 的页上，如果已显式设置了一个继承值。       有关数据转换的信息，请参阅中的数据转换部分[数据绑定概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Globalization.CultureInfo ConverterCulture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ConverterCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ConverterParameter
  id: ConverterParameter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置要传递给<xref:System.Windows.Data.Binding.Converter*>.</xref:System.Windows.Data.Binding.Converter*>参数"
  remarks: "ConverterParameter 属性可用于指定如何将对象转换。  此属性将其他信息传递给绑定使用的转换器。  当指定 ConverterParameter 时，将值传递到<xref:System.Windows.Data.IValueConverter.Convert%2A>和<xref:System.Windows.Data.IValueConverter.ConvertBack%2A>方法作为`parameter`参数。</xref:System.Windows.Data.IValueConverter.ConvertBack%2A> </xref:System.Windows.Data.IValueConverter.Convert%2A>       有关示例，请参阅[如何︰ 生成值基于绑定的项列表](~/add/includes/ajax-current-ext-md.md)。 该示例演示如何实现<xref:System.Windows.Data.IMultiValueConverter>但用法同样适用。</xref:System.Windows.Data.IMultiValueConverter>"
  syntax:
    content: public object ConverterParameter { get; set; }
    return:
      type: System.Object
      description: "要传递给<xref:System.Windows.Data.Binding.Converter*>.</xref:System.Windows.Data.Binding.Converter*>参数 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ConverterParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.DoNothing
  id: DoNothing
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "用作返回值以指示绑定引擎不执行任何操作。"
  remarks: "绑定源属性或转换器可以返回 DoNothing 以指示绑定引擎不执行任何操作。 例如，若要指示绑定引擎不传输到绑定目标，不能移动到下一个值<xref:System.Windows.Data.Binding>中<xref:System.Windows.Data.PriorityBinding>，或不是使用`FallBackValue`或默认值。</xref:System.Windows.Data.PriorityBinding> </xref:System.Windows.Data.Binding>"
  syntax:
    content: public static readonly object DoNothing;
    return:
      type: System.Object
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ElementName
  id: ElementName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置要用作绑定源对象的元素的名称。"
  remarks: "当你想要将绑定到你的应用程序中的其他元素的属性时，此属性很有用。 例如，如果你想要使用<xref:System.Windows.Controls.Slider>来控制应用程序中的另一个控件的高度或如果你想要绑定<xref:System.Windows.Controls.ContentControl.Content%2A>的控件与<xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A>属性你<xref:System.Windows.Controls.ListBox>控件。</xref:System.Windows.Controls.ListBox> </xref:System.Windows.Controls.Primitives.Selector.SelectedValue%2A> </xref:System.Windows.Controls.ContentControl.Content%2A> </xref:System.Windows.Controls.Slider>       默认情况下，绑定继承指定的数据上下文`DataContext`属性，如果已设置完毕。 但是，ElementName 属性是一种你可以显式设置的源的<xref:System.Windows.Data.Binding>和重写继承的数据上下文。</xref:System.Windows.Data.Binding> 有关详细信息，请参阅[如何︰ 指定绑定源](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Windows.Data.Binding.Source%2A>和<xref:System.Windows.Data.Binding.RelativeSource%2A>属性<xref:System.Windows.Data.Binding>类还使你能够设置绑定源显式。</xref:System.Windows.Data.Binding> </xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> 但是，只有一个三个属性，ElementName， <xref:System.Windows.Data.Binding.Source%2A>，和<xref:System.Windows.Data.Binding.RelativeSource%2A>、 都应该为每个集绑定，或可能出现冲突。</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.Source%2A> 如果绑定源冲突，此属性将引发异常。"
  syntax:
    content: public string ElementName { get; set; }
    return:
      type: System.String
      description: "值<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;></xref>属性或[X:name 指令](~/add/includes/ajax-current-ext-md.md)感兴趣的元素。 您可以参考代码中的元素，仅当它们注册到适当<xref:System.Windows.NameScope>通过<xref uid=&quot;langword_csharp_RegisterName&quot; name=&quot;RegisterName&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.NameScope> 有关详细信息，请参阅[WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)。       默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ElementName*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  id: GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "返回[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]被附加到指定的对象的绑定所使用的命名空间管理器对象。"
  remarks: "此方法支持的附加的属性使用情况<xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>附加属性。</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>       [!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]命名空间管理器是仅当在绑定中的数据的来源时，才相关[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]绑定源 (<xref:System.Windows.Data.XmlDataProvider>对象)。</xref:System.Windows.Data.XmlDataProvider>       如果命名空间管理器在原始数据源创建或通过随后调用未专门应用<xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>上绑定，则此方法将返回`null`。</xref:System.Windows.Data.Binding.SetXmlNamespaceManager%2A>       此方法将始终返回`null`如果在绑定后面的数据不[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]。"
  syntax:
    content: public static System.Xml.XmlNamespaceManager GetXmlNamespaceManager (System.Windows.DependencyObject target);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "从中获取命名空间信息的对象。"
    return:
      type: System.Xml.XmlNamespaceManager
      description: "一个返回的对象，用于查看[!INCLUDE[TLA2#tla_xml](~/add/includes/tla2sharptla-xml-md.md)]与传递的对象元素上的绑定的命名空间。 此对象应转换为&lt;xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt;。"
  overload: System.Windows.Data.Binding.GetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> target </code>参数不能为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Data.Binding.IndexerName
  id: IndexerName
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "用作<xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>的&lt;xref:System.ComponentModel.PropertyChangedEventArgs?displayProperty=fullName&gt;以指示索引器属性已更改。</xref:System.ComponentModel.PropertyChangedEventArgs.PropertyName*>"
  syntax:
    content: public const string IndexerName;
    return:
      type: System.String
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.IsAsync
  id: IsAsync
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Windows.Data.Binding&quot;></xref>应异步获取和设置值。"
  remarks: "使用 IsAsync 属性时`get`你绑定源属性的访问器可能需要很长时间。 一个示例是与图像属性`get`从 Web 下载的访问器。 设置为 IsAsync`true`可避免阻止[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]时进行下载。       在等待要到达的值，该绑定报告<xref:System.Windows.Data.BindingBase.FallbackValue%2A>，如果有的话，或默认值的绑定目标属性。</xref:System.Windows.Data.BindingBase.FallbackValue%2A>       但是，不应存在很多情况下，你需要使用 IsAsync 属性。 [!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)]准则建议您定义个数量级慢于字段集的属性。 当创建你的类时，请考虑处理速度极慢操作之外`get`访问器和缓存结果。 有关详细信息，请参阅[NIB︰ 选择之间属性和方法](http://msdn.microsoft.com/en-us/55825e8f-7e2e-448a-9505-7217cc91b1af)。"
  syntax:
    content: public bool IsAsync { get; set; }
    return:
      type: System.Boolean
      description: "默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.IsAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Mode
  id: Mode
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示在绑定中数据流的方向。"
  remarks: "若要支持<xref:System.Windows.Data.BindingMode>和<xref:System.Windows.Data.BindingMode>基础数据的绑定必须实现<xref:System.ComponentModel.INotifyPropertyChanged>.</xref:System.ComponentModel.INotifyPropertyChanged> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> 有关详细信息，请参阅[如何︰ 实现属性更改通知](~/add/includes/ajax-current-ext-md.md)。       有关<xref:System.Windows.Data.BindingMode>或<xref:System.Windows.Data.BindingMode>绑定，可以通过设置来控制目标到源更新<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>属性。</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> </xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> 有关详细信息，请参阅<xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>。</xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A>       有关不同的绑定模式的详细信息，请参阅[数据绑定概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Windows.Data.BindingMode Mode { get; set; }
    return:
      type: System.Windows.Data.BindingMode
      description: "之一<xref href=&quot;System.Windows.Data.BindingMode&quot;></xref>值。 默认值是<xref href=&quot;System.Windows.Data.BindingMode&quot;> </xref>，它返回目标依赖属性的默认绑定模式值。 但是，默认值都不同每个依赖属性。 通常情况下，用户可编辑的控件属性，如文本框和复选框，默认为双向绑定，而其他大多数属性默认为单向绑定。       确定依赖属性默认情况下是否绑定单向或双向的编程方法是获取的属性使用的属性元数据<> *1>，然后检查的布尔值<> *1> 属性。"
  overload: System.Windows.Data.Binding.Mode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  id: NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示是否引发<xref:System.Windows.Data.Binding.SourceUpdated>当一个值从绑定目标传输到绑定源的事件。</xref:System.Windows.Data.Binding.SourceUpdated>"
  syntax:
    content: public bool NotifyOnSourceUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Data.Binding.SourceUpdated>时绑定源值更新; 否则为应引发事件<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Data.Binding.SourceUpdated> 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  id: NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示是否引发<xref:System.Windows.Data.Binding.TargetUpdated>当一个值从绑定源传输到绑定目标的事件。</xref:System.Windows.Data.Binding.TargetUpdated>"
  syntax:
    content: public bool NotifyOnTargetUpdated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Data.Binding.TargetUpdated>更新; 否则为绑定目标值时，应引发事件<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Data.Binding.TargetUpdated> 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  id: NotifyOnValidationError
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示是否引发<xref:System.Windows.Controls.Validation.Error>附加对绑定对象的事件。</xref:System.Windows.Controls.Validation.Error>"
  remarks: "如果绑定具有<xref:System.Windows.Data.Binding.ValidationRules%2A>与它关联，则绑定引擎将检查每个规则每次传输的目标属性值与源属性。</xref:System.Windows.Data.Binding.ValidationRules%2A> 如果规则将使值无效，绑定引擎创建<xref:System.Windows.Controls.ValidationError>对象，并将其添加到<xref:System.Windows.Controls.Validation>。<xref:System.Windows.Controls.Validation.Errors%2A>的绑定对象的集合。</xref:System.Windows.Controls.Validation.Errors%2A> </xref:System.Windows.Controls.Validation> </xref:System.Windows.Controls.ValidationError> 当<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>属性不为空，<xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName>附加的属性的对象设置为`true`。</xref:System.Windows.Controls.Validation.HasError%2A?displayProperty=fullName> </xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> 如果的 NotifyOnValidationError 属性<xref:System.Windows.Data.Binding>设置为`true`，然后绑定引擎将引发<xref:System.Windows.Controls.Validation.Error?displayProperty=fullName>附加对象上的事件。</xref:System.Windows.Controls.Validation.Error?displayProperty=fullName> </xref:System.Windows.Data.Binding>       验证过程的详细讨论，请参阅中的数据验证部分[数据绑定概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool NotifyOnValidationError { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Controls.Validation.Error>附加的事件应在源更新过程中存在验证错误时对绑定对象引发; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Controls.Validation.Error> 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.NotifyOnValidationError*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Path
  id: Path
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置绑定源属性的路径。"
  remarks: "每个绑定通常具有四个组件︰ 绑定目标对象、 目标属性、 绑定源和要使用的绑定源中的值的路径。 有关这些数据绑定概念的详细信息，请参阅[数据绑定概述](~/add/includes/ajax-current-ext-md.md)。       路径属性用于指定你想要将绑定到源值:-在简单的情况下，属性值是要使用的绑定，如的源对象的属性的名称的路径`Path=PropertyName`。      的可以通过类似于在中使用的语法指定子属性的属性[!INCLUDE[TLA#tla_cshrp](~/add/includes/tlasharptla-cshrp-md.md)]。 例如，子句`Path=ShoppingCart.Order`子属性设置的绑定`Order`对象或属性的`ShoppingCart`。      -若要将绑定到附加的属性，将附加属性旁的括号。 例如，若要将绑定到附加的属性<xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>，语法是`Path=(DockPanel.Dock)`。</xref:System.Windows.Controls.DockPanel.Dock%2A?displayProperty=fullName>      的可以在属性名称后面的索引器应用的位置的方括号中指定索引器的属性。 例如，子句`Path=ShoppingCart[0]`对应于属性的内部索引如何处理文字字符串&quot;0&quot;的索引中设置的绑定。 此外支持多个索引器。      的可以在混合索引器和子属性`Path`子句; 例如， `Path=ShoppingCart.ShippingInfo[MailingAddress,Street].` -在你可以用逗号 （，） 分隔的多个索引器参数的索引器内部。 可以使用括号指定每个参数的类型。 例如，你可以`Path=&quot;[(sys:Int32)42,(sys:Int32)24]&quot;`，其中`sys`映射到`System`命名空间。      -当源是集合视图，可以使用斜杠 （/） 指定的当前项。 例如，子句`Path=/`到视图中的当前项设置的绑定。 集合源时，此语法指定的默认集合视图的当前项。      的可以组合属性名称、 斜杠遍历是集合的属性。 例如，`Path=/Offices/ManagerName`指定源集合，其中包含的当前项`Offices`也是集合的属性。 其当前项是一个对象，包含`ManagerName`属性。      -（可选） 可以使用句点 （.） 路径将绑定到当前的源。 例如，`Text=&quot;{Binding}&quot;`等效于`Text=&quot;{Binding Path=.}&quot;`。       有关路径语法的信息，请参阅[绑定声明概述](~/add/includes/ajax-current-ext-md.md)或[PropertyPath XAML 语法](~/add/includes/ajax-current-ext-md.md)。       有关[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]绑定，请参阅<xref:System.Windows.Data.Binding.XPath%2A>属性。</xref:System.Windows.Data.Binding.XPath%2A>       若要绑定到了将整个对象，你不必指定的路径属性。 有关详细信息，请参阅&quot;指定路径值&quot;[数据绑定概述](../Topic/Data%20Binding%20Overview.md)。"
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the <xref:System.Windows.Data.Binding.RelativeSource%2A> property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]"
  syntax:
    content: public System.Windows.PropertyPath Path { get; set; }
    return:
      type: System.Windows.PropertyPath
      description: "绑定源的路径。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.Path*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RelativeSource
  id: RelativeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置绑定源通过指定相对于绑定目标位置的位置。"
  remarks: "此属性是通常用于将对象的一个属性绑定到的同一个对象，另一个属性，或用于在样式或模板中定义绑定。       默认情况下，绑定继承指定的数据上下文`DataContext`属性，如果已设置完毕。 但是，RelativeSource 属性是一种你可以显式设置的源的<xref:System.Windows.Data.Binding>和重写继承的数据上下文。</xref:System.Windows.Data.Binding> 有关详细信息，请参阅[如何︰ 指定绑定源](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>和<xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName>属性还允许你设置的绑定源显式。</xref:System.Windows.Data.Binding.Source%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> 但是，只有一个三个属性， <xref:System.Windows.Data.Binding.ElementName%2A>， <xref:System.Windows.Data.Binding.Source%2A>，和 RelativeSource，应设置为每个绑定，或可能发生冲突。</xref:System.Windows.Data.Binding.Source%2A> </xref:System.Windows.Data.Binding.ElementName%2A> 如果绑定源冲突，此属性将引发异常。       有关[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]信息，请参阅[RelativeSource MarkupExtension](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;xamlTextUsage_RelativeSource&quot;></a># # XAML 文本用法"
  example:
  - "The following example shows a style trigger that creates a <xref:System.Windows.Controls.ToolTip> that reports a validation error message. The value of the setter binds to the error content of the current <xref:System.Windows.Controls.TextBox> (the <xref:System.Windows.Controls.TextBox> using the style) using the RelativeSource property. For more information on this example, see [How to: Implement Binding Validation](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-xml[BindValidation#5](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#5)]  \n  \n To see the full example, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.RelativeSource RelativeSource { get; set; }
    return:
      type: System.Windows.Data.RelativeSource
      description: "A <xref href=&quot;System.Windows.Data.RelativeSource&quot;> </xref>对象，它指定要使用的绑定源的相对位置。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.RelativeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "删除的处理程序<xref:System.Windows.Data.Binding.SourceUpdated>附加事件。</xref:System.Windows.Data.Binding.SourceUpdated>"
  remarks: "此方法支持中的附加的事件使用情况[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public static void RemoveSourceUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>侦听事件。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "要删除的处理程序。"
  overload: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  id: RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "删除的处理程序<xref:System.Windows.Data.Binding.TargetUpdated>附加事件。</xref:System.Windows.Data.Binding.TargetUpdated>"
  remarks: "此方法支持中的附加的事件使用情况[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]。"
  syntax:
    content: public static void RemoveTargetUpdatedHandler (System.Windows.DependencyObject element, EventHandler<System.Windows.Data.DataTransferEventArgs> handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>侦听事件。"
    - id: handler
      type: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
      description: "要删除的处理程序。"
  overload: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  id: SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "设置被附加到提供的元素的绑定使用的命名空间管理器对象。"
  remarks: "此方法支持的附加的属性使用情况<xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>附加属性。</xref:System.Windows.Data.Binding.XmlNamespaceManager%2A>"
  syntax:
    content: public static void SetXmlNamespaceManager (System.Windows.DependencyObject target, System.Xml.XmlNamespaceManager value);
    parameters:
    - id: target
      type: System.Windows.DependencyObject
      description: "从中获取命名空间信息的对象。"
    - id: value
      type: System.Xml.XmlNamespaceManager
      description: "&lt;Xref:System.Xml.XmlNamespaceManager?displayProperty=fullName&gt;要用于计算传递的元素中的命名空间。"
  overload: System.Windows.Data.Binding.SetXmlNamespaceManager*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>target</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializePath
  id: ShouldSerializePath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "指示是否<xref:System.Windows.Data.Binding.Path*>属性应对其进行持久化。</xref:System.Windows.Data.Binding.Path*>"
  remarks: "这`ShouldSerialize`提供方法，因为<xref:System.Windows.Data.Binding.Path%2A>属性不具有简单的默认值。</xref:System.Windows.Data.Binding.Path%2A> 此方法指示属性是否已从其默认值。 如果你也正在开发的设计器<xref:System.Windows.Data.Binding>或开发你自己控制合并<xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding></xref:System.Windows.Data.Binding>通常调用此方法"
  syntax:
    content: public bool ShouldSerializePath ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果属性值已更改其默认设置;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ShouldSerializePath*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  id: ShouldSerializeSource
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "指示是否<xref:System.Windows.Data.Binding.Source*>属性应对其进行持久化。</xref:System.Windows.Data.Binding.Source*>"
  remarks: "这`ShouldSerialize`提供方法，因为<xref:System.Windows.Data.Binding.Source%2A>属性不具有简单的默认值。</xref:System.Windows.Data.Binding.Source%2A> 此方法指示属性是否已从其默认值。 如果你也正在开发的设计器<xref:System.Windows.Data.Binding>或开发你自己控制合并<xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding></xref:System.Windows.Data.Binding>通常调用此方法"
  syntax:
    content: public bool ShouldSerializeSource ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果属性值已更改其默认设置;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ShouldSerializeSource*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  id: ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "指示是否<xref:System.Windows.Data.Binding.ValidationRules*>属性应对其进行持久化。</xref:System.Windows.Data.Binding.ValidationRules*>"
  remarks: "这`ShouldSerialize`提供方法，因为<xref:System.Windows.Data.Binding.ValidationRules%2A>属性不具有简单的默认值。</xref:System.Windows.Data.Binding.ValidationRules%2A> 此方法指示属性是否已从其默认值。 如果你也正在开发的设计器<xref:System.Windows.Data.Binding>或开发你自己控制合并<xref:System.Windows.Data.Binding>.</xref:System.Windows.Data.Binding></xref:System.Windows.Data.Binding>通常调用此方法"
  syntax:
    content: public bool ShouldSerializeValidationRules ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果属性值已更改其默认设置;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.Source
  id: Source
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置要用作绑定源的对象。"
  remarks: "默认情况下，绑定继承指定的数据上下文`DataContext`属性，如果已设置完毕。 但是，源属性是一种你可以显式设置的源的<xref:System.Windows.Data.Binding>和重写继承的数据上下文。</xref:System.Windows.Data.Binding> 如果不需要建立多个属性在其继承相同的数据上下文的作用域的功能，你可以使用源属性而不是`DataContext`属性。       <xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName>和<xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName>属性还允许你设置的绑定源显式。</xref:System.Windows.Data.Binding.RelativeSource%2A?displayProperty=fullName> </xref:System.Windows.Data.Binding.ElementName%2A?displayProperty=fullName> 但是，只有一个三个属性， <xref:System.Windows.Data.Binding.ElementName%2A>，源和<xref:System.Windows.Data.Binding.RelativeSource%2A>、 都应该为每个集绑定，或可能发生冲突。</xref:System.Windows.Data.Binding.RelativeSource%2A> </xref:System.Windows.Data.Binding.ElementName%2A> 如果绑定源冲突，此属性将引发异常。       若要清除此属性，请将其设置为<xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>.</xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=fullName>      <a name=&quot;xamlAttributeUsage_Source&quot;></a># # XAML 属性用法```   <object Source=&quot;object&quot;/>   ``` <a name=&quot;xamlValues_Source&quot;> </a> # # XAML 值*对象*现有对象。       若要引用现有对象，使用[否则标记扩展](~/add/includes/ajax-current-ext-md.md)"
  example:
  - "In this example, you have a `Person` object with a string property named `PersonName`. The `Person` object is defined in the namespace called `SDKSample`.  \n  \n The following example instantiates the `Person` object with a `PersonName` property value of `Joe`. This is done in the `Resources` section and assigned an `x:Key`.  \n  \n [!code-xml[SimpleBinding#Instantiation](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#instantiation)]  \n[!code-xml[SimpleBinding#2](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#2)]  \n[!code-xml[SimpleBinding#EndWindow](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#endwindow)]  \n  \n To bind to the `PersonName` property you would do the following:  \n  \n [!code-xml[SimpleBinding#BDO1](~/add/codesnippet/xaml/SimpleBinding.SimpleBinding/Page1.xaml#bdo1)]  \n  \n As a result, the <xref:System.Windows.Controls.TextBlock> appears with the value \"Joe\".  \n  \n In the following example, the Source values of the <xref:System.Windows.Data.Binding> objects are set to the `static` property <xref:System.Windows.Application.Current%2A?displayProperty=fullName>:  \n  \n [!code-xml[DataBindingLab#ComboBoxMultiBinding](~/add/codesnippet/xaml/DataBindingLab/AddProductWindow.xaml#comboboxmultibinding)]  \n  \n For the full example, see [Data Binding Demo](http://go.microsoft.com/fwlink/?LinkID=163703)."
  syntax:
    content: public object Source { get; set; }
    return:
      type: System.Object
      description: "要用作绑定源的对象。"
  overload: System.Windows.Data.Binding.Source*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  id: SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "标识<xref:System.Windows.Data.Binding.SourceUpdated>附加事件。</xref:System.Windows.Data.Binding.SourceUpdated>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent SourceUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  id: TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "标识<xref:System.Windows.Data.Binding.TargetUpdated>附加事件。</xref:System.Windows.Data.Binding.TargetUpdated>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent TargetUpdatedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  id: UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个处理程序可以使用提供的自定义逻辑处理绑定引擎遇到的绑定源值更新过程中的异常。 此特性仅适用如果关联<xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;></xref>与绑定。"
  remarks: "<xref:System.Windows.Controls.ExceptionValidationRule>是内置的验证规则，用于检查的绑定源属性更新过程中引发的异常。</xref:System.Windows.Controls.ExceptionValidationRule> 如果关联<xref:System.Windows.Controls.ExceptionValidationRule>与你<xref:System.Windows.Data.Binding>对象，你可以使用此属性设置要用于处理这些异常中提供自定义逻辑的处理程序。</xref:System.Windows.Data.Binding> </xref:System.Windows.Controls.ExceptionValidationRule> 如果在未指定 UpdateSourceExceptionFilter <xref:System.Windows.Data.Binding>，该绑定引擎创建<xref:System.Windows.Controls.ValidationError>出现异常并将其添加到<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>绑定元素的集合。</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> </xref:System.Windows.Data.Binding>"
  example:
  - "The <xref:System.Windows.Controls.TextBox.Text%2A> property of the following <xref:System.Windows.Controls.TextBox> is data-bound to a source property `Age3` that is of type `int`. The <xref:System.Windows.Controls.ExceptionValidationRule> checks for exceptions that are thrown during the update of the source property (such as when the user enters a value that cannot be converted to an integer).  \n  \n [!code-xml[BindValidation#tbExceptionFilter](~/add/codesnippet/xaml/BindingValidation/Window1.xaml#tbexceptionfilter)]  \n  \n You can provide custom logic to handle those exceptions. The following example shows how to use the UpdateSourceExceptionFilter property to set an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#filtercallback](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#filtercallback)]  \n  \n The following is an example implementation of an <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n [!code-cs[BindValidation#Handler](~/add/codesnippet/csharp/BindingValidation/Window1.xaml.cs#handler)]  \n  \n The <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback> can also return `null`, the exception itself, or a <xref:System.Windows.Controls.ValidationError>. For more information, see <xref:System.Windows.Data.UpdateSourceExceptionFilterCallback>.  \n  \n For the complete sample, see [Binding Validation Sample](http://go.microsoft.com/fwlink/?LinkID=159972)."
  syntax:
    content: public System.Windows.Data.UpdateSourceExceptionFilterCallback UpdateSourceExceptionFilter { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceExceptionFilterCallback
      description: "提供自定义逻辑以处理绑定引擎遇到的绑定源值更新过程中的异常的方法。"
  overload: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  id: UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，确定绑定源更新的计时。"
  remarks: "绑定<xref:System.Windows.Data.BindingMode>或<xref:System.Windows.Data.BindingMode>侦听中的目标属性的更改并将它们传播回源。</xref:System.Windows.Data.BindingMode> </xref:System.Windows.Data.BindingMode> 这称为更新源。 通常，当目标属性发生更改时，可能发生这些更新。 这是特别适用于的复选框和其他简单控件，但它不是通常适用于文本字段。 更新后每次按键可能导致性能降低并拒绝用户进行此种常用的机会来退格键并在为新值提交之前修复键入错误。 因此，默认 UpdateSourceTrigger 值的<xref:System.Windows.Controls.TextBox.Text%2A>属性是<xref:System.Windows.Data.UpdateSourceTrigger>和 not <xref:System.Windows.Data.UpdateSourceTrigger>.</xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Data.UpdateSourceTrigger> </xref:System.Windows.Controls.TextBox.Text%2A>       如果 UpdateSourceTrigger 值设置为<xref:System.Windows.Data.UpdateSourceTrigger>，必须调用<xref:System.Windows.Data.BindingExpression.UpdateSource%2A>方法或所做的更改将不会传播回源。</xref:System.Windows.Data.BindingExpression.UpdateSource%2A> </xref:System.Windows.Data.UpdateSourceTrigger>"
  syntax:
    content: public System.Windows.Data.UpdateSourceTrigger UpdateSourceTrigger { get; set; }
    return:
      type: System.Windows.Data.UpdateSourceTrigger
      description: "之一<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>值。 默认值是<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>，这将返回默认值<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;></xref>目标依赖项属性的值。 但是，大多数依赖项属性的默认值是<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>，虽然<> *1> 属性具有默认值为<xref href=&quot;System.Windows.Data.UpdateSourceTrigger&quot;> </xref>。     确定依赖项属性的默认 UpdateSourceTrigger 值的编程方法是获取的属性使用的属性元数据<> *1>，然后检查的值<xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>属性。</xref:System.Windows.FrameworkPropertyMetadata.DefaultUpdateSourceTrigger*>"
  overload: System.Windows.Data.Binding.UpdateSourceTrigger*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  id: ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示是否包含<xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>。"
  remarks: "设置此属性，可以使用的替代方法<xref:System.Windows.Controls.DataErrorValidationRule>元素显式。</xref:System.Windows.Controls.DataErrorValidationRule> <xref:System.Windows.Controls.DataErrorValidationRule>是内置的验证规则，可通过引发的错误检查<xref:System.ComponentModel.IDataErrorInfo>源对象的实现。</xref:System.ComponentModel.IDataErrorInfo> </xref:System.Windows.Controls.DataErrorValidationRule> 如果引发错误，则绑定引擎创建<xref:System.Windows.Controls.ValidationError>出现错误并将其添加到<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>绑定元素的集合。</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> 错误缺乏清除此验证反馈，除非另一个规则会生成验证问题。       ValidatesOnDataErrors 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[.NET Framework 版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following examples uses <xref:System.ComponentModel.IDataErrorInfo> and ValidatesOnDataErrors to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that implements <xref:System.ComponentModel.IDataErrorInfo> to report validation errors.  \n  \n [!code-cs[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#idataerrorinfodata)]\n [!code-vb[BindingValidationAttributesSnippets#IDataErrorInfoData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#idataerrorinfodata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnDataErrors to `true` on the <xref:System.Windows.Data.Binding>.  When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#IDataErrorInfoXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#idataerrorinfoxaml)]"
  syntax:
    content: public bool ValidatesOnDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要包括<xref href=&quot;System.Windows.Controls.DataErrorValidationRule&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ValidatesOnDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  id: ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示是否包含<xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>。"
  remarks: "设置此属性，可以使用的替代方法<xref:System.Windows.Controls.ExceptionValidationRule>元素显式。</xref:System.Windows.Controls.ExceptionValidationRule> <xref:System.Windows.Controls.ExceptionValidationRule>是内置的验证规则，用于检查的源属性更新过程中引发的异常。</xref:System.Windows.Controls.ExceptionValidationRule> 如果引发异常，则绑定引擎创建<xref:System.Windows.Controls.ValidationError>出现异常并将其添加到<xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName>绑定元素的集合。</xref:System.Windows.Controls.Validation.Errors%2A?displayProperty=fullName> </xref:System.Windows.Controls.ValidationError> 错误缺乏清除此验证反馈，除非另一个规则会生成验证问题。       ValidatesOnExceptions 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[.NET Framework 版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following examples use ValidatesOnExceptions to validate user input in a <xref:System.Windows.Controls.TextBox>. The first example creates a data type that throws an exception when the `Age` property is set to an invalid property.  \n  \n [!code-cs[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/csharp/bindingvalidationattributessnippets/data.cs#throwexceptiondata)]\n [!code-vb[BindingValidationAttributesSnippets#ThrowExceptionData](~/add/codesnippet/visualbasic/bindingvalidationattributessnippets/window1.xaml.vb#throwexceptiondata)]  \n  \n The following example binds the `Age` property to the <xref:System.Windows.Controls.TextBox> and sets ValidatesOnExceptions to `true` on the <xref:System.Windows.Data.Binding>. When the user enters an invalid value, a red border appears in the <xref:System.Windows.Controls.TextBox> and the <xref:System.Windows.Controls.ToolTip> reports the error message.  \n  \n [!code-xml[BindingValidationAttributesSnippets#ThrowExceptionXaml](~/add/codesnippet/xaml/bindingvalidationattributessnippets/window1.xaml#throwexceptionxaml)]"
  syntax:
    content: public bool ValidatesOnExceptions { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要包括<xref href=&quot;System.Windows.Controls.ExceptionValidationRule&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ValidatesOnExceptions*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  id: ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置一个值，该值指示是否包含<xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>。"
  remarks: "ValidatesOnNotifyDataErrors 时`true`的绑定来查看和报告由实现<xref:System.ComponentModel.INotifyDataErrorInfo>.</xref:System.ComponentModel.INotifyDataErrorInfo>的数据源引发的错误"
  syntax:
    content: public bool ValidatesOnNotifyDataErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要包括<xref href=&quot;System.Windows.Controls.NotifyDataErrorValidationRule&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.ValidationRules
  id: ValidationRules
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取用于检查用户输入有效性的规则的集合。"
  remarks: "[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]数据绑定模型使您可以将相关联 Validationrule 与你<xref:System.Windows.Data.Binding>或<xref:System.Windows.Data.MultiBinding>对象。</xref:System.Windows.Data.MultiBinding> </xref:System.Windows.Data.Binding> 你可以通过从派生创建自定义规则<xref:System.Windows.Controls.ValidationRule>类并实现<xref:System.Windows.Controls.ValidationRule.Validate%2A>方法，或者可以使用内置<xref:System.Windows.Controls.ExceptionValidationRule>，这使无效值，如果在源更新过程中出现异常。</xref:System.Windows.Controls.ExceptionValidationRule> </xref:System.Windows.Controls.ValidationRule.Validate%2A> </xref:System.Windows.Controls.ValidationRule>       绑定引擎将检查每个<xref:System.Windows.Controls.ValidationRule>每次输入的值 （绑定目标属性值） 传输到绑定源属性的绑定相关联。</xref:System.Windows.Controls.ValidationRule> 验证过程的详细讨论，请参阅中的数据验证部分[数据绑定概述](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 可以设置此属性[!INCLUDE[TLA#tla_xaml](~/add/includes/tlasharptla-xaml-md.md)]只能由使用集合语法所示，或者通过访问的集合对象，并使用它的各种方法，如`Add`。 要访问的集合对象的属性是只读的而集合本身是可读写。      <a name=&quot;xamlPropertyElementUsage_ValidationRules&quot;></a># # XAML 属性元素用法```   <object>     <object.ValidationRules>       oneOrMoreValidationRules     </object.ValidationRules>   </object>      ``` <a name=&quot;xamlValues_ValidationRules&quot;> </a> # # XAML 值*oneOrMoreValidationRules*一个或多个<xref:System.Windows.Controls.ValidationRule>对象。</xref:System.Windows.Controls.ValidationRule>       你可以使用<xref:System.Windows.Controls.ExceptionValidationRule>类或创建自定义规则通过子类化<xref:System.Windows.Controls.ValidationRule>类。</xref:System.Windows.Controls.ValidationRule> </xref:System.Windows.Controls.ExceptionValidationRule>"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule> ValidationRules { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
      description: "集合<xref href=&quot;System.Windows.Controls.ValidationRule&quot;></xref>对象。"
  overload: System.Windows.Data.Binding.ValidationRules*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  id: XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "标识<xref:System.Windows.Data.Binding.XmlNamespaceManager*>附加属性。</xref:System.Windows.Data.Binding.XmlNamespaceManager*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty XmlNamespaceManagerProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Data.Binding.XPath
  id: XPath
  parent: System.Windows.Data.Binding
  langs:
  - csharp
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Data
  summary: "获取或设置<xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;></xref>返回的值的查询[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]要使用的绑定源。"
  remarks: "绑定源时[!INCLUDE[TLA#tla_xml](~/add/includes/tlasharptla-xml-md.md)]数据而不是[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]对象，而不是使用 XPath 属性<xref:System.Windows.Data.Binding.Path%2A>属性以指示要使用的绑定源上的值的路径。</xref:System.Windows.Data.Binding.Path%2A>       通过将 XPath 属性设置，你将创建`XPath`查询，以便选择的节点的集合 (<xref:System.Xml.XmlElement?displayProperty=fullName>和<xref:System.Xml.XmlAttribute?displayProperty=fullName>都派生自<xref:System.Xml.XmlNode?displayProperty=fullName>)。</xref:System.Xml.XmlNode?displayProperty=fullName> </xref:System.Xml.XmlAttribute?displayProperty=fullName> </xref:System.Xml.XmlElement?displayProperty=fullName> <xref:System.Xml.XmlNode?displayProperty=fullName>是[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]对象，这意味着你可以将绑定到使用其属性<xref:System.Windows.Data.Binding.Path%2A>属性。</xref:System.Windows.Data.Binding.Path%2A></xref:System.Xml.XmlNode?displayProperty=fullName>       <xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName>方法将处理`XPath`XPath 属性中的表达式。</xref:System.Xml.XmlNode.SelectNodes%2A?displayProperty=fullName> `XPath`不支持函数。 有关`XPath`表达式的信息，请参阅<xref:System.Xml.XmlNode.SelectNodes%2A>文档和示例部分中提供一些示例。</xref:System.Xml.XmlNode.SelectNodes%2A>       对 XML 对象的 LINQ<xref:System.Xml.Linq.XDocument>和<xref:System.Xml.Linq.XElement>不使用`XPath`。</xref:System.Xml.Linq.XElement> </xref:System.Xml.Linq.XDocument> 有关详细信息，请参阅[如何︰ 为 XML 查询结果绑定到 XDocument、 XElement 或 LINQ](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public string XPath { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_XPath&quot; name=&quot;XPath&quot; href=&quot;&quot;> </xref>查询。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Data.Binding.XPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Data.BindingBase
  isExternal: false
  name: System.Windows.Data.BindingBase
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Data.Binding.#ctor
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding()
  nameWithType: Binding.Binding()
  fullName: System.Windows.Data.Binding.Binding()
- uid: System.Windows.Data.Binding.#ctor(System.String)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding(String)
  nameWithType: Binding.Binding(String)
  fullName: System.Windows.Data.Binding.Binding(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.EventHandler{System.Windows.Data.DataTransferEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<DataTransferEventArgs>
  nameWithType: EventHandler<DataTransferEventArgs>
  fullName: System.EventHandler<System.Windows.Data.DataTransferEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Windows.Data.DataTransferEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Data.DataTransferEventArgs
    name: DataTransferEventArgs
    nameWithType: DataTransferEventArgs
    fullName: DataTransferEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.AddTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.AsyncState
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
  fullName: System.Windows.Data.Binding.AsyncState
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Data.Binding.BindsDirectlyToSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
  fullName: System.Windows.Data.Binding.BindsDirectlyToSource
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Data.Binding.Converter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
  fullName: System.Windows.Data.Binding.Converter
- uid: System.Windows.Data.IValueConverter
  parent: System.Windows.Data
  isExternal: false
  name: IValueConverter
  nameWithType: IValueConverter
  fullName: System.Windows.Data.IValueConverter
- uid: System.Windows.Data.Binding.ConverterCulture
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
  fullName: System.Windows.Data.Binding.ConverterCulture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Data.Binding.ConverterParameter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
  fullName: System.Windows.Data.Binding.ConverterParameter
- uid: System.Windows.Data.Binding.DoNothing
  parent: System.Windows.Data.Binding
  isExternal: false
  name: DoNothing
  nameWithType: Binding.DoNothing
  fullName: System.Windows.Data.Binding.DoNothing
- uid: System.Windows.Data.Binding.ElementName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
  fullName: System.Windows.Data.Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager(System.Windows.DependencyObject)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager(DependencyObject)
  nameWithType: Binding.GetXmlNamespaceManager(DependencyObject)
  fullName: System.Windows.Data.Binding.GetXmlNamespaceManager(DependencyObject)
- uid: System.Xml.XmlNamespaceManager
  parent: System.Xml
  isExternal: true
  name: XmlNamespaceManager
  nameWithType: XmlNamespaceManager
  fullName: System.Xml.XmlNamespaceManager
- uid: System.Windows.Data.Binding.IndexerName
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IndexerName
  nameWithType: Binding.IndexerName
  fullName: System.Windows.Data.Binding.IndexerName
- uid: System.Windows.Data.Binding.IsAsync
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
  fullName: System.Windows.Data.Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
  fullName: System.Windows.Data.Binding.Mode
- uid: System.Windows.Data.BindingMode
  parent: System.Windows.Data
  isExternal: false
  name: BindingMode
  nameWithType: BindingMode
  fullName: System.Windows.Data.BindingMode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
  fullName: System.Windows.Data.Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
  fullName: System.Windows.Data.Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
  fullName: System.Windows.Data.Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
  fullName: System.Windows.Data.Binding.Path
- uid: System.Windows.PropertyPath
  parent: System.Windows
  isExternal: false
  name: PropertyPath
  nameWithType: PropertyPath
  fullName: System.Windows.PropertyPath
- uid: System.Windows.Data.Binding.RelativeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
  fullName: System.Windows.Data.Binding.RelativeSource
- uid: System.Windows.Data.RelativeSource
  parent: System.Windows.Data
  isExternal: false
  name: RelativeSource
  nameWithType: RelativeSource
  fullName: System.Windows.Data.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveSourceUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(System.Windows.DependencyObject,System.EventHandler{System.Windows.Data.DataTransferEventArgs})
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  nameWithType: Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
  fullName: System.Windows.Data.Binding.RemoveTargetUpdatedHandler(DependencyObject,EventHandler<DataTransferEventArgs>)
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager(System.Windows.DependencyObject,System.Xml.XmlNamespaceManager)
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  nameWithType: Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
  fullName: System.Windows.Data.Binding.SetXmlNamespaceManager(DependencyObject,XmlNamespaceManager)
- uid: System.Windows.Data.Binding.ShouldSerializePath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath()
  nameWithType: Binding.ShouldSerializePath()
  fullName: System.Windows.Data.Binding.ShouldSerializePath()
- uid: System.Windows.Data.Binding.ShouldSerializeSource
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource()
  nameWithType: Binding.ShouldSerializeSource()
  fullName: System.Windows.Data.Binding.ShouldSerializeSource()
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules()
  nameWithType: Binding.ShouldSerializeValidationRules()
  fullName: System.Windows.Data.Binding.ShouldSerializeValidationRules()
- uid: System.Windows.Data.Binding.Source
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
  fullName: System.Windows.Data.Binding.Source
- uid: System.Windows.Data.Binding.SourceUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SourceUpdatedEvent
  nameWithType: Binding.SourceUpdatedEvent
  fullName: System.Windows.Data.Binding.SourceUpdatedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Data.Binding.TargetUpdatedEvent
  parent: System.Windows.Data.Binding
  isExternal: false
  name: TargetUpdatedEvent
  nameWithType: Binding.TargetUpdatedEvent
  fullName: System.Windows.Data.Binding.TargetUpdatedEvent
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
  fullName: System.Windows.Data.Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.UpdateSourceExceptionFilterCallback
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceExceptionFilterCallback
  nameWithType: UpdateSourceExceptionFilterCallback
  fullName: System.Windows.Data.UpdateSourceExceptionFilterCallback
- uid: System.Windows.Data.Binding.UpdateSourceTrigger
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
  fullName: System.Windows.Data.Binding.UpdateSourceTrigger
- uid: System.Windows.Data.UpdateSourceTrigger
  parent: System.Windows.Data
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: UpdateSourceTrigger
  fullName: System.Windows.Data.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
  fullName: System.Windows.Data.Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
  fullName: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
  fullName: System.Windows.Data.Binding.ValidationRules
- uid: System.Collections.ObjectModel.Collection{System.Windows.Controls.ValidationRule}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ValidationRule>
  nameWithType: Collection<ValidationRule>
  fullName: System.Collections.ObjectModel.Collection<System.Windows.Controls.ValidationRule>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Windows.Controls.ValidationRule>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Controls.ValidationRule
    name: ValidationRule
    nameWithType: ValidationRule
    fullName: ValidationRule
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Data.Binding.XmlNamespaceManagerProperty
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XmlNamespaceManagerProperty
  nameWithType: Binding.XmlNamespaceManagerProperty
  fullName: System.Windows.Data.Binding.XmlNamespaceManagerProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Data.Binding.XPath
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
  fullName: System.Windows.Data.Binding.XPath
- uid: System.Windows.Data.Binding.#ctor*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Binding
  nameWithType: Binding.Binding
- uid: System.Windows.Data.Binding.AddSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddSourceUpdatedHandler
  nameWithType: Binding.AddSourceUpdatedHandler
- uid: System.Windows.Data.Binding.AddTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AddTargetUpdatedHandler
  nameWithType: Binding.AddTargetUpdatedHandler
- uid: System.Windows.Data.Binding.AsyncState*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: AsyncState
  nameWithType: Binding.AsyncState
- uid: System.Windows.Data.Binding.BindsDirectlyToSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: BindsDirectlyToSource
  nameWithType: Binding.BindsDirectlyToSource
- uid: System.Windows.Data.Binding.Converter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Converter
  nameWithType: Binding.Converter
- uid: System.Windows.Data.Binding.ConverterCulture*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterCulture
  nameWithType: Binding.ConverterCulture
- uid: System.Windows.Data.Binding.ConverterParameter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ConverterParameter
  nameWithType: Binding.ConverterParameter
- uid: System.Windows.Data.Binding.ElementName*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ElementName
  nameWithType: Binding.ElementName
- uid: System.Windows.Data.Binding.GetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: GetXmlNamespaceManager
  nameWithType: Binding.GetXmlNamespaceManager
- uid: System.Windows.Data.Binding.IsAsync*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: IsAsync
  nameWithType: Binding.IsAsync
- uid: System.Windows.Data.Binding.Mode*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Mode
  nameWithType: Binding.Mode
- uid: System.Windows.Data.Binding.NotifyOnSourceUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnSourceUpdated
  nameWithType: Binding.NotifyOnSourceUpdated
- uid: System.Windows.Data.Binding.NotifyOnTargetUpdated*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnTargetUpdated
  nameWithType: Binding.NotifyOnTargetUpdated
- uid: System.Windows.Data.Binding.NotifyOnValidationError*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: NotifyOnValidationError
  nameWithType: Binding.NotifyOnValidationError
- uid: System.Windows.Data.Binding.Path*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Path
  nameWithType: Binding.Path
- uid: System.Windows.Data.Binding.RelativeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RelativeSource
  nameWithType: Binding.RelativeSource
- uid: System.Windows.Data.Binding.RemoveSourceUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveSourceUpdatedHandler
  nameWithType: Binding.RemoveSourceUpdatedHandler
- uid: System.Windows.Data.Binding.RemoveTargetUpdatedHandler*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: RemoveTargetUpdatedHandler
  nameWithType: Binding.RemoveTargetUpdatedHandler
- uid: System.Windows.Data.Binding.SetXmlNamespaceManager*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: SetXmlNamespaceManager
  nameWithType: Binding.SetXmlNamespaceManager
- uid: System.Windows.Data.Binding.ShouldSerializePath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializePath
  nameWithType: Binding.ShouldSerializePath
- uid: System.Windows.Data.Binding.ShouldSerializeSource*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeSource
  nameWithType: Binding.ShouldSerializeSource
- uid: System.Windows.Data.Binding.ShouldSerializeValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ShouldSerializeValidationRules
  nameWithType: Binding.ShouldSerializeValidationRules
- uid: System.Windows.Data.Binding.Source*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: Source
  nameWithType: Binding.Source
- uid: System.Windows.Data.Binding.UpdateSourceExceptionFilter*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceExceptionFilter
  nameWithType: Binding.UpdateSourceExceptionFilter
- uid: System.Windows.Data.Binding.UpdateSourceTrigger*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: UpdateSourceTrigger
  nameWithType: Binding.UpdateSourceTrigger
- uid: System.Windows.Data.Binding.ValidatesOnDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnDataErrors
  nameWithType: Binding.ValidatesOnDataErrors
- uid: System.Windows.Data.Binding.ValidatesOnExceptions*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnExceptions
  nameWithType: Binding.ValidatesOnExceptions
- uid: System.Windows.Data.Binding.ValidatesOnNotifyDataErrors*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidatesOnNotifyDataErrors
  nameWithType: Binding.ValidatesOnNotifyDataErrors
- uid: System.Windows.Data.Binding.ValidationRules*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: ValidationRules
  nameWithType: Binding.ValidationRules
- uid: System.Windows.Data.Binding.XPath*
  parent: System.Windows.Data.Binding
  isExternal: false
  name: XPath
  nameWithType: Binding.XPath
