### YamlMime:ManagedReference
items:
- uid: System.Net.HttpListenerContext
  id: HttpListenerContext
  children:
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  - System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  - System.Net.HttpListenerContext.Request
  - System.Net.HttpListenerContext.Response
  - System.Net.HttpListenerContext.User
  langs:
  - csharp
  name: HttpListenerContext
  nameWithType: HttpListenerContext
  fullName: System.Net.HttpListenerContext
  type: Class
  summary: "提供由请求和响应对象的访问权限<xref href=&quot;System.Net.HttpListener&quot;></xref>类。 此类不能被继承。"
  remarks: "此类提供与所处理的客户端的超文本传输协议 (HTTP) 请求相关的信息<xref:System.Net.HttpListener>对象。</xref:System.Net.HttpListener> 此类还具有允许的方法<xref:System.Net.HttpListener>要接受的 WebSocket 连接对象。</xref:System.Net.HttpListener>       <xref:System.Net.HttpListener.GetContext%2A>方法返回实例的 HttpListenerContext 类。</xref:System.Net.HttpListener.GetContext%2A> 若要获取表示客户端请求的对象，请使用<xref:System.Net.HttpListenerContext.Request%2A>属性。</xref:System.Net.HttpListenerContext.Request%2A> 若要获取该对象表示将发送到客户端的响应<xref:System.Net.HttpListener>，使用<xref:System.Net.HttpListenerContext.Response%2A>属性。</xref:System.Net.HttpListenerContext.Response%2A> </xref:System.Net.HttpListener> 若要获取有关客户端发送请求，如其登录名和是否它已经过身份验证，用户信息可以查询中的属性<xref:System.Security.Principal.IPrincipal>返回对象<xref:System.Net.HttpListenerContext.User%2A>属性。</xref:System.Net.HttpListenerContext.User%2A> </xref:System.Security.Principal.IPrincipal>       关闭 HttpListenerContext 对象发送到客户端的响应，并释放使用 HttpListenerContext 的任何资源。 正在中止 HttpListenerContext 对象放弃对客户端的响应，如果它不已发送，并释放使用 HttpListenerContext 的任何资源。 后关闭或中止 HttpListenerContext 对象，不能引用它的方法或属性。 如果这样做，你将收到<xref:System.ObjectDisposedException>异常。</xref:System.ObjectDisposedException>"
  example:
  - "The following code example displays the user information for a client request.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/t-system.net.httplistene_0_1.cs)]"
  syntax:
    content: public sealed class HttpListenerContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  id: AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "接受作为异步操作的 WebSocket 连接。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后已被接受 WebSocket 连接。</xref:System.Threading.Tasks.Task%601>       接收缓冲区的大小为 16,385 字节。 WebSocket 保持活动状态的间隔设置为默认值为 30000 （30 秒）。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol);
    parameters:
    - id: subProtocol
      type: System.String
      description: "支持的 WebSocket 子协议。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "返回&lt;xref:System.Threading.Tasks.Task%601&gt;。       表示异步操作的任务对象。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;任务对象上的属性返回<xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref>对象。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>为空字符串-或-<code>subProtocol</code>包含非法字符。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "发送完成 WebSocket 握手的响应时出错。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "接受将支持的 WebSocket 子协议和 WebSocket 保持活动状态的间隔指定为异步操作的 WebSocket 连接。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后已被接受 WebSocket 连接。</xref:System.Threading.Tasks.Task%601>       接收缓冲区的大小为 16,385 字节。"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "支持的 WebSocket 子协议。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 协议保持活动状态的间隔 （毫秒）。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "返回&lt;xref:System.Threading.Tasks.Task%601&gt;。       表示异步操作的任务对象。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;任务对象上的属性返回<xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref>对象。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>为空字符串-或-<code>subProtocol</code>包含非法字符。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>对于太小。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "发送完成 WebSocket 握手的响应时出错。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "接受指定的受支持的 WebSocket 子协议的 WebSocket 连接时，收到缓冲区大小和 WebSocket 保持活动状态的间隔以异步操作。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>1> 对象都完成后已被接受 WebSocket 连接。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval);
    parameters:
    - id: subProtocol
      type: System.String
      description: "支持的 WebSocket 子协议。"
    - id: receiveBufferSize
      type: System.Int32
      description: "接收缓冲区的大小以字节为单位。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 协议保持活动状态的间隔 （毫秒）。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "返回&lt;xref:System.Threading.Tasks.Task%601&gt;。       表示异步操作的任务对象。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;任务对象上的属性返回<xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref>对象。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>为空字符串-或-<code>subProtocol</code>包含非法字符。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>对于太小。       -<code>receiveBufferSize</code>小于 16 字节-或-<code>receiveBufferSize</code>大于 64k 字节。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "发送完成 WebSocket 握手的响应时出错。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  id: AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  type: Method
  assemblies:
  - System
  namespace: System.Net
  summary: "接受 WebSocket 连接指定的受支持的 WebSocket 子协议，接收缓冲区大小、 WebSocket 保持活动状态的间隔，以及作为异步操作的内部缓冲区。"
  remarks: "不会阻止此操作。 返回<xref:System.Threading.Tasks.Task%601>对象都完成后已被接受 WebSocket 连接。</xref:System.Threading.Tasks.Task%601>"
  syntax:
    content: public System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext> AcceptWebSocketAsync (string subProtocol, int receiveBufferSize, TimeSpan keepAliveInterval, ArraySegment<byte> internalBuffer);
    parameters:
    - id: subProtocol
      type: System.String
      description: "支持的 WebSocket 子协议。"
    - id: receiveBufferSize
      type: System.Int32
      description: "接收缓冲区的大小以字节为单位。"
    - id: keepAliveInterval
      type: System.TimeSpan
      description: "WebSocket 协议保持活动状态的间隔 （毫秒）。"
    - id: internalBuffer
      type: System.ArraySegment{System.Byte}
      description: "内部缓冲区用于此操作。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
      description: "返回&lt;xref:System.Threading.Tasks.Task%601&gt;。       表示异步操作的任务对象。 &lt;Xref:System.Threading.Tasks.Task%601.Result%2A&gt;任务对象上的属性返回<xref href=&quot;System.Net.WebSockets.HttpListenerWebSocketContext&quot;></xref>对象。"
  overload: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>subProtocol</code>为空字符串-或-<code>subProtocol</code>包含非法字符。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>keepAliveInterval</code>对于太小。       -<code>receiveBufferSize</code>小于 16 字节-或-<code>receiveBufferSize</code>大于 64k 字节。"
  - type: System.Net.WebSockets.WebSocketException
    commentId: T:System.Net.WebSockets.WebSocketException
    description: "发送完成 WebSocket 握手的响应时出错。"
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Request
  id: Request
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取<xref href=&quot;System.Net.HttpListenerRequest&quot;></xref>表示对资源的客户端的请求。"
  remarks: "如果关闭此<xref:System.Net.HttpListenerContext>，它将发送到客户端，响应关闭<xref:System.Net.HttpListenerResponse>包含响应，并关闭<xref:System.Net.HttpListenerRequest>此属性返回的对象。</xref:System.Net.HttpListenerRequest> </xref:System.Net.HttpListenerResponse> </xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates calling this method. The `listener` variable holds an <xref:System.Net.HttpListener> object.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_16_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerRequest Request { get; }
    return:
      type: System.Net.HttpListenerRequest
      description: "<xref href=&quot;System.Net.HttpListenerRequest&quot;> </xref>表示客户端请求的对象。"
  overload: System.Net.HttpListenerContext.Request*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.Response
  id: Response
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取<xref href=&quot;System.Net.HttpListenerResponse&quot;></xref>将发送到客户端的请求响应中的客户端的对象。"
  remarks: "你的应用程序通过设置属性配置响应<xref:System.Net.HttpListenerResponse>此属性返回的对象。</xref:System.Net.HttpListenerResponse> 配置响应之后, 你将其发送到客户端通过关闭响应，或关闭此<xref:System.Net.HttpListenerContext>对象。</xref:System.Net.HttpListenerContext>"
  example:
  - "The following code example demonstrates getting the response to a client's request and adding the response body.  \n  \n [!code-cs[Net_Listener_Basic#3](~/add/codesnippet/csharp/p-system.net.httplistene_35_1.cs)]"
  syntax:
    content: public System.Net.HttpListenerResponse Response { get; }
    return:
      type: System.Net.HttpListenerResponse
      description: "<xref href=&quot;System.Net.HttpListenerResponse&quot;> </xref>用于将响应发送回客户端对象。"
  overload: System.Net.HttpListenerContext.Response*
  exceptions: []
  platform:
  - net462
- uid: System.Net.HttpListenerContext.User
  id: User
  parent: System.Net.HttpListenerContext
  langs:
  - csharp
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
  type: Property
  assemblies:
  - System
  namespace: System.Net
  summary: "获取用于获取其请求表示此客户端标识、 身份验证信息和安全角色的对象<xref href=&quot;System.Net.HttpListenerContext&quot;></xref>对象。"
  remarks: "<xref:System.Net.HttpListener>表明它需要进行身份验证使用<xref:System.Net.HttpListener.AuthenticationSchemes%2A>属性或通过指定<xref:System.Net.AuthenticationSchemeSelector>委托使用<xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A>属性。</xref:System.Net.HttpListener.AuthenticationSchemeSelectorDelegate%2A> </xref:System.Net.AuthenticationSchemeSelector> </xref:System.Net.HttpListener.AuthenticationSchemes%2A> </xref:System.Net.HttpListener>       若要确定客户端的登录名和身份验证信息，请检查<xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>此属性返回的对象中的属性。</xref:System.Security.Principal.IPrincipal.Identity%2A?displayProperty=fullName>"
  example:
  - "The following code example demonstrates accessing identity and authentication information about the client, and returning it to the client in the response.  \n  \n [!code-cs[Net_Listener_Basic#8](~/add/codesnippet/csharp/p-system.net.httplistene_19_1.cs)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>对象，描述客户端，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Net.HttpListener&quot;></xref>提供此<xref href=&quot;System.Net.HttpListenerContext&quot;></xref>不要求身份验证。</xref:System.Security.Principal.IPrincipal>"
  overload: System.Net.HttpListenerContext.User*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Net.WebSockets.WebSocketException
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketException
  nameWithType: WebSocketException
  fullName: System.Net.WebSockets.WebSocketException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.HttpListenerWebSocketContext}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<HttpListenerWebSocketContext>
  nameWithType: Task<HttpListenerWebSocketContext>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.HttpListenerWebSocketContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.HttpListenerWebSocketContext
    name: HttpListenerWebSocketContext
    nameWithType: HttpListenerWebSocketContext
    fullName: HttpListenerWebSocketContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan)
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync(System.String,System.Int32,System.TimeSpan,System.ArraySegment{System.Byte})
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  nameWithType: HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
  fullName: System.Net.HttpListenerContext.AcceptWebSocketAsync(String,Int32,TimeSpan,ArraySegment<Byte>)
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Net.HttpListenerContext.Request
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
  fullName: System.Net.HttpListenerContext.Request
- uid: System.Net.HttpListenerRequest
  parent: System.Net
  isExternal: false
  name: HttpListenerRequest
  nameWithType: HttpListenerRequest
  fullName: System.Net.HttpListenerRequest
- uid: System.Net.HttpListenerContext.Response
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
  fullName: System.Net.HttpListenerContext.Response
- uid: System.Net.HttpListenerResponse
  parent: System.Net
  isExternal: false
  name: HttpListenerResponse
  nameWithType: HttpListenerResponse
  fullName: System.Net.HttpListenerResponse
- uid: System.Net.HttpListenerContext.User
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
  fullName: System.Net.HttpListenerContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Net.HttpListenerContext.AcceptWebSocketAsync*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: AcceptWebSocketAsync
  nameWithType: HttpListenerContext.AcceptWebSocketAsync
- uid: System.Net.HttpListenerContext.Request*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Request
  nameWithType: HttpListenerContext.Request
- uid: System.Net.HttpListenerContext.Response*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: Response
  nameWithType: HttpListenerContext.Response
- uid: System.Net.HttpListenerContext.User*
  parent: System.Net.HttpListenerContext
  isExternal: false
  name: User
  nameWithType: HttpListenerContext.User
