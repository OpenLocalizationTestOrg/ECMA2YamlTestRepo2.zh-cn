### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.DES
  id: DES
  children:
  - System.Security.Cryptography.DES.#ctor
  - System.Security.Cryptography.DES.Create
  - System.Security.Cryptography.DES.Create(System.String)
  - System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  - System.Security.Cryptography.DES.Key
  langs:
  - csharp
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
  type: Class
  summary: "表示所有 DES 实现必须从中都派生的数据加密标准 (DES) 算法的基类。"
  remarks: "此算法支持密钥长度为 64 位。      1> [!NOTE]&1;> 较新的非对称加密算法，高级加密标准 (AES)，是可用。 请考虑使用<xref:System.Security.Cryptography.Aes>类而不是 DES 类。</xref:System.Security.Cryptography.Aes> DES 仅用于与旧的应用程序和数据的兼容性。"
  example:
  - "The following code example uses <xref:System.Security.Cryptography.DESCryptoServiceProvider> (an implementation of DES) to encrypt a string to an in-memory buffer. It then decrypts and displays the round-tripped string.  \n  \n [!code-vb[TripleDESCryptoServiceProvider#1](~/add/codesnippet/visualbasic/t-system.security.crypto_29_1.vb)]\n [!code-cs[TripleDESCryptoServiceProvider#1](~/add/codesnippet/csharp/t-system.security.crypto_29_1.cs)]  \n  \n Decryption can be handled in the same way; use <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateDecryptor%2A> instead of <xref:System.Security.Cryptography.DESCryptoServiceProvider.CreateEncryptor%2A>. The same key (<xref:System.Security.Cryptography.SymmetricAlgorithm.Key%2A>) and initialization vector (<xref:System.Security.Cryptography.SymmetricAlgorithm.IV%2A>) used to encrypt the file must be used to decrypt it."
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DES : System.Security.Cryptography.SymmetricAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.SymmetricAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSize
  - System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Clear
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateDecryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor
  - System.Security.Cryptography.SymmetricAlgorithm.CreateEncryptor(System.Byte[],System.Byte[])
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose
  - System.Security.Cryptography.SymmetricAlgorithm.Dispose(System.Boolean)
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSize
  - System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateIV
  - System.Security.Cryptography.SymmetricAlgorithm.GenerateKey
  - System.Security.Cryptography.SymmetricAlgorithm.IV
  - System.Security.Cryptography.SymmetricAlgorithm.IVValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeySize
  - System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.SymmetricAlgorithm.KeyValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalBlockSizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.SymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.SymmetricAlgorithm.Mode
  - System.Security.Cryptography.SymmetricAlgorithm.ModeValue
  - System.Security.Cryptography.SymmetricAlgorithm.Padding
  - System.Security.Cryptography.SymmetricAlgorithm.PaddingValue
  - System.Security.Cryptography.SymmetricAlgorithm.ValidKeySize(System.Int32)
  platform:
  - net462
- uid: System.Security.Cryptography.DES.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: DES()
  nameWithType: DES.DES()
  fullName: System.Security.Cryptography.DES.DES()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>类。"
  remarks: "无法创建抽象类的实例。 应用程序代码将创建派生类的新实例。       此方法初始化的受保护的字段<xref:System.Security.Cryptography.SymmetricAlgorithm>为下表中显示的默认值的类。</xref:System.Security.Cryptography.SymmetricAlgorithm>      |字段 |默认值 |  |-----------|-------------------|  |<xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>|&64; |  |<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>|&64; |  |<xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue>|64|</xref:System.Security.Cryptography.SymmetricAlgorithm.FeedbackSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue></xref:System.Security.Cryptography.SymmetricAlgorithm.KeySizeValue>"
  syntax:
    content: protected DES ();
    parameters: []
  overload: System.Security.Cryptography.DES.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Create
  id: Create
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create()
  nameWithType: DES.Create()
  fullName: System.Security.Cryptography.DES.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "创建加密对象来执行数据加密标准的实例 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) 算法。"
  remarks: "创建的实例<xref:System.Security.Cryptography.DES>可以用于加密和解密数据的对象。</xref:System.Security.Cryptography.DES>"
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-vb[Cryptography.DES.Create.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_69_1.vb)]\n [!code-cpp[Cryptography.DES.Create.File#1](~/add/codesnippet/cpp/m-system.security.crypto_69_1.cpp)]\n [!code-cs[Cryptography.DES.Create.File#1](~/add/codesnippet/csharp/m-system.security.crypto_69_1.cs)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.DES.Create.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_69_2.cs)]\n [!code-cpp[Cryptography.DES.Create.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_69_2.cpp)]\n [!code-vb[Cryptography.DES.Create.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_69_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.DES
      description: "一个加密对象。"
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: System.Security.Cryptography.DES.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "创建加密对象执行的指定的实现的数据加密标准的实例 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) 算法。"
  remarks: ''
  example:
  - "The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in a file.  \n  \n [!code-cs[Cryptography.DES.Createstring.File#1](~/add/codesnippet/csharp/m-system.security.crypto_27_1.cs)]\n [!code-vb[Cryptography.DES.Createstring.File#1](~/add/codesnippet/visualbasic/m-system.security.crypto_27_1.vb)]\n [!code-cpp[Cryptography.DES.Createstring.File#1](~/add/codesnippet/cpp/m-system.security.crypto_27_1.cpp)]  \n  \n The following code example shows how to create and use a <xref:System.Security.Cryptography.DES> object to encrypt and decrypt data in memory.  \n  \n [!code-cs[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/csharp/m-system.security.crypto_27_2.cs)]\n [!code-cpp[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/cpp/m-system.security.crypto_27_2.cpp)]\n [!code-vb[Cryptography.DES.Createstring.Memory#1](~/add/codesnippet/visualbasic/m-system.security.crypto_27_2.vb)]"
  syntax:
    content: public static System.Security.Cryptography.DES Create (string algName);
    parameters:
    - id: algName
      type: System.String
      description: "特定实现的名称<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>使用。"
    return:
      type: System.Security.Cryptography.DES
      description: "一个加密对象。"
  overload: System.Security.Cryptography.DES.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  id: IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "确定指定的键是否为半弱密钥。"
  remarks: "半弱密钥是导致容易被破解的密码的密钥对。 如果文本用半弱密钥加密，加密产生的密码与该半弱密钥的合作伙伴返回原始文本。 有六个已知半弱密钥对数据加密标准 (<xref:System.Security.Cryptography.DES>) 算法; 此方法检查这些半弱密钥。</xref:System.Security.Cryptography.DES>       尝试设置一种<xref:System.Security.Cryptography.CryptographicException>。</xref:System.Security.Cryptography.CryptographicException>半弱密钥将导致 当<xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>调用创建一个随机密钥，永远不会返回密钥为半弱。</xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>"
  syntax:
    content: public static bool IsSemiWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "要进行半弱漏洞测试的密钥。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果密钥为半弱;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.DES.IsSemiWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "大小<code> rgbKey </code>参数无效。"
  platform:
  - net462
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  id: IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsWeakKey(Byte[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "确定指定的键是否为弱密钥。"
  remarks: "共享密钥的安全性是导致容易被破解的密码的密钥。 如果文本用弱密钥加密的且具有相同的弱密钥重新加密产生的密码返回原始文本。 有四个已知的弱密钥，为数据加密标准 (<xref:System.Security.Cryptography.DES>) 算法; 此方法检查这些弱密钥。</xref:System.Security.Cryptography.DES>       尝试设置弱密钥将导致在<xref:System.Security.Cryptography.CryptographicException>。</xref:System.Security.Cryptography.CryptographicException> 当<xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>称为若要创建一个随机密钥，弱密钥将永远不会返回。</xref:System.Security.Cryptography.DESCryptoServiceProvider.GenerateKey%2A>"
  syntax:
    content: public static bool IsWeakKey (byte[] rgbKey);
    parameters:
    - id: rgbKey
      type: System.Byte[]
      description: "要进行漏洞测试的密钥。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果密钥为弱;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.DES.IsWeakKey*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "大小<code> rgbKey </code>参数无效。"
  platform:
  - net462
- uid: System.Security.Cryptography.DES.Key
  id: Key
  parent: System.Security.Cryptography.DES
  langs:
  - csharp
  name: Key
  nameWithType: DES.Key
  fullName: System.Security.Cryptography.DES.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取或设置数据加密标准的机密密钥 (<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>) 算法。"
  remarks: "如果此属性为`null`时使用它，<xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>调用创建一个新的随机值。</xref:System.Security.Cryptography.SymmetricAlgorithm.GenerateKey%2A>       密钥的长度必须等于<xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>.</xref:System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue>       此算法支持密钥长度为 64 位。"
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "机密密钥<xref href=&quot;System.Security.Cryptography.DES&quot;></xref>算法。"
  overload: System.Security.Cryptography.DES.Key*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "尝试将项设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "尝试设置的密钥，其长度不等于<xref href=&quot;System.Security.Cryptography.SymmetricAlgorithm.BlockSizeValue&quot;> </xref>。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "尝试设置弱密钥 (请参阅<> *1>) 或半弱密钥 (请参阅<> *1>)。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.SymmetricAlgorithm
  isExternal: false
  name: System.Security.Cryptography.SymmetricAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Cryptography.DES.#ctor
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES()
  nameWithType: DES.DES()
  fullName: System.Security.Cryptography.DES.DES()
- uid: System.Security.Cryptography.DES.Create
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create()
  nameWithType: DES.Create()
  fullName: System.Security.Cryptography.DES.Create()
- uid: System.Security.Cryptography.DES
  parent: System.Security.Cryptography
  isExternal: false
  name: DES
  nameWithType: DES
  fullName: System.Security.Cryptography.DES
- uid: System.Security.Cryptography.DES.Create(System.String)
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create(String)
  nameWithType: DES.Create(String)
  fullName: System.Security.Cryptography.DES.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.DES.IsSemiWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey(Byte[])
  nameWithType: DES.IsSemiWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsSemiWeakKey(Byte[])
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.DES.IsWeakKey(System.Byte[])
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey(Byte[])
  nameWithType: DES.IsWeakKey(Byte[])
  fullName: System.Security.Cryptography.DES.IsWeakKey(Byte[])
- uid: System.Security.Cryptography.DES.Key
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
  fullName: System.Security.Cryptography.DES.Key
- uid: System.Security.Cryptography.DES.#ctor*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: DES
  nameWithType: DES.DES
- uid: System.Security.Cryptography.DES.Create*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Create
  nameWithType: DES.Create
- uid: System.Security.Cryptography.DES.IsSemiWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsSemiWeakKey
  nameWithType: DES.IsSemiWeakKey
- uid: System.Security.Cryptography.DES.IsWeakKey*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: IsWeakKey
  nameWithType: DES.IsWeakKey
- uid: System.Security.Cryptography.DES.Key*
  parent: System.Security.Cryptography.DES
  isExternal: false
  name: Key
  nameWithType: DES.Key
