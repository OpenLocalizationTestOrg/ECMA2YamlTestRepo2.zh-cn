### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.KeyGesture
  id: KeyGesture
  children:
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  - System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  - System.Windows.Input.KeyGesture.DisplayString
  - System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  - System.Windows.Input.KeyGesture.Key
  - System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  - System.Windows.Input.KeyGesture.Modifiers
  langs:
  - csharp
  name: KeyGesture
  nameWithType: KeyGesture
  fullName: System.Windows.Input.KeyGesture
  type: Class
  summary: "定义可用于调用命令某一键盘组合。"
  remarks: "在大多数情况下，KeyGesture 必须与关联一个或多个<xref:System.Windows.Input.ModifierKeys>。</xref:System.Windows.Input.ModifierKeys> 此规则的例外是功能键和数字键盘键，可以有效 KeyGesture 本身。 例如，你可以通过使用仅 F12 键，创建 KeyGesture，但若要使用 X KeyGesture 中的键它必须先与配对修改键。       一般情况下，你可以你可以使用<xref:System.Windows.Input.KeyBinding>要绑定到 KeyGesture <xref:System.Windows.Input.ICommand>，以便 KeyGesture 发生时调用此命令。</xref:System.Windows.Input.ICommand> </xref:System.Windows.Input.KeyBinding>       有关 KeyGesture[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]用法，通常在中设置的属性[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]是<xref:System.Windows.Input.KeyBinding.Gesture%2A>，在某些情况下，笔势的标准键和修改键。</xref:System.Windows.Input.KeyBinding.Gesture%2A> 你还可以设置<xref:System.Windows.Input.KeyBinding.Gesture%2A>属性是只需的功能键或只需修饰符密钥组合。</xref:System.Windows.Input.KeyBinding.Gesture%2A> 但是，它是更常见的是设置<xref:System.Windows.Input.KeyBinding.Key%2A>属性预期的命令绑定是否具有任何修饰符的函数键或<xref:System.Windows.Input.KeyBinding.Modifiers%2A>预期的命令绑定是否仅用于修改键。</xref:System.Windows.Input.KeyBinding.Modifiers%2A> </xref:System.Windows.Input.KeyBinding.Key%2A>      <a name=&quot;xamlAttributeUsage_KeyGesture&quot;></a># # XAML 属性用法```   <object property=&quot;oneOrMoreModifierKeys+key&quot;/>   - or -   <object property=&quot;functionKey&quot;/>   ``` <a name=&quot;xamlValues_KeyGesture&quot;> </a> # # XAML 值`functionKey`<xref:System.Windows.Input.Key>单个密钥值，该值必须是一个功能键 (F1-12) 或数字小键盘键。</xref:System.Windows.Input.Key>                 `oneOrMoreModifierKeys`一个或多个定义的修改键<xref:System.Windows.Input.ModifierKeys>枚举，用&quot;+&quot;字符分隔。</xref:System.Windows.Input.ModifierKeys>       `key`    <xref:System.Windows.Input.Key>单个密钥值。</xref:System.Windows.Input.Key>"
  example:
  - "The following example shows how to bind the <xref:System.Windows.Input.ApplicationCommands.Close%2A> command to a KeyGesture using a <xref:System.Windows.Input.KeyBinding>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]  \n  \n The following example shows how to use KeyGesture in [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]. Note that the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage does not directly declare a `<KeyGesture>` element. That object element usage is not possible because KeyGesture does not expose a public default constructor. Instead, the [!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)] usage uses the typeconverter behavior to declare an entire KeyGesture inline as the `Gesture` attribute value.  \n  \n [!code-xml[commandWithHandler#CommandHandlerKeyBinding](~/add/codesnippet/xaml/commandWithHandler/Window1.xaml#commandhandlerkeybinding)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.Input.KeyGestureConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Input.KeyGestureValueSerializer))]

      public class KeyGesture : System.Windows.Input.InputGesture
  inheritance:
  - System.Object
  - System.Windows.Input.InputGesture
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  id: '#ctor(System.Windows.Input.Key)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>使用指定的类<xref href=&quot;System.Windows.Input.Key&quot;> </xref>。"
  remarks: "在大多数情况下，<xref:System.Windows.Input.KeyGesture>必须与一个或多个<xref:System.Windows.Input.ModifierKeys>。</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  此规则的例外是功能键和数字键盘键，可以是一个有效<xref:System.Windows.Input.KeyGesture>本身。</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>.  The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithnomodifier)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithNoModifier](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithnomodifier)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "与此手势关联的密钥。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>key</code>不是有效<xref href=&quot;System.Windows.Input.Key&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>不是有效<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>使用指定的类<xref href=&quot;System.Windows.Input.Key&quot;></xref>和<xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>。"
  remarks: "在大多数情况下，<xref:System.Windows.Input.KeyGesture>必须与一个或多个<xref:System.Windows.Input.ModifierKeys>。</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> 此规则的例外是功能键和数字键盘键，可以是一个有效<xref:System.Windows.Input.KeyGesture>本身。</xref:System.Windows.Input.KeyGesture>"
  example:
  - "The following example shows how to use this constructor to create a <xref:System.Windows.Input.KeyGesture> and associate it with a <xref:System.Windows.Input.KeyBinding>. The <xref:System.Windows.Input.KeyBinding> is then added to the <xref:System.Windows.Input.InputBindingCollection> of a <xref:System.Windows.Window>.  \n  \n [!code-cs[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keybindingwithkeyandmodifiers)]\n [!code-vb[commandlibrarysnippets#KeyBindingWithKeyAndModifiers](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keybindingwithkeyandmodifiers)]"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "笔势与关联的密钥。"
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "修改键与笔势关联。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>和<code>modifiers</code>未形成一个有效<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  id: '#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)'
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
  type: Constructor
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "初始化的新实例<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>使用指定的类<xref href=&quot;System.Windows.Input.Key&quot;> </xref>， <xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>，并显示字符串。"
  remarks: "<xref:System.Windows.Input.KeyGesture.DisplayString%2A>属性设置为`displayString`参数。</xref:System.Windows.Input.KeyGesture.DisplayString%2A>"
  syntax:
    content: public KeyGesture (System.Windows.Input.Key key, System.Windows.Input.ModifierKeys modifiers, string displayString);
    parameters:
    - id: key
      type: System.Windows.Input.Key
      description: "笔势与关联的密钥。"
    - id: modifiers
      type: System.Windows.Input.ModifierKeys
      description: "修改键与笔势关联。"
    - id: displayString
      type: System.String
      description: "字符串表示形式<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  overload: System.Windows.Input.KeyGesture.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>modifiers</code>is not a valid <xref href=&quot;System.Windows.Input.ModifierKeys&quot;></xref>       -or-       <code>key</code> is not a valid <xref href=&quot;System.Windows.Input.Key&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>displayString</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<code>key</code>和<code>modifiers</code>未形成一个有效<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.DisplayString
  id: DisplayString
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取的字符串表示形式这<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  remarks: "如果未在构造函数中设置了显示字符串，则返回空字符串。       如果此属性为空，<xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>方法返回从<xref:System.Windows.Input.KeyGesture.Key%2A>和<xref:System.Windows.Input.KeyGesture.Modifiers%2A>。</xref:System.Windows.Input.KeyGesture.Modifiers%2A></xref:System.Windows.Input.KeyGesture.Key%2A>创建的字符串</xref:System.Windows.Input.KeyGesture.GetDisplayStringForCulture%2A>"
  syntax:
    content: public string DisplayString { get; }
    return:
      type: System.String
      description: "这显示字符串<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。 默认值为<xref:System.String.Empty>。</xref:System.String.Empty>"
  overload: System.Windows.Input.KeyGesture.DisplayString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  id: GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "返回一个字符串，用于显示<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  remarks: "如果显示字符串所设置的构造函数，则返回字符串;否则，将字符串创建从<xref:System.Windows.Input.KeyGesture.Key%2A>和<xref:System.Windows.Input.KeyGesture.Modifiers%2A>进行控制的任何必要的转换与由指定<xref:System.Globalization.CultureInfo>对象。</xref:System.Globalization.CultureInfo> </xref:System.Windows.Input.KeyGesture.Modifiers%2A> </xref:System.Windows.Input.KeyGesture.Key%2A>"
  syntax:
    content: public string GetDisplayStringForCulture (System.Globalization.CultureInfo culture);
    parameters:
    - id: culture
      type: System.Globalization.CultureInfo
      description: "区域性特定信息。"
    return:
      type: System.String
      description: "要显示的字符串"
  overload: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Key
  id: Key
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取与此相关联的密钥<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  remarks: "在大多数情况下，<xref:System.Windows.Input.KeyGesture>必须与一个或多个<xref:System.Windows.Input.ModifierKeys>。</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture>  此规则的例外是功能键和数字键盘键，可以是一个有效<xref:System.Windows.Input.KeyGesture>本身。</xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.Key Key { get; }
    return:
      type: System.Windows.Input.Key
      description: "笔势与关联的密钥。  默认值是<xref href=&quot;System.Windows.Input.Key&quot;> </xref>。"
  overload: System.Windows.Input.KeyGesture.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  id: Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "确定是否这<xref href=&quot;System.Windows.Input.KeyGesture&quot;></xref>关联与指定的输入匹配<xref href=&quot;System.Windows.Input.InputEventArgs&quot;></xref>对象。"
  remarks: '`targetElement`可用来做出更具体决定是否应调用命令上的特定元素。'
  example:
  - "The following example shows how to test whether a <xref:System.Windows.Input.KeyGesture> matches the input associated with an instance of an <xref:System.Windows.Input.InputEventArgs>. A <xref:System.Windows.UIElement.KeyDown> event handler is created that compares the event data with the <xref:System.Windows.Input.KeyGesture> by using the Matches method.  \n  \n [!code-cs[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/csharp/CommandLibarySnippets/Window1.xaml.cs#keydownhandlerkeygesturematches)]\n [!code-vb[commandlibrarysnippets#KeyDownHandlerKeyGestureMatches](~/add/codesnippet/visualbasic/commandlibarysnippets/window1.xaml.vb#keydownhandlerkeygesturematches)]"
  syntax:
    content: public override bool Matches (object targetElement, System.Windows.Input.InputEventArgs inputEventArgs);
    parameters:
    - id: targetElement
      type: System.Object
      description: "目标。"
    - id: inputEventArgs
      type: System.Windows.Input.InputEventArgs
      description: "要比较到该笔势的输入的事件数据。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果事件数据与匹配这<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.KeyGesture.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.KeyGesture.Modifiers
  id: Modifiers
  parent: System.Windows.Input.KeyGesture
  langs:
  - csharp
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取与此相关联的修饰符密钥<xref href=&quot;System.Windows.Input.KeyGesture&quot;> </xref>。"
  remarks: "在大多数情况下，<xref:System.Windows.Input.KeyGesture>必须与一个或多个<xref:System.Windows.Input.ModifierKeys>。</xref:System.Windows.Input.ModifierKeys> </xref:System.Windows.Input.KeyGesture> 此规则的例外是功能键和数字键盘键，可以是一个有效<xref:System.Windows.Input.KeyGesture>本身。</xref:System.Windows.Input.KeyGesture> 例如，你可以创建<xref:System.Windows.Input.KeyGesture>通过使用仅 F12 键，但若要使用 X 键中<xref:System.Windows.Input.KeyGesture>具有修饰符键必须成对出现。</xref:System.Windows.Input.KeyGesture> </xref:System.Windows.Input.KeyGesture>"
  syntax:
    content: public System.Windows.Input.ModifierKeys Modifiers { get; }
    return:
      type: System.Windows.Input.ModifierKeys
      description: "修改键与笔势关联。 默认值是<xref href=&quot;System.Windows.Input.ModifierKeys&quot;> </xref>。"
  overload: System.Windows.Input.KeyGesture.Modifiers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputGesture
  isExternal: false
  name: System.Windows.Input.InputGesture
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key)
  nameWithType: KeyGesture.KeyGesture(Key)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key)
- uid: System.Windows.Input.Key
  parent: System.Windows.Input
  isExternal: false
  name: Key
  nameWithType: Key
  fullName: System.Windows.Input.Key
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys)
- uid: System.Windows.Input.ModifierKeys
  parent: System.Windows.Input
  isExternal: false
  name: ModifierKeys
  nameWithType: ModifierKeys
  fullName: System.Windows.Input.ModifierKeys
- uid: System.Windows.Input.KeyGesture.#ctor(System.Windows.Input.Key,System.Windows.Input.ModifierKeys,System.String)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture(Key,ModifierKeys,String)
  nameWithType: KeyGesture.KeyGesture(Key,ModifierKeys,String)
  fullName: System.Windows.Input.KeyGesture.KeyGesture(Key,ModifierKeys,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Input.KeyGesture.DisplayString
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
  fullName: System.Windows.Input.KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(System.Globalization.CultureInfo)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture(CultureInfo)
  nameWithType: KeyGesture.GetDisplayStringForCulture(CultureInfo)
  fullName: System.Windows.Input.KeyGesture.GetDisplayStringForCulture(CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Windows.Input.KeyGesture.Key
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
  fullName: System.Windows.Input.KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches(System.Object,System.Windows.Input.InputEventArgs)
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches(Object,InputEventArgs)
  nameWithType: KeyGesture.Matches(Object,InputEventArgs)
  fullName: System.Windows.Input.KeyGesture.Matches(Object,InputEventArgs)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.InputEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: InputEventArgs
  nameWithType: InputEventArgs
  fullName: System.Windows.Input.InputEventArgs
- uid: System.Windows.Input.KeyGesture.Modifiers
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
  fullName: System.Windows.Input.KeyGesture.Modifiers
- uid: System.Windows.Input.KeyGesture.#ctor*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: KeyGesture
  nameWithType: KeyGesture.KeyGesture
- uid: System.Windows.Input.KeyGesture.DisplayString*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: DisplayString
  nameWithType: KeyGesture.DisplayString
- uid: System.Windows.Input.KeyGesture.GetDisplayStringForCulture*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: GetDisplayStringForCulture
  nameWithType: KeyGesture.GetDisplayStringForCulture
- uid: System.Windows.Input.KeyGesture.Key*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Key
  nameWithType: KeyGesture.Key
- uid: System.Windows.Input.KeyGesture.Matches*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Matches
  nameWithType: KeyGesture.Matches
- uid: System.Windows.Input.KeyGesture.Modifiers*
  parent: System.Windows.Input.KeyGesture
  isExternal: false
  name: Modifiers
  nameWithType: KeyGesture.Modifiers
