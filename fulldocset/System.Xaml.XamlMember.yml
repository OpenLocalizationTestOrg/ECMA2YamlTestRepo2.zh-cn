### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlMember
  id: XamlMember
  children:
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  - System.Xaml.XamlMember.DeclaringType
  - System.Xaml.XamlMember.DeferringLoader
  - System.Xaml.XamlMember.DependsOn
  - System.Xaml.XamlMember.Equals(System.Object)
  - System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  - System.Xaml.XamlMember.GetHashCode
  - System.Xaml.XamlMember.GetXamlNamespaces
  - System.Xaml.XamlMember.Invoker
  - System.Xaml.XamlMember.IsAmbient
  - System.Xaml.XamlMember.IsAttachable
  - System.Xaml.XamlMember.IsDirective
  - System.Xaml.XamlMember.IsEvent
  - System.Xaml.XamlMember.IsNameValid
  - System.Xaml.XamlMember.IsReadOnly
  - System.Xaml.XamlMember.IsReadPublic
  - System.Xaml.XamlMember.IsUnknown
  - System.Xaml.XamlMember.IsWriteOnly
  - System.Xaml.XamlMember.IsWritePublic
  - System.Xaml.XamlMember.LookupCustomAttributeProvider
  - System.Xaml.XamlMember.LookupDeferringLoader
  - System.Xaml.XamlMember.LookupDependsOn
  - System.Xaml.XamlMember.LookupInvoker
  - System.Xaml.XamlMember.LookupIsAmbient
  - System.Xaml.XamlMember.LookupIsEvent
  - System.Xaml.XamlMember.LookupIsReadOnly
  - System.Xaml.XamlMember.LookupIsReadPublic
  - System.Xaml.XamlMember.LookupIsUnknown
  - System.Xaml.XamlMember.LookupIsWriteOnly
  - System.Xaml.XamlMember.LookupIsWritePublic
  - System.Xaml.XamlMember.LookupTargetType
  - System.Xaml.XamlMember.LookupType
  - System.Xaml.XamlMember.LookupTypeConverter
  - System.Xaml.XamlMember.LookupUnderlyingGetter
  - System.Xaml.XamlMember.LookupUnderlyingMember
  - System.Xaml.XamlMember.LookupUnderlyingSetter
  - System.Xaml.XamlMember.LookupValueSerializer
  - System.Xaml.XamlMember.Name
  - System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  - System.Xaml.XamlMember.PreferredXamlNamespace
  - System.Xaml.XamlMember.SerializationVisibility
  - System.Xaml.XamlMember.TargetType
  - System.Xaml.XamlMember.ToString
  - System.Xaml.XamlMember.Type
  - System.Xaml.XamlMember.TypeConverter
  - System.Xaml.XamlMember.UnderlyingMember
  - System.Xaml.XamlMember.ValueSerializer
  langs:
  - csharp
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
  type: Class
  summary: "适用于 XAML 类型的成员提供的 XAML 类型系统标识符。 标识符由 XAML 读取器和 XAML 编写器使用的成员节点的处理过程 (当 XAML 读取器定位在<xref href=&quot;System.Xaml.XamlNodeType&quot;> </xref>) 也将说明 XAML 类型系统的常规逻辑。"
  remarks: "XamlMember 可以使用三个方法用于返回有关 XAML 成员的信息︰ 标准公共语言运行时 (CLR) 反射;调用内部的仅引用反射技术 Api 该使用优化位标志;调入虚拟重写或`Lookup*`可能 XamlMember 子类由提供的 API。 对于大多数应用中的.NET Framework XAML 服务 Api 和 XamlMember API，你使用的默认 XAML 架构上下文。 .NET Framework XAML 服务的默认 XAML 架构上下文使用 CLR 后备类型系统。 这使 XAML 读取器和 XAML 编写器，以处理任何类型或成员定义在中，或其他可用于、 CLR 和其反射技术。      ## 查找 * Api 和 XamlMember 派生类 XamlMember 定义了几个派生类的虚拟成员可能会重写。 这些成员的名称的字符串始终开头`Lookup`。 API 的其余部分名称然后引用虚拟方法影响的属性。 例如，可能会替代 XamlMember 派生类<xref:System.Xaml.XamlMember.LookupTargetType%2A>来影响哪些基本定义的属性<xref:System.Xaml.XamlMember.TargetType%2A>返回中派生的类。</xref:System.Xaml.XamlMember.TargetType%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A> 您可以预测返回值中 XamlMember 或现有的此类属性派生类通过阅读相关的文档的`Lookup*`方法。       用途`Lookup*`方法是提供一种 XAML 类型系统扩展方法包含 XamlMember 基类。 通过从 XamlMember 派生和重写`Lookup`虚拟成员，你可以定义 XAML 成员的 XAML 架构的概念中的 XAML 类型系统而不受限于的后备类型系统或技术的详细信息。 你可以还使用在此方案下，提供的 XAML 架构上下文，并仍返回所需的结果。       作为示例，请考虑 XamlMember 属性<xref:System.Xaml.XamlMember.IsWritePublic%2A>.</xref:System.Xaml.XamlMember.IsWritePublic%2A> 此属性通知调用方该操作，例如使用<xref:System.Xaml.XamlWriter>的序列化可以将一个值写入此成员对目标对象。</xref:System.Xaml.XamlWriter> 在默认实现中，通过使用针对后备 CLR 反射技术进行确定成员是否可写<xref:System.Type>和其成员 ( <xref:System.Reflection.MemberInfo>)。</xref:System.Reflection.MemberInfo> </xref:System.Type> 因此，默认情况下，XAML 类型系统依赖于 CLR 类型系统。 但是，你可以为你 XAML 类型系统的报表的<xref:System.Xaml.XamlMember.IsWritePublic%2A>通过重写 API <xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>.</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A></xref:System.Xaml.XamlMember.IsWritePublic%2A>删除此依赖关系 重写中，你可以使用其他决定，例如特定于您的技术，经过优化程序的固定的 XAML 词汇，或者各种其他策略用于确定 XAML 成员是否可在 XAML 词汇写主查找表的元数据。      ## XamlMember 而无需 XAML 架构上下文最构造 XamlMember 构造函数需要<xref:System.Xaml.XamlSchemaContext>作为其初始化的一部分。</xref:System.Xaml.XamlSchemaContext> <xref:System.Xaml.XamlSchemaContext>，还有必要对于许多内部<xref:System.Xaml.XamlSchemaContext>操作，例如获取被转发从后备类型的信息。</xref:System.Xaml.XamlSchemaContext> </xref:System.Xaml.XamlSchemaContext> 当使用 XamlMember API 时，你通常有<xref:System.Xaml.XamlSchemaContext>从周围的构造，如一种<xref:System.Xaml.XamlWriter>。</xref:System.Xaml.XamlWriter>可用</xref:System.Xaml.XamlSchemaContext> 在这种情况下，你可以将传递<xref:System.Xaml.XamlSchemaContext>引用通过对所有需要 XAML 架构上下文的 XAML 类型系统调用。</xref:System.Xaml.XamlSchemaContext>       一个特定构造函数，<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>不需要一种<xref:System.Xaml.XamlSchemaContext>。</xref:System.Xaml.XamlSchemaContext> 、</xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> 但是，使用构造 XamlMember<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>签名返回`true` <xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>       涉及了加载路径<xref:System.Xaml.XamlObjectWriter>，此类成员不能写入到对象图。</xref:System.Xaml.XamlObjectWriter> 使用.NET Framework XAML 服务实现中，<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>调用会引发<xref:System.Xaml.XamlObjectWriterException>当相关 XamlMember 报告`true` <xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       不应构造的值为 XamlMember`true`为<xref:System.Xaml.XamlMember.IsUnknown%2A>除非你实现可以处理从异常<xref:System.Xaml.XamlObjectWriter>，或通过其他方式来调整<xref:System.Xaml.XamlObjectWriter>行为。</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> 例如，一个或多个以下可能的实现 true︰ 的 XAML 架构上下文都是可用更高版本。      -你使用成员调用程序模式。      -您有意重写<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>中自定义 XAML 编写器。</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: 'public class XamlMember : IEquatable<System.Xaml.XamlMember>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Xaml.XamlMember>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类使用 CLR 类型系统<xref:System.Reflection.EventInfo>和<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>。</xref:System.Reflection.EventInfo>"
  remarks: "如果成员表示一个事件 （事件处理程序连接点属性），请使用此构造函数。"
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "CLR 类型系统<xref:System.Reflection.EventInfo>表示的事件成员。</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成员的上下文。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类使用 CLR 类型系统<xref:System.Reflection.PropertyInfo>和<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>。</xref:System.Reflection.PropertyInfo>"
  remarks: "如果该成员表示的属性 （并不具体而言是事件处理程序连接），请使用此构造函数。"
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "CLR 类型系统<xref:System.Reflection.PropertyInfo>，它表示属性成员。</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成员的上下文。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类使用 CLR 类型系统<xref:System.Reflection.EventInfo>和<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>，包括<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>信息。</xref:System.Reflection.EventInfo>"
  remarks: "如果成员表示一个事件 （或事件处理程序连接点属性），请使用此构造函数。"
  syntax:
    content: public XamlMember (System.Reflection.EventInfo eventInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: eventInfo
      type: System.Reflection.EventInfo
      description: "CLR 类型系统<xref:System.Reflection.EventInfo>表示的事件成员。</xref:System.Reflection.EventInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成员的上下文。"
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>处理运行时反射的实现调用针对<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类使用反射<xref:System.Reflection.PropertyInfo>和<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>，包括<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>信息。</xref:System.Reflection.PropertyInfo>"
  remarks: "只有成员表示的属性，并且它不是事件处理程序连接，请使用此构造函数。"
  syntax:
    content: public XamlMember (System.Reflection.PropertyInfo propertyInfo, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: propertyInfo
      type: System.Reflection.PropertyInfo
      description: "CLR 类型系统<xref:System.Reflection.PropertyInfo>，它表示属性成员。</xref:System.Reflection.PropertyInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成员的上下文。"
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>处理运行时调用的实现调用针对<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示附加事件。"
  remarks: "如果成员表示可附加的事件成员，请使用此构造函数。"
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "可附加事件的字符串名称。"
    - id: adder
      type: System.Reflection.MethodInfo
      description: "CLR 类型系统<xref:System.Reflection.MethodInfo>处理程序<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>的可附加成员的方法的支持实现。</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成员的上下文。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  id: '#ctor(System.String,System.Xaml.XamlType,System.Boolean)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类使用的字符串名称和声明<xref href=&quot;System.Xaml.XamlType&quot;></xref>信息。 A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>构造与此签名具有明显的限制; 请参阅备注。"
  remarks: "A<xref:System.Xaml.XamlMember>构造签名返回 XamlMember `true` <xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember>       涉及了加载路径<xref:System.Xaml.XamlObjectWriter>，此类成员不能写入到对象图。</xref:System.Xaml.XamlObjectWriter> 使用.NET Framework XAML 服务实现中，<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>调用会引发<xref:System.Xaml.XamlObjectWriterException>时相关<xref:System.Xaml.XamlMember>报表`true` <xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       不应构造<xref:System.Xaml.XamlMember>与<xref:System.Xaml.XamlMember.IsUnknown%2A>`true`除非你实现可以处理从异常<xref:System.Xaml.XamlObjectWriter>，或通过其他方式来调整<xref:System.Xaml.XamlObjectWriter>行为。</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember> 例如，一个或多个以下可能的实现 true︰ 的 XAML 架构上下文都是可用更高版本。      -你使用成员调用程序模式。      -您有意重写<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>中自定义 XAML 编写器。</xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>"
  syntax:
    content: public XamlMember (string name, System.Xaml.XamlType declaringType, bool isAttachable);
    parameters:
    - id: name
      type: System.String
      description: "成员的字符串名称。"
    - id: declaringType
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>声明类型的信息。"
    - id: isAttachable
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要指示该成员是可附加;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>name</code>or <code>declaringType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示可附加属性。"
  remarks: "如果成员表示可附加属性，请使用此构造函数。"
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "可附加属性的字符串名称。"
    - id: getter
      type: System.Reflection.MethodInfo
      description: "CLR 类型系统<xref:System.Reflection.MethodInfo>为<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>的可附加成员的访问器的支持实现。</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "CLR 类型系统<xref:System.Reflection.MethodInfo>为<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>的可附加成员的访问器的支持实现。</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成员的上下文。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类<xref href=&quot;System.Xaml.XamlMember&quot;> </xref> ，表示一个可附加的事件，包括<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>信息。"
  remarks: "如果成员表示可附加的事件成员，请使用此构造函数。"
  syntax:
    content: public XamlMember (string attachableEventName, System.Reflection.MethodInfo adder, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachableEventName
      type: System.String
      description: "可附加事件的字符串名称。"
    - id: adder
      type: System.Reflection.MethodInfo
      description: "CLR 类型系统<xref:System.Reflection.MethodInfo>处理程序<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;></xref>的可附加成员的方法的支持实现。</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成员的上下文。"
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>处理运行时调用的实现调用针对<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  id: '#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)'
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlMember&quot;></xref>类<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示可附加的属性，包括<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>信息。"
  remarks: "如果成员表示附加的属性成员，请使用此构造函数。"
  syntax:
    content: public XamlMember (string attachablePropertyName, System.Reflection.MethodInfo getter, System.Reflection.MethodInfo setter, System.Xaml.XamlSchemaContext schemaContext, System.Xaml.Schema.XamlMemberInvoker invoker);
    parameters:
    - id: attachablePropertyName
      type: System.String
      description: "可附加属性的字符串名称。"
    - id: getter
      type: System.Reflection.MethodInfo
      description: "CLR 类型系统<xref:System.Reflection.MethodInfo>为<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>的可附加成员的访问器的支持实现。</xref:System.Reflection.MethodInfo>"
    - id: setter
      type: System.Reflection.MethodInfo
      description: "CLR 类型系统<xref:System.Reflection.MethodInfo>为<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>的可附加成员的访问器的支持实现。</xref:System.Reflection.MethodInfo>"
    - id: schemaContext
      type: System.Xaml.XamlSchemaContext
      description: "<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>限定成员的上下文。"
    - id: invoker
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>处理运行时调用的实现调用针对<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeclaringType
  id: DeclaringType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref href=&quot;System.Xaml.XamlType&quot;></xref>声明与此关联的成员的类型<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "此值通常设置在初始化期间，而且通常不是`null`。      1> [!IMPORTANT]&1;> DeclaringType 信息可在通过传递构造函数进行初始化。 通过直接调入基类构造函数，初始化<xref:System.Xaml.XamlMember>派生类可以省略某些值检查，都在基的类。</xref:System.Xaml.XamlMember> 因此，派生的初始化可以更改 XAML 成员的报告的类型成员关系信息，以便它不再按预期的方式与其基础 CLR 声明的类型系统信息一致。 对于声明的类型信息的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: public System.Xaml.XamlType DeclaringType { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>声明与此关联的成员的类型<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.DeclaringType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DeferringLoader
  id: DeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;对象，用于延迟加载的 XAML 声明对象。"
  remarks: "调用 DeferringLoader 时，将调用<xref:System.Xaml.XamlMember.LookupDeferringLoader%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupDeferringLoader%2A> 在其中的初始内部反射逻辑还未设置信息的情况下会发生此行为。"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> DeferringLoader { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref href=&quot;System.Xaml.XamlDeferringLoader&quot;></xref>泛型约束。"
  overload: System.Xaml.XamlMember.DeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.DependsOn
  id: DependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一份<xref href=&quot;System.Xaml.XamlMember&quot;></xref>对象。 这些报告在相对于此存在的初始化顺序的依赖关系的成员<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "调用 DependsOn 将会调用<xref:System.Xaml.XamlMember.LookupDependsOn%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupDependsOn%2A> 在其中的初始内部反射逻辑还未设置信息的情况下会发生此行为。       `DependsOn`模式可以应用于故意矛盾常规的 XAML 规则的对象模型事例。 一般的 XAML 规则是一种类型的初始化文本作为 （或通过在 XAML 2009 的工厂方法） 不传递的成员必须能够以任意顺序指定。 通过应用`DependsOn`模式于成员，你可以指示 XAML 编写器始终处理之前此成员引用的成员。 你可以应用在其中的当前成员的值需要上下文或其他成员设置之后才可用的其他信息的情况下此模式。       `DependsOn`应谨慎地应用模式，并将其保留为它所服务体系结构的用途的属性方案。 大量的依赖项也可能会减慢 XAML 处理。 另外，它还有可能产生循环依赖关系，在这种情况下的 XAML 处理行为是不确定。       示例`DependsOn`方案从 WPF 上包括某些属性<xref:System.Windows.Controls.ControlTemplate>和<xref:System.Windows.DataTemplate>上<xref:System.Windows.Trigger>，和<xref:System.Windows.Setter>。</xref:System.Windows.Setter> </xref:System.Windows.Trigger> </xref:System.Windows.DataTemplate> </xref:System.Windows.Controls.ControlTemplate>"
  syntax:
    content: public System.Collections.Generic.IList<System.Xaml.XamlMember> DependsOn { get; }
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "一份<xref href=&quot;System.Xaml.XamlMember&quot;></xref>对象。"
  overload: System.Xaml.XamlMember.DependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "指示当前对象是否等于另一个对象。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与此对象进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前对象是否等于<code> obj </code>参数; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  id: Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "指示当前对象是否等于同一类型的另一个对象。"
  syntax:
    content: public bool Equals (System.Xaml.XamlMember other);
    parameters:
    - id: other
      type: System.Xaml.XamlMember
      description: "要与此对象进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前对象是否等于<code> other </code>参数; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetHashCode
  id: GetHashCode
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回此对象的哈希代码。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "整数哈希代码。"
  overload: System.Xaml.XamlMember.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  id: GetXamlNamespaces
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "此 XAML 成员可以存在其中返回 XAML 命名空间的列表。"
  remarks: "默认实现返回<xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>调用从<xref:System.Xaml.XamlMember.DeclaringType%2A>此<xref:System.Xaml.XamlMember>。</xref:System.Xaml.XamlMember>与该键相关联</xref:System.Xaml.XamlMember.DeclaringType%2A>的结果</xref:System.Xaml.XamlType.GetXamlNamespaces%2A?displayProperty=fullName>"
  syntax:
    content: public virtual System.Collections.Generic.IList<string> GetXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "以字符串形式的 XAML 命名空间标识符的列表。"
  overload: System.Xaml.XamlMember.GetXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Invoker
  id: Invoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>与此相关联的实现<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "`Invoker`模式是高级的 XAML 类型系统扩展方法。 `Invoker`模式提供了将不同的架构类型映射行为，注入时仍在使用从.NET Framework XAML 服务 XAML 类型系统定义的方法。       如果<xref:System.Xaml.XamlMember.LookupInvoker%2A>重写返回`null`，或如果默认实现返回`null`因为它缺少<xref:System.Xaml.XamlMember.UnderlyingMember%2A>为此<xref:System.Xaml.XamlMember>，调用程序属性将返回<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>.</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupInvoker%2A>       <xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>默认值。</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> 这适用于使用.NET Framework XAML 服务和默认 XAML 架构上下文，并且没有特定的重写其中的大多数操作`Invoker`模式传递有关构造的 XAML 类型系统实体。       调用调用程序时，将调用<xref:System.Xaml.XamlMember.LookupInvoker%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupInvoker%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlMemberInvoker Invoker { get; }
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;> </xref>与此相关联的实现<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.Invoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAmbient
  id: IsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>报告为环境属性。"
  remarks: "调用 IsAmbient 时，将调用<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupIsAmbient%2A> 在其中的初始内部反射逻辑还未设置信息的实现会发生此行为。       检查环境属性通常是 XAML 处理逻辑，以确保对象和依赖于环境限定使用的类型的值可以正常工作的一部分。 .NET Framework XAML 服务 Api 和默认 XAML 架构上下文填充此值基于<xref:System.Windows.Markup.AmbientAttribute>。</xref:System.Windows.Markup.AmbientAttribute>归属 默认实现<xref:System.Xaml.XamlMember.LookupIsAmbient%2A>使用此现有<xref:System.Windows.Markup.AmbientAttribute>技术，并返回`true`如果<xref:System.Windows.Markup.AmbientAttribute>成员声明上是否存在。</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute> </xref:System.Xaml.XamlMember.LookupIsAmbient%2A>       <xref:System.Windows.Markup.AmbientAttribute>在多个 WPF 类型，其中包括的成员上找到<xref:System.Windows.Application>， <xref:System.Windows.Setter>，和<xref:System.Windows.Style>。</xref:System.Windows.Style> </xref:System.Windows.Setter> </xref:System.Windows.Application></xref:System.Windows.Markup.AmbientAttribute> 它还会在找到<xref:System.Windows.ResourceDictionary>类型，可以表示的任何成员，它使用<xref:System.Windows.ResourceDictionary>为其类型应视为环境即使没有专门特性化的成员。</xref:System.Windows.ResourceDictionary> </xref:System.Windows.ResourceDictionary>"
  syntax:
    content: public bool IsAmbient { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>报告为环境属性; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsAttachable
  id: IsAttachable
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>是可附加成员。"
  remarks: "基于哪个构造函数用于构造<xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember>初始化 IsAttachable 值"
  syntax:
    content: public bool IsAttachable { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>是可附加成员; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsAttachable*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsDirective
  id: IsDirective
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>是 XAML 指令。"
  remarks: "基于哪个构造函数用于构造<xref:System.Xaml.XamlMember>.</xref:System.Xaml.XamlMember>初始化 IsDirective 值 基<xref:System.Xaml.XamlMember>构造函数初始化，使 IsDirective 是`false`。</xref:System.Xaml.XamlMember> 但是，<xref:System.Xaml.XamlDirective>类 (<xref:System.Xaml.XamlMember>派生类) 初始化以便 IsDirective `true`。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlDirective>       如果你想要报告为 IsDirective`true`到 XAML 成员的自定义 XAML 架构类的调用方，请确保派生自<xref:System.Xaml.XamlDirective>，因为它是启用此行为的唯一方法。</xref:System.Xaml.XamlDirective>"
  syntax:
    content: public bool IsDirective { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>是一个 XAML 指令; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsDirective*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsEvent
  id: IsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示事件成员。"
  remarks: "调用 IsEvent 时，将调用<xref:System.Xaml.XamlMember.LookupIsEvent%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupIsEvent%2A>"
  syntax:
    content: public bool IsEvent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个事件; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsNameValid
  id: IsNameValid
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>初始化使用一个有效<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref>字符串作为其<xref:System.Xaml.XamlMember.Name*>.</xref:System.Xaml.XamlMember.Name*>"
  syntax:
    content: public bool IsNameValid { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>初始化使用一个有效<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;></xref>字符串; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsNameValid*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadOnly
  id: IsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示只读成员。"
  remarks: "调用 IsReadOnly 时，将调用<xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupIsReadOnly%2A>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示只读成员; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsReadPublic
  id: IsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个具有可调用公共成员<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>访问器。"
  remarks: "IsReadPublic 是否值检查<xref:System.Xaml.XamlMember.DeclaringType%2A>是公共的。</xref:System.Xaml.XamlMember.DeclaringType%2A> 如果<xref:System.Xaml.XamlMember.DeclaringType%2A>是非公共的`get`访问器不能调用用切实可行的方法，并返回 IsReadPublic `false`。</xref:System.Xaml.XamlMember.DeclaringType%2A>       调用 IsReadPublic 时，将调用<xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>      1> [!IMPORTANT]&1;><xref:System.Xaml.XamlMember.LookupIsReadPublic%2A>方法是虚拟的因此，可以重写。</xref:System.Xaml.XamlMember.LookupIsReadPublic%2A> 重写有可能更改 （恶意或其他） 的报告的访问信息的 XAML 成员，使其不再按预期的方式与其基础 CLR 声明的类型系统访问信息符合。 对于访问级别的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: public bool IsReadPublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个可调用公共<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>访问器; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsUnknown
  id: IsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示成员是否不解析用于解析类型和成员的支持系统。"
  remarks: "A<xref:System.Xaml.XamlMember>构造<xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29>签名返回`true`为 IsUnknown。</xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29> </xref:System.Xaml.XamlMember>       涉及了加载路径<xref:System.Xaml.XamlObjectWriter>、<xref:System.Xaml.XamlMember>与`true`为 IsUnknown 无法写入到对象图。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriter> 在.NET Framework XAML 服务 Api 中的默认实现<xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>调用会引发<xref:System.Xaml.XamlObjectWriterException>时相关<xref:System.Xaml.XamlMember>报表`true`为 IsUnknown。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlObjectWriterException> </xref:System.Xaml.XamlObjectWriter.WriteStartMember%2A?displayProperty=fullName>       不应构造<xref:System.Xaml.XamlMember>，其值为`true`为 IsUnknown 除非你实现可以处理从异常<xref:System.Xaml.XamlObjectWriter>，或通过其他方式来调整<xref:System.Xaml.XamlObjectWriter>行为。</xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlObjectWriter> </xref:System.Xaml.XamlMember>       调用 IsUnknown 时，将调用<xref:System.Xaml.XamlMember.LookupIsUnknown%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupIsUnknown%2A>"
  syntax:
    content: public bool IsUnknown { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果成员不是解析;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>成员是否可解析。"
  overload: System.Xaml.XamlMember.IsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWriteOnly
  id: IsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个只写的成员。"
  remarks: "调用 IsWriteOnly 时，将调用<xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupIsWriteOnly%2A>"
  syntax:
    content: public bool IsWriteOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个只写的成员; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.IsWritePublic
  id: IsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，该值指示是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示具有可调用公共成员<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>访问器。"
  remarks: "IsWritePublic 值会考虑是否<xref:System.Xaml.XamlMember.DeclaringType%2A>是公共的决定的一部分。</xref:System.Xaml.XamlMember.DeclaringType%2A> 如果<xref:System.Xaml.XamlMember.DeclaringType%2A>是非公共的`set`访问器不能调用用切实可行的方法，并返回 IsWritePublic `false`。</xref:System.Xaml.XamlMember.DeclaringType%2A>       调用 IsWritePublic 时，将调用<xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>      1> [!IMPORTANT]&1;><xref:System.Xaml.XamlMember.LookupIsWritePublic%2A>方法是虚拟的因此，可以重写。</xref:System.Xaml.XamlMember.LookupIsWritePublic%2A> 重写有可能更改 （恶意或其他） 的报告的访问信息的 XAML 成员，使其不再按预期的方式与其基础 CLR 声明的类型系统访问信息符合。 对于访问级别的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: public bool IsWritePublic { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个可调用公共<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>访问器; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.IsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  id: LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "派生类中实现时，返回<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;></xref>实现。"
  remarks: "重写该方法以提供内部反射提供一种替代方式，若要获取 CLR 属性值。 在没有重写时，内部反射器使用典型的 CLR 反射逻辑，如到<xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>。</xref:System.Reflection.CustomAttributeData.GetCustomAttributes%2A>调用       默认实现返回`null`。"
  syntax:
    content: protected virtual System.Reflection.ICustomAttributeProvider LookupCustomAttributeProvider ();
    parameters: []
    return:
      type: System.Reflection.ICustomAttributeProvider
      description: "<xref href=&quot;System.Reflection.ICustomAttributeProvider&quot;> </xref>实现。"
  overload: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  id: LookupDeferringLoader
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;对象，用于延迟加载的 XAML 声明对象。"
  remarks: "当调用方获取一个值时，会调用此方法<xref:System.Xaml.XamlMember.DeferringLoader%2A>属性。</xref:System.Xaml.XamlMember.DeferringLoader%2A> 重写此方法，如果你想<xref:System.Xaml.XamlMember.DeferringLoader%2A>从通过默认内部反射的值返回不同的值和如果也要提供自定义<xref:System.Xaml.Schema.XamlMemberInvoker>信息。</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DeferringLoader%2A>       默认实现返回一个对象通过读取<xref:System.Windows.Markup.XamlDeferLoadAttribute>或使用<xref:System.Xaml.XamlDeferringLoader>从声明的类型。</xref:System.Xaml.XamlDeferringLoader> </xref:System.Windows.Markup.XamlDeferLoadAttribute> 如果这两个对象是可用，则此方法可能返回`null`。"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader> LookupDeferringLoader ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;具有<xref href=&quot;System.Xaml.XamlDeferringLoader&quot;></xref>泛型约束。"
  overload: System.Xaml.XamlMember.LookupDeferringLoader*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupDependsOn
  id: LookupDependsOn
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回的列表<xref href=&quot;System.Xaml.XamlMember&quot;></xref>对象。 列表中的项报告在相对于此存在的初始化顺序的依赖关系的成员<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "当调用方获取一个值时，会调用此方法<xref:System.Xaml.XamlMember.DependsOn%2A>属性。</xref:System.Xaml.XamlMember.DependsOn%2A> 重写此方法，如果你想<xref:System.Xaml.XamlMember.DependsOn%2A>从通过默认内部反射的值返回不同的值和如果也要提供自定义<xref:System.Xaml.Schema.XamlMemberInvoker>信息。</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.DependsOn%2A>       WPF XAML 读取器和编写器实现属性<xref:System.Windows.Markup.DependsOnAttribute>。</xref:System.Windows.Markup.DependsOnAttribute>这种情况下 默认实现使用此现有<xref:System.Windows.Markup.DependsOnAttribute>技术。</xref:System.Windows.Markup.DependsOnAttribute>       重写此方法，如果你不使用<xref:System.Windows.Markup.DependsOnAttribute>此目的，并且想要替换该技术，它指示与您自己的方法的属性处理顺序。</xref:System.Windows.Markup.DependsOnAttribute> 如果不想支持属性处理顺序，你可以使用的默认实现，因为它会不返回任何结果，这是适用。       列表是只读的。"
  syntax:
    content: protected virtual System.Collections.Generic.IList<System.Xaml.XamlMember> LookupDependsOn ();
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Xaml.XamlMember}
      description: "一份<xref href=&quot;System.Xaml.XamlMember&quot;></xref>对象。"
  overload: System.Xaml.XamlMember.LookupDependsOn*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupInvoker
  id: LookupInvoker
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref>与此关联<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "通过调用<xref:System.Xaml.XamlMember.Invoker%2A>.</xref:System.Xaml.XamlMember.Invoker%2A>调用此方法       默认实现不要求<xref:System.Xaml.XamlMember>通过使用构造函数传递一个初始<xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker>之一构造</xref:System.Xaml.XamlMember> 但是，<xref:System.Xaml.XamlMember.UnderlyingMember%2A>值必须存在<xref:System.Xaml.XamlMember>; 否则为默认实现返回`null`。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       重写此方法，如果你也是从派生<xref:System.Xaml.Schema.XamlMemberInvoker>，而打算返回派生的类。</xref:System.Xaml.Schema.XamlMemberInvoker> 如果返回`null`，<xref:System.Xaml.XamlMember.Invoker%2A>返回<xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName>向调用方。</xref:System.Xaml.Schema.XamlMemberInvoker.UnknownInvoker%2A?displayProperty=fullName> </xref:System.Xaml.XamlMember.Invoker%2A>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlMemberInvoker LookupInvoker ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlMemberInvoker
      description: "The <xref href=&quot;System.Xaml.Schema.XamlMemberInvoker&quot;></xref> information for this <xref href=&quot;System.Xaml.XamlMember&quot;></xref>; or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Xaml.XamlMember.LookupInvoker*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsAmbient
  id: LookupIsAmbient
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>报告为环境属性。"
  remarks: "通过检查环境的 XAML 属性信息的内部调用会调用此方法。 环境属性行为中的 XAML 读取器和 XAML 编写器的公共 API 行为仅用于。 引用 LookupIsAmbient 的内部调用通常是 XAML 处理逻辑，以确保对象和依赖于环境限定使用的类型的值可以正常工作的一部分。 默认.NET Framework XAML 服务实现使用归获取此信息从反射通过后备类型的 CLR。 具体而言，默认实现可检查<xref:System.Windows.Markup.AmbientAttribute>并返回`true`为 LookupIsAmbient 如果<xref:System.Windows.Markup.AmbientAttribute>成员定义上是否存在。</xref:System.Windows.Markup.AmbientAttribute> </xref:System.Windows.Markup.AmbientAttribute>       重写此方法，如果你不使用<xref:System.Windows.Markup.AmbientAttribute>此目的，并且想要替换该技术，该值指示环境的 XAML 属性，使用您自己的方法。</xref:System.Windows.Markup.AmbientAttribute>       从 WPF<xref:System.Windows.Markup.AmbientAttribute><xref:System.Windows.Trigger.Property%2A?displayProperty=fullName>和<xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName>。</xref:System.Windows.Style.BasedOn%2A?displayProperty=fullName></xref:System.Windows.Trigger.Property%2A?displayProperty=fullName></xref:System.Windows.Markup.AmbientAttribute>与该属性的示例 Api"
  syntax:
    content: protected virtual bool LookupIsAmbient ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要报告此错误<xref href=&quot;System.Xaml.XamlMember&quot;></xref>作为环境属性; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsAmbient*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsEvent
  id: LookupIsEvent
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个事件。"
  remarks: "默认实现检查是否<xref:System.Xaml.XamlMember.UnderlyingMember%2A>属于类型<xref:System.Reflection.EventInfo>，如果是，则返回`true`。</xref:System.Reflection.EventInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A>       当调用方<xref:System.Xaml.XamlMember.IsEvent%2A>。</xref:System.Xaml.XamlMember.IsEvent%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果您拥有的专用元数据可用，可以将本文解释为确定 XAML 类型系统表示形式之间实现基于每个用例。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsEvent ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>报告此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个事件; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  id: LookupIsReadOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示预期的只读属性。"
  remarks: "默认实现返回`true`如果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存在，但公共`set`访问器不存在，由内部反射。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       当调用方<xref:System.Xaml.XamlMember.IsReadOnly%2A>。</xref:System.Xaml.XamlMember.IsReadOnly%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果您拥有的专用元数据可用，可以将本文解释为确定 XAML 类型系统表示形式之间实现基于每个用例。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要报告此错误<xref href=&quot;System.Xaml.XamlMember&quot;></xref>为预期的只读属性; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  id: LookupIsReadPublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示具有公共的属性<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>访问器。"
  remarks: "默认实现返回根据内部反射或求反运算的结果<xref:System.Xaml.XamlMember.IsWriteOnly%2A>按此顺序进行处理。</xref:System.Xaml.XamlMember.IsWriteOnly%2A>       LookupIsReadPublic 返回该成员是否为公共的则它将返回`true`上声明类型的非公共公共成员。 使用<xref:System.Xaml.XamlMember.IsReadPublic%2A>相反，如果你还需要考虑的可见性的声明类型。</xref:System.Xaml.XamlMember.IsReadPublic%2A>       当调用方<xref:System.Xaml.XamlMember.IsReadPublic%2A>。</xref:System.Xaml.XamlMember.IsReadPublic%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>      1> [!IMPORTANT]&1;> LookupIsReadPublic 方法是虚拟的因此，可以重写。 重写有可能更改 （恶意或其他） 的报告的访问信息的 XAML 成员，使其不再按预期的方式与其基础 CLR 声明的类型系统访问信息符合。 对于访问级别的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: protected virtual bool LookupIsReadPublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示具有公共的属性<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>访问器; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsReadPublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsUnknown
  id: LookupIsUnknown
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个不可解析用于解析类型和成员的支持系统的成员。"
  remarks: "当调用方<xref:System.Xaml.XamlMember.IsUnknown%2A>。</xref:System.Xaml.XamlMember.IsUnknown%2A>获取一个值，则可能会调用此方法 默认实现返回结果可能会基于内部反射或检查`null`值<xref:System.Xaml.XamlMember.UnderlyingMember%2A>按此顺序进行处理。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsUnknown ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个非可解析的成员; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsUnknown*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  id: LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示具有公共成员<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>访问而没有公共<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>访问器。"
  remarks: "默认实现返回`true`如果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>存在具有公共`set`访问器和非公共`get`访问器，由内部反射。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       当调用方<xref:System.Xaml.XamlMember.IsWriteOnly%2A>。</xref:System.Xaml.XamlMember.IsWriteOnly%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual bool LookupIsWriteOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个只写的成员; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsWriteOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  id: LookupIsWritePublic
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回是否这<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示具有公共成员<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>访问器。"
  remarks: "默认实现返回结果基于内部反射或求反运算的<xref:System.Xaml.XamlMember.IsReadOnly%2A>按此顺序进行处理。</xref:System.Xaml.XamlMember.IsReadOnly%2A>       当调用方<xref:System.Xaml.XamlMember.IsWritePublic%2A>。</xref:System.Xaml.XamlMember.IsWritePublic%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>      1> [!IMPORTANT]&1;> LookupIsWritePublic 方法是虚拟的因此，可以重写。 重写有可能更改 （恶意或其他） 的报告的访问信息的 XAML 成员，使其不再按预期的方式与其基础 CLR 声明的类型系统访问信息符合。 对于访问级别的任何安全关键检查，请改为使用的基础 CLR 类型。"
  syntax:
    content: protected virtual bool LookupIsWritePublic ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此<xref href=&quot;System.Xaml.XamlMember&quot;></xref>表示一个可写的成员; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupIsWritePublic*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTargetType
  id: LookupTargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlType&quot;></xref>类型的其中<xref href=&quot;System.Xaml.XamlMember&quot;></xref>可以存在。"
  remarks: "默认实现区分可附加的和非可附加成员。 对于非可附加成员，LookupTargetType 始终返回<xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> 对于可附加成员，LookupTargetType 返回基于检查结果<xref:System.Xaml.XamlMember.UnderlyingMember%2A>取值函数参数类型和解释基于 XAML 架构上下文类型。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>       当调用方<xref:System.Xaml.XamlMember.TargetType%2A>。</xref:System.Xaml.XamlMember.TargetType%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupTargetType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "类型其中<xref href=&quot;System.Xaml.XamlMember&quot;></xref>可以存在。 请参阅备注。"
  overload: System.Xaml.XamlMember.LookupTargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupType
  id: LookupType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlType&quot;></xref>的成员使用的类型。 请参阅备注。"
  remarks: "当调用方<xref:System.Xaml.XamlMember.Type%2A>。</xref:System.Xaml.XamlMember.Type%2A>获取一个值时，会调用此方法 重写此方法，如果你想<xref:System.Xaml.XamlMember.Type%2A>从通过默认内部反射的值返回不同的值和如果也要提供自定义<xref:System.Xaml.Schema.XamlMemberInvoker>信息。</xref:System.Xaml.Schema.XamlMemberInvoker> </xref:System.Xaml.XamlMember.Type%2A>       默认实现使用不同的代码路径和概念的含义，以便返回<xref:System.Xaml.XamlType>，基于是否这<xref:System.Xaml.XamlMember>表示属性、 方法或事件。</xref:System.Xaml.XamlMember> </xref:System.Xaml.XamlType>      -对于属性，返回<xref:System.Xaml.XamlType>是设置的属性或属性返回的类型。</xref:System.Xaml.XamlType>      -对于某个事件，返回<xref:System.Xaml.XamlType>是必需的事件处理程序类型 （中的 CLR 实现的委托）。</xref:System.Xaml.XamlType>      -对于方法，<xref:System.Xaml.XamlType>是返回类型。</xref:System.Xaml.XamlType>       在每种情况下，XAML 架构上下文用于评估的基础系统类型中的 XAML 类型。       当调用方<xref:System.Xaml.XamlMember.Type%2A>。</xref:System.Xaml.XamlMember.Type%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.XamlType LookupType ();
    parameters: []
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>的成员使用的类型。 请参阅备注。"
  overload: System.Xaml.XamlMember.LookupType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupTypeConverter
  id: LookupTypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回与此关联的类型转换器实现<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "默认实现使用以下逻辑和处理顺序:-如果在成员级别的归存在 (<xref:System.ComponentModel.TypeConverterAttribute>)，特性信息用于调用<xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>对 XAML 架构上下文。</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.ComponentModel.TypeConverterAttribute>      -如果<xref:System.Xaml.XamlMember.Type%2A>有效，则返回的类型相关联的类型转换器。</xref:System.Xaml.XamlMember.Type%2A>      -如果该成员是事件，则返回特定事件的类型转换器。       当调用方<xref:System.Xaml.XamlMember.TypeConverter%2A>。</xref:System.Xaml.XamlMember.TypeConverter%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> LookupTypeConverter ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;实例与<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>约束; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.LookupTypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  id: LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>与此关联的访问器<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "默认实现将解释<xref:System.Xaml.XamlMember.UnderlyingMember%2A>属性作为<xref:System.Reflection.PropertyInfo>和返回的值<xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName>(参数设置为`true`)，这意味着返回的方法可能不是公用。</xref:System.Reflection.PropertyInfo.GetGetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> 此行为可能会导致`null`对于某些情况。 包括关联的访问器不存在或该成员不是属性的情况。       当调用方从<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>关联<xref:System.Xaml.Schema.XamlMemberInvoker>.</xref:System.Xaml.Schema.XamlMemberInvoker>属性</xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingGetter%2A>中获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember> 请确保实现 LookupUnderlyingGetter， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>，以便它们都返回相关的结果。</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingGetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>关联<xref uid=&quot;langword_csharp_get&quot; name=&quot;get&quot; href=&quot;&quot;></xref>访问器; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingGetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  id: LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回的 CLR 类型系统<xref:System.Reflection.MemberInfo>与此关联<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。</xref:System.Reflection.MemberInfo>"
  remarks: "默认实现返回构造基于的基础成员信息。 如果<xref:System.Reflection.MemberInfo>不提供足够的信息来设置基础成员的签名与构造对象时，此方法返回`null`。</xref:System.Reflection.MemberInfo>       如果在构造过程中设置的基础的成员，你应该不需要调用此方法。       当调用方<xref:System.Xaml.XamlMember.UnderlyingMember%2A>。</xref:System.Xaml.XamlMember.UnderlyingMember%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember> 请确保实现<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>， <xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A>，和 LookupUnderlyingMember，以便它们都返回相关结果。</xref:System.Xaml.XamlMember.LookupUnderlyingSetter%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MemberInfo LookupUnderlyingMember ();
    parameters: []
    return:
      type: System.Reflection.MemberInfo
      description: "CLR 类型系统<xref:System.Reflection.MemberInfo>与此关联的对象<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Reflection.MemberInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  id: LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>与此关联的访问器<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "默认实现将解释<xref:System.Xaml.XamlMember.UnderlyingMember%2A>作为<xref:System.Reflection.PropertyInfo>和返回的值<xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName>(参数设置为`true`)，这意味着返回的方法可能不是公用。</xref:System.Reflection.PropertyInfo.GetSetMethod%2A?displayProperty=fullName> </xref:System.Reflection.PropertyInfo> </xref:System.Xaml.XamlMember.UnderlyingMember%2A> 这可能会导致`null`对于某些情况下，包括在没有此类访问器，或该成员不是属性情况。       当调用方关联<xref:System.Xaml.Schema.XamlMemberInvoker>上获取<xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A>中的一个值时，会调用此方法。重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>  </xref:System.Xaml.Schema.XamlMemberInvoker.UnderlyingSetter%2A></xref:System.Xaml.Schema.XamlMemberInvoker> 请确保实现<xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>，LookupUnderlyingSetter，和<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>，以便它们都返回相关的结果。</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A> </xref:System.Xaml.XamlMember.LookupUnderlyingGetter%2A>"
  syntax:
    content: protected virtual System.Reflection.MethodInfo LookupUnderlyingSetter ();
    parameters: []
    return:
      type: System.Reflection.MethodInfo
      description: "<xref:System.Reflection.MethodInfo>关联<xref uid=&quot;langword_csharp_set&quot; name=&quot;set&quot; href=&quot;&quot;></xref>访问器; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Reflection.MethodInfo>"
  overload: System.Xaml.XamlMember.LookupUnderlyingSetter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.LookupValueSerializer
  id: LookupValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回与此关联的值序列化程序实现<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "默认实现使用以下逻辑和处理顺序:-如果在成员级别的归存在 (<xref:System.Windows.Markup.ValueSerializerAttribute>)，特性信息用于调用<xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A>对 XAML 架构上下文。</xref:System.Xaml.XamlSchemaContext.GetValueConverter%2A> </xref:System.Windows.Markup.ValueSerializerAttribute>      -如果<xref:System.Xaml.XamlMember.Type%2A>有效，则返回的类型相关联的值转换器。</xref:System.Xaml.XamlMember.Type%2A>      -如果不应用前几个条件，`null`返回。       当调用方<xref:System.Xaml.XamlMember.ValueSerializer%2A>。</xref:System.Xaml.XamlMember.ValueSerializer%2A>获取一个值时，会调用此方法 重写此方法，如果你要针对整个报表统一结果<xref:System.Xaml.XamlMember>派生类，或如果你拥有的专用元数据可用于确定这一点在每个用例基础上。</xref:System.Xaml.XamlMember>"
  syntax:
    content: protected virtual System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> LookupValueSerializer ();
    parameters: []
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;实例与<xref:System.Windows.Markup.ValueSerializer>约束，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.LookupValueSerializer*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Name
  id: Name
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> name 声明此字符串<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "始终在构造过程中设置此值。 由实现的构造函数<xref:System.Xaml.XamlMember>通常将引发异常如果未指定初始名称; 因此，不希望此属性才`null`或空字符串，如果你使用默认.NET Framework XAML 服务实现。</xref:System.Xaml.XamlMember>       [XamlName 语法](~/add/includes/ajax-current-ext-md.md)和 CLR 类型和成员的命名规则不是精确相交。 它是可以声明是合法下 CLR 成员名称但在 XAML 命名无效。 应尽可能避免这种情况。"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_xamlName&quot; name=&quot;xamlName&quot; href=&quot;&quot;> </xref> Name 声明此字符串<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "确定是否两个指定<xref href=&quot;System.Xaml.XamlMember&quot;></xref>对象具有相同的值。"
  syntax:
    content: public static bool op_Equality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<code> xamlMember1 </code>的值相同<code> xamlMember2 </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  id: op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
  type: Operator
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "确定是否两个指定<xref href=&quot;System.Xaml.XamlMember&quot;></xref>对象具有不同的值。"
  syntax:
    content: public static bool op_Inequality (System.Xaml.XamlMember xamlMember1, System.Xaml.XamlMember xamlMember2);
    parameters:
    - id: xamlMember1
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    - id: xamlMember2
      type: System.Xaml.XamlMember
      description: "A <xref href=&quot;System.Xaml.XamlMember&quot;></xref> or <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<code> xamlMember1 </code>的值的不同<code> xamlMember2 </code>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  id: PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取单个 XAML 命名空间为此标识主 XAML 命名空间 URI <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "PreferredXamlNamespace 属性提供相同的值调用<xref:System.Xaml.XamlMember.GetXamlNamespaces%2A>，然后从返回的列表中获取的第一个值字符串。</xref:System.Xaml.XamlMember.GetXamlNamespaces%2A> 写回文本或其他表示形式之间实现保留的 XAML 命名空间信息的成员时，应使用首选的 XAML 命名空间。"
  syntax:
    content: public string PreferredXamlNamespace { get; }
    return:
      type: System.String
      description: "此主的 XAML 命名空间的标识符<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>，以字符串形式。"
  overload: System.Xaml.XamlMember.PreferredXamlNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.SerializationVisibility
  id: SerializationVisibility
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;></xref>值，该值指示可视化设计器中应如何处理该成员。"
  syntax:
    content: public System.ComponentModel.DesignerSerializationVisibility SerializationVisibility { get; }
    return:
      type: System.ComponentModel.DesignerSerializationVisibility
      description: "值为<xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;></xref>枚举。 默认值是<xref href=&quot;System.ComponentModel.DesignerSerializationVisibility&quot;> </xref>。"
  overload: System.Xaml.XamlMember.SerializationVisibility*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TargetType
  id: TargetType
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref href=&quot;System.Xaml.XamlType&quot;></xref>类型的其中<xref href=&quot;System.Xaml.XamlMember&quot;></xref>可以存在。"
  remarks: "返回的值是可附加的和非可附加成员的不同。 对于非可附加成员，TargetType 返回<xref:System.Xaml.XamlMember.DeclaringType%2A>.</xref:System.Xaml.XamlMember.DeclaringType%2A> 对于可附加成员，<xref:System.Xaml.XamlMember.LookupTargetType%2A>返回结果基于此逻辑:-如果反射无法解析一个后备 (<xref:System.Xaml.XamlMember.IsUnknown%2A> `true`)，此方法返回表示泛型对象类型的内部常量。</xref:System.Xaml.XamlMember.IsUnknown%2A> </xref:System.Xaml.XamlMember.LookupTargetType%2A>      -如果以前的状态不适用，<xref:System.Xaml.XamlMember.LookupTargetType%2A>称为。</xref:System.Xaml.XamlMember.LookupTargetType%2A> 默认实现返回<xref:System.Xaml.XamlType>基于检查实现的方法`get`和`set`访问器。</xref:System.Xaml.XamlType> 类可能会重写<xref:System.Xaml.XamlMember.LookupTargetType%2A>以使用不同的行为，如其他元数据窗体，可能会报告目标类型对于附加的成员。</xref:System.Xaml.XamlMember.LookupTargetType%2A>"
  syntax:
    content: public System.Xaml.XamlType TargetType { get; }
    return:
      type: System.Xaml.XamlType
      description: "类型其中<xref href=&quot;System.Xaml.XamlMember&quot;></xref>可以存在。 请参阅备注。"
  overload: System.Xaml.XamlMember.TargetType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ToString
  id: ToString
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回的字符串表示形式这<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  remarks: "此实现返回<xref:System.Xaml.XamlMember.Name%2A>.</xref:System.Xaml.XamlMember.Name%2A>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "字符串表示形式这<xref href=&quot;System.Xaml.XamlMember&quot;> </xref>。"
  overload: System.Xaml.XamlMember.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.Type
  id: Type
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取<xref href=&quot;System.Xaml.XamlType&quot;></xref>的成员使用的类型。"
  remarks: "调用类型时，将调用<xref:System.Xaml.XamlMember.LookupType%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupType%2A> 当初始内部反射逻辑还未设置信息时，将发生这种情况。       默认行为 (没有<xref:System.Xaml.XamlMember.LookupType%2A>重写)，返回<xref:System.Xaml.XamlType>可以具有不同的概念含义。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember.LookupType%2A> 适用的含义取决于是否这<xref:System.Xaml.XamlMember>表示属性、 方法或事件，如以下列表所示:-对于属性，返回<xref:System.Xaml.XamlType>是设置的属性或属性返回的类型。</xref:System.Xaml.XamlType> </xref:System.Xaml.XamlMember>      -对于某个事件，返回<xref:System.Xaml.XamlType>是必需的事件处理程序类型 （中的 CLR 实现的委托）。</xref:System.Xaml.XamlType>      -对于方法，<xref:System.Xaml.XamlType>是该方法中，这可能是返回类型`null`。</xref:System.Xaml.XamlType>       在每种情况下，XAML 架构上下文用于评估从后备类型的 XAML 类型。"
  syntax:
    content: public System.Xaml.XamlType Type { get; }
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>的成员使用的类型。 请参阅备注。"
  overload: System.Xaml.XamlMember.Type*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.TypeConverter
  id: TypeConverter
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;对象，可以用于 XAML 声明的对象的类型转换构造。"
  remarks: "调用 TypeConverter 时，将调用<xref:System.Xaml.XamlMember.LookupTypeConverter%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupTypeConverter%2A> 当初始内部反射逻辑还未设置信息时，将发生此行为。       返回非 null 属性值。 支持类型转换器的实现不一定是工作<xref:System.ComponentModel.TypeConverter>.</xref:System.ComponentModel.TypeConverter> 以下是可能的类型转换器和这些值表示非 null 返回值的列表:-返回值报告特定于该成员或更普遍地为转换器的目标类型特性化的类型转换器。 此行为通常是哪些大多数的 XAML 类型系统和 XAML 处理器所查找的为了实例化的类型转换器和调用其方法。      的返回值将报告内置值转换器。 这些转换器存在由 XAML 编写器执行某些内部操作。 具体而言，这些内置值转换器将原始属性字符串值转换为 XAML 语言级别基元。 有关.NET Framework XAML 服务实现中，这些内置类型转换通常将转发给系统程序集中定义的类型转换器。 例如，为转换<xref:System.Int32>值具有内置转发转换，并且因此，<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A>值引用<xref:System.ComponentModel.Int32Converter>.</xref:System.ComponentModel.Int32Converter> </xref:System.Xaml.Schema.XamlValueConverter%601.ConverterType%2A> </xref:System.Int32>      的返回值报告的不受约束的对象模型; 的特殊情况下即，<xref:System.Xaml.XamlMember>具有<xref:System.Xaml.XamlMember.Type%2A><xref:System.Object>.</xref:System.Object>值</xref:System.Xaml.XamlMember.Type%2A></xref:System.Xaml.XamlMember> 在这种情况下，<xref:System.Xaml.Schema.XamlValueConverter%601>报告<xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName>是 {`Object}`。</xref:System.Xaml.Schema.XamlValueConverter%601.Name%2A?displayProperty=fullName> </xref:System.Xaml.Schema.XamlValueConverter%601> 但是，<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>是`null`因为没有实际的类型或实例是可用于执行此转换。</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> 相反，直到运行时，当该特定技术的运行时确定其对象图的处理都无法确定对象模型行为。       如果可以访问工作<xref:System.ComponentModel.TypeConverter>从<xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A>，你可以调用它的转换方法。</xref:System.Xaml.Schema.XamlValueConverter%601.ConverterInstance%2A> </xref:System.ComponentModel.TypeConverter> 但是，多个转换方法依赖于服务上下文。 如果你没有可用的类型转换器预期的写入对象的对象图其典型角色的相同的服务上下文，则转换器方法可以引发异常。"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter> TypeConverter { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;值，与<xref href=&quot;System.ComponentModel.TypeConverter&quot;></xref>泛型约束。 请参阅备注。"
  overload: System.Xaml.XamlMember.TypeConverter*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.UnderlyingMember
  id: UnderlyingMember
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取的 CLR 类型系统<xref:System.Reflection.MemberInfo>，它可用于通过构造的成员<xref:System.Reflection.PropertyInfo>， <xref:System.Reflection.MethodInfo>，或<xref:System.Reflection.EventInfo>。</xref:System.Reflection.EventInfo> </xref:System.Reflection.MethodInfo> </xref:System.Reflection.PropertyInfo> </xref:System.Reflection.MemberInfo>"
  remarks: "调用 UnderlyingMember 时，将调用<xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupUnderlyingMember%2A>"
  syntax:
    content: public System.Reflection.MemberInfo UnderlyingMember { get; }
    return:
      type: System.Reflection.MemberInfo
      description: "CLR 类型系统<xref:System.Reflection.MemberInfo>信息，作为从初始的构造函数参数强制转换。</xref:System.Reflection.MemberInfo> A <xref href=&quot;System.Xaml.XamlMember&quot;> </xref>构造&lt;xref:System.Xaml.XamlMember.%23ctor%28System.String%2CSystem.Xaml.XamlType%2CSystem.Boolean%29&gt;签名返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlMember.UnderlyingMember*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlMember.ValueSerializer
  id: ValueSerializer
  parent: System.Xaml.XamlMember
  langs:
  - csharp
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取&lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;对象，用于值序列化的 XAML 声明对象。"
  remarks: "调用 ValueSerializer 时，将调用<xref:System.Xaml.XamlMember.LookupValueSerializer%2A>或该方法的特定重写。</xref:System.Xaml.XamlMember.LookupValueSerializer%2A> 当初始内部反射逻辑还未设置信息时，将发生此行为。       并非所有 ValueSerializer 返回的非 null 属性值的情况下都都不一定工作<xref:System.Windows.Markup.ValueSerializer>.</xref:System.Windows.Markup.ValueSerializer> 请参阅中的备注<xref:System.Xaml.XamlMember.TypeConverter%2A>; 相同的注意事项也适用于 ValueSerializer。</xref:System.Xaml.XamlMember.TypeConverter%2A>"
  syntax:
    content: public System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer> ValueSerializer { get; }
    return:
      type: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
      description: "A &lt;xref:System.Xaml.Schema.XamlValueConverter%601&gt;与<xref:System.Windows.Markup.ValueSerializer>泛型约束。</xref:System.Windows.Markup.ValueSerializer>"
  overload: System.Xaml.XamlMember.ValueSerializer*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext)
- uid: System.Reflection.EventInfo
  parent: System.Reflection
  isExternal: true
  name: EventInfo
  nameWithType: EventInfo
  fullName: System.Reflection.EventInfo
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.EventInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(EventInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.Schema.XamlMemberInvoker
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlMemberInvoker
  nameWithType: XamlMemberInvoker
  fullName: System.Xaml.Schema.XamlMemberInvoker
- uid: System.Xaml.XamlMember.#ctor(System.Reflection.PropertyInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(PropertyInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Xaml.XamlType,System.Boolean)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,XamlType,Boolean)
  nameWithType: XamlMember.XamlMember(String,XamlType,Boolean)
  fullName: System.Xaml.XamlMember.XamlMember(String,XamlType,Boolean)
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.#ctor(System.String,System.Reflection.MethodInfo,System.Reflection.MethodInfo,System.Xaml.XamlSchemaContext,System.Xaml.Schema.XamlMemberInvoker)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  nameWithType: XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
  fullName: System.Xaml.XamlMember.XamlMember(String,MethodInfo,MethodInfo,XamlSchemaContext,XamlMemberInvoker)
- uid: System.Xaml.XamlMember.DeclaringType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
  fullName: System.Xaml.XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
  fullName: System.Xaml.XamlMember.DeferringLoader
- uid: System.Xaml.Schema.XamlValueConverter{System.Xaml.XamlDeferringLoader}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<XamlDeferringLoader>
  nameWithType: XamlValueConverter<XamlDeferringLoader>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Xaml.XamlDeferringLoader>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Xaml.XamlDeferringLoader>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlDeferringLoader
    name: XamlDeferringLoader
    nameWithType: XamlDeferringLoader
    fullName: XamlDeferringLoader
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.DependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
  fullName: System.Xaml.XamlMember.DependsOn
- uid: System.Collections.Generic.IList{System.Xaml.XamlMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<XamlMember>
  nameWithType: IList<XamlMember>
  fullName: System.Collections.Generic.IList<System.Xaml.XamlMember>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Xaml.XamlMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlMember
    name: XamlMember
    nameWithType: XamlMember
    fullName: XamlMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Equals(System.Object)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(Object)
  nameWithType: XamlMember.Equals(Object)
  fullName: System.Xaml.XamlMember.Equals(Object)
- uid: System.Xaml.XamlMember.Equals(System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals(XamlMember)
  nameWithType: XamlMember.Equals(XamlMember)
  fullName: System.Xaml.XamlMember.Equals(XamlMember)
- uid: System.Xaml.XamlMember
  parent: System.Xaml
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember
  fullName: System.Xaml.XamlMember
- uid: System.Xaml.XamlMember.GetHashCode
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode()
  nameWithType: XamlMember.GetHashCode()
  fullName: System.Xaml.XamlMember.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Xaml.XamlMember.GetXamlNamespaces
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces()
  nameWithType: XamlMember.GetXamlNamespaces()
  fullName: System.Xaml.XamlMember.GetXamlNamespaces()
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Invoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
  fullName: System.Xaml.XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
  fullName: System.Xaml.XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
  fullName: System.Xaml.XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
  fullName: System.Xaml.XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
  fullName: System.Xaml.XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
  fullName: System.Xaml.XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
  fullName: System.Xaml.XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
  fullName: System.Xaml.XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
  fullName: System.Xaml.XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
  fullName: System.Xaml.XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
  fullName: System.Xaml.XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider()
  nameWithType: XamlMember.LookupCustomAttributeProvider()
  fullName: System.Xaml.XamlMember.LookupCustomAttributeProvider()
- uid: System.Reflection.ICustomAttributeProvider
  parent: System.Reflection
  isExternal: false
  name: ICustomAttributeProvider
  nameWithType: ICustomAttributeProvider
  fullName: System.Reflection.ICustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader()
  nameWithType: XamlMember.LookupDeferringLoader()
  fullName: System.Xaml.XamlMember.LookupDeferringLoader()
- uid: System.Xaml.XamlMember.LookupDependsOn
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn()
  nameWithType: XamlMember.LookupDependsOn()
  fullName: System.Xaml.XamlMember.LookupDependsOn()
- uid: System.Xaml.XamlMember.LookupInvoker
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker()
  nameWithType: XamlMember.LookupInvoker()
  fullName: System.Xaml.XamlMember.LookupInvoker()
- uid: System.Xaml.XamlMember.LookupIsAmbient
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient()
  nameWithType: XamlMember.LookupIsAmbient()
  fullName: System.Xaml.XamlMember.LookupIsAmbient()
- uid: System.Xaml.XamlMember.LookupIsEvent
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent()
  nameWithType: XamlMember.LookupIsEvent()
  fullName: System.Xaml.XamlMember.LookupIsEvent()
- uid: System.Xaml.XamlMember.LookupIsReadOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly()
  nameWithType: XamlMember.LookupIsReadOnly()
  fullName: System.Xaml.XamlMember.LookupIsReadOnly()
- uid: System.Xaml.XamlMember.LookupIsReadPublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic()
  nameWithType: XamlMember.LookupIsReadPublic()
  fullName: System.Xaml.XamlMember.LookupIsReadPublic()
- uid: System.Xaml.XamlMember.LookupIsUnknown
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown()
  nameWithType: XamlMember.LookupIsUnknown()
  fullName: System.Xaml.XamlMember.LookupIsUnknown()
- uid: System.Xaml.XamlMember.LookupIsWriteOnly
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly()
  nameWithType: XamlMember.LookupIsWriteOnly()
  fullName: System.Xaml.XamlMember.LookupIsWriteOnly()
- uid: System.Xaml.XamlMember.LookupIsWritePublic
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic()
  nameWithType: XamlMember.LookupIsWritePublic()
  fullName: System.Xaml.XamlMember.LookupIsWritePublic()
- uid: System.Xaml.XamlMember.LookupTargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType()
  nameWithType: XamlMember.LookupTargetType()
  fullName: System.Xaml.XamlMember.LookupTargetType()
- uid: System.Xaml.XamlMember.LookupType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType()
  nameWithType: XamlMember.LookupType()
  fullName: System.Xaml.XamlMember.LookupType()
- uid: System.Xaml.XamlMember.LookupTypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter()
  nameWithType: XamlMember.LookupTypeConverter()
  fullName: System.Xaml.XamlMember.LookupTypeConverter()
- uid: System.Xaml.Schema.XamlValueConverter{System.ComponentModel.TypeConverter}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TypeConverter>
  nameWithType: XamlValueConverter<TypeConverter>
  fullName: System.Xaml.Schema.XamlValueConverter<System.ComponentModel.TypeConverter>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.ComponentModel.TypeConverter>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ComponentModel.TypeConverter
    name: TypeConverter
    nameWithType: TypeConverter
    fullName: TypeConverter
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter()
  nameWithType: XamlMember.LookupUnderlyingGetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingGetter()
- uid: System.Xaml.XamlMember.LookupUnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember()
  nameWithType: XamlMember.LookupUnderlyingMember()
  fullName: System.Xaml.XamlMember.LookupUnderlyingMember()
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter()
  nameWithType: XamlMember.LookupUnderlyingSetter()
  fullName: System.Xaml.XamlMember.LookupUnderlyingSetter()
- uid: System.Xaml.XamlMember.LookupValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer()
  nameWithType: XamlMember.LookupValueSerializer()
  fullName: System.Xaml.XamlMember.LookupValueSerializer()
- uid: System.Xaml.Schema.XamlValueConverter{System.Windows.Markup.ValueSerializer}
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<ValueSerializer>
  nameWithType: XamlValueConverter<ValueSerializer>
  fullName: System.Xaml.Schema.XamlValueConverter<System.Windows.Markup.ValueSerializer>
  spec.csharp:
  - uid: System.Xaml.Schema.XamlValueConverter`1
    name: XamlValueConverter
    nameWithType: XamlValueConverter
    fullName: XamlValueConverter<System.Windows.Markup.ValueSerializer>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Markup.ValueSerializer
    name: ValueSerializer
    nameWithType: ValueSerializer
    fullName: ValueSerializer
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlMember.Name
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
  fullName: System.Xaml.XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Equality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Equality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.op_Inequality(System.Xaml.XamlMember,System.Xaml.XamlMember)
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality(XamlMember,XamlMember)
  nameWithType: XamlMember.op_Inequality(XamlMember,XamlMember)
  fullName: System.Xaml.XamlMember.op_Inequality(XamlMember,XamlMember)
- uid: System.Xaml.XamlMember.PreferredXamlNamespace
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
  fullName: System.Xaml.XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
  fullName: System.Xaml.XamlMember.SerializationVisibility
- uid: System.ComponentModel.DesignerSerializationVisibility
  parent: System.ComponentModel
  isExternal: false
  name: DesignerSerializationVisibility
  nameWithType: DesignerSerializationVisibility
  fullName: System.ComponentModel.DesignerSerializationVisibility
- uid: System.Xaml.XamlMember.TargetType
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
  fullName: System.Xaml.XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString()
  nameWithType: XamlMember.ToString()
  fullName: System.Xaml.XamlMember.ToString()
- uid: System.Xaml.XamlMember.Type
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
  fullName: System.Xaml.XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
  fullName: System.Xaml.XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
  fullName: System.Xaml.XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
  fullName: System.Xaml.XamlMember.ValueSerializer
- uid: System.Xaml.XamlMember.#ctor*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: XamlMember
  nameWithType: XamlMember.XamlMember
- uid: System.Xaml.XamlMember.DeclaringType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeclaringType
  nameWithType: XamlMember.DeclaringType
- uid: System.Xaml.XamlMember.DeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DeferringLoader
  nameWithType: XamlMember.DeferringLoader
- uid: System.Xaml.XamlMember.DependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: DependsOn
  nameWithType: XamlMember.DependsOn
- uid: System.Xaml.XamlMember.Equals*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Equals
  nameWithType: XamlMember.Equals
- uid: System.Xaml.XamlMember.GetHashCode*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetHashCode
  nameWithType: XamlMember.GetHashCode
- uid: System.Xaml.XamlMember.GetXamlNamespaces*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: GetXamlNamespaces
  nameWithType: XamlMember.GetXamlNamespaces
- uid: System.Xaml.XamlMember.Invoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Invoker
  nameWithType: XamlMember.Invoker
- uid: System.Xaml.XamlMember.IsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAmbient
  nameWithType: XamlMember.IsAmbient
- uid: System.Xaml.XamlMember.IsAttachable*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsAttachable
  nameWithType: XamlMember.IsAttachable
- uid: System.Xaml.XamlMember.IsDirective*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsDirective
  nameWithType: XamlMember.IsDirective
- uid: System.Xaml.XamlMember.IsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsEvent
  nameWithType: XamlMember.IsEvent
- uid: System.Xaml.XamlMember.IsNameValid*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsNameValid
  nameWithType: XamlMember.IsNameValid
- uid: System.Xaml.XamlMember.IsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadOnly
  nameWithType: XamlMember.IsReadOnly
- uid: System.Xaml.XamlMember.IsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsReadPublic
  nameWithType: XamlMember.IsReadPublic
- uid: System.Xaml.XamlMember.IsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsUnknown
  nameWithType: XamlMember.IsUnknown
- uid: System.Xaml.XamlMember.IsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWriteOnly
  nameWithType: XamlMember.IsWriteOnly
- uid: System.Xaml.XamlMember.IsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: IsWritePublic
  nameWithType: XamlMember.IsWritePublic
- uid: System.Xaml.XamlMember.LookupCustomAttributeProvider*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupCustomAttributeProvider
  nameWithType: XamlMember.LookupCustomAttributeProvider
- uid: System.Xaml.XamlMember.LookupDeferringLoader*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDeferringLoader
  nameWithType: XamlMember.LookupDeferringLoader
- uid: System.Xaml.XamlMember.LookupDependsOn*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupDependsOn
  nameWithType: XamlMember.LookupDependsOn
- uid: System.Xaml.XamlMember.LookupInvoker*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupInvoker
  nameWithType: XamlMember.LookupInvoker
- uid: System.Xaml.XamlMember.LookupIsAmbient*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsAmbient
  nameWithType: XamlMember.LookupIsAmbient
- uid: System.Xaml.XamlMember.LookupIsEvent*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsEvent
  nameWithType: XamlMember.LookupIsEvent
- uid: System.Xaml.XamlMember.LookupIsReadOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadOnly
  nameWithType: XamlMember.LookupIsReadOnly
- uid: System.Xaml.XamlMember.LookupIsReadPublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsReadPublic
  nameWithType: XamlMember.LookupIsReadPublic
- uid: System.Xaml.XamlMember.LookupIsUnknown*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsUnknown
  nameWithType: XamlMember.LookupIsUnknown
- uid: System.Xaml.XamlMember.LookupIsWriteOnly*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWriteOnly
  nameWithType: XamlMember.LookupIsWriteOnly
- uid: System.Xaml.XamlMember.LookupIsWritePublic*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupIsWritePublic
  nameWithType: XamlMember.LookupIsWritePublic
- uid: System.Xaml.XamlMember.LookupTargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTargetType
  nameWithType: XamlMember.LookupTargetType
- uid: System.Xaml.XamlMember.LookupType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupType
  nameWithType: XamlMember.LookupType
- uid: System.Xaml.XamlMember.LookupTypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupTypeConverter
  nameWithType: XamlMember.LookupTypeConverter
- uid: System.Xaml.XamlMember.LookupUnderlyingGetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingGetter
  nameWithType: XamlMember.LookupUnderlyingGetter
- uid: System.Xaml.XamlMember.LookupUnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingMember
  nameWithType: XamlMember.LookupUnderlyingMember
- uid: System.Xaml.XamlMember.LookupUnderlyingSetter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupUnderlyingSetter
  nameWithType: XamlMember.LookupUnderlyingSetter
- uid: System.Xaml.XamlMember.LookupValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: LookupValueSerializer
  nameWithType: XamlMember.LookupValueSerializer
- uid: System.Xaml.XamlMember.Name*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Name
  nameWithType: XamlMember.Name
- uid: System.Xaml.XamlMember.op_Equality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Equality
  nameWithType: XamlMember.op_Equality
- uid: System.Xaml.XamlMember.op_Inequality*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: op_Inequality
  nameWithType: XamlMember.op_Inequality
- uid: System.Xaml.XamlMember.PreferredXamlNamespace*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: PreferredXamlNamespace
  nameWithType: XamlMember.PreferredXamlNamespace
- uid: System.Xaml.XamlMember.SerializationVisibility*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: SerializationVisibility
  nameWithType: XamlMember.SerializationVisibility
- uid: System.Xaml.XamlMember.TargetType*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TargetType
  nameWithType: XamlMember.TargetType
- uid: System.Xaml.XamlMember.ToString*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ToString
  nameWithType: XamlMember.ToString
- uid: System.Xaml.XamlMember.Type*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: Type
  nameWithType: XamlMember.Type
- uid: System.Xaml.XamlMember.TypeConverter*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: TypeConverter
  nameWithType: XamlMember.TypeConverter
- uid: System.Xaml.XamlMember.UnderlyingMember*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: UnderlyingMember
  nameWithType: XamlMember.UnderlyingMember
- uid: System.Xaml.XamlMember.ValueSerializer*
  parent: System.Xaml.XamlMember
  isExternal: false
  name: ValueSerializer
  nameWithType: XamlMember.ValueSerializer
