### YamlMime:ManagedReference
items:
- uid: System.Threading.ThreadState
  id: ThreadState
  children:
  - System.Threading.ThreadState.Aborted
  - System.Threading.ThreadState.AbortRequested
  - System.Threading.ThreadState.Background
  - System.Threading.ThreadState.Running
  - System.Threading.ThreadState.Stopped
  - System.Threading.ThreadState.StopRequested
  - System.Threading.ThreadState.Suspended
  - System.Threading.ThreadState.SuspendRequested
  - System.Threading.ThreadState.Unstarted
  - System.Threading.ThreadState.WaitSleepJoin
  langs:
  - csharp
  name: ThreadState
  nameWithType: ThreadState
  fullName: System.Threading.ThreadState
  type: Enum
  summary: "指定的执行状态<xref href=&quot;System.Threading.Thread&quot;> </xref>。"
  remarks: "线程枚举属于仅涉及几个调试方案。 永远不应在代码中使用线程状态来同步线程活动。       线程定义一组所有可能的执行状态的线程。 线程创建后，它是状态中的至少一个直到其终止时为止。 在公共语言运行时内创建的线程都最初处于`Unstarted`状态，而进入运行时的外部线程中已存在的`Running`状态。 `Unstarted`线程转换到`Running`通过调用<xref:System.Threading.Thread.Start%2A>.</xref:System.Threading.Thread.Start%2A>状态 并非所有组合`ThreadState`值是有效的; 例如，线程不能在同时`Aborted`和`Unstarted`状态。      1> [!IMPORTANT]&1;> 有两个线程状态枚举，线程和<xref:System.Diagnostics.ThreadState?displayProperty=fullName>.</xref:System.Diagnostics.ThreadState?displayProperty=fullName>       下表显示导致状态更改的操作。      |操作 |线程 |  |------------|-----------------|  |在公共语言运行时内创建线程。 |尚未启动 |  |另一个线程调用<xref:System.Threading.Thread.Start%2A?displayProperty=fullName>上新线程，并且调用的方法返回。</xref:System.Threading.Thread.Start%2A?displayProperty=fullName><br /><br /> <xref:System.Threading.Thread.Start%2A>方法不返回直到新线程已开始运行。</xref:System.Threading.Thread.Start%2A> 没有无法知道在哪个点新线程将开始运行，到<xref:System.Threading.Thread.Start%2A>在呼叫期间。 |运行 |  |线程调用<xref:System.Threading.Thread.Sleep%2A>|WaitSleepJoin |  |另一个对象的线程调用<xref:System.Threading.Monitor.Wait%2A>。 |WaitSleepJoin |  |另一个线程的线程调用<xref:System.Threading.Thread.Join%2A>。 |WaitSleepJoin |  |另一个线程调用<xref:System.Threading.Thread.Interrupt%2A>|运行 |  |另一个线程调用<xref:System.Threading.Thread.Suspend%2A>|SuspendRequested |  |线程响应<xref:System.Threading.Thread.Suspend%2A>请求。 |挂起 |  |另一个线程调用<xref:System.Threading.Thread.Resume%2A>|运行 |  |另一个线程调用<xref:System.Threading.Thread.Abort%2A>|AbortRequested |  |线程响应<xref:System.Threading.Thread.Abort%2A>请求。 |停止 |  |终止线程。 |停止 |      除了上文中记下的状态，此外还有`Background`状态，这指示线程是否正在运行中的背景或前景。</xref:System.Threading.Thread.Abort%2A> </xref:System.Threading.Thread.Abort%2A> </xref:System.Threading.Thread.Resume%2A> </xref:System.Threading.Thread.Suspend%2A> </xref:System.Threading.Thread.Suspend%2A> </xref:System.Threading.Thread.Interrupt%2A> </xref:System.Threading.Thread.Join%2A> </xref:System.Threading.Monitor.Wait%2A> </xref:System.Threading.Thread.Sleep%2A> </xref:System.Threading.Thread.Start%2A>       在多个状态可以是一个线程，而且在给定时间。 例如，如果一个线程被阻止在调用<xref:System.Threading.Monitor.Wait%2A>，和另一个线程调用<xref:System.Threading.Thread.Abort%2A>被阻止的线程上被阻塞的线程将同时处于`WaitSleepJoin`和`AbortRequested`在同一时间的状态。</xref:System.Threading.Thread.Abort%2A> </xref:System.Threading.Monitor.Wait%2A> 在此情况下，线程从调用返回时，就会立即<xref:System.Threading.Monitor.Wait%2A>或中断，它将接收<xref:System.Threading.ThreadAbortException>开始中止。</xref:System.Threading.ThreadAbortException> </xref:System.Threading.Monitor.Wait%2A>       <xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName>线程的属性提供一个线程的当前状态。</xref:System.Threading.Thread.ThreadState%2A?displayProperty=fullName> 应用程序必须使用一个位掩码确定线程是否正在运行。 由于值`Running`零 (0)，测试是否通过使用 C# 代码，如运行线程`(myThread.ThreadState & (ThreadState.Stopped | ThreadState.Unstarted)) == 0`或 Visual Basic 代码，如`(myThread.ThreadState And (ThreadState.Stopped Or ThreadState.Unstarted)) = 0`。"
  syntax:
    content: >-
      [System.Flags]

      [System.Runtime.InteropServices.ComVisible(true)]

      public enum ThreadState
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Threading.ThreadState.Aborted
  id: Aborted
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Aborted
  nameWithType: ThreadState.Aborted
  fullName: System.Threading.ThreadState.Aborted
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "线程状态包括 AbortRequested 和线程现在出现故障，但其状态不尚未更改为已停止。"
  syntax:
    content: Aborted
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.AbortRequested
  id: AbortRequested
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: AbortRequested
  nameWithType: ThreadState.AbortRequested
  fullName: System.Threading.ThreadState.AbortRequested
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "&lt;Xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;的线程上调用方法，但该线程尚未收到挂起<xref href=&quot;System.Threading.ThreadAbortException&quot;> </xref> ，将尝试终止它。"
  syntax:
    content: AbortRequested
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Background
  id: Background
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Background
  nameWithType: ThreadState.Background
  fullName: System.Threading.ThreadState.Background
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "将作为后台线程，而不是前台线程正在执行线程。 通过设置控制此状态&lt;xref:System.Threading.Thread.IsBackground%2A?displayProperty=fullName&gt;属性。"
  syntax:
    content: Background
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Running
  id: Running
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Running
  nameWithType: ThreadState.Running
  fullName: System.Threading.ThreadState.Running
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "线程已启动，它不会被阻止，并且没有未挂起的<xref href=&quot;System.Threading.ThreadAbortException&quot;> </xref>。"
  syntax:
    content: Running
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Stopped
  id: Stopped
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Stopped
  nameWithType: ThreadState.Stopped
  fullName: System.Threading.ThreadState.Stopped
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "线程已停止。"
  syntax:
    content: Stopped
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.StopRequested
  id: StopRequested
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: StopRequested
  nameWithType: ThreadState.StopRequested
  fullName: System.Threading.ThreadState.StopRequested
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "正在请求线程停止。 这是仅供内部使用。"
  syntax:
    content: StopRequested
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Suspended
  id: Suspended
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Suspended
  nameWithType: ThreadState.Suspended
  fullName: System.Threading.ThreadState.Suspended
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "线程已挂起。"
  syntax:
    content: Suspended
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.SuspendRequested
  id: SuspendRequested
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: SuspendRequested
  nameWithType: ThreadState.SuspendRequested
  fullName: System.Threading.ThreadState.SuspendRequested
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "线程正在请求挂起。"
  syntax:
    content: SuspendRequested
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.Unstarted
  id: Unstarted
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: Unstarted
  nameWithType: ThreadState.Unstarted
  fullName: System.Threading.ThreadState.Unstarted
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "&lt;Xref:System.Threading.Thread.Start%2A?displayProperty=fullName&gt;不在线程上调用方法。"
  syntax:
    content: Unstarted
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Threading.ThreadState.WaitSleepJoin
  id: WaitSleepJoin
  parent: System.Threading.ThreadState
  langs:
  - csharp
  name: WaitSleepJoin
  nameWithType: ThreadState.WaitSleepJoin
  fullName: System.Threading.ThreadState.WaitSleepJoin
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Threading
  summary: "线程将受阻。 这可能是调用&lt;xref:System.Threading.Thread.Sleep%2A?displayProperty=fullName&gt;或&lt;xref:System.Threading.Thread.Join%2A?displayProperty=fullName&gt;，请求锁的 — 例如，通过调用&lt;xref:System.Threading.Monitor.Enter%2A?displayProperty=fullName&gt;或&lt;xref:System.Threading.Monitor.Wait%2A?displayProperty=fullName&gt; — 或处于等待状态的上一个线程同步对象，如<xref:System.Threading.ManualResetEvent>.</xref:System.Threading.ManualResetEvent>"
  syntax:
    content: WaitSleepJoin
    return:
      type: System.Threading.ThreadState
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Threading.ThreadState.Aborted
  parent: System.Threading.ThreadState
  isExternal: false
  name: Aborted
  nameWithType: ThreadState.Aborted
  fullName: System.Threading.ThreadState.Aborted
- uid: System.Threading.ThreadState
  parent: System.Threading
  isExternal: false
  name: ThreadState
  nameWithType: ThreadState
  fullName: System.Threading.ThreadState
- uid: System.Threading.ThreadState.AbortRequested
  parent: System.Threading.ThreadState
  isExternal: false
  name: AbortRequested
  nameWithType: ThreadState.AbortRequested
  fullName: System.Threading.ThreadState.AbortRequested
- uid: System.Threading.ThreadState.Background
  parent: System.Threading.ThreadState
  isExternal: false
  name: Background
  nameWithType: ThreadState.Background
  fullName: System.Threading.ThreadState.Background
- uid: System.Threading.ThreadState.Running
  parent: System.Threading.ThreadState
  isExternal: false
  name: Running
  nameWithType: ThreadState.Running
  fullName: System.Threading.ThreadState.Running
- uid: System.Threading.ThreadState.Stopped
  parent: System.Threading.ThreadState
  isExternal: false
  name: Stopped
  nameWithType: ThreadState.Stopped
  fullName: System.Threading.ThreadState.Stopped
- uid: System.Threading.ThreadState.StopRequested
  parent: System.Threading.ThreadState
  isExternal: false
  name: StopRequested
  nameWithType: ThreadState.StopRequested
  fullName: System.Threading.ThreadState.StopRequested
- uid: System.Threading.ThreadState.Suspended
  parent: System.Threading.ThreadState
  isExternal: false
  name: Suspended
  nameWithType: ThreadState.Suspended
  fullName: System.Threading.ThreadState.Suspended
- uid: System.Threading.ThreadState.SuspendRequested
  parent: System.Threading.ThreadState
  isExternal: false
  name: SuspendRequested
  nameWithType: ThreadState.SuspendRequested
  fullName: System.Threading.ThreadState.SuspendRequested
- uid: System.Threading.ThreadState.Unstarted
  parent: System.Threading.ThreadState
  isExternal: false
  name: Unstarted
  nameWithType: ThreadState.Unstarted
  fullName: System.Threading.ThreadState.Unstarted
- uid: System.Threading.ThreadState.WaitSleepJoin
  parent: System.Threading.ThreadState
  isExternal: false
  name: WaitSleepJoin
  nameWithType: ThreadState.WaitSleepJoin
  fullName: System.Threading.ThreadState.WaitSleepJoin
