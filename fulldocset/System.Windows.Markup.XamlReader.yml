### YamlMime:ManagedReference
items:
- uid: System.Windows.Markup.XamlReader
  id: XamlReader
  children:
  - System.Windows.Markup.XamlReader.#ctor
  - System.Windows.Markup.XamlReader.CancelAsync
  - System.Windows.Markup.XamlReader.GetWpfSchemaContext
  - System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  - System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  - System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  - System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  - System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  - System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  - System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  - System.Windows.Markup.XamlReader.LoadCompleted
  - System.Windows.Markup.XamlReader.Parse(System.String)
  - System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  langs:
  - csharp
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Windows.Markup.XamlReader
  type: Class
  summary: "读取 XAML 输入并创建使用 WPF 默认 XAML 读取器和一个关联的 XAML 对象编写器的对象图。"
  remarks: "同步<xref:System.Windows.Markup.XamlReader.Load%2A>方法是静态的但异步<xref:System.Windows.Markup.XamlReader.LoadAsync%2A>方法不是静态的需要用的 xamlreader 形式提供类的实例。</xref:System.Windows.Markup.XamlReader.LoadAsync%2A> </xref:System.Windows.Markup.XamlReader.Load%2A>       输出`Load`方法是单个对象，它表示创建的对象树或对象图的根对象。 由 xamlreader 形式提供的对象图通常添加到 WPF 应用程序在运行时的现有对象树中。 否则新的对象图，被视为出于的 WPF 应用程序模型断开连接。 也就是说，不会呈现，并且不能访问使用任一对象树技巧作为应用于 WPF 应用程序的主对象树 (例如，Api <xref:System.Windows.FrameworkElement.FindName%2A>， <xref:System.Windows.LogicalTreeHelper>， <xref:System.Windows.Media.VisualTreeHelper>)。</xref:System.Windows.Media.VisualTreeHelper> </xref:System.Windows.LogicalTreeHelper> </xref:System.Windows.FrameworkElement.FindName%2A> 在对象树概念的详细信息，请参阅[WPF 中的树](~/add/includes/ajax-current-ext-md.md)。       Xamlreader 形式提供支持以下主要方案:-**克隆/对象工厂**︰ 没有附加机制，引用类型通常不能包含 WPF 对象树中的多个位置。 (其他机制来提供对共享支持或在 WPF 中重新使用的示例包括基于的对象<xref:System.Windows.Freezable>，或如支持通常可共享对象<xref:System.Windows.Media.Brush>，引用为中的一个项<xref:System.Windows.ResourceDictionary>。)</xref:System.Windows.ResourceDictionary> </xref:System.Windows.Media.Brush> </xref:System.Windows.Freezable>要克隆的对象是已经在对象树中的一种方法是使用<xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName>.</xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=fullName>将对象序列化 然后将其序列化的字符串作为输入用于调用<xref:System.Windows.Markup.XamlReader.Load%2A>，并将流或<xref:System.Xml.XmlReader>作为中介。</xref:System.Xml.XmlReader> </xref:System.Windows.Markup.XamlReader.Load%2A>      -**构造对象基于在实时信息**︰ 通常还有其他方法来使用晚期绑定或用户提供的输入来更改现有对象的状态。 例如你无法使用相同的值来设置多个属性，或使用数据绑定。 但如果你有其中甚至要创建的对象的类型为仅可确定在运行时或与用户交互的方案，然后通过在生成的字符串来创建此类对象<xref:System.Windows.Markup.XamlReader.Load%2A>输入通常是有用的技术。</xref:System.Windows.Markup.XamlReader.Load%2A>      -**使用现有资源技术**:<xref:System.IO.Stream>类型常用于其他框架或技术用于跨应用程序边界传输数据或对象或类似情况。</xref:System.IO.Stream> 然后，可以使用<xref:System.IO.Stream>技术来存储或获取最终用于你的应用程序的一部分中创建对象的 XAML 格式的数据。</xref:System.IO.Stream>      -**固定文档︰**你的应用程序可能会加载以包含在 WPF 应用程序对象树和 UI 中的本地或下载 XPS 文档。      1> [!NOTE]&1;> 有时本文档描述对象图，而不是对象树。 严格的父-子关系不始终存在中运行的时 WPF 应用程序的运行的时对象关系，因此对象图是更广泛适用的术语。 但是，原因是 WPF 还包括两个不同的树概念化 Api (<xref:System.Windows.LogicalTreeHelper>， <xref:System.Windows.Media.VisualTreeHelper>) 树隐喻仍充分地应用到 WPF 中的大多数现实情况。</xref:System.Windows.Media.VisualTreeHelper> </xref:System.Windows.LogicalTreeHelper> 但是，从 XAML 语言角度来看对象图通常是最佳的方式考虑如何将对象创建超出 XAML 中，因为 XAML 语言本身并不一定指定关系带入树状结构再次显示的帮助器类方法。      ## 代码访问安全性、 宽松 XAML 和 xamlreader 形式提供 XAML 是一种直接表示对象实例化和执行标记语言。 因此，在 XAML 中创建的元素具有相同能够作为生成的等效项 （例如网络访问，文件系统 IO） 的系统资源与之交互代码执行的操作。       [!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]支持[!INCLUDE[TLA2#tla_net](~/add/includes/tla2sharptla-net-md.md)]安全框架[!INCLUDE[TLA#tla_cas](~/add/includes/tlasharptla-cas-md.md)]。 这意味着，[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]内容 internet 区域中运行具有较少的执行权限。 &quot;松散 XAML&quot;（按未编译的 XAML 页解释在加载时通过 XAML 查看器） 和[!INCLUDE[TLA#tla_xbap](~/add/includes/tlasharptla-xbap-md.md)]通常运行此 internet 区域中，并使用相同的权限集。  但是，XAML 中加载到完全信任的应用程序与托管的应用程序具有对系统资源的相同访问权限。 有关详细信息，请参阅[WPF 部分信任安全](~/add/includes/ajax-current-ext-md.md)。       Xamlreader 形式提供这些语句的含义是应用程序设计必须做出决定加载有关 XAML 的信任决定。 如果你要将加载不受信任的 XAML，请考虑实现你自己的沙盒技术来加载生成的对象图的方式。       此外可以由部分信任代码调用 xamlreader 形式提供。 在这种情况下，Internet 安全区域被应用于代码访问安全性。 如果加载的 XAML 中的任何内容无效 Internet 安全区域下，会引发一个 XAML 分析异常。 XBAP 和是部分信任级别的平台，其中 xamlreader 形式提供是执行过程的一部分，其他情况下，可以使用显式的部分信任调用相同的异常行为。      ## WPF XAML、 XAML 读取器/编写器，和 XAML 语言版本控制[!INCLUDE[xaml2009](~/add/includes/xaml2009-md.md)]包括语言功能，如和。 您可以使用的签名`Load`或`Parse`来加载使用这些功能的 XAML。 但是，这些语言功能不支持针对需要标记编译的 XAML (如 XAML**页**生成 WPF 应用程序或涉及的生成操作中的标记编译任务任何 XAML 中的操作)。       WPF 类型和 WPF 技术通常支持依赖于对 WPF 内部结构的访问的概念。 例如，WPF 如何实施依赖项属性依赖于用于高效的类型成员查找内部技术。 对这些内部结构的访问通过读取和写入中提供的 Api 的 XAML<xref:System.Windows.Markup.XamlWriter>和 xamlreader 形式提供从<xref:System.Windows.Markup>命名空间和 PresentationFramework 程序集中。</xref:System.Windows.Markup> </xref:System.Windows.Markup.XamlWriter> 但是，较低级别 XAML 读取器和 XAML 编写器从 System.Xaml 程序集 (类基于<xref:System.Xaml.XamlReader?displayProperty=fullName>， <xref:System.Xaml.XamlWriter?displayProperty=fullName>) 不能访问到 WPF 内部结构。</xref:System.Xaml.XamlWriter?displayProperty=fullName> </xref:System.Xaml.XamlReader?displayProperty=fullName> 从 System.Xaml 对任何特定于 WPF 程序集没有依赖关系。 无需 WPF 内部访问，System.Xaml 读取器和编写器无法正确加载或保存所有 WPF 类型基于 WPF 类型。 具体而言，System.Xaml 读取器和编写器不了解概念，如备份属性存储或 WPF 如何使用样式、 资源字典和模板的所有详细信息的 WPF 依赖项属性。 因此，你必须进行的选择:-如果要加载 WPF 类型和/或以任何方式的 BAML 形式使用 XAML 使用 PresentationFramework XAML 读取器和 XAML 编写器。      -如果你不依赖于任何 WPF 类型或 BAML 形式的 XAML，并不将另一种特定技术的 XAML 读取器或 XAML 编写器实现的原因，特定于该框架，则使用 System.Xaml XAML 读取器和 XAML 编写器。      ## System.Xaml 中.NET 4 xamlreader 形式提供的支持实现是 WPF 框架级别 XAML 分析器可调用的 API 图面。 相同的基础 XAML 分析器还执行运行时 XAML 加载和分析 WPF 应用程序面向[!INCLUDE[net_v30_short](~/add/includes/net-v30-short-md.md)]和[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]。       如果你正面向[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]、 外部 API 相同，但实施部分都基于[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]在 System.Xaml 程序集中，从而提高了许多分析 XAML 的技术和报告的方面的常规 XAML 实现。 面向[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]一定需要一个引用，以及实现的详细信息包括 System.Xaml，如报告的异常可能来自于 System.Xaml 定义的类型。      <a name=&quot;xamlTextUsage_XamlReader&quot;></a># # XAML 文本用法"
  example:
  - "The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.  The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the XamlReader class.  \n  \n [!code-cs[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public class XamlReader
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.#ctor
  id: '#ctor'
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Windows.Markup.XamlReader.XamlReader()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "初始化的新实例<xref href=&quot;System.Windows.Markup.XamlReader&quot;></xref>类。"
  syntax:
    content: public XamlReader ();
    parameters: []
  overload: System.Windows.Markup.XamlReader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.CancelAsync
  id: CancelAsync
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: CancelAsync()
  nameWithType: XamlReader.CancelAsync()
  fullName: System.Windows.Markup.XamlReader.CancelAsync()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "中止当前的异步加载操作中，如果没有挂起的异步加载操作。"
  remarks: "CancelAsync 是一个异步操作;因此，操作中止之前，可能会出现某些加载。"
  syntax:
    content: public void CancelAsync ();
    parameters: []
  overload: System.Windows.Markup.XamlReader.CancelAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext
  id: GetWpfSchemaContext
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: GetWpfSchemaContext()
  nameWithType: XamlReader.GetWpfSchemaContext()
  fullName: System.Windows.Markup.XamlReader.GetWpfSchemaContext()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "返回<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>对象，表示的 WPF 架构上下文设置<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  syntax:
    content: public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();
    parameters: []
    return:
      type: System.Xaml.XamlSchemaContext
      description: "A <xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>对象，表示的 WPF 架构上下文设置<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  overload: System.Windows.Markup.XamlReader.GetWpfSchemaContext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  id: Load(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(Stream)
  nameWithType: XamlReader.Load(Stream)
  fullName: System.Windows.Markup.XamlReader.Load(Stream)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取中指定的 XAML 输入<xref:System.IO.Stream>并返回<xref:System.Object>，它是对应的对象树的根。</xref:System.Object> </xref:System.IO.Stream>"
  remarks: ''
  example:
  - "The following example saves a <xref:System.Windows.Controls.Button> into a <xref:System.IO.MemoryStream> using the <xref:System.Windows.Markup.XamlWriter> class. The stream is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.  \n  \n [!code-cs[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public static object Load (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "要加载，以流形式的 XAML。"
    return:
      type: System.Object
      description: "创建的对象树的根处的对象。"
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  id: Load(System.Xaml.XamlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(XamlReader)
  nameWithType: XamlReader.Load(XamlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XamlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取通过所提供的 XAML 输入<xref href=&quot;System.Xaml.XamlReader&quot;></xref>并返回一个对象，它对应的对象树的根。"
  remarks: "输入<xref:System.Xaml.XamlReader>可以是<xref:System.Windows.Baml2006.Baml2006Reader>.</xref:System.Windows.Baml2006.Baml2006Reader> </xref:System.Xaml.XamlReader> 这是如何加载 BAML 在运行时，或出于本地化工具目的。"
  syntax:
    content: public static object Load (System.Xaml.XamlReader reader);
    parameters:
    - id: reader
      type: System.Xaml.XamlReader
      description: "A <xref href=&quot;System.Xaml.XamlReader&quot;></xref> object. 这需要使用输入的 XAML 初始化。"
    return:
      type: System.Object
      description: "创建的对象树的根对象。"
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  id: Load(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(XmlReader)
  nameWithType: XamlReader.Load(XmlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XmlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取中指定的 XAML 输入<xref:System.Xml.XmlReader>并返回一个对象，它对应的对象树的根。</xref:System.Xml.XmlReader>"
  remarks: ''
  example:
  - "The following example converts a <xref:System.Windows.Controls.Button> into a string using the <xref:System.Windows.Markup.XamlWriter> class.  The string is then loaded back into a <xref:System.Windows.Controls.Button> using the static <xref:System.Windows.Markup.XamlReader.Load%2A> method on the <xref:System.Windows.Markup.XamlReader> class.  \n  \n [!code-cs[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/csharp/XamlReaderWriterSnippets/Window1.xaml.cs#xamlreaderloadxmlreader)]\n [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/add/codesnippet/visualbasic/xamlreaderwritersnippets/window1.xaml.vb#xamlreaderloadxmlreader)]"
  syntax:
    content: public static object Load (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>，已加载的 XAML 输入在 XML 窗体中加载。</xref:System.Xml.XmlReader>"
    return:
      type: System.Object
      description: "创建的对象树的根对象。"
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  id: Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Load(Stream,ParserContext)
  nameWithType: XamlReader.Load(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Load(Stream,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取中指定的 XAML 输入<xref:System.IO.Stream>并返回一个对象，它对应的对象树的根。</xref:System.IO.Stream>"
  syntax:
    content: public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "包含的 XAML 输入要加载的流。"
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "分析器使用的上下文信息。"
    return:
      type: System.Object
      description: "创建的对象树的根对象。"
  overload: System.Windows.Markup.XamlReader.Load*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>parserContext</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  id: LoadAsync(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(Stream)
  nameWithType: XamlReader.LoadAsync(Stream)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取中指定的 XAML 输入<xref:System.IO.Stream>并返回相应的对象树的根。</xref:System.IO.Stream>"
  remarks: "异步的 XAML 加载操作最初将返回一个对象，它只是根对象。 异步，XAML 分析然后仍然存在，并在根目录下填充任何子对象。 这是典型的 WPF XAML 处理行为和该产品与对象生存期 WPF 概念交互相反。 中的典型 （非异步） 交互，返回一个元素并将其加载汇报之前都是包括所有子集合对象的所有属性。 该行为等同于自下而上的方法，用于创建的树的根对象所在的最后一个对象变为可用。       你通常会将返回的对象分配到 WPF 应用程序的对象树中的某个位置、 内容所知识可能仍会填入和如果作为 UI 的一部分公开的整个内容，则可能会导致增量布局更新。 为此，它是典型隔离或虚拟化从 XAML，任何以异步方式加载的对象并使用特定于应用程序逻辑或应用程序状态通知时<xref:System.Windows.Markup.XamlReader.LoadCompleted>处理。</xref:System.Windows.Markup.XamlReader.LoadCompleted>       按 LoadAsync 以异步方式加载的 XAML 输入中 XAML 的根元素的顺序输入必须包含的属性和值`x:SynchronousMode=&quot;Async&quot;`。 值被视为区分大小写。 如果 XAML 输入的根不包含`x:SynchronousMode=&quot;Async&quot;`，不会引发异常，且调用处理为同步负载 (请参阅<xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>)。</xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>       每个实例只有一个异步加载操作<xref:System.Windows.Markup.XamlReader>类可以执行一次。</xref:System.Windows.Markup.XamlReader>  如果多个异步操作，将尝试对同一个实例<xref:System.Windows.Markup.XamlReader>类<xref:System.InvalidOperationException>引发。</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "包含的 XAML 输入要加载的流。"
    return:
      type: System.Object
      description: "创建的对象树的根对象。"
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "多个负载操作处于挂起状态对同一个<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  id: LoadAsync(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(XmlReader)
  nameWithType: XamlReader.LoadAsync(XmlReader)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(XmlReader)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取中指定的 XAML 输入<xref:System.Xml.XmlReader>并返回相应的对象树的根。</xref:System.Xml.XmlReader>"
  remarks: "异步的 XAML 加载操作最初将返回一个对象，它只是根对象。 异步，XAML 分析然后仍然存在，并在根目录下填充任何子对象。 这是典型的 WPF XAML 处理行为和该产品与对象生存期 WPF 概念交互相反。 中的典型 （非异步） 交互，返回一个元素并将其加载汇报之前都是包括所有子集合对象的所有属性。 该行为等同于自下而上的方法，用于创建的树的根对象所在的最后一个对象变为可用。       你通常将返回的对象将从分配 LoadAsync 到应用程序的对象树中的某个位置、 内容所知识可能仍会填入和如果作为 UI 的一部分公开的整个内容，则可能会导致增量布局更新。 为此，它是典型隔离或虚拟化从 XAML，任何以异步方式加载的对象并使用特定于应用程序逻辑或应用程序状态通知时<xref:System.Windows.Markup.XamlReader.LoadCompleted>处理。</xref:System.Windows.Markup.XamlReader.LoadCompleted>       为了使 LoadAsync 加载 XAML 输入以异步方式，在 XAML 标记中的根元素必须包含的属性和值`x:SynchronousMode=&quot;Async&quot;`。 值被视为区分大小写。 如果 XAML 标记根不包含`x:SynchronousMode=&quot;Async&quot;`，不会引发异常，且调用改为处理为同步负载 (请参阅<xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>)。</xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>       每个实例只有一个异步加载操作<xref:System.Windows.Markup.XamlReader>类可以执行一次。</xref:System.Windows.Markup.XamlReader>  如果多个异步操作，将尝试对同一个实例<xref:System.Windows.Markup.XamlReader>类<xref:System.InvalidOperationException>引发。</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "现有<xref:System.Xml.XmlReader>，具有已加载/读取 XAML 输入。</xref:System.Xml.XmlReader>"
    return:
      type: System.Object
      description: "创建的对象树的根。"
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "多个负载操作执行对同一个<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  id: LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadAsync(Stream,ParserContext)
  nameWithType: XamlReader.LoadAsync(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取中指定的 XAML 输入<xref:System.IO.Stream>并返回相应的对象树的根。</xref:System.IO.Stream>"
  remarks: "异步的 XAML 加载操作最初将返回一个对象，它只是根对象。 异步，XAML 分析然后仍然存在，并在根目录下填充任何子对象。 这是典型的 WPF XAML 处理行为和该产品与对象生存期 WPF 概念交互相反。 中的典型 （非异步） 交互，返回一个元素并将其加载汇报之前都是包括所有子集合对象的所有属性。 该行为等同于自下而上的方法，用于创建的树的根对象所在的最后一个对象变为可用。       你通常会将返回的对象分配到应用程序的对象树中的某个位置、 内容所知识可能仍会填入和如果作为 UI 的一部分公开的整个内容，则可能会导致增量布局更新。 为此，它是典型隔离或虚拟化从 XAML，任何以异步方式加载的对象并使用特定于应用程序逻辑或应用程序状态通知时<xref:System.Windows.Markup.XamlReader.LoadCompleted>处理。</xref:System.Windows.Markup.XamlReader.LoadCompleted>       为了使 LoadAsync 来以异步方式加载标记，在 XAML 标记中的根元素必须包含的属性和值`x:SynchronousMode=&quot;Async&quot;`。 值被视为区分大小写。 如果 XAML 标记根不包含`x:SynchronousMode=&quot;Async&quot;`，不会引发异常，且调用处理为同步负载 (请参阅<xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>)。</xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>       每个实例只有一个异步加载操作<xref:System.Windows.Markup.XamlReader>类可以执行一次。</xref:System.Windows.Markup.XamlReader>  如果多个异步操作，将尝试对同一个实例<xref:System.Windows.Markup.XamlReader>类<xref:System.InvalidOperationException>引发。</xref:System.InvalidOperationException> </xref:System.Windows.Markup.XamlReader>"
  syntax:
    content: public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "包含的 XAML 输入要加载的流。"
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "分析器使用的上下文信息。"
    return:
      type: System.Object
      description: "创建的对象树的根。"
  overload: System.Windows.Markup.XamlReader.LoadAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "多个负载操作执行对同一个<xref href=&quot;System.Windows.Markup.XamlReader&quot;> </xref>。"
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.LoadCompleted
  id: LoadCompleted
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: LoadCompleted
  nameWithType: XamlReader.LoadCompleted
  fullName: System.Windows.Markup.XamlReader.LoadCompleted
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "当异步加载操作完成时发生。"
  remarks: "当异步加载操作中止时，也会引发 LoadCompleted。"
  syntax:
    content: public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;
    return:
      type: System.ComponentModel.AsyncCompletedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Parse(String)
  nameWithType: XamlReader.Parse(String)
  fullName: System.Windows.Markup.XamlReader.Parse(String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取指定的文本字符串中的 XAML 输入并返回与指定标记的根对应的对象。"
  remarks: "实现调用<xref:System.Windows.Markup.XamlReader.Load%2A>内部后从字符串创建流。</xref:System.Windows.Markup.XamlReader.Load%2A> 请参阅<xref:System.Windows.Markup.XamlReader.Load%2A>有关其他信息，例如可能的异常。</xref:System.Windows.Markup.XamlReader.Load%2A>"
  syntax:
    content: public static object Parse (string xamlText);
    parameters:
    - id: xamlText
      type: System.String
      description: "输入 XAML，单个文本字符串形式。"
    return:
      type: System.Object
      description: "创建的对象树的根。"
  overload: System.Windows.Markup.XamlReader.Parse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  id: Parse(System.String,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  langs:
  - csharp
  name: Parse(String,ParserContext)
  nameWithType: XamlReader.Parse(String,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Parse(String,ParserContext)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows.Markup
  summary: "读取指定的文本字符串中的 XAML 标记 (使用指定<xref href=&quot;System.Windows.Markup.ParserContext&quot;> </xref>) 并将对应的对象返回到指定的标记的根。"
  remarks: "实现调用<xref:System.Windows.Markup.XamlReader.Load%2A>内部后从字符串创建流。</xref:System.Windows.Markup.XamlReader.Load%2A> 请参阅<xref:System.Windows.Markup.XamlReader.Load%2A>有关其他信息，例如可能的异常。</xref:System.Windows.Markup.XamlReader.Load%2A>"
  syntax:
    content: public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);
    parameters:
    - id: xamlText
      type: System.String
      description: "输入 XAML，单个文本字符串形式。"
    - id: parserContext
      type: System.Windows.Markup.ParserContext
      description: "分析器使用的上下文信息。"
    return:
      type: System.Object
      description: "创建的对象树的根。"
  overload: System.Windows.Markup.XamlReader.Parse*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Windows.Markup.XamlReader.#ctor
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: XamlReader()
  nameWithType: XamlReader.XamlReader()
  fullName: System.Windows.Markup.XamlReader.XamlReader()
- uid: System.Windows.Markup.XamlReader.CancelAsync
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: CancelAsync()
  nameWithType: XamlReader.CancelAsync()
  fullName: System.Windows.Markup.XamlReader.CancelAsync()
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: GetWpfSchemaContext()
  nameWithType: XamlReader.GetWpfSchemaContext()
  fullName: System.Windows.Markup.XamlReader.GetWpfSchemaContext()
- uid: System.Xaml.XamlSchemaContext
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(Stream)
  nameWithType: XamlReader.Load(Stream)
  fullName: System.Windows.Markup.XamlReader.Load(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(XamlReader)
  nameWithType: XamlReader.Load(XamlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XamlReader)
- uid: System.Xaml.XamlReader
  parent: System.Xaml
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader
  fullName: System.Xaml.XamlReader
- uid: System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(XmlReader)
  nameWithType: XamlReader.Load(XmlReader)
  fullName: System.Windows.Markup.XamlReader.Load(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load(Stream,ParserContext)
  nameWithType: XamlReader.Load(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Load(Stream,ParserContext)
- uid: System.Windows.Markup.ParserContext
  parent: System.Windows.Markup
  isExternal: false
  name: ParserContext
  nameWithType: ParserContext
  fullName: System.Windows.Markup.ParserContext
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(Stream)
  nameWithType: XamlReader.LoadAsync(Stream)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream)
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(XmlReader)
  nameWithType: XamlReader.LoadAsync(XmlReader)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(XmlReader)
- uid: System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync(Stream,ParserContext)
  nameWithType: XamlReader.LoadAsync(Stream,ParserContext)
  fullName: System.Windows.Markup.XamlReader.LoadAsync(Stream,ParserContext)
- uid: System.Windows.Markup.XamlReader.LoadCompleted
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadCompleted
  nameWithType: XamlReader.LoadCompleted
  fullName: System.Windows.Markup.XamlReader.LoadCompleted
- uid: System.ComponentModel.AsyncCompletedEventHandler
  parent: System.ComponentModel
  isExternal: true
  name: AsyncCompletedEventHandler
  nameWithType: AsyncCompletedEventHandler
  fullName: System.ComponentModel.AsyncCompletedEventHandler
- uid: System.Windows.Markup.XamlReader.Parse(System.String)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse(String)
  nameWithType: XamlReader.Parse(String)
  fullName: System.Windows.Markup.XamlReader.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse(String,ParserContext)
  nameWithType: XamlReader.Parse(String,ParserContext)
  fullName: System.Windows.Markup.XamlReader.Parse(String,ParserContext)
- uid: System.Windows.Markup.XamlReader.#ctor*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: XamlReader
  nameWithType: XamlReader.XamlReader
- uid: System.Windows.Markup.XamlReader.CancelAsync*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: CancelAsync
  nameWithType: XamlReader.CancelAsync
- uid: System.Windows.Markup.XamlReader.GetWpfSchemaContext*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: GetWpfSchemaContext
  nameWithType: XamlReader.GetWpfSchemaContext
- uid: System.Windows.Markup.XamlReader.Load*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Load
  nameWithType: XamlReader.Load
- uid: System.Windows.Markup.XamlReader.LoadAsync*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: LoadAsync
  nameWithType: XamlReader.LoadAsync
- uid: System.Windows.Markup.XamlReader.Parse*
  parent: System.Windows.Markup.XamlReader
  isExternal: false
  name: Parse
  nameWithType: XamlReader.Parse
