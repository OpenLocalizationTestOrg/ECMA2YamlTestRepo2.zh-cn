### YamlMime:ManagedReference
items:
- uid: System.Xml.XmlResolver
  id: XmlResolver
  children:
  - System.Xml.XmlResolver.#ctor
  - System.Xml.XmlResolver.Credentials
  - System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)
  - System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  - System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)
  - System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  langs:
  - csharp
  name: XmlResolver
  nameWithType: XmlResolver
  fullName: System.Xml.XmlResolver
  type: Class
  summary: "解析由统一资源标识符 (URI) 命名的外部 XML 资源。"
  remarks: "XmlResolver 类型用于解析外部 XML 资源，如实体、 文档类型定义 (Dtd) 或架构。 它也是用于过程包含和导入在可扩展样式表语言 (XSL) 样式表或 XML 架构定义语言 (XSD) 架构中找到的元素。       XmlResolver 处理协商的资源，包括处理安全凭据、 打开数据源的连接和流或其他对象类型的形式返回资源的连接的所有方面。 调用 XmlResolver 对象具有解释流的任务。       <xref:System.Xml>命名空间包含的 XmlResolver 类的两个具体实现:-<xref:System.Xml.XmlUrlResolver>是中的所有类的默认冲突解决程序<xref:System.Xml>命名空间。</xref:System.Xml> </xref:System.Xml.XmlUrlResolver> </xref:System.Xml> 它支持`file://`和`http://`协议和请求从<xref:System.Net.WebRequest?displayProperty=fullName>类。</xref:System.Net.WebRequest?displayProperty=fullName> 扩展类，以提高性能的示例，请参阅<xref:System.Xml.XmlUrlResolver>引用页。</xref:System.Xml.XmlUrlResolver>      -<xref:System.Xml.XmlSecureResolver>从而帮助保护另一个 XmlResolver 对象安全的包装的对象的对象，并限制它可以访问的资源。</xref:System.Xml.XmlSecureResolver> 例如，<xref:System.Xml.XmlSecureResolver>可以禁止访问特定的 Internet 站点或区域。</xref:System.Xml.XmlSecureResolver>       你可以创建并指定你自己的解析程序。 如果未指定解析程序，读取器将使用默认<xref:System.Xml.XmlUrlResolver>使用没有用户凭据。</xref:System.Xml.XmlUrlResolver>       指定要使用通过设置<xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName>属性并传入<xref:System.Xml.XmlReaderSettings>对象传递给<xref:System.Xml.XmlReader.Create%2A>方法。</xref:System.Xml.XmlReader.Create%2A> </xref:System.Xml.XmlReaderSettings> </xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=fullName>       如果资源需要身份验证的系统上存储，则使用<xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>属性来指定所需的凭据。</xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=fullName>      ## 提供身份验证凭据包含要读取的 XML 数据的文件可能具有受限制的访问策略。 如果需要身份验证来访问网络资源，使用<xref:System.Xml.XmlResolver.Credentials%2A>属性来指定所需的凭据。</xref:System.Xml.XmlResolver.Credentials%2A> 如果<xref:System.Xml.XmlResolver.Credentials%2A>未设置属性，凭据都设置为`null`。</xref:System.Xml.XmlResolver.Credentials%2A>       例如，假设从以进行身份验证 web 请求数据时所需凭据。 除非 web 虚拟目录允许匿名访问，你必须设置<xref:System.Xml.XmlResolver.Credentials%2A>属性提供的凭据。</xref:System.Xml.XmlResolver.Credentials%2A> 下面的示例创建<xref:System.Xml.XmlReader>对象，它使用<xref:System.Xml.XmlUrlResolver>使用默认凭据，访问 http://localhost/bookstore/inventory.xml 站点。</xref:System.Xml.XmlUrlResolver> </xref:System.Xml.XmlReader>       [!code-cpp[XmlReaderSettings.cctor#2](~/add/codesnippet/cpp/t-system.xml.xmlresolver_1.cpp)][!code-cs[XmlReaderSettings.cctor#2](~/add/codesnippet/csharp/t-system.xml.xmlresolver_1.cs)][!code-vb[XmlReaderSettings.cctor#2](~/add/codesnippet/visualbasic/t-system.xml.xmlresolver_1.vb) ]可以为不同的 Uri 提供不同的凭据并将其添加到缓存。     这些凭据用于检查不同 Uri 的 xml 的原始源无关的身份验证。 下面的示例演示如何将凭据添加到缓存。       [!code-vb[XslCompiledTransform.Load#11](~/add/codesnippet/visualbasic/t-system.xml.xmlresolver_2.vb)][!code-cs[XslCompiledTransform.Load#11](~/add/codesnippet/csharp/t-system.xml.xmlresolver_2.cs) ] # # 使用 XmlResolver 类时，安全注意事项考虑下列事项。        -XmlResolver 对象可以包含敏感信息，例如用户凭据。 缓存 XmlResolver 对象，并应将 XmlResolver 对象传递给不受信任的组件时，你应当小心。      -如果您正在设计使用 XmlResolver 类的类属性，则该属性应定义为只写属性。 属性可以用于指定要使用，但它不能用于返回 XmlResolver 对象。      -如果你的应用程序接受不受信任代码的 XmlResolver 对象，您不能假设 URI 传递到<xref:System.Xml.XmlResolver.GetEntity%2A>方法将返回的相同<xref:System.Xml.XmlResolver.ResolveUri%2A>方法。</xref:System.Xml.XmlResolver.ResolveUri%2A> </xref:System.Xml.XmlResolver.GetEntity%2A> 从 XmlResolver 类派生的类可以重写<xref:System.Xml.XmlResolver.GetEntity%2A>不同于原始 URI 中包含的方法，并且返回数据。</xref:System.Xml.XmlResolver.GetEntity%2A>      -您的应用程序可以减轻内存拒绝服务威胁到<xref:System.Xml.XmlResolver.GetEntity%2A>方法通过实现<xref:System.Runtime.InteropServices.ComTypes.IStream>限制读取的字节数。</xref:System.Runtime.InteropServices.ComTypes.IStream> </xref:System.Xml.XmlResolver.GetEntity%2A> 这有助于防止恶意代码尝试传递到的字节的无限流的情况下出现<xref:System.Xml.XmlResolver.GetEntity%2A>方法。</xref:System.Xml.XmlResolver.GetEntity%2A>"
  example:
  - "The following example creates an <xref:System.Xml.XmlUrlResolver> with default credentials. A <xref:System.Xml.XmlReader> is used to read and display the resulting data stream.  \n  \n [!code-cs[XmlResolver_ex#1](~/add/codesnippet/csharp/t-system.xml.xmlresolver_3.cs)]\n [!code-vb[XmlResolver_ex#1](~/add/codesnippet/visualbasic/t-system.xml.xmlresolver_3.vb)]"
  syntax:
    content: public abstract class XmlResolver
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xml.XmlResolver.#ctor
  id: '#ctor'
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: XmlResolver()
  nameWithType: XmlResolver.XmlResolver()
  fullName: System.Xml.XmlResolver.XmlResolver()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "初始化的新实例<xref href=&quot;System.Xml.XmlResolver&quot;></xref>类。"
  remarks: "派生的类构造函数来初始化此类型中的状态将调用此构造函数。"
  syntax:
    content: protected XmlResolver ();
    parameters: []
  overload: System.Xml.XmlResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlResolver.Credentials
  id: Credentials
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: Credentials
  nameWithType: XmlResolver.Credentials
  fullName: System.Xml.XmlResolver.Credentials
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "当在派生类中重写，设置用于对 web 请求进行身份验证的凭据。"
  remarks: "如果虚拟目录不要求身份验证，此属性没有设置。 否则，必须提供用户的凭据。       下面的 C# 代码上设置凭据<xref:System.Xml.XmlResolver>对象。</xref:System.Xml.XmlResolver>      ```   NetworkCredential nc = new NetWorkCredential(UserName,SecurelyStoredPassword,Domain);   XmlUrlResolver resolver = new XmlUrlResolver();   resolver.Credentials = nc;   ```你可以将不同的凭据与不同的 Uri 相关联，并将其添加到缓存。 然后可以使用的凭据来检查不同 Uri 的 xml 的原始源无关的身份验证。      ```   NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);    CredentialCache myCache = new CredentialCache();    myCache.Add(new Uri(&quot;http://www.contoso.com/&quot;), &quot;Basic&quot;, myCred);    myCache.Add(new Uri(&quot;http://app.contoso.com/&quot;), &quot;Basic&quot;, myCred);   XmlUrlResolver resolver = new XmlUrlResolver();   resolver.Credentials = myCache;   ```"
  example:
  - See <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=fullName> for an example that uses this property.
  syntax:
    content: public virtual System.Net.ICredentials Credentials { set; }
    return:
      type: System.Net.ICredentials
      description: "要使用 web 请求进行身份验证的凭据。 如果未设置此属性，则该值默认为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>; 即， <xref uid=&quot;langword_csharp_XmlResolver&quot; name=&quot;XmlResolver&quot; href=&quot;&quot;> </xref>没有用户凭据。"
  overload: System.Xml.XmlResolver.Credentials*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)
  id: GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlResolver.GetEntity(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "当在派生类中重写，请将 URI 映射到包含实际资源的对象。"
  remarks: "当调用方想要将给定的 URI 映射到包含实际资源的 uri，该 URI 表示的对象，使用此方法。 返回对象的类型是 negotiable;但是，实现必须始终支持<xref:System.IO.Stream?displayProperty=fullName>.</xref:System.IO.Stream?displayProperty=fullName>       此方法的异步版本，请参阅<xref:System.Xml.XmlResolver.GetEntityAsync%2A>。</xref:System.Xml.XmlResolver.GetEntityAsync%2A>      1> [!IMPORTANT]&1;> 你的应用程序可以通过实现来缓解内存拒绝服务威胁到 GetEntity 方法<xref:System.Runtime.InteropServices.ComTypes.IStream>限制读取的字节数。</xref:System.Runtime.InteropServices.ComTypes.IStream> 这有助于应对这种情况下恶意代码，尝试将字节的无限流传递到 GetEntity 方法。"
  example:
  - See <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName> for an example using this method.
  syntax:
    content: public abstract object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "从<xref:System.Xml.XmlResolver.ResolveUri*>.</xref:System.Xml.XmlResolver.ResolveUri*>返回的 URI"
    - id: role
      type: System.String
      description: "当前未使用。"
    - id: ofObjectToReturn
      type: System.Type
      description: "要返回的对象类型。 当前版本只返回 System.IO.Stream 对象。"
    return:
      type: System.Object
      description: "流对象或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果指定了流以外的类型。"
  overload: System.Xml.XmlResolver.GetEntity*
  exceptions:
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>ofObjectToReturn</code>不是<xref uid=&quot;langword_csharp_Stream&quot; name=&quot;Stream&quot; href=&quot;&quot;></xref>类型。"
  - type: System.UriFormatException
    commentId: T:System.UriFormatException
    description: "指定的 URI 不是一个绝对 URI。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>absoluteUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Exception
    commentId: T:System.Exception
    description: "没有运行时错误 （例如，中断的服务器连接）。"
  platform:
  - net462
- uid: System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  id: GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlResolver.GetEntityAsync(Uri,String,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "将 URI 异步映射到包含实际资源的对象。"
  remarks: "这是异步版本<xref:System.Xml.XmlResolver.GetEntity%2A>，具有相同功能。</xref:System.Xml.XmlResolver.GetEntity%2A> 若要使用此方法，必须设置<xref:System.Xml.XmlReaderSettings.Async%2A>标志切换为`true`。</xref:System.Xml.XmlReaderSettings.Async%2A>"
  syntax:
    content: public virtual System.Threading.Tasks.Task<object> GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "从<xref:System.Xml.XmlResolver.ResolveUri*>.</xref:System.Xml.XmlResolver.ResolveUri*>返回的 URI"
    - id: role
      type: System.String
      description: "当前未使用。"
    - id: ofObjectToReturn
      type: System.Type
      description: "要返回的对象类型。 当前版本只返回<xref:System.IO.Stream>对象。</xref:System.IO.Stream>"
    return:
      type: System.Threading.Tasks.Task{System.Object}
      description: "流对象或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果指定了流以外的类型。"
  overload: System.Xml.XmlResolver.GetEntityAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)
  id: ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: ResolveUri(Uri,String)
  nameWithType: XmlResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlResolver.ResolveUri(Uri,String)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "当在派生类中重写时解析 uri 基和相对 uri 的绝对 URI。"
  remarks: "绝对 URI 可能用作相对于此 URI 的实体的任何后续请求的基 URI。"
  example:
  - See <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=fullName> for an example that uses this method.
  syntax:
    content: public virtual Uri ResolveUri (Uri baseUri, string relativeUri);
    parameters:
    - id: baseUri
      type: System.Uri
      description: "基 URI 用于解析相对 URI。"
    - id: relativeUri
      type: System.String
      description: "要解析的 URI。 URI 可以是绝对或相对。 如果绝对的此值有效地替换`baseUri`值。 如果相对的它结合了以及`baseUri`以构成绝对 URI。"
    return:
      type: System.Uri
      description: "绝对 URI 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不能解析相对 URI。"
  overload: System.Xml.XmlResolver.ResolveUri*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>relativeUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  id: SupportsType(System.Uri,System.Type)
  parent: System.Xml.XmlResolver
  langs:
  - csharp
  name: SupportsType(Uri,Type)
  nameWithType: XmlResolver.SupportsType(Uri,Type)
  fullName: System.Xml.XmlResolver.SupportsType(Uri,Type)
  type: Method
  assemblies:
  - System.Xml
  namespace: System.Xml
  summary: "使之外的返回类型的解析程序&lt;xref:System.IO.Stream?displayProperty=fullName&gt;。"
  syntax:
    content: public virtual bool SupportsType (Uri absoluteUri, Type type);
    parameters:
    - id: absoluteUri
      type: System.Uri
      description: "URI。"
    - id: type
      type: System.Type
      description: "要返回的类型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> type </code>受支持; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.XmlResolver.SupportsType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.UriFormatException
  isExternal: true
  name: System.UriFormatException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xml.XmlResolver.#ctor
  parent: System.Xml.XmlResolver
  isExternal: false
  name: XmlResolver()
  nameWithType: XmlResolver.XmlResolver()
  fullName: System.Xml.XmlResolver.XmlResolver()
- uid: System.Xml.XmlResolver.Credentials
  parent: System.Xml.XmlResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlResolver.Credentials
  fullName: System.Xml.XmlResolver.Credentials
- uid: System.Net.ICredentials
  parent: System.Net
  isExternal: true
  name: ICredentials
  nameWithType: ICredentials
  fullName: System.Net.ICredentials
- uid: System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlResolver
  isExternal: false
  name: GetEntity(Uri,String,Type)
  nameWithType: XmlResolver.GetEntity(Uri,String,Type)
  fullName: System.Xml.XmlResolver.GetEntity(Uri,String,Type)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)
  parent: System.Xml.XmlResolver
  isExternal: false
  name: GetEntityAsync(Uri,String,Type)
  nameWithType: XmlResolver.GetEntityAsync(Uri,String,Type)
  fullName: System.Xml.XmlResolver.GetEntityAsync(Uri,String,Type)
- uid: System.Threading.Tasks.Task{System.Object}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Object>
  nameWithType: Task<Object>
  fullName: System.Threading.Tasks.Task<System.Object>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)
  parent: System.Xml.XmlResolver
  isExternal: false
  name: ResolveUri(Uri,String)
  nameWithType: XmlResolver.ResolveUri(Uri,String)
  fullName: System.Xml.XmlResolver.ResolveUri(Uri,String)
- uid: System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)
  parent: System.Xml.XmlResolver
  isExternal: false
  name: SupportsType(Uri,Type)
  nameWithType: XmlResolver.SupportsType(Uri,Type)
  fullName: System.Xml.XmlResolver.SupportsType(Uri,Type)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.XmlResolver.#ctor*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: XmlResolver
  nameWithType: XmlResolver.XmlResolver
- uid: System.Xml.XmlResolver.Credentials*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: Credentials
  nameWithType: XmlResolver.Credentials
- uid: System.Xml.XmlResolver.GetEntity*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: GetEntity
  nameWithType: XmlResolver.GetEntity
- uid: System.Xml.XmlResolver.GetEntityAsync*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: GetEntityAsync
  nameWithType: XmlResolver.GetEntityAsync
- uid: System.Xml.XmlResolver.ResolveUri*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: ResolveUri
  nameWithType: XmlResolver.ResolveUri
- uid: System.Xml.XmlResolver.SupportsType*
  parent: System.Xml.XmlResolver
  isExternal: false
  name: SupportsType
  nameWithType: XmlResolver.SupportsType
