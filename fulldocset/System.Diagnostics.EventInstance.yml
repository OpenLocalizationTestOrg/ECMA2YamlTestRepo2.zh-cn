### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.EventInstance
  id: EventInstance
  children:
  - System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  - System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  - System.Diagnostics.EventInstance.CategoryId
  - System.Diagnostics.EventInstance.EntryType
  - System.Diagnostics.EventInstance.InstanceId
  langs:
  - csharp
  name: EventInstance
  nameWithType: EventInstance
  fullName: System.Diagnostics.EventInstance
  type: Class
  summary: "表示一个事件日志条目的非特定于语言的信息。"
  remarks: "使用 EventInstance 写入事件日志条目使用的资源标识符，而不是一个字符串值。 若要写入事件日志条目，初始化<xref:System.Diagnostics.EventInstance.InstanceId%2A>属性并将传递到实例<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance.InstanceId%2A> 事件查看器使用实例标识符来查找并显示基于当前语言设置的本地化的资源文件中的相应字符串。 需要在编写使用资源标识符的事件前，必须将事件源注册相应的资源文件。       写入事件时，你可以设置<xref:System.Diagnostics.EventInstance.EntryType%2A>属性指定为该项的事件查看器显示的图标。</xref:System.Diagnostics.EventInstance.EntryType%2A> 你还可以指定<xref:System.Diagnostics.EventInstance.CategoryId%2A>属性指定为该项的事件查看器显示的类别。</xref:System.Diagnostics.EventInstance.CategoryId%2A>       事件查看器将使用到按事件源写入筛选器事件类别。 事件查看器可将类别显示为数字值，或者它可以作为资源标识符使用类别，以显示本地化的类别字符串。       若要在事件查看器中显示本地化的类别字符串，必须使用事件源使用类别资源文件，配置和设置<xref:System.Diagnostics.EventInstance.CategoryId%2A>类别资源文件中的资源标识符。</xref:System.Diagnostics.EventInstance.CategoryId%2A> 如果事件源没有配置的类别资源文件，或指定<xref:System.Diagnostics.EventInstance.CategoryId%2A>不得索引类别资源文件，然后选择事件查看器中的字符串是否显示该条目的数字类别值。</xref:System.Diagnostics.EventInstance.CategoryId%2A> 配置类别资源文件，以及数量的类别字符串在资源文件中，使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventSourceCreationData>类。</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller>       你必须使用 EventInstance 中写入事件之前注册为事件日志源<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。</xref:System.Diagnostics.EventLog.WriteEvent%2A> 必须向日志写入本地化的项配置源和源必须定义至少一个消息资源文件。       在你的应用程序的安装过程中创建新的事件源。 这样，可以为操作系统来刷新其已注册的事件源的列表和它们的配置的时间。 如果操作系统未刷新其事件源的列表，并尝试写入新的源的事件写入操作将失败。 你可以配置新的源使用<xref:System.Diagnostics.EventLogInstaller>，或使用<xref:System.Diagnostics.EventLog.CreateEventSource%2A>方法。</xref:System.Diagnostics.EventLog.CreateEventSource%2A> </xref:System.Diagnostics.EventLogInstaller> 若要创建新的事件源的计算机上，必须具有管理权限。       有关如何定义事件消息和生成事件日志资源文件的详细信息，请参阅处平台 SDK 文档中的&quot;消息编译器&quot;主题[http://msdn.microsoft.com](http://msdn.microsoft.com)。"
  example:
  - "The following code example writes an informational event entry, and then reuses the EventInstance to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/t-system.diagnostics.eve_2_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/t-system.diagnostics.eve_2_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/t-system.diagnostics.eve_2_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public class EventInstance
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  id: '#ctor(System.Int64,System.Int32)'
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EventInstance(Int64,Int32)
  nameWithType: EventInstance.EventInstance(Int64,Int32)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.EventInstance&quot;></xref>类事件项的本地化消息和类别文本使用指定的资源标识符。"
  remarks: "若要向事件日志中写入信息条目，初始化<xref:System.Diagnostics.EventInstance>和将其传递到<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> 设置`instanceId`到中相应的事件消息的资源标识符<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>源的属性。</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 设置`categoryId`为数值类别值或事件类别中的资源标识符<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>源的属性; 设置`categoryId`为零没有事件类别。</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A> <xref:System.Diagnostics.EventInstance.EntryType%2A>的新实例的属性设置为<xref:System.Diagnostics.EventLogEntryType>默认情况下。</xref:System.Diagnostics.EventLogEntryType> </xref:System.Diagnostics.EventInstance.EntryType%2A>       事件查看器使用的资源标识符来显示源的本地化的资源文件中的相应字符串。 你可以编写使用资源标识符的事件前，必须将源注册相应的资源文件。"
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/m-system.diagnostics.eve_5_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/m-system.diagnostics.eve_5_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/m-system.diagnostics.eve_5_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventInstance (long instanceId, int categoryId);
    parameters:
    - id: instanceId
      type: System.Int64
      description: "对应于事件源的消息资源文件中定义的字符串资源标识符。"
    - id: categoryId
      type: System.Int32
      description: "对应于事件源，则为零，以不指定事件的任何类别的类别资源文件中定义的字符串资源标识符。"
  overload: System.Diagnostics.EventInstance.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> instanceId </code>参数是负值或值大于&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;。       -或- <code> categoryId </code>参数是负值或值大于&lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  id: '#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)'
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EventInstance(Int64,Int32,EventLogEntryType)
  nameWithType: EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.EventInstance&quot;></xref>类事件项和指定的事件日志条目类型的本地化的消息和类别文本使用指定的资源标识符。"
  remarks: "若要向事件日志中写入条目，初始化<xref:System.Diagnostics.EventInstance>和将其传递到<xref:System.Diagnostics.EventLog.WriteEvent%2A>方法。</xref:System.Diagnostics.EventLog.WriteEvent%2A> </xref:System.Diagnostics.EventInstance> 设置`instanceId`到中相应的事件消息的资源标识符<xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A>源的属性。</xref:System.Diagnostics.EventSourceCreationData.MessageResourceFile%2A> 设置`categoryId`为数值类别值或事件类别中的资源标识符<xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>源的属性; 设置`categoryId`为零没有事件类别。</xref:System.Diagnostics.EventSourceCreationData.CategoryResourceFile%2A>       事件查看器使用的资源标识符来显示源的本地化的资源文件中的相应字符串。 你可以编写使用资源标识符的事件前，必须将源注册相应的资源文件。       设置`entryType`到预定义的条目类型之一。 事件查看器使用的事件类型来确定要在事件日志的列表视图中显示的图标。"
  example:
  - "The following code example writes two audit event entries to the event log `myNewLog`. The code example creates a new event source and a new event log if they do not exist on the local computer. The event message text is specified using a resource identifier in a resource file.  \n  \n [!code-cpp[EventLog_WriteEvent#7](~/add/codesnippet/cpp/fc333350-d8a8-40ee-b15e-_1.cpp)]\n [!code-vb[EventLog_WriteEvent#7](~/add/codesnippet/visualbasic/fc333350-d8a8-40ee-b15e-_1.vb)]\n [!code-cs[EventLog_WriteEvent#7](~/add/codesnippet/csharp/fc333350-d8a8-40ee-b15e-_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public EventInstance (long instanceId, int categoryId, System.Diagnostics.EventLogEntryType entryType);
    parameters:
    - id: instanceId
      type: System.Int64
      description: "对应于事件源的消息资源文件中定义的字符串资源标识符。"
    - id: categoryId
      type: System.Int32
      description: "对应于事件源，则为零，以不指定事件的任何类别的类别资源文件中定义的字符串资源标识符。"
    - id: entryType
      type: System.Diagnostics.EventLogEntryType
      description: "<xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>值，该值指示事件类型。"
  overload: System.Diagnostics.EventInstance.#ctor*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code>entryType</code>不是有效<xref href=&quot;System.Diagnostics.EventLogEntryType&quot;></xref>值。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>instanceId</code>是负值或值大于&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;。       -<code>categoryId</code>是负值或值大于&lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.CategoryId
  id: CategoryId
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: CategoryId
  nameWithType: EventInstance.CategoryId
  fullName: System.Diagnostics.EventInstance.CategoryId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取或设置指定事件项的应用程序定义类别的资源标识符。"
  remarks: "事件日志类别是应用程序定义的值，用于帮助筛选事件，或进一步提供有关事件的信息。 例如，你的应用程序可以定义为不同的组件或不同的操作分隔不同类别。       设置 CategoryId 属性以指定事件查看器显示的项的类别。 事件查看器可将类别显示为数字值，或者它可以作为资源标识符使用 CategoryId，若要显示本地化的类别字符串基于当前语言设置。       若要显示本地化的类别字符串，在事件查看器中，你必须使用事件源配置类别资源文件，和 CategoryId 设类别资源文件中的资源标识符。 如果事件源不具有配置的类别资源文件或指定的 CategoryId 未对索引在类别资源文件中，一个字符串，然后事件查看器显示该条目的数字类别值。       需要在编写使用资源标识符的事件类别前，必须将源注册相应的资源文件。 配置类别资源文件，以及数量的类别字符串在资源文件中，使用<xref:System.Diagnostics.EventLogInstaller>或<xref:System.Diagnostics.EventSourceCreationData>类。</xref:System.Diagnostics.EventSourceCreationData> </xref:System.Diagnostics.EventLogInstaller> 当在资源文件中定义类别字符串，必须连续从 1 开始的最多配置编号类别资源标识符<xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>属性值。</xref:System.Diagnostics.EventSourceCreationData.CategoryCount%2A>       事件类别是可选的。 如果你的应用程序不使用类别，则不要设置事件日志条目 CategoryId。       有关如何定义事件消息和生成事件资源文件的详细信息，请参阅处平台 SDK 文档中的&quot;消息编译器&quot;主题[http://msdn.microsoft.com](http://msdn.microsoft.com/)。 有关在资源文件中定义的事件类别的详细信息，请参阅平台 SDK 中的&quot;事件类别&quot;主题"
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_24_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_24_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_24_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public int CategoryId { get; set; }
    return:
      type: System.Int32
      description: "数值类别值或资源标识符，对应的事件源的类别资源文件中定义的字符串。 默认值为零，这意味着，没有类别将显示事件项。"
  overload: System.Diagnostics.EventInstance.CategoryId*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "属性设置为负值或值大于&lt;xref:System.UInt16.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.EntryType
  id: EntryType
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: EntryType
  nameWithType: EventInstance.EntryType
  fullName: System.Diagnostics.EventInstance.EntryType
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取或设置事件日志条目的事件类型。"
  remarks: "每个事件是应用程序将指示它在报告事件时的单一类型。 事件查看器使用的事件类型来确定要在事件日志的列表视图中显示的图标。"
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_11_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_11_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_11_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public System.Diagnostics.EventLogEntryType EntryType { get; set; }
    return:
      type: System.Diagnostics.EventLogEntryType
      description: "<xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>值，该值指示事件条目类型。 默认值是<xref href=&quot;System.Diagnostics.EventLogEntryType&quot;> </xref>。"
  overload: System.Diagnostics.EventInstance.EntryType*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "该属性未设置为有效<xref href=&quot;System.Diagnostics.EventLogEntryType&quot;></xref>值。"
  platform:
  - net462
- uid: System.Diagnostics.EventInstance.InstanceId
  id: InstanceId
  parent: System.Diagnostics.EventInstance
  langs:
  - csharp
  name: InstanceId
  nameWithType: EventInstance.InstanceId
  fullName: System.Diagnostics.EventInstance.InstanceId
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取或设置指定事件项的消息文本的资源标识符。"
  remarks: "InstanceId 属性唯一地标识配置的事件源的事件条目。 对于在消息资源文件中定义的事件，InstanceId 对应于的消息文本文件中的消息定义字段从编译的资源标识符。 你的应用程序可以通过设置 InstanceId 为资源标识符写入本地化的事件日志项。 事件查看器使用 InstanceId 资源标识符来查找并显示基于当前语言设置的本地化的资源文件中的相应字符串。 需要在编写使用资源标识符的事件前，必须将源注册相应的资源文件。       有关如何定义事件消息和生成事件日志资源文件的详细信息，请参阅处平台 SDK 文档中的&quot;消息编译器&quot;主题[http://msdn.microsoft.com](http://msdn.microsoft.com/)。 有关事件日志的标识符的详细信息，请参阅平台 SDK 中的&quot;事件标识符&quot;主题。"
  example:
  - "The following code example writes an informational event entry, and then reuses the <xref:System.Diagnostics.EventInstance> to write an entry for a warning event to an existing event log. The event message text is specified using a resource identifier in a message resource file. The code example assumes that the corresponding message resource file has been registered for the source.  \n  \n [!code-cpp[EventLog_WriteEvent#9](~/add/codesnippet/cpp/p-system.diagnostics.eve_16_1.cpp)]\n [!code-vb[EventLog_WriteEvent#9](~/add/codesnippet/visualbasic/p-system.diagnostics.eve_16_1.vb)]\n [!code-cs[EventLog_WriteEvent#9](~/add/codesnippet/csharp/p-system.diagnostics.eve_16_1.cs)]  \n  \n The code example uses the following message text file, built into the resource library EventLogMsgs.dll. A message text file is the source from which the message resource file is created. The message text file defines the resource identifiers and text for the category, event message, and parameter insertion strings.  \n  \n```  \n; // EventLogMsgs.mc  \n; // ********************************************************  \n  \n; // Use the following commands to build this file:  \n  \n; //   mc -s EventLogMsgs.mc  \n; //   rc EventLogMsgs.rc  \n; //   link /DLL /SUBSYSTEM:WINDOWS /NOENTRY /MACHINE:x86 EventLogMsgs.Res   \n; // ********************************************************  \n  \n; // - Event categories -  \n; // Categories must be numbered consecutively starting at 1.  \n; // ********************************************************  \n  \nMessageId=0x1  \nSeverity=Success  \nSymbolicName=INSTALL_CATEGORY  \nLanguage=English  \nInstallation  \n.  \n  \nMessageId=0x2  \nSeverity=Success  \nSymbolicName=QUERY_CATEGORY  \nLanguage=English  \nDatabase Query  \n.  \n  \nMessageId=0x3  \nSeverity=Success  \nSymbolicName=REFRESH_CATEGORY  \nLanguage=English  \nData Refresh  \n.  \n  \n; // - Event messages -  \n; // *********************************  \n  \nMessageId = 1000  \nSeverity = Success  \nFacility = Application  \nSymbolicName = AUDIT_SUCCESS_MESSAGE_ID_1000  \nLanguage=English  \nMy application message text, in English, for message id 1000, called from %1.  \n.  \n  \nMessageId = 1001  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = AUDIT_FAILED_MESSAGE_ID_1001  \nLanguage=English  \nMy application message text, in English, for message id 1001, called from %1.  \n.  \n  \nMessageId = 1002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = GENERIC_INFO_MESSAGE_ID_1002  \nLanguage=English  \nMy generic information message in English, for message id 1002.  \n.  \n  \nMessageId = 1003  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = GENERIC_WARNING_MESSAGE_ID_1003  \nLanguage=English  \nMy generic warning message in English, for message id 1003, called from %1.  \n.  \n  \nMessageId = 1004  \nSeverity = Success  \nFacility = Application  \nSymbolicName = UPDATE_CYCLE_COMPLETE_MESSAGE_ID_1004  \nLanguage=English  \nThe update cycle is complete for %%5002.  \n.  \n  \nMessageId = 1005  \nSeverity = Warning  \nFacility = Application  \nSymbolicName = SERVER_CONNECTION_DOWN_MESSAGE_ID_1005  \nLanguage=English  \nThe refresh operation did not complete because the connection to server %1 could not be established.  \n.  \n  \n; // - Event log display name -  \n; // ********************************************************  \n  \nMessageId = 5001  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_DISPLAY_NAME_MSGID  \nLanguage=English  \nSample Event Log  \n.  \n  \n; // - Event message parameters -  \n; //   Language independent insertion strings  \n; // ********************************************************  \n  \nMessageId = 5002  \nSeverity = Success  \nFacility = Application  \nSymbolicName = EVENT_LOG_SERVICE_NAME_MSGID  \nLanguage=English  \nSVC_UPDATE.EXE  \n.  \n```"
  syntax:
    content: public long InstanceId { get; set; }
    return:
      type: System.Int64
      description: "对应于事件源的消息资源文件中定义的字符串资源标识符。"
  overload: System.Diagnostics.EventInstance.InstanceId*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "属性设置为负值或值大于&lt;xref:System.UInt32.MaxValue?displayProperty=fullName&gt;。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32)
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance(Int64,Int32)
  nameWithType: EventInstance.EventInstance(Int64,Int32)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.EventInstance.#ctor(System.Int64,System.Int32,System.Diagnostics.EventLogEntryType)
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance(Int64,Int32,EventLogEntryType)
  nameWithType: EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
  fullName: System.Diagnostics.EventInstance.EventInstance(Int64,Int32,EventLogEntryType)
- uid: System.Diagnostics.EventLogEntryType
  parent: System.Diagnostics
  isExternal: false
  name: EventLogEntryType
  nameWithType: EventLogEntryType
  fullName: System.Diagnostics.EventLogEntryType
- uid: System.Diagnostics.EventInstance.CategoryId
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: CategoryId
  nameWithType: EventInstance.CategoryId
  fullName: System.Diagnostics.EventInstance.CategoryId
- uid: System.Diagnostics.EventInstance.EntryType
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EntryType
  nameWithType: EventInstance.EntryType
  fullName: System.Diagnostics.EventInstance.EntryType
- uid: System.Diagnostics.EventInstance.InstanceId
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: InstanceId
  nameWithType: EventInstance.InstanceId
  fullName: System.Diagnostics.EventInstance.InstanceId
- uid: System.Diagnostics.EventInstance.#ctor*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EventInstance
  nameWithType: EventInstance.EventInstance
- uid: System.Diagnostics.EventInstance.CategoryId*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: CategoryId
  nameWithType: EventInstance.CategoryId
- uid: System.Diagnostics.EventInstance.EntryType*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: EntryType
  nameWithType: EventInstance.EntryType
- uid: System.Diagnostics.EventInstance.InstanceId*
  parent: System.Diagnostics.EventInstance
  isExternal: false
  name: InstanceId
  nameWithType: EventInstance.InstanceId
