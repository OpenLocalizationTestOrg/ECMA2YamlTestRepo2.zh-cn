### YamlMime:ManagedReference
items:
- uid: System.Configuration.Provider.ProviderBase
  id: ProviderBase
  children:
  - System.Configuration.Provider.ProviderBase.#ctor
  - System.Configuration.Provider.ProviderBase.Description
  - System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Configuration.Provider.ProviderBase.Name
  langs:
  - csharp
  name: ProviderBase
  nameWithType: ProviderBase
  fullName: System.Configuration.Provider.ProviderBase
  type: Class
  summary: "提供基实现，用以可扩展的提供程序模型。"
  remarks: "提供程序模型旨在封装全部或部分的多个 ASP.NET 功能，例如成员资格、 配置文件和受保护的配置的功能。 它允许开发人员可以创建提供封装的功能的多个实现的支持类。 此外，开发人员可以编写使用提供程序模型的新功能。 这可以是功能的支持的多个实现，而不复制功能代码或重新实现方法需要更改的情况下编写代码的应用程序层的有效方式。       ProviderBase 类很简单，只包含几个基本的方法和属性所共有的所有提供程序。 特定于功能的提供程序 (如<xref:System.Web.Security.MembershipProvider>) 从 ProviderBase 继承，并且建立的所需的方法和该功能的特定于实现的提供程序必须支持的属性。</xref:System.Web.Security.MembershipProvider> 特定于实现的提供程序 (如<xref:System.Web.Security.SqlMembershipProvider>) 反过来继承的特定于功能的提供程序 (在这种情况下， <xref:System.Web.Security.MembershipProvider>)。</xref:System.Web.Security.MembershipProvider> </xref:System.Web.Security.SqlMembershipProvider>       提供程序模型的最重要方面是，提取应用程序代码 （例如，是否数据将保存为文本文件或数据库） 的实现。 在配置文件中指定给定的功能特定于实现的提供程序的类型。 功能级别提供程序会将类型从配置文件中读取，并且可作为为功能代码中的工厂。 应用程序开发人员然后可以在应用程序代码中使用的功能的类。 实现类型可以交换出在配置文件中，不再需要重写代码以适应不同的实现方法。       包含在 ASP.NET 提供程序是主要的数据持久性实现的功能，如配置文件或成员身份的抽象。 但是，此模型可应用于任何其他类型的无法提取并采用多种方式实现的功能。"
  example:
  - For an example of how to use the ProviderBase class, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public abstract class ProviderBase
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.#ctor
  id: '#ctor'
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: ProviderBase()
  nameWithType: ProviderBase.ProviderBase()
  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()
  type: Constructor
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "初始化的新实例<xref href=&quot;System.Configuration.Provider.ProviderBase&quot;></xref>类。"
  syntax:
    content: protected ProviderBase ();
    parameters: []
  overload: System.Configuration.Provider.ProviderBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Description
  id: Description
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Description
  nameWithType: ProviderBase.Description
  fullName: System.Configuration.Provider.ProviderBase.Description
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "获取一个友好的简要说明适用于管理工具或其他用户界面 (Ui) 中的显示。"
  remarks: "如果配置的提供程序不提供的说明的值<xref:System.Configuration.Provider.ProviderBase.Name%2A>默认情况下返回属性。</xref:System.Configuration.Provider.ProviderBase.Name%2A>"
  syntax:
    content: public virtual string Description { get; }
    return:
      type: System.String
      description: "简短的易懂说明适用于管理工具或其他 Ui 中显示。"
  overload: System.Configuration.Provider.ProviderBase.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: ProviderBase.Initialize(String,NameValueCollection)
  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "初始化提供程序。"
  remarks: "基类实现内部跟踪的次数提供程序的`Initialize`调用方法。 如果不止一次初始化提供`InvalidOperationException`指出已初始化提供程序引发。       因为大多数功能提供程序调用初始化执行特定于提供程序初始化之前，此方法是一个中心位置以防止重复初始化。"
  example:
  - For an example of how to use Initialize, see [Profile Provider Implementation Example](~/add/includes/ajax-current-ext-md.md).
  syntax:
    content: public virtual void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "提供程序的友好名称。"
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "表示此提供程序的配置中指定的提供程序特定属性的名称/值对的集合。"
  overload: System.Configuration.Provider.ProviderBase.Initialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "提供程序的名称是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "提供程序的名称具有长度为零。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尝试在提供程序上调用初始化后已初始化提供程序。"
  platform:
  - net462
- uid: System.Configuration.Provider.ProviderBase.Name
  id: Name
  parent: System.Configuration.Provider.ProviderBase
  langs:
  - csharp
  name: Name
  nameWithType: ProviderBase.Name
  fullName: System.Configuration.Provider.ProviderBase.Name
  type: Property
  assemblies:
  - System.Configuration
  namespace: System.Configuration.Provider
  summary: "获取用于在配置过程中引用该提供程序的友好名称。"
  remarks: '建议的模式，该字符串是: [*提供程序创建者*] [*实现类型*] [*功能*] 提供程序。 尽管<xref:System.Configuration.Provider.ProviderBase.Description%2A>属性也提供友好的说明，Name 属性用作提供程序标识符。</xref:System.Configuration.Provider.ProviderBase.Description%2A>'
  syntax:
    content: public virtual string Name { get; }
    return:
      type: System.String
      description: "用于在配置过程中引用该提供程序的友好名称。"
  overload: System.Configuration.Provider.ProviderBase.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Configuration.Provider.ProviderBase.#ctor
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: ProviderBase()
  nameWithType: ProviderBase.ProviderBase()
  fullName: System.Configuration.Provider.ProviderBase.ProviderBase()
- uid: System.Configuration.Provider.ProviderBase.Description
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Description
  nameWithType: ProviderBase.Description
  fullName: System.Configuration.Provider.ProviderBase.Description
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Configuration.Provider.ProviderBase.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: ProviderBase.Initialize(String,NameValueCollection)
  fullName: System.Configuration.Provider.ProviderBase.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Configuration.Provider.ProviderBase.Name
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Name
  nameWithType: ProviderBase.Name
  fullName: System.Configuration.Provider.ProviderBase.Name
- uid: System.Configuration.Provider.ProviderBase.#ctor*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: ProviderBase
  nameWithType: ProviderBase.ProviderBase
- uid: System.Configuration.Provider.ProviderBase.Description*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Description
  nameWithType: ProviderBase.Description
- uid: System.Configuration.Provider.ProviderBase.Initialize*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Initialize
  nameWithType: ProviderBase.Initialize
- uid: System.Configuration.Provider.ProviderBase.Name*
  parent: System.Configuration.Provider.ProviderBase
  isExternal: false
  name: Name
  nameWithType: ProviderBase.Name
