### YamlMime:ManagedReference
items:
- uid: System.EnterpriseServices.ServicedComponent
  id: ServicedComponent
  children:
  - System.EnterpriseServices.ServicedComponent.#ctor
  - System.EnterpriseServices.ServicedComponent.Activate
  - System.EnterpriseServices.ServicedComponent.CanBePooled
  - System.EnterpriseServices.ServicedComponent.Construct(System.String)
  - System.EnterpriseServices.ServicedComponent.Deactivate
  - System.EnterpriseServices.ServicedComponent.Dispose
  - System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)
  - System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)
  - System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)
  - System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)
  - System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)
  langs:
  - csharp
  name: ServicedComponent
  nameWithType: ServicedComponent
  fullName: System.EnterpriseServices.ServicedComponent
  type: Class
  summary: "表示使用 COM + 服务的所有类的基类。"
  remarks: "某些情况下，从 COM + 应用程序中运行的 ServicedComponent 派生的类可能会停止响应。 此问题是由活动死锁引起的。 在多线程应用程序由于异步清理组件引用的情况下，活动可以死锁。 若要解决此问题，请调用<xref:System.EnterpriseServices.ServicedComponent.Dispose%2A>方法完成处理的对象派生自 ServicedComponent。</xref:System.EnterpriseServices.ServicedComponent.Dispose%2A> 有关详细信息，请参阅[http://support.microsoft.com/default.aspx?scid=kb;en-us;327443](http://support.microsoft.com/default.aspx?scid=kb;en-us;327443)。      1> [!NOTE]&1;> 必须调用客户端代码`Dispose`服务以确保正确地执行操作的组件上。"
  example:
  - "The following code example demonstrates how to expose a class as a configured COM component.  \n  \n [!code-cpp[EnterpriseServices_Basic#1](~/add/codesnippet/cpp/t-system.enterpriseservi_3_1.cpp)]\n [!code-cs[EnterpriseServices_Basic#1](~/add/codesnippet/csharp/t-system.enterpriseservi_3_1.cs)]  \n  \n To deploy this class as a configured COM component, you must generate a strong key, compile the class as a library, and register the library. These three steps are accomplished by the following three commands.  \n  \n```  \nsn -k Calculator.snk  \ncsc /t:library Calculator.cs  \nregsvcs Calculator.dll  \n```"
  syntax:
    content: 'public abstract class ServicedComponent : ContextBoundObject, IDisposable, System.EnterpriseServices.IRemoteDispatch, System.EnterpriseServices.IServicedComponentInfo'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ContextBoundObject
  implements:
  - System.EnterpriseServices.IRemoteDispatch
  - System.EnterpriseServices.IServicedComponentInfo
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.#ctor
  id: '#ctor'
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: ServicedComponent()
  nameWithType: ServicedComponent.ServicedComponent()
  fullName: System.EnterpriseServices.ServicedComponent.ServicedComponent()
  type: Constructor
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "初始化的新实例<xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;></xref>类。"
  remarks: "派生的类构造函数来初始化此类型中的状态将调用此构造函数。"
  syntax:
    content: public ServicedComponent ();
    parameters: []
  overload: System.EnterpriseServices.ServicedComponent.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Activate
  id: Activate
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Activate()
  nameWithType: ServicedComponent.Activate()
  fullName: System.EnterpriseServices.ServicedComponent.Activate()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "创建或从池中分配的对象时，由基础结构调用。 重写此方法以将自定义的初始化代码添加到对象。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this method.  \n  \n [!code-cpp[EnterpriseServices_Pooling#3](~/add/codesnippet/cpp/m-system.enterpriseservi_15_1.cpp)]\n [!code-cs[EnterpriseServices_Pooling#3](~/add/codesnippet/csharp/m-system.enterpriseservi_15_1.cs)]\n [!code-vb[EnterpriseServices_Pooling#3](~/add/codesnippet/visualbasic/m-system.enterpriseservi_15_1.vb)]"
  syntax:
    content: protected virtual void Activate ();
    parameters: []
  overload: System.EnterpriseServices.ServicedComponent.Activate*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.CanBePooled
  id: CanBePooled
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: CanBePooled()
  nameWithType: ServicedComponent.CanBePooled()
  fullName: System.EnterpriseServices.ServicedComponent.CanBePooled()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "该对象放回到池之前，将由基础结构调用此方法。 重写此方法，以决定是否对象放回到到池中。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this method.  \n  \n [!code-cpp[EnterpriseServices_Pooling#5](~/add/codesnippet/cpp/m-system.enterpriseservi_19_1.cpp)]\n [!code-cs[EnterpriseServices_Pooling#5](~/add/codesnippet/csharp/m-system.enterpriseservi_19_1.cs)]\n [!code-vb[EnterpriseServices_Pooling#5](~/add/codesnippet/visualbasic/m-system.enterpriseservi_19_1.vb)]"
  syntax:
    content: protected virtual bool CanBePooled ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以建立池维护的组件;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.EnterpriseServices.ServicedComponent.CanBePooled*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Construct(System.String)
  id: Construct(System.String)
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Construct(String)
  nameWithType: ServicedComponent.Construct(String)
  fullName: System.EnterpriseServices.ServicedComponent.Construct(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "调用的构造函数，在构造函数字符串中传递后立即由基础结构调用。 重写此方法来执行构造字符串值的使用。"
  syntax:
    content: protected virtual void Construct (string s);
    parameters:
    - id: s
      type: System.String
      description: "构造字符串中。"
  overload: System.EnterpriseServices.ServicedComponent.Construct*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Deactivate
  id: Deactivate
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Deactivate()
  nameWithType: ServicedComponent.Deactivate()
  fullName: System.EnterpriseServices.ServicedComponent.Deactivate()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "对象将被停用时由基础结构调用。 重写此方法时实时 (JIT) 编译的代码或使用对象池将自定义终止代码添加到对象。"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this method.  \n  \n [!code-cpp[EnterpriseServices_Pooling#4](~/add/codesnippet/cpp/m-system.enterpriseservi_27_1.cpp)]\n [!code-cs[EnterpriseServices_Pooling#4](~/add/codesnippet/csharp/m-system.enterpriseservi_27_1.cs)]\n [!code-vb[EnterpriseServices_Pooling#4](~/add/codesnippet/visualbasic/m-system.enterpriseservi_27_1.vb)]"
  syntax:
    content: protected virtual void Deactivate ();
    parameters: []
  overload: System.EnterpriseServices.ServicedComponent.Deactivate*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Dispose
  id: Dispose
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Dispose()
  nameWithType: ServicedComponent.Dispose()
  fullName: System.EnterpriseServices.ServicedComponent.Dispose()
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "释放使用的所有资源<xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref>。"
  remarks: "确定对象，并删除关联的 COM + 上下文。       建议垃圾回收器释放对象前显式释放 COM + 对象和外部资源。 如果外部资源是不足或成本高昂，可以通过显式释放 COM + 资源，在不再需要时实现更好的性能。 由 Dispose 方法提供显式控制。       调用 Dispose 允许使用的资源<xref:System.EnterpriseServices.ServicedComponent>可以重新分配用于其他目的。</xref:System.EnterpriseServices.ServicedComponent> 有关释放的详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.EnterpriseServices.ServicedComponent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ServicedComponent.Dispose(Boolean)
  fullName: System.EnterpriseServices.ServicedComponent.Dispose(Boolean)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "释放由非托管的资源<xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共`Dispose`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.EnterpriseServices.ServicedComponent>引用。</xref:System.EnterpriseServices.ServicedComponent> 此方法调用`Dispose`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>若要仅释放非托管的资源。"
  overload: System.EnterpriseServices.ServicedComponent.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)
  id: DisposeObject(System.EnterpriseServices.ServicedComponent)
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: DisposeObject(ServicedComponent)
  nameWithType: ServicedComponent.DisposeObject(ServicedComponent)
  fullName: System.EnterpriseServices.ServicedComponent.DisposeObject(ServicedComponent)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "确定对象，并删除关联的 COM + 参考。"
  remarks: "最好使用`Dispose`设计模式，而不是 DisposeObject。"
  syntax:
    content: public static void DisposeObject (System.EnterpriseServices.ServicedComponent sc);
    parameters:
    - id: sc
      type: System.EnterpriseServices.ServicedComponent
      description: "要释放的对象。"
  overload: System.EnterpriseServices.ServicedComponent.DisposeObject*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)
  id: System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)
  isEii: true
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "确保在 COM + 上下文中， <xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref>类对象的<xref uid=&quot;langword_csharp_done&quot; name=&quot;done&quot; href=&quot;&quot;></xref>位设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>远程方法调用后。"
  remarks: "<xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A>方法不属于的已发布界面<xref:System.EnterpriseServices.ServicedComponent>类并不需要在其他位置实现。</xref:System.EnterpriseServices.ServicedComponent> </xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone%2A>"
  syntax:
    content: string IRemoteDispatch.RemoteDispatchAutoDone (string s);
    parameters:
    - id: s
      type: System.String
      description: "要添加。"
    return:
      type: System.String
      description: "一个字符串，转换从响应对象实现<xref href=&quot;System.Runtime.Remoting.Messaging.IMethodReturnMessage&quot;></xref>接口。"
  overload: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)
  id: System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)
  isEii: true
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "不能确保在 COM + 上下文中， <xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;> </xref>类对象的<xref uid=&quot;langword_csharp_done&quot; name=&quot;done&quot; href=&quot;&quot;></xref>位设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>远程方法调用后。"
  remarks: "<xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A>方法不属于的已发布界面<xref:System.EnterpriseServices.ServicedComponent>类并不需要在其他位置实现。</xref:System.EnterpriseServices.ServicedComponent> </xref:System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone%2A>"
  syntax:
    content: string IRemoteDispatch.RemoteDispatchNotAutoDone (string s);
    parameters:
    - id: s
      type: System.String
      description: "要转换为实现一个请求对象的字符串<xref href=&quot;System.Runtime.Remoting.Messaging.IMessage&quot;></xref>接口。"
    return:
      type: System.String
      description: "一个字符串，转换从响应对象实现<xref href=&quot;System.Runtime.Remoting.Messaging.IMethodReturnMessage&quot;></xref>接口。"
  overload: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)
  id: System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)
  isEii: true
  parent: System.EnterpriseServices.ServicedComponent
  langs:
  - csharp
  name: System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  nameWithType: ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  type: Method
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取有关的某些信息<xref href=&quot;System.EnterpriseServices.ServicedComponent&quot;></xref>类实例。"
  remarks: "[IServicedComponentInfo.GetComponentInfo (Int32、 String\\[\\])](assetId:///M:System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(System.Int32@,System.String[]@)?qualifyHint=False&autoUpgrade=True)方法不属于的已发布界面<xref:System.EnterpriseServices.ServicedComponent>类并不需要在其他位置实现。</xref:System.EnterpriseServices.ServicedComponent>"
  syntax:
    content: void IServicedComponentInfo.GetComponentInfo (ref int infoMask, out string[] infoArray);
    parameters:
    - id: infoMask
      type: System.Int32
      description: "位掩码其中 0x00000001 是维护的组件的进程 ID 的键、 0x00000002 是应用程序域 ID，密钥和 0x00000004 是维护的组件的远程 URI 的密钥。"
    - id: infoArray
      type: System.String[]
      description: 'A string array that may contain any or all of the following, in order: the serviced component''s process ID, the application domain ID, and the serviced component''s remote URI.'
  overload: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ContextBoundObject
  isExternal: false
  name: System.ContextBoundObject
- uid: System.EnterpriseServices.ServicedComponent.#ctor
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: ServicedComponent()
  nameWithType: ServicedComponent.ServicedComponent()
  fullName: System.EnterpriseServices.ServicedComponent.ServicedComponent()
- uid: System.EnterpriseServices.ServicedComponent.Activate
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Activate()
  nameWithType: ServicedComponent.Activate()
  fullName: System.EnterpriseServices.ServicedComponent.Activate()
- uid: System.EnterpriseServices.ServicedComponent.CanBePooled
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: CanBePooled()
  nameWithType: ServicedComponent.CanBePooled()
  fullName: System.EnterpriseServices.ServicedComponent.CanBePooled()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.EnterpriseServices.ServicedComponent.Construct(System.String)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Construct(String)
  nameWithType: ServicedComponent.Construct(String)
  fullName: System.EnterpriseServices.ServicedComponent.Construct(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EnterpriseServices.ServicedComponent.Deactivate
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Deactivate()
  nameWithType: ServicedComponent.Deactivate()
  fullName: System.EnterpriseServices.ServicedComponent.Deactivate()
- uid: System.EnterpriseServices.ServicedComponent.Dispose
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Dispose()
  nameWithType: ServicedComponent.Dispose()
  fullName: System.EnterpriseServices.ServicedComponent.Dispose()
- uid: System.EnterpriseServices.ServicedComponent.Dispose(System.Boolean)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ServicedComponent.Dispose(Boolean)
  fullName: System.EnterpriseServices.ServicedComponent.Dispose(Boolean)
- uid: System.EnterpriseServices.ServicedComponent.DisposeObject(System.EnterpriseServices.ServicedComponent)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: DisposeObject(ServicedComponent)
  nameWithType: ServicedComponent.DisposeObject(ServicedComponent)
  fullName: System.EnterpriseServices.ServicedComponent.DisposeObject(ServicedComponent)
- uid: System.EnterpriseServices.ServicedComponent
  parent: System.EnterpriseServices
  isExternal: false
  name: ServicedComponent
  nameWithType: ServicedComponent
  fullName: System.EnterpriseServices.ServicedComponent
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone(System.String)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone(String)
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone(System.String)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone(String)
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo(System.Int32@,System.String[]@)
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  nameWithType: ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
  fullName: System.EnterpriseServices.ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo(Int32,String[])
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.EnterpriseServices.ServicedComponent.#ctor*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: ServicedComponent
  nameWithType: ServicedComponent.ServicedComponent
- uid: System.EnterpriseServices.ServicedComponent.Activate*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Activate
  nameWithType: ServicedComponent.Activate
- uid: System.EnterpriseServices.ServicedComponent.CanBePooled*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: CanBePooled
  nameWithType: ServicedComponent.CanBePooled
- uid: System.EnterpriseServices.ServicedComponent.Construct*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Construct
  nameWithType: ServicedComponent.Construct
- uid: System.EnterpriseServices.ServicedComponent.Deactivate*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Deactivate
  nameWithType: ServicedComponent.Deactivate
- uid: System.EnterpriseServices.ServicedComponent.Dispose*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: Dispose
  nameWithType: ServicedComponent.Dispose
- uid: System.EnterpriseServices.ServicedComponent.DisposeObject*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: DisposeObject
  nameWithType: ServicedComponent.DisposeObject
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchAutoDone*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchAutoDone
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IRemoteDispatch#RemoteDispatchNotAutoDone*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone
  nameWithType: ServicedComponent.System.EnterpriseServices.IRemoteDispatch.RemoteDispatchNotAutoDone
- uid: System.EnterpriseServices.ServicedComponent.System#EnterpriseServices#IServicedComponentInfo#GetComponentInfo*
  parent: System.EnterpriseServices.ServicedComponent
  isExternal: false
  name: System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo
  nameWithType: ServicedComponent.System.EnterpriseServices.IServicedComponentInfo.GetComponentInfo
