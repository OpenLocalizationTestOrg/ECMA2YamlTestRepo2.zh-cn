### YamlMime:ManagedReference
items:
- uid: System.Web.Services.Protocols.SoapHeader
  id: SoapHeader
  children:
  - System.Web.Services.Protocols.SoapHeader.#ctor
  - System.Web.Services.Protocols.SoapHeader.Actor
  - System.Web.Services.Protocols.SoapHeader.DidUnderstand
  - System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand
  - System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand12
  - System.Web.Services.Protocols.SoapHeader.EncodedRelay
  - System.Web.Services.Protocols.SoapHeader.MustUnderstand
  - System.Web.Services.Protocols.SoapHeader.Relay
  - System.Web.Services.Protocols.SoapHeader.Role
  langs:
  - csharp
  name: SoapHeader
  nameWithType: SoapHeader
  fullName: System.Web.Services.Protocols.SoapHeader
  type: Class
  summary: "当在派生类中重写，则表示 SOAP 标头的内容。"
  remarks: "SOAP 标头提供了用于传递数据传入和传出 XML Web 服务方法，如果数据不与 XML Web service 方法的主要功能直接相关的方法。 例如，XML Web 服务可能包含多个 XML Web 服务方法，每个需要自定义身份验证方案。 而不是将参数添加到自定义身份验证方案中，每个 XML Web service 方法<xref:System.Web.Services.Protocols.SoapHeaderAttribute>、 参考 SoapHeader 从派生类，可以应用到每个 XML Web service 方法。</xref:System.Web.Services.Protocols.SoapHeaderAttribute> 从 SoapHeader 派生的类的实现处理的自定义身份验证方案。 这种方式，XML Web 服务方法实现特定于它的功能，并添加了使用 SOAP 标头的其他功能。       以下列表概述了与接收和处理的 SOAP 标头的基本步骤︰ 1。  创建一个派生自 SoapHeader 表示传入的 SOAP 标头的数据的类。      2.  将成员添加到实现 XML Web 服务的类或 XML Web 服务客户端代理类，在第一步中创建的类型。      3.  应用<xref:System.Web.Services.Protocols.SoapHeaderAttribute>为 XML Web service 方法或代理类中的相应方法，指定该成员在第二步中创建<xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A>属性。</xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A> </xref:System.Web.Services.Protocols.SoapHeaderAttribute>      4.  在 XML Web service 方法或 XML Web 服务客户端代码中，访问<xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A>属性来处理的 SOAP 标头中发送的数据。</xref:System.Web.Services.Protocols.SoapHeaderAttribute.MemberName%2A>"
  example:
  - "The following `MyWebService` XML Web service defines the `MyHeader` SOAP header and requires it to be sent with any calls to the `MyWebMethod` XML Web service method. Additionally, `MyWebMethod` receives any SOAP headers other than the `MyHeader` SOAP header.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: >-
      [System.Xml.Serialization.SoapType(IncludeInSchema=false)]

      [System.Xml.Serialization.XmlType(IncludeInSchema=false)]

      public abstract class SoapHeader
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.#ctor
  id: '#ctor'
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: SoapHeader()
  nameWithType: SoapHeader.SoapHeader()
  fullName: System.Web.Services.Protocols.SoapHeader.SoapHeader()
  type: Constructor
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "初始化的新实例<xref href=&quot;System.Web.Services.Protocols.SoapHeader&quot;></xref>类。"
  syntax:
    content: protected SoapHeader ();
    parameters: []
  overload: System.Web.Services.Protocols.SoapHeader.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.Actor
  id: Actor
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: Actor
  nameWithType: SoapHeader.Actor
  fullName: System.Web.Services.Protocols.SoapHeader.Actor
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取或设置的 SOAP 标头的接收方。"
  remarks: "若要设置的 SOAP 标头的接收方，设置参与者属性。 而不考虑与 XML Web 服务进行通信时使用 SOAP 协议的版本，.NET Framework 自动生成特定于 SOAP 协议的版本的 SOAP 消息。 具体而言，显示的 XML 元素和表示接收方的 XML 命名空间不同的两个版本。       XML Web 服务接收的 SOAP 标头可以获取的目标接收方通过获取任一<xref:System.Web.Services.Protocols.SoapHeader.Role%2A>或 Actor 属性。</xref:System.Web.Services.Protocols.SoapHeader.Role%2A>       为收件人`Body`元素和每个 SOAP 标头内`Header`SOAP 消息元素需要不能相同。 如果`Header`SOAP 消息中存在元素，它表示与 XML Web service 方法或中介可以发送的其他数据。 该数据，称为 SOAP 的接收方`Actor`在 1.1 版中，可以比 XML Web service 方法的 URI 不同的 URI。       有关详细信息 SOAP`actor`属性，请参阅在 http://www.w3.org/TR/SOAP/ SOAP 规范。"
  example:
  - "The following XML Web service client calls the `MyWebMethod` XML Web service method after creating a custom SOAP header of type `MyHeader` and setting the Actor property to `http://www.contoso.com/MySoapHeaderHandler`.  \n  \n [!code-cs[Classic SoapHeader.Actor Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_16_1.cs)]\n [!code-cpp[Classic SoapHeader.Actor Example#1](~/add/codesnippet/cpp/p-system.web.services.pr_16_1.cpp)]\n [!code-vb[Classic SoapHeader.Actor Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_16_1.vb)]"
  syntax:
    content: public string Actor { get; set; }
    return:
      type: System.String
      description: "SOAP 头的接收方。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Web.Services.Protocols.SoapHeader.Actor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.DidUnderstand
  id: DidUnderstand
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: DidUnderstand
  nameWithType: SoapHeader.DidUnderstand
  fullName: System.Web.Services.Protocols.SoapHeader.DidUnderstand
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取或设置一个值，该值指示 XML Web 服务方法是否正确处理的 SOAP 标头。"
  remarks: "为 XML Web 服务定义的 SOAP 标头，ASP.NET 假定 XML Web 服务方法正确处理的 SOAP 标头设置到 DidUnderstand 的初始值`true`。 为未定义的 XML Web 服务 SOAP 标头的初始值是`false`。 如果 ASP.NET 检测到 SOAP 标头设置为 DidUnderstand 与传递到 XML Web 服务方法`false`该方法返回后即<xref:System.Web.Services.Protocols.SoapHeaderException>返回调用而不是结果的 XML Web 服务客户端从 XML Web 服务方法。</xref:System.Web.Services.Protocols.SoapHeaderException>"
  example:
  - "The following `MyWebService` XML Web service defines the `MyHeader` SOAP header and requires it to be sent with any calls to the `MyWebMethod` XML Web service method. Additionally, the `MyWebMethod` receives any SOAP headers other than the `MyHeader` SOAP header. For SOAP headers that `MyWebMethod` can process, DidUnderstand is set to `true`.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public bool DidUnderstand { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果正确处理的 SOAP 标头;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.SoapHeader.DidUnderstand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand
  id: EncodedMustUnderstand
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: EncodedMustUnderstand
  nameWithType: SoapHeader.EncodedMustUnderstand
  fullName: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取或设置的值<xref uid=&quot;langword_csharp_mustUnderstand&quot; name=&quot;mustUnderstand&quot; href=&quot;&quot;></xref>的 SOAP 标头与 SOAP 协议版本 1.1 通信时的 XML 属性。"
  remarks: "不要使用此属性。 改用<xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>属性。</xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>"
  example:
  - >-
    [!code-cpp[SoapHeader_EncodedMustUnderstand#1](~/add/codesnippet/cpp/p-system.web.services.pr_37_1.cpp)]
     [!code-vb[SoapHeader_EncodedMustUnderstand#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_37_1.vb)]
     [!code-cs[SoapHeader_EncodedMustUnderstand#1](~/add/codesnippet/csharp/p-system.web.services.pr_37_1.cs)]
  syntax:
    content: public string EncodedMustUnderstand { get; set; }
    return:
      type: System.String
      description: "值<xref uid=&quot;langword_csharp_mustUnderstand&quot; name=&quot;mustUnderstand&quot; href=&quot;&quot;></xref>属性。 默认值为&quot;0&quot;。"
  overload: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: '属性设置为值:&quot;0&quot;、&quot;1&quot;、&quot;true&quot;或&quot;false&quot;。'
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand12
  id: EncodedMustUnderstand12
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: EncodedMustUnderstand12
  nameWithType: SoapHeader.EncodedMustUnderstand12
  fullName: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand12
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取或设置的值<xref uid=&quot;langword_csharp_mustUnderstand&quot; name=&quot;mustUnderstand&quot; href=&quot;&quot;></xref>的 SOAP 标头与 SOAP 协议版本 1.2 通信时的 XML 属性。"
  remarks: "不要使用此属性。 改用<xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>属性。</xref:System.Web.Services.Protocols.SoapHeader.MustUnderstand%2A>"
  syntax:
    content: public string EncodedMustUnderstand12 { get; set; }
    return:
      type: System.String
      description: "值<xref uid=&quot;langword_csharp_mustUnderstand&quot; name=&quot;mustUnderstand&quot; href=&quot;&quot;> </xref> SOAP 标头的 XML 属性。 默认值为&quot;0&quot;。"
  overload: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand12*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: '属性设置为值:&quot;0&quot;、&quot;1&quot;、&quot;true&quot;或&quot;false&quot;。'
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.EncodedRelay
  id: EncodedRelay
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: EncodedRelay
  nameWithType: SoapHeader.EncodedRelay
  fullName: System.Web.Services.Protocols.SoapHeader.EncodedRelay
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取或设置 SOAP 1.2 标头的中继属性。"
  remarks: "EncodedRelay 属性仅适用于 SOAP 1.2，并指示它转发到下游的下一个节点消息时，消息的接收方是否转发此标头。 .NET Framework 不支持 SOAP 媒介，因为此属性是序列化和反序列化但忽略。"
  syntax:
    content: public string EncodedRelay { get; set; }
    return:
      type: System.String
      description: "任一&quot;0&quot;，&quot;false&quot;、&quot;1&quot;或&quot;true&quot;。"
  overload: System.Web.Services.Protocols.SoapHeader.EncodedRelay*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.MustUnderstand
  id: MustUnderstand
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: MustUnderstand
  nameWithType: SoapHeader.MustUnderstand
  fullName: System.Web.Services.Protocols.SoapHeader.MustUnderstand
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Web.Services.Protocols.SoapHeader&quot;></xref>必须理解。"
  remarks: "When an XML Web service client adds a SOAP header to an XML Web service method call with the MustUnderstand property set to `true`, the XML Web service method must set the <xref:System.Web.Services.Protocols.SoapHeader.DidUnderstand%2A> property to `true`; otherwise, a <xref:System.Web.Services.Protocols.SoapHeaderException> is thrown back to the XML Web service client by ASP.NET.  \n  \n Although both the <xref:System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand%2A> and MustUnderstand properties can be used to set the value of the `mustUnderstand` attribute within the SOAP header, the MustUnderstand property allows you to set the attribute using a Boolean value.  \n  \n For details on adding SOAP headers to clients, see [&#91;\\<topic://cpconusingsoapheaders>&#93;](http://msdn.microsoft.com/en-us/7bd961f2-b492-48d0-bafe-09d5d5fec3ba)."
  example:
  - "The following XML Web service client defines a custom SOAP header of type `MyHeader`, sets the MustUnderstand property to `true`, and invokes the `MyWebMethod` XML Web service method. If the XML Web service method does not set the <xref:System.Web.Services.Protocols.SoapHeader.DidUnderstand%2A> property of the `MyHeader` SOAP header to `true`, a <xref:System.Web.Services.Protocols.SoapHeaderException> is thrown.  \n  \n [!code-cs[Classic SoapHeader.MustUnderstand Example#1](~/add/codesnippet/csharp/p-system.web.services.pr_18_1.cs)]\n [!code-vb[Classic SoapHeader.MustUnderstand Example#1](~/add/codesnippet/visualbasic/p-system.web.services.pr_18_1.vb)]\n [!code-cpp[Classic SoapHeader.MustUnderstand Example#1](~/add/codesnippet/cpp/p-system.web.services.pr_18_1.cpp)]"
  syntax:
    content: public bool MustUnderstand { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 XML Web 服务必须正确解释和处理<xref href=&quot;System.Web.Services.Protocols.SoapHeader&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.SoapHeader.MustUnderstand*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.Relay
  id: Relay
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: Relay
  nameWithType: SoapHeader.Relay
  fullName: System.Web.Services.Protocols.SoapHeader.Relay
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取或设置一个值，该值指示是否要中继到下一个 SOAP 节点中，如果当前节点无法理解标头的 SOAP 标头。"
  remarks: "默认 SOAP 1.2 处理规则需要 SOAP 节点进行删除然后再将传递到下一个节点的消息的 SOAP 处理节点不理解的标头。"
  syntax:
    content: public bool Relay { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 SOAP 标头中包含&quot;中继&quot;属性设置为&quot;true&quot;;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Services.Protocols.SoapHeader.Relay*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Services.Protocols.SoapHeader.Role
  id: Role
  parent: System.Web.Services.Protocols.SoapHeader
  langs:
  - csharp
  name: Role
  nameWithType: SoapHeader.Role
  fullName: System.Web.Services.Protocols.SoapHeader.Role
  type: Property
  assemblies:
  - System.Web.Services
  namespace: System.Web.Services.Protocols
  summary: "获取或设置的 SOAP 标头的接收方。"
  remarks: "若要设置的 SOAP 标头的接收方，设置<xref:System.Web.Services.Protocols.SoapHeader.Actor%2A>属性。</xref:System.Web.Services.Protocols.SoapHeader.Actor%2A> 而不考虑与 XML Web 服务进行通信时使用 SOAP 协议的版本，.NET Framework 自动生成特定于 SOAP 协议的版本的 SOAP 消息。 具体而言，显示的 XML 元素和表示接收方的 XML 命名空间不同的两个版本。       XML Web 服务接收的 SOAP 标头可以获取的目标接收方通过获取任一角色或<xref:System.Web.Services.Protocols.SoapHeader.Actor%2A>属性。</xref:System.Web.Services.Protocols.SoapHeader.Actor%2A>       为收件人`Body`元素和每个 SOAP 标头内`Header`SOAP 消息元素需要不能相同。 如果`Header`SOAP 消息中存在元素，它表示与 XML Web service 方法或中介可以发送的其他数据。 该数据，称为 SOAP 的接收方`Role`版本的 SOAP 规范和 SOAP 1.2 中`Actor`在 1.1 版中，可以比 XML Web service 方法的 URI 不同的 URI。       有关详细信息 SOAP`actor`属性，请参阅在 http://www.w3.org/TR/SOAP/ SOAP 规范。"
  syntax:
    content: public string Role { get; set; }
    return:
      type: System.String
      description: "一个 URI，表示 SOAP 标头的接收方。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Web.Services.Protocols.SoapHeader.Role*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Services.Protocols.SoapHeader.#ctor
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: SoapHeader()
  nameWithType: SoapHeader.SoapHeader()
  fullName: System.Web.Services.Protocols.SoapHeader.SoapHeader()
- uid: System.Web.Services.Protocols.SoapHeader.Actor
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: Actor
  nameWithType: SoapHeader.Actor
  fullName: System.Web.Services.Protocols.SoapHeader.Actor
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Services.Protocols.SoapHeader.DidUnderstand
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: DidUnderstand
  nameWithType: SoapHeader.DidUnderstand
  fullName: System.Web.Services.Protocols.SoapHeader.DidUnderstand
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: EncodedMustUnderstand
  nameWithType: SoapHeader.EncodedMustUnderstand
  fullName: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand
- uid: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand12
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: EncodedMustUnderstand12
  nameWithType: SoapHeader.EncodedMustUnderstand12
  fullName: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand12
- uid: System.Web.Services.Protocols.SoapHeader.EncodedRelay
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: EncodedRelay
  nameWithType: SoapHeader.EncodedRelay
  fullName: System.Web.Services.Protocols.SoapHeader.EncodedRelay
- uid: System.Web.Services.Protocols.SoapHeader.MustUnderstand
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: MustUnderstand
  nameWithType: SoapHeader.MustUnderstand
  fullName: System.Web.Services.Protocols.SoapHeader.MustUnderstand
- uid: System.Web.Services.Protocols.SoapHeader.Relay
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: Relay
  nameWithType: SoapHeader.Relay
  fullName: System.Web.Services.Protocols.SoapHeader.Relay
- uid: System.Web.Services.Protocols.SoapHeader.Role
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: Role
  nameWithType: SoapHeader.Role
  fullName: System.Web.Services.Protocols.SoapHeader.Role
- uid: System.Web.Services.Protocols.SoapHeader.#ctor*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: SoapHeader
  nameWithType: SoapHeader.SoapHeader
- uid: System.Web.Services.Protocols.SoapHeader.Actor*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: Actor
  nameWithType: SoapHeader.Actor
- uid: System.Web.Services.Protocols.SoapHeader.DidUnderstand*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: DidUnderstand
  nameWithType: SoapHeader.DidUnderstand
- uid: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: EncodedMustUnderstand
  nameWithType: SoapHeader.EncodedMustUnderstand
- uid: System.Web.Services.Protocols.SoapHeader.EncodedMustUnderstand12*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: EncodedMustUnderstand12
  nameWithType: SoapHeader.EncodedMustUnderstand12
- uid: System.Web.Services.Protocols.SoapHeader.EncodedRelay*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: EncodedRelay
  nameWithType: SoapHeader.EncodedRelay
- uid: System.Web.Services.Protocols.SoapHeader.MustUnderstand*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: MustUnderstand
  nameWithType: SoapHeader.MustUnderstand
- uid: System.Web.Services.Protocols.SoapHeader.Relay*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: Relay
  nameWithType: SoapHeader.Relay
- uid: System.Web.Services.Protocols.SoapHeader.Role*
  parent: System.Web.Services.Protocols.SoapHeader
  isExternal: false
  name: Role
  nameWithType: SoapHeader.Role
