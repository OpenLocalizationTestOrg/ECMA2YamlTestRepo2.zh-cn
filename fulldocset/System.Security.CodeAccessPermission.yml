### YamlMime:ManagedReference
items:
- uid: System.Security.CodeAccessPermission
  id: CodeAccessPermission
  children:
  - System.Security.CodeAccessPermission.#ctor
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Copy
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  - System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  - System.Security.CodeAccessPermission.ToXml
  - System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission
  fullName: System.Security.CodeAccessPermission
  type: Class
  summary: "定义所有代码访问权限的基础结构。"
  remarks: "代码访问权限使用堆栈审核来确保代码的所有调用方已被授予权限。 如果权限对象是`null`，对其进行处理权限对象的状态<xref:System.Security.Permissions.PermissionState?displayProperty=fullName>.</xref:System.Security.Permissions.PermissionState?displayProperty=fullName>相同       调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。       CodeAccessPermission 类的继承者必须被授予完全信任才能正常工作作为安全基础结构扩展的权限。 若要确定继承者均完全受信任，CodeAccessPermission 发出<xref:System.Security.Permissions.SecurityAction>为<xref:System.Security.Permissions.SecurityPermissionFlag>=`true`和<xref:System.Security.Permissions.SecurityPermissionFlag>= `true`。</xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityPermissionFlag> </xref:System.Security.Permissions.SecurityAction>"
  example:
  - "The following code example shows a permission derived from the CodeAccessPermission class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/csharp/t-system.security.codeac_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/cpp/t-system.security.codeac_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#1](~/add/codesnippet/visualbasic/t-system.security.codeac_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk
  inheritance:
  - System.Object
  implements:
  - System.Security.IPermission
  - System.Security.IStackWalk
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.#ctor
  id: '#ctor'
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新实例<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>类。"
  remarks: "此构造函数调用以初始化类型中的状态，每当创建派生类的实例。 尽管派生的类构造函数的构造函数声明中，您可以显式调用此构造函数，这通常没有必要;大多数编译器将自动生成对你的调用。"
  syntax:
    content: protected CodeAccessPermission ();
    parameters: []
  overload: System.Security.CodeAccessPermission.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Assert
  id: Assert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "声明调用代码可以访问受权限请求通过调用此方法的代码，即使在堆栈中的高级调用方不具备访问该资源的权限的资源。 使用断言会引起安全问题。"
  remarks: "调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。 调用断言可防止发出的超出调用此方法的代码，在调用堆栈中向上继续执行调用堆栈中下方的堆栈审核。 因此，即使调用堆栈上的高级调用方没有所需的权限来访问的资源，它们可以仍通过访问它的代码上所需的权限调用此方法。 仅当调用断言的代码，通过它断言的权限的安全检查有效断言。       Assert 调用后调用的代码返回其调用方才有效。 只有一个断言可以处于活动状态的帧。 尝试调用断言 active 断言存在帧上时导致一种<xref:System.Security.SecurityException>。</xref:System.Security.SecurityException> 调用<xref:System.Security.CodeAccessPermission.RevertAssert%2A>或<xref:System.Security.CodeAccessPermission.RevertAll%2A>删除 active Assert。</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertAssert%2A>       断言对于未授予对该权限的请求将不会成功的权限，将忽略。 但是，如果调用堆栈上较低的代码调用<xref:System.Security.CodeAccessPermission.Demand%2A>对该权限<xref:System.Security.SecurityException>堆栈审核达到尝试调用断言的代码时引发。</xref:System.Security.SecurityException> </xref:System.Security.CodeAccessPermission.Demand%2A> 这是因为调用断言的代码未被授予权限，即使它尝试断言它也是如此。      1> [!CAUTION]&1;> 调用断言免除了调用链中的所有代码必须都授予访问指定的资源的权限，因为它可以如果使用不当来打开个安全问题。 因此，它应谨慎使用。"
  syntax:
    content: public void Assert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Assert*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用代码没有<xref href=&quot;System.Security.Permissions.SecurityPermissionFlag&quot;> </xref>。       -或者-已存在用于当前帧的活动断言。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Copy
  id: Copy
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "由派生类实现时，创建并返回当前权限对象的相同副本。"
  remarks: "权限对象的副本与原始的权限对象的资源表示相同的访问权限。"
  example:
  - "The following code example shows an override of the Copy method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/csharp/m-system.security.codeac_0_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/cpp/m-system.security.codeac_0_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#2](~/add/codesnippet/visualbasic/m-system.security.codeac_0_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "当前权限对象的副本。"
  overload: System.Security.CodeAccessPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Demand
  id: Demand
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "强制<xref:System.Security.SecurityException>如果尚未授予调用堆栈中的所有高级调用方的当前实例所指定的权限，则在运行时。</xref:System.Security.SecurityException>"
  remarks: "安全库通常使用此方法以确保调用方有权访问的资源。 例如，安全类库中的文件类调用所需的需<xref:System.Security.Permissions.FileIOPermission>之前执行文件操作请求由调用方。</xref:System.Security.Permissions.FileIOPermission>       调用此方法的代码的权限不会检查;检查开始从该代码的直接调用方，并在堆栈中向上继续进行。 调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。 需要时才会成功没有<xref:System.Security.SecurityException>引发。</xref:System.Security.SecurityException>"
  syntax:
    content: public void Demand ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Demand*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用堆栈中较高调用方没有由当前实例所指定的权限。       -或-调用堆栈中较高调用方已调用<xref:System.Security.CodeAccessPermission.Deny*>对当前权限对象。</xref:System.Security.CodeAccessPermission.Deny*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Deny
  id: Deny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "防止处于调用堆栈较高位置使用调用此方法来访问当前实例所指定的资源的代码。"
  remarks: "> [!IMPORTANT]1> Deny 方法应仅用于防止意外的访问的资源完全受信任的代码。 它不应以防止故意误用资源受信任的代码。 例如，如果方法`A`发出的 Deny 权限，然后调用方法`B`，方法`B`而公开可以通过发出<xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A>替代拒绝 调用的方法是始终对堆栈中。 因此，如果方法`B`尝试访问受保护的资源，安全系统开始查找与它的权限，因为方法`B`是直接调用方，上下然后查找步程堆栈，以确认没有任何拒绝或<xref:System.Security.CodeAccessPermission.PermitOnly%2A>堆栈中下方。</xref:System.Security.CodeAccessPermission.PermitOnly%2A> 方法`B`，这尝试访问资源，可以停止堆栈审核立即使用<xref:System.Security.CodeAccessPermission.Assert%2A>方法。</xref:System.Security.CodeAccessPermission.Assert%2A> 在这种情况下，拒绝将位于堆栈上通过方法`A`永远不会发现 （调用方法）。       此方法会阻止调用堆栈中的高级调用方通过调用此方法的代码，访问受保护的资源，即使这些调用方已被授予权限来访问它。 调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。       拒绝可以限制了编程人员的责任或帮助防止出现意外的安全问题，因为它有助于防止拒绝调用从用于访问被拒绝的权限所保护的资源的方法。 如果一个方法调用拒绝对权限，并且<xref:System.Security.CodeAccessPermission.Demand%2A>到达拒绝时，该安全检查为该权限调用方的调用堆栈中较低级别调用，将会失败。</xref:System.Security.CodeAccessPermission.Demand%2A>       直到调用代码返回其调用方，则调用 Deny 才生效。 只有一个拒绝可以处于活动状态的帧。 尝试调用拒绝 active 拒绝帧上存在时导致一种<xref:System.Security.SecurityException>。</xref:System.Security.SecurityException> 调用<xref:System.Security.CodeAccessPermission.RevertDeny%2A>或<xref:System.Security.CodeAccessPermission.RevertAll%2A>删除 active 拒绝。</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertDeny%2A> 拒绝将忽略针对权限未授予对该权限的请求将不会成功。"
  syntax:
    content: public void Deny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.Deny*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "当前帧的活动拒绝已存在。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "确定是否指定<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>对象是否等于当前<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>。"
  remarks: "有关详细信息，请参阅<xref:System.Object.Equals%2A>。</xref:System.Object.Equals%2A>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>要与当前比较对象<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>对象是否等于当前<xref href=&quot;System.Security.CodeAccessPermission&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.CodeAccessPermission.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "当在派生类中重写，重新构造具有指定状态的 XML 编码的安全对象。"
  remarks: "扩展安全对象的自定义代码需要实现<xref:System.Security.CodeAccessPermission.ToXml%2A>和 FromXml 方法，以便可以对对象的安全性进行编码。</xref:System.Security.CodeAccessPermission.ToXml%2A>"
  example:
  - "The following code example shows an override of the FromXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/csharp/m-system.security.codeac_1_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/cpp/m-system.security.codeac_1_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#10](~/add/codesnippet/visualbasic/m-system.security.codeac_1_1.vb)]"
  syntax:
    content: public abstract void FromXml (System.Security.SecurityElement elem);
    parameters:
    - id: elem
      type: System.Security.SecurityElement
      description: "编码用于重新构造安全对象的 XML。"
  overload: System.Security.CodeAccessPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>elem</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> elem </code>参数不包含与当前实例相同的类型的实例的 XML 编码。       -版本数<code> elem </code>不支持参数。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.GetHashCode
  id: GetHashCode
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取的哈希代码<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>是适合在哈希算法和数据结构，如哈希表中使用的对象。"
  remarks: "相同的权限的两个实例的哈希代码可能会有所不同，因此不应使用的哈希代码来比较两个<xref:System.Security.CodeAccessPermission>对象。</xref:System.Security.CodeAccessPermission>"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的哈希代码<xref href=&quot;System.Security.CodeAccessPermission&quot;></xref>对象。"
  overload: System.Security.CodeAccessPermission.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "由派生类实现时，创建并返回是当前权限和指定的权限的交集的权限。"
  remarks: "以下两个权限的交集是描述组的二者共同描述的操作的权限。 仅通过两个原始权限的请求将通过该交集。"
  example:
  - "The following code example shows an override of the Intersect method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/csharp/m-system.security.codeac_3_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/cpp/m-system.security.codeac_3_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#5](~/add/codesnippet/visualbasic/m-system.security.codeac_3_1.vb)]"
  syntax:
    content: public abstract System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要与当前权限相交的权限。 它必须与当前权限属于同一类型。"
    return:
      type: System.Security.IPermission
      description: "表示当前权限和指定的权限的交集的一个新权限。 此新权限为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果交集为空。"
  overload: System.Security.CodeAccessPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>参数不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且不是与当前权限相同的类的实例。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "由派生类实现时，确定当前权限是否为指定权限的子集。"
  remarks: "The current permission is a subset of the specified permission if the current permission specifies a set of operations that is wholly contained by the specified permission. For example, a permission that represents access to C:\\example.txt is a subset of a permission that represents access to C:\\\\. If this method returns `true`, the current permission represents no more access to the protected resource than does the specified permission.  \n  \n The following statements are required to be `true` for all overrides of the IsSubsetOf method. *X*, *Y*, and *Z* represent custom code access permission objects that are not null references, *U* represents an unrestricted code access permission, and *N* represents an empty permission with a <xref:System.Security.Permissions.PermissionState> of <xref:System.Security.Permissions.PermissionState>.  \n  \n-   *X*.IsSubsetOf(*X*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*Y*) returns the same value as *Y*.IsSubsetOf(*X*) if and only if *X* and *Y* represent the same set of permissions.  \n  \n-   If *X*.IsSubsetOf(*Y*) and *Y*.IsSubsetOf(*Z*) both return `true`, *X*.IsSubsetOf(*Z*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*U*) returns `true`.  \n  \n-   *X*.IsSubsetOf(*N*) returns `false`.  \n  \n-   *N*.IsSubsetOf(*X*) returns `true`.  \n  \n If *X* and *Y* represent custom code access permission objects that are null references, *X*.IsSubsetOf(*Y*) returns `true`. If *Z* is also null, the compound set operation *X*.Union(*Y*).IsSubsetOf(*Z*) also returns `true` because the union of two null permissions is a null permission."
  example:
  - "The following code example shows an override of the IsSubsetOf method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/csharp/m-system.security.codeac_5_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/cpp/m-system.security.codeac_5_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#4](~/add/codesnippet/visualbasic/m-system.security.codeac_5_1.vb)]"
  syntax:
    content: public abstract bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "将要测试子集关系的权限。 此权限必须是与当前权限属于同一类型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前权限是指定权限; 的子集否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.CodeAccessPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>参数不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且不是与当前权限属于同一类型。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.PermitOnly
  id: PermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "防止处于调用堆栈较高位置使用的代码将调用此方法来访问除当前实例所指定的资源以外的所有资源。"
  remarks: "> [!IMPORTANT]1> PermitOnly 方法应仅用于防止意外的访问的资源完全受信任的代码。 它不应以防止故意误用资源受信任的代码。 例如，如果方法`A`发出针对权限 PermitOnly，然后调用方法`B`，方法`B`而公开可以通过发出<xref:System.Security.CodeAccessPermission.Assert%2A>.</xref:System.Security.CodeAccessPermission.Assert%2A>替代 PermitOnly 调用的方法是始终对堆栈中。 因此，如果方法`B`尝试访问受保护的资源，安全系统开始查找与它的权限，因为方法`B`是直接调用方，上下然后查找步程堆栈，以确认是否存在任何<xref:System.Security.CodeAccessPermission.Deny%2A>或 PermitOnly 堆栈中下方。</xref:System.Security.CodeAccessPermission.Deny%2A> 方法`B`，这尝试访问资源，可以停止堆栈审核立即使用<xref:System.Security.CodeAccessPermission.Assert%2A>方法。</xref:System.Security.CodeAccessPermission.Assert%2A> PermitOnly 方法由放置在堆栈上的这种情况下，`A`永远不会发现 （调用方法）。       PermitOnly 是类似于<xref:System.Security.CodeAccessPermission.Deny%2A>，因为同时导致堆栈审核失败时它们原本应该成功。</xref:System.Security.CodeAccessPermission.Deny%2A> 差异在于<xref:System.Security.CodeAccessPermission.Deny%2A>指定权限将导致堆栈审核失败，但 PermitOnly 指定不会导致堆栈审核失败的唯一权限。</xref:System.Security.CodeAccessPermission.Deny%2A>       调用此方法，以确保你的代码可以用于访问指定的资源。 PermitOnly 调用后调用的代码返回其调用方才有效。 只有一个 PermitOnly 可以处于活动状态的帧。 尝试调用 PermitOnly active PermitOnly 帧上存在时导致一种<xref:System.Security.SecurityException>。</xref:System.Security.SecurityException> 调用<xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>或<xref:System.Security.CodeAccessPermission.RevertAll%2A>删除 active PermitOnly。</xref:System.Security.CodeAccessPermission.RevertAll%2A> </xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A>       PermitOnly 将忽略针对权限未授予对该权限的请求将不会成功。 但是，如果在调用的低级代码堆栈更高版本调用<xref:System.Security.CodeAccessPermission.Demand%2A>对该权限<xref:System.Security.SecurityException>堆栈审核达到尝试调用 PermitOnly 代码时引发。</xref:System.Security.SecurityException> </xref:System.Security.CodeAccessPermission.Demand%2A> 这是因为调用 PermitOnly 的代码未被授予权限，即使它为该权限调用 PermitOnly 也是如此。 调用堆栈通常表示为向下增长，以便对调用堆栈中调用方法中较低的调用堆栈。"
  syntax:
    content: public void PermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.PermitOnly*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "当前帧 active PermitOnly 已存在。"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAll
  id: RevertAll
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "导致当前帧要删除且不再有效的所有以前替代。"
  remarks: "如果没有重写 (<xref:System.Security.CodeAccessPermission.Assert%2A>， <xref:System.Security.CodeAccessPermission.Deny%2A>，或<xref:System.Security.CodeAccessPermission.PermitOnly%2A>) 当前帧，<xref:System.ExecutionEngineException>引发。</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.PermitOnly%2A> </xref:System.Security.CodeAccessPermission.Deny%2A> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAll ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAll*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不再具有以前<> *1>， <> </> *1>，或<xref:System.Security.CodeAccessPermission.PermitOnly*>当前帧。</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertAssert
  id: RevertAssert
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以前所有的原因<xref:System.Security.CodeAccessPermission.Assert*>当前帧要删除且不再有效。</xref:System.Security.CodeAccessPermission.Assert*>"
  remarks: "如果没有任何<xref:System.Security.CodeAccessPermission.Assert%2A>当前帧，<xref:System.ExecutionEngineException>引发。</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Assert%2A>"
  syntax:
    content: public static void RevertAssert ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertAssert*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不再具有以前<xref:System.Security.CodeAccessPermission.Assert*>当前帧。</xref:System.Security.CodeAccessPermission.Assert*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertDeny
  id: RevertDeny
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以前所有的原因<xref:System.Security.CodeAccessPermission.Deny*>当前帧要删除且不再有效。</xref:System.Security.CodeAccessPermission.Deny*>"
  remarks: "如果没有任何<xref:System.Security.CodeAccessPermission.Deny%2A>当前帧，<xref:System.ExecutionEngineException>引发。</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.Deny%2A>"
  syntax:
    content: public static void RevertDeny ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertDeny*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不再具有以前<xref:System.Security.CodeAccessPermission.Deny*>当前帧。</xref:System.Security.CodeAccessPermission.Deny*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  id: RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "以前所有的原因<xref:System.Security.CodeAccessPermission.PermitOnly*>当前帧要删除且不再有效。</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  remarks: "如果没有任何<xref:System.Security.CodeAccessPermission.PermitOnly%2A>当前帧，<xref:System.ExecutionEngineException>引发。</xref:System.ExecutionEngineException> </xref:System.Security.CodeAccessPermission.PermitOnly%2A>"
  syntax:
    content: public static void RevertPermitOnly ();
    parameters: []
  overload: System.Security.CodeAccessPermission.RevertPermitOnly*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不再具有以前<xref:System.Security.CodeAccessPermission.PermitOnly*>当前帧。</xref:System.Security.CodeAccessPermission.PermitOnly*>"
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToString
  id: ToString
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "创建并返回当前权限对象的字符串表示。"
  remarks: "此方法可在调试时需要显示为字符串的权限。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "当前权限对象的字符串表示形式。"
  overload: System.Security.CodeAccessPermission.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.ToXml
  id: ToXml
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "当在派生类中重写，则创建安全对象及其当前状态的 XML 编码。"
  remarks: "扩展安全对象的自定义代码需要实现 ToXml 和<xref:System.Security.CodeAccessPermission.FromXml%2A>方法来使对象安全性进行编码。</xref:System.Security.CodeAccessPermission.FromXml%2A>"
  example:
  - "The following code example shows an override of the ToXml method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/csharp/m-system.security.codeac_4_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/cpp/m-system.security.codeac_4_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#11](~/add/codesnippet/visualbasic/m-system.security.codeac_4_1.vb)]"
  syntax:
    content: public abstract System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "安全对象，包括任何状态信息的 XML 编码。"
  overload: System.Security.CodeAccessPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "当在派生类中重写，创建兼具当前权限和指定的权限的权限。"
  remarks: "对联合的调用的结果是由当前权限和指定的权限表示所表示的所有操作的权限。 任何请求都会通过任一权限传递其联合。"
  example:
  - "The following code example shows an override of the Union method. This code example is part of a larger example provided for the <xref:System.Security.CodeAccessPermission> class.  \n  \n [!code-cs[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/csharp/m-system.security.codeac_2_1.cs)]\n [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/cpp/m-system.security.codeac_2_1.cpp)]\n [!code-vb[System.Security.Permissions.NameIdPermission#12](~/add/codesnippet/visualbasic/m-system.security.codeac_2_1.vb)]"
  syntax:
    content: public virtual System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "若要与当前权限合并的权限。 它必须与当前权限属于同一类型。"
    return:
      type: System.Security.IPermission
      description: "表示同时兼具当前权限和指定的权限的新权限。"
  overload: System.Security.CodeAccessPermission.Union*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The <code>other</code> parameter is not <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. 此方法仅支持在传递时此级别<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.CodeAccessPermission.#ctor
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission()
  nameWithType: CodeAccessPermission.CodeAccessPermission()
  fullName: System.Security.CodeAccessPermission.CodeAccessPermission()
- uid: System.Security.CodeAccessPermission.Assert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert()
  nameWithType: CodeAccessPermission.Assert()
  fullName: System.Security.CodeAccessPermission.Assert()
- uid: System.Security.CodeAccessPermission.Copy
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy()
  nameWithType: CodeAccessPermission.Copy()
  fullName: System.Security.CodeAccessPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.CodeAccessPermission.Demand
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand()
  nameWithType: CodeAccessPermission.Demand()
  fullName: System.Security.CodeAccessPermission.Demand()
- uid: System.Security.CodeAccessPermission.Deny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny()
  nameWithType: CodeAccessPermission.Deny()
  fullName: System.Security.CodeAccessPermission.Deny()
- uid: System.Security.CodeAccessPermission.Equals(System.Object)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals(Object)
  nameWithType: CodeAccessPermission.Equals(Object)
  fullName: System.Security.CodeAccessPermission.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: CodeAccessPermission.FromXml(SecurityElement)
  fullName: System.Security.CodeAccessPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.CodeAccessPermission.GetHashCode
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode()
  nameWithType: CodeAccessPermission.GetHashCode()
  fullName: System.Security.CodeAccessPermission.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: CodeAccessPermission.Intersect(IPermission)
  fullName: System.Security.CodeAccessPermission.Intersect(IPermission)
- uid: System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: CodeAccessPermission.IsSubsetOf(IPermission)
  fullName: System.Security.CodeAccessPermission.IsSubsetOf(IPermission)
- uid: System.Security.CodeAccessPermission.PermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly()
  nameWithType: CodeAccessPermission.PermitOnly()
  fullName: System.Security.CodeAccessPermission.PermitOnly()
- uid: System.Security.CodeAccessPermission.RevertAll
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll()
  nameWithType: CodeAccessPermission.RevertAll()
  fullName: System.Security.CodeAccessPermission.RevertAll()
- uid: System.Security.CodeAccessPermission.RevertAssert
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert()
  nameWithType: CodeAccessPermission.RevertAssert()
  fullName: System.Security.CodeAccessPermission.RevertAssert()
- uid: System.Security.CodeAccessPermission.RevertDeny
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny()
  nameWithType: CodeAccessPermission.RevertDeny()
  fullName: System.Security.CodeAccessPermission.RevertDeny()
- uid: System.Security.CodeAccessPermission.RevertPermitOnly
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly()
  nameWithType: CodeAccessPermission.RevertPermitOnly()
  fullName: System.Security.CodeAccessPermission.RevertPermitOnly()
- uid: System.Security.CodeAccessPermission.ToString
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString()
  nameWithType: CodeAccessPermission.ToString()
  fullName: System.Security.CodeAccessPermission.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.CodeAccessPermission.ToXml
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml()
  nameWithType: CodeAccessPermission.ToXml()
  fullName: System.Security.CodeAccessPermission.ToXml()
- uid: System.Security.CodeAccessPermission.Union(System.Security.IPermission)
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: CodeAccessPermission.Union(IPermission)
  fullName: System.Security.CodeAccessPermission.Union(IPermission)
- uid: System.Security.CodeAccessPermission.#ctor*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: CodeAccessPermission
  nameWithType: CodeAccessPermission.CodeAccessPermission
- uid: System.Security.CodeAccessPermission.Assert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Assert
  nameWithType: CodeAccessPermission.Assert
- uid: System.Security.CodeAccessPermission.Copy*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Copy
  nameWithType: CodeAccessPermission.Copy
- uid: System.Security.CodeAccessPermission.Demand*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Demand
  nameWithType: CodeAccessPermission.Demand
- uid: System.Security.CodeAccessPermission.Deny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Deny
  nameWithType: CodeAccessPermission.Deny
- uid: System.Security.CodeAccessPermission.Equals*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Equals
  nameWithType: CodeAccessPermission.Equals
- uid: System.Security.CodeAccessPermission.FromXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: FromXml
  nameWithType: CodeAccessPermission.FromXml
- uid: System.Security.CodeAccessPermission.GetHashCode*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: GetHashCode
  nameWithType: CodeAccessPermission.GetHashCode
- uid: System.Security.CodeAccessPermission.Intersect*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Intersect
  nameWithType: CodeAccessPermission.Intersect
- uid: System.Security.CodeAccessPermission.IsSubsetOf*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: CodeAccessPermission.IsSubsetOf
- uid: System.Security.CodeAccessPermission.PermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: PermitOnly
  nameWithType: CodeAccessPermission.PermitOnly
- uid: System.Security.CodeAccessPermission.RevertAll*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAll
  nameWithType: CodeAccessPermission.RevertAll
- uid: System.Security.CodeAccessPermission.RevertAssert*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertAssert
  nameWithType: CodeAccessPermission.RevertAssert
- uid: System.Security.CodeAccessPermission.RevertDeny*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertDeny
  nameWithType: CodeAccessPermission.RevertDeny
- uid: System.Security.CodeAccessPermission.RevertPermitOnly*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: RevertPermitOnly
  nameWithType: CodeAccessPermission.RevertPermitOnly
- uid: System.Security.CodeAccessPermission.ToString*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToString
  nameWithType: CodeAccessPermission.ToString
- uid: System.Security.CodeAccessPermission.ToXml*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: ToXml
  nameWithType: CodeAccessPermission.ToXml
- uid: System.Security.CodeAccessPermission.Union*
  parent: System.Security.CodeAccessPermission
  isExternal: false
  name: Union
  nameWithType: CodeAccessPermission.Union
