### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.DragEventArgs
  id: DragEventArgs
  children:
  - System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  - System.Windows.Forms.DragEventArgs.AllowedEffect
  - System.Windows.Forms.DragEventArgs.Data
  - System.Windows.Forms.DragEventArgs.Effect
  - System.Windows.Forms.DragEventArgs.KeyState
  - System.Windows.Forms.DragEventArgs.X
  - System.Windows.Forms.DragEventArgs.Y
  langs:
  - csharp
  name: DragEventArgs
  nameWithType: DragEventArgs
  fullName: System.Windows.Forms.DragEventArgs
  type: Class
  summary: "提供有关数据<xref href=&quot;System.Windows.Forms.Control.DragDrop&quot;> </xref>， <xref href=&quot;System.Windows.Forms.Control.DragEnter&quot;> </xref>，或<xref href=&quot;System.Windows.Forms.Control.DragOver&quot;></xref>事件。"
  remarks: "<xref:System.Windows.Forms.Control.DragDrop>用户通过将对象拖到控件，然后将它拖到控件放释放鼠标按钮来完成拖放操作时发生事件。</xref:System.Windows.Forms.Control.DragDrop> <xref:System.Windows.Forms.Control.DragEnter>当用户移动鼠标指针拖动到控件上的拖动鼠标的对象时，将发生事件。</xref:System.Windows.Forms.Control.DragEnter> <xref:System.Windows.Forms.Control.DragOver>当用户移动鼠标指针在控件上拖动鼠标的对象时，将发生事件。</xref:System.Windows.Forms.Control.DragOver>       为 DragEventArgs 对象指定与此事件; 关联的任何数据SHIFT、 CTRL 和 ALT 键; 当前状态鼠标指针中; 的位置和允许的源和目标的拖动事件的拖放效果。       有关事件模型的信息，请参阅[事件](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the DragEventArgs class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/t-system.windows.forms.d_17_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/t-system.windows.forms.d_17_1.cs)]  \n  \n The following example illustrates how DragEventArgs are passed between the source and target of a drag-and-drop operation. In this example, a <xref:System.Windows.Forms.ListBox> control is the source of the data, and the <xref:System.Windows.Forms.RichTextBox> control is the target. The example assumes that the <xref:System.Windows.Forms.ListBox> control has been populated with a list of valid filenames. When the user drags one of the displayed filenames from the <xref:System.Windows.Forms.ListBox> control onto the <xref:System.Windows.Forms.RichTextBox> control, the file referenced in the filename is opened.  \n  \n The operation is initiated in the <xref:System.Windows.Forms.ListBox> control's MouseDown event. In the <xref:System.Windows.Forms.RichTextBox.DragEnter> event handler, the example uses the <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> method to verify that the data is in a format that the <xref:System.Windows.Forms.RichTextBox> control can display and then sets the <xref:System.Windows.Forms.DragDropEffects> property to specify that data should be copied from the source control to the target control. Finally, the <xref:System.Windows.Forms.RichTextBox> control's DragDrop event handler uses the <xref:System.Windows.Forms.IDataObject.GetData%2A> method to retrieve the filename to open.  \n  \n [!code-cs[RichTextDragDrop#1](~/add/codesnippet/csharp/t-system.windows.forms.d_17_2.cs)]\n [!code-vb[RichTextDragDrop#1](~/add/codesnippet/visualbasic/t-system.windows.forms.d_17_2.vb)]\n [!code-cpp[RichTextDragDrop#1](~/add/codesnippet/cpp/t-system.windows.forms.d_17_2.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class DragEventArgs : EventArgs
  inheritance:
  - System.EventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  id: '#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)'
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的新实例<xref href=&quot;System.Windows.Forms.DragEventArgs&quot;></xref>类。"
  syntax:
    content: public DragEventArgs (System.Windows.Forms.IDataObject data, int keyState, int x, int y, System.Windows.Forms.DragDropEffects allowedEffect, System.Windows.Forms.DragDropEffects effect);
    parameters:
    - id: data
      type: System.Windows.Forms.IDataObject
      description: "与此事件关联的数据。"
    - id: keyState
      type: System.Int32
      description: "SHIFT、 CTRL 和 ALT 键的当前状态。"
    - id: x
      type: System.Int32
      description: "以像素为单位的鼠标光标的 x 坐标。"
    - id: y
      type: System.Int32
      description: "以像素为单位的鼠标光标的 y 坐标。"
    - id: allowedEffect
      type: System.Windows.Forms.DragDropEffects
      description: "之一<xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref>值。"
    - id: effect
      type: System.Windows.Forms.DragDropEffects
      description: "之一<xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref>值。"
  overload: System.Windows.Forms.DragEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect
  id: AllowedEffect
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取的拖放操作所允许的拖动事件的发起方 （或源）。"
  remarks: "控件通过调用启动拖放操作的时<xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName>方法，它指定可允许该操作的效果。</xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=fullName> 例如，当您将文件从一个源，如果该文件是只读的 （或者从只读存储媒体如 CD），源将指示可以复制，但不是传输到目标文件。       然后再尝试对拖动的数据执行操作，你应该检查此属性以确保允许此操作。"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_303_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_303_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_303_1.cs)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects AllowedEffect { get; }
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "之一<xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref>值。"
  overload: System.Windows.Forms.DragEventArgs.AllowedEffect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Data
  id: Data
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Data
  nameWithType: DragEventArgs.Data
  fullName: System.Windows.Forms.DragEventArgs.Data
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.IDataObject&quot;> </xref> ，其中包含与此事件关联的数据。"
  remarks: "在事件处理程序的正文中，你可以使用<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>方法来确定数据是否满足将数据拖动到其上的控件的格式要求。</xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> 此外可以指定你是否想要尝试转换数据以满足你的格式要求。 如果拖动的数据满足格式要求，使用<xref:System.Windows.Forms.IDataObject.GetData%2A>方法来检索数据。</xref:System.Windows.Forms.IDataObject.GetData%2A>"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_79_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_79_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_79_1.cs)]"
  syntax:
    content: public System.Windows.Forms.IDataObject Data { get; }
    return:
      type: System.Windows.Forms.IDataObject
      description: "与此事件关联的数据。"
  overload: System.Windows.Forms.DragEventArgs.Data*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Effect
  id: Effect
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Effect
  nameWithType: DragEventArgs.Effect
  fullName: System.Windows.Forms.DragEventArgs.Effect
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置拖放操作中目标放置效果。"
  remarks: "默认情况下，应用的影响确定拖放操作的目标的鼠标光标。 这可用于向上将发生的操作的用户提供反馈。 例如，如果将文件拖动到来源时，按 CTRL 键，则指定<xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>以指示目标将尝试执行复制操作。</xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>       若要使用自定义光标进行拖动操作，请参阅<xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>.</xref:System.Windows.Forms.GiveFeedbackEventArgs.UseDefaultCursors%2A?displayProperty=fullName>"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the Effect is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_330_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_330_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_330_1.cs)]"
  syntax:
    content: public System.Windows.Forms.DragDropEffects Effect { get; set; }
    return:
      type: System.Windows.Forms.DragDropEffects
      description: "之一<xref href=&quot;System.Windows.Forms.DragDropEffects&quot;></xref>值。"
  overload: System.Windows.Forms.DragEventArgs.Effect*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.KeyState
  id: KeyState
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: KeyState
  nameWithType: DragEventArgs.KeyState
  fullName: System.Windows.Forms.DragEventArgs.KeyState
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取 SHIFT、 CTRL 和 ALT 键的当前状态以及鼠标按钮的状态。"
  remarks: "你可以依赖于特定密钥的状态的拖放操作的效果。 例如，你可能决定要复制或移动数据，具体取决于是否在拖放操作期间按住 CTRL 或 SHIFT 键。       在 KeyState 属性中设置的位标识键或在操作期间已按下鼠标按钮。 例如，如果按鼠标左键，KeyState 属性中的第一位设置。 按位 AND 运算符可用于测试给定键的状态。       下表列出为指定的事件使用的值。      |值 |密钥 |  |-----------|---------|  | 1 （位 0） |鼠标左键。 |  | 2 （位 1） |鼠标右键。 |  | 4 （位 2） |SHIFT 键。 |  | 8 （3 位） |CTRL 键。 |  | 16 （位 4） |鼠标中键。 |  | 32 （位 5） |ALT 键。 |"
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_339_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_339_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_339_1.cs)]"
  syntax:
    content: public int KeyState { get; }
    return:
      type: System.Int32
      description: "SHIFT、 CTRL 和 ALT 键以及鼠标按钮的当前状态。"
  overload: System.Windows.Forms.DragEventArgs.KeyState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.X
  id: X
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: X
  nameWithType: DragEventArgs.X
  fullName: System.Windows.Forms.DragEventArgs.X
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "在屏幕坐标中获取鼠标指针的 x 坐标。"
  remarks: ''
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_210_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_210_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_210_1.cs)]"
  syntax:
    content: public int X { get; }
    return:
      type: System.Int32
      description: "鼠标指针以像素为单位的 x 坐标。"
  overload: System.Windows.Forms.DragEventArgs.X*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.DragEventArgs.Y
  id: Y
  parent: System.Windows.Forms.DragEventArgs
  langs:
  - csharp
  name: Y
  nameWithType: DragEventArgs.Y
  fullName: System.Windows.Forms.DragEventArgs.Y
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "在屏幕坐标中获取鼠标指针的 y 坐标。"
  remarks: ''
  example:
  - "The following example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls. The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts. The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=fullName> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event. The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.  \n  \n The example also demonstrates using custom cursors for the drag-and-drop operation. The example assumes that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively. The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked. The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.  \n  \n The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based upon state of the SHIFT, CTRL, ALT, or CTRL+ALT keys. The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event. If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=fullName> is set to <xref:System.Windows.Forms.DragDropEffects?displayProperty=fullName>. Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.  \n  \n The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`. If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.  \n  \n This code excerpt demonstrates using the <xref:System.Windows.Forms.DragEventArgs> class. See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.  \n  \n [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/cpp/p-system.windows.forms.d_56_1.cpp)]\n [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/visualbasic/p-system.windows.forms.d_56_1.vb)]\n [!code-cs[System.Windows.Forms.Control.DoDragDrop#4](~/add/codesnippet/csharp/p-system.windows.forms.d_56_1.cs)]"
  syntax:
    content: public int Y { get; }
    return:
      type: System.Int32
      description: "鼠标指针以像素为单位的 y 坐标。"
  overload: System.Windows.Forms.DragEventArgs.Y*
  exceptions: []
  platform:
  - net462
references:
- uid: System.EventArgs
  isExternal: false
  name: System.EventArgs
- uid: System.Windows.Forms.DragEventArgs.#ctor(System.Windows.Forms.IDataObject,System.Int32,System.Int32,System.Int32,System.Windows.Forms.DragDropEffects,System.Windows.Forms.DragDropEffects)
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  nameWithType: DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
  fullName: System.Windows.Forms.DragEventArgs.DragEventArgs(IDataObject,Int32,Int32,Int32,DragDropEffects,DragDropEffects)
- uid: System.Windows.Forms.IDataObject
  parent: System.Windows.Forms
  isExternal: false
  name: IDataObject
  nameWithType: IDataObject
  fullName: System.Windows.Forms.IDataObject
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.DragDropEffects
  parent: System.Windows.Forms
  isExternal: false
  name: DragDropEffects
  nameWithType: DragDropEffects
  fullName: System.Windows.Forms.DragDropEffects
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
  fullName: System.Windows.Forms.DragEventArgs.AllowedEffect
- uid: System.Windows.Forms.DragEventArgs.Data
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Data
  nameWithType: DragEventArgs.Data
  fullName: System.Windows.Forms.DragEventArgs.Data
- uid: System.Windows.Forms.DragEventArgs.Effect
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Effect
  nameWithType: DragEventArgs.Effect
  fullName: System.Windows.Forms.DragEventArgs.Effect
- uid: System.Windows.Forms.DragEventArgs.KeyState
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: KeyState
  nameWithType: DragEventArgs.KeyState
  fullName: System.Windows.Forms.DragEventArgs.KeyState
- uid: System.Windows.Forms.DragEventArgs.X
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: X
  nameWithType: DragEventArgs.X
  fullName: System.Windows.Forms.DragEventArgs.X
- uid: System.Windows.Forms.DragEventArgs.Y
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Y
  nameWithType: DragEventArgs.Y
  fullName: System.Windows.Forms.DragEventArgs.Y
- uid: System.Windows.Forms.DragEventArgs.#ctor*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: DragEventArgs
  nameWithType: DragEventArgs.DragEventArgs
- uid: System.Windows.Forms.DragEventArgs.AllowedEffect*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: AllowedEffect
  nameWithType: DragEventArgs.AllowedEffect
- uid: System.Windows.Forms.DragEventArgs.Data*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Data
  nameWithType: DragEventArgs.Data
- uid: System.Windows.Forms.DragEventArgs.Effect*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Effect
  nameWithType: DragEventArgs.Effect
- uid: System.Windows.Forms.DragEventArgs.KeyState*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: KeyState
  nameWithType: DragEventArgs.KeyState
- uid: System.Windows.Forms.DragEventArgs.X*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: X
  nameWithType: DragEventArgs.X
- uid: System.Windows.Forms.DragEventArgs.Y*
  parent: System.Windows.Forms.DragEventArgs
  isExternal: false
  name: Y
  nameWithType: DragEventArgs.Y
