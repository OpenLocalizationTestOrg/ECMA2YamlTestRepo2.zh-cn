### YamlMime:ManagedReference
items:
- uid: System.Security.SecureString
  id: SecureString
  children:
  - System.Security.SecureString.#ctor
  - System.Security.SecureString.#ctor(System.Char*,System.Int32)
  - System.Security.SecureString.AppendChar(System.Char)
  - System.Security.SecureString.Clear
  - System.Security.SecureString.Copy
  - System.Security.SecureString.Dispose
  - System.Security.SecureString.InsertAt(System.Int32,System.Char)
  - System.Security.SecureString.IsReadOnly
  - System.Security.SecureString.Length
  - System.Security.SecureString.MakeReadOnly
  - System.Security.SecureString.RemoveAt(System.Int32)
  - System.Security.SecureString.SetAt(System.Int32,System.Char)
  langs:
  - csharp
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
  type: Class
  summary: "表示应保密，如通过从计算机内存不再需要时删除它的文本。 此类不能被继承。"
  remarks: "SecureString 是提供安全的度量值的字符串类型。 它将尝试以避免将敏感字符串存储在以纯文本形式的进程内存。  (有关限制，但是，请参阅[如何安全的方法是 SecureString？](#HowSecure)部分。)自动使用该实例已初始化时，由基础平台支持的机制保护 SecureString 实例的值或修改值时。 你的应用程序可以呈现实例不可变，以通过调用防止进一步修改<xref:System.Security.SecureString.MakeReadOnly%2A>方法。</xref:System.Security.SecureString.MakeReadOnly%2A>       SecureString 实例的最大长度为 65536 个字符。      1> [!IMPORTANT]&1;> 此类型实现<xref:System.IDisposable>接口。</xref:System.IDisposable> 在完成使用类型的实例后，您应释放它的中，直接或间接。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</xref:System.IDisposable.Dispose%2A> 若要间接释放类型，使用一种语言构造如`using`（在 C# 中) 或`Using`（在 Visual Basic 中)。 有关详细信息，请参阅中的&quot;使用实现 IDisposable 的对象&quot;部分<xref:System.IDisposable>接口主题。</xref:System.IDisposable>       SecureString 类和其成员都不是对 COM 可见。 有关详细信息，请参阅<xref:System.Runtime.InteropServices.ComVisibleAttribute>。</xref:System.Runtime.InteropServices.ComVisibleAttribute>       本部分中︰[字符串 vs。SecureString](#vsString)[SecureString 操作](#Ops)[SecureString 和互操作](#interop)[如何安全的方法是 SecureString？               ](#HowSecure)      <a name=&quot;vsString&quot;></a># # 字符串与 SecureString 的实例<xref:System.String?displayProperty=fullName>类既不可变，并且不再需要时，不能以编程方式计划进行垃圾回收; 也就是说，实例为只读之后创建，并且不可能预测实例从计算机内存中的删除时。</xref:System.String?displayProperty=fullName> 因为<xref:System.String?displayProperty=fullName>实例是不可变，看起来要修改现有实例的操作实际创建它来操作的副本。</xref:System.String?displayProperty=fullName> 因此，如果<xref:System.String>对象包含敏感信息，例如密码、 信用卡号或个人数据，则它使用的原因是你的应用程序无法从计算机内存中删除数据后，信息可能被泄漏的风险。</xref:System.String>       SecureString 对象都类似于<xref:System.String>对象，因为它具有一个文本值。</xref:System.String> 但是，SecureString 对象被固定在内存中，值可能会使用一种保护机制，例如提供的基础的操作系统，加密可以将已修改，直到你的应用程序将其标记为只读的和可以从计算机内存中删除通过应用程序调用<xref:System.Security.SecureString.Dispose%2A>方法或.NET Framework 垃圾回收器。</xref:System.Security.SecureString.Dispose%2A>       有关限制的 SecureString 类的讨论，请参阅[如何安全的方法是 SecureString？](#HowSecure)部分。       [返回页首](#top)<a name=&quot;Ops&quot;> </a> # # SecureString operations SecureString 类包括的成员，您可以执行以下操作︰ 实例化 SecureString 对象通过调用其无参数构造函数实例化 SecureString 对象。             添加字符到 SecureString 对象你可以添加单个字符一次到 SecureString 对象通过调用其<xref:System.Security.SecureString.AppendChar%2A>或<xref:System.Security.SecureString.InsertAt%2A>方法。</xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      1> [!IMPORTANT]&1;> SecureString 对象将不会构造从一种<xref:System.String>，这是因为敏感数据已受到内存持久性后果的不可变的<xref:System.String>类。</xref:System.String> </xref:System.String> 构造一个 SecureString 对象的最佳方式时字符在时间的非托管源，如<xref:System.Console.ReadKey%2A?displayProperty=fullName>方法。</xref:System.Console.ReadKey%2A?displayProperty=fullName>       删除字符从 SecureString 对象可以通过调用来替换单个字符<xref:System.Security.SecureString.SetAt%2A>方法，通过调用中删除单个字符<xref:System.Security.SecureString.RemoveAt%2A>方法或删除从 SecureString 的所有字符都实例通过调用<xref:System.Security.SecureString.Clear%2A>方法。</xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.SetAt%2A>       请将 SecureString 对象为只读一旦定义 SecureString 对象表示的字符串，调用其<xref:System.Security.SecureString.MakeReadOnly%2A>方法，以使字符串，只读的。</xref:System.Security.SecureString.MakeReadOnly%2A>       获取有关 SecureString 对象 SecureString 类的信息已提供有关字符串的信息的仅有两个成员︰ 其<xref:System.Security.SecureString.Length%2A>属性，它指示的字符串; 中的 UTF16 编码的代码单位数和<xref:System.Security.SecureString.IsReadOnly%2A>，方法，该值指示实例是否为只读的。</xref:System.Security.SecureString.IsReadOnly%2A> </xref:System.Security.SecureString.Length%2A>       释放到因为 SecureString 实现 SecureString 实例分配的内存<xref:System.IDisposable>接口，通过调用释放其内存<xref:System.Security.SecureString.Dispose%2A>方法。</xref:System.Security.SecureString.Dispose%2A> </xref:System.IDisposable>       SecureString 类没有任何成员检查、 比较，或 SecureString 的值转换。 如果未指定此类成员可帮助防止意外或恶意的公开实例的值。 使用的相应成员<xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>类，如<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A>方法，来操作 SecureString 对象的值。</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> </xref:System.Runtime.InteropServices.Marshal?displayProperty=fullName>       .NET Framework 类库通常通过以下方式使用 SecureString 实例:-若要通过使用提供到进程的密码信息<xref:System.Diagnostics.ProcessStartInfo>结构，或通过调用的重载<xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName>具有类型为 SecureString 的参数的方法。</xref:System.Diagnostics.Process.Start%2A?displayProperty=fullName> </xref:System.Diagnostics.ProcessStartInfo>      -若要通过调用提供网络密码信息<xref:System.Net.NetworkCredential>类构造函数具有参数的类型为 SecureString 或通过使用<xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName>属性。</xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=fullName> </xref:System.Net.NetworkCredential>      -若要通过调用提供 SQL Server 身份验证的密码信息<xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>构造函数或检索的值的<xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName>属性。</xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=fullName> </xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=fullName>      -若要将字符串传递给非托管代码。 有关详细信息，请参阅[SecureString 和互操作](#interop)部分。       [返回页首](#top)<a name=&quot;interop&quot;> </a> # # SecureString，因为操作系统不直接支持 SecureString 互操作，你必须将转换 SecureString 对象的值为必需的字符串类型然后再将字符串传递给本机方法。        <xref:System.Runtime.InteropServices.Marshal>类具有执行此操作的五个方法:- <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>，它将转换为二进制字符串 (BSTR) 后识别由 com 使用。 SecureString 字符串值</xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal>      -<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>和<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>，这将 SecureString 字符串值复制到非托管内存中的 ANSI 字符串。</xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>      -<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>和<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>，这将 SecureString 字符串值复制到非托管内存中的 Unicode 字符串。</xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName> </xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>       上述每种方法创建非托管内存中的纯文本字符串。 它负责的开发人员可以清空并不再需要时，就会立即释放该内存。 每个字符串转换和内存分配方法有一个相应的方法来清空并释放分配的内存: |分配和转换方法 |零和免费的方法 |  |--------------------------------------|--------------------------|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName>|  |<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName>|      [Back to top](#top)      <a name=&quot;HowSecure&quot;></a>    ## How secure is SecureString?</xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=fullName></xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=fullName>    SecureString 实例时正确创建，提供一种<xref:System.String>。</xref:System.String>比的更多数据保护 字符在时间来源，创建一个字符串时<xref:System.String>而 SecureString 创建单个实例在内存中，创建多个中间。</xref:System.String>  垃圾回收的<xref:System.String>对象是不确定的。</xref:System.String> 此外，因为其内存不固定，因此垃圾回收器将制作的其他副本<xref:System.String>值时移动和压缩内存。</xref:System.String> 与此相反，已固定到 SecureString 对象分配的内存，并且可以通过调用释放该内存<xref:System.Security.SecureString.Dispose%2A>方法。</xref:System.Security.SecureString.Dispose%2A>       比数据存储在<xref:System.String>实例时，有一些重要限制如何安全 SecureString 实例是</xref:System.String>安全，虽然 SecureString 实例中存储的数据更多 其中包括︰ 平台上 Windows 操作系统，SecureString 实例的内部字符数组的内容进行加密。 但是，由于缺少 Api 或密钥管理问题，加密不是在所有平台上可用。 因此，SecureString 是可用在桌面上 (仅限 Windows)，而不是在.NET 核心。       如果 SecureString 实现能够充分利用加密，分配给实例可能会暴露在不同时间 SecureString 的纯文本的持续时间偶数:-因为 Windows 不提供在操作系统级别，.NET Framework 仍的安全字符串实现具有将安全字符串值转换为其纯文本表示形式，才能使用它。      -每当安全字符串的值修改方法如<xref:System.Security.SecureString.AppendChar%2A>或<xref:System.Security.SecureString.RemoveAt%2A>，必须解密 （即，已转换的回纯文本），并修改，然后再次加密。</xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.AppendChar%2A>      -如果互操作调用中使用的安全字符串，则它必须转换为 ANSI 字符串、 Unicode 字符串或二进制字符串 (BSTR) 中。 有关详细信息，请参阅[SecureString 和互操作](#interop)部分。       为其公开 SecureString 实例的值的时间间隔将只被缩短相比<xref:System.String>类。</xref:System.String>       与使用情况存储 SecureString 类一般来说，定义应受保护或保密的字符串值的存储机制。 但是，在.NET Framework 本身，之外没有使用情况的机制支持 SecureString。 这意味着，必须转换为可用形式 （通常明文形式），其目标，可以识别的安全字符串和解密和转换必须出现在用户空间。       总体上而言，SecureString 是比更安全<xref:System.String>因为它在限制的敏感字符串数据透露。</xref:System.String> 但是，这些字符串可能仍会暴露给任何进程或有权访问原始的内存，如主计算机、 进程转储或用户可查看交换文件上运行的恶意进程的操作。 除了使用 SecureString 保护的密码，建议的替代项是使用的不透明的句柄存储在外部进程的凭据。       [返回页首](#top)"
  example:
  - "The following example demonstrates how to use a SecureString to secure a user’s password for use as a credential to start a new process.  \n  \n [!code-vb[System.Security.SecureString.Ctor#4](~/add/codesnippet/visualbasic/t-system.security.secure_1.vb)]\n [!code-cs[System.Security.SecureString.Ctor#4](~/add/codesnippet/csharp/t-system.security.secure_1.cs)]"
  syntax:
    content: 'public sealed class SecureString : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.SecureString.#ctor
  id: '#ctor'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新实例<xref href=&quot;System.Security.SecureString&quot;></xref>类。"
  remarks: ''
  example:
  - "The following example uses the default (or parameterless) constructor to instantiate a new <xref:System.Security.SecureString> object. It then calls the <xref:System.Security.SecureString.AppendChar%2A> method to add an array of characters to it.  \n  \n [!code-cs[System.Security.SecureString.Ctor#2](~/add/codesnippet/csharp/m-system.security.secure_7_1.cs)]\n [!code-cpp[System.Security.SecureString.Ctor#2](~/add/codesnippet/cpp/m-system.security.secure_7_1.cpp)]\n [!code-vb[System.Security.SecureString.Ctor#2](~/add/codesnippet/visualbasic/m-system.security.secure_7_1.vb)]  \n  \n The following example creates a <xref:System.Security.SecureString> object from the value of a <xref:System.String> object.  \n  \n [!code-vb[System.Security.SecureString.Ctor#3](~/add/codesnippet/visualbasic/m-system.security.secure_7_2.vb)]\n [!code-cpp[System.Security.SecureString.Ctor#3](~/add/codesnippet/cpp/m-system.security.secure_7_2.cpp)]\n [!code-cs[System.Security.SecureString.Ctor#3](~/add/codesnippet/csharp/m-system.security.secure_7_2.cs)]"
  syntax:
    content: public SecureString ();
    parameters: []
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保护或取消保护此实例的值时出错。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在此平台上不支持此操作。"
  platform:
  - net462
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  id: '#ctor(System.Char*,System.Int32)'
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "初始化的新实例<xref href=&quot;System.Security.SecureString&quot;></xref>的子数组的类&lt;xref:System.Char?displayProperty=fullName&gt;对象。       此构造函数不符合 CLS。 符合 cls 的替代方法是&lt;xref:System.Security.SecureString.%23ctor?displayProperty=fullName&gt;。"
  remarks: "此构造函数初始化新<xref:System.Security.SecureString>对象中的字符数`value`指定的`length`; 然后加密实例的值。</xref:System.Security.SecureString>       在 C# 中，仅在不安全代码的上下文中定义此构造函数。"
  example:
  - "The following example instantiates a new <xref:System.Security.SecureString> object by passing its constructor a pointer to a character array.  \n  \n [!code-cpp[System.Security.SecureString.Ctor2#1](~/add/codesnippet/cpp/m-system.security.secure_3_1.cpp)]\n [!code-cs[System.Security.SecureString.Ctor2#1](~/add/codesnippet/csharp/securestringctor/ctor1.cs#1)]"
  syntax:
    content: public SecureString (char* value, int length);
    parameters:
    - id: value
      type: System.Char*
      description: "指向数组的指针&lt;xref:System.Char?displayProperty=fullName&gt;对象。"
    - id: length
      type: System.Int32
      description: "元素的数目`value`要包括在新实例。"
  overload: System.Security.SecureString.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>value</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>length</code>小于零或大于 65,536。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保护或取消保护此安全字符串的值时出错。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "在此平台上不支持此操作。"
  platform:
  - net462
- uid: System.Security.SecureString.AppendChar(System.Char)
  id: AppendChar(System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "将字符追加到当前安全字符串的末尾。"
  remarks: "如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;`c`追加; 则安全字符串的新值是重新保护。"
  example:
  - "The following example demonstrates how the AppendChar, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_6_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_6_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_1.vb)]  \n  \n The following example demonstrates how the AppendChar and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_6_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_6_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_6_2.cs)]"
  syntax:
    content: public void AppendChar (char c);
    parameters:
    - id: c
      type: System.Char
      description: "要追加到此安全字符串的字符。"
  overload: System.Security.SecureString.AppendChar*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此安全字符串是只读的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "执行此操作将使此安全字符串的长度大于 65,536 个字符。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保护或取消保护此安全字符串的值时出错。"
  platform:
  - net462
- uid: System.Security.SecureString.Clear
  id: Clear
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "删除当前安全字符串的值。"
  remarks: "计算机内存中包含此安全字符串的值为零，则此安全字符串的值的长度设置为零。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and Clear methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_5_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_5_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_5_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.SecureString.Clear*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此安全字符串是只读的。"
  platform:
  - net462
- uid: System.Security.SecureString.Copy
  id: Copy
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "创建当前安全字符串的副本。"
  remarks: "实例时，如果<xref:System.Security.SecureString>是标记为只读的该实例的副本将不是只读的。</xref:System.Security.SecureString>"
  syntax:
    content: public System.Security.SecureString Copy ();
    parameters: []
    return:
      type: System.Security.SecureString
      description: "此安全字符串的副本。"
  overload: System.Security.SecureString.Copy*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保护或取消保护此安全字符串的值时出错。"
  platform:
  - net462
- uid: System.Security.SecureString.Dispose
  id: Dispose
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "释放由当前使用的所有资源<xref href=&quot;System.Security.SecureString&quot;></xref>对象。"
  remarks: "Dispose 方法将写入到分配的内存包含此值的二进制零<xref:System.Security.SecureString>对象，然后释放分配的内存。</xref:System.Security.SecureString>       有关详细信息，请参阅[垃圾回收](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.SecureString.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  id: InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "在此安全字符串中指定的索引位置插入一个字符。"
  remarks: "索引是从零开始;此安全字符串中的第一个字符的索引位置零。       如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;`c`指定的索引位置; 插入新值是重新保护。 该 InsertAt 方法生成相同的结果<xref:System.Security.SecureString.AppendChar%2A>方法，如果将一个字符插入一个安全字符串，末尾`index`InsertAt 参数设置为此实例的长度。</xref:System.Security.SecureString.AppendChar%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, InsertAt, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_0_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_0_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_0_1.vb)]"
  syntax:
    content: public void InsertAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "索引位置参数`c`插入。"
    - id: c
      type: System.Char
      description: "要插入的字符。"
  overload: System.Security.SecureString.InsertAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此安全字符串是只读的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零，或大于此安全字符串的长度。       -或者-执行此操作将使此安全字符串的长度大于 65,536 个字符。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保护或取消保护此安全字符串的值时出错。"
  platform:
  - net462
- uid: System.Security.SecureString.IsReadOnly
  id: IsReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "指示此安全字符串标记为只读。"
  remarks: "之后的<xref:System.Security.SecureString><xref:System.Security.SecureString.MakeReadOnly%2A>方法，尝试修改的值的实例引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Security.SecureString.MakeReadOnly%2A>只读标记</xref:System.Security.SecureString>实例 使用 IsReadOnly 方法来测试是否<xref:System.Security.SecureString>为只读，然后再尝试修改它。</xref:System.Security.SecureString>"
  syntax:
    content: public bool IsReadOnly ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此安全字符串标记为只读的;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.SecureString.IsReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  platform:
  - net462
- uid: System.Security.SecureString.Length
  id: Length
  parent: System.Security.SecureString
  langs:
  - csharp
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "获取当前安全字符串中的字符数。"
  remarks: "Length 属性返回的数目<xref:System.Char>此实例中的对象，而非 Unicode 字符的数量。</xref:System.Char> Unicode 字符可能由多个<xref:System.Char>对象。</xref:System.Char>       最大长度<xref:System.Security.SecureString>实例为 65,536 个字符。</xref:System.Security.SecureString>"
  syntax:
    content: public int Length { get; }
    return:
      type: System.Int32
      description: "数&lt;xref:System.Char?displayProperty=fullName&gt;函数使用此安全字符串。"
  overload: System.Security.SecureString.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  platform:
  - net462
- uid: System.Security.SecureString.MakeReadOnly
  id: MakeReadOnly
  parent: System.Security.SecureString
  langs:
  - csharp
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "只读的请将此安全字符串的文本值。"
  remarks: "初始化的实例的文本值<xref:System.Security.SecureString>类，该类具有<xref:System.Security.SecureString.%23ctor%2A>构造函数，并修改的值与<xref:System.Security.SecureString.Clear%2A>， <xref:System.Security.SecureString.RemoveAt%2A>， <xref:System.Security.SecureString.SetAt%2A>， <xref:System.Security.SecureString.InsertAt%2A>，和<xref:System.Security.SecureString.AppendChar%2A>方法。</xref:System.Security.SecureString.AppendChar%2A> </xref:System.Security.SecureString.InsertAt%2A> </xref:System.Security.SecureString.SetAt%2A> </xref:System.Security.SecureString.RemoveAt%2A> </xref:System.Security.SecureString.Clear%2A> </xref:System.Security.SecureString.%23ctor%2A> </xref:System.Security.SecureString>       所做的最后一个修改后，使用 MakeReadOnly 方法使实例的值不可变 （只读）。 对其进行修改的任何进一步尝试值标记为只读后，将引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException>       调用 MakeReadOnly 的效果是永久因为<xref:System.Security.SecureString>类提供任何方式进行的安全字符串，然后重新可修改。</xref:System.Security.SecureString> 使用<xref:System.Security.SecureString.IsReadOnly%2A>方法来测试的实例是<xref:System.Security.SecureString>是只读的。</xref:System.Security.SecureString> </xref:System.Security.SecureString.IsReadOnly%2A>"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and <xref:System.Security.SecureString.RemoveAt%2A> methods can be used to collect the characters in a password. After the password is collected, it is made read-only.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_1_1.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_1_1.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_1_1.cs)]"
  syntax:
    content: public void MakeReadOnly ();
    parameters: []
  overload: System.Security.SecureString.MakeReadOnly*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  platform:
  - net462
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "从此安全字符串中删除位于指定的索引位置处的字符。"
  remarks: "索引是从零开始;此实例中的第一个字符的索引位置零。       如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;位于指定的索引位置处的字符被删除;然后，新值是重新保护。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, RemoveAt, <xref:System.Security.SecureString.SetAt%2A>, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_2_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_2_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_1.vb)]  \n  \n The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A> and RemoveAt methods can be used to collect the characters in a password.  \n  \n [!code-cpp[SecureString.xChar#1](~/add/codesnippet/cpp/m-system.security.secure_2_2.cpp)]\n [!code-vb[SecureString.xChar#1](~/add/codesnippet/visualbasic/m-system.security.secure_2_2.vb)]\n [!code-cs[SecureString.xChar#1](~/add/codesnippet/csharp/m-system.security.secure_2_2.cs)]"
  syntax:
    content: public void RemoveAt (int index);
    parameters:
    - id: index
      type: System.Int32
      description: "此安全字符串中字符的索引位置。"
  overload: System.Security.SecureString.RemoveAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此安全字符串是只读的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零，或者大于或等于此安全字符串的长度。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保护或取消保护此安全字符串的值时出错。"
  platform:
  - net462
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  id: SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  langs:
  - csharp
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security
  summary: "位于指定的索引位置处的现有字符替换为另一个字符。"
  remarks: "索引是从零开始;此实例中的第一个字符的索引位置零。       如果实现使用一种保护机制，如加密，如果有的话，此安全字符串的值未受保护;`c`分配给指定的索引位置; 则新值是重新保护。"
  example:
  - "The following example demonstrates how the <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, SetAt, and <xref:System.Security.SecureString.Clear%2A> methods affect the value of a <xref:System.Security.SecureString> object.  \n  \n [!code-cpp[SecureString.xAt#1](~/add/codesnippet/cpp/m-system.security.secure_4_1.cpp)]\n [!code-cs[SecureString.xAt#1](~/add/codesnippet/csharp/m-system.security.secure_4_1.cs)]\n [!code-vb[SecureString.xAt#1](~/add/codesnippet/visualbasic/m-system.security.secure_4_1.vb)]"
  syntax:
    content: public void SetAt (int index, char c);
    parameters:
    - id: index
      type: System.Int32
      description: "此安全字符串中的某个现有字符索引位置"
    - id: c
      type: System.Char
      description: "替换现有字符的字符。"
  overload: System.Security.SecureString.SetAt*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "已释放此安全字符串。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此安全字符串是只读的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零，或者大于或等于此安全字符串的长度。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "保护或取消保护此安全字符串的值时出错。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Security.SecureString.#ctor
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString()
  nameWithType: SecureString.SecureString()
  fullName: System.Security.SecureString.SecureString()
- uid: System.Security.SecureString.#ctor(System.Char*,System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString(Char*,Int32)
  nameWithType: SecureString.SecureString(Char*,Int32)
  fullName: System.Security.SecureString.SecureString(Char*,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.SecureString.AppendChar(System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar(Char)
  nameWithType: SecureString.AppendChar(Char)
  fullName: System.Security.SecureString.AppendChar(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Security.SecureString.Clear
  parent: System.Security.SecureString
  isExternal: false
  name: Clear()
  nameWithType: SecureString.Clear()
  fullName: System.Security.SecureString.Clear()
- uid: System.Security.SecureString.Copy
  parent: System.Security.SecureString
  isExternal: false
  name: Copy()
  nameWithType: SecureString.Copy()
  fullName: System.Security.SecureString.Copy()
- uid: System.Security.SecureString
  parent: System.Security
  isExternal: false
  name: SecureString
  nameWithType: SecureString
  fullName: System.Security.SecureString
- uid: System.Security.SecureString.Dispose
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose()
  nameWithType: SecureString.Dispose()
  fullName: System.Security.SecureString.Dispose()
- uid: System.Security.SecureString.InsertAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt(Int32,Char)
  nameWithType: SecureString.InsertAt(Int32,Char)
  fullName: System.Security.SecureString.InsertAt(Int32,Char)
- uid: System.Security.SecureString.IsReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly()
  nameWithType: SecureString.IsReadOnly()
  fullName: System.Security.SecureString.IsReadOnly()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.SecureString.Length
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
  fullName: System.Security.SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly()
  nameWithType: SecureString.MakeReadOnly()
  fullName: System.Security.SecureString.MakeReadOnly()
- uid: System.Security.SecureString.RemoveAt(System.Int32)
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt(Int32)
  nameWithType: SecureString.RemoveAt(Int32)
  fullName: System.Security.SecureString.RemoveAt(Int32)
- uid: System.Security.SecureString.SetAt(System.Int32,System.Char)
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt(Int32,Char)
  nameWithType: SecureString.SetAt(Int32,Char)
  fullName: System.Security.SecureString.SetAt(Int32,Char)
- uid: System.Security.SecureString.#ctor*
  parent: System.Security.SecureString
  isExternal: false
  name: SecureString
  nameWithType: SecureString.SecureString
- uid: System.Security.SecureString.AppendChar*
  parent: System.Security.SecureString
  isExternal: false
  name: AppendChar
  nameWithType: SecureString.AppendChar
- uid: System.Security.SecureString.Clear*
  parent: System.Security.SecureString
  isExternal: false
  name: Clear
  nameWithType: SecureString.Clear
- uid: System.Security.SecureString.Copy*
  parent: System.Security.SecureString
  isExternal: false
  name: Copy
  nameWithType: SecureString.Copy
- uid: System.Security.SecureString.Dispose*
  parent: System.Security.SecureString
  isExternal: false
  name: Dispose
  nameWithType: SecureString.Dispose
- uid: System.Security.SecureString.InsertAt*
  parent: System.Security.SecureString
  isExternal: false
  name: InsertAt
  nameWithType: SecureString.InsertAt
- uid: System.Security.SecureString.IsReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: IsReadOnly
  nameWithType: SecureString.IsReadOnly
- uid: System.Security.SecureString.Length*
  parent: System.Security.SecureString
  isExternal: false
  name: Length
  nameWithType: SecureString.Length
- uid: System.Security.SecureString.MakeReadOnly*
  parent: System.Security.SecureString
  isExternal: false
  name: MakeReadOnly
  nameWithType: SecureString.MakeReadOnly
- uid: System.Security.SecureString.RemoveAt*
  parent: System.Security.SecureString
  isExternal: false
  name: RemoveAt
  nameWithType: SecureString.RemoveAt
- uid: System.Security.SecureString.SetAt*
  parent: System.Security.SecureString
  isExternal: false
  name: SetAt
  nameWithType: SecureString.SetAt
