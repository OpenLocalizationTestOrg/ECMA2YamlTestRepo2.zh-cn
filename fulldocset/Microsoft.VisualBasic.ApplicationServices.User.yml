### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.ApplicationServices.User
  id: User
  children:
  - Microsoft.VisualBasic.ApplicationServices.User.#ctor
  - Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  - Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  - Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  - Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  - Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  - Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  - Microsoft.VisualBasic.ApplicationServices.User.Name
  langs:
  - csharp
  name: User
  nameWithType: User
  fullName: Microsoft.VisualBasic.ApplicationServices.User
  type: Class
  summary: "提供对有关当前用户的信息的访问。"
  remarks: "属性和方法公开的`My.User`对象提供对有关当前用户的信息的访问。 Windows 和 Web 应用程序之间，&quot;当前用户&quot;的含义略有不同。 在 Windows 应用中，当前用户是运行应用程序的用户。 在 Web 应用程序中，当前用户是访问该应用程序的用户。       `My.User`属性还提供对访问<xref:System.Security.Principal.IPrincipal>为当前用户。</xref:System.Security.Principal.IPrincipal> 主体对象表示用户的安全上下文，包括该用户的标识和用户属于任何角色。       对于 Windows 应用程序，此属性提供相同的功能<xref:System.Threading.Thread.CurrentPrincipal%2A>属性。</xref:System.Threading.Thread.CurrentPrincipal%2A> 对于 Web 应用程序，此属性提供相同的功能<xref:System.Web.HttpContext.User%2A>属性返回的对象<xref:System.Web.HttpContext.Current%2A>属性。</xref:System.Web.HttpContext.Current%2A> </xref:System.Web.HttpContext.User%2A>      1> [!NOTE]&1;> for Windows 应用程序，只有基础上构建的项目**Windows 应用程序**模板初始化`My.User`默认情况下的对象。 在所有其他 Windows 项目类型中，你必须初始化`My.User`对象通过调用<xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>方法显式或分配到<xref:System.Threading.Thread.CurrentPrincipal%2A>。</xref:System.Threading.Thread.CurrentPrincipal%2A>值</xref:Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser%2A>      1> [!NOTE] 1>`My.User`对象无法报告有关当前 Windows 用户在 Windows 95 和 Windows 98 下时运行，因为这些操作系统不支持登录的用户的概念的信息。 必须实现自定义身份验证用于`My.User`这些操作系统上的对象。"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse the `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public class User
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: User()
  nameWithType: User.User()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.User()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "初始化的新实例<xref href=&quot;Microsoft.VisualBasic.ApplicationServices.User&quot;></xref>类。"
  remarks: "属性和方法公开的`My.User`对象提供对有关当前用户的信息的访问。"
  syntax:
    content: public User ();
    parameters: []
  overload: Microsoft.VisualBasic.ApplicationServices.User.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  id: CurrentPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取或设置当前负责人 （对基于角色的安全性）。"
  remarks: "你可以设置`My.User.CurrentPrincipal`实现的对象属性<xref:System.Security.Principal.IPrincipal>界面，以启用自定义身份验证。</xref:System.Security.Principal.IPrincipal>       在大多数项目类型中，此属性获取和设置线程的当前负责人。 在 ASP.NET 应用程序，此属性会获取和设置当前 HTTP 请求的用户标识的安全信息。       这是一个高级的成员;除非你单击不显示在 IntelliSense 中**所有**选项卡。      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |**Yes**|  |Windows 服务 |**Yes**|  |网站 |**Yes**|"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public System.Security.Principal.IPrincipal CurrentPrincipal { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "A<xref:System.Security.Principal.IPrincipal>表示安全上下文的值。</xref:System.Security.Principal.IPrincipal>"
  overload: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有设置主体所需的权限。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  id: InitializeWithWindowsUser
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: InitializeWithWindowsUser()
  nameWithType: User.InitializeWithWindowsUser()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser()
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "向 Windows 用户启动了应用程序中设置线程的当前负责人。"
  remarks: "你可以使用`My.User.InitializeWithWindowsUser`方法以向 Windows 用户启动了应用程序中设置线程的当前负责人。 Windows 应用程序中的 Visual Basic 应用程序模型默认情况下，在启动时调用此方法。 在其他项目类型，你必须设置线程的当前主体，通过显式调用此方法或分配到<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>。</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>值       在 Windows 项目中，`My.User`对象基于线程的当前负责人; 因此，此方法可以更改的信息`My.User`返回。 ASP.NET 应用程序中`My.User`对象基于当前 HTTP 请求的用户标识，并且不受此方法。      1> [!NOTE]&1;> 的确切行为`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。</xref:Microsoft.VisualBasic.ApplicationServices.User>       这是一个高级的成员;除非你单击不显示在 IntelliSense 中**所有**选项卡。      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |**Yes**|  |Windows 服务 |**Yes**|  |网站 |**Yes**|"
  syntax:
    content: public void InitializeWithWindowsUser ();
    parameters: []
  overload: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  id: InternalPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取或设置表示当前用户的主体对象。"
  remarks: "在<xref:Microsoft.VisualBasic.ApplicationServices.User>对象中，此属性包装<xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName>属性。</xref:System.Threading.Thread.CurrentPrincipal%2A?displayProperty=fullName> </xref:Microsoft.VisualBasic.ApplicationServices.User> 重写此方法在派生类来提供不同的行为。 例如，<xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=fullName>属性重写此属性。</xref:Microsoft.VisualBasic.ApplicationServices.WebUser.InternalPrincipal%2A?displayProperty=fullName>"
  syntax:
    content: protected virtual System.Security.Principal.IPrincipal InternalPrincipal { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "<xref:System.Security.Principal.IPrincipal>对象，表示当前用户。</xref:System.Security.Principal.IPrincipal>"
  overload: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  id: IsAuthenticated
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取一个值，该值指示用户是否已经过身份验证。"
  remarks: "`My.User.IsAuthenticated`属性允许你的代码以确定当前用户已经过身份验证。      1> [!NOTE]&1;> 的确切行为`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |**Yes**|  |Windows 服务 |**Yes**|  |网站 |**Yes**|"
  example:
  - "This example verifies that the user has been authenticated before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#2](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#2)]"
  syntax:
    content: public bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果用户进行身份验证;否则为<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  id: IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsInRole(BuiltInRole)
  nameWithType: User.IsInRole(BuiltInRole)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(BuiltInRole)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "确定当前用户是否属于指定角色。"
  remarks: "`My.User.IsInRole`方法允许你的代码以确定当前用户是否指定角色的成员。       重载`My.User.IsInRole`采用字符串的方法提供轻松访问<xref:System.Security.Principal.IPrincipal.IsInRole%2A>的当前主体的方法。</xref:System.Security.Principal.IPrincipal.IsInRole%2A>       重载`My.User.IsInRole`采用的方法`BuiltInRole`枚举的行为不同，具体取决于当前的主体。 如果它是一个 Windows 用户主体 (<xref:System.Security.Principal.WindowsPrincipal>)，此函数将转换`role`为等效<xref:System.Security.Principal.WindowsBuiltInRole>枚举并返回结果调用<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> </xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Security.Principal.WindowsPrincipal> 如果当前的主体是任何其他主体，此函数将传递中的枚举值的名称`role`给该主体的<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法。</xref:System.Security.Principal.IPrincipal.IsInRole%2A>      1> [!NOTE]&1;> 的确切行为`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |**Yes**|  |Windows 服务 |**Yes**|  |网站 |**Yes**|"
  example:
  - "This example checks if the user is an administrator before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#1](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#1)]"
  syntax:
    content: public bool IsInRole (Microsoft.VisualBasic.ApplicationServices.BuiltInRole role);
    parameters:
    - id: role
      type: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
      description: "对其进行检查成员身份的 Windows 内置角色。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果当前用户是指定角色; 的成员否则为<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  id: IsInRole(System.String)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: IsInRole(String)
  nameWithType: User.IsInRole(String)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "确定当前用户是否属于指定角色。"
  remarks: "`My.User.IsInRole`方法允许你的代码以确定当前用户是否指定角色的成员。       重载`My.User.IsInRole`采用字符串的方法提供轻松访问<xref:System.Security.Principal.IPrincipal.IsInRole%2A>的当前主体的方法。</xref:System.Security.Principal.IPrincipal.IsInRole%2A>       重载`My.User.IsInRole`采用的方法`BuiltInRole`枚举的行为不同，具体取决于当前的主体。 如果它是一个 Windows 用户主体 (<xref:System.Security.Principal.WindowsPrincipal>)，此函数将转换`role`为等效<xref:System.Security.Principal.WindowsBuiltInRole>枚举并返回结果调用<xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A>.</xref:System.Security.Principal.WindowsPrincipal.IsInRole%2A> </xref:System.Security.Principal.WindowsBuiltInRole> </xref:System.Security.Principal.WindowsPrincipal> 如果当前的主体是任何其他主体，此函数将传递中的枚举值的名称`role`给该主体的<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法。</xref:System.Security.Principal.IPrincipal.IsInRole%2A>      1> [!NOTE]&1;> 的确切行为`My.User`对象取决于应用程序的类型和应用程序在其运行的操作系统。 有关详细信息，请参阅<xref:Microsoft.VisualBasic.ApplicationServices.User>类概述。</xref:Microsoft.VisualBasic.ApplicationServices.User>      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |**Yes**|  |Windows 服务 |**Yes**|  |网站 |**Yes**|"
  example:
  - "This example checks if the user is an administrator before accessing a resource.  \n  \n [!code-vb[VbVbalrMyUser#1](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#1)]"
  syntax:
    content: public bool IsInRole (string role);
    parameters:
    - id: role
      type: System.String
      description: "对其进行检查成员身份角色的名称。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果当前用户是指定角色; 的成员否则为<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name
  id: Name
  parent: Microsoft.VisualBasic.ApplicationServices.User
  langs:
  - csharp
  name: Name
  nameWithType: User.Name
  fullName: Microsoft.VisualBasic.ApplicationServices.User.Name
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.ApplicationServices
  summary: "获取当前用户的名称。"
  remarks: "You can use the `My.User` object to get information about the current user.  \n  \n The principal that authenticates the user also controls the format of the user name. By default, an application uses Windows authentication, and the user name has the format DOMAIN\\USERNAME. A custom implementation of the principal does not necessarily use the same format.  \n  \n> [!NOTE]\n>  The `My.User.Name` property returns an empty string when run under Windows 95 and Windows 98 because those operating systems do not recognize user names.  \n  \n> [!NOTE]\n>  The exact behavior of the `My.User` object depends on the type of the application and on the operating system on which the application runs. For more information, see the <xref:Microsoft.VisualBasic.ApplicationServices.User> class overview.  \n  \n## Availability by Project Type  \n  \n|||  \n|-|-|  \n|Project type|Available|  \n|Windows Application|**Yes**|  \n|Class Library|**Yes**|  \n|Console Application|**Yes**|  \n|Windows Control Library|**Yes**|  \n|Web Control Library|**Yes**|  \n|Windows Service|**Yes**|  \n|Web Site|**Yes**|"
  example:
  - "This example checks if the application is using Windows or custom authentication, and uses that information to parse the `My.User.Name` property.  \n  \n [!code-vb[VbVbalrMyUser#3](~/add/codesnippet/visualbasic/VbVbalrMyUser/Class1.vb#3)]"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;></xref>. 当前用户的名称。"
  overload: Microsoft.VisualBasic.ApplicationServices.User.Name*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: User()
  nameWithType: User.User()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.User()
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InitializeWithWindowsUser()
  nameWithType: User.InitializeWithWindowsUser()
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser()
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
  fullName: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(Microsoft.VisualBasic.ApplicationServices.BuiltInRole)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole(BuiltInRole)
  nameWithType: User.IsInRole(BuiltInRole)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(BuiltInRole)
- uid: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
  parent: Microsoft.VisualBasic.ApplicationServices
  isExternal: false
  name: BuiltInRole
  nameWithType: BuiltInRole
  fullName: Microsoft.VisualBasic.ApplicationServices.BuiltInRole
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(System.String)
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole(String)
  nameWithType: User.IsInRole(String)
  fullName: Microsoft.VisualBasic.ApplicationServices.User.IsInRole(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: Name
  nameWithType: User.Name
  fullName: Microsoft.VisualBasic.ApplicationServices.User.Name
- uid: Microsoft.VisualBasic.ApplicationServices.User.#ctor*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: User
  nameWithType: User.User
- uid: Microsoft.VisualBasic.ApplicationServices.User.CurrentPrincipal*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: CurrentPrincipal
  nameWithType: User.CurrentPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.InitializeWithWindowsUser*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InitializeWithWindowsUser
  nameWithType: User.InitializeWithWindowsUser
- uid: Microsoft.VisualBasic.ApplicationServices.User.InternalPrincipal*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: InternalPrincipal
  nameWithType: User.InternalPrincipal
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsAuthenticated*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsAuthenticated
  nameWithType: User.IsAuthenticated
- uid: Microsoft.VisualBasic.ApplicationServices.User.IsInRole*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: IsInRole
  nameWithType: User.IsInRole
- uid: Microsoft.VisualBasic.ApplicationServices.User.Name*
  parent: Microsoft.VisualBasic.ApplicationServices.User
  isExternal: false
  name: Name
  nameWithType: User.Name
