### YamlMime:ManagedReference
items:
- uid: System.Web.Compilation.AssemblyBuilder
  id: AssemblyBuilder
  children:
  - System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)
  - System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)
  - System.Web.Compilation.AssemblyBuilder.CodeDomProvider
  - System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)
  - System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(System.Web.Compilation.BuildProvider,System.String)
  - System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(System.String)
  - System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(System.String)
  langs:
  - csharp
  name: AssemblyBuilder
  nameWithType: AssemblyBuilder
  fullName: System.Web.Compilation.AssemblyBuilder
  type: Class
  summary: "提供用于生成来自 ASP.NET 项目中的一个或多个虚拟路径的程序集的容器。"
  remarks: "AssemblyBuilder 类的实例用于<xref:System.Web.Compilation.BuildProvider>类方法以生成一个或多个文件到编译的程序集。</xref:System.Web.Compilation.BuildProvider>       <xref:System.Web.Compilation.BuildProvider>类定义的单个文件，生成功能并且 AssemblyBuilder 类将合并每个提供的源代码<xref:System.Web.Compilation.BuildProvider>为单个程序集的实例。</xref:System.Web.Compilation.BuildProvider> </xref:System.Web.Compilation.BuildProvider> ASP.NET 生成环境传递到 AssemblyBuilder 对象<xref:System.Web.Compilation.BuildProvider>方法时生成程序集从一个或多个文件，因此每个<xref:System.Web.Compilation.BuildProvider>实例可以参与到总体程序集及其文件的源代码。</xref:System.Web.Compilation.BuildProvider> </xref:System.Web.Compilation.BuildProvider>       ASP.NET 生成环境确定语言和编译器在项目中，基于的文件所需的<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=fullName>属性。</xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=fullName> 生成环境组文件基于其编译器设置，并生成所需的同一编译器文件从程序集。       <xref:System.Web.Compilation.AssemblyBuilder.CodeDomProvider%2A>属性指示<xref:System.CodeDom.Compiler.CodeDomProvider>ASP.NET 生成环境使用编译的源代码的程序集的实现提供每个<xref:System.Web.Compilation.BuildProvider>实现。</xref:System.Web.Compilation.BuildProvider> </xref:System.CodeDom.Compiler.CodeDomProvider> </xref:System.Web.Compilation.AssemblyBuilder.CodeDomProvider%2A>       A<xref:System.Web.Compilation.BuildProvider>对象提供了在 CodeDOM 图中使用的窗体中的源代码<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>方法。</xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A> </xref:System.Web.Compilation.BuildProvider> A<xref:System.Web.Compilation.BuildProvider>对象提供了存储在物理文件中使用的源代码<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>方法。</xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> </xref:System.Web.Compilation.BuildProvider>       在每行后<xref:System.Web.Compilation.BuildProvider>对象提供了使用适当的 AssemblyBuilder 方法的源代码，ASP.NET 生成环境使用 AssemblyBuilder 类来收集的源代码编译为程序集。</xref:System.Web.Compilation.BuildProvider>"
  example:
  - "The following code example illustrates a simple build provider implementation, inheriting from the abstract <xref:System.Web.Compilation.BuildProvider> base class. The build provider overrides the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>, <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>, and <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> members of the base class.  \n  \n In the <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> method implementation, the build provider adds the generated code for the assembly compilation using the <xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A> method. The example does not include the implementation of the `SampleClassGenerator` class. For more information, see <xref:System.CodeDom.CodeCompileUnit>.  \n  \n [!code-cs[System.Web.Compilation_SampleBuildProvider#2](~/add/codesnippet/csharp/t-system.web.compilation_10_1.cs)]\n [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/add/codesnippet/visualbasic/t-system.web.compilation_10_1.vb)]"
  syntax:
    content: public class AssemblyBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)
  id: AddAssemblyReference(System.Reflection.Assembly)
  parent: System.Web.Compilation.AssemblyBuilder
  langs:
  - csharp
  name: AddAssemblyReference(Assembly)
  nameWithType: AssemblyBuilder.AddAssemblyReference(Assembly)
  fullName: System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(Assembly)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "添加引用的文件生成源代码的程序集。"
  remarks: "A<xref:System.Web.Compilation.BuildProvider>实现使用 AddAssemblyReference 方法时生成引用输入集内的类型的源代码。</xref:System.Web.Compilation.BuildProvider>       ASP.NET 生成环境初始化可用于通过中的生成提供程序的引用程序集的默认集合<xref:System.Web.Compilation.BuildProvider.ReferencedAssemblies%2A?displayProperty=fullName>属性。</xref:System.Web.Compilation.BuildProvider.ReferencedAssemblies%2A?displayProperty=fullName> 如果在生成提供程序生成源代码引用其他程序集，生成提供程序添加使用 AddAssemblyReference 方法的其他程序集。 ASP.NET 生成环境解析外部类型在使用添加的两个引用的程序集的程序集编译过程生成提供程序和可用于引用的程序集的默认集合。       通常情况下，<xref:System.Web.Compilation.BuildProvider>对象添加到源代码<xref:System.Web.Compilation.AssemblyBuilder>对象在<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法。</xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> </xref:System.Web.Compilation.AssemblyBuilder> </xref:System.Web.Compilation.BuildProvider> 如果生成提供程序生成使用了外部类型的源代码，在生成提供程序将添加该类型的程序集使用 AddAssemblyReference 方法。       AddAssemblyReference 方法用于添加引用的程序集中生成的源代码中所需<xref:System.Web.Compilation.BuildProvider>某一特定文件类型的实例。</xref:System.Web.Compilation.BuildProvider> 使用[编译 （ASP.NET 设置架构） 的程序集元素](http://msdn.microsoft.com/en-us/3811c448-af1c-498d-be2b-6ed2634c51e9)要跨多个文件类型的项目中配置的引用程序集的配置元素。"
  syntax:
    content: public void AddAssemblyReference (System.Reflection.Assembly a);
    parameters:
    - id: a
      type: System.Reflection.Assembly
      description: "通过包含在程序集编译的代码编译单元或源文件引用的程序集。"
  overload: System.Web.Compilation.AssemblyBuilder.AddAssemblyReference*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)
  id: AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)
  parent: System.Web.Compilation.AssemblyBuilder
  langs:
  - csharp
  name: AddCodeCompileUnit(BuildProvider,CodeCompileUnit)
  nameWithType: AssemblyBuilder.AddCodeCompileUnit(BuildProvider,CodeCompileUnit)
  fullName: System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(BuildProvider,CodeCompileUnit)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "将源代码添加在 CodeDOM 图的形式中程序集。"
  remarks: "的<xref:System.Web.Compilation.BuildProvider>实现调用 AddCodeCompileUnit 方法时生成一个虚拟路径。 在 CodeDOM 图</xref:System.Web.Compilation.BuildProvider> 添加与 AddCodeCompileUnit 的源代码包含在程序集编译。       通常情况下，生成提供程序的<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法实现会读取<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>属性，分析内容，，然后将所生成的源代码添加到指定<xref:System.Web.Compilation.AssemblyBuilder>对象。</xref:System.Web.Compilation.AssemblyBuilder> </xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> </xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 生成提供程序使用 AddCodeCompileUnit 方法将源代码作为在 CodeDOM 图添加到程序集。 或者，在生成提供程序可以使用<xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>方法将为物理文件的源代码添加到程序集。</xref:System.Web.Compilation.AssemblyBuilder.CreateCodeFile%2A>"
  syntax:
    content: public void AddCodeCompileUnit (System.Web.Compilation.BuildProvider buildProvider, System.CodeDom.CodeCompileUnit compileUnit);
    parameters:
    - id: buildProvider
      type: System.Web.Compilation.BuildProvider
      description: "生成提供程序生成`compileUnit`。"
    - id: compileUnit
      type: System.CodeDom.CodeCompileUnit
      description: "要包括在程序集编译的代码编译单元。"
  overload: System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.AssemblyBuilder.CodeDomProvider
  id: CodeDomProvider
  parent: System.Web.Compilation.AssemblyBuilder
  langs:
  - csharp
  name: CodeDomProvider
  nameWithType: AssemblyBuilder.CodeDomProvider
  fullName: System.Web.Compilation.AssemblyBuilder.CodeDomProvider
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "获取用于为程序集生成源代码编译器。"
  remarks: "CodeDomProvider 属性指示<xref:System.CodeDom.Compiler.CodeDomProvider?displayProperty=fullName>ASP.NET 生成环境使用编译的源代码的程序集的实现提供每个<xref:System.Web.Compilation.BuildProvider>实现。</xref:System.Web.Compilation.BuildProvider> </xref:System.CodeDom.Compiler.CodeDomProvider?displayProperty=fullName>       ASP.NET 生成环境确定语言和编译器在项目中，基于的文件所需的<xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=fullName>属性。</xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A?displayProperty=fullName> 生成环境组文件基于其编译器设置，并生成所需的同一编译器文件从程序集。"
  syntax:
    content: public System.CodeDom.Compiler.CodeDomProvider CodeDomProvider { get; }
    return:
      type: System.CodeDom.Compiler.CodeDomProvider
      description: "只读<xref href=&quot;System.CodeDom.Compiler.CodeDomProvider&quot;></xref>成一个程序集由每个生成提供程序提供用于编译源代码的实现。"
  overload: System.Web.Compilation.AssemblyBuilder.CodeDomProvider*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)
  id: CreateCodeFile(System.Web.Compilation.BuildProvider)
  parent: System.Web.Compilation.AssemblyBuilder
  langs:
  - csharp
  name: CreateCodeFile(BuildProvider)
  nameWithType: AssemblyBuilder.CreateCodeFile(BuildProvider)
  fullName: System.Web.Compilation.AssemblyBuilder.CreateCodeFile(BuildProvider)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "允许创建临时的源文件，并将源文件包含程序集编译中的生成提供程序。"
  remarks: "的<xref:System.Web.Compilation.BuildProvider>实现调用 CreateCodeFile 方法生成虚拟路径。 源文件时</xref:System.Web.Compilation.BuildProvider> 添加与 CreateCodeFile 的源代码包含在程序集编译。       通常情况下，生成提供程序<xref:System.Web.Compilation.BuildProvider.GenerateCode%2A>方法实现会读取<xref:System.Web.Compilation.BuildProvider.VirtualPath%2A>属性，分析内容，，然后将所生成的源代码添加到指定<xref:System.Web.Compilation.AssemblyBuilder>对象。</xref:System.Web.Compilation.AssemblyBuilder> </xref:System.Web.Compilation.BuildProvider.VirtualPath%2A> </xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> 生成提供程序使用 CreateCodeFile 方法将作为物理文件的源代码添加到程序集。 或者，在生成提供程序可以使用<xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>方法以将源代码作为在 CodeDOM 图添加到程序集。</xref:System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit%2A>       在调用 CreateCodeFile 后, 生成提供程序写入源使用返回的文件内容<xref:System.IO.TextWriter>对象。</xref:System.IO.TextWriter> 之后，写入的源文件，<xref:System.Web.Compilation.BuildProvider>对象必须使用<xref:System.IO.TextWriter.Close%2A>方法来关闭<xref:System.IO.TextWriter>对象并释放关联的系统资源。</xref:System.IO.TextWriter> </xref:System.IO.TextWriter.Close%2A> </xref:System.Web.Compilation.BuildProvider>"
  example:
  - "The following code example illustrates a simple build provider implementation, inheriting from the abstract <xref:System.Web.Compilation.BuildProvider> base class. The build provider overrides the <xref:System.Web.Compilation.BuildProvider.CodeCompilerType%2A>, <xref:System.Web.Compilation.BuildProvider.GetGeneratedType%2A>, and <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> members of the base class.  \n  \n In the <xref:System.Web.Compilation.BuildProvider.GenerateCode%2A> method implementation, the build provider adds the generated code for the assembly compilation using the CreateCodeFile method. The example does not include the implementation of the `SampleClassGenerator` class. For more information, see <xref:System.CodeDom.CodeCompileUnit>.  \n  \n [!code-cs[System.Web.Compilation_SampleBuildProvider#2](~/add/codesnippet/csharp/3ed51741-a65c-4f55-993c-_1.cs)]\n [!code-vb[System.Web.Compilation_SampleBuildProvider#2](~/add/codesnippet/visualbasic/3ed51741-a65c-4f55-993c-_1.vb)]"
  syntax:
    content: public System.IO.TextWriter CreateCodeFile (System.Web.Compilation.BuildProvider buildProvider);
    parameters:
    - id: buildProvider
      type: System.Web.Compilation.BuildProvider
      description: "生成提供程序生成代码的源文件。"
    return:
      type: System.IO.TextWriter
      description: "打开<xref:System.IO.TextWriter>可用来写入临时文件的源代码。</xref:System.IO.TextWriter>"
  overload: System.Web.Compilation.AssemblyBuilder.CreateCodeFile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(System.Web.Compilation.BuildProvider,System.String)
  id: CreateEmbeddedResource(System.Web.Compilation.BuildProvider,System.String)
  parent: System.Web.Compilation.AssemblyBuilder
  langs:
  - csharp
  name: CreateEmbeddedResource(BuildProvider,String)
  nameWithType: AssemblyBuilder.CreateEmbeddedResource(BuildProvider,String)
  fullName: System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(BuildProvider,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "允许创建要包含在程序集编译中的资源文件的生成提供程序。"
  remarks: "调用 CreateEmbeddedResource 方法后，<xref:System.Web.Compilation.BuildProvider>对象写入资源使用返回的文件内容<xref:System.IO.Stream>对象。</xref:System.IO.Stream> </xref:System.Web.Compilation.BuildProvider> 例如，在生成提供程序可以编写使用的资源<xref:System.Resources.ResourceWriter>对象。</xref:System.Resources.ResourceWriter> 写入的资源文件后, 生成提供程序必须使用<xref:System.IO.Stream.Close%2A>方法来关闭<xref:System.IO.Stream>对象并释放关联的系统资源。</xref:System.IO.Stream> </xref:System.IO.Stream.Close%2A>"
  syntax:
    content: public System.IO.Stream CreateEmbeddedResource (System.Web.Compilation.BuildProvider buildProvider, string name);
    parameters:
    - id: buildProvider
      type: System.Web.Compilation.BuildProvider
      description: "生成资源生成提供程序。"
    - id: name
      type: System.String
      description: "要创建的资源文件的名称。"
    return:
      type: System.IO.Stream
      description: "打开<xref:System.IO.Stream>可用来写入包含在程序集编译的资源。</xref:System.IO.Stream>"
  overload: System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>name</code>不是有效的文件名称。"
  platform:
  - net462
- uid: System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(System.String)
  id: GenerateTypeFactory(System.String)
  parent: System.Web.Compilation.AssemblyBuilder
  langs:
  - csharp
  name: GenerateTypeFactory(String)
  nameWithType: AssemblyBuilder.GenerateTypeFactory(String)
  fullName: System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "将快速地进行对象工厂模板类型插入到已编译的程序集。"
  remarks: "A<xref:System.Web.Compilation.BuildProvider>实现调用 GenerateTypeFactory 方法，以优化频繁创建类型实例的性能。</xref:System.Web.Compilation.BuildProvider>"
  syntax:
    content: public void GenerateTypeFactory (string typeName);
    parameters:
    - id: typeName
      type: System.String
      description: "要生成的类型名称。"
  overload: System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(System.String)
  id: GetTempFilePhysicalPath(System.String)
  parent: System.Web.Compilation.AssemblyBuilder
  langs:
  - csharp
  name: GetTempFilePhysicalPath(String)
  nameWithType: AssemblyBuilder.GetTempFilePhysicalPath(String)
  fullName: System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "生成的临时文件路径。"
  remarks: "A<xref:System.Web.Compilation.BuildProvider>实现调用 GetTempFilePhysicalPath 方法来获取程序集编译后自动删除临时文件路径。</xref:System.Web.Compilation.BuildProvider>       GetTempFilePhysicalPath 方法会生成唯一的临时文件路径，但不会创建该文件。"
  syntax:
    content: public string GetTempFilePhysicalPath (string extension);
    parameters:
    - id: extension
      type: System.String
      description: "要用于临时文件的文件扩展名。"
    return:
      type: System.String
      description: "临时文件，用指定的文件扩展名的路径。"
  overload: System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(System.Reflection.Assembly)
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: AddAssemblyReference(Assembly)
  nameWithType: AssemblyBuilder.AddAssemblyReference(Assembly)
  fullName: System.Web.Compilation.AssemblyBuilder.AddAssemblyReference(Assembly)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(System.Web.Compilation.BuildProvider,System.CodeDom.CodeCompileUnit)
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: AddCodeCompileUnit(BuildProvider,CodeCompileUnit)
  nameWithType: AssemblyBuilder.AddCodeCompileUnit(BuildProvider,CodeCompileUnit)
  fullName: System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit(BuildProvider,CodeCompileUnit)
- uid: System.Web.Compilation.BuildProvider
  parent: System.Web.Compilation
  isExternal: false
  name: BuildProvider
  nameWithType: BuildProvider
  fullName: System.Web.Compilation.BuildProvider
- uid: System.CodeDom.CodeCompileUnit
  parent: System.CodeDom
  isExternal: false
  name: CodeCompileUnit
  nameWithType: CodeCompileUnit
  fullName: System.CodeDom.CodeCompileUnit
- uid: System.Web.Compilation.AssemblyBuilder.CodeDomProvider
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: CodeDomProvider
  nameWithType: AssemblyBuilder.CodeDomProvider
  fullName: System.Web.Compilation.AssemblyBuilder.CodeDomProvider
- uid: System.CodeDom.Compiler.CodeDomProvider
  parent: System.CodeDom.Compiler
  isExternal: false
  name: CodeDomProvider
  nameWithType: CodeDomProvider
  fullName: System.CodeDom.Compiler.CodeDomProvider
- uid: System.Web.Compilation.AssemblyBuilder.CreateCodeFile(System.Web.Compilation.BuildProvider)
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: CreateCodeFile(BuildProvider)
  nameWithType: AssemblyBuilder.CreateCodeFile(BuildProvider)
  fullName: System.Web.Compilation.AssemblyBuilder.CreateCodeFile(BuildProvider)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(System.Web.Compilation.BuildProvider,System.String)
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: CreateEmbeddedResource(BuildProvider,String)
  nameWithType: AssemblyBuilder.CreateEmbeddedResource(BuildProvider,String)
  fullName: System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource(BuildProvider,String)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(System.String)
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: GenerateTypeFactory(String)
  nameWithType: AssemblyBuilder.GenerateTypeFactory(String)
  fullName: System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory(String)
- uid: System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(System.String)
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: GetTempFilePhysicalPath(String)
  nameWithType: AssemblyBuilder.GetTempFilePhysicalPath(String)
  fullName: System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath(String)
- uid: System.Web.Compilation.AssemblyBuilder.AddAssemblyReference*
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: AddAssemblyReference
  nameWithType: AssemblyBuilder.AddAssemblyReference
- uid: System.Web.Compilation.AssemblyBuilder.AddCodeCompileUnit*
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: AddCodeCompileUnit
  nameWithType: AssemblyBuilder.AddCodeCompileUnit
- uid: System.Web.Compilation.AssemblyBuilder.CodeDomProvider*
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: CodeDomProvider
  nameWithType: AssemblyBuilder.CodeDomProvider
- uid: System.Web.Compilation.AssemblyBuilder.CreateCodeFile*
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: CreateCodeFile
  nameWithType: AssemblyBuilder.CreateCodeFile
- uid: System.Web.Compilation.AssemblyBuilder.CreateEmbeddedResource*
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: CreateEmbeddedResource
  nameWithType: AssemblyBuilder.CreateEmbeddedResource
- uid: System.Web.Compilation.AssemblyBuilder.GenerateTypeFactory*
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: GenerateTypeFactory
  nameWithType: AssemblyBuilder.GenerateTypeFactory
- uid: System.Web.Compilation.AssemblyBuilder.GetTempFilePhysicalPath*
  parent: System.Web.Compilation.AssemblyBuilder
  isExternal: false
  name: GetTempFilePhysicalPath
  nameWithType: AssemblyBuilder.GetTempFilePhysicalPath
