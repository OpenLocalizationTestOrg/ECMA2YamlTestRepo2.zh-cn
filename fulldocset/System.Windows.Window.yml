### YamlMime:ManagedReference
items:
- uid: System.Windows.Window
  id: Window
  children:
  - System.Windows.Window.#ctor
  - System.Windows.Window.Activate
  - System.Windows.Window.Activated
  - System.Windows.Window.AllowsTransparency
  - System.Windows.Window.AllowsTransparencyProperty
  - System.Windows.Window.ArrangeOverride(System.Windows.Size)
  - System.Windows.Window.Close
  - System.Windows.Window.Closed
  - System.Windows.Window.Closing
  - System.Windows.Window.ContentRendered
  - System.Windows.Window.Deactivated
  - System.Windows.Window.DialogResult
  - System.Windows.Window.DpiChanged
  - System.Windows.Window.DpiChangedEvent
  - System.Windows.Window.DragMove
  - System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  - System.Windows.Window.Hide
  - System.Windows.Window.Icon
  - System.Windows.Window.IconProperty
  - System.Windows.Window.IsActive
  - System.Windows.Window.IsActiveProperty
  - System.Windows.Window.Left
  - System.Windows.Window.LeftProperty
  - System.Windows.Window.LocationChanged
  - System.Windows.Window.LogicalChildren
  - System.Windows.Window.MeasureOverride(System.Windows.Size)
  - System.Windows.Window.OnActivated(System.EventArgs)
  - System.Windows.Window.OnClosed(System.EventArgs)
  - System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  - System.Windows.Window.OnContentChanged(System.Object,System.Object)
  - System.Windows.Window.OnContentRendered(System.EventArgs)
  - System.Windows.Window.OnCreateAutomationPeer
  - System.Windows.Window.OnDeactivated(System.EventArgs)
  - System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  - System.Windows.Window.OnLocationChanged(System.EventArgs)
  - System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  - System.Windows.Window.OnSourceInitialized(System.EventArgs)
  - System.Windows.Window.OnStateChanged(System.EventArgs)
  - System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  - System.Windows.Window.OwnedWindows
  - System.Windows.Window.Owner
  - System.Windows.Window.ResizeMode
  - System.Windows.Window.ResizeModeProperty
  - System.Windows.Window.RestoreBounds
  - System.Windows.Window.Show
  - System.Windows.Window.ShowActivated
  - System.Windows.Window.ShowActivatedProperty
  - System.Windows.Window.ShowDialog
  - System.Windows.Window.ShowInTaskbar
  - System.Windows.Window.ShowInTaskbarProperty
  - System.Windows.Window.SizeToContent
  - System.Windows.Window.SizeToContentProperty
  - System.Windows.Window.SourceInitialized
  - System.Windows.Window.StateChanged
  - System.Windows.Window.TaskbarItemInfo
  - System.Windows.Window.TaskbarItemInfoProperty
  - System.Windows.Window.Title
  - System.Windows.Window.TitleProperty
  - System.Windows.Window.Top
  - System.Windows.Window.Topmost
  - System.Windows.Window.TopmostProperty
  - System.Windows.Window.TopProperty
  - System.Windows.Window.WindowStartupLocation
  - System.Windows.Window.WindowState
  - System.Windows.Window.WindowStateProperty
  - System.Windows.Window.WindowStyle
  - System.Windows.Window.WindowStyleProperty
  langs:
  - csharp
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
  type: Class
  summary: "提供创建、 配置、 显示，和管理的窗口和对话框生存期的功能。"
  remarks: "用户和独立的应用程序之间的点是交互的一个窗口。 A[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]窗口包含两个不同的区域︰ 的非工作区，其中承载 windows 修饰，其中包括图标、 标题、 系统菜单中，最小化按钮、 最大化按钮、 还原按钮、 关闭按钮和边框。      -A 工作区，其中承载应用程序特定的内容。       下图中显示标准窗口︰![窗口元素](~/add/media/windowoverviewfigure1.PNG &quot;窗口元素&quot;)窗口封装能够创建、 配置、 显示，和管理 windows 和对话框中的生存期，它提供以下关键服务︰**生命期管理**: <xref:System.Windows.Window.Activate%2A> <xref:System.Windows.Window.Activated> <xref:System.Windows.Window.Close%2A> <xref:System.Windows.Window.Closed> <xref:System.Windows.Window.Closing> <xref:System.Windows.Window.Deactivated> <xref:System.Windows.Window.Hide%2A> <xref:System.Windows.Window.IsActive%2A> <xref:System.Windows.Window.Show%2A>、 <xref:System.Windows.Window.SourceInitialized>.</xref:System.Windows.Window.SourceInitialized> </xref:System.Windows.Window.Show%2A> </xref:System.Windows.Window.IsActive%2A> </xref:System.Windows.Window.Hide%2A> </xref:System.Windows.Window.Deactivated> </xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Close%2A> </xref:System.Windows.Window.Activated> </xref:System.Windows.Window.Activate%2A>       **窗口管理**: <xref:System.Windows.Window.GetWindow%2A> <xref:System.Windows.Window.OwnedWindows%2A>、 <xref:System.Windows.Window.Owner%2A>.</xref:System.Windows.Window.Owner%2A> </xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.GetWindow%2A>       **Appearance and Behavior**: <xref:System.Windows.Window.AllowsTransparency%2A>, <xref:System.Windows.Window.ContentRendered>, <xref:System.Windows.Window.DragMove%2A>, <xref:System.Windows.Window.Icon%2A>, <xref:System.Windows.Window.Left%2A>, <xref:System.Windows.Window.LocationChanged>, <xref:System.Windows.Window.ResizeMode%2A>, <xref:System.Windows.Window.RestoreBounds%2A>, <xref:System.Windows.Window.ShowActivated%2A>, <xref:System.Windows.Window.ShowInTaskbar%2A>, <xref:System.Windows.Window.SizeToContent%2A>, <xref:System.Windows.Window.StateChanged>, <xref:System.Windows.Window.Title%2A>, <xref:System.Windows.Window.Top%2A>, <xref:System.Windows.Window.Topmost%2A>, <xref:System.Windows.Window.WindowStartupLocation%2A>, <xref:System.Windows.Window.WindowState%2A>, <xref:System.Windows.Window.WindowStyle%2A>       **Dialog Boxes**: <xref:System.Windows.Window.DialogResult%2A>, <xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window.DialogResult%2A></xref:System.Windows.Window.WindowStyle%2A></xref:System.Windows.Window.WindowState%2A></xref:System.Windows.Window.WindowStartupLocation%2A></xref:System.Windows.Window.Topmost%2A></xref:System.Windows.Window.Top%2A></xref:System.Windows.Window.Title%2A></xref:System.Windows.Window.StateChanged></xref:System.Windows.Window.SizeToContent%2A></xref:System.Windows.Window.ShowInTaskbar%2A></xref:System.Windows.Window.ShowActivated%2A></xref:System.Windows.Window.RestoreBounds%2A></xref:System.Windows.Window.ResizeMode%2A></xref:System.Windows.Window.LocationChanged></xref:System.Windows.Window.Left%2A></xref:System.Windows.Window.Icon%2A></xref:System.Windows.Window.DragMove%2A></xref:System.Windows.Window.ContentRendered></xref:System.Windows.Window.AllowsTransparency%2A>       此外，<xref:System.Windows.Application>公开对管理所有 windows 应用程序中的特殊支持:-应用程序保留当前应用程序中实例化的所有窗口的列表。</xref:System.Windows.Application> 此列表由公开<xref:System.Windows.Application.Windows%2A>属性。</xref:System.Windows.Application.Windows%2A>      -默认情况下，<xref:System.Windows.Application.MainWindow%2A>自动设置为第一个应用程序中实例化的窗口的引用。</xref:System.Windows.Application.MainWindow%2A> 这从而使应用程序主窗口的窗口。       可以使用标记、 标记和代码隐藏或代码来实现一个窗口。       窗口主要用于显示窗口和独立应用程序的对话框。 但是，需要在窗口级别，诸如向导，导航的应用程序则可改用<xref:System.Windows.Navigation.NavigationWindow>;<xref:System.Windows.Navigation.NavigationWindow>派生自窗口并浏览器样式导航支持与对其进行扩展。</xref:System.Windows.Navigation.NavigationWindow> </xref:System.Windows.Navigation.NavigationWindow>      1> [!NOTE]&1;> 可导航内容岛可以合并到使用<xref:System.Windows.Controls.Frame>.</xref:System.Windows.Controls.Frame>其他内容和内容容器       窗口需要`UnmanagedCode`要实例化的安全权限。 这具有以下结果:- [!INCLUDE[TLA#tla_clickonce](~/add/includes/tlasharptla-clickonce-md.md)]-您可以单独部署应用程序将请求权限提升时从 Internet 或本地 Intranet 区域中启动。      - [!INCLUDE[TLA2#tla_xbap#plural](~/add/includes/tla2sharptla-xbapsharpplural-md.md)] ，请求的任何内容小于完全权限将不能实例化窗口或对话框。       有关独立应用程序部署和安全注意事项的信息，请参阅[WPF 安全策略 — 平台安全性](~/add/includes/ajax-current-ext-md.md)。       窗口是<xref:System.Windows.Controls.ContentControl>，这意味着，它可以包含任何类型 （如字符串、 一个映像或一个面板） 的单个对象。</xref:System.Windows.Controls.ContentControl> 有关详细信息，请参阅<xref:System.Windows.Controls.ContentControl>类。</xref:System.Windows.Controls.ContentControl> 此外，窗口是根元素，因此，不能是另一个元素的内容的一部分。      1> [!NOTE]&1;> <xref:System.Windows.FrameworkElement.Height%2A>， <xref:System.Windows.FrameworkElement.Width%2A>， <xref:System.Windows.Window.Top%2A>，和<xref:System.Windows.Window.Left%2A>通过样式的窗口上设置的属性将不会应用在运行时。</xref:System.Windows.Window.Left%2A> </xref:System.Windows.Window.Top%2A> </xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A>      ## 窗口控件到自定义适用于多个窗口控件，使用的相同的属性设置<xref:System.Windows.FrameworkElement.Style%2A>属性。</xref:System.Windows.FrameworkElement.Style%2A> 你可以修改默认<xref:System.Windows.Controls.ControlTemplate>提供独特外观的控制。</xref:System.Windows.Controls.ControlTemplate> 有关创建<xref:System.Windows.Controls.ControlTemplate>，请参阅[通过创建 ControlTemplate 自定义现有的控件的外观](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.Controls.ControlTemplate>  若要查看的部件和特定于窗口的状态，请参阅[窗口样式和模板](~/add/includes/ajax-current-ext-md.md)。       对于此控件的依赖项属性可能由控件的默认样式设置。  如果属性设置的默认样式，该属性可能会更改从其默认值，如果控件出现在应用程序中。 桌面主题用应用程序运行时确定的默认样式。  有关详细信息，请参阅[默认 WPF 主题](http://go.microsoft.com/fwlink/?LinkID=158252)。      1> [!NOTE]&1;> 设置 visual 属性仅会产生作用如果该属性既存在窗口控件的默认模板中，通过设置。 可以在的&quot;更改 Visual 结构的控件&quot;一节中找到的可视属性列表[通过创建 ControlTemplate 自定义现有的控件的外观](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md)。"
  example:
  - "The following example shows how a standard window is defined using only markup:  \n  \n [!code-xml[WindowSnippets#WindowMARKUPONLY](~/add/codesnippet/xaml/WindowSnippets.CSharp/MarkupOnlyWindow.xaml#windowmarkuponly)]  \n  \n The following example shows how a standard window is defined using only code:  \n  \n [!code-cs[WindowSnippets#WindowCODEONLY](~/add/codesnippet/csharp/WindowSnippets.CSharp/CodeOnlyWindow.cs#windowcodeonly)]\n [!code-vb[WindowSnippets#WindowCODEONLY](~/add/codesnippet/visualbasic/windowsnippets/codeonlywindow.vb#windowcodeonly)]  \n  \n The following example shows how a standard window is defined using a combination of markup and code-behind.  \n  \n [!code-xml[WindowSnippets#WindowXAML](~/add/codesnippet/xaml/WindowSnippets.CSharp/MainWindow.xaml#windowxaml)]  \n  \n [!code-cs[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/csharp/WindowSnippets.CSharp/MainWindow.xaml.cs#windowcodebehind)]\n [!code-vb[WindowSnippets#WindowCODEBEHIND](~/add/codesnippet/visualbasic/windowsnippets/mainwindow.xaml.vb#windowcodebehind)]"
  syntax:
    content: >-
      [System.Windows.Localizability(System.Windows.LocalizationCategory.Ignore)]

      public class Window : System.Windows.Controls.ContentControl
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  - System.Windows.Media.Visual
  - System.Windows.UIElement
  - System.Windows.FrameworkElement
  - System.Windows.Controls.Control
  - System.Windows.Controls.ContentControl
  implements: []
  inheritedMembers:
  - System.Windows.Controls.ContentControl.AddChild(System.Object)
  - System.Windows.Controls.ContentControl.AddText(System.String)
  - System.Windows.Controls.ContentControl.Content
  - System.Windows.Controls.ContentControl.ContentProperty
  - System.Windows.Controls.ContentControl.ContentStringFormat
  - System.Windows.Controls.ContentControl.ContentStringFormatProperty
  - System.Windows.Controls.ContentControl.ContentTemplate
  - System.Windows.Controls.ContentControl.ContentTemplateProperty
  - System.Windows.Controls.ContentControl.ContentTemplateSelector
  - System.Windows.Controls.ContentControl.ContentTemplateSelectorProperty
  - System.Windows.Controls.ContentControl.HasContent
  - System.Windows.Controls.ContentControl.HasContentProperty
  - System.Windows.Controls.ContentControl.OnContentStringFormatChanged(System.String,System.String)
  - System.Windows.Controls.ContentControl.OnContentTemplateChanged(System.Windows.DataTemplate,System.Windows.DataTemplate)
  - System.Windows.Controls.ContentControl.OnContentTemplateSelectorChanged(System.Windows.Controls.DataTemplateSelector,System.Windows.Controls.DataTemplateSelector)
  - System.Windows.Controls.ContentControl.ShouldSerializeContent
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddChild(System.Object)
  - System.Windows.Controls.ContentControl.System#Windows#Markup#IAddChild#AddText(System.String)
  - System.Windows.Controls.Control.Background
  - System.Windows.Controls.Control.BackgroundProperty
  - System.Windows.Controls.Control.BorderBrush
  - System.Windows.Controls.Control.BorderBrushProperty
  - System.Windows.Controls.Control.BorderThickness
  - System.Windows.Controls.Control.BorderThicknessProperty
  - System.Windows.Controls.Control.FontFamily
  - System.Windows.Controls.Control.FontFamilyProperty
  - System.Windows.Controls.Control.FontSize
  - System.Windows.Controls.Control.FontSizeProperty
  - System.Windows.Controls.Control.FontStretch
  - System.Windows.Controls.Control.FontStretchProperty
  - System.Windows.Controls.Control.FontStyle
  - System.Windows.Controls.Control.FontStyleProperty
  - System.Windows.Controls.Control.FontWeight
  - System.Windows.Controls.Control.FontWeightProperty
  - System.Windows.Controls.Control.Foreground
  - System.Windows.Controls.Control.ForegroundProperty
  - System.Windows.Controls.Control.HandlesScrolling
  - System.Windows.Controls.Control.HorizontalContentAlignment
  - System.Windows.Controls.Control.HorizontalContentAlignmentProperty
  - System.Windows.Controls.Control.IsTabStop
  - System.Windows.Controls.Control.IsTabStopProperty
  - System.Windows.Controls.Control.MouseDoubleClick
  - System.Windows.Controls.Control.MouseDoubleClickEvent
  - System.Windows.Controls.Control.OnMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnPreviewMouseDoubleClick(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.Controls.Control.OnTemplateChanged(System.Windows.Controls.ControlTemplate,System.Windows.Controls.ControlTemplate)
  - System.Windows.Controls.Control.Padding
  - System.Windows.Controls.Control.PaddingProperty
  - System.Windows.Controls.Control.PreviewMouseDoubleClick
  - System.Windows.Controls.Control.PreviewMouseDoubleClickEvent
  - System.Windows.Controls.Control.TabIndex
  - System.Windows.Controls.Control.TabIndexProperty
  - System.Windows.Controls.Control.Template
  - System.Windows.Controls.Control.TemplateProperty
  - System.Windows.Controls.Control.ToString
  - System.Windows.Controls.Control.VerticalContentAlignment
  - System.Windows.Controls.Control.VerticalContentAlignmentProperty
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.ActualHeight
  - System.Windows.FrameworkElement.ActualHeightProperty
  - System.Windows.FrameworkElement.ActualWidth
  - System.Windows.FrameworkElement.ActualWidthProperty
  - System.Windows.FrameworkElement.AddLogicalChild(System.Object)
  - System.Windows.FrameworkElement.ApplyTemplate
  - System.Windows.FrameworkElement.ArrangeCore(System.Windows.Rect)
  - System.Windows.FrameworkElement.BeginInit
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.FrameworkElement.BeginStoryboard(System.Windows.Media.Animation.Storyboard,System.Windows.Media.Animation.HandoffBehavior,System.Boolean)
  - System.Windows.FrameworkElement.BindingGroup
  - System.Windows.FrameworkElement.BindingGroupProperty
  - System.Windows.FrameworkElement.BringIntoView
  - System.Windows.FrameworkElement.BringIntoView(System.Windows.Rect)
  - System.Windows.FrameworkElement.ContextMenu
  - System.Windows.FrameworkElement.ContextMenuClosing
  - System.Windows.FrameworkElement.ContextMenuClosingEvent
  - System.Windows.FrameworkElement.ContextMenuOpening
  - System.Windows.FrameworkElement.ContextMenuOpeningEvent
  - System.Windows.FrameworkElement.ContextMenuProperty
  - System.Windows.FrameworkElement.Cursor
  - System.Windows.FrameworkElement.CursorProperty
  - System.Windows.FrameworkElement.DataContext
  - System.Windows.FrameworkElement.DataContextChanged
  - System.Windows.FrameworkElement.DataContextProperty
  - System.Windows.FrameworkElement.DefaultStyleKey
  - System.Windows.FrameworkElement.DefaultStyleKeyProperty
  - System.Windows.FrameworkElement.EndInit
  - System.Windows.FrameworkElement.FindName(System.String)
  - System.Windows.FrameworkElement.FindResource(System.Object)
  - System.Windows.FrameworkElement.FlowDirection
  - System.Windows.FrameworkElement.FlowDirectionProperty
  - System.Windows.FrameworkElement.FocusVisualStyle
  - System.Windows.FrameworkElement.FocusVisualStyleProperty
  - System.Windows.FrameworkElement.ForceCursor
  - System.Windows.FrameworkElement.ForceCursorProperty
  - System.Windows.FrameworkElement.GetBindingExpression(System.Windows.DependencyProperty)
  - System.Windows.FrameworkElement.GetFlowDirection(System.Windows.DependencyObject)
  - System.Windows.FrameworkElement.GetLayoutClip(System.Windows.Size)
  - System.Windows.FrameworkElement.GetTemplateChild(System.String)
  - System.Windows.FrameworkElement.GetUIParentCore
  - System.Windows.FrameworkElement.GetVisualChild(System.Int32)
  - System.Windows.FrameworkElement.Height
  - System.Windows.FrameworkElement.HeightProperty
  - System.Windows.FrameworkElement.HorizontalAlignment
  - System.Windows.FrameworkElement.HorizontalAlignmentProperty
  - System.Windows.FrameworkElement.InheritanceBehavior
  - System.Windows.FrameworkElement.Initialized
  - System.Windows.FrameworkElement.InputScope
  - System.Windows.FrameworkElement.InputScopeProperty
  - System.Windows.FrameworkElement.IsInitialized
  - System.Windows.FrameworkElement.IsLoaded
  - System.Windows.FrameworkElement.Language
  - System.Windows.FrameworkElement.LanguageProperty
  - System.Windows.FrameworkElement.LayoutTransform
  - System.Windows.FrameworkElement.LayoutTransformProperty
  - System.Windows.FrameworkElement.Loaded
  - System.Windows.FrameworkElement.LoadedEvent
  - System.Windows.FrameworkElement.Margin
  - System.Windows.FrameworkElement.MarginProperty
  - System.Windows.FrameworkElement.MaxHeight
  - System.Windows.FrameworkElement.MaxHeightProperty
  - System.Windows.FrameworkElement.MaxWidth
  - System.Windows.FrameworkElement.MaxWidthProperty
  - System.Windows.FrameworkElement.MeasureCore(System.Windows.Size)
  - System.Windows.FrameworkElement.MinHeight
  - System.Windows.FrameworkElement.MinHeightProperty
  - System.Windows.FrameworkElement.MinWidth
  - System.Windows.FrameworkElement.MinWidthProperty
  - System.Windows.FrameworkElement.MoveFocus(System.Windows.Input.TraversalRequest)
  - System.Windows.FrameworkElement.Name
  - System.Windows.FrameworkElement.NameProperty
  - System.Windows.FrameworkElement.OnApplyTemplate
  - System.Windows.FrameworkElement.OnContextMenuClosing(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnContextMenuOpening(System.Windows.Controls.ContextMenuEventArgs)
  - System.Windows.FrameworkElement.OnGotFocus(System.Windows.RoutedEventArgs)
  - System.Windows.FrameworkElement.OnInitialized(System.EventArgs)
  - System.Windows.FrameworkElement.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.FrameworkElement.OnRenderSizeChanged(System.Windows.SizeChangedInfo)
  - System.Windows.FrameworkElement.OnStyleChanged(System.Windows.Style,System.Windows.Style)
  - System.Windows.FrameworkElement.OnToolTipClosing(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OnToolTipOpening(System.Windows.Controls.ToolTipEventArgs)
  - System.Windows.FrameworkElement.OverridesDefaultStyle
  - System.Windows.FrameworkElement.OverridesDefaultStyleProperty
  - System.Windows.FrameworkElement.Parent
  - System.Windows.FrameworkElement.ParentLayoutInvalidated(System.Windows.UIElement)
  - System.Windows.FrameworkElement.PredictFocus(System.Windows.Input.FocusNavigationDirection)
  - System.Windows.FrameworkElement.RegisterName(System.String,System.Object)
  - System.Windows.FrameworkElement.RemoveLogicalChild(System.Object)
  - System.Windows.FrameworkElement.RequestBringIntoView
  - System.Windows.FrameworkElement.RequestBringIntoViewEvent
  - System.Windows.FrameworkElement.Resources
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.String)
  - System.Windows.FrameworkElement.SetBinding(System.Windows.DependencyProperty,System.Windows.Data.BindingBase)
  - System.Windows.FrameworkElement.SetFlowDirection(System.Windows.DependencyObject,System.Windows.FlowDirection)
  - System.Windows.FrameworkElement.SetResourceReference(System.Windows.DependencyProperty,System.Object)
  - System.Windows.FrameworkElement.ShouldSerializeResources
  - System.Windows.FrameworkElement.ShouldSerializeStyle
  - System.Windows.FrameworkElement.ShouldSerializeTriggers
  - System.Windows.FrameworkElement.SizeChanged
  - System.Windows.FrameworkElement.SizeChangedEvent
  - System.Windows.FrameworkElement.SourceUpdated
  - System.Windows.FrameworkElement.Style
  - System.Windows.FrameworkElement.StyleProperty
  - System.Windows.FrameworkElement.System#Windows#Markup#IQueryAmbient#IsAmbientPropertyAvailable(System.String)
  - System.Windows.FrameworkElement.Tag
  - System.Windows.FrameworkElement.TagProperty
  - System.Windows.FrameworkElement.TargetUpdated
  - System.Windows.FrameworkElement.TemplatedParent
  - System.Windows.FrameworkElement.ToolTip
  - System.Windows.FrameworkElement.ToolTipClosing
  - System.Windows.FrameworkElement.ToolTipClosingEvent
  - System.Windows.FrameworkElement.ToolTipOpening
  - System.Windows.FrameworkElement.ToolTipOpeningEvent
  - System.Windows.FrameworkElement.ToolTipProperty
  - System.Windows.FrameworkElement.Triggers
  - System.Windows.FrameworkElement.TryFindResource(System.Object)
  - System.Windows.FrameworkElement.Unloaded
  - System.Windows.FrameworkElement.UnloadedEvent
  - System.Windows.FrameworkElement.UnregisterName(System.String)
  - System.Windows.FrameworkElement.UpdateDefaultStyle
  - System.Windows.FrameworkElement.UseLayoutRounding
  - System.Windows.FrameworkElement.UseLayoutRoundingProperty
  - System.Windows.FrameworkElement.VerticalAlignment
  - System.Windows.FrameworkElement.VerticalAlignmentProperty
  - System.Windows.FrameworkElement.VisualChildrenCount
  - System.Windows.FrameworkElement.Width
  - System.Windows.FrameworkElement.WidthProperty
  - System.Windows.Media.Visual.AddVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.FindCommonVisualAncestor(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsAncestorOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.IsDescendantOf(System.Windows.DependencyObject)
  - System.Windows.Media.Visual.OnVisualChildrenChanged(System.Windows.DependencyObject,System.Windows.DependencyObject)
  - System.Windows.Media.Visual.PointFromScreen(System.Windows.Point)
  - System.Windows.Media.Visual.PointToScreen(System.Windows.Point)
  - System.Windows.Media.Visual.RemoveVisualChild(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Media3D.Visual3D)
  - System.Windows.Media.Visual.TransformToAncestor(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToDescendant(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.TransformToVisual(System.Windows.Media.Visual)
  - System.Windows.Media.Visual.VisualBitmapEffect
  - System.Windows.Media.Visual.VisualBitmapEffectInput
  - System.Windows.Media.Visual.VisualBitmapScalingMode
  - System.Windows.Media.Visual.VisualCacheMode
  - System.Windows.Media.Visual.VisualClearTypeHint
  - System.Windows.Media.Visual.VisualClip
  - System.Windows.Media.Visual.VisualEdgeMode
  - System.Windows.Media.Visual.VisualEffect
  - System.Windows.Media.Visual.VisualOffset
  - System.Windows.Media.Visual.VisualOpacity
  - System.Windows.Media.Visual.VisualOpacityMask
  - System.Windows.Media.Visual.VisualParent
  - System.Windows.Media.Visual.VisualScrollableAreaClip
  - System.Windows.Media.Visual.VisualTextHintingMode
  - System.Windows.Media.Visual.VisualTextRenderingMode
  - System.Windows.Media.Visual.VisualTransform
  - System.Windows.Media.Visual.VisualXSnappingGuidelines
  - System.Windows.Media.Visual.VisualYSnappingGuidelines
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.AddHandler(System.Windows.RoutedEvent,System.Delegate,System.Boolean)
  - System.Windows.UIElement.AddToEventRoute(System.Windows.EventRoute,System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.AllowDrop
  - System.Windows.UIElement.AllowDropProperty
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock)
  - System.Windows.UIElement.ApplyAnimationClock(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationClock,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.AreAnyTouchesCaptured
  - System.Windows.UIElement.AreAnyTouchesCapturedProperty
  - System.Windows.UIElement.AreAnyTouchesCapturedWithin
  - System.Windows.UIElement.AreAnyTouchesCapturedWithinProperty
  - System.Windows.UIElement.AreAnyTouchesDirectlyOver
  - System.Windows.UIElement.AreAnyTouchesDirectlyOverProperty
  - System.Windows.UIElement.AreAnyTouchesOver
  - System.Windows.UIElement.AreAnyTouchesOverProperty
  - System.Windows.UIElement.Arrange(System.Windows.Rect)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline)
  - System.Windows.UIElement.BeginAnimation(System.Windows.DependencyProperty,System.Windows.Media.Animation.AnimationTimeline,System.Windows.Media.Animation.HandoffBehavior)
  - System.Windows.UIElement.BitmapEffect
  - System.Windows.UIElement.BitmapEffectInput
  - System.Windows.UIElement.BitmapEffectInputProperty
  - System.Windows.UIElement.BitmapEffectProperty
  - System.Windows.UIElement.CacheMode
  - System.Windows.UIElement.CacheModeProperty
  - System.Windows.UIElement.CaptureMouse
  - System.Windows.UIElement.CaptureStylus
  - System.Windows.UIElement.CaptureTouch(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.Clip
  - System.Windows.UIElement.ClipProperty
  - System.Windows.UIElement.ClipToBounds
  - System.Windows.UIElement.ClipToBoundsProperty
  - System.Windows.UIElement.CommandBindings
  - System.Windows.UIElement.DesiredSize
  - System.Windows.UIElement.DragEnter
  - System.Windows.UIElement.DragEnterEvent
  - System.Windows.UIElement.DragLeave
  - System.Windows.UIElement.DragLeaveEvent
  - System.Windows.UIElement.DragOver
  - System.Windows.UIElement.DragOverEvent
  - System.Windows.UIElement.Drop
  - System.Windows.UIElement.DropEvent
  - System.Windows.UIElement.Effect
  - System.Windows.UIElement.EffectProperty
  - System.Windows.UIElement.Focus
  - System.Windows.UIElement.Focusable
  - System.Windows.UIElement.FocusableChanged
  - System.Windows.UIElement.FocusableProperty
  - System.Windows.UIElement.GetAnimationBaseValue(System.Windows.DependencyProperty)
  - System.Windows.UIElement.GiveFeedback
  - System.Windows.UIElement.GiveFeedbackEvent
  - System.Windows.UIElement.GotFocus
  - System.Windows.UIElement.GotFocusEvent
  - System.Windows.UIElement.GotKeyboardFocus
  - System.Windows.UIElement.GotKeyboardFocusEvent
  - System.Windows.UIElement.GotMouseCapture
  - System.Windows.UIElement.GotMouseCaptureEvent
  - System.Windows.UIElement.GotStylusCapture
  - System.Windows.UIElement.GotStylusCaptureEvent
  - System.Windows.UIElement.GotTouchCapture
  - System.Windows.UIElement.GotTouchCaptureEvent
  - System.Windows.UIElement.HasAnimatedProperties
  - System.Windows.UIElement.HasEffectiveKeyboardFocus
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.GeometryHitTestParameters)
  - System.Windows.UIElement.HitTestCore(System.Windows.Media.PointHitTestParameters)
  - System.Windows.UIElement.InputBindings
  - System.Windows.UIElement.InputHitTest(System.Windows.Point)
  - System.Windows.UIElement.InvalidateArrange
  - System.Windows.UIElement.InvalidateMeasure
  - System.Windows.UIElement.InvalidateVisual
  - System.Windows.UIElement.IsArrangeValid
  - System.Windows.UIElement.IsEnabled
  - System.Windows.UIElement.IsEnabledChanged
  - System.Windows.UIElement.IsEnabledCore
  - System.Windows.UIElement.IsEnabledProperty
  - System.Windows.UIElement.IsFocused
  - System.Windows.UIElement.IsFocusedProperty
  - System.Windows.UIElement.IsHitTestVisible
  - System.Windows.UIElement.IsHitTestVisibleChanged
  - System.Windows.UIElement.IsHitTestVisibleProperty
  - System.Windows.UIElement.IsInputMethodEnabled
  - System.Windows.UIElement.IsKeyboardFocused
  - System.Windows.UIElement.IsKeyboardFocusedChanged
  - System.Windows.UIElement.IsKeyboardFocusedProperty
  - System.Windows.UIElement.IsKeyboardFocusWithin
  - System.Windows.UIElement.IsKeyboardFocusWithinChanged
  - System.Windows.UIElement.IsKeyboardFocusWithinProperty
  - System.Windows.UIElement.IsManipulationEnabled
  - System.Windows.UIElement.IsManipulationEnabledProperty
  - System.Windows.UIElement.IsMeasureValid
  - System.Windows.UIElement.IsMouseCaptured
  - System.Windows.UIElement.IsMouseCapturedChanged
  - System.Windows.UIElement.IsMouseCapturedProperty
  - System.Windows.UIElement.IsMouseCaptureWithin
  - System.Windows.UIElement.IsMouseCaptureWithinChanged
  - System.Windows.UIElement.IsMouseCaptureWithinProperty
  - System.Windows.UIElement.IsMouseDirectlyOver
  - System.Windows.UIElement.IsMouseDirectlyOverChanged
  - System.Windows.UIElement.IsMouseDirectlyOverProperty
  - System.Windows.UIElement.IsMouseOver
  - System.Windows.UIElement.IsMouseOverProperty
  - System.Windows.UIElement.IsStylusCaptured
  - System.Windows.UIElement.IsStylusCapturedChanged
  - System.Windows.UIElement.IsStylusCapturedProperty
  - System.Windows.UIElement.IsStylusCaptureWithin
  - System.Windows.UIElement.IsStylusCaptureWithinChanged
  - System.Windows.UIElement.IsStylusCaptureWithinProperty
  - System.Windows.UIElement.IsStylusDirectlyOver
  - System.Windows.UIElement.IsStylusDirectlyOverChanged
  - System.Windows.UIElement.IsStylusDirectlyOverProperty
  - System.Windows.UIElement.IsStylusOver
  - System.Windows.UIElement.IsStylusOverProperty
  - System.Windows.UIElement.IsVisible
  - System.Windows.UIElement.IsVisibleChanged
  - System.Windows.UIElement.IsVisibleProperty
  - System.Windows.UIElement.KeyDown
  - System.Windows.UIElement.KeyDownEvent
  - System.Windows.UIElement.KeyUp
  - System.Windows.UIElement.KeyUpEvent
  - System.Windows.UIElement.LayoutUpdated
  - System.Windows.UIElement.LostFocus
  - System.Windows.UIElement.LostFocusEvent
  - System.Windows.UIElement.LostKeyboardFocus
  - System.Windows.UIElement.LostKeyboardFocusEvent
  - System.Windows.UIElement.LostMouseCapture
  - System.Windows.UIElement.LostMouseCaptureEvent
  - System.Windows.UIElement.LostStylusCapture
  - System.Windows.UIElement.LostStylusCaptureEvent
  - System.Windows.UIElement.LostTouchCapture
  - System.Windows.UIElement.LostTouchCaptureEvent
  - System.Windows.UIElement.ManipulationBoundaryFeedback
  - System.Windows.UIElement.ManipulationBoundaryFeedbackEvent
  - System.Windows.UIElement.ManipulationCompleted
  - System.Windows.UIElement.ManipulationCompletedEvent
  - System.Windows.UIElement.ManipulationDelta
  - System.Windows.UIElement.ManipulationDeltaEvent
  - System.Windows.UIElement.ManipulationInertiaStarting
  - System.Windows.UIElement.ManipulationInertiaStartingEvent
  - System.Windows.UIElement.ManipulationStarted
  - System.Windows.UIElement.ManipulationStartedEvent
  - System.Windows.UIElement.ManipulationStarting
  - System.Windows.UIElement.ManipulationStartingEvent
  - System.Windows.UIElement.Measure(System.Windows.Size)
  - System.Windows.UIElement.MouseDown
  - System.Windows.UIElement.MouseDownEvent
  - System.Windows.UIElement.MouseEnter
  - System.Windows.UIElement.MouseEnterEvent
  - System.Windows.UIElement.MouseLeave
  - System.Windows.UIElement.MouseLeaveEvent
  - System.Windows.UIElement.MouseLeftButtonDown
  - System.Windows.UIElement.MouseLeftButtonDownEvent
  - System.Windows.UIElement.MouseLeftButtonUp
  - System.Windows.UIElement.MouseLeftButtonUpEvent
  - System.Windows.UIElement.MouseMove
  - System.Windows.UIElement.MouseMoveEvent
  - System.Windows.UIElement.MouseRightButtonDown
  - System.Windows.UIElement.MouseRightButtonDownEvent
  - System.Windows.UIElement.MouseRightButtonUp
  - System.Windows.UIElement.MouseRightButtonUpEvent
  - System.Windows.UIElement.MouseUp
  - System.Windows.UIElement.MouseUpEvent
  - System.Windows.UIElement.MouseWheel
  - System.Windows.UIElement.MouseWheelEvent
  - System.Windows.UIElement.OnAccessKey(System.Windows.Input.AccessKeyEventArgs)
  - System.Windows.UIElement.OnChildDesiredSizeChanged(System.Windows.UIElement)
  - System.Windows.UIElement.OnDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnGotMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnGotStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnGotTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsKeyboardFocusWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsMouseDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCapturedChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusCaptureWithinChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnIsStylusDirectlyOverChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.UIElement.OnKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnLostFocus(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.OnLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnLostMouseCapture(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnLostStylusCapture(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnLostTouchCapture(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnManipulationCompleted(System.Windows.Input.ManipulationCompletedEventArgs)
  - System.Windows.UIElement.OnManipulationDelta(System.Windows.Input.ManipulationDeltaEventArgs)
  - System.Windows.UIElement.OnManipulationInertiaStarting(System.Windows.Input.ManipulationInertiaStartingEventArgs)
  - System.Windows.UIElement.OnManipulationStarted(System.Windows.Input.ManipulationStartedEventArgs)
  - System.Windows.UIElement.OnManipulationStarting(System.Windows.Input.ManipulationStartingEventArgs)
  - System.Windows.UIElement.OnMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseEnter(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeave(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewDragEnter(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragLeave(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDragOver(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewDrop(System.Windows.DragEventArgs)
  - System.Windows.UIElement.OnPreviewGiveFeedback(System.Windows.GiveFeedbackEventArgs)
  - System.Windows.UIElement.OnPreviewGotKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewKeyDown(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewKeyUp(System.Windows.Input.KeyEventArgs)
  - System.Windows.UIElement.OnPreviewLostKeyboardFocus(System.Windows.Input.KeyboardFocusChangedEventArgs)
  - System.Windows.UIElement.OnPreviewMouseDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseLeftButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseMove(System.Windows.Input.MouseEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonDown(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseRightButtonUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseUp(System.Windows.Input.MouseButtonEventArgs)
  - System.Windows.UIElement.OnPreviewMouseWheel(System.Windows.Input.MouseWheelEventArgs)
  - System.Windows.UIElement.OnPreviewQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnPreviewStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnPreviewStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnPreviewTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnPreviewTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnPreviewTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnQueryContinueDrag(System.Windows.QueryContinueDragEventArgs)
  - System.Windows.UIElement.OnQueryCursor(System.Windows.Input.QueryCursorEventArgs)
  - System.Windows.UIElement.OnRender(System.Windows.Media.DrawingContext)
  - System.Windows.UIElement.OnStylusButtonDown(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusButtonUp(System.Windows.Input.StylusButtonEventArgs)
  - System.Windows.UIElement.OnStylusDown(System.Windows.Input.StylusDownEventArgs)
  - System.Windows.UIElement.OnStylusEnter(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInAirMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusInRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusLeave(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusMove(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusOutOfRange(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnStylusSystemGesture(System.Windows.Input.StylusSystemGestureEventArgs)
  - System.Windows.UIElement.OnStylusUp(System.Windows.Input.StylusEventArgs)
  - System.Windows.UIElement.OnTextInput(System.Windows.Input.TextCompositionEventArgs)
  - System.Windows.UIElement.OnTouchDown(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchEnter(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchLeave(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchMove(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.OnTouchUp(System.Windows.Input.TouchEventArgs)
  - System.Windows.UIElement.Opacity
  - System.Windows.UIElement.OpacityMask
  - System.Windows.UIElement.OpacityMaskProperty
  - System.Windows.UIElement.OpacityProperty
  - System.Windows.UIElement.PersistId
  - System.Windows.UIElement.PreviewDragEnter
  - System.Windows.UIElement.PreviewDragEnterEvent
  - System.Windows.UIElement.PreviewDragLeave
  - System.Windows.UIElement.PreviewDragLeaveEvent
  - System.Windows.UIElement.PreviewDragOver
  - System.Windows.UIElement.PreviewDragOverEvent
  - System.Windows.UIElement.PreviewDrop
  - System.Windows.UIElement.PreviewDropEvent
  - System.Windows.UIElement.PreviewGiveFeedback
  - System.Windows.UIElement.PreviewGiveFeedbackEvent
  - System.Windows.UIElement.PreviewGotKeyboardFocus
  - System.Windows.UIElement.PreviewGotKeyboardFocusEvent
  - System.Windows.UIElement.PreviewKeyDown
  - System.Windows.UIElement.PreviewKeyDownEvent
  - System.Windows.UIElement.PreviewKeyUp
  - System.Windows.UIElement.PreviewKeyUpEvent
  - System.Windows.UIElement.PreviewLostKeyboardFocus
  - System.Windows.UIElement.PreviewLostKeyboardFocusEvent
  - System.Windows.UIElement.PreviewMouseDown
  - System.Windows.UIElement.PreviewMouseDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonDown
  - System.Windows.UIElement.PreviewMouseLeftButtonDownEvent
  - System.Windows.UIElement.PreviewMouseLeftButtonUp
  - System.Windows.UIElement.PreviewMouseLeftButtonUpEvent
  - System.Windows.UIElement.PreviewMouseMove
  - System.Windows.UIElement.PreviewMouseMoveEvent
  - System.Windows.UIElement.PreviewMouseRightButtonDown
  - System.Windows.UIElement.PreviewMouseRightButtonDownEvent
  - System.Windows.UIElement.PreviewMouseRightButtonUp
  - System.Windows.UIElement.PreviewMouseRightButtonUpEvent
  - System.Windows.UIElement.PreviewMouseUp
  - System.Windows.UIElement.PreviewMouseUpEvent
  - System.Windows.UIElement.PreviewMouseWheel
  - System.Windows.UIElement.PreviewMouseWheelEvent
  - System.Windows.UIElement.PreviewQueryContinueDrag
  - System.Windows.UIElement.PreviewQueryContinueDragEvent
  - System.Windows.UIElement.PreviewStylusButtonDown
  - System.Windows.UIElement.PreviewStylusButtonDownEvent
  - System.Windows.UIElement.PreviewStylusButtonUp
  - System.Windows.UIElement.PreviewStylusButtonUpEvent
  - System.Windows.UIElement.PreviewStylusDown
  - System.Windows.UIElement.PreviewStylusDownEvent
  - System.Windows.UIElement.PreviewStylusInAirMove
  - System.Windows.UIElement.PreviewStylusInAirMoveEvent
  - System.Windows.UIElement.PreviewStylusInRange
  - System.Windows.UIElement.PreviewStylusInRangeEvent
  - System.Windows.UIElement.PreviewStylusMove
  - System.Windows.UIElement.PreviewStylusMoveEvent
  - System.Windows.UIElement.PreviewStylusOutOfRange
  - System.Windows.UIElement.PreviewStylusOutOfRangeEvent
  - System.Windows.UIElement.PreviewStylusSystemGesture
  - System.Windows.UIElement.PreviewStylusSystemGestureEvent
  - System.Windows.UIElement.PreviewStylusUp
  - System.Windows.UIElement.PreviewStylusUpEvent
  - System.Windows.UIElement.PreviewTextInput
  - System.Windows.UIElement.PreviewTextInputEvent
  - System.Windows.UIElement.PreviewTouchDown
  - System.Windows.UIElement.PreviewTouchDownEvent
  - System.Windows.UIElement.PreviewTouchMove
  - System.Windows.UIElement.PreviewTouchMoveEvent
  - System.Windows.UIElement.PreviewTouchUp
  - System.Windows.UIElement.PreviewTouchUpEvent
  - System.Windows.UIElement.QueryContinueDrag
  - System.Windows.UIElement.QueryContinueDragEvent
  - System.Windows.UIElement.QueryCursor
  - System.Windows.UIElement.QueryCursorEvent
  - System.Windows.UIElement.RaiseEvent(System.Windows.RoutedEventArgs)
  - System.Windows.UIElement.ReleaseAllTouchCaptures
  - System.Windows.UIElement.ReleaseMouseCapture
  - System.Windows.UIElement.ReleaseStylusCapture
  - System.Windows.UIElement.ReleaseTouchCapture(System.Windows.Input.TouchDevice)
  - System.Windows.UIElement.RemoveHandler(System.Windows.RoutedEvent,System.Delegate)
  - System.Windows.UIElement.RenderSize
  - System.Windows.UIElement.RenderTransform
  - System.Windows.UIElement.RenderTransformOrigin
  - System.Windows.UIElement.RenderTransformOriginProperty
  - System.Windows.UIElement.RenderTransformProperty
  - System.Windows.UIElement.ShouldSerializeCommandBindings
  - System.Windows.UIElement.ShouldSerializeInputBindings
  - System.Windows.UIElement.SnapsToDevicePixels
  - System.Windows.UIElement.SnapsToDevicePixelsProperty
  - System.Windows.UIElement.StylusButtonDown
  - System.Windows.UIElement.StylusButtonDownEvent
  - System.Windows.UIElement.StylusButtonUp
  - System.Windows.UIElement.StylusButtonUpEvent
  - System.Windows.UIElement.StylusDown
  - System.Windows.UIElement.StylusDownEvent
  - System.Windows.UIElement.StylusEnter
  - System.Windows.UIElement.StylusEnterEvent
  - System.Windows.UIElement.StylusInAirMove
  - System.Windows.UIElement.StylusInAirMoveEvent
  - System.Windows.UIElement.StylusInRange
  - System.Windows.UIElement.StylusInRangeEvent
  - System.Windows.UIElement.StylusLeave
  - System.Windows.UIElement.StylusLeaveEvent
  - System.Windows.UIElement.StylusMove
  - System.Windows.UIElement.StylusMoveEvent
  - System.Windows.UIElement.StylusOutOfRange
  - System.Windows.UIElement.StylusOutOfRangeEvent
  - System.Windows.UIElement.StylusPlugIns
  - System.Windows.UIElement.StylusSystemGesture
  - System.Windows.UIElement.StylusSystemGestureEvent
  - System.Windows.UIElement.StylusUp
  - System.Windows.UIElement.StylusUpEvent
  - System.Windows.UIElement.TextInput
  - System.Windows.UIElement.TextInputEvent
  - System.Windows.UIElement.TouchDown
  - System.Windows.UIElement.TouchDownEvent
  - System.Windows.UIElement.TouchEnter
  - System.Windows.UIElement.TouchEnterEvent
  - System.Windows.UIElement.TouchesCaptured
  - System.Windows.UIElement.TouchesCapturedWithin
  - System.Windows.UIElement.TouchesDirectlyOver
  - System.Windows.UIElement.TouchesOver
  - System.Windows.UIElement.TouchLeave
  - System.Windows.UIElement.TouchLeaveEvent
  - System.Windows.UIElement.TouchMove
  - System.Windows.UIElement.TouchMoveEvent
  - System.Windows.UIElement.TouchUp
  - System.Windows.UIElement.TouchUpEvent
  - System.Windows.UIElement.TranslatePoint(System.Windows.Point,System.Windows.UIElement)
  - System.Windows.UIElement.Uid
  - System.Windows.UIElement.UidProperty
  - System.Windows.UIElement.UpdateLayout
  - System.Windows.UIElement.Visibility
  - System.Windows.UIElement.VisibilityProperty
  platform:
  - net462
- uid: System.Windows.Window.#ctor
  id: '#ctor'
  parent: System.Windows.Window
  langs:
  - csharp
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.Window&quot;></xref>类。"
  remarks: "构造函数初始化<xref:System.Windows.FrameworkElement.Width%2A>， <xref:System.Windows.FrameworkElement.Height%2A>， <xref:System.Windows.Window.Top%2A>，和<xref:System.Windows.Window.Left%2A>为其默认值的属性<xref:System.Windows.Window>值。</xref:System.Windows.Window> </xref:System.Windows.Window.Left%2A> </xref:System.Windows.Window.Top%2A> </xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.FrameworkElement.Width%2A>       如果在创建一个窗口<xref:System.AppDomain>具有<xref:System.Windows.Application>对象，构造函数将添加<xref:System.Windows.Window>对象的一套<xref:System.Windows.Application>-管理通过 windows<xref:System.Windows.Application.Windows%2A>属性<xref:System.Windows.Application>对象。</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A> </xref:System.Windows.Application> </xref:System.Windows.Window> </xref:System.Windows.Application> </xref:System.AppDomain>"
  syntax:
    content: public Window ();
    parameters: []
  overload: System.Windows.Window.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activate
  id: Activate
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "尝试将该窗口调到前台，并将其激活。"
  remarks: "确定窗口是否已激活的规则都与使用的相同[!INCLUDE[TLA2#tla_win32](~/add/includes/tla2sharptla-win32-md.md)]`SetForegroundWindow`函数 (User32.dll)。       如果显示窗口激活在[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]不是用户的前景应用程序，应用程序<xref:System.Windows.Application.Activated>引发事件。</xref:System.Windows.Application.Activated>      1> [!NOTE]&1;> 窗口承载在浏览器时，不能调用此方法。"
  syntax:
    content: public bool Activate ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.Window&quot;></xref>成功激活; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Window.Activate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Activated
  id: Activated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "当窗口变得前景窗口时发生。"
  remarks: "激活一个窗口 （变成前台窗口） 时:-首次打开窗口。      -A 用户通过使用鼠标，按 ALT + 选项卡上，或从任务管理器中选择它切换到该窗口。      -用户单击窗口的任务栏按钮。       需要检测何时变成活动的 Windows 可以处理已激活事件。       第一次激活窗口之后，它可能会停用并且在其生存期内多次重新激活。 如果应用程序的行为或状态取决于其激活状态，它可以检查<xref:System.Windows.Window.IsActive%2A>以确定哪些激活状态的单元</xref:System.Windows.Window.IsActive%2A>       应用程序也可以是<xref:System.Windows.Application.Activated>.</xref:System.Windows.Application.Activated>"
  syntax:
    content: public event EventHandler Activated;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparency
  id: AllowsTransparency
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示窗口的工作区是否支持透明度。"
  remarks: "当<xref:System.Windows.Controls.Control.Background%2A>窗口的属性设置为透明颜色、 使用<xref:System.Windows.Media.Brushes.Transparent%2A>例如，窗口将保持不透明。</xref:System.Windows.Media.Brushes.Transparent%2A> </xref:System.Windows.Controls.Control.Background%2A> 这意味着无法查看桌面和任何正在运行的应用程序&quot;beneath&quot;窗口。 若要启用此类型的透明度，AllowsTransparency 必须设置为`true`。       AllowsTransparency 存在来帮助创建非矩形窗口，并且，因此，AllowsTransparency 设置为`true`，窗口的<xref:System.Windows.Window.WindowStyle%2A>属性必须设置为<xref:System.Windows.WindowStyle>.</xref:System.Windows.WindowStyle> </xref:System.Windows.Window.WindowStyle%2A>      <a name=&quot;dependencyPropertyInfo_WindowAllowsTransparency&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.AllowsTransparencyProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.AllowsTransparencyProperty>"
  syntax:
    content: public bool AllowsTransparency { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果窗口支持透明度;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Window.AllowsTransparency*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "该窗口具有<xref:System.Windows.Window.WindowStyle*>的任何内容以外的其他值<xref href=&quot;System.Windows.WindowStyle&quot;> </xref>。</xref:System.Windows.Window.WindowStyle*>"
  platform:
  - net462
- uid: System.Windows.Window.AllowsTransparencyProperty
  id: AllowsTransparencyProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.AllowsTransparency*>依赖项属性。</xref:System.Windows.Window.AllowsTransparency*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty AllowsTransparencyProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  id: ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "重写此方法以排列和调整大小窗口和及其子元素。"
  remarks: "时，不将调用 ArrangeOverride<xref:System.Windows.UIElement.Visibility%2A>属性具有的<xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>值</xref:System.Windows.UIElement.Visibility%2A> 如果值<xref:System.Windows.UIElement.Visibility%2A>属性<xref:System.Windows.Visibility>或<xref:System.Windows.Visibility>，称为 ArrangeOverride。</xref:System.Windows.Visibility> </xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A>      1> [!NOTE]&1;> 时<xref:System.Windows.Window.Show%2A>或<xref:System.Windows.Window.ShowDialog%2A>调用时，<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Window>设置为<xref:System.Windows.Visibility>。</xref:System.Windows.Visibility></xref:System.Windows.Window>的属性</xref:System.Windows.UIElement.Visibility%2A></xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size ArrangeOverride (System.Windows.Size arrangeBounds);
    parameters:
    - id: arrangeBounds
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;> </xref> ，反映窗口应该用来排列自身及其子元素的最终大小。"
    return:
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;> </xref> ，反映实际使用的实际大小。"
  overload: System.Windows.Window.ArrangeOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Close
  id: Close
  parent: System.Windows.Window
  langs:
  - csharp
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "手动关闭<xref href=&quot;System.Windows.Window&quot;> </xref>。"
  remarks: "A<xref:System.Windows.Window>可以使用几，之一关闭的已知、 系统提供的机制位于其标题栏中，包括:-ALT + F4。</xref:System.Windows.Window>      系统菜单 |**Close**.      -**关闭**按钮。       也可以使用几个已知机制之一的客户端区域中提供的开发人员，包括关闭<xref:System.Windows.Window>:-**文件**|**退出**主窗口上。</xref:System.Windows.Window>      -   **File** |**关闭**或**关闭**子窗口上的按钮。      1> [!NOTE]  >  **确定**和**取消**出现在对话框中的按钮也是开发人员提供，虽然可能会设置<xref:System.Windows.Window.DialogResult%2A>，这会自动关闭，已通过调用<xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A>打开的窗口</xref:System.Windows.Window.DialogResult%2A>       这些机制要求你显式调用关闭以关闭窗口。      1> [!NOTE]&1;> 如果一个窗口，打开通过调用<xref:System.Windows.Window.ShowDialog%2A>，且<xref:System.Windows.Controls.Button>与其<xref:System.Windows.Controls.Button.IsCancel%2A>属性设置为 true，将自动关闭，或者单击该按钮，或按下 esc 键时。</xref:System.Windows.Controls.Button.IsCancel%2A> </xref:System.Windows.Controls.Button> </xref:System.Windows.Window.ShowDialog%2A> 如果使用<xref:System.Windows.Window.Show%2A>，但是，关闭必须显式调用，如<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件处理程序<xref:System.Windows.Controls.Button>.</xref:System.Windows.Controls.Button></xref:System.Windows.Controls.Primitives.ButtonBase.Click></xref:System.Windows.Window.Show%2A>打开窗口       关闭窗口会导致<xref:System.Windows.Window.Closing>引发事件。</xref:System.Windows.Window.Closing> 如果<xref:System.Windows.Window.Closing>不取消事件，将发生以下情况:-<xref:System.Windows.Window>从删除<xref:System.Windows.Application.Windows%2A?displayProperty=fullName>(如果<xref:System.Windows.Application>对象存在)。</xref:System.Windows.Application> </xref:System.Windows.Application.Windows%2A?displayProperty=fullName> </xref:System.Windows.Window> </xref:System.Windows.Window.Closing>      -<xref:System.Windows.Window>从所有者删除<xref:System.Windows.Window>如果所有者/附属关系已建立之前拥有<xref:System.Windows.Window>所示和所有者之后<xref:System.Windows.Window>已打开。</xref:System.Windows.Window> </xref:System.Windows.Window> </xref:System.Windows.Window> </xref:System.Windows.Window>      -<xref:System.Windows.Window.Closed>引发事件。</xref:System.Windows.Window.Closed>      非托管资源创建的<xref:System.Windows.Window>释放。</xref:System.Windows.Window>      -如果<xref:System.Windows.Window.ShowDialog%2A>调用以显示<xref:System.Windows.Window>，<xref:System.Windows.Window.ShowDialog%2A>返回。</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window> </xref:System.Windows.Window.ShowDialog%2A>       关闭<xref:System.Windows.Window>会导致它拥有即将关闭任何 windows。</xref:System.Windows.Window> 此外，关闭<xref:System.Windows.Window>可能会导致应用程序停止正在运行的具体取决于如何<xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName>属性设置。</xref:System.Windows.Application.ShutdownMode%2A?displayProperty=fullName> </xref:System.Windows.Window>      1> [!NOTE]&1;> 窗口承载在浏览器时，不能调用此方法。"
  example:
  - "The following example shows a **File** &#124; **Exit** menu being handled to explicitly call Close.  \n  \n [!code-xml[WindowCloseSnippets#WindowCloseXAML](~/add/codesnippet/xaml/WindowCloseSnippets.CSharp/MainWindow.xaml#windowclosexaml)]  \n  \n [!code-cs[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/csharp/WindowCloseSnippets.CSharp/MainWindow.xaml.cs#windowclosecodebehind)]\n [!code-vb[WindowCloseSnippets#WindowCloseCODEBEHIND](~/add/codesnippet/visualbasic/windowclosesnippets/mainwindow.xaml.vb#windowclosecodebehind)]"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Windows.Window.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Closed
  id: Closed
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "当窗口即将关闭时发生。"
  remarks: "一旦将引发此事件，不能阻止结束指定窗口。"
  syntax:
    content: public event EventHandler Closed;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*1> 设置，或<> *1>， <> </> *1>，或<> *1> 窗口正在关闭时调用。"
  platform:
  - net462
- uid: System.Windows.Window.Closing
  id: Closing
  parent: System.Windows.Window
  langs:
  - csharp
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "直接后发生<xref:System.Windows.Window.Close*>调用，并且可以对其进行处理，以便取消关闭窗口。</xref:System.Windows.Window.Close*>"
  remarks: "可以处理结束来检测何时关闭窗口 (例如，当<xref:System.Windows.Window.Close%2A>称为)。</xref:System.Windows.Window.Close%2A> 此外，结束可用来阻止关闭窗口。 若要阻止关闭窗口，可以设置<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.ComponentModel.CancelEventArgs>参数`true`。</xref:System.ComponentModel.CancelEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A>       引发 Closing 事件时<xref:System.Windows.Window.Close%2A>调用时，如果单击窗口关闭按钮时，或者如果用户按 ALT + F4。</xref:System.Windows.Window.Close%2A>       如果拥有的窗口已打开由其所有者窗口中使用<xref:System.Windows.Window.Show%2A>，和所有者窗口封闭式的则不会引发拥有的窗口关闭事件。</xref:System.Windows.Window.Show%2A> 如果所有者窗口已关闭 (请参阅<xref:System.Windows.Window.Owner%2A>) 上拥有窗口, 不引发结束。</xref:System.Windows.Window.Owner%2A>       如果<xref:System.Windows.Application.Shutdown%2A>调用时，结束事件引发的每个窗口。</xref:System.Windows.Application.Shutdown%2A> 但是，如果结算被取消，则忽略取消。       如果由于用户注销或关闭，会话结束，则不会引发结束;处理<xref:System.Windows.Application.SessionEnding>取消应用程序闭包的代码中实现。</xref:System.Windows.Application.SessionEnding>       如果你想要显示和隐藏窗口应用程序生存期内多次，并且你不想要包含重新实例化窗口中显示它每次，你可以处理结束事件，请取消它，并调用<xref:System.Windows.Window.Hide%2A>方法。</xref:System.Windows.Window.Hide%2A> 然后，可以调用<xref:System.Windows.Window.Show%2A>的同一个实例，以重新打开它。</xref:System.Windows.Window.Show%2A>"
  example:
  - "The following example demonstrates a <xref:System.Windows.Window> that determines whether it needs user intervention to close.  \n  \n [!code-xml[WindowClosingSnippets#WindowClosingXAML1](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml1)]  \n[!code-xml[WindowClosingSnippets#WindowClosingXAML2](~/add/codesnippet/xaml/WindowClosingSnippets.CSharp/DataWindow.xaml#windowclosingxaml2)]  \n  \n [!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind1)]\n [!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND1](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind1)]  \n[!code-cs[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/csharp/WindowClosingSnippets.CSharp/DataWindow.xaml.cs#windowclosingcodebehind2)]\n[!code-vb[WindowClosingSnippets#WindowClosingCODEBEHIND2](~/add/codesnippet/visualbasic/windowclosingsnippets/datawindow.xaml.vb#windowclosingcodebehind2)]"
  syntax:
    content: public event System.ComponentModel.CancelEventHandler Closing;
    return:
      type: System.ComponentModel.CancelEventHandler
      description: "要添加。"
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<>*1> 设置，或<> *1>， <> </> *1>，或<> *1> 窗口正在关闭时调用。"
  platform:
  - net462
- uid: System.Windows.Window.ContentRendered
  id: ContentRendered
  parent: System.Windows.Window
  langs:
  - csharp
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "在呈现窗口的内容之后发生。"
  remarks: "如果窗口不具有任何内容，则不会引发此事件。"
  syntax:
    content: public event EventHandler ContentRendered;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Deactivated
  id: Deactivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "当窗口变得后台窗口时发生。"
  remarks: "停用一个窗口 （变成后台窗口） 时:-用户切换到当前应用程序中的另一个窗口。      -A 用户通过使用 ALT + TAB 或使用任务管理器切换到另一个应用程序中的窗口。      -用户单击另一个应用程序中的窗口任务栏按钮。       需要时变成停用处理已停用事件进行检测的 Windows。       窗口首次停用后，它可能会重新激活并在其生存期内多次停用。 如果应用程序的行为或状态取决于其激活状态，它可以检查<xref:System.Windows.Window.IsActive%2A>以确定哪些激活状态的单元</xref:System.Windows.Window.IsActive%2A>       应用程序也可以是<xref:System.Windows.Application.Deactivated>.</xref:System.Windows.Application.Deactivated>"
  syntax:
    content: public event EventHandler Deactivated;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DialogResult
  id: DialogResult
  parent: System.Windows.Window
  langs:
  - csharp
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置对话框结果值，该值是从返回的值<xref:System.Windows.Window.ShowDialog*>方法。</xref:System.Windows.Window.ShowDialog*>"
  remarks: "可以显示一个对话框，以确定用户是否接受代码中使用 DialogResult (`true`) 或已取消 (`false`) 对话框。 如果已接受对话框中，这表示打开对话框中检索用户收集的数据并将其处理的代码。 如果已取消对话框中，但是，这表明调用的代码应停止任何进一步处理。       默认情况下，对话框中时，是否取消用户执行下列操作之一:-PressesALT + F4。      -单击**关闭**按钮。      -选择**关闭**从系统菜单。       在所有这些情况下，DialogResult 是`false`默认情况下。       对话框中通常会提供一个用于取消一个对话框，为按钮的特殊按钮其<xref:System.Windows.Controls.Button.IsCancel%2A>属性设置为`true`。</xref:System.Windows.Controls.Button.IsCancel%2A> 或者它按下时，或按下 ESC 键时，这种方式配置一个按钮将自动关闭窗口。 无论在哪种情况下，DialogResult 保持`false`。       对话框中通常还提供一个接受按钮，这是按钮其<xref:System.Windows.Controls.Button.IsDefault%2A>属性设置为`true`。</xref:System.Windows.Controls.Button.IsDefault%2A> 这种方式配置一个按钮将引发其<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件时按下它或 ENTER 键。</xref:System.Windows.Controls.Primitives.ButtonBase.Click> 但是，它不会自动关闭的对话框中，也没有将它设置 DialogResult 为`true`。 你需要手动编写此代码中，通常从<xref:System.Windows.Controls.Primitives.ButtonBase.Click>事件处理程序的默认按钮。</xref:System.Windows.Controls.Primitives.ButtonBase.Click>       DialogResult 是`null`时显示的对话框但不接受或已取消。       在对话框关闭后，你可以从返回的值获取的对话框结果<xref:System.Windows.Window.ShowDialog%2A>方法，或通过检查 DialogResult 属性。</xref:System.Windows.Window.ShowDialog%2A>       时，才可以设置 DialogResult<xref:System.Windows.Window>打开通过调用其<xref:System.Windows.Window.ShowDialog%2A>方法。</xref:System.Windows.Window.ShowDialog%2A> </xref:System.Windows.Window>      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。"
  example:
  - "The following example shows how to configure an OK button and a Cancel button to return the appropriate DialogResult.  \n  \n [!code-xml[WindowDialogResultSnippets#WindowDialogResultXAML](~/add/codesnippet/xaml/WindowDialogResultSnippets.CSharp/DialogBox.xaml#windowdialogresultxaml)]  \n  \n [!code-cs[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/csharp/WindowDialogResultSnippets.CSharp/DialogBox.xaml.cs#windowdialogresultcodebehind)]\n [!code-vb[WindowDialogResultSnippets#WindowDialogResultCODEBEHIND](~/add/codesnippet/visualbasic/windowdialogresultsnippets/dialogbox.xaml.vb#windowdialogresultcodebehind)]"
  syntax:
    content: public Nullable<bool> DialogResult { get; set; }
    return:
      type: System.Nullable{System.Boolean}
      description: "A &lt;xref:System.Nullable%601&gt;类型<xref:System.Boolean>.</xref:System.Boolean>值 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Window.DialogResult*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "之前通过调用打开一个窗口设置 DialogResult <> </> *1>。      -或-DialogResult 设置在通过调用打开的窗口上<> *1>。"
  platform:
  - net462
- uid: System.Windows.Window.DpiChanged
  id: DpiChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "该窗口是在其屏幕的 DPI 显示更改后发生。"
  syntax:
    content: public event System.Windows.DpiChangedEventHandler DpiChanged;
    return:
      type: System.Windows.DpiChangedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DpiChangedEvent
  id: DpiChangedEvent
  parent: System.Windows.Window
  langs:
  - csharp
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "A <xref href=&quot;System.Windows.RoutedEvent&quot;> </xref>为屏幕窗口的 DPI 时更改。"
  syntax:
    content: public static readonly System.Windows.RoutedEvent DpiChangedEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.DragMove
  id: DragMove
  parent: System.Windows.Window
  langs:
  - csharp
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "允许要通过使用其左键按下鼠标拖动到窗口的工作区的暴露区域上方的窗口。"
  remarks: "DragMove 调用时，鼠标左键必须已关闭。 当按下鼠标左键时进行检测的一种方法是处理<xref:System.Windows.UIElement.MouseLeftButtonDown>事件。</xref:System.Windows.UIElement.MouseLeftButtonDown>       当调用 DragMove 时，必须窗口的工作区的暴露区域上方按下鼠标左键。      1> [!NOTE]&1;> 窗口承载在浏览器时，不能调用此方法。"
  example:
  - "The following example shows how to override <xref:System.Windows.UIElement.OnMouseLeftButtonDown%2A> to call DragMove.  \n  \n [!code-cs[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/csharp/WindowDragMoveSnippets/MainWindow.xaml.cs#callwindowdragmovecodebehind)]\n [!code-vb[WindowDragMoveSnippets#CallWindowDragMoveCODEBEHIND](~/add/codesnippet/visualbasic/windowdragmovesnippets/mainwindow.xaml.vb#callwindowdragmovecodebehind)]"
  syntax:
    content: public void DragMove ();
    parameters: []
  overload: System.Windows.Window.DragMove*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "未按下鼠标左键。"
  platform:
  - net462
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  id: GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回的引用<xref href=&quot;System.Windows.Window&quot;></xref>承载内容的树范围内的依赖对象所在的对象。"
  syntax:
    content: public static System.Windows.Window GetWindow (System.Windows.DependencyObject dependencyObject);
    parameters:
    - id: dependencyObject
      type: System.Windows.DependencyObject
      description: "依赖项对象中。"
    return:
      type: System.Windows.Window
      description: "A <xref href=&quot;System.Windows.Window&quot;> </xref>指向主机窗口的引用。"
  overload: System.Windows.Window.GetWindow*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dependencyObject</code>为 null。"
  platform:
  - net462
- uid: System.Windows.Window.Hide
  id: Hide
  parent: System.Windows.Window
  langs:
  - csharp
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "使窗口不可见。"
  remarks: "当其处于隐藏状态，不关闭窗口并且不<xref:System.Windows.Window.Closing>也不<xref:System.Windows.Window.Closed>引发事件。</xref:System.Windows.Window.Closed> </xref:System.Windows.Window.Closing> 相反，该窗口的<xref:System.Windows.UIElement.Visibility%2A>属性设置为<xref:System.Windows.Visibility?displayProperty=fullName>。</xref:System.Windows.Visibility?displayProperty=fullName> </xref:System.Windows.UIElement.Visibility%2A>       如果一个窗口是应用程序的<xref:System.Windows.Application.MainWindow%2A>和应用程序的<xref:System.Windows.Application.ShutdownMode%2A>是<xref:System.Windows.ShutdownMode>，应用程序不会关闭。</xref:System.Windows.ShutdownMode> </xref:System.Windows.Application.ShutdownMode%2A> </xref:System.Windows.Application.MainWindow%2A> 同样，应用程序不会关闭如果窗口是唯一的窗口，并且应用程序的关闭模式是<xref:System.Windows.ShutdownMode>.</xref:System.Windows.ShutdownMode>       如果你想要显示和隐藏窗口应用程序生存期内多次，并且你不想要重新实例化窗口每次显示它，你可以处理<xref:System.Windows.Window.Closing>事件，取消它，并调用隐藏方法。</xref:System.Windows.Window.Closing> 然后，可以调用<xref:System.Windows.Window.Show%2A>的同一个实例，以重新打开它。</xref:System.Windows.Window.Show%2A>"
  syntax:
    content: public void Hide ();
    parameters: []
  overload: System.Windows.Window.Hide*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在正在关闭的窗口上调用隐藏 (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) 或已关闭 (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)。"
  platform:
  - net462
- uid: System.Windows.Window.Icon
  id: Icon
  parent: System.Windows.Window
  langs:
  - csharp
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置窗口的图标。"
  remarks: "[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]独立应用程序有两种类型的图标:-通过使用指定的一个程序集图标`<ApplicationIcon>`属性在应用程序的项目中生成文件。 此图标用作程序集桌面图标。          1> [!NOTE]&1;> 在调试时 Visual Studio 中，宿主进程由于不可能会出现你图标。 如果你运行可执行文件，则将显示图标。 有关详细信息，请参阅[承载进程 (vshost.exe)](~/add/includes/ajax-current-ext-md.md)。      -每个窗口指定通过设置图标的一个图标。 对每个窗口中，在其标题栏中，其任务栏按钮，以及其 ALT TAB 应用程序选择列表项，则使用此图标。       A[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]窗口始终显示一个图标。 一个不提供了设置图标，[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]选择要显示的图标根据以下规则︰ 1。  如果指定，请使用程序集图标。      2.  如果未指定的程序集图标，则使用默认[!INCLUDE[TLA#tla_win](~/add/includes/ajax-current-ext-md.md)]图标。       如果您使用图标来指定自定义窗口图标，则可以通过将图标设置为还原的默认应用程序图标`null`。       一个图标可以采用多种方式在[!INCLUDE[TLA#tla_mswin](~/add/includes/tlasharptla-mswin-md.md)]，包括标题栏的一个窗口，一个窗口的任务栏中显示 ALT + TAB 文件选择列表。 其中每个演示使用不同的大小; 的图标ALT + TAB 文件选择列表中显示 32 x 32 像素的图标时，16 x 16 像素的图标被显示在窗口的标题栏和任务栏中。 某些应用程序，如[!INCLUDE[TLA#tla_winexpl](~/add/includes/tlasharptla-winexpl-md.md)]，提供**视图**菜单，您可以选择你想要查看的图标的大小。       若要适应不同的显示大小，图标文件由组成一个或多个实际图标其中每个表示面向特定的大小和颜色深度的图标版本。 例如，一个图标可能只有单个 16 x 16 像素图标具有 16 种颜色，而另一个可能包含 16 x 16 像素和 32 x 32 像素图标具有 16 种颜色和 256 种颜色。       如果在图标文件中，存在于所有可能的大小和颜色深度图标<xref:System.Windows.Window>将使用相应图标。</xref:System.Windows.Window> 如果图标文件包含所有可能的图标的一个子集<xref:System.Windows.Window>递减大小和颜色深度的顺序使用下一个最适当的图标。</xref:System.Windows.Window>       结果是一个图标将始终使用由<xref:System.Windows.Window>，尽管所用的图标不可能以目标所需的大小和颜色深度。</xref:System.Windows.Window> 例如，具有 16 种颜色 16 x 16 像素的图标还可能用于进行显示，作为具有 256 种颜色 32 x 32 像素的图标。 这可能会导致意外的视觉效果，如像素化，但可避免通过创建的所有目标的大小和颜色深度图标。      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowIcon&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.IconProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.IconProperty>"
  example:
  - "The following example shows how to set a window icon.  \n  \n [!code-xml[WindowIconSnippets#WindowIconSetXAML](~/add/codesnippet/xaml/WindowIconSnippets.WindowIconSample/MainWindow.xaml#windowiconsetxaml)]  \n  \n [!code-vb[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/visualbasic/windowiconsample/mainwindow.xaml.vb#setwindowiconincode)]\n [!code-cs[WindowIconSnippets#SetWindowIconInCode](~/add/codesnippet/csharp/WindowIconSnippets.WindowIconSample/MainWindow.xaml.cs#setwindowiconincode)]"
  syntax:
    content: public System.Windows.Media.ImageSource Icon { get; set; }
    return:
      type: System.Windows.Media.ImageSource
      description: "<xref href=&quot;System.Windows.Media.ImageSource&quot;> </xref>对象，表示图标。"
  overload: System.Windows.Window.Icon*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IconProperty
  id: IconProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.Icon*>依赖项属性。</xref:System.Windows.Window.Icon*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IconProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActive
  id: IsActive
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取一个值，该值指示窗口是否处于活动状态。"
  remarks: "活动窗口是用户的当前前景色窗口，并具有焦点的标题栏活动外观由表示。 活动窗口也将未显式设置的所有顶级窗口的顶级<xref:System.Windows.Window.Topmost%2A>属性。</xref:System.Windows.Window.Topmost%2A>      <a name=&quot;dependencyPropertyInfo_WindowIsActive&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.IsActiveProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.IsActiveProperty>"
  syntax:
    content: public bool IsActive { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果窗口处于活动状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Window.IsActive*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.IsActiveProperty
  id: IsActiveProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.IsActive*>依赖项属性。</xref:System.Windows.Window.IsActive*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsActiveProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Left
  id: Left
  parent: System.Windows.Window
  langs:
  - csharp
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置窗口的左边缘，相对于桌面的位置。"
  remarks: "当<xref:System.Windows.Window>最大化或最小化，左边的缘的还原点<xref:System.Windows.Window>。</xref:System.Windows.Window>此值表示</xref:System.Windows.Window>       不能通过样式设置此属性。       如果未指定一个值，则会将左侧设置为系统默认值。 此外可以通过设置从左到<xref:System.Double.NaN>.</xref:System.Double.NaN>指定的系统默认值 既不<xref:System.Double.NegativeInfinity>也不<xref:System.Double.PositiveInfinity>是忽略有效的值。</xref:System.Double.PositiveInfinity> </xref:System.Double.NegativeInfinity>      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowLeft&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.LeftProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.LeftProperty>"
  syntax:
    content: public double Left { get; set; }
    return:
      type: System.Double
      description: "窗口的位置的左边缘，逻辑单位 (1/96th 每英寸)。"
  overload: System.Windows.Window.Left*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LeftProperty
  id: LeftProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.Left*>依赖项属性。</xref:System.Windows.Window.Left*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty LeftProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LocationChanged
  id: LocationChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "窗口的位置会发生更改时发生。"
  remarks: "窗口的位置会发生更改时:-用户将窗口移动通过拖动窗口的标题栏。      -A 窗口移动后<xref:System.Windows.Window.DragMove%2A>称为。</xref:System.Windows.Window.DragMove%2A>      -或者<xref:System.Windows.Window.Left%2A>或<xref:System.Windows.Window.Top%2A>以编程方式设置属性。</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A>      -**移动**选择窗口的系统菜单的菜单项。      -<xref:System.Windows.Window.WindowState%2A>属性更改。</xref:System.Windows.Window.WindowState%2A>"
  syntax:
    content: public event EventHandler LocationChanged;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.LogicalChildren
  id: LogicalChildren
  parent: System.Windows.Window
  langs:
  - csharp
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取窗口的逻辑子元素的枚举数。"
  syntax:
    content: protected override System.Collections.IEnumerator LogicalChildren { get; }
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>窗口的逻辑子元素。</xref:System.Collections.IEnumerator>"
  overload: System.Windows.Window.LogicalChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  id: MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  langs:
  - csharp
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "重写此方法来测量窗口的大小。"
  remarks: "时，不将调用 MeasureOverride<xref:System.Windows.UIElement.Visibility%2A>属性具有的<xref:System.Windows.Visibility>.</xref:System.Windows.Visibility>值</xref:System.Windows.UIElement.Visibility%2A> 如果值<xref:System.Windows.UIElement.Visibility%2A>属性<xref:System.Windows.Visibility>或<xref:System.Windows.Visibility>，称为 MeasureOverride。</xref:System.Windows.Visibility> </xref:System.Windows.Visibility> </xref:System.Windows.UIElement.Visibility%2A>      1> [!NOTE]&1;> 时<xref:System.Windows.Window.Show%2A>或<xref:System.Windows.Window.ShowDialog%2A>调用时，<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Window>设置为<xref:System.Windows.Visibility>。</xref:System.Windows.Visibility></xref:System.Windows.Window>的属性</xref:System.Windows.UIElement.Visibility%2A></xref:System.Windows.Window.ShowDialog%2A></xref:System.Windows.Window.Show%2A>"
  syntax:
    content: protected override System.Windows.Size MeasureOverride (System.Windows.Size availableSize);
    parameters:
    - id: availableSize
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;> </xref>反映此窗口可以提供给子级的可用大小。 无穷大可以指定为一个值以指示窗口将为内容的可用大小。"
    return:
      type: System.Windows.Size
      description: "A <xref href=&quot;System.Windows.Size&quot;> </xref> ，反映此窗口确定其在布局中，根据其计算子级的规模的过程所需的大小。"
  overload: System.Windows.Window.MeasureOverride*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  id: OnActivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.Window.Activated&quot;></xref>事件。"
  remarks: "OnActivated 引发<xref:System.Windows.Window.Activated>事件。</xref:System.Windows.Window.Activated>       派生自类型<xref:System.Windows.Window>可能会重写 OnActivated。</xref:System.Windows.Window> 重写的方法必须调用 OnActivated 基本类如果<xref:System.Windows.Window.Activated>需要引发。</xref:System.Windows.Window.Activated>"
  syntax:
    content: protected virtual void OnActivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Window.OnActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  id: OnClosed(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.Window.Closed&quot;></xref>事件。"
  remarks: "OnClosed 引发<xref:System.Windows.Window.Closed>事件。</xref:System.Windows.Window.Closed>       派生自类型<xref:System.Windows.Window>可能会重写 OnClosed。</xref:System.Windows.Window> 重写的方法必须调用 OnClosed 基本类如果<xref:System.Windows.Window.Closed>需要引发。</xref:System.Windows.Window.Closed>"
  syntax:
    content: protected virtual void OnClosed (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Window.OnClosed*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  id: OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.Window.Closing&quot;></xref>事件。"
  remarks: "OnClosing 引发<xref:System.Windows.Window.Closing>事件。</xref:System.Windows.Window.Closing>       派生自类型<xref:System.Windows.Window>可能会重写 OnClosing。</xref:System.Windows.Window> 重写的方法必须调用 OnClosing 基本类如果<xref:System.Windows.Window.Closing>需要引发。</xref:System.Windows.Window.Closing>"
  syntax:
    content: protected virtual void OnClosing (System.ComponentModel.CancelEventArgs e);
    parameters:
    - id: e
      type: System.ComponentModel.CancelEventArgs
      description: "A<xref:System.ComponentModel.CancelEventArgs>包含事件数据。</xref:System.ComponentModel.CancelEventArgs>"
  overload: System.Windows.Window.OnClosing*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  id: OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "时调用<xref:System.Windows.Controls.ContentControl.Content*>属性更改。</xref:System.Windows.Controls.ContentControl.Content*>"
  syntax:
    content: protected override void OnContentChanged (object oldContent, object newContent);
    parameters:
    - id: oldContent
      type: System.Object
      description: "对旧的内容树的根的引用。"
    - id: newContent
      type: System.Object
      description: "对新的内容树的根的引用。"
  overload: System.Windows.Window.OnContentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  id: OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.Window.ContentRendered&quot;></xref>事件。"
  remarks: "OnContentRendered 引发<xref:System.Windows.Window.ContentRendered>事件。</xref:System.Windows.Window.ContentRendered>       派生自类型<xref:System.Windows.Window>可能会重写 OnContentRendered。</xref:System.Windows.Window> 重写的方法必须调用 OnContentRendered 基本类如果<xref:System.Windows.Window.ContentRendered>需要引发。</xref:System.Windows.Window.ContentRendered>"
  syntax:
    content: protected virtual void OnContentRendered (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Window.OnContentRendered*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnCreateAutomationPeer
  id: OnCreateAutomationPeer
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "创建并返回<xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;></xref>对象的<xref href=&quot;System.Windows.Window&quot;> </xref>。"
  remarks: "此方法将替代<xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>.</xref:System.Windows.ContentElement.OnCreateAutomationPeer%2A>"
  syntax:
    content: protected override System.Windows.Automation.Peers.AutomationPeer OnCreateAutomationPeer ();
    parameters: []
    return:
      type: System.Windows.Automation.Peers.AutomationPeer
      description: "A <xref href=&quot;System.Windows.Automation.Peers.WindowAutomationPeer&quot;></xref> object for this <xref href=&quot;System.Windows.Window&quot;></xref>."
  overload: System.Windows.Window.OnCreateAutomationPeer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  id: OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.Window.Deactivated&quot;></xref>事件。"
  remarks: "OnDeactivated 引发<xref:System.Windows.Window.Deactivated>事件。</xref:System.Windows.Window.Deactivated>       派生自类型<xref:System.Windows.Window>可能会重写 OnDeactivated。</xref:System.Windows.Window> 重写的方法必须调用 OnDeactivated 基本类如果<xref:System.Windows.Window.Deactivated>需要引发。</xref:System.Windows.Window.Deactivated>"
  syntax:
    content: protected virtual void OnDeactivated (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Window.OnDeactivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  id: OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "时调用此窗口呈现更改 DPI。"
  syntax:
    content: protected override void OnDpiChanged (System.Windows.DpiScale oldDpi, System.Windows.DpiScale newDpi);
    parameters:
    - id: oldDpi
      type: System.Windows.DpiScale
      description: "以前的 DPI 缩放设置。"
    - id: newDpi
      type: System.Windows.DpiScale
      description: "新的 DPI 缩放设置。"
  overload: System.Windows.Window.OnDpiChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  id: OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.Window.LocationChanged&quot;></xref>事件。"
  remarks: "OnLocationChanged 引发<xref:System.Windows.Window.LocationChanged>事件。</xref:System.Windows.Window.LocationChanged>       派生自类型<xref:System.Windows.Window>可能会重写 OnLocationChanged。</xref:System.Windows.Window> 重写的方法必须调用 OnLocationChanged 基本类如果<xref:System.Windows.Window.LocationChanged>需要引发。</xref:System.Windows.Window.LocationChanged>"
  syntax:
    content: protected virtual void OnLocationChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Window.OnLocationChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  id: OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "时调用<xref href=&quot;System.Windows.UIElement.ManipulationBoundaryFeedback&quot;></xref>事件发生。"
  remarks: "此实现不会更改已处理的状态 (<xref:System.Windows.RoutedEventArgs.Handled%2A>属性) 的<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件数据。</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.RoutedEventArgs.Handled%2A>"
  syntax:
    content: protected override void OnManipulationBoundaryFeedback (System.Windows.Input.ManipulationBoundaryFeedbackEventArgs e);
    parameters:
    - id: e
      type: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
      description: "事件的数据。"
  overload: System.Windows.Window.OnManipulationBoundaryFeedback*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  id: OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.Window.SourceInitialized&quot;></xref>事件。"
  remarks: "OnSourceInitialized 引发<xref:System.Windows.Window.SourceInitialized>事件。</xref:System.Windows.Window.SourceInitialized>       派生自类型<xref:System.Windows.Window>可能会重写 OnSourceInitialized。</xref:System.Windows.Window> 重写的方法必须调用 OnSourceInitialized 基本类如果<xref:System.Windows.Window.SourceInitialized>需要引发。</xref:System.Windows.Window.SourceInitialized>"
  syntax:
    content: protected virtual void OnSourceInitialized (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Window.OnSourceInitialized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  id: OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发<xref href=&quot;System.Windows.Window.StateChanged&quot;></xref>事件。"
  remarks: "OnStateChanged 引发<xref:System.Windows.Window.StateChanged>事件。</xref:System.Windows.Window.StateChanged>       派生自类型<xref:System.Windows.Window>可能会重写 OnStateChanged。</xref:System.Windows.Window> 重写的方法必须调用 OnStateChanged 基本类如果<xref:System.Windows.Window.StateChanged>需要引发。</xref:System.Windows.Window.StateChanged>"
  syntax:
    content: protected virtual void OnStateChanged (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Windows.Window.OnStateChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  id: OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  langs:
  - csharp
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "当窗口的父级发生更改时调用。"
  syntax:
    content: protected override sealed void OnVisualParentChanged (System.Windows.DependencyObject oldParent);
    parameters:
    - id: oldParent
      type: System.Windows.DependencyObject
      description: "先前的父项。 设置为 null <xref href=&quot;System.Windows.DependencyObject&quot;> </xref>没有以前的父级。"
  overload: System.Windows.Window.OnVisualParentChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.OwnedWindows
  id: OwnedWindows
  parent: System.Windows.Window
  langs:
  - csharp
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取用于此窗口是所有者窗口的集合。"
  remarks: "附属的窗口是一个其<xref:System.Windows.Window.Owner%2A>属性设置为另一个窗口，这被称为所有者窗口的引用。</xref:System.Windows.Window.Owner%2A> 若要查找所有者窗口拥有的所有窗口，可以枚举<xref:System.Windows.WindowCollection>OwnedWindows 属性返回。</xref:System.Windows.WindowCollection>"
  example:
  - "The following example shows how to enumerate OwnedWindows.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#getwindowownedwindowscode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#GetWindowOwnedWindowsCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#getwindowownedwindowscode)]"
  syntax:
    content: public System.Windows.WindowCollection OwnedWindows { get; }
    return:
      type: System.Windows.WindowCollection
      description: "A <xref href=&quot;System.Windows.WindowCollection&quot;> </xref>包含对此窗口所有者的窗口为其的引用。"
  overload: System.Windows.Window.OwnedWindows*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Owner
  id: Owner
  parent: System.Windows.Window
  langs:
  - csharp
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置<xref href=&quot;System.Windows.Window&quot;></xref>拥有此<xref href=&quot;System.Windows.Window&quot;> </xref>。"
  remarks: "通过调用由父窗口打开子窗口时<xref:System.Windows.Window.ShowDialog%2A>，父和子窗口之间建立的隐式关系。</xref:System.Windows.Window.ShowDialog%2A> 此关系强制执行某些行为，包括最小化、 最大化，和还原。       通过调用由父窗口创建子窗口时<xref:System.Windows.Window.Show%2A>，但是，子窗口没有与父窗口的关系。</xref:System.Windows.Window.Show%2A> 这意味着:-子窗口不具有向父窗口的引用。      的子窗口行为不依赖于父窗口中; 的行为这两个窗口能够覆盖另一个，或最小化、 最大化，并还原相互独立。       若要让你可以创建子窗口和父窗口，之间的关系<xref:System.Windows.Window>支持所有权的概念。</xref:System.Windows.Window> 当一个窗口 （拥有窗口） 的所有者属性设置为另一个窗口 （所有者窗口） 的引用，将建立所有权。       一旦建立这种关系，则会展现的以下行为:-最小化所有者窗口时，其拥有的所有 windows 最小都化以及。      -如果拥有的窗口已最小化，其所有者不降至最低。      -如果所有者窗口最大化时，将还原所有者窗口和其拥有的 windows。      -An 所有者窗口绝不会覆盖拥有的窗口。      拥有不是使用的 windows<xref:System.Windows.Window.ShowDialog%2A>不是模式对话框。</xref:System.Windows.Window.ShowDialog%2A> 用户仍可以与所有者窗口交互。      -如果你关闭所有者窗口，其拥有的窗口也会关闭。      -如果拥有的窗口已打开由其所有者窗口中使用<xref:System.Windows.Window.Show%2A>，并且所有者窗口已关闭，拥有的窗口<xref:System.Windows.Window.Closing>不会引发事件。</xref:System.Windows.Window.Closing> </xref:System.Windows.Window.Show%2A>       当通过调用打开子窗口<xref:System.Windows.Window.ShowDialog%2A>，还应设置子窗口的所有者属性。</xref:System.Windows.Window.ShowDialog%2A> 如果没有，你的用户将无法还原按任务栏按钮的子窗口和父窗口。 相反，按任务栏按钮将生成 windows 中，包括子与父窗口中的，以帮助用户选择; 的列表将还原所选的窗口。      1> [!IMPORTANT]&1;> 还应设置所有者属性的窗口上，通过调用打开<xref:System.Windows.Window.ShowDialog%2A>以确保使用正确的行为。</xref:System.Windows.Window.ShowDialog%2A>      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。"
  example:
  - "The following example shows how to establish the owner/owned relationship.  \n  \n [!code-vb[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/visualbasic/windowownerownedwindowssnippets/mainwindow.xaml.vb#setwindowownercode)]\n [!code-cs[WindowOwnerOwnedWindowsSnippets#SetWindowOwnerCODE](~/add/codesnippet/csharp/WindowOwnerOwnedWindowsSnippets.CSharp/MainWindow.xaml.cs#setwindowownercode)]"
  syntax:
    content: public System.Windows.Window Owner { get; set; }
    return:
      type: System.Windows.Window
      description: "A <xref href=&quot;System.Windows.Window&quot;> </xref>对象，表示此所有者<xref href=&quot;System.Windows.Window&quot;> </xref>。"
  overload: System.Windows.Window.Owner*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "窗口尝试拥有自身-或者-尝试相互拥有两个窗口。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "显示使用的可见窗口上设置的 Owner 属性<xref:System.Windows.Window.ShowDialog*>-或-与以前未显示窗口设置所有者属性。</xref:System.Windows.Window.ShowDialog*>"
  platform:
  - net462
- uid: System.Windows.Window.ResizeMode
  id: ResizeMode
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置大小调整模式。"
  remarks: "有四个选项:- **NoResize**。 用户不能调整窗口大小。 最大化和最小化框不会显示。      - **CanMinimize**。 用户只能将窗口最小和从任务栏中还原它。 同时会显示最小化和最大化框，但仅最小化框处于启用状态。      - **CanResize**。 用户具有完全能够调整大小窗口中，在窗口中使用最小化和最大化框中，并可拖动大纲。 显示最小化和最大化框并将其启用。 （默认值）。      - **CanResizeWithGrip**。 此选项具有与相同的功能<xref:System.Windows.ResizeMode>，但将&quot;大小调整手柄&quot;添加到窗口右下角。</xref:System.Windows.ResizeMode>      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowResizeMode&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.ResizeModeProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A>|</xref:System.Windows.FrameworkPropertyMetadata.AffectsMeasure%2A> </xref:System.Windows.Window.ResizeModeProperty>"
  syntax:
    content: public System.Windows.ResizeMode ResizeMode { get; set; }
    return:
      type: System.Windows.ResizeMode
      description: "A <xref href=&quot;System.Windows.ResizeMode&quot;> </xref>值，该值指定的大小调整模式。"
  overload: System.Windows.Window.ResizeMode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ResizeModeProperty
  id: ResizeModeProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.ResizeMode*>依赖项属性。</xref:System.Windows.Window.ResizeMode*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ResizeModeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.RestoreBounds
  id: RestoreBounds
  parent: System.Windows.Window
  langs:
  - csharp
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "在正在最小化或最大化之前获取的大小和窗口的位置。"
  remarks: "还原矩形是之前它是最小化或最大化窗口占用的区域。 你可以使用 RestoreBounds 之前关闭应用程序时，将保存的最后一个大小和窗口的位置，并在下次应用程序开始将窗口还原到其处于用户的方式检索这些值。       如果显示窗口之前或之后它已关闭，查询 RestoreBounds<xref:System.Windows.Rect.Empty%2A>返回。</xref:System.Windows.Rect.Empty%2A>      1> [!NOTE]&1;> 窗口托管的浏览器中时，无法获取此属性。"
  example:
  - "The following example uses RestoreBounds and isolated storage to ensure the size and location of a window are the same as they were the previous time the window was shown.  \n  \n [!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML1](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml1)]  \n[!code-xml[WindowRestoreBoundsSnippets#WindowRestoreBoundsXAML2](~/add/codesnippet/xaml/WindowRestoreBoundsSnippets/MainWindow.xaml#windowrestoreboundsxaml2)]  \n  \n [!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind1)]\n [!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND1](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind1)]  \n[!code-vb[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/visualbasic/windowrestoreboundssnippets/mainwindow.xaml.vb#windowrestoreboundscodebehind2)]\n[!code-cs[WindowRestoreBoundsSnippets#WindowRestoreBoundsCODEBEHIND2](~/add/codesnippet/csharp/WindowRestoreBoundsSnippets/MainWindow.xaml.cs#windowrestoreboundscodebehind2)]"
  syntax:
    content: public System.Windows.Rect RestoreBounds { get; }
    return:
      type: System.Windows.Rect
      description: "A <xref href=&quot;System.Windows.Rect&quot;> </xref> ，它指定的大小和窗口的位置在前最小化或最大化。"
  overload: System.Windows.Window.RestoreBounds*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Show
  id: Show
  parent: System.Windows.Window
  langs:
  - csharp
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "将打开一个窗口，并返回而不等待关闭新打开窗口。"
  remarks: "当<xref:System.Windows.Window>实例化类时，默认情况下看不到。</xref:System.Windows.Window> 显示显示了一个窗口并立即返回，而不等待窗口即将关闭。 因此，已打开的窗口不会阻止用户与其他 windows 应用程序中进行交互。 此类型的窗口称为*无模式*窗口。 无模式窗口的常见示例包括属性窗口、 工具箱和调色板。 若要限制用户交互与特定窗口，窗口必须通过调用<xref:System.Windows.Window.ShowDialog%2A>.</xref:System.Windows.Window.ShowDialog%2A>打开       通过调用显示打开的窗口不自动具有与打开它; 的窗口之间的关系具体而言，打开窗口不知道哪个窗口打开它。 可以使用建立这种关系<xref:System.Windows.Window.Owner%2A>属性和托管使用<xref:System.Windows.Window.OwnedWindows%2A>属性。</xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.Owner%2A>       调用显示实现相同的最终结果，作为设置<xref:System.Windows.UIElement.Visibility%2A><xref:System.Windows.Window>到<xref:System.Windows.Visibility>。</xref:System.Windows.Visibility>对象</xref:System.Windows.Window>属性</xref:System.Windows.UIElement.Visibility%2A> 但是，没有从计时角度来看这两者之间的区别。       调用显示是之后才会返回一个同步操作<xref:System.Windows.FrameworkElement.Loaded>引发子窗口上的事件︰ [!code-vb [WindowShowTimingSnippets #ShowSync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showsync)][!code-cs[WindowShowTimingSnippets #ShowSync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showsync) ]设置<xref:System.Windows.UIElement.Visibility%2A>，但是，将立即返回的异步操作︰ [!code-vb [WindowShowTimingSnippets #ShowASync](~/add/codesnippet/visualbasic/windowshowtimingsnippets/window1.xaml.vb#showasync)][!code-cs[WindowShowTimingSnippets #ShowASync](~/add/codesnippet/csharp/WindowShowTimingSnippets.CSharp/Window1.xaml.cs#showasync) ]设置时<xref:System.Windows.UIElement.Visibility%2A>，注册之前设置任何窗口事件<xref:System.Windows.UIElement.Visibility%2A>不可能在其中你设置的方法后直到引发<xref:System.Windows.UIElement.Visibility%2A>执行完毕。</xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A> </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.UIElement.Visibility%2A>   </xref:System.Windows.FrameworkElement.Loaded>"
  example:
  - "The following sample demonstrates how to open a modeless window.  \n  \n [!code-vb[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/visualbasic/windowshowsnippets/mainwindow.xaml.vb#windowshowcode)]\n [!code-cs[WindowShowSnippets#WindowShowCODE](~/add/codesnippet/csharp/WindowShowSnippets.CSharp/MainWindow.xaml.cs#windowshowcode)]"
  syntax:
    content: public void Show ();
    parameters: []
  overload: System.Windows.Window.Show*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在正在关闭的窗口上调用显示 (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) 或已关闭 (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)。"
  platform:
  - net462
- uid: System.Windows.Window.ShowActivated
  id: ShowActivated
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，指示首次显示时是否激活窗口。"
  remarks: "当其 ShowActivated 属性设置为窗口`false`是打开，显示窗口不激活并其<xref:System.Windows.Window.Activated>直到用户手动激活窗口，通过选择它，则不会引发事件</xref:System.Windows.Window.Activated> 窗口被选中之后，它激活，并且通常会停用。       若要防止在打开时激活一个窗口，ShowActivated 属性必须设置为`false`显示窗口之前 (通过调用<xref:System.Windows.Window.Show%2A>); 将 ShowActivated 设置为`false`窗口将显示不起作用后。</xref:System.Windows.Window.Show%2A>       设置为 ShowActivated`false`通过调用以模式方式打开的窗口上<xref:System.Windows.Window.ShowDialog%2A>，无任何实际影响。</xref:System.Windows.Window.ShowDialog%2A> 尽管未将激活模式窗口，模式窗口会阻止用户激活任何其他打开的应用程序窗口。      <a name=&quot;dependencyPropertyInfo_WindowShowActivated&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.ShowActivatedProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.ShowActivatedProperty>"
  example:
  - "The following example shows how to use markup to configure a window to be opened without being activated.  \n  \n [!code-xml[WindowShowActivatedSnippets#ShowUnactivatedMARKUP1](~/add/codesnippet/xaml/WindowShowActivatedSnippets/AWindow.xaml#showunactivatedmarkup1)]  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/csharp/WindowShowActivatedSnippets/AWindow.xaml.cs#showunactivatedcodebehind)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedCODEBEHIND](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/awindow.xaml.vb#showunactivatedcodebehind)]  \n  \n The following example shows how to use code to configure a window to be opened without it being activated.  \n  \n [!code-cs[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/csharp/WindowShowActivatedSnippets/Window1.xaml.cs#showunactivatedwindowcode)]\n [!code-vb[WindowShowActivatedSnippets#ShowUnactivatedWindowCODE](~/add/codesnippet/visualbasic/windowshowactivatedsnippets/window1.xaml.vb#showunactivatedwindowcode)]"
  syntax:
    content: public bool ShowActivated { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果首次显示; 时，将激活窗口否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Window.ShowActivated*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowActivatedProperty
  id: ShowActivatedProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.ShowActivated*>依赖项属性。</xref:System.Windows.Window.ShowActivated*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowActivatedProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowDialog
  id: ShowDialog
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "将打开一个窗口，并关闭新打开的窗口时，才返回。"
  remarks: "当<xref:System.Windows.Window>实例化类时，默认情况下看不到。</xref:System.Windows.Window> ShowDialog 显示的窗口、 禁用应用程序中的所有其他窗口和窗口关闭时，才返回。 这种类型的窗口称为*模式*窗口。       模式窗口主要用作对话框。 对话框中是窗口的一种特殊类型的应用程序用于与用户来完成任务，例如打开文件或打印文档进行交互。 对话框通常允许用户接受或取消它们已为其显示之前关闭对话框中的任务。 ShowDialog 返回<xref:System.Nullable%601><xref:System.Boolean>值，该值指定是否接受或取消活动。</xref:System.Boolean></xref:System.Nullable%601> 返回值的值<xref:System.Windows.Window.DialogResult%2A>窗口关闭之前的属性。</xref:System.Windows.Window.DialogResult%2A> 有关详细信息，请参阅<xref:System.Windows.Window.DialogResult%2A>。</xref:System.Windows.Window.DialogResult%2A>       通过调用 ShowDialog 方法打开的窗口不自动具有与打开它; 的窗口之间的关系具体而言，打开窗口不知道哪个窗口打开它。 可以使用建立这种关系<xref:System.Windows.Window.Owner%2A>属性和托管使用<xref:System.Windows.Window.OwnedWindows%2A>属性。</xref:System.Windows.Window.OwnedWindows%2A> </xref:System.Windows.Window.Owner%2A> 若要支持[!INCLUDE[TLA2#tla_ui](~/add/includes/ajax-current-ext-md.md)]自动化 (请参阅[UI 自动化概述](~/add/includes/ajax-current-ext-md.md))，<xref:System.Windows.Window.Owner%2A>必须为通过调用 ShowDialog 打开的窗口设置。</xref:System.Windows.Window.Owner%2A>       当模式[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]窗口 （通过调用 ShowDialog 打开的窗口） 封闭式的重新激活以前激活的窗口。 如果在安装结束时[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]窗口包含一个所有者窗口 (请参阅<xref:System.Windows.Window.Owner%2A>)，不是所有者窗口重新激活时模式[!INCLUDE[TLA2#tla_wpf](~/add/includes/ajax-current-ext-md.md)]窗口已关闭，除非它是窗口以前已经激活。</xref:System.Windows.Window.Owner%2A>      1> [!NOTE]&1;> 窗口承载在浏览器时，不能调用此方法。"
  example:
  - "The following sample demonstrates how to open a modal window.  \n  \n [!code-cs[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/csharp/WindowShowDialogSnippets.CSharp/MainWindow.xaml.cs#windowshowdialogcode)]\n [!code-vb[WindowShowDialogSnippets#WindowShowDialogCODE](~/add/codesnippet/visualbasic/windowshowdialogsnippets/mainwindow.xaml.vb#windowshowdialogcode)]"
  syntax:
    content: public Nullable<bool> ShowDialog ();
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
      description: "A &lt;xref:System.Nullable%601&gt;类型的值<xref:System.Boolean>，它指定活动是否已接受 (<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>) 或已取消 (<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>)。</xref:System.Boolean> 返回值的值<xref:System.Windows.Window.DialogResult*>窗口关闭之前的属性。</xref:System.Windows.Window.DialogResult*>"
  overload: System.Windows.Window.ShowDialog*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在正在关闭的窗口上调用 ShowDialog (<xref href=&quot;System.Windows.Window.Closing&quot;></xref>) 或已关闭 (<xref href=&quot;System.Windows.Window.Closed&quot;></xref>)。"
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbar
  id: ShowInTaskbar
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示窗口是否具有任务栏按钮。"
  remarks: "如果 ShowInTaskbar 设置为`true`，还将 ALT + TAB 应用程序选择列表中显示该窗口。       适用于任务栏按钮和 ALT + TAB 应用程序选择列表的图标是值的<xref:System.Windows.Window.Icon%2A>属性。</xref:System.Windows.Window.Icon%2A>      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowShowInTaskbar&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.ShowInTaskbarProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.ShowInTaskbarProperty>"
  syntax:
    content: public bool ShowInTaskbar { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果窗口具有任务栏按钮;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 窗口承载在浏览器时，不适用。"
  overload: System.Windows.Window.ShowInTaskbar*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.ShowInTaskbarProperty
  id: ShowInTaskbarProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.ShowInTaskbar*>依赖项属性。</xref:System.Windows.Window.ShowInTaskbar*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty ShowInTaskbarProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContent
  id: SizeToContent
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示是否窗口是否自动调整自身大小以适应其内容的大小。"
  remarks: "当 SizeToContent 设置为<xref:System.Windows.SizeToContent>，设置<xref:System.Windows.FrameworkElement.Height%2A>或<xref:System.Windows.FrameworkElement.Width%2A>不起作用; 可以设置这两个属性，但使用设置的值不会应用到窗口。</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.SizeToContent>       当 SizeToContent 设置为<xref:System.Windows.SizeToContent>，则设置<xref:System.Windows.FrameworkElement.Height%2A>不会更改窗口的高度。</xref:System.Windows.FrameworkElement.Height%2A> </xref:System.Windows.SizeToContent>       当 SizeToContent 设置为<xref:System.Windows.SizeToContent>，则设置<xref:System.Windows.FrameworkElement.Width%2A>不会更改窗口的宽度。</xref:System.Windows.FrameworkElement.Width%2A> </xref:System.Windows.SizeToContent>       如果 SizeToContent 具有值以外<xref:System.Windows.SizeToContent>:-SizeToContent 自动设置为<xref:System.Windows.SizeToContent>如果用户通过使用大小调整手柄或拖动边框来调整窗口大小时。</xref:System.Windows.SizeToContent> </xref:System.Windows.SizeToContent>      -如果内容的大小发生更改，则会自行调整大小，窗口的方式<xref:System.Windows.FrameworkElement.SizeChanged>引发。</xref:System.Windows.FrameworkElement.SizeChanged>       如果一个窗口是透明 (请参阅<xref:System.Windows.Window.AllowsTransparency%2A>)，应考虑将 SizeToContent 设置为<xref:System.Windows.SizeToContent>以确保窗口是不大于其可见内容。</xref:System.Windows.SizeToContent> </xref:System.Windows.Window.AllowsTransparency%2A>      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowSizeToContent&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.SizeToContentProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.SizeToContentProperty>"
  example:
  - "The following example shows how to set the SizeToContent property in code to specify how a window resizes to fit its content.  \n  \n [!code-vb[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/visualbasic/howtowindowmanagementsnippets/mainwindow.xaml.vb#setwindowsizetocontentpropertycode)]\n [!code-cs[HOWTOWindowManagementSnippets#SetWindowSizeToContentPropertyCODE](~/add/codesnippet/csharp/HOWTOWindowManagementSnippets/MainWindow.xaml.cs#setwindowsizetocontentpropertycode)]"
  syntax:
    content: public System.Windows.SizeToContent SizeToContent { get; set; }
    return:
      type: System.Windows.SizeToContent
      description: "A <xref href=&quot;System.Windows.SizeToContent&quot;></xref> value. 默认值是<xref href=&quot;System.Windows.SizeToContent&quot;> </xref>。"
  overload: System.Windows.Window.SizeToContent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SizeToContentProperty
  id: SizeToContentProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.SizeToContent*>依赖项属性。</xref:System.Windows.Window.SizeToContent*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty SizeToContentProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.SourceInitialized
  id: SourceInitialized
  parent: System.Windows.Window
  langs:
  - csharp
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "引发此事件以支持与互操作[!INCLUDE[TLA#tla_win32](~/add/includes/tlasharptla-win32-md.md)]。 See <xref href=&quot;System.Windows.Interop.HwndSource&quot;></xref>."
  syntax:
    content: public event EventHandler SourceInitialized;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.StateChanged
  id: StateChanged
  parent: System.Windows.Window
  langs:
  - csharp
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
  type: Event
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "发生时窗口的<xref:System.Windows.Window.WindowState*>属性更改。</xref:System.Windows.Window.WindowState*>"
  syntax:
    content: public event EventHandler StateChanged;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfo
  id: TaskbarItemInfo
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置[!INCLUDE[win7](~/add/includes/win7-md.md)]任务栏缩略图<xref href=&quot;System.Windows.Window&quot;> </xref>。"
  remarks: "有关如何使用[!INCLUDE[win7](~/add/includes/win7-md.md)]任务栏缩略图，请参阅<xref:System.Windows.Shell.TaskbarItemInfo>类。</xref:System.Windows.Shell.TaskbarItemInfo>"
  syntax:
    content: public System.Windows.Shell.TaskbarItemInfo TaskbarItemInfo { get; set; }
    return:
      type: System.Windows.Shell.TaskbarItemInfo
      description: "[!INCLUDE[win7](~/add/includes/win7-md.md)]任务栏缩略图<xref href=&quot;System.Windows.Window&quot;> </xref>。"
  overload: System.Windows.Window.TaskbarItemInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TaskbarItemInfoProperty
  id: TaskbarItemInfoProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.TaskbarItemInfo*>依赖项属性。</xref:System.Windows.Window.TaskbarItemInfo*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TaskbarItemInfoProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Title
  id: Title
  parent: System.Windows.Window
  langs:
  - csharp
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置窗口的标题。"
  remarks: "标题<xref:System.Windows.Window>， <xref:System.Windows.Navigation.NavigationWindow>，或[!INCLUDE[TLA#tla_iegeneric](~/add/includes/tlasharptla-iegeneric-md.md)]，还可以通过使用<xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>。</xref:System.Windows.Controls.Page.WindowTitle%2A?displayProperty=fullName>设置</xref:System.Windows.Navigation.NavigationWindow></xref:System.Windows.Window>      <a name=&quot;dependencyPropertyInfo_WindowTitle&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.TitleProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.TitleProperty>"
  syntax:
    content: public string Title { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>包含窗口的标题。</xref:System.String>"
  overload: System.Windows.Window.Title*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TitleProperty
  id: TitleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.Title*>依赖项属性。</xref:System.Windows.Window.Title*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TitleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Top
  id: Top
  parent: System.Windows.Window
  langs:
  - csharp
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置窗口的上边缘，相对于桌面的位置。"
  remarks: "当<xref:System.Windows.Window>最大化或最小化，此值表示<xref:System.Windows.Window>。</xref:System.Windows.Window>的上边缘的还原点</xref:System.Windows.Window>       不能通过样式设置此属性。       如果未指定一个值，顶部设置为系统默认值。 此外可以通过设置到<xref:System.Double.NaN>。</xref:System.Double.NaN>顶部指定的系统默认值 既不<xref:System.Double.NegativeInfinity>也不<xref:System.Double.PositiveInfinity>前是有效的值。</xref:System.Double.PositiveInfinity> </xref:System.Double.NegativeInfinity>      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowTop&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.TopProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.TopProperty>"
  syntax:
    content: public double Top { get; set; }
    return:
      type: System.Double
      description: "窗口的顶部，逻辑单元 （1/96 英寸） 中的位置。"
  overload: System.Windows.Window.Top*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.Topmost
  id: Topmost
  parent: System.Windows.Window
  langs:
  - csharp
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示是否在顶层的 z 顺序中将显示一个窗口。"
  remarks: "窗口的最顶层的属性设置为`true`显示最重要的是 windows 其最顶层的属性设置为`false`。       组中的 windows 具有 Topmost 属性设置为`true`，当前激活的窗口为最顶端窗口。 同样具有 Topmost 的 windows 组的属性设置为`false`。      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowTopmost&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.TopmostProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.TopmostProperty>"
  syntax:
    content: public bool Topmost { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该窗口为最顶层;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Window.Topmost*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopmostProperty
  id: TopmostProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.Topmost*>依赖项属性。</xref:System.Windows.Window.Topmost*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopmostProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.TopProperty
  id: TopProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.Top*>依赖项属性。</xref:System.Windows.Window.Top*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty TopProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStartupLocation
  id: WindowStartupLocation
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置窗口首次显示时的位置。"
  remarks: "设置<xref:System.Windows.WindowStartupLocation>到<xref:System.Windows.WindowStartupLocation>会打开一个窗口来定位根据其<xref:System.Windows.Window.Left%2A>和<xref:System.Windows.Window.Top%2A>属性值。</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A> </xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation> 如果任一<xref:System.Windows.Window.Left%2A>或<xref:System.Windows.Window.Top%2A>属性均未指定，其值由[!INCLUDE[TLA2#tla_mswin](~/add/includes/tla2sharptla-mswin-md.md)]。</xref:System.Windows.Window.Top%2A> </xref:System.Windows.Window.Left%2A>       设置<xref:System.Windows.WindowStartupLocation>导致窗口在屏幕，其中包含鼠标光标的中心定位。</xref:System.Windows.WindowStartupLocation>       设置<xref:System.Windows.WindowStartupLocation>到<xref:System.Windows.WindowStartupLocation>导致窗口在其所有者窗口的中心来定位 (请参阅<xref:System.Windows.Window.Owner%2A>) 如果指定，则。</xref:System.Windows.Window.Owner%2A> </xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation> 另一个 WPF 窗口或非 WPF 窗口，可以是所有者窗口。      1> [!NOTE]&1;> 有关与非 WPF 窗口的 WPF 窗口的详细信息，请参阅[WPF 和 Win32 间的互操作](~/add/includes/ajax-current-ext-md.md)和<xref:System.Windows.Interop.WindowInteropHelper>。</xref:System.Windows.Interop.WindowInteropHelper>       如果未指定所有者窗口，窗口的位置由相同的方式就像<xref:System.Windows.WindowStartupLocation>设置为<xref:System.Windows.WindowStartupLocation>。</xref:System.Windows.WindowStartupLocation> </xref:System.Windows.WindowStartupLocation>      1> [!NOTE]&1;> 无法设置或获取此属性的值，当一个窗口承载于浏览器。"
  syntax:
    content: public System.Windows.WindowStartupLocation WindowStartupLocation { get; set; }
    return:
      type: System.Windows.WindowStartupLocation
      description: "A <xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref>值，该值指定当首次显示窗口的顶部/左侧位置。 默认值是<xref href=&quot;System.Windows.WindowStartupLocation&quot;> </xref>。"
  overload: System.Windows.Window.WindowStartupLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowState
  id: WindowState
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置一个值，该值指示窗口是否是还原、 最小化，或最大化。"
  remarks: "最小化或最大化窗口之前，则会将其大小和位置存储在<xref:System.Windows.Window.RestoreBounds%2A>。</xref:System.Windows.Window.RestoreBounds%2A> 当随后还原窗口时，其大小和位置的值将还原<xref:System.Windows.Window.RestoreBounds%2A>.</xref:System.Windows.Window.RestoreBounds%2A>中的值       WindowState 属性更改时，<xref:System.Windows.Window.StateChanged>引发。</xref:System.Windows.Window.StateChanged>      1> [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowWindowState&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.WindowStateProperty>|  |元数据属性设置为`true`|<xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A>|</xref:System.Windows.FrameworkPropertyMetadata.BindsTwoWayByDefault%2A> </xref:System.Windows.Window.WindowStateProperty>"
  syntax:
    content: public System.Windows.WindowState WindowState { get; set; }
    return:
      type: System.Windows.WindowState
      description: "A <xref href=&quot;System.Windows.WindowState&quot;> </xref> ，它确定窗口是否是还原、 最小化，或最大化。 默认值是<xref href=&quot;System.Windows.WindowState&quot;> </xref> （还原）。"
  overload: System.Windows.Window.WindowState*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStateProperty
  id: WindowStateProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.WindowState*>依赖项属性。</xref:System.Windows.Window.WindowState*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStateProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyle
  id: WindowStyle
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置窗口的边框样式。"
  remarks: "WindowStyle 可以是之一<xref:System.Windows.WindowStyle>枚举值，包括<xref:System.Windows.WindowStyle>， <xref:System.Windows.WindowStyle>， <xref:System.Windows.WindowStyle>（默认值）、 和<xref:System.Windows.WindowStyle>。</xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle> </xref:System.Windows.WindowStyle>       下图上显示的窗口样式[!INCLUDE[TLA#tla_longhorn](~/add/includes/ajax-current-ext-md.md)]（透明玻璃启用与 Windows Vista Aero 主题）︰![窗口样式](~/add/media/windowoverviewfigure6.PNG &quot;窗口样式&quot;)      >  [!NOTE]&1;> 不能设置或获取此属性，当一个窗口承载于浏览器。      <a name=&quot;dependencyPropertyInfo_WindowWindowStyle&quot;></a># # 依赖项属性信息 | | |  |-|-|  |标识符字段 |<xref:System.Windows.Window.WindowStyleProperty>|  |元数据属性设置为`true`|None |</xref:System.Windows.Window.WindowStyleProperty>"
  syntax:
    content: public System.Windows.WindowStyle WindowStyle { get; set; }
    return:
      type: System.Windows.WindowStyle
      description: "A <xref href=&quot;System.Windows.WindowStyle&quot;> </xref> ，它指定窗口的边框样式。 默认值是<xref href=&quot;System.Windows.WindowStyle&quot;> </xref>。"
  overload: System.Windows.Window.WindowStyle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Window.WindowStyleProperty
  id: WindowStyleProperty
  parent: System.Windows.Window
  langs:
  - csharp
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
  type: Field
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "标识<xref:System.Windows.Window.WindowStyle*>依赖项属性。</xref:System.Windows.Window.WindowStyle*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty WindowStyleProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Controls.ContentControl
  isExternal: false
  name: System.Windows.Controls.ContentControl
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Window.#ctor
  parent: System.Windows.Window
  isExternal: false
  name: Window()
  nameWithType: Window.Window()
  fullName: System.Windows.Window.Window()
- uid: System.Windows.Window.Activate
  parent: System.Windows.Window
  isExternal: false
  name: Activate()
  nameWithType: Window.Activate()
  fullName: System.Windows.Window.Activate()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Window.Activated
  parent: System.Windows.Window
  isExternal: false
  name: Activated
  nameWithType: Window.Activated
  fullName: System.Windows.Window.Activated
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.Windows.Window.AllowsTransparency
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
  fullName: System.Windows.Window.AllowsTransparency
- uid: System.Windows.Window.AllowsTransparencyProperty
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparencyProperty
  nameWithType: Window.AllowsTransparencyProperty
  fullName: System.Windows.Window.AllowsTransparencyProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Window.ArrangeOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride(Size)
  nameWithType: Window.ArrangeOverride(Size)
  fullName: System.Windows.Window.ArrangeOverride(Size)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Window.Close
  parent: System.Windows.Window
  isExternal: false
  name: Close()
  nameWithType: Window.Close()
  fullName: System.Windows.Window.Close()
- uid: System.Windows.Window.Closed
  parent: System.Windows.Window
  isExternal: false
  name: Closed
  nameWithType: Window.Closed
  fullName: System.Windows.Window.Closed
- uid: System.Windows.Window.Closing
  parent: System.Windows.Window
  isExternal: false
  name: Closing
  nameWithType: Window.Closing
  fullName: System.Windows.Window.Closing
- uid: System.ComponentModel.CancelEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CancelEventHandler
  nameWithType: CancelEventHandler
  fullName: System.ComponentModel.CancelEventHandler
- uid: System.Windows.Window.ContentRendered
  parent: System.Windows.Window
  isExternal: false
  name: ContentRendered
  nameWithType: Window.ContentRendered
  fullName: System.Windows.Window.ContentRendered
- uid: System.Windows.Window.Deactivated
  parent: System.Windows.Window
  isExternal: false
  name: Deactivated
  nameWithType: Window.Deactivated
  fullName: System.Windows.Window.Deactivated
- uid: System.Windows.Window.DialogResult
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
  fullName: System.Windows.Window.DialogResult
- uid: System.Nullable{System.Boolean}
  parent: System
  isExternal: true
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Boolean>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Window.DpiChanged
  parent: System.Windows.Window
  isExternal: false
  name: DpiChanged
  nameWithType: Window.DpiChanged
  fullName: System.Windows.Window.DpiChanged
- uid: System.Windows.DpiChangedEventHandler
  parent: System.Windows
  isExternal: false
  name: DpiChangedEventHandler
  nameWithType: DpiChangedEventHandler
  fullName: System.Windows.DpiChangedEventHandler
- uid: System.Windows.Window.DpiChangedEvent
  parent: System.Windows.Window
  isExternal: false
  name: DpiChangedEvent
  nameWithType: Window.DpiChangedEvent
  fullName: System.Windows.Window.DpiChangedEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Window.DragMove
  parent: System.Windows.Window
  isExternal: false
  name: DragMove()
  nameWithType: Window.DragMove()
  fullName: System.Windows.Window.DragMove()
- uid: System.Windows.Window.GetWindow(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow(DependencyObject)
  nameWithType: Window.GetWindow(DependencyObject)
  fullName: System.Windows.Window.GetWindow(DependencyObject)
- uid: System.Windows.Window
  parent: System.Windows
  isExternal: false
  name: Window
  nameWithType: Window
  fullName: System.Windows.Window
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.Window.Hide
  parent: System.Windows.Window
  isExternal: false
  name: Hide()
  nameWithType: Window.Hide()
  fullName: System.Windows.Window.Hide()
- uid: System.Windows.Window.Icon
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
  fullName: System.Windows.Window.Icon
- uid: System.Windows.Media.ImageSource
  parent: System.Windows.Media
  isExternal: false
  name: ImageSource
  nameWithType: ImageSource
  fullName: System.Windows.Media.ImageSource
- uid: System.Windows.Window.IconProperty
  parent: System.Windows.Window
  isExternal: false
  name: IconProperty
  nameWithType: Window.IconProperty
  fullName: System.Windows.Window.IconProperty
- uid: System.Windows.Window.IsActive
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
  fullName: System.Windows.Window.IsActive
- uid: System.Windows.Window.IsActiveProperty
  parent: System.Windows.Window
  isExternal: false
  name: IsActiveProperty
  nameWithType: Window.IsActiveProperty
  fullName: System.Windows.Window.IsActiveProperty
- uid: System.Windows.Window.Left
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
  fullName: System.Windows.Window.Left
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Window.LeftProperty
  parent: System.Windows.Window
  isExternal: false
  name: LeftProperty
  nameWithType: Window.LeftProperty
  fullName: System.Windows.Window.LeftProperty
- uid: System.Windows.Window.LocationChanged
  parent: System.Windows.Window
  isExternal: false
  name: LocationChanged
  nameWithType: Window.LocationChanged
  fullName: System.Windows.Window.LocationChanged
- uid: System.Windows.Window.LogicalChildren
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
  fullName: System.Windows.Window.LogicalChildren
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Windows.Window.MeasureOverride(System.Windows.Size)
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride(Size)
  nameWithType: Window.MeasureOverride(Size)
  fullName: System.Windows.Window.MeasureOverride(Size)
- uid: System.Windows.Window.OnActivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated(EventArgs)
  nameWithType: Window.OnActivated(EventArgs)
  fullName: System.Windows.Window.OnActivated(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.Window.OnClosed(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed(EventArgs)
  nameWithType: Window.OnClosed(EventArgs)
  fullName: System.Windows.Window.OnClosed(EventArgs)
- uid: System.Windows.Window.OnClosing(System.ComponentModel.CancelEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing(CancelEventArgs)
  nameWithType: Window.OnClosing(CancelEventArgs)
  fullName: System.Windows.Window.OnClosing(CancelEventArgs)
- uid: System.ComponentModel.CancelEventArgs
  parent: System.ComponentModel
  isExternal: true
  name: CancelEventArgs
  nameWithType: CancelEventArgs
  fullName: System.ComponentModel.CancelEventArgs
- uid: System.Windows.Window.OnContentChanged(System.Object,System.Object)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged(Object,Object)
  nameWithType: Window.OnContentChanged(Object,Object)
  fullName: System.Windows.Window.OnContentChanged(Object,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Window.OnContentRendered(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered(EventArgs)
  nameWithType: Window.OnContentRendered(EventArgs)
  fullName: System.Windows.Window.OnContentRendered(EventArgs)
- uid: System.Windows.Window.OnCreateAutomationPeer
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer()
  nameWithType: Window.OnCreateAutomationPeer()
  fullName: System.Windows.Window.OnCreateAutomationPeer()
- uid: System.Windows.Automation.Peers.AutomationPeer
  parent: System.Windows.Automation.Peers
  isExternal: false
  name: AutomationPeer
  nameWithType: AutomationPeer
  fullName: System.Windows.Automation.Peers.AutomationPeer
- uid: System.Windows.Window.OnDeactivated(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated(EventArgs)
  nameWithType: Window.OnDeactivated(EventArgs)
  fullName: System.Windows.Window.OnDeactivated(EventArgs)
- uid: System.Windows.Window.OnDpiChanged(System.Windows.DpiScale,System.Windows.DpiScale)
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged(DpiScale,DpiScale)
  nameWithType: Window.OnDpiChanged(DpiScale,DpiScale)
  fullName: System.Windows.Window.OnDpiChanged(DpiScale,DpiScale)
- uid: System.Windows.DpiScale
  parent: System.Windows
  isExternal: false
  name: DpiScale
  nameWithType: DpiScale
  fullName: System.Windows.DpiScale
- uid: System.Windows.Window.OnLocationChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged(EventArgs)
  nameWithType: Window.OnLocationChanged(EventArgs)
  fullName: System.Windows.Window.OnLocationChanged(EventArgs)
- uid: System.Windows.Window.OnManipulationBoundaryFeedback(System.Windows.Input.ManipulationBoundaryFeedbackEventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  nameWithType: Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
  fullName: System.Windows.Window.OnManipulationBoundaryFeedback(ManipulationBoundaryFeedbackEventArgs)
- uid: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationBoundaryFeedbackEventArgs
  nameWithType: ManipulationBoundaryFeedbackEventArgs
  fullName: System.Windows.Input.ManipulationBoundaryFeedbackEventArgs
- uid: System.Windows.Window.OnSourceInitialized(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized(EventArgs)
  nameWithType: Window.OnSourceInitialized(EventArgs)
  fullName: System.Windows.Window.OnSourceInitialized(EventArgs)
- uid: System.Windows.Window.OnStateChanged(System.EventArgs)
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged(EventArgs)
  nameWithType: Window.OnStateChanged(EventArgs)
  fullName: System.Windows.Window.OnStateChanged(EventArgs)
- uid: System.Windows.Window.OnVisualParentChanged(System.Windows.DependencyObject)
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged(DependencyObject)
  nameWithType: Window.OnVisualParentChanged(DependencyObject)
  fullName: System.Windows.Window.OnVisualParentChanged(DependencyObject)
- uid: System.Windows.Window.OwnedWindows
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
  fullName: System.Windows.Window.OwnedWindows
- uid: System.Windows.WindowCollection
  parent: System.Windows
  isExternal: false
  name: WindowCollection
  nameWithType: WindowCollection
  fullName: System.Windows.WindowCollection
- uid: System.Windows.Window.Owner
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
  fullName: System.Windows.Window.Owner
- uid: System.Windows.Window.ResizeMode
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
  fullName: System.Windows.Window.ResizeMode
- uid: System.Windows.ResizeMode
  parent: System.Windows
  isExternal: false
  name: ResizeMode
  nameWithType: ResizeMode
  fullName: System.Windows.ResizeMode
- uid: System.Windows.Window.ResizeModeProperty
  parent: System.Windows.Window
  isExternal: false
  name: ResizeModeProperty
  nameWithType: Window.ResizeModeProperty
  fullName: System.Windows.Window.ResizeModeProperty
- uid: System.Windows.Window.RestoreBounds
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
  fullName: System.Windows.Window.RestoreBounds
- uid: System.Windows.Rect
  parent: System.Windows
  isExternal: false
  name: Rect
  nameWithType: Rect
  fullName: System.Windows.Rect
- uid: System.Windows.Window.Show
  parent: System.Windows.Window
  isExternal: false
  name: Show()
  nameWithType: Window.Show()
  fullName: System.Windows.Window.Show()
- uid: System.Windows.Window.ShowActivated
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
  fullName: System.Windows.Window.ShowActivated
- uid: System.Windows.Window.ShowActivatedProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivatedProperty
  nameWithType: Window.ShowActivatedProperty
  fullName: System.Windows.Window.ShowActivatedProperty
- uid: System.Windows.Window.ShowDialog
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog()
  nameWithType: Window.ShowDialog()
  fullName: System.Windows.Window.ShowDialog()
- uid: System.Windows.Window.ShowInTaskbar
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
  fullName: System.Windows.Window.ShowInTaskbar
- uid: System.Windows.Window.ShowInTaskbarProperty
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbarProperty
  nameWithType: Window.ShowInTaskbarProperty
  fullName: System.Windows.Window.ShowInTaskbarProperty
- uid: System.Windows.Window.SizeToContent
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
  fullName: System.Windows.Window.SizeToContent
- uid: System.Windows.SizeToContent
  parent: System.Windows
  isExternal: false
  name: SizeToContent
  nameWithType: SizeToContent
  fullName: System.Windows.SizeToContent
- uid: System.Windows.Window.SizeToContentProperty
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContentProperty
  nameWithType: Window.SizeToContentProperty
  fullName: System.Windows.Window.SizeToContentProperty
- uid: System.Windows.Window.SourceInitialized
  parent: System.Windows.Window
  isExternal: false
  name: SourceInitialized
  nameWithType: Window.SourceInitialized
  fullName: System.Windows.Window.SourceInitialized
- uid: System.Windows.Window.StateChanged
  parent: System.Windows.Window
  isExternal: false
  name: StateChanged
  nameWithType: Window.StateChanged
  fullName: System.Windows.Window.StateChanged
- uid: System.Windows.Window.TaskbarItemInfo
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
  fullName: System.Windows.Window.TaskbarItemInfo
- uid: System.Windows.Shell.TaskbarItemInfo
  parent: System.Windows.Shell
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: TaskbarItemInfo
  fullName: System.Windows.Shell.TaskbarItemInfo
- uid: System.Windows.Window.TaskbarItemInfoProperty
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfoProperty
  nameWithType: Window.TaskbarItemInfoProperty
  fullName: System.Windows.Window.TaskbarItemInfoProperty
- uid: System.Windows.Window.Title
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
  fullName: System.Windows.Window.Title
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Window.TitleProperty
  parent: System.Windows.Window
  isExternal: false
  name: TitleProperty
  nameWithType: Window.TitleProperty
  fullName: System.Windows.Window.TitleProperty
- uid: System.Windows.Window.Top
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
  fullName: System.Windows.Window.Top
- uid: System.Windows.Window.Topmost
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
  fullName: System.Windows.Window.Topmost
- uid: System.Windows.Window.TopmostProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopmostProperty
  nameWithType: Window.TopmostProperty
  fullName: System.Windows.Window.TopmostProperty
- uid: System.Windows.Window.TopProperty
  parent: System.Windows.Window
  isExternal: false
  name: TopProperty
  nameWithType: Window.TopProperty
  fullName: System.Windows.Window.TopProperty
- uid: System.Windows.Window.WindowStartupLocation
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
  fullName: System.Windows.Window.WindowStartupLocation
- uid: System.Windows.WindowStartupLocation
  parent: System.Windows
  isExternal: false
  name: WindowStartupLocation
  nameWithType: WindowStartupLocation
  fullName: System.Windows.WindowStartupLocation
- uid: System.Windows.Window.WindowState
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
  fullName: System.Windows.Window.WindowState
- uid: System.Windows.WindowState
  parent: System.Windows
  isExternal: false
  name: WindowState
  nameWithType: WindowState
  fullName: System.Windows.WindowState
- uid: System.Windows.Window.WindowStateProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStateProperty
  nameWithType: Window.WindowStateProperty
  fullName: System.Windows.Window.WindowStateProperty
- uid: System.Windows.Window.WindowStyle
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
  fullName: System.Windows.Window.WindowStyle
- uid: System.Windows.WindowStyle
  parent: System.Windows
  isExternal: false
  name: WindowStyle
  nameWithType: WindowStyle
  fullName: System.Windows.WindowStyle
- uid: System.Windows.Window.WindowStyleProperty
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyleProperty
  nameWithType: Window.WindowStyleProperty
  fullName: System.Windows.Window.WindowStyleProperty
- uid: System.Windows.Window.#ctor*
  parent: System.Windows.Window
  isExternal: false
  name: Window
  nameWithType: Window.Window
- uid: System.Windows.Window.Activate*
  parent: System.Windows.Window
  isExternal: false
  name: Activate
  nameWithType: Window.Activate
- uid: System.Windows.Window.AllowsTransparency*
  parent: System.Windows.Window
  isExternal: false
  name: AllowsTransparency
  nameWithType: Window.AllowsTransparency
- uid: System.Windows.Window.ArrangeOverride*
  parent: System.Windows.Window
  isExternal: false
  name: ArrangeOverride
  nameWithType: Window.ArrangeOverride
- uid: System.Windows.Window.Close*
  parent: System.Windows.Window
  isExternal: false
  name: Close
  nameWithType: Window.Close
- uid: System.Windows.Window.DialogResult*
  parent: System.Windows.Window
  isExternal: false
  name: DialogResult
  nameWithType: Window.DialogResult
- uid: System.Windows.Window.DragMove*
  parent: System.Windows.Window
  isExternal: false
  name: DragMove
  nameWithType: Window.DragMove
- uid: System.Windows.Window.GetWindow*
  parent: System.Windows.Window
  isExternal: false
  name: GetWindow
  nameWithType: Window.GetWindow
- uid: System.Windows.Window.Hide*
  parent: System.Windows.Window
  isExternal: false
  name: Hide
  nameWithType: Window.Hide
- uid: System.Windows.Window.Icon*
  parent: System.Windows.Window
  isExternal: false
  name: Icon
  nameWithType: Window.Icon
- uid: System.Windows.Window.IsActive*
  parent: System.Windows.Window
  isExternal: false
  name: IsActive
  nameWithType: Window.IsActive
- uid: System.Windows.Window.Left*
  parent: System.Windows.Window
  isExternal: false
  name: Left
  nameWithType: Window.Left
- uid: System.Windows.Window.LogicalChildren*
  parent: System.Windows.Window
  isExternal: false
  name: LogicalChildren
  nameWithType: Window.LogicalChildren
- uid: System.Windows.Window.MeasureOverride*
  parent: System.Windows.Window
  isExternal: false
  name: MeasureOverride
  nameWithType: Window.MeasureOverride
- uid: System.Windows.Window.OnActivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnActivated
  nameWithType: Window.OnActivated
- uid: System.Windows.Window.OnClosed*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosed
  nameWithType: Window.OnClosed
- uid: System.Windows.Window.OnClosing*
  parent: System.Windows.Window
  isExternal: false
  name: OnClosing
  nameWithType: Window.OnClosing
- uid: System.Windows.Window.OnContentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentChanged
  nameWithType: Window.OnContentChanged
- uid: System.Windows.Window.OnContentRendered*
  parent: System.Windows.Window
  isExternal: false
  name: OnContentRendered
  nameWithType: Window.OnContentRendered
- uid: System.Windows.Window.OnCreateAutomationPeer*
  parent: System.Windows.Window
  isExternal: false
  name: OnCreateAutomationPeer
  nameWithType: Window.OnCreateAutomationPeer
- uid: System.Windows.Window.OnDeactivated*
  parent: System.Windows.Window
  isExternal: false
  name: OnDeactivated
  nameWithType: Window.OnDeactivated
- uid: System.Windows.Window.OnDpiChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnDpiChanged
  nameWithType: Window.OnDpiChanged
- uid: System.Windows.Window.OnLocationChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnLocationChanged
  nameWithType: Window.OnLocationChanged
- uid: System.Windows.Window.OnManipulationBoundaryFeedback*
  parent: System.Windows.Window
  isExternal: false
  name: OnManipulationBoundaryFeedback
  nameWithType: Window.OnManipulationBoundaryFeedback
- uid: System.Windows.Window.OnSourceInitialized*
  parent: System.Windows.Window
  isExternal: false
  name: OnSourceInitialized
  nameWithType: Window.OnSourceInitialized
- uid: System.Windows.Window.OnStateChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnStateChanged
  nameWithType: Window.OnStateChanged
- uid: System.Windows.Window.OnVisualParentChanged*
  parent: System.Windows.Window
  isExternal: false
  name: OnVisualParentChanged
  nameWithType: Window.OnVisualParentChanged
- uid: System.Windows.Window.OwnedWindows*
  parent: System.Windows.Window
  isExternal: false
  name: OwnedWindows
  nameWithType: Window.OwnedWindows
- uid: System.Windows.Window.Owner*
  parent: System.Windows.Window
  isExternal: false
  name: Owner
  nameWithType: Window.Owner
- uid: System.Windows.Window.ResizeMode*
  parent: System.Windows.Window
  isExternal: false
  name: ResizeMode
  nameWithType: Window.ResizeMode
- uid: System.Windows.Window.RestoreBounds*
  parent: System.Windows.Window
  isExternal: false
  name: RestoreBounds
  nameWithType: Window.RestoreBounds
- uid: System.Windows.Window.Show*
  parent: System.Windows.Window
  isExternal: false
  name: Show
  nameWithType: Window.Show
- uid: System.Windows.Window.ShowActivated*
  parent: System.Windows.Window
  isExternal: false
  name: ShowActivated
  nameWithType: Window.ShowActivated
- uid: System.Windows.Window.ShowDialog*
  parent: System.Windows.Window
  isExternal: false
  name: ShowDialog
  nameWithType: Window.ShowDialog
- uid: System.Windows.Window.ShowInTaskbar*
  parent: System.Windows.Window
  isExternal: false
  name: ShowInTaskbar
  nameWithType: Window.ShowInTaskbar
- uid: System.Windows.Window.SizeToContent*
  parent: System.Windows.Window
  isExternal: false
  name: SizeToContent
  nameWithType: Window.SizeToContent
- uid: System.Windows.Window.TaskbarItemInfo*
  parent: System.Windows.Window
  isExternal: false
  name: TaskbarItemInfo
  nameWithType: Window.TaskbarItemInfo
- uid: System.Windows.Window.Title*
  parent: System.Windows.Window
  isExternal: false
  name: Title
  nameWithType: Window.Title
- uid: System.Windows.Window.Top*
  parent: System.Windows.Window
  isExternal: false
  name: Top
  nameWithType: Window.Top
- uid: System.Windows.Window.Topmost*
  parent: System.Windows.Window
  isExternal: false
  name: Topmost
  nameWithType: Window.Topmost
- uid: System.Windows.Window.WindowStartupLocation*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStartupLocation
  nameWithType: Window.WindowStartupLocation
- uid: System.Windows.Window.WindowState*
  parent: System.Windows.Window
  isExternal: false
  name: WindowState
  nameWithType: Window.WindowState
- uid: System.Windows.Window.WindowStyle*
  parent: System.Windows.Window
  isExternal: false
  name: WindowStyle
  nameWithType: Window.WindowStyle
