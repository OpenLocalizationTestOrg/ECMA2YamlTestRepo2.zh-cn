### YamlMime:ManagedReference
items:
- uid: System.Windows.Automation.Provider.ITextRangeProvider
  id: ITextRangeProvider
  children:
  - System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  - System.Windows.Automation.Provider.ITextRangeProvider.Clone
  - System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  - System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  - System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  - System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  - System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  - System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  - System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  - System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  - System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  - System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  - System.Windows.Automation.Provider.ITextRangeProvider.Select
  langs:
  - csharp
  name: ITextRangeProvider
  nameWithType: ITextRangeProvider
  fullName: System.Windows.Automation.Provider.ITextRangeProvider
  type: Interface
  summary: "公开一些方法和属性，以实现的文本容器中支持的连续文本范围的 UI 自动化客户端访问<xref href=&quot;System.Windows.Automation.Provider.ITextProvider&quot;> </xref>。"
  remarks: "实现 UI 自动化提供程序必须支持上<xref:System.Windows.Automation.TextPattern>控件模式。</xref:System.Windows.Automation.TextPattern>       A<xref:System.Windows.Automation.Text.TextPatternRange>可以表示的插入点、 一个子集，或所有中的文本<xref:System.Windows.Automation.TextPattern>容器。</xref:System.Windows.Automation.TextPattern> </xref:System.Windows.Automation.Text.TextPatternRange>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Runtime.InteropServices.Guid("5347ad7b-c355-46f8-aff5-909033582f63")]

      [System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)]

      public interface ITextRangeProvider
  implements: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  id: AddToSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: AddToSelection()
  nameWithType: ITextRangeProvider.AddToSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "将添加到的支持多个的文本容器中的突出显示文本集合中，不连续选择。"
  remarks: "文本插入点移到新选择的区域。       提供退化文本范围移动插入点。"
  syntax:
    content: public void AddToSelection ();
    parameters: []
  overload: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "如果文本提供程序不支持多个不连续选择 (即，<xref:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection*>的值必须<xref uid=&quot;langword_csharp_Multiple&quot; name=&quot;Multiple&quot; href=&quot;&quot;> </xref>)。</xref:System.Windows.Automation.Provider.ITextProvider.SupportedTextSelection*>"
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone
  id: Clone
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: Clone()
  nameWithType: ITextRangeProvider.Clone()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Clone()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "返回一个新<xref href=&quot;System.Windows.Automation.Provider.ITextRangeProvider&quot;></xref>等于原始<xref href=&quot;System.Windows.Automation.Provider.ITextRangeProvider&quot;></xref>并且继承了其原始的所有属性。"
  remarks: "新的范围可以从原始独立操作。"
  syntax:
    content: public System.Windows.Automation.Provider.ITextRangeProvider Clone ();
    parameters: []
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "新的文本范围。 空引用 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>中[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)]) 永远不会返回。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  id: Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: Compare(ITextRangeProvider)
  nameWithType: ITextRangeProvider.Compare(ITextRangeProvider)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Compare(ITextRangeProvider)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "返回一个值，该值指示是否跨度 ( <xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;> </xref>终结点<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>终结点) 的文本范围是另一个文本范围相同。"
  syntax:
    content: public bool Compare (System.Windows.Automation.Provider.ITextRangeProvider range);
    parameters:
    - id: range
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "要比较的文本范围"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个文本范围的跨度相同;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Compare*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "如果要比较的范围不是来自同一文本提供程序。"
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  id: CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "返回一个值，指定两个文本范围是否具有相同的终结点。"
  syntax:
    content: public int CompareEndpoints (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;> </xref>或<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>调用方的终结点。"
    - id: targetRange
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "比较在目标范围。"
    - id: targetEndpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;> </xref>或<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>的目标终结点。"
    return:
      type: System.Int32
      description: "如果调用方的端点出现前面的文本中比目标端点，则，返回一个负值。       如果调用方的终结点位于与目标终结点相同的位置，则返回零。       如果调用方的端点在文本中比目标端点后出现，则，返回一个正值。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "如果<code> targetRange </code>来自不同的文本提供程序。"
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  id: ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: ExpandToEnclosingUnit(TextUnit)
  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "将文本范围扩展到指定的文本单位。"
  remarks: "如果已指定的单位的确切数量范围。 它保持不变。       没有一系列步骤涉及顺序幕后<xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A>方法才能成功执行。</xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A>      1.  文本范围进行了规范化;也就是说，将文本范围折叠为退化范围，在<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>终结点，这使得<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>终结点成为多余。</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> </xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> 此步骤是必需的文本范围跨越其中的情况下消除歧义`unit`边界; 例如，&quot;{The U} RL [http://www.microsoft.com](http://www.microsoft.com)文本中嵌入&quot;位置&quot;{&quot;和&quot;}&quot;是文本范围端点。      2.  生成的范围中向后移动<xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>到所请求的开头`unit`边界。</xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>      3.  该区域中向前或向后移动<xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>的请求数`unit`边界。</xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>      4.  然后扩展范围从退化范围状态通过移动<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>一个所请求的终结点`unit`边界。</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>       ![通过移动 & expandtoenclosingunit 进行的范围调整](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;通过移动 & expandtoenclosingunit 进行的范围调整&quot;)如何 （） 和 expandtoenclosingunit （） 调整文本范围的示例&1;> [!NOTE]&1;> 这些步骤是必需的因为它是常见的屏幕读取器读取出完整单词、 句子或在插入点或任何虚拟光标位置处的整个段落。       Expandtoenclosingunit 进行尊重隐藏和显示文本。       下一步将 expandtoenclosingunit 进行遵从最大<xref:System.Windows.Automation.Text.TextUnit>支持的如果给定<xref:System.Windows.Automation.Text.TextUnit>控件不支持。</xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit>       下面列出的顺序，从最小单位到最大值。      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit>"
  syntax:
    content: public void ExpandToEnclosingUnit (System.Windows.Automation.Text.TextUnit unit);
    parameters:
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "文本单位。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  id: FindAttribute(System.Int32,System.Object,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: FindAttribute(Int32,Object,Boolean)
  nameWithType: ITextRangeProvider.FindAttribute(Int32,Object,Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(Int32,Object,Boolean)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "返回具有指定的特性值的文本范围子集。"
  remarks: "隐藏和显示文本之间没有差异。"
  syntax:
    content: public System.Windows.Automation.Provider.ITextRangeProvider FindAttribute (int attribute, object value, bool backward);
    parameters:
    - id: attribute
      type: System.Int32
      description: "要搜索的属性。"
    - id: value
      type: System.Object
      description: "要搜索的属性值。 此值必须匹配的属性指定的类型。"
    - id: backward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果最后一个匹配的文本范围应返回而不是第一个;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "具有匹配特性和属性值，则为文本范围否则为 null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>中[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  id: FindText(System.String,System.Boolean,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: FindText(String,Boolean,Boolean)
  nameWithType: ITextRangeProvider.FindText(String,Boolean,Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindText(String,Boolean,Boolean)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "返回包含指定的文本的文本范围子集。"
  remarks: "隐藏和显示文本之间没有差异。"
  syntax:
    content: public System.Windows.Automation.Provider.ITextRangeProvider FindText (string text, bool backward, bool ignoreCase);
    parameters:
    - id: text
      type: System.String
      description: "要搜索的文本字符串。"
    - id: backward
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果最后一个匹配的文本范围应返回而不是第一个;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: ignoreCase
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果应该忽略大小写;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "指定的文本; 匹配的文本范围否则为 null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>中[!INCLUDE[TLA#tla_visualbnet](~/add/includes/tlasharptla-visualbnet-md.md)])。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.FindText*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  id: GetAttributeValue(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetAttributeValue(Int32)
  nameWithType: ITextRangeProvider.GetAttributeValue(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "检索整个文本范围的指定属性的值。"
  remarks: "隐藏和显示文本之间没有差异。"
  syntax:
    content: public object GetAttributeValue (int attribute);
    parameters:
    - id: attribute
      type: System.Int32
      description: "文本特性。"
    return:
      type: System.Object
      description: "检索表示指定的属性的值的对象。 例如，`GetAttributeValue(TextPattern.FontNameAttribute)`将返回表示文本范围时的字体名称的字符串`GetAttributeValue(TextPattern.IsItalicAttribute)`返回的值类型<xref:System.Boolean>.</xref:System.Boolean>       返回<xref href=&quot;System.Windows.Automation.TextPattern.MixedAttributeValue&quot;></xref>如果在文本范围内的指定属性的值会发生变化。       返回<xref href=&quot;System.Windows.Automation.AutomationElement.NotSupported&quot;></xref>如果提供程序或控件不支持指定的属性。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "如果指定的属性不是有效的。"
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  id: GetBoundingRectangles
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetBoundingRectangles()
  nameWithType: ITextRangeProvider.GetBoundingRectangles()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "检索文本范围中的文本的每个完全或部分可见的行个边框组成的集合。"
  syntax:
    content: public double[] GetBoundingRectangles ();
    parameters: []
    return:
      type: System.Double[]
      description: "边框的文本范围中的文本每整个或部分行组成的数组。       退化范围为一个空数组。       文本范围具有其屏幕坐标完全位于屏幕之外，为一个空数组滚动到视图中，或者被某个重叠窗口遮盖住。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  id: GetChildren
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetChildren()
  nameWithType: ITextRangeProvider.GetChildren()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "检索文本范围内的所有嵌入对象的集合。"
  syntax:
    content: public System.Windows.Automation.Provider.IRawElementProviderSimple[] GetChildren ();
    parameters: []
    return:
      type: System.Windows.Automation.Provider.IRawElementProviderSimple[]
      description: "文本范围内的子对象集合。 与文本范围发生重叠但是并未完全包括由它的子对象也会包括在集合中。       如果不有任何子对象，则返回一个空集合。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  id: GetEnclosingElement
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetEnclosingElement()
  nameWithType: ITextRangeProvider.GetEnclosingElement()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "返回结束文本范围的最内层控件。"
  syntax:
    content: public System.Windows.Automation.Provider.IRawElementProviderSimple GetEnclosingElement ();
    parameters: []
    return:
      type: System.Windows.Automation.Provider.IRawElementProviderSimple
      description: "包含控件，通常的文本提供程序提供该文本范围。 但是，如果文本提供程序支持表格或超链接这样的子元素，那么包含元素可能为文本提供程序的子代。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  id: GetText(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: GetText(Int32)
  nameWithType: ITextRangeProvider.GetText(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetText(Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "检索范围的纯文本。"
  remarks: "GetText 尊重隐藏和显示文本。       如果`maxLength`大于长度的调用方的文本范围内，返回的字符串将文本范围的纯文本。       GetText 将不受影响的文本流; 中的终结点的顺序它将始终返回逻辑文本流顺序中的文本范围的开始和结束终结点之间的文本。"
  syntax:
    content: public string GetText (int maxLength);
    parameters:
    - id: maxLength
      type: System.Int32
      description: "要返回的字符串的最大长度。 使用`-1`如果没有限制，则。"
    return:
      type: System.String
      description: "文本范围，可能截断在指定的纯文本<code> maxLength </code>。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.GetText*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "如果<code> maxLength </code>小于-1。"
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  id: Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: Move(TextUnit,Int32)
  nameWithType: ITextRangeProvider.Move(TextUnit,Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Move(TextUnit,Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "将移动文本范围指定数量的文本单位。"
  remarks: "需要遍历文本范围的内容时，为了让移动方法才能成功执行在幕后涉及一系列步骤。      1.  文本范围进行了规范化;也就是说，将文本范围折叠为退化范围，在<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>终结点，这使得<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>终结点成为多余。</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> </xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> 此步骤是必需的文本范围跨越其中的情况下消除歧义`unit`边界; 例如，&quot;{The U} RL [http://www.microsoft.com](http://www.microsoft.com)文本中嵌入&quot;位置&quot;{&quot;和&quot;}&quot;是文本范围端点。      2.  生成的范围中向后移动<xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>到所请求的开头`unit`边界。</xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>      3.  该区域中向前或向后移动<xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>的请求数`unit`边界。</xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>      4.  然后扩展范围从退化范围状态通过移动<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>一个所请求的终结点`unit`边界。</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>       ![通过移动 & expandtoenclosingunit 进行的范围调整](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;通过移动 & expandtoenclosingunit 进行的范围调整&quot;)Move() 和 expandtoenclosingunit （） 的文本内容 （或内部文本） 的文本容器和嵌入的对象，如超链接或表格单元格，如何调整文本范围的示例作为单个连续文本流中的控件视图和内容视图公开[!INCLUDE[TLA2#tla_uiautomation](~/add/includes/tla2sharptla-uiautomation-md.md)]树; 对象边界被忽略。       ![跨的嵌入对象的文本范围。](~/add/media/uia-textpattern-embeddedobjecttextranges.png &quot;跨嵌入对象的文本范围。&quot;)   含有嵌入的对象以及它们的范围的文本流的示例跨移动方面这两个隐藏和可见文本。       移动交下一个最大<xref:System.Windows.Automation.Text.TextUnit>支持的如果给定<xref:System.Windows.Automation.Text.TextUnit>控件不支持。</xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit>       下面列出的顺序，从最小单位到最大值。      - <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>- <xref:System.Windows.Automation.Text.TextUnit>-<xref:System.Windows.Automation.Text.TextUnit>文本不以任何方式更改、 文本范围只跨越不同部分的文本。</xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit>"
  syntax:
    content: public int Move (System.Windows.Automation.Text.TextUnit unit, int count);
    parameters:
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "文本单位的边界。"
    - id: count
      type: System.Int32
      description: "要移动的文本单位数。       正值表示向前移动文本范围、 负值则表示移动文本范围倒退了，和 0 不起作用。"
    return:
      type: System.Int32
      description: "实际移动的单位数。 它可能小于请求移动数如果新的文本范围端点大于或小于比<xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange*>终结点。</xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange*>"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Move*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  id: MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "将文本范围的一个端点移动到第二个文本范围的指定端点。"
  remarks: "如果要移动的终结点是跨相同的文本范围的其他终结点，则该其他终结点也会随，从而导致退化范围，并确保正确的顺序的终结点 (即，<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>是否始终小于或等于<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>)。</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> </xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>"
  syntax:
    content: public void MoveEndpointByRange (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Provider.ITextRangeProvider targetRange, System.Windows.Automation.Text.TextPatternRangeEndpoint targetEndpoint);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "要移动的端点。"
    - id: targetRange
      type: System.Windows.Automation.Provider.ITextRangeProvider
      description: "从同一文本提供程序的另一个范围。"
    - id: targetEndpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "另一个范围终结点。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  id: MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  nameWithType: ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "将文本范围指定的文档范围内的文本单位数的一个端点移动。"
  remarks: "需要遍历文本范围的内容时，以便在后台涉及一系列步骤<xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A>方法才能成功执行。</xref:System.Windows.Automation.Provider.ITextRangeProvider.Move%2A>      1.  文本范围进行了规范化;也就是说，将文本范围折叠为退化范围，在<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>终结点，这使得<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>终结点成为多余。</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> </xref:System.Windows.Automation.Text.TextPatternRangeEndpoint> 此步骤是必需的文本范围跨越其中的情况下消除歧义`unit`边界; 例如，&quot;{The U} RL [http://www.microsoft.com](http://www.microsoft.com)文本中嵌入&quot;位置&quot;{&quot;和&quot;}&quot;是文本范围端点。      2.  生成的范围中向后移动<xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>到所请求的开头`unit`边界。</xref:System.Windows.Automation.Provider.ITextProvider.DocumentRange%2A>      3.  然后扩展范围从退化范围状态通过移动<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>一个所请求的终结点`unit`边界。</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>       ![通过移动 & expandtoenclosingunit 进行的范围调整](~/add/media/uia-textpattern-moveandexpand-examples.png &quot;通过移动 & expandtoenclosingunit 进行的范围调整&quot;)（） 和 expandtoenclosingunit （) MoveEndpointByUnit 如何调整文本范围的示例将推迟到下一个最大<xref:System.Windows.Automation.Text.TextUnit>支持的如果给定<xref:System.Windows.Automation.Text.TextUnit>控件不支持。</xref:System.Windows.Automation.Text.TextUnit> </xref:System.Windows.Automation.Text.TextUnit>       下面列出的顺序，从最小单位到最大值。      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit>      -   <xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit></xref:System.Windows.Automation.Text.TextUnit>"
  syntax:
    content: public int MoveEndpointByUnit (System.Windows.Automation.Text.TextPatternRangeEndpoint endpoint, System.Windows.Automation.Text.TextUnit unit, int count);
    parameters:
    - id: endpoint
      type: System.Windows.Automation.Text.TextPatternRangeEndpoint
      description: "要移动的端点。"
    - id: unit
      type: System.Windows.Automation.Text.TextUnit
      description: "移动文本单位。"
    - id: count
      type: System.Int32
      description: "要移动的单位数。 正值表示向前移动端点。 负值则表示向后移动。 值 0 不起作用。"
    return:
      type: System.Int32
      description: "实际移动的单位数，移动则可能小于请求如果端点时遇到的开头或末尾的文档。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  id: RemoveFromSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: RemoveFromSelection()
  nameWithType: ITextRangeProvider.RemoveFromSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "删除与调用方的对应的文本突出显示的部分<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>和<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>终结点，从支持多个的文本容器中的突出显示文本集合不连续选择。"
  remarks: "文本插入点将移到删除突出显示的区域中。       提供退化文本范围将移动插入点。"
  syntax:
    content: public void RemoveFromSelection ();
    parameters: []
  overload: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "如果文本提供程序不支持多个不连续选择 (例如，<xref:System.Windows.Automation.TextPattern.SupportedTextSelection*>的值必须<xref uid=&quot;langword_csharp_Multiple&quot; name=&quot;Multiple&quot; href=&quot;&quot;> </xref>)。</xref:System.Windows.Automation.TextPattern.SupportedTextSelection*>"
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  id: ScrollIntoView(System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: ScrollIntoView(Boolean)
  nameWithType: ITextRangeProvider.ScrollIntoView(Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(Boolean)
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "导致文本控件垂直滚动，直到文本范围在视区中可见。"
  remarks: "ScrollIntoView 尊重隐藏和显示文本。       如果隐藏的文本范围，仅当隐藏的文本锚有视区中将滚动文本控件。"
  syntax:
    content: public void ScrollIntoView (bool alignToTop);
    parameters:
    - id: alignToTop
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果文本控件应该滚动以便文本范围与视区; 顶部对齐<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果应该与视区底部对齐。"
  overload: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select
  id: Select
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  langs:
  - csharp
  name: Select()
  nameWithType: ITextRangeProvider.Select()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Select()
  type: Method
  assemblies:
  - UIAutomationProvider
  namespace: System.Windows.Automation.Provider
  summary: "突出显示对应于文本范围的文本控件中的文本<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>和<xref href=&quot;System.Windows.Automation.Text.TextPatternRangeEndpoint&quot;></xref>终结点。"
  remarks: "如果提供退化文本范围，则将将文本插入点移到<xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>的文本范围的终结点。</xref:System.Windows.Automation.Text.TextPatternRangeEndpoint>"
  syntax:
    content: public void Select ();
    parameters: []
  overload: System.Windows.Automation.Provider.ITextRangeProvider.Select*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "文本控件不支持文本选择时发生。"
  platform:
  - net462
references:
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: AddToSelection()
  nameWithType: ITextRangeProvider.AddToSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection()
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Clone()
  nameWithType: ITextRangeProvider.Clone()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Clone()
- uid: System.Windows.Automation.Provider.ITextRangeProvider
  parent: System.Windows.Automation.Provider
  isExternal: false
  name: ITextRangeProvider
  nameWithType: ITextRangeProvider
  fullName: System.Windows.Automation.Provider.ITextRangeProvider
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare(System.Windows.Automation.Provider.ITextRangeProvider)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Compare(ITextRangeProvider)
  nameWithType: ITextRangeProvider.Compare(ITextRangeProvider)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Compare(ITextRangeProvider)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Automation.Text.TextPatternRangeEndpoint
  parent: System.Windows.Automation.Text
  isExternal: false
  name: TextPatternRangeEndpoint
  nameWithType: TextPatternRangeEndpoint
  fullName: System.Windows.Automation.Text.TextPatternRangeEndpoint
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(System.Windows.Automation.Text.TextUnit)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: ExpandToEnclosingUnit(TextUnit)
  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit(TextUnit)
- uid: System.Windows.Automation.Text.TextUnit
  parent: System.Windows.Automation.Text
  isExternal: false
  name: TextUnit
  nameWithType: TextUnit
  fullName: System.Windows.Automation.Text.TextUnit
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(System.Int32,System.Object,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: FindAttribute(Int32,Object,Boolean)
  nameWithType: ITextRangeProvider.FindAttribute(Int32,Object,Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute(Int32,Object,Boolean)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText(System.String,System.Boolean,System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: FindText(String,Boolean,Boolean)
  nameWithType: ITextRangeProvider.FindText(String,Boolean,Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.FindText(String,Boolean,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetAttributeValue(Int32)
  nameWithType: ITextRangeProvider.GetAttributeValue(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue(Int32)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetBoundingRectangles()
  nameWithType: ITextRangeProvider.GetBoundingRectangles()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles()
- uid: System.Double[]
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double[]
  spec.csharp:
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: Double[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetChildren()
  nameWithType: ITextRangeProvider.GetChildren()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren()
- uid: System.Windows.Automation.Provider.IRawElementProviderSimple[]
  parent: System.Windows.Automation.Provider
  isExternal: false
  name: IRawElementProviderSimple
  nameWithType: IRawElementProviderSimple
  fullName: System.Windows.Automation.Provider.IRawElementProviderSimple[]
  spec.csharp:
  - uid: System.Windows.Automation.Provider.IRawElementProviderSimple
    name: IRawElementProviderSimple
    nameWithType: IRawElementProviderSimple
    fullName: IRawElementProviderSimple[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetEnclosingElement()
  nameWithType: ITextRangeProvider.GetEnclosingElement()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement()
- uid: System.Windows.Automation.Provider.IRawElementProviderSimple
  parent: System.Windows.Automation.Provider
  isExternal: false
  name: IRawElementProviderSimple
  nameWithType: IRawElementProviderSimple
  fullName: System.Windows.Automation.Provider.IRawElementProviderSimple
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText(System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetText(Int32)
  nameWithType: ITextRangeProvider.GetText(Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.GetText(Int32)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move(System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Move(TextUnit,Int32)
  nameWithType: ITextRangeProvider.Move(TextUnit,Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Move(TextUnit,Int32)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Provider.ITextRangeProvider,System.Windows.Automation.Text.TextPatternRangeEndpoint)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  nameWithType: ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange(TextPatternRangeEndpoint,ITextRangeProvider,TextPatternRangeEndpoint)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(System.Windows.Automation.Text.TextPatternRangeEndpoint,System.Windows.Automation.Text.TextUnit,System.Int32)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  nameWithType: ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit(TextPatternRangeEndpoint,TextUnit,Int32)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: RemoveFromSelection()
  nameWithType: ITextRangeProvider.RemoveFromSelection()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection()
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(System.Boolean)
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: ScrollIntoView(Boolean)
  nameWithType: ITextRangeProvider.ScrollIntoView(Boolean)
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView(Boolean)
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Select()
  nameWithType: ITextRangeProvider.Select()
  fullName: System.Windows.Automation.Provider.ITextRangeProvider.Select()
- uid: System.Windows.Automation.Provider.ITextRangeProvider.AddToSelection*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: AddToSelection
  nameWithType: ITextRangeProvider.AddToSelection
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Clone*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Clone
  nameWithType: ITextRangeProvider.Clone
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Compare*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Compare
  nameWithType: ITextRangeProvider.Compare
- uid: System.Windows.Automation.Provider.ITextRangeProvider.CompareEndpoints*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: CompareEndpoints
  nameWithType: ITextRangeProvider.CompareEndpoints
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ExpandToEnclosingUnit*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: ExpandToEnclosingUnit
  nameWithType: ITextRangeProvider.ExpandToEnclosingUnit
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindAttribute*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: FindAttribute
  nameWithType: ITextRangeProvider.FindAttribute
- uid: System.Windows.Automation.Provider.ITextRangeProvider.FindText*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: FindText
  nameWithType: ITextRangeProvider.FindText
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetAttributeValue*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetAttributeValue
  nameWithType: ITextRangeProvider.GetAttributeValue
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetBoundingRectangles*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetBoundingRectangles
  nameWithType: ITextRangeProvider.GetBoundingRectangles
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetChildren*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetChildren
  nameWithType: ITextRangeProvider.GetChildren
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetEnclosingElement*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetEnclosingElement
  nameWithType: ITextRangeProvider.GetEnclosingElement
- uid: System.Windows.Automation.Provider.ITextRangeProvider.GetText*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: GetText
  nameWithType: ITextRangeProvider.GetText
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Move*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Move
  nameWithType: ITextRangeProvider.Move
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByRange*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: MoveEndpointByRange
  nameWithType: ITextRangeProvider.MoveEndpointByRange
- uid: System.Windows.Automation.Provider.ITextRangeProvider.MoveEndpointByUnit*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: MoveEndpointByUnit
  nameWithType: ITextRangeProvider.MoveEndpointByUnit
- uid: System.Windows.Automation.Provider.ITextRangeProvider.RemoveFromSelection*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: RemoveFromSelection
  nameWithType: ITextRangeProvider.RemoveFromSelection
- uid: System.Windows.Automation.Provider.ITextRangeProvider.ScrollIntoView*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: ScrollIntoView
  nameWithType: ITextRangeProvider.ScrollIntoView
- uid: System.Windows.Automation.Provider.ITextRangeProvider.Select*
  parent: System.Windows.Automation.Provider.ITextRangeProvider
  isExternal: false
  name: Select
  nameWithType: ITextRangeProvider.Select
