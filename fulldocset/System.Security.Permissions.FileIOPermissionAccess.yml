### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.FileIOPermissionAccess
  id: FileIOPermissionAccess
  children:
  - System.Security.Permissions.FileIOPermissionAccess.AllAccess
  - System.Security.Permissions.FileIOPermissionAccess.Append
  - System.Security.Permissions.FileIOPermissionAccess.NoAccess
  - System.Security.Permissions.FileIOPermissionAccess.PathDiscovery
  - System.Security.Permissions.FileIOPermissionAccess.Read
  - System.Security.Permissions.FileIOPermissionAccess.Write
  langs:
  - csharp
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
  type: Enum
  summary: "指定的文件访问请求的类型。"
  remarks: "此枚举用于<xref:System.Security.Permissions.FileIOPermission>类。</xref:System.Security.Permissions.FileIOPermission>      1> [!NOTE]&1;> 尽管 NoAccess 和 AllAccess 是 FileIOPermissionAccess 的成员，它们不是有效的参数用作<xref:System.Security.Permissions.FileIOPermission.GetPathList%2A>它们分别描述任何文件访问类型或所有文件访问类型，因为和<xref:System.Security.Permissions.FileIOPermission.GetPathList%2A>需要单个文件访问类型。</xref:System.Security.Permissions.FileIOPermission.GetPathList%2A> </xref:System.Security.Permissions.FileIOPermission.GetPathList%2A>      1> [!NOTE]&1;> 提供写入访问程序集是类似于授予完全信任。 如果应用程序应写入文件系统不应具有写访问权限。"
  syntax:
    content: >-
      [System.Flags]

      [System.Runtime.InteropServices.ComVisible(true)]

      public enum FileIOPermissionAccess
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAccess.AllAccess
  id: AllAccess
  parent: System.Security.Permissions.FileIOPermissionAccess
  langs:
  - csharp
  name: AllAccess
  nameWithType: FileIOPermissionAccess.AllAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess.AllAccess
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "将追加到文件或目录的读取、 写入和 PathDiscovery 访问。 AllAccess 表示多个 FileIOPermissionAccess 值并导致<xref:System.ArgumentException>时用作<code> access </code>参数<xref:System.Security.Permissions.FileIOPermission.GetPathList*>方法，需要单一值。</xref:System.Security.Permissions.FileIOPermission.GetPathList*> </xref:System.ArgumentException>"
  syntax:
    content: AllAccess
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAccess.Append
  id: Append
  parent: System.Security.Permissions.FileIOPermissionAccess
  langs:
  - csharp
  name: Append
  nameWithType: FileIOPermissionAccess.Append
  fullName: System.Security.Permissions.FileIOPermissionAccess.Append
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "要追加到文件或目录的材料的访问。 追加访问权限包括能够创建新文件或目录。"
  remarks: >-
    > [!NOTE]

    >  To create files, code must also be granted both Append and either Write or Read access. For more detail see <xref:System.IO.FileMode>.
  syntax:
    content: Append
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAccess.NoAccess
  id: NoAccess
  parent: System.Security.Permissions.FileIOPermissionAccess
  langs:
  - csharp
  name: NoAccess
  nameWithType: FileIOPermissionAccess.NoAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess.NoAccess
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "不能访问的文件或目录。 NoAccess 表示任何有效的 FileIOPermissionAccess 值并导致<xref:System.ArgumentException>时使用的参数作为<xref:System.Security.Permissions.FileIOPermission.GetPathList*>，它需要单个值。</xref:System.Security.Permissions.FileIOPermission.GetPathList*> </xref:System.ArgumentException>"
  syntax:
    content: NoAccess
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAccess.PathDiscovery
  id: PathDiscovery
  parent: System.Security.Permissions.FileIOPermissionAccess
  langs:
  - csharp
  name: PathDiscovery
  nameWithType: FileIOPermissionAccess.PathDiscovery
  fullName: System.Security.Permissions.FileIOPermissionAccess.PathDiscovery
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "对自身的路径中的信息的访问。 这可帮助保护敏感信息在路径中，例如，用户名称，以及有关路径中显示的目录结构的信息。 此值不会授予对文件或文件夹路径所表示的访问。"
  remarks: >-
    > [!NOTE]

    >  For performance reasons, `PathDiscovery` should only be granted to directories, not to files. For example, `PathDiscovery` permission should be granted to paths such as C:\test and C:\test\\, not C:\test\example.txt.
  syntax:
    content: PathDiscovery
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAccess.Read
  id: Read
  parent: System.Security.Permissions.FileIOPermissionAccess
  langs:
  - csharp
  name: Read
  nameWithType: FileIOPermissionAccess.Read
  fullName: System.Security.Permissions.FileIOPermissionAccess.Read
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "读取文件或目录的访问权限。"
  syntax:
    content: Read
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.FileIOPermissionAccess.Write
  id: Write
  parent: System.Security.Permissions.FileIOPermissionAccess
  langs:
  - csharp
  name: Write
  nameWithType: FileIOPermissionAccess.Write
  fullName: System.Security.Permissions.FileIOPermissionAccess.Write
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "若要写入或删除文件或目录的访问。 写访问权限包括删除并覆盖文件或目录。"
  syntax:
    content: Write
    return:
      type: System.Security.Permissions.FileIOPermissionAccess
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Security.Permissions.FileIOPermissionAccess.AllAccess
  parent: System.Security.Permissions.FileIOPermissionAccess
  isExternal: false
  name: AllAccess
  nameWithType: FileIOPermissionAccess.AllAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess.AllAccess
- uid: System.Security.Permissions.FileIOPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: FileIOPermissionAccess
  nameWithType: FileIOPermissionAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess
- uid: System.Security.Permissions.FileIOPermissionAccess.Append
  parent: System.Security.Permissions.FileIOPermissionAccess
  isExternal: false
  name: Append
  nameWithType: FileIOPermissionAccess.Append
  fullName: System.Security.Permissions.FileIOPermissionAccess.Append
- uid: System.Security.Permissions.FileIOPermissionAccess.NoAccess
  parent: System.Security.Permissions.FileIOPermissionAccess
  isExternal: false
  name: NoAccess
  nameWithType: FileIOPermissionAccess.NoAccess
  fullName: System.Security.Permissions.FileIOPermissionAccess.NoAccess
- uid: System.Security.Permissions.FileIOPermissionAccess.PathDiscovery
  parent: System.Security.Permissions.FileIOPermissionAccess
  isExternal: false
  name: PathDiscovery
  nameWithType: FileIOPermissionAccess.PathDiscovery
  fullName: System.Security.Permissions.FileIOPermissionAccess.PathDiscovery
- uid: System.Security.Permissions.FileIOPermissionAccess.Read
  parent: System.Security.Permissions.FileIOPermissionAccess
  isExternal: false
  name: Read
  nameWithType: FileIOPermissionAccess.Read
  fullName: System.Security.Permissions.FileIOPermissionAccess.Read
- uid: System.Security.Permissions.FileIOPermissionAccess.Write
  parent: System.Security.Permissions.FileIOPermissionAccess
  isExternal: false
  name: Write
  nameWithType: FileIOPermissionAccess.Write
  fullName: System.Security.Permissions.FileIOPermissionAccess.Write
