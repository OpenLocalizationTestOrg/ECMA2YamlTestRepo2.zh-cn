### YamlMime:ManagedReference
items:
- uid: System.TimeZone
  id: TimeZone
  children:
  - System.TimeZone.#ctor
  - System.TimeZone.CurrentTimeZone
  - System.TimeZone.DaylightName
  - System.TimeZone.GetDaylightChanges(System.Int32)
  - System.TimeZone.GetUtcOffset(System.DateTime)
  - System.TimeZone.IsDaylightSavingTime(System.DateTime)
  - System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  - System.TimeZone.StandardName
  - System.TimeZone.ToLocalTime(System.DateTime)
  - System.TimeZone.ToUniversalTime(System.DateTime)
  langs:
  - csharp
  name: TimeZone
  nameWithType: TimeZone
  fullName: System.TimeZone
  type: Class
  summary: "表示一个时区。"
  remarks: "此时区是在其中使用相同的标准时间的地理区域。      1> [!IMPORTANT]&1;> 只要可能，使用<xref:System.TimeZoneInfo>类而不是时区类。</xref:System.TimeZoneInfo>       检索当前所在的时区，有关的信息并将时间转换从本地时间为协调世界时 (UTC) 或，反之亦然，这样，你可以使用时区类。 但是，不能使用时区类来表示本地区域以外的时区或处理日期和时间从一个时区之间转换。 为此，使用<xref:System.TimeZoneInfo>类。</xref:System.TimeZoneInfo> 此类可用于检索在本地系统上，创建自定义时区，并将时间从一个时区转换到另一个定义任何时区信息。       为本地时区，时区类支持只是单个夏时制调整规则。 因此，时区类可以准确地报告夏时制的信息，或仅对最新的调整规则是有效的段的 UTC 和当地时间之间进行转换。 与此相反，<xref:System.TimeZoneInfo>类支持多个调整规则，这使得使用历史时区数据。</xref:System.TimeZoneInfo>"
  example:
  - "The following example references and displays selected `TimeZone` class elements.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/t-system.timezone_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/t-system.timezone_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/t-system.timezone_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class TimeZone
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.TimeZone.#ctor
  id: '#ctor'
  parent: System.TimeZone
  langs:
  - csharp
  name: TimeZone()
  nameWithType: TimeZone.TimeZone()
  fullName: System.TimeZone.TimeZone()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System
  summary: "初始化的新实例<xref href=&quot;System.TimeZone&quot;></xref>类。"
  syntax:
    content: protected TimeZone ();
    parameters: []
  overload: System.TimeZone.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.CurrentTimeZone
  id: CurrentTimeZone
  parent: System.TimeZone
  langs:
  - csharp
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
  fullName: System.TimeZone.CurrentTimeZone
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取当前计算机的时区。"
  remarks: "当前时区属性对应于<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>属性。</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> 只要可能，使用<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>属性。</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>"
  example:
  - "The following example references the `CurrentTimeZone` property and displays the names for standard time and daylight saving time for the local time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.curren_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.curren_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.curren_1.cs)]"
  syntax:
    content: public static TimeZone CurrentTimeZone { get; }
    return:
      type: System.TimeZone
      description: "A <xref href=&quot;System.TimeZone&quot;> </xref>对象，表示当前的本地时区。"
  overload: System.TimeZone.CurrentTimeZone*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.DaylightName
  id: DaylightName
  parent: System.TimeZone
  langs:
  - csharp
  name: DaylightName
  nameWithType: TimeZone.DaylightName
  fullName: System.TimeZone.DaylightName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取夏令时时区名称。"
  remarks: "如果夏令时未使用时区，空字符串 (&quot;&quot;) 返回。       DaylightName 属性对应于<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>属性。</xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName> 只要可能，使用<xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>属性。</xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=fullName>"
  example:
  - "The following example references and displays the `DaylightName` property of the current time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.daylig_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.daylig_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.daylig_1.cs)]"
  syntax:
    content: public abstract string DaylightName { get; }
    return:
      type: System.String
      description: "夏令时区域名称。"
  overload: System.TimeZone.DaylightName*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.GetDaylightChanges(System.Int32)
  id: GetDaylightChanges(System.Int32)
  parent: System.TimeZone
  langs:
  - csharp
  name: GetDaylightChanges(Int32)
  nameWithType: TimeZone.GetDaylightChanges(Int32)
  fullName: System.TimeZone.GetDaylightChanges(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "返回特定年份的夏时制期间。"
  remarks: "支持每年的只有一个夏时制时间。       如果未在当前时区使用夏令时，则返回值是<xref:System.Globalization.DaylightTime>对象，其中的值<xref:System.Globalization.DaylightTime.Start%2A>和<xref:System.Globalization.DaylightTime.End%2A>是<xref:System.DateTime.MinValue?displayProperty=fullName>，和的值<xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=fullName>是<xref:System.TimeSpan>初始化为 0 的刻度。</xref:System.TimeSpan> </xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=fullName> </xref:System.DateTime.MinValue?displayProperty=fullName> </xref:System.Globalization.DaylightTime.End%2A> </xref:System.Globalization.DaylightTime.Start%2A> </xref:System.Globalization.DaylightTime>"
  syntax:
    content: public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "夏时制期间适用于年。"
    return:
      type: System.Globalization.DaylightTime
      description: "A <xref href=&quot;System.Globalization.DaylightTime&quot;> </xref>对象，其中包含在夏令时的开始和结束日期<code> year </code>。"
  overload: System.TimeZone.GetDaylightChanges*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>是小于 1 或大于 9999。"
  platform:
  - net462
- uid: System.TimeZone.GetUtcOffset(System.DateTime)
  id: GetUtcOffset(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZone.GetUtcOffset(DateTime)
  fullName: System.TimeZone.GetUtcOffset(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "返回指定的本地时间的协调世界时 (UTC) 偏移量。"
  remarks: "此方法返回的偏移量或差值，之间`time`参数和协调世界时 (UTC)。 即︰ `time` = UTC + 此方法将解释的时区偏移量`time`基于其<xref:System.DateTime.Kind%2A>属性。</xref:System.DateTime.Kind%2A> 如果值<xref:System.DateTime.Kind%2A>属性是<xref:System.DateTimeKind?displayProperty=fullName>或<xref:System.DateTimeKind?displayProperty=fullName>，该方法返回的本地时区偏移量。</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime.Kind%2A> 如果<xref:System.DateTime.Kind%2A>属性是<xref:System.DateTimeKind?displayProperty=fullName>，该方法返回等于<xref:System.TimeSpan.Zero?displayProperty=fullName>.</xref:System.TimeSpan.Zero?displayProperty=fullName>的偏移量</xref:System.DateTimeKind?displayProperty=fullName></xref:System.DateTime.Kind%2A>的值       如果本地时区使用夏令时，GetUtcOffset 将应用到当前的调整规则`time`时确定的本地时区偏移量。 返回 GetUtcOffset 的偏移量，即反映是否`time`属于中时区的标准时间还是其夏时制。      1> [!NOTE]&1;> GetUtcOffset 方法只会识别当前夏时制调整规则的本地时区。 因此，可以保证只有在其中最新的调整规则生效期间才能准确地返回了本地时间的 UTC 偏移量。 它可能返回不准确的结果，如果`time`是历史日期和时间值，根据先前的调整规则。       GetUtcOffset 方法对应于<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName> 只要可能，使用<xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=fullName>       因为由表示的日期和时间值`time`和此值相对于 UTC 的偏移量不紧密结合，一个本地或未指定的日期和时间值可能会返回不同的偏移的值在不同计算机上运行或在不同时区下在同一台计算机上运行时。 如果不需要此行为，使用<xref:System.DateTimeOffset>值。</xref:System.DateTimeOffset> <xref:System.DateTimeOffset>数据类型的日期和时间值紧密利用其偏移量上，而从 UTC。</xref:System.DateTimeOffset>"
  syntax:
    content: public abstract TimeSpan GetUtcOffset (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "日期和时间值。"
    return:
      type: System.TimeSpan
      description: "相对于协调世界时 (UTC) 偏移量<code> time </code>。"
  overload: System.TimeZone.GetUtcOffset*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime)
  id: IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "返回一个值，该值指示指定的日期和时间是否处于夏时制期间。"
  remarks: "夏时制时间应用的年份派生自`time`参数。       因为<xref:System.TimeZone>类支持单个夏时制调整规则，IsDaylightSavingTime 方法适用于任何日期，无论调整规则是在生效日期的当前的调整规则。</xref:System.TimeZone> 假定操作系统本身具有准确历史夏令制数据，更准确的结果则可通过使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> 只要可能，使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>"
  syntax:
    content: public virtual bool IsDaylightSavingTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "日期和时间。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> time </code>处于夏时制时间段; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.TimeZone.IsDaylightSavingTime*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  id: IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: IsDaylightSavingTime(DateTime,DaylightTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "返回一个值，该值指示指定的日期和时间是否在指定夏时制期内。"
  remarks: "<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>方法提供为此重载 IsDaylightSavingTime 方法相同的功能。</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName> 只要可能，使用<xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=fullName>"
  syntax:
    content: public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);
    parameters:
    - id: time
      type: System.DateTime
      description: "日期和时间。"
    - id: daylightTimes
      type: System.Globalization.DaylightTime
      description: "要添加。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if <code>time</code> is in <code>daylightTimes</code>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.TimeZone.IsDaylightSavingTime*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>daylightTimes</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.TimeZone.StandardName
  id: StandardName
  parent: System.TimeZone
  langs:
  - csharp
  name: StandardName
  nameWithType: TimeZone.StandardName
  fullName: System.TimeZone.StandardName
  type: Property
  assemblies:
  - mscorlib
  namespace: System
  summary: "获取标准时区名称。"
  remarks: "StandardName 属性对应于<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>属性。</xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName> 只要可能，使用<xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>属性。</xref:System.TimeZoneInfo.StandardName%2A?displayProperty=fullName>"
  example:
  - "The following example references and displays the `StandardName` property of the current time zone.  \n  \n [!code-cpp[System.TimeZone.Class#1](~/add/codesnippet/cpp/p-system.timezone.standa_1.cpp)]\n [!code-vb[System.TimeZone.Class#1](~/add/codesnippet/visualbasic/p-system.timezone.standa_1.vb)]\n [!code-cs[System.TimeZone.Class#1](~/add/codesnippet/csharp/p-system.timezone.standa_1.cs)]"
  syntax:
    content: public abstract string StandardName { get; }
    return:
      type: System.String
      description: "标准时区名称。"
  overload: System.TimeZone.StandardName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "尝试将此属性设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.TimeZone.ToLocalTime(System.DateTime)
  id: ToLocalTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: ToLocalTime(DateTime)
  nameWithType: TimeZone.ToLocalTime(DateTime)
  fullName: System.TimeZone.ToLocalTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "返回指定的日期和时间值所对应的本地时间。"
  remarks: "下表显示之间的关系`time`参数和<xref:System.DateTime>此方法返回的值。</xref:System.DateTime>      |`time`参数 |行为 |返回值 |  |----------------------|--------------|------------------|  |协调世界时 (UTC) 时间 (<xref:System.DateTimeKind?displayProperty=fullName>)。 |将时间而从 UTC 转换为本地时间。 |其值对应于本地时间<xref:System.DateTime>对象`time`。 |  |本地时间 (<xref:System.DateTimeKind?displayProperty=fullName>)。 |不需要进行转换。 |表示的相同<xref:System.DateTime>值`time`参数。 |  |未指定的时间 (<xref:System.DateTimeKind?displayProperty=fullName>)。 |假定时间是 UTC，并将其从 UTC 转换为本地时间。 |其值对应于本地时间<xref:System.DateTime>对象`time`。 |      如果本地时区使用夏令时，时将应用到当前的调整规则`time`执行转换时。</xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTimeKind?displayProperty=fullName>      1> [!NOTE]&1;> 时方法只会识别当前夏时制调整规则的本地时区。 因此，可以保证准确地返回到特定的 UTC 时间，在其中最新的调整规则已生效的时间段内仅对应的本地时间。 它可能返回不准确的结果，如果`time`是历史日期和时间值，根据先前的调整规则。       时方法对应于<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>方法替换其`destinationTimeZone`参数设置为<xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName>。</xref:System.TimeZoneInfo.Local%2A?displayProperty=fullName> </xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName> 只要可能，使用<xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>方法。</xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=fullName>"
  syntax:
    content: public virtual DateTime ToLocalTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "协调世界时 (UTC) 时间。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>对象，其值是对应于本地时间<code> time </code>。</xref:System.DateTime>"
  overload: System.TimeZone.ToLocalTime*
  exceptions: []
  platform:
  - net462
- uid: System.TimeZone.ToUniversalTime(System.DateTime)
  id: ToUniversalTime(System.DateTime)
  parent: System.TimeZone
  langs:
  - csharp
  name: ToUniversalTime(DateTime)
  nameWithType: TimeZone.ToUniversalTime(DateTime)
  fullName: System.TimeZone.ToUniversalTime(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System
  summary: "将返回指向指定的时间对应的协调世界时 (UTC)。"
  remarks: "如果本地时区使用夏令时，ToUniversalTime 将应用到当前的调整规则`time`参数执行转换时。      1> [!NOTE]&1;> ToUniversalTime 方法只会识别当前夏时制调整规则的本地时区。 因此，可以保证准确地返回协调世界时 (UTC) 仅在最新的调整规则是有效的段对应于特定的本地时间。 它可能返回不准确的结果，如果`time`是历史日期和时间值，根据先前的调整规则。       如果`time`参数是明确的时间，该方法假定它是标准时间。 （不明确的时间是指可以映射到标准时间或在本地时区的夏时制。）如果`time`是无效时间，该方法只需减去从本地时区的 UTC 偏移量返回 UTC 本地时间。 （一个无效的时间是指不存在由于夏时制调整规则的应用程序。）     因为`time`解释根据当前系统上当前时区，日期和时间，此方法返回可以与不同，如果应用程序运行在不同计算机上或同一台计算机上的不同时区。 对于在其中的日期和时间值必须表示单一、 明确的时间点的情况下，使用<xref:System.DateTimeOffset>值来表示本地时间。</xref:System.DateTimeOffset>       ToUniversalTime 方法对应于<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>方法重载<xref:System.DateTime>参数<xref:System.DateTime.Kind%2A>属性不等于<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime.Kind%2A> </xref:System.DateTime> </xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName> 只要可能，使用<xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>方法重载。</xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=fullName>"
  syntax:
    content: public virtual DateTime ToUniversalTime (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "日期和时间。"
    return:
      type: System.DateTime
      description: "A<xref:System.DateTime>对象，其值是对应于协调世界时 (UTC) <code> time </code>。</xref:System.DateTime>"
  overload: System.TimeZone.ToUniversalTime*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.TimeZone.#ctor
  parent: System.TimeZone
  isExternal: false
  name: TimeZone()
  nameWithType: TimeZone.TimeZone()
  fullName: System.TimeZone.TimeZone()
- uid: System.TimeZone.CurrentTimeZone
  parent: System.TimeZone
  isExternal: false
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
  fullName: System.TimeZone.CurrentTimeZone
- uid: System.TimeZone
  parent: System
  isExternal: false
  name: TimeZone
  nameWithType: TimeZone
  fullName: System.TimeZone
- uid: System.TimeZone.DaylightName
  parent: System.TimeZone
  isExternal: false
  name: DaylightName
  nameWithType: TimeZone.DaylightName
  fullName: System.TimeZone.DaylightName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.TimeZone.GetDaylightChanges(System.Int32)
  parent: System.TimeZone
  isExternal: false
  name: GetDaylightChanges(Int32)
  nameWithType: TimeZone.GetDaylightChanges(Int32)
  fullName: System.TimeZone.GetDaylightChanges(Int32)
- uid: System.Globalization.DaylightTime
  parent: System.Globalization
  isExternal: false
  name: DaylightTime
  nameWithType: DaylightTime
  fullName: System.Globalization.DaylightTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeZone.GetUtcOffset(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: GetUtcOffset(DateTime)
  nameWithType: TimeZone.GetUtcOffset(DateTime)
  fullName: System.TimeZone.GetUtcOffset(DateTime)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime(DateTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime(DateTime,DaylightTime)
  nameWithType: TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
  fullName: System.TimeZone.IsDaylightSavingTime(DateTime,DaylightTime)
- uid: System.TimeZone.StandardName
  parent: System.TimeZone
  isExternal: false
  name: StandardName
  nameWithType: TimeZone.StandardName
  fullName: System.TimeZone.StandardName
- uid: System.TimeZone.ToLocalTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: ToLocalTime(DateTime)
  nameWithType: TimeZone.ToLocalTime(DateTime)
  fullName: System.TimeZone.ToLocalTime(DateTime)
- uid: System.TimeZone.ToUniversalTime(System.DateTime)
  parent: System.TimeZone
  isExternal: false
  name: ToUniversalTime(DateTime)
  nameWithType: TimeZone.ToUniversalTime(DateTime)
  fullName: System.TimeZone.ToUniversalTime(DateTime)
- uid: System.TimeZone.#ctor*
  parent: System.TimeZone
  isExternal: false
  name: TimeZone
  nameWithType: TimeZone.TimeZone
- uid: System.TimeZone.CurrentTimeZone*
  parent: System.TimeZone
  isExternal: false
  name: CurrentTimeZone
  nameWithType: TimeZone.CurrentTimeZone
- uid: System.TimeZone.DaylightName*
  parent: System.TimeZone
  isExternal: false
  name: DaylightName
  nameWithType: TimeZone.DaylightName
- uid: System.TimeZone.GetDaylightChanges*
  parent: System.TimeZone
  isExternal: false
  name: GetDaylightChanges
  nameWithType: TimeZone.GetDaylightChanges
- uid: System.TimeZone.GetUtcOffset*
  parent: System.TimeZone
  isExternal: false
  name: GetUtcOffset
  nameWithType: TimeZone.GetUtcOffset
- uid: System.TimeZone.IsDaylightSavingTime*
  parent: System.TimeZone
  isExternal: false
  name: IsDaylightSavingTime
  nameWithType: TimeZone.IsDaylightSavingTime
- uid: System.TimeZone.StandardName*
  parent: System.TimeZone
  isExternal: false
  name: StandardName
  nameWithType: TimeZone.StandardName
- uid: System.TimeZone.ToLocalTime*
  parent: System.TimeZone
  isExternal: false
  name: ToLocalTime
  nameWithType: TimeZone.ToLocalTime
- uid: System.TimeZone.ToUniversalTime*
  parent: System.TimeZone
  isExternal: false
  name: ToUniversalTime
  nameWithType: TimeZone.ToUniversalTime
