### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher
  id: EventLogWatcher
  children:
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  - System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  langs:
  - csharp
  name: EventLogWatcher
  nameWithType: EventLogWatcher
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher
  type: Class
  summary: "允许您为传入的事件订阅。 所需的事件发布到事件日志，每次<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;></xref>引发事件时，并将执行处理此事件的方法。"
  remarks: "此类的实例创建从<xref:System.Diagnostics.Eventing.Reader.EventLogQuery>对象，指定为事件订阅的查询。</xref:System.Diagnostics.Eventing.Reader.EventLogQuery> 事件记录在查询中，以表示的条件相匹配时则<xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>引发事件。</xref:System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten>"
  example:
  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'
  syntax:
    content: 'public class EventLogWatcher : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;></xref>通过指定的事件查询的类。"
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "指定为事件订阅的查询。 事件记录在查询中，以表示的条件相匹配时则<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;></xref>引发事件。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(String)
  nameWithType: EventLogWatcher.EventLogWatcher(String)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;></xref>类通过指定的名称或向事件日志的路径。"
  syntax:
    content: public EventLogWatcher (string path);
    parameters:
    - id: path
      type: System.String
      description: "路径或事件的事件日志监视器名称。 如果任何事件将记录在此事件日志，则<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;></xref>引发事件。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery,EventBookmark)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;></xref>类通过指定的事件查询和用作开始位置的查询的书签。"
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "指定为事件订阅的查询。 事件记录在查询中，以表示的条件相匹配时则<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;></xref>引发事件。"
    - id: bookmark
      type: System.Diagnostics.Eventing.Reader.EventBookmark
      description: "书签 （占位符） 用作事件日志或事件流中的起始位置。 仅将由查询返回在书签事件后已记录的事件。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  id: '#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)'
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher&quot;></xref>通过指定事件查询、 书签用作起始对于查询的位置和一个布尔值，确定是否读取事件日志中已存在的事件的类。"
  syntax:
    content: public EventLogWatcher (System.Diagnostics.Eventing.Reader.EventLogQuery eventQuery, System.Diagnostics.Eventing.Reader.EventBookmark bookmark, bool readExistingEvents);
    parameters:
    - id: eventQuery
      type: System.Diagnostics.Eventing.Reader.EventLogQuery
      description: "指定为事件订阅的查询。 事件记录在查询中，以表示的条件相匹配时则<xref href=&quot;System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten&quot;></xref>引发事件。"
    - id: bookmark
      type: System.Diagnostics.Eventing.Reader.EventBookmark
      description: "书签 （占位符） 用作事件日志或事件流中的起始位置。 仅将由查询返回在书签事件后已记录的事件。"
    - id: readExistingEvents
      type: System.Boolean
      description: "一个布尔值，确定是否要读取的事件的事件日志中已存在。 如果此值为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，然后读取现有的事件，如果此值为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，则将不读取现有的事件。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  id: Dispose
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Dispose()
  nameWithType: EventLogWatcher.Dispose()
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "释放此对象使用的所有资源。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: EventLogWatcher.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "释放此对象使用的非托管的资源，还可以释放托管的资源。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  id: Enabled
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  type: Property
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "确定此对象是否开头将事件传递给事件委托。"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>时此对象可以将事件传递到事件委托，然后返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>时此对象已停止传递。"
  overload: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  id: EventRecordWritten
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  langs:
  - csharp
  name: EventRecordWritten
  nameWithType: EventLogWatcher.EventRecordWritten
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  type: Event
  assemblies:
  - System.Core
  namespace: System.Diagnostics.Eventing.Reader
  summary: "允许设置调用的委托 （事件处理程序方法） 获取每次发布的事件的条件相匹配事件中指定此对象的查询。"
  remarks: ''
  example:
  - 'For example code using this class, see [How to: Subscribe to Events in an Event Log](http://msdn.microsoft.com/en-us/62e006d3-9fab-4fdf-a8f8-e23d05498cd4).'
  syntax:
    content: public event EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs> EventRecordWritten;
    return:
      type: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery)
- uid: System.Diagnostics.Eventing.Reader.EventLogQuery
  parent: System.Diagnostics.Eventing.Reader
  isExternal: false
  name: EventLogQuery
  nameWithType: EventLogQuery
  fullName: System.Diagnostics.Eventing.Reader.EventLogQuery
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.String)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(String)
  nameWithType: EventLogWatcher.EventLogWatcher(String)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery,EventBookmark)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark)
- uid: System.Diagnostics.Eventing.Reader.EventBookmark
  parent: System.Diagnostics.Eventing.Reader
  isExternal: false
  name: EventBookmark
  nameWithType: EventBookmark
  fullName: System.Diagnostics.Eventing.Reader.EventBookmark
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor(System.Diagnostics.Eventing.Reader.EventLogQuery,System.Diagnostics.Eventing.Reader.EventBookmark,System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  nameWithType: EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventLogWatcher(EventLogQuery,EventBookmark,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose()
  nameWithType: EventLogWatcher.Dispose()
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose()
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(System.Boolean)
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: EventLogWatcher.Dispose(Boolean)
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose(Boolean)
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventRecordWritten
  nameWithType: EventLogWatcher.EventRecordWritten
  fullName: System.Diagnostics.Eventing.Reader.EventLogWatcher.EventRecordWritten
- uid: System.EventHandler{System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<EventRecordWrittenEventArgs>
  nameWithType: EventHandler<EventRecordWrittenEventArgs>
  fullName: System.EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Diagnostics.Eventing.Reader.EventRecordWrittenEventArgs
    name: EventRecordWrittenEventArgs
    nameWithType: EventRecordWrittenEventArgs
    fullName: EventRecordWrittenEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.#ctor*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: EventLogWatcher
  nameWithType: EventLogWatcher.EventLogWatcher
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Dispose*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Dispose
  nameWithType: EventLogWatcher.Dispose
- uid: System.Diagnostics.Eventing.Reader.EventLogWatcher.Enabled*
  parent: System.Diagnostics.Eventing.Reader.EventLogWatcher
  isExternal: false
  name: Enabled
  nameWithType: EventLogWatcher.Enabled
