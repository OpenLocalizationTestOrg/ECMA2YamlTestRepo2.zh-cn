### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.MessageSecurityOverMsmq
  id: MessageSecurityOverMsmq
  children:
  - System.ServiceModel.MessageSecurityOverMsmq.#ctor
  - System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
  - System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
  langs:
  - csharp
  name: MessageSecurityOverMsmq
  nameWithType: MessageSecurityOverMsmq
  fullName: System.ServiceModel.MessageSecurityOverMsmq
  type: Class
  summary: "可用来设置消息级安全属性上<xref href=&quot;System.ServiceModel.NetMsmqBinding&quot;></xref>绑定。"
  remarks: "从通过绑定访问此对象<xref:System.ServiceModel.NetMsmqBinding.Security%2A>属性，它返回<xref:System.ServiceModel.NetMsmqSecurity>对象。</xref:System.ServiceModel.NetMsmqSecurity> </xref:System.ServiceModel.NetMsmqBinding.Security%2A> 此对象具有<xref:System.ServiceModel.NetMsmqSecurity.Message%2A>提供对 MessageSecurityOverMsmq 对象的引用的属性。</xref:System.ServiceModel.NetMsmqSecurity.Message%2A>"
  example:
  - >-
    [!code-vb[UEMessageSecurityOverMsmq#1](~/add/codesnippet/visualbasic/t-system.servicemodel.me_1_1.vb)]
     [!code-cs[UEMessageSecurityOverMsmq#1](~/add/codesnippet/csharp/t-system.servicemodel.me_1_1.cs)]
  syntax:
    content: public sealed class MessageSecurityOverMsmq
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.MessageSecurityOverMsmq.#ctor
  id: '#ctor'
  parent: System.ServiceModel.MessageSecurityOverMsmq
  langs:
  - csharp
  name: MessageSecurityOverMsmq()
  nameWithType: MessageSecurityOverMsmq.MessageSecurityOverMsmq()
  fullName: System.ServiceModel.MessageSecurityOverMsmq.MessageSecurityOverMsmq()
  type: Constructor
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "初始化的新实例<xref href=&quot;System.ServiceModel.MessageSecurityOverMsmq&quot;></xref>类。"
  syntax:
    content: public MessageSecurityOverMsmq ();
    parameters: []
  overload: System.ServiceModel.MessageSecurityOverMsmq.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
  id: AlgorithmSuite
  parent: System.ServiceModel.MessageSecurityOverMsmq
  langs:
  - csharp
  name: AlgorithmSuite
  nameWithType: MessageSecurityOverMsmq.AlgorithmSuite
  fullName: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "指定用于 SOAP 级安全消息的算法套件。"
  remarks: "<xref:System.ServiceModel.Security.SecurityAlgorithmSuite>定义了各种算法，如规范化、 摘要式、 密钥包装、 签名、 加密和密钥派生算法。</xref:System.ServiceModel.Security.SecurityAlgorithmSuite> 与使用一组不同于默认算法的平台一起使用时，此属性是最相关。 对此属性进行修改时，你应注意相关算法的优缺点。"
  example:
  - >-
    [!code-vb[UEMessageSecurityOverMsmq#2](~/add/codesnippet/visualbasic/p-system.servicemodel.me_1_1.vb)]
     [!code-cs[UEMessageSecurityOverMsmq#2](~/add/codesnippet/csharp/p-system.servicemodel.me_1_1.cs)]
  syntax:
    content: public System.ServiceModel.Security.SecurityAlgorithmSuite AlgorithmSuite { get; set; }
    return:
      type: System.ServiceModel.Security.SecurityAlgorithmSuite
      description: "<xref href=&quot;System.ServiceModel.Security.SecurityAlgorithmSuite&quot;> </xref>通过发送的消息设置<xref href=&quot;System.ServiceModel.NetMsmqBinding&quot;></xref>绑定。"
  overload: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
  id: ClientCredentialType
  parent: System.ServiceModel.MessageSecurityOverMsmq
  langs:
  - csharp
  name: ClientCredentialType
  nameWithType: MessageSecurityOverMsmq.ClientCredentialType
  fullName: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel
  summary: "获取或设置<xref:System.ServiceModel.MessageCredentialType>通过 MSMQ 传输发送的消息的安全设置。</xref:System.ServiceModel.MessageCredentialType>"
  remarks: "此属性可以设置为下列值之一:-**无**︰ 这允许服务与匿名客户端交互。 服务和客户端都不需要的凭据。      - **Windows**︰ 这允许 SOAP 交换在已通过身份验证的 Windows 凭据上下文。 此设置总是执行基于 Kerberos 的身份验证。      -**用户名**︰ 这允许服务要求客户端进行身份验证使用 UserName 凭据。 必须指定此凭据使用<xref:System.ServiceModel.Description.ClientCredentials>类。</xref:System.ServiceModel.Description.ClientCredentials>      1> [!NOTE]  >   [!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]不支持发送密码摘要或派生密钥使用的密码，并使用这样的密钥来提供消息安全性。 在这种情况下，[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]将交换的安全性时使用 UserName 凭据。 此模式要求使用客户端上，指定服务证书`ClientCredential`行为和`serviceCertificate`:- `Certificate`︰ 这允许服务要求客户端进行身份验证使用的证书。 客户端凭据在这种情况下必须使用指定<xref:System.ServiceModel.Description.ClientCredentials>类或`ClientCredentials`行为。</xref:System.ServiceModel.Description.ClientCredentials> 指定服务凭据在这种情况下必须使用<xref:System.ServiceModel.Description.ClientCredentials>类或`ClientCredentials`行为，通过指定`serviceCertificate`。</xref:System.ServiceModel.Description.ClientCredentials>      - `InfoCard`︰ 这允许服务要求客户端进行身份验证使用 InfoCard。 `serviceCertificate`必须将其设置在`ClientCredential`行为。      -的 Certificate 凭据`MessageSecurityOverMsmq`是相关仅安全模式设置为`Both`或`Message`。"
  example:
  - >-
    [!code-vb[UEMessageSecurityOverMsmq#3](~/add/codesnippet/visualbasic/p-system.servicemodel.me_4_1.vb)]
     [!code-cs[UEMessageSecurityOverMsmq#3](~/add/codesnippet/csharp/p-system.servicemodel.me_4_1.cs)]
  syntax:
    content: public System.ServiceModel.MessageCredentialType ClientCredentialType { get; set; }
    return:
      type: System.ServiceModel.MessageCredentialType
      description: "<xref:System.ServiceModel.MessageCredentialType>通过 MSMQ 传输发送的消息的安全设置。</xref:System.ServiceModel.MessageCredentialType>"
  overload: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.MessageSecurityOverMsmq.#ctor
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: MessageSecurityOverMsmq()
  nameWithType: MessageSecurityOverMsmq.MessageSecurityOverMsmq()
  fullName: System.ServiceModel.MessageSecurityOverMsmq.MessageSecurityOverMsmq()
- uid: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: AlgorithmSuite
  nameWithType: MessageSecurityOverMsmq.AlgorithmSuite
  fullName: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite
- uid: System.ServiceModel.Security.SecurityAlgorithmSuite
  parent: System.ServiceModel.Security
  isExternal: false
  name: SecurityAlgorithmSuite
  nameWithType: SecurityAlgorithmSuite
  fullName: System.ServiceModel.Security.SecurityAlgorithmSuite
- uid: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: ClientCredentialType
  nameWithType: MessageSecurityOverMsmq.ClientCredentialType
  fullName: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType
- uid: System.ServiceModel.MessageCredentialType
  parent: System.ServiceModel
  isExternal: true
  name: MessageCredentialType
  nameWithType: MessageCredentialType
  fullName: System.ServiceModel.MessageCredentialType
- uid: System.ServiceModel.MessageSecurityOverMsmq.#ctor*
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: MessageSecurityOverMsmq
  nameWithType: MessageSecurityOverMsmq.MessageSecurityOverMsmq
- uid: System.ServiceModel.MessageSecurityOverMsmq.AlgorithmSuite*
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: AlgorithmSuite
  nameWithType: MessageSecurityOverMsmq.AlgorithmSuite
- uid: System.ServiceModel.MessageSecurityOverMsmq.ClientCredentialType*
  parent: System.ServiceModel.MessageSecurityOverMsmq
  isExternal: false
  name: ClientCredentialType
  nameWithType: MessageSecurityOverMsmq.ClientCredentialType
