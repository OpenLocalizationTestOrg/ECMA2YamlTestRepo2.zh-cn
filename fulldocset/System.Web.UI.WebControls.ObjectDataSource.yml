### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.ObjectDataSource
  id: ObjectDataSource
  children:
  - System.Web.UI.WebControls.ObjectDataSource.#ctor
  - System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  - System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  - System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  - System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  - System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  - System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  - System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  - System.Web.UI.WebControls.ObjectDataSource.Delete
  - System.Web.UI.WebControls.ObjectDataSource.Deleted
  - System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  - System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  - System.Web.UI.WebControls.ObjectDataSource.Deleting
  - System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  - System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  - System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  - System.Web.UI.WebControls.ObjectDataSource.Filtering
  - System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  - System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  - System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  - System.Web.UI.WebControls.ObjectDataSource.Insert
  - System.Web.UI.WebControls.ObjectDataSource.Inserted
  - System.Web.UI.WebControls.ObjectDataSource.Inserting
  - System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  - System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  - System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  - System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  - System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  - System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  - System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  - System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  - System.Web.UI.WebControls.ObjectDataSource.Select
  - System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  - System.Web.UI.WebControls.ObjectDataSource.Selected
  - System.Web.UI.WebControls.ObjectDataSource.Selecting
  - System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  - System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  - System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  - System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  - System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  - System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  - System.Web.UI.WebControls.ObjectDataSource.TypeName
  - System.Web.UI.WebControls.ObjectDataSource.Update
  - System.Web.UI.WebControls.ObjectDataSource.Updated
  - System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  - System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  - System.Web.UI.WebControls.ObjectDataSource.Updating
  langs:
  - csharp
  name: ObjectDataSource
  nameWithType: ObjectDataSource
  fullName: System.Web.UI.WebControls.ObjectDataSource
  type: Class
  summary: "表示提供多层 Web 应用程序体系结构中的数据绑定控件的数据的业务对象。"
  remarks: "本主题中:-[简介](#introduction)      -   [目的](#purpose)      -   [检索数据](#retrieving_data)      -   [执行数据操作](#performing_data_operations)      -   [筛选数据](#filtering_data)      -   [Caching](#caching)      -   [功能](#features)      -   [数据视图](#data_view)      -   [使用 LINQ to SQL](#using_linq_to_sql)      -   [声明性语法](#declarative_syntax)<a name=&quot;introduction&quot;> </a> # # 简介 ObjectDataSource 控件的工作方式与你创建的类。       创建方法用于检索和更新数据，并提供到 ObjectDataSource 控件在标记中的这些方法的名称。 在呈现或回发的处理时，ObjectDataSource 调用具有指定的方法。       ObjectDataSource 控件没有可视化呈现。 因此，ObjectDataSource 不支持 visual 功能如<xref:System.Web.UI.DataSourceControl.EnableTheming%2A>或<xref:System.Web.UI.DataSourceControl.SkinID%2A>属性。</xref:System.Web.UI.DataSourceControl.SkinID%2A> </xref:System.Web.UI.DataSourceControl.EnableTheming%2A>      <a name=&quot;purpose&quot;></a># # 目的一个非常常见的应用程序设计的做法是将表示层单独从业务逻辑，封装业务对象中的业务逻辑。 这些业务对象的窗体之间在表示层和数据层，从而导致三层应用程序体系结构的不同层。 ObjectDataSource 控件使开发人员能够在保留其三层应用程序体系结构的同时使用 ASP.NET 数据源控件。       ObjectDataSource 控件使用反射来创建的业务对象的实例并对其以检索、 更新、 插入和删除数据调用方法。 <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性标识 ObjectDataSource 适用于类的名称。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> ObjectDataSource 控件创建和销毁的类的每个方法调用; 实例它不保留对象在内存中的 Web 请求的生存期内。 如果你使用的业务对象需要多资源或将否则占用大量资源来创建和销毁，这是在仔细考虑。 使用的高开销对象可能不是最佳设计选择，但你可以通过使用控制对象的生命周期<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>      1> [!NOTE]&1;> 由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 如果方法是`static`(`Shared`在 Visual Basic 中)，未创建业务对象的实例，与<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>不会引发事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>      <a name=&quot;retrieving_data&quot;></a># # 检索从业务对象，检索数据的数据设置<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性中检索数据的方法的名称。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 如果方法不返回<xref:System.Collections.IEnumerable>或<xref:System.Data.DataSet>对象，该对象包装由运行时在<xref:System.Collections.IEnumerable>集合。</xref:System.Collections.IEnumerable> </xref:System.Data.DataSet> </xref:System.Collections.IEnumerable> 如果方法签名具有参数，你可以添加<xref:System.Web.UI.WebControls.Parameter>对象添加到<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合，然后将它们绑定到你想要将传递给由指定的方法的值<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.Parameter> 为了使 ObjectDataSource 控件要使用参数，参数必须与匹配的名称和类型的方法签名中的参数。 有关详细信息，请参阅[ObjectDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。       ObjectDataSource 控件中检索数据时<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>调用方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 此方法提供以编程方式访问由指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 通过指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性将自动调用绑定到 ObjectDataSource 控件时其`DataBind`调用方法。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 如果你设置`DataSourceID`数据绑定控件的属性，该控件自动将绑定到数据从数据源中，根据需要。 设置`DataSourceID`属性是 ObjectDataSource 控件绑定到数据绑定控件的建议的方法。 或者，您可以设置`DataSource`属性，但你必须显式调用`DataBind`的数据绑定控件的方法。 你可以调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>随时以编程方式检索数据的方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       有关将数据绑定控件绑定到数据源控件的详细信息，请参阅[数据源控件绑定到数据使用](http://msdn.microsoft.com/en-us/e41adfff-8fb8-449e-9cd1-9bd49788c5f7)。      <a name=&quot;performing_data_operations&quot;></a># # 执行数据操作具体取决于 ObjectDataSource 控件的业务对象的功能上配合，你可以执行数据操作，例如更新、 插入和删除。 若要执行这些数据操作，请设置相应的方法名称和任何关联的参数为你想要执行的操作。 例如，对于更新操作，设置<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性的名称的业务对象方法执行更新以及添加任何所需参数为<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 如果与数据绑定控件相关联 ObjectDataSource 控件，数据绑定控件通过添加参数。 在这种情况下，你需要确保该方法的参数名称匹配的数据绑定控件中的字段名称。 执行更新时<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>显式由你的代码或通过数据绑定控件自动调用方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 都将执行相同的常规模式<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 业务对象被认为执行这些类型的数据操作一条记录一次，而不是批处理。      <a name=&quot;filtering_data&quot;></a># # 筛选 ObjectDataSource 控件可以筛选将检索的数据的数据<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，如果返回的数据为<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 你可以设置<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性筛选表达式中，通过使用格式字符串语法，并将值绑定到参数中指定的表达式中<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>      <a name=&quot;caching&quot;></a># # 缓存尽管 ObjectDataSource 不会跨多个请求，保留业务对象的实例，但它可以缓存调用由标识的方法的结果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 在数据缓存，因为在后续调用过程<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回缓存的数据，而不是创建的业务对象，然后调用其<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>使用反射。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 缓存可避免创建对象并调用 Web 服务器上的内存为代价其数据方法。 ObjectDataSource 自动缓存的数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`，和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为在缓存中存储数据丢弃缓存之前的秒数。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> 你还可以指定<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性和可选<xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> ObjectDataSource 控件，可以缓存所有类型的数据，但不是应都缓存保留资源或不能共享多个请求提供服务的状态的对象 (例如，打开<xref:System.Data.SqlClient.SqlDataReader>对象)，因为该对象的同一个实例将用于多个请求提供服务。</xref:System.Data.SqlClient.SqlDataReader>      <a name=&quot;features&quot;></a># # 功能下表介绍 ObjectDataSource 控件的功能。      |功能 |要求 |  |----------------|------------------|  |选择 |将<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性设置为选择数据，业务对象方法的名称和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合中包括所有必需的参数，以编程方式或通过使用数据绑定控件。 |  |排序 |将<xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A>属性设置为带有排序条件的<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>方法中的参数的名称。 |  |筛选 |设置<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性为一个筛选表达式和 （可选） 添加到任何参数<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合来筛选的数据时<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>调用方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SortParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性指定该方法必须返回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>。 |  |分页 |如果支持数据源分页<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>方法包含要检索的记录的最大数以及要检索的第一个记录的索引的参数。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 这些参数的名称必须设置<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>属性，分别。</xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> 数据绑定控件可能能够执行分页本身，即使 ObjectDataSource 控件不支持直接在指定的方法中的分页<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 数据绑定控件能够执行此操作的要求是<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性指定该方法返回实现<xref:System.Collections.ICollection>接口的对象。 |  |更新 |将<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性设置为更新数据，业务对象方法的名称和<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合中包括所有必需的参数。 |  |删除 |将<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性设置为业务对象方法或删除数据的函数的名称和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合中包括所有必需的参数。 |  |插入 |将<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性设置为业务对象方法或将数据，插入的函数的名称和<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合中包括所有必需的参数。 |  |缓存 |将<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`，和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性根据缓存数据所需的缓存行为。 |    &1;> [!NOTE]&1;> 当使用 ObjectDataSource 类若要更新或插入数据时，在客户端上输入的字符串不自动转换从客户端的区域性格式为服务器区域性格式。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Collections.ICollection> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 例如，客户端区域性可能会指定 DD/MM/YYYY 作为日期格式，并且在服务器上的日期格式可能 MM/DD/YYYY。 在这种情况下，将在输入 2009 年 10 月 5 日<xref:System.Web.UI.WebControls.TextBox>控件用作 5/10/2009年，但将被解释为 2009 年 5 月 10 日。</xref:System.Web.UI.WebControls.TextBox> 2009 年 10 月 15 日 15/10/2009，如下所示输入，并将被拒绝为无效的日期。      <a name=&quot;data_view&quot;></a># # 数据视图作为与所有数据源控件，ObjectDataSource 控件是与数据源视图类相关联。 ObjectDataSource 控件时页开发人员用来处理数据，接口<xref:System.Web.UI.WebControls.ObjectDataSourceView>类是数据绑定控件使用的接口。</xref:System.Web.UI.WebControls.ObjectDataSourceView> 此外，<xref:System.Web.UI.WebControls.ObjectDataSourceView>类描述的数据源控件，功能和执行的实际工作。</xref:System.Web.UI.WebControls.ObjectDataSourceView> ObjectDataSource 控件仅有一个关联<xref:System.Web.UI.WebControls.ObjectDataSourceView>，并且始终名为`DefaultView`。</xref:System.Web.UI.WebControls.ObjectDataSourceView> 虽然<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象公开︰<xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A>方法，许多其属性和方法的包装，并将其直接通过 ObjectDataSource 控件公开。</xref:System.Web.UI.WebControls.ObjectDataSource.GetView%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 在后台，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象执行所有的数据操作，包括检索、 插入、 更新、 删除、 筛选和对数据进行排序。</xref:System.Web.UI.WebControls.ObjectDataSourceView> 有关详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSourceView>。</xref:System.Web.UI.WebControls.ObjectDataSourceView>      <a name=&quot;using_linq_to_sql&quot;></a># # 使用 LINQ to SQL 你可以使用 LINQ to SQL 类使用 ObjectDataSource 控件。 若要执行此操作，你设置<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性数据上下文类的名称。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 你还设置<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>执行相应操作中的数据上下文类的方法的方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 你必须创建的事件处理程序<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件，以取消释放的数据上下文类。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 此步骤是必需因为 LINQ to SQL 支持延迟的执行，而 ObjectDataSource 控件尝试后选择操作释放的数据上下文。 有关如何创建 LINQ to SQL 类的详细信息，请参阅[如何︰ 创建 LINQ to SQL 类 Web 项目中](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081)。 有关如何取消数据上下文类的释放的示例，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>      ## 使用实体框架你还可以使用 ObjectDataSource 控件与实体框架。 有关详细信息，请参阅[使用实体框架和 ObjectDataSource 控件](http://go.microsoft.com/fwlink/?LinkId=209117)。      <a name=&quot;declarative_syntax&quot;></a>    ## Declarative Syntax      ```   <asp:ObjectDataSource       CacheDuration=&quot;string|Infinite&quot;       CacheExpirationPolicy=&quot;Absolute|Sliding&quot;       CacheKeyDependency=&quot;string&quot;       ConflictDetection=&quot;OverwriteChanges|CompareAllValues&quot;       ConvertNullToDBNull=&quot;True|False&quot;       DataObjectTypeName=&quot;string&quot;       DeleteMethod=&quot;string&quot;       EnableCaching=&quot;True|False&quot;       EnablePaging=&quot;True|False&quot;       EnableTheming=&quot;True|False&quot;       EnableViewState=&quot;True|False&quot;       FilterExpression=&quot;string&quot;       ID=&quot;string&quot;       InsertMethod=&quot;string&quot;       MaximumRowsParameterName=&quot;string&quot;       OldValuesParameterFormatString=&quot;string&quot;       OnDataBinding=&quot;DataBinding event handler&quot;       OnDeleted=&quot;Deleted event handler&quot;       OnDeleting=&quot;Deleting event handler&quot;       OnDisposed=&quot;Disposed event handler&quot;       OnFiltering=&quot;Filtering event handler&quot;       OnInit=&quot;Init event handler&quot;       OnInserted=&quot;Inserted event handler&quot;       OnInserting=&quot;Inserting event handler&quot;       OnLoad=&quot;Load event handler&quot;       OnObjectCreated=&quot;ObjectCreated event handler&quot;       OnObjectCreating=&quot;ObjectCreating event handler&quot;       OnObjectDisposing=&quot;ObjectDisposing event handler&quot;       OnPreRender=&quot;PreRender event handler&quot;       OnSelected=&quot;Selected event handler&quot;       OnSelecting=&quot;Selecting event handler&quot;       OnUnload=&quot;Unload event handler&quot;       OnUpdated=&quot;Updated event handler&quot;       OnUpdating=&quot;Updating event handler&quot;       runat=&quot;server&quot;       SelectCountMethod=&quot;string&quot;       SelectMethod=&quot;string&quot;       SkinID=&quot;string&quot;       SortParameterName=&quot;string&quot;       SqlCacheDependency=&quot;string&quot;       StartRowIndexParameterName=&quot;string&quot;       TypeName=&quot;string&quot;       UpdateMethod=&quot;string&quot;       Visible=&quot;True|False&quot;   >           <DeleteParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </DeleteParameters>           <FilterParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </FilterParameters>           <InsertParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </InsertParameters>           <SelectParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </SelectParameters>           <UpdateParameters>                   <asp:ControlParameter                       ControlID=&quot;string&quot;                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:CookieParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       CookieName=&quot;string&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:FormParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       FormField=&quot;string&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:Parameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:ProfileParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       PropertyName=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:QueryStringParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       QueryStringField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />                   <asp:SessionParameter                       ConvertEmptyStringToNull=&quot;True|False&quot;                       DefaultValue=&quot;string&quot;                       Direction=&quot;Input|Output|InputOutput|ReturnValue&quot;                       Name=&quot;string&quot;                       SessionField=&quot;string&quot;                       Size=&quot;integer&quot;                       Type=&quot;Empty|Object|DBNull|Boolean|Char|SByte|                           Byte|Int16|UInt16|Int32|UInt32|Int64|UInt64|                           Single|Double|Decimal|DateTime|String&quot;                   />           </UpdateParameters>   </asp:ObjectDataSource>   ```"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://code.msdn.microsoft.com/Project/Download/FileDownload.aspx?ProjectName=aspnetmsdnexamples&DownloadId=14838).  \n  \n This section shows an ObjectDataSource in markup in an .aspx page and it shows the business objects that it works with. The example is the .aspx page. It contains a <xref:System.Web.UI.WebControls.GridView> control that is bound to an ObjectDataSource control. The ObjectDataSource control markup specifies the name of the business object and the name of the business object method to call in order to retrieve data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following example shows the business object that the ObjectDataSource control in the .aspx page uses. (Many other ObjectDataSource code examples use this business object also.) The example consists of the following two basic classes:  \n  \n-   The `EmployeeLogic` class is the business logic class that the ObjectDataSource uses.  \n  \n-   The `NorthwindEmployee` class defines the data object that is returned by the `GetAllEmployees` method of the `EmployeeLogic` class.  \n  \n An additional `NorthwindDataException` class is provided as a convenience.  \n  \n This set of example classes works with the Northwind Traders database, which is available with Microsoft SQL Server and Microsoft Access. For a complete working example, you must compile and use these classes with the .aspx page example that is provided. For information about how to install the Northwind Traders database, see [How to: Install Sample Databases](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_105_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_105_2.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("TypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.ObjectDataSourceDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.ObjectDataSource))]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class ObjectDataSource : System.Web.UI.DataSourceControl
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  implements: []
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OnUnload(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>类。"
  syntax:
    content: public ObjectDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>具有指定的类型名称和数据检索方法名称的类。"
  remarks: "值`typeName`参数可以为位于 Bin 或 App_Code 目录中的代码的部分限定的类型或在全局程序集缓存中注册的代码的完全限定的类型名称。 如果你使用的全局程序集缓存，你必须添加对相应的引用`assemblies`Machine.config 或 Web.config 配置文件节。"
  syntax:
    content: public ObjectDataSource (string typeName, string selectMethod);
    parameters:
    - id: typeName
      type: System.String
      description: "类的名称， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>配合。"
    - id: selectMethod
      type: System.String
      description: "方法的名称或函数的<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>调用以检索数据。"
  overload: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  id: CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的总时间，以秒为单位，数据源控件，缓存数据检索到的<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持数据缓存。</xref:System.Web.UI.WebControls.ObjectDataSource> 数据被缓存，调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法检索数据从缓存而不是从业务对象<xref:System.Web.UI.WebControls.ObjectDataSource>配合。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 在缓存过期，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法从业务对象中，检索数据，然后再次缓存的数据。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动缓存数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`和 CacheDuration 属性设置为一个值大于 0，指示在缓存中存储数据的缓存项将被丢弃之前的秒数。</xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 值为 0 指示无限期的缓存。       通过持续时间的组合调整缓存和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>设置。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性设置为<xref:System.Web.UI.DataSourceCacheExpiry>值，<xref:System.Web.UI.WebControls.ObjectDataSource>在首次调用上缓存数据<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法并使其在内存中保持为最多由 CacheDuration 属性指定的时间量。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 如果所需内存，则可能之前持续时间，发布数据。 在下一步调用然后刷新缓存<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 如果<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性设置为<xref:System.Web.UI.DataSourceCacheExpiry>值，数据源控件缓存上首次调用的数据<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，但将重置为其保留为每个后续调用上的缓存的时间范围<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceCacheExpiry> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> 缓存过期时间，自上次调用它等于 CacheDuration 属性没有任何活动如果<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports caching. To enable caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the CacheDuration and <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1024_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1024_2.cs)]"
  syntax:
    content: public virtual int CacheDuration { get; set; }
    return:
      type: System.Int32
      description: "秒数<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>缓存的结果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>属性调用。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> 默认值为 0。 值不能为负数。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  id: CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置缓存到期行为，在结合了持续时间，描述了数据源控件使用的缓存行为。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持数据缓存。</xref:System.Web.UI.WebControls.ObjectDataSource> 数据被缓存，调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法检索数据从缓存而不是从业务对象<xref:System.Web.UI.WebControls.ObjectDataSource>配合。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 在缓存过期，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法从业务对象中，检索数据，然后再次缓存的数据。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动缓存数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为一个值大于 0，指示在缓存中存储数据的缓存项将被丢弃之前的秒数。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 值为 0 指示无限期缓存期限。       缓存受持续时间和 CacheExpirationPolicy 设置的组合。 如果 CacheExpirationPolicy 属性设置为<xref:System.Web.UI.DataSourceCacheExpiry>值，<xref:System.Web.UI.WebControls.ObjectDataSource>在首次调用上缓存数据<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法并使其在内存中保持为最多，由指定的时间量<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.DataSourceCacheExpiry> 如果所需内存，则可能之前持续时间，发布数据。 在下一步调用然后刷新缓存<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 如果 CacheExpirationPolicy 属性设置为<xref:System.Web.UI.DataSourceCacheExpiry>值，数据源控件缓存上首次调用的数据<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，但将重置为其保留为每个后续调用的缓存的时间范围<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceCacheExpiry> 缓存过期，如果一段时间，它等于没有任何活动<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>自上次调用属性<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> object supports filtering and caching. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how an <xref:System.Web.UI.WebControls.ObjectDataSource> control supports filtering and caching. To enable filtering and caching, you must implement the method that retrieves data, which is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, to return the data as a <xref:System.Data.DataSet> object. In this example, caching is enabled because the `EmployeeLogic` object returns data as a <xref:System.Data.DataSet>, the <xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> property is set to `true`, and the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> and CacheExpirationPolicy properties are set. The <xref:System.Web.UI.WebControls.ObjectDataSource> caches data that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property for 30 seconds.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_6#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList>. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>. This code example is part of a larger example provided for the <xref:System.Web.UI.WebControls.ObjectDataSource> class.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1282_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1282_2.cs)]"
  syntax:
    content: public virtual System.Web.UI.DataSourceCacheExpiry CacheExpirationPolicy { get; set; }
    return:
      type: System.Web.UI.DataSourceCacheExpiry
      description: "之一<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;></xref>值。 默认值是<xref href=&quot;System.Web.UI.DataSourceCacheExpiry&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  id: CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置用户定义键依赖项链接到的所有数据由数据源控件创建的缓存对象。"
  remarks: "CacheKeyDependency 属性可以设置为任何任意字符串值。       在密钥过期时，所有缓存对象显式已都过期。 这样您就可以使创建的缓存条目失效<xref:System.Web.UI.WebControls.ObjectDataSource>从你自己的页的代码以编程方式。</xref:System.Web.UI.WebControls.ObjectDataSource>       <xref:System.Web.UI.WebControls.ObjectDataSource>控件支持数据缓存。</xref:System.Web.UI.WebControls.ObjectDataSource> 数据被缓存，调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法检索数据从缓存而不是从业务对象<xref:System.Web.UI.WebControls.ObjectDataSource>配合。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 在缓存过期，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法从业务对象中，检索数据，然后再次缓存的数据。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动缓存数据时<xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A>属性设置为`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为一个值大于 0，指示在缓存中存储数据的缓存项将被丢弃之前的秒数。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.EnableCaching%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 值为 0 指示无限期的缓存。       你可以设置要创建的所有缓存项之间建立依赖关系的 CacheKeyDependency 属性<xref:System.Web.UI.WebControls.ObjectDataSource>控件和密钥。</xref:System.Web.UI.WebControls.ObjectDataSource> 通过使键可以在任何时以编程方式终止所有缓存条目。 通过使用过期密钥<xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>当前 CacheKeyDependency 值与参数的方法。</xref:System.Web.Caching.Cache.Remove%2A?displayProperty=fullName>       对每个组合都创建一个唯一的缓存条目<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> 多个<xref:System.Web.UI.WebControls.ObjectDataSource>控件可以使用相同的缓存条目在方案中，将使用相同的类型、 方法和参数的数据的加载。</xref:System.Web.UI.WebControls.ObjectDataSource>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The CacheKeyDependency property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the CacheKeyDependency value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the CacheKeyDependency value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_180_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_180_3.cs)]"
  syntax:
    content: public virtual string CacheKeyDependency { get; set; }
    return:
      type: System.String
      description: "通过创建一个用于标识所有缓存对象键<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  id: ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，确定是否仅将新值传递给<xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref>方法或旧和新值传递给<xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref>方法。"
  remarks: "此属性确定的旧和新值的参数适用于指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 例如，如果该方法是指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性返回<xref:System.Data.DataTable>与列的控件`Name`和`Number`，和 ConflictDetection 属性设置为<xref:System.Web.UI.ConflictOptions>字段中，参数为创建`Name`和`Number`为`Update`方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Data.DataTable> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 如果 ConflictDetection 属性设置为<xref:System.Web.UI.ConflictOptions>值，参数为创建`Name`， `Number`， `original_Name`，和`original_Number`。</xref:System.Web.UI.ConflictOptions> (取决于原始值的参数的确切名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性。)</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A><xref:System.Web.UI.WebControls.ObjectDataSource>然后确定方法是否在指定<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性具有匹配的参数。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       并发控制是一种数据存储区使用来控制如何读取和更改存储区中，在访问和操作同一数据多个客户端数据的技术。 例如，一台客户端读取数据，并将其呈现给用户，而另一个客户端读取相同的数据，并将其呈现给其他用户。 如果两个用户更新的数据，并将其提交至数据存储，则可能会发生了意外的结果，因为两个客户端可以为相同的数据提供不同的值。 这是被视为冲突。 ConflictDetection 属性设置为<xref:System.Web.UI.ConflictOptions>值，`Update`方法然后可以将比较到原始的数据源，以检测冲突，并根据需要处理它们的旧和新值。</xref:System.Web.UI.ConflictOptions>       ConflictDetection 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>"
  syntax:
    content: public System.Web.UI.ConflictOptions ConflictDetection { get; set; }
    return:
      type: System.Web.UI.ConflictOptions
      description: "之一<xref href=&quot;System.Web.UI.ConflictOptions&quot;></xref>值。 默认值是<xref href=&quot;System.Web.UI.ConflictOptions&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  id: ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>传递给更新、 插入或删除操作的值自动转换从<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>到<xref href=&quot;System.DBNull.Value&quot;></xref>值<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件。"
  remarks: "不转换`null`到<xref:System.DBNull.Value>值可能会在运行时导致错误。</xref:System.DBNull.Value> ConvertNullToDBNull 属性用于指示是否<xref:System.Web.UI.WebControls.Parameter>传递给更新、 插入或删除操作的值自动转换从`null`到<xref:System.DBNull.Value>值<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.DBNull.Value> </xref:System.Web.UI.WebControls.Parameter>"
  syntax:
    content: public bool ConvertNullToDBNull { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果任何<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>中值<xref href=&quot;System.Web.UI.WebControls.Parameter&quot;></xref>对象传递给<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件自动转换为<xref href=&quot;System.DBNull.Value&quot;></xref>值; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  id: DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的类名称<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件使用的更新中的参数、 插入或删除数据操作，而不是从数据绑定控件传递单个值。"
  remarks: "而不是指定多个参数传递给<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法，你可以创建将多个数据字段值聚合的一个对象。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 此对象传递到方法，而不是多个参数。       默认行为<xref:System.Web.UI.WebControls.ObjectDataSource>绑定到的数据绑定控件的控件是数据绑定控件创建<xref:System.Web.UI.WebControls.Parameter>数据源中的每个参数的对象。</xref:System.Web.UI.WebControls.Parameter> </xref:System.Web.UI.WebControls.ObjectDataSource> 如果业务对象具有多个字段，则生成的方法还具有许多字段。 DataObjectTypeName 属性可以指定具有每个数据字段的属性的类型。 然后，而不是将多个参数传递给该方法中，运行时创建一个对象，并设置其所有属性。 这一个对象添加到方法调用的参数集合。       由 DataObjectTypeName 属性指定的类型必须具有默认构造函数没有参数，因此<xref:System.Web.UI.WebControls.ObjectDataSource>控制可以创建类型的实例。</xref:System.Web.UI.WebControls.ObjectDataSource> 此类型还必须具有允许的可设置属性<xref:System.Web.UI.WebControls.ObjectDataSource>控件使用数据绑定控件从传递的值填充该对象。</xref:System.Web.UI.WebControls.ObjectDataSource> 属性名<xref:System.Web.UI.WebControls.ObjectDataSource>控件应完全匹配的值传递的数据绑定控件的参数名称。</xref:System.Web.UI.WebControls.ObjectDataSource>       当 DataObjectTypeName 属性设置和<xref:System.Web.UI.WebControls.ObjectDataSource>控件所关联的数据绑定控件，通过指定的方法与<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性都必须具有一个 DataObjectTypeName 属性中指定类型的参数。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>值，指定方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性必须具有一个 DataObjectTypeName 属性中指定的类型的参数。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 如果<xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>值，指定方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性必须具有 DataObjectTypeName 属性中指定的类型的两个参数。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSource.ConflictDetection%2A> 第一个参数包含的原始值;第二个参数包含新值。       DataObjectTypeName 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DataObjectTypeName%2A>"
  example:
  - "The section contains two code examples. The first code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The second code example shows the Web page that uses the two classes that are used in the first code example.  \n  \n The following code example demonstrates how to implement a type that combines all parameter values into one object, using the DataObjectTypeName property. The select method of the `AggregateData` class returns a <xref:System.Data.DataTable> object with two columns named `Name` and `Number`. Similarly, the `NewData` class defines two read/write properties, `Name` and `Number`. The `Insert` method of the `AggregateData` class takes one parameter of type `NewData`. The `TypeName` property of the <xref:System.Web.UI.WebControls.ObjectDataSource> is set to `AggregateData` and the DataObjectTypeName property is set to `NewData`.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_1.cs)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_1.vb)]  \n  \n The following code example shows the Web page that uses the two classes that are used in the preceding code example.  \n  \n [!code-cs[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_183_2.aspx)]\n [!code-vb[ObjectDataSourceDataObjectTypeName#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_183_2.aspx)]"
  syntax:
    content: public string DataObjectTypeName { get; set; }
    return:
      type: System.String
      description: "标识的对象类型的部分或完全限定的类名， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>可以使用的参数作为<> *1>， <> </> *1>，或<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>操作。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*> 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  id: Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "通过调用由标识的方法执行删除操作<> *1> 属性中的任何参数<> *1> 集合。"
  remarks: "执行删除操作之前，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A>调用方法来引发<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleting%2A> 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件，检查的参数的值并执行删除操作之前任何预处理。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 若要执行删除操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象使用反射来创建由标识对象的实例<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 它然后调用由标识方法<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性，使用任何关联<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 如果删除参数是来自关联的数据绑定控件，根据创建的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 删除操作完成后，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A>调用方法来引发<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnDeleted%2A> 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>事件，以检查任何返回值、 输出参数和异常，并执行任何后续处理。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleted>       Delete 方法会委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Delete%2A>      ## 数据绑定控件时<xref:System.Web.UI.WebControls.ObjectDataSource>与数据绑定控件，如关联控件<xref:System.Web.UI.WebControls.GridView>控件，不需要从页的代码调用 Delete 方法。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 而是直接通过数据绑定控件调用 Delete 方法。       有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>"
  syntax:
    content: public int Delete ();
    parameters: []
    return:
      type: System.Int32
      description: "一个值，表示从基础数据存储，删除的行数，如果<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>属性<xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs&quot;></xref>中设置<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource.Deleted&quot;></xref>事件; 否则为-1。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "发生时<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>操作已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>"
  remarks: "处理已删除事件，检查返回值或输出参数的值，或以确定后是否引发了异常<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>操作已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> 返回值、 输出参数和异常处理属性就可以在<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>与事件相关联的对象。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       你可以使用<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>对象以返回从已删除的行数<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 若要执行此操作，将设置<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.AffectedRows%2A> 如果从指定的方法返回的已删除的行数<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性，值为从可用<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs.ReturnValue%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed and the `NorthwindEmployeeDeleted` delegate is called to handle the Deleted event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_116_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_116_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Deleted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  id: DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的方法或函数名称<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件调用以删除数据。"
  remarks: "假定的业务对象一次，而不是批处理中删除一条数据记录。       Delete 方法属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteMethod%2A>       请确保参数名称为配置<xref:System.Web.UI.WebControls.ObjectDataSource>中控制<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合选择的方法返回的列名称匹配。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## 由 delete 方法属性标识的方法可以是实例方法的对象生存期或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，业务对象是创建和销毁每次调用 delete 方法属性。 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件调用 delete 方法属性之前，要使用业务对象。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 你还可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>之后调用 delete 方法属性时，将引发的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 如果该方法是`static`(`Shared`在 Visual Basic 中) 永远不会创建方法，业务对象，无法处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 参数合并参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>从三个源的集合:-从数据绑定控件，在运行时。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>      -从`DeleteParameters`元素，以声明方式。      -从`Deleting`方法，以声明方式。       首先，将通过数据绑定控件生成的任何参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到<xref:System.Web.UI.WebControls.GridView>具有列控件`Name`和`Number`，参数`Name`和`Number`添加到集合。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 取决于参数的确切名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 这些参数的数据类型是`string`。 下一步、 中列出的参数`DeleteParameters`添加元素。 如果中的参数`DeleteParameters`元素找到具有相同名称作为参数中已被<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>修改集合，现有的参数以匹配中指定的参数`DeleteParameters`元素。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 通常，这用于修改在参数中的数据的类型。 最后，你可以以编程方式添加和删除中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>事件，发生之前<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>运行方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> 对参数进行合并后，该方法将得到解决。 在下一部分中讨论方法解析。      ## 方法解析时<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>调用方法时，从该数据绑定控件中以声明方式创建的参数的数据字段`DeleteParameters`元素和参数中的新增<xref:System.Web.UI.WebControls.ObjectDataSource.Deleting>所有合并事件处理程序。</xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> </xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> （有关详细信息，请参阅上一节）。<xref:System.Web.UI.WebControls.ObjectDataSource>对象会尝试查找要调用的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> 首先，它查找 delete 方法属性 如果不找到任何匹配项，则<xref:System.InvalidOperationException>引发异常。</xref:System.InvalidOperationException> 如果找到匹配项，则会查找匹配的参数名。 例如，假设由指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性有两个方法名为`DeleteARecord`。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 一个`DeleteARecord`具有一个参数、 `ID`，以及其他`DeleteARecord`具有两个参数，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合仅有一个参数名为`ID`、`DeleteARecord`方法只需`ID`调用参数。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> 参数的类型未签入解决方法。 参数的顺序并不重要。       如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>设置属性，以不同的方式解析方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>中指定具有 delete 方法属性中采用一个类型的参数，指定的名称的方法将查找<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 在这种情况下，参数的名称并不重要。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the DeleteMethod property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindDataException` delegate.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_23_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_23_2.cs)]"
  syntax:
    content: public string DeleteMethod { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示方法的名称或函数的<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>用于删除数据。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取包含所使用的参数的参数集合<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>"
  remarks: "名称和 DeleteParameters 集合中包含的参数类型必须匹配的名称和类型中的参数的<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>方法签名。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> 参数名称受到<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性和区分大小写。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 集合中的参数取决于控件中的数据绑定，以声明方式，指定的参数和以编程方式添加的参数的数据。 有关详细信息，请参阅&quot;参数合并&quot;<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>和[ObjectDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>       DeleteParameters 属性检索<xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>所包含的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.DeleteParameters%2A>       有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use the DeleteParameters property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event is called with two parameters. One parameter, `EmpID`, comes from the <xref:System.Web.UI.WebControls.DataGrid> control, and is based on the <xref:System.Web.UI.WebControls.GridView.DataKeyNames%2A> property. The other parameter comes from the declarative DeleteParameters property. The `EmployeeLogic` class overloads the `DeleteEmployee` method. One overload takes a `NorthwindEmployee` parameter, and the other takes an <xref:System.Int32> parameter named `anID`. In the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event, the entries in the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> property are adjusted to include only one parameter named `anID` with the value from `original_EmpID`. When the event handler exists, the matching `DeleteEmployee` method is called.  \n  \n The following code example shows the Web page that displays the <xref:System.Web.UI.WebControls.DataGrid> control and handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleting> event.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_729_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_11#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_729_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含使用的参数<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>操作。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete*>"
  remarks: "处理删除事件，以执行特定于应用程序，以验证参数的值的附加初始化或要更改参数值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控件将执行删除操作。</xref:System.Web.UI.WebControls.ObjectDataSource> 参数都可用作<xref:System.Collections.IDictionary>集合所访问的<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性，公开的<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       你可以通过设置取消删除操作<xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>到`true`。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to delete data. Initially, the <xref:System.Web.UI.WebControls.GridView> control displays a set of all employees, using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property to retrieve the data from the `EmployeeLogic` object. Because the <xref:System.Web.UI.WebControls.GridView.AutoGenerateDeleteButton%2A> property is set to `true`, the <xref:System.Web.UI.WebControls.GridView> control automatically displays a **Delete** button.  \n  \n If you click the **Delete** button, the delete operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> property and any parameters that are specified in the <xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> collection. In this code example, some preprocessing and post-processing steps are also performed. The `NorthwindEmployeeDeleting` delegate is called to handle the Deleting event before the operation is performed, and the `NorthwindEmployeeDeleted` delegate is called to handle the <xref:System.Web.UI.WebControls.ObjectDataSource.Deleted> event after the operation has completed to perform exception handling. In this code example, if a `NorthwindDataException` is thrown, it is handled by the `NorthwindEmployeeDeleted` method.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_138_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_10#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_138_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Deleting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  id: EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件数据启用了缓存。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持数据缓存。</xref:System.Web.UI.WebControls.ObjectDataSource> 数据被缓存，调用<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法从缓存中检索数据而不是<xref:System.Web.UI.WebControls.ObjectDataSource>创建业务对象的实例，然后调用其数据的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 在缓存过期，<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法从业务对象中，检索数据，然后再次缓存的数据。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>       <xref:System.Web.UI.WebControls.ObjectDataSource>EnableCaching 属性设置为当控件将自动缓存数据`true`和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>属性设置为一个值大于 0，指示在缓存中存储数据的缓存项将被丢弃之前的秒数。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 值为 0 指示无限期的缓存。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that retrieve records from the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve and display the employee record that is selected by the user.  \n  \n Caching is enabled for the <xref:System.Web.UI.WebControls.ObjectDataSource> control. Therefore, each record is retrieved only one time from the database. The <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> property is set to \"EmployeeDetails\", but any string value can work as the key. The Web page also includes a <xref:System.Web.UI.WebControls.Button> control that the user can click to expire the cached data.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.Control.Load> event and a handler for the <xref:System.Web.UI.WebControls.Button.Click> event of the <xref:System.Web.UI.WebControls.Button> control. The <xref:System.Web.UI.Control.Load> event handler creates a cache item with a key set to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. The <xref:System.Web.UI.WebControls.Button.Click> event handler removes the cache item whose key is equal to the <xref:System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency%2A> value. When the cache item is removed, all the cached data that is dependent on the key is expired.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_2.vb)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and the Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_657_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_657_3.cs)]"
  syntax:
    content: public virtual bool EnableCaching { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果为数据源控件; 启用了数据缓存否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "EnableCaching 属性设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>指定的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>属性返回<xref href=&quot;System.Data.Common.DbDataReader&quot;> </xref>。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  id: EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否为数据源控件支持它检索的数据集进行分页。"
  remarks: "通过分页<xref:System.Web.UI.WebControls.ObjectDataSource>控件处理通过设置 EnablePaging， <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSource>和在使用正确的参数的业务对象中定义的选择方法。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 当 EnablePaging 属性设置为`true`、<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合包括请求的第一行和请求的行数的两个其他参数。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 这两个参数的名称由定义<xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> `Select`方法应返回请求的指定索引处开始的行数。 因为按页大小，数据可能不均匀划分，最后一页可能包含更少的行。 因此，请求的行数是实际返回的行最大数量。       如果在关联的数据绑定控件上启用了分页，数据绑定控件调用`Select`方法的起始索引和所需的行数。 此外，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性设置，数据绑定控件在呈现的页导航控件之前调用的方法。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> 例如，如果<xref:System.Web.UI.WebControls.GridView>控件的页大小为 5 和由指定的方法与启用了分页<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性返回 20，仅 4 页将寻呼程序中显示。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.GridView>       EnablePaging 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.EnablePaging%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose EnablePaging property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_678_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_678_3.vb)]"
  syntax:
    content: public bool EnablePaging { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数据源控件支持的数据分页它检索;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  id: FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置方法时应用的筛选表达式指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>属性称为。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持筛选数据时，才<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       用于 FilterExpression 属性的语法是一个格式字符串样式表达式。 筛选器表达式语法是相同的语法通过接受<xref:System.Data.DataColumn.Expression%2A>属性。</xref:System.Data.DataColumn.Expression%2A> 如果你将参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合，您还可以包含格式字符串占位符。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> 例如，包括`&quot;{0}&quot;`中要替换参数值的表达式。 根据中的参数的索引替换占位符<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>       你可以在 FilterExpression 属性中包含参数。 如果参数的类型是字符串或字符类型，将参数括在单引号中。 如果参数是数值类型，则不需要引号引起来。       <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>集合包含计算 FilterExpression 属性中找到的占位符的参数。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>       FilterExpression 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterExpression%2A>      1> [!NOTE]&1;> 应验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换到筛选器表达式，并将其应用于<xref:System.Data.DataSet>或<xref:System.Data.DataTable>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> 如果你使用 FilterExpression 属性作为一种安全措施来限制返回的项的数目，你必须筛选发生之前验证参数值。"
  example:
  - "The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, enter the full name of the employee in the <xref:System.Web.UI.WebControls.TextBox>, and then click the **Submit** button.  \n  \n The FilterExpression property specifies an expression that is used to filter the data that is retrieved by the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_597_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_597_2.vb)]"
  syntax:
    content: public string FilterExpression { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示使用方法或函数由标识检索数据时，将应用的筛选表达式<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "FilterExpression 属性已设置和<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>方法不返回<xref href=&quot;System.Data.DataSet&quot;></xref>或<xref href=&quot;System.Data.DataTable&quot;> </xref>。</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  id: Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "筛选器操作前发生。"
  remarks: "处理筛选事件，以验证对值执行操作筛选器参数之前<xref:System.Web.UI.WebControls.ObjectDataSource>控件将执行筛选器操作。</xref:System.Web.UI.WebControls.ObjectDataSource> 你可以通过设置取消所选的操作<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs>到`true`。</xref:System.Web.UI.WebControls.ObjectDataSourceFilteringEventArgs> </xref:System.ComponentModel.CancelEventArgs.Cancel%2A> 仅当引发该事件<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性设置。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       筛选事件委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>事件<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Filtering?displayProperty=fullName>      1> [!IMPORTANT]&1;> 应验证从客户端接收的任何筛选器参数值。 运行时只需将参数值替换到筛选器表达式，并将其应用于<xref:System.Data.DataSet>或<xref:System.Data.DataTable>返回的对象<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> 如果你使用<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性作为一种安全措施来限制返回，你必须筛选发生之前验证参数值的项的数目。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler Filtering;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  id: FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取与中的任何参数占位符相关联的参数的集合<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>字符串。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持筛选数据时，才<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>       适用于的语法<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>是一个格式字符串样式表达式。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 筛选器表达式语法是相同的语法通过接受<xref:System.Data.DataColumn.Expression%2A>属性。</xref:System.Data.DataColumn.Expression%2A> 如果将参数添加到 FilterParameters 集合，则还可以包含格式字符串占位符。 例如，包括`&quot;{0}&quot;`中要替换参数值的表达式。 根据 FilterParameters 集合中的参数的索引替换占位符。       你可以包含在参数<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> 如果参数是字符串或字符类型，请将参数括在单引号中。 如果参数是数值类型，则不需要引号引起来。       FilterParameters 属性检索<xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>所包含的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.FilterParameters%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> object to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The second code example provides an example of a middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to display filtered data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control to retrieve data from a middle-tier business object and a <xref:System.Web.UI.WebControls.GridView> control to display the results. The <xref:System.Web.UI.WebControls.ObjectDataSource> control can filter data only when the method that retrieves the data retrieves it as a <xref:System.Data.DataSet> or <xref:System.Data.DataTable> object. For this reason, the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property identifies a business object method that retrieves data as a <xref:System.Data.DataSet>.  \n  \n The code example consists of a <xref:System.Web.UI.WebControls.TextBox> control, a <xref:System.Web.UI.WebControls.GridView> control, the <xref:System.Web.UI.WebControls.ObjectDataSource> control, and a **Submit** button. By default, the <xref:System.Web.UI.WebControls.TextBox> is populated with the name of one of the Northwind Traders employees. The <xref:System.Web.UI.WebControls.GridView> displays information about the employee that is identified by the name in the <xref:System.Web.UI.WebControls.TextBox>. To retrieve data on another employee, in the <xref:System.Web.UI.WebControls.TextBox>, enter the full name of the employee, and then click the **Submit** button.  \n  \n The <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property specifies an expression that is used to filter the data that is retrieved by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. It uses parameter placeholders that are evaluated to the parameters that are contained in the FilterParameters collection. In this example, the parameter placeholder is bounded by single quotation marks because the type of the parameter is a string type that might contain spaces. If the type of the parameter is a numeric or date type, bounding quotation marks are not required. The FilterParameters collection contains one parameter, a <xref:System.Web.UI.WebControls.FormParameter> object that is bound to the <xref:System.Web.UI.WebControls.TextBox> control.  \n  \n> [!IMPORTANT]\n>  You should validate any filter parameter value that you receive from the client. The runtime simply substitutes the parameter value into the filter expression and applies it to the <xref:System.Data.DataView> object that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> method. If you are using the <xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> property as a security measure to limit the number of items that are returned, you must validate the parameter values before the filtering occurs.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n For simplicity, the `EmployeeLogic` class creates a static set of data, rather than retrieving the data from a data tier. It is also helpful for this example, because the sample relies on you to provide the full name of a Northwind Traders employee to demonstrate filtering. For a complete working example, you must compile and use these classes with the Web Forms code examples that are provided.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_647_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_9#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_647_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection FilterParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref> ，其中包含与在中找到任何参数占位符关联的参数集<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "你设置<> *1> 属性和<> *1> 方法不返回<xref href=&quot;System.Data.DataSet&quot;></xref>或<xref href=&quot;System.Data.DataTable&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  id: GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "检索与数据源控件相关联的已命名的数据源视图。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持只有一个数据源视图。</xref:System.Web.UI.WebControls.ObjectDataSource> 与所有数据源视图对象一样，<xref:System.Web.UI.WebControls.ObjectDataSourceView>该键相关联的数据源控件定义其功能、 执行的所有工作，需要从基础数据存储中检索数据并都执行如排序、 插入、 删除和更新的操作。</xref:System.Web.UI.WebControls.ObjectDataSourceView>       GetView 方法用于不是由页代码进行调用数据绑定控件。"
  syntax:
    content: protected override System.Web.UI.DataSourceView GetView (string viewName);
    parameters:
    - id: viewName
      type: System.String
      description: "要检索的视图名称。 因为<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>只支持一个视图，`viewName`将被忽略。"
    return:
      type: System.Web.UI.DataSourceView
      description: "<xref href=&quot;System.Web.UI.WebControls.ObjectDataSourceView&quot;> </xref>名为<xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;></xref>关联<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.GetView*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定<code> viewName </code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或者不是<xref uid=&quot;langword_csharp_DefaultView&quot; name=&quot;DefaultView&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  id: GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "检索与之关联的名称表示的视图对象的列表的集合<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>对象。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持名为仅一个视图`DefaultView`，针对其基础数据。</xref:System.Web.UI.WebControls.ObjectDataSource> GetViewNames 方法返回一个视图同名的单个元素集合。       GetViewNames 方法用于不是由页代码进行调用数据绑定控件。"
  syntax:
    content: protected override System.Collections.ICollection GetViewNames ();
    parameters: []
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>，它包含与关联的视图名称<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  id: Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "通过调用由标识的方法执行插入操作<> *1> 属性和任何参数在<> *1> 集合。"
  remarks: "执行插入操作之前，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A>调用方法来引发<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserting%2A> 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件，检查的参数的值并执行插入操作之前任何预处理。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 若要执行插入操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象使用反射来创建由标识对象的实例<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 它然后调用由标识方法<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性，使用任何关联<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 插入操作完成后，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A>调用方法来引发<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnInserted%2A> 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>事件，以检查任何返回值、 输出参数和异常，并执行任何后续处理。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserted>       Insert 方法委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Insert%2A>       有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>      ## 数据绑定控件时<xref:System.Web.UI.WebControls.ObjectDataSource>对象与之关联的数据绑定控件，如<xref:System.Web.UI.WebControls.GridView>控件，不需要从页的代码调用插入方法。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 而是直接通过数据绑定控件调用插入方法。"
  syntax:
    content: public int Insert ();
    parameters: []
    return:
      type: System.Int32
      description: "一个值，表示基础数据存储中插入的行数。"
  overload: System.Web.UI.WebControls.ObjectDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "发生时<xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>操作已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>"
  remarks: "处理插入事件检查返回值或输出参数的值，或者想要确定后是否引发了异常<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>操作已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> 返回值、 输出参数和异常处理属性就可以在<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>与事件相关联的对象。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Inserted;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>操作。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert*>"
  remarks: "处理插入事件，以执行特定于应用程序，以验证参数的值的附加初始化或要更改参数值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控件将执行插入操作。</xref:System.Web.UI.WebControls.ObjectDataSource> 参数都可用作<xref:System.Collections.IDictionary>集合所访问的<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性，公开的<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the Inserting event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_105_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_105_2.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Inserting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  id: InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的方法或函数名称<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件调用以插入数据。"
  remarks: "假定的业务对象一次，而不是批处理中插入一条数据记录。       InsertMethod 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>对象。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertMethod%2A>      ## 对象生存期由 InsertMethod 属性标识的方法可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，业务对象是创建和销毁每次调用 InsertMethod 属性指定的方法。 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件调用 InsertMethod 属性之前，要使用业务对象。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 你还可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>由指定的方法后，将引发的事件<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A>属性称为。</xref:System.Web.UI.WebControls.ObjectDataSource.DeleteMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 如果该方法是`static`(`Shared`在 Visual Basic 中)，将永远不会创建业务对象，并且无法处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 参数合并参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>从三个源的集合:-从数据绑定控件，在运行时。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>      -从`InsertParameters`元素，以声明方式。      -从`Inserting`方法，以编程方式。       首先，将通过数据绑定控件生成的任何参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到<xref:System.Web.UI.WebControls.GridView>具有列控件`Name`和`Number`的参数`Name`和`Number`添加到集合。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 这些参数的数据类型是`string`。 下一步、 中列出的参数`InsertParameters`添加元素。 如果中的参数`InsertParameters`元素找到具有相同名称作为参数中已被<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>修改集合，现有的参数以匹配中指定的参数`InsertParameters`元素。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 通常，这用于修改在参数中的数据的类型。 最后，你可以以编程方式添加和删除中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>事件，发生之前<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>运行方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> 对参数进行合并后，该方法将得到解决。 在下一部分中讨论方法解析。      1> [!IMPORTANT]&1;> 应验证从客户端接收任何参数值。 运行时只是将参数值替换到 InsertMethod 属性。      ## 方法解析时<xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>调用方法时，从该数据绑定控件中以声明方式创建的参数的数据字段`InsertParameters`元素和参数中的新增<xref:System.Web.UI.WebControls.ObjectDataSource.Inserting>所有合并事件处理程序。</xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> （有关详细信息，请参阅上一节）。<xref:System.Web.UI.WebControls.ObjectDataSource>对象会尝试查找要调用的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> 首先，它查找 InsertMethod 属性 如果不找到任何匹配项，则<xref:System.InvalidOperationException>引发异常。</xref:System.InvalidOperationException> 如果找到匹配项，则会查找匹配的参数名。 例如，假设由指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性有两个方法名为`InsertARecord`。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 一个`InsertARecord`具有一个参数、 `ID`，以及其他`InsertARecord`具有两个参数，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A>集合仅有一个参数名为`ID`、`InsertARecord`方法只需`ID`调用参数。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> 参数的类型未签入解决方法。 参数的顺序并不重要。       如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>设置属性，以不同的方式解析方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>中指定具有 InsertMethod 属性中采用一个类型的参数，指定的名称的方法将查找<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 在这种情况下，参数的名称并不重要。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example of the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The InsertMethod property identifies which method performs the insert operation.  \n  \n In this example, the `UpdateEmployeeInfo` method is used to perform an insert; however, it requires a `NorthwindEmployee` parameter to insert the data. For this reason, the collection of strings that the <xref:System.Web.UI.WebControls.DetailsView> control passes automatically is not sufficient. The `NorthwindEmployeeInserting` delegate is an <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler> object that handles the <xref:System.Web.UI.WebControls.ObjectDataSource.Inserting> event and enables you to manipulate the input parameters before the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation proceeds. Because the `UpdateEmployeeInfo` method requires a `NorthwindEmployee` object as a parameter, one is created using the collection of strings and is added to the <xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> collection using a parameter name (`ne`) that the method expects. You might perform steps like these when using an existing middle-tier object as a data source with types and methods that are not designed specifically for use with the <xref:System.Web.UI.WebControls.ObjectDataSource> control.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the InsertMethod property is called. If the `Insert` method of the object has a method signature that includes parameters, the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertParameters%2A> collection must contain a parameter with names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_1.aspx)]  \n  \n The following code example provides an example of a middle-tier business object that the preceding code example uses. The code example consists of two basic classes:  \n  \n-   The `EmployeeLogic` class, which is a stateless class that encapsulates business logic.  \n  \n-   The `NorthwindEmployee` class, which is a model class that contains only the basic functionality that is required to load and persist data from the data tier.  \n  \n An additional `NorthwindDataException` class is provided as a convenience. For a complete working example, you must compile and use these classes. The `UpdateEmployeeInfo` method is not completely implemented, so you will not insert data into the Northwind Traders database when you experiment with this example.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1235_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_4#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1235_2.cs)]"
  syntax:
    content: public string InsertMethod { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示方法的名称或函数的<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>用于插入数据。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取包含所使用的参数的参数集合<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>"
  remarks: "名称和 InsertParameters 集合中包含的参数类型必须匹配的名称和中的参数类型<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>属性签名。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> 参数名称区分大小写。 使用提供参数，如数据绑定控件时<xref:System.Web.UI.WebControls.GridView>和<xref:System.Web.UI.WebControls.DetailsView>控件，<xref:System.Web.UI.WebControls.ObjectDataSource>控件自动合并在具有数据绑定控件提供的参数的集合中显式指定任何参数。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.DetailsView> </xref:System.Web.UI.WebControls.GridView> 这是重要的因为数据绑定控件始终提供其参数作为<xref:System.String>类型，并且，如果方法签名包含数字或日期类型，你必须显式包含在与正确的类型 InsertParameters 集合中的参数。</xref:System.String> 否则为<xref:System.Web.UI.WebControls.ObjectDataSource>控件尝试根据集合中的参数定义的类型参数强制转换。</xref:System.Web.UI.WebControls.ObjectDataSource> 有关详细信息，请参阅[ObjectDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。       InsertParameters 属性检索<xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>所包含的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.InsertParameters%2A>       有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. The second code example provides an example implementation of the `Insert` method that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.DetailsView> control to insert data. Initially, the <xref:System.Web.UI.WebControls.DetailsView> displays text boxes in which you can enter data for a new `NorthwindEmployee` record, along with an automatically generated **Insert** button. After you enter data into the fields of the <xref:System.Web.UI.WebControls.DetailsView> control, click the **Insert** button. The <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property identifies which method performs the insert operation.  \n  \n If you click the **Insert** button, the operation is performed using the method that is specified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property and any parameters that are specified in the InsertParameters collection. In this code example, one parameter is specified in the InsertParameters collection that corresponds to the supervisor's ID. This is because even though the ID is displayed in the <xref:System.Web.UI.WebControls.GridView.Rows%2A> collection for the <xref:System.Web.UI.WebControls.DetailsView> control as a <xref:System.Web.UI.WebControls.BoundField> object, it is passed as a string to the <xref:System.Web.UI.WebControls.ObjectDataSource> control. By adding it explicitly to the InsertParameters collection with a <xref:System.Web.UI.WebControls.Parameter.Type%2A> property set to the <xref:System.TypeCode> value, it will be passed correctly by the <xref:System.Web.UI.WebControls.ObjectDataSource> to the method as an <xref:System.Int32>, not as a string.  \n  \n When the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> operation is performed, the method that is identified by the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property is called. If the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method of the object has a method signature that includes parameters, the InsertParameters collection must contain parameters that have names that match the method signature parameters for the <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> method to complete successfully.  \n  \n> [!IMPORTANT]\n>  You should validate any parameter value that you receive from the client. The runtime simply substitutes the parameter value into the <xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_1.aspx)]  \n  \n The following code example provides an example implementation of the `Insert` method that the preceding code example uses. The `InsertNewEmployeeWrapper` method is added to the `EmployeeLogic` middle-tier object that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview to enable the object to work more easily with the <xref:System.Web.UI.WebControls.ObjectDataSource> control in Web scenarios, without a substantial rewrite to the actual business logic.  \n  \n To run the example, you must have the `NorthwindEmployee` class that is provided in the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. This example illustrates only how to connect the <xref:System.Web.UI.WebControls.ObjectDataSource> to a business object method that gets data for a new database record by using parameters. The example does not add records to the database, because the `Save` method of the `NorthwindEmployee` class does not include code to update the database.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_752_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_8#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_752_2.cs)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>包含由该方法使用的参数<xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.InsertMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  id: LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "加载以前保存的视图状态的<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件。"
  remarks: "此方法主要由.NET Framework 基础结构使用，但不可在代码中直接使用。 但是，控件开发人员可以重写此方法以指定自定义服务器控件还原其视图状态的方式。 有关详细信息，请参阅[ASP.NET 状态管理概述](~/add/includes/ajax-current-ext-md.md)。       LoadViewState 方法用于加载以前保存的视图状态的<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource>"
  syntax:
    content: protected override void LoadViewState (object savedState);
    parameters:
    - id: savedState
      type: System.Object
      description: "包含控件保存的视图状态的值的对象。"
  overload: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  id: MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置用于指示要检索的数据源分页支持的记录数的业务对象数据检索方法参数的名称。"
  remarks: "MaximumRowsParameterName 属性用于支持数据源分页。 了解如何<xref:System.Web.UI.WebControls.ObjectDataSource>控制，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A></xref:System.Web.UI.WebControls.ObjectDataSource>支持分页       MaximumRowsParameterName 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.MaximumRowsParameterName%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The MaximumRowsParameterName property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_176_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_176_3.vb)]"
  syntax:
    content: public string MaximumRowsParameterName { get; set; }
    return:
      type: System.String
      description: "名称<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>参数，用于指示要检索的记录数。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*> 默认值是`&quot;maximumRows&quot;`。"
  overload: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  id: ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "由标识的对象之后发生<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>创建属性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "处理 ObjectCreated 事件，以在业务对象上调用其他方法，设置属性，或执行其他特定于之前的业务对象的初始化<xref:System.Web.UI.WebControls.ObjectDataSource>对象调用业务对象数据方法来执行数据操作。</xref:System.Web.UI.WebControls.ObjectDataSource> 对对象的引用可通过<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>属性，公开的<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       如果标识以执行数据操作的方法是`static`(`Shared`在 Visual Basic 中)，则<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>并永远不会引发 ObjectCreated 事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  id: ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "由标识的对象之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>创建属性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "如果标识以执行数据操作的方法是`static`(`Shared`在 Visual Basic 中)，ObjectCreating 和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>永远不会引发事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>       <xref:System.Web.UI.WebControls.ObjectDataSource>控件将自动调用默认构造函数的业务对象来创建它使用反射的实例。</xref:System.Web.UI.WebControls.ObjectDataSource> 处理 ObjectCreating 事件，以显式调用另一个构造函数，并将结果传递给对象的实例设置<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>属性关联的<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation.  \n  \n> [!NOTE]\n>  In a production application, multiple requests might end up simultaneously using the same instance. Therefore, the object needs to be implemented in a thread-safe manner.  \n  \n This code example demonstrates this pattern. You can handle the ObjectCreating event to check the cache for an object first, and only create an instance of the object, if one is not already cached. Then, handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_72_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_72_2.vb)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler ObjectCreating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  id: ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "由标识的对象之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>属性将被丢弃。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName*>"
  remarks: "丢弃的业务对象的实例之前，始终将引发 ObjectDisposing 事件。 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>方法之后将引发此事件被调用。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable>       处理 ObjectDisposing 事件以在对象上调用其他方法、 设置属性，或执行清理该对象被销毁之前即特定于该对象。 对对象的引用可通过<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>属性，公开的<xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceEventArgs.ObjectInstance%2A>       当你使用<xref:System.Web.UI.WebControls.ObjectDataSource>控件使用 LINQ to SQL 类，你必须取消 ObjectDisposing 事件的处理程序中的数据上下文类的释放。</xref:System.Web.UI.WebControls.ObjectDataSource> 此步骤是必需的因为 LINQ to SQL 支持延迟的执行，而<xref:System.Web.UI.WebControls.ObjectDataSource>控件尝试后选择操作释放的数据上下文。</xref:System.Web.UI.WebControls.ObjectDataSource>       有关如何处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> object with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. The second code example provides the middle-tier business object that is used in the first code example.  \n  \n The following code example demonstrates how to use an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a business object and a <xref:System.Web.UI.WebControls.GridView> control to display information. You might work with a business object that is very expensive to create (in terms of time or resources) for every data operation your Web page performs. One way to work with an expensive object might be to create an instance of it once, and then cache it for subsequent operations instead of creating and destroying it for every data operation. This example demonstrates this pattern. You can handle the <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> event to check the cache for an object first, and only create an instance of it, if one is not already cached. Then, handle the ObjectDisposing event to cache the business object for future use, instead of destroying it. In this code example, the <xref:System.ComponentModel.CancelEventArgs.Cancel?displayProperty=fullName> property of the <xref:System.Web.UI.WebControls.ObjectDataSourceDisposingEventArgs> object is set to `true` to direct the <xref:System.Web.UI.WebControls.ObjectDataSource> to not call the <xref:System.IDisposable.Dispose%2A> method on the object.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_1.aspx)]  \n  \n The following code example provides the example middle-tier business object that the preceding code example uses. The code example consists of a basic business object, defined by the `EmployeeLogic` class, which is a stateful class that encapsulates business logic. For a complete working example, you must compile this code as a library and use these classes from an ASP.NET page (.aspx file).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_11_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_16#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_11_2.vb)]  \n  \n The following example shows how to handle the ObjectDisposing event when using an <xref:System.Web.UI.WebControls.ObjectDataSource> control with a LINQ to SQL class.  \n  \n```vb#  \nPublic Sub ExampleObjectDisposing(ByVal sender As Object, _   \n        ByVal e As ObjectDataSourceDisposingEventArgs)  \n    e.Cancel = True  \nEnd Sub  \n```  \n  \n```c#  \npublic void ExampleObjectDisposing(object sender,   \n        ObjectDataSourceDisposingEventArgs e)  \n{  \n    e.Cancel = true;  \n}  \n```"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler ObjectDisposing;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  id: OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置要应用于的参数传递给的原始值的名称格式字符串<xref uid=&quot;langword_csharp_Delete&quot; name=&quot;Delete&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Update&quot; name=&quot;Update&quot; href=&quot;&quot;></xref>方法。"
  remarks: "值<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>属性如那些使用标识应用于仅，主键`DataKeyNames`属性的数据绑定控件，或在删除和更新方案其中<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>值和原始值的集传递到相应的数据方法。</xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>       以下是两个常见的方案，你可能要更改<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>属性:-你可能想要更改要区分中更新的旧和新值的属性。</xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A> 当<xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A>属性设置为<xref:System.Web.UI.ConflictOptions>值，参数的原始列值和新值添加到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.ConflictOptions> </xref:System.Web.UI.WebControls.ObjectDataSourceView.ConflictDetection%2A> 没有格式设置字符串，将为每个数据字段创建具有相同名称的两个参数。 通过更改原始值参数的名称，你可以比较到原始的数据源，以检测冲突并比较键值的数据。      -某些可视化设计器实现原始值和键的特定命名的方案。       OldValuesParameterFormatString 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OldValuesParameterFormatString%2A>"
  syntax:
    content: public string OldValuesParameterFormatString { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示一个格式字符串应用于的任何名称<code> oldValues </code>或键参数传递给<> *1> 或<> *1> 方法。 默认值是`&quot;{0}&quot;`，这意味着参数名称是字段名称。"
  overload: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "将添加<xref href=&quot;System.Web.UI.Page.LoadComplete&quot;></xref>到包含的页的事件处理程序<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。       OnInit 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据。</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  id: ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，指示哪些区域性信息由时将字符串值转换为实际的属性类型以构造类型的对象指示<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>.</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*>"
  syntax:
    content: public System.Web.UI.WebControls.ParsingCulture ParsingCulture { get; set; }
    return:
      type: System.Web.UI.WebControls.ParsingCulture
      description: "区域性信息。 默认值是<xref href=&quot;System.Web.UI.WebControls.ParsingCulture&quot;> </xref>。"
  overload: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  id: SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "保存的状态<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件。"
  syntax:
    content: protected override object SaveViewState ();
    parameters: []
    return:
      type: System.Object
      description: "返回服务器控件的当前视图状态;否则，返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果没有与控件关联的视图状态。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "通过调用由标识的方法从基础数据存储中检索数据<> *1> 属性中的参数<> *1> 集合。"
  remarks: "指定的方法可能具有任何方法签名，但它必须返回或派生自的以下表中列出的类型之一<xref:System.Web.UI.WebControls.ObjectDataSource>控件，若要成功调用。</xref:System.Web.UI.WebControls.ObjectDataSource>      |返回类型 |操作 |  |-----------------|------------|  |<xref:System.Collections.IEnumerable>|Select 方法返回<xref:System.Collections.IEnumerable>。 |  |<xref:System.Data.DataTable>|通过<xref:System.Data.DataTable>创建和选择的方法返回<xref:System.Data.DataView>。 |  |<xref:System.Data.DataView>|Select 方法返回<xref:System.Data.DataView>。 |  |<xref:System.Data.DataSet>|提取<xref:System.Data.DataSet>的第一个<xref:System.Data.DataTable>并创建<xref:System.Data.DataView>并将其选择的方法返回。 |  |<xref:System.Object>|包装在一个元素<xref:System.Collections.IEnumerable>集合和选择的方法返回的对象。 |      由标识的方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Collections.IEnumerable> </xref:System.Object> </xref:System.Data.DataView>  </xref:System.Data.DataTable></xref:System.Data.DataSet> </xref:System.Data.DataSet> </xref:System.Data.DataView> </xref:System.Data.DataView>  </xref:System.Data.DataView></xref:System.Data.DataTable> </xref:System.Data.DataTable> </xref:System.Collections.IEnumerable> </xref:System.Collections.IEnumerable> 如果它是实例方法，业务对象创建和销毁由指定的方法的每次<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性称为，只不过使用同一个实例调用的方法的指定<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性和方法指定的<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 选择方法返回<xref:System.Collections.IEnumerable>接口。</xref:System.Collections.IEnumerable> 但是，若要启用缓存和筛选方案，返回的值必须是<xref:System.Data.DataSet>对象。</xref:System.Data.DataSet> 尽管<xref:System.Data.DataSet>类未实现的<xref:System.Collections.IEnumerable>接口，<xref:System.Web.UI.WebControls.ObjectDataSource>控件自动提取默认<xref:System.Data.DataView>控件，它实现<xref:System.Collections.IEnumerable>.</xref:System.Collections.IEnumerable> </xref:System.Data.DataView> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Collections.IEnumerable> </xref:System.Data.DataSet>       执行选择操作之前，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A>调用方法来引发<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelecting%2A> 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件，检查的参数的值并执行选择操作之前任何预处理。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 若要执行数据检索操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象使用反射来创建由标识对象的实例<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 它然后调用由标识方法<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，使用任何关联<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 选择操作完成后，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A>调用方法来引发<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Selected> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnSelected%2A> 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Selected>事件，以检查任何返回值、 输出参数和异常，并执行任何后续处理。</xref:System.Web.UI.WebControls.ObjectDataSource.Selected>       如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性返回<xref:System.Data.DataSet>， <xref:System.Data.DataTable>，或<xref:System.Data.DataView>对象并启用了缓存，<xref:System.Web.UI.WebControls.ObjectDataSource>检索中的数据，并选择操作过程中将数据保存到缓存。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Data.DataView> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> 创建缓存，丢弃，或刷新基于指定的组合的缓存行为<xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>和<xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.CacheDuration%2A>       如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性返回<xref:System.Data.DataSet>或<xref:System.Data.DataTable>对象，和一个<xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A>指定属性、 使用任何提供计算<xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A>属性和生成筛选器应用到的数据的列表选择操作过程。</xref:System.Web.UI.WebControls.ObjectDataSource.FilterParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.FilterExpression%2A> </xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>       选择方法会委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Select%2A>       有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>      ## 数据绑定控件时<xref:System.Web.UI.WebControls.ObjectDataSource>与数据绑定控件，如关联控件<xref:System.Web.UI.WebControls.GridView>控件，不需要从页的代码调用选择方法。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 而是直接通过数据绑定控件调用选择方法。"
  example:
  - For a code example, see <xref:System.Web.UI.WebControls.ObjectDataSource>.
  syntax:
    content: public System.Collections.IEnumerable Select ();
    parameters: []
    return:
      type: System.Collections.IEnumerable
      description: "<xref:System.Collections.IEnumerable>的数据行的列表。</xref:System.Collections.IEnumerable>"
  overload: System.Web.UI.WebControls.ObjectDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  id: SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的方法或函数名称<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件调用以检索行计数。"
  remarks: "SelectCountMethod 属性标识用于检索总行数，以支持数据源分页的业务对象方法。 仅当 SelectCountMethod 属性时计算<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>属性设置为`true`。</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>       SelectCountMethod 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectCountMethod%2A> 了解如何<xref:System.Web.UI.WebControls.ObjectDataSource>控制，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A></xref:System.Web.UI.WebControls.ObjectDataSource>支持分页"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The SelectCountMethod property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the <xref:System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName%2A> property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the SelectCountMethod property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_626_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_626_3.vb)]"
  syntax:
    content: public string SelectCountMethod { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示方法的名称或函数的<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>使用来检索行计数。 该方法必须返回一个整数 (<xref:System.Int32>)。</xref:System.Int32> 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "发生时<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>操作已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  remarks: "处理所选事件检查返回值或输出参数的值，或者想要确定后是否引发了异常<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>操作已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 返回值、 输出参数和异常处理属性就可以在<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>与事件相关联的对象。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_1.aspx)]  \n  \n The second example shows handlers for the Selected and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The Selected event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_48_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_48_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Selected;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.Select*>操作。</xref:System.Web.UI.WebControls.ObjectDataSource.Select*>"
  remarks: "处理选择事件，以执行特定于应用程序，以验证参数的值的附加初始化或要更改参数值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控件将执行数据检索操作。</xref:System.Web.UI.WebControls.ObjectDataSource> 参数都可用作<xref:System.Collections.IDictionary>集合所访问的<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性，公开的<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       可以为单个调用两次激发此事件<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A>属性设置。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> <xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs>对象用于确定是否调用了选择要检索数据或检索的计数。</xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceSelectingEventArgs.ExecutingSelectCount%2A>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler Selecting;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  id: SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的方法或函数名称<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件调用以检索数据。"
  remarks: "指定的方法可以具有任何方法签名，但它必须返回针对下表中所示的类型之一<xref:System.Web.UI.WebControls.ObjectDataSource>控件，若要成功调用。</xref:System.Web.UI.WebControls.ObjectDataSource>      |返回类型 |操作 |  |-----------------|------------|  |<xref:System.Collections.IEnumerable>|由<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回<xref:System.Collections.IEnumerable>。 |  |<xref:System.Data.DataTable>|创建使用<xref:System.Data.DataTable>和<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回<xref:System.Data.DataView>。 |  |<xref:System.Data.DataView>|由<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回<xref:System.Data.DataView>。 |  |<xref:System.Data.DataSet>|提取<xref:System.Data.DataSet>的第一个<xref:System.Data.DataTable>，并创建<xref:System.Data.DataView>并将其<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回。 |  |<xref:System.Object>|包装在一个元素<xref:System.Collections.IEnumerable>集合和<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法返回的对象。 |      SelectMethod 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Collections.IEnumerable> </xref:System.Object> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView>  </xref:System.Data.DataTable></xref:System.Data.DataSet> </xref:System.Data.DataSet>  </xref:System.Data.DataView></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.DataView>   </xref:System.Data.DataView></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A></xref:System.Data.DataTable> </xref:System.Data.DataTable>  </xref:System.Collections.IEnumerable></xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Collections.IEnumerable>       当你使用<xref:System.Web.UI.WebControls.ObjectDataSource>类以删除或更新数据，请确保参数名称为配置<xref:System.Web.UI.WebControls.ObjectDataSource>中控制<xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A>集合或<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合选择的方法返回的列名称匹配。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.DeleteParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## 对象生存期由 SelectMethod 属性标识的方法可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，业务对象是创建和销毁每次调用由 SelectMethod 属性指定的方法。 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件调用由 SelectMethod 属性指定的方法之前，要使用业务对象。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 你还可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>之后调用由 SelectMethod 属性指定该方法，将引发的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 如果该方法是`static`(`Shared`在 Visual Basic 中)，将永远不会创建业务对象，并且无法处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 参数合并参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>从这些源的集合:-以声明方式从`SelectParameters`元素。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>      -通过编程方式从`Selecting`方法。       首先中, 列出的参数`SelectParameters`添加元素。 其次，参数将以编程方式添加和删除在<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件，发生之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>运行方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 对参数进行合并后，该方法将得到解决。 在下一部分中讨论方法解析。      1> [!IMPORTANT]&1;> 应验证从客户端接收任何参数值。 运行时只是将参数值替换到 SelectMethod 属性。      ## 方法解析时<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>调用方法时，从该数据绑定控件中以声明方式创建的参数的数据字段`SelectParameters`元素和参数中的新增<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>所有合并事件处理程序。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> （有关详细信息，请参阅上一节）。<xref:System.Web.UI.WebControls.ObjectDataSource>控制然后尝试查找要调用的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> 首先，它查找 SelectMethod 属性 如果不找到任何匹配项，则<xref:System.InvalidOperationException>引发异常。</xref:System.InvalidOperationException> 如果找到匹配项，则会查找匹配的参数名。 例如，假设由指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性有两个方法名为`SelectARecord`。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 一个`SelectARecord`具有一个参数、 `ID`，以及其他`SelectARecord`具有两个参数，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A>集合仅有一个参数名为`ID`、`SelectARecord`方法只需`ID`调用参数。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectParameters%2A> 参数的类型未签入解决方法。 参数的顺序并不重要。       如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>设置属性，以不同的方式解析方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>中指定具有 SelectMethod 属性中采用一个类型的参数，指定的名称的方法将查找<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 在这种情况下，参数的名称并不重要。"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property and a method that is called to retrieve data with its SelectMethod property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the method that is specified by the SelectMethod property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_540_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_540_1.aspx)]"
  syntax:
    content: public string SelectMethod { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示方法的名称或函数的<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>用于检索数据。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取由指定的方法的参数的集合<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "SelectParameters 属性获取<xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SelectParameters%2A>       你将参数添加到 SelectParameters 集合以声明方式使用`SelectParameters`元素或以编程方式中的处理程序<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> 在运行时，参数将列出在`SelectParameters`元素添加到集合第一次。 然后添加或删除的处理程序集合中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting> <xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件之前，将引发<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>运行方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>       之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法运行、 名称和 SelectParameters 集合中包含的参数类型必须与由指定的方法的签名匹配<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 例如，如果一个名为的选择方法`GetEmployeesByStateAndAge`采用`string`和一个整数作为参数，SelectParameters 集合必须包含两个参数。 第一个参数必须解析为字符串，并且第二个参数必须解析为整数。 中的标记中，可以指定这两个参数`SelectParameters`元素。 或者，它们可以是可在中添加<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>可在标记中添加事件处理程序或一个参数并可以以编程方式添加另一个。</xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>       有关详细信息，请参阅[ObjectDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)和<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod>      1> [!IMPORTANT]&1;> 中的代码<xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>事件处理程序或由指定的方法中<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性，请确保验证从客户端收到任何参数值。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Selecting>"
  example:
  - "The following code example demonstrates how to retrieve a single data record using an <xref:System.Web.UI.WebControls.ObjectDataSource> control and display it in a <xref:System.Web.UI.WebControls.DetailsView> control. The <xref:System.Web.UI.WebControls.ObjectDataSource> control retrieves a specific employee record by calling the `GetEmployee` method of the `EmployeeLogic` class. The `GetEmployee` method requires an employee ID parameter. The <xref:System.Web.UI.WebControls.ObjectDataSource> control uses a `QueryStringParameter` element in markup to create a <xref:System.Web.UI.WebControls.QueryStringParameter> object that will retrieve the value of a specified query-string parameter from the URL and pass it to the `GetEmployee` method.  \n  \n Other parameter classes can be used to retrieve values from other sources, such as control properties, form fields, cookies, ASP.NET profile data, or session state. You can also use a parameter object that is defined in markup in order to pass a hard-coded value to the select method. For more information about parameter classes that are available, see [Using Parameters with Data Source Controls for Filtering](~/add/includes/ajax-current-ext-md.md).  \n  \n To run this example, you will need the following:  \n  \n-   A Web site that has a connection string named `NorthwindConnection` that connects to the Northwind Traders database. For more information, see the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview.  \n  \n-   The `EmployeeLogic` class that is shown as one of the code examples for the <xref:System.Web.UI.WebControls.ObjectDataSource> class overview. The class file must be located in the App_Code folder.  \n  \n-   The sample code can be run as an .aspx page. If you request the page without a query-string parameter, an error message is displayed. If you request the page using a query string such as `?empid=1` after the name of the .aspx file, you will see the details for the requested employee.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1025_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_3#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1025_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "使用指定的方法的参数的集合<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  id: SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置业务对象的名称<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>参数用于为数据源排序支持指定的排序表达式。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod*>"
  remarks: "SortParameterName 属性用于支持数据源进行排序。 当<xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>上设置属性<xref:System.Web.UI.DataSourceSelectArguments>对象并传递给<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>方法，SortParameterName 值标识的参数名称<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>业务对象方法对数据进行排序依据。</xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Web.UI.DataSourceSelectArguments> </xref:System.Web.UI.DataSourceSelectArguments.SortExpression%2A>       如果<xref:System.Web.UI.WebControls.ObjectDataSource>的数据绑定控件，传递给以逗号分隔的字段值的形式跟此参数的值与关联`&quot;ASC&quot;`或`&quot;DESC&quot;`。</xref:System.Web.UI.WebControls.ObjectDataSource> 例如上, 是按升序排序的值`Name`将`&quot;Name ASC&quot;`。       SortParameterName 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.SortParameterName%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to implement a type that supports sorting. The second code example demonstrates how to implement a sort expression.  \n  \n The following code example demonstrates how to implement a type that supports sorting. The `SelectMethod` of the `SortingData` class takes a parameter, `sortExpression`. The string that is passed to `SelectMethod` is used for the <xref:System.Data.DataView.Sort%2A> property of the <xref:System.Data.DataView> object that is returned by `SelectMethod`.  \n  \n [!code-cs[ObjectDataSourceSorting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_1.cs)]\n [!code-vb[ObjectDataSourceSorting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_1.vb)]  \n  \n The following code example demonstrates how to implement a sort expression. The code in the Web page creates an instance of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The <xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> property is set to `SortingData` and the SortParameterName property is set to `sortExpression`. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true`. When the user clicks the **Sort** button, the field name, `Name` or `Number`, is passed to `SelectMethod` in the sort parameter.  \n  \n [!code-cs[ObjectDataSourceSorting#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_386_2.aspx)]\n [!code-vb[ObjectDataSourceSorting#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_386_2.aspx)]"
  syntax:
    content: public string SortParameterName { get; set; }
    return:
      type: System.String
      description: "用于指示参数用于对数据进行排序的方法参数的名称。 默认值为一个空字符串。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  id: SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置指示哪些数据库和表用于 Microsoft SQL Server 缓存依赖项的以分号分隔的字符串。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控件支持基于一个可选的到期策略<xref:System.Web.Caching.SqlCacheDependency>（此服务必须配置为数据库服务器） 的数据缓存的对象。</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.ObjectDataSource>       缓存失效的情况下，SQL Server 支持两种机制︰ 轮询和通知。 每个机制有不同的语法为<xref:System.Web.Caching.SqlCacheDependency>对象。</xref:System.Web.Caching.SqlCacheDependency>       <xref:System.Web.UI.WebControls.ObjectDataSource>仅支持轮询。</xref:System.Web.UI.WebControls.ObjectDataSource> <xref:System.Web.Caching.SqlCacheDependency>字符串用于创建<xref:System.Data.SqlClient.SqlDependency>对象传递给<xref:System.Data.Common.DbCommand>构造函数之前<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>执行方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> </xref:System.Data.Common.DbCommand> </xref:System.Data.SqlClient.SqlDependency> </xref:System.Web.Caching.SqlCacheDependency> SqlCacheDependency 字符串标识数据库和表根据相同的格式由`@ Page`指令，其中字符串的第一部分是 SQL Server 数据库的连接字符串，跟一个冒号分隔符，和最后的数据库表的名称 (例如， `&quot;connectionstring1:table1&quot;`)。 如果 SqlCacheDependency 属性依赖于多个表，之间用分号分隔的连接字符串和表名称对 (例如， `&quot;connectionstring1:table1&quot;;connectionstring2:table2&quot;`)。       若要支持通知，必须编写的缓存逻辑的实现中你<xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>属性和处理的构造<xref:System.Web.Caching.SqlCacheDependency>在代码中的对象。</xref:System.Web.Caching.SqlCacheDependency> </xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> object. The second code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> object.  \n  \n The following code example demonstrates how to create a SQL Server cache dependency and set the SqlCacheDependency property of a <xref:System.Web.UI.WebControls.ObjectDataSource> control. In this example, the database is polled every 120 seconds. If the data in the Northwind Traders Employees table changes during that time, any data that is cached by the <xref:System.Web.UI.WebControls.ObjectDataSource> control and displayed by the <xref:System.Web.UI.WebControls.GridView> control is expired and a new set of data is retrieved on the next request for the page.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_7#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_1.aspx)]  \n  \n The following code example demonstrates how to implement a wrapper method that returns a <xref:System.Data.DataSet> object to enable caching and filtering with an <xref:System.Web.UI.WebControls.ObjectDataSource> control. In the base implementation of the `EmployeeLogic` class, the `GetAllEmployees` method returns an <xref:System.Collections.ArrayList> object. Instead of refactoring the object completely to work with the <xref:System.Web.UI.WebControls.ObjectDataSource> on a Web Forms page, a wrapper method named `GetAllEmployeesAsDataSet` is added that returns a set of `NorthwindEmployee` data as a <xref:System.Data.DataSet>.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_787_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_5#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_787_2.cs)]"
  syntax:
    content: public virtual string SqlCacheDependency { get; set; }
    return:
      type: System.String
      description: "一个字符串，指示哪些数据库和表用于 SQL Server 缓存依赖项。"
  overload: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  id: StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置用于指示要检索的数据源分页支持的第一个记录标识符的值的数据检索方法参数的名称。"
  remarks: "StartRowIndexParameterName 属性用于支持数据源分页。 了解如何<xref:System.Web.UI.WebControls.ObjectDataSource>控制，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A></xref:System.Web.UI.WebControls.ObjectDataSource>支持分页       StartRowIndexParameterName 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.StartRowIndexParameterName%2A>"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable the user to pick how many records are displayed in the page.  \n  \n The Web page contains an <xref:System.Web.UI.WebControls.ObjectDataSource> control whose <xref:System.Web.UI.WebControls.ObjectDataSource.EnablePaging%2A> property is set to `true`. The <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property is set to the name of a method that returns the total number of records in the query. The <xref:System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName%2A> property and the StartRowIndexParameterName property are set to the names of the parameters that are used in the Select method. The page also contains a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_1.aspx)]  \n  \n The second example shows a handler for the <xref:System.Web.UI.WebControls.ListControl.SelectedIndexChanged?displayProperty=fullName> event of the <xref:System.Web.UI.WebControls.DropDownList> control. The code in the handler sets the <xref:System.Web.UI.WebControls.GridView.PageSize%2A> property to the user's selection.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_2.vb)]  \n  \n The third example shows the data access class that retrieves data from the Customers table. It includes a method named `GetSubsetOfEmployees`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The example also includes a method named `GetEmployeeCount`, which is assigned to the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod%2A> property of the <xref:System.Web.UI.WebControls.ObjectDataSource> control. The class uses LINQ to query the Customers table. The example requires a LINQ to SQL class that represents the Northwind database and Customers table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1148_3.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_17#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1148_3.vb)]"
  syntax:
    content: public string StartRowIndexParameterName { get; set; }
    return:
      type: System.String
      description: "用于指示要检索的第一个记录的业务对象方法参数的名称。 参数必须返回一个整数值。 默认值是`&quot;startRowIndex&quot;`。"
  overload: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  id: TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "跟踪视图状态更改为<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控制，以便将它们存储在<xref href=&quot;System.Web.UI.StateBag&quot;></xref>对象。"
  remarks: "重写 TrackViewState 方法以将标记的起始点，若要开始对控件的跟踪并保存更改对象的视图状态的一部分。"
  syntax:
    content: protected override void TrackViewState ();
    parameters: []
  overload: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  id: TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的类名称<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>对象所表示。"
  remarks: "到创建的对象实例<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到，该控件使用反射来加载由类型名称标识在运行时类型。</xref:System.Web.UI.WebControls.ObjectDataSource> 因此，此 TypeName 属性的值可以是位于 Bin 或 App_Code 目录中的代码的部分限定的类型或在全局程序集缓存中注册的代码的完全限定的类型名称。 如果你使用的全局程序集缓存，你必须添加对相应的引用`assemblies`Machine.config 或 Web.config 文件的部分。       该类型必须具有默认构造函数，除非你处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件自行创建它的实例。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> 每次调用创建的类型实例<xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>， <xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A>，和<xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A>方法，如果类型上的方法是成员方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Delete%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Insert%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Select%2A> 如果方法是不创建实例`static`(`Shared`在 Visual Basic 中)。 如果该类型实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable>"
  example:
  - "The following code example demonstrates how a <xref:System.Web.UI.WebControls.GridView> control can display data by using an <xref:System.Web.UI.WebControls.ObjectDataSource> control on a Web Forms page. The <xref:System.Web.UI.WebControls.ObjectDataSource> identifies a partially or fully qualified class name with its TypeName property and a method that is called to retrieve data with its <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property. At run time, the object is created and the method is called using reflection. The <xref:System.Web.UI.WebControls.GridView> control enumerates through the <xref:System.Collections.IEnumerable> collection that is returned by the <xref:System.Web.UI.WebControls.ObjectDataSource.SelectMethod%2A> property, and displays the data.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_1.aspx)]  \n  \n The following example shows the class that the TypeName property value refers to.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_850_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_1#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_850_2.vb)]"
  syntax:
    content: public string TypeName { get; set; }
    return:
      type: System.String
      description: "标识的对象类型的部分或完全限定的类名， <xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;> </xref>表示。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  id: Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "通过调用由标识的方法执行更新操作<> *1> 属性和任何参数，位于<> *1> 集合。"
  remarks: "假定的业务对象一次，而不是批处理中更新数据一条记录。       执行更新操作之前，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A>调用方法来引发<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdating%2A> 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件，检查的参数的值并执行更新操作之前任何预处理。</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 若要执行更新操作，<xref:System.Web.UI.WebControls.ObjectDataSourceView>对象使用反射来创建由标识对象的实例<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSourceView> 它然后调用由标识方法<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性，使用任何关联<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 更新操作完成后，<xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A>调用方法来引发<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.Updated> </xref:System.Web.UI.WebControls.ObjectDataSourceView.OnUpdated%2A> 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.Updated>事件，以检查任何返回值、 输出参数和异常，并执行任何后续处理。</xref:System.Web.UI.WebControls.ObjectDataSource.Updated>       更新方法会委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>方法<xref:System.Web.UI.WebControls.ObjectDataSourceView>关联<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.Update%2A>       有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      1> [!IMPORTANT]&1;> 应验证从客户端接收任何参数值。 运行时只是将替换参数值转换为<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      ## 数据绑定控件时<xref:System.Web.UI.WebControls.ObjectDataSource>与数据绑定控件，如关联控件<xref:System.Web.UI.WebControls.GridView>控件，不需要从页的代码调用更新方法。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 而是直接通过数据绑定控件调用更新方法。"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the <xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> collection contains a <xref:System.Web.UI.WebControls.ControlParameter> object that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the Update operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/m-system.web.ui.webcontr_97_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/m-system.web.ui.webcontr_97_2.vb)]"
  syntax:
    content: public int Update ();
    parameters: []
    return:
      type: System.Int32
      description: "一个值，表示在基础数据存储区中更新的行数。"
  overload: System.Web.UI.WebControls.ObjectDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "发生时<xref:System.Web.UI.WebControls.ObjectDataSource.Update*>操作已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>"
  remarks: "处理更新事件以检查返回值或输出参数的值，或者想要确定后是否引发了异常<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>操作已完成。</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> 返回值、 输出参数和异常处理属性就可以在<xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>与事件相关联的对象。</xref:System.Web.UI.WebControls.ObjectDataSourceStatusEventArgs>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler Updated;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  id: UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的方法或函数名称<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>控件调用以更新数据。"
  remarks: "<xref:System.Web.UI.WebControls.ObjectDataSource>控制假定由 UpdateMethod 属性标识的方法执行更新一个，一次，而不是批处理中。</xref:System.Web.UI.WebControls.ObjectDataSource>       UpdateMethod 属性委托给<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateMethod%2A>       请确保参数名称为配置<xref:System.Web.UI.WebControls.ObjectDataSource>中控制<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合选择的方法返回的列名称匹配。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> </xref:System.Web.UI.WebControls.ObjectDataSource>      ## 对象生存期由 UpdateMethod 属性标识的方法可以是实例方法或`static`(`Shared`在 Visual Basic 中) 方法。 如果它是实例方法，业务对象是创建和销毁每次调用由 UpdateMethod 属性指定的方法。 你可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>事件调用由 UpdateMethod 属性指定的方法之前，要使用业务对象。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated> 你还可以处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>之后调用由 UpdateMethod 属性指定该方法，将引发的事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> 如果业务对象实现<xref:System.IDisposable>接口，<xref:System.IDisposable.Dispose%2A>销毁该对象前调用方法。</xref:System.IDisposable.Dispose%2A> </xref:System.IDisposable> 如果该方法是`static`(`Shared`在 Visual Basic 中)，将永远不会创建业务对象，并且无法处理<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>， <xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating>，和<xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing>事件。</xref:System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreating> </xref:System.Web.UI.WebControls.ObjectDataSource.ObjectCreated>      ## 参数合并参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>从三个源的集合:-从数据绑定控件，在运行时。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>      -从`UpdateParameters`元素，以声明方式。      -从<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件处理程序，以编程方式。</xref:System.Web.UI.WebControls.ObjectDataSource.Updating>       首先，将通过数据绑定控件生成的任何参数添加到<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 例如，如果<xref:System.Web.UI.WebControls.ObjectDataSource>控件绑定到<xref:System.Web.UI.WebControls.GridView>具有列控件`Name`和`Number`的参数`Name`和`Number`添加到集合。</xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.ObjectDataSource> 取决于参数的确切名称<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 这些参数的数据类型是`string`。 下一步、 中列出的参数`UpdateParameters`添加元素。 如果中的参数`UpdateParameters`元素找到具有相同名称作为参数中已被<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>修改集合，现有的参数以匹配中指定的参数`UpdateParameters`元素。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 通常，这用于修改在参数中的数据的类型。 最后，你可以以编程方式添加和删除中的参数<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>事件，发生之前<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>运行方法。</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> </xref:System.Web.UI.WebControls.ObjectDataSource.Updating> 对参数进行合并后，该方法将得到解决。 在下一部分中讨论方法解析。      1> [!IMPORTANT]&1;> 应验证从客户端接收任何参数值。 运行时只是将参数值替换到 UpdateMethod 属性。      ## 方法解析时<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>调用方法时，从该数据绑定控件中以声明方式创建的参数的数据字段`UpdateParameters`元素和参数中的新增<xref:System.Web.UI.WebControls.ObjectDataSource.Updating>所有合并事件处理程序。</xref:System.Web.UI.WebControls.ObjectDataSource.Updating> </xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> （有关详细信息，请参阅上一节）。<xref:System.Web.UI.WebControls.ObjectDataSource>控制然后尝试查找要调用的方法。</xref:System.Web.UI.WebControls.ObjectDataSource> 首先，它查找 UpdateMethod 属性 如果不找到任何匹配项，则<xref:System.InvalidOperationException>引发异常。</xref:System.InvalidOperationException> 如果找到匹配项，则会查找匹配的参数名。 例如，假设由指定的类型<xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A>属性有两个方法名为`UpdateARecord`。</xref:System.Web.UI.WebControls.ObjectDataSource.TypeName%2A> 一个`UpdateARecord`具有一个参数、 `ID`，以及其他`UpdateARecord`具有两个参数，`Name`和`Number`。 如果<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A>集合仅有一个参数名为`ID`、`UpdateARecord`方法只需`ID`调用参数。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateParameters%2A> 参数的类型未签入解决方法。 参数的顺序并不重要。       如果<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>设置属性，以不同的方式解析方法。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> <xref:System.Web.UI.WebControls.ObjectDataSource>中指定具有 UpdateMethod 属性中采用一个类型的参数，指定的名称的方法将查找<xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName%2A> </xref:System.Web.UI.WebControls.ObjectDataSource> 在这种情况下，参数的名称并不重要。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The <xref:System.Web.UI.WebControls.ObjectDataSource.Updating> event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_943_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_943_3.cs)]"
  syntax:
    content: public string UpdateMethod { get; set; }
    return:
      type: System.String
      description: "一个字符串，表示方法的名称或函数的<xref href=&quot;System.Web.UI.WebControls.ObjectDataSource&quot;></xref>用来更新数据。 默认值为一个空字符串。"
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "获取包含由指定的方法使用的参数的参数集合<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>"
  remarks: "名称和 UpdateParameters 集合中包含的参数类型必须匹配的名称和类型中的参数的<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>方法签名。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A> 参数名称受到<xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A>属性和区分大小写。</xref:System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString%2A> 集合中的参数取决于数据绑定控件，以声明方式，指定的参数和以编程方式添加的参数中的数据。 有关详细信息，请参阅中的&quot;参数合并&quot;一节<xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>和[ObjectDataSource 控件与使用参数](~/add/includes/ajax-current-ext-md.md)。</xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A>       UpdateParameters 属性检索<xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>所包含的属性<xref:System.Web.UI.WebControls.ObjectDataSourceView>与关联的对象<xref:System.Web.UI.WebControls.ObjectDataSource>控件。</xref:System.Web.UI.WebControls.ObjectDataSource> </xref:System.Web.UI.WebControls.ObjectDataSourceView> </xref:System.Web.UI.WebControls.ObjectDataSourceView.UpdateParameters%2A>       有关参数合并、 对象生存期和方法解析的详细信息，请参阅<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>      1> [!IMPORTANT]&1;> 应验证从客户端接收任何参数值。 运行时只是将替换参数值转换为<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod%2A>"
  example:
  - "This section contains two code examples. The first code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> objects to update data. The second code example shows the `EmployeeLogic` class that is used in the first code example.  \n  \n The following code example demonstrates how to use a <xref:System.Web.UI.WebControls.DropDownList> control, <xref:System.Web.UI.WebControls.TextBox> controls, and several <xref:System.Web.UI.WebControls.ObjectDataSource> controls to update data. The <xref:System.Web.UI.WebControls.DropDownList> displays the name of a Northwind employee, while the <xref:System.Web.UI.WebControls.TextBox> controls are used to enter and update address information. Because the UpdateParameters collection contains a <xref:System.Web.UI.WebControls.ControlParameter> that is bound to the selected value of the <xref:System.Web.UI.WebControls.DropDownList>, the button that raises the <xref:System.Web.UI.WebControls.ObjectDataSource.Update%2A> operation is enabled only after an employee is selected.  \n  \n> [!IMPORTANT]\n>  This example has a text box that accepts user input, which is a potential security threat. By default, ASP.NET Web pages validate that user input does not include script or HTML elements. For more information, see [Script Exploits Overview](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_1.aspx)]  \n  \n The following code example shows the `EmployeeLogic` class that is used in the preceding code example.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_610_2.cs)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_12#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_610_2.vb)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.ParameterCollection&quot;> </xref>包含由指定的方法使用的参数<xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>属性。</xref:System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*>"
  overload: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls
  summary: "之前发生<xref:System.Web.UI.WebControls.ObjectDataSource.Update*>操作。</xref:System.Web.UI.WebControls.ObjectDataSource.Update*>"
  remarks: "处理更新事件，以执行特定于应用程序，以验证参数的值的附加初始化或要更改参数值之前<xref:System.Web.UI.WebControls.ObjectDataSource>控件将执行更新操作。</xref:System.Web.UI.WebControls.ObjectDataSource> 参数都可用作<xref:System.Collections.IDictionary>集合所访问的<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A>属性，公开的<xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs>对象。</xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs> </xref:System.Web.UI.WebControls.ObjectDataSourceMethodEventArgs.InputParameters%2A> </xref:System.Collections.IDictionary>       有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。"
  example:
  - "The following three examples show a Web page, a code-behind page class, and a data-access class that enable a user to retrieve and update records in the Employees table in the Northwind database.  \n  \n The first example shows a Web page that contains two <xref:System.Web.UI.WebControls.ObjectDataSource> controls, a <xref:System.Web.UI.WebControls.DropDownList> control, and a <xref:System.Web.UI.WebControls.DetailsView> control. The first <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DropDownList> control are used to retrieve and display employee names from the database. The second <xref:System.Web.UI.WebControls.ObjectDataSource> control and the <xref:System.Web.UI.WebControls.DetailsView> control are used to retrieve, display, and modify the data from the employee record that is selected by the user.  \n  \n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_1.aspx)]  \n  \n The second example shows handlers for the <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> and Updating events. The <xref:System.Web.UI.WebControls.ObjectDataSource.Selected> event handler serializes the object that contains data that was retrieved from the Employee table. The serialized object is stored in view state. The Updating event handler deserializes the object in view state that contains the original data for the data record that is being updated. The object that contains the original data is passed as a parameter to the Update method. The original data must be passed to the database so that it can be used to check whether the data has been modified by another process.  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_2.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#2](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_2.cs)]  \n  \n The third example shows the data access class that interacts with the Northwind database. The class uses LINQ to query and update the Employees table. The example requires a LINQ to SQL class that represents the Northwind database and Employees table. For more information, see [How to: Create LINQ to SQL Classes in a Web Project](http://msdn.microsoft.com/en-us/20bf925f-2a6d-410d-8f65-7b5b8f555081).  \n  \n [!code-vb[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_25_3.vb)]\n [!code-cs[System.Web.UI.WebControls.ObjectDataSource_18#5](~/add/codesnippet/csharp/e-system.web.ui.webcontr_25_3.cs)]"
  syntax:
    content: public event System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler Updating;
    return:
      type: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.DataSourceControl
  isExternal: false
  name: System.Web.UI.DataSourceControl
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource()
  nameWithType: ObjectDataSource.ObjectDataSource()
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource()
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor(System.String,System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource(String,String)
  nameWithType: ObjectDataSource.ObjectDataSource(String,String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDataSource(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheDuration
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.DataSourceCacheExpiry
  parent: System.Web.UI
  isExternal: false
  name: DataSourceCacheExpiry
  nameWithType: DataSourceCacheExpiry
  fullName: System.Web.UI.DataSourceCacheExpiry
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection
- uid: System.Web.UI.ConflictOptions
  parent: System.Web.UI
  isExternal: false
  name: ConflictOptions
  nameWithType: ConflictOptions
  fullName: System.Web.UI.ConflictOptions
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
  fullName: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete()
  nameWithType: ObjectDataSource.Delete()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Delete()
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleted
  nameWithType: ObjectDataSource.Deleted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleted
- uid: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceStatusEventHandler
  nameWithType: ObjectDataSourceStatusEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceStatusEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Deleting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Deleting
  nameWithType: ObjectDataSource.Deleting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Deleting
- uid: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceMethodEventHandler
  nameWithType: ObjectDataSourceMethodEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceMethodEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
  fullName: System.Web.UI.WebControls.ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.Filtering
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Filtering
  nameWithType: ObjectDataSource.Filtering
  fullName: System.Web.UI.WebControls.ObjectDataSource.Filtering
- uid: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceFilteringEventHandler
  nameWithType: ObjectDataSourceFilteringEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceFilteringEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView(System.String)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView(String)
  nameWithType: ObjectDataSource.GetView(String)
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetView(String)
- uid: System.Web.UI.DataSourceView
  parent: System.Web.UI
  isExternal: false
  name: DataSourceView
  nameWithType: DataSourceView
  fullName: System.Web.UI.DataSourceView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames()
  nameWithType: ObjectDataSource.GetViewNames()
  fullName: System.Web.UI.WebControls.ObjectDataSource.GetViewNames()
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert()
  nameWithType: ObjectDataSource.Insert()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Insert()
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserted
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserted
  nameWithType: ObjectDataSource.Inserted
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserted
- uid: System.Web.UI.WebControls.ObjectDataSource.Inserting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Inserting
  nameWithType: ObjectDataSource.Inserting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Inserting
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(System.Object)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState(Object)
  nameWithType: ObjectDataSource.LoadViewState(Object)
  fullName: System.Web.UI.WebControls.ObjectDataSource.LoadViewState(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreated
  nameWithType: ObjectDataSource.ObjectCreated
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreated
- uid: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceObjectEventHandler
  nameWithType: ObjectDataSourceObjectEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceObjectEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectCreating
  nameWithType: ObjectDataSource.ObjectCreating
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectCreating
- uid: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDisposing
  nameWithType: ObjectDataSource.ObjectDisposing
  fullName: System.Web.UI.WebControls.ObjectDataSource.ObjectDisposing
- uid: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceDisposingEventHandler
  nameWithType: ObjectDataSourceDisposingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceDisposingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
  fullName: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: ObjectDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.ObjectDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
  fullName: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ParsingCulture
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParsingCulture
  nameWithType: ParsingCulture
  fullName: System.Web.UI.WebControls.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState()
  nameWithType: ObjectDataSource.SaveViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.SaveViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.Select
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select()
  nameWithType: ObjectDataSource.Select()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Select()
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.Selected
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selected
  nameWithType: ObjectDataSource.Selected
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selected
- uid: System.Web.UI.WebControls.ObjectDataSource.Selecting
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Selecting
  nameWithType: ObjectDataSource.Selecting
  fullName: System.Web.UI.WebControls.ObjectDataSource.Selecting
- uid: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ObjectDataSourceSelectingEventHandler
  nameWithType: ObjectDataSourceSelectingEventHandler
  fullName: System.Web.UI.WebControls.ObjectDataSourceSelectingEventHandler
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
  fullName: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
  fullName: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState()
  nameWithType: ObjectDataSource.TrackViewState()
  fullName: System.Web.UI.WebControls.ObjectDataSource.TrackViewState()
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
  fullName: System.Web.UI.WebControls.ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update()
  nameWithType: ObjectDataSource.Update()
  fullName: System.Web.UI.WebControls.ObjectDataSource.Update()
- uid: System.Web.UI.WebControls.ObjectDataSource.Updated
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updated
  nameWithType: ObjectDataSource.Updated
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updated
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.Updating
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Updating
  nameWithType: ObjectDataSource.Updating
  fullName: System.Web.UI.WebControls.ObjectDataSource.Updating
- uid: System.Web.UI.WebControls.ObjectDataSource.#ctor*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ObjectDataSource
  nameWithType: ObjectDataSource.ObjectDataSource
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheDuration*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheDuration
  nameWithType: ObjectDataSource.CacheDuration
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheExpirationPolicy*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheExpirationPolicy
  nameWithType: ObjectDataSource.CacheExpirationPolicy
- uid: System.Web.UI.WebControls.ObjectDataSource.CacheKeyDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: CacheKeyDependency
  nameWithType: ObjectDataSource.CacheKeyDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.ConflictDetection*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConflictDetection
  nameWithType: ObjectDataSource.ConflictDetection
- uid: System.Web.UI.WebControls.ObjectDataSource.ConvertNullToDBNull*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ConvertNullToDBNull
  nameWithType: ObjectDataSource.ConvertNullToDBNull
- uid: System.Web.UI.WebControls.ObjectDataSource.DataObjectTypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DataObjectTypeName
  nameWithType: ObjectDataSource.DataObjectTypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Delete*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Delete
  nameWithType: ObjectDataSource.Delete
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteMethod
  nameWithType: ObjectDataSource.DeleteMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: ObjectDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.EnableCaching*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnableCaching
  nameWithType: ObjectDataSource.EnableCaching
- uid: System.Web.UI.WebControls.ObjectDataSource.EnablePaging*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: EnablePaging
  nameWithType: ObjectDataSource.EnablePaging
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterExpression*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterExpression
  nameWithType: ObjectDataSource.FilterExpression
- uid: System.Web.UI.WebControls.ObjectDataSource.FilterParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: FilterParameters
  nameWithType: ObjectDataSource.FilterParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.GetView*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetView
  nameWithType: ObjectDataSource.GetView
- uid: System.Web.UI.WebControls.ObjectDataSource.GetViewNames*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: GetViewNames
  nameWithType: ObjectDataSource.GetViewNames
- uid: System.Web.UI.WebControls.ObjectDataSource.Insert*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Insert
  nameWithType: ObjectDataSource.Insert
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertMethod
  nameWithType: ObjectDataSource.InsertMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: ObjectDataSource.InsertParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.LoadViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: LoadViewState
  nameWithType: ObjectDataSource.LoadViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.MaximumRowsParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: MaximumRowsParameterName
  nameWithType: ObjectDataSource.MaximumRowsParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.OldValuesParameterFormatString*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OldValuesParameterFormatString
  nameWithType: ObjectDataSource.OldValuesParameterFormatString
- uid: System.Web.UI.WebControls.ObjectDataSource.OnInit*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: OnInit
  nameWithType: ObjectDataSource.OnInit
- uid: System.Web.UI.WebControls.ObjectDataSource.ParsingCulture*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: ParsingCulture
  nameWithType: ObjectDataSource.ParsingCulture
- uid: System.Web.UI.WebControls.ObjectDataSource.SaveViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SaveViewState
  nameWithType: ObjectDataSource.SaveViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.Select*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Select
  nameWithType: ObjectDataSource.Select
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectCountMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectCountMethod
  nameWithType: ObjectDataSource.SelectCountMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectMethod
  nameWithType: ObjectDataSource.SelectMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: ObjectDataSource.SelectParameters
- uid: System.Web.UI.WebControls.ObjectDataSource.SortParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SortParameterName
  nameWithType: ObjectDataSource.SortParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.SqlCacheDependency*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: SqlCacheDependency
  nameWithType: ObjectDataSource.SqlCacheDependency
- uid: System.Web.UI.WebControls.ObjectDataSource.StartRowIndexParameterName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: StartRowIndexParameterName
  nameWithType: ObjectDataSource.StartRowIndexParameterName
- uid: System.Web.UI.WebControls.ObjectDataSource.TrackViewState*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TrackViewState
  nameWithType: ObjectDataSource.TrackViewState
- uid: System.Web.UI.WebControls.ObjectDataSource.TypeName*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: TypeName
  nameWithType: ObjectDataSource.TypeName
- uid: System.Web.UI.WebControls.ObjectDataSource.Update*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: Update
  nameWithType: ObjectDataSource.Update
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateMethod*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateMethod
  nameWithType: ObjectDataSource.UpdateMethod
- uid: System.Web.UI.WebControls.ObjectDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.ObjectDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: ObjectDataSource.UpdateParameters
