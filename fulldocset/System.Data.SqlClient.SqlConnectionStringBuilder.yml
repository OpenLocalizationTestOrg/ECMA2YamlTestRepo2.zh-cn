### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlConnectionStringBuilder
  id: SqlConnectionStringBuilder
  children:
  - System.Data.SqlClient.SqlConnectionStringBuilder.#ctor
  - System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
  - System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
  - System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing
  - System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
  - System.Data.SqlClient.SqlConnectionStringBuilder.Authentication
  - System.Data.SqlClient.SqlConnectionStringBuilder.Clear
  - System.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting
  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset
  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
  - System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
  - System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection
  - System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
  - System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
  - System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
  - System.Data.SqlClient.SqlConnectionStringBuilder.Enlist
  - System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
  - System.Data.SqlClient.SqlConnectionStringBuilder.GetProperties(System.Collections.Hashtable)
  - System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
  - System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
  - System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize
  - System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  - System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
  - System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
  - System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
  - System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
  - System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
  - System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary
  - System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
  - System.Data.SqlClient.SqlConnectionStringBuilder.Password
  - System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
  - System.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod
  - System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
  - System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.Replication
  - System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)
  - System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding
  - System.Data.SqlClient.SqlConnectionStringBuilder.TransparentNetworkIPResolution
  - System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
  - System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  - System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
  - System.Data.SqlClient.SqlConnectionStringBuilder.UserID
  - System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
  - System.Data.SqlClient.SqlConnectionStringBuilder.Values
  - System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
  langs:
  - csharp
  name: SqlConnectionStringBuilder
  nameWithType: SqlConnectionStringBuilder
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder
  type: Class
  summary: "提供一种简单的方法来创建和管理使用的连接字符串的内容<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>类。"
  remarks: "连接字符串生成器，可以以编程方式创建语法正确的连接字符串以及分析和重新生成现有的连接字符串的开发人员使用的类属性和方法。 连接字符串生成器提供了与 SQL Server 允许的已知的键/值对相对应的强类型的属性。 无需应用程序的一部分创建的连接字符串的开发人员可以使用 SqlConnectionStringBuilder 类生成和修改连接字符串。 使用该类还可以轻松管理存储在应用程序配置文件中的连接字符串。       SqlConnectionStringBuilder 有效的键/值对的进行检查。 因此，不能使用此类创建无效的连接字符串;尝试添加无效对将引发异常。 该类保持一个固定的同义词集合，可以将同义词转换为相应的已知键名。       例如，当使用**项**属性来检索值时，你可以指定包含所需的键任何同义词的字符串。 例如，你可以指定&quot;Network Address&quot;、&quot;addr&quot;或任何其他可接受的同义词，此连接字符串中的键时使用需要一个字符串，包含键名称，如任何成员**项**属性或<xref:System.Data.SqlClient.SqlConnectionStringBuilder.Remove%2A>方法。</xref:System.Data.SqlClient.SqlConnectionStringBuilder.Remove%2A> 请参阅<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>有关可接受同义词的完整列表的属性。</xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>       **项**属性处理尝试插入恶意项。 例如，下面的代码，使用默认 Item 属性 （C# 中的索引器） 正确转义嵌套的键/值对: [Visual Basic] ```   Dim builder As New System.Data.SqlClient.SqlConnectionStringBuilder   builder(&quot;Data Source&quot;) = &quot;(local)&quot;   builder(&quot;Integrated Security&quot;) = True   builder(&quot;Initial Catalog&quot;) = &quot;AdventureWorks;NewValue=Bad&quot;   Console.WriteLine(builder.ConnectionString)   ``` [C#]```   System.Data.SqlClient.SqlConnectionStringBuilder builder =     new System.Data.SqlClient.SqlConnectionStringBuilder();   builder[&quot;Data Source&quot;] = &quot;(local)&quot;;   builder[&quot;integrated Security&quot;] = true;   builder[&quot;Initial Catalog&quot;] = &quot;AdventureWorks;NewValue=Bad&quot;;   Console.WriteLine(builder.ConnectionString);      ```结果是以安全方式处理无效值以下连接字符串︰```   Source=(local);Initial Catalog=&quot;AdventureWorks;NewValue=Bad&quot;;   Integrated Security=True   ```"
  example:
  - "The following console application builds connection strings for a [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] database. The code uses a SqlConnectionStringBuilder class to create the connection string, and then passes the <xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A> property of the SqlConnectionStringBuilder instance to the constructor of the connection class. The example also parses an existing connection string and demonstrates various ways of manipulating the connection string's contents.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how SqlConnectionStringBuilder works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder#1](~/add/codesnippet/csharp/t-system.data.sqlclient._13_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._13_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultProperty("DataSource")]

      [System.ComponentModel.TypeConverter(typeof(System.Data.SqlClient.SqlConnectionStringBuilder/SqlConnectionStringBuilderConverter))]

      public sealed class SqlConnectionStringBuilder : System.Data.Common.DbConnectionStringBuilder
  inheritance:
  - System.Object
  - System.Data.Common.DbConnectionStringBuilder
  implements: []
  inheritedMembers:
  - System.Data.Common.DbConnectionStringBuilder.Add(System.String,System.Object)
  - System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String)
  - System.Data.Common.DbConnectionStringBuilder.AppendKeyValuePair(System.Text.StringBuilder,System.String,System.String,System.Boolean)
  - System.Data.Common.DbConnectionStringBuilder.BrowsableConnectionString
  - System.Data.Common.DbConnectionStringBuilder.ClearPropertyDescriptors
  - System.Data.Common.DbConnectionStringBuilder.ConnectionString
  - System.Data.Common.DbConnectionStringBuilder.Count
  - System.Data.Common.DbConnectionStringBuilder.EquivalentTo(System.Data.Common.DbConnectionStringBuilder)
  - System.Data.Common.DbConnectionStringBuilder.IsReadOnly
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#IsSynchronized
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#ICollection#SyncRoot
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Contains(System.Object)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#GetEnumerator
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Item(System.Object)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IDictionary#Remove(System.Object)
  - System.Data.Common.DbConnectionStringBuilder.System#Collections#IEnumerable#GetEnumerator
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetAttributes
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetClassName
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetComponentName
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetConverter
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultEvent
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetDefaultProperty
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEditor(System.Type)
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetEvents(System.Attribute[])
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetProperties(System.Attribute[])
  - System.Data.Common.DbConnectionStringBuilder.System#ComponentModel#ICustomTypeDescriptor#GetPropertyOwner(System.ComponentModel.PropertyDescriptor)
  - System.Data.Common.DbConnectionStringBuilder.ToString
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: SqlConnectionStringBuilder()
  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder()
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.SqlConnectionStringBuilder()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>类。"
  syntax:
    content: public SqlConnectionStringBuilder ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: SqlConnectionStringBuilder(String)
  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.SqlConnectionStringBuilder(String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>类。 提供的连接字符串为实例的内部连接信息提供数据。"
  remarks: "<xref:System.Data.SqlClient.SqlConnectionStringBuilder>类提供键/值对的固定内部集合。</xref:System.Data.SqlClient.SqlConnectionStringBuilder> 即使您提供只有一小部分的构造函数中的可能的连接字符串值，该对象始终为每个键/值对提供默认值。 当`ConnectionString`检索的对象属性，该字符串包含仅在其中的值不是项的默认值的键/值对。"
  example:
  - "The following example supplies a simple SQL Server connection string in the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> object's constructor, and then iterates through all the key/value pairs within the object. Note that the collection provides default values for each item. Also note that the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> class converts synonyms for the well-known keys so that they are consistent with the well-known names.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how <xref:System.Data.SqlClient.SqlConnectionStringBuilder> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder.Password#1](~/add/codesnippet/csharp/m-system.data.sqlclient._44_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder.Password#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._44_1.vb)]"
  syntax:
    content: public SqlConnectionStringBuilder (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "对象的内部连接信息的基础。 分析为名称/值对。 无效的键名会引发<xref:System.Collections.Generic.KeyNotFoundException>.</xref:System.Collections.Generic.KeyNotFoundException>"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor*
  exceptions:
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "连接字符串内的键名无效。"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "连接字符串中的值无效 （具体而言，当一个布尔值或数值的值，但未提供）。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "提供<code> connectionString </code>无效。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
  id: ApplicationIntent
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ApplicationIntent
  nameWithType: SqlConnectionStringBuilder.ApplicationIntent
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "连接到 SQL Server 可用性组中的数据库时，请声明的应用程序工作负荷类型。 你可以设置此属性与值<xref href=&quot;System.Data.SqlClient.ApplicationIntent&quot;> </xref>。 有关 Alwayson 可用性组的 SqlClient 支持的详细信息，请参阅[对高可用性、 灾难恢复的 SqlClient 支持](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Data.SqlClient.ApplicationIntent ApplicationIntent { get; set; }
    return:
      type: System.Data.SqlClient.ApplicationIntent
      description: "返回属性的当前值 (类型的值<xref href=&quot;System.Data.SqlClient.ApplicationIntent&quot;> </xref>)。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
  id: ApplicationName
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ApplicationName
  nameWithType: SqlConnectionStringBuilder.ApplicationName
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置与连接字符串关联的应用程序的名称。"
  remarks: "此属性与连接字符串内的&quot;Application Name&quot;和&quot;app&quot;键相对应。"
  example:
  - "The following example creates a new <xref:System.Data.SqlClient.SqlConnectionStringBuilder> and assigns a connection string in the object's constructor. The code displays the parsed and recreated version of the connection string, and then modifies the ApplicationName property of the object. Finally, the code displays the new connection string, including the new key/value pair.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder.ApplicationName#1](~/add/codesnippet/csharp/p-system.data.sqlclient._44_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder.ApplicationName#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._44_1.vb)]  \n  \n The sample displays the following text in the console window:  \n  \n```  \nOriginal: Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=True  \nApplicationName=\".Net SqlClient Data Provider\"  \nModified: Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=True;Application Name=\"My Application\"  \n```"
  syntax:
    content: public string ApplicationName { get; set; }
    return:
      type: System.String
      description: "应用程序或&quot;.NET SqlClient Data Provider&quot;如果未不提供任何名称的名称。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing
  id: AsynchronousProcessing
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: AsynchronousProcessing
  nameWithType: SqlConnectionStringBuilder.AsynchronousProcessing
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个布尔值，该值指示使用此连接字符串创建的连接是否允许异步处理。"
  remarks: "此属性与连接字符串内的&quot;Asynchronous Processing&quot;和&quot;async&quot;键相对应。 若要充分利用提供的异步处理<xref:System.Data.SqlClient.SqlCommand>对象，此键/值对必须包含在关联的连接字符串<xref:System.Data.SqlClient.SqlConnection>对象。</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlCommand>"
  example:
  - "The following example retrieves a connection string and verifies that the connection string is configured to allow for asynchronous processing. (In this case, the string comes from a procedure within the application, but in a production application, the connection string might come from a configuration file, or some other source.) Then, the example performs an asynchronous operation, updating values within a sample database on a background thread.  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.Async#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._47_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.Async#1](~/add/codesnippet/csharp/p-system.data.sqlclient._47_1.cs)]"
  syntax:
    content: public bool AsynchronousProcessing { get; set; }
    return:
      type: System.Boolean
      description: "AsynchronousProcessing 属性的值或<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果不提供任何值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
  id: AttachDBFilename
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: AttachDBFilename
  nameWithType: SqlConnectionStringBuilder.AttachDBFilename
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置包含主数据文件的名称的字符串。 这包括可附加数据库的完整路径名称。"
  remarks: "此属性与&quot;AttachDBFilename&quot;、&quot;extended 的 properties&quot;和连接字符串内的&quot;initial file name&quot;键相对应。       `AttachDBFilename`仅支持具有.mdf 扩展名的主数据文件。       如果数据文件所在的同一目录中存在一个日志文件并附加主数据文件时使用 database 关键字，则将生成错误。 在这种情况下，删除该日志文件。 后附加数据库，新的日志文件将自动生成基于物理路径。"
  example:
  - "The following example creates a new <xref:System.Data.SqlClient.SqlConnectionStringBuilder> instance, and sets the `AttachDBFilename` property in order to specify the name of an attached data file.  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.AttachDBFilename#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._58_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.AttachDBFilename#1](~/add/codesnippet/csharp/p-system.data.sqlclient._58_1.cs)]"
  syntax:
    content: public string AttachDBFilename { get; set; }
    return:
      type: System.String
      description: "值<xref uid=&quot;langword_csharp_AttachDBFilename&quot; name=&quot;AttachDBFilename&quot; href=&quot;&quot;></xref>属性，或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果不提供任何值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Authentication
  id: Authentication
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Authentication
  nameWithType: SqlConnectionStringBuilder.Authentication
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Authentication
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取连接字符串的身份验证。"
  syntax:
    content: public System.Data.SqlClient.SqlAuthenticationMethod Authentication { get; set; }
    return:
      type: System.Data.SqlClient.SqlAuthenticationMethod
      description: "连接字符串的身份验证。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Authentication*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Clear
  id: Clear
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Clear()
  nameWithType: SqlConnectionStringBuilder.Clear()
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Clear()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "清除的内容<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>实例。"
  remarks: "<xref:System.Data.Common.DbConnectionStringBuilder.Clear%2A>方法中移除所有键/值对，从<xref:System.Data.SqlClient.SqlConnectionStringBuilder>，并重置所有对应的属性。</xref:System.Data.SqlClient.SqlConnectionStringBuilder> </xref:System.Data.Common.DbConnectionStringBuilder.Clear%2A> 这包括设置<xref:System.Data.Common.DbConnectionStringBuilder.Count%2A>属性为 0，并设置<xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A>属性为空字符串。</xref:System.Data.Common.DbConnectionStringBuilder.ConnectionString%2A> </xref:System.Data.Common.DbConnectionStringBuilder.Count%2A>"
  example:
  - "The following example demonstrates calling the <xref:System.Data.Common.DbConnectionStringBuilder.Clear%2A> method. This example populates the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> with some key/value pairs, and then calls the <xref:System.Data.Common.DbConnectionStringBuilder.Clear%2A> method and shows the results.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder.Clear#1](~/add/codesnippet/csharp/m-system.data.sqlclient._15_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder.Clear#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._15_1.vb)]"
  syntax:
    content: public override void Clear ();
    parameters: []
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting
  id: ColumnEncryptionSetting
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ColumnEncryptionSetting
  nameWithType: SqlConnectionStringBuilder.ColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取和设置连接字符串生成器的加密设置的列。"
  syntax:
    content: public System.Data.SqlClient.SqlConnectionColumnEncryptionSetting ColumnEncryptionSetting { get; set; }
    return:
      type: System.Data.SqlClient.SqlConnectionColumnEncryptionSetting
      description: "连接字符串生成器的列加密设置。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset
  id: ConnectionReset
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ConnectionReset
  nameWithType: SqlConnectionStringBuilder.ConnectionReset
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "已过时。 获取或设置一个布尔值，该值指示从连接池中绘制时是否重置连接。"
  remarks: "此属性与内的&quot;Connection Reset&quot;键相对应<xref:System.Data.SqlClient.SqlConnection>已从.NET Framework 版本 3.5 SP1 的连接字符串。</xref:System.Data.SqlClient.SqlConnection>"
  syntax:
    content: public bool ConnectionReset { get; set; }
    return:
      type: System.Boolean
      description: "ConnectionReset 属性或如果未不提供任何值，则 true 值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
  id: ConnectRetryCount
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ConnectRetryCount
  nameWithType: SqlConnectionStringBuilder.ConnectRetryCount
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "[在.NET Framework 4.5.1 和更高版本中受支持]      重新连接的次数之后尝试标识没有空闲连接失败。 这必须是介于 0 和 255 之间的整数。 默认值为 1。 设置为 0 以禁用重新连接在空闲连接失败。 <xref:System.ArgumentException>将则引发该异常的如果设置为的值超过允许的范围。</xref:System.ArgumentException>"
  syntax:
    content: public int ConnectRetryCount { get; set; }
    return:
      type: System.Int32
      description: "重新连接的次数之后尝试标识没有空闲连接失败。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
  id: ConnectRetryInterval
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ConnectRetryInterval
  nameWithType: SqlConnectionStringBuilder.ConnectRetryInterval
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "[在.NET Framework 4.5.1 和更高版本中受支持]      标识空闲连接失败之后每次重新连接尝试之间 （以秒为单位） 的时间量。 这必须是介于 1 和 60 之间的整数。 默认值为 10 秒。 <xref:System.ArgumentException>将则引发该异常的如果设置为的值超过允许的范围。</xref:System.ArgumentException>"
  syntax:
    content: public int ConnectRetryInterval { get; set; }
    return:
      type: System.Int32
      description: "标识空闲连接失败之后每次重新连接尝试之间 （以秒为单位） 的时间量。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
  id: ConnectTimeout
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ConnectTimeout
  nameWithType: SqlConnectionStringBuilder.ConnectTimeout
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置的总时间 （以秒为单位） 以等待在终止尝试并生成错误之前连接到服务器。"
  remarks: "此属性与&quot;Connect Timeout&quot;、&quot;connection timeout&quot;和连接字符串内的&quot;timeout&quot;键相对应。       打开到 Azure SQL 数据库连接时，设置为 30 秒的连接超时值。"
  example:
  - "The following example first displays the contents of a connection string that does not specify the \"Connect Timeout\" value, sets the ConnectTimeout property, and then displays the new connection string.  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.ConnectTimeout#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._3_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.ConnectTimeout#1](~/add/codesnippet/csharp/p-system.data.sqlclient._3_1.cs)]"
  syntax:
    content: public int ConnectTimeout { get; set; }
    return:
      type: System.Int32
      description: "15 秒，如果不提供任何值的 ConnectTimeout 属性的值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)
  id: ContainsKey(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ContainsKey(String)
  nameWithType: SqlConnectionStringBuilder.ContainsKey(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "确定是否<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>包含特定键。"
  remarks: "因为<xref:System.Data.SqlClient.SqlConnectionStringBuilder>包含固定大小的键/值对集合<xref:System.Data.Common.DbConnectionStringBuilder.ContainsKey%2A>方法只确定特定键名是否有效。</xref:System.Data.Common.DbConnectionStringBuilder.ContainsKey%2A> </xref:System.Data.SqlClient.SqlConnectionStringBuilder>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlConnectionStringBuilder> instance, sets some of its properties, and then tries to determine whether various keys exist within the object by calling the **ContainsKey** method.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder.ContainsKey#1](~/add/codesnippet/csharp/m-system.data.sqlclient._9_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder.ContainsKey#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._9_1.vb)]  \n  \n The example displays the following output in the console window:  \n  \n```  \nConnection string = Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=True  \nTrue  \nTrue  \nTrue  \nFalse  \n```"
  syntax:
    content: public override bool ContainsKey (string keyword);
    parameters:
    - id: keyword
      type: System.String
      description: "要查找中的键<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "true <xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>包含的元素，具有指定的键; 否则为 false。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyword</code>为 null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection
  id: ContextConnection
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ContextConnection
  nameWithType: SqlConnectionStringBuilder.ContextConnection
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个值，该值指示是否应该使客户端/服务器连接还是进程内连接到 SQL Server。"
  remarks: "此属性与连接字符串内的&quot;Context Connection&quot;键相对应。      1> [!NOTE]&1;><xref:System.Data.SqlClient.SqlConnection.DataSource%2A>属性返回`null`如果该连接字符串，为<xref:System.Data.SqlClient.SqlConnection>是&quot;上下文连接 = true&quot;。</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlConnection.DataSource%2A>"
  syntax:
    content: public bool ContextConnection { get; set; }
    return:
      type: System.Boolean
      description: "ContextConnection 属性的值或<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
  id: CurrentLanguage
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: CurrentLanguage
  nameWithType: SqlConnectionStringBuilder.CurrentLanguage
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置 SQL Server 语言记录名称。"
  remarks: "此属性与连接字符串内的&quot;Current Language&quot;和&quot;语言&quot;键相对应。"
  syntax:
    content: public string CurrentLanguage { get; set; }
    return:
      type: System.String
      description: "CurrentLanguage 属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果不提供任何值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
  id: DataSource
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: DataSource
  nameWithType: SqlConnectionStringBuilder.DataSource
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置要连接到的 SQL Server 实例的名称或网络地址。"
  remarks: "此属性与&quot;数据源&quot;、&quot;server&quot;、&quot;address&quot;、&quot;addr&quot;和连接字符串内的&quot;network address&quot;键相对应。 无论哪个这些值已提供提供的连接字符串内，连接字符串创建的`SqlConnectionStringBuilder`将使用的已知的&quot;数据源&quot;密钥。"
  example:
  - "The following example demonstrates that the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> class converts synonyms for the \"Data Source\" connection string key into the well-known key:  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.DataSource#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._51_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.DataSource#1](~/add/codesnippet/csharp/p-system.data.sqlclient._51_1.cs)]"
  syntax:
    content: public string DataSource { get; set; }
    return:
      type: System.String
      description: "数据源属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
  id: Encrypt
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Encrypt
  nameWithType: SqlConnectionStringBuilder.Encrypt
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个布尔值，该值指示 SQL Server 是否在服务器安装了证书，客户端和服务器之间发送的所有数据使用 SSL 加密。"
  remarks: "此属性与连接字符串内的&quot;Encrypt&quot;键相对应。"
  syntax:
    content: public bool Encrypt { get; set; }
    return:
      type: System.Boolean
      description: "加密属性的值或<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Enlist
  id: Enlist
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Enlist
  nameWithType: SqlConnectionStringBuilder.Enlist
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Enlist
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个布尔值，该值指示 SQL Server 连接池程序是否自动登记创建线程的当前事务上下文中的连接。"
  remarks: "此属性与连接字符串内的&quot;Enlist&quot;键相对应。"
  syntax:
    content: public bool Enlist { get; set; }
    return:
      type: System.Boolean
      description: "值的 Enlist 属性中，或<xref uid=&quot;langword_csharp_true &quot; name=&quot;true &quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Enlist*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
  id: FailoverPartner
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: FailoverPartner
  nameWithType: SqlConnectionStringBuilder.FailoverPartner
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置的名称或要连接到主服务器停机时的伙伴服务器的地址。"
  syntax:
    content: public string FailoverPartner { get; set; }
    return:
      type: System.String
      description: "FailoverPartner 属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.GetProperties(System.Collections.Hashtable)
  id: GetProperties(System.Collections.Hashtable)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: GetProperties(Hashtable)
  nameWithType: SqlConnectionStringBuilder.GetProperties(Hashtable)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.GetProperties(Hashtable)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void GetProperties (System.Collections.Hashtable propertyDescriptors);
    parameters:
    - id: propertyDescriptors
      type: System.Collections.Hashtable
      description: "要添加。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
  id: InitialCatalog
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: InitialCatalog
  nameWithType: SqlConnectionStringBuilder.InitialCatalog
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置与连接关联的数据库的名称。"
  remarks: "此属性与连接字符串内的&quot;初始目录&quot;和&quot;数据库&quot;键相对应。"
  example:
  - "The following example creates a simple connection string and then uses the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> class to add the name of the database to the connection string. The code displays the contents of the InitialCatalog property, just to verify that the class was able to convert from the synonym (\"Database\") to the appropriate property value.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder.InitialCatalog#1](~/add/codesnippet/csharp/p-system.data.sqlclient._46_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder.InitialCatalog#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._46_1.vb)]"
  syntax:
    content: public string InitialCatalog { get; set; }
    return:
      type: System.String
      description: "InitialCatalog 属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
  id: IntegratedSecurity
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: IntegratedSecurity
  nameWithType: SqlConnectionStringBuilder.IntegratedSecurity
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个布尔值，该值指示是否在连接中指定用户 ID 和密码 (时<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>) 或者是否使用当前的 Windows 帐户凭据进行身份验证 (时<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>)。"
  remarks: "此属性与连接字符串内的&quot;集成安全性&quot;和&quot;trusted_connection&quot;键相对应。"
  example:
  - "The following example converts an existing connection string from using SQL Server Authentication to using integrated security. The example does its work by removing the user name and password from the connection string and then setting the IntegratedSecurity property of the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> object.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how <xref:System.Data.SqlClient.SqlConnectionStringBuilder> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder.IntegratedSecurity#1](~/add/codesnippet/csharp/p-system.data.sqlclient._35_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder.IntegratedSecurity#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._35_1.vb)]"
  syntax:
    content: public bool IntegratedSecurity { get; set; }
    return:
      type: System.Boolean
      description: "IntegratedSecurity 属性的值或<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize
  id: IsFixedSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: SqlConnectionStringBuilder.IsFixedSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>具有固定的大小。"
  syntax:
    content: public override bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>在所有情况下，因为<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>提供固定大小的键/值对的集合。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
  id: Item(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Item(String)
  nameWithType: SqlConnectionStringBuilder.Item(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Item(String)
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置与指定键关联的值。 在 C# 中，此属性是索引器。"
  remarks: "因为<xref:System.Data.SqlClient.SqlConnectionStringBuilder>包含固定大小的字典，尝试添加不在字典中存在的键将引发一种<xref:System.Collections.Generic.KeyNotFoundException>。</xref:System.Collections.Generic.KeyNotFoundException> </xref:System.Data.SqlClient.SqlConnectionStringBuilder>"
  example:
  - "The following code, in a console application, creates a new <xref:System.Data.SqlClient.SqlConnectionStringBuilder> and adds key/value pairs to its connection string, using the Item property.  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.Item#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._4_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.Item#1](~/add/codesnippet/csharp/p-system.data.sqlclient._4_1.cs)]"
  syntax:
    content: public override object this[string keyword] { get; set; }
    parameters:
    - id: keyword
      type: System.String
      description: "要获取或设置项的键。"
    return:
      type: System.Object
      description: "与指定键关联的值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyword</code>为空引用 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)。"
  - type: System.Collections.Generic.KeyNotFoundException
    commentId: T:System.Collections.Generic.KeyNotFoundException
    description: "尝试添加不在可用键内不存在的键。"
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "连接字符串中的值无效 （具体而言，一个布尔值或数值的值，但未提供）。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  id: Keys
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Keys
  nameWithType: SqlConnectionStringBuilder.Keys
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取<xref:System.Collections.ICollection>包含中的键<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>。</xref:System.Collections.ICollection>"
  remarks: "中的值的顺序<xref:System.Collections.ICollection>未指定，但它是中的关联值顺序相同<xref:System.Collections.ICollection>返回<xref:System.Data.SqlClient.SqlConnectionStringBuilder.Values%2A>属性。</xref:System.Data.SqlClient.SqlConnectionStringBuilder.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>"
  example:
  - "The following console application example creates a new <xref:System.Data.SqlClient.SqlConnectionStringBuilder>. The code loops through the <xref:System.Collections.ICollection> returned by the Keys property displaying the key/value pairs.  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.Keys#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._0_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.Keys#1](~/add/codesnippet/csharp/p-system.data.sqlclient._0_1.cs)]"
  syntax:
    content: public override System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>包含中的键<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
  id: LoadBalanceTimeout
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: LoadBalanceTimeout
  nameWithType: SqlConnectionStringBuilder.LoadBalanceTimeout
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置以秒为单位，连接被销毁前在连接池中存活的最短的时间。"
  remarks: "此属性与&quot;Load Balance Timeout&quot;和连接字符串内的&quot;connection lifetime&quot;键相对应。"
  syntax:
    content: public int LoadBalanceTimeout { get; set; }
    return:
      type: System.Int32
      description: "LoadBalanceTimeout 属性或如果未提供任何为 0 的值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
  id: MaxPoolSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: MaxPoolSize
  nameWithType: SqlConnectionStringBuilder.MaxPoolSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置连接对于此特定连接字符串连接池中允许的最大数目。"
  remarks: "此属性与连接字符串内的&quot;Max Pool Size&quot;键相对应。"
  syntax:
    content: public int MaxPoolSize { get; set; }
    return:
      type: System.Int32
      description: "MaxPoolSize 属性或如果未提供任何 100 的值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
  id: MinPoolSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: MinPoolSize
  nameWithType: SqlConnectionStringBuilder.MinPoolSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置最小针对此特定连接字符串连接池中允许的连接数。"
  remarks: "此属性与连接字符串内的&quot;Min Pool Size&quot;键相对应。"
  syntax:
    content: public int MinPoolSize { get; set; }
    return:
      type: System.Int32
      description: "MinPoolSize 属性或如果未提供任何为 0 的值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
  id: MultipleActiveResultSets
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: MultipleActiveResultSets
  nameWithType: SqlConnectionStringBuilder.MultipleActiveResultSets
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "为 true 时，应用程序可以维护多个活动结果集 (MARS)。 为 false 时，应用程序必须处理或取消某一批中的所有结果集，才可以在该连接上执行任何其他批次。       有关详细信息，请参阅[多个活动结果集 (MARS)](http://msdn.microsoft.com//library/cfa084cz.aspx)。"
  remarks: "此属性与连接字符串内的&quot;MultipleActiveResultSets&quot;键相对应。"
  example:
  - "The following example explicitly disables the Multiple Active Result Sets feature.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder.MARS#1](~/add/codesnippet/csharp/p-system.data.sqlclient._53_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder.MARS#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._53_1.vb)]"
  syntax:
    content: public bool MultipleActiveResultSets { get; set; }
    return:
      type: System.Boolean
      description: "MultipleActiveResultSets 属性的值或<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
  id: MultiSubnetFailover
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: MultiSubnetFailover
  nameWithType: SqlConnectionStringBuilder.MultiSubnetFailover
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "如果你的应用程序连接到 AlwaysOn 可用性组 (AG) 在不同子网上，设置 MultiSubnetFailover = true 会加快检测的以及到 （当前） 活动服务器的连接。 有关 Alwayson 可用性组的 SqlClient 支持的详细信息，请参阅[对高可用性、 灾难恢复的 SqlClient 支持](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool MultiSubnetFailover { get; set; }
    return:
      type: System.Boolean
      description: "返回<xref:System.Boolean>，该值指示该属性的当前值。</xref:System.Boolean>"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary
  id: NetworkLibrary
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: NetworkLibrary
  nameWithType: SqlConnectionStringBuilder.NetworkLibrary
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个字符串，包含用于建立与 SQL Server 的连接的网络库的名称。"
  remarks: "此属性与&quot;Network Library&quot;、&quot;网络&quot;和连接字符串内的&quot;net&quot;键相对应。       支持此属性的值包括 dbnmpntw （命名管道）、 dbmsrpcn （多协议）、 dbmsadsn (AppleTalk)、 dbmsgnet (VIA)、 dbmslpcn （共享内存） 和 dbmsspxn (IPX/SPX) 和 dbmssocn (TCP/IP)。 必须连接到在系统上安装的相应网络 DLL。 如果未指定网络，并且使用本地服务器 (例如，&quot;。&quot;或&quot;(local)&quot;)，使用共享内存。"
  syntax:
    content: public string NetworkLibrary { get; set; }
    return:
      type: System.String
      description: "NetworkLibrary 属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
  id: PacketSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: PacketSize
  nameWithType: SqlConnectionStringBuilder.PacketSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置以字节为单位的用来与 SQL Server 的实例通信的网络数据包的大小。"
  remarks: "此属性与连接字符串内的&quot;Packet Size&quot;键相对应。"
  syntax:
    content: public int PacketSize { get; set; }
    return:
      type: System.Int32
      description: "数据包大小属性或 8000 如果未提供任何值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Password
  id: Password
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Password
  nameWithType: SqlConnectionStringBuilder.Password
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Password
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置 SQL Server 帐户的密码。"
  remarks: "此属性与连接字符串内的&quot;密码&quot;和&quot;pwd&quot;键相对应。       如果尚未设置密码和检索值，则返回值是<xref:System.String>.</xref:System.String> 要重置连接字符串的密码，向传递 null 项属性。"
  example:
  - "The following example shows how to set Password.  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.Password.2#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._40_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.Password.2#1](~/add/codesnippet/csharp/p-system.data.sqlclient._40_1.cs)]"
  syntax:
    content: public string Password { get; set; }
    return:
      type: System.String
      description: "密码属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Password*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "密码被错误地设置为 null。  请参阅下面的代码示例。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
  id: PersistSecurityInfo
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: PersistSecurityInfo
  nameWithType: SqlConnectionStringBuilder.PersistSecurityInfo
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个布尔值，该值指示是否安全敏感信息，如密码，不返回作为连接的一部分是否连接是打开的或者一直处于打开状态。"
  remarks: "此属性与连接字符串内的&quot;Persist Security Info&quot;和&quot;persistsecurityinfo&quot;键相对应。"
  syntax:
    content: public bool PersistSecurityInfo { get; set; }
    return:
      type: System.Boolean
      description: "PersistSecurityInfo 属性的值或<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod
  id: PoolBlockingPeriod
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: PoolBlockingPeriod
  nameWithType: SqlConnectionStringBuilder.PoolBlockingPeriod
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "连接池的阻塞时间段的行为。"
  remarks: "当启用连接池发生超时错误或其他登录错误，将引发异常并且后续连接尝试将失败接下来的五秒内，&quot;阻塞期&quot;。 如果应用程序尝试在阻塞期内进行连接，则将再次引发第一个异常。 阻塞期结束后的后续失败将导致新的阻塞期，则两次长达前一阻塞期，最大为一分钟。       尝试连接到 Azure SQL 数据库可能因暂时性错误，它通常在几秒内恢复。 但是，与连接池阻止时间段的行为，你可能不能用于广泛段访问您的数据库，即使数据库可用。 这是需要快速呈现应用程序尤其存在问题。 **PoolBlockingPeriod**使您能够选择最适合你的应用程序阻塞期。 请参阅[PoolBlockingPeriod 枚举](~/add/includes/ajax-current-ext-md.md)有关可用设置。"
  syntax:
    content: public System.Data.SqlClient.PoolBlockingPeriod PoolBlockingPeriod { get; set; }
    return:
      type: System.Data.SqlClient.PoolBlockingPeriod
      description: "可用的阻塞期设置。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
  id: Pooling
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Pooling
  nameWithType: SqlConnectionStringBuilder.Pooling
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个布尔值，该值指示是否将汇还是显式打开请求连接时每次连接。"
  remarks: "此属性与连接字符串内的&quot;Pooling&quot;键相对应。"
  syntax:
    content: public bool Pooling { get; set; }
    return:
      type: System.Boolean
      description: "池属性中的值或<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)
  id: Remove(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Remove(String)
  nameWithType: SqlConnectionStringBuilder.Remove(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Remove(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "具有指定键中移除的项<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>实例。"
  remarks: "因为**删除**方法返回一个值，指示其是否成功，它不需要查找键在尝试删除的键/值对从之前<xref:System.Data.SqlClient.SqlConnectionStringBuilder>实例。</xref:System.Data.SqlClient.SqlConnectionStringBuilder> 因为<xref:System.Data.SqlClient.SqlConnectionStringBuilder>保持固定大小的键/值对，调用删除方法只需重置回其默认值的键/值对的值的集合。</xref:System.Data.SqlClient.SqlConnectionStringBuilder>       因为键的集合支持<xref:System.Data.SqlClient.SqlConnectionStringBuilder>是固定的在集合中的每个项都具有已知的默认值。</xref:System.Data.SqlClient.SqlConnectionStringBuilder> 下表列出密钥和值，每个<xref:System.Data.SqlClient.SqlConnectionStringBuilder>首次初始化，或在调用删除方法。</xref:System.Data.SqlClient.SqlConnectionStringBuilder>      |密钥 |默认值 |  |---------|-------------------|  |应用程序名称 |&quot;。Net SqlClient 数据提供程序&quot;|  |异步处理 |False |  |AttachDBFilename |空字符串 |  |连接超时 |&15; |  |上下文连接 |False |  |当前语言 |空字符串 |  |数据源 |空字符串 |  |加密 |False |  |登记 |True |  |故障转移伙伴 |空字符串 |  |初始目录 |空字符串 |  |集成安全性 |False |  |负载平衡超时 |&0; |  |最大池大小 |&100; |  |最小池大小 |&0; |  |MultipleActiveResultSets |False |  |网络库 |空字符串 |  |数据包大小 |&8000; |  |密码 |空字符串 |  |持久性安全信息 |False |  |池 |True |  |复制 |False |  |事务绑定 |隐式取消绑定 |  |用户 ID |空字符串 |  |用户实例 |False |  |工作站 ID |空字符串 |"
  example:
  - "The following example converts an existing connection string from using Windows Authentication to using integrated security. The example works by removing the user name and password from the connection string, and then setting the <xref:System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity%2A> property of the <xref:System.Data.SqlClient.SqlConnectionStringBuilder> object.  \n  \n> [!NOTE]\n>  This example includes a password to demonstrate how <xref:System.Data.SqlClient.SqlConnectionStringBuilder> works with connection strings. In your applications, we recommend that you use Windows Authentication. If you must use a password, do not include a hard-coded password in your application.  \n  \n [!code-cs[DataWorks SqlConnectionStringBuilder.Remove#1](~/add/codesnippet/csharp/m-system.data.sqlclient._7_1.cs)]\n [!code-vb[DataWorks SqlConnectionStringBuilder.Remove#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._7_1.vb)]  \n  \n The example displays the following text in the console window:  \n  \n```  \nOriginal: Data Source=(local);Initial Catalog=AdventureWorks;User ID=ab;Password= a1Pass@@11  \nModified: Data Source=(local);Initial Catalog=AdventureWorks;Integrated Security=True  \nDatabase = AdventureWorks  \n```"
  syntax:
    content: public override bool Remove (string keyword);
    parameters:
    - id: keyword
      type: System.String
      description: "在此连接字符串移除的键/值对的键<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该密钥的连接字符串中存在并被移除，则<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果该键不存在。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyword</code>为 null (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Replication
  id: Replication
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Replication
  nameWithType: SqlConnectionStringBuilder.Replication
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Replication
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个布尔值，该值指示是否使用连接支持复制。"
  remarks: "此属性与连接字符串内的&quot;复制&quot;键相对应。"
  syntax:
    content: public bool Replication { get; set; }
    return:
      type: System.Boolean
      description: "复制属性，或 false，如果未提供任何值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Replication*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)
  id: ShouldSerialize(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: ShouldSerialize(String)
  nameWithType: SqlConnectionStringBuilder.ShouldSerialize(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "该值指示指定的键是否存在于此<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>实例。"
  remarks: "此方法的行为相同与<xref:System.Data.Common.DbConnectionStringBuilder.ContainsKey%2A>方法。</xref:System.Data.Common.DbConnectionStringBuilder.ContainsKey%2A>"
  syntax:
    content: public override bool ShouldSerialize (string keyword);
    parameters:
    - id: keyword
      type: System.String
      description: "要查找中的键<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;></xref>包含一个具有指定的项键; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding
  id: TransactionBinding
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: TransactionBinding
  nameWithType: SqlConnectionStringBuilder.TransactionBinding
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个字符串值，该值表示连接如何保持与登记的关联<xref uid=&quot;langword_csharp_System.Transactions&quot; name=&quot;System.Transactions&quot; href=&quot;&quot;></xref>事务。"
  remarks: "中的<xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>控制如何<xref:System.Data.SqlClient.SqlConnection>绑定到登记的<xref:System.Transactions.Transaction>.</xref:System.Transactions.Transaction></xref:System.Data.SqlClient.SqlConnection></xref:System.Data.SqlClient.SqlConnection.ConnectionString%2A>的事务绑定关键字       下表显示 TransactionBinding 属性的可能值: |值 |说明 |  |-----------|-----------------|  |隐式取消绑定 |默认值。 使连接与事务结束时分离。 分离后，连接上的其他请求将在自动模式下执行。 <xref:System.Transactions.Transaction.Current%2A>执行请求时事务处于活动状态时不会检查属性。</xref:System.Transactions.Transaction.Current%2A> 事务结束后，在自动模式下执行其他请求。 |  |显式取消绑定 |原因连接保持附加到事务直到连接已关闭，或者直到<xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A>使用调用`null`(`Nothing`在 Visual Basic 中) 值。</xref:System.Data.SqlClient.SqlConnection.EnlistTransaction%2A> <xref:System.InvalidOperationException>如果引发<xref:System.Transactions.Transaction.Current%2A>不是登记的事务或者登记的事务未处于活动状态。</xref:System.Transactions.Transaction.Current%2A> </xref:System.InvalidOperationException> 此行为强制实施所需的严格范围限定规则<xref:System.Transactions.TransactionScope>支持。 |</xref:System.Transactions.TransactionScope>"
  syntax:
    content: public string TransactionBinding { get; set; }
    return:
      type: System.String
      description: "TransactionBinding 属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TransparentNetworkIPResolution
  id: TransparentNetworkIPResolution
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: TransparentNetworkIPResolution
  nameWithType: SqlConnectionStringBuilder.TransparentNetworkIPResolution
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TransparentNetworkIPResolution
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个布尔值。"
  syntax:
    content: public bool TransparentNetworkIPResolution { get; set; }
    return:
      type: System.Boolean
      description: "一个布尔值。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.TransparentNetworkIPResolution*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
  id: TrustServerCertificate
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: TrustServerCertificate
  nameWithType: SqlConnectionStringBuilder.TrustServerCertificate
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个值，指示在跳过用于验证信任的证书链遍历时是否将加密信道。"
  remarks: "当`TrustServerCertificate`设置为`true`，传输层将使用 SSL 来加密通道并跳过用于验证信任的证书链。 如果`TrustServerCertificate`设置为`true`和打开加密时，将使用服务器上指定的加密级别即使`Encrypt`设置为`false`。 否则连接将会失败。       有关详细信息，请参阅&quot;加密层次结构&quot;和&quot;使用未经验证的加密&quot;SQL Server 联机丛书中。"
  syntax:
    content: public bool TrustServerCertificate { get; set; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref>. Recognized values are <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_yes&quot; name=&quot;yes&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_no&quot; name=&quot;no&quot; href=&quot;&quot;></xref>."
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  id: TryGetValue(System.String,System.Object@)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: TryGetValue(String,Object)
  nameWithType: SqlConnectionStringBuilder.TryGetValue(String,Object)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(String,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "检索与提供的键从此相对应的值<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>。"
  remarks: "TryGetValue 方法允许开发人员安全地检索的值从<xref:System.Data.SqlClient.SqlConnectionStringBuilder>而无需验证提供的键名是否为有效的键名。</xref:System.Data.SqlClient.SqlConnectionStringBuilder> 因为**TryGetValue**不会引发异常时调用它，传递中不存在的键，则不需要查找键检索其值之前。  调用**TryGetValue**与不存在的键将值为 null (`Nothing`在 Visual Basic 中) 中`value`参数。"
  example:
  - "The following example demonstrates the behavior of the **TryGetValue** method.  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.TryGetValue#1](~/add/codesnippet/visualbasic/25aa2e92-0892-4821-a220-_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.TryGetValue#1](~/add/codesnippet/csharp/25aa2e92-0892-4821-a220-_1.cs)]  \n  \n The sample displays the following results:  \n  \n```  \nData Source=(local)  \nTrusted_Connection=True  \nUnable to retrieve value for 'InvalidKey'  \nUnable to retrieve value for null key.  \n```"
  syntax:
    content: public override bool TryGetValue (string keyword, out object value);
    parameters:
    - id: keyword
      type: System.String
      description: "要检索的项的键。"
    - id: value
      type: System.Object
      description: "与对应的值`keyword.`"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> keyword </code>在连接字符串中找到; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>keyword</code>包含一个 null 值 (<xref uid=&quot;langword_csharp_Nothing&quot; name=&quot;Nothing&quot; href=&quot;&quot;> </xref>在 Visual Basic 中)。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
  id: TypeSystemVersion
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: TypeSystemVersion
  nameWithType: SqlConnectionStringBuilder.TypeSystemVersion
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个字符串值，指示所需的类型系统应用程序。"
  remarks: "`TypeSystemVersion`属性可以用于指定的下级版本[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]编写针对该版本的应用程序。 这样就避免了不兼容的类型中的较新版本的可能问题[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]，可能会导致应用程序中断。"
  syntax:
    content: public string TypeSystemVersion { get; set; }
    return:
      type: System.String
      description: "下表显示 TypeSystemVersion 属性的可能值︰       <table><thead><tr><th> 值       </th><th> 说明       </th></tr></thead><tbody><tr><td> [!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)] 2005       </td><td> 使用[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]2005年类型系统。 有关 ADO.NET 最新版本不进行任何转换。       </td></tr><tr><td> SQL Server 2008       </td><td> 使用 SQL Server 2008 类型系统。       </td></tr><tr><td> 最新       </td><td> 不是此客户端-服务器对能够处理，请使用最新版本。 这将自动继续升级的客户端和服务器组件。       </td></tr></tbody></table>"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserID
  id: UserID
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: UserID
  nameWithType: SqlConnectionStringBuilder.UserID
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.UserID
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置要连接到 SQL Server 时要使用的用户 ID。"
  remarks: "此属性与连接字符串内的&quot;用户 ID&quot;、&quot;用户&quot;和&quot;uid&quot;键相对应。"
  syntax:
    content: public string UserID { get; set; }
    return:
      type: System.String
      description: "UserID 属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.UserID*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
  id: UserInstance
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: UserInstance
  nameWithType: SqlConnectionStringBuilder.UserInstance
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置一个值，该值指示是否将重定向到运行时启动的实例的调用方帐户之下运行并且从默认 SQL Server Express 实例的连接。"
  remarks: "此属性与连接字符串内的&quot;User Instance&quot;键相对应。      1> [!NOTE]&1;> 时仅使用此功能[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]Express Edition。 用户实例的详细信息，请参阅[SQL Server Express 用户实例](~/add/includes/ajax-current-ext-md.md)和&quot;用户实例的非管理员&quot;中[!INCLUDE[ssNoVersion](~/add/includes/ssnoversion-md.md)]联机丛书。"
  syntax:
    content: public bool UserInstance { get; set; }
    return:
      type: System.Boolean
      description: "UserInstance 属性的值或<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Values
  id: Values
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: Values
  nameWithType: SqlConnectionStringBuilder.Values
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Values
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取<xref:System.Collections.ICollection>包含中的值<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>。</xref:System.Collections.ICollection>"
  remarks: "中的值的顺序<xref:System.Collections.ICollection>未指定，但它是中的关联键顺序相同<xref:System.Collections.ICollection>返回<xref:System.Data.SqlClient.SqlConnectionStringBuilder.Keys%2A>属性。</xref:System.Data.SqlClient.SqlConnectionStringBuilder.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> 因为每个实例<xref:System.Data.SqlClient.SqlConnectionStringBuilder>始终包含相同的组固定的密钥，属性始终返回对应的值与一组固定的中键的顺序相同键的值。</xref:System.Data.SqlClient.SqlConnectionStringBuilder>"
  example:
  - "The following example first creates a new <xref:System.Data.SqlClient.SqlConnectionStringBuilder>, and then iterates through all the values within the object.  \n  \n [!code-vb[DataWorks SqlConnectionStringBuilder.Values#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._29_1.vb)]\n [!code-cs[DataWorks SqlConnectionStringBuilder.Values#1](~/add/codesnippet/csharp/p-system.data.sqlclient._29_1.cs)]"
  syntax:
    content: public override System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>包含中的值<xref href=&quot;System.Data.SqlClient.SqlConnectionStringBuilder&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.Values*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
  id: WorkstationID
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  langs:
  - csharp
  name: WorkstationID
  nameWithType: SqlConnectionStringBuilder.WorkstationID
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置连接到 SQL Server 的工作站的名称。"
  remarks: "此属性与连接字符串内的&quot;Workstation ID&quot;和&quot;wsid&quot;键相对应。"
  syntax:
    content: public string WorkstationID { get; set; }
    return:
      type: System.String
      description: "WorkstationID 属性的值或<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;></xref>如果未提供。"
  overload: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "若要将值设置为 null，使用<xref href=&quot;System.DBNull.Value&quot;> </xref>。"
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnectionStringBuilder
  isExternal: false
  name: System.Data.Common.DbConnectionStringBuilder
- uid: System.Collections.Generic.KeyNotFoundException
  isExternal: true
  name: System.Collections.Generic.KeyNotFoundException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: SqlConnectionStringBuilder()
  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder()
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.SqlConnectionStringBuilder()
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: SqlConnectionStringBuilder(String)
  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.SqlConnectionStringBuilder(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ApplicationIntent
  nameWithType: SqlConnectionStringBuilder.ApplicationIntent
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent
- uid: System.Data.SqlClient.ApplicationIntent
  parent: System.Data.SqlClient
  isExternal: false
  name: ApplicationIntent
  nameWithType: ApplicationIntent
  fullName: System.Data.SqlClient.ApplicationIntent
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ApplicationName
  nameWithType: SqlConnectionStringBuilder.ApplicationName
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: AsynchronousProcessing
  nameWithType: SqlConnectionStringBuilder.AsynchronousProcessing
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: AttachDBFilename
  nameWithType: SqlConnectionStringBuilder.AttachDBFilename
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Authentication
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Authentication
  nameWithType: SqlConnectionStringBuilder.Authentication
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Authentication
- uid: System.Data.SqlClient.SqlAuthenticationMethod
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlAuthenticationMethod
  nameWithType: SqlAuthenticationMethod
  fullName: System.Data.SqlClient.SqlAuthenticationMethod
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Clear
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Clear()
  nameWithType: SqlConnectionStringBuilder.Clear()
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Clear()
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ColumnEncryptionSetting
  nameWithType: SqlConnectionStringBuilder.ColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlConnectionColumnEncryptionSetting
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnectionColumnEncryptionSetting
  nameWithType: SqlConnectionColumnEncryptionSetting
  fullName: System.Data.SqlClient.SqlConnectionColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ConnectionReset
  nameWithType: SqlConnectionStringBuilder.ConnectionReset
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ConnectRetryCount
  nameWithType: SqlConnectionStringBuilder.ConnectRetryCount
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ConnectRetryInterval
  nameWithType: SqlConnectionStringBuilder.ConnectRetryInterval
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ConnectTimeout
  nameWithType: SqlConnectionStringBuilder.ConnectTimeout
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ContainsKey(String)
  nameWithType: SqlConnectionStringBuilder.ContainsKey(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey(String)
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ContextConnection
  nameWithType: SqlConnectionStringBuilder.ContextConnection
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: CurrentLanguage
  nameWithType: SqlConnectionStringBuilder.CurrentLanguage
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: DataSource
  nameWithType: SqlConnectionStringBuilder.DataSource
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Encrypt
  nameWithType: SqlConnectionStringBuilder.Encrypt
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Enlist
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Enlist
  nameWithType: SqlConnectionStringBuilder.Enlist
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Enlist
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: FailoverPartner
  nameWithType: SqlConnectionStringBuilder.FailoverPartner
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.GetProperties(System.Collections.Hashtable)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: GetProperties(Hashtable)
  nameWithType: SqlConnectionStringBuilder.GetProperties(Hashtable)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.GetProperties(Hashtable)
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: InitialCatalog
  nameWithType: SqlConnectionStringBuilder.InitialCatalog
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: IntegratedSecurity
  nameWithType: SqlConnectionStringBuilder.IntegratedSecurity
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: IsFixedSize
  nameWithType: SqlConnectionStringBuilder.IsFixedSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Item(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Item(String)
  nameWithType: SqlConnectionStringBuilder.Item(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Item(String)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Keys
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Keys
  nameWithType: SqlConnectionStringBuilder.Keys
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: LoadBalanceTimeout
  nameWithType: SqlConnectionStringBuilder.LoadBalanceTimeout
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: MaxPoolSize
  nameWithType: SqlConnectionStringBuilder.MaxPoolSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: MinPoolSize
  nameWithType: SqlConnectionStringBuilder.MinPoolSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: MultipleActiveResultSets
  nameWithType: SqlConnectionStringBuilder.MultipleActiveResultSets
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: MultiSubnetFailover
  nameWithType: SqlConnectionStringBuilder.MultiSubnetFailover
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: NetworkLibrary
  nameWithType: SqlConnectionStringBuilder.NetworkLibrary
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnectionStringBuilder.PacketSize
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Password
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Password
  nameWithType: SqlConnectionStringBuilder.Password
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Password
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: PersistSecurityInfo
  nameWithType: SqlConnectionStringBuilder.PersistSecurityInfo
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: PoolBlockingPeriod
  nameWithType: SqlConnectionStringBuilder.PoolBlockingPeriod
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod
- uid: System.Data.SqlClient.PoolBlockingPeriod
  parent: System.Data.SqlClient
  isExternal: false
  name: PoolBlockingPeriod
  nameWithType: PoolBlockingPeriod
  fullName: System.Data.SqlClient.PoolBlockingPeriod
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Pooling
  nameWithType: SqlConnectionStringBuilder.Pooling
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Remove(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Remove(String)
  nameWithType: SqlConnectionStringBuilder.Remove(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Remove(String)
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Replication
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Replication
  nameWithType: SqlConnectionStringBuilder.Replication
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Replication
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(System.String)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ShouldSerialize(String)
  nameWithType: SqlConnectionStringBuilder.ShouldSerialize(String)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize(String)
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TransactionBinding
  nameWithType: SqlConnectionStringBuilder.TransactionBinding
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TransparentNetworkIPResolution
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TransparentNetworkIPResolution
  nameWithType: SqlConnectionStringBuilder.TransparentNetworkIPResolution
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TransparentNetworkIPResolution
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TrustServerCertificate
  nameWithType: SqlConnectionStringBuilder.TrustServerCertificate
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(System.String,System.Object@)
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TryGetValue(String,Object)
  nameWithType: SqlConnectionStringBuilder.TryGetValue(String,Object)
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue(String,Object)
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TypeSystemVersion
  nameWithType: SqlConnectionStringBuilder.TypeSystemVersion
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserID
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: UserID
  nameWithType: SqlConnectionStringBuilder.UserID
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.UserID
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: UserInstance
  nameWithType: SqlConnectionStringBuilder.UserInstance
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Values
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Values
  nameWithType: SqlConnectionStringBuilder.Values
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.Values
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: WorkstationID
  nameWithType: SqlConnectionStringBuilder.WorkstationID
  fullName: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.#ctor*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: SqlConnectionStringBuilder
  nameWithType: SqlConnectionStringBuilder.SqlConnectionStringBuilder
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationIntent*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ApplicationIntent
  nameWithType: SqlConnectionStringBuilder.ApplicationIntent
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ApplicationName*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ApplicationName
  nameWithType: SqlConnectionStringBuilder.ApplicationName
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.AsynchronousProcessing*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: AsynchronousProcessing
  nameWithType: SqlConnectionStringBuilder.AsynchronousProcessing
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.AttachDBFilename*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: AttachDBFilename
  nameWithType: SqlConnectionStringBuilder.AttachDBFilename
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Authentication*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Authentication
  nameWithType: SqlConnectionStringBuilder.Authentication
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Clear*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Clear
  nameWithType: SqlConnectionStringBuilder.Clear
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ColumnEncryptionSetting*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ColumnEncryptionSetting
  nameWithType: SqlConnectionStringBuilder.ColumnEncryptionSetting
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectionReset*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ConnectionReset
  nameWithType: SqlConnectionStringBuilder.ConnectionReset
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryCount*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ConnectRetryCount
  nameWithType: SqlConnectionStringBuilder.ConnectRetryCount
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectRetryInterval*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ConnectRetryInterval
  nameWithType: SqlConnectionStringBuilder.ConnectRetryInterval
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ConnectTimeout*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ConnectTimeout
  nameWithType: SqlConnectionStringBuilder.ConnectTimeout
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ContainsKey*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ContainsKey
  nameWithType: SqlConnectionStringBuilder.ContainsKey
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ContextConnection*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ContextConnection
  nameWithType: SqlConnectionStringBuilder.ContextConnection
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.CurrentLanguage*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: CurrentLanguage
  nameWithType: SqlConnectionStringBuilder.CurrentLanguage
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.DataSource*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: DataSource
  nameWithType: SqlConnectionStringBuilder.DataSource
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Encrypt*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Encrypt
  nameWithType: SqlConnectionStringBuilder.Encrypt
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Enlist*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Enlist
  nameWithType: SqlConnectionStringBuilder.Enlist
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.FailoverPartner*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: FailoverPartner
  nameWithType: SqlConnectionStringBuilder.FailoverPartner
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.GetProperties*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: GetProperties
  nameWithType: SqlConnectionStringBuilder.GetProperties
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.InitialCatalog*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: InitialCatalog
  nameWithType: SqlConnectionStringBuilder.InitialCatalog
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.IntegratedSecurity*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: IntegratedSecurity
  nameWithType: SqlConnectionStringBuilder.IntegratedSecurity
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.IsFixedSize*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: IsFixedSize
  nameWithType: SqlConnectionStringBuilder.IsFixedSize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Item*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Item
  nameWithType: SqlConnectionStringBuilder.Item
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Keys*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Keys
  nameWithType: SqlConnectionStringBuilder.Keys
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.LoadBalanceTimeout*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: LoadBalanceTimeout
  nameWithType: SqlConnectionStringBuilder.LoadBalanceTimeout
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MaxPoolSize*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: MaxPoolSize
  nameWithType: SqlConnectionStringBuilder.MaxPoolSize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MinPoolSize*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: MinPoolSize
  nameWithType: SqlConnectionStringBuilder.MinPoolSize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultipleActiveResultSets*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: MultipleActiveResultSets
  nameWithType: SqlConnectionStringBuilder.MultipleActiveResultSets
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.MultiSubnetFailover*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: MultiSubnetFailover
  nameWithType: SqlConnectionStringBuilder.MultiSubnetFailover
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.NetworkLibrary*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: NetworkLibrary
  nameWithType: SqlConnectionStringBuilder.NetworkLibrary
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PacketSize*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: PacketSize
  nameWithType: SqlConnectionStringBuilder.PacketSize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Password*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Password
  nameWithType: SqlConnectionStringBuilder.Password
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PersistSecurityInfo*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: PersistSecurityInfo
  nameWithType: SqlConnectionStringBuilder.PersistSecurityInfo
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.PoolBlockingPeriod*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: PoolBlockingPeriod
  nameWithType: SqlConnectionStringBuilder.PoolBlockingPeriod
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Pooling*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Pooling
  nameWithType: SqlConnectionStringBuilder.Pooling
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Remove*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Remove
  nameWithType: SqlConnectionStringBuilder.Remove
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Replication*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Replication
  nameWithType: SqlConnectionStringBuilder.Replication
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.ShouldSerialize*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: ShouldSerialize
  nameWithType: SqlConnectionStringBuilder.ShouldSerialize
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TransactionBinding*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TransactionBinding
  nameWithType: SqlConnectionStringBuilder.TransactionBinding
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TransparentNetworkIPResolution*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TransparentNetworkIPResolution
  nameWithType: SqlConnectionStringBuilder.TransparentNetworkIPResolution
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TrustServerCertificate*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TrustServerCertificate
  nameWithType: SqlConnectionStringBuilder.TrustServerCertificate
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TryGetValue*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TryGetValue
  nameWithType: SqlConnectionStringBuilder.TryGetValue
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.TypeSystemVersion*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: TypeSystemVersion
  nameWithType: SqlConnectionStringBuilder.TypeSystemVersion
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserID*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: UserID
  nameWithType: SqlConnectionStringBuilder.UserID
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.UserInstance*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: UserInstance
  nameWithType: SqlConnectionStringBuilder.UserInstance
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.Values*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: Values
  nameWithType: SqlConnectionStringBuilder.Values
- uid: System.Data.SqlClient.SqlConnectionStringBuilder.WorkstationID*
  parent: System.Data.SqlClient.SqlConnectionStringBuilder
  isExternal: false
  name: WorkstationID
  nameWithType: SqlConnectionStringBuilder.WorkstationID
