### YamlMime:ManagedReference
items:
- uid: System.Web.Compilation.RouteUrlExpressionBuilder
  id: RouteUrlExpressionBuilder
  children:
  - System.Web.Compilation.RouteUrlExpressionBuilder.#ctor
  - System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  - System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  - System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(System.Web.UI.Control,System.String)
  - System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate
  - System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)
  langs:
  - csharp
  name: RouteUrlExpressionBuilder
  nameWithType: RouteUrlExpressionBuilder
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder
  type: Class
  summary: "创建到指定的 URL 参数值相对应的 URL。"
  remarks: "RouteUrlExpressionBuilder 类使可以将服务器控件的属性设置为路由的 URL，通过提供的 URL 参数值列表。"
  example:
  - "The following example shows how to create markup that generates a hyperlink with a URL that is formatted for a route. The route is defined by using `http://www.contoso.com/search/{searchterm}` as the URL pattern.  \n  \n```  \n<asp:HyperLink ID=\"HyperLink1\" runat=\"server\"  \n               NavigateUrl=\"<%$ RouteUrl:searchterm=Bicycles %>\">  \n  Search for Bicycles  \n</asp:HyperLink>  \n```  \n  \n The URL generated for this hyperlink would be `http://www.contoso.com/search/Bicycles`.  \n  \n If the URL parameters provided to the `RouteUrl` expression are not sufficient to uniquely identify a route, you must include the route name. For example, if a Web application has two routes with `searchterm` as the sole URL parameter, the routes would have to be defined by using route names, and the hyperlink markup would resemble the following example:  \n  \n```  \n<asp:HyperLink ID=\"HyperLink1\" runat=\"server\"  \n               NavigateUrl=\"<%$ RouteUrl:searchterm=Bicycles,  \n               routename=BasicSearchRoute %>\">  \n  Search for Bicycles  \n</asp:HyperLink>  \n```"
  syntax:
    content: >-
      [System.Web.Compilation.ExpressionEditor("System.Web.UI.Design.RouteUrlExpressionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.Web.Compilation.ExpressionPrefix("Routes")]

      public class RouteUrlExpressionBuilder : System.Web.Compilation.ExpressionBuilder
  inheritance:
  - System.Object
  - System.Web.Compilation.ExpressionBuilder
  implements: []
  inheritedMembers:
  - System.Web.Compilation.ExpressionBuilder.ParseExpression(System.String,System.Type,System.Web.Compilation.ExpressionBuilderContext)
  platform:
  - net462
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.#ctor
  id: '#ctor'
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  langs:
  - csharp
  name: RouteUrlExpressionBuilder()
  nameWithType: RouteUrlExpressionBuilder.RouteUrlExpressionBuilder()
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.RouteUrlExpressionBuilder()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "初始化的新实例<xref href=&quot;System.Web.Compilation.RouteUrlExpressionBuilder&quot;></xref>类。"
  syntax:
    content: public RouteUrlExpressionBuilder ();
    parameters: []
  overload: System.Web.Compilation.RouteUrlExpressionBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  id: EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  langs:
  - csharp
  name: EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  nameWithType: RouteUrlExpressionBuilder.EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "创建一个与指定 URL 参数值和路由 URL 格式对应的 URL。"
  remarks: "在标记中遇到以下形式的表达式时，ASP.NET 将调用此方法︰`<%$ RouteUrl: urlparameter=value %>`此方法将生成当前指定的路由密钥值的相应 URL<xref:System.Web.Routing.Route>对象。</xref:System.Web.Routing.Route> 此方法将替代<xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A>方法。</xref:System.Web.Compilation.ExpressionBuilder.EvaluateExpression%2A> 它会从获取`entry`参数对表达式绑定到控件的引用，它会从获取`context`参数要计算的表达式，它调用<xref:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl%2A>方法来生成 URL。</xref:System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl%2A>"
  syntax:
    content: public override object EvaluateExpression (object target, System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);
    parameters:
    - id: target
      type: System.Object
      description: "不在此实现中使用。"
    - id: entry
      type: System.Web.UI.BoundPropertyEntry
      description: "表达式绑定到属性。"
    - id: parsedData
      type: System.Object
      description: "不在此实现中使用。"
    - id: context
      type: System.Web.Compilation.ExpressionBuilderContext
      description: "为控件或页的属性。"
    return:
      type: System.Object
      description: "指定的 URL 参数值以及与所选路由相对应的 URL。 通过匹配路由 URL 模式指定的参数列表与选择的路由。 如果多个路由与指定的参数列表相匹配，也可以指定路由名称以指示要选择哪个路由。"
  overload: System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  id: GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  langs:
  - csharp
  name: GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  nameWithType: RouteUrlExpressionBuilder.GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "返回用于在生成的页类中执行的属性分配的代码表达式。"
  remarks: "CodeDOM 创建页或控件时，调用此方法。 <xref:System.CodeDom.CodeExpression>返回的对象表示要将添加到生成的页类中的属性分配的代码表达式</xref:System.CodeDom.CodeExpression>"
  syntax:
    content: public override System.CodeDom.CodeExpression GetCodeExpression (System.Web.UI.BoundPropertyEntry entry, object parsedData, System.Web.Compilation.ExpressionBuilderContext context);
    parameters:
    - id: entry
      type: System.Web.UI.BoundPropertyEntry
      description: "表达式绑定到属性。"
    - id: parsedData
      type: System.Object
      description: "表示的对象返回<xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression*>.</xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression*>分析数据"
    - id: context
      type: System.Web.Compilation.ExpressionBuilderContext
      description: "为控件或页的属性。"
    return:
      type: System.CodeDom.CodeExpression
      description: "A <xref href=&quot;System.CodeDom.CodeExpression&quot;> </xref>属性分配中使用的实例。"
  overload: System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(System.Web.UI.Control,System.String)
  id: GetRouteUrl(System.Web.UI.Control,System.String)
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  langs:
  - csharp
  name: GetRouteUrl(Control,String)
  nameWithType: RouteUrlExpressionBuilder.GetRouteUrl(Control,String)
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(Control,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "创建一个与指定的路由的路由 URL 格式的键相对应的 URL。"
  remarks: "此方法将生成适当的值为 URL 通过调用<xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A>方法<xref:System.Web.Routing.RouteCollection>对象。</xref:System.Web.Routing.RouteCollection> </xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A> 它获取<xref:System.Web.Routing.RequestContext>对象`control`参数，并且它将分析来自的路由名称和路由参数`expression`参数。</xref:System.Web.Routing.RequestContext>"
  syntax:
    content: public static string GetRouteUrl (System.Web.UI.Control control, string expression);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "表达式绑定到控件。"
    - id: expression
      type: System.String
      description: "在标记中指定的表达式。"
    return:
      type: System.String
      description: "对应于当前的路由 URL 格式的 URL<xref:System.Web.Routing.Route>对象。</xref:System.Web.Routing.Route>"
  overload: System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>control</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "该方法无法分析表达式标记中指定。 有关详细信息，请参阅<xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression*>。</xref:System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression*>"
  platform:
  - net462
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate
  id: SupportsEvaluate
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  langs:
  - csharp
  name: SupportsEvaluate
  nameWithType: RouteUrlExpressionBuilder.SupportsEvaluate
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "获取一个值，该值指示是否可以在未编译的页面中计算表达式。"
  remarks: "SupportsEvaluate 属性指示是否<xref:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression%2A>方法已在类中实现，并可以在不编译页中返回值的表达式。</xref:System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression%2A> <xref:System.Web.Compilation.RouteUrlExpressionBuilder>类可以计算不编译页中的表达式。</xref:System.Web.Compilation.RouteUrlExpressionBuilder> 因此，SupportsEvaluate 属性始终返回`true`。"
  syntax:
    content: public override bool SupportsEvaluate { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)
  id: TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  langs:
  - csharp
  name: TryParseRouteExpression(String,RouteValueDictionary,String)
  nameWithType: RouteUrlExpressionBuilder.TryParseRouteExpression(String,RouteValueDictionary,String)
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(String,RouteValueDictionary,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Compilation
  summary: "分析表达式 （可选） 到路由键和值的集合和路由名称。"
  remarks: "TryParseRouteExpression 方法去除前导空格和尾随空格的表达式，然后，通过使用逗号作为分隔符，将它拆分为键/值对。 如果路由键名为`RouteName`位于值传递进来`routeName`参数而不是在`routeValues`。 否则为`null`为返回`routeName`。 从各个键和值也被剥离前导空格和尾随空格。       TryParseRouteExpression 方法返回`false`如果表达式不由采用以下格式的至少一个键/值对的*密钥*`=`*值*，并使用逗号分隔多个对。"
  syntax:
    content: public static bool TryParseRouteExpression (string expression, System.Web.Routing.RouteValueDictionary routeValues, out string routeName);
    parameters:
    - id: expression
      type: System.String
      description: "在标记中指定的表达式。"
    - id: routeValues
      type: System.Web.Routing.RouteValueDictionary
      description: "路由键和其关联的值的集合。"
    - id: routeName
      type: System.String
      description: "此方法返回时，包含一个字符串，表示的路由的名称，如果`expression`包含名为的路由项`RouteName`。 此参数传递时未经初始化。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果分析成功，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Compilation.ExpressionBuilder
  isExternal: false
  name: System.Web.Compilation.ExpressionBuilder
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.#ctor
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: RouteUrlExpressionBuilder()
  nameWithType: RouteUrlExpressionBuilder.RouteUrlExpressionBuilder()
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.RouteUrlExpressionBuilder()
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(System.Object,System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  nameWithType: RouteUrlExpressionBuilder.EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression(Object,BoundPropertyEntry,Object,ExpressionBuilderContext)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.BoundPropertyEntry
  parent: System.Web.UI
  isExternal: false
  name: BoundPropertyEntry
  nameWithType: BoundPropertyEntry
  fullName: System.Web.UI.BoundPropertyEntry
- uid: System.Web.Compilation.ExpressionBuilderContext
  parent: System.Web.Compilation
  isExternal: false
  name: ExpressionBuilderContext
  nameWithType: ExpressionBuilderContext
  fullName: System.Web.Compilation.ExpressionBuilderContext
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(System.Web.UI.BoundPropertyEntry,System.Object,System.Web.Compilation.ExpressionBuilderContext)
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  nameWithType: RouteUrlExpressionBuilder.GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression(BoundPropertyEntry,Object,ExpressionBuilderContext)
- uid: System.CodeDom.CodeExpression
  parent: System.CodeDom
  isExternal: false
  name: CodeExpression
  nameWithType: CodeExpression
  fullName: System.CodeDom.CodeExpression
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(System.Web.UI.Control,System.String)
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: GetRouteUrl(Control,String)
  nameWithType: RouteUrlExpressionBuilder.GetRouteUrl(Control,String)
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl(Control,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: SupportsEvaluate
  nameWithType: RouteUrlExpressionBuilder.SupportsEvaluate
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(System.String,System.Web.Routing.RouteValueDictionary,System.String@)
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: TryParseRouteExpression(String,RouteValueDictionary,String)
  nameWithType: RouteUrlExpressionBuilder.TryParseRouteExpression(String,RouteValueDictionary,String)
  fullName: System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression(String,RouteValueDictionary,String)
- uid: System.Web.Routing.RouteValueDictionary
  parent: System.Web.Routing
  isExternal: true
  name: RouteValueDictionary
  nameWithType: RouteValueDictionary
  fullName: System.Web.Routing.RouteValueDictionary
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.#ctor*
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: RouteUrlExpressionBuilder
  nameWithType: RouteUrlExpressionBuilder.RouteUrlExpressionBuilder
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.EvaluateExpression*
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: EvaluateExpression
  nameWithType: RouteUrlExpressionBuilder.EvaluateExpression
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.GetCodeExpression*
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: GetCodeExpression
  nameWithType: RouteUrlExpressionBuilder.GetCodeExpression
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.GetRouteUrl*
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: GetRouteUrl
  nameWithType: RouteUrlExpressionBuilder.GetRouteUrl
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.SupportsEvaluate*
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: SupportsEvaluate
  nameWithType: RouteUrlExpressionBuilder.SupportsEvaluate
- uid: System.Web.Compilation.RouteUrlExpressionBuilder.TryParseRouteExpression*
  parent: System.Web.Compilation.RouteUrlExpressionBuilder
  isExternal: false
  name: TryParseRouteExpression
  nameWithType: RouteUrlExpressionBuilder.TryParseRouteExpression
