### YamlMime:ManagedReference
items:
- uid: System.Web.HttpResponse
  id: HttpResponse
  children:
  - System.Web.HttpResponse.#ctor(System.IO.TextWriter)
  - System.Web.HttpResponse.AddCacheDependency(System.Web.Caching.CacheDependency[])
  - System.Web.HttpResponse.AddCacheItemDependencies(System.Collections.ArrayList)
  - System.Web.HttpResponse.AddCacheItemDependencies(System.String[])
  - System.Web.HttpResponse.AddCacheItemDependency(System.String)
  - System.Web.HttpResponse.AddFileDependencies(System.Collections.ArrayList)
  - System.Web.HttpResponse.AddFileDependencies(System.String[])
  - System.Web.HttpResponse.AddFileDependency(System.String)
  - System.Web.HttpResponse.AddHeader(System.String,System.String)
  - System.Web.HttpResponse.AddOnSendingHeaders(System.Action{System.Web.HttpContext})
  - System.Web.HttpResponse.AppendCookie(System.Web.HttpCookie)
  - System.Web.HttpResponse.AppendHeader(System.String,System.String)
  - System.Web.HttpResponse.AppendToLog(System.String)
  - System.Web.HttpResponse.ApplyAppPathModifier(System.String)
  - System.Web.HttpResponse.BeginFlush(System.AsyncCallback,System.Object)
  - System.Web.HttpResponse.BinaryWrite(System.Byte[])
  - System.Web.HttpResponse.Buffer
  - System.Web.HttpResponse.BufferOutput
  - System.Web.HttpResponse.Cache
  - System.Web.HttpResponse.CacheControl
  - System.Web.HttpResponse.Charset
  - System.Web.HttpResponse.Clear
  - System.Web.HttpResponse.ClearContent
  - System.Web.HttpResponse.ClearHeaders
  - System.Web.HttpResponse.ClientDisconnectedToken
  - System.Web.HttpResponse.Close
  - System.Web.HttpResponse.ContentEncoding
  - System.Web.HttpResponse.ContentType
  - System.Web.HttpResponse.Cookies
  - System.Web.HttpResponse.DisableKernelCache
  - System.Web.HttpResponse.DisableUserCache
  - System.Web.HttpResponse.End
  - System.Web.HttpResponse.EndFlush(System.IAsyncResult)
  - System.Web.HttpResponse.Expires
  - System.Web.HttpResponse.ExpiresAbsolute
  - System.Web.HttpResponse.Filter
  - System.Web.HttpResponse.Flush
  - System.Web.HttpResponse.FlushAsync
  - System.Web.HttpResponse.HeaderEncoding
  - System.Web.HttpResponse.Headers
  - System.Web.HttpResponse.HeadersWritten
  - System.Web.HttpResponse.IsClientConnected
  - System.Web.HttpResponse.IsRequestBeingRedirected
  - System.Web.HttpResponse.Output
  - System.Web.HttpResponse.OutputStream
  - System.Web.HttpResponse.Pics(System.String)
  - System.Web.HttpResponse.PushPromise(System.String)
  - System.Web.HttpResponse.PushPromise(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  - System.Web.HttpResponse.Redirect(System.String)
  - System.Web.HttpResponse.Redirect(System.String,System.Boolean)
  - System.Web.HttpResponse.RedirectLocation
  - System.Web.HttpResponse.RedirectPermanent(System.String)
  - System.Web.HttpResponse.RedirectPermanent(System.String,System.Boolean)
  - System.Web.HttpResponse.RedirectToRoute(System.Object)
  - System.Web.HttpResponse.RedirectToRoute(System.String)
  - System.Web.HttpResponse.RedirectToRoute(System.Web.Routing.RouteValueDictionary)
  - System.Web.HttpResponse.RedirectToRoute(System.String,System.Object)
  - System.Web.HttpResponse.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.HttpResponse.RedirectToRoutePermanent(System.Object)
  - System.Web.HttpResponse.RedirectToRoutePermanent(System.String)
  - System.Web.HttpResponse.RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)
  - System.Web.HttpResponse.RedirectToRoutePermanent(System.String,System.Object)
  - System.Web.HttpResponse.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.HttpResponse.RemoveOutputCacheItem(System.String)
  - System.Web.HttpResponse.RemoveOutputCacheItem(System.String,System.String)
  - System.Web.HttpResponse.SetCookie(System.Web.HttpCookie)
  - System.Web.HttpResponse.Status
  - System.Web.HttpResponse.StatusCode
  - System.Web.HttpResponse.StatusDescription
  - System.Web.HttpResponse.SubStatusCode
  - System.Web.HttpResponse.SupportsAsyncFlush
  - System.Web.HttpResponse.SuppressContent
  - System.Web.HttpResponse.SuppressDefaultCacheControlHeader
  - System.Web.HttpResponse.SuppressFormsAuthenticationRedirect
  - System.Web.HttpResponse.TransmitFile(System.String)
  - System.Web.HttpResponse.TransmitFile(System.String,System.Int64,System.Int64)
  - System.Web.HttpResponse.TrySkipIisCustomErrors
  - System.Web.HttpResponse.Write(System.Char)
  - System.Web.HttpResponse.Write(System.Object)
  - System.Web.HttpResponse.Write(System.String)
  - System.Web.HttpResponse.Write(System.Char[],System.Int32,System.Int32)
  - System.Web.HttpResponse.WriteFile(System.String)
  - System.Web.HttpResponse.WriteFile(System.String,System.Boolean)
  - System.Web.HttpResponse.WriteFile(System.IntPtr,System.Int64,System.Int64)
  - System.Web.HttpResponse.WriteFile(System.String,System.Int64,System.Int64)
  - System.Web.HttpResponse.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)
  langs:
  - csharp
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: System.Web.HttpResponse
  type: Class
  summary: "封装来自 ASP.NET 操作的 HTTP 响应信息。"
  remarks: "通过公开的方法和属性的 HttpResponse 类<xref:System.Web.HttpApplication.Response%2A>属性<xref:System.Web.HttpApplication>， <xref:System.Web.HttpContext>， <xref:System.Web.UI.Page>，和<xref:System.Web.UI.UserControl>类。</xref:System.Web.UI.UserControl> </xref:System.Web.UI.Page> </xref:System.Web.HttpContext> </xref:System.Web.HttpApplication> </xref:System.Web.HttpApplication.Response%2A>       HttpResponse 类的以下方法仅在回发的情况下支持和不在异步 post 备份方案:- <xref:System.Web.HttpResponse.BinaryWrite%2A>- <xref:System.Web.HttpResponse.Clear%2A>- <xref:System.Web.HttpResponse.ClearContent%2A>- <xref:System.Web.HttpResponse.ClearHeaders%2A>- <xref:System.Web.HttpResponse.Close%2A>- <xref:System.Web.HttpResponse.End%2A>- <xref:System.Web.HttpResponse.Flush%2A>- <xref:System.Web.HttpResponse.TransmitFile%2A>- <xref:System.Web.HttpResponse.Write%2A>- <xref:System.Web.HttpResponse.WriteFile%2A>-<xref:System.Web.HttpResponse.WriteSubstitution%2A>使用时启用局部页面更新<xref:System.Web.UI.UpdatePanel>控件以更新而不是使用一种回发更新整个页面的页面的选定的区域。</xref:System.Web.UI.UpdatePanel> </xref:System.Web.HttpResponse.WriteSubstitution%2A> </xref:System.Web.HttpResponse.WriteFile%2A> </xref:System.Web.HttpResponse.Write%2A> </xref:System.Web.HttpResponse.TransmitFile%2A> </xref:System.Web.HttpResponse.Flush%2A> </xref:System.Web.HttpResponse.End%2A> </xref:System.Web.HttpResponse.Close%2A> </xref:System.Web.HttpResponse.ClearHeaders%2A> </xref:System.Web.HttpResponse.ClearContent%2A> </xref:System.Web.HttpResponse.Clear%2A> </xref:System.Web.HttpResponse.BinaryWrite%2A> 有关详细信息，请参阅[UpdatePanel 控件概述](~/add/includes/ajax-current-ext-md.md)和[局部页面呈现概述](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example draws three overlapping rectangles when the page is requested. The code begins by setting the <xref:System.Web.HttpResponse.ContentType%2A> property to image/jpeg, so that the entire page will be rendered as a JPEG image. The code then calls the <xref:System.Web.HttpResponse.Clear%2A> method to ensure that no extraneous content is sent with this response. Next, the code sets the <xref:System.Web.HttpResponse.BufferOutput%2A> property to true so that the page is completely processed before it is sent to the requesting client. Two objects used to draw the rectangles are then created: a <xref:System.Drawing.Bitmap> and a <xref:System.Drawing.Graphics> object. The variables created in the page are used as coordinates to draw the rectangles and a string that appears inside the largest rectangle.  \n  \n When the three rectangles and the string that appears inside them are drawn, the <xref:System.Drawing.Bitmap> is saved to the <xref:System.IO.Stream> object that is associated with the <xref:System.Web.HttpResponse.OutputStream%2A> property and its format is set to JPEG. The code calls the <xref:System.Drawing.Image.Dispose%2A> and <xref:System.Drawing.Graphics.Dispose%2A> methods to release the resources used by the two drawing objects. Lastly, the code calls the <xref:System.Web.HttpResponse.Flush%2A> method to send the buffered response to the requesting client.  \n  \n> [!NOTE]\n>  In code, the HttpResponse object is referred to by the keyword `Response`. For example, `Response.Clear()` refers to the <xref:System.Web.HttpResponse.Clear%2A?displayProperty=fullName> method. The <xref:System.Web.UI.Page> class has a property that is named <xref:System.Web.UI.Page.Response%2A> that exposes the current instance of HttpResponse.  \n  \n [!code-cs[System.Web.HttpResponse_Samples1#1](~/add/codesnippet/csharp/t-system.web.httpresponse_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Samples1#1](~/add/codesnippet/visualbasic/t-system.web.httpresponse_1.aspx)]"
  syntax:
    content: public sealed class HttpResponse
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpResponse.#ctor(System.IO.TextWriter)
  id: '#ctor(System.IO.TextWriter)'
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: HttpResponse(TextWriter)
  nameWithType: HttpResponse.HttpResponse(TextWriter)
  fullName: System.Web.HttpResponse.HttpResponse(TextWriter)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "初始化的新实例<xref href=&quot;System.Web.HttpResponse&quot;></xref>类。"
  remarks: "此成员支持.NET Framework 基础结构，不宜在代码中直接使用。       方法和属性<xref:System.Web.HttpResponse>类公开通过内部<xref:System.Web.HttpContext.Response%2A>在 ASP.NET 中的对象。</xref:System.Web.HttpContext.Response%2A> </xref:System.Web.HttpResponse>"
  syntax:
    content: public HttpResponse (System.IO.TextWriter writer);
    parameters:
    - id: writer
      type: System.IO.TextWriter
      description: "A<xref:System.IO.TextWriter>实现自定义 HTTP 输出的对象。</xref:System.IO.TextWriter>"
  overload: System.Web.HttpResponse.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AddCacheDependency(System.Web.Caching.CacheDependency[])
  id: AddCacheDependency(System.Web.Caching.CacheDependency[])
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddCacheDependency(CacheDependency[])
  nameWithType: HttpResponse.AddCacheDependency(CacheDependency[])
  fullName: System.Web.HttpResponse.AddCacheDependency(CacheDependency[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将一组缓存依赖项使响应失效，如果它将在输出缓存中存储并且指定的依赖项更改的响应与相关联。"
  remarks: "AddCacheDependency 方法允许的依赖项来创建两个缓存的响应和<xref:System.Web.Caching.CacheDependency>对象。</xref:System.Web.Caching.CacheDependency>"
  example:
  - "The following example demonstrates how to create a cache dependency by using the AddCacheDependency method and a <xref:System.Web.Caching.CacheDependency> object.  \n  \n [!code-vb[HttpResponse.AddCacheDependency#1](~/add/codesnippet/visualbasic/a9e8dbb8-b5f3-41b1-b083-_1.aspx)]\n [!code-cs[HttpResponse.AddCacheDependency#1](~/add/codesnippet/csharp/a9e8dbb8-b5f3-41b1-b083-_1.aspx)]"
  syntax:
    content: public void AddCacheDependency (System.Web.Caching.CacheDependency[] dependencies);
    parameters:
    - id: dependencies
      type: System.Web.Caching.CacheDependency[]
      description: "文件、 缓存键或<xref href=&quot;System.Web.Caching.CacheDependency&quot;></xref>将添加到应用程序依赖关系的列表。"
  overload: System.Web.HttpResponse.AddCacheDependency*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>dependencies</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "此方法是太迟中缓存处理管道之后, 调用已创建缓存的响应。"
  platform:
  - net462
- uid: System.Web.HttpResponse.AddCacheItemDependencies(System.Collections.ArrayList)
  id: AddCacheItemDependencies(System.Collections.ArrayList)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddCacheItemDependencies(ArrayList)
  nameWithType: HttpResponse.AddCacheItemDependencies(ArrayList)
  fullName: System.Web.HttpResponse.AddCacheItemDependencies(ArrayList)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使缓存响应的有效性依赖于其他项中缓存。"
  remarks: "当引用的项在`cacheKeys`从缓存中删除参数，当前项的缓存的响应无效。"
  example:
  - "The following example demonstrates how to use an ASP.NET page that is output cached. The code for the page creates an <xref:System.Collections.ArrayList> object of keys that are associated with items that are stored in the <xref:System.Web.Caching.Cache> object. Next, the code passes the <xref:System.Collections.ArrayList> as the parameter in a call to the AddCacheItemDependencies method. This makes the output cached response not valid, if any of the files specified in the <xref:System.Collections.ArrayList> change.  \n  \n [!code-cs[System.Web.HttpResponse_Samples2#5](~/add/codesnippet/csharp/m-system.web.httprespons_6_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Samples2#5](~/add/codesnippet/visualbasic/m-system.web.httprespons_6_1.aspx)]"
  syntax:
    content: public void AddCacheItemDependencies (System.Collections.ArrayList cacheKeys);
    parameters:
    - id: cacheKeys
      type: System.Collections.ArrayList
      description: "<xref href=&quot;System.Collections.ArrayList&quot;> </xref> ，包含当前缓存的响应所依赖的项的键。"
  overload: System.Web.HttpResponse.AddCacheItemDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AddCacheItemDependencies(System.String[])
  id: AddCacheItemDependencies(System.String[])
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddCacheItemDependencies(String[])
  nameWithType: HttpResponse.AddCacheItemDependencies(String[])
  fullName: System.Web.HttpResponse.AddCacheItemDependencies(String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使缓存项的有效性依赖于另一个项中缓存。"
  remarks: "如果任一`cacheKey`从缓存中删除 s，当前项的缓存的响应无效。"
  syntax:
    content: public void AddCacheItemDependencies (string[] cacheKeys);
    parameters:
    - id: cacheKeys
      type: System.String[]
      description: "缓存的响应所依赖的项键的数组。"
  overload: System.Web.HttpResponse.AddCacheItemDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AddCacheItemDependency(System.String)
  id: AddCacheItemDependency(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddCacheItemDependency(String)
  nameWithType: HttpResponse.AddCacheItemDependency(String)
  fullName: System.Web.HttpResponse.AddCacheItemDependency(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使缓存响应的有效性依赖于另一个项中缓存。"
  remarks: "当对应的项`cacheKey`从缓存中删除参数，当前项的缓存的响应无效。"
  example:
  - "The following example is an ASP.NET user control that is output cached. The code for the control calls the AddCacheItemDependency method with the key of an item stored in the <xref:System.Web.Caching.Cache> object passed as its parameter. If the item does not exist in the cache, the control's response that was stored in the output cache is invalidated. This means that on the subsequent request, a new version of the control's response will be added to the output cache.  \n  \n Next, the code checks whether an item associated with a `bookData` key is stored in the `Cache` object, and displays one of two lines of text dependent upon the result. Then, the code sets the <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property of a <xref:System.Web.UI.WebControls.DataGrid> control, which is named `dgBooks`, with a call to a custom `DataHelper` class' shared `GetBookData` method, and populates the <xref:System.Web.UI.WebControls.DataGrid> with the <xref:System.Web.UI.Control.DataBind%2A> method.  \n  \n [!code-cs[System.Web.HttpResponse_Samples2#3](~/add/codesnippet/csharp/m-system.web.httprespons_13_1.ascx)]\n [!code-vb[System.Web.HttpResponse_Samples2#3](~/add/codesnippet/visualbasic/m-system.web.httprespons_13_1.ascx)]"
  syntax:
    content: public void AddCacheItemDependency (string cacheKey);
    parameters:
    - id: cacheKey
      type: System.String
      description: "缓存的响应所依赖的项键。"
  overload: System.Web.HttpResponse.AddCacheItemDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AddFileDependencies(System.Collections.ArrayList)
  id: AddFileDependencies(System.Collections.ArrayList)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddFileDependencies(ArrayList)
  nameWithType: HttpResponse.AddFileDependencies(ArrayList)
  fullName: System.Web.HttpResponse.AddFileDependencies(ArrayList)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将一组文件名添加到在其当前响应所依赖的文件名的集合。"
  remarks: ''
  example:
  - "The following example is an ASP.NET page that is output cached. The code for the page creates an <xref:System.Collections.ArrayList> of file paths, and then passes the <xref:System.Collections.ArrayList> as the parameter in a call to the AddFileDependencies method. This makes the output cached response invalid if any of the files specified in the <xref:System.Collections.ArrayList> changes.  \n  \n [!code-vb[System.Web.HttpResponse_Samples2#6](~/add/codesnippet/visualbasic/m-system.web.httprespons_10_1.aspx)]\n [!code-cs[System.Web.HttpResponse_Samples2#6](~/add/codesnippet/csharp/m-system.web.httprespons_10_1.aspx)]"
  syntax:
    content: public void AddFileDependencies (System.Collections.ArrayList filenames);
    parameters:
    - id: filenames
      type: System.Collections.ArrayList
      description: "要添加的文件集合。"
  overload: System.Web.HttpResponse.AddFileDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AddFileDependencies(System.String[])
  id: AddFileDependencies(System.String[])
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddFileDependencies(String[])
  nameWithType: HttpResponse.AddFileDependencies(String[])
  fullName: System.Web.HttpResponse.AddFileDependencies(String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将文件名数组添加到在其当前响应所依赖的文件名称的集合。"
  remarks: ''
  example:
  - "The following example adds an array of file names to the AddFileDependencies file dependency list. If the files changes, the cached response is invalidated.  \n  \n [!code-cs[Response.AddFileDependency#1](~/add/codesnippet/csharp/m-system.web.httprespons_0_1.aspx)]\n [!code-vb[Response.AddFileDependency#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_0_1.aspx)]"
  syntax:
    content: public void AddFileDependencies (string[] filenames);
    parameters:
    - id: filenames
      type: System.String[]
      description: "要添加的文件数组。"
  overload: System.Web.HttpResponse.AddFileDependencies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AddFileDependency(System.String)
  id: AddFileDependency(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddFileDependency(String)
  nameWithType: HttpResponse.AddFileDependency(String)
  fullName: System.Web.HttpResponse.AddFileDependency(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将单个文件名添加到在其上当前响应所依赖的文件名集合中。"
  remarks: '当你使用 AddFileDependency 方法添加的文件依赖项时，你还必须指定输出缓存以编程方式或以声明方式。 例如，若要指定输出缓存以声明方式，使用指令。 有关详细信息，请参阅[如何︰ 使用文件依赖项的缓存页面输出](~/add/includes/ajax-current-ext-md.md)。'
  example:
  - "The following example shows how to add a single file name to the AddFileDependency file dependency list. If the file changes, the cached response is invalidated.  \n  \n [!code-vb[Classic HttpResponse.AddFileDependency Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_11_1.vb)]\n [!code-cs[Classic HttpResponse.AddFileDependency Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_11_1.cs)]"
  syntax:
    content: public void AddFileDependency (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "要添加的文件的名称。"
  overload: System.Web.HttpResponse.AddFileDependency*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AddHeader(System.String,System.String)
  id: AddHeader(System.String,System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddHeader(String,String)
  nameWithType: HttpResponse.AddHeader(String,String)
  fullName: System.Web.HttpResponse.AddHeader(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将 HTTP 标头添加到输出流。 AddHeader 提供为了与 ASP 的早期版本兼容。"
  remarks: "AddHeader 等同于<xref:System.Web.HttpResponse.AppendHeader%2A>，仅为与 ASP 的早期版本的兼容性提供。</xref:System.Web.HttpResponse.AppendHeader%2A> 带 ASP.NET、 使用<xref:System.Web.HttpResponse.AppendHeader%2A>.</xref:System.Web.HttpResponse.AppendHeader%2A>"
  syntax:
    content: public void AddHeader (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "要添加的 HTTP 标头的名称`value`到。"
    - id: value
      type: System.String
      description: "要添加到标头的字符串。"
  overload: System.Web.HttpResponse.AddHeader*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AddOnSendingHeaders(System.Action{System.Web.HttpContext})
  id: AddOnSendingHeaders(System.Action{System.Web.HttpContext})
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AddOnSendingHeaders(Action<HttpContext>)
  nameWithType: HttpResponse.AddOnSendingHeaders(Action<HttpContext>)
  fullName: System.Web.HttpResponse.AddOnSendingHeaders(Action<HttpContext>)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "[在.NET Framework 4.5.2 及更高版本中受支持]      注册的响应此请求发送标头之前，ASP.NET 运行时将调用的回调。"
  remarks: "> [!IMPORTANT]1> 不调用 AddOnSendingHeaders 方法，如果本机模块第一次刷新响应。       伪事件 OnSendingHeaders 区别于 IHttpModule 级管道事件，因为它是每个请求订阅，而不是每个应用程序订阅。 其目的是回调可能会修改响应状态代码，或可能响应 cookie 或标头设置。 其他使用情况注意事项和警告:-仅当在集成的管道模式管线中运行 IIS 和仅当尚未尚未为当前请求发送响应标头，此方法才有效。      -ASP.NET 运行时不保证有关调用回调的线程的任何信息。 例如，调用该回调可能会以同步方式在后台线程中如果正在执行后台刷新。 <xref:System.Web.HttpContext.Current%2A>不保证在此类线程中不可用。</xref:System.Web.HttpContext.Current%2A>      -回调必须调用操作的响应实体正文或这将导致在刷新任何方法。 例如，回调必须调用<xref:System.Web.HttpResponse.Redirect%2A>，如该方法可能操作的响应实体正文。</xref:System.Web.HttpResponse.Redirect%2A>      -回调必须包含仅短时间运行的同步代码。 尝试调用异步操作或等待此类操作可能导致死锁。      -回调必须不会引发异常;否则行为是不确定的。"
  syntax:
    content: public System.Web.ISubscriptionToken AddOnSendingHeaders (Action<System.Web.HttpContext> callback);
    parameters:
    - id: callback
      type: System.Action{System.Web.HttpContext}
      description: "回调方法。"
    return:
      type: System.Web.ISubscriptionToken
      description: "<xref href=&quot;System.Web.ISubscriptionToken&quot;> </xref>对象，表示对 OnSendingHeaders 伪事件的订阅。"
  overload: System.Web.HttpResponse.AddOnSendingHeaders*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.AppendCookie(System.Web.HttpCookie)
  id: AppendCookie(System.Web.HttpCookie)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AppendCookie(HttpCookie)
  nameWithType: HttpResponse.AppendCookie(HttpCookie)
  fullName: System.Web.HttpResponse.AppendCookie(HttpCookie)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将 HTTP cookie 添加到内部 cookie 集合。"
  remarks: ''
  example:
  - "The following example creates a new cookie named `LastVisit`, sets the value of the cookie to the current date and time, and appends the cookie to the current cookie collection. All cookies in the cookie collection are sent to the client in the `Set-Cookie` header with the HTTP output stream.  \n  \n [!code-cs[Classic HttpResponse.AppendCookie Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_22_1.cs)]\n [!code-vb[Classic HttpResponse.AppendCookie Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_22_1.vb)]"
  syntax:
    content: public void AppendCookie (System.Web.HttpCookie cookie);
    parameters:
    - id: cookie
      type: System.Web.HttpCookie
      description: "<xref href=&quot;System.Web.HttpCookie&quot;> </xref>要添加到输出流。"
  overload: System.Web.HttpResponse.AppendCookie*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头后追加一个 cookie。"
  platform:
  - net462
- uid: System.Web.HttpResponse.AppendHeader(System.String,System.String)
  id: AppendHeader(System.String,System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AppendHeader(String,String)
  nameWithType: HttpResponse.AppendHeader(String,String)
  fullName: System.Web.HttpResponse.AppendHeader(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将 HTTP 标头添加到输出流。"
  remarks: "如果你使用 AppendHeader 方法发送缓存特定的标头和在同一时间使用的缓存对象模型 (<xref:System.Web.HttpResponse.Cache%2A>) 若要设置缓存策略，适用于缓存的 HTTP 响应标头 (`Cache-Control`， `Expires`， `Last-Modified`， `Pragma`，和`Vary`) 使用的缓存对象模型时可能会删除。</xref:System.Web.HttpResponse.Cache%2A> 此行为使 ASP.NET 能够维护的限制性最强的设置。 例如，考虑包括用户控件的页面。 如果这些控件具有冲突的缓存策略，则将使用限制性最强的缓存策略。 如果一个用户控件设置的标头&quot;`Cache-Control: Public`&quot;和另一个用户控件设置的限制性更强的标头&quot;`Cache-Control: Private`&quot;通过调用<xref:System.Web.HttpCachePolicy.SetCacheability%2A>，则&quot;`Cache-Control: Private`&quot;标头将与响应一起发送。</xref:System.Web.HttpCachePolicy.SetCacheability%2A>       有关标准 HTTP/1.1 标头的列表，请参阅部分 14 中，&quot;标头字段定义，&quot;[超文本传输协议-HTTP/1.1](http://go.microsoft.com/fwlink/?LinkID=73147) World Wide Web Consortium (W3C) 网站上的规范。"
  example:
  - "The following example calls the AppendHeader method to add a custom header to the <xref:System.Web.HttpResponse> object sent to the requesting client.  \n  \n [!code-cs[System.Web.HttpResponse.AppendHeader_Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_19_1.aspx)]\n [!code-vb[System.Web.HttpResponse.AppendHeader_Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_19_1.aspx)]"
  syntax:
    content: public void AppendHeader (string name, string value);
    parameters:
    - id: name
      type: System.String
      description: "要添加到输出流的 HTTP 标头的名称。"
    - id: value
      type: System.String
      description: "要追加到标头的字符串。"
  overload: System.Web.HttpResponse.AppendHeader*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头后追加标头。"
  platform:
  - net462
- uid: System.Web.HttpResponse.AppendToLog(System.String)
  id: AppendToLog(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: AppendToLog(String)
  nameWithType: HttpResponse.AppendToLog(String)
  fullName: System.Web.HttpResponse.AppendToLog(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将自定义日志信息添加到 Internet Information Services (IIS) 日志文件。"
  remarks: "若要允许要记录在日志文件中的指定字符串，必须先启用**URI 查询**选项**扩展日志记录属性**对话框中，你想要在 IIS 中记录的活动的站点。       要自定义扩展中的日志记录 IIS 6.0，请按照下列步骤︰ 1。  在 IIS 管理器中，展开本地计算机节点，展开 Web 或 FTP 站点文件夹，右键单击 Web 或 FTP 站点，然后单击**属性**。      2.  单击**Web 或 FTP 站点**选项卡上，然后选择**启用日志记录**复选框 （如果尚未选择）。      3.  在**活动日志格式**框中，单击**W3C 扩展日志文件格式**。      4.  单击“属性” 。      5.  单击**高级**选项卡上，选择你想要登录，然后单击属性**确定**。"
  example:
  - "The following example shows how to append a string to the log.  \n  \n [!code-vb[Classic HttpResponse.AppendToLog Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_15_1.vb)]\n [!code-cs[Classic HttpResponse.AppendToLog Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_15_1.cs)]"
  syntax:
    content: public void AppendToLog (string param);
    parameters:
    - id: param
      type: System.String
      description: "要添加到日志文件的文本。"
  overload: System.Web.HttpResponse.AppendToLog*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.ApplyAppPathModifier(System.String)
  id: ApplyAppPathModifier(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: ApplyAppPathModifier(String)
  nameWithType: HttpResponse.ApplyAppPathModifier(String)
  fullName: System.Web.HttpResponse.ApplyAppPathModifier(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将会话 ID 添加到虚拟路径，如果会话正在使用<> *1> 会话状态并返回组合的路径。如果<> *1> 不使用会话状态，ApplyAppPathModifier 返回原始虚拟路径。"
  remarks: "只能与无 cookie 会话使用 ApplyAppPathModifier 构造绝对 Href。"
  example:
  - "The following example declares a string variable named `urlConverted`, and sets it to the result of an ApplyAppPathModifier method call. The code then passes the variable's value to a <xref:System.Web.UI.WebControls.HyperLink> control's <xref:System.Web.UI.WebControls.HyperLink.NavigateUrl%2A> property.  \n  \n [!code-cs[System.Web.HttpResponse_Sample5#5](~/add/codesnippet/csharp/m-system.web.httprespons_4_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Sample5#5](~/add/codesnippet/visualbasic/m-system.web.httprespons_4_1.aspx)]"
  syntax:
    content: public string ApplyAppPathModifier (string virtualPath);
    parameters:
    - id: virtualPath
      type: System.String
      description: "资源的虚拟路径。"
    return:
      type: System.String
      description: "<code> virtualPath </code> ID 插入会话。"
  overload: System.Web.HttpResponse.ApplyAppPathModifier*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.BeginFlush(System.AsyncCallback,System.Object)
  id: BeginFlush(System.AsyncCallback,System.Object)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: BeginFlush(AsyncCallback,Object)
  nameWithType: HttpResponse.BeginFlush(AsyncCallback,Object)
  fullName: System.Web.HttpResponse.BeginFlush(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将发送到客户端当前所有缓冲的响应。"
  remarks: "如果基础<xref:System.Web.HttpWorkerRequest>对象支持异步刷新操作，从异步模块事件或从异步处理程序调用此方法以异步方式执行刷新操作。</xref:System.Web.HttpWorkerRequest> 否则，会以同步方式执行刷新操作。 IIS 6.0 及更高版本支持异步刷新。"
  syntax:
    content: public IAsyncResult BeginFlush (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "回调对象中。"
    - id: state
      type: System.Object
      description: "响应状态。"
    return:
      type: System.IAsyncResult
      description: "异步结果对象中。"
  overload: System.Web.HttpResponse.BeginFlush*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "响应已完成。"
  platform:
  - net462
- uid: System.Web.HttpResponse.BinaryWrite(System.Byte[])
  id: BinaryWrite(System.Byte[])
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: BinaryWrite(Byte[])
  nameWithType: HttpResponse.BinaryWrite(Byte[])
  fullName: System.Web.HttpResponse.BinaryWrite(Byte[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将二进制字符串写入 HTTP 输出流。"
  remarks: ''
  example:
  - "The following example reads a text file into a buffer and writes the buffer to the HTTP output stream.  \n  \n [!code-cs[Classic HttpResponse.BinaryWrite Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_21_1.cs)]\n [!code-vb[Classic HttpResponse.BinaryWrite Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_21_1.vb)]"
  syntax:
    content: public void BinaryWrite (byte[] buffer);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "要写入到输出流的字节。"
  overload: System.Web.HttpResponse.BinaryWrite*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Buffer
  id: Buffer
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Buffer
  nameWithType: HttpResponse.Buffer
  fullName: System.Web.HttpResponse.Buffer
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，该值指示是否缓冲输出并在整个响应之后发送它处理。"
  remarks: "缓冲区属性已弃用鉴于<xref:System.Web.HttpResponse.BufferOutput%2A>属性，仅为与 ASP 的早期版本的兼容性提供。</xref:System.Web.HttpResponse.BufferOutput%2A> 带 ASP.NET、 使用<xref:System.Web.HttpResponse.BufferOutput%2A>.</xref:System.Web.HttpResponse.BufferOutput%2A>"
  syntax:
    content: public bool Buffer { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果缓冲了发送到客户端的输出;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.Buffer*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.BufferOutput
  id: BufferOutput
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: BufferOutput
  nameWithType: HttpResponse.BufferOutput
  fullName: System.Web.HttpResponse.BufferOutput
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，该值指示是否缓冲输出并完整个页之后发送它处理。"
  remarks: ''
  example:
  - "The following example sets the <xref:System.Web.HttpResponse.ContentType%2A> property for the response to image/jpeg, calls the <xref:System.Web.HttpResponse.Clear%2A> method to remove other content that might be attached to the response, and then sets the BufferOutput property to true so that the entire page will be processed before any content is sent to the requesting client.  \n  \n For a complete example, see the <xref:System.Web.HttpResponse> class.  \n  \n [!code-cs[System.Web.HttpResponse_Samples1#2](~/add/codesnippet/csharp/p-system.web.httprespons_3_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Samples1#2](~/add/codesnippet/visualbasic/p-system.web.httprespons_3_1.aspx)]"
  syntax:
    content: public bool BufferOutput { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果缓冲了发送到客户端的输出;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.BufferOutput*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Cache
  id: Cache
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Cache
  nameWithType: HttpResponse.Cache
  fullName: System.Web.HttpResponse.Cache
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取的缓存策略 (如过期时间、 隐私设置和 vary 子句) 的网页。"
  remarks: ''
  example:
  - "The following example writes properties of the current cache policy to the HTTP output stream.  \n  \n [!code-vb[Classic HttpResponse.Cache Example#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_4_1.vb)]\n [!code-cs[Classic HttpResponse.Cache Example#1](~/add/codesnippet/csharp/p-system.web.httprespons_4_1.cs)]"
  syntax:
    content: public System.Web.HttpCachePolicy Cache { get; }
    return:
      type: System.Web.HttpCachePolicy
      description: "<xref href=&quot;System.Web.HttpCachePolicy&quot;> </xref>包含当前响应的缓存策略相关信息的对象。"
  overload: System.Web.HttpResponse.Cache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.CacheControl
  id: CacheControl
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: CacheControl
  nameWithType: HttpResponse.CacheControl
  fullName: System.Web.HttpResponse.CacheControl
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置<xref uid=&quot;langword_csharp_Cache-Control&quot; name=&quot;Cache-Control&quot; href=&quot;&quot;></xref>之一相匹配的 HTTP 标头<xref href=&quot;System.Web.HttpCacheability&quot;></xref>枚举值。"
  remarks: "值`Private`， `Public`，和`No-Cache`是字符串，并且必须用引号引起来 (&quot;&quot;)。 如果 CacheControl 属性设置为一个值，与任一都不匹配<xref:System.Web.HttpCacheability>枚举值，则<xref:System.ArgumentException>引发。</xref:System.ArgumentException> </xref:System.Web.HttpCacheability> 如果未设置 CacheControl 属性的响应可缓存性设置为<xref:System.Web.HttpCacheability>。</xref:System.Web.HttpCacheability>       `CacheControl`， <xref:System.Web.HttpResponse.Expires%2A>，和<xref:System.Web.HttpResponse.ExpiresAbsolute%2A>属性已被否决。</xref:System.Web.HttpResponse.ExpiresAbsolute%2A> </xref:System.Web.HttpResponse.Expires%2A> 相反的方法<xref:System.Web.HttpCachePolicy>类均可通过<xref:System.Web.HttpResponse.Cache%2A>内部函数的对象以控制 Internet 信息服务 (IIS) 输出缓存和客户端缓存。</xref:System.Web.HttpResponse.Cache%2A> </xref:System.Web.HttpCachePolicy>"
  syntax:
    content: public string CacheControl { get; set; }
    return:
      type: System.String
      description: "字符串表示形式<xref href=&quot;System.Web.HttpCacheability&quot;></xref>枚举值。"
  overload: System.Web.HttpResponse.CacheControl*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "设置的字符串值不匹配之一<xref href=&quot;System.Web.HttpCacheability&quot;></xref>枚举值。"
  platform:
  - net462
- uid: System.Web.HttpResponse.Charset
  id: Charset
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Charset
  nameWithType: HttpResponse.Charset
  fullName: System.Web.HttpResponse.Charset
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置输出流的 HTTP 字符集。"
  remarks: "`Charset`属性可以设置为`null`以禁止 HTTP`Content-Type`标头。"
  example:
  - "The following example checks whether the character set of the output stream is Central European (ISO).  \n  \n [!code-vb[System.Web.HttpResponse.Charset#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_7_1.aspx)]\n [!code-cs[System.Web.HttpResponse.Charset#1](~/add/codesnippet/csharp/p-system.web.httprespons_7_1.aspx)]"
  syntax:
    content: public string Charset { get; set; }
    return:
      type: System.String
      description: "输出流 HTTP 字符集。"
  overload: System.Web.HttpResponse.Charset*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref uid=&quot;langword_csharp_Charset&quot; name=&quot;Charset&quot; href=&quot;&quot;> </xref>发送标头后设置属性。"
  platform:
  - net462
- uid: System.Web.HttpResponse.Clear
  id: Clear
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Clear()
  nameWithType: HttpResponse.Clear()
  fullName: System.Web.HttpResponse.Clear()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "清除缓冲区流中的所有内容输出。"
  remarks: "Clear 方法并不会清除标头信息。"
  example:
  - "The following example sets the <xref:System.Web.HttpResponse.ContentType%2A> property for the response to image/jpeg, calls the Clear method to remove other content that might be attached to the response, and then sets the <xref:System.Web.HttpResponse.BufferOutput%2A> property to true so that the complete page will be processed before any content is sent to the requesting client.  \n  \n For a complete example, see the <xref:System.Web.HttpResponse> class.  \n  \n [!code-cs[System.Web.HttpResponse_Samples1#2](~/add/codesnippet/csharp/m-system.web.httprespons_2_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Samples1#2](~/add/codesnippet/visualbasic/m-system.web.httprespons_2_1.aspx)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Web.HttpResponse.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.ClearContent
  id: ClearContent
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: ClearContent()
  nameWithType: HttpResponse.ClearContent()
  fullName: System.Web.HttpResponse.ClearContent()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "清除缓冲区流中的所有内容输出。"
  remarks: "ClearContent 方法并不会清除标头信息。"
  example:
  - "The following example clears all content from the buffer stream.  \n  \n [!code-cs[Classic HttpResponse.ClearContent Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_17_1.cs)]\n [!code-vb[Classic HttpResponse.ClearContent Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_17_1.vb)]"
  syntax:
    content: public void ClearContent ();
    parameters: []
  overload: System.Web.HttpResponse.ClearContent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.ClearHeaders
  id: ClearHeaders
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: ClearHeaders()
  nameWithType: HttpResponse.ClearHeaders()
  fullName: System.Web.HttpResponse.ClearHeaders()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "清除缓冲区流中的所有标头。"
  remarks: ''
  example:
  - "The following example calls the ClearHeaders method to ensure that no headers are sent with the current response. This technique can be especially important if the ASP.NET response is generating an image, such as a JPEG file. In this example the <xref:System.Web.HttpResponse.ContentType%2A> property is set to image/jpeg.  \n  \n [!code-cs[System.Web.HttpResponse_Sample5#2](~/add/codesnippet/csharp/m-system.web.httprespons_14_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Sample5#2](~/add/codesnippet/visualbasic/m-system.web.httprespons_14_1.aspx)]"
  syntax:
    content: public void ClearHeaders ();
    parameters: []
  overload: System.Web.HttpResponse.ClearHeaders*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头后，将被清除标头。"
  platform:
  - net462
- uid: System.Web.HttpResponse.ClientDisconnectedToken
  id: ClientDisconnectedToken
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: ClientDisconnectedToken
  nameWithType: HttpResponse.ClientDisconnectedToken
  fullName: System.Web.HttpResponse.ClientDisconnectedToken
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref:System.Threading.CancellationToken>客户端断开连接时触发的对象。</xref:System.Threading.CancellationToken>"
  remarks: "此 API 是线程安全的。 但是，有一些限制有关应如何使用取消标记。 使用不当可能导致争用条件、 死锁或其他意外的行为。 请记住以下准则:-确保你不调用此 api 超出边界的单个请求，因为 ASP.NET 将处置末尾的请求的取消标记。 就释放之前，令牌曾经将转换为已取消状态不能保证。 例如，如果没有具有断开连接使用客户端完成请求，该令牌将释放而无需首先具有已取消。      -不等待的<xref:System.Threading.CancellationToken.WaitHandle%2A?displayProperty=fullName>，如这与异步通知的初衷背道而驰并且会导致死锁。</xref:System.Threading.CancellationToken.WaitHandle%2A?displayProperty=fullName>      -不要调用<xref:System.Threading.CancellationToken.Register%2A?displayProperty=fullName>原始调用回调的重载<xref:System.Threading.SynchronizationContext>对象。</xref:System.Threading.SynchronizationContext> </xref:System.Threading.CancellationToken.Register%2A?displayProperty=fullName>      -不要使用<xref:System.Web.HttpContext>对象或其他非线程安全 ASP.NET 内部对象从在回调提供给<xref:System.Threading.CancellationToken.Register%2A?displayProperty=fullName>方法。</xref:System.Threading.CancellationToken.Register%2A?displayProperty=fullName> </xref:System.Web.HttpContext> 回调可能会与其他 ASP.NET 并发运行或应用程序代码。      -保持短时间运行并且非阻塞的回调方法。      -请尽量避免引发从回调方法中的异常。       在集成模式下此属性才适用到 Internet 信息服务 (IIS) 7.5。 如果你调用它而无需右 IIS 版本或管道模式下，<xref:System.PlatformNotSupportedException>引发。</xref:System.PlatformNotSupportedException> 若要确定 IIS 版本，请使用<xref:System.Web.HttpRuntime.IISVersion%2A>。</xref:System.Web.HttpRuntime.IISVersion%2A> 若要确定管道模式，请使用<xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A>。</xref:System.Web.HttpRuntime.UsingIntegratedPipeline%2A>"
  syntax:
    content: public System.Threading.CancellationToken ClientDisconnectedToken { get; }
    return:
      type: System.Threading.CancellationToken
      description: "取消标记。"
  overload: System.Web.HttpResponse.ClientDisconnectedToken*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Close
  id: Close
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Close()
  nameWithType: HttpResponse.Close()
  fullName: System.Web.HttpResponse.Close()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "关闭到客户端的套接字连接。"
  remarks: "此方法以突然的方式终止客户端连接，并不用于正常处理 HTTP 请求。 该方法将重置数据包发送到客户端，可能会导致在服务器、 客户端，或在某处之间会删除已缓冲的响应数据。       但是，通常你应调用<xref:System.Web.HttpApplication.CompleteRequest%2A>而是如果你想要跳转到<xref:System.Web.HttpApplication.EndRequest>事件，将发送到客户端的响应。</xref:System.Web.HttpApplication.EndRequest> </xref:System.Web.HttpApplication.CompleteRequest%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Web.HttpResponse.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.ContentEncoding
  id: ContentEncoding
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: ContentEncoding
  nameWithType: HttpResponse.ContentEncoding
  fullName: System.Web.HttpResponse.ContentEncoding
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置输出流的 HTTP 字符集。"
  remarks: "默认`ContentEncoding`可以在 ASP.NET 配置文件中指定[全球化元素 （ASP.NET 设置架构）](http://msdn.microsoft.com/en-us/e2dffc8e-ebd2-439b-a2fd-e3ac5e620da7)部分。 如果由客户端指定 ContentEncoding，则将重写默认配置设置。"
  example:
  - "The following example writes a human-readable description of the character set encoding to the output stream.  \n  \n [!code-cs[Classic HttpResponse.ContentEncoding Example#1](~/add/codesnippet/csharp/p-system.web.httprespons_0_1.cs)]\n [!code-vb[Classic HttpResponse.ContentEncoding Example#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_0_1.vb)]"
  syntax:
    content: public System.Text.Encoding ContentEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "A<xref:System.Text.Encoding>对象，其中包含当前响应的字符集相关信息。</xref:System.Text.Encoding>"
  overload: System.Web.HttpResponse.ContentEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "尝试设置为 ContentEncoding <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.HttpResponse.ContentType
  id: ContentType
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: ContentType
  nameWithType: HttpResponse.ContentType
  fullName: System.Web.HttpResponse.ContentType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置输出流的 HTTP MIME 类型。"
  remarks: ''
  example:
  - "The following example sets the ContentType property for the response to image/jpeg, calls the <xref:System.Web.HttpResponse.Clear%2A> method to remove other content that might be attached to the response, and then sets the <xref:System.Web.HttpResponse.BufferOutput%2A> property to true so that the complete page will be processed before any content is sent to the requesting client.  \n  \n For a complete example, see the <xref:System.Web.HttpResponse> class.  \n  \n [!code-cs[System.Web.HttpResponse_Samples1#2](~/add/codesnippet/csharp/p-system.web.httprespons_2_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Samples1#2](~/add/codesnippet/visualbasic/p-system.web.httprespons_2_1.aspx)]"
  syntax:
    content: public string ContentType { get; set; }
    return:
      type: System.String
      description: "输出流的 HTTP MIME 类型。 默认值是&quot;<xref uid=&quot;langword_csharp_text/html&quot; name=&quot;text/html&quot; href=&quot;&quot;></xref>&quot;。"
  overload: System.Web.HttpResponse.ContentType*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "ContentType 属性设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.HttpResponse.Cookies
  id: Cookies
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Cookies
  nameWithType: HttpResponse.Cookies
  fullName: System.Web.HttpResponse.Cookies
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取响应 cookie 集合。"
  remarks: "ASP.NET 包括两个内部 cookie 集合。 通过访问的集合<xref:System.Web.HttpRequest.Cookies%2A>集合<xref:System.Web.HttpRequest>包含传输到中的服务器客户端的 cookie`Cookie`标头。</xref:System.Web.HttpRequest> </xref:System.Web.HttpRequest.Cookies%2A> 通过 Cookie 集合的访问的集合<xref:System.Web.HttpResponse>包含新 cookie 在服务器上创建和传输到客户端在`Set-Cookie`标头。</xref:System.Web.HttpResponse>       通过使用 Cookie 集合中添加一个 cookie 后，cookie 将立即出现在<xref:System.Web.HttpRequest.Cookies%2A?displayProperty=fullName>集合，即使不向客户端发送响应。</xref:System.Web.HttpRequest.Cookies%2A?displayProperty=fullName>"
  example:
  - "The following example creates a new cookie named `LastVisit`, sets the value of the cookie to the current date and time, and adds the cookie to the current cookie collection. All cookies in the cookie collection are sent to the client in the `Set-Cookie` header with the HTTP output stream.  \n  \n [!code-cs[Classic HttpResponse.Cookies Example#1](~/add/codesnippet/csharp/p-system.web.httprespons_12_1.cs)]\n [!code-vb[Classic HttpResponse.Cookies Example#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_12_1.vb)]"
  syntax:
    content: public System.Web.HttpCookieCollection Cookies { get; }
    return:
      type: System.Web.HttpCookieCollection
      description: "响应 cookie 集合。"
  overload: System.Web.HttpResponse.Cookies*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.DisableKernelCache
  id: DisableKernelCache
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: DisableKernelCache()
  nameWithType: HttpResponse.DisableKernelCache()
  fullName: System.Web.HttpResponse.DisableKernelCache()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "禁用当前响应的内核缓存。"
  remarks: "如果不支持的内核缓存，则此方法无效。"
  syntax:
    content: public void DisableKernelCache ();
    parameters: []
  overload: System.Web.HttpResponse.DisableKernelCache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.DisableUserCache
  id: DisableUserCache
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: DisableUserCache()
  nameWithType: HttpResponse.DisableUserCache()
  fullName: System.Web.HttpResponse.DisableUserCache()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "禁用 IIS 用户-方式来缓存反映。"
  remarks: "如果不支持 IIS 用户-方式来缓存，此方法将返回而不执行任何操作。"
  syntax:
    content: public void DisableUserCache ();
    parameters: []
  overload: System.Web.HttpResponse.DisableUserCache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.End
  id: End
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: End()
  nameWithType: HttpResponse.End()
  fullName: System.Web.HttpResponse.End()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将当前缓冲的所有输出都发送到客户端，停止执行的页上，并引发<xref href=&quot;System.Web.HttpApplication.EndRequest&quot;></xref>事件。"
  remarks: "提供此方法仅为了与 ASP 的兼容性-即，与前面 ASP.NET 的基于 COM 的 Web 编程技术的兼容性。 如果你想要跳转到<xref:System.Web.HttpApplication.EndRequest>事件发送到客户端的响应，它是通常更可取的方法调用<xref:System.Web.HttpApplication.CompleteRequest%2A>相反。</xref:System.Web.HttpApplication.CompleteRequest%2A> </xref:System.Web.HttpApplication.EndRequest>       若要模拟的行为`End`方法 ASP 中的，此方法尝试引发<xref:System.Threading.ThreadAbortException>异常。</xref:System.Threading.ThreadAbortException> 如果此尝试成功，将中止调用线程，这是对站点的性能造成不利影响。 在这种情况下，执行结束方法在调用后的没有代码。       如果 End 方法不能引发<xref:System.Threading.ThreadAbortException>，而是将响应字节数刷新到客户端。</xref:System.Threading.ThreadAbortException> 这是以同步方式，也可以是对站点的性能造成不利影响。       在任一情况下 (是否<xref:System.Threading.ThreadAbortException>成功引发异常)，响应管道向前跳到<xref:System.Web.HttpApplication.EndRequest>事件。</xref:System.Web.HttpApplication.EndRequest> </xref:System.Threading.ThreadAbortException>       <xref:System.Web.HttpApplication.CompleteRequest%2A>方法不会引发异常，并在调用之后的代码<xref:System.Web.HttpApplication.CompleteRequest%2A>可能执行方法。</xref:System.Web.HttpApplication.CompleteRequest%2A> </xref:System.Web.HttpApplication.CompleteRequest%2A> 如果您的意图是为了避免执行的后续代码，并且端的性能损失就是可接受，您可以调用结束，而不是<xref:System.Web.HttpApplication.CompleteRequest%2A>。</xref:System.Web.HttpApplication.CompleteRequest%2A>"
  syntax:
    content: public void End ();
    parameters: []
  overload: System.Web.HttpResponse.End*
  exceptions:
  - type: System.Threading.ThreadAbortException
    commentId: T:System.Threading.ThreadAbortException
    description: "结束对的调用已终止当前请求。"
  platform:
  - net462
- uid: System.Web.HttpResponse.EndFlush(System.IAsyncResult)
  id: EndFlush(System.IAsyncResult)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: EndFlush(IAsyncResult)
  nameWithType: HttpResponse.EndFlush(IAsyncResult)
  fullName: System.Web.HttpResponse.EndFlush(IAsyncResult)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "完成异步刷新操作。"
  syntax:
    content: public void EndFlush (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "异步结果对象中。"
  overload: System.Web.HttpResponse.EndFlush*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "不支持异步刷新和<code> asyncResult </code>参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "不支持异步刷新和<code> asyncResult </code>参数不能强制转换为`FlushAsyncResult`对象。"
  platform:
  - net462
- uid: System.Web.HttpResponse.Expires
  id: Expires
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Expires
  nameWithType: HttpResponse.Expires
  fullName: System.Web.HttpResponse.Expires
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置在浏览器上缓存的页面过期之前的分钟数。 如果用户在页面过期之前返回同一页上，将显示缓存的版本。 过期为了与 ASP 的早期版本的兼容性。"
  remarks: "`Expires`，<xref:System.Web.HttpResponse.ExpiresAbsolute%2A>和<xref:System.Web.HttpResponse.CacheControl%2A>的方法已弃用属性<xref:System.Web.HttpCachePolicy>类可通过<xref:System.Web.HttpResponse.Cache%2A>内部函数的对象以控制 Internet 信息服务 (IIS) 输出缓存和客户端缓存。</xref:System.Web.HttpResponse.Cache%2A> </xref:System.Web.HttpCachePolicy> </xref:System.Web.HttpResponse.CacheControl%2A> </xref:System.Web.HttpResponse.ExpiresAbsolute%2A>"
  syntax:
    content: public int Expires { get; set; }
    return:
      type: System.Int32
      description: "该页过期之前的分钟数。"
  overload: System.Web.HttpResponse.Expires*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.ExpiresAbsolute
  id: ExpiresAbsolute
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: ExpiresAbsolute
  nameWithType: HttpResponse.ExpiresAbsolute
  fullName: System.Web.HttpResponse.ExpiresAbsolute
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个绝对日期和时间从缓存中移删除缓存的信息。 ExpiresAbsolute 提供为了与 ASP 的早期版本兼容。"
  remarks: "`ExpiresAbsolute`， <xref:System.Web.HttpResponse.Expires%2A>，和<xref:System.Web.HttpResponse.CacheControl%2A>的方法已弃用属性<xref:System.Web.HttpCachePolicy>类可通过<xref:System.Web.HttpResponse.Cache%2A>内部函数的对象以控制 Internet 信息服务 (IIS) 输出缓存和客户端缓存。</xref:System.Web.HttpResponse.Cache%2A> </xref:System.Web.HttpCachePolicy> </xref:System.Web.HttpResponse.CacheControl%2A> </xref:System.Web.HttpResponse.Expires%2A>"
  syntax:
    content: public DateTime ExpiresAbsolute { get; set; }
    return:
      type: System.DateTime
      description: "过期日期和时间的页。"
  overload: System.Web.HttpResponse.ExpiresAbsolute*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Filter
  id: Filter
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Filter
  nameWithType: HttpResponse.Filter
  fullName: System.Web.HttpResponse.Filter
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个包装筛选器对象，该对象用于修改在传输之前的 HTTP 实体正文。"
  remarks: "当你创建`Stream`对象，并将筛选器属性设置为`Stream`对象，所有 HTTP 发送的输出<xref:System.Web.HttpResponse.Write%2A>通过筛选器。</xref:System.Web.HttpResponse.Write%2A>"
  example:
  - "The following example is an ASP.NET page that sets the Filter property to a new instance of the `UpperCaseFilter` class, a custom <xref:System.IO.Stream> class that converts all text that passes through it to uppercase. The information about the request is saved to a text file, and then the Filter property is set. After the response filter is in place, the code calls the <xref:System.Web.HttpRequest.MapPath%2A> method to get the absolute path to a text file named `TestFile.txt` that serves as the source for the content of the response. The code then creates a new <xref:System.IO.StreamReader> object to read the text file from beginning to end, and then calls the <xref:System.Web.HttpResponse.Write%2A> method to display the content of the file on the page.  \n  \n [!code-vb[System.Web.HttpRequest_Samples2#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_8_1.aspx)]\n [!code-cs[System.Web.HttpRequest_Samples2#1](~/add/codesnippet/csharp/p-system.web.httprespons_8_1.aspx)]"
  syntax:
    content: public System.IO.Stream Filter { get; set; }
    return:
      type: System.IO.Stream
      description: "<xref:System.IO.Stream>用作输出筛选器的对象。</xref:System.IO.Stream>"
  overload: System.Web.HttpResponse.Filter*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "不允许与实体进行筛选。"
  platform:
  - net462
- uid: System.Web.HttpResponse.Flush
  id: Flush
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Flush()
  nameWithType: HttpResponse.Flush()
  fullName: System.Web.HttpResponse.Flush()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将当前缓冲的所有输出都发送到客户端。"
  remarks: "强制所有当前缓冲的输出发送到客户端。 Flush 方法可以在请求处理期间多次调用。"
  example:
  - "The following example calls the <xref:System.Drawing.Graphics.Save%2A> method to save a <xref:System.Drawing.Bitmap> object to the <xref:System.Web.HttpResponse.OutputStream%2A> property and converts the image to the JPEG format. The code then calls the `Dispose` method on the <xref:System.Drawing.Bitmap> object and a <xref:System.Drawing.Graphics> object, releasing the resources that they were using. It then calls the Flush method to send the content of the response to the requesting client.  \n  \n For a complete example, see the <xref:System.Web.HttpResponse> class.  \n  \n [!code-cs[System.Web.HttpResponse_Samples1#1](~/add/codesnippet/csharp/m-system.web.httprespons_24_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Samples1#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_24_1.aspx)]"
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.Web.HttpResponse.Flush*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送响应后，会刷新缓存。"
  platform:
  - net462
- uid: System.Web.HttpResponse.FlushAsync
  id: FlushAsync
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: FlushAsync()
  nameWithType: HttpResponse.FlushAsync()
  fullName: System.Web.HttpResponse.FlushAsync()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "向客户端异步发送当前缓冲的所有输出。"
  syntax:
    content: public System.Threading.Tasks.Task FlushAsync ();
    parameters: []
    return:
      type: System.Threading.Tasks.Task
      description: "A<xref:System.Threading.Tasks.Task>表示异步操作。</xref:System.Threading.Tasks.Task>"
  overload: System.Web.HttpResponse.FlushAsync*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.HeaderEncoding
  id: HeaderEncoding
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: HeaderEncoding
  nameWithType: HttpResponse.HeaderEncoding
  fullName: System.Web.HttpResponse.HeaderEncoding
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置<xref:System.Text.Encoding>对象，表示当前标头的编码输出流。</xref:System.Text.Encoding>"
  remarks: "HeaderEncoding 属性使您能够禁用或更改<xref:System.Text.Encoding>上使用的响应标头对象<xref:System.Text.ASCIIEncoding>， <xref:System.Text.UnicodeEncoding>， <xref:System.Text.UTF7Encoding>，或<xref:System.Text.UTF8Encoding>对象。</xref:System.Text.UTF8Encoding> </xref:System.Text.UTF7Encoding> </xref:System.Text.UnicodeEncoding> </xref:System.Text.ASCIIEncoding> </xref:System.Text.Encoding> 默认编码值是<xref:System.Text.UTF8Encoding>类。</xref:System.Text.UTF8Encoding>       通过更改 HeaderEncoding 属性的类型，你可能会提高某些恶意攻击的风险或导致通过响应标头发送敏感数据。 可以避免标头注入式攻击，情况情况下，通过将对默认设置的响应该 HeaderEncoding 属性。 易受攻击的应用程序的攻击无法回显导致将受信任数据作为响应标头的一部分。 如果由于必需的标头中的连续行而禁用 HeaderEncoding 或任何标头构造基于的不受信任的数据的结果，应在发送到响应流之前验证标头数据。"
  syntax:
    content: public System.Text.Encoding HeaderEncoding { get; set; }
    return:
      type: System.Text.Encoding
      description: "<xref:System.Text.Encoding>包含当前标头的字符集相关信息。</xref:System.Text.Encoding>"
  overload: System.Web.HttpResponse.HeaderEncoding*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "编码的值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "The encoding value is <xref:System.Text.Encoding.Unicode*>.  \n  \n \\- or -  \n  \n The headers have already been sent."
  platform:
  - net462
- uid: System.Web.HttpResponse.Headers
  id: Headers
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Headers
  nameWithType: HttpResponse.Headers
  fullName: System.Web.HttpResponse.Headers
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取响应标头的集合。"
  remarks: "标头属性只支持使用[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]集成的管道模式并且至少.NET Framework 3.0。 当你尝试访问的标头属性和这两个条件之一不满足，<xref:System.PlatformNotSupportedException>引发。</xref:System.PlatformNotSupportedException>"
  syntax:
    content: public System.Collections.Specialized.NameValueCollection Headers { get; }
    return:
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref>响应标头。"
  overload: System.Web.HttpResponse.Headers*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该操作要求中的集成的管道模式[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]并且至少.NET Framework 版本 3.0。"
  platform:
  - net462
- uid: System.Web.HttpResponse.HeadersWritten
  id: HeadersWritten
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: HeadersWritten
  nameWithType: HttpResponse.HeadersWritten
  fullName: System.Web.HttpResponse.HeadersWritten
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "[在.NET Framework 4.5.2 及更高版本中受支持]      获取一个值，该值指示是否已写入响应标头。"
  syntax:
    content: public bool HeadersWritten { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已编写响应标头;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.HeadersWritten*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.IsClientConnected
  id: IsClientConnected
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: IsClientConnected
  nameWithType: HttpResponse.IsClientConnected
  fullName: System.Web.HttpResponse.IsClientConnected
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个值，指示客户端是否仍连接到服务器。"
  remarks: "IsClientConnected 属性返回`false`当以下条件都为真:-与客户端的连接已终止。 发生这种情况<xref:System.Web.HttpResponse.Close%2A>调用方法，或者如果客户端停止 Web 页的执行，或浏览到另一页。</xref:System.Web.HttpResponse.Close%2A>      -<xref:System.Web.HttpWorkerRequest>正在处理请求的对象是`null`或<xref:System.Web.HttpWorkerRequest.IsClientConnected%2A?displayProperty=fullName>方法返回`false`。</xref:System.Web.HttpWorkerRequest.IsClientConnected%2A?displayProperty=fullName> </xref:System.Web.HttpWorkerRequest> 如果自定义<xref:System.Web.HttpWorkerRequest>对象处理该请求，则<xref:System.Web.HttpWorkerRequest.IsClientConnected%2A?displayProperty=fullName>方法可能基于设置自定义的条件。</xref:System.Web.HttpWorkerRequest.IsClientConnected%2A?displayProperty=fullName> </xref:System.Web.HttpWorkerRequest> 例如，自定义的辅助请求可能会在一段时间后强制超时。"
  example:
  - "The following example uses the IsClientConnected property to check whether the client that is requesting the page remains connected to the server. If IsClientConnected is true, the code calls the <xref:System.Web.HttpResponse.Redirect%2A> method, and the client will view another page. If IsClientConnected is false, then the code calls the <xref:System.Web.HttpResponse.End%2A> method and all page processing is terminated.  \n  \n [!code-cs[System.Web.HttpResponse_Sample4#1](~/add/codesnippet/csharp/p-system.web.httprespons_1_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Sample4#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_1_1.aspx)]"
  syntax:
    content: public bool IsClientConnected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果客户端当前连接;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.IsClientConnected*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.IsRequestBeingRedirected
  id: IsRequestBeingRedirected
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: IsRequestBeingRedirected
  nameWithType: HttpResponse.IsRequestBeingRedirected
  fullName: System.Web.HttpResponse.IsRequestBeingRedirected
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个布尔值，该值指示客户端传输到新位置。"
  remarks: "使用具有的 IsRequestBeingRedirected 属性<xref:System.Web.HttpResponse.RedirectLocation%2A>属性测试，并确定是否的绝对 URI 都传输到客户端在 HTTP`Location`标头是与当前 URI 和是否正在被传输到新的目标的 URI 将不同。</xref:System.Web.HttpResponse.RedirectLocation%2A>"
  syntax:
    content: public bool IsRequestBeingRedirected { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果位置响应标头的值不同于当前的位置;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.IsRequestBeingRedirected*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Output
  id: Output
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Output
  nameWithType: HttpResponse.Output
  fullName: System.Web.HttpResponse.Output
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "实现到传出 HTTP 响应流的文本的输出。"
  remarks: ''
  example:
  - "The following example is an ASP.NET page that contains a <xref:System.Web.UI.WebControls.TextBox> control that has its <xref:System.Web.UI.WebControls.TextBox.TextMode%2A> property set to <xref:System.Web.UI.WebControls.TextBoxMode>. The page's code takes the text that a user enters in the <xref:System.Web.UI.WebControls.TextBox.TextMode%2A>, uses the <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method to HTML encode it, and the Output property to display the encoded string to the page.  \n  \n [!code-vb[System.Web.HttpResponse.Output_Sample#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_5_1.aspx)]\n [!code-cs[System.Web.HttpResponse.Output_Sample#1](~/add/codesnippet/csharp/p-system.web.httprespons_5_1.aspx)]"
  syntax:
    content: public System.IO.TextWriter Output { get; set; }
    return:
      type: System.IO.TextWriter
      description: "A<xref:System.IO.TextWriter>实现到客户端的自定义输出的对象。</xref:System.IO.TextWriter>"
  overload: System.Web.HttpResponse.Output*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.OutputStream
  id: OutputStream
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: OutputStream
  nameWithType: HttpResponse.OutputStream
  fullName: System.Web.HttpResponse.OutputStream
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "实现到传出 HTTP 内容主体的二进制输出。"
  remarks: "Starting with the .NET Framework version 2.0, when you use the [Stream.Write(Byte\\[\\], Int32, Int32)](assetId:///M:System.IO.Stream.Write(System.Byte[],System.Int32,System.Int32)?qualifyHint=True&autoUpgrade=False) method of the IO stream returned by the OutputStream property, the following exceptions might be thrown:  \n  \n-   <xref:System.ArgumentOutOfRangeException>, if the `offset` or `count` parameter is negative or if the `buffer` parameter's length minus the `offset` parameter is less than or equal to zero.  \n  \n-   <xref:System.ArgumentNullException>, if the `buffer` parameter is `null`."
  example:
  - "The following example calls the <xref:System.Drawing.Image.Save%2A> method to save a <xref:System.Drawing.Bitmap> object to the OutputStream property, and converts the image to the JPEG format. The code then calls the Dispose method on the <xref:System.Drawing.Bitmap> object and a <xref:System.Drawing.Graphics> object, releasing the resources that they were using. Finally, the code calls the <xref:System.Web.HttpResponse.Flush%2A> method to send the content of the response to the requesting client.  \n  \n For a complete example, see the <xref:System.Web.HttpResponse> class.  \n  \n [!code-cs[System.Web.HttpResponse_Samples1#1](~/add/codesnippet/csharp/p-system.web.httprespons_13_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Samples1#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_13_1.aspx)]"
  syntax:
    content: public System.IO.Stream OutputStream { get; }
    return:
      type: System.IO.Stream
      description: "IO<xref:System.IO.Stream>表示传出 HTTP 内容主体的原始内容。</xref:System.IO.Stream>"
  overload: System.Web.HttpResponse.OutputStream*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code>OutputStream</code>不可用。"
  platform:
  - net462
- uid: System.Web.HttpResponse.Pics(System.String)
  id: Pics(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Pics(String)
  nameWithType: HttpResponse.Pics(String)
  fullName: System.Web.HttpResponse.Pics(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将追加 HTTP <xref uid=&quot;langword_csharp_PICS-Label&quot; name=&quot;PICS-Label&quot; href=&quot;&quot;> </xref>写入输出流的标头。"
  remarks: "平台 Internet 内容所选内容 （图片） 是万维网联合会 (W3C) 标准，用于内容标签。 图片是实质上是用于创建的分级系统的语言。       任何该值可以为图片标签;ASP.NET 不会验证标签。 字符串的最大长度为 255 个字符。 有关图片标准和语法的详细信息，请参阅[World Wide Web Consortium](http://go.microsoft.com/fwlink/?LinkID=37125) Web 站点。"
  example:
  - "The following example is an ASP.NET page that displays an image. The page code calls the Pics method to set the HTTP `PICS-Label` header for the response. The string that is passed as the parameter to the Pics method represents a rating label generated from the Internet Content Rating Association (ICRA) Web site.  \n  \n [!code-cs[System.Web.HttpResponse_Sample4#2](~/add/codesnippet/csharp/m-system.web.httprespons_8_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Sample4#2](~/add/codesnippet/visualbasic/m-system.web.httprespons_8_1.aspx)]"
  syntax:
    content: public void Pics (string value);
    parameters:
    - id: value
      type: System.String
      description: "要添加到的字符串<xref uid=&quot;langword_csharp_PICS-Label&quot; name=&quot;PICS-Label&quot; href=&quot;&quot;></xref>标头。"
  overload: System.Web.HttpResponse.Pics*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.PushPromise(System.String)
  id: PushPromise(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: PushPromise(String)
  nameWithType: HttpResponse.PushPromise(String)
  fullName: System.Web.HttpResponse.PushPromise(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: '此 API 是支持将推送承诺发送到 HTTP 2.0 客户端的应用程序。 你可以找到更多详细信息有关 Http2 服务器推送到[HTTP/2 规范第 8.2 节︰ 服务器推送](http://http2.github.io/http2-spec/#PushResources)。'
  remarks: "PushPromise 是不确定的而且应用程序不应具有依赖于它的逻辑。 其唯一的目的是在某些情况下的性能优势。 有可能会导致完全忽略推送请求的多个条件 （协议和实现）。 假定条件下基于即发即弃。"
  syntax:
    content: public void PushPromise (string path);
    parameters:
    - id: path
      type: System.String
      description: "推送请求的 URL。 它应为服务器想要将推送到客户端的相对资源的虚拟路径。"
  overload: System.Web.HttpResponse.PushPromise*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.PushPromise(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  id: PushPromise(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: PushPromise(String,String,NameValueCollection)
  nameWithType: HttpResponse.PushPromise(String,String,NameValueCollection)
  fullName: System.Web.HttpResponse.PushPromise(String,String,NameValueCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: '此 API 是支持将推送承诺发送到 HTTP 2.0 客户端的应用程序。 你可以找到更多详细信息有关 Http2 服务器推送到[HTTP/2 规范第 8.2 节︰ 服务器推送](http://http2.github.io/http2-spec/#PushResources)。'
  remarks: "PushPromise 是不确定的而且应用程序不应具有依赖于它的逻辑。 其唯一的目的是在某些情况下的性能优势。 有可能会导致完全忽略推送请求的多个条件 （协议和实现）。 假定条件下基于即发即弃。"
  syntax:
    content: public void PushPromise (string path, string method, System.Collections.Specialized.NameValueCollection headers);
    parameters:
    - id: path
      type: System.String
      description: "推送请求的 URL。 它应为服务器想要将推送到客户端的相对资源的虚拟路径。"
    - id: method
      type: System.String
      description: "将由推送请求使用的 http 请求方法。"
    - id: headers
      type: System.Collections.Specialized.NameValueCollection
      description: "将由推送请求使用的 http 请求头。"
  overload: System.Web.HttpResponse.PushPromise*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Redirect(System.String)
  id: Redirect(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Redirect(String)
  nameWithType: HttpResponse.Redirect(String)
  fullName: System.Web.HttpResponse.Redirect(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将请求重定向到新 URL 并指定新的 URL。"
  remarks: "调用重定向等效于调用<xref:System.Web.HttpResponse.Redirect%2A>第二个参数设置为`true`。</xref:System.Web.HttpResponse.Redirect%2A>       将调用重定向<xref:System.Web.HttpResponse.End%2A>该类会引发<xref:System.Threading.ThreadAbortException>完成后的异常。</xref:System.Threading.ThreadAbortException> </xref:System.Web.HttpResponse.End%2A> 此异常有不利的影响对 Web 应用程序性能。 因此，我们建议，而不是此重载使用<xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29?displayProperty=fullName>重载，并传递`false`为`endResponse`参数，，然后调用<xref:System.Web.HttpApplication.CompleteRequest%2A>方法。</xref:System.Web.HttpApplication.CompleteRequest%2A> </xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29?displayProperty=fullName> 有关详细信息，请参阅<xref:System.Web.HttpResponse.End%2A>方法。</xref:System.Web.HttpResponse.End%2A>      1> [!NOTE]&1;> 移动的页面，如果你的应用程序依赖于无 cookie 会话，或可能会收到来自移动设备的需要无 cookie 会话的请求路径中使用波形符 （~） 会导致创建新的会话和可能会丢失会话数据。 具有路径移动控件上设置属性，如&quot;~ / 路径&quot;，解决路径使用<xref:System.Web.UI.MobileControls.MobileControl.ResolveUrl%2A>&quot;~ / 路径&quot;之前将其分配给属性。</xref:System.Web.UI.MobileControls.MobileControl.ResolveUrl%2A>       ASP.NET 执行通过返回 HTTP 状态代码为 302 重定向。 一种替代方式，将控制转移到另一页是<xref:System.Web.HttpServerUtility.Transfer%2A>方法。</xref:System.Web.HttpServerUtility.Transfer%2A> <xref:System.Web.HttpServerUtility.Transfer%2A>方法是通常更高效，因为它不会往返过程导致向客户端。</xref:System.Web.HttpServerUtility.Transfer%2A> 有关详细信息，请参阅[如何︰ 将用户重定向到另一页](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example forces an unconditional redirection to another Web site.  \n  \n [!code-cs[Classic HttpResponse.Redirect Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_9_1.cs)]\n [!code-vb[Classic HttpResponse.Redirect Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_9_1.vb)]"
  syntax:
    content: public void Redirect (string url);
    parameters:
    - id: url
      type: System.String
      description: "目标位置。"
  overload: System.Web.HttpResponse.Redirect*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头后尝试重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.Redirect(System.String,System.Boolean)
  id: Redirect(System.String,System.Boolean)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Redirect(String,Boolean)
  nameWithType: HttpResponse.Redirect(String,Boolean)
  fullName: System.Web.HttpResponse.Redirect(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "客户端重定向到新 URL。 指定新的 URL 以及是否应终止当前页的执行。"
  remarks: "可以为目标位置指定绝对 URL (例如，http://www.contoso.com/default.aspx) 或相对 URL (例如，Default.aspx)，但是某些浏览器可能拒绝相对 URL。       当你使用此方法在页处理程序中一页并开始新请求的另一页，设置终止请求`endResponse`到`false`，然后调用<xref:System.Web.HttpApplication.CompleteRequest%2A>方法。</xref:System.Web.HttpApplication.CompleteRequest%2A> 如果指定`true`为`endResponse`参数，此方法调用<xref:System.Web.HttpResponse.End%2A>原始请求，将引发方法<xref:System.Threading.ThreadAbortException>完成时的异常。</xref:System.Threading.ThreadAbortException> </xref:System.Web.HttpResponse.End%2A> 此异常有不利的影响对 Web 应用程序性能，这正是传递`false`为`endResponse`建议参数。 有关详细信息，请参阅<xref:System.Web.HttpResponse.End%2A>方法。</xref:System.Web.HttpResponse.End%2A>      1> [!NOTE]&1;> 移动页面，如果你的应用程序依赖于无 cookie 会话，或可能会收到来自移动设备的需要无 cookie 会话的请求路径中使用波形符 （~） 可以创建新的会话并可能会丢失会话数据。 具有路径移动控件上设置属性，如&quot;~ / 路径&quot;，解决路径使用<xref:System.Web.UI.MobileControls.MobileControl.ResolveUrl%2A>&quot;~ / 路径&quot;之前将其分配给属性。</xref:System.Web.UI.MobileControls.MobileControl.ResolveUrl%2A>       ASP.NET 执行通过返回 HTTP 状态代码为 302 重定向。 一种替代方式，将控制转移到另一页是<xref:System.Web.HttpServerUtility.Transfer%2A>方法。</xref:System.Web.HttpServerUtility.Transfer%2A> <xref:System.Web.HttpServerUtility.Transfer%2A>方法是通常更高效，因为它不会往返过程导致向客户端。</xref:System.Web.HttpServerUtility.Transfer%2A> 有关详细信息，请参阅[如何︰ 将用户重定向到另一页](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example uses the <xref:System.Web.HttpResponse.IsClientConnected%2A> property to check whether the client that is requesting the page remains connected to the server. If <xref:System.Web.HttpResponse.IsClientConnected%2A> is true, the code calls the Redirect method, and the client will view another page. If <xref:System.Web.HttpResponse.IsClientConnected%2A> is false, then the code calls the <xref:System.Web.HttpResponse.End%2A> method and all page processing is terminated.  \n  \n [!code-cs[System.Web.HttpResponse_Sample4#1](~/add/codesnippet/csharp/m-system.web.httprespons_16_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Sample4#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_16_1.aspx)]"
  syntax:
    content: public void Redirect (string url, bool endResponse);
    parameters:
    - id: url
      type: System.String
      description: "目标位置。"
    - id: endResponse
      type: System.Boolean
      description: "指示是否应终止当前页的执行。"
  overload: System.Web.HttpResponse.Redirect*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>url</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>url</code>包含换行符。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头后尝试重定向。"
  - type: System.ApplicationException
    commentId: T:System.ApplicationException
    description: "页请求是回调的结果。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectLocation
  id: RedirectLocation
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectLocation
  nameWithType: HttpResponse.RedirectLocation
  fullName: System.Web.HttpResponse.RedirectLocation
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置的 HTTP 值<xref uid=&quot;langword_csharp_Location&quot; name=&quot;Location&quot; href=&quot;&quot;></xref>标头。"
  remarks: ''
  example:
  - "The following example shows how to use this property to specify the redirect URL when you code a permanent redirect by using the HTTP 301 response code.  \n  \n```c#  \nResponse.StatusCode = 301;  \nResponse.Status = \"301 Moved Permanently\";  \nResponse.RedirectLocation = \"http://www.newurl.com \";  \nResponse.End();  \n```"
  syntax:
    content: public string RedirectLocation { get; set; }
    return:
      type: System.String
      description: "传输到 http 客户端的绝对 URI <xref uid=&quot;langword_csharp_Location&quot; name=&quot;Location&quot; href=&quot;&quot;> </xref>标头。"
  overload: System.Web.HttpResponse.RedirectLocation*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "HTTP 标头都已写入。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectPermanent(System.String)
  id: RedirectPermanent(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectPermanent(String)
  nameWithType: HttpResponse.RedirectPermanent(String)
  fullName: System.Web.HttpResponse.RedirectPermanent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "执行从所请求 URL 到所指定 URL 的永久重定向。"
  remarks: "RedirectPermanent 方法重载提供 301 的 HTTP 状态代码在响应中，并包括重定向到请求的 URL。 HTTP 状态代码为 301 是标准 HTTP 响应代码。 则表示永久重定向存在，并且它提供了重定向位置。       调用 RedirectPermanent 方法重载会终止响应。"
  syntax:
    content: public void RedirectPermanent (string url);
    parameters:
    - id: url
      type: System.String
      description: "要为将请求重定向的位置。"
  overload: System.Web.HttpResponse.RedirectPermanent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>url</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>url</code>包括换行符 (` `)。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectPermanent(System.String,System.Boolean)
  id: RedirectPermanent(System.String,System.Boolean)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectPermanent(String,Boolean)
  nameWithType: HttpResponse.RedirectPermanent(String,Boolean)
  fullName: System.Web.HttpResponse.RedirectPermanent(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "执行从所请求 URL 的永久重定向，到指定的 URL，并提供用于完成响应的选项。"
  remarks: "RedirectPermanent 方法重载提供 301 的 HTTP 状态代码在响应中，并包括重定向到请求的 URL。 此方法重载还提供了用于指定是否终止或用于完成响应执行重定向后的选项。 HTTP 状态代码为 301 是标准 HTTP 响应代码。 则表示永久重定向存在，并且它提供了重定向位置。"
  syntax:
    content: public void RedirectPermanent (string url, bool endResponse);
    parameters:
    - id: url
      type: System.String
      description: "要为将请求重定向的位置。"
    - id: endResponse
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要终止响应;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.RedirectPermanent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>url</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>url</code>包括换行符 (` `)。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoute(System.Object)
  id: RedirectToRoute(System.Object)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoute(Object)
  nameWithType: HttpResponse.RedirectToRoute(Object)
  fullName: System.Web.HttpResponse.RedirectToRoute(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由参数值将请求重定向到新 URL。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>       此方法中传递的对象转换为`routeValues`到<xref:System.Web.Routing.RouteValueDictionary?displayProperty=fullName>对象使用<xref:System.Web.Routing.RouteValueDictionary.%23ctor%28System.Object%29?displayProperty=fullName>构造函数。</xref:System.Web.Routing.RouteValueDictionary.%23ctor%28System.Object%29?displayProperty=fullName> </xref:System.Web.Routing.RouteValueDictionary?displayProperty=fullName> <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>然后调用方法来确定 URL。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 302 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that has parameters that are named `productid` and `category`.  \n  \n```vb#  \nResponse.RedirectToRoute(  \n  New With {.productid = \"1\", .category = \"widgets\"})  \n```  \n  \n```c#  \nResponse.RedirectToRoute(  \n  new { productid = \"1\", category = \"widgets\" });  \n```"
  syntax:
    content: public void RedirectToRoute (object routeValues);
    parameters:
    - id: routeValues
      type: System.Object
      description: "路由参数值。"
  overload: System.Web.HttpResponse.RedirectToRoute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoute(System.String)
  id: RedirectToRoute(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoute(String)
  nameWithType: HttpResponse.RedirectToRoute(String)
  fullName: System.Web.HttpResponse.RedirectToRoute(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由名称将请求重定向到新 URL。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>       此方法会将传入的路由名称`routeName`到通过 URL<xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>方法。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 302 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that is named `Products`.  \n  \n```vb#  \nResponse.RedirectToRoute(\"Products\")  \n```  \n  \n```c#  \nResponse.RedirectToRoute(\"Products\");  \n```"
  syntax:
    content: public void RedirectToRoute (string routeName);
    parameters:
    - id: routeName
      type: System.String
      description: "路由的名称。"
  overload: System.Web.HttpResponse.RedirectToRoute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoute(System.Web.Routing.RouteValueDictionary)
  id: RedirectToRoute(System.Web.Routing.RouteValueDictionary)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoute(RouteValueDictionary)
  nameWithType: HttpResponse.RedirectToRoute(RouteValueDictionary)
  fullName: System.Web.HttpResponse.RedirectToRoute(RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由参数值将请求重定向到新 URL。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>       此方法调用<xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>方法来确定的 URL。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 302 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that has parameters that are named `productid` and `category`.  \n  \n```vb#  \nResponse.RedirectToRoute(  \n  new RouteValueDictionary {productId=\"1\", category=\"widgets\"})  \n```  \n  \n```c#  \nResponse.RedirectToRoute(  \n  (new RouteValueDictionary {productId=\"1\", category=\"widgets\"});  \n```"
  syntax:
    content: public void RedirectToRoute (System.Web.Routing.RouteValueDictionary routeValues);
    parameters:
    - id: routeValues
      type: System.Web.Routing.RouteValueDictionary
      description: "路由参数值。"
  overload: System.Web.HttpResponse.RedirectToRoute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoute(System.String,System.Object)
  id: RedirectToRoute(System.String,System.Object)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoute(String,Object)
  nameWithType: HttpResponse.RedirectToRoute(String,Object)
  fullName: System.Web.HttpResponse.RedirectToRoute(String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由参数值和路由名称将请求重定向到新 URL。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>       此方法中传递的对象转换为`routeValues`到<xref:System.Web.Routing.RouteValueDictionary?displayProperty=fullName>对象使用<xref:System.Web.Routing.RouteValueDictionary.%23ctor%28System.Object%29?displayProperty=fullName>构造函数。</xref:System.Web.Routing.RouteValueDictionary.%23ctor%28System.Object%29?displayProperty=fullName> </xref:System.Web.Routing.RouteValueDictionary?displayProperty=fullName> <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>然后调用方法来确定 URL。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 302 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that is named `Product` and that has parameters that are named `productid` and `category`.  \n  \n```vb#  \nResponse.RedirectToRoute(\"Product\",  \n  New With {.productid = \"1\", .category = \"widgets\"})  \n```  \n  \n```c#  \nResponse.RedirectToRoute(\"Product\",  \n  new { productid = \"1\", category = \"widgets\" });  \n```"
  syntax:
    content: public void RedirectToRoute (string routeName, object routeValues);
    parameters:
    - id: routeName
      type: System.String
      description: "路由的名称。"
    - id: routeValues
      type: System.Object
      description: "路由参数值。"
  overload: System.Web.HttpResponse.RedirectToRoute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)
  id: RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoute(String,RouteValueDictionary)
  nameWithType: HttpResponse.RedirectToRoute(String,RouteValueDictionary)
  fullName: System.Web.HttpResponse.RedirectToRoute(String,RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由参数值和路由名称将请求重定向到新 URL。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>       <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>调用方法来确定 URL。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 302 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that is named `Product` and that has parameters that are named `productid` and `category`.  \n  \n```vb#  \nResponse.RedirectToRoute(\"Product\",  \n  new RouteValueDictionary {productId=\"1\", category=\"widgets\"})  \n```  \n  \n```c#  \nResponse.RedirectToRoute(\"Product\",  \n  (new RouteValueDictionary {productId=\"1\", category=\"widgets\"});  \n```"
  syntax:
    content: public void RedirectToRoute (string routeName, System.Web.Routing.RouteValueDictionary routeValues);
    parameters:
    - id: routeName
      type: System.String
      description: "路由的名称。"
    - id: routeValues
      type: System.Web.Routing.RouteValueDictionary
      description: "路由参数值。"
  overload: System.Web.HttpResponse.RedirectToRoute*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.Object)
  id: RedirectToRoutePermanent(System.Object)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoutePermanent(Object)
  nameWithType: HttpResponse.RedirectToRoutePermanent(Object)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由参数值执行从所请求 URL 到新 URL 的永久重定向。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.RedirectPermanent%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.RedirectPermanent%28System.String%2CSystem.Boolean%29>       此方法中传递的对象转换为`routeValues`到<xref:System.Web.Routing.RouteValueDictionary?displayProperty=fullName>对象使用<xref:System.Web.Routing.RouteValueDictionary.%23ctor%28System.Object%29?displayProperty=fullName>构造函数。</xref:System.Web.Routing.RouteValueDictionary.%23ctor%28System.Object%29?displayProperty=fullName> </xref:System.Web.Routing.RouteValueDictionary?displayProperty=fullName> <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>然后调用方法来确定 URL。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 301 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that has parameters that are named `productid` and `category`.  \n  \n```vb#  \nResponse.RedirectToRoutePermanent(  \n  New With {.productid = \"1\", .category = \"widgets\"})  \n```  \n  \n```c#  \nResponse.RedirectToRoutePermanent(  \n  new { productid = \"1\", category = \"widgets\" });  \n```"
  syntax:
    content: public void RedirectToRoutePermanent (object routeValues);
    parameters:
    - id: routeValues
      type: System.Object
      description: "路由参数值。"
  overload: System.Web.HttpResponse.RedirectToRoutePermanent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.String)
  id: RedirectToRoutePermanent(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoutePermanent(String)
  nameWithType: HttpResponse.RedirectToRoutePermanent(String)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由名称执行从所请求 URL 到新 URL 的永久重定向。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.RedirectPermanent%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.RedirectPermanent%28System.String%2CSystem.Boolean%29>       此方法会将传入的路由名称`routeName`到通过 URL<xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>方法。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 301 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that is named `Products`.  \n  \n```vb#  \nResponse.RedirectToRoutePermanent(\"Products\")  \n```  \n  \n```c#  \nResponse.RedirectToRoutePermanent(\"Products\");  \n```"
  syntax:
    content: public void RedirectToRoutePermanent (string routeName);
    parameters:
    - id: routeName
      type: System.String
      description: "路由的名称。"
  overload: System.Web.HttpResponse.RedirectToRoutePermanent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)
  id: RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoutePermanent(RouteValueDictionary)
  nameWithType: HttpResponse.RedirectToRoutePermanent(RouteValueDictionary)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由参数值执行从所请求 URL 到新 URL 的永久重定向。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>       此方法调用<xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>方法来确定的 URL。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 301 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that has parameters that are named `productid` and `category`.  \n  \n```vb#  \nResponse.RedirectToRoutePermanent(  \n  new RouteValueDictionary {productId=\"1\", category=\"widgets\"})  \n```  \n  \n```c#  \nResponse.RedirectToRoutePermanent(  \n  new RouteValueDictionary {productId=\"1\", category=\"widgets\"});  \n```"
  syntax:
    content: public void RedirectToRoutePermanent (System.Web.Routing.RouteValueDictionary routeValues);
    parameters:
    - id: routeValues
      type: System.Web.Routing.RouteValueDictionary
      description: "路由参数值。"
  overload: System.Web.HttpResponse.RedirectToRoutePermanent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.String,System.Object)
  id: RedirectToRoutePermanent(System.String,System.Object)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoutePermanent(String,Object)
  nameWithType: HttpResponse.RedirectToRoutePermanent(String,Object)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(String,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由参数值和与新 URL 对应的路由名称执行从所请求 URL 到新 URL 的永久重定向。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.RedirectPermanent%2A>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.RedirectPermanent%2A>       此方法中传递的对象转换为`routeValues`到<xref:System.Web.Routing.RouteValueDictionary?displayProperty=fullName>对象使用<xref:System.Web.Routing.RouteValueDictionary.%23ctor%28System.Object%29?displayProperty=fullName>构造函数。</xref:System.Web.Routing.RouteValueDictionary.%23ctor%28System.Object%29?displayProperty=fullName> </xref:System.Web.Routing.RouteValueDictionary?displayProperty=fullName> <xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>然后调用方法来确定 URL。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 301 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that is named `Product` and that has parameters that are named `productid` and `category`.  \n  \n```vb#  \nResponse.RedirectToRoutePermanent(\"Product\",  \n  New With {.productid = \"1\", .category = \"widgets\"})  \n```  \n  \n```c#  \nResponse.RedirectToRoutePermanent(\"Product\",  \n  new { productid = \"1\", category = \"widgets\" });  \n```"
  syntax:
    content: public void RedirectToRoutePermanent (string routeName, object routeValues);
    parameters:
    - id: routeName
      type: System.String
      description: "路由的名称。"
    - id: routeValues
      type: System.Object
      description: "路由参数值。"
  overload: System.Web.HttpResponse.RedirectToRoutePermanent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)
  id: RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RedirectToRoutePermanent(String,RouteValueDictionary)
  nameWithType: HttpResponse.RedirectToRoutePermanent(String,RouteValueDictionary)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(String,RouteValueDictionary)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用路由参数值和路由名称执行从所请求 URL 到新 URL 的永久重定向。"
  remarks: "提供此方法是为了方便编码。 它等效于调用<xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>方法与第二个参数设置为`false`。</xref:System.Web.HttpResponse.Redirect%28System.String%2CSystem.Boolean%29>       此方法调用<xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>方法来确定的 URL。</xref:System.Web.Routing.RouteCollection.GetVirtualPath%2A?displayProperty=fullName>       ASP.NET 执行通过返回 HTTP 状态代码为 301 重定向。"
  example:
  - "The following example shows how to call this method to redirect to a route that is named `Product` and that has parameters that are named `productid` and `category`.  \n  \n```vb#  \nResponse.RedirectToRoutePermanent(\"Product\",  \n  new RouteValueDictionary {productId=\"1\", category=\"widgets\"})  \n```  \n  \n```c#  \nResponse.RedirectToRoutePermanent(\"Product\",  \n  new RouteValueDictionary {productId=\"1\", category=\"widgets\"});  \n```"
  syntax:
    content: public void RedirectToRoutePermanent (string routeName, System.Web.Routing.RouteValueDictionary routeValues);
    parameters:
    - id: routeName
      type: System.String
      description: "路由的名称。"
    - id: routeValues
      type: System.Web.Routing.RouteValueDictionary
      description: "路由参数值。"
  overload: System.Web.HttpResponse.RedirectToRoutePermanent*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "没有路由对应于指定的路由参数。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头之后尝试了重定向。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RemoveOutputCacheItem(System.String)
  id: RemoveOutputCacheItem(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RemoveOutputCacheItem(String)
  nameWithType: HttpResponse.RemoveOutputCacheItem(String)
  fullName: System.Web.HttpResponse.RemoveOutputCacheItem(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "从缓存中删除与默认输出缓存提供程序关联的所有缓存的项。 此方法是静态的。"
  remarks: "调用此方法以删除与默认输出缓存提供程序关联的输出缓存项。 调用<xref:System.Web.HttpResponse.RemoveOutputCacheItem%2A>方法移除与网站配置文件中指定的自定义输出缓存提供程序关联的输出缓存项。</xref:System.Web.HttpResponse.RemoveOutputCacheItem%2A>"
  syntax:
    content: public static void RemoveOutputCacheItem (string path);
    parameters:
    - id: path
      type: System.String
      description: "从缓存中删除项的虚拟绝对路径。"
  overload: System.Web.HttpResponse.RemoveOutputCacheItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>不是绝对的虚拟路径。"
  platform:
  - net462
- uid: System.Web.HttpResponse.RemoveOutputCacheItem(System.String,System.String)
  id: RemoveOutputCacheItem(System.String,System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: RemoveOutputCacheItem(String,String)
  nameWithType: HttpResponse.RemoveOutputCacheItem(String,String)
  fullName: System.Web.HttpResponse.RemoveOutputCacheItem(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用指定的输出缓存提供程序删除与指定路径关联的所有输出缓存项。"
  remarks: "调用此方法以删除与网站配置文件中指定的自定义输出缓存提供程序关联的输出缓存项。 若要删除与默认输出缓存提供程序关联的输出缓存项，请调用<xref:System.Web.HttpResponse.RemoveOutputCacheItem%28System.String%29>方法重载。</xref:System.Web.HttpResponse.RemoveOutputCacheItem%28System.String%29>"
  syntax:
    content: public static void RemoveOutputCacheItem (string path, string providerName);
    parameters:
    - id: path
      type: System.String
      description: "从缓存中删除的项的虚拟绝对路径。"
    - id: providerName
      type: System.String
      description: "用于删除与指定路径关联的输出缓存项提供程序。"
  overload: System.Web.HttpResponse.RemoveOutputCacheItem*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>为 null。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>是无效的路径。"
  platform:
  - net462
- uid: System.Web.HttpResponse.SetCookie(System.Web.HttpCookie)
  id: SetCookie(System.Web.HttpCookie)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: SetCookie(HttpCookie)
  nameWithType: HttpResponse.SetCookie(HttpCookie)
  fullName: System.Web.HttpResponse.SetCookie(HttpCookie)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "更新 cookie 集合中的现有 cookie。"
  remarks: ''
  example:
  - "The following example updates the value of an existing cookie.  \n  \n [!code-cs[Classic HttpResponse.SetCookie Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_23_1.cs)]\n [!code-vb[Classic HttpResponse.SetCookie Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_23_1.vb)]"
  syntax:
    content: public void SetCookie (System.Web.HttpCookie cookie);
    parameters:
    - id: cookie
      type: System.Web.HttpCookie
      description: "要更新的集合中的 cookie。"
  overload: System.Web.HttpResponse.SetCookie*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "尝试发送的 HTTP 标头后设置 cookie。"
  platform:
  - net462
- uid: System.Web.HttpResponse.Status
  id: Status
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Status
  nameWithType: HttpResponse.Status
  fullName: System.Web.HttpResponse.Status
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "集<xref uid=&quot;langword_csharp_Status&quot; name=&quot;Status&quot; href=&quot;&quot;></xref>返回到客户端的行。"
  remarks: "状态已弃用鉴于<xref:System.Web.HttpResponse.StatusDescription%2A>，仅为与 ASP 的早期版本的兼容性提供。</xref:System.Web.HttpResponse.StatusDescription%2A> 使用 ASP.NET，<xref:System.Web.HttpResponse.StatusDescription%2A>相反。</xref:System.Web.HttpResponse.StatusDescription%2A>"
  syntax:
    content: public string Status { get; set; }
    return:
      type: System.String
      description: "设置的状态代码将导致描述要返回到客户端的 HTTP 输出状态的字符串。 默认值为 200 （正常）。"
  overload: System.Web.HttpResponse.Status*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "状态设置为无效的状态代码。"
  platform:
  - net462
- uid: System.Web.HttpResponse.StatusCode
  id: StatusCode
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: StatusCode
  nameWithType: HttpResponse.StatusCode
  fullName: System.Web.HttpResponse.StatusCode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置返回给客户端的输出的 HTTP 状态代码。"
  remarks: ''
  example:
  - "The following example checks the status code of the output stream. If the status code is not equal to 200, additional code is executed.  \n  \n [!code-vb[System.Web.HttpResponse.StatusCode#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_11_1.aspx)]\n [!code-cs[System.Web.HttpResponse.StatusCode#1](~/add/codesnippet/csharp/p-system.web.httprespons_11_1.aspx)]"
  syntax:
    content: public int StatusCode { get; set; }
    return:
      type: System.Int32
      description: "表示返回到客户端的 HTTP 输出状态的整数。 默认值为 200 （正常）。 有关有效状态代码的列表，请参阅[Http 状态代码](http://go.microsoft.com/fwlink/?LinkId=73157)。"
  overload: System.Web.HttpResponse.StatusCode*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送的 HTTP 标头后设置 StatusCode。"
  platform:
  - net462
- uid: System.Web.HttpResponse.StatusDescription
  id: StatusDescription
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: StatusDescription
  nameWithType: HttpResponse.StatusDescription
  fullName: System.Web.HttpResponse.StatusDescription
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置返回给客户端的输出的 HTTP 状态字符串。"
  remarks: ''
  example:
  - "The following example checks the status string of the output stream. If the status is not equal to \"OK\", additional code is executed.  \n  \n [!code-vb[System.Web.HttpResponse.StatusDescription#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_10_1.aspx)]\n [!code-cs[System.Web.HttpResponse.StatusDescription#1](~/add/codesnippet/csharp/p-system.web.httprespons_10_1.aspx)]"
  syntax:
    content: public string StatusDescription { get; set; }
    return:
      type: System.String
      description: "描述返回到客户端的 HTTP 输出状态的字符串。 默认值为&quot;确定&quot;。 有关有效状态代码的列表，请参阅[Http 状态代码](http://go.microsoft.com/fwlink/?LinkId=73157)。"
  overload: System.Web.HttpResponse.StatusDescription*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code>StatusDescription</code>已发送的 HTTP 标头后设置。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "所选的值长度大于 512。"
  platform:
  - net462
- uid: System.Web.HttpResponse.SubStatusCode
  id: SubStatusCode
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: SubStatusCode
  nameWithType: HttpResponse.SubStatusCode
  fullName: System.Web.HttpResponse.SubStatusCode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置限定响应的状态代码的值。"
  remarks: "中的集成的管道模式仅支持 SubStatusCode 属性[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]并且至少.NET Framework 版本 3.0。 当设置 SubStatusCode 属性时，状态登录[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]如果配置失败请求跟踪。 独立于跟踪的配置是否，代码永远不会发送到请求的最终响应的一部分。 有关详细信息，请参阅[故障排除失败的请求使用失败请求跟踪在 IIS 7.0 中](http://www.iis.net/default.aspx?tabid=2&subtabid=25&i=969&p=1)。"
  example:
  - "The following example sets the SubStatusCode property in an event handler for the <xref:System.Web.HttpApplication> instance of the <xref:System.Web.HttpApplication.PostAuthenticateRequest> event. Put the code file in the App_Code folder of your Web application and configure the Web.config file to register the module. For more information, see [Walkthrough: Creating and Registering a Custom HTTP Module](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[System.Web.HttpResponse.SubStatusCode#1](~/add/codesnippet/csharp/p-system.web.httprespons_9_1.cs)]\n [!code-vb[System.Web.HttpResponse.SubStatusCode#1](~/add/codesnippet/visualbasic/p-system.web.httprespons_9_1.vb)]"
  syntax:
    content: public int SubStatusCode { get; set; }
    return:
      type: System.Int32
      description: "一个整数值，表示[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]子状态代码。"
  overload: System.Web.HttpResponse.SubStatusCode*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该操作要求中的集成的管道模式[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]并且至少.NET Framework 版本 3.0。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "已发送所有 HTTP 标头后设置的状态代码。"
  platform:
  - net462
- uid: System.Web.HttpResponse.SupportsAsyncFlush
  id: SupportsAsyncFlush
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: SupportsAsyncFlush
  nameWithType: HttpResponse.SupportsAsyncFlush
  fullName: System.Web.HttpResponse.SupportsAsyncFlush
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个值，该值指示连接是否支持异步刷新操作。"
  remarks: "此属性返回的值<xref:System.Web.HttpWorkerRequest.SupportsAsyncFlush%2A?displayProperty=fullName>属性。</xref:System.Web.HttpWorkerRequest.SupportsAsyncFlush%2A?displayProperty=fullName>"
  syntax:
    content: public bool SupportsAsyncFlush { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果连接支持异步刷新操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.SupportsAsyncFlush*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.SuppressContent
  id: SuppressContent
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: SuppressContent
  nameWithType: HttpResponse.SuppressContent
  fullName: System.Web.HttpResponse.SuppressContent
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，该值指示是否将 HTTP 内容发送到客户端。"
  remarks: ''
  example:
  - "The following example checks whether the <xref:System.Web.HttpRequest.IsSecureConnection%2A> property is set to false. If it is, the SuppressContent property is set to true to stop the response from being sent.  \n  \n [!code-cs[System.Web.HttpResponse_Sample5#3](~/add/codesnippet/csharp/p-system.web.httprespons_6_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Sample5#3](~/add/codesnippet/visualbasic/p-system.web.httprespons_6_1.aspx)]"
  syntax:
    content: public bool SuppressContent { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要取消输出，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.SuppressContent*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.SuppressDefaultCacheControlHeader
  id: SuppressDefaultCacheControlHeader
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: SuppressDefaultCacheControlHeader
  nameWithType: HttpResponse.SuppressDefaultCacheControlHeader
  fullName: System.Web.HttpResponse.SuppressDefaultCacheControlHeader
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "[在.NET Framework 4.5.2 及更高版本中受支持]      获取或设置一个值，该值指示是否取消默认`Cache Control: private`当前 HTTP 响应标头。"
  remarks: "默认情况下，ASP.NET 将发送`Cache-Control: private`响应标头除非已为此响应指定一个显式的缓存策略。 此属性允许取消基于每个请求此默认响应标头。 标头仍整个应用程序通过设置抑制<xref:System.Web.Configuration.HttpRuntimeSection.SendCacheControlHeader%2A>中[httpRuntime 元素 （ASP.NET 设置架构）](http://msdn.microsoft.com/en-us/e9b81350-8aaf-47cc-9843-5f7d0c59f369)或[outputCache 元素的缓存 （ASP.NET 设置架构）](http://msdn.microsoft.com/en-us/47cd2b47-316f-4dfd-bbf8-539be3066fee)。</xref:System.Web.Configuration.HttpRuntimeSection.SendCacheControlHeader%2A>       禁止显示默认值时要格外小心`Cache-Control: private`标头，为代理和其他中间方可能将没有此标头的响应视为可缓存默认情况下。 此处理可能导致意外的缓存的敏感信息。 请参阅[RFC 2616、 sec。 13.4](http://tools.ietf.org/html/rfc2616)有关详细信息。"
  syntax:
    content: public bool SuppressDefaultCacheControlHeader { get; set; }
    return:
      type: System.Boolean
      description: '<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要取消默认`Cache Control: private`标头为当前 HTTP 响应中; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。'
  overload: System.Web.HttpResponse.SuppressDefaultCacheControlHeader*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.SuppressFormsAuthenticationRedirect
  id: SuppressFormsAuthenticationRedirect
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: SuppressFormsAuthenticationRedirect
  nameWithType: HttpResponse.SuppressFormsAuthenticationRedirect
  fullName: System.Web.HttpResponse.SuppressFormsAuthenticationRedirect
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，指定是否应取消窗体身份认证重定向到登录页。"
  remarks: "默认情况下，窗体身份验证都将重定向到登录页以便将 HTTP 401 状态代码转换为 302。 这不适合某些类别的错误，例如当身份验证成功但授权失败，或者在当前请求的 AJAX 或 web 服务请求。 此属性提供一种方法来取消重定向行为，并向客户端发送的原始状态代码。"
  syntax:
    content: public bool SuppressFormsAuthenticationRedirect { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果应取消窗体身份认证重定向;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.SuppressFormsAuthenticationRedirect*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.TransmitFile(System.String)
  id: TransmitFile(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: TransmitFile(String)
  nameWithType: HttpResponse.TransmitFile(String)
  fullName: System.Web.HttpResponse.TransmitFile(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的文件直接写入 HTTP 响应输出流，而无需在内存中缓冲它。"
  syntax:
    content: public void TransmitFile (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "要写入 HTTP 输出的文件的名称。"
  overload: System.Web.HttpResponse.TransmitFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> filename </code>参数是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>"
  platform:
  - net462
- uid: System.Web.HttpResponse.TransmitFile(System.String,System.Int64,System.Int64)
  id: TransmitFile(System.String,System.Int64,System.Int64)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: TransmitFile(String,Int64,Int64)
  nameWithType: HttpResponse.TransmitFile(String,Int64,Int64)
  fullName: System.Web.HttpResponse.TransmitFile(String,Int64,Int64)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将直接写入 HTTP 响应输出流而不在内存中缓冲该文件的指定的部分。"
  remarks: "如果指定 0 作为`offset`参数和-1 作为`length`参数，发送整个文件。"
  syntax:
    content: public void TransmitFile (string filename, long offset, long length);
    parameters:
    - id: filename
      type: System.String
      description: "要写入 HTTP 输出的文件的名称。"
    - id: offset
      type: System.Int64
      description: "若要开始写入 HTTP 输出的文件中的位置。"
    - id: length
      type: System.Int64
      description: "要传输的字节数。"
  overload: System.Web.HttpResponse.TransmitFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>offset</code> parameter is less than zero.  \n  \n \\- or -  \n  \n The <code>length</code> parameter is less than -1.  \n  \n \\- or -  \n  \n The <code>length</code> parameter specifies a number of bytes that is greater than the number of bytes the file contains minus the offset."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "The out-of-process worker request is not supported.  \n  \n \\- or -  \n  \n The response is not using an <xref href=\"System.Web.HttpWriter\"></xref> object."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>offset</code> parameter is less than zero or greater than the file size.  \n  \n \\- or -  \n  \n The <code>length</code> parameter is less than -1 or greater than the value of the <code>offset</code> parameter plus the file size."
  platform:
  - net462
- uid: System.Web.HttpResponse.TrySkipIisCustomErrors
  id: TrySkipIisCustomErrors
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: TrySkipIisCustomErrors
  nameWithType: HttpResponse.TrySkipIisCustomErrors
  fullName: System.Web.HttpResponse.TrySkipIisCustomErrors
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，指定是否[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]禁用自定义错误。"
  remarks: "仅当你的应用程序承载在 IIS 7.0 中时，才使用 TrySkipIisCustomErrors 属性。 当以经典模式，在 IIS 7.0 中运行 TrySkipIisCustomErrors 属性默认值是`true`。 在集成模式下运行时，TrySkipIisCustomErrors 属性默认值是`false`。"
  syntax:
    content: public bool TrySkipIisCustomErrors { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要禁用 IIS 自定义错误;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpResponse.TrySkipIisCustomErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Write(System.Char)
  id: Write(System.Char)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Write(Char)
  nameWithType: HttpResponse.Write(Char)
  fullName: System.Web.HttpResponse.Write(Char)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将字符写入 HTTP 响应输出流。"
  remarks: ''
  example:
  - "The following example creates a series of constants that are written to an ASP.NET page using the Write method. The code calls this version of the Write method to write individual character constants to the page.  \n  \n [!code-cs[System.Web.HttpResponse_Sample5#4](~/add/codesnippet/csharp/m-system.web.httprespons_7_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Sample5#4](~/add/codesnippet/visualbasic/m-system.web.httprespons_7_1.aspx)]"
  syntax:
    content: public void Write (char ch);
    parameters:
    - id: ch
      type: System.Char
      description: "要写入 HTTP 输出流字符。"
  overload: System.Web.HttpResponse.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Write(System.Object)
  id: Write(System.Object)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Write(Object)
  nameWithType: HttpResponse.Write(Object)
  fullName: System.Web.HttpResponse.Write(Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "写入<xref:System.Object>写入 HTTP 响应流。</xref:System.Object>"
  syntax:
    content: public void Write (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>要写入 HTTP 输出流。</xref:System.Object>"
  overload: System.Web.HttpResponse.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Write(System.String)
  id: Write(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Write(String)
  nameWithType: HttpResponse.Write(String)
  fullName: System.Web.HttpResponse.Write(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将字符串写入 HTTP 响应输出流。"
  remarks: "如果从 Web 客户端接收的输入未通过验证从客户端接收或传输到客户端时，动态生成的 HTML 页面可以带来安全风险。 输入提交给 Web 站点并随后写回给客户端中嵌入的恶意脚本可能看上去来自受信任的源。 此安全风险称为跨站点脚本攻击。 始终应验证时它会将传输从您的网站到客户端浏览器从客户端收到的数据。       此外，每当任何已作为输入接收的数据以 HTML 的形式写出时，你应对其进行编码使用一种技术，如<xref:System.Web.HttpServerUtility.HtmlEncode%2A>或<xref:System.Web.HttpServerUtility.UrlEncode%2A>阻止执行恶意脚本。</xref:System.Web.HttpServerUtility.UrlEncode%2A> </xref:System.Web.HttpServerUtility.HtmlEncode%2A> 此方法十分适用于未进行验证时它收到的数据。       当你进行编码或筛选数据时，必须指定为您的 Web 页设置，以便你的筛选器可以标识并删除任何的字节序列不属于的设置 （如非字母数字序列），并且可能无法包含嵌入的恶意脚本的字符。       有关跨站点脚本攻击的详细信息，请参阅文章 Q252985，&quot;如何为防止跨站点脚本安全问题&quot;上[Microsoft 知识库文章](http://go.microsoft.com/fwlink/?LinkID=37115)Web 站点。"
  example:
  - "The following example echoes the client's name back to the client's browser. The <xref:System.Web.HttpServerUtility.HtmlEncode%2A> method strips any malicious script and invalid characters that may have been submitted in the `UserName` input field.  \n  \n [!code-vb[System.Web.HttpResponse.Write#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_1_1.vb)]\n [!code-cs[System.Web.HttpResponse.Write#1](~/add/codesnippet/csharp/m-system.web.httprespons_1_1.cs)]"
  syntax:
    content: public void Write (string s);
    parameters:
    - id: s
      type: System.String
      description: "字符串写入 HTTP 输出流。"
  overload: System.Web.HttpResponse.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.Write(System.Char[],System.Int32,System.Int32)
  id: Write(System.Char[],System.Int32,System.Int32)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: Write(Char[],Int32,Int32)
  nameWithType: HttpResponse.Write(Char[],Int32,Int32)
  fullName: System.Web.HttpResponse.Write(Char[],Int32,Int32)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将字符数组写入 HTTP 响应输出流。"
  remarks: ''
  example:
  - "The following example creates a series of constants that are written to an ASP.NET page using the Write method. The code calls this version of the Write method to write individual character constants to the page.  \n  \n [!code-cs[System.Web.HttpResponse_Sample5#4](~/add/codesnippet/csharp/m-system.web.httprespons_20_1.aspx)]\n [!code-vb[System.Web.HttpResponse_Sample5#4](~/add/codesnippet/visualbasic/m-system.web.httprespons_20_1.aspx)]"
  syntax:
    content: public void Write (char[] buffer, int index, int count);
    parameters:
    - id: buffer
      type: System.Char[]
      description: "要写入的字符数组。"
    - id: index
      type: System.Int32
      description: "字符数组中开始写入的位置。"
    - id: count
      type: System.Int32
      description: "要写入的字符数开始`index`。"
  overload: System.Web.HttpResponse.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpResponse.WriteFile(System.String)
  id: WriteFile(System.String)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: WriteFile(String)
  nameWithType: HttpResponse.WriteFile(String)
  fullName: System.Web.HttpResponse.WriteFile(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的文件的内容作为文件块直接写入 HTTP 响应输出流。"
  remarks: '此方法是使用较大的文件，则调用该方法可能引发异常。 可以使用此方法使用的文件的大小取决于 Web 服务器的硬件配置。 有关详细信息，参见位于，&quot;PRB:: Response.WriteFile 无法下载大文件&quot;上[Microsoft 知识库文章](http://go.microsoft.com/fwlink/?linkid=149903)Web 站点。'
  example:
  - "The following example writes all the contents of a text file named `Login.txt` (which might contain literal HTML text and input controls) directly to the output stream.  \n  \n [!code-vb[Classic HttpResponse.WriteFile Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_18_1.vb)]\n [!code-cs[Classic HttpResponse.WriteFile Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_18_1.cs)]"
  syntax:
    content: public void WriteFile (string filename);
    parameters:
    - id: filename
      type: System.String
      description: "要写入 HTTP 输出的文件的名称。"
  overload: System.Web.HttpResponse.WriteFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>filename</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpResponse.WriteFile(System.String,System.Boolean)
  id: WriteFile(System.String,System.Boolean)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: WriteFile(String,Boolean)
  nameWithType: HttpResponse.WriteFile(String,Boolean)
  fullName: System.Web.HttpResponse.WriteFile(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的文件的内容作为内存块直接写入 HTTP 响应输出流。"
  remarks: '此方法是使用较大的文件，则调用该方法可能引发异常。 可以使用此方法使用的文件的大小取决于 Web 服务器的硬件配置。 有关详细信息，参见位于，&quot;PRB:: Response.WriteFile 无法下载大文件&quot;上[Microsoft 知识库文章](http://go.microsoft.com/fwlink/?linkid=149903)Web 站点。'
  example:
  - "The following example writes a file to memory.  \n  \n [!code-cs[Classic HttpResponse.WriteFile1 Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_3_1.cs)]\n [!code-vb[Classic HttpResponse.WriteFile1 Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_3_1.vb)]"
  syntax:
    content: public void WriteFile (string filename, bool readIntoMemory);
    parameters:
    - id: filename
      type: System.String
      description: "要写入内存块的文件的名称。"
    - id: readIntoMemory
      type: System.Boolean
      description: "指示是否将文件写入内存块。"
  overload: System.Web.HttpResponse.WriteFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>filename</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpResponse.WriteFile(System.IntPtr,System.Int64,System.Int64)
  id: WriteFile(System.IntPtr,System.Int64,System.Int64)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: WriteFile(IntPtr,Int64,Int64)
  nameWithType: HttpResponse.WriteFile(IntPtr,Int64,Int64)
  fullName: System.Web.HttpResponse.WriteFile(IntPtr,Int64,Int64)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的文件直接写入 HTTP 响应输出流。"
  remarks: '此方法是使用较大的文件，则调用该方法可能引发异常。 可以使用此方法使用的文件的大小取决于 Web 服务器的硬件配置。 有关详细信息，参见位于，&quot;PRB:: Response.WriteFile 无法下载大文件&quot;上[Microsoft 知识库文章](http://go.microsoft.com/fwlink/?linkid=149903)Web 站点。'
  example:
  - "The following example writes all the contents of a text file named `Login.txt` (which might contain literal HTML text and input controls) directly to the output stream.  \n  \n [!code-vb[Classic HttpResponse.WriteFile3 Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_12_1.vb)]\n [!code-cs[Classic HttpResponse.WriteFile3 Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_12_1.cs)]"
  syntax:
    content: public void WriteFile (IntPtr fileHandle, long offset, long size);
    parameters:
    - id: fileHandle
      type: System.IntPtr
      description: "要写入 HTTP 输出流的文件的文件句柄。"
    - id: offset
      type: System.Int64
      description: "将开始进行写入的文件中的字节位置。"
    - id: size
      type: System.Int64
      description: "要写入到输出流的字节数。"
  overload: System.Web.HttpResponse.WriteFile*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>fileHandler</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>size</code> is greater than the file size minus <code>offset</code>."
  platform:
  - net462
- uid: System.Web.HttpResponse.WriteFile(System.String,System.Int64,System.Int64)
  id: WriteFile(System.String,System.Int64,System.Int64)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: WriteFile(String,Int64,Int64)
  nameWithType: HttpResponse.WriteFile(String,Int64,Int64)
  fullName: System.Web.HttpResponse.WriteFile(String,Int64,Int64)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将指定的文件直接写入 HTTP 响应输出流。"
  remarks: '此方法是使用较大的文件，则调用该方法可能引发异常。 可以使用此方法使用的文件的大小取决于 Web 服务器的硬件配置。 有关详细信息，参见位于，&quot;PRB:: Response.WriteFile 无法下载大文件&quot;上[Microsoft 知识库文章](http://go.microsoft.com/fwlink/?linkid=149903)Web 站点。'
  example:
  - "The following example writes all the contents of a text file named `Login.txt` (which might contain literal text and HTML input controls) directly to the output stream.  \n  \n [!code-cs[Classic HttpResponse.WriteFile2 Example#1](~/add/codesnippet/csharp/m-system.web.httprespons_5_1.cs)]\n [!code-vb[Classic HttpResponse.WriteFile2 Example#1](~/add/codesnippet/visualbasic/m-system.web.httprespons_5_1.vb)]"
  syntax:
    content: public void WriteFile (string filename, long offset, long size);
    parameters:
    - id: filename
      type: System.String
      description: "该文件以写入 HTTP 输出流。"
    - id: offset
      type: System.Int64
      description: "将开始进行写入的文件中的字节位置。"
    - id: size
      type: System.Int64
      description: "要写入到输出流的字节数。"
  overload: System.Web.HttpResponse.WriteFile*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code>offset</code> is less than 0.  \n  \n \\- or -  \n  \n <code>size</code> is greater than the file size minus <code>offset</code>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>filename</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpResponse.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)
  id: WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)
  parent: System.Web.HttpResponse
  langs:
  - csharp
  name: WriteSubstitution(HttpResponseSubstitutionCallback)
  nameWithType: HttpResponse.WriteSubstitution(HttpResponseSubstitutionCallback)
  fullName: System.Web.HttpResponse.WriteSubstitution(HttpResponseSubstitutionCallback)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "允许响应替换块的插入响应，从而允许动态生成的输出缓存响应的指定的响应区域。"
  remarks: "中缓存输出的网页的缓存后替换使用 WriteSubstitution 方法。 通过将传递<xref:System.Web.HttpContext>具有规定的回调方法的对象<xref:System.Web.HttpResponseSubstitutionCallback>签名，你可以将输出缓存的页面缓存中任何给定位置的内容。</xref:System.Web.HttpResponseSubstitutionCallback> </xref:System.Web.HttpContext> 若要开始替换，调用 WriteSubstitution 方法，将其传递回调方法，它必须是线程安全，并可以是下列操作之一:-容器页或用户控件的静态方法。      -A 静态或实例对另一个任意对象的方法。       在第一个请求到页面时，调用 WriteSubstitution<xref:System.Web.HttpResponseSubstitutionCallback>委托以生成输出。</xref:System.Web.HttpResponseSubstitutionCallback> 然后，它将替换缓冲区添加到响应，也可保留要在今后的请求调用的委托。 最后，它将会降低客户端可缓存性从公开为仅服务器通过不缓存客户端上确保今后的请求到页重新调用委托。      1> [!NOTE]&1;> 缓存后替换不支持其中输出缓存在用户控件级别应用的缓存的用户控件。 这也称为片段缓存。 有关详细信息，请参阅[缓存的 ASP.NET 页的部分](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void WriteSubstitution (System.Web.HttpResponseSubstitutionCallback callback);
    parameters:
    - id: callback
      type: System.Web.HttpResponseSubstitutionCallback
      description: "方法、 用户控件或要替换的对象。"
  overload: System.Web.HttpResponse.WriteSubstitution*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "目标<code> callback </code>形参属于类型<xref href=&quot;System.Web.UI.Control&quot;> </xref>。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Threading.ThreadAbortException
  parent: System.Threading
  isExternal: false
  name: ThreadAbortException
  nameWithType: ThreadAbortException
  fullName: System.Threading.ThreadAbortException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ApplicationException
  parent: System
  isExternal: false
  name: ApplicationException
  nameWithType: ApplicationException
  fullName: System.ApplicationException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.HttpResponse.#ctor(System.IO.TextWriter)
  parent: System.Web.HttpResponse
  isExternal: false
  name: HttpResponse(TextWriter)
  nameWithType: HttpResponse.HttpResponse(TextWriter)
  fullName: System.Web.HttpResponse.HttpResponse(TextWriter)
- uid: System.IO.TextWriter
  parent: System.IO
  isExternal: true
  name: TextWriter
  nameWithType: TextWriter
  fullName: System.IO.TextWriter
- uid: System.Web.HttpResponse.AddCacheDependency(System.Web.Caching.CacheDependency[])
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddCacheDependency(CacheDependency[])
  nameWithType: HttpResponse.AddCacheDependency(CacheDependency[])
  fullName: System.Web.HttpResponse.AddCacheDependency(CacheDependency[])
- uid: System.Web.Caching.CacheDependency[]
  parent: System.Web.Caching
  isExternal: false
  name: CacheDependency
  nameWithType: CacheDependency
  fullName: System.Web.Caching.CacheDependency[]
  spec.csharp:
  - uid: System.Web.Caching.CacheDependency
    name: CacheDependency
    nameWithType: CacheDependency
    fullName: CacheDependency[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpResponse.AddCacheItemDependencies(System.Collections.ArrayList)
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddCacheItemDependencies(ArrayList)
  nameWithType: HttpResponse.AddCacheItemDependencies(ArrayList)
  fullName: System.Web.HttpResponse.AddCacheItemDependencies(ArrayList)
- uid: System.Collections.ArrayList
  parent: System.Collections
  isExternal: false
  name: ArrayList
  nameWithType: ArrayList
  fullName: System.Collections.ArrayList
- uid: System.Web.HttpResponse.AddCacheItemDependencies(System.String[])
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddCacheItemDependencies(String[])
  nameWithType: HttpResponse.AddCacheItemDependencies(String[])
  fullName: System.Web.HttpResponse.AddCacheItemDependencies(String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpResponse.AddCacheItemDependency(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddCacheItemDependency(String)
  nameWithType: HttpResponse.AddCacheItemDependency(String)
  fullName: System.Web.HttpResponse.AddCacheItemDependency(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpResponse.AddFileDependencies(System.Collections.ArrayList)
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddFileDependencies(ArrayList)
  nameWithType: HttpResponse.AddFileDependencies(ArrayList)
  fullName: System.Web.HttpResponse.AddFileDependencies(ArrayList)
- uid: System.Web.HttpResponse.AddFileDependencies(System.String[])
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddFileDependencies(String[])
  nameWithType: HttpResponse.AddFileDependencies(String[])
  fullName: System.Web.HttpResponse.AddFileDependencies(String[])
- uid: System.Web.HttpResponse.AddFileDependency(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddFileDependency(String)
  nameWithType: HttpResponse.AddFileDependency(String)
  fullName: System.Web.HttpResponse.AddFileDependency(String)
- uid: System.Web.HttpResponse.AddHeader(System.String,System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddHeader(String,String)
  nameWithType: HttpResponse.AddHeader(String,String)
  fullName: System.Web.HttpResponse.AddHeader(String,String)
- uid: System.Web.HttpResponse.AddOnSendingHeaders(System.Action{System.Web.HttpContext})
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddOnSendingHeaders(Action<HttpContext>)
  nameWithType: HttpResponse.AddOnSendingHeaders(Action<HttpContext>)
  fullName: System.Web.HttpResponse.AddOnSendingHeaders(Action<HttpContext>)
- uid: System.Web.ISubscriptionToken
  parent: System.Web
  isExternal: false
  name: ISubscriptionToken
  nameWithType: ISubscriptionToken
  fullName: System.Web.ISubscriptionToken
- uid: System.Action{System.Web.HttpContext}
  parent: System
  isExternal: true
  name: Action<HttpContext>
  nameWithType: Action<HttpContext>
  fullName: System.Action<System.Web.HttpContext>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.Web.HttpContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: HttpContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.HttpResponse.AppendCookie(System.Web.HttpCookie)
  parent: System.Web.HttpResponse
  isExternal: false
  name: AppendCookie(HttpCookie)
  nameWithType: HttpResponse.AppendCookie(HttpCookie)
  fullName: System.Web.HttpResponse.AppendCookie(HttpCookie)
- uid: System.Web.HttpCookie
  parent: System.Web
  isExternal: false
  name: HttpCookie
  nameWithType: HttpCookie
  fullName: System.Web.HttpCookie
- uid: System.Web.HttpResponse.AppendHeader(System.String,System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: AppendHeader(String,String)
  nameWithType: HttpResponse.AppendHeader(String,String)
  fullName: System.Web.HttpResponse.AppendHeader(String,String)
- uid: System.Web.HttpResponse.AppendToLog(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: AppendToLog(String)
  nameWithType: HttpResponse.AppendToLog(String)
  fullName: System.Web.HttpResponse.AppendToLog(String)
- uid: System.Web.HttpResponse.ApplyAppPathModifier(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: ApplyAppPathModifier(String)
  nameWithType: HttpResponse.ApplyAppPathModifier(String)
  fullName: System.Web.HttpResponse.ApplyAppPathModifier(String)
- uid: System.Web.HttpResponse.BeginFlush(System.AsyncCallback,System.Object)
  parent: System.Web.HttpResponse
  isExternal: false
  name: BeginFlush(AsyncCallback,Object)
  nameWithType: HttpResponse.BeginFlush(AsyncCallback,Object)
  fullName: System.Web.HttpResponse.BeginFlush(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Web.HttpResponse.BinaryWrite(System.Byte[])
  parent: System.Web.HttpResponse
  isExternal: false
  name: BinaryWrite(Byte[])
  nameWithType: HttpResponse.BinaryWrite(Byte[])
  fullName: System.Web.HttpResponse.BinaryWrite(Byte[])
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpResponse.Buffer
  parent: System.Web.HttpResponse
  isExternal: false
  name: Buffer
  nameWithType: HttpResponse.Buffer
  fullName: System.Web.HttpResponse.Buffer
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpResponse.BufferOutput
  parent: System.Web.HttpResponse
  isExternal: false
  name: BufferOutput
  nameWithType: HttpResponse.BufferOutput
  fullName: System.Web.HttpResponse.BufferOutput
- uid: System.Web.HttpResponse.Cache
  parent: System.Web.HttpResponse
  isExternal: false
  name: Cache
  nameWithType: HttpResponse.Cache
  fullName: System.Web.HttpResponse.Cache
- uid: System.Web.HttpCachePolicy
  parent: System.Web
  isExternal: false
  name: HttpCachePolicy
  nameWithType: HttpCachePolicy
  fullName: System.Web.HttpCachePolicy
- uid: System.Web.HttpResponse.CacheControl
  parent: System.Web.HttpResponse
  isExternal: false
  name: CacheControl
  nameWithType: HttpResponse.CacheControl
  fullName: System.Web.HttpResponse.CacheControl
- uid: System.Web.HttpResponse.Charset
  parent: System.Web.HttpResponse
  isExternal: false
  name: Charset
  nameWithType: HttpResponse.Charset
  fullName: System.Web.HttpResponse.Charset
- uid: System.Web.HttpResponse.Clear
  parent: System.Web.HttpResponse
  isExternal: false
  name: Clear()
  nameWithType: HttpResponse.Clear()
  fullName: System.Web.HttpResponse.Clear()
- uid: System.Web.HttpResponse.ClearContent
  parent: System.Web.HttpResponse
  isExternal: false
  name: ClearContent()
  nameWithType: HttpResponse.ClearContent()
  fullName: System.Web.HttpResponse.ClearContent()
- uid: System.Web.HttpResponse.ClearHeaders
  parent: System.Web.HttpResponse
  isExternal: false
  name: ClearHeaders()
  nameWithType: HttpResponse.ClearHeaders()
  fullName: System.Web.HttpResponse.ClearHeaders()
- uid: System.Web.HttpResponse.ClientDisconnectedToken
  parent: System.Web.HttpResponse
  isExternal: false
  name: ClientDisconnectedToken
  nameWithType: HttpResponse.ClientDisconnectedToken
  fullName: System.Web.HttpResponse.ClientDisconnectedToken
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Web.HttpResponse.Close
  parent: System.Web.HttpResponse
  isExternal: false
  name: Close()
  nameWithType: HttpResponse.Close()
  fullName: System.Web.HttpResponse.Close()
- uid: System.Web.HttpResponse.ContentEncoding
  parent: System.Web.HttpResponse
  isExternal: false
  name: ContentEncoding
  nameWithType: HttpResponse.ContentEncoding
  fullName: System.Web.HttpResponse.ContentEncoding
- uid: System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Web.HttpResponse.ContentType
  parent: System.Web.HttpResponse
  isExternal: false
  name: ContentType
  nameWithType: HttpResponse.ContentType
  fullName: System.Web.HttpResponse.ContentType
- uid: System.Web.HttpResponse.Cookies
  parent: System.Web.HttpResponse
  isExternal: false
  name: Cookies
  nameWithType: HttpResponse.Cookies
  fullName: System.Web.HttpResponse.Cookies
- uid: System.Web.HttpCookieCollection
  parent: System.Web
  isExternal: false
  name: HttpCookieCollection
  nameWithType: HttpCookieCollection
  fullName: System.Web.HttpCookieCollection
- uid: System.Web.HttpResponse.DisableKernelCache
  parent: System.Web.HttpResponse
  isExternal: false
  name: DisableKernelCache()
  nameWithType: HttpResponse.DisableKernelCache()
  fullName: System.Web.HttpResponse.DisableKernelCache()
- uid: System.Web.HttpResponse.DisableUserCache
  parent: System.Web.HttpResponse
  isExternal: false
  name: DisableUserCache()
  nameWithType: HttpResponse.DisableUserCache()
  fullName: System.Web.HttpResponse.DisableUserCache()
- uid: System.Web.HttpResponse.End
  parent: System.Web.HttpResponse
  isExternal: false
  name: End()
  nameWithType: HttpResponse.End()
  fullName: System.Web.HttpResponse.End()
- uid: System.Web.HttpResponse.EndFlush(System.IAsyncResult)
  parent: System.Web.HttpResponse
  isExternal: false
  name: EndFlush(IAsyncResult)
  nameWithType: HttpResponse.EndFlush(IAsyncResult)
  fullName: System.Web.HttpResponse.EndFlush(IAsyncResult)
- uid: System.Web.HttpResponse.Expires
  parent: System.Web.HttpResponse
  isExternal: false
  name: Expires
  nameWithType: HttpResponse.Expires
  fullName: System.Web.HttpResponse.Expires
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.HttpResponse.ExpiresAbsolute
  parent: System.Web.HttpResponse
  isExternal: false
  name: ExpiresAbsolute
  nameWithType: HttpResponse.ExpiresAbsolute
  fullName: System.Web.HttpResponse.ExpiresAbsolute
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.HttpResponse.Filter
  parent: System.Web.HttpResponse
  isExternal: false
  name: Filter
  nameWithType: HttpResponse.Filter
  fullName: System.Web.HttpResponse.Filter
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Web.HttpResponse.Flush
  parent: System.Web.HttpResponse
  isExternal: false
  name: Flush()
  nameWithType: HttpResponse.Flush()
  fullName: System.Web.HttpResponse.Flush()
- uid: System.Web.HttpResponse.FlushAsync
  parent: System.Web.HttpResponse
  isExternal: false
  name: FlushAsync()
  nameWithType: HttpResponse.FlushAsync()
  fullName: System.Web.HttpResponse.FlushAsync()
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Web.HttpResponse.HeaderEncoding
  parent: System.Web.HttpResponse
  isExternal: false
  name: HeaderEncoding
  nameWithType: HttpResponse.HeaderEncoding
  fullName: System.Web.HttpResponse.HeaderEncoding
- uid: System.Web.HttpResponse.Headers
  parent: System.Web.HttpResponse
  isExternal: false
  name: Headers
  nameWithType: HttpResponse.Headers
  fullName: System.Web.HttpResponse.Headers
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.HttpResponse.HeadersWritten
  parent: System.Web.HttpResponse
  isExternal: false
  name: HeadersWritten
  nameWithType: HttpResponse.HeadersWritten
  fullName: System.Web.HttpResponse.HeadersWritten
- uid: System.Web.HttpResponse.IsClientConnected
  parent: System.Web.HttpResponse
  isExternal: false
  name: IsClientConnected
  nameWithType: HttpResponse.IsClientConnected
  fullName: System.Web.HttpResponse.IsClientConnected
- uid: System.Web.HttpResponse.IsRequestBeingRedirected
  parent: System.Web.HttpResponse
  isExternal: false
  name: IsRequestBeingRedirected
  nameWithType: HttpResponse.IsRequestBeingRedirected
  fullName: System.Web.HttpResponse.IsRequestBeingRedirected
- uid: System.Web.HttpResponse.Output
  parent: System.Web.HttpResponse
  isExternal: false
  name: Output
  nameWithType: HttpResponse.Output
  fullName: System.Web.HttpResponse.Output
- uid: System.Web.HttpResponse.OutputStream
  parent: System.Web.HttpResponse
  isExternal: false
  name: OutputStream
  nameWithType: HttpResponse.OutputStream
  fullName: System.Web.HttpResponse.OutputStream
- uid: System.Web.HttpResponse.Pics(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: Pics(String)
  nameWithType: HttpResponse.Pics(String)
  fullName: System.Web.HttpResponse.Pics(String)
- uid: System.Web.HttpResponse.PushPromise(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: PushPromise(String)
  nameWithType: HttpResponse.PushPromise(String)
  fullName: System.Web.HttpResponse.PushPromise(String)
- uid: System.Web.HttpResponse.PushPromise(System.String,System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.HttpResponse
  isExternal: false
  name: PushPromise(String,String,NameValueCollection)
  nameWithType: HttpResponse.PushPromise(String,String,NameValueCollection)
  fullName: System.Web.HttpResponse.PushPromise(String,String,NameValueCollection)
- uid: System.Web.HttpResponse.Redirect(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: Redirect(String)
  nameWithType: HttpResponse.Redirect(String)
  fullName: System.Web.HttpResponse.Redirect(String)
- uid: System.Web.HttpResponse.Redirect(System.String,System.Boolean)
  parent: System.Web.HttpResponse
  isExternal: false
  name: Redirect(String,Boolean)
  nameWithType: HttpResponse.Redirect(String,Boolean)
  fullName: System.Web.HttpResponse.Redirect(String,Boolean)
- uid: System.Web.HttpResponse.RedirectLocation
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectLocation
  nameWithType: HttpResponse.RedirectLocation
  fullName: System.Web.HttpResponse.RedirectLocation
- uid: System.Web.HttpResponse.RedirectPermanent(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectPermanent(String)
  nameWithType: HttpResponse.RedirectPermanent(String)
  fullName: System.Web.HttpResponse.RedirectPermanent(String)
- uid: System.Web.HttpResponse.RedirectPermanent(System.String,System.Boolean)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectPermanent(String,Boolean)
  nameWithType: HttpResponse.RedirectPermanent(String,Boolean)
  fullName: System.Web.HttpResponse.RedirectPermanent(String,Boolean)
- uid: System.Web.HttpResponse.RedirectToRoute(System.Object)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoute(Object)
  nameWithType: HttpResponse.RedirectToRoute(Object)
  fullName: System.Web.HttpResponse.RedirectToRoute(Object)
- uid: System.Web.HttpResponse.RedirectToRoute(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoute(String)
  nameWithType: HttpResponse.RedirectToRoute(String)
  fullName: System.Web.HttpResponse.RedirectToRoute(String)
- uid: System.Web.HttpResponse.RedirectToRoute(System.Web.Routing.RouteValueDictionary)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoute(RouteValueDictionary)
  nameWithType: HttpResponse.RedirectToRoute(RouteValueDictionary)
  fullName: System.Web.HttpResponse.RedirectToRoute(RouteValueDictionary)
- uid: System.Web.Routing.RouteValueDictionary
  parent: System.Web.Routing
  isExternal: true
  name: RouteValueDictionary
  nameWithType: RouteValueDictionary
  fullName: System.Web.Routing.RouteValueDictionary
- uid: System.Web.HttpResponse.RedirectToRoute(System.String,System.Object)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoute(String,Object)
  nameWithType: HttpResponse.RedirectToRoute(String,Object)
  fullName: System.Web.HttpResponse.RedirectToRoute(String,Object)
- uid: System.Web.HttpResponse.RedirectToRoute(System.String,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoute(String,RouteValueDictionary)
  nameWithType: HttpResponse.RedirectToRoute(String,RouteValueDictionary)
  fullName: System.Web.HttpResponse.RedirectToRoute(String,RouteValueDictionary)
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.Object)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoutePermanent(Object)
  nameWithType: HttpResponse.RedirectToRoutePermanent(Object)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(Object)
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoutePermanent(String)
  nameWithType: HttpResponse.RedirectToRoutePermanent(String)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(String)
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.Web.Routing.RouteValueDictionary)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoutePermanent(RouteValueDictionary)
  nameWithType: HttpResponse.RedirectToRoutePermanent(RouteValueDictionary)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(RouteValueDictionary)
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.String,System.Object)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoutePermanent(String,Object)
  nameWithType: HttpResponse.RedirectToRoutePermanent(String,Object)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(String,Object)
- uid: System.Web.HttpResponse.RedirectToRoutePermanent(System.String,System.Web.Routing.RouteValueDictionary)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoutePermanent(String,RouteValueDictionary)
  nameWithType: HttpResponse.RedirectToRoutePermanent(String,RouteValueDictionary)
  fullName: System.Web.HttpResponse.RedirectToRoutePermanent(String,RouteValueDictionary)
- uid: System.Web.HttpResponse.RemoveOutputCacheItem(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RemoveOutputCacheItem(String)
  nameWithType: HttpResponse.RemoveOutputCacheItem(String)
  fullName: System.Web.HttpResponse.RemoveOutputCacheItem(String)
- uid: System.Web.HttpResponse.RemoveOutputCacheItem(System.String,System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: RemoveOutputCacheItem(String,String)
  nameWithType: HttpResponse.RemoveOutputCacheItem(String,String)
  fullName: System.Web.HttpResponse.RemoveOutputCacheItem(String,String)
- uid: System.Web.HttpResponse.SetCookie(System.Web.HttpCookie)
  parent: System.Web.HttpResponse
  isExternal: false
  name: SetCookie(HttpCookie)
  nameWithType: HttpResponse.SetCookie(HttpCookie)
  fullName: System.Web.HttpResponse.SetCookie(HttpCookie)
- uid: System.Web.HttpResponse.Status
  parent: System.Web.HttpResponse
  isExternal: false
  name: Status
  nameWithType: HttpResponse.Status
  fullName: System.Web.HttpResponse.Status
- uid: System.Web.HttpResponse.StatusCode
  parent: System.Web.HttpResponse
  isExternal: false
  name: StatusCode
  nameWithType: HttpResponse.StatusCode
  fullName: System.Web.HttpResponse.StatusCode
- uid: System.Web.HttpResponse.StatusDescription
  parent: System.Web.HttpResponse
  isExternal: false
  name: StatusDescription
  nameWithType: HttpResponse.StatusDescription
  fullName: System.Web.HttpResponse.StatusDescription
- uid: System.Web.HttpResponse.SubStatusCode
  parent: System.Web.HttpResponse
  isExternal: false
  name: SubStatusCode
  nameWithType: HttpResponse.SubStatusCode
  fullName: System.Web.HttpResponse.SubStatusCode
- uid: System.Web.HttpResponse.SupportsAsyncFlush
  parent: System.Web.HttpResponse
  isExternal: false
  name: SupportsAsyncFlush
  nameWithType: HttpResponse.SupportsAsyncFlush
  fullName: System.Web.HttpResponse.SupportsAsyncFlush
- uid: System.Web.HttpResponse.SuppressContent
  parent: System.Web.HttpResponse
  isExternal: false
  name: SuppressContent
  nameWithType: HttpResponse.SuppressContent
  fullName: System.Web.HttpResponse.SuppressContent
- uid: System.Web.HttpResponse.SuppressDefaultCacheControlHeader
  parent: System.Web.HttpResponse
  isExternal: false
  name: SuppressDefaultCacheControlHeader
  nameWithType: HttpResponse.SuppressDefaultCacheControlHeader
  fullName: System.Web.HttpResponse.SuppressDefaultCacheControlHeader
- uid: System.Web.HttpResponse.SuppressFormsAuthenticationRedirect
  parent: System.Web.HttpResponse
  isExternal: false
  name: SuppressFormsAuthenticationRedirect
  nameWithType: HttpResponse.SuppressFormsAuthenticationRedirect
  fullName: System.Web.HttpResponse.SuppressFormsAuthenticationRedirect
- uid: System.Web.HttpResponse.TransmitFile(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: TransmitFile(String)
  nameWithType: HttpResponse.TransmitFile(String)
  fullName: System.Web.HttpResponse.TransmitFile(String)
- uid: System.Web.HttpResponse.TransmitFile(System.String,System.Int64,System.Int64)
  parent: System.Web.HttpResponse
  isExternal: false
  name: TransmitFile(String,Int64,Int64)
  nameWithType: HttpResponse.TransmitFile(String,Int64,Int64)
  fullName: System.Web.HttpResponse.TransmitFile(String,Int64,Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Web.HttpResponse.TrySkipIisCustomErrors
  parent: System.Web.HttpResponse
  isExternal: false
  name: TrySkipIisCustomErrors
  nameWithType: HttpResponse.TrySkipIisCustomErrors
  fullName: System.Web.HttpResponse.TrySkipIisCustomErrors
- uid: System.Web.HttpResponse.Write(System.Char)
  parent: System.Web.HttpResponse
  isExternal: false
  name: Write(Char)
  nameWithType: HttpResponse.Write(Char)
  fullName: System.Web.HttpResponse.Write(Char)
- uid: System.Char
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char
- uid: System.Web.HttpResponse.Write(System.Object)
  parent: System.Web.HttpResponse
  isExternal: false
  name: Write(Object)
  nameWithType: HttpResponse.Write(Object)
  fullName: System.Web.HttpResponse.Write(Object)
- uid: System.Web.HttpResponse.Write(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: Write(String)
  nameWithType: HttpResponse.Write(String)
  fullName: System.Web.HttpResponse.Write(String)
- uid: System.Web.HttpResponse.Write(System.Char[],System.Int32,System.Int32)
  parent: System.Web.HttpResponse
  isExternal: false
  name: Write(Char[],Int32,Int32)
  nameWithType: HttpResponse.Write(Char[],Int32,Int32)
  fullName: System.Web.HttpResponse.Write(Char[],Int32,Int32)
- uid: System.Char[]
  parent: System
  isExternal: true
  name: Char
  nameWithType: Char
  fullName: System.Char[]
  spec.csharp:
  - uid: System.Char
    name: Char
    nameWithType: Char
    fullName: Char[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpResponse.WriteFile(System.String)
  parent: System.Web.HttpResponse
  isExternal: false
  name: WriteFile(String)
  nameWithType: HttpResponse.WriteFile(String)
  fullName: System.Web.HttpResponse.WriteFile(String)
- uid: System.Web.HttpResponse.WriteFile(System.String,System.Boolean)
  parent: System.Web.HttpResponse
  isExternal: false
  name: WriteFile(String,Boolean)
  nameWithType: HttpResponse.WriteFile(String,Boolean)
  fullName: System.Web.HttpResponse.WriteFile(String,Boolean)
- uid: System.Web.HttpResponse.WriteFile(System.IntPtr,System.Int64,System.Int64)
  parent: System.Web.HttpResponse
  isExternal: false
  name: WriteFile(IntPtr,Int64,Int64)
  nameWithType: HttpResponse.WriteFile(IntPtr,Int64,Int64)
  fullName: System.Web.HttpResponse.WriteFile(IntPtr,Int64,Int64)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Web.HttpResponse.WriteFile(System.String,System.Int64,System.Int64)
  parent: System.Web.HttpResponse
  isExternal: false
  name: WriteFile(String,Int64,Int64)
  nameWithType: HttpResponse.WriteFile(String,Int64,Int64)
  fullName: System.Web.HttpResponse.WriteFile(String,Int64,Int64)
- uid: System.Web.HttpResponse.WriteSubstitution(System.Web.HttpResponseSubstitutionCallback)
  parent: System.Web.HttpResponse
  isExternal: false
  name: WriteSubstitution(HttpResponseSubstitutionCallback)
  nameWithType: HttpResponse.WriteSubstitution(HttpResponseSubstitutionCallback)
  fullName: System.Web.HttpResponse.WriteSubstitution(HttpResponseSubstitutionCallback)
- uid: System.Web.HttpResponseSubstitutionCallback
  parent: System.Web
  isExternal: false
  name: HttpResponseSubstitutionCallback
  nameWithType: HttpResponseSubstitutionCallback
  fullName: System.Web.HttpResponseSubstitutionCallback
- uid: System.Web.HttpResponse.#ctor*
  parent: System.Web.HttpResponse
  isExternal: false
  name: HttpResponse
  nameWithType: HttpResponse.HttpResponse
- uid: System.Web.HttpResponse.AddCacheDependency*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddCacheDependency
  nameWithType: HttpResponse.AddCacheDependency
- uid: System.Web.HttpResponse.AddCacheItemDependencies*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddCacheItemDependencies
  nameWithType: HttpResponse.AddCacheItemDependencies
- uid: System.Web.HttpResponse.AddCacheItemDependency*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddCacheItemDependency
  nameWithType: HttpResponse.AddCacheItemDependency
- uid: System.Web.HttpResponse.AddFileDependencies*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddFileDependencies
  nameWithType: HttpResponse.AddFileDependencies
- uid: System.Web.HttpResponse.AddFileDependency*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddFileDependency
  nameWithType: HttpResponse.AddFileDependency
- uid: System.Web.HttpResponse.AddHeader*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddHeader
  nameWithType: HttpResponse.AddHeader
- uid: System.Web.HttpResponse.AddOnSendingHeaders*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AddOnSendingHeaders
  nameWithType: HttpResponse.AddOnSendingHeaders
- uid: System.Web.HttpResponse.AppendCookie*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AppendCookie
  nameWithType: HttpResponse.AppendCookie
- uid: System.Web.HttpResponse.AppendHeader*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AppendHeader
  nameWithType: HttpResponse.AppendHeader
- uid: System.Web.HttpResponse.AppendToLog*
  parent: System.Web.HttpResponse
  isExternal: false
  name: AppendToLog
  nameWithType: HttpResponse.AppendToLog
- uid: System.Web.HttpResponse.ApplyAppPathModifier*
  parent: System.Web.HttpResponse
  isExternal: false
  name: ApplyAppPathModifier
  nameWithType: HttpResponse.ApplyAppPathModifier
- uid: System.Web.HttpResponse.BeginFlush*
  parent: System.Web.HttpResponse
  isExternal: false
  name: BeginFlush
  nameWithType: HttpResponse.BeginFlush
- uid: System.Web.HttpResponse.BinaryWrite*
  parent: System.Web.HttpResponse
  isExternal: false
  name: BinaryWrite
  nameWithType: HttpResponse.BinaryWrite
- uid: System.Web.HttpResponse.Buffer*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Buffer
  nameWithType: HttpResponse.Buffer
- uid: System.Web.HttpResponse.BufferOutput*
  parent: System.Web.HttpResponse
  isExternal: false
  name: BufferOutput
  nameWithType: HttpResponse.BufferOutput
- uid: System.Web.HttpResponse.Cache*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Cache
  nameWithType: HttpResponse.Cache
- uid: System.Web.HttpResponse.CacheControl*
  parent: System.Web.HttpResponse
  isExternal: false
  name: CacheControl
  nameWithType: HttpResponse.CacheControl
- uid: System.Web.HttpResponse.Charset*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Charset
  nameWithType: HttpResponse.Charset
- uid: System.Web.HttpResponse.Clear*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Clear
  nameWithType: HttpResponse.Clear
- uid: System.Web.HttpResponse.ClearContent*
  parent: System.Web.HttpResponse
  isExternal: false
  name: ClearContent
  nameWithType: HttpResponse.ClearContent
- uid: System.Web.HttpResponse.ClearHeaders*
  parent: System.Web.HttpResponse
  isExternal: false
  name: ClearHeaders
  nameWithType: HttpResponse.ClearHeaders
- uid: System.Web.HttpResponse.ClientDisconnectedToken*
  parent: System.Web.HttpResponse
  isExternal: false
  name: ClientDisconnectedToken
  nameWithType: HttpResponse.ClientDisconnectedToken
- uid: System.Web.HttpResponse.Close*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Close
  nameWithType: HttpResponse.Close
- uid: System.Web.HttpResponse.ContentEncoding*
  parent: System.Web.HttpResponse
  isExternal: false
  name: ContentEncoding
  nameWithType: HttpResponse.ContentEncoding
- uid: System.Web.HttpResponse.ContentType*
  parent: System.Web.HttpResponse
  isExternal: false
  name: ContentType
  nameWithType: HttpResponse.ContentType
- uid: System.Web.HttpResponse.Cookies*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Cookies
  nameWithType: HttpResponse.Cookies
- uid: System.Web.HttpResponse.DisableKernelCache*
  parent: System.Web.HttpResponse
  isExternal: false
  name: DisableKernelCache
  nameWithType: HttpResponse.DisableKernelCache
- uid: System.Web.HttpResponse.DisableUserCache*
  parent: System.Web.HttpResponse
  isExternal: false
  name: DisableUserCache
  nameWithType: HttpResponse.DisableUserCache
- uid: System.Web.HttpResponse.End*
  parent: System.Web.HttpResponse
  isExternal: false
  name: End
  nameWithType: HttpResponse.End
- uid: System.Web.HttpResponse.EndFlush*
  parent: System.Web.HttpResponse
  isExternal: false
  name: EndFlush
  nameWithType: HttpResponse.EndFlush
- uid: System.Web.HttpResponse.Expires*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Expires
  nameWithType: HttpResponse.Expires
- uid: System.Web.HttpResponse.ExpiresAbsolute*
  parent: System.Web.HttpResponse
  isExternal: false
  name: ExpiresAbsolute
  nameWithType: HttpResponse.ExpiresAbsolute
- uid: System.Web.HttpResponse.Filter*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Filter
  nameWithType: HttpResponse.Filter
- uid: System.Web.HttpResponse.Flush*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Flush
  nameWithType: HttpResponse.Flush
- uid: System.Web.HttpResponse.FlushAsync*
  parent: System.Web.HttpResponse
  isExternal: false
  name: FlushAsync
  nameWithType: HttpResponse.FlushAsync
- uid: System.Web.HttpResponse.HeaderEncoding*
  parent: System.Web.HttpResponse
  isExternal: false
  name: HeaderEncoding
  nameWithType: HttpResponse.HeaderEncoding
- uid: System.Web.HttpResponse.Headers*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Headers
  nameWithType: HttpResponse.Headers
- uid: System.Web.HttpResponse.HeadersWritten*
  parent: System.Web.HttpResponse
  isExternal: false
  name: HeadersWritten
  nameWithType: HttpResponse.HeadersWritten
- uid: System.Web.HttpResponse.IsClientConnected*
  parent: System.Web.HttpResponse
  isExternal: false
  name: IsClientConnected
  nameWithType: HttpResponse.IsClientConnected
- uid: System.Web.HttpResponse.IsRequestBeingRedirected*
  parent: System.Web.HttpResponse
  isExternal: false
  name: IsRequestBeingRedirected
  nameWithType: HttpResponse.IsRequestBeingRedirected
- uid: System.Web.HttpResponse.Output*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Output
  nameWithType: HttpResponse.Output
- uid: System.Web.HttpResponse.OutputStream*
  parent: System.Web.HttpResponse
  isExternal: false
  name: OutputStream
  nameWithType: HttpResponse.OutputStream
- uid: System.Web.HttpResponse.Pics*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Pics
  nameWithType: HttpResponse.Pics
- uid: System.Web.HttpResponse.PushPromise*
  parent: System.Web.HttpResponse
  isExternal: false
  name: PushPromise
  nameWithType: HttpResponse.PushPromise
- uid: System.Web.HttpResponse.Redirect*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Redirect
  nameWithType: HttpResponse.Redirect
- uid: System.Web.HttpResponse.RedirectLocation*
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectLocation
  nameWithType: HttpResponse.RedirectLocation
- uid: System.Web.HttpResponse.RedirectPermanent*
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectPermanent
  nameWithType: HttpResponse.RedirectPermanent
- uid: System.Web.HttpResponse.RedirectToRoute*
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoute
  nameWithType: HttpResponse.RedirectToRoute
- uid: System.Web.HttpResponse.RedirectToRoutePermanent*
  parent: System.Web.HttpResponse
  isExternal: false
  name: RedirectToRoutePermanent
  nameWithType: HttpResponse.RedirectToRoutePermanent
- uid: System.Web.HttpResponse.RemoveOutputCacheItem*
  parent: System.Web.HttpResponse
  isExternal: false
  name: RemoveOutputCacheItem
  nameWithType: HttpResponse.RemoveOutputCacheItem
- uid: System.Web.HttpResponse.SetCookie*
  parent: System.Web.HttpResponse
  isExternal: false
  name: SetCookie
  nameWithType: HttpResponse.SetCookie
- uid: System.Web.HttpResponse.Status*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Status
  nameWithType: HttpResponse.Status
- uid: System.Web.HttpResponse.StatusCode*
  parent: System.Web.HttpResponse
  isExternal: false
  name: StatusCode
  nameWithType: HttpResponse.StatusCode
- uid: System.Web.HttpResponse.StatusDescription*
  parent: System.Web.HttpResponse
  isExternal: false
  name: StatusDescription
  nameWithType: HttpResponse.StatusDescription
- uid: System.Web.HttpResponse.SubStatusCode*
  parent: System.Web.HttpResponse
  isExternal: false
  name: SubStatusCode
  nameWithType: HttpResponse.SubStatusCode
- uid: System.Web.HttpResponse.SupportsAsyncFlush*
  parent: System.Web.HttpResponse
  isExternal: false
  name: SupportsAsyncFlush
  nameWithType: HttpResponse.SupportsAsyncFlush
- uid: System.Web.HttpResponse.SuppressContent*
  parent: System.Web.HttpResponse
  isExternal: false
  name: SuppressContent
  nameWithType: HttpResponse.SuppressContent
- uid: System.Web.HttpResponse.SuppressDefaultCacheControlHeader*
  parent: System.Web.HttpResponse
  isExternal: false
  name: SuppressDefaultCacheControlHeader
  nameWithType: HttpResponse.SuppressDefaultCacheControlHeader
- uid: System.Web.HttpResponse.SuppressFormsAuthenticationRedirect*
  parent: System.Web.HttpResponse
  isExternal: false
  name: SuppressFormsAuthenticationRedirect
  nameWithType: HttpResponse.SuppressFormsAuthenticationRedirect
- uid: System.Web.HttpResponse.TransmitFile*
  parent: System.Web.HttpResponse
  isExternal: false
  name: TransmitFile
  nameWithType: HttpResponse.TransmitFile
- uid: System.Web.HttpResponse.TrySkipIisCustomErrors*
  parent: System.Web.HttpResponse
  isExternal: false
  name: TrySkipIisCustomErrors
  nameWithType: HttpResponse.TrySkipIisCustomErrors
- uid: System.Web.HttpResponse.Write*
  parent: System.Web.HttpResponse
  isExternal: false
  name: Write
  nameWithType: HttpResponse.Write
- uid: System.Web.HttpResponse.WriteFile*
  parent: System.Web.HttpResponse
  isExternal: false
  name: WriteFile
  nameWithType: HttpResponse.WriteFile
- uid: System.Web.HttpResponse.WriteSubstitution*
  parent: System.Web.HttpResponse
  isExternal: false
  name: WriteSubstitution
  nameWithType: HttpResponse.WriteSubstitution
