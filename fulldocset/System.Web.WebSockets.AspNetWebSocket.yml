### YamlMime:ManagedReference
items:
- uid: System.Web.WebSockets.AspNetWebSocket
  id: AspNetWebSocket
  children:
  - System.Web.WebSockets.AspNetWebSocket.Abort
  - System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.CloseStatus
  - System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  - System.Web.WebSockets.AspNetWebSocket.Dispose
  - System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  - System.Web.WebSockets.AspNetWebSocket.State
  - System.Web.WebSockets.AspNetWebSocket.SubProtocol
  langs:
  - csharp
  name: AspNetWebSocket
  nameWithType: AspNetWebSocket
  fullName: System.Web.WebSockets.AspNetWebSocket
  type: Class
  summary: "表示 web 服务器和 ASP.NET 应用程序中的客户端之间的实时全双工连接。"
  syntax:
    content: 'public sealed class AspNetWebSocket : System.Net.WebSockets.WebSocket'
  inheritance:
  - System.Object
  - System.Net.WebSockets.WebSocket
  implements: []
  inheritedMembers:
  - System.Net.WebSockets.WebSocket.CreateClientBuffer(System.Int32,System.Int32)
  - System.Net.WebSockets.WebSocket.CreateClientWebSocket(System.IO.Stream,System.String,System.Int32,System.Int32,System.TimeSpan,System.Boolean,System.ArraySegment{System.Byte})
  - System.Net.WebSockets.WebSocket.CreateServerBuffer(System.Int32)
  - System.Net.WebSockets.WebSocket.DefaultKeepAliveInterval
  - System.Net.WebSockets.WebSocket.IsApplicationTargeting45
  - System.Net.WebSockets.WebSocket.IsStateTerminal(System.Net.WebSockets.WebSocketState)
  - System.Net.WebSockets.WebSocket.RegisterPrefixes
  - System.Net.WebSockets.WebSocket.ThrowOnInvalidState(System.Net.WebSockets.WebSocketState,System.Net.WebSockets.WebSocketState[])
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.Abort
  id: Abort
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: Abort()
  nameWithType: AspNetWebSocket.Abort()
  fullName: System.Web.WebSockets.AspNetWebSocket.Abort()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "取消任何挂起的 I/O 操作上<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>对象并将设置对象的状态，以便它不能用于启动其他 I/O 操作。"
  remarks: "已调用 Abort 方法后，你仍可以访问属性和不涉及 I/O 操作的方法。"
  syntax:
    content: public override void Abort ();
    parameters: []
  overload: System.Web.WebSockets.AspNetWebSocket.Abort*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "以前释放此对象。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "将异步消息发送到客户端关闭连接。 如果服务器启动了关闭连接的请求，该方法将等待客户端以返回之前确认请求。"
  remarks: "你可以使用 CloseAsync 和<xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>方法的客户端启动，又由服务器启动请求，以关闭<xref:System.Web.WebSockets.AspNetWebSocket>连接。</xref:System.Web.WebSockets.AspNetWebSocket> </xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> 这两种方法在相同的方式中处理客户端发起的请求︰ 后客户端将消息发送到服务器后，关闭连接，服务器调用这些方法之一，并将确认发送到客户端，并且该方法将返回。       对于由服务器启动请求，这两种方法以不同的方式工作。 CloseAsync 方法可发送到客户端的消息，以关闭该连接，等待响应，，然后返回。 服务器不会等待客户端发送任何额外数据。 与此相反，<xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A>方法将消息发送到客户端关闭连接并返回而不等待响应。</xref:System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync%2A> 该方法返回后，你可以调用<xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>方法并处理其他数据或客户端发送该确认。</xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>"
  syntax:
    content: public override System.Threading.Tasks.Task CloseAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "关闭操作的状态代码。"
    - id: statusDescription
      type: System.String
      description: "关闭操作的状态消息。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消一个挂起操作的对象。"
    return:
      type: System.Threading.Tasks.Task
      description: "对操作的引用。"
  overload: System.Web.WebSockets.AspNetWebSocket.CloseAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>以前释放对象。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>对象处于中止状态。       -或者-发送操作都不可用。       -或-接收操作是不可用。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  id: CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "将异步消息发送到客户端关闭连接。 如果服务器启动了关闭连接的请求，该方法将返回而不等待响应。"
  remarks: "你可以使用<xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>和 CloseOutputAsync 方法的客户端启动，又由服务器启动请求，以关闭<xref:System.Web.WebSockets.AspNetWebSocket>连接。</xref:System.Web.WebSockets.AspNetWebSocket> </xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> 这两种方法在相同的方式中处理客户端发起的请求︰ 后客户端将消息发送到服务器后，关闭连接，服务器调用这些方法之一，并将确认发送到客户端，并且该方法将返回。       对于由服务器启动请求，这两种方法以不同的方式工作。 <xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A>方法将消息发送到客户端关闭连接，等待响应，然后返回。</xref:System.Web.WebSockets.AspNetWebSocket.CloseAsync%2A> 服务器不会等待客户端发送任何额外数据。 与此相反，CloseOutputAsync 方法将消息发送到客户端关闭连接，并返回而不等待响应。 该方法返回后，你可以调用<xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>方法并处理其他数据或客户端发送该确认。</xref:System.Web.WebSockets.AspNetWebSocket.ReceiveAsync%2A>"
  syntax:
    content: public override System.Threading.Tasks.Task CloseOutputAsync (System.Net.WebSockets.WebSocketCloseStatus closeStatus, string statusDescription, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: closeStatus
      type: System.Net.WebSockets.WebSocketCloseStatus
      description: "关闭操作的状态代码。"
    - id: statusDescription
      type: System.String
      description: "关闭操作的状态消息。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消一个挂起操作的对象。"
    return:
      type: System.Threading.Tasks.Task
      description: "对操作的引用。"
  overload: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "以前释放此对象。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>对象处于中止状态。       -或者-发送操作都不可用。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  id: CloseStatus
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "获取指示原因的状态代码<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>对象已关闭。"
  syntax:
    content: public override Nullable<System.Net.WebSockets.WebSocketCloseStatus> CloseStatus { get; }
    return:
      type: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
      description: "状态代码中。"
  overload: System.Web.WebSockets.AspNetWebSocket.CloseStatus*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "以前释放此对象。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  id: CloseStatusDescription
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "获取一条解释原因的状态消息<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>对象已关闭。"
  syntax:
    content: public override string CloseStatusDescription { get; }
    return:
      type: System.String
      description: "状态消息中。"
  overload: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "以前释放此对象。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose
  id: Dispose
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: Dispose()
  nameWithType: AspNetWebSocket.Dispose()
  fullName: System.Web.WebSockets.AspNetWebSocket.Dispose()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "释放使用的所有资源<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>对象。"
  remarks: "ASP.NET 将自动调用 Dispose 方法上<xref:System.Web.WebSockets.AspNetWebSocket>对象释放保留在你的代码完成后执行的任何资源。</xref:System.Web.WebSockets.AspNetWebSocket>"
  syntax:
    content: public override void Dispose ();
    parameters: []
  overload: System.Web.WebSockets.AspNetWebSocket.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  id: ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "从远程客户端接收单个消息片段。"
  syntax:
    content: public override System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult> ReceiveAsync (ArraySegment<byte> buffer, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "包含消息数据的数组。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消一个挂起操作的对象。"
    return:
      type: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
      description: "对接收消息的任务的引用。"
  overload: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>以前释放对象。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>对象处于中止状态。       -或-接收操作是不可用。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  id: SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "向远程客户端发送单个消息片段。"
  syntax:
    content: public override System.Threading.Tasks.Task SendAsync (ArraySegment<byte> buffer, System.Net.WebSockets.WebSocketMessageType messageType, bool endOfMessage, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.ArraySegment{System.Byte}
      description: "包含消息数据的数组。"
    - id: messageType
      type: System.Net.WebSockets.WebSocketMessageType
      description: "消息类型。"
    - id: endOfMessage
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要指示片段是完整的消息; 的末尾否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "取消一个挂起操作的对象。"
    return:
      type: System.Threading.Tasks.Task
      description: "对发送消息的任务的引用。"
  overload: System.Web.WebSockets.AspNetWebSocket.SendAsync*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>释放对象。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;> </xref>对象处于中止状态。       -或者-发送操作都不可用。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.State
  id: State
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: State
  nameWithType: AspNetWebSocket.State
  fullName: System.Web.WebSockets.AspNetWebSocket.State
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "获取一个值，该值指示在打开或关闭状态<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>对象。"
  syntax:
    content: public override System.Net.WebSockets.WebSocketState State { get; }
    return:
      type: System.Net.WebSockets.WebSocketState
      description: "当前的状态。"
  overload: System.Web.WebSockets.AspNetWebSocket.State*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "以前释放此对象。"
  platform:
  - net462
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  id: SubProtocol
  parent: System.Web.WebSockets.AspNetWebSocket
  langs:
  - csharp
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
  fullName: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.WebSockets
  summary: "获取远程客户端和服务器可用于通过交换数据的应用程序特定协议的名称<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>连接。"
  syntax:
    content: public override string SubProtocol { get; }
    return:
      type: System.String
      description: "协议的名称。"
  overload: System.Web.WebSockets.AspNetWebSocket.SubProtocol*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "以前释放此对象。"
  platform:
  - net462
references:
- uid: System.Net.WebSockets.WebSocket
  isExternal: false
  name: System.Net.WebSockets.WebSocket
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.WebSockets.AspNetWebSocket.Abort
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Abort()
  nameWithType: AspNetWebSocket.Abort()
  fullName: System.Web.WebSockets.AspNetWebSocket.Abort()
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Net.WebSockets.WebSocketCloseStatus
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketCloseStatus
  nameWithType: WebSocketCloseStatus
  fullName: System.Net.WebSockets.WebSocketCloseStatus
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(System.Net.WebSockets.WebSocketCloseStatus,System.String,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  nameWithType: AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync(WebSocketCloseStatus,String,CancellationToken)
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatus
- uid: System.Nullable{System.Net.WebSockets.WebSocketCloseStatus}
  parent: System
  isExternal: true
  name: Nullable<WebSocketCloseStatus>
  nameWithType: Nullable<WebSocketCloseStatus>
  fullName: System.Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: Nullable<System.Net.WebSockets.WebSocketCloseStatus>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketCloseStatus
    name: WebSocketCloseStatus
    nameWithType: WebSocketCloseStatus
    fullName: WebSocketCloseStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
  fullName: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Dispose()
  nameWithType: AspNetWebSocket.Dispose()
  fullName: System.Web.WebSockets.AspNetWebSocket.Dispose()
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(System.ArraySegment{System.Byte},System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  nameWithType: AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync(ArraySegment<Byte>,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Net.WebSockets.WebSocketReceiveResult}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<WebSocketReceiveResult>
  nameWithType: Task<WebSocketReceiveResult>
  fullName: System.Threading.Tasks.Task<System.Net.WebSockets.WebSocketReceiveResult>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Net.WebSockets.WebSocketReceiveResult>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.WebSockets.WebSocketReceiveResult
    name: WebSocketReceiveResult
    nameWithType: WebSocketReceiveResult
    fullName: WebSocketReceiveResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ArraySegment{System.Byte}
  parent: System
  isExternal: true
  name: ArraySegment<Byte>
  nameWithType: ArraySegment<Byte>
  fullName: System.ArraySegment<System.Byte>
  spec.csharp:
  - uid: System.ArraySegment`1
    name: ArraySegment
    nameWithType: ArraySegment
    fullName: ArraySegment<System.Byte>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync(System.ArraySegment{System.Byte},System.Net.WebSockets.WebSocketMessageType,System.Boolean,System.Threading.CancellationToken)
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  nameWithType: AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
  fullName: System.Web.WebSockets.AspNetWebSocket.SendAsync(ArraySegment<Byte>,WebSocketMessageType,Boolean,CancellationToken)
- uid: System.Net.WebSockets.WebSocketMessageType
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketMessageType
  nameWithType: WebSocketMessageType
  fullName: System.Net.WebSockets.WebSocketMessageType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.WebSockets.AspNetWebSocket.State
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: State
  nameWithType: AspNetWebSocket.State
  fullName: System.Web.WebSockets.AspNetWebSocket.State
- uid: System.Net.WebSockets.WebSocketState
  parent: System.Net.WebSockets
  isExternal: false
  name: WebSocketState
  nameWithType: WebSocketState
  fullName: System.Net.WebSockets.WebSocketState
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
  fullName: System.Web.WebSockets.AspNetWebSocket.SubProtocol
- uid: System.Web.WebSockets.AspNetWebSocket.Abort*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Abort
  nameWithType: AspNetWebSocket.Abort
- uid: System.Web.WebSockets.AspNetWebSocket.CloseAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseAsync
  nameWithType: AspNetWebSocket.CloseAsync
- uid: System.Web.WebSockets.AspNetWebSocket.CloseOutputAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseOutputAsync
  nameWithType: AspNetWebSocket.CloseOutputAsync
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatus*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatus
  nameWithType: AspNetWebSocket.CloseStatus
- uid: System.Web.WebSockets.AspNetWebSocket.CloseStatusDescription*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: CloseStatusDescription
  nameWithType: AspNetWebSocket.CloseStatusDescription
- uid: System.Web.WebSockets.AspNetWebSocket.Dispose*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: Dispose
  nameWithType: AspNetWebSocket.Dispose
- uid: System.Web.WebSockets.AspNetWebSocket.ReceiveAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: ReceiveAsync
  nameWithType: AspNetWebSocket.ReceiveAsync
- uid: System.Web.WebSockets.AspNetWebSocket.SendAsync*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SendAsync
  nameWithType: AspNetWebSocket.SendAsync
- uid: System.Web.WebSockets.AspNetWebSocket.State*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: State
  nameWithType: AspNetWebSocket.State
- uid: System.Web.WebSockets.AspNetWebSocket.SubProtocol*
  parent: System.Web.WebSockets.AspNetWebSocket
  isExternal: false
  name: SubProtocol
  nameWithType: AspNetWebSocket.SubProtocol
