### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbCommandBuilder
  id: DbCommandBuilder
  children:
  - System.Data.Common.DbCommandBuilder.#ctor
  - System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  - System.Data.Common.DbCommandBuilder.CatalogLocation
  - System.Data.Common.DbCommandBuilder.CatalogSeparator
  - System.Data.Common.DbCommandBuilder.ConflictOption
  - System.Data.Common.DbCommandBuilder.DataAdapter
  - System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)
  - System.Data.Common.DbCommandBuilder.GetDeleteCommand
  - System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)
  - System.Data.Common.DbCommandBuilder.GetInsertCommand
  - System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)
  - System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)
  - System.Data.Common.DbCommandBuilder.GetParameterName(System.String)
  - System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)
  - System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  - System.Data.Common.DbCommandBuilder.GetUpdateCommand
  - System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)
  - System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  - System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)
  - System.Data.Common.DbCommandBuilder.QuotePrefix
  - System.Data.Common.DbCommandBuilder.QuoteSuffix
  - System.Data.Common.DbCommandBuilder.RefreshSchema
  - System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.Common.DbCommandBuilder.SchemaSeparator
  - System.Data.Common.DbCommandBuilder.SetAllValues
  - System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  - System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)
  langs:
  - csharp
  name: DbCommandBuilder
  nameWithType: DbCommandBuilder
  fullName: System.Data.Common.DbCommandBuilder
  type: Class
  summary: "自动生成用于协调对所做更改的单表命令<xref href=&quot;System.Data.DataSet&quot;></xref>通过关联的数据库。 这是仅可以继承一个抽象类。"
  remarks: "为提供程序编写者创建其自己命令生成器方便而提供 DbCommandBuilder 类。 通过继承此类，开发人员可以在其自己的代码中实现提供程序特定的行为。       <xref:System.Data.Common.DbDataAdapter>不会自动生成所需进行对帐对所做更改的 SQL 语句<xref:System.Data.DataSet>与关联的数据源。</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter> 但是，你可以在其中创建 DbCommandBuilder 对象，以自动生成单表更新的 SQL 语句，如果设置<xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>的<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter>属性</xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> 然后，由 DbCommandBuilder 生成未设置任何其他 SQL 语句。       DbCommandBuilder 将自己注册为侦听器<xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating>事件每当你设置<xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A>属性。</xref:System.Data.Common.DbCommandBuilder.DataAdapter%2A> </xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> 你可以仅将一个相关联<xref:System.Data.Common.DbDataAdapter>或 DbCommandBuilder 对象相互一次。</xref:System.Data.Common.DbDataAdapter>       若要生成 INSERT、 UPDATE 或 DELETE 语句，DbCommandBuilder 使用<xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>要自动检索所需的元数据集属性。</xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> 如果你更改<xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>已 （例如，在第一个更新中） 中检索的元数据后，应调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>方法来更新元数据。</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> </xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>       `SelectCommand`还必须返回至少一个主键或唯一列。 如果不存在，请<xref:System.InvalidOperationException>则会生成异常，并不会生成命令。</xref:System.InvalidOperationException>       DbCommandBuilder 还使用<xref:System.Data.Common.DbCommand.Connection%2A>， <xref:System.Data.Common.DbCommand.CommandTimeout%2A>，和<xref:System.Data.Common.DbCommand.Transaction%2A>属性引用的<xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>.</xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbCommand.Transaction%2A> </xref:System.Data.Common.DbCommand.CommandTimeout%2A> </xref:System.Data.Common.DbCommand.Connection%2A> 用户应调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果修改了任何这些属性，或如果<xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>本身被替换。</xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 否则为<xref:System.Data.Common.DbDataAdapter.InsertCommand%2A>， <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>，和<xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A>属性保留其以前的值。</xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A> </xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A> </xref:System.Data.Common.DbDataAdapter.InsertCommand%2A>       如果调用<xref:System.ComponentModel.Component.Dispose%2A>，与关联被断开 DbCommandBuilder <xref:System.Data.Common.DbDataAdapter>，并且不再使用所生成的命令。</xref:System.Data.Common.DbDataAdapter> </xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: 'public abstract class DbCommandBuilder : System.ComponentModel.Component'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.#ctor
  id: '#ctor'
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: DbCommandBuilder()
  nameWithType: DbCommandBuilder.DbCommandBuilder()
  fullName: System.Data.Common.DbCommandBuilder.DbCommandBuilder()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "继承自的类的新实例初始化<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;></xref>类。"
  syntax:
    content: protected DbCommandBuilder ();
    parameters: []
  overload: System.Data.Common.DbCommandBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  id: ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  nameWithType: DbCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  fullName: System.Data.Common.DbCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "允许的提供程序实现<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;></xref>类来处理其他参数属性。"
  remarks: "此方法允许的实现<xref:System.Data.Common.DbCommandBuilder>类来处理特定于提供程序的参数属性。</xref:System.Data.Common.DbCommandBuilder>"
  syntax:
    content: protected abstract void ApplyParameterInfo (System.Data.Common.DbParameter parameter, System.Data.DataRow row, System.Data.StatementType statementType, bool whereClause);
    parameters:
    - id: parameter
      type: System.Data.Common.DbParameter
      description: "A <xref href=&quot;System.Data.Common.DbParameter&quot;> </xref>其他的修改将应用。"
    - id: row
      type: System.Data.DataRow
      description: "<xref href=&quot;System.Data.DataRow&quot;> </xref> <xref:System.Data.Common.DbDataReader.GetSchemaTable*>.</xref:System.Data.Common.DbDataReader.GetSchemaTable*>所提供的架构表"
    - id: statementType
      type: System.Data.StatementType
      description: "正在生成; 的命令的类型插入、 更新或删除。"
    - id: whereClause
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果参数是 update 或 delete WHERE 子句的一部分<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果它是插入或更新值的一部分。"
  overload: System.Data.Common.DbCommandBuilder.ApplyParameterInfo*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.CatalogLocation
  id: CatalogLocation
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: CatalogLocation
  nameWithType: DbCommandBuilder.CatalogLocation
  fullName: System.Data.Common.DbCommandBuilder.CatalogLocation
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "设置或获取<xref href=&quot;System.Data.Common.CatalogLocation&quot;></xref>的实例<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;></xref>类。"
  syntax:
    content: public virtual System.Data.Common.CatalogLocation CatalogLocation { get; set; }
    return:
      type: System.Data.Common.CatalogLocation
      description: "A <xref href=&quot;System.Data.Common.CatalogLocation&quot;></xref> object."
  overload: System.Data.Common.DbCommandBuilder.CatalogLocation*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.CatalogSeparator
  id: CatalogSeparator
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: CatalogSeparator
  nameWithType: DbCommandBuilder.CatalogSeparator
  fullName: System.Data.Common.DbCommandBuilder.CatalogSeparator
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "设置或获取的字符串用作的实例的目录分隔符<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;></xref>类。"
  syntax:
    content: public virtual string CatalogSeparator { get; set; }
    return:
      type: System.String
      description: "一个字符串，指示与实例一起使用的目录分隔符<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;></xref>类。"
  overload: System.Data.Common.DbCommandBuilder.CatalogSeparator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.ConflictOption
  id: ConflictOption
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: ConflictOption
  nameWithType: DbCommandBuilder.ConflictOption
  fullName: System.Data.Common.DbCommandBuilder.ConflictOption
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "指定哪些<xref href=&quot;System.Data.ConflictOption&quot;></xref>是由<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;> </xref>。"
  syntax:
    content: public virtual System.Data.ConflictOption ConflictOption { get; set; }
    return:
      type: System.Data.ConflictOption
      description: "返回的一个<xref href=&quot;System.Data.ConflictOption&quot;></xref>描述此行为值<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;> </xref>。"
  overload: System.Data.Common.DbCommandBuilder.ConflictOption*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.DataAdapter
  id: DataAdapter
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: DataAdapter
  nameWithType: DbCommandBuilder.DataAdapter
  fullName: System.Data.Common.DbCommandBuilder.DataAdapter
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取或设置<xref href=&quot;System.Data.Common.DbDataAdapter&quot;></xref>对于哪些 TRANSACT-SQL 语句会自动生成的对象。"
  remarks: "<xref:System.Data.Common.DbCommandBuilder>将自己注册为侦听器<xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating>由生成的事件<xref:System.Data.Common.DbDataAdapter>此属性中指定。</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> </xref:System.Data.Common.DbCommandBuilder>       当你创建的新实例<xref:System.Data.Common.DbCommandBuilder>，任何现有<xref:System.Data.Common.DbCommandBuilder>与此关联<xref:System.Data.Common.DbDataAdapter>发布。</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbCommandBuilder> </xref:System.Data.Common.DbCommandBuilder>"
  syntax:
    content: public System.Data.Common.DbDataAdapter DataAdapter { get; set; }
    return:
      type: System.Data.Common.DbDataAdapter
      description: "A <xref href=&quot;System.Data.Common.DbDataAdapter&quot;></xref> object."
  overload: System.Data.Common.DbCommandBuilder.DataAdapter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: DbCommandBuilder.Dispose(Boolean)
  fullName: System.Data.Common.DbCommandBuilder.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "释放由非托管的资源<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.Data.Common.DbCommandBuilder.Dispose%2A>方法和`Finalize`方法。</xref:System.Data.Common.DbCommandBuilder.Dispose%2A> <xref:System.Data.Common.DbCommandBuilder.Dispose%2A>调用的受保护的 Dispose 方法释放参数设置为`true`。</xref:System.Data.Common.DbCommandBuilder.Dispose%2A> `Finalize`调用`Dispose`与`disposing`设置为`false`。       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Data.Common.DbCommandBuilder>引用。</xref:System.Data.Common.DbCommandBuilder> 此方法调用<xref:System.Data.Common.DbCommandBuilder.Dispose%2A>每个引用对象的方法。</xref:System.Data.Common.DbCommandBuilder.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Data.Common.DbCommandBuilder.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand
  id: GetDeleteCommand
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetDeleteCommand()
  nameWithType: DbCommandBuilder.GetDeleteCommand()
  fullName: System.Data.Common.DbCommandBuilder.GetDeleteCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行删除操作的数据源所需的对象。"
  remarks: "应用程序可用于 GetDeleteCommand 方法条信息性或故障排除目的因为它返回<xref:System.Data.Common.DbCommand>要执行对象。</xref:System.Data.Common.DbCommand>       你还可以用作 GetDeleteCommand 修改命令的基础。 例如，可能会调用 GetDeleteCommand 和修改命令文本中，然后<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter>显式设置       当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 否则，GetDeleteCommand 仍将使用从上一条语句，这可能不是正确的信息。 SQL 语句是第一个当应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>或 GetDeleteCommand。</xref:System.Data.Common.DbDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.Common.DbCommand GetDeleteCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行删除操作所需的对象。"
  overload: System.Data.Common.DbCommandBuilder.GetDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)
  id: GetDeleteCommand(System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetDeleteCommand(Boolean)
  nameWithType: DbCommandBuilder.GetDeleteCommand(Boolean)
  fullName: System.Data.Common.DbCommandBuilder.GetDeleteCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行删除操作 （可选） 使用作为参数名称的列的数据源所需的对象。"
  remarks: "应用程序可以使用<xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.Common.DbCommand>要执行对象。</xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>       你还可以使用<xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>作为修改命令的基础。</xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> 例如，你可能调用<xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>和修改命令文本，然后显式设置，时间为<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>       当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 否则为<xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。</xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A> SQL 语句是第一个应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A>.</xref:System.Data.Common.DbCommandBuilder.GetDeleteCommand%2A></xref:System.Data.Common.DbDataAdapter.Update%2A>时生成       生成参数名称时的默认行为是使用@p1， @p2，有关的各种参数，依此类推。 传递`true`为`useColumnsForParameterNames`参数使你可以强制<xref:System.Data.Common.DbCommandBuilder>生成改为根据列名称的参数。</xref:System.Data.Common.DbCommandBuilder> 此操作成功仅当满足以下条件:-<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>已指定并且其长度等于或大于生成的参数名。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -生成的参数名满足中指定的条件<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>正则表达式。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>指定。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>"
  syntax:
    content: public System.Data.Common.DbCommand GetDeleteCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，生成匹配列名称，如有可能的参数名称。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，生成@p1， @p2，依次类推。"
    return:
      type: System.Data.Common.DbCommand
      description: "自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行删除操作所需的对象。"
  overload: System.Data.Common.DbCommandBuilder.GetDeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand
  id: GetInsertCommand
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetInsertCommand()
  nameWithType: DbCommandBuilder.GetInsertCommand()
  fullName: System.Data.Common.DbCommandBuilder.GetInsertCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行数据源中的插入所需的对象。"
  remarks: "应用程序可用于 GetInsertCommand 方法条信息性或故障排除目的因为它返回的文本<xref:System.Data.Common.DbCommand>要执行对象。</xref:System.Data.Common.DbCommand>       你还可以用作 GetInsertCommand 修改命令的基础。 例如，可能会调用 GetInsertCommand 和修改命令文本中，然后<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter>显式设置       当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 否则，GetInsertCommand 仍将使用从上一条语句，这可能不是正确的信息。 SQL 语句是第一个当应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>或 GetInsertCommand。</xref:System.Data.Common.DbDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.Common.DbCommand GetInsertCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行插入所需的对象。"
  overload: System.Data.Common.DbCommandBuilder.GetInsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)
  id: GetInsertCommand(System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetInsertCommand(Boolean)
  nameWithType: DbCommandBuilder.GetInsertCommand(Boolean)
  fullName: System.Data.Common.DbCommandBuilder.GetInsertCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行数据源，可选择使用作为参数名称列中的插入所需的对象。"
  remarks: "应用程序可以使用<xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>方法为信息性或故障排除目的，因为它返回的文本<xref:System.Data.Common.DbCommand>要执行对象。</xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>       你还可以使用<xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>作为修改命令的基础。</xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> 例如，你可能调用<xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>和修改命令文本，然后显式设置，时间为<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>       当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 否则为<xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。</xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A> SQL 语句是第一个应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A>.</xref:System.Data.Common.DbCommandBuilder.GetInsertCommand%2A></xref:System.Data.Common.DbDataAdapter.Update%2A>时生成       生成参数名称时的默认行为是使用@p1， @p2，有关的各种参数，依此类推。 传递`true`为`useColumnsForParameterNames`参数使你可以强制<xref:System.Data.Common.DbCommandBuilder>生成改为根据列名称的参数。</xref:System.Data.Common.DbCommandBuilder> 基于列名称的参数生成成功仅当满足以下条件:-<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>已指定并且其长度等于或大于生成的参数名。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -生成的参数名满足中指定的条件<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>正则表达式。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>指定。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>"
  syntax:
    content: public System.Data.Common.DbCommand GetInsertCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，生成匹配列名称，如有可能的参数名称。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，生成@p1， @p2，依次类推。"
    return:
      type: System.Data.Common.DbCommand
      description: "自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行插入所需的对象。"
  overload: System.Data.Common.DbCommandBuilder.GetInsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)
  id: GetParameterName(System.Int32)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetParameterName(Int32)
  nameWithType: DbCommandBuilder.GetParameterName(Int32)
  fullName: System.Data.Common.DbCommandBuilder.GetParameterName(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "返回指定的参数的名称的格式@p * # *。 当生成自定义命令生成器时使用。"
  syntax:
    content: protected abstract string GetParameterName (int parameterOrdinal);
    parameters:
    - id: parameterOrdinal
      type: System.Int32
      description: "数字为参数的名称的一部分包括..."
    return:
      type: System.String
      description: "追加参数名称的一部分的指定个数的参数的名称。"
  overload: System.Data.Common.DbCommandBuilder.GetParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetParameterName(System.String)
  id: GetParameterName(System.String)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetParameterName(String)
  nameWithType: DbCommandBuilder.GetParameterName(String)
  fullName: System.Data.Common.DbCommandBuilder.GetParameterName(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "返回完整的参数名称，在给定部分参数名称。"
  syntax:
    content: protected abstract string GetParameterName (string parameterName);
    parameters:
    - id: parameterName
      type: System.String
      description: "参数的部分名称。"
    return:
      type: System.String
      description: "所请求的部分参数名相对应的完整参数名称。"
  overload: System.Data.Common.DbCommandBuilder.GetParameterName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)
  id: GetParameterPlaceholder(System.Int32)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetParameterPlaceholder(Int32)
  nameWithType: DbCommandBuilder.GetParameterPlaceholder(Int32)
  fullName: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "在关联的 SQL 语句中返回参数的占位符。"
  remarks: "此方法仅供用于构建自定义命令生成器的提供程序编写器。"
  syntax:
    content: protected abstract string GetParameterPlaceholder (int parameterOrdinal);
    parameters:
    - id: parameterOrdinal
      type: System.Int32
      description: "数字为的参数的名称的一部分。"
    return:
      type: System.String
      description: "追加的指定个数的参数的名称。"
  overload: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  id: GetSchemaTable(System.Data.Common.DbCommand)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetSchemaTable(DbCommand)
  nameWithType: DbCommandBuilder.GetSchemaTable(DbCommand)
  fullName: System.Data.Common.DbCommandBuilder.GetSchemaTable(DbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "返回的架构表<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;> </xref>。"
  remarks: "此方法仅供用于构建自定义命令生成器的提供程序编写器。"
  syntax:
    content: protected virtual System.Data.DataTable GetSchemaTable (System.Data.Common.DbCommand sourceCommand);
    parameters:
    - id: sourceCommand
      type: System.Data.Common.DbCommand
      description: "<xref href=&quot;System.Data.Common.DbCommand&quot;> </xref>为其检索相应的架构表。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref> ，它表示特定的架构<xref href=&quot;System.Data.Common.DbCommand&quot;> </xref>。"
  overload: System.Data.Common.DbCommandBuilder.GetSchemaTable*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand
  id: GetUpdateCommand
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetUpdateCommand()
  nameWithType: DbCommandBuilder.GetUpdateCommand()
  fullName: System.Data.Common.DbCommandBuilder.GetUpdateCommand()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行数据源中的更新所需的对象。"
  remarks: "应用程序可用于 GetUpdateCommand 方法条信息性或故障排除目的因为它返回<xref:System.Data.Common.DbCommand>要执行对象。</xref:System.Data.Common.DbCommand>       你还可以用作 GetUpdateCommand 修改命令的基础。 例如，可能会调用 GetUpdateCommand 和修改命令文本中，然后<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter>显式设置       当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 否则，GetUpdateCommand 仍将使用从上一条语句，这可能不是正确的信息。 SQL 语句是第一个当应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>或 GetUpdateCommand。</xref:System.Data.Common.DbDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.Common.DbCommand GetUpdateCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行更新所需的对象。"
  overload: System.Data.Common.DbCommandBuilder.GetUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)
  id: GetUpdateCommand(System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: GetUpdateCommand(Boolean)
  nameWithType: DbCommandBuilder.GetUpdateCommand(Boolean)
  fullName: System.Data.Common.DbCommandBuilder.GetUpdateCommand(Boolean)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行在数据源，（可选） 使用作为参数名称的列的更新所需的对象。"
  remarks: "应用程序可以使用<xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>方法为信息性或故障排除目的，因为它返回<xref:System.Data.Common.DbCommand>要执行对象。</xref:System.Data.Common.DbCommand> </xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>       你还可以使用<xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>作为修改命令的基础。</xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> 例如，你可能会调用<xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>和修改命令文本，然后显式设置的时间为<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>       当首次生成 SQL 语句后，应用程序必须显式调用<xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A>如果更改该语句以任何方式。</xref:System.Data.Common.DbCommandBuilder.RefreshSchema%2A> 否则为<xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>仍将使用从上一条语句，这可能不是正确的信息。</xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A> SQL 语句是第一个应用程序调用<xref:System.Data.Common.DbDataAdapter.Update%2A>或<xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A>.</xref:System.Data.Common.DbCommandBuilder.GetUpdateCommand%2A></xref:System.Data.Common.DbDataAdapter.Update%2A>时生成       生成参数名称时的默认行为是使用@p1， @p2，有关的各种参数，依此类推。 传递`true`为`useColumnsForParameterNames`参数使你可以强制<xref:System.Data.Common.DbCommandBuilder>生成改为根据列名称的参数。</xref:System.Data.Common.DbCommandBuilder> 基于列名称的参数生成成功仅当满足以下条件:-<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>已指定并且其长度等于或大于生成的参数名。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterNameMaxLength>      -生成的参数名满足中指定的条件<xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>正则表达式。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterNamePattern>      -A<xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>指定。</xref:System.Data.Common.DbMetaDataColumnNames.ParameterMarkerFormat>"
  syntax:
    content: public System.Data.Common.DbCommand GetUpdateCommand (bool useColumnsForParameterNames);
    parameters:
    - id: useColumnsForParameterNames
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，生成匹配列名称，如有可能的参数名称。 如果<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>，生成@p1， @p2，依次类推。"
    return:
      type: System.Data.Common.DbCommand
      description: "自动生成<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>执行更新所需的对象。"
  overload: System.Data.Common.DbCommandBuilder.GetUpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  id: InitializeCommand(System.Data.Common.DbCommand)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: InitializeCommand(DbCommand)
  nameWithType: DbCommandBuilder.InitializeCommand(DbCommand)
  fullName: System.Data.Common.DbCommandBuilder.InitializeCommand(DbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "Resets the <>*>, <>*>, <xref:System.Data.Common.DbCommand.CommandType*>, and <xref href=&quot;System.Data.UpdateRowSource&quot;></xref> properties on the <xref href=&quot;System.Data.Common.DbCommand&quot;></xref>.</xref:System.Data.Common.DbCommand.CommandType*>"
  remarks: "此方法仅供用于构建自定义命令生成器的提供程序编写器。"
  syntax:
    content: protected virtual System.Data.Common.DbCommand InitializeCommand (System.Data.Common.DbCommand command);
    parameters:
    - id: command
      type: System.Data.Common.DbCommand
      description: "<xref href=&quot;System.Data.Common.DbCommand&quot;> </xref>要用于命令生成器通过相应的插入、 更新或删除命令。"
    return:
      type: System.Data.Common.DbCommand
      description: "A <xref href=&quot;System.Data.Common.DbCommand&quot;> </xref>实例要用于每个插入、 更新或删除操作。 传递 null 值时，允许 InitializeCommand 方法来创建<xref href=&quot;System.Data.Common.DbCommand&quot;></xref>对象基于与关联的选择命令<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;> </xref>。"
  overload: System.Data.Common.DbCommandBuilder.InitializeCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)
  id: QuoteIdentifier(System.String)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: QuoteIdentifier(String)
  nameWithType: DbCommandBuilder.QuoteIdentifier(String)
  fullName: System.Data.Common.DbCommandBuilder.QuoteIdentifier(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "指定在正确的目录的情况下不带引号的标识符，则会返回正确带引号的该标识符，包括正确转义任何在标识符中嵌入的引号的形式。"
  syntax:
    content: public virtual string QuoteIdentifier (string unquotedIdentifier);
    parameters:
    - id: unquotedIdentifier
      type: System.String
      description: "原始不带引号的标识符。"
    return:
      type: System.String
      description: "带引号的标识符的版本。 适当地转义标识符中嵌入的引号。"
  overload: System.Data.Common.DbCommandBuilder.QuoteIdentifier*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.QuotePrefix
  id: QuotePrefix
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: QuotePrefix
  nameWithType: DbCommandBuilder.QuotePrefix
  fullName: System.Data.Common.DbCommandBuilder.QuotePrefix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取或设置的开头字符或字符指定其名称包含空格或保留的令牌等字符的数据库对象 （例如，表或列） 时使用。"
  remarks: "某些数据源可能具有可以包含空格、 逗号、 分号等字符的对象。 为了适应这一功能，应使用 QuotePrefix 和<xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A>属性以指定如左的括号和右括号以将对象名称括起来的分隔符。</xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A>      1> [!NOTE]&1;> 虽然不能更改 QuotePrefix 或<xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A>属性插入、 更新或删除生成命令，可以将其设置更改后调用`Update`方法的一种<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbCommandBuilder.QuoteSuffix%2A>"
  syntax:
    content: public virtual string QuotePrefix { get; set; }
    return:
      type: System.String
      description: "开头字符或要使用的字符。 默认值为一个空字符串。"
  overload: System.Data.Common.DbCommandBuilder.QuotePrefix*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "生成 insert、 update 或 delete 命令后，无法更改此属性。"
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.QuoteSuffix
  id: QuoteSuffix
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: QuoteSuffix
  nameWithType: DbCommandBuilder.QuoteSuffix
  fullName: System.Data.Common.DbCommandBuilder.QuoteSuffix
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取或设置的结束字符或字符指定其名称包含空格或保留的令牌等字符的数据库对象 （例如，表或列） 时使用。"
  remarks: "某些数据源可能具有可以包含空格、 逗号、 分号等字符的对象。 若要适应此功能，使用<xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A>和 QuoteSuffix 属性，以指定如左的括号和右括号以将对象名称括起来的分隔符。</xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A>      1> [!NOTE]&1;> 虽然不能更改<xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A>或 QuoteSuffix 属性插入、 更新或删除生成命令，可以将其设置更改后调用`Update`方法的一种<xref:System.Data.Common.DbDataAdapter>。</xref:System.Data.Common.DbDataAdapter> </xref:System.Data.Common.DbCommandBuilder.QuotePrefix%2A>"
  syntax:
    content: public virtual string QuoteSuffix { get; set; }
    return:
      type: System.String
      description: "结束字符或要使用的字符。 默认值为一个空字符串。"
  overload: System.Data.Common.DbCommandBuilder.QuoteSuffix*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.RefreshSchema
  id: RefreshSchema
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: RefreshSchema()
  nameWithType: DbCommandBuilder.RefreshSchema()
  fullName: System.Data.Common.DbCommandBuilder.RefreshSchema()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "清除与此关联的命令<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;> </xref>。"
  remarks: "有效地调用 RefreshSchema 方法中删除所有<xref:System.Data.Common.DbCommand>引用对象<xref:System.Data.Common.DbDataAdapter.SelectCommand%2A>， <xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A>， <xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A>，和<xref:System.Data.Common.DbDataAdapter.InsertCommand%2A>属性。</xref:System.Data.Common.DbDataAdapter.InsertCommand%2A> </xref:System.Data.Common.DbDataAdapter.DeleteCommand%2A> </xref:System.Data.Common.DbDataAdapter.UpdateCommand%2A> </xref:System.Data.Common.DbDataAdapter.SelectCommand%2A> </xref:System.Data.Common.DbCommand>"
  syntax:
    content: public virtual void RefreshSchema ();
    parameters: []
  overload: System.Data.Common.DbCommandBuilder.RefreshSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)
  id: RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: RowUpdatingHandler(RowUpdatingEventArgs)
  nameWithType: DbCommandBuilder.RowUpdatingHandler(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbCommandBuilder.RowUpdatingHandler(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "添加事件处理程序<xref href=&quot;System.Data.OleDb.OleDbDataAdapter.RowUpdating&quot;></xref>事件。"
  syntax:
    content: protected void RowUpdatingHandler (System.Data.Common.RowUpdatingEventArgs rowUpdatingEvent);
    parameters:
    - id: rowUpdatingEvent
      type: System.Data.Common.RowUpdatingEventArgs
      description: "A <xref href=&quot;System.Data.Common.RowUpdatingEventArgs&quot;> </xref>实例，包含有关事件的信息。"
  overload: System.Data.Common.DbCommandBuilder.RowUpdatingHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.SchemaSeparator
  id: SchemaSeparator
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: SchemaSeparator
  nameWithType: DbCommandBuilder.SchemaSeparator
  fullName: System.Data.Common.DbCommandBuilder.SchemaSeparator
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取或设置要用于架构标识符和任何其他标识符之间的分隔符的字符。"
  remarks: "通常情况下，数据库服务器通过将架构名称与具有某些字符标识符分离指示标识符的架构。 例如，SQL Server 使用了一个冒号，如创建完整的标识符**人员︰ CustomerName**，其中&quot;Person&quot;是架构名称，&quot;CustomerName&quot;是的标识符。 设置此属性允许开发人员修改此行为。"
  syntax:
    content: public virtual string SchemaSeparator { get; set; }
    return:
      type: System.String
      description: "要用作架构分隔符的字符。"
  overload: System.Data.Common.DbCommandBuilder.SchemaSeparator*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.SetAllValues
  id: SetAllValues
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: SetAllValues
  nameWithType: DbCommandBuilder.SetAllValues
  fullName: System.Data.Common.DbCommandBuilder.SetAllValues
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "指定是否在 update 语句中的所有列值都是包含还是仅更改的列值。"
  remarks: "生成的 UPDATE 语句<xref:System.Data.Common.DbCommandBuilder>可能包括有关所有列的更新信息也可以包括仅其值已更改，这些列的信息。</xref:System.Data.Common.DbCommandBuilder> 将 SetAllValues 属性设置为`true`是否或不更改其值将导致生成的 UPDATE 语句，以包括所有列。"
  syntax:
    content: public bool SetAllValues { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果通过生成的 UPDATE 语句<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;></xref>包括所有列;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果它包括仅更改列。"
  overload: System.Data.Common.DbCommandBuilder.SetAllValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  id: SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: SetRowUpdatingHandler(DbDataAdapter)
  nameWithType: DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  fullName: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "注册<xref href=&quot;System.Data.Common.DbCommandBuilder&quot;></xref>来处理<xref href=&quot;System.Data.OleDb.OleDbDataAdapter.RowUpdating&quot;></xref>事件<xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>。"
  remarks: "此方法仅供用于构建自定义命令生成器的提供程序编写器。 当新<xref:System.Data.Common.DbDataAdapter>添加到<xref:System.Data.Common.DbCommandBuilder>，也会为的 DbDataAdapter 注册**RowUpdating**事件。</xref:System.Data.Common.DbCommandBuilder> </xref:System.Data.Common.DbDataAdapter> 如果具有相同再次调用此方法<xref:System.Data.Common.DbDataAdapter>、<xref:System.Data.Common.DbCommandBuilder>是为该 DbDataAdapter 注销**RowUpdating**事件。</xref:System.Data.Common.DbCommandBuilder> </xref:System.Data.Common.DbDataAdapter>"
  syntax:
    content: protected abstract void SetRowUpdatingHandler (System.Data.Common.DbDataAdapter adapter);
    parameters:
    - id: adapter
      type: System.Data.Common.DbDataAdapter
      description: "<xref href=&quot;System.Data.Common.DbDataAdapter&quot;> </xref>要用于更新。"
  overload: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)
  id: UnquoteIdentifier(System.String)
  parent: System.Data.Common.DbCommandBuilder
  langs:
  - csharp
  name: UnquoteIdentifier(String)
  nameWithType: DbCommandBuilder.UnquoteIdentifier(String)
  fullName: System.Data.Common.DbCommandBuilder.UnquoteIdentifier(String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "给定的带引号的标识符，返回该标识符，包括正确取消转义的正确却未加引号的形式任何嵌入的引号的在标识符中。"
  syntax:
    content: public virtual string UnquoteIdentifier (string quotedIdentifier);
    parameters:
    - id: quotedIdentifier
      type: System.String
      description: "将已删除其嵌入的引号的标识符。"
    return:
      type: System.String
      description: "不带引号的标识符，使用嵌入的引号正确取消转义。"
  overload: System.Data.Common.DbCommandBuilder.UnquoteIdentifier*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.Common.DbCommandBuilder.#ctor
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: DbCommandBuilder()
  nameWithType: DbCommandBuilder.DbCommandBuilder()
  fullName: System.Data.Common.DbCommandBuilder.DbCommandBuilder()
- uid: System.Data.Common.DbCommandBuilder.ApplyParameterInfo(System.Data.Common.DbParameter,System.Data.DataRow,System.Data.StatementType,System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  nameWithType: DbCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
  fullName: System.Data.Common.DbCommandBuilder.ApplyParameterInfo(DbParameter,DataRow,StatementType,Boolean)
- uid: System.Data.Common.DbParameter
  parent: System.Data.Common
  isExternal: false
  name: DbParameter
  nameWithType: DbParameter
  fullName: System.Data.Common.DbParameter
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbCommandBuilder.CatalogLocation
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: CatalogLocation
  nameWithType: DbCommandBuilder.CatalogLocation
  fullName: System.Data.Common.DbCommandBuilder.CatalogLocation
- uid: System.Data.Common.CatalogLocation
  parent: System.Data.Common
  isExternal: false
  name: CatalogLocation
  nameWithType: CatalogLocation
  fullName: System.Data.Common.CatalogLocation
- uid: System.Data.Common.DbCommandBuilder.CatalogSeparator
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: CatalogSeparator
  nameWithType: DbCommandBuilder.CatalogSeparator
  fullName: System.Data.Common.DbCommandBuilder.CatalogSeparator
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.Common.DbCommandBuilder.ConflictOption
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: ConflictOption
  nameWithType: DbCommandBuilder.ConflictOption
  fullName: System.Data.Common.DbCommandBuilder.ConflictOption
- uid: System.Data.ConflictOption
  parent: System.Data
  isExternal: false
  name: ConflictOption
  nameWithType: ConflictOption
  fullName: System.Data.ConflictOption
- uid: System.Data.Common.DbCommandBuilder.DataAdapter
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: DataAdapter
  nameWithType: DbCommandBuilder.DataAdapter
  fullName: System.Data.Common.DbCommandBuilder.DataAdapter
- uid: System.Data.Common.DbDataAdapter
  parent: System.Data.Common
  isExternal: false
  name: DbDataAdapter
  nameWithType: DbDataAdapter
  fullName: System.Data.Common.DbDataAdapter
- uid: System.Data.Common.DbCommandBuilder.Dispose(System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: DbCommandBuilder.Dispose(Boolean)
  fullName: System.Data.Common.DbCommandBuilder.Dispose(Boolean)
- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetDeleteCommand()
  nameWithType: DbCommandBuilder.GetDeleteCommand()
  fullName: System.Data.Common.DbCommandBuilder.GetDeleteCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand(System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetDeleteCommand(Boolean)
  nameWithType: DbCommandBuilder.GetDeleteCommand(Boolean)
  fullName: System.Data.Common.DbCommandBuilder.GetDeleteCommand(Boolean)
- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetInsertCommand()
  nameWithType: DbCommandBuilder.GetInsertCommand()
  fullName: System.Data.Common.DbCommandBuilder.GetInsertCommand()
- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand(System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetInsertCommand(Boolean)
  nameWithType: DbCommandBuilder.GetInsertCommand(Boolean)
  fullName: System.Data.Common.DbCommandBuilder.GetInsertCommand(Boolean)
- uid: System.Data.Common.DbCommandBuilder.GetParameterName(System.Int32)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetParameterName(Int32)
  nameWithType: DbCommandBuilder.GetParameterName(Int32)
  fullName: System.Data.Common.DbCommandBuilder.GetParameterName(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.Common.DbCommandBuilder.GetParameterName(System.String)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetParameterName(String)
  nameWithType: DbCommandBuilder.GetParameterName(String)
  fullName: System.Data.Common.DbCommandBuilder.GetParameterName(String)
- uid: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(System.Int32)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetParameterPlaceholder(Int32)
  nameWithType: DbCommandBuilder.GetParameterPlaceholder(Int32)
  fullName: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder(Int32)
- uid: System.Data.Common.DbCommandBuilder.GetSchemaTable(System.Data.Common.DbCommand)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetSchemaTable(DbCommand)
  nameWithType: DbCommandBuilder.GetSchemaTable(DbCommand)
  fullName: System.Data.Common.DbCommandBuilder.GetSchemaTable(DbCommand)
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetUpdateCommand()
  nameWithType: DbCommandBuilder.GetUpdateCommand()
  fullName: System.Data.Common.DbCommandBuilder.GetUpdateCommand()
- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand(System.Boolean)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetUpdateCommand(Boolean)
  nameWithType: DbCommandBuilder.GetUpdateCommand(Boolean)
  fullName: System.Data.Common.DbCommandBuilder.GetUpdateCommand(Boolean)
- uid: System.Data.Common.DbCommandBuilder.InitializeCommand(System.Data.Common.DbCommand)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: InitializeCommand(DbCommand)
  nameWithType: DbCommandBuilder.InitializeCommand(DbCommand)
  fullName: System.Data.Common.DbCommandBuilder.InitializeCommand(DbCommand)
- uid: System.Data.Common.DbCommandBuilder.QuoteIdentifier(System.String)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: QuoteIdentifier(String)
  nameWithType: DbCommandBuilder.QuoteIdentifier(String)
  fullName: System.Data.Common.DbCommandBuilder.QuoteIdentifier(String)
- uid: System.Data.Common.DbCommandBuilder.QuotePrefix
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: QuotePrefix
  nameWithType: DbCommandBuilder.QuotePrefix
  fullName: System.Data.Common.DbCommandBuilder.QuotePrefix
- uid: System.Data.Common.DbCommandBuilder.QuoteSuffix
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: QuoteSuffix
  nameWithType: DbCommandBuilder.QuoteSuffix
  fullName: System.Data.Common.DbCommandBuilder.QuoteSuffix
- uid: System.Data.Common.DbCommandBuilder.RefreshSchema
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: RefreshSchema()
  nameWithType: DbCommandBuilder.RefreshSchema()
  fullName: System.Data.Common.DbCommandBuilder.RefreshSchema()
- uid: System.Data.Common.DbCommandBuilder.RowUpdatingHandler(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: RowUpdatingHandler(RowUpdatingEventArgs)
  nameWithType: DbCommandBuilder.RowUpdatingHandler(RowUpdatingEventArgs)
  fullName: System.Data.Common.DbCommandBuilder.RowUpdatingHandler(RowUpdatingEventArgs)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.Common.DbCommandBuilder.SchemaSeparator
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: SchemaSeparator
  nameWithType: DbCommandBuilder.SchemaSeparator
  fullName: System.Data.Common.DbCommandBuilder.SchemaSeparator
- uid: System.Data.Common.DbCommandBuilder.SetAllValues
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: SetAllValues
  nameWithType: DbCommandBuilder.SetAllValues
  fullName: System.Data.Common.DbCommandBuilder.SetAllValues
- uid: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(System.Data.Common.DbDataAdapter)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: SetRowUpdatingHandler(DbDataAdapter)
  nameWithType: DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
  fullName: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler(DbDataAdapter)
- uid: System.Data.Common.DbCommandBuilder.UnquoteIdentifier(System.String)
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: UnquoteIdentifier(String)
  nameWithType: DbCommandBuilder.UnquoteIdentifier(String)
  fullName: System.Data.Common.DbCommandBuilder.UnquoteIdentifier(String)
- uid: System.Data.Common.DbCommandBuilder.#ctor*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: DbCommandBuilder
  nameWithType: DbCommandBuilder.DbCommandBuilder
- uid: System.Data.Common.DbCommandBuilder.ApplyParameterInfo*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: ApplyParameterInfo
  nameWithType: DbCommandBuilder.ApplyParameterInfo
- uid: System.Data.Common.DbCommandBuilder.CatalogLocation*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: CatalogLocation
  nameWithType: DbCommandBuilder.CatalogLocation
- uid: System.Data.Common.DbCommandBuilder.CatalogSeparator*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: CatalogSeparator
  nameWithType: DbCommandBuilder.CatalogSeparator
- uid: System.Data.Common.DbCommandBuilder.ConflictOption*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: ConflictOption
  nameWithType: DbCommandBuilder.ConflictOption
- uid: System.Data.Common.DbCommandBuilder.DataAdapter*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: DataAdapter
  nameWithType: DbCommandBuilder.DataAdapter
- uid: System.Data.Common.DbCommandBuilder.Dispose*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: Dispose
  nameWithType: DbCommandBuilder.Dispose
- uid: System.Data.Common.DbCommandBuilder.GetDeleteCommand*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetDeleteCommand
  nameWithType: DbCommandBuilder.GetDeleteCommand
- uid: System.Data.Common.DbCommandBuilder.GetInsertCommand*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetInsertCommand
  nameWithType: DbCommandBuilder.GetInsertCommand
- uid: System.Data.Common.DbCommandBuilder.GetParameterName*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetParameterName
  nameWithType: DbCommandBuilder.GetParameterName
- uid: System.Data.Common.DbCommandBuilder.GetParameterPlaceholder*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetParameterPlaceholder
  nameWithType: DbCommandBuilder.GetParameterPlaceholder
- uid: System.Data.Common.DbCommandBuilder.GetSchemaTable*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetSchemaTable
  nameWithType: DbCommandBuilder.GetSchemaTable
- uid: System.Data.Common.DbCommandBuilder.GetUpdateCommand*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: GetUpdateCommand
  nameWithType: DbCommandBuilder.GetUpdateCommand
- uid: System.Data.Common.DbCommandBuilder.InitializeCommand*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: InitializeCommand
  nameWithType: DbCommandBuilder.InitializeCommand
- uid: System.Data.Common.DbCommandBuilder.QuoteIdentifier*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: QuoteIdentifier
  nameWithType: DbCommandBuilder.QuoteIdentifier
- uid: System.Data.Common.DbCommandBuilder.QuotePrefix*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: QuotePrefix
  nameWithType: DbCommandBuilder.QuotePrefix
- uid: System.Data.Common.DbCommandBuilder.QuoteSuffix*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: QuoteSuffix
  nameWithType: DbCommandBuilder.QuoteSuffix
- uid: System.Data.Common.DbCommandBuilder.RefreshSchema*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: RefreshSchema
  nameWithType: DbCommandBuilder.RefreshSchema
- uid: System.Data.Common.DbCommandBuilder.RowUpdatingHandler*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: RowUpdatingHandler
  nameWithType: DbCommandBuilder.RowUpdatingHandler
- uid: System.Data.Common.DbCommandBuilder.SchemaSeparator*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: SchemaSeparator
  nameWithType: DbCommandBuilder.SchemaSeparator
- uid: System.Data.Common.DbCommandBuilder.SetAllValues*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: SetAllValues
  nameWithType: DbCommandBuilder.SetAllValues
- uid: System.Data.Common.DbCommandBuilder.SetRowUpdatingHandler*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: SetRowUpdatingHandler
  nameWithType: DbCommandBuilder.SetRowUpdatingHandler
- uid: System.Data.Common.DbCommandBuilder.UnquoteIdentifier*
  parent: System.Data.Common.DbCommandBuilder
  isExternal: false
  name: UnquoteIdentifier
  nameWithType: DbCommandBuilder.UnquoteIdentifier
