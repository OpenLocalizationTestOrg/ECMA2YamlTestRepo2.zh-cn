### YamlMime:ManagedReference
items:
- uid: System.Security.AccessControl.GenericAce
  id: GenericAce
  children:
  - System.Security.AccessControl.GenericAce.AceFlags
  - System.Security.AccessControl.GenericAce.AceType
  - System.Security.AccessControl.GenericAce.AuditFlags
  - System.Security.AccessControl.GenericAce.BinaryLength
  - System.Security.AccessControl.GenericAce.Copy
  - System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.Equals(System.Object)
  - System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  - System.Security.AccessControl.GenericAce.GetHashCode
  - System.Security.AccessControl.GenericAce.InheritanceFlags
  - System.Security.AccessControl.GenericAce.IsInherited
  - System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  - System.Security.AccessControl.GenericAce.PropagationFlags
  langs:
  - csharp
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
  type: Class
  summary: "表示访问控制项 (ACE)，并是所有其他 ACE 类的基类。"
  remarks: "ACE 包含 ACE 标头和二进制 blob。 标头包含有关类型的 ACE、 各种标志和二进制 blob 的大小的信息。"
  syntax:
    content: public abstract class GenericAce
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AceFlags
  id: AceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "获取或设置<xref href=&quot;System.Security.AccessControl.AceFlags&quot;></xref>与此关联<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象。"
  remarks: "<xref:System.Security.AccessControl.AceFlags>对象包含指定有关继承、 继承传播信息的标志和审核条件的访问控制项 (ACE)。</xref:System.Security.AccessControl.AceFlags>"
  syntax:
    content: public System.Security.AccessControl.AceFlags AceFlags { get; set; }
    return:
      type: System.Security.AccessControl.AceFlags
      description: "<xref href=&quot;System.Security.AccessControl.AceFlags&quot;> </xref>与此关联<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象。"
  overload: System.Security.AccessControl.GenericAce.AceFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AceType
  id: AceType
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "获取此访问控制项 (ACE) 的类型。"
  syntax:
    content: public System.Security.AccessControl.AceType AceType { get; }
    return:
      type: System.Security.AccessControl.AceType
      description: "该 ACE 的类型。"
  overload: System.Security.AccessControl.GenericAce.AceType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  id: AuditFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "获取与此访问控制项 (ACE) 关联的审核信息。"
  syntax:
    content: public System.Security.AccessControl.AuditFlags AuditFlags { get; }
    return:
      type: System.Security.AccessControl.AuditFlags
      description: "关联与此访问控制项 (ACE) 的审核信息。"
  overload: System.Security.AccessControl.GenericAce.AuditFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  id: BinaryLength
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "获取的长度，以字节为单位的二进制表示形式当前<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象。 将 ACL 封送到二进制数组之前，应使用此长度<xref:System.Security.AccessControl.GenericAce.GetBinaryForm*>方法。</xref:System.Security.AccessControl.GenericAce.GetBinaryForm*>"
  syntax:
    content: public abstract int BinaryLength { get; }
    return:
      type: System.Int32
      description: "当前的二进制表示形式的长度，以字节为单位， <xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>对象。"
  overload: System.Security.AccessControl.GenericAce.BinaryLength*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.Copy
  id: Copy
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "创建此访问控制项 (ACE) 的深层副本。"
  syntax:
    content: public System.Security.AccessControl.GenericAce Copy ();
    parameters: []
    return:
      type: System.Security.AccessControl.GenericAce
      description: "<xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>此方法创建的对象。"
  overload: System.Security.AccessControl.GenericAce.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  id: CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: CreateFromBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "创建<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>从指定的二进制数据的对象。"
  syntax:
    content: public static System.Security.AccessControl.GenericAce CreateFromBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "从中创建新的二进制数据<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象。"
    - id: offset
      type: System.Int32
      description: "从此处开始取消封送的偏移量。"
    return:
      type: System.Security.AccessControl.GenericAce
      description: "<xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>对象此方法创建。"
  overload: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "确定是否指定<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象是否等于当前<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象。"
  syntax:
    content: public override sealed bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "<xref href=&quot;System.Security.AccessControl.GenericAce&quot;> </xref>要比较的当前对象<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象是否等于当前<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.AccessControl.GenericAce.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  id: GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "封送的内容<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>到指定的偏移量开始的指定的字节数组的对象。"
  syntax:
    content: public abstract void GetBinaryForm (byte[] binaryForm, int offset);
    parameters:
    - id: binaryForm
      type: System.Byte[]
      description: "到的字节数组的内容<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>封送。"
    - id: offset
      type: System.Int32
      description: "开始封送的偏移量。"
  overload: System.Security.AccessControl.GenericAce.GetBinaryForm*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>为负数，或该值高以致整个<xref href=&quot;System.Security.AccessControl.GenericAcl&quot;></xref>要被复制到<code>array</code>。"
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  id: GetHashCode
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "用作哈希函数<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>类。 GetHashCode 方法是适合在哈希算法和数据结构，如哈希表中使用。"
  syntax:
    content: public override sealed int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的哈希代码<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象。"
  overload: System.Security.AccessControl.GenericAce.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  id: InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "获取指定的此访问控制项 (ACE) 的继承属性的标志。"
  syntax:
    content: public System.Security.AccessControl.InheritanceFlags InheritanceFlags { get; }
    return:
      type: System.Security.AccessControl.InheritanceFlags
      description: "指定此 ACE 的继承属性的标志。"
  overload: System.Security.AccessControl.GenericAce.InheritanceFlags*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.IsInherited
  id: IsInherited
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "获取一个布尔值，指定此访问控制项 (ACE) 是否继承或显式设置。"
  syntax:
    content: public bool IsInherited { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果继承此 ACE;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.AccessControl.GenericAce.IsInherited*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: op_Equality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "确定是否指定<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象可视为相等。"
  syntax:
    content: public static bool op_Equality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "第一个<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>要比较的对象。"
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "第二个<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象是否相等; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.AccessControl.GenericAce.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  id: op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: op_Inequality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "确定是否指定<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象被视为不相等。"
  syntax:
    content: public static bool op_Inequality (System.Security.AccessControl.GenericAce left, System.Security.AccessControl.GenericAce right);
    parameters:
    - id: left
      type: System.Security.AccessControl.GenericAce
      description: "第一个<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>要比较的对象。"
    - id: right
      type: System.Security.AccessControl.GenericAce
      description: "第二个<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果两个<xref href=&quot;System.Security.AccessControl.GenericAce&quot;></xref>对象是否不相等; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.AccessControl.GenericAce.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  id: PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  langs:
  - csharp
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.AccessControl
  summary: "获取指定的继承传播属性此访问控制项 (ACE) 的标志。"
  syntax:
    content: public System.Security.AccessControl.PropagationFlags PropagationFlags { get; }
    return:
      type: System.Security.AccessControl.PropagationFlags
      description: "指定此 ACE 的继承传播属性的标志。"
  overload: System.Security.AccessControl.GenericAce.PropagationFlags*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.AccessControl.GenericAce.AceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
  fullName: System.Security.AccessControl.GenericAce.AceFlags
- uid: System.Security.AccessControl.AceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AceFlags
  nameWithType: AceFlags
  fullName: System.Security.AccessControl.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
  fullName: System.Security.AccessControl.GenericAce.AceType
- uid: System.Security.AccessControl.AceType
  parent: System.Security.AccessControl
  isExternal: false
  name: AceType
  nameWithType: AceType
  fullName: System.Security.AccessControl.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
  fullName: System.Security.AccessControl.GenericAce.AuditFlags
- uid: System.Security.AccessControl.AuditFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: AuditFlags
  nameWithType: AuditFlags
  fullName: System.Security.AccessControl.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
  fullName: System.Security.AccessControl.GenericAce.BinaryLength
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.AccessControl.GenericAce.Copy
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy()
  nameWithType: GenericAce.Copy()
  fullName: System.Security.AccessControl.GenericAce.Copy()
- uid: System.Security.AccessControl.GenericAce
  parent: System.Security.AccessControl
  isExternal: false
  name: GenericAce
  nameWithType: GenericAce
  fullName: System.Security.AccessControl.GenericAce
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: CreateFromBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.CreateFromBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.CreateFromBinaryForm(Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.AccessControl.GenericAce.Equals(System.Object)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Equals(Object)
  nameWithType: GenericAce.Equals(Object)
  fullName: System.Security.AccessControl.GenericAce.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm(System.Byte[],System.Int32)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetBinaryForm(Byte[],Int32)
  nameWithType: GenericAce.GetBinaryForm(Byte[],Int32)
  fullName: System.Security.AccessControl.GenericAce.GetBinaryForm(Byte[],Int32)
- uid: System.Security.AccessControl.GenericAce.GetHashCode
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode()
  nameWithType: GenericAce.GetHashCode()
  fullName: System.Security.AccessControl.GenericAce.GetHashCode()
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
  fullName: System.Security.AccessControl.GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.InheritanceFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: InheritanceFlags
  nameWithType: InheritanceFlags
  fullName: System.Security.AccessControl.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
  fullName: System.Security.AccessControl.GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.op_Equality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Equality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Equality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Equality(GenericAce,GenericAce)
- uid: System.Security.AccessControl.GenericAce.op_Inequality(System.Security.AccessControl.GenericAce,System.Security.AccessControl.GenericAce)
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Inequality(GenericAce,GenericAce)
  nameWithType: GenericAce.op_Inequality(GenericAce,GenericAce)
  fullName: System.Security.AccessControl.GenericAce.op_Inequality(GenericAce,GenericAce)
- uid: System.Security.AccessControl.GenericAce.PropagationFlags
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
  fullName: System.Security.AccessControl.GenericAce.PropagationFlags
- uid: System.Security.AccessControl.PropagationFlags
  parent: System.Security.AccessControl
  isExternal: false
  name: PropagationFlags
  nameWithType: PropagationFlags
  fullName: System.Security.AccessControl.PropagationFlags
- uid: System.Security.AccessControl.GenericAce.AceFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceFlags
  nameWithType: GenericAce.AceFlags
- uid: System.Security.AccessControl.GenericAce.AceType*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AceType
  nameWithType: GenericAce.AceType
- uid: System.Security.AccessControl.GenericAce.AuditFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: AuditFlags
  nameWithType: GenericAce.AuditFlags
- uid: System.Security.AccessControl.GenericAce.BinaryLength*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: BinaryLength
  nameWithType: GenericAce.BinaryLength
- uid: System.Security.AccessControl.GenericAce.Copy*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Copy
  nameWithType: GenericAce.Copy
- uid: System.Security.AccessControl.GenericAce.CreateFromBinaryForm*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: CreateFromBinaryForm
  nameWithType: GenericAce.CreateFromBinaryForm
- uid: System.Security.AccessControl.GenericAce.Equals*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: Equals
  nameWithType: GenericAce.Equals
- uid: System.Security.AccessControl.GenericAce.GetBinaryForm*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetBinaryForm
  nameWithType: GenericAce.GetBinaryForm
- uid: System.Security.AccessControl.GenericAce.GetHashCode*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: GetHashCode
  nameWithType: GenericAce.GetHashCode
- uid: System.Security.AccessControl.GenericAce.InheritanceFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: InheritanceFlags
  nameWithType: GenericAce.InheritanceFlags
- uid: System.Security.AccessControl.GenericAce.IsInherited*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: IsInherited
  nameWithType: GenericAce.IsInherited
- uid: System.Security.AccessControl.GenericAce.op_Equality*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Equality
  nameWithType: GenericAce.op_Equality
- uid: System.Security.AccessControl.GenericAce.op_Inequality*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: op_Inequality
  nameWithType: GenericAce.op_Inequality
- uid: System.Security.AccessControl.GenericAce.PropagationFlags*
  parent: System.Security.AccessControl.GenericAce
  isExternal: false
  name: PropagationFlags
  nameWithType: GenericAce.PropagationFlags
