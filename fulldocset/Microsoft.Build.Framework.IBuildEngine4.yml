### YamlMime:ManagedReference
items:
- uid: Microsoft.Build.Framework.IBuildEngine4
  id: IBuildEngine4
  children:
  - Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)
  - Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject(System.Object,System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime,System.Boolean)
  - Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)
  langs:
  - csharp
  name: IBuildEngine4
  nameWithType: IBuildEngine4
  fullName: Microsoft.Build.Framework.IBuildEngine4
  type: Interface
  summary: "此接口扩展 IBuildEngine 提供允许任务共享任务调用之间的数据的机制。"
  syntax:
    content: 'public interface IBuildEngine4 : Microsoft.Build.Framework.IBuildEngine3'
  implements:
  - Microsoft.Build.Framework.IBuildEngine3
  platform:
  - net462
- uid: Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)
  id: GetRegisteredTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)
  parent: Microsoft.Build.Framework.IBuildEngine4
  langs:
  - csharp
  name: GetRegisteredTaskObject(Object,RegisteredTaskObjectLifetime)
  nameWithType: IBuildEngine4.GetRegisteredTaskObject(Object,RegisteredTaskObjectLifetime)
  fullName: Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject(Object,RegisteredTaskObjectLifetime)
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: "检索与指定的键存储的以前注册的任务对象。"
  syntax:
    content: public object GetRegisteredTaskObject (object key, Microsoft.Build.Framework.RegisteredTaskObjectLifetime lifetime);
    parameters:
    - id: key
      type: System.Object
      description: "用于检索对象的键。"
    - id: lifetime
      type: Microsoft.Build.Framework.RegisteredTaskObjectLifetime
      description: "对象的生存期。"
    return:
      type: System.Object
      description: "返回在该注册表项下注册已注册的对象或如果没有对象则为 null 或如果对象已被丢弃访问早期的集合。"
  overload: Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject(System.Object,System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime,System.Boolean)
  id: RegisterTaskObject(System.Object,System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime,System.Boolean)
  parent: Microsoft.Build.Framework.IBuildEngine4
  langs:
  - csharp
  name: RegisterTaskObject(Object,Object,RegisteredTaskObjectLifetime,Boolean)
  nameWithType: IBuildEngine4.RegisterTaskObject(Object,Object,RegisteredTaskObjectLifetime,Boolean)
  fullName: Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject(Object,Object,RegisteredTaskObjectLifetime,Boolean)
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: "注册系统将在将来的某个指定时间释放的对象。"
  remarks: "可能需要保留间任务调用，如数据的缓存任务的状态的任务由调用此方法。 强烈建议`allowEarlyCollection`设置为`true`如果该对象将保留任何重要数据量。       在其释放此对象的线程可能任意，但它将不处理该任务执行时，即使`allowEarlyCollection`设置为`true`。       如果对象实现 IDisposable，IDisposable.Dispose 将调用在对象上之前放弃它。"
  syntax:
    content: public void RegisterTaskObject (object key, object obj, Microsoft.Build.Framework.RegisteredTaskObjectLifetime lifetime, bool allowEarlyCollection);
    parameters:
    - id: key
      type: System.Object
      description: "用于检索对象的键。"
    - id: obj
      type: System.Object
      description: "要保留时间更高版本可供使用的对象。"
    - id: lifetime
      type: Microsoft.Build.Framework.RegisteredTaskObjectLifetime
      description: "对象的生存期。"
    - id: allowEarlyCollection
      type: System.Boolean
      description: "确定是否可以早于请求的时间释放此对象的标志。"
  overload: Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)
  id: UnregisterTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)
  parent: Microsoft.Build.Framework.IBuildEngine4
  langs:
  - csharp
  name: UnregisterTaskObject(Object,RegisteredTaskObjectLifetime)
  nameWithType: IBuildEngine4.UnregisterTaskObject(Object,RegisteredTaskObjectLifetime)
  fullName: Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject(Object,RegisteredTaskObjectLifetime)
  type: Method
  assemblies:
  - Microsoft.Build.Framework
  namespace: Microsoft.Build.Framework
  summary: "注销之前注册的任务对象。"
  syntax:
    content: public object UnregisterTaskObject (object key, Microsoft.Build.Framework.RegisteredTaskObjectLifetime lifetime);
    parameters:
    - id: key
      type: System.Object
      description: "用于检索对象的键。"
    - id: lifetime
      type: Microsoft.Build.Framework.RegisteredTaskObjectLifetime
      description: "对象的生存期。"
    return:
      type: System.Object
      description: "返回在该注册表项下注册为以前注册的对象或如果没有对象的空值或如果对象已被丢弃访问早期的集合。"
  overload: Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)
  parent: Microsoft.Build.Framework.IBuildEngine4
  isExternal: false
  name: GetRegisteredTaskObject(Object,RegisteredTaskObjectLifetime)
  nameWithType: IBuildEngine4.GetRegisteredTaskObject(Object,RegisteredTaskObjectLifetime)
  fullName: Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject(Object,RegisteredTaskObjectLifetime)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Build.Framework.RegisteredTaskObjectLifetime
  parent: Microsoft.Build.Framework
  isExternal: false
  name: RegisteredTaskObjectLifetime
  nameWithType: RegisteredTaskObjectLifetime
  fullName: Microsoft.Build.Framework.RegisteredTaskObjectLifetime
- uid: Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject(System.Object,System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime,System.Boolean)
  parent: Microsoft.Build.Framework.IBuildEngine4
  isExternal: false
  name: RegisterTaskObject(Object,Object,RegisteredTaskObjectLifetime,Boolean)
  nameWithType: IBuildEngine4.RegisterTaskObject(Object,Object,RegisteredTaskObjectLifetime,Boolean)
  fullName: Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject(Object,Object,RegisteredTaskObjectLifetime,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject(System.Object,Microsoft.Build.Framework.RegisteredTaskObjectLifetime)
  parent: Microsoft.Build.Framework.IBuildEngine4
  isExternal: false
  name: UnregisterTaskObject(Object,RegisteredTaskObjectLifetime)
  nameWithType: IBuildEngine4.UnregisterTaskObject(Object,RegisteredTaskObjectLifetime)
  fullName: Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject(Object,RegisteredTaskObjectLifetime)
- uid: Microsoft.Build.Framework.IBuildEngine4.GetRegisteredTaskObject*
  parent: Microsoft.Build.Framework.IBuildEngine4
  isExternal: false
  name: GetRegisteredTaskObject
  nameWithType: IBuildEngine4.GetRegisteredTaskObject
- uid: Microsoft.Build.Framework.IBuildEngine4.RegisterTaskObject*
  parent: Microsoft.Build.Framework.IBuildEngine4
  isExternal: false
  name: RegisterTaskObject
  nameWithType: IBuildEngine4.RegisterTaskObject
- uid: Microsoft.Build.Framework.IBuildEngine4.UnregisterTaskObject*
  parent: Microsoft.Build.Framework.IBuildEngine4
  isExternal: false
  name: UnregisterTaskObject
  nameWithType: IBuildEngine4.UnregisterTaskObject
