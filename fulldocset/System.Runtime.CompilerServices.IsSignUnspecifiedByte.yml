### YamlMime:ManagedReference
items:
- uid: System.Runtime.CompilerServices.IsSignUnspecifiedByte
  id: IsSignUnspecifiedByte
  children: []
  langs:
  - csharp
  name: IsSignUnspecifiedByte
  nameWithType: IsSignUnspecifiedByte
  fullName: System.Runtime.CompilerServices.IsSignUnspecifiedByte
  type: Class
  summary: "指示修饰符是既不签名和未签名。 此类不能被继承。"
  remarks: "某些编程语言，如 c + +，识别三个不同`char`值︰ `signed char`， `unsigned char`，和`char`。  若要区分未修改`char`类型与其他 Microsoft c + + 编译器将 IsSignUnspecifiedByte 修饰符添加到每`char`发送到程序集的类型。       编译器发出元数据，以更改默认行为不恰当时，会在实时 (JIT) 编译器处理值的方式中的自定义修饰符。  当 JIT 编译器遇到了一个自定义修饰符时，它将处理修饰符指定的方法中的值。  编译器可以将自定义修饰符应用于方法、 参数和返回值。  JIT 编译器必须响应所需修饰符，但可以忽略可选修饰符。       可以将自定义修饰符发出到元数据中使用以下方法之一:-使用中的方法<xref:System.Reflection.Emit.TypeBuilder>类如<xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineField%2A>， <xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A>，和<xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A>。</xref:System.Reflection.Emit.TypeBuilder.DefineProperty%2A> </xref:System.Reflection.Emit.TypeBuilder.DefineConstructor%2A> </xref:System.Reflection.Emit.TypeBuilder.DefineField%2A> </xref:System.Reflection.Emit.TypeBuilder.DefineMethod%2A> </xref:System.Reflection.Emit.TypeBuilder>      生成包含对的调用的 Microsoft 中间语言 (MSIL) 指令文件`modopt`和`modreq`，再将包含的文件内容组合[Ilasm.exe （IL 汇编程序）](~/add/includes/ajax-current-ext-md.md)。      -使用非托管的反射 API。"
  example:
  - "The following code example creates an assembly using classes in the <xref:System.Reflection.Emit> namespace and emits the IsSignUnspecifiedByte modifier into that assembly.  \n  \n [!code-cpp[Runtime.CompilerServices.IsSignUnspecifiedByte#1](~/add/codesnippet/cpp/t-system.runtime.compile_13_1.cpp)]"
  syntax:
    content: public static class IsSignUnspecifiedByte
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
