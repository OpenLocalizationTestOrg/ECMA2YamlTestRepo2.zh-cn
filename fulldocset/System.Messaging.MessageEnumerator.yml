### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageEnumerator
  id: MessageEnumerator
  children:
  - System.Messaging.MessageEnumerator.Close
  - System.Messaging.MessageEnumerator.Current
  - System.Messaging.MessageEnumerator.CursorHandle
  - System.Messaging.MessageEnumerator.Dispose
  - System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageEnumerator.MoveNext
  - System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  - System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  - System.Messaging.MessageEnumerator.Reset
  - System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageEnumerator
  nameWithType: MessageEnumerator
  fullName: System.Messaging.MessageEnumerator
  type: Class
  summary: "提供一个只进游标，用于枚举消息队列。"
  remarks: "与队列中的消息进行动态交互使用 MessageEnumerator。 方法可通过<xref:System.Messaging.MessageQueue>该类可以返回指向动态列表中的消息队列或在给定时刻的快照的队列时包含副本的数组的指定的方法调用的任一 MessageEnumerator。</xref:System.Messaging.MessageQueue>       与不同的是静态的快照，枚举数可以修改该集合。 使用 MessageEnumerator，你可以从队列中删除消息，并更改会立即反映在队列中。       一个枚举器不会从队列删除消息，当它查询队列时。 它将返回有关在当前光标位置，消息的信息，但它消息仍会保留在队列中。       MessageEnumerator 是光标，初始化为动态列表的开头。 列表顺序操作在队列中，消息的顺序相同根据消息优先级。 你可以通过调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageEnumerator.MoveNext%2A>光标移动到队列中的第一个消息 枚举数已初始化后，你可以使用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>转发逐步执行其余的消息。</xref:System.Messaging.MessageEnumerator.MoveNext%2A> 你可以指定是否要等待的消息变得可用，通过将传递到超时<xref:System.Messaging.MessageEnumerator.MoveNext%2A>方法。</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       枚举数是动态的因为可以通过枚举器访问光标的当前位置 （例如，由于低优先级），之后追加一条消息。 无法访问光标的当前位置之前插入一条消息。 不能与 MessageEnumerator 逐步向后。 游标允许仅向前移动。 <xref:System.Messaging.MessageEnumerator.Reset%2A>方法使你能够将光标放回队列的开头。</xref:System.Messaging.MessageEnumerator.Reset%2A>       独立处理的 MessageEnumerator 为给定队列的实例。 你可以创建两个 MessageEnumerator 实例应用于同一个队列。 一个 MessageEnumerator 对队列中消息所做的更改将会立即反映在第二个枚举器中如果第二个枚举数定位早于第一个。 但是，如果两个枚举器具有相同的位置，并且其中之一中删除该位置的消息，将引发异常如果其他枚举器尝试获取的值<xref:System.Messaging.MessageEnumerator.Current%2A>属性，现已删除消息。</xref:System.Messaging.MessageEnumerator.Current%2A>      1> [!NOTE]&1;> 如果创建的实例<xref:System.Messaging.MessageQueue>与<xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName>设置为`true`，没有其他应用程序可以修改你的枚举器中的消息，虽然有与队列连接。</xref:System.Messaging.MessageQueue.DenySharedReceive%2A?displayProperty=fullName> </xref:System.Messaging.MessageQueue>"
  example:
  - "The following example gets a dynamic list of messages in a queue and counts all messages with the <xref:System.Messaging.Message.Priority%2A> property set to <xref:System.Messaging.MessagePriority?displayProperty=fullName>.  \n  \n [!code-cs[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/csharp/t-system.messaging.messa_2_1.cs)]\n [!code-cpp[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/cpp/t-system.messaging.messa_2_1.cpp)]\n [!code-vb[MessageQueue.GetMessageEnumerator#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_2_1.vb)]"
  syntax:
    content: 'public class MessageEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Close
  id: Close
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放与枚举器关联的资源。"
  remarks: "光标的生命周期内，操作系统会保留到队列的打开句柄。 当你完成有关使用枚举器时，调用接近释放与句柄关联的资源。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Current
  id: Current
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "获取当前<xref href=&quot;System.Messaging.Message&quot;></xref>该枚举数指向。"
  remarks: "创建枚举器时，它指向上第一条消息之前的位置的队列的开头。 在这种情况下，当前无效，将引发异常，如果访问它。 必须调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>将光标定位在队列中的第一个消息。</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.Message Current { get; }
    return:
      type: System.Messaging.Message
      description: "当前的消息。"
  overload: System.Messaging.MessageEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在首次调用之前调用当前<> *1>。光标位于消息枚举第一个元素之前。      -或-在调用之后调用当前<> *1> 返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref> （指示光标位于消息枚举的最后一个元素之后。）"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "存在枚举数当前不再指向消息。 它可能已被删除。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.CursorHandle
  id: CursorHandle
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "获取消息队列游标用于本机句柄浏览队列中的消息。"
  remarks: "此属性包含在枚举的本机句柄。 当你完成有关使用枚举器时，调用<xref:System.Messaging.MessageEnumerator.Close%2A>以释放此资源。</xref:System.Messaging.MessageEnumerator.Close%2A>"
  syntax:
    content: public IntPtr CursorHandle { get; }
    return:
      type: System.IntPtr
      description: "本机光标句柄。"
  overload: System.Messaging.MessageEnumerator.CursorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "句柄不存在。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放使用的所有资源<xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref>。"
  remarks: "调用 Dispose 允许使用的资源<xref:System.Messaging.MessageEnumerator>可以重新分配用于其他目的。</xref:System.Messaging.MessageEnumerator> 有关释放的详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放由非托管的资源<xref href=&quot;System.Messaging.MessageEnumerator&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.Messaging.MessageEnumerator.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageEnumerator.Dispose%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Messaging.MessageEnumerator>引用。</xref:System.Messaging.MessageEnumerator> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Messaging.MessageEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "将枚举数推进到下一条消息在队列中，如果当前可用。"
  remarks: "此重载立即返回队列中是否存在任何消息。 没有等待指定的另一个重载<xref:System.TimeSpan>到达的消息。</xref:System.TimeSpan>       如果消息不是当前可用因为队列为空，或者已经移动到集合中的最后一个元素以外，MoveNext 返回`false`到调用方法。       创建后，在队列中，第一条消息之前从概念上讲定位一个枚举器和 MoveNext 首次调用将队列的第一条带入视图。"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果枚举数已成功前进到下一条消息;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果枚举数已达到队列的末尾。"
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "引发了异常特定于消息队列。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  id: MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "将枚举数推进到下一条消息在队列中。 如果枚举数定位在的队列结尾<xref:System.Messaging.MessageEnumerator.MoveNext*>会一直等到有可用消息或在给定的超时到期。</xref:System.Messaging.MessageEnumerator.MoveNext*>"
  remarks: "此重载等待队列中没有消息时或如果游标到达队列的末尾。 如果因为队列为空，或者已经移动到集合中的最后一个元素以外，一条消息不是当前可用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>等待指定的超时。</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       如果游标已在队列末尾<xref:System.Messaging.MessageEnumerator.MoveNext%2A>仅返回`true`新消息到达时指定的时间间隔内，如果队列中当前的所有消息比优先级较低且位于队列的末尾。</xref:System.Messaging.MessageEnumerator.MoveNext%2A> 在队列中是否有其他消息，不带参数的重载将立即返回。       创建后，枚举数从概念上讲定位枚举，以及首次调用的第一个消息之前<xref:System.Messaging.MessageEnumerator.MoveNext%2A>使到视图枚举第一条消息。</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public bool MoveNext (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>时要等待的消息变得可用，如果枚举数定位在队列的末尾。</xref:System.TimeSpan>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果枚举数成功地推进到下一条消息;，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果枚举数已达到了队列的末尾，并且一条消息不会成为可通过指定的时间内<code> timeout </code>参数。"
  overload: System.Messaging.MessageEnumerator.MoveNext*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定的超时参数的值无效。 它也可以表示为负数。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "引发了异常特定于消息队列。       -或者-已超时。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  id: RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从事务性或非事务性队列中删除该当前消息和将消息返回到调用应用程序。 没有为消息到达队列中指定无超时。"
  remarks: "RemoveCurrent 移除并返回消息在光标的当前位置。       如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       当删除当前消息时，光标将移到下一条消息。 无需调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用 RemoveCurrent 后。</xref:System.Messaging.MessageEnumerator.MoveNext%2A>       如果你对事务性队列中调用此重载，消息队列将创建单个内部事务。"
  syntax:
    content: public System.Messaging.Message RemoveCurrent ();
    parameters: []
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>引用可用队列中的第一条消息。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从事务性队列中删除该当前消息和将消息返回到调用应用程序。 没有为消息到达队列中指定无超时。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>移除并返回位于光标的当前位置，使用由定义的内部事务上下文的消息`transaction`参数。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       当使用事务性队列时，事务的回滚会导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除不是不可逆的直到提交事务。       当删除当前消息时，光标将移到下一条消息。 无需<xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后</xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>对象，它指定将在其中删除消息的事务。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>引用可用队列中的第一条消息。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从队列中删除该当前消息和将消息返回到调用应用程序。 没有为消息到达队列中指定无超时。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>移除并返回位于光标的当前位置，使用定义的事务上下文的消息`transactionType`参数。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>       指定`Automatic`为`transactionType`参数，如果已存在外部事务上下文附加到你想要用于接收消息的线程。 指定`Single`如果你想要接收的消息作为单个内部事务。 你可以指定`None`如果你想要接收来自外部事务上下文事务性队列的消息。       如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       当使用事务性队列时，事务的回滚会导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除不是不可逆的直到提交事务。       当删除当前消息时，光标将移到下一条消息。 无需<xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后</xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "之一<xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;></xref>描述事务上下文来与消息关联的类型的值。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>引用可用队列中的第一条消息。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> transactionType </code>参数不是一个<xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;></xref>成员。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  id: RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从队列中删除该当前消息和将消息返回到调用应用程序。 如果没有要删除的消息，该方法返回它立即。 否则，该方法将等待新消息到达的指定超时值。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>移除并返回消息在光标的当前位置。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 如果光标位于队列的末尾，该方法的此重载会一直等到有可用消息或指定的间隔`timeout`参数已过期。       如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       当删除当前消息时，光标将移到下一条消息。 无需<xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后</xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用       如果你对事务性队列中调用此重载，消息队列将创建单个内部事务。"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "要等待消息到达队列中的时间间隔。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>引用可用队列中的第一条消息。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "为指定的值<code> timeout </code>参数无效。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "已超时。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从事务性队列中删除该当前消息和将消息返回到调用应用程序。 如果没有要删除的消息，该方法返回它立即。 否则，该方法将等待新消息到达的指定超时值。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>移除并返回消息在光标的当前位置。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 如果光标位于队列的末尾，该方法的此重载会一直等到有可用消息或指定的间隔`timeout`参数已过期。       当使用事务性队列时，事务的回滚会导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除不是不可逆的直到提交事务。       如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       当删除当前消息时，光标将移到下一条消息。 无需<xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后</xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransaction transaction);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "等待要删除的消息的时间间隔。"
    - id: transaction
      type: System.Messaging.MessageQueueTransaction
      description: "<xref href=&quot;System.Messaging.MessageQueueTransaction&quot;> </xref>对象，它指定消息的事务上下文。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>引用可用队列中的第一条消息。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "为指定的值<code> timeout </code>参数无效。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>transaction</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "已超时。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  id: RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "从队列中删除该当前消息和将消息返回到调用应用程序。 如果没有要删除的消息，该方法返回它立即。 否则，该方法将等待新消息到达的指定超时值。"
  remarks: "<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>移除并返回位于光标的当前位置，使用定义的事务上下文的消息`transactionType`参数。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 如果光标位于队列的末尾，该方法的此重载会一直等到有可用消息或指定的间隔`timeout`参数已过期。       指定`Automatic`为`transactionType`参数，如果已存在外部事务上下文附加到你想要用于接收消息的线程。 指定`Single`如果你想要接收的消息作为单个内部事务。 你可以指定`None`如果你想要接收来自外部事务上下文事务性队列的消息。       如果你使用的队列日志记录，删除消息会导致副本要保留在日记队列中，就像<xref:System.Messaging.MessageQueue>类的<xref:System.Messaging.MessageQueue.Receive%2A>方法执行。</xref:System.Messaging.MessageQueue.Receive%2A> </xref:System.Messaging.MessageQueue>       当使用事务性队列时，事务的回滚会导致通过调用中删除任何消息<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>要返回到队列。</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A> 删除不是不可逆的直到提交事务。       当删除当前消息时，光标将移到下一条消息。 无需<xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用<xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>.</xref:System.Messaging.MessageEnumerator.RemoveCurrent%2A>后</xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用"
  syntax:
    content: public System.Messaging.Message RemoveCurrent (TimeSpan timeout, System.Messaging.MessageQueueTransactionType transactionType);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "等待要删除的消息的时间间隔。"
    - id: transactionType
      type: System.Messaging.MessageQueueTransactionType
      description: "之一<xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;></xref>描述事务上下文来与消息关联的类型的值。"
    return:
      type: System.Messaging.Message
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>引用可用队列中的第一条消息。"
  overload: System.Messaging.MessageEnumerator.RemoveCurrent*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "为指定的值<code> timeout </code>参数无效。"
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "已超时。"
  - type: System.ComponentModel.InvalidEnumArgumentException
    commentId: T:System.ComponentModel.InvalidEnumArgumentException
    description: "<code> transactionType </code>参数不是一个<xref href=&quot;System.Messaging.MessageQueueTransactionType&quot;></xref>成员。"
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "将当前的枚举器重置使其指向队列的开头。"
  remarks: "一个枚举器只能在一个向前方向移动。 使用此方法重新开始在队列的开头。       在调用之后重置，游标将指向第一条消息。 不需要调用<xref:System.Messaging.MessageEnumerator.MoveNext%2A>调用重置移动光标后转发到队列中的第一个消息。</xref:System.Messaging.MessageEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "返回<xref href=&quot;System.Messaging.Message&quot;></xref>引用当前光标位置处的消息。"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "A <xref href=&quot;System.Messaging.Message&quot;> </xref>引用当前光标位置处的消息。"
  overload: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.InvalidEnumArgumentException
  parent: System.ComponentModel
  isExternal: false
  name: InvalidEnumArgumentException
  nameWithType: InvalidEnumArgumentException
  fullName: System.ComponentModel.InvalidEnumArgumentException
- uid: System.Messaging.MessageEnumerator.Close
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageEnumerator.Close()
  fullName: System.Messaging.MessageEnumerator.Close()
- uid: System.Messaging.MessageEnumerator.Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.Current
- uid: System.Messaging.Message
  parent: System.Messaging
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Messaging.Message
- uid: System.Messaging.MessageEnumerator.CursorHandle
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
  fullName: System.Messaging.MessageEnumerator.CursorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageEnumerator.Dispose
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageEnumerator.Dispose()
  fullName: System.Messaging.MessageEnumerator.Dispose()
- uid: System.Messaging.MessageEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageEnumerator.MoveNext
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageEnumerator.MoveNext()
  fullName: System.Messaging.MessageEnumerator.MoveNext()
- uid: System.Messaging.MessageEnumerator.MoveNext(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext(TimeSpan)
  nameWithType: MessageEnumerator.MoveNext(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.MoveNext(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Messaging.MessageEnumerator.RemoveCurrent
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent()
  nameWithType: MessageEnumerator.RemoveCurrent()
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent()
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransaction)
- uid: System.Messaging.MessageQueueTransaction
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransaction
  nameWithType: MessageQueueTransaction
  fullName: System.Messaging.MessageQueueTransaction
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(MessageQueueTransactionType)
- uid: System.Messaging.MessageQueueTransactionType
  parent: System.Messaging
  isExternal: false
  name: MessageQueueTransactionType
  nameWithType: MessageQueueTransactionType
  fullName: System.Messaging.MessageQueueTransactionType
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransaction)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransaction)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransaction)
- uid: System.Messaging.MessageEnumerator.RemoveCurrent(System.TimeSpan,System.Messaging.MessageQueueTransactionType)
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  nameWithType: MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
  fullName: System.Messaging.MessageEnumerator.RemoveCurrent(TimeSpan,MessageQueueTransactionType)
- uid: System.Messaging.MessageEnumerator.Reset
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageEnumerator.Reset()
  fullName: System.Messaging.MessageEnumerator.Reset()
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageEnumerator.Close*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageEnumerator.Close
- uid: System.Messaging.MessageEnumerator.Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageEnumerator.Current
- uid: System.Messaging.MessageEnumerator.CursorHandle*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: CursorHandle
  nameWithType: MessageEnumerator.CursorHandle
- uid: System.Messaging.MessageEnumerator.Dispose*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageEnumerator.Dispose
- uid: System.Messaging.MessageEnumerator.MoveNext*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageEnumerator.MoveNext
- uid: System.Messaging.MessageEnumerator.RemoveCurrent*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: RemoveCurrent
  nameWithType: MessageEnumerator.RemoveCurrent
- uid: System.Messaging.MessageEnumerator.Reset*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageEnumerator.Reset
- uid: System.Messaging.MessageEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageEnumerator.System.Collections.IEnumerator.Current
