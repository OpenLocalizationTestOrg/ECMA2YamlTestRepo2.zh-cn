### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.PublishLicense
  id: PublishLicense
  children:
  - System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  - System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  - System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  - System.Security.RightsManagement.PublishLicense.ContentId
  - System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  - System.Security.RightsManagement.PublishLicense.ReferralInfoName
  - System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  - System.Security.RightsManagement.PublishLicense.ToString
  - System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  langs:
  - csharp
  name: PublishLicense
  nameWithType: PublishLicense
  fullName: System.Security.RightsManagement.PublishLicense
  type: Class
  summary: "表示已签名的权限管理发布许可证。"
  remarks: "PublishLicense 定义有关权限、 用户和其他与安全相关的信息的安全数据。  该许可证定义特定的计算机上的特定用户可以如何使用指定的权限管理的内容。       发布过程首先要求文档的作者， <xref:System.Security.RightsManagement.UnsignedPublishLicense>.</xref:System.Security.RightsManagement.UnsignedPublishLicense>中定义权限的信息  接下来，作者可以通过调用<xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A>方法的<xref:System.Security.RightsManagement.UnsignedPublishLicense>。</xref:System.Security.RightsManagement.UnsignedPublishLicense></xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A>创建签名的 PublishLicense  然后，签名 PublishLicense 的序列化的格式可以提供给最终用户可以使用它来获取<xref:System.Security.RightsManagement.UseLicense>通过调用<xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>方法 PublishLicense。</xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A> </xref:System.Security.RightsManagement.UseLicense>  返回<xref:System.Security.RightsManagement.UseLicense>然后允许客户端应用程序测试已授予给用户的权限。</xref:System.Security.RightsManagement.UseLicense>       与其他<xref:System.Security.RightsManagement>类型，PublishLicense 是仅可用于完全信任应用程序。</xref:System.Security.RightsManagement>"
  example:
  - "The following example shows how to initialize a PublishLicense by using the <xref:System.Security.RightsManagement.UnsignedPublishLicense.Sign%2A> method.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubencrypt)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubEncrypt](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubencrypt)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class PublishLicense
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: PublishLicense(String)
  nameWithType: PublishLicense.PublishLicense(String)
  fullName: System.Security.RightsManagement.PublishLicense.PublishLicense(String)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "初始化的新实例<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;></xref>从指定的类序列化和签名<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;> </xref>。"
  syntax:
    content: public PublishLicense (string signedPublishLicense);
    parameters:
    - id: signedPublishLicense
      type: System.String
      description: "已签名并序列化发布许可证。"
  overload: System.Security.RightsManagement.PublishLicense.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>signedPublishLicense</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "许可证无效。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  id: AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: AcquireUseLicense(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicense(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(SecureEnvironment)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "尝试获取<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;></xref>为用户或用户组在指定<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>。"
  syntax:
    content: public System.Security.RightsManagement.UseLicense AcquireUseLicense (System.Security.RightsManagement.SecureEnvironment secureEnvironment);
    parameters:
    - id: secureEnvironment
      type: System.Security.RightsManagement.SecureEnvironment
      description: "许可证激活和绑定的安全环境。"
    return:
      type: System.Security.RightsManagement.UseLicense
      description: "<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>为用户或用户组在指定<code> secureEnvironment </code>。"
  overload: System.Security.RightsManagement.PublishLicense.AcquireUseLicense*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>secureEnvironment</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "身份验证失败。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  id: AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: AcquireUseLicenseNoUI(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "尝试获取<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;></xref>为用户或用户组在指定<xref href=&quot;System.Security.RightsManagement.SecureEnvironment&quot;> </xref>。"
  remarks: "AcquireUseLicenseNoUI 方法取消 Windows 网络身份验证对话框。 如果许可证请求被拒绝，因为用户没有权限，AcquireUseLicenseNoUI 阻止网络身份验证对话框中显示。 使用无提示获取时尝试获取许可证在后台任务或在非用户界面可能会显示令人困惑的对话框。"
  syntax:
    content: public System.Security.RightsManagement.UseLicense AcquireUseLicenseNoUI (System.Security.RightsManagement.SecureEnvironment secureEnvironment);
    parameters:
    - id: secureEnvironment
      type: System.Security.RightsManagement.SecureEnvironment
      description: "许可证激活和绑定的安全环境。"
    return:
      type: System.Security.RightsManagement.UseLicense
      description: "<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>为用户或用户组在指定<code> secureEnvironment </code>。"
  overload: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>secureEnvironment</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.RightsManagement.RightsManagementException
    commentId: T:System.Security.RightsManagement.RightsManagementException
    description: "身份验证失败。"
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ContentId
  id: ContentId
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ContentId
  nameWithType: PublishLicense.ContentId
  fullName: System.Security.RightsManagement.PublishLicense.ContentId
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取发布者创建的内容标识符。"
  remarks: "发布服务器创建<xref:System.Security.RightsManagement.UnsignedPublishLicense.ContentId%2A>来标识受保护的内容。</xref:System.Security.RightsManagement.UnsignedPublishLicense.ContentId%2A>"
  syntax:
    content: public Guid ContentId { get; }
    return:
      type: System.Guid
      description: "发布服务器创建的内容标识符。"
  overload: System.Security.RightsManagement.PublishLicense.ContentId*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  id: DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: DecryptUnsignedPublishLicense(CryptoProvider)
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  fullName: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "返回一个已解密<xref href=&quot;System.Security.RightsManagement.UnsignedPublishLicense&quot;></xref>已签名的此版本<xref href=&quot;System.Security.RightsManagement.PublishLicense&quot;> </xref>。"
  remarks: "DecryptUnsignedPublishLicense 方法允许的许可证所有者和已授予用户<xref:System.Security.RightsManagement.ContentRight>提取原始信息已加密时<xref:System.Security.RightsManagement.PublishLicense>已创建。</xref:System.Security.RightsManagement.PublishLicense> </xref:System.Security.RightsManagement.ContentRight>"
  syntax:
    content: public System.Security.RightsManagement.UnsignedPublishLicense DecryptUnsignedPublishLicense (System.Security.RightsManagement.CryptoProvider cryptoProvider);
    parameters:
    - id: cryptoProvider
      type: System.Security.RightsManagement.CryptoProvider
      description: "要使用该许可证进行解密的权限管理服务。"
    return:
      type: System.Security.RightsManagement.UnsignedPublishLicense
      description: "已解密的、 无符号的本许可证的版本。"
  overload: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>cryptoProvider</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  id: ReferralInfoName
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取的作者或内容的发布者的联系人姓名。"
  remarks: "ReferralInfoName 属性返回的字符串未加密，并且即使用户还没有一种<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>可访问  返回的字符串允许用户与发布服务器请求一种<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>联系"
  syntax:
    content: public string ReferralInfoName { get; }
    return:
      type: System.String
      description: "作者或内容的发布者联系人姓名。"
  overload: System.Security.RightsManagement.PublishLicense.ReferralInfoName*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  id: ReferralInfoUri
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取联系人[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]作者或发布者的内容。"
  remarks: "ReferralInfoUri 属性返回的字符串未加密，并且即使用户还没有一种<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>可访问  返回的字符串允许用户与发布服务器请求一种<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>联系"
  syntax:
    content: public Uri ReferralInfoUri { get; }
    return:
      type: System.Uri
      description: "联系人[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]作者或发布者的内容。"
  overload: System.Security.RightsManagement.PublishLicense.ReferralInfoUri*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.ToString
  id: ToString
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: ToString()
  nameWithType: PublishLicense.ToString()
  fullName: System.Security.RightsManagement.PublishLicense.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "返回序列化[!INCLUDE[TLA2#tla_xrml](~/add/includes/tla2sharptla-xrml-md.md)]用于创建此许可证的字符串。"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "序列化[!INCLUDE[TLA#tla_xrml](~/add/includes/ajax-current-ext-md.md)]用于创建此许可证的字符串。"
  overload: System.Security.RightsManagement.PublishLicense.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  id: UseLicenseAcquisitionUrl
  parent: System.Security.RightsManagement.PublishLicense
  langs:
  - csharp
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
  fullName: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]用于获取<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>。"
  remarks: "<xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>当用户购买了一种<xref:System.Security.RightsManagement.UseLicense>。</xref:System.Security.RightsManagement.UseLicense>方法</xref:System.Security.RightsManagement.PublishLicense.AcquireUseLicense%2A>使用 UseLicenseAcquisitionUrl 属性"
  syntax:
    content: public Uri UseLicenseAcquisitionUrl { get; }
    return:
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]用于获取<xref href=&quot;System.Security.RightsManagement.UseLicense&quot;> </xref>。"
  overload: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.RightsManagement.RightsManagementException
  parent: System.Security.RightsManagement
  isExternal: false
  name: RightsManagementException
  nameWithType: RightsManagementException
  fullName: System.Security.RightsManagement.RightsManagementException
- uid: System.Security.RightsManagement.PublishLicense.#ctor(System.String)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: PublishLicense(String)
  nameWithType: PublishLicense.PublishLicense(String)
  fullName: System.Security.RightsManagement.PublishLicense.PublishLicense(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicense(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicense(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicense(SecureEnvironment)
- uid: System.Security.RightsManagement.UseLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: UseLicense
  nameWithType: UseLicense
  fullName: System.Security.RightsManagement.UseLicense
- uid: System.Security.RightsManagement.SecureEnvironment
  parent: System.Security.RightsManagement
  isExternal: false
  name: SecureEnvironment
  nameWithType: SecureEnvironment
  fullName: System.Security.RightsManagement.SecureEnvironment
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(System.Security.RightsManagement.SecureEnvironment)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicenseNoUI(SecureEnvironment)
  nameWithType: PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
  fullName: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI(SecureEnvironment)
- uid: System.Security.RightsManagement.PublishLicense.ContentId
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ContentId
  nameWithType: PublishLicense.ContentId
  fullName: System.Security.RightsManagement.PublishLicense.ContentId
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(System.Security.RightsManagement.CryptoProvider)
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: DecryptUnsignedPublishLicense(CryptoProvider)
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
  fullName: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense(CryptoProvider)
- uid: System.Security.RightsManagement.UnsignedPublishLicense
  parent: System.Security.RightsManagement
  isExternal: false
  name: UnsignedPublishLicense
  nameWithType: UnsignedPublishLicense
  fullName: System.Security.RightsManagement.UnsignedPublishLicense
- uid: System.Security.RightsManagement.CryptoProvider
  parent: System.Security.RightsManagement
  isExternal: false
  name: CryptoProvider
  nameWithType: CryptoProvider
  fullName: System.Security.RightsManagement.CryptoProvider
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoName
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
  fullName: System.Security.RightsManagement.PublishLicense.ReferralInfoUri
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Security.RightsManagement.PublishLicense.ToString
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ToString()
  nameWithType: PublishLicense.ToString()
  fullName: System.Security.RightsManagement.PublishLicense.ToString()
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
  fullName: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl
- uid: System.Security.RightsManagement.PublishLicense.#ctor*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: PublishLicense
  nameWithType: PublishLicense.PublishLicense
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicense*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicense
  nameWithType: PublishLicense.AcquireUseLicense
- uid: System.Security.RightsManagement.PublishLicense.AcquireUseLicenseNoUI*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: AcquireUseLicenseNoUI
  nameWithType: PublishLicense.AcquireUseLicenseNoUI
- uid: System.Security.RightsManagement.PublishLicense.ContentId*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ContentId
  nameWithType: PublishLicense.ContentId
- uid: System.Security.RightsManagement.PublishLicense.DecryptUnsignedPublishLicense*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: DecryptUnsignedPublishLicense
  nameWithType: PublishLicense.DecryptUnsignedPublishLicense
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoName*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoName
  nameWithType: PublishLicense.ReferralInfoName
- uid: System.Security.RightsManagement.PublishLicense.ReferralInfoUri*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ReferralInfoUri
  nameWithType: PublishLicense.ReferralInfoUri
- uid: System.Security.RightsManagement.PublishLicense.ToString*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: ToString
  nameWithType: PublishLicense.ToString
- uid: System.Security.RightsManagement.PublishLicense.UseLicenseAcquisitionUrl*
  parent: System.Security.RightsManagement.PublishLicense
  isExternal: false
  name: UseLicenseAcquisitionUrl
  nameWithType: PublishLicense.UseLicenseAcquisitionUrl
