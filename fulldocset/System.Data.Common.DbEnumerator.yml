### YamlMime:ManagedReference
items:
- uid: System.Data.Common.DbEnumerator
  id: DbEnumerator
  children:
  - System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)
  - System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)
  - System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)
  - System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  - System.Data.Common.DbEnumerator.Current
  - System.Data.Common.DbEnumerator.MoveNext
  - System.Data.Common.DbEnumerator.Reset
  langs:
  - csharp
  name: DbEnumerator
  nameWithType: DbEnumerator
  fullName: System.Data.Common.DbEnumerator
  type: Class
  summary: "公开<xref:System.Collections.IEnumerable.GetEnumerator*>方法，支持对由.NET Framework 数据提供程序集合进行简单迭代。</xref:System.Collections.IEnumerable.GetEnumerator*>"
  remarks: "由.NET Framework 数据提供程序，以提供数据绑定支持实现 DbEnumerator 类。       按照设计，DbEnumerator 对象旨在用于只有一个结果集。 例如，如果在执行批处理语句包含两个 SQL SELECT 语句返回不同的架构，第二个语句可能会不返回整个架构。 若要避免这种情况下，获取有关每个结果集，DbEnumerator，然后调用`NextResult`的.NET Framework 数据提供程序 DataReader 对象的方法。"
  syntax:
    content: 'public class DbEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IEnumerator
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)
  id: '#ctor(System.Data.Common.DbDataReader)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: DbEnumerator(DbDataReader)
  nameWithType: DbEnumerator.DbEnumerator(DbDataReader)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(DbDataReader)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "初始化的新实例<xref href=&quot;System.Data.Common.DbEnumerator&quot;></xref>类提供的数据读取器。"
  syntax:
    content: public DbEnumerator (System.Data.Common.DbDataReader reader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "对其进行循环访问 DataReader。"
  overload: System.Data.Common.DbEnumerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)
  id: '#ctor(System.Data.IDataReader)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: DbEnumerator(IDataReader)
  nameWithType: DbEnumerator.DbEnumerator(IDataReader)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(IDataReader)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "初始化的新实例<xref href=&quot;System.Data.Common.DbEnumerator&quot;></xref>类使用指定<xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref>。"
  syntax:
    content: public DbEnumerator (System.Data.IDataReader reader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref>其进行循环访问。"
  overload: System.Data.Common.DbEnumerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)
  id: '#ctor(System.Data.Common.DbDataReader,System.Boolean)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: DbEnumerator(DbDataReader,Boolean)
  nameWithType: DbEnumerator.DbEnumerator(DbDataReader,Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(DbDataReader,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "初始化的新实例<xref href=&quot;System.Data.Common.DbEnumerator&quot;></xref>类使用指定的读取器，并指示是否自动在循环访问其数据之后关闭读取器。"
  syntax:
    content: public DbEnumerator (System.Data.Common.DbDataReader reader, bool closeReader);
    parameters:
    - id: reader
      type: System.Data.Common.DbDataReader
      description: "对其进行循环访问 DataReader。"
    - id: closeReader
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要自动循环访问其数据; 后关闭了 DataReader否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Common.DbEnumerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  id: '#ctor(System.Data.IDataReader,System.Boolean)'
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: DbEnumerator(IDataReader,Boolean)
  nameWithType: DbEnumerator.DbEnumerator(IDataReader,Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(IDataReader,Boolean)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "初始化的新实例<xref href=&quot;System.Data.Common.DbEnumerator&quot;></xref>类使用指定<xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref>，并指示是否自动关闭<xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;></xref>后循环访问其数据。"
  syntax:
    content: public DbEnumerator (System.Data.IDataReader reader, bool closeReader);
    parameters:
    - id: reader
      type: System.Data.IDataReader
      description: "<xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;> </xref>其进行循环访问。"
    - id: closeReader
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要自动关闭<xref uid=&quot;langword_csharp_DataReader&quot; name=&quot;DataReader&quot; href=&quot;&quot;></xref>后循环访问其数据; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.Common.DbEnumerator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.Current
  id: Current
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: DbEnumerator.Current
  fullName: System.Data.Common.DbEnumerator.Current
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "获取集合中的当前元素。"
  remarks: "创建一个枚举器或<xref:System.Data.Common.DbEnumerator.Reset%2A>，<xref:System.Data.Common.DbEnumerator.MoveNext%2A>必须调用来枚举器向前移动到第一个元素的集合，然后再读取值的当前; 否则，当前是不确定。</xref:System.Data.Common.DbEnumerator.MoveNext%2A> </xref:System.Data.Common.DbEnumerator.Reset%2A> 当前还会引发异常如果最后一次调用到<xref:System.Data.Common.DbEnumerator.MoveNext%2A>返回 false，指示集合的末尾。</xref:System.Data.Common.DbEnumerator.MoveNext%2A> 当前不会移动该枚举数的位置和当前的连续调用返回的对象相同之前<xref:System.Data.Common.DbEnumerator.MoveNext%2A>或<xref:System.Data.Common.DbEnumerator.Reset%2A>称为。</xref:System.Data.Common.DbEnumerator.Reset%2A> </xref:System.Data.Common.DbEnumerator.MoveNext%2A> 只要集合保持不变，枚举数就保持有效。 如果更改到集合，如添加、 修改或删除元素，则枚举数将失效且不可恢复，并且下次调用<xref:System.Data.Common.DbEnumerator.MoveNext%2A>或<xref:System.Data.Common.DbEnumerator.Reset%2A>生成<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Data.Common.DbEnumerator.Reset%2A></xref:System.Data.Common.DbEnumerator.MoveNext%2A>到 如果之间修改集合<xref:System.Data.Common.DbEnumerator.MoveNext%2A>当前、 当前返回的元素并为其设置，即使枚举数已经无效。</xref:System.Data.Common.DbEnumerator.MoveNext%2A>"
  syntax:
    content: public object Current { get; }
    return:
      type: System.Object
      description: "集合中的当前元素。"
  overload: System.Data.Common.DbEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "枚举数定位在集合或最后一个元素之后的第一个元素之前。"
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.MoveNext
  id: MoveNext
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: DbEnumerator.MoveNext()
  fullName: System.Data.Common.DbEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "将枚举数推进到集合的下一个元素。"
  remarks: "创建一个枚举器之后或在调用<xref:System.Data.Common.DbEnumerator.Reset%2A>、 枚举数定位在集合中，第一个元素之前和 MoveNext 首次调用将枚举器移到集合的第一个元素上。</xref:System.Data.Common.DbEnumerator.Reset%2A> 对 MoveNext 的后续调用传递到集合的末尾之后，返回 false 直到<xref:System.Data.Common.DbEnumerator.Reset%2A>称为。</xref:System.Data.Common.DbEnumerator.Reset%2A> 只要集合保持不变，枚举数就保持有效。 如果更改到集合，如添加、 修改或删除元素，则枚举数将失效且不可恢复，并且下一个调用 MoveNext 或<xref:System.Data.Common.DbEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException> </xref:System.Data.Common.DbEnumerator.Reset%2A>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果枚举数已成功地推进到下一个元素;，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果枚举数传递到集合的末尾。"
  overload: System.Data.Common.DbEnumerator.MoveNext*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "创建枚举器之后，集合已修改。"
  platform:
  - net462
- uid: System.Data.Common.DbEnumerator.Reset
  id: Reset
  parent: System.Data.Common.DbEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: DbEnumerator.Reset()
  fullName: System.Data.Common.DbEnumerator.Reset()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.Common
  summary: "将枚举数设置为其初始位置，集合中第一个元素之前。"
  remarks: "只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，例如添加、 修改或删除元素，则枚举数将失效且不可恢复下, 一个调用<xref:System.Data.Common.DbEnumerator.MoveNext%2A>或重置引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Data.Common.DbEnumerator.MoveNext%2A>到"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Data.Common.DbEnumerator.Reset*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "创建枚举器之后，集合已修改。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader)
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator(DbDataReader)
  nameWithType: DbEnumerator.DbEnumerator(DbDataReader)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(DbDataReader)
- uid: System.Data.Common.DbDataReader
  parent: System.Data.Common
  isExternal: false
  name: DbDataReader
  nameWithType: DbDataReader
  fullName: System.Data.Common.DbDataReader
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader)
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator(IDataReader)
  nameWithType: DbEnumerator.DbEnumerator(IDataReader)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(IDataReader)
- uid: System.Data.IDataReader
  parent: System.Data
  isExternal: false
  name: IDataReader
  nameWithType: IDataReader
  fullName: System.Data.IDataReader
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.Common.DbDataReader,System.Boolean)
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator(DbDataReader,Boolean)
  nameWithType: DbEnumerator.DbEnumerator(DbDataReader,Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(DbDataReader,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.Common.DbEnumerator.#ctor(System.Data.IDataReader,System.Boolean)
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator(IDataReader,Boolean)
  nameWithType: DbEnumerator.DbEnumerator(IDataReader,Boolean)
  fullName: System.Data.Common.DbEnumerator.DbEnumerator(IDataReader,Boolean)
- uid: System.Data.Common.DbEnumerator.Current
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: Current
  nameWithType: DbEnumerator.Current
  fullName: System.Data.Common.DbEnumerator.Current
- uid: System.Data.Common.DbEnumerator.MoveNext
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: DbEnumerator.MoveNext()
  fullName: System.Data.Common.DbEnumerator.MoveNext()
- uid: System.Data.Common.DbEnumerator.Reset
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: Reset()
  nameWithType: DbEnumerator.Reset()
  fullName: System.Data.Common.DbEnumerator.Reset()
- uid: System.Data.Common.DbEnumerator.#ctor*
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: DbEnumerator
  nameWithType: DbEnumerator.DbEnumerator
- uid: System.Data.Common.DbEnumerator.Current*
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: Current
  nameWithType: DbEnumerator.Current
- uid: System.Data.Common.DbEnumerator.MoveNext*
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: DbEnumerator.MoveNext
- uid: System.Data.Common.DbEnumerator.Reset*
  parent: System.Data.Common.DbEnumerator
  isExternal: false
  name: Reset
  nameWithType: DbEnumerator.Reset
