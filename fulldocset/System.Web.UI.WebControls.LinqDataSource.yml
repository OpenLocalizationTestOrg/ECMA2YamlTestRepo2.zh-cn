### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSource
  id: LinqDataSource
  children:
  - System.Web.UI.WebControls.LinqDataSource.#ctor
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  - System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  - System.Web.UI.WebControls.LinqDataSource.AutoPage
  - System.Web.UI.WebControls.LinqDataSource.AutoSort
  - System.Web.UI.WebControls.LinqDataSource.ContextCreated
  - System.Web.UI.WebControls.LinqDataSource.ContextCreating
  - System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  - System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  - System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  - System.Web.UI.WebControls.LinqDataSource.CreateView
  - System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Deleted
  - System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  - System.Web.UI.WebControls.LinqDataSource.Deleting
  - System.Web.UI.WebControls.LinqDataSource.EnableDelete
  - System.Web.UI.WebControls.LinqDataSource.EnableInsert
  - System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  - System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  - System.Web.UI.WebControls.LinqDataSource.GroupBy
  - System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  - System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Inserted
  - System.Web.UI.WebControls.LinqDataSource.Inserting
  - System.Web.UI.WebControls.LinqDataSource.InsertParameters
  - System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  - System.Web.UI.WebControls.LinqDataSource.OrderBy
  - System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  - System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  - System.Web.UI.WebControls.LinqDataSource.Select
  - System.Web.UI.WebControls.LinqDataSource.Selected
  - System.Web.UI.WebControls.LinqDataSource.Selecting
  - System.Web.UI.WebControls.LinqDataSource.SelectParameters
  - System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  - System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  - System.Web.UI.WebControls.LinqDataSource.TableName
  - System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  - System.Web.UI.WebControls.LinqDataSource.Updated
  - System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  - System.Web.UI.WebControls.LinqDataSource.Updating
  - System.Web.UI.WebControls.LinqDataSource.Where
  - System.Web.UI.WebControls.LinqDataSource.WhereParameters
  langs:
  - csharp
  name: LinqDataSource
  nameWithType: LinqDataSource
  fullName: System.Web.UI.WebControls.LinqDataSource
  type: Class
  summary: "允许在通过标记文本来检索和修改数据对象中的数据的 ASP.NET 网页中使用的语言集成查询 (LINQ)。"
  remarks: "本主题中:-[简介](#introduction)      -   [操作顺序](#order_of_operations)      -   [排序数据](#ordering_data)      -   [对数据进行分组](#grouping_data)      -   [数据修改](#data_modifications)      -   [在运行时计算值](#evaluating_value_at_run_time)      -   [使用存储过程](#working_with_stored_procedures)      -   [声明性语法](#declarative_syntax)<a name=&quot;introduction&quot;> </a> # # Introduction Language-Integrated 查询 (LINQ) 是一种查询语法定义一组查询运算符，以便在任何声明性方式表示遍历、 筛选和投影操作。基于网络的编程语言。       数据对象可以是内存中数据收集或从数据库中表示数据的对象。 你可以检索或修改数据而无需编写 SQL 命令为每个操作。       LinqDataSource 控件使您能够通过标记文本中设置属性 ASP.NET 网页中使用 LINQ。 LinqDataSource 控件使用 LINQ to SQL 会自动生成数据命令。 有关 LINQ to SQL 的详细信息，请参阅[LINQ to SQL](~/add/includes/ajax-current-ext-md.md)。       当你从内存中的数据集合在检索数据时，您设置<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>属性设置为包含数据收集的类。</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 你设置<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性的属性或返回数据集合的字段。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 例如，可能有一个名为类`Person`，其中包含一个名为属性`FavoriteCities`返回的字符串值的数组。 在这种情况下，设置<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>属性`Person`并设置<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性`FavoriteCities`。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>       在查询数据库时，你必须首先创建表示数据库和其表的实体类。 你可以使用[!INCLUDE[vs_ordesigner_long](~/add/includes/vs-ordesigner-long-md.md)]或 SqlMetal.exe 实用程序来生成这些类。 然后设置<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>属性表示数据库的类并设置<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性表示数据库表的属性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> </xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>      <a name=&quot;order_of_operations&quot;></a># # 顺序操作 LinqDataSource 控件适用按以下顺序的数据操作︰ 1。  其中 （指定哪些数据记录返回）。      2.  Order By （排序）。      3.  Group By （共享的值的聚合数据记录）。      4.  Order By （排序分组数据） 的组。      5.  （指定的字段或属性返回） 的选择。      6.  自动排序 （由用户选定的属性数据记录进行排序）。      7.  自动页 （检索已由用户选择的数据记录的子集）。       您可以添加到条件<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>属性筛选从查询返回的数据记录。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 如果<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>未设置属性、 LinqDataSource 控件检索此数据对象中的每个记录。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>      <a name=&quot;ordering_data&quot;></a># # 对你使用的数据进行排序<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性来指定从返回的数据要作为排序依据的属性的名称。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>      1> [!NOTE]&1;> 当你使用具有 LinqDataSource 控件[!INCLUDE[ss2k](~/add/includes/ss2k-md.md)]或[!INCLUDE[ssEW](~/add/includes/ssew-md.md)]和<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>属性设置为`true`，你必须提供中的值<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>属性是`true`。</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 如果将值赋给<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性，你还必须包括所有的 identity 列在查询中返回的属性列表。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>      <a name=&quot;grouping_data&quot;></a># # 你使用的数据分组<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性以指定哪些属性用于合并具有相同的值的数据记录。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 在您对数据进行分组，你可以纳入`Key`和`It`，它们动态创建中的属性，<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `Key`属性是指中或多个用于对数据进行分组的属性的值。 例如，如果通过名为的属性组`Category`、`Key`属性将包含中的所有唯一值`Category`属性。 `It`属性指的数据分组中的单个记录的集合。 可以循环访问`It`属性，以检索已经合并分组操作中的单个记录。 例如，如果通过名为的属性组`Category`、`It`属性包含所有的共享中的常见值的单个记录`Category`属性。       你使用<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>属性来指定要用于对分组的数据进行排序的属性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 数据，进行分组时<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性指定分组的数据中各记录的排序方式。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       默认情况下，LinqDataSource 控件数据对象中检索所有属性的值。 你使用<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性来指定的属性以返回你是否想要使用的可用属性的子集。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 选择操作应用后 Where、 Order By 和 Group By 操作。 因此，如果 Select 子句中创建一个别名，别名不可用的其他子句中。      <a name=&quot;data_modifications&quot;></a># # 你可以指定是否使用启用数据修改的数据修改<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>，和<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> 修改数据从 LinqDataSource 控件的用户界面通常提供通过数据绑定控件，如<xref:System.Web.UI.WebControls.DetailsView>控件。</xref:System.Web.UI.WebControls.DetailsView> 除了设置<xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>，或<xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A>到`true`，启用自动数据修改所需的以下条件:-<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性无法分配一个值。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> </xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>      -<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性无法分配一个值。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>      的分配给<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>属性必须从<xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext>派生</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>类      的分配给<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性必须从<xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601>派生</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性       你可以限制在两种方式的数据绑定控件中显示的属性。 你可以设置<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性号码中的属性，或者你可以通过添加定义的字段的数据绑定控件<xref:System.Web.UI.WebControls.DataControlField>控件。</xref:System.Web.UI.WebControls.DataControlField> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 但是，如果你设置<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性，则表示无法启用自动更新、 插入和删除操作。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 如果你想要启用自动数据修改，在你使用的可用属性的子集时，不要设置<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 相反，此数据对象中检索所有属性和管理哪些显示通过使用数据绑定控件。 当你使用<xref:System.Web.UI.WebControls.DetailsView>控件或<xref:System.Web.UI.WebControls.GridView>控件，你还必须设置<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>或<xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>属性设置为`false`。</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> 这可以防止数据绑定控件自动包括按钮用于编辑和删除数据。 数据绑定控件中不显示任何值存储视图状态中。 它们是不变时传递给数据源执行数据更新。      <a name=&quot;evaluating_value_at_run_time&quot;></a># # 估计值在运行时如果您必须在运行时以进行排序，评估值筛选或分组的值，你可以将参数添加到<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>， <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>，或<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>       如果你想要指定默认值，你可以将参数添加到<xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A>       如果你想要检查或修改值，数据操作执行之前，你可以处理<xref:System.Web.UI.WebControls.LinqDataSource.Deleting>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>， <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>，或<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Updating> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Inserting> </xref:System.Web.UI.WebControls.LinqDataSource.Deleting> 若要取消数据操作，也可在检查根据用户输入的数据类中设置属性时出现的验证错误，你还可以处理这些事件。       若要检查值，数据操作完成之后，处理<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>， <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>， <xref:System.Web.UI.WebControls.LinqDataSource.Selected>，或<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Updated> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted>      <a name=&quot;working_with_stored_procedures&quot;></a># # 使用存储过程你使用 LinqDataSource 控件从存储过程检索数据，通过创建的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> 在事件处理程序，你表示存储的过程的数据上下文类中调用该方法并将结果设置为<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>对象。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> 如果你要启用自动更新、 插入和删除操作的数据，从方法返回的类型必须与匹配中指定的类型<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 有关创建数据上下文方法的详细信息，请参阅[如何︰ 创建 DataContext 方法映射到存储的过程和函数 （O/R 设计器）](~/add/includes/ajax-current-ext-md.md)。      <a name=&quot;declarative_syntax&quot;></a># # 声明性语法<CodeContentPlaceHolder>0</CodeContentPlaceHolder>"
  example:
  - "The following example shows a LinqDataSource control that retrieves data from an entity class named `Products`. The entity class could have been generated by using the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)] or the SqlMetal.exe utility. The <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property is set to return only records that have a value in the `Price` property greater than 50. A <xref:System.Web.UI.WebControls.GridView> control is bound to the LinqDataSource control to display the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_1.aspx)]  \n  \n The following example shows a LinqDataSource control that enables users to update, delete, and insert records in the data source. A <xref:System.Web.UI.WebControls.DetailsView> control is bound to the LinqDataSource control and enables users to see and modify the data. Notice that no SQL commands are required in order to select, update, delete, or insert the records.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_2.aspx)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> event that sets the data object based on a value in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_3.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_3.vb)]  \n  \n The following example shows a LinqDataSource control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed (aliased) to `Products`. The renamed `Products` object contains a collection of the individual records in a grouping. Each instance will contain all the columns from the `Products` table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_4.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_4.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls that display the data from the LinqDataSource control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data, and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_370_5.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_370_5.aspx)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("Selecting")]

      [System.ComponentModel.DefaultProperty("ContextTypeName")]

      [System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")]

      [System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")]

      [System.Web.UI.ParseChildren(true)]

      [System.Web.UI.PersistChildren(false)]

      public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource
  inheritance:
  - System.Object
  - System.Web.UI.Control
  - System.Web.UI.DataSourceControl
  - System.Web.UI.WebControls.QueryableDataSource
  - System.Web.UI.WebControls.ContextDataSource
  implements:
  - System.Web.DynamicData.IDynamicDataSource
  inheritedMembers:
  - System.Web.UI.Control.Adapter
  - System.Web.UI.Control.AddedControl(System.Web.UI.Control,System.Int32)
  - System.Web.UI.Control.AddParsedSubObject(System.Object)
  - System.Web.UI.Control.AppRelativeTemplateSourceDirectory
  - System.Web.UI.Control.BeginRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.BindingContainer
  - System.Web.UI.Control.BuildProfileTree(System.String,System.Boolean)
  - System.Web.UI.Control.ChildControlsCreated
  - System.Web.UI.Control.ClearCachedClientID
  - System.Web.UI.Control.ClearChildControlState
  - System.Web.UI.Control.ClearChildState
  - System.Web.UI.Control.ClearChildViewState
  - System.Web.UI.Control.ClearEffectiveClientIDMode
  - System.Web.UI.Control.ClientIDSeparator
  - System.Web.UI.Control.Context
  - System.Web.UI.Control.CreateChildControls
  - System.Web.UI.Control.DataBind
  - System.Web.UI.Control.DataBind(System.Boolean)
  - System.Web.UI.Control.DataBindChildren
  - System.Web.UI.Control.DataBinding
  - System.Web.UI.Control.DataItemContainer
  - System.Web.UI.Control.DataKeysContainer
  - System.Web.UI.Control.DesignMode
  - System.Web.UI.Control.Dispose
  - System.Web.UI.Control.Disposed
  - System.Web.UI.Control.EnableViewState
  - System.Web.UI.Control.EndRenderTracing(System.IO.TextWriter,System.Object)
  - System.Web.UI.Control.EnsureChildControls
  - System.Web.UI.Control.EnsureID
  - System.Web.UI.Control.Events
  - System.Web.UI.Control.FindControl(System.String,System.Int32)
  - System.Web.UI.Control.GetDesignModeState
  - System.Web.UI.Control.GetRouteUrl(System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Object)
  - System.Web.UI.Control.GetRouteUrl(System.String,System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetRouteUrl(System.Web.Routing.RouteValueDictionary)
  - System.Web.UI.Control.GetUniqueIDRelativeTo(System.Web.UI.Control)
  - System.Web.UI.Control.HasChildViewState
  - System.Web.UI.Control.HasEvents
  - System.Web.UI.Control.ID
  - System.Web.UI.Control.IdSeparator
  - System.Web.UI.Control.Init
  - System.Web.UI.Control.IsChildControlStateCleared
  - System.Web.UI.Control.IsLiteralContent
  - System.Web.UI.Control.IsTrackingViewState
  - System.Web.UI.Control.IsViewStateEnabled
  - System.Web.UI.Control.Load
  - System.Web.UI.Control.LoadControlState(System.Object)
  - System.Web.UI.Control.LoadViewStateByID
  - System.Web.UI.Control.MapPathSecure(System.String)
  - System.Web.UI.Control.NamingContainer
  - System.Web.UI.Control.OnBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.OnDataBinding(System.EventArgs)
  - System.Web.UI.Control.OnLoad(System.EventArgs)
  - System.Web.UI.Control.OnPreRender(System.EventArgs)
  - System.Web.UI.Control.OpenFile(System.String)
  - System.Web.UI.Control.Page
  - System.Web.UI.Control.Parent
  - System.Web.UI.Control.PreRender
  - System.Web.UI.Control.RaiseBubbleEvent(System.Object,System.EventArgs)
  - System.Web.UI.Control.RemovedControl(System.Web.UI.Control)
  - System.Web.UI.Control.Render(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderChildren(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.Control.RenderControl(System.Web.UI.HtmlTextWriter,System.Web.UI.Adapters.ControlAdapter)
  - System.Web.UI.Control.RenderingCompatibility
  - System.Web.UI.Control.ResolveAdapter
  - System.Web.UI.Control.ResolveClientUrl(System.String)
  - System.Web.UI.Control.ResolveUrl(System.String)
  - System.Web.UI.Control.SaveControlState
  - System.Web.UI.Control.SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.SetRenderMethodDelegate(System.Web.UI.RenderMethod)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object)
  - System.Web.UI.Control.SetTraceData(System.Object,System.Object,System.Object)
  - System.Web.UI.Control.Site
  - System.Web.UI.Control.System#Web#UI#IControlBuilderAccessor#ControlBuilder
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#GetDesignModeState
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetDesignModeState(System.Collections.IDictionary)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#SetOwnerControl(System.Web.UI.Control)
  - System.Web.UI.Control.System#Web#UI#IControlDesignerAccessor#UserData
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#DataBindings
  - System.Web.UI.Control.System#Web#UI#IDataBindingsAccessor#HasDataBindings
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#Expressions
  - System.Web.UI.Control.System#Web#UI#IExpressionsAccessor#HasExpressions
  - System.Web.UI.Control.System#Web#UI#IParserAccessor#AddParsedSubObject(System.Object)
  - System.Web.UI.Control.TemplateControl
  - System.Web.UI.Control.TemplateSourceDirectory
  - System.Web.UI.Control.UniqueID
  - System.Web.UI.Control.Unload
  - System.Web.UI.Control.ValidateRequestMode
  - System.Web.UI.Control.ViewState
  - System.Web.UI.Control.ViewStateIgnoresCase
  - System.Web.UI.Control.ViewStateMode
  - System.Web.UI.DataSourceControl.ApplyStyleSheetSkin(System.Web.UI.Page)
  - System.Web.UI.DataSourceControl.ClientID
  - System.Web.UI.DataSourceControl.ClientIDMode
  - System.Web.UI.DataSourceControl.Controls
  - System.Web.UI.DataSourceControl.CreateControlCollection
  - System.Web.UI.DataSourceControl.EnableTheming
  - System.Web.UI.DataSourceControl.FindControl(System.String)
  - System.Web.UI.DataSourceControl.Focus
  - System.Web.UI.DataSourceControl.HasControls
  - System.Web.UI.DataSourceControl.RaiseDataSourceChangedEvent(System.EventArgs)
  - System.Web.UI.DataSourceControl.RenderControl(System.Web.UI.HtmlTextWriter)
  - System.Web.UI.DataSourceControl.SkinID
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#ContainsListCollection
  - System.Web.UI.DataSourceControl.System#ComponentModel#IListSource#GetList
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetView(System.String)
  - System.Web.UI.DataSourceControl.System#Web#UI#IDataSource#GetViewNames
  - System.Web.UI.DataSourceControl.Visible
  - System.Web.UI.WebControls.ContextDataSource.EntitySetName
  - System.Web.UI.WebControls.ContextDataSource.EntityTypeName
  - System.Web.UI.WebControls.QueryableDataSource.GetView(System.String)
  - System.Web.UI.WebControls.QueryableDataSource.GetViewNames
  - System.Web.UI.WebControls.QueryableDataSource.LoadViewState(System.Object)
  - System.Web.UI.WebControls.QueryableDataSource.QueryCreated
  - System.Web.UI.WebControls.QueryableDataSource.RaiseViewChanged
  - System.Web.UI.WebControls.QueryableDataSource.SaveViewState
  - System.Web.UI.WebControls.QueryableDataSource.TrackViewState
  - System.Web.UI.WebControls.QueryableDataSource.UpdateParameterVales
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  id: '#ctor'
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>类。"
  syntax:
    content: public LinqDataSource ();
    parameters: []
  overload: System.Web.UI.WebControls.LinqDataSource.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  id: AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件动态创建 Order By 子句中的值为基础的<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>集合。</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters*>"
  remarks: "当将 AutoGenerateOrderByClause 属性设置为`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控件动态创建 Order By 子句中的值为基础<xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>控件对数据进行排序的第一个参数，并为每个其他参数的数据，此外进行排序。</xref:System.Web.UI.WebControls.LinqDataSource> 参数包含`null`或 Order By 子句中不包含空值。       未设置<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性时 AutoGenerateOrderByClause 设置为`true`，因为分析器可动态创建的 Order By 子句。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> <xref:System.Web.UI.WebControls.LinqDataSource>控件将引发异常，如果 AutoGenerateOrderByClause 设置为`true`和<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性分配值。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateOrderByClause set to `true`. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_120_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_120_1.aspx)]"
  syntax:
    content: public bool AutoGenerateOrderByClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件创建的 Order By 子句; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  id: AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件动态创建 Where 子句基于中定义的值<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>集合。</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters*>"
  remarks: "当将 AutoGenerateWhereClause 属性设置为`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控件动态创建 Where 子句中的参数从<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 你将添加到每个参数<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合中必须具有其<xref:System.Web.UI.WebControls.Parameter.Name%2A>属性设置为与匹配正在查询的数据对象中的属性的值。</xref:System.Web.UI.WebControls.Parameter.Name%2A> </xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 自动生成 Where 子句将检查是否在指定的值<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合等于数据对象中匹配的属性的值。</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> 如果你提供多个参数，则这些参数将与逻辑`AND`操作。 参数包含`null`或空值不包括在 Where 子句。       自动生成<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>子句可以仅测试相等性和链接参数只能与`AND`操作。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 未设置为 AutoGenerateWhereClause 属性`true`如果你有要添加不会测试相等性的条件或你必须与参数替换`OR`操作。 你可以通过将 AutoGenerateWhereClause 属性设置为完成这些任务`false`和添加中的占位符<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>中每个参数的属性<xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>集合。</xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 在<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>属性，作为每个占位符名称的开头 @ 符号。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       未设置<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>属性 AutoGenerateWhereClause 属性时`true`，因为分析器可动态创建 Where 子句。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> <xref:System.Web.UI.WebControls.LinqDataSource>控件将引发异常，如果 AutoGenerateWhereClause 属性为`true`和<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>属性分配值。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> </xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoGenerateWhereClause set to `true`. A <xref:System.Web.UI.WebControls.GridView> control is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control to display the data that is returned from the query. A <xref:System.Web.UI.WebControls.DropDownList> control is included that is populated with three values. A parameter is included in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection with the name set to `Category,` which matches one of the properties of the data object. Its <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> property is set to the ID of the <xref:System.Web.UI.WebControls.DropDownList> control. The <xref:System.Web.UI.WebControls.LinqDataSource> control automatically creates the <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> property to filter records based on the value that the user selects from the <xref:System.Web.UI.WebControls.DropDownList> control. The query returns the records whose `Category` property matches the value that the user has selected from the <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/csharp/p-system.web.ui.webcontr_223_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_223_1.aspx)]"
  syntax:
    content: public bool AutoGenerateWhereClause { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件将创建 Where 子句; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  id: AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件支持在运行时各部分的数据进行导航。"
  remarks: "将自动创建数据页属性设置为`true`若要在中启用分页<xref:System.Web.UI.WebControls.LinqDataSource>控件。</xref:System.Web.UI.WebControls.LinqDataSource> 若要使用户能够对数据进行分页，连接提供用于对分页的接口的数据绑定控件<xref:System.Web.UI.WebControls.LinqDataSource>控件。</xref:System.Web.UI.WebControls.LinqDataSource> 当自动创建数据页属性设置为`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控件中检索仅足够数据绑定控件中的一页的记录。</xref:System.Web.UI.WebControls.LinqDataSource> 它使用<xref:System.Linq.Enumerable.Skip%2A>和<xref:System.Linq.Enumerable.Take%2A>方法来检索当前页的记录。</xref:System.Linq.Enumerable.Take%2A> </xref:System.Linq.Enumerable.Skip%2A>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoPage property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users page through the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_959_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_959_1.aspx)]"
  syntax:
    content: public bool AutoPage { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用户可以通过数据; 页，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  id: AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件支持对数据进行排序在运行时。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控件支持两种方法对数据进行排序。</xref:System.Web.UI.WebControls.LinqDataSource> 你可以使用自动排序属性启用运行时排序或可以设置<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性来定义在设计时的排序。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       将自动排序属性设置为`true`中启用排序<xref:System.Web.UI.WebControls.LinqDataSource>基于的数据绑定控件的排序表达式的控件。</xref:System.Web.UI.WebControls.LinqDataSource> 数据绑定控件提供的接口，使用户能够在运行时选择要用于排序的属性。       你可以以编程方式设置通过设置返回数据的顺序<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性的属性或用于排序的属性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 当<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性设置为一个属性和自动排序属性是`true`，从数据绑定控件的排序表达式应用中的表达式之后<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 因此，这将确定数据的最终排序。"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the AutoSort property set to `true` and a <xref:System.Web.UI.WebControls.GridView> control that is bound to the <xref:System.Web.UI.WebControls.LinqDataSource> control. The <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> property of the <xref:System.Web.UI.WebControls.GridView> control is set to `true` to provide the interface that lets users sort the data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_766_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_766_1.aspx)]"
  syntax:
    content: public bool AutoSort { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用户可以将数据; 进行排序，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  id: ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "创建上下文类型对象的实例后发生。"
  remarks: "处理 ContextCreated 事件，以检查的上下文类型对象或检查在创建对象时引发的异常。 检索中的上下文类型对象<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>与此事件相关联的对象。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 检索从数据操作过程中引发的异常<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>       上下文类型对象选择、 更新、 插入和删除操作过程中创建，并且在整个请求重复。       没有时不引发该事件的一次。 这是以编程方式设置<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>期间的对象属性<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 附加条件是原始值不需要存储在或中的对象的视图状态，<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性实现<xref:System.Data.Linq.ITable>接口。</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> ContextCreated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  id: ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "创建上下文类型对象的实例之前发生。"
  remarks: "默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource>控件创建一个实例中指定的类型<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>控件调用要创建对象的实例的数据上下文对象的默认构造函数。</xref:System.Web.UI.WebControls.LinqDataSource> 很可能你必须使用非默认构造函数，或你必须创建不同的对象中指定从<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> 在这种情况下，你必须处理 ContextCreating 事件，并手动创建的数据上下文对象。       在选择、 更新、 插入和删除操作期间创建上下文类型对象。       没有时不引发该事件的一次。 这是以编程方式设置<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>的事件处理程序中某个对象的属性<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> 附加条件是原始值不需要存储在或中的对象的视图状态，<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>属性实现<xref:System.Data.Linq.ITable>接口。</xref:System.Data.Linq.ITable> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A>"
  example:
  - "The following example shows how to create the data context object by using a non-default constructor during the ContextCreating event. The code assigns the object to the <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_153_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_153_1.vb)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs> ContextCreating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  id: ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "在释放上下文类型对象之前发生。"
  remarks: "处理 ContextDisposing 事件，若要手动释放对象或执行清理特定于该对象之前的对象被销毁。"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs> ContextDisposing;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  id: ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置包含其值具有的数据，你想要检索的属性的类型的名称。"
  remarks: "当你使用<xref:System.Web.UI.WebControls.LinqDataSource>控制从内存中数据集合或数据库检索数据，必须指定两个属性。</xref:System.Web.UI.WebControls.LinqDataSource> 第一个是表示数据源的数据上下文类。 第二个是中包含的数据的数据上下文类的属性。 ContextTypeName 属性设置为数据上下文类的名称和你设置<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>到包含数据的数据集合的属性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       例如，当从数据库检索数据，ContextTypeName 属性设置为表示数据库的类的名称。 此外设置<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性表示数据库中的表的属性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 若要从数据库中生成类，请使用[!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]或 SqlMetal.exe 实用工具来自动生成这些类。       当从内存中的数据集合 （如数组） 中检索数据时，设置 ContextTypeName 属性为包含数组属性的类的名称。 然后设置<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性用于获取数组的属性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>       若要启用自动更新，插入或删除操作通过<xref:System.Web.UI.WebControls.LinqDataSource>控件，分配给 ContextTypeName 属性的类必须派生从<xref:System.Data.Linq.DataContext>.</xref:System.Data.Linq.DataContext> </xref:System.Web.UI.WebControls.LinqDataSource> 此外，此属性分配给<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性必须从<xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601>派生</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 如果你不需要以启用自动更新、 插入或删除操作，你可以将任何类型的类的名称分配给 ContextTypeName 属性。       有关如何从一个类的实例中选择数据的信息，请参阅<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows how to set the ContextTypeName property to a class that contains an array of strings. It also shows how to set the property to a class (generated by the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]) that represents a database.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ To SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_745_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_745_2.vb)]"
  syntax:
    content: public override string ContextTypeName { get; set; }
    return:
      type: System.String
      description: "要从中检索数据的类的名称。"
  overload: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  id: CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "返回可查询的视图。"
  syntax:
    content: protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.QueryableDataSourceView
      description: "可查询的视图。"
  overload: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  id: CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "创建的新实例<xref href=&quot;System.Web.UI.WebControls.LinqDataSourceView&quot;></xref>与此控件相关联的类。"
  remarks: "若要提供自定义视图，可以重写此方法在派生类中。"
  syntax:
    content: protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();
    parameters: []
    return:
      type: System.Web.UI.WebControls.LinqDataSourceView
      description: "一个充当数据绑定控件的接口的对象。"
  overload: System.Web.UI.WebControls.LinqDataSource.CreateView*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  id: Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "执行删除操作。"
  remarks: "通常情况下，无需在代码中调用 Delete 方法。 当你使用<xref:System.Web.UI.WebControls.LinqDataSource>控件与数据绑定控件，数据绑定控件将自动调用 Delete 方法如果用户执行操作以删除一条记录。</xref:System.Web.UI.WebControls.LinqDataSource> 当你想要创建你自己的过程删除数据时，显式调用 Delete 方法。 例如，你可以调用 Delete 方法，当你想要删除基于之外的数据绑定控件的事件的记录。"
  syntax:
    content: public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "要删除的记录行键值。"
    - id: oldValues
      type: System.Collections.IDictionary
      description: "计算以检测数据冲突行值。"
    return:
      type: System.Int32
      description: "删除操作所影响的记录数。"
  overload: System.Web.UI.WebControls.LinqDataSource.Delete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  id: Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "删除操作已完成时发生。"
  remarks: "处理已删除事件，以捕获删除操作中，从任何异常，也可后在操作完成后检查输出参数。 你可以检索来自的输出参数<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>传递给事件处理程序的对象。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Deleted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  id: DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "不使用此属性<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>类。"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "参数的集合。"
  overload: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  id: Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "在删除操作之前发生。"
  remarks: "处理删除事件，以验证要删除，以检查数据类，若要更改在删除操作中前, 一个值，或若要取消删除操作中的数据验证错误的对象。 <xref:System.Web.UI.WebControls.LinqDataSource>控制将传递<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>到删除事件的事件处理程序的对象。</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>对象包含将被删除并使你能够取消删除操作的数据。</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> 如果数据类将引发<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>异常，<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>对象包含在该异常<xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceValidationException>       如果删除事件的事件处理中引发异常，则必须处理该事件处理程序中的异常。 此异常不会传递到事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Deleted>事件 (通过<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>对象)。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Deleted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性包含在删除事件后引发异常。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Deleting event. The code cancels the delete operation based on a property in the <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> property and a value from the Web page. In the example, when the `OnSale` property is set to `true`, the user must select a <xref:System.Web.UI.WebControls.CheckBox> control to confirm that a record should be deleted.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_77_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_77_1.cs)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Deleting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  id: EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否可以通过删除数据记录<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件。"
  remarks: "将 EnableDelete 属性设置为`true`如果想要使用户能够删除数据记录通过<xref:System.Web.UI.WebControls.LinqDataSource>控件。</xref:System.Web.UI.WebControls.LinqDataSource> EnableDelete 时`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控件使用 LINQ to SQL 会自动创建删除的数据的命令。</xref:System.Web.UI.WebControls.LinqDataSource> 必须包括一个接口，使用户可以选择一条记录以删除，如<xref:System.Web.UI.WebControls.DetailsView>控件。</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>控件不支持自动删除操作时<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性设置。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 在这种情况下，<xref:System.Web.UI.WebControls.LinqDataSource>控件将引发异常，如果尝试删除操作。</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableDelete set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users delete a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_368_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_368_1.aspx)]"
  syntax:
    content: public bool EnableDelete { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了自动删除操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  id: EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否可以通过插入数据记录<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件。"
  remarks: "将 EnableInsert 属性设置为`true`如果想要使用户能够插入新数据记录通过<xref:System.Web.UI.WebControls.LinqDataSource>控件。</xref:System.Web.UI.WebControls.LinqDataSource> EnableInsert 时`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控件使用 LINQ to SQL 来自动创建命令插入数据。</xref:System.Web.UI.WebControls.LinqDataSource> 必须包括一个供用户插入一个新记录，例如界面<xref:System.Web.UI.WebControls.DetailsView>控件。</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>控件不支持自动插入操作时<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性设置。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 在这种情况下，<xref:System.Web.UI.WebControls.LinqDataSource>控件将引发异常，如果尝试插入操作。</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableInsert set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and displays a button that switches the control to insert mode where users can create and save a new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1142_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1142_1.aspx)]"
  syntax:
    content: public bool EnableInsert { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了自动插入操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  id: EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置值，该值指示是否跟踪数据上下文对象的更改。"
  remarks: "LINQ 到 SQL 数据上下文对象中选择数据时才使用 EnableObjectTracking 属性。       当你与只读数据交互时，将 EnableObjectTracking 属性设置为`false`能改善性能，因为数据不缓存以确定是否有更改。 但是，它还将禁用延迟的执行查询。 此属性必须设置为`true`如果你想要使用延迟的执行查询。"
  syntax:
    content: public bool EnableObjectTracking { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数据上下文对象跟踪的更改;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  id: EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否可以通过更新数据记录<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>控件。"
  remarks: "将 EnableUpdate 属性设置为`true`如果想要使用户能够通过使用更新的数据记录<xref:System.Web.UI.WebControls.LinqDataSource>控件。</xref:System.Web.UI.WebControls.LinqDataSource> EnableUpdate 时`true`、<xref:System.Web.UI.WebControls.LinqDataSource>控件使用 LINQ to SQL 会自动创建的命令以更新的数据。</xref:System.Web.UI.WebControls.LinqDataSource> 必须包含一个界面，从而让用户更新的记录，如<xref:System.Web.UI.WebControls.DetailsView>控件。</xref:System.Web.UI.WebControls.DetailsView>       <xref:System.Web.UI.WebControls.LinqDataSource>控件不支持自动更新操作时<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性或<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性设置。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 在这种情况下，<xref:System.Web.UI.WebControls.LinqDataSource>控件将引发异常，如果尝试更新操作。</xref:System.Web.UI.WebControls.LinqDataSource>"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that has EnableUpdate set to `true`. A <xref:System.Web.UI.WebControls.DetailsView> control displays the data and creates a button that lets users update a data record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_116_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_116_1.aspx)]"
  syntax:
    content: public bool EnableUpdate { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了自动更新操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  id: GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，指定哪些属性用于对检索到的数据进行分组。"
  remarks: "GroupBy 属性用于指定哪些属性用于将合并具有相同的值的数据记录。 例如，如果 GroupBy 属性设置为`Name`，查询具有相同的所有记录`Name`作为单个合并记录返回属性值。       你可以通过将中的所有属性分配给 GroupBy 属性多个属性`new`函数，并使用逗号分隔每个属性。 例如，若要按属性分组`Name`然后`Category`，GroupBy 属性设置为`new(Name, Category)`。       用于分组属性中的值返回通过名为的生成属性`Key`。 您包括`Key`中的属性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性来检索已分组的值。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 你可以设置`Key`属性使用别名`As`关键字，但你无需使用别名。 例如，你可能将 GroupBy 属性设置为一个名为属性`Category`。 你可以检索中的合并的值`Category`通过设置属性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性`new(Key As ProductCategory)`。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       你可以通过包括访问分组中的各记录`It`中的属性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> `It`属性包含共享中的分组属性的值的记录的集合。 可以循环访问`It`属性来检索单个记录。       GroupBy 属性通常用于聚合方法。 你可以使用以下聚合方法:- `Count()`       -    `Average(` *列* `)`       -    `Sum(` *列* `)`       -    `Max(` *列* `)`       -    `Min(` *列* `)`       -    `Where(` *条件* `)`       -    `Any()`       -    `All(` *条件*`)`详细信息，请参阅[NIB: LinqDataSource Web 服务器控件概述](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136)和[How to︰ 组和聚合数据使用 LinqDataSource控件](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)。"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that groups the returned data by a property named `Category`. It returns the shared values and calculates the average price for the grouped records.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_1.aspx)]  \n  \n The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control that is configured to group by two columns. The `Key` property references an object that has two properties, `ProductCategory` and `Color`. The object represented by `It` is renamed `Products`. The renamed `Products` object contains a collection of the individual records in a grouping, and each instance contains all the columns from the Products table.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_2.aspx)]  \n  \n The following example shows two <xref:System.Web.UI.WebControls.ListView> controls for displaying the data from the <xref:System.Web.UI.WebControls.LinqDataSource> control in the previous example. One <xref:System.Web.UI.WebControls.ListView> control displays the grouped data and the other <xref:System.Web.UI.WebControls.ListView> control displays the individual names of products that belong to that group. The nested data-bound control's <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> property is set to `Products`, which is the alias for the `It` object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_84_3.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_84_3.aspx)]"
  syntax:
    content: public string GroupBy { get; set; }
    return:
      type: System.String
      description: "一个字符串，用于创建 Group By 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  id: GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取用于创建 Group By 子句的参数的集合。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控件 GroupByParameters 集合中使用参数在运行时创建 Group By 子句。</xref:System.Web.UI.WebControls.LinqDataSource> 通常将不使用 GroupByParameters 集合对数据进行分组。 相反，你可以使用<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 你 GroupByParameters 集合仅当使用 Group By 子句中的值必须在运行时设置值不是属性名称。 例如，使用 GroupByParameters 集合对组数据进行基于是否`LastName`数据记录中的属性将为用户提供一个值。       如果你想对数据进行分组的属性，并且不需要在运行时设置该属性，则可以定义中的分组属性<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 例如，若要从数据库表中返回按分组`LastName`，将其设置<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>为&quot;LastName&quot;不带任何参数。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 如果你想对动态数据进行分组的属性，创建的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件和自定义<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性根据需要。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting>       无法将属性的名称指定为 GroupByParameters 集合中的参数的值。 你需要将参数添加到 GroupByParameters 集合，当你想要添加到条件<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>必须在运行时设置的属性。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       若要设置 GroupByParameters 集合中的值，将名称分配给每个参数，并将中的占位符<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性中的为该命名参数。</xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> 在 Group By 子句中，作为开头的每个参数名称 @ 符号。"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "用于创建 Group By 子句的参数。"
  overload: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  id: Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "执行插入操作。"
  remarks: "通常情况下，无需在代码中调用 Insert 方法。 当用户执行操作以插入新记录时，数据绑定控件将自动调用 Insert 方法。 当你想要创建你自己的过程用于插入数据时，显式调用 Insert 方法。"
  example:
  - "The following example shows how to programmatically insert a new record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains default values to the Insert method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/csharp/cd9b3311-c882-4466-8d03-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/add/codesnippet/visualbasic/cd9b3311-c882-4466-8d03-_2.aspx)]"
  syntax:
    content: public int Insert (System.Collections.IDictionary values);
    parameters:
    - id: values
      type: System.Collections.IDictionary
      description: "要插入到数据源的行值。"
    return:
      type: System.Int32
      description: "插入操作所影响的行数。"
  overload: System.Web.UI.WebControls.LinqDataSource.Insert*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  id: Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "当插入操作已完成时发生。"
  remarks: "处理插入事件，以捕获插入操作的任何异常也可在插入操作完成后检查的值。 您可以通过将新值<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>传递给事件处理程序的对象。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> 例如，你可以使用<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>对象以检索生成的数据库以进行新的数据记录的标识属性。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  example:
  - "The following example shows how to create an event handler for the Inserted event that checks for exceptions and retrieves the identity property for the new record.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_96_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_96_1.aspx)]"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Inserted;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  id: Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "在插入操作之前发生。"
  remarks: "处理插入事件，以验证要插入、 检查的数据类，若要更改在插入操作中前, 一个值，或将取消 insert 操作的数据验证错误的对象。 <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>为此事件包含要插入的数据源中的新对象，对象将传递到事件处理程序。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>       如果<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>对象包含验证异常由数据类</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>的插入操作过程中发生验证错误 如果要插入的值与在数据类中，属性的类型不匹配或未通过自定义的验证检查，将发生验证错误。 插入事件的事件处理中, 可以检索验证异常，并采取相应的操作。       如果插入事件的事件处理中引发异常，则必须处理该事件处理程序中的异常。 此异常不会传递到事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserted>事件 (通过<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>对象)。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Inserted> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性包含在插入事件后引发异常。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Inserting event that modifies data before the insert operation. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_110_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_110_1.vb)]  \n  \n The following example shows an event handler for the Inserting event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Inserting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  id: InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取在插入操作过程中使用的参数的集合。"
  remarks: "通常将所需的插入操作的值传递给<xref:System.Web.UI.WebControls.LinqDataSource>由数据绑定控件的控件。</xref:System.Web.UI.WebControls.LinqDataSource> 插入参数，如果你想要提供默认值或定义是否将转换到的空值可指定`null`。 无需将插入，只需为在用户不提供一个值时必须处理值的每个值提供一个参数。       InsertParameters 集合中提供的值仅用于在数据源中定义但未绑定数据控件中的字段。 例如，假设数据库表具有列名称、 地址和邮政编码，分别名为但<xref:System.Web.UI.WebControls.ListView>已绑定到表的控件绑定到的名称和地址字段仅。</xref:System.Web.UI.WebControls.ListView> 将仅为邮政编码字段使用 InsertParameters 集合中的值。 它们不用于为名称和地址字段。 即使为这些字段中输入任何值，也是如此。 如果数据绑定控件自动生成字段的数据源中的所有都字段，将不使用 InsertParameters 集合中的任何值。"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with a parameter that provides a default value in the InsertParameters collection. If the user does not provide a value for the `Category` property, the default value that is provided by the parameter is saved in the database.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1053_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1053_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "在插入操作期间使用的参数。"
  overload: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  id: OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>对象。"
  syntax:
    content: protected override void OnInit (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "事件数据。"
  overload: System.Web.UI.WebControls.LinqDataSource.OnInit*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  id: OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "引发<xref href=&quot;System.Web.UI.Control.Unload&quot;></xref>事件。"
  syntax:
    content: protected override void OnUnload (EventArgs e);
    parameters:
    - id: e
      type: System.EventArgs
      description: "<xref:System.EventArgs>包含事件数据的对象。</xref:System.EventArgs>"
  overload: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  id: OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，指定哪些字段用于对检索到的数据进行排序。"
  remarks: "OrderBy 属性用于指定从返回的数据要用于排序的属性。 对数据进行排序的属性必须存在于原始数据源，但是它没有要包括在<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 你可以添加一个空格和`Ascending`， `ASC`， `Descending`，或`DESC`中才能指定如何返回已排序的数据的 OrderBy 字符串的属性。       可以通过使用逗号分隔每个属性提供 OrderBy 属性中的多个属性。 例如，到排序依据属性名为`LastName`和`FirstName`，将 OrderBy 属性设为&quot;姓氏 FirstName&quot;。      1> [!NOTE]&1;> 当你使用<xref:System.Web.UI.WebControls.LinqDataSource>控件替换为[!INCLUDE[ss2k](~/add/includes/ss2k-md.md)]或[!INCLUDE[ssEW](~/add/includes/ssew-md.md)]和<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>属性设置为`true`，你必须提供 OrderBy 属性中的值。</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> </xref:System.Web.UI.WebControls.LinqDataSource> 默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A>属性是`true`。</xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> 如果将值赋给<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性，你还必须包括所有的 identity 列在查询中返回的属性列表。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       如果<xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A>属性设置为`true`，数据绑定控件可以传递到一个排序表达式<xref:System.Web.UI.WebControls.LinqDataSource>控件在运行时。</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> <xref:System.Web.UI.WebControls.LinqDataSource>应用了 OrderBy 属性之后，控件将应用从数据绑定控件的排序表达式。</xref:System.Web.UI.WebControls.LinqDataSource> 因此，根据排序表达式被返回的数据，从数据绑定控件。"
  example:
  - "The following example returns data in reverse alphabetical order based on values in the `Category` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/csharp/p-system.web.ui.webcontr_348_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_348_1.aspx)]"
  syntax:
    content: public string OrderBy { get; set; }
    return:
      type: System.String
      description: "一个字符串，用于创建 Order By 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  id: OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取用于创建 Order By 子句的参数的集合。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控件 OrderByParameters 集合中使用参数在运行时创建的 Order By 子句。</xref:System.Web.UI.WebControls.LinqDataSource> 通常情况下设置<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>属性`true`时将参数添加到 OrderByParameters 集合。</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 当<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>属性设置为`true`，OrderByParameters 集合中的每个参数添加到序列中的 Order By 子句 OrderByParameters 集合中指定它们。</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> 当<xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>属性是`true`，参数不需要命名为，因为它们会按顺序应用和与占位符不匹配。</xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>       如果不需要在 Order By 子句中的运行时设置一个值，你不需要使用 OrderByParameters 集合。 你可以定义要使用的排序顺序中的数据的字段<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 例如，若要从数据库表中返回排序通过`LastName`，将其设置<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>为&quot;LastName&quot;不带任何参数。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>       可以设置 OrderByParameters 集合中的参数和匹配的参数中的占位符<xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A>属性，但这种方法具有有限的应用程序。</xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> 当你使用这种方法时，OrderByParameters 集合中的参数不能表示的一个列名称。 可以将参数设置为一个值，然后将该值与属性中的值进行比较。 例如，你可以基于属性中的值是否小于该参数表示的运行时间值的数据进行排序。"
  example:
  - "The following example shows a <xref:System.Web.UI.WebControls.LinqDataSource> control with the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> property set to `true`. A parameter is included in the OrderByParameters collection that orders the data based on the property name that a user selects from a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/csharp/p-system.web.ui.webcontr_757_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_757_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "用于创建 Order By 子句的参数。"
  overload: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  id: OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置用于排序的分组数据的字段。"
  remarks: "OrderGroupsBy 属性用于指定数据的组的排序方式。 例如，你可通过组`CategoryID`属性和每个类别 ID 分组依据的平均值的然后排序`Price`属性。       仅当对数据进行分组时，你可以设置 OrderGroupsBy 属性。 如果设置 OrderGroupsBy 属性但没有设置<xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>属性，<xref:System.Web.UI.WebControls.LinqDataSource>控件将引发异常。</xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A>       用于对数据进行排序的属性必须是一个属性，用于对数据进行分组或分组数据的聚合函数的结果。 若要指定如何对数据进行排序，你可以向 OrderGroupsBy 字符串中的属性名称中添加一个空格和字符串&quot;升序&quot;、&quot;ASC&quot;、&quot;降序&quot;或&quot;DESC&quot;。       你可以在 OrderGroupsBy 属性中指定多个属性。 使用逗号分隔每个属性。"
  example:
  - "The following example shows how to group the data by using two properties, and how to sort the grouped data by using one of those properties. The data from a table named `Products` is grouped by using properties named `CategoryID` and `Discontinued`. The grouped data is sorted by the `CategoryID` property.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_1.aspx)]  \n  \n The following example shows how to group the data by using a property, and how to sort it based on the results of an aggregation function. The data from the `Products` table is grouped by using the `CategoryID` property. It is sorted based on the average of the `UnitPrice` property within each group.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1127_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1127_2.aspx)]"
  syntax:
    content: public string OrderGroupsBy { get; set; }
    return:
      type: System.String
      description: "一个字符串，用于创建组 Order By 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  id: OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取用于创建组 Order By 子句的参数的集合。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控件 OrderGroupsByParameters 集合中使用参数在运行时创建的组 Order By 子句。</xref:System.Web.UI.WebControls.LinqDataSource>       仅在必须在组 Order By 子句中的运行时设置值时，你可以将值添加到 OrderGroupsByParameters 集合。 你可以定义用于按使用顺序对数据的字段<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>       可以设置 OrderGroupsByParameters 集合中的参数和匹配的参数中的占位符<xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> 但是，当你使用这种方法，OrderGroupsByParameters 集合中的参数不能表示; 的一个列名称它们还必须表示值。 可以将参数设置为一个值，然后将该属性值进行比较。 例如，你可以基于属性中的值是否小于该参数表示的运行时间值的数据进行排序。"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "使用创建组 Order By 子句的参数。"
  overload: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  id: Select
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置的属性和计算中检索到的数据包含的值。"
  remarks: "如果你未设置所选的属性，<xref:System.Web.UI.WebControls.LinqDataSource>控制此数据对象中检索所有属性 （数据列）。</xref:System.Web.UI.WebControls.LinqDataSource> 从对象中检索属性的子集或来计算新值，在检索数据时，你可以使用所选属性。       指定要检索选择的属性设置为你想要包括在返回的数据的属性名称的属性。       如果从数据对象，检索属性的子集<xref:System.Web.UI.WebControls.LinqDataSource>控件动态创建类，其中包含仅在选择的属性中指定的属性。</xref:System.Web.UI.WebControls.LinqDataSource> 如果计算不在数据对象中的属性的属性，也会动态创建类。 在这些情况下，从查询返回的对象不是在指定类的实例<xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> 相反，你必须使用`new`选择属性以指示，从查询返回一个新类中的方法。 例如，若要仅返回`FirstName`和`LastName`属性从一个对象，包含多个这些属性，则将选择的属性设置为`new(FirstName, LastName)`。 <xref:System.Web.UI.WebControls.LinqDataSource>控件动态创建中指定的新类`new`方法。</xref:System.Web.UI.WebControls.LinqDataSource>       你可以使用`As`关键字来将别名分配给所选的值。 如果分配别名，则必须包含中的别名属性`new`方法。 将绑定到的任何数据绑定控件<xref:System.Web.UI.WebControls.LinqDataSource>控件必须由该别名引用的属性。</xref:System.Web.UI.WebControls.LinqDataSource> 例如，如果所选属性设置为`new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`，数据绑定控件可以访问两个属性，`SalesRegion`和`RevenueThousands`。       你使用`new`下表中列出的条件根据选择的属性中的函数。      |选择 |使用的 new |示例 |  |------------|----------------|-------------|  |单一属性。 |`new`不需要。 |`Select=&quot;Category&quot;`|  |多个属性。 |`new`需要。 |`Select=&quot;new(Cateogry, Name)&quot;`|  |一个或多个具有别名的属性。 |`new`需要。 |`Select=&quot;new(Category As CategoryGroup)&quot;`|      如果你想要启用自动数据修改，但你不希望显示此数据对象中的所有属性，则不要设置选择的属性。 相反，管理通过数据绑定控件显示。 当你使用<xref:System.Web.UI.WebControls.DetailsView>控件或<xref:System.Web.UI.WebControls.GridView>控件，你还必须设置<xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A>或<xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A>属性`false`。</xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> </xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> </xref:System.Web.UI.WebControls.GridView> </xref:System.Web.UI.WebControls.DetailsView> 数据绑定控件中不显示任何值存储视图状态中。 它们是不变时传递给数据源执行数据更新。       在查询中的数据进行分组，可以在选择属性包含聚合方法。 你可以使用以下聚合方法:- `Count()`       -    `Average(` *列* `)`       -    `Sum(` *列* `)`       -    `Max(` *列* `)`       -    `Min(` *列* `)`       -    `Where(` *条件* `)`       -    `Any()`       -    `All(` *条件*`)`详细信息，请参阅[NIB: LinqDataSource Web 服务器控件概述](http://msdn.microsoft.com/en-us/104cfc3f-7385-47d3-8a51-830dfa791136)和[How to︰ 组和聚合数据使用 LinqDataSource控件](http://msdn.microsoft.com/en-us/b922cf69-251f-4158-b405-ea960993a1af)。       在您对数据进行分组，你可以纳入`Key`和`It`，它们动态创建属性，在选择属性。 `Key`属性是指中或多个用于对数据进行分组的属性的值。 例如，如果通过名为的属性组`Category`、`Key`属性将包含在每个唯一值`Category`属性。 `It`属性指的数据分组中的单个记录的集合。 可以循环访问`It`属性，以检索已经合并分组操作中的单个记录。 例如，如果通过名为的属性组`Category`、`It`属性包含所有的共享中的常见值的单个记录`Category`属性。       如果包含`It`中数据进行分组时所选属性的关键字，你必须将分配的别名`It`关键字。 <xref:System.Web.UI.WebControls.LinqDataSource>控件将引发异常，如果`It`没有别名。</xref:System.Web.UI.WebControls.LinqDataSource> 你可以分配的别名`Key`关键字，但这不是必需。"
  example:
  - "The following example shows how to set the Select property to a subset of properties in the data object.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_1.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_1.aspx)]  \n  \n The following example shows how to retrieve values in a property that has been used to group data, and to retrieve the average for the grouped records. The `Key` keyword contains the property that has been used for grouping data. In this example, `Key` will contain the shared values from the `ProductCategory` property.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_580_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/add/codesnippet/csharp/p-system.web.ui.webcontr_580_2.aspx)]"
  syntax:
    content: public string Select { get; set; }
    return:
      type: System.String
      description: "一个字符串，用于创建 Select 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.Select*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  id: Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "数据检索操作已完成时发生。"
  remarks: "处理所选事件捕获从数据检索操作的任何异常或检索操作完成之后检查数据对象。 该对象可用于从<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>传递给事件处理程序的对象。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Selected;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  id: Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "数据检索操作前发生。"
  remarks: "处理选择事件，以便执行以下任务:-修改数据检索的参数。      以编程方式生成查询。      -修改排序或分页的值。      -执行自定义排序或分页。      -取消该数据检索操作。       <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>为此事件包含该数据检索操作的参数传递到事件处理程序的对象。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> 您可以修改选择事件处理程序中的参数，然后执行查询时，也可以创建新的结果集，并指定给<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>       若要实现自定义的排序或此事件处理程序中的分页的能力可能受到控件绑定到<xref:System.Web.UI.WebControls.LinqDataSource>.</xref:System.Web.UI.WebControls.LinqDataSource> 例如，当列标题的<xref:System.Web.UI.WebControls.GridView>单击控件，控件将执行自动排序，这可能会的替代任何订单，所以建立在事件处理程序。</xref:System.Web.UI.WebControls.GridView>       如果选择事件的事件处理中引发异常，则必须处理该事件处理程序中的异常。 此异常不会传递到事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selected>事件 (通过<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>对象)。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selected> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性包含仅选择事件之后引发的异常。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Selecting event. The handler creates a query that retrieves values from an array of string values in the Web page.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/csharp/e-system.web.ui.webcontr_69_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_69_1.vb)]  \n  \n The following example shows how to assign the <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> property to the object that is returned from a method that represents a stored procedure.  \n  \n [Visual Basic]  \n  \n```  \nProtected Sub LinqDataSource_Selecting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceSelectEventArgs)  \n    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  \n    e.Result = exampleContext.GetRegisteredCustomers()  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Selecting(object sender,   \n        LinqDataSourceSelectEventArgs e)  \n{  \n    ExampleDataContext exampleContext = new ExampleDataContext();  \n    e.Result = exampleContext.GetRegisteredCustomers();  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Selecting;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  id: SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取数据检索操作中使用的参数的集合。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控件 SelectParameters 集合中使用参数在运行时创建 Select 子句。</xref:System.Web.UI.WebControls.LinqDataSource> 当你想要在 Select 子句中使用运行时的值时，你可以将参数添加到 SelectParameters 集合。 例如，你可以将参数添加到 SelectParameters 集合以表示用户的配置文件中的属性。 你可以然后使用该属性和值从数据源计算新值。       如果不需要在 Select 子句中的运行时设置一个值，你不需要使用 SelectParameters 集合。 你可以定义要检索的属性<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 例如，若要返回`FirstName`和`LastName`从数据库表中的值设置<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>到&quot;FirstName、 LastName&quot;不带任何参数。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>       若要设置 SelectParameters 集合中的值，则添加中的占位符<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>的命名参数的属性。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> 在 Select 子句中，作为开头的每个参数名称 @ 符号。       不能使用参数 SelectParameters 集合中表示属性名称。 动态设置<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>到属性的名称的属性创建的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Selecting>事件和自定义<xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>属性根据需要。</xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Selecting> </xref:System.Web.UI.WebControls.LinqDataSource.Select%2A>"
  example:
  - "The following example shows how to use a user-supplied value to calculate a value in the returned data. The user can enter a value in the text box that represents the number of manufacturing days. That value is divided by a value from a database that represents the number of days to manufacture a product. The returned value indicates how many products can be manufactured during the specified number of days. The user's input is included in the Select command through the SelectParameters collection.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_129_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_129_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "用于创建 Select 子句的参数。"
  overload: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  id: StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否应以确保到更新或删除操作之前已由另一个进程不更改数据的视图状态中存储数据源中的数据。"
  remarks: "默认情况下，当更新和删除操作已启用，<xref:System.Web.UI.WebControls.LinqDataSource>控制存储在视图状态中的所有记录的原始值。</xref:System.Web.UI.WebControls.LinqDataSource> <xref:System.Web.UI.WebControls.LinqDataSource>控制存储值的所有主键，并且所有属性不都标记为`UpdateCheck.Never`中`Column`属性。</xref:System.Web.UI.WebControls.LinqDataSource> 你设置`UpdateCheck`属性`Column`属性中[!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]。       LINQ to SQL 更新或删除数据之前，它会检查针对数据源中的当前值在视图状态的值。 如果值不匹配，则数据源记录已更改。 在这种情况下，LINQ to SQL 将引发异常和不继续更新或删除操作。 有关 LINQ to SQL 的详细信息，请参阅[LINQ to SQL](~/add/includes/ajax-current-ext-md.md)。       状态视图中存储的原始值可能会导致的页大小变得不必要地大和可以公开给恶意用户的敏感数据。 你可以禁用 StoreOriginalValuesInViewState 属性设置为存储视图状态中值`false`。 如果你这样做，则必须提供您自己的方式，以确保数据未更改。 如果 StoreOriginalValuesInViewState 属性设置为`false`，原始值不会保留在数据绑定控件的视图状态。 在这种情况下，LINQ to SQL 无法验证数据的完整性。 LINQ to SQL 将引发异常，该值指示数据冲突，即使数据源中的数据实际未更改。       如果基础数据源包含更新的过程中自动更新的时间戳字段，你可以存储视图状态中的此值。 在这种情况下，实体类中的时间戳属性设置为`IsVersion=true`和所有属性都设置为`UpdateCheck.Never`。 因为每次该记录中的这些数据更改时，数据库自动更新时间戳字段，LINQ to SQL 确定从该值中，如果数据已更改。 这有助于减少视图状态的大小，并且未公开任何敏感数据。 LINQ to SQL 数据库中的时间戳值的状态将通过比较时间戳值视图中检查的数据一致性。 有关详细信息，请参阅[演练︰ 使用时间戳与 LinqDataSource 控件与检查数据完整性](http://msdn.microsoft.com/en-us/e7700162-4f05-4130-81f7-3be1361027fa)。"
  syntax:
    content: public bool StoreOriginalValuesInViewState { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果将视图中存储值的状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  id: System#Web#DynamicData#IDynamicDataSource#ContextType
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅<xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.LinqDataSource>实例被强制转换为<xref:System.Web.DynamicData.IDynamicDataSource>接口。</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }
    return:
      type: System.Type
      description: "与类相关联的类型。"
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  id: System#Web#DynamicData#IDynamicDataSource#EntitySetName
  isEii: true
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "有关此成员的说明，请参阅<xref href=&quot;System.Web.DynamicData.IDynamicDataSource&quot;> </xref>。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Web.UI.WebControls.LinqDataSource>实例被强制转换为<xref:System.Web.DynamicData.IDynamicDataSource>接口。</xref:System.Web.DynamicData.IDynamicDataSource> </xref:System.Web.UI.WebControls.LinqDataSource>"
  syntax:
    content: string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }
    return:
      type: System.String
      description: "实体的名称。"
  overload: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  id: TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置表示数据收集的数据上下文类中属性或字段的名称。"
  remarks: "TableName 属性设置为属性或字段来代表你想要检索的数据的名称。 当连接到数据库表时，属性的名称通常是表的名称相同。 当连接到内存中的数据集合时，设置为属性或字段的返回数据集合的名称 TableName 属性。       你可以分配的 TableName 属性进行检索操作返回任何类型的属性。 如果由属性表示的对象不实现<xref:System.Collections.IEnumerable>、<xref:System.Web.UI.WebControls.LinqDataSource>控件将自动包装该对象的实例中<xref:System.Collections.IEnumerable>对象。</xref:System.Collections.IEnumerable> </xref:System.Web.UI.WebControls.LinqDataSource> </xref:System.Collections.IEnumerable>       若要启用自动更新、 插入或删除操作，分配给<xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>属性必须从<xref:System.Data.Linq.DataContext>和属性分配给属性必须派生自<xref:System.Data.Linq.Table%601>.</xref:System.Data.Linq.Table%601> TableName</xref:System.Data.Linq.DataContext>派生</xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A>的类       有关如何从一个类的实例中选择数据的信息，请参阅<xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A>"
  example:
  - "The following example shows two <xref:System.Web.UI.WebControls.LinqDataSource> controls. In one <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property in a class. That property returns an array of strings. In the other <xref:System.Web.UI.WebControls.LinqDataSource> control, the TableName property is set to a property that represents a database table.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_1.aspx)]  \n  \n The class named `ExampleDataContext` that represents the database table is not shown in this example. For this example to work, you must create this class by adding a LINQ to SQL class named Example.dbml and dragging a table named Movie onto the [!INCLUDE[vs_ordesigner_short](~/add/includes/vs-ordesigner-short-md.md)]. A class named `ExampleDataContext` with a property named `Movies` is generated.  \n  \n The following example shows the class named `MovieLibrary` that is referenced in the <xref:System.Web.UI.WebControls.LinqDataSource> control.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_811_2.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_811_2.vb)]"
  syntax:
    content: public string TableName { get; set; }
    return:
      type: System.String
      description: "包含包含数据收集属性的名称的字符串。"
  overload: System.Web.UI.WebControls.LinqDataSource.TableName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  id: Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "执行更新操作。"
  remarks: "通常情况下，无需在代码中调用 Update 方法。 当用户执行操作以更新记录时，数据绑定控件将自动调用更新方法。 当你想要创建你自己的过程用于更新数据时，显式调用更新方法。"
  example:
  - "The following example shows how to programmatically update a record in the data source after the user clicks a button. The code passes a <xref:System.Collections.Specialized.ListDictionary> object that contains the key value, a <xref:System.Collections.Specialized.ListDictionary> object that contains the original values, and a <xref:System.Collections.Specialized.ListDictionary> object that contains the new values to the Update method.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_1.vb)]  \n  \n The following example shows the markup for the previous example.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/csharp/6a1b9704-8770-4c58-8934-_2.aspx)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/add/codesnippet/visualbasic/6a1b9704-8770-4c58-8934-_2.aspx)]"
  syntax:
    content: public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);
    parameters:
    - id: keys
      type: System.Collections.IDictionary
      description: "要更新的记录行键值。"
    - id: values
      type: System.Collections.IDictionary
      description: "在数据源中更新行值。"
    - id: oldValues
      type: System.Collections.IDictionary
      description: "计算以检测数据冲突行值。"
    return:
      type: System.Int32
      description: "更新操作所影响的记录数。"
  overload: System.Web.UI.WebControls.LinqDataSource.Update*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  id: Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "更新操作已完成时发生。"
  remarks: "处理更新事件捕获从更新操作的任何异常或更新操作完成之后检查输出参数的值。 输出参数均可用从<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>传递给事件处理程序的对象。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> Updated;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  id: UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "不使用此集合<xref href=&quot;System.Web.UI.WebControls.LinqDataSource&quot;></xref>类。"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "参数的集合。"
  overload: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  id: Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
  type: Event
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "在更新操作之前发生。"
  remarks: "处理更新事件以验证更新，以检查数据类，若要更改的值早更新操作，或取消更新操作中的数据验证错误的对象。 <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>传递给事件处理程序的对象包含对原始对象和更新的对象。</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>       如果<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>对象包含验证异常由数据类。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>在更新操作期间发生验证错误 如果要更新的值与在数据类中，属性的类型不匹配或未通过自定义的验证检查，将发生验证错误。 在更新事件的事件处理程序，可以检索验证异常，并采取相应的操作。       如果正在更新事件的事件处理中引发异常，则必须处理该事件处理程序中的异常。 此异常不会传递到事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updated>事件 (通过<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性<xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>对象)。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> </xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> </xref:System.Web.UI.WebControls.LinqDataSource.Updated> <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>属性包含在更新事件后引发异常。</xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A>"
  example:
  - "The following example shows an event handler for the Updating event. The code compares properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to see whether a value has changed. If the value has changed, a value of the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/e-system.web.ui.webcontr_16_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/e-system.web.ui.webcontr_16_1.cs)]  \n  \n The following example shows an event handler for the Updating event that retrieves validation exceptions.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```  \n  \n The previous example retrieves validation exceptions. An exception might be thrown if a value does not match the type of the property. It might also be thrown from a customized check such as the one in the following example. The `OnAgeChanging` method checks that the number for the `Age` property is not negative.  \n  \n```c#  \npartial void  OnAgeChanging(int? value)  \n{  \n    if (value < 0)  \n    {  \n        throw new Exception(\"Age cannot be a negative number.\");  \n    }  \n}  \n```  \n  \n```vb#  \nPrivate Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  \n    If (value < 0) Then  \n        Throw New Exception(\"Age cannot be a negative number.\")  \n    End If  \nEnd Sub  \n```"
  syntax:
    content: public event EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Updating;
    return:
      type: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  id: Where
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，指定哪些条件必须为适用于要包括在检索到的数据的记录。"
  remarks: "You use the Where property to specify the conditions for the record to be returned from a query. The syntax for the Where property is the same as the syntax for a LINQ Where clause in C#.  \n  \n You specify an expression that results in a Boolean value, and if the expression evaluates to `true` for a given row, the row is included in the result set. Expressions are composed of column names, comparison operators, and values to compare to, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50\"...>  \n```  \n  \n To specify multiple expressions linked by logical `AND` or `OR` operators, you use `&&` as a logical AND operator and `||` as a logical OR operator, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where=\"Price > 50 && Price < 100\"...>  \n<asp:LinqDataSource ... Where=\"Price <= 50 || Price >= 100\"...>  \n```  \n  \n If you want to test a property against a literal string value, the literal string value must be enclosed in double quotation marks. To do this in markup, enclose the Where clause value in single quotation marks, as shown in the following example:  \n  \n```  \n<asp:LinqDataSource ... Where='Category = \"Sports\"' ... >  \n```  \n  \n To test against a literal string value in code, use escape characters that are appropriate to the language you are using in order to insert double quotation marks, as shown in the following example:  \n  \n```vb#  \nLinqDataSource1.Where = \"Category = \"\"Sports\"\"\"  \n```  \n  \n```c#  \nLinqDataSource1.Where = \"Category = \\\"Sports\\\"\";  \n```  \n  \n If you want to test whether a string is greater than or less than another string, you must use methods of the <xref:System.String> class instead of using `<` or `>` operators between the column name and the string value. The following examples show how to select rows that have Category values that are less than, less than or equal to, greater than, or greater than or equal to \"Sports\":  \n  \n```  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") < 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") <= 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") > 0' ... >  \n<asp:LinqDataSource ... Where='Category.CompareTo(\"Sports\") >= 0' ... >  \n```  \n  \n You can also use other methods of the <xref:System.String> class, such as <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, and <xref:System.String.Contains%2A>. For more information about how to compare strings, see [Comparing Strings](~/add/includes/ajax-current-ext-md.md). For more information about Where clause syntax, see [C# Operators](~/add/includes/ajax-current-ext-md.md) and [where clause](~/add/includes/ajax-current-ext-md.md).  \n  \n In addition to filtering based on static values that you define when you create the Web page, you can filter based on dynamic values that are evaluated at run time. In that case, you include a named parameter in the Where property that acts as a placeholder for the value. You then add a parameter that has the matching name to the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection.  \n  \n Alternatively, you can set the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property to `true` and define the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> collection. When the <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> property is `true`, you do not have to include the named parameters in the Where property. Instead, the <xref:System.Web.UI.WebControls.LinqDataSource> control automatically generates the Where clause from the parameters in the <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> property.  \n  \n For more information about how to filter data, see [Walkthrough: Selecting and Filtering a Subset of Data with the LinqDataSource and GridView Controls](http://msdn.microsoft.com/en-us/c1cca3e8-86e4-4e69-a29f-1c05b91f2205)."
  example:
  - "The following example shows how to filter the data returned from a query based on a static condition.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_1.aspx)]  \n  \n The following example shows how to filter the data based on a value that is provided by the user at run time. In this example a <xref:System.Web.UI.WebControls.DropDownList> control and a <xref:System.Web.UI.WebControls.GridView> control are displayed on the page. When the user selects one of the values in the <xref:System.Web.UI.WebControls.DropDownList> control, the <xref:System.Web.UI.WebControls.LinqDataSource> control selects from the `Products` table only rows that have `UserPrice` values equal to the selected value. The <xref:System.Web.UI.WebControls.GridView> control then displays the filtered data.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_778_2.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_778_2.aspx)]"
  syntax:
    content: public string Where { get; set; }
    return:
      type: System.String
      description: "一个字符串来创建 Where 子句。"
  overload: System.Web.UI.WebControls.LinqDataSource.Where*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  id: WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  langs:
  - csharp
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取参数的集合，用于创建 Where 子句。"
  remarks: "<xref:System.Web.UI.WebControls.LinqDataSource>控件 WhereParameters 集合中使用参数创建 Where 子句在运行时。</xref:System.Web.UI.WebControls.LinqDataSource> 你需要将参数添加到 WhereParameters 集合，当你想要以编程方式将一个或多个条件设置在 Where 子句。 例如，您可能在其中搜索姓氏等于的值的记录的数据库表<xref:System.Web.UI.WebControls.TextBox>控件。</xref:System.Web.UI.WebControls.TextBox> 在这种情况下，将参数添加到文本框的值的 WhereParameters 集合。       如果不需要在运行时设置一个值，在 Where 子句，则不需要使用 WhereParameters 集合。 你可以定义的字段中检索<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 例如，若要从数据库表中返回其中`LastName`等于&quot;Adams&quot;在标记中，设置<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>属性`&quot;LastName = &quot;Adams&quot;&quot;`不带任何参数。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>       若要设置 WhereParameters 集合中的值，将名称分配给每个参数，并将中的占位符<xref:System.Web.UI.WebControls.LinqDataSource.Where%2A>为该参数的属性。</xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> 在 Where 子句中，在与每个参数名之前 @ 符号。"
  example:
  - "The following example shows how to use the WhereParameters collection to dynamically create the Where clause. The <xref:System.Web.UI.WebControls.LinqDataSource> control returns all the records with a value in the `Price` column that is greater than the value selected by the user in a <xref:System.Web.UI.WebControls.DropDownList> control.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_594_1.aspx)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/add/codesnippet/csharp/p-system.web.ui.webcontr_594_1.aspx)]"
  syntax:
    content: public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }
    return:
      type: System.Web.UI.WebControls.ParameterCollection
      description: "用于创建 Where 参数的集合中的子句<xref:System.Web.UI.WebControls.LinqDataSource.Where*>属性。</xref:System.Web.UI.WebControls.LinqDataSource.Where*>"
  overload: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.ContextDataSource
  isExternal: false
  name: System.Web.UI.WebControls.ContextDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource()
  nameWithType: LinqDataSource.LinqDataSource()
  fullName: System.Web.UI.WebControls.LinqDataSource.LinqDataSource()
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
  fullName: System.Web.UI.WebControls.LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreated
  nameWithType: LinqDataSource.ContextCreated
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreated
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceStatusEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceStatusEventArgs>
  nameWithType: EventHandler<LinqDataSourceStatusEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceStatusEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceStatusEventArgs
    name: LinqDataSourceStatusEventArgs
    nameWithType: LinqDataSourceStatusEventArgs
    fullName: LinqDataSourceStatusEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextCreating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextCreating
  nameWithType: LinqDataSource.ContextCreating
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextCreating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceContextEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceContextEventArgs>
  nameWithType: EventHandler<LinqDataSourceContextEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceContextEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceContextEventArgs
    name: LinqDataSourceContextEventArgs
    nameWithType: LinqDataSourceContextEventArgs
    fullName: LinqDataSourceContextEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextDisposing
  nameWithType: LinqDataSource.ContextDisposing
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextDisposing
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDisposeEventArgs>
  nameWithType: EventHandler<LinqDataSourceDisposeEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs
    name: LinqDataSourceDisposeEventArgs
    nameWithType: LinqDataSourceDisposeEventArgs
    fullName: LinqDataSourceDisposeEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
  fullName: System.Web.UI.WebControls.LinqDataSource.ContextTypeName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView()
  nameWithType: LinqDataSource.CreateQueryableView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView()
- uid: System.Web.UI.WebControls.QueryableDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: QueryableDataSourceView
  nameWithType: QueryableDataSourceView
  fullName: System.Web.UI.WebControls.QueryableDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView()
  nameWithType: LinqDataSource.CreateView()
  fullName: System.Web.UI.WebControls.LinqDataSource.CreateView()
- uid: System.Web.UI.WebControls.LinqDataSourceView
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceView
  nameWithType: LinqDataSourceView
  fullName: System.Web.UI.WebControls.LinqDataSourceView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete(IDictionary,IDictionary)
  nameWithType: LinqDataSource.Delete(IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Delete(IDictionary,IDictionary)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.UI.WebControls.LinqDataSource.Deleted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleted
  nameWithType: LinqDataSource.Deleted
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleted
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.ParameterCollection
  parent: System.Web.UI.WebControls
  isExternal: false
  name: ParameterCollection
  nameWithType: ParameterCollection
  fullName: System.Web.UI.WebControls.ParameterCollection
- uid: System.Web.UI.WebControls.LinqDataSource.Deleting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Deleting
  nameWithType: LinqDataSource.Deleting
  fullName: System.Web.UI.WebControls.LinqDataSource.Deleting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceDeleteEventArgs>
  nameWithType: EventHandler<LinqDataSourceDeleteEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs
    name: LinqDataSourceDeleteEventArgs
    nameWithType: LinqDataSourceDeleteEventArgs
    fullName: LinqDataSourceDeleteEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
  fullName: System.Web.UI.WebControls.LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert(IDictionary)
  nameWithType: LinqDataSource.Insert(IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Insert(IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Inserted
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserted
  nameWithType: LinqDataSource.Inserted
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserted
- uid: System.Web.UI.WebControls.LinqDataSource.Inserting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Inserting
  nameWithType: LinqDataSource.Inserting
  fullName: System.Web.UI.WebControls.LinqDataSource.Inserting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceInsertEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceInsertEventArgs>
  nameWithType: EventHandler<LinqDataSourceInsertEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceInsertEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
    name: LinqDataSourceInsertEventArgs
    nameWithType: LinqDataSourceInsertEventArgs
    fullName: LinqDataSourceInsertEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit(EventArgs)
  nameWithType: LinqDataSource.OnInit(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnInit(EventArgs)
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload(EventArgs)
  nameWithType: LinqDataSource.OnUnload(EventArgs)
  fullName: System.Web.UI.WebControls.LinqDataSource.OnUnload(EventArgs)
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
  fullName: System.Web.UI.WebControls.LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.Selected
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selected
  nameWithType: LinqDataSource.Selected
  fullName: System.Web.UI.WebControls.LinqDataSource.Selected
- uid: System.Web.UI.WebControls.LinqDataSource.Selecting
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Selecting
  nameWithType: LinqDataSource.Selecting
  fullName: System.Web.UI.WebControls.LinqDataSource.Selecting
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceSelectEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceSelectEventArgs>
  nameWithType: EventHandler<LinqDataSourceSelectEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceSelectEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceSelectEventArgs
    name: LinqDataSourceSelectEventArgs
    nameWithType: LinqDataSourceSelectEventArgs
    fullName: LinqDataSourceSelectEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
  fullName: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
  fullName: System.Web.UI.WebControls.LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
  fullName: System.Web.UI.WebControls.LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update(IDictionary,IDictionary,IDictionary)
  nameWithType: LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
  fullName: System.Web.UI.WebControls.LinqDataSource.Update(IDictionary,IDictionary,IDictionary)
- uid: System.Web.UI.WebControls.LinqDataSource.Updated
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updated
  nameWithType: LinqDataSource.Updated
  fullName: System.Web.UI.WebControls.LinqDataSource.Updated
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Updating
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Updating
  nameWithType: LinqDataSource.Updating
  fullName: System.Web.UI.WebControls.LinqDataSource.Updating
- uid: System.EventHandler{System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<LinqDataSourceUpdateEventArgs>
  nameWithType: EventHandler<LinqDataSourceUpdateEventArgs>
  fullName: System.EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
    name: LinqDataSourceUpdateEventArgs
    nameWithType: LinqDataSourceUpdateEventArgs
    fullName: LinqDataSourceUpdateEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.UI.WebControls.LinqDataSource.Where
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
  fullName: System.Web.UI.WebControls.LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
  fullName: System.Web.UI.WebControls.LinqDataSource.WhereParameters
- uid: System.Web.UI.WebControls.LinqDataSource.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: LinqDataSource
  nameWithType: LinqDataSource.LinqDataSource
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateOrderByClause
  nameWithType: LinqDataSource.AutoGenerateOrderByClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoGenerateWhereClause
  nameWithType: LinqDataSource.AutoGenerateWhereClause
- uid: System.Web.UI.WebControls.LinqDataSource.AutoPage*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoPage
  nameWithType: LinqDataSource.AutoPage
- uid: System.Web.UI.WebControls.LinqDataSource.AutoSort*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: AutoSort
  nameWithType: LinqDataSource.AutoSort
- uid: System.Web.UI.WebControls.LinqDataSource.ContextTypeName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: ContextTypeName
  nameWithType: LinqDataSource.ContextTypeName
- uid: System.Web.UI.WebControls.LinqDataSource.CreateQueryableView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateQueryableView
  nameWithType: LinqDataSource.CreateQueryableView
- uid: System.Web.UI.WebControls.LinqDataSource.CreateView*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: CreateView
  nameWithType: LinqDataSource.CreateView
- uid: System.Web.UI.WebControls.LinqDataSource.Delete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Delete
  nameWithType: LinqDataSource.Delete
- uid: System.Web.UI.WebControls.LinqDataSource.DeleteParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: DeleteParameters
  nameWithType: LinqDataSource.DeleteParameters
- uid: System.Web.UI.WebControls.LinqDataSource.EnableDelete*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableDelete
  nameWithType: LinqDataSource.EnableDelete
- uid: System.Web.UI.WebControls.LinqDataSource.EnableInsert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableInsert
  nameWithType: LinqDataSource.EnableInsert
- uid: System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableObjectTracking
  nameWithType: LinqDataSource.EnableObjectTracking
- uid: System.Web.UI.WebControls.LinqDataSource.EnableUpdate*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: EnableUpdate
  nameWithType: LinqDataSource.EnableUpdate
- uid: System.Web.UI.WebControls.LinqDataSource.GroupBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupBy
  nameWithType: LinqDataSource.GroupBy
- uid: System.Web.UI.WebControls.LinqDataSource.GroupByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: GroupByParameters
  nameWithType: LinqDataSource.GroupByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Insert*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Insert
  nameWithType: LinqDataSource.Insert
- uid: System.Web.UI.WebControls.LinqDataSource.InsertParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: InsertParameters
  nameWithType: LinqDataSource.InsertParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OnInit*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnInit
  nameWithType: LinqDataSource.OnInit
- uid: System.Web.UI.WebControls.LinqDataSource.OnUnload*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OnUnload
  nameWithType: LinqDataSource.OnUnload
- uid: System.Web.UI.WebControls.LinqDataSource.OrderBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderBy
  nameWithType: LinqDataSource.OrderBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderByParameters
  nameWithType: LinqDataSource.OrderByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsBy
  nameWithType: LinqDataSource.OrderGroupsBy
- uid: System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: OrderGroupsByParameters
  nameWithType: LinqDataSource.OrderGroupsByParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Select*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Select
  nameWithType: LinqDataSource.Select
- uid: System.Web.UI.WebControls.LinqDataSource.SelectParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: SelectParameters
  nameWithType: LinqDataSource.SelectParameters
- uid: System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: StoreOriginalValuesInViewState
  nameWithType: LinqDataSource.StoreOriginalValuesInViewState
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.ContextType
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.ContextType
- uid: System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: System.Web.DynamicData.IDynamicDataSource.EntitySetName
  nameWithType: LinqDataSource.System.Web.DynamicData.IDynamicDataSource.EntitySetName
- uid: System.Web.UI.WebControls.LinqDataSource.TableName*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: TableName
  nameWithType: LinqDataSource.TableName
- uid: System.Web.UI.WebControls.LinqDataSource.Update*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Update
  nameWithType: LinqDataSource.Update
- uid: System.Web.UI.WebControls.LinqDataSource.UpdateParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: UpdateParameters
  nameWithType: LinqDataSource.UpdateParameters
- uid: System.Web.UI.WebControls.LinqDataSource.Where*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: Where
  nameWithType: LinqDataSource.Where
- uid: System.Web.UI.WebControls.LinqDataSource.WhereParameters*
  parent: System.Web.UI.WebControls.LinqDataSource
  isExternal: false
  name: WhereParameters
  nameWithType: LinqDataSource.WhereParameters
