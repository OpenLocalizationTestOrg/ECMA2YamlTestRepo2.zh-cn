### YamlMime:ManagedReference
items:
- uid: System.Windows.WeakEventManager
  id: WeakEventManager
  children:
  - System.Windows.WeakEventManager.#ctor
  - System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  - System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  - System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  - System.Windows.WeakEventManager.Item(System.Object)
  - System.Windows.WeakEventManager.NewListenerList
  - System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  - System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  - System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  - System.Windows.WeakEventManager.ReadLock
  - System.Windows.WeakEventManager.Remove(System.Object)
  - System.Windows.WeakEventManager.ScheduleCleanup
  - System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  - System.Windows.WeakEventManager.StartListening(System.Object)
  - System.Windows.WeakEventManager.StopListening(System.Object)
  - System.Windows.WeakEventManager.WriteLock
  langs:
  - csharp
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
  type: Class
  summary: "提供基本类，事件管理器中使用*弱事件模式*。 管理器添加和移除事件 （或回调） 也使用该模式的侦听器。"
  remarks: "当事件源具有对象生存期无关的事件侦听器时，通常使用弱事件模式。 使用 WeakEventManager 的中央事件调度功能允许该侦听器的处理程序进行垃圾回收，即使源对象仍然存在。 与此相反，常规事件挂钩使用`+=`运算符会导致可能断开连接的源来保存到侦听器的引用。 这可以防止接收方进行垃圾回收及时。       一种常见情况之间源和侦听器的生存期关系应使用其中的弱事件模式是来自数据绑定的更新事件的处理。       弱事件模式还可以用于回调事件和常规事件。"
  syntax:
    content: 'public abstract class WeakEventManager : System.Windows.Threading.DispatcherObject'
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  implements: []
  inheritedMembers:
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.WeakEventManager.#ctor
  id: '#ctor'
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化基类值，当派生的类的构造函数通过使用作为初始值设定项。"
  syntax:
    content: protected WeakEventManager ();
    parameters: []
  overload: System.Windows.WeakEventManager.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  id: DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "托管代码流向每个侦听器的事件传送。"
  remarks: "调用中的事件处理程序添加或移除从 DeliverEvent 方法<xref:System.Windows.WeakEventManager.StartListening%2A>和<xref:System.Windows.WeakEventManager.StopListening%2A>子类的实现。</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       如果调用<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>方法在你`AddListener`实现你的类中，侦听器接收事件的列表就会保留在基础集合。</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> (`AddListener`不是类或接口协定的一部分。 `AddListener`是管理器中调用<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>并加弱事件模式侦听器为事件的方法的建议的名称。）      <xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>将侦听器添加到一个列表。</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> </xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 如果您管理器的实现维护多个列表的每个事件侦听器，不要使用 DeliverEvent 或<xref:System.Windows.WeakEventManager.ProtectedAddListener%2A>.</xref:System.Windows.WeakEventManager.ProtectedAddListener%2A> 相反，你实现应创建其自己<xref:System.Windows.WeakEventManager.ListenerList>情况下，`AddListener`应将侦听器添加到相应的列表中，并且事件应通过调用<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>.</xref:System.Windows.WeakEventManager.DeliverEventToList%2A>传递给相应的侦听器列表</xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void DeliverEvent (object sender, EventArgs args);
    parameters:
    - id: sender
      type: System.Object
      description: "在其处理该事件的对象。"
    - id: args
      type: System.EventArgs
      description: "<xref:System.EventArgs>，其中包含要传递的事件的事件数据。</xref:System.EventArgs>"
  overload: System.Windows.WeakEventManager.DeliverEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  id: DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: protected void DeliverEventToList (object sender, EventArgs args, System.Windows.WeakEventManager.ListenerList list);
    parameters:
    - id: sender
      type: System.Object
      description: "要添加。"
    - id: args
      type: System.EventArgs
      description: "要添加。"
    - id: list
      type: System.Windows.WeakEventManager.ListenerList
      description: "要添加。"
  overload: System.Windows.WeakEventManager.DeliverEventToList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  id: GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回<xref href=&quot;System.Windows.WeakEventManager&quot;></xref>适用于所提供的类型的实现。"
  remarks: "<xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A>实现调用此方法使用其传递`managerType`。</xref:System.Windows.IWeakEventListener.ReceiveWeakEvent%2A> 返回<xref:System.Windows.WeakEventManager>然后用作区分符，以确定已收到的事件，以及要调用的私有类处理程序。</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static System.Windows.WeakEventManager GetCurrentManager (Type managerType);
    parameters:
    - id: managerType
      type: System.Type
      description: "要获取的类型<xref href=&quot;System.Windows.WeakEventManager&quot;></xref>有关。"
    return:
      type: System.Windows.WeakEventManager
      description: "匹配<xref href=&quot;System.Windows.WeakEventManager&quot;></xref>实现。"
  overload: System.Windows.WeakEventManager.GetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Item(System.Object)
  id: Item(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取或设置为指定的源存储的数据。"
  remarks: "派生的类可以选择数据和将存储在此索引器的类型。 通常这作为实现<xref:System.Windows.WeakEventManager.ListenerList>，这是一份到侦听器的弱引用。</xref:System.Windows.WeakEventManager.ListenerList> 你只需更改此类型，如果<xref:System.Windows.WeakEventManager.ListenerList>类型不能包含你所需的信息。</xref:System.Windows.WeakEventManager.ListenerList> 如果这样，你将需要重写<xref:System.Windows.WeakEventManager.Purge%2A>方法，以便正确执行的基础类型的所有清理。</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected object this[object source] { get; set; }
    parameters:
    - id: source
      type: System.Object
      description: "请求的源的从零开始的索引。"
    return:
      type: System.Object
      description: "正在存储由此源的管理器的数据。"
  overload: System.Windows.WeakEventManager.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.NewListenerList
  id: NewListenerList
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回要包含的事件侦听器的新对象。"
  syntax:
    content: protected virtual System.Windows.WeakEventManager.ListenerList NewListenerList ();
    parameters: []
    return:
      type: System.Windows.WeakEventManager.ListenerList
      description: "要包含的事件侦听器的新对象。"
  overload: System.Windows.WeakEventManager.NewListenerList*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  id: ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定的委托添加为指定的源的事件处理程序。"
  syntax:
    content: protected void ProtectedAddHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "处理程序委托订阅源对象。"
    - id: handler
      type: System.Delegate
      description: "处理引发的事件的委托`source`。"
  overload: System.Windows.WeakEventManager.ProtectedAddHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将提供的侦听器添加到被管理的事件提供的源。"
  remarks: "调用此方法内管理器类`AddListener`方法<xref:System.Windows.WeakEventManager>实现。</xref:System.Windows.WeakEventManager> `AddListener`是建议的名称的静态方法在上定义的管理器类，允许其他类来添加侦听器为弱事件模式。 `AddListener`应采用两个参数︰`source`附加侦听器，其中和`listener`实例。 为你`AddListener`实现，在当前管理器上调用 ProtectedAddListener 方法并传递的相同的两个参数。       如果侦听器的列表是先前为空，ProtectedAddListener 调用<xref:System.Windows.WeakEventManager.StartListening%2A>方法内部，这将调用您的特定<xref:System.Windows.WeakEventManager.StartListening%2A>多态性通过重写。</xref:System.Windows.WeakEventManager.StartListening%2A> </xref:System.Windows.WeakEventManager.StartListening%2A>       ProtectedAddListener 将侦听器添加到单个内部<xref:System.Windows.WeakEventManager.ListenerList>每`source`。</xref:System.Windows.WeakEventManager.ListenerList> 如果您管理器的实现维护的侦听器的每个事件源组合的多个列表，则不要使用 ProtectedAddListener。 相反，你实现应创建其自己<xref:System.Windows.WeakEventManager.ListenerList>情况下，`AddListener`应将侦听器添加到相应的列表中，并且事件应通过调用传递到相应的侦听器列表<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>事件而不是<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedAddListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "要附加到侦听器的源。"
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "侦听类 (这必须实现<xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)。"
  overload: System.Windows.WeakEventManager.ProtectedAddListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  id: ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "从指定的源中删除以前添加的处理程序。"
  syntax:
    content: protected void ProtectedRemoveHandler (object source, Delegate handler);
    parameters:
    - id: source
      type: System.Object
      description: "要移除处理程序的源。"
    - id: handler
      type: System.Delegate
      description: "要移除的委托`source`。"
  overload: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  id: ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "从提供的源中删除以前添加的侦听器。"
  remarks: "调用此方法内管理器类`RemoveListener`方法<xref:System.Windows.WeakEventManager>实现。</xref:System.Windows.WeakEventManager> `RemoveListener`是建议的名称的静态方法在上定义的管理器类，允许其他类以删除侦听器为弱事件模式。 `RemoveListener`应采用两个参数︰`source`其中删除侦听器，则与`listener`类。 为你`RemoveListener`实现，在当前管理器上调用 ProtectedRemoveListener 方法并传递的相同的两个参数。       如果对 ProtectedRemoveListener 的调用列表中删除最后一个侦听器，ProtectedRemoveListener 调用<xref:System.Windows.WeakEventManager.StopListening%2A>方法内部，这将调用您的特定<xref:System.Windows.WeakEventManager.StopListening%2A>多态性通过重写。</xref:System.Windows.WeakEventManager.StopListening%2A> </xref:System.Windows.WeakEventManager.StopListening%2A>       从单个内部 ProtectedRemoveListener 中删除侦听器<xref:System.Windows.WeakEventManager.ListenerList>每`source`。</xref:System.Windows.WeakEventManager.ListenerList> 如果您管理器的实现维护的侦听器的每个事件源组合的多个列表，则不要使用 ProtectedRemoveListener。 相反，你实现应创建其自己<xref:System.Windows.WeakEventManager.ListenerList>情况下，`RemoveListener`应从相应的列表中删除侦听器和事件应通过调用传递到相应的侦听器列表<xref:System.Windows.WeakEventManager.DeliverEventToList%2A>方法而不是<xref:System.Windows.WeakEventManager.DeliverEvent%2A>方法。</xref:System.Windows.WeakEventManager.DeliverEvent%2A> </xref:System.Windows.WeakEventManager.DeliverEventToList%2A> </xref:System.Windows.WeakEventManager.ListenerList>"
  syntax:
    content: protected void ProtectedRemoveListener (object source, System.Windows.IWeakEventListener listener);
    parameters:
    - id: source
      type: System.Object
      description: "要从中移除侦听器的源。"
    - id: listener
      type: System.Windows.IWeakEventListener
      description: "侦听类 (这必须实现<xref href=&quot;System.Windows.IWeakEventListener&quot;> </xref>)。"
  overload: System.Windows.WeakEventManager.ProtectedRemoveListener*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  id: Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "从提供的源的数据列表中删除不活动的侦听器条目。 返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果某些条目已实际从列表中删除。"
  remarks: "清除方法具有一个默认实现，数据是一种<xref:System.Windows.WeakEventManager.ListenerList>。</xref:System.Windows.WeakEventManager.ListenerList>时，将移除所有项"
  syntax:
    content: protected virtual bool Purge (object source, object data, bool purgeAll);
    parameters:
    - id: source
      type: System.Object
      description: "正在侦听的事件源。"
    - id: data
      type: System.Object
      description: "要检查的数据。 此对象应为<xref:System.Windows.WeakEventManager.ListenerList>实现。</xref:System.Windows.WeakEventManager.ListenerList>"
    - id: purgeAll
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要停止侦听`source`，和完全移除所有项`data`。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果某些条目实际上已经移除;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.WeakEventManager.Purge*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ReadLock
  id: ReadLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "建立与基础数据表上的读取锁，并返回<xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "在派生类中，查询中包含的表<xref:System.Windows.WeakEventManager.Item%2A>应总是出现在`using (ReadLock) { ... }`子句，除非已内的写入锁的查询。</xref:System.Windows.WeakEventManager.Item%2A> 这些查询可能有必要，如果你的类支持更复杂`AddListener`实施，需要更多的数据超出`source`和`listener`，并使用<xref:System.Windows.WeakEventManager.Item%2A>用于存储的额外信息集合。</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable ReadLock { get; }
    return:
      type: System.IDisposable
      description: "用于建立数据表成员上的锁，然后相应地释放与对象<xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;></xref>构造。"
  overload: System.Windows.WeakEventManager.ReadLock*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "移除指定的源的所有侦听器。"
  syntax:
    content: protected void Remove (object source);
    parameters:
    - id: source
      type: System.Object
      description: "要删除侦听器信息的源。"
  overload: System.Windows.WeakEventManager.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  id: ScheduleCleanup
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "未使用的项基础侦听器列表中清除在较低的优先级线程上执行的请求。"
  remarks: "调用 ScheduleCleanup 方法都类似于调用<xref:System.Windows.WeakEventManager.Purge%2A>当前管理器的列表，以较低的线程优先级，方法与`purgeAll`参数设置为`false`。</xref:System.Windows.WeakEventManager.Purge%2A>"
  syntax:
    content: protected void ScheduleCleanup ();
    parameters: []
  overload: System.Windows.WeakEventManager.ScheduleCleanup*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  id: SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "设置指定的管理器类型的当前管理器。"
  remarks: "调用 SetCurrentManager 方法以初始化管理器中，如果所需的调用你`CurrentManager`属性<xref:System.Windows.WeakEventManager>实现。</xref:System.Windows.WeakEventManager>"
  syntax:
    content: protected static void SetCurrentManager (Type managerType, System.Windows.WeakEventManager manager);
    parameters:
    - id: managerType
      type: System.Type
      description: "要设置新的事件管理器的类型。"
    - id: manager
      type: System.Windows.WeakEventManager
      description: "新的事件管理器。"
  overload: System.Windows.WeakEventManager.SetCurrentManager*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  id: StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "当在派生类中重写，开始侦听被托管的事件。 首次调用 StartListening 方法后，管理器应该在调用的状态中<> *1> 或<> *1> 每当处理所提供的源中的相关事件。"
  syntax:
    content: protected abstract void StartListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "要开始侦听的源。"
  overload: System.Windows.WeakEventManager.StartListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  id: StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "当在派生类中重写，停止在所提供的源上侦听被托管的事件。"
  syntax:
    content: protected abstract void StopListening (object source);
    parameters:
    - id: source
      type: System.Object
      description: "要停止侦听的源。"
  overload: System.Windows.WeakEventManager.StopListening*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.WeakEventManager.WriteLock
  id: WriteLock
  parent: System.Windows.WeakEventManager
  langs:
  - csharp
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "建立与基础数据表上的写入锁，并返回<xref:System.IDisposable>.</xref:System.IDisposable>"
  remarks: "在派生类中，对与基础数据表的所有修改应都发生在`using (WriteLock) { ... }`子句。 这些修改可能有必要，如果你的类支持更复杂`AddListener`实施，需要更多的数据超出`source`和`listener`，并使用<xref:System.Windows.WeakEventManager.Item%2A>用于存储的额外信息集合。</xref:System.Windows.WeakEventManager.Item%2A>"
  syntax:
    content: protected IDisposable WriteLock { get; }
    return:
      type: System.IDisposable
      description: "用于建立数据表成员上的锁，然后相应地释放与对象<xref uid=&quot;langword_csharp_using&quot; name=&quot;using&quot; href=&quot;&quot;></xref>构造。"
  overload: System.Windows.WeakEventManager.WriteLock*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Threading.DispatcherObject
  isExternal: false
  name: System.Windows.Threading.DispatcherObject
- uid: System.Windows.WeakEventManager.#ctor
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager()
  nameWithType: WeakEventManager.WeakEventManager()
  fullName: System.Windows.WeakEventManager.WeakEventManager()
- uid: System.Windows.WeakEventManager.DeliverEvent(System.Object,System.EventArgs)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent(Object,EventArgs)
  nameWithType: WeakEventManager.DeliverEvent(Object,EventArgs)
  fullName: System.Windows.WeakEventManager.DeliverEvent(Object,EventArgs)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.EventArgs
  parent: System
  isExternal: true
  name: EventArgs
  nameWithType: EventArgs
  fullName: System.EventArgs
- uid: System.Windows.WeakEventManager.DeliverEventToList(System.Object,System.EventArgs,System.Windows.WeakEventManager.ListenerList)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  nameWithType: WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
  fullName: System.Windows.WeakEventManager.DeliverEventToList(Object,EventArgs,WeakEventManager+ListenerList)
- uid: System.Windows.WeakEventManager.ListenerList
  parent: System.Windows
  isExternal: false
  name: WeakEventManager+ListenerList
  nameWithType: WeakEventManager+ListenerList
  fullName: System.Windows.WeakEventManager+ListenerList
- uid: System.Windows.WeakEventManager.GetCurrentManager(System.Type)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager(Type)
  nameWithType: WeakEventManager.GetCurrentManager(Type)
  fullName: System.Windows.WeakEventManager.GetCurrentManager(Type)
- uid: System.Windows.WeakEventManager
  parent: System.Windows
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager
  fullName: System.Windows.WeakEventManager
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Windows.WeakEventManager.Item(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item(Object)
  nameWithType: WeakEventManager.Item(Object)
  fullName: System.Windows.WeakEventManager.Item(Object)
- uid: System.Windows.WeakEventManager.NewListenerList
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList()
  nameWithType: WeakEventManager.NewListenerList()
  fullName: System.Windows.WeakEventManager.NewListenerList()
- uid: System.Windows.WeakEventManager.ProtectedAddHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedAddHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedAddHandler(Object,Delegate)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Windows.WeakEventManager.ProtectedAddListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedAddListener(Object,IWeakEventListener)
- uid: System.Windows.IWeakEventListener
  parent: System.Windows
  isExternal: false
  name: IWeakEventListener
  nameWithType: IWeakEventListener
  fullName: System.Windows.IWeakEventListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler(System.Object,System.Delegate)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler(Object,Delegate)
  nameWithType: WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveHandler(Object,Delegate)
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener(System.Object,System.Windows.IWeakEventListener)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener(Object,IWeakEventListener)
  nameWithType: WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
  fullName: System.Windows.WeakEventManager.ProtectedRemoveListener(Object,IWeakEventListener)
- uid: System.Windows.WeakEventManager.Purge(System.Object,System.Object,System.Boolean)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge(Object,Object,Boolean)
  nameWithType: WeakEventManager.Purge(Object,Object,Boolean)
  fullName: System.Windows.WeakEventManager.Purge(Object,Object,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.WeakEventManager.ReadLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
  fullName: System.Windows.WeakEventManager.ReadLock
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Windows.WeakEventManager.Remove(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove(Object)
  nameWithType: WeakEventManager.Remove(Object)
  fullName: System.Windows.WeakEventManager.Remove(Object)
- uid: System.Windows.WeakEventManager.ScheduleCleanup
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup()
  nameWithType: WeakEventManager.ScheduleCleanup()
  fullName: System.Windows.WeakEventManager.ScheduleCleanup()
- uid: System.Windows.WeakEventManager.SetCurrentManager(System.Type,System.Windows.WeakEventManager)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager(Type,WeakEventManager)
  nameWithType: WeakEventManager.SetCurrentManager(Type,WeakEventManager)
  fullName: System.Windows.WeakEventManager.SetCurrentManager(Type,WeakEventManager)
- uid: System.Windows.WeakEventManager.StartListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening(Object)
  nameWithType: WeakEventManager.StartListening(Object)
  fullName: System.Windows.WeakEventManager.StartListening(Object)
- uid: System.Windows.WeakEventManager.StopListening(System.Object)
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening(Object)
  nameWithType: WeakEventManager.StopListening(Object)
  fullName: System.Windows.WeakEventManager.StopListening(Object)
- uid: System.Windows.WeakEventManager.WriteLock
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
  fullName: System.Windows.WeakEventManager.WriteLock
- uid: System.Windows.WeakEventManager.#ctor*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WeakEventManager
  nameWithType: WeakEventManager.WeakEventManager
- uid: System.Windows.WeakEventManager.DeliverEvent*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEvent
  nameWithType: WeakEventManager.DeliverEvent
- uid: System.Windows.WeakEventManager.DeliverEventToList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: DeliverEventToList
  nameWithType: WeakEventManager.DeliverEventToList
- uid: System.Windows.WeakEventManager.GetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: GetCurrentManager
  nameWithType: WeakEventManager.GetCurrentManager
- uid: System.Windows.WeakEventManager.Item*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Item
  nameWithType: WeakEventManager.Item
- uid: System.Windows.WeakEventManager.NewListenerList*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: NewListenerList
  nameWithType: WeakEventManager.NewListenerList
- uid: System.Windows.WeakEventManager.ProtectedAddHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddHandler
  nameWithType: WeakEventManager.ProtectedAddHandler
- uid: System.Windows.WeakEventManager.ProtectedAddListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedAddListener
  nameWithType: WeakEventManager.ProtectedAddListener
- uid: System.Windows.WeakEventManager.ProtectedRemoveHandler*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveHandler
  nameWithType: WeakEventManager.ProtectedRemoveHandler
- uid: System.Windows.WeakEventManager.ProtectedRemoveListener*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ProtectedRemoveListener
  nameWithType: WeakEventManager.ProtectedRemoveListener
- uid: System.Windows.WeakEventManager.Purge*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Purge
  nameWithType: WeakEventManager.Purge
- uid: System.Windows.WeakEventManager.ReadLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ReadLock
  nameWithType: WeakEventManager.ReadLock
- uid: System.Windows.WeakEventManager.Remove*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: Remove
  nameWithType: WeakEventManager.Remove
- uid: System.Windows.WeakEventManager.ScheduleCleanup*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: ScheduleCleanup
  nameWithType: WeakEventManager.ScheduleCleanup
- uid: System.Windows.WeakEventManager.SetCurrentManager*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: SetCurrentManager
  nameWithType: WeakEventManager.SetCurrentManager
- uid: System.Windows.WeakEventManager.StartListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StartListening
  nameWithType: WeakEventManager.StartListening
- uid: System.Windows.WeakEventManager.StopListening*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: StopListening
  nameWithType: WeakEventManager.StopListening
- uid: System.Windows.WeakEventManager.WriteLock*
  parent: System.Windows.WeakEventManager
  isExternal: false
  name: WriteLock
  nameWithType: WeakEventManager.WriteLock
