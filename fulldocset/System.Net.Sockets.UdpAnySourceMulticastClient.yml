### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpAnySourceMulticastClient
  id: UdpAnySourceMulticastClient
  children:
  - System.Net.Sockets.UdpAnySourceMulticastClient.#ctor(System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)
  - System.Net.Sockets.UdpAnySourceMulticastClient.Dispose
  - System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(System.IAsyncResult)
  - System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(System.IAsyncResult,System.Net.IPEndPoint@)
  - System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(System.IAsyncResult)
  - System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(System.IAsyncResult)
  - System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback
  - System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize
  - System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize
  - System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(System.Net.IPAddress)
  langs:
  - csharp
  name: UdpAnySourceMulticastClient
  nameWithType: UdpAnySourceMulticastClient
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient
  type: Class
  summary: "客户端接收的来自任何源，也称为 Any 源多播 (ASM) 或 Internet 标准多播 (ISM) 的多播流量。"
  syntax:
    content: >-
      [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]

      [System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]

      public class UdpAnySourceMulticastClient : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.#ctor(System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Int32)'
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: UdpAnySourceMulticastClient(IPAddress,Int32)
  nameWithType: UdpAnySourceMulticastClient.UdpAnySourceMulticastClient(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.UdpAnySourceMulticastClient(IPAddress,Int32)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "创建一个新<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;></xref>可以订阅组地址并从任何源接收数据报的 UDP 客户端。"
  remarks: "UdpAnySourceMulticastClient 构造函数将 UDP 多播套接字的组地址和端口，与相关联，但不将绑定或以其他方式使用套接字。       `groupAddress`参数可能是 IPv6 或 IPv4 多播地址。       `localPort`参数必须指定一个端口小于 1024。"
  syntax:
    content: public UdpAnySourceMulticastClient (System.Net.IPAddress groupAddress, int localPort);
    parameters:
    - id: groupAddress
      type: System.Net.IPAddress
      description: "此接收器要订阅的多播的组地址。"
    - id: localPort
      type: System.Int32
      description: "此接收器要绑定到本地端口。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>groupAddress</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>. 引用"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>localPort</code>小于 0-或-<code>localPort</code>大于 65,535。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)
  id: BeginJoinGroup(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: BeginJoinGroup(AsyncCallback,Object)
  nameWithType: UdpAnySourceMulticastClient.BeginJoinGroup(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "绑定套接字并开始多播组以允许从任何组参与者收到的数据报的联接操作。"
  remarks: "BeginJoinGroup 方法将 UDP 多播套接字绑定到的本地端口和联接多播的组以允许从任何多播的组参与者收到的数据报。 中指定的本地端口和多播的组地址<xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A>构造函数。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A>       中指定的方法`callback`要加入多播的组的操作已完成时调用参数。       如果需要由运行时，BeginJoinGroup 方法还会执行策略检查以验证客户端允许访问多播的组。 如果客户端不允许访问，<xref:System.Net.Sockets.SocketException>则会引发<xref:System.Net.Sockets.SocketError>。</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketException>"
  syntax:
    content: public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "要在操作完成时调用回调方法。"
    - id: state
      type: System.Object
      description: "可选状态信息要传递给`callback`对于此操作的方法。"
    return:
      type: System.IAsyncResult
      description: "返回<xref:System.IAsyncResult>.</xref:System.IAsyncResult>       <xref:System.IAsyncResult>引用此操作。</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组，或联接操作当前正在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: BeginReceiveFromGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: UdpAnySourceMulticastClient.BeginReceiveFromGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "开始从已联接的多播组接收数据包的操作，并从任何发件人的数据包到达组时调用指定的回调。"
  remarks: "BeginReceiveFromGroup 方法开始从来自任何发件人已联接的多播组接收 UDP 数据包的操作。 中指定的本地端口和多播的组地址<xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A>构造函数。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.%23ctor%2A> 多播客户端必须具有已完成加入多播组。       中指定的方法`callback`收到数据包时，将调用参数。       它可具有套接字失败，如果接收操作失败同步，虽然这是使用 UDP 不常见。 如果发生套接字失败，<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public IAsyncResult BeginReceiveFromGroup (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "用于存储已接收的数据的缓冲区。"
    - id: offset
      type: System.Int32
      description: "偏移量，以字节为单位，从开始处`buffer`应在其中存储数据。"
    - id: count
      type: System.Int32
      description: "要接收并存储在字节的最大数`buffer`。"
    - id: callback
      type: System.AsyncCallback
      description: "要在操作完成时调用的回调方法。"
    - id: state
      type: System.Object
      description: "可选状态信息要传递给`callback`对于此操作的方法。"
    return:
      type: System.IAsyncResult
      description: "返回<xref:System.IAsyncResult>.</xref:System.IAsyncResult>       <xref:System.IAsyncResult>引用此操作。</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>小于 0-<code>offset</code>大于的长度<code>buffer</code>。       -<code>count</code>小于 0-<code>offset</code>加上计数大于的长度<code>buffer</code>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  id: BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: BeginSendTo(Byte[],Int32,Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpAnySourceMulticastClient.BeginSendTo(Byte[],Int32,Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(Byte[],Int32,Int32,IPEndPoint,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "开始到指定目标发送单播数据包的操作。"
  remarks: "BeginSendTo 方法开始将 UDP 数据包发送到已联接的多播组的操作。       客户端必须已完成加入多播组。 中指定的目标地址`remoteEndPoint`参数必须具有已发送多播的数据包给此接收器。 某些协议使用此信息来传递流控制，质量的服务统计信息或恢复消息。       中指定的方法`callback`收到数据包时，将调用参数。       如果在指定的地址仅允许传输`remoteEndPoint`参数已具有多路广播的数据包发送到此接收方。 如果客户端不允许访问，<xref:System.Net.Sockets.SocketException>则会引发<xref:System.Net.Sockets.SocketError>。</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketException>       如果在指定目标端口`remoteEndPoint`参数为小于 1024，<xref:System.Net.Sockets.SocketException>则会引发<xref:System.Net.Sockets.SocketError>。</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketException>       它可具有套接字失败，如果接收操作失败同步，虽然这是使用 UDP 不常见。 如果发生套接字失败，<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public IAsyncResult BeginSendTo (byte[] buffer, int offset, int count, System.Net.IPEndPoint remoteEndPoint, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "包含要发送的数据的缓冲区。"
    - id: offset
      type: System.Int32
      description: "偏移量，以字节为单位，从开始处`buffer`读取要发送的数据。"
    - id: count
      type: System.Int32
      description: "要从发送的字节数`buffer`。"
    - id: remoteEndPoint
      type: System.Net.IPEndPoint
      description: "远程终结点的数据包已发送。"
    - id: callback
      type: System.AsyncCallback
      description: "要在操作完成时调用的回调方法。"
    - id: state
      type: System.Object
      description: "可选状态信息要传递给`callback`对于此操作的方法。"
    return:
      type: System.IAsyncResult
      description: "返回<xref:System.IAsyncResult>.</xref:System.IAsyncResult>       <xref:System.IAsyncResult>引用此操作。</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>小于 0-<code>offset</code>大于的长度<code>buffer</code>。       -<code>count</code>小于 0-<code>offset</code>加上计数大于的长度<code>buffer</code>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSendToGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: BeginSendToGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: UdpAnySourceMulticastClient.BeginSendToGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "开始操作，将数据包发送到已联接的多播组并在数据包已发送到组时调用指定的回调。"
  remarks: "BeginSendToGroup 方法开始将 UDP 数据包发送到已联接的多播组的操作。       客户端必须已完成加入多播组。       中指定的方法`callback`收到数据包时，将调用参数。       它可具有套接字失败，如果接收操作失败同步，虽然这是使用 UDP 不常见。 如果发生套接字失败，<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public IAsyncResult BeginSendToGroup (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "包含要发送的数据的缓冲区。"
    - id: offset
      type: System.Int32
      description: "偏移量，以字节为单位，从开始处`buffer`读取要发送的数据。"
    - id: count
      type: System.Int32
      description: "要从发送的字节数`buffer`。"
    - id: callback
      type: System.AsyncCallback
      description: "要在操作完成时调用的回调方法。"
    - id: state
      type: System.Object
      description: "可选状态信息要传递给`callback`对于此操作的方法。"
    return:
      type: System.IAsyncResult
      description: "返回<xref:System.IAsyncResult>.</xref:System.IAsyncResult>       <xref:System.IAsyncResult>引用此操作。</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>小于 0-<code>offset</code>大于的长度<code>buffer</code>。       -<code>count</code>小于 0-<code>offset</code>加上计数大于的长度<code>buffer</code>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)
  id: BlockSource(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: BlockSource(IPAddress)
  nameWithType: UdpAnySourceMulticastClient.BlockSource(IPAddress)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(IPAddress)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "阻止源，以便将不再接收源自它的多播的数据包。"
  remarks: "BlockSource 方法将一直阻塞源自接收指定的源地址的多路广播的数据包。 客户端必须已完成加入多播组。       `sourceAddress`参数可能是 IPv6 或 IPv4 地址，但`sourceAddress`参数必须与匹配的客户端加入多播组地址族。       中指定的方法`callback`收到数据包时，将调用参数。       如果在执行块源操作时出现套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void BlockSource (System.Net.IPAddress sourceAddress);
    parameters:
    - id: sourceAddress
      type: System.Net.IPAddress
      description: "要阻止的源地址。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpAnySourceMulticastClient.Dispose()
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.Dispose()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "离开多播的组并释放使用的当前实例的所有资源<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;></xref>类和基础<xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "在完成使用<xref:System.Net.Sockets.UdpAnySourceMulticastClient>.</xref:System.Net.Sockets.UdpAnySourceMulticastClient>时调用的 Dispose Dispose 方法离开<xref:System.Net.Sockets.UdpAnySourceMulticastClient>中不可用状态。</xref:System.Net.Sockets.UdpAnySourceMulticastClient> 调用 Dispose 后，必须释放对所有引用<xref:System.Net.Sockets.UdpAnySourceMulticastClient>以便垃圾回收器才能回收的内存，<xref:System.Net.Sockets.UdpAnySourceMulticastClient>占用。</xref:System.Net.Sockets.UdpAnySourceMulticastClient> </xref:System.Net.Sockets.UdpAnySourceMulticastClient>       始终调用 Disposebefore 释放到<xref:System.Net.Sockets.UdpAnySourceMulticastClient>。</xref:System.Net.Sockets.UdpAnySourceMulticastClient>最后一个引用 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Net.Sockets.UdpAnySourceMulticastClient>对象的<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.Net.Sockets.UdpAnySourceMulticastClient>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(System.IAsyncResult)
  id: EndJoinGroup(System.IAsyncResult)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: EndJoinGroup(IAsyncResult)
  nameWithType: UdpAnySourceMulticastClient.EndJoinGroup(IAsyncResult)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(IAsyncResult)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "完成异步联接组操作到多播组。"
  remarks: "EndJoinGroup 方法完成异步绑定到套接字和联接的多播组的操作。       如果需要由运行时，EndJoinGroup 方法还会执行策略检查以验证客户端允许访问多播的组。 如果客户端不允许访问，<xref:System.Net.Sockets.SocketException>则会引发<xref:System.Net.Sockets.SocketError>。</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketException>       如果执行联接组操作，时套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void EndJoinGroup (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "异步联接操作的结果。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>result</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(System.IAsyncResult,System.Net.IPEndPoint@)
  id: EndReceiveFromGroup(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: EndReceiveFromGroup(IAsyncResult,IPEndPoint)
  nameWithType: UdpAnySourceMulticastClient.EndReceiveFromGroup(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(IAsyncResult,IPEndPoint)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "完成从已联接的多播组接收数据包的异步操作，并提供接收到的信息。"
  remarks: "EndReceiveFromGroup 方法完成一个异步操作以从多播组接收数据包。       如果在执行接收操作时出现套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public int EndReceiveFromGroup (IAsyncResult result, out System.Net.IPEndPoint source);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "结果的异步接收操作。"
    - id: source
      type: System.Net.IPEndPoint
      description: "从中接收数据包时源终结点。"
    return:
      type: System.Int32
      description: "存储在缓冲区参数传递给消息的长度，以字节为单位，<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup*>方法。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup*>"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>result</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(System.IAsyncResult)
  id: EndSendTo(System.IAsyncResult)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: EndSendTo(IAsyncResult)
  nameWithType: UdpAnySourceMulticastClient.EndSendTo(IAsyncResult)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(IAsyncResult)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "完成到指定目标发送单播数据包的操作。"
  remarks: "EndSendTo 方法完成一个异步操作以将数据包发送到指定的目标地址。       如果在执行接收操作时出现套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void EndSendTo (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "异步发送操作的结果。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>result</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(System.IAsyncResult)
  id: EndSendToGroup(System.IAsyncResult)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: EndSendToGroup(IAsyncResult)
  nameWithType: UdpAnySourceMulticastClient.EndSendToGroup(IAsyncResult)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(IAsyncResult)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "完成将数据包发送到多播组的操作。"
  remarks: "EndSendToGroup 方法完成一个异步操作以将数据包发送到多播组。       如果在执行接收操作时出现套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void EndSendToGroup (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "异步发送操作的结果。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>result</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback
  id: MulticastLoopback
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: MulticastLoopback
  nameWithType: UdpAnySourceMulticastClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "获取或设置一个值，指定是否传出多播的数据包发送到发送应用程序。"
  remarks: "多播的流量是在 Internet 上的多对多通信的可扩展方法。 进程订阅的多播的组地址。 然后，任何数据包订阅进程发送到多播组接收订阅的多播地址的每个其他进程。 MulticastLoopback 属性控制是否在本地计算机上的任何进程接收通过此客户端发送到多播组的多路广播的数据包。"
  syntax:
    content: public bool MulticastLoopback { get; set; }
    return:
      type: System.Boolean
      description: "返回<xref:System.Boolean>.</xref:System.Boolean>       一个值，该值指示是否到多播组的传出数据包发送到发送应用程序。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: ReceiveBufferSize
  nameWithType: UdpAnySourceMulticastClient.ReceiveBufferSize
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "获取或设置大小，以字节为单位的接收缓冲区的<xref:System.Net.Sockets.Socket>用于对此的多播的接收操作<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;></xref>实例。</xref:System.Net.Sockets.Socket>"
  remarks: "ReceiveBufferSize 属性获取或设置大小，以字节为单位的接收缓冲区的基础<xref:System.Net.Sockets.Socket>用于对此的多播的接收操作<xref:System.Net.Sockets.UdpAnySourceMulticastClient>实例。</xref:System.Net.Sockets.UdpAnySourceMulticastClient> </xref:System.Net.Sockets.Socket> 具体而言，ReceiveBufferSize 属性控制的数据包到达，但尚未调用应用程序时，堆栈所使用的缓冲区大小<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A>方法。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> 如果此缓冲区被填满和应用程序调用之前不断涌现数据包<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A>和<xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup%2A>方法，旧的数据包将被丢弃。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup%2A> </xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A> 应用程序永远无法接收旧的数据包，并在它调用时将收到较新的数据包<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A>方法。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup%2A>       在 Windows 上的接收缓冲区的默认大小为 8192 字节。"
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    return:
      type: System.Int32
      description: "返回<xref:System.Int32>.</xref:System.Int32>       以字节为单位的接收缓冲区的大小。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的缓冲区大小小于 0。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize
  id: SendBufferSize
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: SendBufferSize
  nameWithType: UdpAnySourceMulticastClient.SendBufferSize
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "获取或设置大小，以字节为单位的发送缓冲区的<xref:System.Net.Sockets.Socket>用于对此的多播的发送操作<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;></xref>实例。</xref:System.Net.Sockets.Socket>"
  remarks: "SendBufferSize 属性获取或设置大小，以字节为单位，用于对此的多播的发送操作的基础套接字的发送缓冲区<xref:System.Net.Sockets.UdpAnySourceMulticastClient>实例。</xref:System.Net.Sockets.UdpAnySourceMulticastClient>       调用<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup%2A>或<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo%2A>方法需要较长时间调用的回调根据 SendBufferSize 属性的值，如果发送缓冲区已满。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo%2A> </xref:System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup%2A> SendBufferSize 属性仅控制是否在物理内存中锁定用户的缓冲区保持直至发送完成。       在 Windows 上的发送缓冲区的默认大小为 8192 字节。"
  syntax:
    content: public int SendBufferSize { get; set; }
    return:
      type: System.Int32
      description: "返回<xref:System.Int32>.</xref:System.Int32>       以字节为单位的发送缓冲区的大小。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的缓冲区大小小于 0。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(System.Net.IPAddress)
  id: UnblockSource(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  langs:
  - csharp
  name: UnblockSource(IPAddress)
  nameWithType: UdpAnySourceMulticastClient.UnblockSource(IPAddress)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(IPAddress)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "取消阻止以前通过调用的源<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource*>方法，以便可接收源自它的多播的数据包。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource*>"
  remarks: "UnblockSource 方法将取消阻止多路广播的数据包，以便它们都可以接收来自指定的源地址。 指定的源地址必须具有已阻止以前通过调用<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A>方法。</xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A>       客户端必须已完成加入多播组。       `sourceAddress`参数可能是 IPv6 或 IPv4 多播地址。       如果中指定的源地址`sourceAddress`参数不阻止以前通过调用<xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A>方法时，<xref:System.Net.Sockets.SocketException>引发与<xref:System.Net.Sockets.SocketError>.</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketException> </xref:System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource%2A>       如果解除阻止源操作，在执行时出现套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void UnblockSource (System.Net.IPAddress sourceAddress);
    parameters:
    - id: sourceAddress
      type: System.Net.IPAddress
      description: "要取消阻止的源地址。"
  overload: System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpAnySourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.#ctor(System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: UdpAnySourceMulticastClient(IPAddress,Int32)
  nameWithType: UdpAnySourceMulticastClient.UdpAnySourceMulticastClient(IPAddress,Int32)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.UdpAnySourceMulticastClient(IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BeginJoinGroup(AsyncCallback,Object)
  nameWithType: UdpAnySourceMulticastClient.BeginJoinGroup(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BeginReceiveFromGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: UdpAnySourceMulticastClient.BeginReceiveFromGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(System.Byte[],System.Int32,System.Int32,System.Net.IPEndPoint,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BeginSendTo(Byte[],Int32,Int32,IPEndPoint,AsyncCallback,Object)
  nameWithType: UdpAnySourceMulticastClient.BeginSendTo(Byte[],Int32,Int32,IPEndPoint,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo(Byte[],Int32,Int32,IPEndPoint,AsyncCallback,Object)
- uid: System.Net.IPEndPoint
  parent: System.Net
  isExternal: true
  name: IPEndPoint
  nameWithType: IPEndPoint
  fullName: System.Net.IPEndPoint
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BeginSendToGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: UdpAnySourceMulticastClient.BeginSendToGroup(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BlockSource(IPAddress)
  nameWithType: UdpAnySourceMulticastClient.BlockSource(IPAddress)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource(IPAddress)
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.Dispose
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpAnySourceMulticastClient.Dispose()
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.Dispose()
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(System.IAsyncResult)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: EndJoinGroup(IAsyncResult)
  nameWithType: UdpAnySourceMulticastClient.EndJoinGroup(IAsyncResult)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup(IAsyncResult)
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(System.IAsyncResult,System.Net.IPEndPoint@)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: EndReceiveFromGroup(IAsyncResult,IPEndPoint)
  nameWithType: UdpAnySourceMulticastClient.EndReceiveFromGroup(IAsyncResult,IPEndPoint)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup(IAsyncResult,IPEndPoint)
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(System.IAsyncResult)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: EndSendTo(IAsyncResult)
  nameWithType: UdpAnySourceMulticastClient.EndSendTo(IAsyncResult)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo(IAsyncResult)
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(System.IAsyncResult)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: EndSendToGroup(IAsyncResult)
  nameWithType: UdpAnySourceMulticastClient.EndSendToGroup(IAsyncResult)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup(IAsyncResult)
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpAnySourceMulticastClient.MulticastLoopback
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: UdpAnySourceMulticastClient.ReceiveBufferSize
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: SendBufferSize
  nameWithType: UdpAnySourceMulticastClient.SendBufferSize
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(System.Net.IPAddress)
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: UnblockSource(IPAddress)
  nameWithType: UdpAnySourceMulticastClient.UnblockSource(IPAddress)
  fullName: System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource(IPAddress)
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.#ctor*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: UdpAnySourceMulticastClient
  nameWithType: UdpAnySourceMulticastClient.UdpAnySourceMulticastClient
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginJoinGroup*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BeginJoinGroup
  nameWithType: UdpAnySourceMulticastClient.BeginJoinGroup
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginReceiveFromGroup*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BeginReceiveFromGroup
  nameWithType: UdpAnySourceMulticastClient.BeginReceiveFromGroup
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendTo*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BeginSendTo
  nameWithType: UdpAnySourceMulticastClient.BeginSendTo
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BeginSendToGroup*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BeginSendToGroup
  nameWithType: UdpAnySourceMulticastClient.BeginSendToGroup
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.BlockSource*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: BlockSource
  nameWithType: UdpAnySourceMulticastClient.BlockSource
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.Dispose*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: Dispose
  nameWithType: UdpAnySourceMulticastClient.Dispose
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndJoinGroup*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: EndJoinGroup
  nameWithType: UdpAnySourceMulticastClient.EndJoinGroup
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndReceiveFromGroup*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: EndReceiveFromGroup
  nameWithType: UdpAnySourceMulticastClient.EndReceiveFromGroup
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendTo*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: EndSendTo
  nameWithType: UdpAnySourceMulticastClient.EndSendTo
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.EndSendToGroup*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: EndSendToGroup
  nameWithType: UdpAnySourceMulticastClient.EndSendToGroup
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.MulticastLoopback*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: MulticastLoopback
  nameWithType: UdpAnySourceMulticastClient.MulticastLoopback
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.ReceiveBufferSize*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: UdpAnySourceMulticastClient.ReceiveBufferSize
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.SendBufferSize*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: SendBufferSize
  nameWithType: UdpAnySourceMulticastClient.SendBufferSize
- uid: System.Net.Sockets.UdpAnySourceMulticastClient.UnblockSource*
  parent: System.Net.Sockets.UdpAnySourceMulticastClient
  isExternal: false
  name: UnblockSource
  nameWithType: UdpAnySourceMulticastClient.UnblockSource
