### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.RegistryPermission
  id: RegistryPermission
  children:
  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)
  - System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  - System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)
  - System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  - System.Security.Permissions.RegistryPermission.Copy
  - System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)
  - System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.RegistryPermission.IsUnrestricted
  - System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)
  - System.Security.Permissions.RegistryPermission.ToXml
  - System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)
  langs:
  - csharp
  name: RegistryPermission
  nameWithType: RegistryPermission
  fullName: System.Security.Permissions.RegistryPermission
  type: Class
  summary: "控制访问注册表变量的能力。 此类不能被继承。"
  remarks: "RegistryPermission 描述注册表变量上的受保护的操作。 注册表变量应不会存储在内存位置 RegistryPermission 没有代码可以访问它们。 如果注册表对象传递给不受信任的调用方可能会被误用。       允许的注册表访问类型由<xref:System.Security.Permissions.RegistryPermissionAccess>.</xref:System.Security.Permissions.RegistryPermissionAccess>定义 如果需要多个类型的访问，则它们可以组合使用按位或运算，如以下代码示例中所示。       根据规范的绝对路径; 定义注册表权限始终应该使用规范路径名进行检查。 密钥的访问权限意味着可以对它包含的所有值和其下的所有变量的访问。      1> [!NOTE]&1;> 之前的.NET Framework 的版本中[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，你可以使用<xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName>方法，以防止对系统资源的受信任的代码的意外访问。</xref:System.Security.CodeAccessPermission.Deny%2A?displayProperty=fullName> <xref:System.Security.CodeAccessPermission.Deny%2A>现已过时，并对资源的访问现在只能由程序集的授予权限来决定。</xref:System.Security.CodeAccessPermission.Deny%2A> 若要限制对文件的访问，必须在沙盒中运行部分受信任的代码，并将其分配仅对允许代码访问的资源的权限。 有关在沙盒中运行应用程序的信息，请参阅[如何︰ 运行部分受信任的代码在沙盒中](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class RegistryPermission : System.Security.CodeAccessPermission, System.Security.Permissions.IUnrestrictedPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements:
  - System.Security.Permissions.IUnrestrictedPermission
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: RegistryPermission(PermissionState)
  nameWithType: RegistryPermission.RegistryPermission(PermissionState)
  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新实例<xref href=&quot;System.Security.Permissions.RegistryPermission&quot;></xref>用指定的完全受限制或不受限制的权限的类。"
  remarks: "创建完全受限制 (`None`) 或`Unrestricted`对注册表变量的访问。"
  example:
  - "The following code example shows the use of the RegistryPermission constructor.  \n  \n [!code-vb[System.Security.Permissions.RegistryPermission#7](~/add/codesnippet/visualbasic/85dea953-f2a8-49bc-b863-_1.vb)]\n [!code-cs[System.Security.Permissions.RegistryPermission#7](~/add/codesnippet/csharp/85dea953-f2a8-49bc-b863-_1.cs)]"
  syntax:
    content: public RegistryPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "之一<xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>值。"
  overload: System.Security.Permissions.RegistryPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code>参数不是有效的值的<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)
  id: '#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)'
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: RegistryPermission(RegistryPermissionAccess,String)
  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)
  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新实例<xref href=&quot;System.Security.Permissions.RegistryPermission&quot;></xref>对指定的注册表变量的指定访问权限的类。"
  remarks: "此构造函数只允许一个的<xref:System.Security.Permissions.RegistryPermissionAccess>值指定。</xref:System.Security.Permissions.RegistryPermissionAccess> 此访问权限适用于所有列出的注册表变量。 使用<xref:System.Security.Permissions.RegistryPermission.AddPathList%2A>定义更复杂的权限。</xref:System.Security.Permissions.RegistryPermission.AddPathList%2A>"
  example:
  - "The following code example shows the use of the RegistryPermission constructor.  \n  \n [!code-vb[System.Security.Permissions.RegistryPermission#10](~/add/codesnippet/visualbasic/a1e0cfb2-93bc-4e55-9235-_1.vb)]\n [!code-cs[System.Security.Permissions.RegistryPermission#10](~/add/codesnippet/csharp/a1e0cfb2-93bc-4e55-9235-_1.cs)]"
  syntax:
    content: public RegistryPermission (System.Security.Permissions.RegistryPermissionAccess access, string pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.RegistryPermissionAccess
      description: "之一<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;></xref>值。"
    - id: pathList
      type: System.String
      description: "向其授予访问权限 （以分号分隔） 的注册表变量的列表。"
  overload: System.Security.Permissions.RegistryPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>参数不是有效的值的<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>。       -或- <code> pathList </code>参数不是有效的字符串。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  id: '#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)'
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)
  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新实例<xref href=&quot;System.Security.Permissions.RegistryPermission&quot;></xref>使用对指定的注册表变量的指定访问权限和对注册表控制信息的指定的访问权限的类。"
  remarks: "此构造函数只允许一个的<xref:System.Security.Permissions.RegistryPermissionAccess>值指定。</xref:System.Security.Permissions.RegistryPermissionAccess> 此访问权限适用于所有列出的注册表变量。 使用<xref:System.Security.Permissions.RegistryPermission.AddPathList%2A>定义更复杂的权限。</xref:System.Security.Permissions.RegistryPermission.AddPathList%2A>       `control`参数指定的访问控制列表 (ACL) 为指定的注册表项是否`pathList`可以更改、 查看或无法访问。      1> [!IMPORTANT]&1;> 个人或组，或没有执行对指定的注册表项的特定操作的权限的人员，介绍了访问控制列表 (ACL)。  能够更改或查看 ACL 是重要的权限，并应多加小心授予。"
  syntax:
    content: public RegistryPermission (System.Security.Permissions.RegistryPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.RegistryPermissionAccess
      description: "之一<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;></xref>值。"
    - id: control
      type: System.Security.AccessControl.AccessControlActions
      description: "按位组合<xref href=&quot;System.Security.AccessControl.AccessControlActions&quot;></xref>值。"
    - id: pathList
      type: System.String
      description: "向其授予访问权限 （以分号分隔） 的注册表变量的列表。"
  overload: System.Security.Permissions.RegistryPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>参数不是有效的值的<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>。       -或- <code> pathList </code>参数不是有效的字符串。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)
  id: AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: AddPathList(RegistryPermissionAccess,String)
  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,String)
  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "将指定的注册表变量的访问权限添加到现有的权限状态。"
  remarks: "使用此方法以将添加到当前权限对象的状态来修改对注册表变量的访问。"
  example:
  - "The following code example shows the use of the AddPathList method.  \n  \n [!code-vb[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/visualbasic/4576855b-6757-4ec9-971b-_1.vb)]\n [!code-cs[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/csharp/4576855b-6757-4ec9-971b-_1.cs)]"
  syntax:
    content: public void AddPathList (System.Security.Permissions.RegistryPermissionAccess access, string pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.RegistryPermissionAccess
      description: "之一<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;></xref>值。"
    - id: pathList
      type: System.String
      description: "（以分号分隔） 的注册表变量的列表。"
  overload: System.Security.Permissions.RegistryPermission.AddPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>参数不是有效的值的<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>。       -或- <code> pathList </code>参数不是有效的字符串。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  id: AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: AddPathList(RegistryPermissionAccess,AccessControlActions,String)
  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "将指定的注册表变量的访问权限添加到现有的权限，指定注册表权限访问和访问控制操作状态。"
  remarks: "使用此方法以将其路径集的添加到当前权限对象的状态来修改对注册表变量的访问。 此重载，可指定访问控制操作，如将作为注册表权限访问。       `control`参数指定的访问控制列表 (ACL) 为指定的注册表项是否`pathList`可以更改、 查看或无法访问。      1> [!IMPORTANT]&1;> 个人或组，或没有执行对指定的注册表项的特定操作的权限的人员，介绍了访问控制列表 (ACL)。  能够更改或查看 ACL 是重要的权限，并应多加小心授予。"
  syntax:
    content: public void AddPathList (System.Security.Permissions.RegistryPermissionAccess access, System.Security.AccessControl.AccessControlActions control, string pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.RegistryPermissionAccess
      description: "之一<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;></xref>值。"
    - id: control
      type: System.Security.AccessControl.AccessControlActions
      description: "之一<xref href=&quot;System.Security.AccessControl.AccessControlActions&quot;></xref>值。"
    - id: pathList
      type: System.String
      description: "（用分号分隔） 的注册表变量的列表。"
  overload: System.Security.Permissions.RegistryPermission.AddPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>参数不是有效的值的<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>。       -或- <code> pathList </code>参数不是有效的字符串。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.Copy
  id: Copy
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: RegistryPermission.Copy()
  fullName: System.Security.Permissions.RegistryPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建并返回当前权限的相同副本。"
  remarks: "与原始权限情况下，一份权限表示对资源的相同的访问权限。"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "当前权限的副本。"
  overload: System.Security.Permissions.RegistryPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: RegistryPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.RegistryPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "重新构造具有指定状态的 XML 编码的权限。"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement esd);
    parameters:
    - id: esd
      type: System.Security.SecurityElement
      description: "编码用于重新构造权限的 XML。"
  overload: System.Security.Permissions.RegistryPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>esd</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> esd </code>参数不是有效的权限元素。       -或- <code> esd </code>参数的版本号无效。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)
  id: GetPathList(System.Security.Permissions.RegistryPermissionAccess)
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: GetPathList(RegistryPermissionAccess)
  nameWithType: RegistryPermission.GetPathList(RegistryPermissionAccess)
  fullName: System.Security.Permissions.RegistryPermission.GetPathList(RegistryPermissionAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取与指定的所有注册表变量的路径<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>。"
  remarks: "使用此方法以获取当前权限的状态。 每种类型的访问，你必须单独调用此方法。      1> [!NOTE]&1;>`access`参数最多的值为<xref:System.Security.Permissions.RegistryPermissionAccess>，分别表示注册表变量访问的一种类型。</xref:System.Security.Permissions.RegistryPermissionAccess> 这些值为<xref:System.Security.Permissions.RegistryPermissionAccess>， <xref:System.Security.Permissions.RegistryPermissionAccess>，和<xref:System.Security.Permissions.RegistryPermissionAccess>。</xref:System.Security.Permissions.RegistryPermissionAccess> </xref:System.Security.Permissions.RegistryPermissionAccess> </xref:System.Security.Permissions.RegistryPermissionAccess> 可接受值`access`不包括<xref:System.Security.Permissions.RegistryPermissionAccess>和<xref:System.Security.Permissions.RegistryPermissionAccess>，这不表示注册表变量访问的一种类型。</xref:System.Security.Permissions.RegistryPermissionAccess> </xref:System.Security.Permissions.RegistryPermissionAccess>"
  example:
  - "The following code example shows the use of the GetPathList method.  \n  \n [!code-vb[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/visualbasic/2854e98a-b1b4-43c0-ac49-_1.vb)]\n [!code-cs[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/csharp/2854e98a-b1b4-43c0-ac49-_1.cs)]"
  syntax:
    content: public string GetPathList (System.Security.Permissions.RegistryPermissionAccess access);
    parameters:
    - id: access
      type: System.Security.Permissions.RegistryPermissionAccess
      description: "之一<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;></xref>表示注册表变量访问的单一类型的值。"
    return:
      type: System.String
      description: "使用指定的注册表变量 （以分号分隔） 的列表<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>。"
  overload: System.Security.Permissions.RegistryPermission.GetPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>access</code>不是有效的值<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>。       -<code>access</code>是<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>，表示注册表变量访问的多个类型或<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>，它不表示注册表变量访问的任何类型。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: RegistryPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.RegistryPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建并返回是当前权限和指定的权限的交集的权限。"
  remarks: "以下两个权限的交集是描述组的二者共同描述的操作的权限。 仅通过两个原始权限的请求将通过该交集。"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要与当前权限相交的权限。 它必须与当前权限属于同一类型。"
    return:
      type: System.Security.IPermission
      description: "表示当前权限和指定的权限的交集的一个新权限。 此新权限为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果交集为空。"
  overload: System.Security.Permissions.RegistryPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>参数不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且不是与当前权限属于同一类型。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: RegistryPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.RegistryPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "确定当前权限是否为指定权限的子集。"
  remarks: "如果当前权限指定一组完全包含在指定权限的操作，当前权限是指定权限的子集。 例如，表示对 C:\\example.txt 访问权限的权限是到 c︰ 表示访问权限的子集\\\\。 如果此方法返回`true`，当前的权限表示对受保护资源的访问权限不超过指定的权限。"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "将要测试子集关系的权限。 此权限必须是与当前权限属于同一类型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前权限是指定权限; 的子集否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.RegistryPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>参数不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且不是与当前权限属于同一类型。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.IsUnrestricted
  id: IsUnrestricted
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: IsUnrestricted()
  nameWithType: RegistryPermission.IsUnrestricted()
  fullName: System.Security.Permissions.RegistryPermission.IsUnrestricted()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "返回一个值，该值指示当前权限是否不受限制。"
  remarks: "无限制的权限表示对权限所保护的所有资源的访问权限。"
  syntax:
    content: public bool IsUnrestricted ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前权限不受限制;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.RegistryPermission.IsUnrestricted*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)
  id: SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: SetPathList(RegistryPermissionAccess,String)
  nameWithType: RegistryPermission.SetPathList(RegistryPermissionAccess,String)
  fullName: System.Security.Permissions.RegistryPermission.SetPathList(RegistryPermissionAccess,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "将新的访问，将指定的注册表变量的名称设置为现有权限状态。"
  remarks: "将覆盖当前权限的前一状态。"
  example:
  - "The following code example shows the use of the SetPathList method.  \n  \n [!code-vb[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/visualbasic/8dc9769e-4e08-4ebe-9109-_1.vb)]\n [!code-cs[System.Security.Permissions.RegistryPermission#9](~/add/codesnippet/csharp/8dc9769e-4e08-4ebe-9109-_1.cs)]"
  syntax:
    content: public void SetPathList (System.Security.Permissions.RegistryPermissionAccess access, string pathList);
    parameters:
    - id: access
      type: System.Security.Permissions.RegistryPermissionAccess
      description: "之一<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;></xref>值。"
    - id: pathList
      type: System.String
      description: "（以分号分隔） 的注册表变量的列表。"
  overload: System.Security.Permissions.RegistryPermission.SetPathList*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> access </code>参数不是有效的值的<xref href=&quot;System.Security.Permissions.RegistryPermissionAccess&quot;> </xref>。       -或- <code> pathList </code>参数不是有效的字符串。"
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: RegistryPermission.ToXml()
  fullName: System.Security.Permissions.RegistryPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建权限及其当前状态的 XML 编码。"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "权限，包括任何状态信息的 XML 编码。"
  overload: System.Security.Permissions.RegistryPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.RegistryPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: RegistryPermission.Union(IPermission)
  fullName: System.Security.Permissions.RegistryPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建兼具当前权限和指定的权限的权限。"
  remarks: "对联合的调用的结果是由当前权限和指定的权限表示所表示的所有操作的权限。 任何请求都会通过任一权限传递其联合。"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission other);
    parameters:
    - id: other
      type: System.Security.IPermission
      description: "若要与当前权限合并的权限。 它必须与当前权限属于同一类型。"
    return:
      type: System.Security.IPermission
      description: "表示同时兼具当前权限和指定的权限的新权限。"
  overload: System.Security.Permissions.RegistryPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> other </code>参数不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且不是与当前权限属于同一类型。"
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: RegistryPermission(PermissionState)
  nameWithType: RegistryPermission.RegistryPermission(PermissionState)
  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.String)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: RegistryPermission(RegistryPermissionAccess,String)
  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)
  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,String)
- uid: System.Security.Permissions.RegistryPermissionAccess
  parent: System.Security.Permissions
  isExternal: false
  name: RegistryPermissionAccess
  nameWithType: RegistryPermissionAccess
  fullName: System.Security.Permissions.RegistryPermissionAccess
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Permissions.RegistryPermission.#ctor(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)
  nameWithType: RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.RegistryPermission.RegistryPermission(RegistryPermissionAccess,AccessControlActions,String)
- uid: System.Security.AccessControl.AccessControlActions
  parent: System.Security.AccessControl
  isExternal: false
  name: AccessControlActions
  nameWithType: AccessControlActions
  fullName: System.Security.AccessControl.AccessControlActions
- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: AddPathList(RegistryPermissionAccess,String)
  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,String)
  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,String)
- uid: System.Security.Permissions.RegistryPermission.AddPathList(System.Security.Permissions.RegistryPermissionAccess,System.Security.AccessControl.AccessControlActions,System.String)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: AddPathList(RegistryPermissionAccess,AccessControlActions,String)
  nameWithType: RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)
  fullName: System.Security.Permissions.RegistryPermission.AddPathList(RegistryPermissionAccess,AccessControlActions,String)
- uid: System.Security.Permissions.RegistryPermission.Copy
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: Copy()
  nameWithType: RegistryPermission.Copy()
  fullName: System.Security.Permissions.RegistryPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.RegistryPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: RegistryPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.RegistryPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.RegistryPermission.GetPathList(System.Security.Permissions.RegistryPermissionAccess)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: GetPathList(RegistryPermissionAccess)
  nameWithType: RegistryPermission.GetPathList(RegistryPermissionAccess)
  fullName: System.Security.Permissions.RegistryPermission.GetPathList(RegistryPermissionAccess)
- uid: System.Security.Permissions.RegistryPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: RegistryPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.RegistryPermission.Intersect(IPermission)
- uid: System.Security.Permissions.RegistryPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: RegistryPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.RegistryPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.RegistryPermission.IsUnrestricted
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: IsUnrestricted()
  nameWithType: RegistryPermission.IsUnrestricted()
  fullName: System.Security.Permissions.RegistryPermission.IsUnrestricted()
- uid: System.Security.Permissions.RegistryPermission.SetPathList(System.Security.Permissions.RegistryPermissionAccess,System.String)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: SetPathList(RegistryPermissionAccess,String)
  nameWithType: RegistryPermission.SetPathList(RegistryPermissionAccess,String)
  fullName: System.Security.Permissions.RegistryPermission.SetPathList(RegistryPermissionAccess,String)
- uid: System.Security.Permissions.RegistryPermission.ToXml
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: ToXml()
  nameWithType: RegistryPermission.ToXml()
  fullName: System.Security.Permissions.RegistryPermission.ToXml()
- uid: System.Security.Permissions.RegistryPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: RegistryPermission.Union(IPermission)
  fullName: System.Security.Permissions.RegistryPermission.Union(IPermission)
- uid: System.Security.Permissions.RegistryPermission.#ctor*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: RegistryPermission
  nameWithType: RegistryPermission.RegistryPermission
- uid: System.Security.Permissions.RegistryPermission.AddPathList*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: AddPathList
  nameWithType: RegistryPermission.AddPathList
- uid: System.Security.Permissions.RegistryPermission.Copy*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: Copy
  nameWithType: RegistryPermission.Copy
- uid: System.Security.Permissions.RegistryPermission.FromXml*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: FromXml
  nameWithType: RegistryPermission.FromXml
- uid: System.Security.Permissions.RegistryPermission.GetPathList*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: GetPathList
  nameWithType: RegistryPermission.GetPathList
- uid: System.Security.Permissions.RegistryPermission.Intersect*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: Intersect
  nameWithType: RegistryPermission.Intersect
- uid: System.Security.Permissions.RegistryPermission.IsSubsetOf*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: RegistryPermission.IsSubsetOf
- uid: System.Security.Permissions.RegistryPermission.IsUnrestricted*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: IsUnrestricted
  nameWithType: RegistryPermission.IsUnrestricted
- uid: System.Security.Permissions.RegistryPermission.SetPathList*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: SetPathList
  nameWithType: RegistryPermission.SetPathList
- uid: System.Security.Permissions.RegistryPermission.ToXml*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: ToXml
  nameWithType: RegistryPermission.ToXml
- uid: System.Security.Permissions.RegistryPermission.Union*
  parent: System.Security.Permissions.RegistryPermission
  isExternal: false
  name: Union
  nameWithType: RegistryPermission.Union
