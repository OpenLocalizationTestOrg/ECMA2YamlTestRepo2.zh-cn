### YamlMime:ManagedReference
items:
- uid: System.Web.Hosting.ApplicationManager
  id: ApplicationManager
  children:
  - System.Web.Hosting.ApplicationManager.Close
  - System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)
  - System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)
  - System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)
  - System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)
  - System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)
  - System.Web.Hosting.ApplicationManager.GetApplicationManager
  - System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)
  - System.Web.Hosting.ApplicationManager.GetRunningApplications
  - System.Web.Hosting.ApplicationManager.InitializeLifetimeService
  - System.Web.Hosting.ApplicationManager.IsIdle
  - System.Web.Hosting.ApplicationManager.Open
  - System.Web.Hosting.ApplicationManager.ShutdownAll
  - System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)
  - System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)
  langs:
  - csharp
  name: ApplicationManager
  nameWithType: ApplicationManager
  fullName: System.Web.Hosting.ApplicationManager
  type: Class
  summary: "ASP.NET 承载的应用程序可管理 ASP.NET 应用程序域。"
  remarks: "ApplicationManager 对象提供 ASP.NET 应用程序的宿主环境中的对象的生存期的管理。 它负责:-激活并初始化 ASP.NET 应用程序。      -管理应用程序和对象的生存期注册应用程序中。      -公开由宿主环境中用于处理 ASP.NET 应用程序请求的对象。      -提供在任何给定时刻在宿主进程中运行的应用程序的列表。"
  syntax:
    content: 'public sealed class ApplicationManager : MarshalByRefObject'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements: []
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.Close
  id: Close
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: Close()
  nameWithType: ApplicationManager.Close()
  fullName: System.Web.Hosting.ApplicationManager.Close()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "关闭所有应用程序域。"
  remarks: "如果对关闭方法的调用减少了使用为 0 的应用程序管理器的应用程序的引用计数，关闭的方法调用<xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A>方法。</xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A>"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Web.Hosting.ApplicationManager.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)
  id: CreateObject(System.Web.Hosting.IApplicationHost,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: CreateObject(IApplicationHost,Type)
  nameWithType: ApplicationManager.CreateObject(IApplicationHost,Type)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(IApplicationHost,Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "创建指定的应用程序域，基于类型的对象。"
  remarks: "CreateObject 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public System.Web.Hosting.IRegisteredObject CreateObject (System.Web.Hosting.IApplicationHost appHost, Type type);
    parameters:
    - id: appHost
      type: System.Web.Hosting.IApplicationHost
      description: "<xref href=&quot;System.Web.Hosting.IApplicationHost&quot;> </xref>对象。"
    - id: type
      type: System.Type
      description: "要创建的对象的类型。"
    return:
      type: System.Web.Hosting.IRegisteredObject
      description: "中指定的类型的新对象<code> type </code>。"
  overload: System.Web.Hosting.ApplicationManager.CreateObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "应用程序的物理路径不存在。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appHost</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)
  id: CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: CreateObject(String,Type,String,String,Boolean)
  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "创建基于类型、 虚拟和物理路径和指定类型的对象已存在时指示失败行为的布尔值的指定的应用程序域的对象。"
  remarks: "CreateObject 方法用于创建和注册应用程序中的对象。 可以创建的每种类型的一个对象。 如果你需要创建多个相同类型的对象，则必须实现的对象工厂。 有关详细信息，请参阅本主题中的代码示例。       每个应用程序，由唯一的应用程序标识符，标识在其自己的应用程序域中运行。 CreateObject 方法中指定的应用程序的应用程序域中创建指定类型的对象`appID`参数。 如果应用程序域不存在指定应用程序中，将创建对象之前，创建一个。       `failIfExists`参数控制 CreateObject 方法的行为，当应用程序中已存在的指定类型的对象。 当`failIfExists`是`true`，CreateObject 方法将引发<xref:System.InvalidOperationException>异常。</xref:System.InvalidOperationException>       当`failIfExists`是`false`，CreateObject 方法返回指定类型的现有已注册的对象。       CreateObject 方法调用的重载采用一个附加`throwOnError`参数`throwOnError`设置为`false`。"
  example:
  - "The following code example is an implementation of the object-factory design pattern for registered objects. Using the factory pattern enables you to register multiple instances of an object. The example contains two objects: `SampleComponent`, which is the object the application will use multiple instances of, and `SampleComponentFactory`, which manages a list of `SampleComponent` instances.  \n  \n [!code-cs[System.Web.Hosting.ApplicationManager#1](~/add/codesnippet/csharp/37d6d853-1462-44e9-b1c3-_1.cs)]\n [!code-vb[System.Web.Hosting.ApplicationManager#1](~/add/codesnippet/visualbasic/37d6d853-1462-44e9-b1c3-_1.vb)]"
  syntax:
    content: public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);
    parameters:
    - id: appId
      type: System.String
      description: "该对象所属应用程序的唯一标识符。"
    - id: type
      type: System.Type
      description: "要创建的对象的类型。"
    - id: virtualPath
      type: System.String
      description: "应用程序的虚拟路径。"
    - id: physicalPath
      type: System.String
      description: "应用程序的物理路径。"
    - id: failIfExists
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>引发异常如果指定类型的对象是当前已注册;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>返回指定类型的现有已注册的对象。"
    return:
      type: System.Web.Hosting.IRegisteredObject
      description: "指定的新对象<code> type </code>。"
  overload: System.Web.Hosting.ApplicationManager.CreateObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>physicalPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>  \n  \n \\- or -  \n  \n <code>physicalPath</code> is not a valid application path.  \n  \n \\- or -  \n  \n <code>type</code> does not implement the <xref href=\"System.Web.Hosting.IRegisteredObject\"></xref> interface."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appID</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>failIfExists</code>是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>和已注册的指定类型的对象。"
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)
  id: CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: CreateObject(String,Type,String,String,Boolean,Boolean)
  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "创建基于类型、 虚拟和物理路径、 时已存在指定类型的对象，和一个布尔值，该值指示是否引发宿主初始化错误异常指示失败行为的布尔值的指定的应用程序域的对象。"
  remarks: "此重载<xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>方法提供`throwOnError`参数，它允许你控制是否宿主初始化异常引发。</xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> 重载<xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>不提供的方法`throwOnError`参数设置为调用此重载`false`。</xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>"
  syntax:
    content: public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);
    parameters:
    - id: appId
      type: System.String
      description: "该对象所属应用程序的唯一标识符。"
    - id: type
      type: System.Type
      description: "要创建的对象的类型。"
    - id: virtualPath
      type: System.String
      description: "应用程序的虚拟路径。"
    - id: physicalPath
      type: System.String
      description: "应用程序的物理路径。"
    - id: failIfExists
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>引发异常如果指定类型的对象是当前已注册;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>返回指定类型的现有已注册的对象。"
    - id: throwOnError
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>引发异常用于托管初始化错误;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>到不承载初始化异常引发。"
    return:
      type: System.Web.Hosting.IRegisteredObject
      description: "指定的新对象<code> type </code>。"
  overload: System.Web.Hosting.ApplicationManager.CreateObject*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>physicalPath</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>  \n  \n \\- or -  \n  \n <code>physicalPath</code> is not a valid application path.  \n  \n \\- or -  \n  \n <code>type</code> does not implement the <xref href=\"System.Web.Hosting.IRegisteredObject\"></xref> interface."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appID</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>failIfExists</code>是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>和已注册的指定类型的对象。"
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)
  id: GetAppDomain(System.String)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetAppDomain(String)
  nameWithType: ApplicationManager.GetAppDomain(String)
  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "获取指定的应用程序的应用程序域。"
  syntax:
    content: public AppDomain GetAppDomain (string appId);
    parameters:
    - id: appId
      type: System.String
      description: "应用程序的唯一标识符。"
    return:
      type: System.AppDomain
      description: "应用程序的应用程序域。"
  overload: System.Web.Hosting.ApplicationManager.GetAppDomain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)
  id: GetAppDomain(System.Web.Hosting.IApplicationHost)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetAppDomain(IApplicationHost)
  nameWithType: ApplicationManager.GetAppDomain(IApplicationHost)
  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(IApplicationHost)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "获取使用指定的主机的应用程序的应用程序域。"
  syntax:
    content: public AppDomain GetAppDomain (System.Web.Hosting.IApplicationHost appHost);
    parameters:
    - id: appHost
      type: System.Web.Hosting.IApplicationHost
      description: "要获取的应用程序域的主机。"
    return:
      type: System.AppDomain
      description: "应用程序的应用程序域。"
  overload: System.Web.Hosting.ApplicationManager.GetAppDomain*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager
  id: GetApplicationManager
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetApplicationManager()
  nameWithType: ApplicationManager.GetApplicationManager()
  fullName: System.Web.Hosting.ApplicationManager.GetApplicationManager()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "返回的单个实例<xref href=&quot;System.Web.Hosting.ApplicationManager&quot;></xref>与此 ASP.NET 主机进程关联的对象。"
  remarks: "一个实例<xref:System.Web.Hosting.ApplicationManager>由 ASP.NET 主机进程默认应用程序域中创建对象。</xref:System.Web.Hosting.ApplicationManager> 实例时，如果<xref:System.Web.Hosting.ApplicationManager>类不可用，GetApplicationManager 方法首先创建的一个实例<xref:System.Web.Hosting.ApplicationManager>类，然后返回新创建的对象。</xref:System.Web.Hosting.ApplicationManager> </xref:System.Web.Hosting.ApplicationManager> 实例时，如果<xref:System.Web.Hosting.ApplicationManager>以前创建类，GetApplicationManager 方法将返回现有对象。</xref:System.Web.Hosting.ApplicationManager>"
  example:
  - "The following code example uses the GetApplicationManager method to retrieve the <xref:System.Web.Hosting.ApplicationManager> instance for a Web application.  \n  \n [!code-vb[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/visualbasic/m-system.web.hosting.app_0_1.aspx)]\n [!code-cs[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/csharp/m-system.web.hosting.app_0_1.aspx)]"
  syntax:
    content: public static System.Web.Hosting.ApplicationManager GetApplicationManager ();
    parameters: []
    return:
      type: System.Web.Hosting.ApplicationManager
      description: "单个实例<xref href=&quot;System.Web.Hosting.ApplicationManager&quot;></xref>与正在运行的 ASP.NET 主机进程关联的对象。"
  overload: System.Web.Hosting.ApplicationManager.GetApplicationManager*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)
  id: GetObject(System.String,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetObject(String,Type)
  nameWithType: ApplicationManager.GetObject(String,Type)
  fullName: System.Web.Hosting.ApplicationManager.GetObject(String,Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "从指定的应用程序中返回指定类型的已注册的对象。"
  syntax:
    content: public System.Web.Hosting.IRegisteredObject GetObject (string appId, Type type);
    parameters:
    - id: appId
      type: System.String
      description: "该对象所属应用程序的唯一标识符。"
    - id: type
      type: System.Type
      description: "要返回的对象的类型。"
    return:
      type: System.Web.Hosting.IRegisteredObject
      description: "指定的类型; 的已注册的对象或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果未通过调用注册类型时<xref:System.Web.Hosting.ApplicationManager.CreateObject*>方法。</xref:System.Web.Hosting.ApplicationManager.CreateObject*>"
  overload: System.Web.Hosting.ApplicationManager.GetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appId</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       —or—       <code>type</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications
  id: GetRunningApplications
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: GetRunningApplications()
  nameWithType: ApplicationManager.GetRunningApplications()
  fullName: System.Web.Hosting.ApplicationManager.GetRunningApplications()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "返回正在运行的应用程序的快照。"
  remarks: ''
  example:
  - "The following code example uses the GetRunningApplications method to display information about the applications managed by an <xref:System.Web.Hosting.ApplicationManager> instance.  \n  \n [!code-vb[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/visualbasic/m-system.web.hosting.app_1_1.aspx)]\n [!code-cs[System.Web.Hosting.ApplicationInfo#1](~/add/codesnippet/csharp/m-system.web.hosting.app_1_1.aspx)]"
  syntax:
    content: public System.Web.Hosting.ApplicationInfo[] GetRunningApplications ();
    parameters: []
    return:
      type: System.Web.Hosting.ApplicationInfo[]
      description: "数组<xref href=&quot;System.Web.Hosting.ApplicationInfo&quot;></xref>包含此托管的应用程序有关的信息的对象<xref href=&quot;System.Web.Hosting.ApplicationManager&quot;></xref>实例。"
  overload: System.Web.Hosting.ApplicationManager.GetRunningApplications*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService
  id: InitializeLifetimeService
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: InitializeLifetimeService()
  nameWithType: ApplicationManager.InitializeLifetimeService()
  fullName: System.Web.Hosting.ApplicationManager.InitializeLifetimeService()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "为应用程序域提供无限生存期通过防止创建租约。"
  remarks: "此方法重写<xref:System.MarshalByRefObject.InitializeLifetimeService%2A>方法在其基本类。</xref:System.MarshalByRefObject.InitializeLifetimeService%2A> 它始终返回`null`，从而防止创建租约，会限制应用程序域的生存期。"
  syntax:
    content: public override object InitializeLifetimeService ();
    parameters: []
    return:
      type: System.Object
      description: "Always <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  overload: System.Web.Hosting.ApplicationManager.InitializeLifetimeService*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.IsIdle
  id: IsIdle
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: IsIdle()
  nameWithType: ApplicationManager.IsIdle()
  fullName: System.Web.Hosting.ApplicationManager.IsIdle()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "返回一个值，该值指示是否托管进程的所有应用程序都处于空闲状态且未在处理请求。"
  remarks: "IsIdle 方法返回`true`如果托管进程的所有应用程序都处于空闲状态。"
  syntax:
    content: public bool IsIdle ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在进程中的所有应用程序都处于空闲状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Hosting.ApplicationManager.IsIdle*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.Open
  id: Open
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: Open()
  nameWithType: ApplicationManager.Open()
  fullName: System.Web.Hosting.ApplicationManager.Open()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "线程安全增量对应用程序管理器实例的用户引用计数。"
  syntax:
    content: public void Open ();
    parameters: []
  overload: System.Web.Hosting.ApplicationManager.Open*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.ShutdownAll
  id: ShutdownAll
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: ShutdownAll()
  nameWithType: ApplicationManager.ShutdownAll()
  fullName: System.Web.Hosting.ApplicationManager.ShutdownAll()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "卸载应用程序的所有资源。"
  remarks: "调用 ShutdownAll 方法等效于调用<xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName>由此管理的所有应用程序域中的方法<xref:System.Web.Hosting.ApplicationManager>实例; 但是，ShutdownAll 方法可以从外部调用的托管应用程序域。</xref:System.Web.Hosting.ApplicationManager> </xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName>"
  syntax:
    content: public void ShutdownAll ();
    parameters: []
  overload: System.Web.Hosting.ApplicationManager.ShutdownAll*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)
  id: ShutdownApplication(System.String)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: ShutdownApplication(String)
  nameWithType: ApplicationManager.ShutdownApplication(String)
  fullName: System.Web.Hosting.ApplicationManager.ShutdownApplication(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "卸载指定的应用程序。"
  remarks: "调用 ShutdownApplication 方法等效于调用<xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName>方法的特定应用程序域; 但是，在从外部托管的应用程序域调用 ShutdownApplication 方法。</xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=fullName>"
  syntax:
    content: public void ShutdownApplication (string appId);
    parameters:
    - id: appId
      type: System.String
      description: "要卸载的应用程序唯一标识符。"
  overload: System.Web.Hosting.ApplicationManager.ShutdownApplication*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appId</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)
  id: StopObject(System.String,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  langs:
  - csharp
  name: StopObject(String,Type)
  nameWithType: ApplicationManager.StopObject(String,Type)
  fullName: System.Web.Hosting.ApplicationManager.StopObject(String,Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Hosting
  summary: "从应用程序中的已注册对象列表中移除指定的对象。 如果要删除的对象的应用程序中的已注册对象列表中的最后一个剩余对象，卸载应用程序为止。"
  syntax:
    content: public void StopObject (string appId, Type type);
    parameters:
    - id: appId
      type: System.String
      description: "该对象所属应用程序的唯一标识符。"
    - id: type
      type: System.Type
      description: "要卸载的对象类型。"
  overload: System.Web.Hosting.ApplicationManager.StopObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>appId</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>type</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>."
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Web.Hosting.ApplicationManager.Close
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: Close()
  nameWithType: ApplicationManager.Close()
  fullName: System.Web.Hosting.ApplicationManager.Close()
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: CreateObject(IApplicationHost,Type)
  nameWithType: ApplicationManager.CreateObject(IApplicationHost,Type)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(IApplicationHost,Type)
- uid: System.Web.Hosting.IRegisteredObject
  parent: System.Web.Hosting
  isExternal: false
  name: IRegisteredObject
  nameWithType: IRegisteredObject
  fullName: System.Web.Hosting.IRegisteredObject
- uid: System.Web.Hosting.IApplicationHost
  parent: System.Web.Hosting
  isExternal: false
  name: IApplicationHost
  nameWithType: IApplicationHost
  fullName: System.Web.Hosting.IApplicationHost
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: CreateObject(String,Type,String,String,Boolean)
  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: CreateObject(String,Type,String,String,Boolean,Boolean)
  nameWithType: ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)
  fullName: System.Web.Hosting.ApplicationManager.CreateObject(String,Type,String,String,Boolean,Boolean)
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetAppDomain(String)
  nameWithType: ApplicationManager.GetAppDomain(String)
  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(String)
- uid: System.AppDomain
  parent: System
  isExternal: false
  name: AppDomain
  nameWithType: AppDomain
  fullName: System.AppDomain
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetAppDomain(IApplicationHost)
  nameWithType: ApplicationManager.GetAppDomain(IApplicationHost)
  fullName: System.Web.Hosting.ApplicationManager.GetAppDomain(IApplicationHost)
- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetApplicationManager()
  nameWithType: ApplicationManager.GetApplicationManager()
  fullName: System.Web.Hosting.ApplicationManager.GetApplicationManager()
- uid: System.Web.Hosting.ApplicationManager
  parent: System.Web.Hosting
  isExternal: false
  name: ApplicationManager
  nameWithType: ApplicationManager
  fullName: System.Web.Hosting.ApplicationManager
- uid: System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetObject(String,Type)
  nameWithType: ApplicationManager.GetObject(String,Type)
  fullName: System.Web.Hosting.ApplicationManager.GetObject(String,Type)
- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetRunningApplications()
  nameWithType: ApplicationManager.GetRunningApplications()
  fullName: System.Web.Hosting.ApplicationManager.GetRunningApplications()
- uid: System.Web.Hosting.ApplicationInfo[]
  parent: System.Web.Hosting
  isExternal: false
  name: ApplicationInfo
  nameWithType: ApplicationInfo
  fullName: System.Web.Hosting.ApplicationInfo[]
  spec.csharp:
  - uid: System.Web.Hosting.ApplicationInfo
    name: ApplicationInfo
    nameWithType: ApplicationInfo
    fullName: ApplicationInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: InitializeLifetimeService()
  nameWithType: ApplicationManager.InitializeLifetimeService()
  fullName: System.Web.Hosting.ApplicationManager.InitializeLifetimeService()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.Hosting.ApplicationManager.IsIdle
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: IsIdle()
  nameWithType: ApplicationManager.IsIdle()
  fullName: System.Web.Hosting.ApplicationManager.IsIdle()
- uid: System.Web.Hosting.ApplicationManager.Open
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: Open()
  nameWithType: ApplicationManager.Open()
  fullName: System.Web.Hosting.ApplicationManager.Open()
- uid: System.Web.Hosting.ApplicationManager.ShutdownAll
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: ShutdownAll()
  nameWithType: ApplicationManager.ShutdownAll()
  fullName: System.Web.Hosting.ApplicationManager.ShutdownAll()
- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: ShutdownApplication(String)
  nameWithType: ApplicationManager.ShutdownApplication(String)
  fullName: System.Web.Hosting.ApplicationManager.ShutdownApplication(String)
- uid: System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: StopObject(String,Type)
  nameWithType: ApplicationManager.StopObject(String,Type)
  fullName: System.Web.Hosting.ApplicationManager.StopObject(String,Type)
- uid: System.Web.Hosting.ApplicationManager.Close*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: Close
  nameWithType: ApplicationManager.Close
- uid: System.Web.Hosting.ApplicationManager.CreateObject*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: CreateObject
  nameWithType: ApplicationManager.CreateObject
- uid: System.Web.Hosting.ApplicationManager.GetAppDomain*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetAppDomain
  nameWithType: ApplicationManager.GetAppDomain
- uid: System.Web.Hosting.ApplicationManager.GetApplicationManager*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetApplicationManager
  nameWithType: ApplicationManager.GetApplicationManager
- uid: System.Web.Hosting.ApplicationManager.GetObject*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetObject
  nameWithType: ApplicationManager.GetObject
- uid: System.Web.Hosting.ApplicationManager.GetRunningApplications*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: GetRunningApplications
  nameWithType: ApplicationManager.GetRunningApplications
- uid: System.Web.Hosting.ApplicationManager.InitializeLifetimeService*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: InitializeLifetimeService
  nameWithType: ApplicationManager.InitializeLifetimeService
- uid: System.Web.Hosting.ApplicationManager.IsIdle*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: IsIdle
  nameWithType: ApplicationManager.IsIdle
- uid: System.Web.Hosting.ApplicationManager.Open*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: Open
  nameWithType: ApplicationManager.Open
- uid: System.Web.Hosting.ApplicationManager.ShutdownAll*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: ShutdownAll
  nameWithType: ApplicationManager.ShutdownAll
- uid: System.Web.Hosting.ApplicationManager.ShutdownApplication*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: ShutdownApplication
  nameWithType: ApplicationManager.ShutdownApplication
- uid: System.Web.Hosting.ApplicationManager.StopObject*
  parent: System.Web.Hosting.ApplicationManager
  isExternal: false
  name: StopObject
  nameWithType: ApplicationManager.StopObject
