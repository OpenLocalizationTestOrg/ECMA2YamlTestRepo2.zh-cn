### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.RecognizedPhrase
  id: RecognizedPhrase
  children:
  - System.Speech.Recognition.RecognizedPhrase.Confidence
  - System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics
  - System.Speech.Recognition.RecognizedPhrase.Grammar
  - System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
  - System.Speech.Recognition.RecognizedPhrase.Homophones
  - System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
  - System.Speech.Recognition.RecognizedPhrase.Semantics
  - System.Speech.Recognition.RecognizedPhrase.Text
  - System.Speech.Recognition.RecognizedPhrase.Words
  langs:
  - csharp
  name: RecognizedPhrase
  nameWithType: RecognizedPhrase
  fullName: System.Speech.Recognition.RecognizedPhrase
  type: Class
  summary: "包含由语音识别器，有关识别的输入生成的详细的信息。"
  remarks: "此类包含单词和短语，在语音识别操作，包括以下过程中处理的详细的信息:-<xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A>属性引用<xref:System.Speech.Recognition.Grammar>识别器用于标识输入。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.RecognizedPhrase.Grammar%2A>      -<xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>属性包含短语的规范化的文本。</xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>      -<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性引用包含在结果中的语义信息。</xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 语义信息是密钥名称和关联的语义数据的字典。      -<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性包含的有序的集合<xref:System.Speech.Recognition.RecognizedWordUnit>识别输入中的 word 的对象表示每。</xref:System.Speech.Recognition.RecognizedWordUnit> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 每个 word 单元包含显示格式、 词法格式和相应的单词的发音信息。      -<xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A>属性包含有关专用的 word 替换的信息。</xref:System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits%2A>      -<xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A>和<xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A>属性 contain information about 识别备用项具有相同或类似发音。</xref:System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId%2A> </xref:System.Speech.Recognition.RecognizedPhrase.Homophones%2A>      -的值<xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>属性指示的确定性，由语音识别器分配已识别的短语的输入匹配的程度。</xref:System.Speech.Recognition.RecognizedPhrase.Confidence%2A>       语音识别器返回识别导致<xref:System.Speech.Recognition.RecognitionResult>对象，它继承自 RecognizedPhrase。</xref:System.Speech.Recognition.RecognitionResult> 识别结果<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>属性包含 RecognizedPhrase 对象，其中每个是识别的输入的可能匹配项的有序的集合。</xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>"
  example:
  - "The following example shows a handler for a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=fullName>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=fullName>, or <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=fullName> event and some of the information associated with the <xref:System.Speech.Recognition.RecognitionResult> object. The <xref:System.Speech.Recognition.RecognitionResult> class derives from the RecognizedPhrase class.  \n  \n```c#  \nvoid SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  \n{  \n  if (e.Result == null) return;  \n  \n  // Add event handler code here.  \n  \n  // The following code illustrates some of the information available  \n  // in the recognition result.  \n  Console.WriteLine(\"Recognition result summary:\");  \n  Console.WriteLine(  \n    \"  Recognized phrase: {0}\\n\" +   \n    \"  Confidence score {1}\\n\" +   \n    \"  Grammar used: {2}\\n\",   \n    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  \n  \n  // Display the semantic values in the recognition result.  \n  Console.WriteLine(\"  Semantic results:\");  \n  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  \n  {  \n    Console.WriteLine(\"    The {0} city is {1}\",  \n      child.Key, child.Value.Value ?? \"null\");  \n  }  \n  Console.WriteLine();  \n  \n  // Display information about the words in the recognition result.  \n  Console.WriteLine(\"  Word summary: \");  \n  foreach (RecognizedWordUnit word in e.Result.Words)  \n  {  \n    Console.WriteLine(  \n      \"    Lexical form ({1})\" +  \n      \" Pronunciation ({0})\" +  \n      \" Display form ({2})\",  \n      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  \n  }  \n  \n  // Display information about the audio in the recognition result.  \n  Console.WriteLine(\"  Input audio summary:\\n\" +  \n    \"    Candidate Phrase at:       {0} mSec\\n\" +  \n    \"    Phrase Length:             {1} mSec\\n\" +  \n    \"    Input State Time:          {2}\\n\" +  \n    \"    Input Format:              {3}\\n\",  \n    e.Result.Audio.AudioPosition,  \n    e.Result.Audio.Duration,  \n    e.Result.Audio.StartTime,  \n    e.Result.Audio.Format.EncodingFormat);  \n  \n  // Display information about the alternate recognitions in the recognition result.  \n  Console.WriteLine(\"  Alternate phrase collection:\");  \n  foreach (RecognizedPhrase phrase in e.Result.Alternates)  \n  {  \n    Console.WriteLine(\"    Phrase: \" + phrase.Text);  \n    Console.WriteLine(\"    Confidence score: \" + phrase.Confidence);  \n  }  \n}  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{Text}")]

      public class RecognizedPhrase
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Confidence
  id: Confidence
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Confidence
  nameWithType: RecognizedPhrase.Confidence
  fullName: System.Speech.Recognition.RecognizedPhrase.Confidence
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取一个值，由表示的可能性在识别器分配的<xref href=&quot;System.Speech.Recognition.RecognizedPhrase&quot;></xref>与给定的输入匹配。"
  remarks: "置信度评分不能证明短语已识别出正确的绝对可能性。 相反，置信度分数提供了一种机制来进行比较的给定输入的多个将识别备用项的相对准确性。 这简化了将最准确的识别结果返回。 例如，如果已识别的短语具有 0.8 置信度得分，这并不意味着短语具有正在输入正确的匹配项的 80%的几率。  则意味着该短语是更有可能要比其他结果，确保输入正确的匹配项评分 0.8 小于。       在其自己上的一个置信度得分没有意义，除非你有要进行比较，从相同的识别操作或从以前的相同输入荣誉的替代结果。 值用于排名备用候选短语返回<xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>属性<xref:System.Speech.Recognition.RecognitionResult>对象。</xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>       置信度值为每个识别引擎到相对和唯一。 不能有意义的方式比较两个不同识别引擎返回的置信度值。       语音识别引擎可以将一个低置信度得分分配给语音输入中，由于各种原因，包括后台干扰、 inarticulate 语音，或未预料到的单词或单词序列。 如果你的应用程序正在使用<xref:System.Speech.Recognition.SpeechRecognitionEngine>实例，你可以修改置信度在哪些语音输入被接受或拒绝的其中一条<xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A>方法。</xref:System.Speech.Recognition.SpeechRecognitionEngine.UpdateRecognizerSetting%2A> </xref:System.Speech.Recognition.SpeechRecognitionEngine> 在共享识别，也就是由管理器的置信度阈值<xref:System.Speech.Recognition.SpeechRecognizer>、 具有用户配置文件相关联并存储在 Windows 注册表。</xref:System.Speech.Recognition.SpeechRecognizer> 应用程序不应写入属性的共享识别器注册表的更改。       <xref:System.Speech.Recognition.RecognitionResult.Alternates%2A>属性<xref:System.Speech.Recognition.RecognitionResult>对象包含的有序的集合<xref:System.Speech.Recognition.RecognizedPhrase>对象，其中每个已识别的输入的可能匹配。</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognitionResult> </xref:System.Speech.Recognition.RecognitionResult.Alternates%2A> 替代项按从高到最低置信度的顺序排列。"
  example:
  - "The following example shows a handler for a <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=fullName>, <xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=fullName>, or <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=fullName> event. The example shows information associated with the <xref:System.Speech.Recognition.RecognitionResult> object, some of which is derived from <xref:System.Speech.Recognition.RecognizedPhrase>. The handler displays confidence scores for a recognized phrase as well as for recognition alternates.  \n  \n```c#  \nvoid SpeechRecognizedHandler(object sender, SpeechRecognizedEventArgs e)  \n{  \n  if (e.Result == null) return;  \n  \n  // Add event handler code here.  \n  \n  // The following code illustrates some of the information available  \n  // in the recognition result.  \n  Console.WriteLine(\"Recognition result summary:\");  \n  Console.WriteLine(  \n    \"  Recognized phrase: {0}\\n\" +   \n    \"  Confidence score {1}\\n\" +   \n    \"  Grammar used: {2}\\n\",   \n    e.Result.Text, e.Result.Confidence, e.Result.Grammar.Name);  \n  \n  // Display the semantic values in the recognition result.  \n  Console.WriteLine(\"  Semantic results:\");  \n  foreach (KeyValuePair<String, SemanticValue> child in e.Result.Semantics)  \n  {  \n    Console.WriteLine(\"    The {0} city is {1}\",  \n      child.Key, child.Value.Value ?? \"null\");  \n  }  \n  Console.WriteLine();  \n  \n  // Display information about the words in the recognition result.  \n  Console.WriteLine(\"  Word summary: \");  \n  foreach (RecognizedWordUnit word in e.Result.Words)  \n  {  \n    Console.WriteLine(  \n      \"    Lexical form ({1})\" +  \n      \" Pronunciation ({0})\" +  \n      \" Display form ({2})\",  \n      word.Pronunciation, word.LexicalForm, word.DisplayAttributes);  \n  }  \n  \n  // Display information about the audio in the recognition result.  \n  Console.WriteLine(\"  Input audio summary:\\n\" +  \n    \"    Candidate Phrase at:       {0} mSec\\n\" +  \n    \"    Phrase Length:             {1} mSec\\n\" +  \n    \"    Input State Time:          {2}\\n\" +  \n    \"    Input Format:              {3}\\n\",  \n    e.Result.Audio.AudioPosition,  \n    e.Result.Audio.Duration,  \n    e.Result.Audio.StartTime,  \n    e.Result.Audio.Format.EncodingFormat);  \n  \n  // Display information about the alternate recognitions in the recognition result.  \n  Console.WriteLine(\"  Alternate phrase collection:\");  \n  foreach (RecognizedPhrase phrase in e.Result.Alternates)  \n  {  \n    Console.WriteLine(\"    Phrase: \" + phrase.Text);  \n    Console.WriteLine(\"    Confidence score: \" + phrase.Confidence);  \n  }  \n}  \n  \n```"
  syntax:
    content: public float Confidence { get; }
    return:
      type: System.Single
      description: "正确识别的短语的确定性的相对度量值。 该值分别为从 0.0 到 1.0，低到高置信。"
  overload: System.Speech.Recognition.RecognizedPhrase.Confidence*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics
  id: ConstructSmlFromSemantics
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: ConstructSmlFromSemantics()
  nameWithType: RecognizedPhrase.ConstructSmlFromSemantics()
  fullName: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "返回中的语义信息的语义标记语言 (SML) 文档<xref href=&quot;System.Speech.Recognition.RecognizedPhrase&quot;></xref>对象。"
  remarks: "有关语义标记语言 (SML) 的信息，请参阅[语义标记语言参考](http://msdn.microsoft.com/en-us/f9d83443-2cac-49bc-a447-210feda62f5d)。"
  example:
  - "In the following example, a method returns a string that contains the SML for the semantics of a recognized phrase.  \n  \n```  \nprivate string GetSemanticsSML(RecognizedPhrase result)  \n{  \n  if (result.Semantics.Count > 0)  \n  {  \n    return result.ConstructSmlFromSemantics().CreateNavigator().OuterXml;  \n  }  \n  else  \n  {  \n    return null;  \n  }  \n}  \n```"
  syntax:
    content: public System.Xml.XPath.IXPathNavigable ConstructSmlFromSemantics ();
    parameters: []
    return:
      type: System.Xml.XPath.IXPathNavigable
      description: "返回的语义的 SML 描述<xref href=&quot;System.Speech.Recognition.RecognizedPhrase&quot;></xref>作为[XPath](http://msdn.microsoft.com/library/ms256115.aspx)可导航的对象。"
  overload: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Grammar
  id: Grammar
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Grammar
  nameWithType: RecognizedPhrase.Grammar
  fullName: System.Speech.Recognition.RecognizedPhrase.Grammar
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>语音识别器用于返回<xref href=&quot;System.Speech.Recognition.RecognizedPhrase&quot;> </xref>。"
  syntax:
    content: public System.Speech.Recognition.Grammar Grammar { get; }
    return:
      type: System.Speech.Recognition.Grammar
      description: "语音识别器用于标识输入语法对象。"
  overload: System.Speech.Recognition.RecognizedPhrase.Grammar*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
  id: HomophoneGroupId
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: HomophoneGroupId
  nameWithType: RecognizedPhrase.HomophoneGroupId
  fullName: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取短语同音字组的标识符。"
  remarks: "语音识别器将组标识符分配给所有将识别备用项具有相同的发音。 对于每个替代方法具有唯一的发音，识别器创建同音字组。 语音识别器生成的每个识别操作，标识符的新组并标识符不能用于比较从备用项从单独的识别操作生成。       例如，&quot;tale&quot;、&quot;tail&quot;和&quot;报警&quot;包含备用项的识别结果前, 两个替代项将属于一个同音字组，并且最后一个备用会第二个同音字组的单个成员。"
  syntax:
    content: public int HomophoneGroupId { get; }
    return:
      type: System.Int32
      description: "短语同音字组的标识符。"
  overload: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Homophones
  id: Homophones
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Homophones
  nameWithType: RecognizedPhrase.Homophones
  fullName: System.Speech.Recognition.RecognizedPhrase.Homophones
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取具有语法一样的发音此识别识别备用项的集合。"
  remarks: "此属性返回所有其他将识别备用项具有语法一样的发音此识别的短语。       例如，为包含备用项、&quot;tale&quot;和&quot;tail&quot;识别结果的第一个替代方法，&quot;tale&quot;，该同音字集合将包含第二个短语，&quot;tail&quot;。 第二个替代方法，&quot;tail&quot;同音字集合将包含第一个短语，&quot;tale&quot;。"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizedPhrase> Homophones { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizedPhrase}
      description: "只读识别备用项具有语法一样的发音此识别的集合。"
  overload: System.Speech.Recognition.RecognizedPhrase.Homophones*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
  id: ReplacementWordUnits
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: ReplacementWordUnits
  nameWithType: RecognizedPhrase.ReplacementWordUnits
  fullName: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取有关语音识别器作为一部分语音到文本规范化更改文本的信息。"
  remarks: "作为语音识别过程的一部分，在语音识别器规范化已识别的输入到一个显示窗体。       语音的输入，显示为&quot;25 美元&quot;，例如，生成识别结果其中<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性包含单词、&quot;20&quot;、&quot;五个&quot;和显示为&quot;美元&quot;，与<xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>属性包含短语&quot;$25.00&quot;。</xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> </xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 有关文本规范化的详细信息，请参阅<xref:System.Speech.Recognition.ReplacementText>类。</xref:System.Speech.Recognition.ReplacementText>"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.Speech.Recognition.ReplacementText> ReplacementWordUnits { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.Speech.Recognition.ReplacementText}
      description: "集合<xref href=&quot;System.Speech.Recognition.ReplacementText&quot;></xref>这些对象描述的语音识别器规范化已识别的输入时所替换的文本部分。"
  overload: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Semantics
  id: Semantics
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Semantics
  nameWithType: RecognizedPhrase.Semantics
  fullName: System.Speech.Recognition.RecognizedPhrase.Semantics
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取与所识别的短语相关联的语义信息。"
  remarks: "语音识别语法可以包括的语义信息。 当语音识别器生成此类语法的识别结果时，则的语义信息可能包括在识别结果中根据所语法和在识别器的输入的规则。 有关的语义信息的详细信息，请参阅[了解语义结果](http://msdn.microsoft.com/en-us/2a9dbd8b-cf6d-42cd-bbb9-ca0b3e534005)和<xref:System.Speech.Recognition.SemanticResultKey>和<xref:System.Speech.Recognition.SemanticResultValue>类。</xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey>"
  example:
  - "The following example defines a method that gets specific semantic information from a recognized phrase. When this method returns, it contains the value for the semantic key, or null if the value was not retrieved. This method checks only for top-level keys. Since the semantic information is contained in a tree of values, lower-level keys must be accessed through the returned semantic value.  \n  \n```  \nstatic bool TryGetSemanticValue(  \n      RecognizedPhrase phrase, string key, out SemanticValue value)  \n{  \n  value = null;  \n  bool found = phrase.Semantics.ContainsKey(key);  \n  if (found)  \n  {  \n    value = phrase.Semantics[key];  \n  }  \n  \n  return found;  \n}  \n```"
  syntax:
    content: public System.Speech.Recognition.SemanticValue Semantics { get; }
    return:
      type: System.Speech.Recognition.SemanticValue
      description: "与所识别的短语相关的语义信息。"
  overload: System.Speech.Recognition.RecognizedPhrase.Semantics*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Text
  id: Text
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Text
  nameWithType: RecognizedPhrase.Text
  fullName: System.Speech.Recognition.RecognizedPhrase.Text
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取语音识别器从识别的输入生成的规范化的文本。"
  remarks: "作为语音识别过程的一部分，在语音识别器执行已识别输入到一个显示窗体的语音到文本的规范化。       语音的输入，显示为&quot;25 美元&quot;，例如，生成识别结果其中<xref:System.Speech.Recognition.RecognizedPhrase.Words%2A>属性包含单词、&quot;20&quot;、&quot;五个&quot;和显示为&quot;美元&quot;，而文本属性包含短语&quot;$25.00&quot;。</xref:System.Speech.Recognition.RecognizedPhrase.Words%2A> 有关文本规范化的详细信息，请参阅<xref:System.Speech.Recognition.ReplacementText>。</xref:System.Speech.Recognition.ReplacementText>"
  syntax:
    content: public string Text { get; }
    return:
      type: System.String
      description: "语音识别器从识别的输入生成的规范化的文本。"
  overload: System.Speech.Recognition.RecognizedPhrase.Text*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.RecognizedPhrase.Words
  id: Words
  parent: System.Speech.Recognition.RecognizedPhrase
  langs:
  - csharp
  name: Words
  nameWithType: RecognizedPhrase.Words
  fullName: System.Speech.Recognition.RecognizedPhrase.Words
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取语音识别器从识别的输入生成的词语。"
  remarks: "此属性包含之前识别器的语音到文本规范化，结果的语音识别器从输入生成的单词。       语音的输入，显示为&quot;25 美元&quot;，例如，生成的单词属性其中包含单词、&quot;20&quot;、&quot;五个&quot;和显示为&quot;美元&quot;，识别结果和<xref:System.Speech.Recognition.RecognizedPhrase.Text%2A>属性包含短语&quot;$25.00&quot;。</xref:System.Speech.Recognition.RecognizedPhrase.Text%2A> 有关文本规范化的详细信息，请参阅<xref:System.Speech.Recognition.ReplacementText>。</xref:System.Speech.Recognition.ReplacementText>"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizedWordUnit> Words { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizedWordUnit}
      description: "集合<xref href=&quot;System.Speech.Recognition.RecognizedWordUnit&quot;></xref>由语音识别器针对识别的输入生成的对象。"
  overload: System.Speech.Recognition.RecognizedPhrase.Words*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.RecognizedPhrase.Confidence
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Confidence
  nameWithType: RecognizedPhrase.Confidence
  fullName: System.Speech.Recognition.RecognizedPhrase.Confidence
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: ConstructSmlFromSemantics()
  nameWithType: RecognizedPhrase.ConstructSmlFromSemantics()
  fullName: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics()
- uid: System.Xml.XPath.IXPathNavigable
  parent: System.Xml.XPath
  isExternal: false
  name: IXPathNavigable
  nameWithType: IXPathNavigable
  fullName: System.Xml.XPath.IXPathNavigable
- uid: System.Speech.Recognition.RecognizedPhrase.Grammar
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Grammar
  nameWithType: RecognizedPhrase.Grammar
  fullName: System.Speech.Recognition.RecognizedPhrase.Grammar
- uid: System.Speech.Recognition.Grammar
  parent: System.Speech.Recognition
  isExternal: false
  name: Grammar
  nameWithType: Grammar
  fullName: System.Speech.Recognition.Grammar
- uid: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: HomophoneGroupId
  nameWithType: RecognizedPhrase.HomophoneGroupId
  fullName: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.RecognizedPhrase.Homophones
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Homophones
  nameWithType: RecognizedPhrase.Homophones
  fullName: System.Speech.Recognition.RecognizedPhrase.Homophones
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizedPhrase}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<RecognizedPhrase>
  nameWithType: ReadOnlyCollection<RecognizedPhrase>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizedPhrase>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.Recognition.RecognizedPhrase>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.RecognizedPhrase
    name: RecognizedPhrase
    nameWithType: RecognizedPhrase
    fullName: RecognizedPhrase
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: ReplacementWordUnits
  nameWithType: RecognizedPhrase.ReplacementWordUnits
  fullName: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits
- uid: System.Collections.ObjectModel.Collection{System.Speech.Recognition.ReplacementText}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ReplacementText>
  nameWithType: Collection<ReplacementText>
  fullName: System.Collections.ObjectModel.Collection<System.Speech.Recognition.ReplacementText>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.Speech.Recognition.ReplacementText>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.ReplacementText
    name: ReplacementText
    nameWithType: ReplacementText
    fullName: ReplacementText
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.RecognizedPhrase.Semantics
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Semantics
  nameWithType: RecognizedPhrase.Semantics
  fullName: System.Speech.Recognition.RecognizedPhrase.Semantics
- uid: System.Speech.Recognition.SemanticValue
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticValue
  nameWithType: SemanticValue
  fullName: System.Speech.Recognition.SemanticValue
- uid: System.Speech.Recognition.RecognizedPhrase.Text
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Text
  nameWithType: RecognizedPhrase.Text
  fullName: System.Speech.Recognition.RecognizedPhrase.Text
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.RecognizedPhrase.Words
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Words
  nameWithType: RecognizedPhrase.Words
  fullName: System.Speech.Recognition.RecognizedPhrase.Words
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Speech.Recognition.RecognizedWordUnit}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<RecognizedWordUnit>
  nameWithType: ReadOnlyCollection<RecognizedWordUnit>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Speech.Recognition.RecognizedWordUnit>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Speech.Recognition.RecognizedWordUnit>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.RecognizedWordUnit
    name: RecognizedWordUnit
    nameWithType: RecognizedWordUnit
    fullName: RecognizedWordUnit
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.RecognizedPhrase.Confidence*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Confidence
  nameWithType: RecognizedPhrase.Confidence
- uid: System.Speech.Recognition.RecognizedPhrase.ConstructSmlFromSemantics*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: ConstructSmlFromSemantics
  nameWithType: RecognizedPhrase.ConstructSmlFromSemantics
- uid: System.Speech.Recognition.RecognizedPhrase.Grammar*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Grammar
  nameWithType: RecognizedPhrase.Grammar
- uid: System.Speech.Recognition.RecognizedPhrase.HomophoneGroupId*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: HomophoneGroupId
  nameWithType: RecognizedPhrase.HomophoneGroupId
- uid: System.Speech.Recognition.RecognizedPhrase.Homophones*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Homophones
  nameWithType: RecognizedPhrase.Homophones
- uid: System.Speech.Recognition.RecognizedPhrase.ReplacementWordUnits*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: ReplacementWordUnits
  nameWithType: RecognizedPhrase.ReplacementWordUnits
- uid: System.Speech.Recognition.RecognizedPhrase.Semantics*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Semantics
  nameWithType: RecognizedPhrase.Semantics
- uid: System.Speech.Recognition.RecognizedPhrase.Text*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Text
  nameWithType: RecognizedPhrase.Text
- uid: System.Speech.Recognition.RecognizedPhrase.Words*
  parent: System.Speech.Recognition.RecognizedPhrase
  isExternal: false
  name: Words
  nameWithType: RecognizedPhrase.Words
