### YamlMime:ManagedReference
items:
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient
  id: UdpSingleSourceMulticastClient
  children:
  - System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)
  - System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)
  - System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose
  - System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)
  - System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)
  - System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)
  - System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize
  - System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize
  langs:
  - csharp
  name: UdpSingleSourceMulticastClient
  nameWithType: UdpSingleSourceMulticastClient
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient
  type: Class
  summary: "客户端接收方的多播流量从单个源，也称为源特定多播 (SSM)。"
  remarks: "必须知道的多播的组地址和发件人源地址。       从特定的发件人接收多播的数据，除了 UdpSingleSourceMulticastClient 客户端还可以返回到发件人发送单播数据。       若要接收多播来自多个源，或不在提前知道源时，请改为使用 UdpSingleSourceMulticastClient 类。"
  syntax:
    content: >-
      [System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]

      [System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)]

      public class UdpSingleSourceMulticastClient : IDisposable
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)
  id: '#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)'
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: UdpSingleSourceMulticastClient(IPAddress,IPAddress,Int32)
  nameWithType: UdpSingleSourceMulticastClient.UdpSingleSourceMulticastClient(IPAddress,IPAddress,Int32)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.UdpSingleSourceMulticastClient(IPAddress,IPAddress,Int32)
  type: Constructor
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "创建一个新<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;></xref>可以订阅组地址并从单一源接收数据报的 UDP 客户端。"
  remarks: "UdpSingleSourceMulticastClient 构造函数将 UDP 多播套接字的组地址和端口，与相关联，但不将绑定或以其他方式使用套接字。       `groupAddress`参数可能是 IPv6 或 IPv4 多播地址。 但是的地址族`sourceAddress`和`groupAddress`参数必须相同。       `localPort`参数必须指定一个端口小于 1024。"
  syntax:
    content: public UdpSingleSourceMulticastClient (System.Net.IPAddress sourceAddress, System.Net.IPAddress groupAddress, int localPort);
    parameters:
    - id: sourceAddress
      type: System.Net.IPAddress
      description: "此接收器要订阅的发送器源地址。"
    - id: groupAddress
      type: System.Net.IPAddress
      description: "此接收器要订阅的多播的组地址。"
    - id: localPort
      type: System.Int32
      description: "此接收器要绑定到本地端口。"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>sourceAddress</code>和<code>groupAddress</code>必须是相同的地址族。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sourceAddress</code>为空引用 (在 Visual Basic 中为 Nothing)。       -或-<code>groupAddress</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>localPort</code>小于 0-或-<code>localPort</code>大于 65,535。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "<code>localPort</code>小于 1024"
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)
  id: BeginJoinGroup(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: BeginJoinGroup(AsyncCallback,Object)
  nameWithType: UdpSingleSourceMulticastClient.BeginJoinGroup(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "绑定套接字并开始多播组以允许从单个源地址收到的数据报的联接操作。"
  remarks: "BeginJoinGroup 方法将 UDP 多播套接字绑定到的本地端口和联接多播的组以允许从单个源地址收到的数据报。 中指定的多播的组地址、 单个源地址和要绑定到的本地端口<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A>构造函数。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A>       中指定的方法`callback`要加入多播的组的操作已完成时调用参数。       如果需要由运行时，BeginJoinGroup 方法还会执行策略检查以验证客户端允许访问多播的组。 如果客户端不允许访问，<xref:System.Net.Sockets.SocketException>则会引发<xref:System.Net.Sockets.SocketError>。</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketException>"
  syntax:
    content: public IAsyncResult BeginJoinGroup (AsyncCallback callback, object state);
    parameters:
    - id: callback
      type: System.AsyncCallback
      description: "要在操作完成时调用回调方法。"
    - id: state
      type: System.Object
      description: "可选状态信息要传递给`callback`对于此操作的方法。"
    return:
      type: System.IAsyncResult
      description: "返回<xref:System.IAsyncResult>.</xref:System.IAsyncResult>       <xref:System.IAsyncResult>引用此操作。</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组，或联接操作当前正在进行。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: BeginReceiveFromSource(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: UdpSingleSourceMulticastClient.BeginReceiveFromSource(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(Byte[],Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "开始从已联接的多播组接收数据包的操作，并在来自指定发送器的数据包到达组时调用指定的回调。"
  remarks: "BeginReceiveFromSource 方法开始从来自单个发件人已联接的多播组接收 UDP 数据包的操作。 中指定的本地端口、 多播的组和发件人源地址<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A>构造函数。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A> 多播客户端必须具有已完成加入多播组。       中指定的方法`callback`收到数据包时，将调用参数。       它可具有套接字失败，如果接收操作失败同步，虽然这是使用 UDP 不常见。 如果发生套接字失败，<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public IAsyncResult BeginReceiveFromSource (byte[] buffer, int offset, int count, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "用于存储已接收的数据的缓冲区。"
    - id: offset
      type: System.Int32
      description: "偏移量，以字节为单位，从开始处`buffer`应在其中存储数据。"
    - id: count
      type: System.Int32
      description: "要接收并存储在字节的最大数`buffer`。"
    - id: callback
      type: System.AsyncCallback
      description: "要在操作完成时调用的回调方法。"
    - id: state
      type: System.Object
      description: "可选状态信息要传递给`callback`对于此操作的方法。"
    return:
      type: System.IAsyncResult
      description: "返回<xref:System.IAsyncResult>.</xref:System.IAsyncResult>       <xref:System.IAsyncResult>引用此操作。</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>小于 0-<code>offset</code>大于的长度<code>buffer</code>。       -<code>count</code>小于 0-<code>offset</code>加上计数大于的长度<code>buffer</code>。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问用于接收套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)
  id: BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: BeginSendToSource(Byte[],Int32,Int32,Int32,AsyncCallback,Object)
  nameWithType: UdpSingleSourceMulticastClient.BeginSendToSource(Byte[],Int32,Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(Byte[],Int32,Int32,Int32,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "开始之前指定的源发送单播数据包的操作。"
  remarks: "BeginSendToSource 方法开始将 UDP 数据包发送到以前指定的源的操作。       某些协议使用此信息来传递流控制，质量的服务统计信息或恢复消息。       中指定的方法`callback`发送数据包时，将调用参数。       客户端必须已完成加入多播组。       如果在指定目标端口`remotePort`参数为小于 1024，<xref:System.Net.Sockets.SocketException>则会引发<xref:System.Net.Sockets.SocketError>。</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketException>       它可具有套接字失败，如果发送操作失败同步，虽然这是使用 UDP 不常见。 如果发生套接字失败，<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public IAsyncResult BeginSendToSource (byte[] buffer, int offset, int count, int remotePort, AsyncCallback callback, object state);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "包含要发送的数据的缓冲区。"
    - id: offset
      type: System.Int32
      description: "偏移量，以字节为单位，从开始处`buffer`读取要发送的数据。"
    - id: count
      type: System.Int32
      description: "要从发送的字节数`buffer`。"
    - id: remotePort
      type: System.Int32
      description: "远程端口的数据包已发送。 通过指定的远程地址&lt;xref:System.Net.Sockets.UdpSingleSourceMulticastClient.%23ctor%2A&gt;构造函数。"
    - id: callback
      type: System.AsyncCallback
      description: "要在操作完成时调用的回调方法。"
    - id: state
      type: System.Object
      description: "可选状态信息要传递给`callback`对于此操作的方法。"
    return:
      type: System.IAsyncResult
      description: "返回<xref:System.IAsyncResult>.</xref:System.IAsyncResult>       <xref:System.IAsyncResult>引用此操作。</xref:System.IAsyncResult>"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>buffer</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>小于 0-<code>offset</code>大于的长度<code>buffer</code>。       -<code>count</code>小于 0-<code>offset</code>加上计数大于的长度<code>buffer</code>。       -或-<code>remotePort</code>小于 0 或大于 65,535。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose
  id: Dispose
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: Dispose()
  nameWithType: UdpSingleSourceMulticastClient.Dispose()
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose()
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "离开多播的组并释放使用的当前实例的所有资源<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;></xref>类和基础<xref:System.Net.Sockets.Socket>.</xref:System.Net.Sockets.Socket>"
  remarks: "在完成使用<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>.</xref:System.Net.Sockets.UdpSingleSourceMulticastClient>时调用的 Dispose Dispose 方法离开<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>中不可用状态。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient> 调用 Dispose 后，必须释放对所有引用<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>以便垃圾回收器才能回收的内存，<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>占用。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient> </xref:System.Net.Sockets.UdpSingleSourceMulticastClient>       在发布到<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient>最后一个引用之前，始终调用 Dispose 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>对象的<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.Net.Sockets.UdpSingleSourceMulticastClient>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)
  id: EndJoinGroup(System.IAsyncResult)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: EndJoinGroup(IAsyncResult)
  nameWithType: UdpSingleSourceMulticastClient.EndJoinGroup(IAsyncResult)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(IAsyncResult)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "完成异步联接组操作到多播组。"
  remarks: "EndJoinGroup 方法完成异步绑定到套接字和联接的多播组的操作。       如果需要由运行时，EndJoinGroup 方法还会执行策略检查以验证客户端允许访问多播的组。 如果客户端不允许访问，<xref:System.Net.Sockets.SocketException>则会引发<xref:System.Net.Sockets.SocketError>。</xref:System.Net.Sockets.SocketError> </xref:System.Net.Sockets.SocketException>       如果执行联接组操作，时套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void EndJoinGroup (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "异步联接操作的结果。"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>result</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)
  id: EndReceiveFromSource(System.IAsyncResult,System.Int32@)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: EndReceiveFromSource(IAsyncResult,Int32)
  nameWithType: UdpSingleSourceMulticastClient.EndReceiveFromSource(IAsyncResult,Int32)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(IAsyncResult,Int32)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "完成从已联接的多播组接收数据包的异步操作，并提供接收到的信息。"
  remarks: "EndReceiveFromSource 方法完成一个异步操作以从单个源中的多播组接收数据包。       如果在执行接收操作时出现套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public int EndReceiveFromSource (IAsyncResult result, out int sourcePort);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "结果的异步接收操作。"
    - id: sourcePort
      type: System.Int32
      description: "从中接收数据包时源终结点。"
    return:
      type: System.Int32
      description: "返回<xref:System.Int32>.</xref:System.Int32>       存储在消息的长度，以字节为单位， <code> buffer </code>参数传递给<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource*>方法。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource*>"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>result</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)
  id: EndSendToSource(System.IAsyncResult)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: EndSendToSource(IAsyncResult)
  nameWithType: UdpSingleSourceMulticastClient.EndSendToSource(IAsyncResult)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(IAsyncResult)
  type: Method
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "完成向单个源发送单播数据包的操作。"
  remarks: "EndSendToSource 方法完成一个异步操作以将数据包发送到以前指定的单一源。       如果在执行接收操作时出现套接字失败<xref:System.Net.Sockets.SocketException>引发。</xref:System.Net.Sockets.SocketException> 收到的错误指定的成员为<xref:System.Net.Sockets.SocketError>枚举。</xref:System.Net.Sockets.SocketError>"
  syntax:
    content: public void EndSendToSource (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "异步发送操作的结果。"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>result</code>为空引用 (在 Visual Basic 中为 Nothing)。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;> </xref>已释放。"
  - type: System.Net.Sockets.SocketException
    commentId: T:System.Net.Sockets.SocketException
    description: "在尝试访问套接字时出错。 请参阅备注部分以了解更多信息。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize
  id: ReceiveBufferSize
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: ReceiveBufferSize
  nameWithType: UdpSingleSourceMulticastClient.ReceiveBufferSize
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "获取或设置大小，以字节为单位的接收缓冲区的<xref:System.Net.Sockets.Socket>用于对此的多播的接收操作<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;></xref>实例。</xref:System.Net.Sockets.Socket>"
  remarks: "`ReceiveBufferSize`属性获取或设置大小，以字节为单位的接收缓冲区的基础<xref:System.Net.Sockets.Socket>用于对此的多播的接收操作<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>实例。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient> </xref:System.Net.Sockets.Socket> 具体而言，`ReceiveBufferSize`属性控制当数据包到达，但尚未调用应用程序时，堆栈所使用的缓冲区的大小<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>方法。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> 如果此缓冲区被填满和应用程序调用之前不断涌现数据包<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>和<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A>方法，旧的数据包将被丢弃。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource%2A> </xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A> 应用程序永远无法接收旧的数据包，并在它调用时将收到较新的数据包<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>方法。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource%2A>       在 Windows 上的接收缓冲区的默认大小为 8192。"
  syntax:
    content: public int ReceiveBufferSize { get; set; }
    return:
      type: System.Int32
      description: "返回<xref:System.Int32>.</xref:System.Int32>       以字节为单位的接收缓冲区的大小。"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的缓冲区大小小于 0。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;> </xref>已释放。"
  platform:
  - net462
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize
  id: SendBufferSize
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  langs:
  - csharp
  name: SendBufferSize
  nameWithType: UdpSingleSourceMulticastClient.SendBufferSize
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize
  type: Property
  assemblies:
  - System.Net
  namespace: System.Net.Sockets
  summary: "获取或设置大小，以字节为单位的发送缓冲区的<xref:System.Net.Sockets.Socket>用于对此的多播的发送操作<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;></xref>实例。</xref:System.Net.Sockets.Socket>"
  remarks: "SendBufferSize 属性获取或设置大小，以字节为单位的发送缓冲区的基础<xref:System.Net.Sockets.Socket>用于对此的多播的发送操作<xref:System.Net.Sockets.UdpSingleSourceMulticastClient>实例。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient> </xref:System.Net.Sockets.Socket>       在 Mac OS X 上 SendBufferSize 属性控制字节数可能处于网络堆栈发送等待缓冲区之前对其他调用<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A>方法启动失败。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> Mac OS X 上的应用程序可能需要加以注意此属性，如果它们在短时间范围内发送大量的 UDP 数据包。       在 Windows 上，调用<xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A>方法将采用较长的时间调用的回调根据 SendBufferSize 属性的值，如果发送缓冲区已满。</xref:System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource%2A> SendBufferSize 属性仅控制是否在物理内存中锁定用户的缓冲区保持直至发送完成。       在 Windows 上的发送缓冲区的默认大小为 8192。"
  syntax:
    content: public int SendBufferSize { get; set; }
    return:
      type: System.Int32
      description: "返回<xref:System.Int32>.</xref:System.Int32>       以字节为单位的发送缓冲区的大小。"
  overload: System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "指定的缓冲区大小小于 0。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "尚未联接多播的组。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "<xref href=&quot;System.Net.Sockets.UdpSingleSourceMulticastClient&quot;> </xref>已释放。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Net.Sockets.SocketException
  isExternal: true
  name: System.Net.Sockets.SocketException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor(System.Net.IPAddress,System.Net.IPAddress,System.Int32)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: UdpSingleSourceMulticastClient(IPAddress,IPAddress,Int32)
  nameWithType: UdpSingleSourceMulticastClient.UdpSingleSourceMulticastClient(IPAddress,IPAddress,Int32)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.UdpSingleSourceMulticastClient(IPAddress,IPAddress,Int32)
- uid: System.Net.IPAddress
  parent: System.Net
  isExternal: true
  name: IPAddress
  nameWithType: IPAddress
  fullName: System.Net.IPAddress
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: BeginJoinGroup(AsyncCallback,Object)
  nameWithType: UdpSingleSourceMulticastClient.BeginJoinGroup(AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: BeginReceiveFromSource(Byte[],Int32,Int32,AsyncCallback,Object)
  nameWithType: UdpSingleSourceMulticastClient.BeginReceiveFromSource(Byte[],Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource(Byte[],Int32,Int32,AsyncCallback,Object)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(System.Byte[],System.Int32,System.Int32,System.Int32,System.AsyncCallback,System.Object)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: BeginSendToSource(Byte[],Int32,Int32,Int32,AsyncCallback,Object)
  nameWithType: UdpSingleSourceMulticastClient.BeginSendToSource(Byte[],Int32,Int32,Int32,AsyncCallback,Object)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource(Byte[],Int32,Int32,Int32,AsyncCallback,Object)
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: Dispose()
  nameWithType: UdpSingleSourceMulticastClient.Dispose()
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose()
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(System.IAsyncResult)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: EndJoinGroup(IAsyncResult)
  nameWithType: UdpSingleSourceMulticastClient.EndJoinGroup(IAsyncResult)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup(IAsyncResult)
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(System.IAsyncResult,System.Int32@)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: EndReceiveFromSource(IAsyncResult,Int32)
  nameWithType: UdpSingleSourceMulticastClient.EndReceiveFromSource(IAsyncResult,Int32)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource(IAsyncResult,Int32)
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(System.IAsyncResult)
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: EndSendToSource(IAsyncResult)
  nameWithType: UdpSingleSourceMulticastClient.EndSendToSource(IAsyncResult)
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource(IAsyncResult)
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: UdpSingleSourceMulticastClient.ReceiveBufferSize
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: SendBufferSize
  nameWithType: UdpSingleSourceMulticastClient.SendBufferSize
  fullName: System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.#ctor*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: UdpSingleSourceMulticastClient
  nameWithType: UdpSingleSourceMulticastClient.UdpSingleSourceMulticastClient
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginJoinGroup*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: BeginJoinGroup
  nameWithType: UdpSingleSourceMulticastClient.BeginJoinGroup
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginReceiveFromSource*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: BeginReceiveFromSource
  nameWithType: UdpSingleSourceMulticastClient.BeginReceiveFromSource
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.BeginSendToSource*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: BeginSendToSource
  nameWithType: UdpSingleSourceMulticastClient.BeginSendToSource
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.Dispose*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: Dispose
  nameWithType: UdpSingleSourceMulticastClient.Dispose
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndJoinGroup*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: EndJoinGroup
  nameWithType: UdpSingleSourceMulticastClient.EndJoinGroup
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndReceiveFromSource*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: EndReceiveFromSource
  nameWithType: UdpSingleSourceMulticastClient.EndReceiveFromSource
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.EndSendToSource*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: EndSendToSource
  nameWithType: UdpSingleSourceMulticastClient.EndSendToSource
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.ReceiveBufferSize*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: ReceiveBufferSize
  nameWithType: UdpSingleSourceMulticastClient.ReceiveBufferSize
- uid: System.Net.Sockets.UdpSingleSourceMulticastClient.SendBufferSize*
  parent: System.Net.Sockets.UdpSingleSourceMulticastClient
  isExternal: false
  name: SendBufferSize
  nameWithType: UdpSingleSourceMulticastClient.SendBufferSize
