### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.Grammar
  id: Grammar
  children:
  - System.Speech.Recognition.Grammar.#ctor
  - System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)
  - System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)
  - System.Speech.Recognition.Grammar.#ctor(System.String)
  - System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)
  - System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)
  - System.Speech.Recognition.Grammar.#ctor(System.String,System.String)
  - System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])
  - System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)
  - System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])
  - System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)
  - System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])
  - System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])
  - System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])
  - System.Speech.Recognition.Grammar.Enabled
  - System.Speech.Recognition.Grammar.IsStg
  - System.Speech.Recognition.Grammar.Loaded
  - System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])
  - System.Speech.Recognition.Grammar.Name
  - System.Speech.Recognition.Grammar.Priority
  - System.Speech.Recognition.Grammar.ResourceName
  - System.Speech.Recognition.Grammar.RuleName
  - System.Speech.Recognition.Grammar.SpeechRecognized
  - System.Speech.Recognition.Grammar.StgInit(System.Object[])
  - System.Speech.Recognition.Grammar.Weight
  langs:
  - csharp
  name: Grammar
  nameWithType: Grammar
  fullName: System.Speech.Recognition.Grammar
  type: Class
  summary: "一个运行时对象引用语音识别语法，应用程序可以用于定义的语音识别的约束。"
  remarks: "语音识别语法是一套规则或语音识别引擎将可以识别为有意义的输入定义的约束。 有关创建和使用语音识别语法的详细信息，请参阅[语音识别](http://msdn.microsoft.com/en-us/6a7dc524-07fc-4862-8d48-8c10dc64b919)，[创建语法使用 XML](http://msdn.microsoft.com/en-us/2d799487-49c6-4cc9-b42f-f71cd3824fe1)，[创建语法使用 GrammarBuilder](http://msdn.microsoft.com/en-us/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)，和[创建语法使用 SrgsGrammar](http://msdn.microsoft.com/en-us/e4d9f96e-2241-4c39-b9e0-ac9ef4e9a906)。       创作语法后，你必须在它构建到语音识别引擎可加载和你的应用程序可用于在运行时管理语音识别的语法对象。 你可以使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数来创建语法实例从<xref:System.Speech.Recognition.GrammarBuilder>或<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>对象，或从文件或<xref:System.IO.Stream>包含受支持的格式语法的说明。</xref:System.IO.Stream> </xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar.%23ctor%2A> 支持的格式如下:-符合 W3C 的 XML 格式文件[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761) -已编译为具有.cfg 的二进制文件的语法文件扩展语法构造函数接受其自变量中的 XML 格式语法文件编译到由语音识别引擎针对加载和使用进行优化的二进制格式的 XML 语法。 你可以减少通过提前，编译语法构造中的 XML 格式语法的语法对象所需的时间量使用之一<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。</xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>       应用程序的语音识别引擎，为托管由<xref:System.Speech.Recognition.SpeechRecognizer>或<xref:System.Speech.Recognition.SpeechRecognitionEngine>对象，可以加载多个语音识别语法。</xref:System.Speech.Recognition.SpeechRecognitionEngine> </xref:System.Speech.Recognition.SpeechRecognizer> 应用程序可以单独启用或禁用各个语法，通过设置<xref:System.Speech.Recognition.Grammar.Enabled%2A>属性，并如修改通过语法属性，识别行为<xref:System.Speech.Recognition.Grammar.Priority%2A>和<xref:System.Speech.Recognition.Grammar.Weight%2A>属性。</xref:System.Speech.Recognition.Grammar.Weight%2A> </xref:System.Speech.Recognition.Grammar.Priority%2A> </xref:System.Speech.Recognition.Grammar.Enabled%2A>       语法的<xref:System.Speech.Recognition.Grammar.SpeechRecognized>输入匹配通过语法的路径时引发事件。</xref:System.Speech.Recognition.Grammar.SpeechRecognized>      1> [!NOTE]&1;> 验证任何 URI 或用于生成语法对象的 DLL 的安全最佳做法是。   >> Windows 和语音平台提供了构建语法实例从 DLL 或支持脚本语法的应用程序的安全性。   >> 就像从网页下载，始终运行语法对象中的脚本`Internet Zone`。 公共语言运行时 (CLR) 将加载以获取语法定义的任何 DLL 隔离开来。"
  example:
  - "The following example constructs a Grammar object from a speech recognition grammar defined in a XML file (cities.xml). The content of the cities.xml file appears in the following XML example.  \n  \n```c#  \n// Load a cities grammar from a local file and return the grammar object.   \nprivate static Grammar CreateGrammarFromFile()  \n{  \n  Grammar citiesGrammar = new Grammar(@\"c:\\temp\\cities.xml\");  \n  citiesGrammar.Name = \"SRGS File Cities Grammar\";  \n  return citiesGrammar;  \n}  \n  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.xml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("Grammar: {(_uri != null ? "uri=" + _uri.ToString () + " " : "") + "rule=" + _ruleName }")]

      public class Grammar
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar()
  nameWithType: Grammar.Grammar()
  fullName: System.Speech.Recognition.Grammar.Grammar()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类"
  syntax:
    content: protected Grammar ();
    parameters: []
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(Stream)
  nameWithType: Grammar.Grammar(Stream)
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>从一种<xref:System.IO.Stream>。</xref:System.IO.Stream>类"
  remarks: "此构造函数不将任何参数传递给初始化的处理程序，并描述不应定义一个初始化处理程序需要的自变量。       此构造函数可以创建<xref:System.Speech.Recognition.Grammar>实例从以下格式:-符合 W3C 的 XML 格式文件[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761) -在已编译为二进制文件的语法文件.cfg 文件扩展名为此构造函数将编译到由语音识别引擎针对加载和使用进行优化的二进制格式的 XML 格式语法文件。</xref:System.Speech.Recognition.Grammar> 你可以减少构造所需的时间量<xref:System.Speech.Recognition.Grammar>对象从通过编译语法，请提前使用之一的 XML 格式语法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。</xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> </xref:System.Speech.Recognition.Grammar>       SRGS 语法可以定义根规则。 若要创建<xref:System.Speech.Recognition.Grammar>从流对象和指定根规则，请使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>或<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar>       若要创建<xref:System.Speech.Recognition.Grammar>从流对象，并指定要用于解析相对规则引用的基 URI 使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example creates a speech recognition grammar from a local SRGS file (cities.xml) using a file stream. The content of the cities.xml file appears following C# example.  \n  \n```c#  \n  \n// Load a cities grammar from an I/O stream and    \n// return the new grammar.   \nprivate static Grammar CreateGrammarFromStream()  \n{  \n  string fileName = @\"c:\\temp\\cities.xml\";  \n  Grammar citiesGrammar =  \n    new Grammar(new FileStream(fileName, FileMode.Open));  \n  citiesGrammar.Name = \"Stream Cities Grammar\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.xml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item>Seattle</item>  \n      <item>Los Angeles</item>  \n      <item>New York</item>  \n      <item>Miami</item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public Grammar (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "介绍受支持的格式语音识别语法的流。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>描述不包含根规则语法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "流不包含有效的描述的语法，或描述包含无法解析的规则引用语法。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(GrammarBuilder)
  nameWithType: Grammar.Grammar(GrammarBuilder)
  fullName: System.Speech.Recognition.Grammar.Grammar(GrammarBuilder)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象。"
  remarks: "有关使用<xref:System.Speech.Recognition.GrammarBuilder>类以定义语法，请参阅[创建语法使用 GrammarBuilder](http://msdn.microsoft.com/en-us/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。</xref:System.Speech.Recognition.GrammarBuilder>"
  example:
  - "The following example creates a speech recognition grammar using <xref:System.Speech.Recognition.Choices> and <xref:System.Speech.Recognition.GrammarBuilder> objects. The Grammar constructor creates a <xref:System.Speech.Recognition.Grammar> object from the <xref:System.Speech.Recognition.GrammarBuilder> object.  \n  \n```c#  \n  \n// Create a grammar using a GrammarBuilder and return the new grammar.   \nprivate static Grammar CreateGrammarBuilderGrammar()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  \n  Choices cityChoice = new Choices (new string[]   \n  {\"Seattle\", \"New York\", \"Miami\", \"Los Angeles\"});  \n  \n  builder.Append(\"I would like to fly from\");  \n  builder.Append(cityChoice);  \n  builder.Append(\"to\");  \n  builder.Append(cityChoice);  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"GrammarBuilder Cities Grammar\";  \n  \n  return citiesGrammar;  \n}  \n```"
  syntax:
    content: public Grammar (System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>包含语音识别语法的约束。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)
  id: '#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(SrgsDocument)
  nameWithType: Grammar.Grammar(SrgsDocument)
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;></xref>对象。"
  remarks: "此构造函数不将任何参数传递给初始化的处理程序，与<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>不应包含的初始化的处理程序需要的参数。</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>       A<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>可具有一个根规则。</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> 若要创建<xref:System.Speech.Recognition.Grammar>对象，它指定根规则，使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>或<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar>       若要创建语音识别<xref:System.Speech.Recognition.Grammar>从<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>并指定要用于解析相对规则引用的基 URI 使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> </xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example creates a speech recognition grammar in an <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instance, which is then used to construct a <xref:System.Speech.Recognition.Grammar> object.  \n  \n```c#  \nprivate static Grammar CreateSrgsDocumentGrammar()  \n{  \n  // Create the SrgsDocument.  \n  SrgsDocument document = new SrgsDocument();  \n  \n  // Create the Cities rule and add it to the document.  \n  SrgsRule citiesRule = new SrgsRule(\"Cities\");  \n  \n  SrgsOneOf cityChoice = new SrgsOneOf();  \n  cityChoice.Add(new SrgsItem(\"Seattle\"));  \n  cityChoice.Add(new SrgsItem(\"Los Angeles\"));  \n  cityChoice.Add(new SrgsItem(\"New York\"));  \n  cityChoice.Add(new SrgsItem(\"Miami\"));  \n  \n  citiesRule.Add(cityChoice);  \n  document.Rules.Add(citiesRule);  \n  \n  // Create the Main rule and add it to the document.  \n  SrgsRule mainRule = new SrgsRule(\"Main\");  \n  mainRule.Scope = SrgsRuleScope.Public;  \n  \n  SrgsItem item = new SrgsItem(\"I would like to fly from\");  \n  item.Add(new SrgsRuleRef(citiesRule));  \n  item.Add(new SrgsText(\"to\"));  \n  item.Add(new SrgsRuleRef(citiesRule));  \n  \n  mainRule.Add(item);  \n  document.Rules.Add(mainRule);  \n  \n  // Set the root rule.  \n  document.Root = mainRule;  \n  \n  // Create the Grammar object.  \n  Grammar citiesGrammar = new Grammar(document);  \n  citiesGrammar.Name = \"SrgsDocument Cities Grammar\";  \n  \n  return citiesGrammar;  \n}  \n  \n```"
  syntax:
    content: public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument);
    parameters:
    - id: srgsDocument
      type: System.Speech.Recognition.SrgsGrammar.SrgsDocument
      description: "语音识别语法的约束。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>srgsDocument</code>不包含根规则。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>srgsDocument</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>srgsDocument</code>包含无法解析的规则引用。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(String)
  nameWithType: Grammar.Grammar(String)
  fullName: System.Speech.Recognition.Grammar.Grammar(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>文件中的类。"
  remarks: "此构造函数不将任何参数传递给初始化的处理程序，并描述不应定义一个初始化处理程序需要的自变量。       此构造函数可以创建<xref:System.Speech.Recognition.Grammar>实例从以下格式:-符合 W3C 的 XML 格式文件[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761) -在已编译为二进制文件的语法文件.cfg 文件扩展名为此构造函数将编译到由语音识别引擎针对加载和使用进行优化的二进制格式的 XML 格式语法文件。</xref:System.Speech.Recognition.Grammar> 你可以减少构造所需的时间量<xref:System.Speech.Recognition.Grammar>对象从通过编译语法，请提前使用之一的 XML 格式语法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。</xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> </xref:System.Speech.Recognition.Grammar>       SRGS 语法可以定义根规则。 若要创建<xref:System.Speech.Recognition.Grammar>从字符串对象和指定根规则，请使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar>       若要创建<xref:System.Speech.Recognition.Grammar>对象，它指定要用于解析相对规则引用的基 URI 打开中的文件流和使用的文件<xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=fullName>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A?displayProperty=fullName> </xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example loads a speech recognition grammar from a local SRGS file to build a <xref:System.Speech.Recognition.Grammar> object. The content of the cities.xml file appears in the XML example that follows the C# example.  \n  \n```c#  \n// Load a cities grammar from a local file and  \n// return the new grammar.   \nprivate static Grammar CreateGrammarFromFile()  \n{  \n  Grammar citiesGrammar = new Grammar(@\"c:\\temp\\cities.xml\");  \n  citiesGrammar.Name = \"SRGS File Cities Grammar\";  \n  return citiesGrammar;  \n}  \n  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.xml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item>Seattle</item>  \n      <item>Los Angeles</item>  \n      <item>New York</item>  \n      <item>Miami</item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public Grammar (string path);
    parameters:
    - id: path
      type: System.String
      description: "描述中受支持的格式语音识别语法的文件的路径。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>path</code>包含空字符串 (&quot;&quot;)，或此文件描述了不包含根规则语法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "文件不包含有效的说明，或描述包含无法解析的规则引用语法。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)
  id: '#ctor(System.IO.Stream,System.String)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(Stream,String)
  nameWithType: Grammar.Grammar(Stream,String)
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream,String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类<xref:System.IO.Stream>，并指定根规则。</xref:System.IO.Stream>"
  remarks: "此构造函数不将任何参数传递给初始化的处理程序，并描述不应定义一个初始化处理程序需要的自变量。       此构造函数可以创建<xref:System.Speech.Recognition.Grammar>实例从以下格式:-符合 W3C 的 XML 格式文件[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761) -在已编译为二进制文件的语法文件.cfg 文件扩展名为此构造函数将编译到由语音识别引擎针对加载和使用进行优化的二进制格式的 XML 格式语法文件。</xref:System.Speech.Recognition.Grammar> 你可以减少构造所需的时间量<xref:System.Speech.Recognition.Grammar>对象从通过编译语法，请提前使用之一的 XML 格式语法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。</xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> </xref:System.Speech.Recognition.Grammar>       若要创建<xref:System.Speech.Recognition.Grammar>从流和指定要用于解析相对规则引用的基 URI 使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example loads a local SRGS file (cities.xml) from a file stream and specifies a rule to use as the root of the grammar. The content of the cities.xml file appears in the XML example that follows the C# example.  \n  \n```c#  \n  \n// Load a cities grammar from an I/O stream, use a specific  \n// rule as the root of the grammar, and return the new grammar.   \nprivate static Grammar CreateGrammarFromStream2()  \n{  \n  FileInfo file = new FileInfo(@\"c:\\temp\\cities.xml\");  \n  Grammar citiesGrammar = new Grammar(file.OpenRead(), \"Main\");  \n  citiesGrammar.Name = \"Stream Cities Grammar 2\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.xml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item>Seattle</item>  \n      <item>Los Angeles</item>  \n      <item>New York</item>  \n      <item>Miami</item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public Grammar (System.IO.Stream stream, string ruleName);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "介绍受支持的格式语音识别语法的流。"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的语法说明的默认根规则。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ruleName</code>无法解析或不是公共的或<code>ruleName</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且语法说明未定义根规则。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "流不包含有效的描述，或描述包含无法解析的规则引用语法。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)
  id: '#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(SrgsDocument,String)
  nameWithType: Grammar.Grammar(SrgsDocument,String)
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument,String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;></xref>对象，并指定根规则。"
  remarks: "此构造函数不将任何参数传递给初始化的处理程序，与<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>不应包含的初始化的处理程序需要的参数。</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>       若要创建<xref:System.Speech.Recognition.Grammar>对象<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>并指定要用于解析相对规则引用的基 URI 使用<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> </xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example creates a speech recognition grammar in an <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instance and specifies a rule to use as the root rule of the grammar. The example constructs a <xref:System.Speech.Recognition.Grammar> object from the <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> instance and loads it into the speech recognition engine.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \nusing System.Speech.Recognition.SrgsGrammar;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create the SrgsDocument.  \n        SrgsDocument document = new SrgsDocument();  \n  \n        // Create the Cities rule and add it to the document.  \n        SrgsRule citiesRule = new SrgsRule(\"Cities\");  \n        citiesRule.Scope = SrgsRuleScope.Public;  \n  \n        SrgsOneOf cityChoice = new SrgsOneOf();  \n        cityChoice.Add(new SrgsItem(\"Seattle\"));  \n        cityChoice.Add(new SrgsItem(\"Los Angeles\"));  \n        cityChoice.Add(new SrgsItem(\"New York\"));  \n        cityChoice.Add(new SrgsItem(\"Miami\"));  \n  \n        citiesRule.Add(cityChoice);  \n        document.Rules.Add(citiesRule);  \n  \n        // Create the Main rule and add it to the document.  \n        SrgsRule mainRule = new SrgsRule(\"Main\");  \n        mainRule.Scope = SrgsRuleScope.Public;  \n  \n        mainRule.Add(new SrgsItem(\"I would like to fly from\"));  \n        mainRule.Add(new SrgsRuleRef(citiesRule));  \n        mainRule.Add(new SrgsItem(\"to\"));  \n        mainRule.Add(new SrgsRuleRef(citiesRule));  \n  \n        document.Rules.Add(mainRule);  \n  \n        // Create the Grammar object and specify which rule to use as the root.  \n        Grammar citiesGrammar = new Grammar(document,\"Main\");  \n  \n        // Load the grammar object to the recognizer.  \n        recognizer.LoadGrammarAsync(citiesGrammar);  \n  \n        // Attach a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=  \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Set the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Start recognition.  \n        recognizer.RecognizeAsync();  \n        Console.WriteLine(\"Starting aynchronous recognition...\");  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"  Speech recognized: \" + e.Result.Text);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName);
    parameters:
    - id: srgsDocument
      type: System.Speech.Recognition.SrgsGrammar.SrgsDocument
      description: "语音识别语法的约束。"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的默认根规则<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ruleName</code>无法解析或不是公共的或<code>ruleName</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>和<code>srgsDocument</code>不包含根规则。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>srgsDocument</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>srgsDocument</code>包含无法解析的规则引用。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(String,String)
  nameWithType: Grammar.Grammar(String,String)
  fullName: System.Speech.Recognition.Grammar.Grammar(String,String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类从文件并指定根规则。"
  remarks: "此构造函数不将任何参数传递给初始化的处理程序，并描述不应定义一个初始化处理程序需要的自变量。       此构造函数可以创建<xref:System.Speech.Recognition.Grammar>实例从以下格式:-符合 W3C 的 XML 格式文件[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761) -在已编译为二进制文件的语法文件.cfg 文件扩展名为此构造函数将编译到由语音识别引擎针对加载和使用进行优化的二进制格式的 XML 格式语法文件。</xref:System.Speech.Recognition.Grammar> 你可以减少构造所需的时间量<xref:System.Speech.Recognition.Grammar>对象从通过编译语法，请提前使用之一的 XML 格式语法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。</xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> </xref:System.Speech.Recognition.Grammar>       若要创建<xref:System.Speech.Recognition.Grammar>，它指定要用来解析相对规则引用、 打开该文件的文件流和使用的基 URI<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example loads a local SRGS file (cities.xml) from a file and specifies a rule to use as the root of the grammar. The content of the cities.xml file appears in the XML example that follows the C# example.  \n  \n```c#  \n  \n// Load a cities grammar from a local file, use a specific  \n// rule as the root of the grammar, and return the new grammar.  \nprivate static Grammar CreateGrammarFromFile2()  \n{  \n  Grammar citiesGrammar = new Grammar(@\"c:\\temp\\cities.xml\", \"Main\");  \n  citiesGrammar.Name = \"SRGS File Cities Grammar 2\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.xml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item>Seattle</item>  \n      <item>Los Angeles</item>  \n      <item>New York</item>  \n      <item>Miami</item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public Grammar (string path, string ruleName);
    parameters:
    - id: path
      type: System.String
      description: "描述中受支持的格式语音识别语法的文件的路径。"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的语法说明的默认根规则。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ruleName</code>无法解析或不是公共的<code>path</code>为空字符串 (&quot;&quot;)，或<code>ruleName</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且语法说明未定义根规则。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "文件不包含有效的描述，或描述包含无法解析的规则引用语法。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])
  id: '#ctor(System.IO.Stream,System.String,System.Object[])'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(Stream,String,Object[])
  nameWithType: Grammar.Grammar(Stream,String,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream,String,Object[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类<xref:System.IO.Stream>，并指定根规则。</xref:System.IO.Stream>"
  remarks: "此外可以指定的初始化处理程序的参数。"
  syntax:
    content: public Grammar (System.IO.Stream stream, string ruleName, object[] parameters);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>连接到一个包含语法规范的输入/输出对象 （包括文件、 VisualStudio 资源和 Dll）。</xref:System.IO.Stream>"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的语法说明的默认根规则。"
    - id: parameters
      type: System.Object[]
      description: "参数传递给由指定的初始化处理<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*>入口点或的根规则属性<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>要创建。</xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*> 此参数可以为 null。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>stream</code>连接到某个语法的:-不包含在指定的规则<code>ruleName</code>      -需要初始化参数中指定不同<code>parameters</code>      -包含无法解析的默认基的相对规则引用<xref:System.Uri>的语法规则"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)
  id: '#ctor(System.IO.Stream,System.String,System.Uri)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(Stream,String,Uri)
  nameWithType: Grammar.Grammar(Stream,String,Uri)
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream,String,Uri)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类从流、 指定根规则，并定义基统一资源标识符 (URI) 来解析相对规则引用。"
  remarks: "此构造函数不将任何参数传递给初始化的处理程序，并描述不应定义一个初始化处理程序需要的自变量。       此构造函数可以创建<xref:System.Speech.Recognition.Grammar>实例从以下格式:-符合 W3C 的 XML 格式文件[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761) -在已编译为二进制文件的语法文件.cfg 文件扩展名为此构造函数将编译到由语音识别引擎针对加载和使用进行优化的二进制格式的 XML 格式语法文件。</xref:System.Speech.Recognition.Grammar> 你可以减少构造所需的时间量<xref:System.Speech.Recognition.Grammar>对象从通过编译语法，请提前使用之一的 XML 格式语法<xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A>方法。</xref:System.Speech.Recognition.SrgsGrammar.SrgsGrammarCompiler.Compile%2A> </xref:System.Speech.Recognition.Grammar>       此构造函数不会验证`baseUri`。 但是，`LoadGrammar`方法<xref:System.Speech.Recognition.SpeechRecognitionEngine>或<xref:System.Speech.Recognition.SpeechRecognizer>对象时它不能解析所有语法说明中的规则引用引发异常。</xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.SpeechRecognitionEngine> 如果`baseUri`不`null`、`LoadGrammar`方法使用 URI 来解析它否则无法解析的任何规则引用。 如果`baseUri`表示的文件，则`LoadGrammar`尝试解析相对规则引用时将使用指定的文件和文件的目录。"
  example:
  - "The following example loads a local SRGS file (shuttle.xml) from a file stream. The file contains a relative rule reference to a rule in the cities.xml file, and specifies a base URI to use to resolve the rule reference. The content of the shuttle.xml and cities.xml files appears in the XML examples that follow the C# example.  \n  \n```c#  \n  \nprivate static Grammar CreateGrammarFromStream3()  \n{  \n  FileInfo file = new FileInfo(@\".\\shuttle.xml\");  \n  Uri baseUri = new Uri(@\"file://c:\\temp\\\");  \n  Grammar citiesGrammar = new Grammar(file.OpenRead(), null, baseUri);  \n  citiesGrammar.Name = \"Stream Cities Grammar 3\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- shuttle.xml:   \n    Defines an SRGS grammar for asking about a shuttle service. This grammar  \n    references a Cities rule that is defined in the cities.xml grammar. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      Can I get a shuttle in  \n      <ruleref uri=\"cities.xml#Cities\"/>  \n    </item>  \n  </rule>  \n</grammar>  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.xml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item>Seattle</item>  \n      <item>Los Angeles</item>  \n      <item>New York</item>  \n      <item>Miami</item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "介绍受支持的格式语音识别语法的流。"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的语法说明的默认根规则。"
    - id: baseUri
      type: System.Uri
      description: "要用于解析在语法描述中，任何相对规则引用的基 URI 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ruleName</code>无法解析或不是公共的或<code>ruleName</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且语法说明未定义根规则。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "流不包含有效的描述，或描述包含无法解析的规则引用语法。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])
  id: '#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(SrgsDocument,String,Object[])
  nameWithType: Grammar.Grammar(SrgsDocument,String,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument,String,Object[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类的实例从<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>，并指定规则为语法的入口点的名称。"
  remarks: "此外可以指定的初始化处理程序的参数。"
  syntax:
    content: public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, object[] parameters);
    parameters:
    - id: srgsDocument
      type: System.Speech.Recognition.SrgsGrammar.SrgsDocument
      description: "实例<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;></xref>包含语音识别语法的约束。"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的语法说明的默认根规则。"
    - id: parameters
      type: System.Object[]
      description: "参数传递给由指定的初始化处理<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*>入口点或的根规则属性<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>要创建。</xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*> 此参数可以为 null。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-任何参数包含无效的值。      - <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>指定的<code> srgsDocument </code>不包含由指定的规则<code> ruleName </code>。      的数组参数内容不匹配任何规则的初始化的处理程序的自的变量。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)
  id: '#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(SrgsDocument,String,Uri)
  nameWithType: Grammar.Grammar(SrgsDocument,String,Uri)
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument,String,Uri)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;></xref>对象，指定根规则，并且定义基统一资源标识符 (URI) 来解析相对规则引用。"
  remarks: "此构造函数不将任何参数传递给初始化的处理程序，与<xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>不应包含的初始化的处理程序需要的参数。</xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument>       此构造函数不会验证`baseUri`。 但是，`LoadGrammar`方法<xref:System.Speech.Recognition.SpeechRecognitionEngine>或<xref:System.Speech.Recognition.SpeechRecognizer>对象时它不能解析所有语法说明中的规则引用引发异常。</xref:System.Speech.Recognition.SpeechRecognizer> </xref:System.Speech.Recognition.SpeechRecognitionEngine> 如果`baseUri`不`null`、`LoadGrammar`方法使用 URI 来解析它否则无法解析的任何规则引用。 如果`baseUri`表示的文件，则`LoadGrammar`时它将尝试解析相对规则引用，方法将使用指定的文件和文件的目录。"
  example:
  - "The following example creates a speech recognition grammar in an <xref:System.Speech.Recognition.SrgsGrammar.SrgsDocument> that contains a relative rule reference to the cities.xml file, and specifies a URI to use to resolve the rule reference. The content of the cities.xml file appears in the XML example that follows the C# example.  \n  \n```c#  \n  \nprivate static Grammar CreateSrgsDocumentGrammar3()  \n{  \n  // Create the SrgsDocument.  \n  SrgsDocument document = new SrgsDocument();  \n  \n  // Create the Main rule and add it to the document.  \n  SrgsRule mainRule = new SrgsRule(\"Main\");  \n  mainRule.Scope = SrgsRuleScope.Public;  \n  \n  SrgsItem item = new SrgsItem(\"Can I get a shuttle in\");  \n  \n  // Create a relative URI for the cities rule.  \n  Uri ruleUri = new Uri(\"cities.xml#Cities\", UriKind.Relative);  \n  \n  item.Add(new SrgsRuleRef(ruleUri));  \n  \n  mainRule.Add(item);  \n  document.Rules.Add(mainRule);  \n  \n  // Set the root rule.  \n  document.Root = mainRule;  \n  \n  // Create the grammar.  \n  Uri baseUri = new Uri(@\"file://c:\\temp\\\");  \n  Grammar citiesGrammar = new Grammar(document, null, baseUri);  \n  citiesGrammar.Name = \"SrgsDocument Cities Grammar 3\";  \n  \n  return citiesGrammar;  \n}  \n  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.xml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item>Seattle</item>  \n      <item>Los Angeles</item>  \n      <item>New York</item>  \n      <item>Miami</item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri);
    parameters:
    - id: srgsDocument
      type: System.Speech.Recognition.SrgsGrammar.SrgsDocument
      description: "语音识别语法的约束。"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的默认根规则<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>。"
    - id: baseUri
      type: System.Uri
      description: "用来解析中的任何相对规则引用的基 URI <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>ruleName</code>无法解析或不是公共的或<code>ruleName</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>和<code>srgsDocument</code>不包含根规则。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>srgsDocument</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.FormatException
    commentId: T:System.FormatException
    description: "<code>srgsDocument</code>包含无法解析的规则引用。"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])
  id: '#ctor(System.String,System.String,System.Object[])'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(String,String,Object[])
  nameWithType: Grammar.Grammar(String,String,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(String,String,Object[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类的文件中包含的语法定义，并指定规则为语法的入口点的名称..."
  remarks: "此外可以指定的初始化处理程序的参数。"
  syntax:
    content: public Grammar (string path, string ruleName, object[] parameters);
    parameters:
    - id: path
      type: System.String
      description: "包含的文件，包括 Dll，语法规范路径。"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的语法说明的默认根规则。"
    - id: parameters
      type: System.Object[]
      description: "参数传递给由指定的初始化处理<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*>入口点或的根规则属性<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>要创建。</xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*> 此参数可以为 null。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-任何参数包含无效的值。      -通过指定的文件<code> path </code>不包含有效的语法或在指定的规则<code> ruleName </code>。      的数组参数内容不匹配任何规则的初始化的处理程序的自的变量。      -语法具有无法解析的默认基的相对规则引用<xref:System.Uri>的语法规则。</xref:System.Uri>"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])
  id: '#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(Stream,String,Uri,Object[])
  nameWithType: Grammar.Grammar(Stream,String,Uri,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream,String,Uri,Object[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类<xref:System.IO.Stream>，并指定根规则和用于解析相对引用的基 URI。</xref:System.IO.Stream>"
  remarks: "此外可以指定的初始化处理程序的参数。"
  syntax:
    content: public Grammar (System.IO.Stream stream, string ruleName, Uri baseUri, object[] parameters);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>连接到一个包含语法规范的输入/输出对象 （包括文件、 VisualStudio 资源和 Dll）。</xref:System.IO.Stream>"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的语法说明的默认根规则。"
    - id: baseUri
      type: System.Uri
      description: "要用于解析在语法描述中，任何相对规则引用的基 URI 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: parameters
      type: System.Object[]
      description: "参数传递给由指定的初始化处理<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*>入口点或的根规则属性<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>要创建。</xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*> 此参数可以为 null。"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-任何参数包含无效的值。      - <code> stream </code>连接到不包含由指定的规则语法<code> ruleName </code>。      的数组参数内容不匹配任何规则的初始化的处理程序的自的变量。      -语法包含无法解析的默认基的相对规则引用<xref:System.Uri>语法或由提供的 URI 规则<code> baseUri </code>。</xref:System.Uri>"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])
  id: '#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])'
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Grammar(SrgsDocument,String,Uri,Object[])
  nameWithType: Grammar.Grammar(SrgsDocument,String,Uri,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument,String,Uri,Object[])
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>类的实例从<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>，并指定要在语法和用于解析相对引用的基 URI 的入口点的规则的名称。"
  remarks: "此外可以指定的初始化处理程序的参数。"
  syntax:
    content: public Grammar (System.Speech.Recognition.SrgsGrammar.SrgsDocument srgsDocument, string ruleName, Uri baseUri, object[] parameters);
    parameters:
    - id: srgsDocument
      type: System.Speech.Recognition.SrgsGrammar.SrgsDocument
      description: "实例<xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;></xref>包含语音识别语法的约束。"
    - id: ruleName
      type: System.String
      description: "要作为入口点的语音识别语法中，使用的规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>若要使用的语法说明的默认根规则。"
    - id: baseUri
      type: System.Uri
      description: "要用于解析在语法描述中，任何相对规则引用的基 URI 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
    - id: parameters
      type: System.Object[]
      description: "要传递到初始化的处理程序的入口点或的根规则<xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*>属性指定参数<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>要创建。此参数可以为 null。</xref:System.Speech.Recognition.SrgsGrammar.SrgsRule.OnInit*>"
  overload: System.Speech.Recognition.Grammar.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "-任何参数包含无效的值。      - <xref href=&quot;System.Speech.Recognition.SrgsGrammar.SrgsDocument&quot;> </xref>指定的<code> srgsDocument </code>不包含在指定的规则<code> ruleName </code>。      的数组参数内容不匹配任何规则的初始化的处理程序的自的变量。      -语法具有无法解析的默认基的相对规则引用<xref:System.Uri>语法或由提供的 URI 规则<code> baseUri </code>。</xref:System.Uri>"
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.Enabled
  id: Enabled
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Enabled
  nameWithType: Grammar.Enabled
  fullName: System.Speech.Recognition.Grammar.Enabled
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取或设置一个值，控制是否<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>语音识别器可以用于执行识别。"
  remarks: "实例<xref:System.Speech.Recognition.Grammar>可能启用或禁用独立于被语音识别引擎加载。</xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example writes information about a <xref:System.Speech.Recognition.Grammar> object to the [console](http://go.microsoft.com/fwlink/?LinkId=159613).  \n  \n```c#  \n  \nprivate static void DumpGrammarStatus(Grammar item)  \n{  \n  Console.WriteLine(\"Grammar name is {0}:\", item.Name);  \n  Console.WriteLine(\"  The Grammar {0} loaded.\",  \n    item.Loaded ? \"is\" : \"is not\");  \n  Console.WriteLine(\"  The Grammar {0} enabled.\",  \n    item.Enabled ? \"is\" : \"is not\");  \n  if (item.RuleName != null)  \n  {  \n    Console.WriteLine(\"  The root rule is {0}.\", item.RuleName);  \n  }  \n  else  \n  {  \n    Console.WriteLine(\"  The Grammar does not specify a root rule.\");  \n  }  \n}  \n```"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Enabled&quot; name=&quot;Enabled&quot; href=&quot;&quot;> </xref>属性返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果语音识别器可以执行识别使用语音识别语法; 否则该属性返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.Grammar.Enabled*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.IsStg
  id: IsStg
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: IsStg
  nameWithType: Grammar.IsStg
  fullName: System.Speech.Recognition.Grammar.IsStg
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取是否强类型的语法。"
  remarks: "一个强类型<xref:System.Speech.Recognition.Grammar>对象 (`IsStg`等于`true`) 可以返回到客户端应用程序的强类型的结果 （对象，而不是原始文本）。</xref:System.Speech.Recognition.Grammar> 例如，可能会返回强类型的语法<xref:System.DateTime>对象而不是原始识别的输入。</xref:System.DateTime>       你可以通过将代码附加到的语法规则实现强类型的语法。 识别引擎处理任何给定的规则，拍摄作为输入当前部分结果、 执行关联的代码和文本信息变得丰富类型对象。 这允许客户端更轻松地使用增强的语义检查，支持针对多个区域性和内部语法逻辑。       强类型的实例<xref:System.Speech.Recognition.Grammar>对象通常从一个程序集作为中的资源中获取<xref:System.Type>的公共语言运行时 (CLR)。</xref:System.Type> </xref:System.Speech.Recognition.Grammar> 用于支持不同语言的本地化的类型是这样的示例<xref:System.Speech.Recognition.Grammar>对象。</xref:System.Speech.Recognition.Grammar>"
  syntax:
    content: protected virtual bool IsStg { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_IsStg&quot; name=&quot;IsStg&quot; href=&quot;&quot;> </xref>属性返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果语法是强类型; 否则该属性返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.Grammar.IsStg*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.Loaded
  id: Loaded
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Loaded
  nameWithType: Grammar.Loaded
  fullName: System.Speech.Recognition.Grammar.Loaded
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取是否<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>语音识别器已加载。"
  remarks: "一次<xref:System.Speech.Recognition.Grammar>已加载的值<xref:System.Speech.Recognition.Grammar.Weight%2A>，和<xref:System.Speech.Recognition.Grammar.Priority%2A>不能更改。</xref:System.Speech.Recognition.Grammar.Priority%2A> </xref:System.Speech.Recognition.Grammar.Weight%2A> </xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example writes information about a <xref:System.Speech.Recognition.Grammar> object to the [console](http://go.microsoft.com/fwlink/?LinkId=159613).  \n  \n```c#  \n  \nprivate static void DumpGrammarStatus(Grammar item)  \n{  \n  Console.WriteLine(\"Grammar name is {0}:\", item.Name);  \n  Console.WriteLine(\"  The Grammar {0} loaded.\",  \n    item.Loaded ? \"is\" : \"is not\");  \n  Console.WriteLine(\"  The Grammar {0} enabled.\",  \n    item.Enabled ? \"is\" : \"is not\");  \n  if (item.RuleName != null)  \n  {  \n    Console.WriteLine(\"  The root rule is {0}.\", item.RuleName);  \n  }  \n  else  \n  {  \n    Console.WriteLine(\"  The Grammar does not specify a root rule.\");  \n  }  \n}  \n```"
  syntax:
    content: public bool Loaded { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_Loaded&quot; name=&quot;Loaded&quot; href=&quot;&quot;> </xref>属性返回<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果引用的语音识别语法当前已加载在语音识别器; 否则该属性返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.Grammar.Loaded*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])
  id: LoadLocalizedGrammarFromType(System.Type,System.Object[])
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: LoadLocalizedGrammarFromType(Type,Object[])
  nameWithType: Grammar.LoadLocalizedGrammarFromType(Type,Object[])
  fullName: System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(Type,Object[])
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "<xref uid=&quot;langword_csharp_LoadLocalizedGrammarFromType&quot; name=&quot;LoadLocalizedGrammarFromType&quot; href=&quot;&quot;> </xref>方法返回的本地化的实例<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>对象派生自<xref:System.Type>.</xref:System.Type>"
  remarks: "本地化使用获取语法`LoadLocalizedGrammarFromType`是通常强类型 (请参阅<xref:System.Speech.Recognition.Grammar.IsStg%2A>为强类型的语法的详细信息)。</xref:System.Speech.Recognition.Grammar.IsStg%2A> 如果`onInitParameters`为空引用 (在 Visual Basic 中为 Nothing) 的本地化语法应具有初始化方法或不带任何参数的方法。"
  syntax:
    content: public static System.Speech.Recognition.Grammar LoadLocalizedGrammarFromType (Type type, object[] onInitParameters);
    parameters:
    - id: type
      type: System.Type
      description: "在程序集中，<xref:System.Type>的基于对象的<xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref>。</xref:System.Type>"
    - id: onInitParameters
      type: System.Object[]
      description: "参数传递给 localizedobject 初始化方法基于<xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref>。 此参数可以为 null。"
    return:
      type: System.Speech.Recognition.Grammar
      description: "<xref uid=&quot;langword_csharp_LoadLocalizedGrammarFromType&quot; name=&quot;LoadLocalizedGrammarFromType&quot; href=&quot;&quot;> </xref>方法返回有效的对象基于<xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果已出错。"
  overload: System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.Name
  id: Name
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Name
  nameWithType: Grammar.Name
  fullName: System.Speech.Recognition.Grammar.Name
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取或设置的名称<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>对象。"
  remarks: ''
  example:
  - "The following example creates two <xref:System.Speech.Recognition.Grammar> objects, one for digits and one for fractions. The Grammar objects are assigned names and relative weights and priorities, and loaded by an in-process speech recognizer. The `CreateDigitsGrammar`, `CreateFractionsGrammar`, and `recognizer_SpeechRecognized` methods are not shown here.  \n  \n```c#  \n  \n// Create a Grammar for recognizing numeric digits.  \nGrammar digitsGrammar = CreateDigitsGrammar();  \ndigitsGrammar.Name = \"Digits Grammar\";  \ndigitsGrammar.Priority = 2;  \ndigitsGrammar.Weight = 0.6f;  \n  \n// Create a Grammar for recognizing fractions.  \nGrammar fractionsGrammar = CreateFractionsGrammar();  \nfractionsGrammar.Name = \"Fractions Grammar\";  \nfractionsGrammar.Priority = 1;  \nfractionsGrammar.Weight = 1f;  \n  \n// Create an in-process speech recognizer.  \nSpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  \n  \nrecognizer.SpeechRecognized +=  \n  new EventHandler<SpeechRecognizedEventArgs>(  \n    recognizer_SpeechRecognized);  \n  \n// Load the digits and fractions Grammar objects.  \nrecognizer.LoadGrammar(digitsGrammar);  \nrecognizer.LoadGrammar(fractionsGrammar);  \n  \n// Start recognition.  \nrecognizer.SetInputToDefaultAudioDevice();  \nrecognizer.RecognizeAsync(RecognizeMode.Multiple);  \n```"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_Name&quot; name=&quot;Name&quot; href=&quot;&quot;> </xref>属性返回的名称<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>对象。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.Grammar.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.Priority
  id: Priority
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Priority
  nameWithType: Grammar.Priority
  fullName: System.Speech.Recognition.Grammar.Priority
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取或设置的优先级值<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>对象。"
  remarks: "`Priority`属性用于在多个语法将生成相同的识别结果时选择语法。 如果语音识别器具有多个语音识别语法加载并启用符合输入，并且匹配不识别的最佳结果，则在识别器使用的语法，具有最高`Priority`。 如果生成相同的识别结果的语法也具有相同`Priority`值，则在识别器使用的语法是不确定。"
  example:
  - "The following example creates two <xref:System.Speech.Recognition.Grammar> objects, one for digits and one for fractions. The <xref:System.Speech.Recognition.Grammar> objects are assigned names and relative weights and priorities, and loaded by an in-process speech recognizer. The `CreateDigitsGrammar`, `CreateFractionsGrammar`, and `recognizer_SpeechRecognized` methods are not shown here.  \n  \n```c#  \n  \n// Create a Grammar for recognizing numeric digits.  \nGrammar digitsGrammar = CreateDigitsGrammar();  \ndigitsGrammar.Name = \"Digits Grammar\";  \ndigitsGrammar.Priority = 2;  \ndigitsGrammar.Weight = 0.6f;  \n  \n// Create a Grammar for recognizing fractions.  \nGrammar fractionsGrammar = CreateFractionsGrammar();  \nfractionsGrammar.Name = \"Fractions Grammar\";  \nfractionsGrammar.Priority = 1;  \nfractionsGrammar.Weight = 1f;  \n  \n// Create an in-process speech recognizer.  \nSpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  \n  \nrecognizer.SpeechRecognized +=  \n  new EventHandler<SpeechRecognizedEventArgs>(  \n    recognizer_SpeechRecognized);  \n  \n// Load the digits and fractions Grammar objects.  \nrecognizer.LoadGrammar(digitsGrammar);  \nrecognizer.LoadGrammar(fractionsGrammar);  \n  \n// Start recognition.  \nrecognizer.SetInputToDefaultAudioDevice();  \nrecognizer.RecognizeAsync(RecognizeMode.Multiple);  \n```"
  syntax:
    content: public int Priority { get; set; }
    return:
      type: System.Int32
      description: "<xref uid=&quot;langword_csharp_Priority&quot; name=&quot;Priority&quot; href=&quot;&quot;> </xref>属性返回一个整数值，表示特定的相对优先级<xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref>。 范围是从-128 到 127 （含)。 默认值为 0。"
  overload: System.Speech.Recognition.Grammar.Priority*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.ResourceName
  id: ResourceName
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: ResourceName
  nameWithType: Grammar.ResourceName
  fullName: System.Speech.Recognition.Grammar.ResourceName
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取或设置一个值替换为用于加载当前的二进制资源的名称<xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref>。"
  syntax:
    content: protected string ResourceName { get; set; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_ResourceName&quot; name=&quot;ResourceName&quot; href=&quot;&quot;> </xref>属性返回的强类型的语法，通过从其的使用的二进制资源的名称<xref href=&quot;System.Speech.Recognition.Grammar&quot;> </xref>，已加载。"
  overload: System.Speech.Recognition.Grammar.ResourceName*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.RuleName
  id: RuleName
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: RuleName
  nameWithType: Grammar.RuleName
  fullName: System.Speech.Recognition.Grammar.RuleName
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取根规则或入口点的名称<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>对象。"
  remarks: "若要构造<xref:System.Speech.Recognition.Grammar>对象并设置其根规则的名称，请使用之一<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数采用`ruleName`参数。</xref:System.Speech.Recognition.Grammar.%23ctor%2A> </xref:System.Speech.Recognition.Grammar>       如果根规则的<xref:System.Speech.Recognition.Grammar>具有没有名称，该属性返回`null`。</xref:System.Speech.Recognition.Grammar>       根法则<xref:System.Speech.Recognition.Grammar>实例构造从<xref:System.Speech.Recognition.GrammarBuilder>对象通常都有没有名称，因此 RuleName 返回`null`。</xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example writes information about a <xref:System.Speech.Recognition.Grammar> object to the [console](http://go.microsoft.com/fwlink/?LinkId=159613).  \n  \n```c#  \n  \nprivate static void DumpGrammarStatus(Grammar item)  \n{  \n  Console.WriteLine(\"Grammar name is {0}:\", item.Name);  \n  Console.WriteLine(\"  The Grammar {0} loaded.\",  \n    item.Loaded ? \"is\" : \"is not\");  \n  Console.WriteLine(\"  The Grammar {0} enabled.\",  \n    item.Enabled ? \"is\" : \"is not\");  \n  if (item.RuleName != null)  \n  {  \n    Console.WriteLine(\"  The root rule is {0}.\", item.RuleName);  \n  }  \n  else  \n  {  \n    Console.WriteLine(\"  The Grammar does not specify a root rule.\");  \n  }  \n}  \n```"
  syntax:
    content: public string RuleName { get; }
    return:
      type: System.String
      description: "<xref uid=&quot;langword_csharp_RuleName&quot; name=&quot;RuleName&quot; href=&quot;&quot;> </xref>属性返回引用的语音识别语法的根规则的标识符。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Speech.Recognition.Grammar.RuleName*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.SpeechRecognized
  id: SpeechRecognized
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: SpeechRecognized
  nameWithType: Grammar.SpeechRecognized
  fullName: System.Speech.Recognition.Grammar.SpeechRecognized
  type: Event
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "当识别使用语音识别器执行时，引发<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>对象。"
  remarks: "语音识别器也会引发`SpeechRecognized`时它可以识别输入的事件。 <xref:System.Speech.Recognition.Grammar>在语音识别器之前引发对象的 SpeechRecognized 事件`SpeechRecognized`事件。</xref:System.Speech.Recognition.Grammar> 有关详细信息，请参阅<xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=fullName>， <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=fullName>，和<xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted>事件。</xref:System.Speech.Recognition.SpeechRecognitionEngine.RecognizeCompleted> </xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized?displayProperty=fullName> </xref:System.Speech.Recognition.SpeechRecognizer.SpeechRecognized?displayProperty=fullName>       特定于某个特定的语法的任何任务应始终通过为处理程序来处理<xref:System.Speech.Recognition.Grammar>对象的 SpeechRecognized 事件。</xref:System.Speech.Recognition.Grammar>"
  example:
  - "The following example shows the use of an event handler for the <xref:System.Speech.Recognition.Grammar> object's SpeechRecognized event. It outputs the recognition results to the [console](http://go.microsoft.com/fwlink/?LinkId=159613).  \n  \n```c#  \npublic partial class Form1 : Form  \n{  \n  SpeechRecognitionEngine sre;  \n  \n  public Form1()  \n  {  \n  InitializeComponent();  \n  \n  // Create an in-process speech recognizer.  \n  sre = new SpeechRecognitionEngine();  \n  \n  // Configure input to the speech recognizer.  \n  sre.SetInputToDefaultAudioDevice();  \n  \n  // Create a simple grammar and load it.  \n  Grammar testGrammar = new Grammar(new GrammarBuilder(\"testing\"));  \n  sre.LoadGrammarAsync(testGrammar);  \n  \n  // Add a handler for the grammar's speech recognized event.  \n  testGrammar.SpeechRecognized += new EventHandler<SpeechRecognizedEventArgs>(testGrammar_SpeechRecognized);  \n  \n  // Start asynchronous speech recognition.  \n  sre.RecognizeAsync();  \n  }  \n  \n  // Handle the grammar's SpeechRecognized event, output the recognized text.  \n  void testGrammar_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n  {  \n    Console.WriteLine(\"Recognized text: \" + e.Result.Text);  \n  }  \n}  \n```"
  syntax:
    content: public event EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs> SpeechRecognized;
    return:
      type: System.EventHandler{System.Speech.Recognition.SpeechRecognizedEventArgs}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.StgInit(System.Object[])
  id: StgInit(System.Object[])
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: StgInit(Object[])
  nameWithType: Grammar.StgInit(Object[])
  fullName: System.Speech.Recognition.Grammar.StgInit(Object[])
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "<xref uid=&quot;langword_csharp_StgInit&quot; name=&quot;StgInit&quot; href=&quot;&quot;> </xref>方法初始化强类型的语法。"
  remarks: "一个强类型<xref:System.Speech.Recognition.Grammar>对象 (`IsStg`等于`true`) 可以返回到客户端应用程序的强类型的结果 （对象，而不是原始文本）。</xref:System.Speech.Recognition.Grammar> 例如，可能会返回强类型的语法<xref:System.DateTime>对象而不是原始识别的输入。</xref:System.DateTime>       你可以通过将代码附加到的语法规则实现强类型的语法。 识别引擎处理任何给定的规则，拍摄作为输入当前部分结果、 执行关联的代码和文本信息变得丰富类型对象。 这允许客户端更轻松地使用增强的语义检查，支持针对多个区域性和内部语法逻辑。       强类型的实例<xref:System.Speech.Recognition.Grammar>对象通常从一个程序集作为中的资源中获取<xref:System.Type>的公共语言运行时 (CLR)。</xref:System.Type> </xref:System.Speech.Recognition.Grammar> 用于支持不同语言的本地化的类型是这样的示例<xref:System.Speech.Recognition.Grammar>对象。</xref:System.Speech.Recognition.Grammar>"
  syntax:
    content: protected void StgInit (object[] parameters);
    parameters:
    - id: parameters
      type: System.Object[]
      description: "要传递初始化的强类型的语法的参数。此参数可以为 null。"
  overload: System.Speech.Recognition.Grammar.StgInit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.Grammar.Weight
  id: Weight
  parent: System.Speech.Recognition.Grammar
  langs:
  - csharp
  name: Weight
  nameWithType: Grammar.Weight
  fullName: System.Speech.Recognition.Grammar.Weight
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取或设置权重值为<xref href=&quot;System.Speech.Recognition.Grammar&quot;></xref>对象。"
  remarks: "由于识别引擎的使用的复杂性**权重**，它对某个特定的语法的性能的影响不可与<xref:System.Speech.Recognition.Grammar.Priority%2A>.</xref:System.Speech.Recognition.Grammar.Priority%2A>为直接预测       语音识别是加权的系统。 它不计算基于语法的权重，有关该语法中的备选方案定义的权重和定义的语音模型的概率的组合的所有可能识别路径。 语音识别引擎使用这些权重和排名的潜在替代荣誉的概率的组合。 使用更高版本的权重的语法会提供比语法中的较低的权重来识别替代项的排名的详细信息。       语音识别器权重属性的效果都是依赖于识别器的实现。 尽管权重属性可以用来优化应用程序的语音识别的准确性，它应在受控诊断研究的特定识别环境以及的有关识别引擎下使用的完整信息后才使用它。"
  example:
  - "The following example creates two <xref:System.Speech.Recognition.Grammar> objects, one for digits and one for fractions. The <xref:System.Speech.Recognition.Grammar> objects are assigned names and relative weights and priorities, and loaded by an in-process speech recognizer. The `CreateDigitsGrammar`, `CreateFractionsGrammar`, and `recognizer_SpeechRecognized` methods are not shown here.  \n  \n```c#  \n  \n// Create a Grammar for recognizing numeric digits.  \nGrammar digitsGrammar = CreateDigitsGrammar();  \ndigitsGrammar.Name = \"Digits Grammar\";  \ndigitsGrammar.Priority = 2;  \ndigitsGrammar.Weight = 0.6f;  \n  \n// Create a Grammar for recognizing fractions.  \nGrammar fractionsGrammar = CreateFractionsGrammar();  \nfractionsGrammar.Name = \"Fractions Grammar\";  \nfractionsGrammar.Priority = 1;  \nfractionsGrammar.Weight = 1f;  \n  \n// Create an in-process speech recognizer.  \nSpeechRecognitionEngine recognizer = new SpeechRecognitionEngine();  \n  \nrecognizer.SpeechRecognized +=  \n  new EventHandler<SpeechRecognizedEventArgs>(  \n    recognizer_SpeechRecognized);  \n  \n// Load the digits and fractions Grammar objects.  \nrecognizer.LoadGrammar(digitsGrammar);  \nrecognizer.LoadGrammar(fractionsGrammar);  \n  \n// Start recognition.  \nrecognizer.SetInputToDefaultAudioDevice();  \nrecognizer.RecognizeAsync(RecognizeMode.Multiple);  \n```"
  syntax:
    content: public float Weight { get; set; }
    return:
      type: System.Single
      description: "<xref uid=&quot;langword_csharp_Weight&quot; name=&quot;Weight&quot; href=&quot;&quot;> </xref>属性将返回浮点值，该值指示时处理输入语音识别引擎实例应将分配给该语法的相对权重。 范围是从 0.0 到 1.0 （含)。 默认值为 1.0。"
  overload: System.Speech.Recognition.Grammar.Weight*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.FormatException
  isExternal: true
  name: System.FormatException
- uid: System.Speech.Recognition.Grammar.#ctor
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar()
  nameWithType: Grammar.Grammar()
  fullName: System.Speech.Recognition.Grammar.Grammar()
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(Stream)
  nameWithType: Grammar.Grammar(Stream)
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream)
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(GrammarBuilder)
  nameWithType: Grammar.Grammar(GrammarBuilder)
  fullName: System.Speech.Recognition.Grammar.Grammar(GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(SrgsDocument)
  nameWithType: Grammar.Grammar(SrgsDocument)
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument)
- uid: System.Speech.Recognition.SrgsGrammar.SrgsDocument
  parent: System.Speech.Recognition.SrgsGrammar
  isExternal: false
  name: SrgsDocument
  nameWithType: SrgsDocument
  fullName: System.Speech.Recognition.SrgsGrammar.SrgsDocument
- uid: System.Speech.Recognition.Grammar.#ctor(System.String)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(String)
  nameWithType: Grammar.Grammar(String)
  fullName: System.Speech.Recognition.Grammar.Grammar(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(Stream,String)
  nameWithType: Grammar.Grammar(Stream,String)
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream,String)
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(SrgsDocument,String)
  nameWithType: Grammar.Grammar(SrgsDocument,String)
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument,String)
- uid: System.Speech.Recognition.Grammar.#ctor(System.String,System.String)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(String,String)
  nameWithType: Grammar.Grammar(String,String)
  fullName: System.Speech.Recognition.Grammar.Grammar(String,String)
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Object[])
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(Stream,String,Object[])
  nameWithType: Grammar.Grammar(Stream,String,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream,String,Object[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(Stream,String,Uri)
  nameWithType: Grammar.Grammar(Stream,String,Uri)
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream,String,Uri)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Object[])
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(SrgsDocument,String,Object[])
  nameWithType: Grammar.Grammar(SrgsDocument,String,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument,String,Object[])
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri)
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(SrgsDocument,String,Uri)
  nameWithType: Grammar.Grammar(SrgsDocument,String,Uri)
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument,String,Uri)
- uid: System.Speech.Recognition.Grammar.#ctor(System.String,System.String,System.Object[])
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(String,String,Object[])
  nameWithType: Grammar.Grammar(String,String,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(String,String,Object[])
- uid: System.Speech.Recognition.Grammar.#ctor(System.IO.Stream,System.String,System.Uri,System.Object[])
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(Stream,String,Uri,Object[])
  nameWithType: Grammar.Grammar(Stream,String,Uri,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(Stream,String,Uri,Object[])
- uid: System.Speech.Recognition.Grammar.#ctor(System.Speech.Recognition.SrgsGrammar.SrgsDocument,System.String,System.Uri,System.Object[])
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar(SrgsDocument,String,Uri,Object[])
  nameWithType: Grammar.Grammar(SrgsDocument,String,Uri,Object[])
  fullName: System.Speech.Recognition.Grammar.Grammar(SrgsDocument,String,Uri,Object[])
- uid: System.Speech.Recognition.Grammar.Enabled
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Enabled
  nameWithType: Grammar.Enabled
  fullName: System.Speech.Recognition.Grammar.Enabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Speech.Recognition.Grammar.IsStg
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: IsStg
  nameWithType: Grammar.IsStg
  fullName: System.Speech.Recognition.Grammar.IsStg
- uid: System.Speech.Recognition.Grammar.Loaded
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Loaded
  nameWithType: Grammar.Loaded
  fullName: System.Speech.Recognition.Grammar.Loaded
- uid: System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(System.Type,System.Object[])
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: LoadLocalizedGrammarFromType(Type,Object[])
  nameWithType: Grammar.LoadLocalizedGrammarFromType(Type,Object[])
  fullName: System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType(Type,Object[])
- uid: System.Speech.Recognition.Grammar
  parent: System.Speech.Recognition
  isExternal: false
  name: Grammar
  nameWithType: Grammar
  fullName: System.Speech.Recognition.Grammar
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Speech.Recognition.Grammar.Name
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Name
  nameWithType: Grammar.Name
  fullName: System.Speech.Recognition.Grammar.Name
- uid: System.Speech.Recognition.Grammar.Priority
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Priority
  nameWithType: Grammar.Priority
  fullName: System.Speech.Recognition.Grammar.Priority
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.Grammar.ResourceName
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: ResourceName
  nameWithType: Grammar.ResourceName
  fullName: System.Speech.Recognition.Grammar.ResourceName
- uid: System.Speech.Recognition.Grammar.RuleName
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: RuleName
  nameWithType: Grammar.RuleName
  fullName: System.Speech.Recognition.Grammar.RuleName
- uid: System.Speech.Recognition.Grammar.SpeechRecognized
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: SpeechRecognized
  nameWithType: Grammar.SpeechRecognized
  fullName: System.Speech.Recognition.Grammar.SpeechRecognized
- uid: System.EventHandler{System.Speech.Recognition.SpeechRecognizedEventArgs}
  parent: System
  isExternal: true
  name: EventHandler<SpeechRecognizedEventArgs>
  nameWithType: EventHandler<SpeechRecognizedEventArgs>
  fullName: System.EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs>
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: EventHandler<System.Speech.Recognition.SpeechRecognizedEventArgs>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Speech.Recognition.SpeechRecognizedEventArgs
    name: SpeechRecognizedEventArgs
    nameWithType: SpeechRecognizedEventArgs
    fullName: SpeechRecognizedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Speech.Recognition.Grammar.StgInit(System.Object[])
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: StgInit(Object[])
  nameWithType: Grammar.StgInit(Object[])
  fullName: System.Speech.Recognition.Grammar.StgInit(Object[])
- uid: System.Speech.Recognition.Grammar.Weight
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Weight
  nameWithType: Grammar.Weight
  fullName: System.Speech.Recognition.Grammar.Weight
- uid: System.Single
  parent: System
  isExternal: true
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Speech.Recognition.Grammar.#ctor*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Grammar
  nameWithType: Grammar.Grammar
- uid: System.Speech.Recognition.Grammar.Enabled*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Enabled
  nameWithType: Grammar.Enabled
- uid: System.Speech.Recognition.Grammar.IsStg*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: IsStg
  nameWithType: Grammar.IsStg
- uid: System.Speech.Recognition.Grammar.Loaded*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Loaded
  nameWithType: Grammar.Loaded
- uid: System.Speech.Recognition.Grammar.LoadLocalizedGrammarFromType*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: LoadLocalizedGrammarFromType
  nameWithType: Grammar.LoadLocalizedGrammarFromType
- uid: System.Speech.Recognition.Grammar.Name*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Name
  nameWithType: Grammar.Name
- uid: System.Speech.Recognition.Grammar.Priority*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Priority
  nameWithType: Grammar.Priority
- uid: System.Speech.Recognition.Grammar.ResourceName*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: ResourceName
  nameWithType: Grammar.ResourceName
- uid: System.Speech.Recognition.Grammar.RuleName*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: RuleName
  nameWithType: Grammar.RuleName
- uid: System.Speech.Recognition.Grammar.StgInit*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: StgInit
  nameWithType: Grammar.StgInit
- uid: System.Speech.Recognition.Grammar.Weight*
  parent: System.Speech.Recognition.Grammar
  isExternal: false
  name: Weight
  nameWithType: Grammar.Weight
