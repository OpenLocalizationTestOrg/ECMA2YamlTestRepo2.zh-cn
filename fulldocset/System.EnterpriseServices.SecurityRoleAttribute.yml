### YamlMime:ManagedReference
items:
- uid: System.EnterpriseServices.SecurityRoleAttribute
  id: SecurityRoleAttribute
  children:
  - System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String)
  - System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String,System.Boolean)
  - System.EnterpriseServices.SecurityRoleAttribute.Description
  - System.EnterpriseServices.SecurityRoleAttribute.Role
  - System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess
  langs:
  - csharp
  name: SecurityRoleAttribute
  nameWithType: SecurityRoleAttribute
  fullName: System.EnterpriseServices.SecurityRoleAttribute
  type: Class
  summary: "配置应用程序或组件的角色。 此类不能被继承。"
  remarks: "可以使用 SecurityRoleAttribute 将角色添加到应用程序，并将其与组件关联。 SecurityRoleAttribute 应用于整个程序集，它可确保该角色存在在应用程序配置 （COM + 目录）。 你可以添加使用 COM + 资源管理器角色的成员。       当应用于一个组件，SecurityRoleAttribute 可确保该角色存在于应用程序配置中，并将目标组件与角色相关联。       默认情况下，创建的角色具有任何成员。 如果<xref:System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess%2A>属性设置为`true`，每个人用户组自动添加到角色。</xref:System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess%2A> 这是最适合于提供最小控制系统的所有访问类型角色。       可以在组件级别，每个接口和每个方法指定的安全角色。 与其他方法属性、 安全配置当前不在接口定义和实现的方法之间共享。"
  example:
  - "The following code example demonstrates the use of this attribute to associate a role with an assembly that contains <xref:System.EnterpriseServices.ServicedComponent> classes.  \n  \n [!code-cpp[EnterpriseServices_Security#3](~/add/codesnippet/cpp/t-system.enterpriseservi_22_1.cpp)]\n [!code-cs[EnterpriseServices_Security#3](~/add/codesnippet/csharp/t-system.enterpriseservi_22_1.cs)]\n [!code-vb[EnterpriseServices_Security#3](~/add/codesnippet/visualbasic/t-system.enterpriseservi_22_1.vb)]"
  syntax:
    content: >-
      [System.AttributeUsage(System.AttributeTargets.Assembly | System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Interface, AllowMultiple=true, Inherited=true)]

      [System.Runtime.InteropServices.ComVisible(false)]

      public sealed class SecurityRoleAttribute : Attribute
  inheritance:
  - System.Attribute
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.EnterpriseServices.SecurityRoleAttribute
  langs:
  - csharp
  name: SecurityRoleAttribute(String)
  nameWithType: SecurityRoleAttribute.SecurityRoleAttribute(String)
  fullName: System.EnterpriseServices.SecurityRoleAttribute.SecurityRoleAttribute(String)
  type: Constructor
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "初始化的新实例<xref href=&quot;System.EnterpriseServices.SecurityRoleAttribute&quot;></xref>类并设置<xref:System.EnterpriseServices.SecurityRoleAttribute.Role*>属性。</xref:System.EnterpriseServices.SecurityRoleAttribute.Role*>"
  remarks: ''
  example:
  - "The following code example demonstrates the use of this attribute to associate a role with an assembly that contains <xref:System.EnterpriseServices.ServicedComponent> classes.  \n  \n [!code-cpp[EnterpriseServices_Security#3](~/add/codesnippet/cpp/m-system.enterpriseservi_5_1.cpp)]\n [!code-cs[EnterpriseServices_Security#3](~/add/codesnippet/csharp/m-system.enterpriseservi_5_1.cs)]\n [!code-vb[EnterpriseServices_Security#3](~/add/codesnippet/visualbasic/m-system.enterpriseservi_5_1.vb)]"
  syntax:
    content: public SecurityRoleAttribute (string role);
    parameters:
    - id: role
      type: System.String
      description: "个应用程序、 组件、 接口或方法的安全角色。"
  overload: System.EnterpriseServices.SecurityRoleAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String,System.Boolean)
  id: '#ctor(System.String,System.Boolean)'
  parent: System.EnterpriseServices.SecurityRoleAttribute
  langs:
  - csharp
  name: SecurityRoleAttribute(String,Boolean)
  nameWithType: SecurityRoleAttribute.SecurityRoleAttribute(String,Boolean)
  fullName: System.EnterpriseServices.SecurityRoleAttribute.SecurityRoleAttribute(String,Boolean)
  type: Constructor
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "初始化的新实例<xref href=&quot;System.EnterpriseServices.SecurityRoleAttribute&quot;></xref>类并设置<> *1> 和<> *1> 属性。"
  syntax:
    content: public SecurityRoleAttribute (string role, bool everyone);
    parameters:
    - id: role
      type: System.String
      description: "个应用程序、 组件、 接口或方法的安全角色。"
    - id: everyone
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>需要新创建的 role 让每个人都作为用户; 用户组添加否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.EnterpriseServices.SecurityRoleAttribute.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityRoleAttribute.Description
  id: Description
  parent: System.EnterpriseServices.SecurityRoleAttribute
  langs:
  - csharp
  name: Description
  nameWithType: SecurityRoleAttribute.Description
  fullName: System.EnterpriseServices.SecurityRoleAttribute.Description
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取或设置的角色说明。"
  syntax:
    content: public string Description { get; set; }
    return:
      type: System.String
      description: "角色说明。"
  overload: System.EnterpriseServices.SecurityRoleAttribute.Description*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityRoleAttribute.Role
  id: Role
  parent: System.EnterpriseServices.SecurityRoleAttribute
  langs:
  - csharp
  name: Role
  nameWithType: SecurityRoleAttribute.Role
  fullName: System.EnterpriseServices.SecurityRoleAttribute.Role
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "获取或设置的安全角色。"
  syntax:
    content: public string Role { get; set; }
    return:
      type: System.String
      description: "到应用程序、 组件、 接口或方法应用了安全角色。"
  overload: System.EnterpriseServices.SecurityRoleAttribute.Role*
  exceptions: []
  platform:
  - net462
- uid: System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess
  id: SetEveryoneAccess
  parent: System.EnterpriseServices.SecurityRoleAttribute
  langs:
  - csharp
  name: SetEveryoneAccess
  nameWithType: SecurityRoleAttribute.SetEveryoneAccess
  fullName: System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess
  type: Property
  assemblies:
  - System.EnterpriseServices
  namespace: System.EnterpriseServices
  summary: "作为用户设置一个值，该值指示是否将 Everyone 添加用户组。"
  remarks: "将此属性设置为`false`若要取消添加 Everyone 用户组作为用户添加到新创建的角色。 将属性设置为`true`需要一个新创建的角色有作为用户添加的每个人。 不会修改应用程序已存在的角色。"
  syntax:
    content: public bool SetEveryoneAccess { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>需要一个新创建的角色有 Everyone （未修改的应用程序存在的角色） 的用户; 用户组添加否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>若要取消添加 Everyone 用户作为用户组。"
  overload: System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Attribute
  isExternal: false
  name: System.Attribute
- uid: System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String)
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: SecurityRoleAttribute(String)
  nameWithType: SecurityRoleAttribute.SecurityRoleAttribute(String)
  fullName: System.EnterpriseServices.SecurityRoleAttribute.SecurityRoleAttribute(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.EnterpriseServices.SecurityRoleAttribute.#ctor(System.String,System.Boolean)
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: SecurityRoleAttribute(String,Boolean)
  nameWithType: SecurityRoleAttribute.SecurityRoleAttribute(String,Boolean)
  fullName: System.EnterpriseServices.SecurityRoleAttribute.SecurityRoleAttribute(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.EnterpriseServices.SecurityRoleAttribute.Description
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: Description
  nameWithType: SecurityRoleAttribute.Description
  fullName: System.EnterpriseServices.SecurityRoleAttribute.Description
- uid: System.EnterpriseServices.SecurityRoleAttribute.Role
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: Role
  nameWithType: SecurityRoleAttribute.Role
  fullName: System.EnterpriseServices.SecurityRoleAttribute.Role
- uid: System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: SetEveryoneAccess
  nameWithType: SecurityRoleAttribute.SetEveryoneAccess
  fullName: System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess
- uid: System.EnterpriseServices.SecurityRoleAttribute.#ctor*
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: SecurityRoleAttribute
  nameWithType: SecurityRoleAttribute.SecurityRoleAttribute
- uid: System.EnterpriseServices.SecurityRoleAttribute.Description*
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: Description
  nameWithType: SecurityRoleAttribute.Description
- uid: System.EnterpriseServices.SecurityRoleAttribute.Role*
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: Role
  nameWithType: SecurityRoleAttribute.Role
- uid: System.EnterpriseServices.SecurityRoleAttribute.SetEveryoneAccess*
  parent: System.EnterpriseServices.SecurityRoleAttribute
  isExternal: false
  name: SetEveryoneAccess
  nameWithType: SecurityRoleAttribute.SetEveryoneAccess
