### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.FocusManager
  id: FocusManager
  children:
  - System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.FocusedElementProperty
  - System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  - System.Windows.Input.FocusManager.GotFocusEvent
  - System.Windows.Input.FocusManager.IsFocusScopeProperty
  - System.Windows.Input.FocusManager.LostFocusEvent
  - System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  - System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  - System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  langs:
  - csharp
  name: FocusManager
  nameWithType: FocusManager
  fullName: System.Windows.Input.FocusManager
  type: Class
  summary: "提供一组静态方法、 附加的属性和事件来确定并设置焦点作用域和作用域内设置具有焦点的元素。"
  remarks: "在[!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)]有关于焦点的两个概念︰ 键盘焦点和逻辑焦点。       与当前正在接收键盘输入的元素有关键盘焦点。  可以仅有一个元素具有键盘焦点。  此元素具有键盘焦点具有<xref:System.Windows.IInputElement.IsKeyboardFocused%2A>设置为`true`。</xref:System.Windows.IInputElement.IsKeyboardFocused%2A>  <xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName>返回具有键盘焦点的元素。</xref:System.Windows.Input.Keyboard.FocusedElement%2A?displayProperty=fullName>       逻辑焦点与<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>特定焦点范围内。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>       焦点作用域是一个容器元素，用于跟踪的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>在其范围内。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  默认情况下，<xref:System.Windows.Window>类是焦点的作用域允许进行<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>类。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  这是焦点作用域的元素具有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>设置为`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       可以有多个元素具有逻辑焦点，但只能有一个具有单个焦点范围内的逻辑焦点的元素。  具有逻辑焦点的元素不一定具有键盘焦点，但具有键盘焦点的元素将具有逻辑焦点。  可定义焦点范围内的焦点作用域。  在这种情况下，父焦点作用域和子焦点作用域可以有一种<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>       以下情况揭示了如何键盘焦点和逻辑焦点改变， [!INCLUDE[TLA#tla_wpf](~/add/includes/tlasharptla-wpf-md.md)] <xref:System.Windows.Window>使用<xref:System.Windows.Controls.TextBox>并<xref:System.Windows.Controls.Menu>具有一种<xref:System.Windows.Controls.MenuItem>。</xref:System.Windows.Controls.MenuItem></xref:System.Windows.Controls.Menu></xref:System.Windows.Controls.TextBox></xref:System.Windows.Window>具有应用程序  从键盘焦点更改时<xref:System.Windows.Controls.TextBox>到<xref:System.Windows.Controls.MenuItem>、<xref:System.Windows.Controls.TextBox>失去键盘焦点，但保留逻辑焦点提供给<xref:System.Windows.Window>焦点范围。</xref:System.Windows.Window> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Controls.MenuItem> </xref:System.Windows.Controls.TextBox>  <xref:System.Windows.Controls.MenuItem>键盘焦点，并且获得逻辑焦点的<xref:System.Windows.Controls.Menu>焦点范围。</xref:System.Windows.Controls.Menu> </xref:System.Windows.Controls.MenuItem>  当键盘焦点返回到根节点<xref:System.Windows.Window>，<xref:System.Windows.Window>焦点范围内具有逻辑焦点将获取键盘焦点时，在这种情况下即<xref:System.Windows.Controls.TextBox>.</xref:System.Windows.Controls.TextBox></xref:System.Windows.Window>中的元素</xref:System.Windows.Window>  <xref:System.Windows.Controls.TextBox>现在具有键盘焦点和逻辑焦点。</xref:System.Windows.Controls.TextBox>  <xref:System.Windows.Controls.MenuItem>失去键盘焦点，但会保留逻辑焦点提供给<xref:System.Windows.Controls.Menu>焦点范围。</xref:System.Windows.Controls.Menu> </xref:System.Windows.Controls.MenuItem>       默认值<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上<xref:System.Windows.Window>， <xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ToolBar>，和<xref:System.Windows.Controls.ContextMenu>是`true`。</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦点的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)和[焦点概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static class FocusManager
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "添加的处理程序<xref:System.Windows.Input.FocusManager.GotFocus>附加事件。</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static void AddGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>侦听此事件。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "要添加事件处理程序。"
  overload: System.Windows.Input.FocusManager.AddGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "添加的处理程序<xref:System.Windows.Input.FocusManager.LostFocus>附加事件。</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static void AddLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>侦听此事件。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "要添加事件处理程序。"
  overload: System.Windows.Input.FocusManager.AddLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  id: FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "标识<xref:System.Windows.Input.FocusManager.FocusedElement*>附加属性。</xref:System.Windows.Input.FocusManager.FocusedElement*>"
  syntax:
    content: public static readonly System.Windows.DependencyProperty FocusedElementProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  id: GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取指定的焦点范围内具有逻辑焦点的元素。"
  remarks: "<xref:System.Windows.Input.FocusManager.FocusedElement%2A>是具有特定焦点作用域的逻辑焦点的元素。</xref:System.Windows.Input.FocusManager.FocusedElement%2A>  此对象可能或可能不具有键盘焦点。  键盘焦点引用接收键盘输入的元素。  焦点、 键盘焦点和逻辑焦点的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。       如果`element`不是一个焦点作用域，此方法将返回`null`。       使用<xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>，可以指定的元素具有逻辑焦点在指定的焦点范围内。</xref:System.Windows.Input.FocusManager.SetFocusedElement%2A>"
  example:
  - "The following example sets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.SetFocusedElement%2A> and it gets the element with logical focus by using the GetFocusedElement.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static System.Windows.IInputElement GetFocusedElement (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "带有指定的焦点作用域中的逻辑焦点的元素。"
    return:
      type: System.Windows.IInputElement
      description: "具有逻辑焦点指定的焦点作用域中的元素。"
  overload: System.Windows.Input.FocusManager.GetFocusedElement*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  id: GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "确定指定的元素具有最接近的上级<xref:System.Windows.Input.FocusManager.IsFocusScope*>设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  remarks: "默认值<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上<xref:System.Windows.Window>， <xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ToolBar>，<xref:System.Windows.Controls.ContextMenu>是`true`。</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦点作用域是一个容器元素，用于跟踪的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>在其范围内。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  默认情况下，<xref:System.Windows.Window>类是焦点的作用域允许进行<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>类。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  这是焦点作用域的元素具有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>设置为`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦点、 键盘焦点和逻辑焦点的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static System.Windows.DependencyObject GetFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "要获取的最接近焦点范围的元素。"
    return:
      type: System.Windows.DependencyObject
      description: "指定元素的焦点范围。"
  overload: System.Windows.Input.FocusManager.GetFocusScope*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>element</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  id: GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "确定是否指定<xref href=&quot;System.Windows.DependencyObject&quot;></xref>是焦点的范围。"
  remarks: "焦点作用域是一个容器元素，用于跟踪的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>在其范围内。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  默认情况下，<xref:System.Windows.Window>类是焦点的作用域允许进行<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>类。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  这是焦点作用域的元素具有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>设置为`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦点、 键盘焦点和逻辑焦点的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static bool GetIsFocusScope (System.Windows.DependencyObject element);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "从中读取附加的属性元素。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Windows.Input.FocusManager.IsFocusScope*>设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>上指定的元素; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  overload: System.Windows.Input.FocusManager.GetIsFocusScope*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  id: GotFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "标识<xref:System.Windows.Input.FocusManager.GotFocus>附加事件。</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent GotFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  id: IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "标识<xref:System.Windows.Input.FocusManager.IsFocusScope*>附加属性。</xref:System.Windows.Input.FocusManager.IsFocusScope*>"
  remarks: "默认值<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>上<xref:System.Windows.Window>， <xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ToolBar>，<xref:System.Windows.Controls.ContextMenu>是`true`。</xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦点作用域是一个容器元素，用于跟踪的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>在其范围内。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  默认情况下，<xref:System.Windows.Window>类是焦点的作用域允许进行<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>类。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  这是焦点作用域的元素具有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>设置为`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦点、 键盘焦点和逻辑焦点的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static readonly System.Windows.DependencyProperty IsFocusScopeProperty;
    return:
      type: System.Windows.DependencyProperty
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  id: LostFocusEvent
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
  type: Field
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "标识<xref:System.Windows.Input.FocusManager.LostFocus>附加事件。</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static readonly System.Windows.RoutedEvent LostFocusEvent;
    return:
      type: System.Windows.RoutedEvent
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "删除的处理程序<xref:System.Windows.Input.FocusManager.GotFocus>附加事件。</xref:System.Windows.Input.FocusManager.GotFocus>"
  syntax:
    content: public static void RemoveGotFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>侦听此事件。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "要删除的事件处理程序。"
  overload: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  id: RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "删除的处理程序<xref:System.Windows.Input.FocusManager.LostFocus>附加事件。</xref:System.Windows.Input.FocusManager.LostFocus>"
  syntax:
    content: public static void RemoveLostFocusHandler (System.Windows.DependencyObject element, System.Windows.RoutedEventHandler handler);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "<xref href=&quot;System.Windows.UIElement&quot;> </xref>或<xref href=&quot;System.Windows.ContentElement&quot;></xref>侦听此事件。"
    - id: handler
      type: System.Windows.RoutedEventHandler
      description: "要删除的事件处理程序。"
  overload: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  id: SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "设置逻辑焦点指定元素上。"
  remarks: "<xref:System.Windows.Input.FocusManager.FocusedElement%2A>是具有特定焦点作用域的逻辑焦点的元素。</xref:System.Windows.Input.FocusManager.FocusedElement%2A>  此对象可能或可能不具有键盘焦点。  键盘焦点引用接收键盘输入的元素。  焦点、 键盘焦点和逻辑焦点的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。       它是可以指定焦点作用域，则元素将位于的焦点作用域的祖先。  例如，如果<xref:System.Windows.Controls.StackPanel>是焦点作用域，并且其父<xref:System.Windows.Window>是焦点的范围，<xref:System.Windows.Controls.TextBox>子级<xref:System.Windows.Controls.StackPanel>可以指定<xref:System.Windows.Window>作为焦点作用域时调用 SetFocusedElement。</xref:System.Windows.Window> </xref:System.Windows.Controls.StackPanel> </xref:System.Windows.Controls.TextBox> </xref:System.Windows.Window> </xref:System.Windows.Controls.StackPanel>  <xref:System.Windows.Controls.TextBox>然后<xref:System.Windows.Input.FocusManager.FocusedElement%2A>两个<xref:System.Windows.Window>焦点范围和<xref:System.Windows.Controls.StackPanel>焦点范围。</xref:System.Windows.Controls.StackPanel> </xref:System.Windows.Window> </xref:System.Windows.Input.FocusManager.FocusedElement%2A> </xref:System.Windows.Controls.TextBox>       SetFocusedElement 将提供指定的元素指定的焦点作用域中的逻辑焦点，并且将尝试提供元素键盘焦点。"
  example:
  - "The following example sets the element with logical focus by using the SetFocusedElement and it gets the element with logical focus by using the <xref:System.Windows.Input.FocusManager.GetFocusedElement%2A>.  \n  \n [!code-cs[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focusgetsetfocusedelement)]\n [!code-vb[focussnippets#FocusGetSetFocusedElement](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focusgetsetfocusedelement)]"
  syntax:
    content: public static void SetFocusedElement (System.Windows.DependencyObject element, System.Windows.IInputElement value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "在其中执行指定的元素<xref:System.Windows.Input.FocusManager.FocusedElement*>.</xref:System.Windows.Input.FocusManager.FocusedElement*>焦点作用域"
    - id: value
      type: System.Windows.IInputElement
      description: "要获得逻辑焦点的元素。"
  overload: System.Windows.Input.FocusManager.SetFocusedElement*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  id: SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  langs:
  - csharp
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "设置指定<xref href=&quot;System.Windows.DependencyObject&quot;></xref>为焦点作用域。"
  remarks: "焦点作用域是一个容器元素，用于跟踪的<xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>在其范围内。</xref:System.Windows.Input.FocusManager.FocusedElement%2A?displayProperty=fullName>  默认情况下，<xref:System.Windows.Window>类是焦点的作用域允许进行<xref:System.Windows.Controls.Menu>， <xref:System.Windows.Controls.ContextMenu>，和<xref:System.Windows.Controls.ToolBar>类。</xref:System.Windows.Controls.ToolBar> </xref:System.Windows.Controls.ContextMenu> </xref:System.Windows.Controls.Menu> </xref:System.Windows.Window>  这是焦点作用域的元素具有<xref:System.Windows.Input.FocusManager.IsFocusScope%2A>设置为`true`。</xref:System.Windows.Input.FocusManager.IsFocusScope%2A>       焦点、 键盘焦点和逻辑焦点的详细信息，请参阅[输入概述](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The follow example makes an element a focus scope by using SetIsFocusScope.  \n  \n [!code-cs[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/csharp/FocusSnippets/Window1.xaml.cs#focussetisfocusscope)]\n [!code-vb[focussnippets#FocusSetIsFocusScope](~/add/codesnippet/visualbasic/focussnippets/window1.xaml.vb#focussetisfocusscope)]"
  syntax:
    content: public static void SetIsFocusScope (System.Windows.DependencyObject element, bool value);
    parameters:
    - id: element
      type: System.Windows.DependencyObject
      description: "要成为焦点范围的元素。"
    - id: value
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果`element`是焦点的范围; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.FocusManager.SetIsFocusScope*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.RoutedEventHandler
  parent: System.Windows
  isExternal: false
  name: RoutedEventHandler
  nameWithType: RoutedEventHandler
  fullName: System.Windows.RoutedEventHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.AddLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.FocusedElementProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: FocusedElementProperty
  nameWithType: FocusManager.FocusedElementProperty
  fullName: System.Windows.Input.FocusManager.FocusedElementProperty
- uid: System.Windows.DependencyProperty
  parent: System.Windows
  isExternal: false
  name: DependencyProperty
  nameWithType: DependencyProperty
  fullName: System.Windows.DependencyProperty
- uid: System.Windows.Input.FocusManager.GetFocusedElement(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement(DependencyObject)
  nameWithType: FocusManager.GetFocusedElement(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusedElement(DependencyObject)
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.FocusManager.GetFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope(DependencyObject)
  nameWithType: FocusManager.GetFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetFocusScope(DependencyObject)
- uid: System.Windows.Input.FocusManager.GetIsFocusScope(System.Windows.DependencyObject)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope(DependencyObject)
  nameWithType: FocusManager.GetIsFocusScope(DependencyObject)
  fullName: System.Windows.Input.FocusManager.GetIsFocusScope(DependencyObject)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.FocusManager.GotFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GotFocusEvent
  nameWithType: FocusManager.GotFocusEvent
  fullName: System.Windows.Input.FocusManager.GotFocusEvent
- uid: System.Windows.RoutedEvent
  parent: System.Windows
  isExternal: false
  name: RoutedEvent
  nameWithType: RoutedEvent
  fullName: System.Windows.RoutedEvent
- uid: System.Windows.Input.FocusManager.IsFocusScopeProperty
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: IsFocusScopeProperty
  nameWithType: FocusManager.IsFocusScopeProperty
  fullName: System.Windows.Input.FocusManager.IsFocusScopeProperty
- uid: System.Windows.Input.FocusManager.LostFocusEvent
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: LostFocusEvent
  nameWithType: FocusManager.LostFocusEvent
  fullName: System.Windows.Input.FocusManager.LostFocusEvent
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveGotFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler(System.Windows.DependencyObject,System.Windows.RoutedEventHandler)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  nameWithType: FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
  fullName: System.Windows.Input.FocusManager.RemoveLostFocusHandler(DependencyObject,RoutedEventHandler)
- uid: System.Windows.Input.FocusManager.SetFocusedElement(System.Windows.DependencyObject,System.Windows.IInputElement)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement(DependencyObject,IInputElement)
  nameWithType: FocusManager.SetFocusedElement(DependencyObject,IInputElement)
  fullName: System.Windows.Input.FocusManager.SetFocusedElement(DependencyObject,IInputElement)
- uid: System.Windows.Input.FocusManager.SetIsFocusScope(System.Windows.DependencyObject,System.Boolean)
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope(DependencyObject,Boolean)
  nameWithType: FocusManager.SetIsFocusScope(DependencyObject,Boolean)
  fullName: System.Windows.Input.FocusManager.SetIsFocusScope(DependencyObject,Boolean)
- uid: System.Windows.Input.FocusManager.AddGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddGotFocusHandler
  nameWithType: FocusManager.AddGotFocusHandler
- uid: System.Windows.Input.FocusManager.AddLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: AddLostFocusHandler
  nameWithType: FocusManager.AddLostFocusHandler
- uid: System.Windows.Input.FocusManager.GetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusedElement
  nameWithType: FocusManager.GetFocusedElement
- uid: System.Windows.Input.FocusManager.GetFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetFocusScope
  nameWithType: FocusManager.GetFocusScope
- uid: System.Windows.Input.FocusManager.GetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: GetIsFocusScope
  nameWithType: FocusManager.GetIsFocusScope
- uid: System.Windows.Input.FocusManager.RemoveGotFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveGotFocusHandler
  nameWithType: FocusManager.RemoveGotFocusHandler
- uid: System.Windows.Input.FocusManager.RemoveLostFocusHandler*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: RemoveLostFocusHandler
  nameWithType: FocusManager.RemoveLostFocusHandler
- uid: System.Windows.Input.FocusManager.SetFocusedElement*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetFocusedElement
  nameWithType: FocusManager.SetFocusedElement
- uid: System.Windows.Input.FocusManager.SetIsFocusScope*
  parent: System.Windows.Input.FocusManager
  isExternal: false
  name: SetIsFocusScope
  nameWithType: FocusManager.SetIsFocusScope
