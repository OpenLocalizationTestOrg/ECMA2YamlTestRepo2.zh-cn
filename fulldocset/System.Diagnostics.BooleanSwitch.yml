### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.BooleanSwitch
  id: BooleanSwitch
  children:
  - System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)
  - System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.BooleanSwitch.Enabled
  - System.Diagnostics.BooleanSwitch.OnValueChanged
  langs:
  - csharp
  name: BooleanSwitch
  nameWithType: BooleanSwitch
  fullName: System.Diagnostics.BooleanSwitch
  type: Class
  summary: "提供一个简单的打开/关闭开关来控制调试和跟踪输出。"
  remarks: "布尔型跟踪开关用于启用或禁用基于它们的重要性的消息。 使用<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>属性来获取该交换机的当前值。</xref:System.Diagnostics.BooleanSwitch.Enabled%2A>       你可以启用或通过应用程序配置文件禁用 BooleanSwitch，然后使用应用程序中的配置的 BooleanSwitch 值。 或者，你可以在代码中创建 BooleanSwitch，并将设置<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>属性直接来检测特定的代码段。</xref:System.Diagnostics.BooleanSwitch.Enabled%2A>       若要配置 BooleanSwitch，编辑你的应用程序的名称对应的配置文件。 在此文件中，可以添加或移除开关、 设置开关的值，或清除所有交换机以前由应用程序设置。 配置文件应类似下面的示例格式化。      ```   <configuration>     <system.diagnostics>       <switches>         <add name=&quot;mySwitch&quot; value=&quot;1&quot;/>       </switches>     </system.diagnostics>   </configuration>   ```此示例配置节定义与 BooleanSwitch<xref:System.Diagnostics.Switch.DisplayName%2A>属性设置为`mySwitch`和<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>值设置为`true`。</xref:System.Diagnostics.BooleanSwitch.Enabled%2A> </xref:System.Diagnostics.Switch.DisplayName%2A> 在你的应用程序，你可以在使用已配置的开关值时通过创建 BooleanSwitch 具有相同的名称，如下面的代码示例中所示。       [!code-cpp[经典 BooleanSwitch.BooleanSwitch 第二个示例](~/add/codesnippet/cpp/t-system.diagnostics.boo_1.cpp)][!code-vb[经典 BooleanSwitch.BooleanSwitch 第二个示例](~/add/codesnippet/visualbasic/t-system.diagnostics.boo_1.vb)][!code-cs[经典 BooleanSwitch.BooleanSwitch 第二个示例](~/add/codesnippet/csharp/t-system.diagnostics.boo_1.cs)]默认情况下，<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>属性使用配置文件中指定的值设置。</xref:System.Diagnostics.BooleanSwitch.Enabled%2A>     值为 0，则设置中配置开关<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>属性`false`; 则为非 0 的值进行设置中配置开关<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>属性`true`。</xref:System.Diagnostics.BooleanSwitch.Enabled%2A> </xref:System.Diagnostics.BooleanSwitch.Enabled%2A> 如果 BooleanSwitch 构造函数不能在配置文件中，找到初始开关设置<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>新交换机的属性设置为`false`默认情况下。</xref:System.Diagnostics.BooleanSwitch.Enabled%2A>       你必须启用跟踪或调试才能使用交换机。 下面的语法是特定的编译器。 如果你使用除 C# 或 Visual Basic 编译器，请参阅你的编译器的文档。      -若要启用调试 C# 中，添加`/d:DEBUG`到编译器命令行编译代码，或可以添加时的标志`#define DEBUG`到你的文件的顶部。 在 Visual Basic 中，添加`/d:DEBUG=True`到编译器命令行的标志。      -若要启用 C# 中的跟踪，添加`/d:TRACE`到编译器命令行编译代码，或添加时的标志`#define TRACE`到你的文件的顶部。 在 Visual Basic 中，添加`/d:TRACE=True`到编译器命令行的标志。      1> [!NOTE]&1;> 这些调试和跟踪编译器开关时将不再需要在隔离中使用 BooleanSwitch 类。 它们仅需要结合<xref:System.Diagnostics.Trace>或<xref:System.Diagnostics.Debug>有条件地编译的方法。</xref:System.Diagnostics.Debug> </xref:System.Diagnostics.Trace>       有关检测应用程序的详细信息，请参阅<xref:System.Diagnostics.Debug>和<xref:System.Diagnostics.Trace>.</xref:System.Diagnostics.Trace> </xref:System.Diagnostics.Debug> 有关配置和使用跟踪开关的详细信息，请参阅[跟踪开关](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 为了提高性能，你可以 BooleanSwitch 成员`static`类中。"
  example:
  - "The following example creates a BooleanSwitch and uses the switch to determine whether to print an error message. You create the switch at the class level. The `Main` method passes its location to `MyMethod`, which prints an error message and where the error occurred.  \n  \n [!code-vb[Classic BooleanSwitch.BooleanSwitch Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.boo_2.vb)]\n [!code-cpp[Classic BooleanSwitch.BooleanSwitch Example#1](~/add/codesnippet/cpp/t-system.diagnostics.boo_2.cpp)]\n [!code-cs[Classic BooleanSwitch.BooleanSwitch Example#1](~/add/codesnippet/csharp/t-system.diagnostics.boo_2.cs)]"
  syntax:
    content: >-
      [System.Diagnostics.SwitchLevel(typeof(System.Boolean))]

      public class BooleanSwitch : System.Diagnostics.Switch
  inheritance:
  - System.Object
  - System.Diagnostics.Switch
  implements: []
  inheritedMembers:
  - System.Diagnostics.Switch.Attributes
  - System.Diagnostics.Switch.Description
  - System.Diagnostics.Switch.DisplayName
  - System.Diagnostics.Switch.GetSupportedAttributes
  - System.Diagnostics.Switch.OnSwitchSettingChanged
  - System.Diagnostics.Switch.SwitchSetting
  - System.Diagnostics.Switch.Value
  platform:
  - net462
- uid: System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.BooleanSwitch
  langs:
  - csharp
  name: BooleanSwitch(String,String)
  nameWithType: BooleanSwitch.BooleanSwitch(String,String)
  fullName: System.Diagnostics.BooleanSwitch.BooleanSwitch(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.BooleanSwitch&quot;></xref>使用指定的显示名称和说明的类。"
  remarks: "当你创建<xref:System.Diagnostics.BooleanSwitch>、`displayName`参数用来查找初始开关设置。</xref:System.Diagnostics.BooleanSwitch> 如果构造函数找不到初始设置<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>属性设置为`false`（禁用）。</xref:System.Diagnostics.BooleanSwitch.Enabled%2A>       若要设置的级别你<xref:System.Diagnostics.BooleanSwitch>，编辑你的应用程序的名称相对应的配置文件。</xref:System.Diagnostics.BooleanSwitch> 在此文件中，可以添加交换机并将其值设置、 删除交换机，或清除以前由应用程序设置的所有交换机。 配置文件的格式应类似下面的示例︰ ```   <configuration>       <system.diagnostics>          <switches>             <add name=&quot;mySwitch&quot; value=&quot;10&quot; />             <add name=&quot;myNewSwitch&quot; value=&quot;20&quot; />             <remove name=&quot;mySwitch&quot; />             <clear/>          </switches>       </system.diagnostics>    </configuration>   ```       >  [!NOTE]&1;> 应为你创建的交换机`static`。"
  example:
  - "The following example creates a <xref:System.Diagnostics.BooleanSwitch> and uses the switch to determine whether to print an error message. The switch is created at the class level. The `Main` method passes its location to `MyMethod`, which prints an error message and where the error occurred.  \n  \n [!code-vb[Classic BooleanSwitch.BooleanSwitch Example#1](~/add/codesnippet/visualbasic/m-system.diagnostics.boo_1.vb)]\n [!code-cpp[Classic BooleanSwitch.BooleanSwitch Example#1](~/add/codesnippet/cpp/m-system.diagnostics.boo_1.cpp)]\n [!code-cs[Classic BooleanSwitch.BooleanSwitch Example#1](~/add/codesnippet/csharp/m-system.diagnostics.boo_1.cs)]"
  syntax:
    content: public BooleanSwitch (string displayName, string description);
    parameters:
    - id: displayName
      type: System.String
      description: "要在用户界面上显示的名称。"
    - id: description
      type: System.String
      description: "交换机的说明。"
  overload: System.Diagnostics.BooleanSwitch.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.BooleanSwitch
  langs:
  - csharp
  name: BooleanSwitch(String,String,String)
  nameWithType: BooleanSwitch.BooleanSwitch(String,String,String)
  fullName: System.Diagnostics.BooleanSwitch.BooleanSwitch(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.BooleanSwitch&quot;></xref>类指定的显示名称、 说明和默认开关值。"
  remarks: "`displayName`参数用于设置的值<xref:System.Diagnostics.Switch.DisplayName%2A>属性，与`description`参数用于设置的值<xref:System.Diagnostics.Switch.Description%2A>属性。</xref:System.Diagnostics.Switch.Description%2A> </xref:System.Diagnostics.Switch.DisplayName%2A> `defaultSwitchValue`参数是保存为一个字段，用于初始化<xref:System.Diagnostics.Switch.Value%2A>上第一个引用的属性。</xref:System.Diagnostics.Switch.Value%2A> 有关构造函数使用的详细信息，请参阅<xref:System.Diagnostics.BooleanSwitch.%23ctor%28System.String%2CSystem.String%29>构造函数。</xref:System.Diagnostics.BooleanSwitch.%23ctor%28System.String%2CSystem.String%29>"
  syntax:
    content: public BooleanSwitch (string displayName, string description, string defaultSwitchValue);
    parameters:
    - id: displayName
      type: System.String
      description: "要在用户界面上显示的名称。"
    - id: description
      type: System.String
      description: "交换机的说明。"
    - id: defaultSwitchValue
      type: System.String
      description: "开关的默认值。"
  overload: System.Diagnostics.BooleanSwitch.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.BooleanSwitch.Enabled
  id: Enabled
  parent: System.Diagnostics.BooleanSwitch
  langs:
  - csharp
  name: Enabled
  nameWithType: BooleanSwitch.Enabled
  fullName: System.Diagnostics.BooleanSwitch.Enabled
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取或设置一个值，指示开关是否已启用还是禁用。"
  remarks: "默认情况下，此字段设置为`false`（禁用）。 若要启用开关，此字段的值赋`true`。 若要禁用此开关，将值赋给`false`。  此属性的值决定通过基类属性<xref:System.Diagnostics.Switch.SwitchSetting%2A>.</xref:System.Diagnostics.Switch.SwitchSetting%2A>的值      1> [!NOTE]&1;> 此方法使用<xref:System.Security.Permissions.SecurityAction?displayProperty=fullName>标志以防止不受信任代码调用; 仅限直接调用方需要具有<xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName>权限。</xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=fullName> </xref:System.Security.Permissions.SecurityAction?displayProperty=fullName> 如果可以从部分受信任代码调用你的代码，将用户输入不传递<xref:System.Runtime.InteropServices.Marshal>类而不进行验证的方法。</xref:System.Runtime.InteropServices.Marshal>"
  example:
  - "The following code example creates a <xref:System.Diagnostics.BooleanSwitch> and uses the switch to determine whether to print an error message. The switch is created at the class level. The `Main` method passes its location to `MyMethod`, which prints an error message and the location where the error occurred.  \n  \n [!code-cpp[Classic BooleanSwitch.Enabled Example#1](~/add/codesnippet/cpp/p-system.diagnostics.boo_1.cpp)]\n [!code-cs[Classic BooleanSwitch.Enabled Example#1](~/add/codesnippet/csharp/p-system.diagnostics.boo_1.cs)]\n [!code-vb[Classic BooleanSwitch.Enabled Example#1](~/add/codesnippet/visualbasic/p-system.diagnostics.boo_1.vb)]"
  syntax:
    content: public bool Enabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了该交换机;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Diagnostics.BooleanSwitch.Enabled*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用方没有正确的权限。"
  platform:
  - net462
- uid: System.Diagnostics.BooleanSwitch.OnValueChanged
  id: OnValueChanged
  parent: System.Diagnostics.BooleanSwitch
  langs:
  - csharp
  name: OnValueChanged()
  nameWithType: BooleanSwitch.OnValueChanged()
  fullName: System.Diagnostics.BooleanSwitch.OnValueChanged()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "确定是否的新值<xref:System.Diagnostics.Switch.Value*>属性可以解析为一个布尔值。</xref:System.Diagnostics.Switch.Value*>"
  remarks: "OnValueChanged 方法确定的新值是否为一个布尔值 （&quot;false&quot;或&quot;true&quot;） 的有效字符串表示。 如果这样，该方法将设置<xref:System.Diagnostics.Switch.SwitchSetting%2A>属性设置为 0 或 1。</xref:System.Diagnostics.Switch.SwitchSetting%2A>  否则，调用基方法，它将字符串值转换为整数值，然后将其用于将设置<xref:System.Diagnostics.Switch.SwitchSetting%2A>属性。</xref:System.Diagnostics.Switch.SwitchSetting%2A>"
  syntax:
    content: protected override void OnValueChanged ();
    parameters: []
  overload: System.Diagnostics.BooleanSwitch.OnValueChanged*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Diagnostics.Switch
  isExternal: false
  name: System.Diagnostics.Switch
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String)
  parent: System.Diagnostics.BooleanSwitch
  isExternal: false
  name: BooleanSwitch(String,String)
  nameWithType: BooleanSwitch.BooleanSwitch(String,String)
  fullName: System.Diagnostics.BooleanSwitch.BooleanSwitch(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.BooleanSwitch.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.BooleanSwitch
  isExternal: false
  name: BooleanSwitch(String,String,String)
  nameWithType: BooleanSwitch.BooleanSwitch(String,String,String)
  fullName: System.Diagnostics.BooleanSwitch.BooleanSwitch(String,String,String)
- uid: System.Diagnostics.BooleanSwitch.Enabled
  parent: System.Diagnostics.BooleanSwitch
  isExternal: false
  name: Enabled
  nameWithType: BooleanSwitch.Enabled
  fullName: System.Diagnostics.BooleanSwitch.Enabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Diagnostics.BooleanSwitch.OnValueChanged
  parent: System.Diagnostics.BooleanSwitch
  isExternal: false
  name: OnValueChanged()
  nameWithType: BooleanSwitch.OnValueChanged()
  fullName: System.Diagnostics.BooleanSwitch.OnValueChanged()
- uid: System.Diagnostics.BooleanSwitch.#ctor*
  parent: System.Diagnostics.BooleanSwitch
  isExternal: false
  name: BooleanSwitch
  nameWithType: BooleanSwitch.BooleanSwitch
- uid: System.Diagnostics.BooleanSwitch.Enabled*
  parent: System.Diagnostics.BooleanSwitch
  isExternal: false
  name: Enabled
  nameWithType: BooleanSwitch.Enabled
- uid: System.Diagnostics.BooleanSwitch.OnValueChanged*
  parent: System.Diagnostics.BooleanSwitch
  isExternal: false
  name: OnValueChanged
  nameWithType: BooleanSwitch.OnValueChanged
