### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  id: ConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  langs:
  - csharp
  name: ConnectionPoint
  nameWithType: ConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint
  type: Class
  summary: "用作类的基类定义连接点启用的使用者控件和共享数据的 Web 部件连接中的提供程序控件的对象。"
  remarks: "每个 Web 部件连接由两个共享数据的服务器控件组成︰ 一个控件是使用者，另一个是提供程序。 Web 部件连接中和连接对象本身的基本组件的讨论，请参阅<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>类概述。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 每个 Web 部件连接需要连接点。 提供程序和使用者控件都必须具有至少一个定义连接点 （其中每个可根据需要多个连接点） 对象，该对象包含有关如何控制可以连接到另一个控件，它可以共享的数据的类型的详细信息。 在实际的连接，该提供程序的连接点对象 （派生自的基类的连接点），其自身类型<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>实例和使用者具有其自己的对象，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>实例。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       若要创建的提供程序连接点，开发人员必须添加到的提供程序将返回向使用者的实现的接口实例的回调方法。 它们必须标记与源代码中的回调方法`ConnectionProvider`代码属性 (请参阅<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类)。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> 同样，若要创建使用者连接点，开发人员必须将方法添加到使用者来接收接口实例，并且它们必须标记该方法以`ConnectionConsumer`属性 (请参阅<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>类)。</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>       当开发人员创建连接到 Web 页上时，则可以创建为静态或动态连接它们。 在 Web 页的标记中声明静态连接。 当声明静态连接时，开发人员可以将指定的使用者和提供程序使用的连接点，应将值赋给`ProviderConnectionPointID`和`ConsumerConnectionPointID`属性内`<asp:webpartconnection>`元素标记。 这种方法是特别有用，如果有多个连接点定义中的使用者和提供程序控件中，因为它允许静态连接以确定要用于连接的连接点。       由开发人员的代码或通过用户界面 (UI) 的用户提供的以编程方式创建动态连接<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件。</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 若要在代码中创建的连接，开发人员必须获取的实例<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象通过调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件。</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 它们可以调用此方法之前，开发人员必须对使用者和提供程序服务器控件和及其各自的连接点对象的引用。 若要获取的连接点对引用的提供程序和使用者控件，开发人员第一次调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A>和<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法<xref:System.Web.UI.WebControls.WebParts.WebPartManager>控件。</xref:System.Web.UI.WebControls.WebParts.WebPartManager> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> 这些方法返回适当的连接点对象，反过来可以传递到方法，以创建连接。       当提供者和使用者的连接点对象均使用相同类型的接口，它们是兼容，并且可以构成直接连接来共享数据。 如果它们不能使用相同的接口类型、<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于将转换为类型使用者可用于从提供程序接口实例。</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>       此抽象的连接点类提供由使用者和提供程序的控件共享的连接点的基本详细信息。 多个属性包含这些详细信息。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性指示连接点可以参与多个连接一次。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 默认情况下，提供程序连接点可以参与多个连接，并使用者连接点不能。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A>属性指示与连接点关联的服务器控件的类型。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType%2A> 请注意该不但<xref:System.Web.UI.WebControls.WebParts.WebPart>控件可以形成连接; 所有服务器控件，无论是 ASP.NET 控件、 一个自定义控件或用户控件，可以都启用参与连接，如果置于<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域。</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性提供可以用于帮助创建连接的用户的 UI 中显示的连接点的友好名称。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性将作为连接点对象本身的字符串标识符。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性指示哪种类型的接口实例的连接点理解。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 由给定的连接点是否提供或使用该接口的实例是<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>或<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       连接点类具有一个方法。 <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>方法返回一个布尔值，该值指示是否当前能够参与连接的连接点。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled%2A>       连接点类还具有一个公共字段， <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>.</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> 此字段包含用来标识连接中的默认连接点的值。      1> [!NOTE]&1;> 指定方法具有只有一个所需的参数的连接点的属性`displayName`，因此可以创建默认连接点属性，无需指定一个 id。 在这种情况下，<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段提供要使用的基值。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>"
  example:
  - "The following code example demonstrates the creation of a Web Parts connection that includes the required ConnectionPoint objects. Because the ConnectionPoint class is an abstract base class, instances of its child classes--<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>--are the actual objects used to form a connection.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. Its `ProvideIZipCode` method is the callback method that implements the interface's only member. The method simply returns an instance of the interface. Note that the method is marked with a `ConnectionProvider` attribute in its metadata. This is the mechanism for identifying the method as the callback method for the provider's connection point. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. You can also create the connection programmatically; the code for doing that is contained in the `Button1_Click` method. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the ConnectionPoint objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_73_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_73_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of one of the <xref:System.Web.UI.WebControls.WebParts.WebPart> controls (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. Click the **Disconnect** button to terminate the existing connection. Use the **Display Mode** control to return the page to browse mode. Next, click the **Dynamic Connection** button to create a connection programmatically. Click the **Connection Point Details** button again, to indicate details about the two connection point objects."
  syntax:
    content: public abstract class ConnectionPoint
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  id: AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "获取一个值，该值指示连接点是否支持多个并发连接。"
  remarks: "<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象具有其 AllowsMultipleConnections 属性值设置为`true`(通过<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>类)，这是因为 Web 部件控件的默认设置启用多个使用者建立连接的提供程序连接点。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute></xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       与此相反，<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象具有其 AllowsMultipleConnections 属性值设置为`false`(通过<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>类) 因为 Web 部件控件集默认情况下允许使用者连接点来建立一次只有一个提供程序连接。</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       你可以更改通过分配到不同的值有关的多个连接的默认行为<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>属性 （对于提供程序） 或<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName>对两个属性 （对于使用者）<xref:System.Attribute>用于连接属性的类。</xref:System.Attribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> </xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute.AllowsMultipleConnections%2A?displayProperty=fullName> 如果启用了使用者连接点在同一时间连接到多个提供程序，你的代码必须处理的任何生成的同步问题。"
  example:
  - "The following code example demonstrates the use of the AllowsMultipleConnections property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the AllowsMultipleConnections property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1358_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1358_1.aspx)]"
  syntax:
    content: public bool AllowsMultipleConnections { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果连接点支持多个连接;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  id: ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "获取<xref:System.Type>的连接点与之关联的服务器控件。</xref:System.Type>"
  remarks: "ControlType 属性的值通常是<xref:System.Web.UI.WebControls.WebParts.WebPart>类型。</xref:System.Web.UI.WebControls.WebParts.WebPart> 但是，因为任何类型的用户控件或服务器控件可以参与连接，如果已正确启用并放入<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域，ControlType 属性可以返回以下类型之一的其他服务器控件也。</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>       在服务器控件时不<xref:System.Web.UI.WebControls.WebParts.WebPart>控件都将置于<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域，它们的包装与<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>对象在运行时，因此它们可以用作<xref:System.Web.UI.WebControls.WebParts.WebPart>控制和参与连接。</xref:System.Web.UI.WebControls.WebParts.WebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> 但当连接中涉及此类控件时，ControlType 属性值不返回<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>键入; 它将返回的一种<xref:System.Web.UI.WebControls.WebParts.GenericWebPart>对象的子控件，这是服务器或用户控件的类型。</xref:System.Web.UI.WebControls.WebParts.GenericWebPart> </xref:System.Web.UI.WebControls.WebParts.GenericWebPart>"
  example:
  - "The following code example demonstrates the use of the ControlType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ControlType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_622_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_622_1.aspx)]"
  syntax:
    content: public Type ControlType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>表示的控件类型。</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  id: DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  type: Field
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "表示用于标识有一个服务器控件关联的连接点集合中的默认连接点的字符串。"
  remarks: "当创建连接点时，有可能在使用者或提供程序的源代码中指定的连接点的 ID<xref:System.Web.UI.WebControls.WebParts.WebPart>控件，并使用<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> </xref:System.Web.UI.WebControls.WebParts.WebPart> 但是，属性添加到源代码中的连接点`ID`参数是可选的。 如果未在特性中指定 ID，DefaultID 字段提供的用于标识默认连接点的字符串。       如果使用者或提供程序的控件中定义多个连接点，则需要指定每个连接点的 ID，以便创建连接时可以区分连接点。"
  syntax:
    content: public static readonly string DefaultID;
    return:
      type: System.String
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  id: DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "获取用作表示用户界面 (UI) 中的连接的友好显示名称的字符串。"
  remarks: "若要创建 Web 部件连接中，连接的提供程序和使用者控件必须每个指定至少一个连接点，使他们能够进行通信和共享数据的方法。 若要标识这些连接点方法，开发人员时，可指定属性上的所选的方法。 在提供程序，`ConnectionProvider`属性设置在所选的回调方法和使用者，`ConnectionConsumer`接收包含从提供程序的数据接口的实例的方法上设置特性。 对于以上两种属性，始终是必需的无论声明的重载以创建该特性的一个参数是`displayName`参数。 开发人员必须分配要用作连接点的友好显示名称的字符串，该字符串将成为 DisplayName 属性的值。       当用户创建连接时，UI 中的网页上显示的 DisplayName 属性值。 例如，当<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件添加到页上，它为创建一个 UI 控件之间创建连接的用户。</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 用户将页切换为连接的显示模式，并单击连接谓词后<xref:System.Web.UI.WebControls.WebParts.WebPart>控制，UI 显示方式的连接。</xref:System.Web.UI.WebControls.WebParts.WebPart> 可以参与连接每个控件列出在 UI 中，且每个控件旁边的下拉列表控件，显示其可用的连接点的友好名称。 用户必须选择至少一个连接点才能建立连接。 从 DisplayName 属性获取连接点列表中显示的值。 如果开发人员用于创建连接生成的自定义 UI，他们可以将 DisplayName 属性用于类似的方式来提供表示连接点的友好名称。"
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "包含的友好显示名称的字符串<xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionPoint&quot;></xref>对象。"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  id: GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "返回一个值，该值指示连接点可以参与连接。"
  remarks: "在基的 GetEnabled 方法<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类始终返回`true`，但派生的类可以重写该方法以返回`true`或`false`在不同时间基于状态`control`。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>"
  example:
  - "The following code example demonstrates the use of the GetEnabled method on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the GetEnabled method on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/a42b3e8f-70fc-455c-a13a-_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/a42b3e8f-70fc-455c-a13a-_1.aspx)]"
  syntax:
    content: public virtual bool GetEnabled (System.Web.UI.Control control);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.WebPart&quot;> </xref>或其他服务器控件与连接点相关联。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果控件可以创建一个连接点来参与连接;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  id: ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "获取包含连接点的标识符的字符串。"
  remarks: "当开发人员声明<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>或<xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute>属性上的控件的源代码中的方法，以便该方法可以用作连接点，它不需要声明`ID`连接点属性的参数。</xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> </xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 唯一必需的特性是`displayName`参数。 默认 ID 分配给连接点，则使用的值<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       如果在作为连接点正在使用的控件中没有只有一个方法，则不必指定连接点的 ID。 如果有多个方法指定为连接点，则必须指定每个; 的 ID否则，将引发异常。 通过给每个连接点分配一个 ID，你还能够指定声明在网页中的连接或在代码中创建它们时要使用的连接点。"
  example:
  - "The following code example demonstrates the use of the ID property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the ID property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1125_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1125_1.aspx)]"
  syntax:
    content: public string ID { get; }
    return:
      type: System.String
      description: "包含连接点的标识符的字符串。"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  id: InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  langs:
  - csharp
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "获取连接点所使用的接口的类型。"
  remarks: "InterfaceType 属性指示哪种类型的接口的连接点使用。 这可以帮助以确定两个控件是否兼容，并且能够形成连接。 如果提供程序连接点的接口类型是不同于使用者连接点的接口类型，则这两个控件不兼容 （这意味着，它们不能直接连接而无需转换器），和一个<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于建立连接。</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  example:
  - "The following code example demonstrates the use of the InterfaceType property on both <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> and <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> objects. This code example shows only the Web page that contains the code to access the property; for the full code required to run the example, see the Example section of the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> class overview.  \n  \n The code in the `Button2_Click` method of the Web page accesses the InterfaceType property on each of the connection point objects and writes each value to a label. Execute the code by clicking the **Connection Point Details** button after the page is loaded in a browser.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_359_1.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_359_1.aspx)]"
  syntax:
    content: public Type InterfaceType { get; }
    return:
      type: System.Type
      description: "A<xref:System.Type>相对应的接口类型提供或由控件占用。</xref:System.Type>"
  overload: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DefaultID
  nameWithType: ConnectionPoint.DefaultID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled(Control)
  nameWithType: ConnectionPoint.GetEnabled(Control)
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(Control)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
  fullName: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: AllowsMultipleConnections
  nameWithType: ConnectionPoint.AllowsMultipleConnections
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ControlType
  nameWithType: ConnectionPoint.ControlType
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: DisplayName
  nameWithType: ConnectionPoint.DisplayName
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: GetEnabled
  nameWithType: ConnectionPoint.GetEnabled
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.ID*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: ID
  nameWithType: ConnectionPoint.ID
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType*
  parent: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: InterfaceType
  nameWithType: ConnectionPoint.InterfaceType
