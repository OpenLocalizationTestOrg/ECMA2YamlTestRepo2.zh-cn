### YamlMime:ManagedReference
items:
- uid: System.Windows.LogicalTreeHelper
  id: LogicalTreeHelper
  children:
  - System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  - System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  - System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  - System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  langs:
  - csharp
  name: LogicalTreeHelper
  nameWithType: LogicalTreeHelper
  fullName: System.Windows.LogicalTreeHelper
  type: Class
  summary: "提供用于查询逻辑树中的对象的静态帮助器方法。"
  remarks: "LogicalTreeHelper 类提供了你可以使用返回的对象或从逻辑树的子节点内的特定对象的子集合的方法。 但是，你通常可以执行的对象树操作的大多数还公开的类似的方法或属性上<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>。</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> 例如，请尝试以下:-而不是调用静态<xref:System.Windows.LogicalTreeHelper.GetChildren%2A>方法，返回一个枚举的逻辑子对象，该方法使用专用的集合公开为该对象的内容模型中。</xref:System.Windows.LogicalTreeHelper.GetChildren%2A> 支持内容模型的几乎所有对象都公开某些属性，包含的子对象的集合，并对该集合提供集合接口直接支持。      -而不是调用的静态<xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>方法来通过指定其名称，调用中获取子对象<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>或<xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>对特定对象的方法。</xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.LogicalTreeHelper.FindLogicalNode%2A>       LogicalTreeHelper 是最适用于分析方案其中向上或向下通过多个级别，则逻辑树以递归方式旅行并想要使用一致的方法检查各种父或子对象。 在这种情况下，您可能会访问混合内容模型，并使用更多的内容模型特定的 Api 可能会太复杂。"
  syntax:
    content: public static class LogicalTreeHelper
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  id: BringIntoView(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: BringIntoView(DependencyObject)
  nameWithType: LogicalTreeHelper.BringIntoView(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.BringIntoView(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "尝试将请求的 UI 元素放入视图，并引发<xref href=&quot;System.Windows.FrameworkElement.RequestBringIntoView&quot;></xref>以报告结果在目标上的事件。"
  remarks: "通常调用实例方法更加方便<xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName>或<xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName>而不是此静态实用工具方法。</xref:System.Windows.FrameworkContentElement.BringIntoView%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.BringIntoView%2A?displayProperty=fullName> 实例方法的行为等效于静态方法的行为。       即使`current`提供的 UI 元素已<xref:System.Windows.FrameworkContentElement>，生成的事件都是一样的<xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName>事件，具有起源<xref:System.Windows.FrameworkContentElement>身份通过检查事件的事件数据。</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement.RequestBringIntoView?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement>"
  syntax:
    content: public static void BringIntoView (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "要使其可见的 UI 元素。"
  overload: System.Windows.LogicalTreeHelper.BringIntoView*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  id: FindLogicalNode(System.Windows.DependencyObject,System.String)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: FindLogicalNode(DependencyObject,String)
  nameWithType: LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  fullName: System.Windows.LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "尝试查找并返回具有指定的名称的对象。 搜索从指定的对象开始并一直到逻辑树的子节点。"
  remarks: "方法<xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>和<xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName>看起来类似于 FindLogicalNode，但由不同的逻辑操作:-FindLogicalNode 搜索方向将是朝向 （向下树）; 的子对象的搜索方向`FindName`methods 是 （向上树） 的父对象向。</xref:System.Windows.FrameworkElement.FindName%2A?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement.FindName%2A?displayProperty=fullName>      -`FindName`方法均由 XAML 名称范围的概念。 使用`FindName`则可保证确定只有一个存在该名称的对象，因为 XAML 名称范围，强制实现唯一性。 与此相反，FindLogicalNode 忽略 XAML 名称范围，并在搜索过程可能跨 XAML 名称范围边界。 在这种情况下，就不能保证唯一性的`elementName`命名一旦跨越边界。 有关 XAML 名称范围的详细信息，请参阅[WPF XAML Namescopes](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static System.Windows.DependencyObject FindLogicalNode (System.Windows.DependencyObject logicalTreeNode, string elementName);
    parameters:
    - id: logicalTreeNode
      type: System.Windows.DependencyObject
      description: "要从开始搜索的对象。 此对象必须是<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>或<xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>。"
    - id: elementName
      type: System.String
      description: "要查找的对象的名称。"
    return:
      type: System.Windows.DependencyObject
      description: "具有匹配的名称，如果找到一个; 的对象返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果逻辑树中不找到任何匹配的名称。"
  overload: System.Windows.LogicalTreeHelper.FindLogicalNode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  id: GetChildren(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(DependencyObject)
  nameWithType: LogicalTreeHelper.GetChildren(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "通过处理逻辑树返回指定对象的即时子对象的集合。"
  remarks: "使用此签名和帮助程序方法，您不确定时，主要是否`current`是<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>，并且也不确定该对象的类是否支持其自己的内容模型的集合。</xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement> 如果可以确定正在查询的对象的类型，请检查你知道的特定内容属性存在于该类型上。 例如，如果你知道查询该对象是<xref:System.Windows.Controls.ItemsControl>，检查<xref:System.Windows.Controls.ItemsControl.Items%2A>属性来获取强类型的集合，也不能具有集合接口支持可能比枚举更有用。</xref:System.Windows.Controls.ItemsControl.Items%2A> </xref:System.Windows.Controls.ItemsControl>"
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "要从中开始处理逻辑树的对象。 这预期为是<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>或<xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>。"
    return:
      type: System.Collections.IEnumerable
      description: "来自指定对象逻辑树的即时子对象的可枚举集合。"
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  id: GetChildren(System.Windows.FrameworkContentElement)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(FrameworkContentElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkContentElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkContentElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回指定的即时子对象的集合<xref href=&quot;System.Windows.FrameworkContentElement&quot;></xref>通过处理逻辑树。"
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkContentElement current);
    parameters:
    - id: current
      type: System.Windows.FrameworkContentElement
      description: "要从中开始处理逻辑树的对象。"
    return:
      type: System.Collections.IEnumerable
      description: "从开始的即时子对象的可枚举集合<code> current </code>逻辑树中。"
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  id: GetChildren(System.Windows.FrameworkElement)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetChildren(FrameworkElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkElement)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "返回指定的即时子对象的集合<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>通过处理逻辑树。"
  syntax:
    content: public static System.Collections.IEnumerable GetChildren (System.Windows.FrameworkElement current);
    parameters:
    - id: current
      type: System.Windows.FrameworkElement
      description: "要从中开始处理逻辑树的对象。"
    return:
      type: System.Collections.IEnumerable
      description: "从开始的即时子对象的可枚举集合<code> current </code>逻辑树中。"
  overload: System.Windows.LogicalTreeHelper.GetChildren*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  id: GetParent(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  langs:
  - csharp
  name: GetParent(DependencyObject)
  nameWithType: LogicalTreeHelper.GetParent(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetParent(DependencyObject)
  type: Method
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "通过处理逻辑树返回指定的对象的父对象。"
  remarks: "此方法是仅获取适当的类型版本的包装器 (<xref:System.Windows.FrameworkElement>或<xref:System.Windows.FrameworkContentElement>) 的<xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName>或<xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName>属性; 因此除非你不能确定`current`类型，你可能想要改为检查相应的实例的属性。</xref:System.Windows.FrameworkContentElement.Parent%2A?displayProperty=fullName> </xref:System.Windows.FrameworkElement.Parent%2A?displayProperty=fullName> </xref:System.Windows.FrameworkContentElement> </xref:System.Windows.FrameworkElement>"
  syntax:
    content: public static System.Windows.DependencyObject GetParent (System.Windows.DependencyObject current);
    parameters:
    - id: current
      type: System.Windows.DependencyObject
      description: "要查找的父对象的对象。 这预期为是<xref href=&quot;System.Windows.FrameworkElement&quot;></xref>或<xref href=&quot;System.Windows.FrameworkContentElement&quot;> </xref>。"
    return:
      type: System.Windows.DependencyObject
      description: "请求的父对象。"
  overload: System.Windows.LogicalTreeHelper.GetParent*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Windows.LogicalTreeHelper.BringIntoView(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: BringIntoView(DependencyObject)
  nameWithType: LogicalTreeHelper.BringIntoView(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.BringIntoView(DependencyObject)
- uid: System.Windows.DependencyObject
  parent: System.Windows
  isExternal: false
  name: DependencyObject
  nameWithType: DependencyObject
  fullName: System.Windows.DependencyObject
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode(System.Windows.DependencyObject,System.String)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: FindLogicalNode(DependencyObject,String)
  nameWithType: LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
  fullName: System.Windows.LogicalTreeHelper.FindLogicalNode(DependencyObject,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(DependencyObject)
  nameWithType: LogicalTreeHelper.GetChildren(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(DependencyObject)
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  nameWithType: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkContentElement)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(FrameworkContentElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkContentElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkContentElement)
- uid: System.Windows.FrameworkContentElement
  parent: System.Windows
  isExternal: false
  name: FrameworkContentElement
  nameWithType: FrameworkContentElement
  fullName: System.Windows.FrameworkContentElement
- uid: System.Windows.LogicalTreeHelper.GetChildren(System.Windows.FrameworkElement)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren(FrameworkElement)
  nameWithType: LogicalTreeHelper.GetChildren(FrameworkElement)
  fullName: System.Windows.LogicalTreeHelper.GetChildren(FrameworkElement)
- uid: System.Windows.FrameworkElement
  parent: System.Windows
  isExternal: false
  name: FrameworkElement
  nameWithType: FrameworkElement
  fullName: System.Windows.FrameworkElement
- uid: System.Windows.LogicalTreeHelper.GetParent(System.Windows.DependencyObject)
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetParent(DependencyObject)
  nameWithType: LogicalTreeHelper.GetParent(DependencyObject)
  fullName: System.Windows.LogicalTreeHelper.GetParent(DependencyObject)
- uid: System.Windows.LogicalTreeHelper.BringIntoView*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: BringIntoView
  nameWithType: LogicalTreeHelper.BringIntoView
- uid: System.Windows.LogicalTreeHelper.FindLogicalNode*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: FindLogicalNode
  nameWithType: LogicalTreeHelper.FindLogicalNode
- uid: System.Windows.LogicalTreeHelper.GetChildren*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetChildren
  nameWithType: LogicalTreeHelper.GetChildren
- uid: System.Windows.LogicalTreeHelper.GetParent*
  parent: System.Windows.LogicalTreeHelper
  isExternal: false
  name: GetParent
  nameWithType: LogicalTreeHelper.GetParent
