### YamlMime:ManagedReference
items:
- uid: System.Windows.LocalValueEnumerator
  id: LocalValueEnumerator
  children:
  - System.Windows.LocalValueEnumerator.Count
  - System.Windows.LocalValueEnumerator.Current
  - System.Windows.LocalValueEnumerator.Equals(System.Object)
  - System.Windows.LocalValueEnumerator.GetHashCode
  - System.Windows.LocalValueEnumerator.MoveNext
  - System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)
  - System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)
  - System.Windows.LocalValueEnumerator.Reset
  - System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
  type: Struct
  summary: "存在任何依赖项属性的本地值提供枚举支持<xref href=&quot;System.Windows.DependencyObject&quot;> </xref>。"
  remarks: "A*本地值*是直接对依赖项属性，通过调用设置依赖项属性的值<xref:System.Windows.DependencyObject.SetValue%2A>，或通过使用 set 访问器的更常见的做法[!INCLUDE[TLA2#tla_clr](~/add/includes/tla2sharptla-clr-md.md)]属性包装器调用<xref:System.Windows.DependencyObject.SetValue%2A>内部。</xref:System.Windows.DependencyObject.SetValue%2A> </xref:System.Windows.DependencyObject.SetValue%2A> 其他不是本地值的属性系统行列式的示例包括通过样式，设置值或依赖项属性的默认值。 有关详细信息，请参阅[依赖项属性值优先级](~/add/includes/ajax-current-ext-md.md)。       返回 LocalValueEnumerator<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>方法，并实现<xref:System.Collections.IEnumerator>接口。</xref:System.Collections.IEnumerator> </xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A> 公共 LocalValueEnumerator 构造函数不存在;因此，必须调用<xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>以获取此类的实例</xref:System.Windows.DependencyObject.GetLocalValueEnumerator%2A>       请不要修改本地值 (通过调用<xref:System.Windows.DependencyObject.SetValue%2A>或<xref:System.Windows.DependencyObject.ClearValue%2A>) 枚举本地值时。</xref:System.Windows.DependencyObject.ClearValue%2A> </xref:System.Windows.DependencyObject.SetValue%2A> 如果你更改或清除的属性值基于枚举器返回的属性，更改或清除操作不会使失效枚举器集合中，对于许多人来说都是如此<xref:System.Collections.IEnumerator>实现。</xref:System.Collections.IEnumerator> 此外，枚举器视图是一个快照。 对集合进行更改不保证是线程安全的并强制实施未锁定。 其他线程仍可以免费访问的本地值从枚举器之外的上下文。       如果，使用此类型类中具有操作其中务必知道属性的值是否来自本地值。 例如，使用此类型的<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>实现，或你想要查询对所有的元数据本地设置属性。</xref:System.Windows.DependencyObject.OnPropertyChanged%2A>"
  syntax:
    content: 'public struct LocalValueEnumerator : System.Collections.IEnumerator'
  inheritance:
  - System.ValueType
  implements:
  - System.Collections.IEnumerator
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.Count
  id: Count
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: Count
  nameWithType: LocalValueEnumerator.Count
  fullName: System.Windows.LocalValueEnumerator.Count
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取集合中表示的项的数目。"
  remarks: "此属性不是定义的成员的<xref:System.Collections.IEnumerator>但为方便起见提供。</xref:System.Collections.IEnumerator>"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "集合中的项的数目。"
  overload: System.Windows.LocalValueEnumerator.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.Current
  id: Current
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: LocalValueEnumerator.Current
  fullName: System.Windows.LocalValueEnumerator.Current
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取集合中的当前元素。"
  remarks: "此版本通常可访问的属性依赖于的集合在创建时拍摄的快照。"
  syntax:
    content: public System.Windows.LocalValueEntry Current { get; }
    return:
      type: System.Windows.LocalValueEntry
      description: "当前<xref href=&quot;System.Windows.LocalValueEntry&quot;></xref>集合中。"
  overload: System.Windows.LocalValueEnumerator.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: LocalValueEnumerator.Equals(Object)
  fullName: System.Windows.LocalValueEnumerator.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "确定是否提供<xref href=&quot;System.Windows.LocalValueEnumerator&quot;></xref>等效于此<xref href=&quot;System.Windows.LocalValueEnumerator&quot;> </xref>。"
  remarks: "此实现支持引用相等性。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref href=&quot;System.Windows.LocalValueEnumerator&quot;> </xref>要与当前比较<xref href=&quot;System.Windows.LocalValueEnumerator&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定<xref href=&quot;System.Windows.LocalValueEnumerator&quot;></xref>等同于当前<xref href=&quot;System.Windows.LocalValueEnumerator&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.LocalValueEnumerator.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.GetHashCode
  id: GetHashCode
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: LocalValueEnumerator.GetHashCode()
  fullName: System.Windows.LocalValueEnumerator.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回当前的哈希代码<xref href=&quot;System.Windows.LocalValueEnumerator&quot;> </xref>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "32 位整数哈希代码。"
  overload: System.Windows.LocalValueEnumerator.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.MoveNext
  id: MoveNext
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: LocalValueEnumerator.MoveNext()
  fullName: System.Windows.LocalValueEnumerator.MoveNext()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将枚举数推进到集合的下一个元素。"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果枚举数已成功地推进到下一个元素;，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果枚举数传递到集合的末尾。"
  overload: System.Windows.LocalValueEnumerator.MoveNext*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)
  id: op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: op_Equality(LocalValueEnumerator,LocalValueEnumerator)
  nameWithType: LocalValueEnumerator.op_Equality(LocalValueEnumerator,LocalValueEnumerator)
  fullName: System.Windows.LocalValueEnumerator.op_Equality(LocalValueEnumerator,LocalValueEnumerator)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较两个指定是否<xref href=&quot;System.Windows.LocalValueEnumerator&quot;></xref>对象是否相同。"
  remarks: "此实现支持引用相等性。"
  syntax:
    content: public static bool op_Equality (System.Windows.LocalValueEnumerator obj1, System.Windows.LocalValueEnumerator obj2);
    parameters:
    - id: obj1
      type: System.Windows.LocalValueEnumerator
      description: "要比较的第一个对象。"
    - id: obj2
      type: System.Windows.LocalValueEnumerator
      description: "要比较的第二个对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>obj1</code><xref href=&quot;System.Windows.LocalValueEnumerator&quot;></xref> is equal to the <code>obj2</code><xref href=&quot;System.Windows.LocalValueEnumerator&quot;></xref>; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.LocalValueEnumerator.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)
  id: op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: op_Inequality(LocalValueEnumerator,LocalValueEnumerator)
  nameWithType: LocalValueEnumerator.op_Inequality(LocalValueEnumerator,LocalValueEnumerator)
  fullName: System.Windows.LocalValueEnumerator.op_Inequality(LocalValueEnumerator,LocalValueEnumerator)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较两个指定<xref href=&quot;System.Windows.LocalValueEnumerator&quot;></xref>对象以确定它们是否不相同。"
  remarks: "此实现支持引用相等性。"
  syntax:
    content: public static bool op_Inequality (System.Windows.LocalValueEnumerator obj1, System.Windows.LocalValueEnumerator obj2);
    parameters:
    - id: obj1
      type: System.Windows.LocalValueEnumerator
      description: "要比较的第一个对象。"
    - id: obj2
      type: System.Windows.LocalValueEnumerator
      description: "要比较的第二个对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果实例不相等;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.LocalValueEnumerator.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.Reset
  id: Reset
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: LocalValueEnumerator.Reset()
  fullName: System.Windows.LocalValueEnumerator.Reset()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将枚举数设置为其初始位置，集合中第一个元素之前。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Windows.LocalValueEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Windows.LocalValueEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: LocalValueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Windows.LocalValueEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "有关此成员的说明，请参阅<xref:System.Collections.IEnumerator.Current*>。</xref:System.Collections.IEnumerator.Current*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Windows.LocalValueEnumerator>实例被强制转换为<xref:System.Collections.IEnumerator>接口。</xref:System.Collections.IEnumerator> </xref:System.Windows.LocalValueEnumerator>"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "集合中的当前元素。"
  overload: System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Windows.LocalValueEnumerator.Count
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: Count
  nameWithType: LocalValueEnumerator.Count
  fullName: System.Windows.LocalValueEnumerator.Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.LocalValueEnumerator.Current
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: Current
  nameWithType: LocalValueEnumerator.Current
  fullName: System.Windows.LocalValueEnumerator.Current
- uid: System.Windows.LocalValueEntry
  parent: System.Windows
  isExternal: false
  name: LocalValueEntry
  nameWithType: LocalValueEntry
  fullName: System.Windows.LocalValueEntry
- uid: System.Windows.LocalValueEnumerator.Equals(System.Object)
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: Equals(Object)
  nameWithType: LocalValueEnumerator.Equals(Object)
  fullName: System.Windows.LocalValueEnumerator.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.LocalValueEnumerator.GetHashCode
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: GetHashCode()
  nameWithType: LocalValueEnumerator.GetHashCode()
  fullName: System.Windows.LocalValueEnumerator.GetHashCode()
- uid: System.Windows.LocalValueEnumerator.MoveNext
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: LocalValueEnumerator.MoveNext()
  fullName: System.Windows.LocalValueEnumerator.MoveNext()
- uid: System.Windows.LocalValueEnumerator.op_Equality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: op_Equality(LocalValueEnumerator,LocalValueEnumerator)
  nameWithType: LocalValueEnumerator.op_Equality(LocalValueEnumerator,LocalValueEnumerator)
  fullName: System.Windows.LocalValueEnumerator.op_Equality(LocalValueEnumerator,LocalValueEnumerator)
- uid: System.Windows.LocalValueEnumerator
  parent: System.Windows
  isExternal: false
  name: LocalValueEnumerator
  nameWithType: LocalValueEnumerator
  fullName: System.Windows.LocalValueEnumerator
- uid: System.Windows.LocalValueEnumerator.op_Inequality(System.Windows.LocalValueEnumerator,System.Windows.LocalValueEnumerator)
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: op_Inequality(LocalValueEnumerator,LocalValueEnumerator)
  nameWithType: LocalValueEnumerator.op_Inequality(LocalValueEnumerator,LocalValueEnumerator)
  fullName: System.Windows.LocalValueEnumerator.op_Inequality(LocalValueEnumerator,LocalValueEnumerator)
- uid: System.Windows.LocalValueEnumerator.Reset
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: Reset()
  nameWithType: LocalValueEnumerator.Reset()
  fullName: System.Windows.LocalValueEnumerator.Reset()
- uid: System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: LocalValueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Windows.LocalValueEnumerator.System.Collections.IEnumerator.Current
- uid: System.Windows.LocalValueEnumerator.Count*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: Count
  nameWithType: LocalValueEnumerator.Count
- uid: System.Windows.LocalValueEnumerator.Current*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: Current
  nameWithType: LocalValueEnumerator.Current
- uid: System.Windows.LocalValueEnumerator.Equals*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: Equals
  nameWithType: LocalValueEnumerator.Equals
- uid: System.Windows.LocalValueEnumerator.GetHashCode*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: GetHashCode
  nameWithType: LocalValueEnumerator.GetHashCode
- uid: System.Windows.LocalValueEnumerator.MoveNext*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: LocalValueEnumerator.MoveNext
- uid: System.Windows.LocalValueEnumerator.op_Equality*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: op_Equality
  nameWithType: LocalValueEnumerator.op_Equality
- uid: System.Windows.LocalValueEnumerator.op_Inequality*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: op_Inequality
  nameWithType: LocalValueEnumerator.op_Inequality
- uid: System.Windows.LocalValueEnumerator.Reset*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: Reset
  nameWithType: LocalValueEnumerator.Reset
- uid: System.Windows.LocalValueEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Windows.LocalValueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: LocalValueEnumerator.System.Collections.IEnumerator.Current
