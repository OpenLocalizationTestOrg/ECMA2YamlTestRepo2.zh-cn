### YamlMime:ManagedReference
items:
- uid: System.Web.Security.AuthorizationStoreRoleProvider
  id: AuthorizationStoreRoleProvider
  children:
  - System.Web.Security.AuthorizationStoreRoleProvider.#ctor
  - System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(System.String[],System.String[])
  - System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
  - System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
  - System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(System.String,System.Boolean)
  - System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(System.String,System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles
  - System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  - System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(System.String,System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  - System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(System.String)
  - System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
  langs:
  - csharp
  name: AuthorizationStoreRoleProvider
  nameWithType: AuthorizationStoreRoleProvider
  fullName: System.Web.Security.AuthorizationStoreRoleProvider
  type: Class
  summary: "管理存储在授权管理器策略存储在 XML 文件，在 Active Directory 或 Active Directory 应用程序模式服务器上 ASP.NET 应用程序的角色成员身份信息。"
  remarks: "This class is used by the <xref:System.Web.Security.Roles> and <xref:System.Web.Security.RolePrincipal> classes to provide role-management services for an ASP.NET application using an authorization-manager store. You can use role management to specify different levels of authorization for your application. The authorization manager can be accessed using the Microsoft Management Console.  \n  \n The AuthorizationStoreRoleProvider object works with both Windows authentication and forms authentication modes.  \n  \n You can configure the AuthorizationStoreRoleProvider object to use either a local XML file or an Active Directory or Active Directory Application Mode (ADAM) server. When using a local file, the connection string should look like the following example.  \n  \n```  \nmsxml://<path to xml file>  \n```  \n  \n If the local file is stored in the directory tree of an ASP.NET Web application, you can use the tilde (\"~\") character to indicate the root directory. For example, to indicate that the local file is stored in the Web application's data directory, you would use a connection string similar to the following example.  \n  \n `msxml://~\\App_Data\\datafilename.xml`  \n  \n> [!IMPORTANT]\n>  Storing an XML data file in the Web application directory is a potential security threat. By default, IIS will serve XML data files to the Web. To improve security when using a local data file in an ASP.NET application, you should store the data file in the `App_Data` directory. Files stored in the `App_Data` directory will not be served to the Web.  \n  \n If you are using an Active Directory or ADAM server for the policy store, your connection string should be similar to the following example.  \n  \n `msldap://myserver/CN=MyAzManStore,OU=MyOU,DC=MyDomain,DC=MyDC,DC=Com`  \n  \n The exceptions listed in the documentation for AuthorizationStoreRoleProvider object methods are the exceptions that are raised by the AuthorizationStoreRoleProvider object. Since the provider relies on the underlying Authentication Manager runtime, a <xref:System.Runtime.InteropServices.COMException> exception may be thrown whenever the AuthorizationStoreRoleProvider object forwards a method call to the Authentication Manager runtime.  \n  \n> [!IMPORTANT]\n>  The AuthorizationStoreRoleProvider object has the following requirements for running in partial-trust environments:  \n>   \n>  When using a file-based policy store in an ASP.NET application, the file I/O permissions granted by the current trust level determine whether read and write actions are allowed by the provider. The ASP.NET application must have read permission on the file to read data from the policy store, and must have write permission to save new information or update existing information in the policy store. The default Medium-trust policy file gives an ASP.NET application read/write permissions in its application directory. The default Low-trust policy file only gives an ASP.NET application read permission in its application directory. In addition, the process identity under which the ASP.NET application runs must have file-system permissions to read and/or write the policy file.  \n>   \n>  When using an Active Directory or ADAM server, the ASP.NET application needs unmanaged-code permission because the internal AuthorizationStoreRoleProvider object code uses COM interop.  \n>   \n>  When using the AuthorizationStoreRoleProvider object outside of ASP.NET, the calling code needs unmanaged-code permission."
  example:
  - "The following code example shows a Web.config file set to use the AuthorizationStoreRoleProvider for role management.  \n  \n```  \n<configuration>  \n  <connectionStrings>  \n    <add name=\"AuthorizationServices\" connectionString=\"msxml://~\\App_Data\\SampleStore.xml\" />  \n  </connectionStrings>  \n  \n  <system.web>  \n  \n    <authentication mode=\"Windows\" />  \n    <identity impersonate=\"true\" />  \n  \n    <roleManager defaultProvider=\"AuthorizationStoreRoleProvider\"   \n      enabled=\"true\"  \n      cacheRolesInCookie=\"true\"  \n      cookieName=\".ASPROLES\"  \n      cookieTimeout=\"30\"  \n      cookiePath=\"/\"  \n      cookieRequireSSL=\"false\"  \n      cookieSlidingExpiration=\"true\"  \n      cookieProtection=\"All\" >  \n      <providers>  \n        <clear />  \n          <add  \n            name=\"AuthorizationStoreRoleProvider\"  \n            type=\"System.Web.Security.AuthorizationStoreRoleProvider\"  \n            connectionStringName=\"AuthorizationServices\"  \n            applicationName=\"SampleApplication\"   \n            cacheRefreshInterval=\"60\"  \n            scopeName=\"\" />  \n      </providers>  \n    </roleManager>  \n  \n  </system.web>  \n</configuration>  \n```"
  syntax:
    content: 'public class AuthorizationStoreRoleProvider : System.Web.Security.RoleProvider'
  inheritance:
  - System.Web.Security.RoleProvider
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.#ctor
  id: '#ctor'
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: AuthorizationStoreRoleProvider()
  nameWithType: AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider()
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider()
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "初始化的新实例<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref>类。"
  remarks: "ASP.NET 创建的实例将调用 AuthorizationStoreRoleProvider 构造函数<xref:System.Web.Security.AuthorizationStoreRoleProvider>为应用程序的配置中指定的类。</xref:System.Web.Security.AuthorizationStoreRoleProvider> 此构造函数不应在代码中使用。"
  syntax:
    content: public AuthorizationStoreRoleProvider ();
    parameters: []
  overload: System.Web.Security.AuthorizationStoreRoleProvider.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(System.String[],System.String[])
  id: AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: AddUsersToRoles(String[],String[])
  nameWithType: AuthorizationStoreRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "将指定的用户名添加到每个指定的角色。"
  remarks: "调用 AddUsersToRoles 方法<xref:System.Web.Security.Roles>类将一个或多个用户与在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器数据存储区中的一个或多个角色关联。</xref:System.Web.Security.Roles> 调用此方法<xref:System.Web.Security.Roles.AddUserToRole%2A?displayProperty=fullName>， <xref:System.Web.Security.Roles.AddUserToRoles%2A?displayProperty=fullName>，<xref:System.Web.Security.Roles.AddUsersToRole%2A?displayProperty=fullName>的<xref:System.Web.Security.Roles>类</xref:System.Web.Security.Roles>和<xref:System.Web.Security.Roles.AddUsersToRoles%2A?displayProperty=fullName>方法</xref:System.Web.Security.Roles.AddUsersToRoles%2A?displayProperty=fullName></xref:System.Web.Security.Roles.AddUsersToRole%2A?displayProperty=fullName></xref:System.Web.Security.Roles.AddUserToRoles%2A?displayProperty=fullName></xref:System.Web.Security.Roles.AddUserToRole%2A?displayProperty=fullName>"
  example:
  - "The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/51528ad0-2535-416a-b69f-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/51528ad0-2535-416a-b69f-_1.aspx)]"
  syntax:
    content: public override void AddUsersToRoles (string[] usernames, string[] roleNames);
    parameters:
    - id: usernames
      type: System.String[]
      description: "要添加到指定的角色的用户名称的字符串数组。"
    - id: roleNames
      type: System.String[]
      description: "要添加到指定的用户名的角色名称的字符串数组。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "指定的用户名之一是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。       -或-其中一个指定的角色名称<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。       -or-       <code>usernames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "一个指定的用户名为空字符串，或包含逗号 （，）。       -或者-其中一个指定的角色名称为空字符串或包含逗号 （，）。       - <code> usernames </code>包含一个重复的元素。       - <code> roleNames </code>包含一个重复的元素。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
  id: ApplicationName
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: ApplicationName
  nameWithType: AuthorizationStoreRoleProvider.ApplicationName
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "获取或设置为其存储和检索其角色信息的授权应用商店应用程序的名称。"
  remarks: "应用程序名称由<xref:System.Web.Security.AuthorizationStoreRoleProvider>要与不同的授权管理器应用程序，使多个 ASP.NET 应用程序可以使用相同的授权管理器策略关联用户和角色存储来存储角色信息而不会遇到冲突之间重复的角色名。</xref:System.Web.Security.AuthorizationStoreRoleProvider> 或者，多个 ASP.NET 应用程序可以通过在应用程序名称属性中指定相同的值使用相同的策略存储区。 以编程方式，可以将应用程序名称属性也可以设置以声明方式在应用程序的 Web.config 文件中使用`applicationName`属性。       如果没有为指定值`applicationName`属性在 Web.config 文件中，则<xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>当前属性值<xref:System.Web.HttpContext.Request%2A?displayProperty=fullName>使用对象。</xref:System.Web.HttpContext.Request%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>      1> [!NOTE]&1;> 授权管理器应用程序名称不能包含&quot;/&quot;字符中包含<xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName>属性。</xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName> 因此，应用程序名称属性的默认值不能作为授权管理器应用程序名称，并在应用程序的 Web.config 文件中，你必须始终指定`applicationName`属性中`provider`元素来配置你<xref:System.Web.Security.AuthorizationStoreRoleProvider>实例。</xref:System.Web.Security.AuthorizationStoreRoleProvider>      1> [!CAUTION]&1;> 由于单个默认角色提供程序实例用于所有服务的请求<xref:System.Web.HttpApplication>对象，您可以有多个请求并发执行，并尝试设置的应用程序名称属性值。</xref:System.Web.HttpApplication> 应用程序名称属性不是线程安全的多个写操作，并更改应用程序名称属性值可能导致意外行为时有多个用户的应用程序。 我们建议你避免编写代码，用户可设置的应用程序名称属性，除非必要，否则。 应用程序可能需要设置应用程序名称属性的示例是管理多个应用程序的角色数据管理应用程序。 此类应用程序应为单用户应用程序和不是 Web 应用程序。"
  example:
  - "The following example shows the  element in the `system.web` section of the Web.config file for an ASP.NET application. It specifies the application's <xref:System.Web.Security.AuthorizationStoreRoleProvider> instance and sets the ApplicationName property to `MyApplication`.  \n  \n```  \n<roleManager defaultProvider=\"AuthorizationStoreProvider\"   \n  enabled=\"true\"  \n  cacheRolesInCookie=\"true\"  \n  cookieName=\".ASPROLES\"  \n  cookieTimeout=\"30\"  \n  cookiePath=\"/\"  \n  cookieRequireSSL=\"false\"  \n  cookieSlidingExpiration=\"true\"  \n  cookieProtection=\"All\" >  \n  <providers>  \n    <add  \n      name=\"SqlProvider\"  \n      type=\"System.Web.Security.AuthorizationStoreRoleProvider\"  \n      connectionStringName=\"AuthorizationStoreServices\"   \n      scopeName=\"MyScope\"  \n      applicationName=\"MyApplication\" />  \n  </providers>  \n</roleManager>  \n```"
  syntax:
    content: public override string ApplicationName { get; set; }
    return:
      type: System.String
      description: "授权的名称存储为其存储和检索其角色信息的应用程序。 默认值是&lt;xref:System.Web.HttpRequest.ApplicationPath%2A?displayProperty=fullName&gt;当前属性值&lt;xref:System.Web.HttpContext.Request%2A?displayProperty=fullName&gt;。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "尝试设置为长度超过 256 个字符的字符串的应用程序名称。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
  id: CacheRefreshInterval
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: CacheRefreshInterval
  nameWithType: AuthorizationStoreRoleProvider.CacheRefreshInterval
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "获取策略存储区数据的缓存刷新间隔的分钟数。"
  syntax:
    content: public int CacheRefreshInterval { get; }
    return:
      type: System.Int32
      description: "刷新缓存的策略存储区数据之间的分钟数。 默认值为 60。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(System.String)
  id: CreateRole(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: CreateRole(String)
  nameWithType: AuthorizationStoreRoleProvider.CreateRole(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "将新的角色添加到角色授权管理器策略存储区。"
  remarks: "CreateRole 方法由调用<xref:System.Web.Security.Roles>类在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器数据存储中创建角色。</xref:System.Web.Security.Roles>       角色名称不区分大小写。"
  example:
  - "The following code example creates a new role in the authorization-manager policy store. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.au_0_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.au_0_1.aspx)]"
  syntax:
    content: public override void CreateRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "要创建的角色名称。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>为一个空字符串。       -或-<code>roleName</code>包含逗号。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(System.String,System.Boolean)
  id: DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: DeleteRole(String,Boolean)
  nameWithType: AuthorizationStoreRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "从授权管理器策略存储区中移除一个角色。"
  remarks: "DeleteRole 方法由调用<xref:System.Web.Security.Roles>类从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储区中删除角色。</xref:System.Web.Security.Roles> 当删除角色时，与该角色关联的用户列表也将删除从策略存储区。 不会影响数据库中的用户信息。       如果`throwOnPopulatedRole`是`true`然后将引发异常，将不删除此角色，如果通过标识角色`roleName`参数具有一个或多个成员。 如果`throwOnPopulatedRole`是`false`，则它是空的还是不会删除此角色。"
  example:
  - "The following example deletes a role from the authorization-manager policy store. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/csharp/f8238a62-ae02-4a3c-85f0-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#2](~/add/codesnippet/visualbasic/f8238a62-ae02-4a3c-85f0-_1.aspx)]"
  syntax:
    content: public override bool DeleteRole (string roleName, bool throwOnPopulatedRole);
    parameters:
    - id: roleName
      type: System.String
      description: "要删除的角色的名称。"
    - id: throwOnPopulatedRole
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，如果引发异常`roleName`具有一个或多个成员。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已删除的角色;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>为一个空字符串。       -或-<code>roleName</code>包含逗号。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<code>roleName</code>具有一个或多个成员和<code>throwOnPopulatedRole</code>是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。       -配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(System.String,System.String)
  id: FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: FindUsersInRole(String,String)
  nameWithType: AuthorizationStoreRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "授权存储角色提供程序不支持此方法。"
  syntax:
    content: public override string[] FindUsersInRole (string roleName, string usernameToMatch);
    parameters:
    - id: roleName
      type: System.String
      description: "搜索范围中的角色。"
    - id: usernameToMatch
      type: System.String
      description: "要搜索的用户名。"
    return:
      type: System.String[]
      description: "包含的用户名称与匹配的所有用户的名称的字符串数组<code> usernameToMatch </code>人员均为指定角色的成员。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "调用了不受支持的方法。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles
  id: GetAllRoles
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: GetAllRoles()
  nameWithType: AuthorizationStoreRoleProvider.GetAllRoles()
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "获取应用程序的所有角色的列表。"
  remarks: "调用 GetAllRoles 方法<xref:System.Web.Security.Roles>类，以检索在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储区中的所有角色的列表。</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetAllRoles%2A> method to get the list of roles for an application and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.au_2_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.au_2_1.aspx)]"
  syntax:
    content: public override string[] GetAllRoles ();
    parameters: []
    return:
      type: System.String[]
      description: "包含的特定应用程序的授权管理器策略存储区中存储的所有角色的名称的字符串数组。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles*
  exceptions:
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(System.String)
  id: GetRolesForUser(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: GetRolesForUser(String)
  nameWithType: AuthorizationStoreRoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "获取一个用户角色的列表。"
  remarks: "调用 GetRolesForUser 方法<xref:System.Web.Security.Roles>类从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储中检索指定的用户角色的列表。</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetRolesForUser%2A> method to retrieve a list of roles for a specified user and binds them to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/540a45cf-e182-4a47-b288-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/540a45cf-e182-4a47-b288-_1.aspx)]"
  syntax:
    content: public override string[] GetRolesForUser (string username);
    parameters:
    - id: username
      type: System.String
      description: "要返回的角色的列表的用户。"
    return:
      type: System.String[]
      description: "包含的指定的用户是中的所有角色的名称的字符串数组。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>username</code>包含逗号。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(System.String)
  id: GetUsersInRole(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: GetUsersInRole(String)
  nameWithType: AuthorizationStoreRoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "获取属于指定角色的用户列表。"
  remarks: "调用 GetUsersInRole 方法<xref:System.Web.Security.Roles>类来检索与在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储区中的指定角色关联的用户的列表。</xref:System.Web.Security.Roles>       GetUsersInRole 方法仅返回直接包含的用户名称中指定的授权管理器角色`roleName`参数。 基础授权管理器 API 调用的方法不支持组扩展，从而使嵌套的 NT 组中包含的用户 GetUsersInRole 嵌套授权管理器组，并不会返回 LDAP 查询组。"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.GetUsersInRole%2A> method to get a list of the users in a particular role and bind the results to a <xref:System.Web.UI.WebControls.GridView?displayProperty=fullName> control. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/ebc3a7d6-e0bc-48f6-bf0f-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/ebc3a7d6-e0bc-48f6-bf0f-_1.aspx)]"
  syntax:
    content: public override string[] GetUsersInRole (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "要获取用户列表的角色的名称。"
    return:
      type: System.String[]
      description: "包含属于指定角色的成员的所有用户的名称的字符串数组。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>为一个空字符串。       -或-<code>roleName</code>包含逗号。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  id: Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: Initialize(String,NameValueCollection)
  nameWithType: AuthorizationStoreRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.Initialize(String,NameValueCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "使用 ASP.NET 应用程序的配置文件中指定的属性值进行初始化的授权管理器角色提供程序。 此方法不应在代码中直接使用。"
  remarks: "Initialize 方法初始化<xref:System.Web.Security.AuthorizationStoreRoleProvider>与属性值指定在 ASP.NET 应用程序配置文件 (Web.config) 中，并且不应在代码中直接使用。</xref:System.Web.Security.AuthorizationStoreRoleProvider>"
  syntax:
    content: public override void Initialize (string name, System.Collections.Specialized.NameValueCollection config);
    parameters:
    - id: name
      type: System.String
      description: "名称<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref>初始化的实例。"
    - id: config
      type: System.Collections.Specialized.NameValueCollection
      description: "A <xref href=&quot;System.Collections.Specialized.NameValueCollection&quot;> </xref> ，其中包含的名称和值的角色提供程序的配置选项。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.Initialize*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>config</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性为空或不存在于[connectionStrings 元素 （ASP.NET 设置架构）](http://msdn.microsoft.com/en-us/b6ffbb2e-a4d1-410e-8f7e-9755e92c65de)配置节。       -配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>长度超过 256 个字符。       -此配置<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;></xref>实例包含无法识别的属性。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "ASP.NET 应用程序未运行在<xref href=&quot;System.Web.AspNetHostingPermissionLevel&quot;></xref>信任或更高版本。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(System.String,System.String)
  id: IsUserInRole(System.String,System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: IsUserInRole(String,String)
  nameWithType: AuthorizationStoreRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "获取一个值，该值指定的用户是否属于指定角色。"
  remarks: "调用 IsUserInRole 方法<xref:System.Web.Security.Roles>类和<xref:System.Security.Principal.IPrincipal.IsInRole%2A>方法<xref:System.Web.UI.Page.User%2A?displayProperty=fullName>属性来确定用户是否为 ASP.NET 应用程序的配置文件 (Web.config) 中指定授权管理器数据存储区中的角色相关联。</xref:System.Web.UI.Page.User%2A?displayProperty=fullName> </xref:System.Security.Principal.IPrincipal.IsInRole%2A> </xref:System.Web.Security.Roles>"
  example:
  - "The following code example programmatically checks to see whether the logged-on user is in the Administrators role before allowing the user to view user roles. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/csharp/90a9fe0c-acb8-442c-9ca1-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#4](~/add/codesnippet/visualbasic/90a9fe0c-acb8-442c-9ca1-_1.aspx)]"
  syntax:
    content: public override bool IsUserInRole (string username, string roleName);
    parameters:
    - id: username
      type: System.String
      description: "要搜索的用户名。"
    - id: roleName
      type: System.String
      description: "搜索范围中的角色。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的用户名称在指定的角色;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>username</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or       <code>roleName</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>为一个空字符串。       -或-<code>roleName</code>包含逗号。       -或-<code>username</code>包含逗号。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  id: RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: AuthorizationStoreRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(String[],String[])
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "从指定的角色中移除指定的用户名。"
  remarks: "调用 RemoveUsersFromRoles 方法<xref:System.Web.Security.Roles>类，以从 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器策略存储区中的一个或多个角色中删除一个或多个用户。</xref:System.Web.Security.Roles> 调用此方法<xref:System.Web.Security.Roles.RemoveUserFromRole%2A>， <xref:System.Web.Security.Roles.RemoveUserFromRoles%2A>，<xref:System.Web.Security.Roles.RemoveUsersFromRole%2A>的<xref:System.Web.Security.Roles>类</xref:System.Web.Security.Roles>和<xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A>方法</xref:System.Web.Security.Roles.RemoveUsersFromRoles%2A></xref:System.Web.Security.Roles.RemoveUsersFromRole%2A></xref:System.Web.Security.Roles.RemoveUserFromRoles%2A></xref:System.Web.Security.Roles.RemoveUserFromRole%2A>"
  example:
  - "The following code example adds one or more users to a role or removes a user from a role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/csharp/a89492ce-ed56-4c62-adf2-_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#3](~/add/codesnippet/visualbasic/a89492ce-ed56-4c62-adf2-_1.aspx)]"
  syntax:
    content: public override void RemoveUsersFromRoles (string[] userNames, string[] roleNames);
    parameters:
    - id: userNames
      type: System.String[]
      description: "要从指定的角色中删除的用户名称的字符串数组。"
    - id: roleNames
      type: System.String[]
      description: "要从中移除从指定的用户名的角色名称的字符串数组。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "指定的用户名之一是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。       -或-其中一个指定的角色名称<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。       -or-       <code>userNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>roleNames</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "一个指定的用户名为空字符串，或包含逗号。       -或者-其中一个指定的角色名称为空字符串或包含逗号。       - <code> userNames </code>包含一个重复的元素。       - <code> roleNames </code>包含一个重复的元素。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(System.String)
  id: RoleExists(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: RoleExists(String)
  nameWithType: AuthorizationStoreRoleProvider.RoleExists(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "获取一个值，该值指示指定的角色名称是否已存在于授权管理器策略存储区。"
  remarks: "调用 RoleExists 方法<xref:System.Web.Security.Roles>类以确定是否在 ASP.NET 应用程序的配置文件 (Web.config) 中指定的授权管理器数据存储中存在的角色名称。</xref:System.Web.Security.Roles>"
  example:
  - "The following code example uses the <xref:System.Web.Security.Roles.RoleExists%2A> method to determine whether a role name already exists before creating the role. For an example of a Web.config file that enables role management, see <xref:System.Web.Security.AuthorizationStoreRoleProvider>.  \n  \n [!code-cs[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/csharp/m-system.web.security.au_1_1.aspx)]\n [!code-vb[System.Web.Security.SqlRoleProvider#1](~/add/codesnippet/visualbasic/m-system.web.security.au_1_1.aspx)]"
  syntax:
    content: public override bool RoleExists (string roleName);
    parameters:
    - id: roleName
      type: System.String
      description: "要在授权管理器策略存储区中搜索的角色名称。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果角色名称已经存在于授权管理器策略存储区;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>roleName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>roleName</code>为一个空字符串。       -或-<code>roleName</code>包含逗号。"
  - type: System.Configuration.Provider.ProviderException
    commentId: T:System.Configuration.Provider.ProviderException
    description: "配置<xref uid=&quot;langword_csharp_applicationName&quot; name=&quot;applicationName&quot; href=&quot;&quot;></xref>找不到。       -配置<xref uid=&quot;langword_csharp_scopeName&quot; name=&quot;scopeName&quot; href=&quot;&quot;></xref>找不到。       -或者-服务器上未安装授权管理器运行时。"
  - type: System.IO.FileNotFoundException
    commentId: T:System.IO.FileNotFoundException
    description: "<xref uid=&quot;langword_csharp_connectionStringName&quot; name=&quot;connectionStringName&quot; href=&quot;&quot;> </xref>属性引用不存在的文件的连接字符串。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<xref href=&quot;System.Web.Security.AuthorizationStoreRoleProvider&quot;> </xref>实例使用基于文件的策略存储区，配置，对文件的读取访问权限不允许在当前信任级别。"
  platform:
  - net462
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
  id: ScopeName
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  langs:
  - csharp
  name: ScopeName
  nameWithType: AuthorizationStoreRoleProvider.ScopeName
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web.Security
  summary: "获取或设置授权存储该作用域名称。"
  remarks: "可以使用设置 ScopeName 属性`scopeName`中的提供程序实例的配置属性`providers`在配置部分。      1> [!CAUTION]&1;> 由于单个默认角色提供程序实例用于所有服务的请求<xref:System.Web.HttpApplication>对象，您可以有多个请求并发执行，并尝试设置 ScopeName 属性值。</xref:System.Web.HttpApplication> ScopeName 属性不是线程安全的多个写操作，并更改 ScopeName 属性值可能导致意外行为时有多个用户的应用程序。 我们建议你避免编写代码，用户可设置 ScopeName 属性，除非必要，否则。 应用程序可能需要设置 ScopeName 属性的示例是管理多个应用程序的角色数据管理应用程序。 此类应用程序应为单用户应用程序和不是 Web 应用程序。"
  syntax:
    content: public string ScopeName { get; set; }
    return:
      type: System.String
      description: "授权存储作用域名称。"
  overload: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Security.RoleProvider
  isExternal: false
  name: System.Web.Security.RoleProvider
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Configuration.Provider.ProviderException
  parent: System.Configuration.Provider
  isExternal: false
  name: ProviderException
  nameWithType: ProviderException
  fullName: System.Configuration.Provider.ProviderException
- uid: System.IO.FileNotFoundException
  isExternal: true
  name: System.IO.FileNotFoundException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.Web.Security.AuthorizationStoreRoleProvider.#ctor
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: AuthorizationStoreRoleProvider()
  nameWithType: AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider()
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider()
- uid: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(System.String[],System.String[])
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: AddUsersToRoles(String[],String[])
  nameWithType: AuthorizationStoreRoleProvider.AddUsersToRoles(String[],String[])
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles(String[],String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: AuthorizationStoreRoleProvider.ApplicationName
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: CacheRefreshInterval
  nameWithType: AuthorizationStoreRoleProvider.CacheRefreshInterval
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: CreateRole(String)
  nameWithType: AuthorizationStoreRoleProvider.CreateRole(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole(String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(System.String,System.Boolean)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: DeleteRole(String,Boolean)
  nameWithType: AuthorizationStoreRoleProvider.DeleteRole(String,Boolean)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole(String,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(System.String,System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: FindUsersInRole(String,String)
  nameWithType: AuthorizationStoreRoleProvider.FindUsersInRole(String,String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole(String,String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetAllRoles()
  nameWithType: AuthorizationStoreRoleProvider.GetAllRoles()
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles()
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetRolesForUser(String)
  nameWithType: AuthorizationStoreRoleProvider.GetRolesForUser(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser(String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetUsersInRole(String)
  nameWithType: AuthorizationStoreRoleProvider.GetUsersInRole(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole(String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.Initialize(System.String,System.Collections.Specialized.NameValueCollection)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: Initialize(String,NameValueCollection)
  nameWithType: AuthorizationStoreRoleProvider.Initialize(String,NameValueCollection)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.Initialize(String,NameValueCollection)
- uid: System.Collections.Specialized.NameValueCollection
  parent: System.Collections.Specialized
  isExternal: false
  name: NameValueCollection
  nameWithType: NameValueCollection
  fullName: System.Collections.Specialized.NameValueCollection
- uid: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(System.String,System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: IsUserInRole(String,String)
  nameWithType: AuthorizationStoreRoleProvider.IsUserInRole(String,String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole(String,String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(System.String[],System.String[])
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles(String[],String[])
  nameWithType: AuthorizationStoreRoleProvider.RemoveUsersFromRoles(String[],String[])
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles(String[],String[])
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(System.String)
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: RoleExists(String)
  nameWithType: AuthorizationStoreRoleProvider.RoleExists(String)
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists(String)
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: ScopeName
  nameWithType: AuthorizationStoreRoleProvider.ScopeName
  fullName: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName
- uid: System.Web.Security.AuthorizationStoreRoleProvider.#ctor*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: AuthorizationStoreRoleProvider
  nameWithType: AuthorizationStoreRoleProvider.AuthorizationStoreRoleProvider
- uid: System.Web.Security.AuthorizationStoreRoleProvider.AddUsersToRoles*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: AddUsersToRoles
  nameWithType: AuthorizationStoreRoleProvider.AddUsersToRoles
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ApplicationName*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: ApplicationName
  nameWithType: AuthorizationStoreRoleProvider.ApplicationName
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CacheRefreshInterval*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: CacheRefreshInterval
  nameWithType: AuthorizationStoreRoleProvider.CacheRefreshInterval
- uid: System.Web.Security.AuthorizationStoreRoleProvider.CreateRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: CreateRole
  nameWithType: AuthorizationStoreRoleProvider.CreateRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.DeleteRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: DeleteRole
  nameWithType: AuthorizationStoreRoleProvider.DeleteRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.FindUsersInRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: FindUsersInRole
  nameWithType: AuthorizationStoreRoleProvider.FindUsersInRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetAllRoles*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetAllRoles
  nameWithType: AuthorizationStoreRoleProvider.GetAllRoles
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetRolesForUser*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetRolesForUser
  nameWithType: AuthorizationStoreRoleProvider.GetRolesForUser
- uid: System.Web.Security.AuthorizationStoreRoleProvider.GetUsersInRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: GetUsersInRole
  nameWithType: AuthorizationStoreRoleProvider.GetUsersInRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.Initialize*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: Initialize
  nameWithType: AuthorizationStoreRoleProvider.Initialize
- uid: System.Web.Security.AuthorizationStoreRoleProvider.IsUserInRole*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: IsUserInRole
  nameWithType: AuthorizationStoreRoleProvider.IsUserInRole
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RemoveUsersFromRoles*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: RemoveUsersFromRoles
  nameWithType: AuthorizationStoreRoleProvider.RemoveUsersFromRoles
- uid: System.Web.Security.AuthorizationStoreRoleProvider.RoleExists*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: RoleExists
  nameWithType: AuthorizationStoreRoleProvider.RoleExists
- uid: System.Web.Security.AuthorizationStoreRoleProvider.ScopeName*
  parent: System.Web.Security.AuthorizationStoreRoleProvider
  isExternal: false
  name: ScopeName
  nameWithType: AuthorizationStoreRoleProvider.ScopeName
