### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.AttributeCollection
  id: AttributeCollection
  children:
  - System.ComponentModel.AttributeCollection.#ctor
  - System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  - System.ComponentModel.AttributeCollection.Attributes
  - System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  - System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  - System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  - System.ComponentModel.AttributeCollection.Count
  - System.ComponentModel.AttributeCollection.Empty
  - System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  - System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  - System.ComponentModel.AttributeCollection.GetEnumerator
  - System.ComponentModel.AttributeCollection.Item(System.Int32)
  - System.ComponentModel.AttributeCollection.Item(System.Type)
  - System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  - System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  - System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  - System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
  type: Class
  summary: "表示特性的集合。"
  remarks: "AttributeCollection 类是只读的;它未实现方法以添加或删除属性。 必须继承此类，以实现这些方法。       使用<xref:System.ComponentModel.AttributeCollection.Count%2A>属性在集合中查找存在的属性数目。</xref:System.ComponentModel.AttributeCollection.Count%2A>       此类的方法还可用于查询有关其内容的集合。 调用<xref:System.ComponentModel.AttributeCollection.Contains%2A>方法以验证集合中是否存在指定的属性或特性数组。</xref:System.ComponentModel.AttributeCollection.Contains%2A> 调用<xref:System.ComponentModel.AttributeCollection.Matches%2A>方法来验证指定的属性或数组属性存在于集合中，以及指定属性的值是否在集合中的值相同。</xref:System.ComponentModel.AttributeCollection.Matches%2A>       虽然大多数属性具有默认值，默认值不是必需的。 如果某一特性有没有默认值，`null`从接受一个类型的索引属性返回。 在定义你自己的特性，可提供构造函数不带自变量，或定义名为&quot;Default&quot;你属性类型的公共静态字段来声明一个默认值。"
  example:
  - "The first code example checks to see whether the <xref:System.ComponentModel.BrowsableAttribute> has been set in this collection. The second code example gets the actual value of the <xref:System.ComponentModel.DescriptionAttribute> for a button. Both examples require that `button1` and `textBox1` have been created on a form. When using attributes, verify that an attribute has been set, or access its value.  \n  \n [!code-cpp[Classic AttributeCollection Example#1](~/add/codesnippet/cpp/t-system.componentmodel._150_1.cpp)]\n [!code-cs[Classic AttributeCollection Example#1](~/add/codesnippet/csharp/t-system.componentmodel._150_1.cs)]\n [!code-vb[Classic AttributeCollection Example#1](~/add/codesnippet/visualbasic/t-system.componentmodel._150_1.vb)]  \n  \n [!code-cpp[Classic AttributeCollection Example#2](~/add/codesnippet/cpp/t-system.componentmodel._150_2.cpp)]\n [!code-cs[Classic AttributeCollection Example#2](~/add/codesnippet/csharp/t-system.componentmodel._150_2.cs)]\n [!code-vb[Classic AttributeCollection Example#2](~/add/codesnippet/visualbasic/t-system.componentmodel._150_2.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class AttributeCollection : System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.#ctor
  id: '#ctor'
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: AttributeCollection()
  nameWithType: AttributeCollection.AttributeCollection()
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.AttributeCollection&quot;></xref>类。"
  syntax:
    content: protected AttributeCollection ();
    parameters: []
  overload: System.ComponentModel.AttributeCollection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  id: '#ctor(System.Attribute[])'
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: AttributeCollection(Attribute[])
  nameWithType: AttributeCollection.AttributeCollection(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(Attribute[])
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.AttributeCollection&quot;></xref>类。"
  remarks: ''
  example:
  - "The following code example creates a new <xref:System.ComponentModel.AttributeCollection> using the attributes on `button1`. It assumes that `button1` has been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/cpp/m-system.componentmodel._17_1.cpp)]\n [!code-cs[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/csharp/m-system.componentmodel._17_1.cs)]\n [!code-vb[Classic AttributeCollection.AttributeCollection Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._17_1.vb)]"
  syntax:
    content: public AttributeCollection (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>为此集合提供属性。</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>attributes</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Attributes
  id: Attributes
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Attributes
  nameWithType: AttributeCollection.Attributes
  fullName: System.ComponentModel.AttributeCollection.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取属性集合。"
  syntax:
    content: protected virtual Attribute[] Attributes { get; }
    return:
      type: System.Attribute[]
      description: "特性集合。"
  overload: System.ComponentModel.AttributeCollection.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  id: Contains(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Contains(Attribute)
  nameWithType: AttributeCollection.Contains(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定此属性的集合是否具有指定的属性。"
  remarks: "如果指定的类型的属性存在于集合中，并且指定的属性的值是集合中的属性实例的值相同，此集合将具有指定的属性。       之间的差异<xref:System.ComponentModel.AttributeCollection.Matches%2A>，并且包含方法是<xref:System.ComponentModel.AttributeCollection.Matches%2A>调用<xref:System.Attribute.Match%2A>方法属性，并包含调用<xref:System.Object.Equals%2A>方法。</xref:System.Object.Equals%2A> </xref:System.Attribute.Match%2A> </xref:System.ComponentModel.AttributeCollection.Matches%2A> </xref:System.ComponentModel.AttributeCollection.Matches%2A>       对于大多数属性，这些方法执行相同的操作。 可能具有多个标志，但是，属性<xref:System.Attribute.Match%2A>通常实现，因此它将返回`true`如果不满足任何标志。</xref:System.Attribute.Match%2A> 例如，考虑使用布尔标志&quot;SupportsSql&quot;、&quot;SupportsOleDb&quot;和&quot;SupportsXml&quot;的数据绑定特性。 此属性可能会显示一个属性，支持所有三个数据绑定方法。 它通常会程序员只需知道某个特定的方法是否可用，这种情况不是所有三个。 因此，无法使用程序员<xref:System.Attribute.Match%2A>拥有包含仅的标志程序员属性的实例满足的要求。</xref:System.Attribute.Match%2A>"
  example:
  - "The following code example checks to see whether the collection has a <xref:System.ComponentModel.BrowsableAttribute> set to `true`. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-vb[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._16_1.vb)]\n [!code-cs[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/csharp/m-system.componentmodel._16_1.cs)]\n [!code-cpp[Classic AttributeCollection.Contains Example#1](~/add/codesnippet/cpp/m-system.componentmodel._16_1.cpp)]"
  syntax:
    content: public bool Contains (Attribute attribute);
    parameters:
    - id: attribute
      type: System.Attribute
      description: "<xref:System.Attribute>若要在集合中找到。</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果集合包含的属性或是特性; 的类型的默认属性否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.AttributeCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  id: Contains(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Contains(Attribute[])
  nameWithType: AttributeCollection.Contains(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定此属性集合是否包含的特性数组中的所有指定的属性。"
  remarks: "如果集合中的所有指定的属性类型存在并且指定数组中的每个属性是集合中的特性相同，此集合将具有指定的属性数组。"
  example:
  - "The following code example compares the attributes in `button1` and `textBox1` to see whether the attributes for the button are contained in the attributes for the text box. It assumes that both `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/csharp/m-system.componentmodel._42_1.cs)]\n [!code-vb[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._42_1.vb)]\n [!code-cpp[Classic AttributeCollection.Contains1 Example#1](~/add/codesnippet/cpp/m-system.componentmodel._42_1.cpp)]"
  syntax:
    content: public bool Contains (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>若要在集合中找到。</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果集合包含所有属性;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.AttributeCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: AttributeCollection.CopyTo(Array,Int32)
  fullName: System.ComponentModel.AttributeCollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "将集合复制到一个数组中指定索引处开始。"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "<xref:System.Array>要复制到的集合。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "要从开始的索引。"
  overload: System.ComponentModel.AttributeCollection.CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Count
  id: Count
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Count
  nameWithType: AttributeCollection.Count
  fullName: System.ComponentModel.AttributeCollection.Count
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取属性的数目。"
  remarks: "你可以使用计数属性设置的一个循环来循环访问的对象的集合的限制。 如果该集合为从零开始，请务必使用`Count - 1`作为循环的上限。"
  example:
  - "The following code example uses the Count property to print the number of properties on `button1` in a text box. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.Count Example#1](~/add/codesnippet/csharp/p-system.componentmodel._11_1.cs)]\n [!code-vb[Classic AttributeCollection.Count Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._11_1.vb)]\n [!code-cpp[Classic AttributeCollection.Count Example#1](~/add/codesnippet/cpp/p-system.componentmodel._11_1.cpp)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "属性数目。"
  overload: System.ComponentModel.AttributeCollection.Count*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Empty
  id: Empty
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Empty
  nameWithType: AttributeCollection.Empty
  fullName: System.ComponentModel.AttributeCollection.Empty
  type: Field
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "指定可以使用一个空集合，而不是创建一个新。 此字段为只读的。"
  syntax:
    content: public static readonly System.ComponentModel.AttributeCollection Empty;
    return:
      type: System.ComponentModel.AttributeCollection
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  id: FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: FromExisting(AttributeCollection,Attribute[])
  nameWithType: AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  fullName: System.ComponentModel.AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "创建一个新<xref href=&quot;System.ComponentModel.AttributeCollection&quot;></xref>从现有<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>。"
  remarks: "如果`newAttributes`提供参数，其<xref:System.Attribute>项将合并与`existing`参数。</xref:System.Attribute>"
  syntax:
    content: public static System.ComponentModel.AttributeCollection FromExisting (System.ComponentModel.AttributeCollection existing, Attribute[] newAttributes);
    parameters:
    - id: existing
      type: System.ComponentModel.AttributeCollection
      description: "<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>从中创建副本。"
    - id: newAttributes
      type: System.Attribute[]
      description: "类型的数组<xref:System.Attribute>为此集合提供属性。</xref:System.Attribute> Can be <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
    return:
      type: System.ComponentModel.AttributeCollection
      description: "A new <xref href=&quot;System.ComponentModel.AttributeCollection&quot;></xref> that is a copy of <code>existing</code>."
  overload: System.ComponentModel.AttributeCollection.FromExisting*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>existing</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  id: GetDefaultAttribute(System.Type)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: GetDefaultAttribute(Type)
  nameWithType: AttributeCollection.GetDefaultAttribute(Type)
  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回默认<xref:System.Attribute>的给定<xref:System.Type>.</xref:System.Type> </xref:System.Attribute>"
  syntax:
    content: protected Attribute GetDefaultAttribute (Type attributeType);
    parameters:
    - id: attributeType
      type: System.Type
      description: "<xref:System.Type>要检索的属性。</xref:System.Type>"
    return:
      type: System.Attribute
      description: "默认值<xref:System.Attribute>的给定<code> attributeType </code>。</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.GetDefaultAttribute*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.GetEnumerator
  id: GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: AttributeCollection.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取此集合的枚举数。"
  remarks: ''
  example:
  - "The following code example gets an enumerator for the attributes on `button1`. It uses the enumerator to print the names of the attributes in the collection. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/cpp/m-system.componentmodel._31_1.cpp)]\n [!code-cs[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/csharp/m-system.componentmodel._31_1.cs)]\n [!code-vb[Classic AttributeCollection.GetEnumerator Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._31_1.vb)]"
  syntax:
    content: public System.Collections.IEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "类型<xref:System.Collections.IEnumerator>.</xref:System.Collections.IEnumerator>枚举数"
  overload: System.ComponentModel.AttributeCollection.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: AttributeCollection.Item(Int32)
  fullName: System.ComponentModel.AttributeCollection.Item(Int32)
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取具有指定的索引号的属性。"
  remarks: "索引号是从零开始。 因此，你必须再从减去 1 的特定<xref:System.Attribute>访问该<xref:System.Attribute>。</xref:System.Attribute></xref:System.Attribute>的数字位置 例如，若要获取第三个<xref:System.Attribute>，你需要指定`myColl[2]`。</xref:System.Attribute>"
  example:
  - "The following code example uses the Item property to print the name of the <xref:System.Attribute> specified by the index number in a text box. Because the index number is zero-based, this code example prints the name of the second <xref:System.Attribute> in a text box. It assumes `button1` and `textBox1` have been created on a form.  \n  \n [!code-cs[Classic AttributeCollection.this Example#1](~/add/codesnippet/csharp/p-system.componentmodel._5_1.cs)]\n [!code-vb[Classic AttributeCollection.this Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._5_1.vb)]\n [!code-cpp[Classic AttributeCollection.this Example#1](~/add/codesnippet/cpp/p-system.componentmodel._5_1.cpp)]"
  syntax:
    content: public virtual Attribute this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: "从零开始的索引<xref href=&quot;System.ComponentModel.AttributeCollection&quot;> </xref>。"
    return:
      type: System.Attribute
      description: "<xref:System.Attribute>具有指定的索引号。</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Item(System.Type)
  id: Item(System.Type)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Item(Type)
  nameWithType: AttributeCollection.Item(Type)
  fullName: System.ComponentModel.AttributeCollection.Item(Type)
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取具有指定类型的属性。"
  remarks: "如果集合中不存在该属性，此属性返回的属性类型的默认值。"
  example:
  - "The following code example gets the <xref:System.ComponentModel.DesignerAttribute> from the collection and prints its value. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n For this code example to run, you must provide the fully qualified assembly name. For information about how to obtain the fully qualified assembly name, see [Assembly Names](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/csharp/p-system.componentmodel._9_1.cs)]\n [!code-cpp[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/cpp/p-system.componentmodel._9_1.cpp)]\n [!code-vb[Classic AttributeCollection.this1 Example#1](~/add/codesnippet/visualbasic/p-system.componentmodel._9_1.vb)]"
  syntax:
    content: public virtual Attribute this[Type attributeType] { get; }
    parameters:
    - id: attributeType
      type: System.Type
      description: "<xref:System.Type>的<xref:System.Attribute>若要从集合中获取。</xref:System.Attribute> </xref:System.Type>"
    return:
      type: System.Attribute
      description: "<xref:System.Attribute>使用指定的类型; 如果该属性不存在，属性类型的默认值。</xref:System.Attribute>"
  overload: System.ComponentModel.AttributeCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  id: Matches(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Matches(Attribute)
  nameWithType: AttributeCollection.Matches(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定指定的属性是否在集合中的特性相同。"
  remarks: "属性可以为匹配提供支持。       匹配项之间的差异和<xref:System.ComponentModel.AttributeCollection.Contains%2A>方法是匹配项，调用<xref:System.Attribute.Match%2A>的属性上的方法和<xref:System.ComponentModel.AttributeCollection.Contains%2A>调用<xref:System.Object.Equals%2A>方法。</xref:System.Object.Equals%2A> </xref:System.ComponentModel.AttributeCollection.Contains%2A> </xref:System.Attribute.Match%2A> </xref:System.ComponentModel.AttributeCollection.Contains%2A>       对于大多数属性，这些方法执行相同的操作。 可能具有多个标志，但是，属性<xref:System.Attribute.Match%2A>通常实现，因此它将返回`true`如果不满足任何标志。</xref:System.Attribute.Match%2A> 例如，考虑使用布尔标志&quot;SupportsSql&quot;、&quot;SupportsOleDb&quot;和&quot;SupportsXml&quot;的数据绑定特性。 此属性可能会显示一个属性，支持所有三个数据绑定方法。 它通常会程序员只需知道某个特定的方法是否可用，这种情况不是所有三个。 因此，无法使用程序员<xref:System.Attribute.Match%2A>拥有包含仅的标志程序员属性的实例满足的要求。</xref:System.Attribute.Match%2A>"
  example:
  - "The following code example verifies that the <xref:System.ComponentModel.BrowsableAttribute> is a member of the collection and that it has been set to `true`. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/cpp/m-system.componentmodel._11_1.cpp)]\n [!code-vb[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._11_1.vb)]\n [!code-cs[Classic AttributeCollection.Matches Example#1](~/add/codesnippet/csharp/m-system.componentmodel._11_1.cs)]"
  syntax:
    content: public bool Matches (Attribute attribute);
    parameters:
    - id: attribute
      type: System.Attribute
      description: "实例<xref:System.Attribute>要与此集合中的属性进行比较。</xref:System.Attribute>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果属性包含在集合中，集合; 中具有相同属性的值否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.AttributeCollection.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  id: Matches(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: Matches(Attribute[])
  nameWithType: AttributeCollection.Matches(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute[])
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "确定指定数组中的属性是否与集合中的属性相同。"
  remarks: "属性可以为匹配提供支持。"
  example:
  - "The following code example compares the attributes in a button and a text box to see whether they match. It assumes that `button1` and `textBox1` have been created on a form.  \n  \n [!code-cpp[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/cpp/m-system.componentmodel._40_1.cpp)]\n [!code-cs[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/csharp/m-system.componentmodel._40_1.cs)]\n [!code-vb[Classic AttributeCollection.Matches1 Example#1](~/add/codesnippet/visualbasic/m-system.componentmodel._40_1.vb)]"
  syntax:
    content: public bool Matches (Attribute[] attributes);
    parameters:
    - id: attributes
      type: System.Attribute[]
      description: "数组<xref href=&quot;System.CodeDom.MemberAttributes&quot;></xref>要与此集合中的属性进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数组中的所有属性集合中包含和集合中的具有相同的值作为属性否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.AttributeCollection.Matches*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.Count
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取集合中包含的元素数。"
  syntax:
    content: int System.Collections.ICollection.Count { get; }
    return:
      type: System.Int32
      description: "集合中包含的元素数。"
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取一个值，该值指示是否同步对集合的访问 （线程安全）。"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果对集合的访问同步 （线程安全）;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取可用于同步对集合的访问的对象。"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "一个可用于同步对集合的访问的对象。"
  overload: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.ComponentModel.AttributeCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回一个<xref:System.Collections.IEnumerator><xref:System.Collections.IDictionary>。</xref:System.Collections.IDictionary> </xref:System.Collections.IEnumerator>"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator> <xref:System.Collections.IDictionary>。</xref:System.Collections.IDictionary> </xref:System.Collections.IEnumerator>"
  overload: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ComponentModel.AttributeCollection.#ctor
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection()
  nameWithType: AttributeCollection.AttributeCollection()
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection()
- uid: System.ComponentModel.AttributeCollection.#ctor(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection(Attribute[])
  nameWithType: AttributeCollection.AttributeCollection(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.AttributeCollection(Attribute[])
- uid: System.Attribute[]
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute[]
  spec.csharp:
  - uid: System.Attribute
    name: Attribute
    nameWithType: Attribute
    fullName: Attribute[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.ComponentModel.AttributeCollection.Attributes
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Attributes
  nameWithType: AttributeCollection.Attributes
  fullName: System.ComponentModel.AttributeCollection.Attributes
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains(Attribute)
  nameWithType: AttributeCollection.Contains(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Attribute
  parent: System
  isExternal: true
  name: Attribute
  nameWithType: Attribute
  fullName: System.Attribute
- uid: System.ComponentModel.AttributeCollection.Contains(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains(Attribute[])
  nameWithType: AttributeCollection.Contains(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Contains(Attribute[])
- uid: System.ComponentModel.AttributeCollection.CopyTo(System.Array,System.Int32)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: AttributeCollection.CopyTo(Array,Int32)
  fullName: System.ComponentModel.AttributeCollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.ComponentModel.AttributeCollection.Count
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Count
  nameWithType: AttributeCollection.Count
  fullName: System.ComponentModel.AttributeCollection.Count
- uid: System.ComponentModel.AttributeCollection.Empty
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Empty
  nameWithType: AttributeCollection.Empty
  fullName: System.ComponentModel.AttributeCollection.Empty
- uid: System.ComponentModel.AttributeCollection
  parent: System.ComponentModel
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection
  fullName: System.ComponentModel.AttributeCollection
- uid: System.ComponentModel.AttributeCollection.FromExisting(System.ComponentModel.AttributeCollection,System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: FromExisting(AttributeCollection,Attribute[])
  nameWithType: AttributeCollection.FromExisting(AttributeCollection,Attribute[])
  fullName: System.ComponentModel.AttributeCollection.FromExisting(AttributeCollection,Attribute[])
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute(System.Type)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetDefaultAttribute(Type)
  nameWithType: AttributeCollection.GetDefaultAttribute(Type)
  fullName: System.ComponentModel.AttributeCollection.GetDefaultAttribute(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.AttributeCollection.GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: AttributeCollection.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.ComponentModel.AttributeCollection.Item(System.Int32)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item(Int32)
  nameWithType: AttributeCollection.Item(Int32)
  fullName: System.ComponentModel.AttributeCollection.Item(Int32)
- uid: System.ComponentModel.AttributeCollection.Item(System.Type)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item(Type)
  nameWithType: AttributeCollection.Item(Type)
  fullName: System.ComponentModel.AttributeCollection.Item(Type)
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute)
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches(Attribute)
  nameWithType: AttributeCollection.Matches(Attribute)
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute)
- uid: System.ComponentModel.AttributeCollection.Matches(System.Attribute[])
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches(Attribute[])
  nameWithType: AttributeCollection.Matches(Attribute[])
  fullName: System.ComponentModel.AttributeCollection.Matches(Attribute[])
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.Count
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.IsSynchronized
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
  fullName: System.ComponentModel.AttributeCollection.System.Collections.ICollection.SyncRoot
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.ComponentModel.AttributeCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.ComponentModel.AttributeCollection.#ctor*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: AttributeCollection
  nameWithType: AttributeCollection.AttributeCollection
- uid: System.ComponentModel.AttributeCollection.Attributes*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Attributes
  nameWithType: AttributeCollection.Attributes
- uid: System.ComponentModel.AttributeCollection.Contains*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Contains
  nameWithType: AttributeCollection.Contains
- uid: System.ComponentModel.AttributeCollection.CopyTo*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: CopyTo
  nameWithType: AttributeCollection.CopyTo
- uid: System.ComponentModel.AttributeCollection.Count*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Count
  nameWithType: AttributeCollection.Count
- uid: System.ComponentModel.AttributeCollection.FromExisting*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: FromExisting
  nameWithType: AttributeCollection.FromExisting
- uid: System.ComponentModel.AttributeCollection.GetDefaultAttribute*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetDefaultAttribute
  nameWithType: AttributeCollection.GetDefaultAttribute
- uid: System.ComponentModel.AttributeCollection.GetEnumerator*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: AttributeCollection.GetEnumerator
- uid: System.ComponentModel.AttributeCollection.Item*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Item
  nameWithType: AttributeCollection.Item
- uid: System.ComponentModel.AttributeCollection.Matches*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: Matches
  nameWithType: AttributeCollection.Matches
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#Count*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: AttributeCollection.System.Collections.ICollection.Count
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: AttributeCollection.System.Collections.ICollection.IsSynchronized
- uid: System.ComponentModel.AttributeCollection.System#Collections#ICollection#SyncRoot*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: AttributeCollection.System.Collections.ICollection.SyncRoot
- uid: System.ComponentModel.AttributeCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.ComponentModel.AttributeCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: AttributeCollection.System.Collections.IEnumerable.GetEnumerator
