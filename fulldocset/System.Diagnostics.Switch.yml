### YamlMime:ManagedReference
items:
- uid: System.Diagnostics.Switch
  id: Switch
  children:
  - System.Diagnostics.Switch.#ctor(System.String,System.String)
  - System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)
  - System.Diagnostics.Switch.Attributes
  - System.Diagnostics.Switch.Description
  - System.Diagnostics.Switch.DisplayName
  - System.Diagnostics.Switch.GetSupportedAttributes
  - System.Diagnostics.Switch.OnSwitchSettingChanged
  - System.Diagnostics.Switch.OnValueChanged
  - System.Diagnostics.Switch.SwitchSetting
  - System.Diagnostics.Switch.Value
  langs:
  - csharp
  name: Switch
  nameWithType: Switch
  fullName: System.Diagnostics.Switch
  type: Class
  summary: "提供一个抽象基类，以创建新的调试和跟踪开关。"
  remarks: "交换机提供了用于控制跟踪和调试输出在运行时使用外部设置的有效机制。 交换机类实现开关，从而允许您在运行时更改交换机级别的默认行为。       此类是适用于基<xref:System.Diagnostics.BooleanSwitch>，<xref:System.Diagnostics.SourceSwitch>和<xref:System.Diagnostics.TraceSwitch>类。</xref:System.Diagnostics.TraceSwitch> </xref:System.Diagnostics.SourceSwitch> </xref:System.Diagnostics.BooleanSwitch> 这些开关可满足大多数调试和跟踪需求。 关于跟踪开关的详细信息，请参阅[跟踪开关](~/add/includes/ajax-current-ext-md.md)。       你必须启用跟踪或调试才能使用交换机。 下面的语法是特定的编译器。 如果你使用除 C# 或 Visual Basic 编译器，请参阅你的编译器的文档。      -若要启用调试 C# 中，添加`/d:DEBUG`到编译器命令行编译代码，或可以添加时的标志`#define DEBUG`到你的文件的顶部。 在 Visual Basic 中，添加`/d:DEBUG=True`到编译器命令行的标志。      -若要启用跟踪使用以 C#，添加`/d:TRACE`到编译器命令行编译代码，或添加时的标志`#define TRACE`到你的文件的顶部。 在 Visual Basic 中，添加`/d:TRACE=True`到编译器命令行的标志。       若要设置你的交换机的级别，请编辑配置文件对应于你的应用程序的名称。 在此文件中，可以添加交换机并将其值设置、 移除开关，或清除所有交换机以前由应用程序设置。 配置文件的格式应类似下面的示例︰```   <configuration>     <system.diagnostics>       <switches>         <add name=&quot;mySwitch&quot; value=&quot;true&quot; />       </switches>     </system.diagnostics>   </configuration>   ```此示例配置节定义<xref:System.Diagnostics.BooleanSwitch>与<xref:System.Diagnostics.Switch.DisplayName%2A>属性设置为`mySwitch`和<xref:System.Diagnostics.BooleanSwitch.Enabled%2A>值设置为`true`。</xref:System.Diagnostics.BooleanSwitch.Enabled%2A> </xref:System.Diagnostics.Switch.DisplayName%2A> </xref:System.Diagnostics.BooleanSwitch> 在你的应用程序，你可以通过创建中使用已配置的开关值<xref:System.Diagnostics.BooleanSwitch>具有相同名称，如下面的代码示例中所示。</xref:System.Diagnostics.BooleanSwitch>       [!code-cpp[经典交换机示例&#4;](~/add/codesnippet/cpp/t-system.diagnostics.swi_0_1.cpp)][!code-cs[经典交换机示例&#4;  ](~/add/codesnippet/csharp/t-system.diagnostics.swi_0_1.cs)]"
  example:
  - "The following example shows how to define a new Switch class with four levels of tracing that can be used to trace a call stack. You can use the switch to instrument your application to log each time the method is entered or exited.  \n  \n The first example creates the enumeration used to set the level of the switch.  \n  \n [!code-cpp[Classic Switch Example#1](~/add/codesnippet/cpp/t-system.diagnostics.swi_0_2.cpp)]\n [!code-cs[Classic Switch Example#1](~/add/codesnippet/csharp/t-system.diagnostics.swi_0_2.cs)]\n [!code-vb[Classic Switch Example#1](~/add/codesnippet/visualbasic/t-system.diagnostics.swi_0_2.vb)]  \n  \n The following example creates the new switch. The code implements a `Level` property to set the value of the new switch. `Level` calls the protected property <xref:System.Diagnostics.Switch.SwitchSetting%2A> that assigns the value to the new switch. This example also implements two assessor properties to get the assigned value of the switch.  \n  \n [!code-cpp[Classic Switch Example#2](~/add/codesnippet/cpp/t-system.diagnostics.swi_0_3.cpp)]\n [!code-cs[Classic Switch Example#2](~/add/codesnippet/csharp/t-system.diagnostics.swi_0_3.cs)]\n [!code-vb[Classic Switch Example#2](~/add/codesnippet/visualbasic/t-system.diagnostics.swi_0_3.vb)]  \n  \n The following example creates a new switch in `Main`. It creates a new switch and assigns it a value. Then, depending on the switch settings, it outputs debugging messages for entering and leaving the method.  \n  \n [!code-cpp[Classic Switch Example#3](~/add/codesnippet/cpp/t-system.diagnostics.swi_0_4.cpp)]\n [!code-cs[Classic Switch Example#3](~/add/codesnippet/csharp/t-system.diagnostics.swi_0_4.cs)]\n [!code-vb[Classic Switch Example#3](~/add/codesnippet/visualbasic/t-system.diagnostics.swi_0_4.vb)]"
  syntax:
    content: public abstract class Switch
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Switch(String,String)
  nameWithType: Switch.Switch(String,String)
  fullName: System.Diagnostics.Switch.Switch(String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.Switch&quot;></xref>类。"
  remarks: "当你创建一个新<xref:System.Diagnostics.Switch>对象、 的值`displayName`参数用来查找初始开关设置。</xref:System.Diagnostics.Switch> 默认值为空字符串 (&quot;&quot;)。       在 XML 配置文件中，你可以添加交换机和将其值设置、 删除交换机，或清除所有交换机以前由应用程序设置。 执行应用程序时，则不检测动态更改配置文件。 你必须停止并重新启动应用程序，然后对配置文件的更改才会生效。 配置文件的格式应类似下面的示例︰```   <configuration>     <system.diagnostics>       <switches>         <add name=&quot;mySwitch&quot; value=&quot;10&quot; />         <add name=&quot;myNewSwitch&quot; value=&quot;20&quot; />         <remove name=&quot;mySwitch&quot; />         <clear/>       </switches>     </system.diagnostics>   </configuration>   ```"
  syntax:
    content: protected Switch (string displayName, string description);
    parameters:
    - id: displayName
      type: System.String
      description: "交换机的名称。"
    - id: description
      type: System.String
      description: "交换机的说明。"
  overload: System.Diagnostics.Switch.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String)'
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Switch(String,String,String)
  nameWithType: Switch.Switch(String,String,String)
  fullName: System.Diagnostics.Switch.Switch(String,String,String)
  type: Constructor
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "初始化的新实例<xref href=&quot;System.Diagnostics.Switch&quot;></xref>类，指定显示名称、 说明和交换机的默认值。"
  remarks: "`displayName`参数用于设置的值<xref:System.Diagnostics.Switch.DisplayName%2A>属性，与`description`参数用于设置的值<xref:System.Diagnostics.Switch.Description%2A>属性。</xref:System.Diagnostics.Switch.Description%2A> </xref:System.Diagnostics.Switch.DisplayName%2A> `defaultSwitchValue`参数是开关的值，如果<xref:System.Diagnostics.Switch.Value%2A>通过代码或通过配置文件特性未设置属性。</xref:System.Diagnostics.Switch.Value%2A> 请参阅<xref:System.Diagnostics.Switch.%23ctor%28System.String%2CSystem.String%29>重载的其他信息。</xref:System.Diagnostics.Switch.%23ctor%28System.String%2CSystem.String%29>"
  syntax:
    content: protected Switch (string displayName, string description, string defaultSwitchValue);
    parameters:
    - id: displayName
      type: System.String
      description: "交换机的名称。"
    - id: description
      type: System.String
      description: "交换机的说明。"
    - id: defaultSwitchValue
      type: System.String
      description: "开关的默认值。"
  overload: System.Diagnostics.Switch.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.Attributes
  id: Attributes
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Attributes
  nameWithType: Switch.Attributes
  fullName: System.Diagnostics.Switch.Attributes
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取应用程序配置文件中定义的自定义开关特性。"
  remarks: "Attributes 属性标识应用程序的配置文件中引用的自定义属性。 未引用的自定义属性不会枚举。 继承自的类<xref:System.Diagnostics.Switch>类可以通过重写中添加自定义特性<xref:System.Diagnostics.Switch.GetSupportedAttributes%2A>方法并返回的自定义属性名称的字符串数组。</xref:System.Diagnostics.Switch.GetSupportedAttributes%2A> </xref:System.Diagnostics.Switch>"
  example:
  - "The following code sample shows how to display the unrecognized attributes for a custom switch.  \n  \n [!code-cs[System.Diagnostics.TraceSource#15](~/add/codesnippet/csharp/p-system.diagnostics.swi_1_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource#15](~/add/codesnippet/visualbasic/p-system.diagnostics.swi_1_1.vb)]"
  syntax:
    content: public System.Collections.Specialized.StringDictionary Attributes { get; }
    return:
      type: System.Collections.Specialized.StringDictionary
      description: "A <xref href=&quot;System.Collections.Specialized.StringDictionary&quot;> </xref>包含跟踪开关的不区分大小写自定义属性。"
  overload: System.Diagnostics.Switch.Attributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.Description
  id: Description
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Description
  nameWithType: Switch.Description
  fullName: System.Diagnostics.Switch.Description
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取交换机的说明。"
  remarks: "此属性应指示开关; 的功能例如，&quot;启用跟踪目录观察程序组件。&quot; 通过设置值`descriptor`中的参数<xref:System.Diagnostics.Switch.%23ctor%2A>构造函数。</xref:System.Diagnostics.Switch.%23ctor%2A>"
  syntax:
    content: public string Description { get; }
    return:
      type: System.String
      description: "交换机的说明。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Diagnostics.Switch.Description*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.DisplayName
  id: DisplayName
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: DisplayName
  nameWithType: Switch.DisplayName
  fullName: System.Diagnostics.Switch.DisplayName
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取用于标识该开关的名称。"
  remarks: '当你创建一个新<xref:System.Diagnostics.Switch>对象，DisplayName 查找初始交换机设置。</xref:System.Diagnostics.Switch> 有关详细信息，请参阅<xref:System.Diagnostics.Switch.%23ctor%2A>构造函数和[如何︰ 创建、 初始化和配置跟踪开关](~/add/includes/ajax-current-ext-md.md)Visual Studio 文档中。</xref:System.Diagnostics.Switch.%23ctor%2A>'
  example:
  - "The following code example displays the display name for the switch in use by a trace source.  This code example is part of a larger example that can be found in the <xref:System.Diagnostics.TraceSource> class summary.  \n  \n [!code-cs[System.Diagnostics.TraceSource#10](~/add/codesnippet/csharp/p-system.diagnostics.swi_0_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource#10](~/add/codesnippet/visualbasic/p-system.diagnostics.swi_0_1.vb)]"
  syntax:
    content: public string DisplayName { get; }
    return:
      type: System.String
      description: "用来标识该开关的名称。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Diagnostics.Switch.DisplayName*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.GetSupportedAttributes
  id: GetSupportedAttributes
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: GetSupportedAttributes()
  nameWithType: Switch.GetSupportedAttributes()
  fullName: System.Diagnostics.Switch.GetSupportedAttributes()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取与交换机支持的自定义特性。"
  remarks: "GetSupportedAttributes 方法的默认实现返回`null`。 如果在配置文件中添加了开关，并且，而且不包含由 GetSupportedAttributes，返回的字符串数组中指定自定义特性<xref:System.Configuration.ConfigurationException>交换机加载时引发。</xref:System.Configuration.ConfigurationException>"
  example:
  - "The following code sample shows an override of the GetSupportedAttributes method for a custom switch.  \n  \n [!code-cs[System.Diagnostics.TraceSource#34](~/add/codesnippet/csharp/m-system.diagnostics.swi_1_1.cs)]\n [!code-vb[System.Diagnostics.TraceSource#34](~/add/codesnippet/visualbasic/m-system.diagnostics.swi_1_1.vb)]"
  syntax:
    content: protected virtual string[] GetSupportedAttributes ();
    parameters: []
    return:
      type: System.String[]
      description: "一个字符串数组，包含与交换机支持的自定义特性的名称或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果存在支持自定义特性。"
  overload: System.Diagnostics.Switch.GetSupportedAttributes*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.OnSwitchSettingChanged
  id: OnSwitchSettingChanged
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: OnSwitchSettingChanged()
  nameWithType: Switch.OnSwitchSettingChanged()
  fullName: System.Diagnostics.Switch.OnSwitchSettingChanged()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "调用时<xref:System.Diagnostics.Switch.SwitchSetting*>属性更改。</xref:System.Diagnostics.Switch.SwitchSetting*>"
  remarks: "OnSwitchSettingChanged 调用首次交换机读取<xref:System.Diagnostics.Switch.SwitchSetting%2A>值从配置文件，并再次每次更改开关的值时调用。</xref:System.Diagnostics.Switch.SwitchSetting%2A>"
  syntax:
    content: protected virtual void OnSwitchSettingChanged ();
    parameters: []
  overload: System.Diagnostics.Switch.OnSwitchSettingChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.OnValueChanged
  id: OnValueChanged
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: OnValueChanged()
  nameWithType: Switch.OnValueChanged()
  fullName: System.Diagnostics.Switch.OnValueChanged()
  type: Method
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "调用时<xref:System.Diagnostics.Switch.Value*>属性更改。</xref:System.Diagnostics.Switch.Value*>"
  remarks: "默认实现将新值的分析<xref:System.Diagnostics.Switch.Value%2A>属性设置为一个整数值，它用于设置<xref:System.Diagnostics.Switch.SwitchSetting%2A>属性。</xref:System.Diagnostics.Switch.SwitchSetting%2A> </xref:System.Diagnostics.Switch.Value%2A>"
  syntax:
    content: protected virtual void OnValueChanged ();
    parameters: []
  overload: System.Diagnostics.Switch.OnValueChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.SwitchSetting
  id: SwitchSetting
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: SwitchSetting
  nameWithType: Switch.SwitchSetting
  fullName: System.Diagnostics.Switch.SwitchSetting
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取或设置此交换机的当前设置。"
  syntax:
    content: protected int SwitchSetting { get; set; }
    return:
      type: System.Int32
      description: "此开关的当前设置。 默认值为零。"
  overload: System.Diagnostics.Switch.SwitchSetting*
  exceptions: []
  platform:
  - net462
- uid: System.Diagnostics.Switch.Value
  id: Value
  parent: System.Diagnostics.Switch
  langs:
  - csharp
  name: Value
  nameWithType: Switch.Value
  fullName: System.Diagnostics.Switch.Value
  type: Property
  assemblies:
  - System
  namespace: System.Diagnostics
  summary: "获取或设置开关的值。"
  remarks: "<xref:System.Diagnostics.Switch.OnValueChanged%2A>的 Value 属性的值更改时调用方法。</xref:System.Diagnostics.Switch.OnValueChanged%2A> <xref:System.Diagnostics.Switch.OnValueChanged%2A>方法分析此属性的值，并将其转换为整数值，然后将其用于将设置<xref:System.Diagnostics.Switch.SwitchSetting%2A>属性。</xref:System.Diagnostics.Switch.SwitchSetting%2A> </xref:System.Diagnostics.Switch.OnValueChanged%2A>"
  syntax:
    content: protected string Value { get; set; }
    return:
      type: System.String
      description: "表示开关的值的字符串。"
  overload: System.Diagnostics.Switch.Value*
  exceptions:
  - type: System.Configuration.ConfigurationErrorsException
    commentId: T:System.Configuration.ConfigurationErrorsException
    description: "值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。       -或者-值不是由包含只是一个可选负号后跟一系列的范围从 0 到 9 的数字。       -或者-此值表示的数字小于<xref:System.Int32.MinValue>或大于<xref:System.Int32.MaxValue>.</xref:System.Int32.MaxValue> </xref:System.Int32.MinValue>"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Configuration.ConfigurationErrorsException
  parent: System.Configuration
  isExternal: false
  name: ConfigurationErrorsException
  nameWithType: ConfigurationErrorsException
  fullName: System.Configuration.ConfigurationErrorsException
- uid: System.Diagnostics.Switch.#ctor(System.String,System.String)
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Switch(String,String)
  nameWithType: Switch.Switch(String,String)
  fullName: System.Diagnostics.Switch.Switch(String,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Diagnostics.Switch.#ctor(System.String,System.String,System.String)
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Switch(String,String,String)
  nameWithType: Switch.Switch(String,String,String)
  fullName: System.Diagnostics.Switch.Switch(String,String,String)
- uid: System.Diagnostics.Switch.Attributes
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Attributes
  nameWithType: Switch.Attributes
  fullName: System.Diagnostics.Switch.Attributes
- uid: System.Collections.Specialized.StringDictionary
  parent: System.Collections.Specialized
  isExternal: false
  name: StringDictionary
  nameWithType: StringDictionary
  fullName: System.Collections.Specialized.StringDictionary
- uid: System.Diagnostics.Switch.Description
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Description
  nameWithType: Switch.Description
  fullName: System.Diagnostics.Switch.Description
- uid: System.Diagnostics.Switch.DisplayName
  parent: System.Diagnostics.Switch
  isExternal: false
  name: DisplayName
  nameWithType: Switch.DisplayName
  fullName: System.Diagnostics.Switch.DisplayName
- uid: System.Diagnostics.Switch.GetSupportedAttributes
  parent: System.Diagnostics.Switch
  isExternal: false
  name: GetSupportedAttributes()
  nameWithType: Switch.GetSupportedAttributes()
  fullName: System.Diagnostics.Switch.GetSupportedAttributes()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Diagnostics.Switch.OnSwitchSettingChanged
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnSwitchSettingChanged()
  nameWithType: Switch.OnSwitchSettingChanged()
  fullName: System.Diagnostics.Switch.OnSwitchSettingChanged()
- uid: System.Diagnostics.Switch.OnValueChanged
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnValueChanged()
  nameWithType: Switch.OnValueChanged()
  fullName: System.Diagnostics.Switch.OnValueChanged()
- uid: System.Diagnostics.Switch.SwitchSetting
  parent: System.Diagnostics.Switch
  isExternal: false
  name: SwitchSetting
  nameWithType: Switch.SwitchSetting
  fullName: System.Diagnostics.Switch.SwitchSetting
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Diagnostics.Switch.Value
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Value
  nameWithType: Switch.Value
  fullName: System.Diagnostics.Switch.Value
- uid: System.Diagnostics.Switch.#ctor*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Switch
  nameWithType: Switch.Switch
- uid: System.Diagnostics.Switch.Attributes*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Attributes
  nameWithType: Switch.Attributes
- uid: System.Diagnostics.Switch.Description*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Description
  nameWithType: Switch.Description
- uid: System.Diagnostics.Switch.DisplayName*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: DisplayName
  nameWithType: Switch.DisplayName
- uid: System.Diagnostics.Switch.GetSupportedAttributes*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: GetSupportedAttributes
  nameWithType: Switch.GetSupportedAttributes
- uid: System.Diagnostics.Switch.OnSwitchSettingChanged*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnSwitchSettingChanged
  nameWithType: Switch.OnSwitchSettingChanged
- uid: System.Diagnostics.Switch.OnValueChanged*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: OnValueChanged
  nameWithType: Switch.OnValueChanged
- uid: System.Diagnostics.Switch.SwitchSetting*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: SwitchSetting
  nameWithType: Switch.SwitchSetting
- uid: System.Diagnostics.Switch.Value*
  parent: System.Diagnostics.Switch
  isExternal: false
  name: Value
  nameWithType: Switch.Value
