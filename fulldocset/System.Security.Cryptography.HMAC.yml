### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.HMAC
  id: HMAC
  children:
  - System.Security.Cryptography.HMAC.#ctor
  - System.Security.Cryptography.HMAC.BlockSizeValue
  - System.Security.Cryptography.HMAC.Create
  - System.Security.Cryptography.HMAC.Create(System.String)
  - System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  - System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HMAC.HashFinal
  - System.Security.Cryptography.HMAC.HashName
  - System.Security.Cryptography.HMAC.Initialize
  - System.Security.Cryptography.HMAC.Key
  langs:
  - csharp
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
  type: Class
  summary: "表示基于哈希的消息身份验证代码 (HMAC) 的所有实现必须从中都派生的抽象类。"
  remarks: "基于哈希的消息身份验证代码 (HMAC) 可以用于确定是否通过不安全通道发送的消息已被篡改，前提是发送方和接收方共享机密密钥。 发件人计算原始数据的哈希值，并将原始数据和 HMAC 传送一条消息。 接收方重新计算上收到的消息的哈希值，并检查计算哈希值与传输的哈希值相匹配。       HMAC 可与任何迭代的加密哈希函数，例如 MD5 或 SHA-1，共享密钥与结合使用。 HMAC 加密强度取决于基础的哈希函数的属性。       对数据或哈希值的任何更改产生不匹配，因为更改消息和重新生成正确的哈希值需要的机密密钥。 因此，如果原始与计算所得的哈希值匹配，消息进行身份验证。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class HMAC : System.Security.Cryptography.KeyedHashAlgorithm
  inheritance:
  - System.Object
  - System.Security.Cryptography.HashAlgorithm
  - System.Security.Cryptography.KeyedHashAlgorithm
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.HashAlgorithm.CanReuseTransform
  - System.Security.Cryptography.HashAlgorithm.CanTransformMultipleBlocks
  - System.Security.Cryptography.HashAlgorithm.Clear
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[])
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.HashAlgorithm.ComputeHash(System.IO.Stream)
  - System.Security.Cryptography.HashAlgorithm.Dispose
  - System.Security.Cryptography.HashAlgorithm.Hash
  - System.Security.Cryptography.HashAlgorithm.HashSize
  - System.Security.Cryptography.HashAlgorithm.HashSizeValue
  - System.Security.Cryptography.HashAlgorithm.HashValue
  - System.Security.Cryptography.HashAlgorithm.InputBlockSize
  - System.Security.Cryptography.HashAlgorithm.OutputBlockSize
  - System.Security.Cryptography.HashAlgorithm.State
  - System.Security.Cryptography.HashAlgorithm.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.HashAlgorithm.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.KeyedHashAlgorithm.KeyValue
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HMAC()
  nameWithType: HMAC.HMAC()
  fullName: System.Security.Cryptography.HMAC.HMAC()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.HMAC&quot;></xref>类。"
  syntax:
    content: protected HMAC ();
    parameters: []
  overload: System.Security.Cryptography.HMAC.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  id: BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取或设置哈希值中使用的块大小。"
  remarks: "基于哈希的消息身份验证代码 (HMAC) 使用的哈希函数，其中哈希数据后通过循环上的数据块的基本压缩函数。 BlockSizeValue 是这种块的字节大小。 其值为 64 个字节。"
  syntax:
    content: protected int BlockSizeValue { get; set; }
    return:
      type: System.Int32
      description: "要使用的哈希值中的块大小。"
  overload: System.Security.Cryptography.HMAC.BlockSizeValue*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Create
  id: Create
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Create()
  nameWithType: HMAC.Create()
  fullName: System.Security.Cryptography.HMAC.Create()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "创建默认实现的基于哈希的消息身份验证代码 (HMAC) 的实例。"
  remarks: "默认情况下，此重载使用 sha-1 的 HMAC 实现。 如果你想要指定不同的实现，使用<xref:System.Security.Cryptography.HMAC.Create%28System.String%29>重载，它可让你改为指定算法名称，。</xref:System.Security.Cryptography.HMAC.Create%28System.String%29>"
  syntax:
    content: public static System.Security.Cryptography.HMAC Create ();
    parameters: []
    return:
      type: System.Security.Cryptography.HMAC
      description: "新的 sha-1 实例，除非已使用更改默认设置[ &lt;cryptoClass&gt;元素](../Topic/%3CcryptoClass%3E%20Element.md)。"
  overload: System.Security.Cryptography.HMAC.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  id: Create(System.String)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "创建指定实现的基于哈希的消息身份验证代码 (HMAC) 的实例。"
  remarks: "HMAC 支持大量的哈希算法，包括 MD5、 SHA&1;、 SHA&256; 个字节和 RIPEMD160。 有关完整列表，请参阅支持的值`algorithmName`参数。"
  syntax:
    content: public static System.Security.Cryptography.HMAC Create (string algorithmName);
    parameters:
    - id: algorithmName
      type: System.String
      description: "要使用的 HMAC 实现。 下表显示的有效值`algorithmName`参数以及它们映射到的算法。       <table><thead><tr><th> 参数值       </th><th> 实现       </th></tr></thead><tbody><tr><td> System.Security.Cryptography.HMAC       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.KeyedHashAlgorithm       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACMD5       </td><td><xref href=&quot;System.Security.Cryptography.HMACMD5&quot;></xref></td></tr><tr><td> HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACRIPEMD160       </td><td><xref href=&quot;System.Security.Cryptography.HMACRIPEMD160&quot;></xref></td></tr><tr><td> HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA1       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA1&quot;></xref></td></tr><tr><td> HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA256       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA256&quot;></xref></td></tr><tr><td> HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA384       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA384&quot;></xref></td></tr><tr><td> HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> System.Security.Cryptography.HMACSHA512       </td><td><xref href=&quot;System.Security.Cryptography.HMACSHA512&quot;></xref></td></tr><tr><td> MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr><tr><td> System.Security.Cryptography.MACTripleDES       </td><td><xref href=&quot;System.Security.Cryptography.MACTripleDES&quot;></xref></td></tr></tbody></table>"
    return:
      type: System.Security.Cryptography.HMAC
      description: "指定的 HMAC 实现的新实例。"
  overload: System.Security.Cryptography.HMAC.Create*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: HMAC.Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "释放由非托管的资源<xref href=&quot;System.Security.Cryptography.HMAC&quot;></xref>类在密钥更改合法，并且还可以释放托管的资源。"
  remarks: "此方法称为由公共`Dispose()`方法和`Finalize`方法。 `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 `Finalize`调用`Dispose`与`disposing`设置为`false`。       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Security.Cryptography.HMAC>引用。</xref:System.Security.Cryptography.HMAC> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Security.Cryptography.HMAC.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  id: HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HMAC.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，则将写入到默认值的对象的数据路由<xref href=&quot;System.Security.Cryptography.HMAC&quot;></xref>哈希算法以计算哈希值。"
  remarks: "由应用程序代码不调用此方法。       此抽象方法执行哈希计算。 每次写入到加密流对象传递数据，通过此方法。 对于每个数据块，此方法将更新哈希对象的状态，以便在数据流的末尾，则返回正确的哈希值。"
  syntax:
    content: protected override void HashCore (byte[] rgb, int ib, int cb);
    parameters:
    - id: rgb
      type: System.Byte[]
      description: "输入的数据。"
    - id: ib
      type: System.Int32
      description: "偏移量从其开始使用数据的字节数组。"
    - id: cb
      type: System.Int32
      description: "要用作数据的数组中的字节数。"
  overload: System.Security.Cryptography.HMAC.HashCore*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashFinal
  id: HashFinal
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashFinal()
  nameWithType: HMAC.HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "当在派生类中重写，请在加密流对象处理完最后的数据后完成哈希计算。"
  remarks: "由应用程序代码不调用此方法。 此方法完成任何部分计算并返回数据流的正确哈希值。"
  syntax:
    content: protected override byte[] HashFinal ();
    parameters: []
    return:
      type: System.Byte[]
      description: "字节数组中的计算所得的哈希代码。"
  overload: System.Security.Cryptography.HMAC.HashFinal*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.HashName
  id: HashName
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: HashName
  nameWithType: HMAC.HashName
  fullName: System.Security.Cryptography.HMAC.HashName
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取或设置用于哈希计算的哈希算法的名称。"
  syntax:
    content: public string HashName { get; set; }
    return:
      type: System.String
      description: "哈希算法的名称。"
  overload: System.Security.Cryptography.HMAC.HashName*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "当前的哈希算法不能更改。"
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Initialize
  id: Initialize
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Initialize()
  nameWithType: HMAC.Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "初始化默认实现的实例<xref href=&quot;System.Security.Cryptography.HMAC&quot;> </xref>。"
  remarks: "基于哈希的消息身份验证代码 (HMAC) 可以用于确定是否通过不安全通道发送的消息已被篡改，前提是发送方和接收方共享机密密钥。 发件人计算原始数据的哈希值，并将原始数据和 HMAC 传送一条消息。 接收方重新计算上收到的消息的哈希值，并检查计算哈希值与传输的哈希值相匹配。       HMAC 可与任何迭代的加密哈希函数，例如 MD5 或 SHA-1，共享密钥与结合使用。 HMAC 加密强度取决于基础的哈希函数的属性。       对数据或哈希值的任何更改将导致不匹配，因为更改消息和重新生成正确的哈希值需要的机密密钥。 因此，如果原始与计算所得的哈希值匹配，消息进行身份验证。"
  syntax:
    content: public override void Initialize ();
    parameters: []
  overload: System.Security.Cryptography.HMAC.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.HMAC.Key
  id: Key
  parent: System.Security.Cryptography.HMAC
  langs:
  - csharp
  name: Key
  nameWithType: HMAC.Key
  fullName: System.Security.Cryptography.HMAC.Key
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取或设置用于哈希算法的密钥。"
  remarks: "此属性是加密哈希算法的密钥。       基于哈希的消息身份验证代码 (HMAC) 可以用于确定是否通过不安全通道发送的消息已被篡改，前提是发送方和接收方共享机密密钥。 发件人计算原始数据的哈希值，并将原始数据和 HMAC 传送一条消息。 接收方重新计算上收到的消息的哈希值，并检查计算哈希值与传输的哈希值相匹配。       HMAC 可与任何迭代的加密哈希函数，例如 MD5 或 SHA-1，共享密钥与结合使用。 HMAC 加密强度取决于基础的哈希函数的属性。       对数据或哈希值的任何更改产生不匹配，因为更改消息和重新生成正确的哈希值需要的机密密钥。 因此，如果原始与计算所得的哈希值匹配，消息进行身份验证。"
  syntax:
    content: public override byte[] Key { get; set; }
    return:
      type: System.Byte[]
      description: "要使用哈希算法的密钥。"
  overload: System.Security.Cryptography.HMAC.Key*
  exceptions:
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "尝试更改哈希开始之后的键属性。"
  platform:
  - net462
references:
- uid: System.Security.Cryptography.KeyedHashAlgorithm
  isExternal: false
  name: System.Security.Cryptography.KeyedHashAlgorithm
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.HMAC.#ctor
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HMAC()
  nameWithType: HMAC.HMAC()
  fullName: System.Security.Cryptography.HMAC.HMAC()
- uid: System.Security.Cryptography.HMAC.BlockSizeValue
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
  fullName: System.Security.Cryptography.HMAC.BlockSizeValue
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.HMAC.Create
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create()
  nameWithType: HMAC.Create()
  fullName: System.Security.Cryptography.HMAC.Create()
- uid: System.Security.Cryptography.HMAC
  parent: System.Security.Cryptography
  isExternal: false
  name: HMAC
  nameWithType: HMAC
  fullName: System.Security.Cryptography.HMAC
- uid: System.Security.Cryptography.HMAC.Create(System.String)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create(String)
  nameWithType: HMAC.Create(String)
  fullName: System.Security.Cryptography.HMAC.Create(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.HMAC.Dispose(System.Boolean)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: HMAC.Dispose(Boolean)
  fullName: System.Security.Cryptography.HMAC.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.HMAC.HashCore(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashCore(Byte[],Int32,Int32)
  nameWithType: HMAC.HashCore(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.HMAC.HashCore(Byte[],Int32,Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.HMAC.HashFinal
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashFinal()
  nameWithType: HMAC.HashFinal()
  fullName: System.Security.Cryptography.HMAC.HashFinal()
- uid: System.Security.Cryptography.HMAC.HashName
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
  fullName: System.Security.Cryptography.HMAC.HashName
- uid: System.Security.Cryptography.HMAC.Initialize
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Initialize()
  nameWithType: HMAC.Initialize()
  fullName: System.Security.Cryptography.HMAC.Initialize()
- uid: System.Security.Cryptography.HMAC.Key
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Key
  nameWithType: HMAC.Key
  fullName: System.Security.Cryptography.HMAC.Key
- uid: System.Security.Cryptography.HMAC.#ctor*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HMAC
  nameWithType: HMAC.HMAC
- uid: System.Security.Cryptography.HMAC.BlockSizeValue*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: BlockSizeValue
  nameWithType: HMAC.BlockSizeValue
- uid: System.Security.Cryptography.HMAC.Create*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Create
  nameWithType: HMAC.Create
- uid: System.Security.Cryptography.HMAC.Dispose*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Dispose
  nameWithType: HMAC.Dispose
- uid: System.Security.Cryptography.HMAC.HashCore*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashCore
  nameWithType: HMAC.HashCore
- uid: System.Security.Cryptography.HMAC.HashFinal*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashFinal
  nameWithType: HMAC.HashFinal
- uid: System.Security.Cryptography.HMAC.HashName*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: HashName
  nameWithType: HMAC.HashName
- uid: System.Security.Cryptography.HMAC.Initialize*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Initialize
  nameWithType: HMAC.Initialize
- uid: System.Security.Cryptography.HMAC.Key*
  parent: System.Security.Cryptography.HMAC
  isExternal: false
  name: Key
  nameWithType: HMAC.Key
