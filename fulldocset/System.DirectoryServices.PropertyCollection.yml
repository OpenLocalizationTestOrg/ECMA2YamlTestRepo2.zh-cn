### YamlMime:ManagedReference
items:
- uid: System.DirectoryServices.PropertyCollection
  id: PropertyCollection
  children:
  - System.DirectoryServices.PropertyCollection.Contains(System.String)
  - System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  - System.DirectoryServices.PropertyCollection.Count
  - System.DirectoryServices.PropertyCollection.GetEnumerator
  - System.DirectoryServices.PropertyCollection.Item(System.String)
  - System.DirectoryServices.PropertyCollection.PropertyNames
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  - System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  - System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  - System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  - System.DirectoryServices.PropertyCollection.Values
  langs:
  - csharp
  name: PropertyCollection
  nameWithType: PropertyCollection
  fullName: System.DirectoryServices.PropertyCollection
  type: Class
  summary: "PropertyCollection 类包含的属性的<xref href=&quot;System.DirectoryServices.DirectoryEntry&quot;> </xref>。"
  syntax:
    content: 'public class PropertyCollection : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)
  id: Contains(System.String)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Contains(String)
  nameWithType: PropertyCollection.Contains(String)
  fullName: System.DirectoryServices.PropertyCollection.Contains(String)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "确定指定的属性是否在此集合中。"
  syntax:
    content: public bool Contains (string propertyName);
    parameters:
    - id: propertyName
      type: System.String
      description: "要查找的属性的名称。"
    return:
      type: System.Boolean
      description: "返回值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的属性属于该集合; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.DirectoryServices.PropertyCollection.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  id: CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: CopyTo(PropertyValueCollection[],Int32)
  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "将复制到一个数组中从目标数组中指定索引处开始此集合中的所有对象。"
  syntax:
    content: public void CopyTo (System.DirectoryServices.PropertyValueCollection[] array, int index);
    parameters:
    - id: array
      type: System.DirectoryServices.PropertyValueCollection[]
      description: "数组<xref href=&quot;System.DirectoryServices.PropertyValueCollection&quot;></xref>接收此集合的元素的对象。"
    - id: index
      type: System.Int32
      description: "中的从零开始索引`array`此方法从该位置开始复制此集合。"
  overload: System.DirectoryServices.PropertyCollection.CopyTo*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "对基础接口的调用期间出错。"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Count
  id: Count
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Count
  nameWithType: PropertyCollection.Count
  fullName: System.DirectoryServices.PropertyCollection.Count
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取此集合中的属性的数量。"
  remarks: "Internet 信息服务 (IIS) 和 WinNT 提供程序当前不支持计数，因此每个将引发一种<xref:System.NotSupportedException>。</xref:System.NotSupportedException>"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "在此集合中的属性的数目。"
  overload: System.DirectoryServices.PropertyCollection.Count*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "对基础接口的调用期间出错。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "目录不能报告的属性的数量。"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator
  id: GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: PropertyCollection.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "返回可用于循环访问此集合的枚举。"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>可用于循环访问此集合。</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.DirectoryServices.PropertyCollection.GetEnumerator*
  exceptions:
  - type: System.Runtime.InteropServices.COMException
    commentId: T:System.Runtime.InteropServices.COMException
    description: "对基础接口的调用期间出错。"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Item(System.String)
  id: Item(System.String)
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Item(String)
  nameWithType: PropertyCollection.Item(String)
  fullName: System.DirectoryServices.PropertyCollection.Item(String)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取指定的属性。"
  remarks: "在 C# 中，此属性是<xref:System.DirectoryServices.PropertyCollection>类</xref:System.DirectoryServices.PropertyCollection>的索引器       在 JScript 中，你可以使用默认索引属性定义的类型，但不是能显式定义你自己。 但是，指定 expando 特性的类上自动提供了默认索引属性的对象的类型与<xref:System.String>.</xref:System.String>索引类型"
  syntax:
    content: public System.DirectoryServices.PropertyValueCollection this[string propertyName] { get; }
    parameters:
    - id: propertyName
      type: System.String
      description: "要检索的属性的名称。"
    return:
      type: System.DirectoryServices.PropertyValueCollection
      description: "指定属性的值。"
  overload: System.DirectoryServices.PropertyCollection.Item*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.PropertyNames
  id: PropertyNames
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
  fullName: System.DirectoryServices.PropertyCollection.PropertyNames
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取此集合中的属性名称。"
  remarks: "当访问的 PropertyNames 属性中，成员<xref:System.Runtime.InteropServices.COMException>访问基础接口时可能因错误而引发。</xref:System.Runtime.InteropServices.COMException>"
  syntax:
    content: public System.Collections.ICollection PropertyNames { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>对象，其中包含此集合中的属性的名称。</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.PropertyNames*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "元素复制<xref:System.Collections.ICollection>到<xref:System.Array>特定处开始，<xref:System.Array>索引。</xref:System.Array> </xref:System.Array> </xref:System.Collections.ICollection>"
  syntax:
    content: void ICollection.CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "<xref:System.Array>这是从<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>复制的元素的目标</xref:System.Array>的一维 <xref:System.Array>必须具有从零开始的索引。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "中的从零开始索引`array`复制开始处。"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多维的。       -源中的元素的数目<xref:System.Collections.ICollection>大于从的可用空间<code>index</code>到目标的末尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "源类型<xref:System.Collections.ICollection>无法自动转换为目标的类型<code> array </code>。</xref:System.Collections.ICollection>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取一个值，该值指示是否访问<xref:System.Collections.ICollection>是同步的 （线程安全）。</xref:System.Collections.ICollection>"
  remarks: "<xref:System.Collections.ICollection.SyncRoot%2A>返回一个对象，它可用于同步对<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>访问</xref:System.Collections.ICollection.SyncRoot%2A>       中的大多数集合类<xref:System.Collections?displayProperty=fullName>命名空间还实现提供同步的包装基础集合已同步方法。</xref:System.Collections?displayProperty=fullName>       枚举整个集合本质上不是线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       [Visual Basic、 C#]      下面的示例演示如何锁定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整个枚举期间︰ ```c#   ICollection myCollection = new ICollection();     lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果访问<xref:System.Collections.ICollection>是同步的 （线程安全）; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取可用于同步对<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>访问的对象"
  remarks: "对于其基础存储区不公用的集合，预期的实现是返回当前实例。 请注意，指向当前实例的指针可能还不够对于包装了其他集合; 的集合这些集合应返回基础集合 SyncRoot 属性。       中的大多数集合类<xref:System.Collections?displayProperty=fullName>命名空间还实现提供同步的包装基础集合已同步方法。</xref:System.Collections?displayProperty=fullName> 但是，派生的类可以提供自己的同步的版本的集合使用<xref:System.Collections.ICollection.SyncRoot%2A>属性。</xref:System.Collections.ICollection.SyncRoot%2A> 同步代码必须在执行操作<xref:System.Collections.ICollection.SyncRoot%2A>不是直接对集合的集合。</xref:System.Collections.ICollection.SyncRoot%2A> 这可确保正确地执行操作的从其他对象派生的集合。 具体地说，这样可保持正确的同步，与可能同时修改集合实例的其他线程。       在上一个集合，预期使用情况的同步方法没有<xref:System.Collections.ICollection.SyncRoot%2A>如下所示︰ ```c#   ICollection MyCollection =...    lock(MyCollection.SyncRoot) {     // Some operation on the collection, which is now thread safe.    }   ``` ```vb#   Dim myCollection as New ICollection()    SyncLock myCollection.SyncRoot     &quot; Some operation on the collection, which is now thread safe.    End SyncLock   ```枚举整个集合本质上不是线程安全的过程。      </xref:System.Collections.ICollection.SyncRoot%2A> 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       [Visual Basic、 C#]      下面的代码示例演示如何锁定集合使用<xref:System.Collections.ICollection.SyncRoot%2A>在整个枚举期间︰ ```c#   ICollection myCollection = new ICollection();    lock(myCollection.SyncRoot) {     foreach (Object item in myCollection) {     // Insert your code here.     }    }   ``` ```vb#   Dim myCollection As New ICollection()    Dim item As Object    SyncLock myCollection.SyncRoot     For Each item In myCollection     &quot; Insert your code here.     Next item    End SyncLock   ```       </xref:System.Collections.ICollection.SyncRoot%2A>"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "可以用于<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection>对访问进行同步的对象"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "添加一个带有所提供的键和值的元素<xref:System.Collections.IDictionary>对象。</xref:System.Collections.IDictionary>"
  remarks: "你还可以使用<xref:System.Collections.IDictionary.Item%2A>字典中不存在要添加新元素的键的值设置属性 (例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue`)。</xref:System.Collections.IDictionary.Item%2A> 但是，如果在字典中已存在指定的键，则将设置<xref:System.Collections.IDictionary.Item%2A>属性将会覆盖旧值。</xref:System.Collections.IDictionary.Item%2A> 与此相反，<xref:System.Collections.IDictionary.Add%2A>方法不会修改现有元素。</xref:System.Collections.IDictionary.Add%2A>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Add%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#9](~/add/codesnippet/cpp/1a38ef09-e972-4d5a-adef-_1.cpp)]\n [!code-cs[Dictionary#9](~/add/codesnippet/csharp/1a38ef09-e972-4d5a-adef-_1.cs)]\n [!code-vb[Dictionary#9](~/add/codesnippet/visualbasic/1a38ef09-e972-4d5a-adef-_1.vb)]"
  syntax:
    content: void IDictionary.Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "<xref:System.Object>要用作添加元素的键</xref:System.Object>"
    - id: value
      type: System.Object
      description: "<xref:System.Object>要用作添加元素的值</xref:System.Object>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中已存在具有相同键的元素<xref:System.Collections.IDictionary>对象。</xref:System.Collections.IDictionary>"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Collections.IDictionary>是只读的。</xref:System.Collections.IDictionary>       -或-<xref:System.Collections.IDictionary>具有固定的大小。</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  id: System#Collections#IDictionary#Clear
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Clear()
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "移除所有元素从<xref:System.Collections.IDictionary>对象。</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Clear%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#8](~/add/codesnippet/cpp/473cc76e-c5f1-4b76-bd2d-_1.cpp)]\n [!code-cs[Dictionary#8](~/add/codesnippet/csharp/473cc76e-c5f1-4b76-bd2d-_1.cs)]\n [!code-vb[Dictionary#8](~/add/codesnippet/visualbasic/473cc76e-c5f1-4b76-bd2d-_1.vb)]"
  syntax:
    content: void IDictionary.Clear ();
    parameters: []
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Collections.IDictionary>对象是只读的。</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "确定是否<xref:System.Collections.IDictionary>对象包含具有指定键的元素。</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.Contains%2A> method. This example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#5](~/add/codesnippet/cpp/37011492-a9b1-4bd3-bee4-_1.cpp)]\n [!code-cs[Dictionary#5](~/add/codesnippet/csharp/37011492-a9b1-4bd3-bee4-_1.cs)]\n [!code-vb[Dictionary#5](~/add/codesnippet/visualbasic/37011492-a9b1-4bd3-bee4-_1.vb)]"
  syntax:
    content: bool IDictionary.Contains (object value);
    parameters:
    - id: value
      type: System.Object
      description: "要查找中的键<xref:System.Collections.IDictionary>对象。</xref:System.Collections.IDictionary>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Collections.IDictionary>包含的元素具有键; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取一个值，该值指示是否<xref:System.Collections.IDictionary>对象具有固定的大小。</xref:System.Collections.IDictionary>"
  remarks: "具有固定大小的集合不允许添加或移除元素后集合创建后，但允许修改现有元素。       具有固定大小的集合是只是一个集合的包装器防止添加和移除元素;因此，如果对基础集合，包括添加或移除元素，进行更改的固定大小的集合将反映这些更改。"
  example:
  - "The following example demonstrates how to implement the <xref:System.Collections.IDictionary.IsFixedSize%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#6](~/add/codesnippet/cpp/9254691a-4dee-480c-bf03-_1.cpp)]\n [!code-cs[Dictionary#6](~/add/codesnippet/csharp/9254691a-4dee-480c-bf03-_1.cs)]\n [!code-vb[Dictionary#6](~/add/codesnippet/visualbasic/9254691a-4dee-480c-bf03-_1.vb)]"
  syntax:
    content: bool System.Collections.IDictionary.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Collections.IDictionary>对象具有固定大小; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取一个值，该值指示是否<xref:System.Collections.IDictionary>对象是只读的。</xref:System.Collections.IDictionary>"
  remarks: "集合是只读的不允许添加、 移除或修改元素的集合在创建后。"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.IsReadOnly%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#4](~/add/codesnippet/cpp/758e339d-f700-4387-ac5f-_1.cpp)]\n [!code-cs[Dictionary#4](~/add/codesnippet/csharp/758e339d-f700-4387-ac5f-_1.cs)]\n [!code-vb[Dictionary#4](~/add/codesnippet/visualbasic/758e339d-f700-4387-ac5f-_1.vb)]"
  syntax:
    content: bool System.Collections.IDictionary.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref:System.Collections.IDictionary>对象是只读的; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.IDictionary>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取或设置具有指定键的元素。"
  remarks: "此属性提供能够通过使用以下语法访问集合中的特定元素︰ `myCollection[key]`。       你还可以使用<xref:System.Collections.IDictionary.Item%2A>字典中不存在要添加新元素的键的值设置属性 (例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue`)。</xref:System.Collections.IDictionary.Item%2A> 但是，如果在字典中已存在指定的键，则将设置<xref:System.Collections.IDictionary.Item%2A>属性将会覆盖旧值。</xref:System.Collections.IDictionary.Item%2A> 与此相反，<xref:System.Collections.IDictionary.Add%2A>方法不会修改现有元素。</xref:System.Collections.IDictionary.Add%2A>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Item%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#13](~/add/codesnippet/cpp/f4830ad8-862c-4ae4-a8e0-_1.cpp)]\n [!code-cs[Dictionary#13](~/add/codesnippet/csharp/f4830ad8-862c-4ae4-a8e0-_1.cs)]\n [!code-vb[Dictionary#13](~/add/codesnippet/visualbasic/f4830ad8-862c-4ae4-a8e0-_1.vb)]"
  syntax:
    content: object System.Collections.IDictionary.Item[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "要获取或设置元素的键。"
    return:
      type: System.Object
      description: "带有指定键的元素。"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "将属性设置和<xref:System.Collections.IDictionary>对象是只读的。</xref:System.Collections.IDictionary>       -或-设置该属性， <code> key </code>不存在于集合中，与<xref:System.Collections.IDictionary>具有固定的大小。</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取<xref:System.Collections.ICollection>对象，其中包含的键<xref:System.Collections.IDictionary>对象。</xref:System.Collections.IDictionary> </xref:System.Collections.ICollection>"
  remarks: "在返回键的顺序<xref:System.Collections.ICollection>对象是未指定，但可以保证中相应的值的顺序相同<xref:System.Collections.ICollection>返回<xref:System.Collections.IDictionary.Values%2A>属性。</xref:System.Collections.IDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>"
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Keys%2A> property. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#10](~/add/codesnippet/cpp/66b18c51-f730-4ac9-89c7-_1.cpp)]\n [!code-cs[Dictionary#10](~/add/codesnippet/csharp/66b18c51-f730-4ac9-89c7-_1.cs)]\n [!code-vb[Dictionary#10](~/add/codesnippet/visualbasic/66b18c51-f730-4ac9-89c7-_1.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>对象，其中包含的键<xref:System.Collections.IDictionary>对象。</xref:System.Collections.IDictionary> </xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "移除带有指定键的元素<xref:System.Collections.IDictionary>对象。</xref:System.Collections.IDictionary>"
  remarks: ''
  example:
  - "The following example shows how to implement the <xref:System.Collections.IDictionary.Remove%2A> method. This code example is part of a larger example provided for the <xref:System.Collections.IDictionary> class.  \n  \n [!code-cpp[Dictionary#7](~/add/codesnippet/cpp/0e5c3e14-6952-45d5-9f38-_1.cpp)]\n [!code-cs[Dictionary#7](~/add/codesnippet/csharp/0e5c3e14-6952-45d5-9f38-_1.cs)]\n [!code-vb[Dictionary#7](~/add/codesnippet/visualbasic/0e5c3e14-6952-45d5-9f38-_1.vb)]"
  syntax:
    content: void IDictionary.Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要移除的元素的键。"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref:System.Collections.IDictionary>对象是只读的。</xref:System.Collections.IDictionary>       -或-<xref:System.Collections.IDictionary>具有固定的大小。</xref:System.Collections.IDictionary>"
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "返回<xref:System.Collections.IEnumerable>对象。</xref:System.Collections.IEnumerable>"
  remarks: "[Visual Basic、 C#]      `foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A>  在此位置上，<xref:System.Collections.IEnumerator.Current%2A>属性是不确定。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，则枚举数将失效且不可恢复，而且其行为是不确定。       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以锁定在整个枚举期间的集合。  若要允许访问集合以进行读取和写入的多个线程，则必须实现自己的同步。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerable>对象。</xref:System.Collections.IEnumerable>"
  overload: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.DirectoryServices.PropertyCollection.Values
  id: Values
  parent: System.DirectoryServices.PropertyCollection
  langs:
  - csharp
  name: Values
  nameWithType: PropertyCollection.Values
  fullName: System.DirectoryServices.PropertyCollection.Values
  type: Property
  assemblies:
  - System.DirectoryServices
  namespace: System.DirectoryServices
  summary: "获取此集合中的属性的值。"
  remarks: "在访问的值属性的成员时<xref:System.Runtime.InteropServices.COMException>访问基础接口时，可能会异常引发由于出现错误。</xref:System.Runtime.InteropServices.COMException>"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>，其中包含此集合中的属性的值。</xref:System.Collections.ICollection>"
  overload: System.DirectoryServices.PropertyCollection.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.InteropServices.COMException
  isExternal: true
  name: System.Runtime.InteropServices.COMException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.DirectoryServices.PropertyCollection.Contains(System.String)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Contains(String)
  nameWithType: PropertyCollection.Contains(String)
  fullName: System.DirectoryServices.PropertyCollection.Contains(String)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.DirectoryServices.PropertyCollection.CopyTo(System.DirectoryServices.PropertyValueCollection[],System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: CopyTo(PropertyValueCollection[],Int32)
  nameWithType: PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
  fullName: System.DirectoryServices.PropertyCollection.CopyTo(PropertyValueCollection[],Int32)
- uid: System.DirectoryServices.PropertyValueCollection[]
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection[]
  spec.csharp:
  - uid: System.DirectoryServices.PropertyValueCollection
    name: PropertyValueCollection
    nameWithType: PropertyValueCollection
    fullName: PropertyValueCollection[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.DirectoryServices.PropertyCollection.Count
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Count
  nameWithType: PropertyCollection.Count
  fullName: System.DirectoryServices.PropertyCollection.Count
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: GetEnumerator()
  nameWithType: PropertyCollection.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.DirectoryServices.PropertyCollection.Item(System.String)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Item(String)
  nameWithType: PropertyCollection.Item(String)
  fullName: System.DirectoryServices.PropertyCollection.Item(String)
- uid: System.DirectoryServices.PropertyValueCollection
  parent: System.DirectoryServices
  isExternal: false
  name: PropertyValueCollection
  nameWithType: PropertyValueCollection
  fullName: System.DirectoryServices.PropertyValueCollection
- uid: System.DirectoryServices.PropertyCollection.PropertyNames
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
  fullName: System.DirectoryServices.PropertyCollection.PropertyNames
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Add(Object,Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Clear()
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Clear()
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Contains(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsFixedSize
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.IsReadOnly
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Item(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Keys
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove(System.Object)
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove(Object)
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IDictionary.Remove(Object)
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.DirectoryServices.PropertyCollection.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.DirectoryServices.PropertyCollection.Values
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Values
  nameWithType: PropertyCollection.Values
  fullName: System.DirectoryServices.PropertyCollection.Values
- uid: System.DirectoryServices.PropertyCollection.Contains*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Contains
  nameWithType: PropertyCollection.Contains
- uid: System.DirectoryServices.PropertyCollection.CopyTo*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: CopyTo
  nameWithType: PropertyCollection.CopyTo
- uid: System.DirectoryServices.PropertyCollection.Count*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Count
  nameWithType: PropertyCollection.Count
- uid: System.DirectoryServices.PropertyCollection.GetEnumerator*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: GetEnumerator
  nameWithType: PropertyCollection.GetEnumerator
- uid: System.DirectoryServices.PropertyCollection.Item*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Item
  nameWithType: PropertyCollection.Item
- uid: System.DirectoryServices.PropertyCollection.PropertyNames*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: PropertyNames
  nameWithType: PropertyCollection.PropertyNames
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#CopyTo*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: PropertyCollection.System.Collections.ICollection.CopyTo
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#IsSynchronized*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: PropertyCollection.System.Collections.ICollection.IsSynchronized
- uid: System.DirectoryServices.PropertyCollection.System#Collections#ICollection#SyncRoot*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: PropertyCollection.System.Collections.ICollection.SyncRoot
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Add*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Add
  nameWithType: PropertyCollection.System.Collections.IDictionary.Add
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Clear*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Clear
  nameWithType: PropertyCollection.System.Collections.IDictionary.Clear
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Contains*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Contains
  nameWithType: PropertyCollection.System.Collections.IDictionary.Contains
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsFixedSize*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsFixedSize
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#IsReadOnly*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: PropertyCollection.System.Collections.IDictionary.IsReadOnly
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Item*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Item
  nameWithType: PropertyCollection.System.Collections.IDictionary.Item
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Keys*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: PropertyCollection.System.Collections.IDictionary.Keys
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IDictionary#Remove*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IDictionary.Remove
  nameWithType: PropertyCollection.System.Collections.IDictionary.Remove
- uid: System.DirectoryServices.PropertyCollection.System#Collections#IEnumerable#GetEnumerator*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: PropertyCollection.System.Collections.IEnumerable.GetEnumerator
- uid: System.DirectoryServices.PropertyCollection.Values*
  parent: System.DirectoryServices.PropertyCollection
  isExternal: false
  name: Values
  nameWithType: PropertyCollection.Values
