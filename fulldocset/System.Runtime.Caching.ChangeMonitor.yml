### YamlMime:ManagedReference
items:
- uid: System.Runtime.Caching.ChangeMonitor
  id: ChangeMonitor
  children:
  - System.Runtime.Caching.ChangeMonitor.#ctor
  - System.Runtime.Caching.ChangeMonitor.Dispose
  - System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  - System.Runtime.Caching.ChangeMonitor.HasChanged
  - System.Runtime.Caching.ChangeMonitor.InitializationComplete
  - System.Runtime.Caching.ChangeMonitor.IsDisposed
  - System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  - System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  - System.Runtime.Caching.ChangeMonitor.UniqueId
  langs:
  - csharp
  name: ChangeMonitor
  nameWithType: ChangeMonitor
  fullName: System.Runtime.Caching.ChangeMonitor
  type: Class
  summary: "监视数据，具体取决于缓存项的状态中的更改的派生自定义类型提供基类。"
  remarks: "ChangeMonitor 类用作专用于特定的缓存实现的派生的监视器类的基类。 ChangeMonitor 实例监视数据，具体取决于缓存项的状态中的更改。 例如，可以将项其内容进行缓存的文件或数据实体。 如果更新文件或数据实体，则必须还更改关联的缓存项。 可以监视的通用项包括数据实体 （如数据库字段、 值、 行或表）、 另一个缓存项时，和文件和文件属性。       依赖项更改是中的依赖项的状态的更改。 在典型的缓存实现中，ChangeMonitor 实例通知依赖关系已更改，缓存后缓存执行所需的操作，如正在使插入的缓存条目无效。       可以自定义派生的 ChangeMonitor 类，以监视特定的不同数据存储区的依赖项更改。 例如，有的文件系统、 物理内存或数据库的缓存实现。 ChangeMonitor 类检查缓存中，外部发生的更改，然后警报缓存中已发生更改。       [!INCLUDE[dnprdnshort](~/add/includes/dnprdnshort-md.md)]包括从 ChangeMonitor 类派生的以下类:- <xref:System.Runtime.Caching.CacheEntryChangeMonitor>- <xref:System.Runtime.Caching.FileChangeMonitor>- <xref:System.Runtime.Caching.HostFileChangeMonitor>-<xref:System.Runtime.Caching.SqlChangeMonitor>的每个这些类可用于不同类型的依赖关系。</xref:System.Runtime.Caching.SqlChangeMonitor> </xref:System.Runtime.Caching.HostFileChangeMonitor> </xref:System.Runtime.Caching.FileChangeMonitor> </xref:System.Runtime.Caching.CacheEntryChangeMonitor> 例如，派生<xref:System.Runtime.Caching.FileChangeMonitor>类监视对文件系统数据 （文件和文件夹） 的缓存的缓存项所依赖的更改。</xref:System.Runtime.Caching.FileChangeMonitor>"
  syntax:
    content: 'public abstract class ChangeMonitor : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  id: '#ctor'
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
  type: Constructor
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "初始化的新实例<xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;></xref>类。 从构造函数来初始化类的基类的派生类中调用此构造函数。"
  remarks: "<xref:System.Runtime.Caching.ChangeMonitor>类具有一个默认构造函数。</xref:System.Runtime.Caching.ChangeMonitor> 但是，类继承自基类<xref:System.Runtime.Caching.ChangeMonitor>类并定义自定义的更改监视行为必须在构造函数中执行初始化。</xref:System.Runtime.Caching.ChangeMonitor> 有关详细信息，请参阅继承者部分的说明。"
  syntax:
    content: protected ChangeMonitor ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  id: Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "释放由当前实例的所有资源<xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;></xref>类。"
  remarks: "Dispose 方法调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法的派生类仅一次，第一次调用时。</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 后续调用的 Dispose 方法不起作用。 调用该方法后，<xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>属性设置为`true`。</xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A>       <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>必须调用重载，若要释放<xref:System.Runtime.Caching.ChangeMonitor>实例。</xref:System.Runtime.Caching.ChangeMonitor> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 以下是用于调用 dispose 方法的规则:-一项插入缓存之前，它是调用方负责释放<xref:System.Runtime.Caching.ChangeMonitor>实例。</xref:System.Runtime.Caching.ChangeMonitor>      -一次缓存项和<xref:System.Runtime.Caching.ChangeMonitor>与其关联的实例传递到缓存中，必须确保缓存实施者<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>调用，即使插入操作失败。</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor>      -在将项及其关联<xref:System.Runtime.Caching.ChangeMonitor>实例传递到缓存中，调用方必须不会释放依赖项，因为当<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法调用，因此调用将被视为依赖项已更改。</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor> 因此，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>自动调用方法。</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      -考虑到，这些规则<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>必须按以下方式之一调用方法:-如果用户决定不向缓存中插入派生的更改监视器实例，用户必须调用 Dispose 方法重载。</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>          -的缓存实现负责调用 Dispose 重载，如果实现尝试插入对象缓存的更改监视器实例，但插入操作将失败。 当插入尝试导致异常时，则缓存实现必须释放任何关联的依赖关系。          -如果删除缓存项，则缓存实现还必须释放依赖项。       内部实现<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法将自动调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法在调用回调，之后注册通过<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法。</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      1> [!NOTE]&1;> 事件激发期间此自动释放时，才出现的初始化<xref:System.Runtime.Caching.ChangeMonitor>以前完成的实例。</xref:System.Runtime.Caching.ChangeMonitor>       当派生的更改监视器的构造函数调用<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>方法时，如果更改监视器的状态已更改 （即，将监视的状态已更改构造函数时仍处于活动状态） 然后<xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>方法将自动释放更改监视器。</xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> </xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A>      1> [!NOTE]&1;> 用户不应调用的 Dispose 方法。 但是，不能防止用户调用方法。 因此，如果他们这样做，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>调用方法。</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 在这种情况下，就像依赖项已更改，都会收到通知的缓存项。       若要防止派生的类重写 Dispose 方法，此方法不是显式接口实现。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "初始化未完成的派生的更改监视器类中调用基类的 Dispose 方法。"
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "释放所有的托管和非托管资源以及对任何引用<xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;></xref>实例。 此重载必须由派生的更改监视器类实现。"
  remarks: "时的值`disposing`值是`true`，释放所有的托管和非托管资源，并且对此对象的任何引用都释放，以便派生的更改监视器实例可以被垃圾回收。 这样就保证基<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法将调用实现的 Dispose 方法一次。</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: protected abstract void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源以及对任何引用<xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;></xref>实例;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。 当<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>传递时，通过调用方法释放<xref uid=&quot;langword_csharp_finalizer&quot; name=&quot;finalizer&quot; href=&quot;&quot;></xref>线程和任何外部的托管的引用在可能不再有效，因为它们都已垃圾回收。"
  overload: System.Runtime.Caching.ChangeMonitor.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  id: HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "获取一个值，该值指示由监视状态<xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;></xref>类已更改。"
  remarks: "你可以检查在派生的此属性的值<xref:System.Runtime.Caching.ChangeMonitor>类，以查看是否已更改依赖项。</xref:System.Runtime.Caching.ChangeMonitor>       值设置为`true`依赖项更改发生时 (即，当<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>调用方法)。</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 后<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法由派生类调用，HasChanged 属性的值将`true`，无论<xref:System.Runtime.Caching.OnChangedCallback>已通过调用通知实例<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法。</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>      1> [!NOTE]&1;> 的调用方可以检查 HasChanged 属性以确定是否已更改依赖项。 但是，在多线程环境中，更简单和更多的可维护性方法是将数据插入的缓存实现，而不会检查 HasChanged 属性。 缓存实现必须检查 HasChanged 属性和不得执行 insert 或设置操作，如果一个或多个关联的依赖关系已更改。"
  syntax:
    content: public bool HasChanged { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果由监视状态<xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;></xref>实例已更改; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Runtime.Caching.ChangeMonitor.HasChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  id: InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "从派生类，可表明已完成初始化的构造函数调用。"
  remarks: "如果一个依赖项更改之前初始化已完成在派生类，派生类的构造函数必须调用<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法。</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       当<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>调用方法时，<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>属性自动设置为`true`更改监视器。</xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> </xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> 因此，当更改监视器的构造函数调用 InitializationComplete 方法时，基的类将自动调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法。</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> 如果初始化已完成，<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法自动释放派生的更改监视器实例。</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>"
  syntax:
    content: protected void InitializationComplete ();
    parameters: []
  overload: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  id: IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "获取一个值，该值指示的派生的实例<xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;></xref>释放类。"
  remarks: "属性设置为`true`后基<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>方法调用<xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>派生的类，若要释放的实例中的方法。</xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> </xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A>"
  syntax:
    content: public bool IsDisposed { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果在释放实例;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  id: NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "调用缓存实施者注册了一个回调，并通知<xref href=&quot;System.Runtime.Caching.ObjectCache&quot;></xref>实例通过<xref href=&quot;System.Runtime.Caching.OnChangedCallback&quot;></xref>时依赖关系已更改的委托。"
  remarks: "缓存实施者使用此方法连接到的更改监视器。 如果你将一个或多个更改与缓存项的监视器，则传递<xref:System.Runtime.Caching.CacheItemPolicy>具有的针对缓存项的填充的更改监视器属性实例。</xref:System.Runtime.Caching.CacheItemPolicy> 支持更改监视器缓存实施者负责遍历<xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>属性和寄存器<xref:System.Runtime.Caching.OnChangedCallback>委托与每个更改它找到的监视器。</xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A>       因为<xref:System.Runtime.Caching.OnChangedCallback>委托包括可选状态参数，则具体更改监视器实现可以传递可选状态信息。</xref:System.Runtime.Caching.OnChangedCallback> 缓存实施者确定是否可将显式依赖类型的回调的一部分传递的自定义更改监视器的状态。      1> [!NOTE]&1;> 基缓存可扩展性 API 可将显式依赖项，不要求对类型的状态。       NotifyOnChanged 方法的实现自动确定监视器的状态已在调用 NotifyOnChanged 方法的时间已更改。 如果<xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A>属性是`true`，则该方法会自动调用<xref:System.Runtime.Caching.OnChangedCallback>事件处理程序中，已注册，通过<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法。</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback> </xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> 发生这种情况是因为它是可能，从缓存实现创建的更改监视器，缓存实现获取监视器和最多，线本身的时间的时间的基础的监视的状态已更改。 如果状态已更改的对象传递给<xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>方法是`null`。</xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A>       NotifyOnChanged 方法可以调用仅一次，并将在后续调用中引发异常。"
  syntax:
    content: public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);
    parameters:
    - id: onChangedCallback
      type: System.Runtime.Caching.OnChangedCallback
      description: "对依赖关系已发生更改时调用的方法的引用。"
  overload: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "已调用的回调方法。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>onChangedCallback</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  id: OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
  type: Method
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "由派生类调用以引发事件时的依赖项发生更改。"
  remarks: "通常情况下，当发生依赖项更改时调用 OnChanged 方法。 当释放的更改监视器实例，但仅当尚未调用回调时，才会发生释放时，也会调用 OnChanged 方法。       如果 OnChanged 方法之前调用<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>方法被调用时，由缓存实现保存对 OnChanged 方法的调用的状态数据。</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> 此外，到回调<xref:System.Runtime.Caching.OnChangedCallback>立即调用方法时<xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A>调用方法。</xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> </xref:System.Runtime.Caching.OnChangedCallback>"
  syntax:
    content: protected void OnChanged (object state);
    parameters:
    - id: state
      type: System.Object
      description: "更改事件的数据。 此值可为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Runtime.Caching.ChangeMonitor.OnChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  id: UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  langs:
  - csharp
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
  type: Property
  assemblies:
  - System.Runtime.Caching
  namespace: System.Runtime.Caching
  summary: "获取一个值，表示<xref href=&quot;System.Runtime.Caching.ChangeMonitor&quot;></xref>类实例。"
  remarks: "UniqueId 属性值通常包括依赖关系名称组合字符串数据的唯一标识符的数据的所监视的<xref:System.Runtime.Caching.ChangeMonitor>实例。</xref:System.Runtime.Caching.ChangeMonitor> UniqueId 属性的值是一个字符串。 字符串的值用于分配的唯一 ID<xref:System.Runtime.Caching.ChangeMonitor>实例。</xref:System.Runtime.Caching.ChangeMonitor>"
  syntax:
    content: public abstract string UniqueId { get; }
    return:
      type: System.String
      description: "更改监视器实例的标识符。"
  overload: System.Runtime.Caching.ChangeMonitor.UniqueId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Runtime.Caching.ChangeMonitor.#ctor
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor()
  nameWithType: ChangeMonitor.ChangeMonitor()
  fullName: System.Runtime.Caching.ChangeMonitor.ChangeMonitor()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose()
  nameWithType: ChangeMonitor.Dispose()
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose()
- uid: System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ChangeMonitor.Dispose(Boolean)
  fullName: System.Runtime.Caching.ChangeMonitor.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
  fullName: System.Runtime.Caching.ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete()
  nameWithType: ChangeMonitor.InitializationComplete()
  fullName: System.Runtime.Caching.ChangeMonitor.InitializationComplete()
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
  fullName: System.Runtime.Caching.ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged(OnChangedCallback)
  nameWithType: ChangeMonitor.NotifyOnChanged(OnChangedCallback)
  fullName: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(OnChangedCallback)
- uid: System.Runtime.Caching.OnChangedCallback
  parent: System.Runtime.Caching
  isExternal: false
  name: OnChangedCallback
  nameWithType: OnChangedCallback
  fullName: System.Runtime.Caching.OnChangedCallback
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged(Object)
  nameWithType: ChangeMonitor.OnChanged(Object)
  fullName: System.Runtime.Caching.ChangeMonitor.OnChanged(Object)
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
  fullName: System.Runtime.Caching.ChangeMonitor.UniqueId
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Caching.ChangeMonitor.#ctor*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: ChangeMonitor
  nameWithType: ChangeMonitor.ChangeMonitor
- uid: System.Runtime.Caching.ChangeMonitor.Dispose*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: Dispose
  nameWithType: ChangeMonitor.Dispose
- uid: System.Runtime.Caching.ChangeMonitor.HasChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: HasChanged
  nameWithType: ChangeMonitor.HasChanged
- uid: System.Runtime.Caching.ChangeMonitor.InitializationComplete*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: InitializationComplete
  nameWithType: ChangeMonitor.InitializationComplete
- uid: System.Runtime.Caching.ChangeMonitor.IsDisposed*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: IsDisposed
  nameWithType: ChangeMonitor.IsDisposed
- uid: System.Runtime.Caching.ChangeMonitor.NotifyOnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: NotifyOnChanged
  nameWithType: ChangeMonitor.NotifyOnChanged
- uid: System.Runtime.Caching.ChangeMonitor.OnChanged*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: OnChanged
  nameWithType: ChangeMonitor.OnChanged
- uid: System.Runtime.Caching.ChangeMonitor.UniqueId*
  parent: System.Runtime.Caching.ChangeMonitor
  isExternal: false
  name: UniqueId
  nameWithType: ChangeMonitor.UniqueId
