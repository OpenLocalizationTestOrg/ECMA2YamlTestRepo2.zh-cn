### YamlMime:ManagedReference
items:
- uid: System.Web.TraceContext
  id: TraceContext
  children:
  - System.Web.TraceContext.#ctor(System.Web.HttpContext)
  - System.Web.TraceContext.IsEnabled
  - System.Web.TraceContext.TraceFinished
  - System.Web.TraceContext.TraceMode
  - System.Web.TraceContext.Warn(System.String)
  - System.Web.TraceContext.Warn(System.String,System.String)
  - System.Web.TraceContext.Warn(System.String,System.String,System.Exception)
  - System.Web.TraceContext.Write(System.String)
  - System.Web.TraceContext.Write(System.String,System.String)
  - System.Web.TraceContext.Write(System.String,System.String,System.Exception)
  langs:
  - csharp
  name: TraceContext
  nameWithType: TraceContext
  fullName: System.Web.TraceContext
  type: Class
  summary: "捕获并显示有关 Web 请求的执行详细信息。 此类不能被继承。"
  remarks: "此类可用于将消息附加到特定跟踪类别。 例如，如果要创建的实例<xref:System.Web.UI.WebControls.Calendar>类为应用程序，你可能会包括跟踪消息&quot;启动呈现&quot;在呈现过程中和&quot;引发更改事件&quot;中的事件处理程序过程中。</xref:System.Web.UI.WebControls.Calendar>       TraceContext 类还可用于获取一组自定义处理的请求执行末尾的跟踪记录。 有关详细信息，请参阅[ASP.NET 跟踪概述](~/add/includes/ajax-current-ext-md.md)。       若要启用跟踪，设置`Trace`属性中[@ Page](http://msdn.microsoft.com/en-us/f06cf9e5-22bb-461d-8b8f-549e53ff40a4)指令或<xref:System.Web.TraceContext.IsEnabled%2A>属性`true`。</xref:System.Web.TraceContext.IsEnabled%2A> 启用跟踪后，显示用户提供的跟踪内容，除了<xref:System.Web.UI.Page>类会自动包括性能数据、 控制树的结构信息和状态管理内容，为每个请求。</xref:System.Web.UI.Page>"
  syntax:
    content: public sealed class TraceContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.TraceContext.#ctor(System.Web.HttpContext)
  id: '#ctor(System.Web.HttpContext)'
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: TraceContext(HttpContext)
  nameWithType: TraceContext.TraceContext(HttpContext)
  fullName: System.Web.TraceContext.TraceContext(HttpContext)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "初始化的新实例<xref href=&quot;System.Web.TraceContext&quot;></xref>类。"
  syntax:
    content: public TraceContext (System.Web.HttpContext context);
    parameters:
    - id: context
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>包含有关当前 Web 请求的信息。"
  overload: System.Web.TraceContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.IsEnabled
  id: IsEnabled
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: IsEnabled
  nameWithType: TraceContext.IsEnabled
  fullName: System.Web.TraceContext.IsEnabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，该值指示是否为当前 Web 请求启用跟踪。"
  remarks: "使用此标志来检查是否页面或应用程序应输出跟踪信息之前它将任何内容写入跟踪日志。       IsEnabled 属性的值取决于的小节中的设置`system.web`配置节和的值`trace`指令的特性。 在页面指令中设置跟踪选项优先于配置文件中设置的选项。 以编程方式设置 IsEnabled 值将优先于页指令特性以及的配置设置。      1> [!NOTE]&1;> 如果将 IsEnabled 属性设置为`true`整个应用程序，你必须显式将此属性设置`false`你不想显示的跟踪信息的应用程序中的任何页。"
  example:
  - "The following code example demonstrates how you can determine whether tracing is enabled for a page. The code iterates through the rows in a dataset, writing trace statements for each row in that dataset.  \n  \n [!code-cs[Classic TraceContext.IsEnabled Example#1](~/add/codesnippet/csharp/p-system.web.tracecontex_4_1.cs)]\n [!code-vb[Classic TraceContext.IsEnabled Example#1](~/add/codesnippet/visualbasic/p-system.web.tracecontex_4_1.vb)]"
  syntax:
    content: public bool IsEnabled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了跟踪;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.TraceContext.IsEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.TraceFinished
  id: TraceFinished
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: TraceFinished
  nameWithType: TraceContext.TraceFinished
  fullName: System.Web.TraceContext.TraceFinished
  type: Event
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "引发由<xref href=&quot;System.Web.TraceContext&quot;></xref>对象来公开跟踪消息后会收集所有请求信息。"
  remarks: "TraceFinished 事件期间引发`EndRequest`的 HTTP 请求处理阶段。 由引发<xref:System.Web.TraceContext>对象后所有请求收集信息，以公开的集合<xref:System.Web.TraceContextRecord>消息注册<xref:System.Web.TraceContextEventHandler>委托。</xref:System.Web.TraceContextEventHandler> </xref:System.Web.TraceContextRecord> </xref:System.Web.TraceContext>"
  example:
  - "The following code example demonstrates how you can register a <xref:System.Web.TraceContextEventHandler> to handle the TraceFinished event. In this example, the delegate iterates through the trace messages and writes them to the response stream; however, you could write the same information to a database or a profiling tool consumer.  \n  \n [!code-cs[System.Web.Trace_3#1](~/add/codesnippet/csharp/e-system.web.tracecontex_1.aspx)]\n [!code-vb[System.Web.Trace_3#1](~/add/codesnippet/visualbasic/e-system.web.tracecontex_1.aspx)]"
  syntax:
    content: public event System.Web.TraceContextEventHandler TraceFinished;
    return:
      type: System.Web.TraceContextEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.TraceMode
  id: TraceMode
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: TraceMode
  nameWithType: TraceContext.TraceMode
  fullName: System.Web.TraceContext.TraceMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置在其中跟踪消息应将输出到请求的浏览器的排序的顺序。"
  remarks: "跟踪消息可以进行排序，按顺序处理它们，或按字母顺序由用户定义的类别。"
  example:
  - "The following code example demonstrates how you can sort a page's trace statements alphabetically by the categories that you have assigned to the statements.  \n  \n [!code-cs[Classic TraceContext.TraceMode Example#1](~/add/codesnippet/csharp/p-system.web.tracecontex_5_1.aspx)]\n [!code-vb[Classic TraceContext.TraceMode Example#1](~/add/codesnippet/visualbasic/p-system.web.tracecontex_5_1.aspx)]"
  syntax:
    content: public System.Web.TraceMode TraceMode { get; set; }
    return:
      type: System.Web.TraceMode
      description: "之一<xref href=&quot;System.Web.TraceMode&quot;></xref>枚举值。 默认值为指定的设置<xref uid=&quot;langword_csharp_traceMode&quot; name=&quot;traceMode&quot; href=&quot;&quot;></xref>属性中<xref uid=&quot;langword_csharp_trace&quot; name=&quot;trace&quot; href=&quot;&quot;></xref>配置文件，其默认值是节<xref uid=&quot;langword_csharp_SortByTime&quot; name=&quot;SortByTime&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.TraceContext.TraceMode*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "所选的值不是之一<xref href=&quot;System.Web.TraceMode&quot;></xref>枚举值。"
  platform:
  - net462
- uid: System.Web.TraceContext.Warn(System.String)
  id: Warn(System.String)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Warn(String)
  nameWithType: TraceContext.Warn(String)
  fullName: System.Web.TraceContext.Warn(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "跟踪日志中写入跟踪消息。 所有警告在日志中都显示为红色文本。"
  remarks: "每次<xref:System.Web.TraceContext.Warn%2A>调用方法时，<xref:System.Web.TraceContext>跟踪消息添加到<xref:System.Web.TraceContextEventArgs.TraceRecords%2A>消息回收，这在处理时是可访问<xref:System.Web.TraceContext.TraceFinished>事件。</xref:System.Web.TraceContext.TraceFinished> </xref:System.Web.TraceContextEventArgs.TraceRecords%2A> </xref:System.Web.TraceContext> </xref:System.Web.TraceContext.Warn%2A> 添加消息，使用其<xref:System.Web.TraceContextRecord.IsWarning%2A>属性设置为`true`及其<xref:System.Web.TraceContextRecord.ErrorInfo%2A>属性设置为`null`。</xref:System.Web.TraceContextRecord.ErrorInfo%2A> </xref:System.Web.TraceContextRecord.IsWarning%2A>"
  syntax:
    content: public void Warn (string message);
    parameters:
    - id: message
      type: System.String
      description: "要写入日志的跟踪消息。"
  overload: System.Web.TraceContext.Warn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Warn(System.String,System.String)
  id: Warn(System.String,System.String)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Warn(String,String)
  nameWithType: TraceContext.Warn(String,String)
  fullName: System.Web.TraceContext.Warn(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "写入跟踪信息写入跟踪日志，包括任何用户定义的类别，跟踪消息。 所有警告在日志中都显示为红色文本。"
  remarks: "每次<xref:System.Web.TraceContext.Warn%2A>调用方法时，<xref:System.Web.TraceContext>跟踪消息添加到<xref:System.Web.TraceContextEventArgs.TraceRecords%2A>消息回收，这在处理时是可访问<xref:System.Web.TraceContext.TraceFinished>事件。</xref:System.Web.TraceContext.TraceFinished> </xref:System.Web.TraceContextEventArgs.TraceRecords%2A> </xref:System.Web.TraceContext> </xref:System.Web.TraceContext.Warn%2A> 添加消息，使用其<xref:System.Web.TraceContextRecord.IsWarning%2A>属性设置为`true`及其<xref:System.Web.TraceContextRecord.ErrorInfo%2A>属性设置为`null`。</xref:System.Web.TraceContextRecord.ErrorInfo%2A> </xref:System.Web.TraceContextRecord.IsWarning%2A>"
  syntax:
    content: public void Warn (string category, string message);
    parameters:
    - id: category
      type: System.String
      description: "接收的消息跟踪类别。"
    - id: message
      type: System.String
      description: "要写入日志的跟踪消息。"
  overload: System.Web.TraceContext.Warn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Warn(System.String,System.String,System.Exception)
  id: Warn(System.String,System.String,System.Exception)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Warn(String,String,Exception)
  nameWithType: TraceContext.Warn(String,String,Exception)
  fullName: System.Web.TraceContext.Warn(String,String,Exception)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将跟踪信息写入跟踪日志，包括任何用户定义的类别、 跟踪消息和错误的信息。 所有警告在日志中都显示为红色文本。"
  remarks: "每次<xref:System.Web.TraceContext.Warn%2A>调用方法时，<xref:System.Web.TraceContext>跟踪消息添加到<xref:System.Web.TraceContextEventArgs.TraceRecords%2A>消息回收，这在处理时是可访问<xref:System.Web.TraceContext.TraceFinished>事件。</xref:System.Web.TraceContext.TraceFinished> </xref:System.Web.TraceContextEventArgs.TraceRecords%2A> </xref:System.Web.TraceContext> </xref:System.Web.TraceContext.Warn%2A> 添加消息，使用其<xref:System.Web.TraceContextRecord.IsWarning%2A>属性设置为`true`，和<xref:System.Web.TraceContextRecord.ErrorInfo%2A>属性设置为传递的对象`errorInfo`参数。</xref:System.Web.TraceContextRecord.ErrorInfo%2A> </xref:System.Web.TraceContextRecord.IsWarning%2A>"
  example:
  - "The following code example demonstrates how to call the <xref:System.Web.TraceContext.Write%2A> method to write an error trace message to the trace log. In this example, different exceptions are traced as errors and warnings. When the page throws an <xref:System.ArgumentException>, it writes a warning message using the <xref:System.Web.TraceContext.Warn%2A> method. When the page throws an <xref:System.InvalidOperationException>, it writes an error message using the <xref:System.Web.TraceContext.Write%2A> method.  \n  \n [!code-cs[System.Web.Trace_4#1](~/add/codesnippet/csharp/m-system.web.tracecontex_1_1.aspx)]\n [!code-vb[System.Web.Trace_4#1](~/add/codesnippet/visualbasic/m-system.web.tracecontex_1_1.aspx)]"
  syntax:
    content: public void Warn (string category, string message, Exception errorInfo);
    parameters:
    - id: category
      type: System.String
      description: "接收的消息跟踪类别。"
    - id: message
      type: System.String
      description: "要写入日志的跟踪消息。"
    - id: errorInfo
      type: System.Exception
      description: "<xref:System.Exception>包含有关错误的信息。</xref:System.Exception>"
  overload: System.Web.TraceContext.Warn*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Write(System.String)
  id: Write(System.String)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Write(String)
  nameWithType: TraceContext.Write(String)
  fullName: System.Web.TraceContext.Write(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "跟踪日志中写入跟踪消息。"
  remarks: "每次<xref:System.Web.TraceContext.Write%2A>调用方法时，<xref:System.Web.TraceContext>跟踪消息添加到<xref:System.Web.TraceContextEventArgs.TraceRecords%2A>消息回收，这在处理时是可访问<xref:System.Web.TraceContext.TraceFinished>事件。</xref:System.Web.TraceContext.TraceFinished> </xref:System.Web.TraceContextEventArgs.TraceRecords%2A> </xref:System.Web.TraceContext> </xref:System.Web.TraceContext.Write%2A> 添加消息，使用其<xref:System.Web.TraceContextRecord.IsWarning%2A>属性设置为`false`及其<xref:System.Web.TraceContextRecord.ErrorInfo%2A>属性设置为`null`。</xref:System.Web.TraceContextRecord.ErrorInfo%2A> </xref:System.Web.TraceContextRecord.IsWarning%2A>"
  syntax:
    content: public void Write (string message);
    parameters:
    - id: message
      type: System.String
      description: "要写入日志的跟踪消息。"
  overload: System.Web.TraceContext.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Write(System.String,System.String)
  id: Write(System.String,System.String)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Write(String,String)
  nameWithType: TraceContext.Write(String,String)
  fullName: System.Web.TraceContext.Write(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将跟踪信息写入跟踪日志，包括消息和任何用户定义的类别。"
  remarks: "每次<xref:System.Web.TraceContext.Write%2A>调用方法时，<xref:System.Web.TraceContext>跟踪消息添加到<xref:System.Web.TraceContextEventArgs.TraceRecords%2A>消息回收，这在处理时是可访问<xref:System.Web.TraceContext.TraceFinished>事件。</xref:System.Web.TraceContext.TraceFinished> </xref:System.Web.TraceContextEventArgs.TraceRecords%2A> </xref:System.Web.TraceContext> </xref:System.Web.TraceContext.Write%2A> 添加消息，使用其<xref:System.Web.TraceContextRecord.IsWarning%2A>属性设置为`false`及其<xref:System.Web.TraceContextRecord.ErrorInfo%2A>属性设置为`null`。</xref:System.Web.TraceContextRecord.ErrorInfo%2A> </xref:System.Web.TraceContextRecord.IsWarning%2A>"
  example:
  - "The following code example demonstrates how to call the Write method to write an error trace message to the trace log. In this example, the delegate iterates through the trace messages and writes them as an HTML table; however, you can write the same information to a database or a profiling tool consumer.  \n  \n [!code-cs[System.Web.Trace_5#1](~/add/codesnippet/csharp/m-system.web.tracecontex_0_1.aspx)]\n [!code-vb[System.Web.Trace_5#1](~/add/codesnippet/visualbasic/m-system.web.tracecontex_0_1.aspx)]"
  syntax:
    content: public void Write (string category, string message);
    parameters:
    - id: category
      type: System.String
      description: "接收的消息跟踪类别。"
    - id: message
      type: System.String
      description: "要写入日志的跟踪消息。"
  overload: System.Web.TraceContext.Write*
  exceptions: []
  platform:
  - net462
- uid: System.Web.TraceContext.Write(System.String,System.String,System.Exception)
  id: Write(System.String,System.String,System.Exception)
  parent: System.Web.TraceContext
  langs:
  - csharp
  name: Write(String,String,Exception)
  nameWithType: TraceContext.Write(String,String,Exception)
  fullName: System.Web.TraceContext.Write(String,String,Exception)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将跟踪信息写入跟踪日志，包括任何用户定义的类别、 跟踪消息和错误的信息。"
  remarks: "每次<xref:System.Web.TraceContext.Write%2A>调用方法时，<xref:System.Web.TraceContext>跟踪消息添加到<xref:System.Web.TraceContextEventArgs.TraceRecords%2A>消息回收，这在处理时是可访问<xref:System.Web.TraceContext.TraceFinished>事件。</xref:System.Web.TraceContext.TraceFinished> </xref:System.Web.TraceContextEventArgs.TraceRecords%2A> </xref:System.Web.TraceContext> </xref:System.Web.TraceContext.Write%2A> 添加消息，使用其<xref:System.Web.TraceContextRecord.IsWarning%2A>属性设置为`false`，和<xref:System.Web.TraceContextRecord.ErrorInfo%2A>属性设置为传递的对象`errorInfo`参数。</xref:System.Web.TraceContextRecord.ErrorInfo%2A> </xref:System.Web.TraceContextRecord.IsWarning%2A>"
  example:
  - "The following code example demonstrates how to call the Write method to write an error trace message to the trace log. In this example, different exceptions are traced as errors and warnings. When the page throws an <xref:System.ArgumentException>, it writes a warning message using the <xref:System.Web.TraceContext.Warn%2A> method. When the page throws an <xref:System.InvalidOperationException>, it writes an error message using the <xref:System.Web.TraceContext.Write%2A> method.  \n  \n [!code-cs[System.Web.Trace_4#1](~/add/codesnippet/csharp/m-system.web.tracecontex_2_1.aspx)]\n [!code-vb[System.Web.Trace_4#1](~/add/codesnippet/visualbasic/m-system.web.tracecontex_2_1.aspx)]"
  syntax:
    content: public void Write (string category, string message, Exception errorInfo);
    parameters:
    - id: category
      type: System.String
      description: "接收的消息跟踪类别。"
    - id: message
      type: System.String
      description: "要写入日志的跟踪消息。"
    - id: errorInfo
      type: System.Exception
      description: "<xref:System.Exception>包含有关错误的信息。</xref:System.Exception>"
  overload: System.Web.TraceContext.Write*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Web.TraceContext.#ctor(System.Web.HttpContext)
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceContext(HttpContext)
  nameWithType: TraceContext.TraceContext(HttpContext)
  fullName: System.Web.TraceContext.TraceContext(HttpContext)
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.TraceContext.IsEnabled
  parent: System.Web.TraceContext
  isExternal: false
  name: IsEnabled
  nameWithType: TraceContext.IsEnabled
  fullName: System.Web.TraceContext.IsEnabled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.TraceContext.TraceFinished
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceFinished
  nameWithType: TraceContext.TraceFinished
  fullName: System.Web.TraceContext.TraceFinished
- uid: System.Web.TraceContextEventHandler
  parent: System.Web
  isExternal: false
  name: TraceContextEventHandler
  nameWithType: TraceContextEventHandler
  fullName: System.Web.TraceContextEventHandler
- uid: System.Web.TraceContext.TraceMode
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceMode
  nameWithType: TraceContext.TraceMode
  fullName: System.Web.TraceContext.TraceMode
- uid: System.Web.TraceMode
  parent: System.Web
  isExternal: false
  name: TraceMode
  nameWithType: TraceMode
  fullName: System.Web.TraceMode
- uid: System.Web.TraceContext.Warn(System.String)
  parent: System.Web.TraceContext
  isExternal: false
  name: Warn(String)
  nameWithType: TraceContext.Warn(String)
  fullName: System.Web.TraceContext.Warn(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.TraceContext.Warn(System.String,System.String)
  parent: System.Web.TraceContext
  isExternal: false
  name: Warn(String,String)
  nameWithType: TraceContext.Warn(String,String)
  fullName: System.Web.TraceContext.Warn(String,String)
- uid: System.Web.TraceContext.Warn(System.String,System.String,System.Exception)
  parent: System.Web.TraceContext
  isExternal: false
  name: Warn(String,String,Exception)
  nameWithType: TraceContext.Warn(String,String,Exception)
  fullName: System.Web.TraceContext.Warn(String,String,Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.TraceContext.Write(System.String)
  parent: System.Web.TraceContext
  isExternal: false
  name: Write(String)
  nameWithType: TraceContext.Write(String)
  fullName: System.Web.TraceContext.Write(String)
- uid: System.Web.TraceContext.Write(System.String,System.String)
  parent: System.Web.TraceContext
  isExternal: false
  name: Write(String,String)
  nameWithType: TraceContext.Write(String,String)
  fullName: System.Web.TraceContext.Write(String,String)
- uid: System.Web.TraceContext.Write(System.String,System.String,System.Exception)
  parent: System.Web.TraceContext
  isExternal: false
  name: Write(String,String,Exception)
  nameWithType: TraceContext.Write(String,String,Exception)
  fullName: System.Web.TraceContext.Write(String,String,Exception)
- uid: System.Web.TraceContext.#ctor*
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceContext
  nameWithType: TraceContext.TraceContext
- uid: System.Web.TraceContext.IsEnabled*
  parent: System.Web.TraceContext
  isExternal: false
  name: IsEnabled
  nameWithType: TraceContext.IsEnabled
- uid: System.Web.TraceContext.TraceMode*
  parent: System.Web.TraceContext
  isExternal: false
  name: TraceMode
  nameWithType: TraceContext.TraceMode
- uid: System.Web.TraceContext.Warn*
  parent: System.Web.TraceContext
  isExternal: false
  name: Warn
  nameWithType: TraceContext.Warn
- uid: System.Web.TraceContext.Write*
  parent: System.Web.TraceContext
  isExternal: false
  name: Write
  nameWithType: TraceContext.Write
