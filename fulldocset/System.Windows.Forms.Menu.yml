### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.Menu
  id: Menu
  children:
  - System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])
  - System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)
  - System.Windows.Forms.Menu.CreateMenuHandle
  - System.Windows.Forms.Menu.Dispose(System.Boolean)
  - System.Windows.Forms.Menu.FindHandle
  - System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)
  - System.Windows.Forms.Menu.FindMergePosition(System.Int32)
  - System.Windows.Forms.Menu.FindShortcut
  - System.Windows.Forms.Menu.GetContextMenu
  - System.Windows.Forms.Menu.GetMainMenu
  - System.Windows.Forms.Menu.Handle
  - System.Windows.Forms.Menu.IsParent
  - System.Windows.Forms.Menu.MdiListItem
  - System.Windows.Forms.Menu.MenuItems
  - System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)
  - System.Windows.Forms.Menu.Name
  - System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  - System.Windows.Forms.Menu.Tag
  - System.Windows.Forms.Menu.ToString
  langs:
  - csharp
  name: Menu
  nameWithType: Menu
  fullName: System.Windows.Forms.Menu
  type: Class
  summary: "表示所有菜单的基本功能。 尽管<xref href=&quot;System.Windows.Forms.ToolStripDropDown&quot;></xref>和<xref href=&quot;System.Windows.Forms.ToolStripDropDownMenu&quot;></xref>替换和将功能添加到以前版本的菜单控件，菜单以向后兼容并供将来使用你选择保留。"
  remarks: "此类是适用于基<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.MenuItem>，和<xref:System.Windows.Forms.ContextMenu>类。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MainMenu> 无法创建此类的实例。 应用程序 consist 的菜单<xref:System.Windows.Forms.MenuItem>对象。</xref:System.Windows.Forms.MenuItem> 这些可以包含其他<xref:System.Windows.Forms.MenuItem>对象，表示子菜单项。</xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem>对象可以存储在<xref:System.Windows.Forms.MainMenu>以显示为窗体的整个菜单结构或<xref:System.Windows.Forms.ContextMenu>用于显示快捷菜单。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.MenuItem> 此类提供的所有菜单类通用功能。       与很多个基类，不同菜单类使用及其派生的类来定义许多其属性。 如果你将你的菜单在多文档界面 (MDI) 应用程序，则可以使用<xref:System.Windows.Forms.Menu.MdiListItem%2A>属性指定<xref:System.Windows.Forms.MenuItem>你的应用程序中显示打开的 MDI 子窗体的列表。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.MdiListItem%2A> <xref:System.Windows.Forms.Menu.MenuItems%2A>属性包含一个列表的<xref:System.Windows.Forms.MenuItem>对象存储在菜单类。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.MenuItems%2A> 有关<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>，此属性包含所有<xref:System.Windows.Forms.MenuItem>显示对象。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.MenuItem><xref:System.Windows.Forms.Menu.MenuItems%2A>属性表示与其关联。 这些子菜单项</xref:System.Windows.Forms.Menu.MenuItems%2A>，</xref:System.Windows.Forms.MenuItem>       除了为所有派生的菜单类提供的属性，菜单类还提供方法，如<xref:System.Windows.Forms.Menu.CloneMenu%2A>和<xref:System.Windows.Forms.Menu.MergeMenu%2A>、，你可以从现有的菜单，创建新的菜单和还合并两个菜单结构在一起。</xref:System.Windows.Forms.Menu.MergeMenu%2A> </xref:System.Windows.Forms.Menu.CloneMenu%2A>       菜单类还定义了嵌套的类<xref:System.Windows.Forms.Menu.MenuItemCollection>.</xref:System.Windows.Forms.Menu.MenuItemCollection> 此类定义的集合<xref:System.Windows.Forms.MenuItem>使用对象<xref:System.Windows.Forms.Menu.MenuItems%2A>属性。</xref:System.Windows.Forms.Menu.MenuItems%2A> </xref:System.Windows.Forms.MenuItem> 你可以使用的方法<xref:System.Windows.Forms.Menu.MenuItemCollection>类来添加和删除菜单项从<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，或<xref:System.Windows.Forms.MenuItem>。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.Menu.MenuItemCollection>"
  example:
  - "The following code example uses the derived class, <xref:System.Windows.Forms.MenuItem>, to create a menu structure for a form. The example code adds a <xref:System.Windows.Forms.MenuItem> to represent the top-level menu item, adds a submenu item to it for selecting a font size, and then adds two submenu items to that menu item that represent large and small font choices in an application. The example requires that there is a <xref:System.Windows.Forms.MainMenu> object named `mainMenu1` and four <xref:System.Windows.Forms.MenuItem> objects named `menuItem1`, `menuItem2`, `menuItem3`, and `menuItem4`.  \n  \n [!code-cpp[Classic Menu Example#1](~/add/codesnippet/cpp/t-system.windows.forms.m_4_1.cpp)]\n [!code-cs[Classic Menu Example#1](~/add/codesnippet/csharp/t-system.windows.forms.m_4_1.cs)]\n [!code-vb[Classic Menu Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.m_4_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.ListBindable(false)]

      [System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")]

      public abstract class Menu : System.ComponentModel.Component
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  implements: []
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])
  id: '#ctor(System.Windows.Forms.MenuItem[])'
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Menu(MenuItem[])
  nameWithType: Menu.Menu(MenuItem[])
  fullName: System.Windows.Forms.Menu.Menu(MenuItem[])
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的新实例<xref href=&quot;System.Windows.Forms.Menu&quot;></xref>类。"
  remarks: "由于<xref:System.Windows.Forms.Menu>仅支持一个抽象类继承的类可以调用菜单构造函数。</xref:System.Windows.Forms.Menu>"
  syntax:
    content: protected Menu (System.Windows.Forms.MenuItem[] items);
    parameters:
    - id: items
      type: System.Windows.Forms.MenuItem[]
      description: "类型的数组<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>包含要添加到菜单的对象。"
  overload: System.Windows.Forms.Menu.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)
  id: CloneMenu(System.Windows.Forms.Menu)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: CloneMenu(Menu)
  nameWithType: Menu.CloneMenu(Menu)
  fullName: System.Windows.Forms.Menu.CloneMenu(Menu)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "副本<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref> ，作为参数传递到当前<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。"
  remarks: "此方法将复制的整个列表<xref:System.Windows.Forms.MenuItem>对象 (存储在<xref:System.Windows.Forms.Menu>中传递到`menuSrc`) 到当前菜单。</xref:System.Windows.Forms.Menu> </xref:System.Windows.Forms.MenuItem> 可以使用此方法在派生类中克隆<xref:System.Windows.Forms.MenuItem>对象。</xref:System.Windows.Forms.MenuItem> 然后可以由其他类派生自重用它们<xref:System.Windows.Forms.Menu>，如<xref:System.Windows.Forms.MainMenu>， <xref:System.Windows.Forms.ContextMenu>，和<xref:System.Windows.Forms.MenuItem>。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.Menu>"
  example:
  - "This example creates a main menu, `mainMenu1`, with three menu items: `File`, `Edit`, and `View`. It then uses the CloneMenu method to copy `mainMenu1` into `mainMenu2`. The cloned menu is then assigned to the form and displayed. This program requires that you have already created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[CloneMenu#1](~/add/codesnippet/csharp/m-system.windows.forms.m_6_1.cs)]\n [!code-vb[CloneMenu#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_6_1.vb)]\n [!code-cpp[CloneMenu#1](~/add/codesnippet/cpp/m-system.windows.forms.m_6_1.cpp)]"
  syntax:
    content: protected void CloneMenu (System.Windows.Forms.Menu menuSrc);
    parameters:
    - id: menuSrc
      type: System.Windows.Forms.Menu
      description: "<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>复制。"
  overload: System.Windows.Forms.Menu.CloneMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.CreateMenuHandle
  id: CreateMenuHandle
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: CreateMenuHandle()
  nameWithType: Menu.CreateMenuHandle()
  fullName: System.Windows.Forms.Menu.CreateMenuHandle()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "创建的新句柄<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。"
  syntax:
    content: protected virtual IntPtr CreateMenuHandle ();
    parameters: []
    return:
      type: System.IntPtr
      description: "如果方法成功，则为菜单的句柄否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.CreateMenuHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Menu.Dispose(Boolean)
  fullName: System.Windows.Forms.Menu.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "释放资源，以外使用的内存<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。"
  remarks: "在完成使用<xref:System.Windows.Forms.Menu>.</xref:System.Windows.Forms.Menu>时调用的 Dispose Dispose 方法离开<xref:System.Windows.Forms.Menu>中不可用状态。</xref:System.Windows.Forms.Menu> 调用 Dispose 后，必须释放对所有引用<xref:System.Windows.Forms.Menu>以便可以通过垃圾回收回收其占用的内存。</xref:System.Windows.Forms.Menu>      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.Windows.Forms.Menu>。</xref:System.Windows.Forms.Menu>最后一个引用之前 否则为资源<xref:System.Windows.Forms.Menu>是使用不会被释放之前垃圾集合调用<xref:System.Windows.Forms.Menu>对象的析构函数。</xref:System.Windows.Forms.Menu> </xref:System.Windows.Forms.Menu>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Windows.Forms.Menu.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.FindHandle
  id: FindHandle
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: FindHandle
  nameWithType: Menu.FindHandle
  fullName: System.Windows.Forms.Menu.FindHandle
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定<xref:System.Windows.Forms.Menu.FindMenuItem*>方法应搜索句柄。</xref:System.Windows.Forms.Menu.FindMenuItem*>"
  syntax:
    content: public const int FindHandle = 0;
    return:
      type: System.Int32
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)
  id: FindMenuItem(System.Int32,System.IntPtr)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: FindMenuItem(Int32,IntPtr)
  nameWithType: Menu.FindMenuItem(Int32,IntPtr)
  fullName: System.Windows.Forms.Menu.FindMenuItem(Int32,IntPtr)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref> ，其中包含指定的值。"
  remarks: "要搜索<xref:System.Windows.Forms.MenuItem>使用句柄，传入<xref:System.Windows.Forms.Menu.FindHandle>字段作为类型，然后的句柄<xref:System.Windows.Forms.MenuItem>你想要查找的值。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.FindHandle> </xref:System.Windows.Forms.MenuItem>       要搜索<xref:System.Windows.Forms.MenuItem>中使用快捷方式，将传递<xref:System.Windows.Forms.Menu.FindShortcut>字段的快捷方式值类型，以及<xref:System.Windows.Forms.MenuItem>你想要查找的值。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.Menu.FindShortcut> </xref:System.Windows.Forms.MenuItem>"
  syntax:
    content: public System.Windows.Forms.MenuItem FindMenuItem (int type, IntPtr value);
    parameters:
    - id: type
      type: System.Int32
      description: "要用于查找的项类型<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
    - id: value
      type: System.IntPtr
      description: "要用于查找的项<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>。"
    return:
      type: System.Windows.Forms.MenuItem
      description: "<xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref>与值匹配; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.FindMenuItem*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.FindMergePosition(System.Int32)
  id: FindMergePosition(System.Int32)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: FindMergePosition(Int32)
  nameWithType: Menu.FindMergePosition(Int32)
  fullName: System.Windows.Forms.Menu.FindMergePosition(Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "返回菜单项应插入菜单的位置。"
  remarks: "菜单项的合并顺序指定如果菜单结构，将假定此菜单项的相对位置<xref:System.Windows.Forms.MenuItem>包含在与另一个合并。</xref:System.Windows.Forms.MenuItem>"
  syntax:
    content: protected int FindMergePosition (int mergeOrder);
    parameters:
    - id: mergeOrder
      type: System.Int32
      description: "要合并的菜单项合并顺序位置。"
    return:
      type: System.Int32
      description: "菜单项应插入菜单的位置。"
  overload: System.Windows.Forms.Menu.FindMergePosition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.FindShortcut
  id: FindShortcut
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: FindShortcut
  nameWithType: Menu.FindShortcut
  fullName: System.Windows.Forms.Menu.FindShortcut
  type: Field
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "指定<xref:System.Windows.Forms.Menu.FindMenuItem*>方法应搜索快捷方式。</xref:System.Windows.Forms.Menu.FindMenuItem*>"
  syntax:
    content: public const int FindShortcut = 1;
    return:
      type: System.Int32
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.GetContextMenu
  id: GetContextMenu
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: GetContextMenu()
  nameWithType: Menu.GetContextMenu()
  fullName: System.Windows.Forms.Menu.GetContextMenu()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.ContextMenu&quot;> </xref> ，其中包含此菜单。"
  remarks: "此方法可用于获取对<xref:System.Windows.Forms.ContextMenu>此菜单是包含的单元</xref:System.Windows.Forms.ContextMenu>的引用 此属性返回`null`如果菜单未包含在一种<xref:System.Windows.Forms.ContextMenu>。</xref:System.Windows.Forms.ContextMenu> 发生这种情况中包含菜单上<xref:System.Windows.Forms.MenuItem>或<xref:System.Windows.Forms.MainMenu>，或如果菜单未包含在任何菜单。</xref:System.Windows.Forms.MainMenu> </xref:System.Windows.Forms.MenuItem> 你可以使用此属性，以确定是否当前正在使用一个菜单，以及确定的位置。"
  example:
  - "In this example, you use the GetContextMenu method to obtain a reference to the shortcut menu that contains `menuItem1` or `menuItem2`, and display the shortcut menu information in a message box. You programmatically create a shortcut menu with two items, `New` and `Open`. You then add functionality to these items by creating the appropriate event handlers. When you run the example, you get a message box that tells you to right-click the form in order to display the shortcut menu. Then, when you click a menu item, you get another message that tells which item has been clicked and displays the information on the containing shortcut menu. This example requires that you have already created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[GetContextMenu2#1](~/add/codesnippet/csharp/m-system.windows.forms.m_15_1.cs)]\n [!code-cpp[GetContextMenu2#1](~/add/codesnippet/cpp/m-system.windows.forms.m_15_1.cpp)]\n [!code-vb[GetContextMenu2#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_15_1.vb)]"
  syntax:
    content: public System.Windows.Forms.ContextMenu GetContextMenu ();
    parameters: []
    return:
      type: System.Windows.Forms.ContextMenu
      description: "<xref href=&quot;System.Windows.Forms.ContextMenu&quot;> </xref> ，其中包含此菜单。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.GetContextMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.GetMainMenu
  id: GetMainMenu
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: GetMainMenu()
  nameWithType: Menu.GetMainMenu()
  fullName: System.Windows.Forms.Menu.GetMainMenu()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.MainMenu&quot;> </xref> ，其中包含此菜单。"
  remarks: "此方法可用于获取对<xref:System.Windows.Forms.MainMenu>此菜单是当前位于数据中心。</xref:System.Windows.Forms.MainMenu> 此属性返回`null`如果菜单未包含在一种<xref:System.Windows.Forms.MainMenu>。</xref:System.Windows.Forms.MainMenu> 发生这种情况中包含菜单上<xref:System.Windows.Forms.MenuItem>或<xref:System.Windows.Forms.ContextMenu>，或如果菜单未包含在任何菜单。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MenuItem> 你可以使用此属性，以确定是否当前正在使用一个菜单，以及确定的位置。"
  example:
  - "This example declares a <xref:System.Windows.Forms.MainMenu>, `mainMenu1`, and four menu items, `menuItem1`, `menuItem2`, `menuItem3`, and `menuItem4`. Only the first three menu items are added to `mainMenu1` for display. The program then checks to see if `menuItem3` is being used, which is `true`, and determines the form in which it is used. A label text is used to display the name of the form that hosts the <xref:System.Windows.Forms.MainMenu>. If you change the menu item being tested to `menuItem4`, the condition evaluates to `false` because `menuItem4` has never been used. This example requires that you have created a <xref:System.Windows.Forms.Form> named `MyForm` that includes a <xref:System.Windows.Forms.Label> named `label1`.  \n  \n [!code-cpp[GetMainMenu#1](~/add/codesnippet/cpp/m-system.windows.forms.m_8_1.cpp)]\n [!code-cs[GetMainMenu#1](~/add/codesnippet/csharp/m-system.windows.forms.m_8_1.cs)]\n [!code-vb[GetMainMenu#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_8_1.vb)]"
  syntax:
    content: public System.Windows.Forms.MainMenu GetMainMenu ();
    parameters: []
    return:
      type: System.Windows.Forms.MainMenu
      description: "<xref href=&quot;System.Windows.Forms.MainMenu&quot;> </xref> ，其中包含此菜单。"
  overload: System.Windows.Forms.Menu.GetMainMenu*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.Handle
  id: Handle
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Handle
  nameWithType: Menu.Handle
  fullName: System.Windows.Forms.Menu.Handle
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取表示菜单的窗口句柄的值。"
  remarks: "此属性可用于获取执行特殊操作到此类或其派生的类提供的功能之外的菜单的菜单的句柄。"
  syntax:
    content: public IntPtr Handle { get; }
    return:
      type: System.IntPtr
      description: "菜单 HMENU 值。"
  overload: System.Windows.Forms.Menu.Handle*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.IsParent
  id: IsParent
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: IsParent
  nameWithType: Menu.IsParent
  fullName: System.Windows.Forms.Menu.IsParent
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示此菜单是否包含任何菜单项。 此属性是只读的。"
  remarks: "你可以使用此方法以确定是否有任何<xref:System.Windows.Forms.MenuItem>对象均分配到此菜单。</xref:System.Windows.Forms.MenuItem> 这相当于检查`null`中<xref:System.Windows.Forms.Menu.MenuItems%2A>属性。</xref:System.Windows.Forms.Menu.MenuItems%2A>"
  example:
  - "The following code example creates a <xref:System.Windows.Forms.MainMenu> with two <xref:System.Windows.Forms.MenuItem> objects. It then uses the IsParent property to determine whether `mainMenu1` contains menu items. If the condition evaluates `true`, it sets the <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> property to `true` and binds the main menu to the <xref:System.Windows.Forms.Form>. This example requires that you have a <xref:System.Windows.Forms.Form> created that is named `Form1`.  \n  \n [!code-cpp[IsParent#1](~/add/codesnippet/cpp/p-system.windows.forms.m_9_1.cpp)]\n [!code-cs[IsParent#1](~/add/codesnippet/csharp/p-system.windows.forms.m_9_1.cs)]\n [!code-vb[IsParent#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_9_1.vb)]"
  syntax:
    content: public virtual bool IsParent { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此菜单包含<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>对象; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.IsParent*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.MdiListItem
  id: MdiListItem
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: MdiListItem
  nameWithType: Menu.MdiListItem
  fullName: System.Windows.Forms.Menu.MdiListItem
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>用于显示多文档界面 (MDI) 子窗体的列表。"
  remarks: "你可以使用此属性以确定是否<xref:System.Windows.Forms.MenuItem>尚未指定要在 MDI 应用程序中显示打开的子窗口的列表。</xref:System.Windows.Forms.MenuItem> 使用特定<xref:System.Windows.Forms.MenuItem>MDI 列表，将设置<xref:System.Windows.Forms.MenuItem.MdiList%2A>中的属性<xref:System.Windows.Forms.MenuItem>用于。</xref:System.Windows.Forms.MenuItem> </xref:System.Windows.Forms.MenuItem.MdiList%2A> </xref:System.Windows.Forms.MenuItem>"
  syntax:
    content: public System.Windows.Forms.MenuItem MdiListItem { get; }
    return:
      type: System.Windows.Forms.MenuItem
      description: "A <xref href=&quot;System.Windows.Forms.MenuItem&quot;> </xref> ，表示显示的应用程序中打开的 MDI 子窗体的列表的菜单项。"
  overload: System.Windows.Forms.Menu.MdiListItem*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.MenuItems
  id: MenuItems
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: MenuItems
  nameWithType: Menu.MenuItems
  fullName: System.Windows.Forms.Menu.MenuItems
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值的集合<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>与菜单相关联的对象。"
  remarks: "此属性可用于获取对的当前存储在菜单中的菜单项列表的引用。 有关<xref:System.Windows.Forms.MainMenu>和<xref:System.Windows.Forms.ContextMenu>对象，该菜单项属性包含在控件中的整个菜单结构。</xref:System.Windows.Forms.ContextMenu> </xref:System.Windows.Forms.MainMenu> 了解<xref:System.Windows.Forms.MenuItem>类，菜单项属性包含与<xref:System.Windows.Forms.MenuItem>.</xref:System.Windows.Forms.MenuItem>关联的子菜单项的列表</xref:System.Windows.Forms.MenuItem> 与对 （此属性提供） 的菜单的菜单项的集合的引用，你可以添加和删除菜单项、 确定的菜单项总数以及清除集合中的菜单项的列表。 有关维护一个菜单的菜单项集合的详细信息，请参阅<xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=fullName>文档。</xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=fullName>"
  example:
  - "The following code example creates an instance of the derived class, <xref:System.Windows.Forms.MainMenu>, and adds a <xref:System.Windows.Forms.MenuItem> object to its collection of <xref:System.Windows.Forms.MenuItem> objects. This example requires that the method defined in this example is located within the class for a form and called by a method in that form class.  \n  \n [!code-vb[Classic Menu.MenuItems Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.m_28_1.vb)]\n [!code-cpp[Classic Menu.MenuItems Example#1](~/add/codesnippet/cpp/p-system.windows.forms.m_28_1.cpp)]\n [!code-cs[Classic Menu.MenuItems Example#1](~/add/codesnippet/csharp/p-system.windows.forms.m_28_1.cs)]"
  syntax:
    content: public System.Windows.Forms.Menu.MenuItemCollection MenuItems { get; }
    return:
      type: System.Windows.Forms.Menu.MenuItemCollection
      description: "A &lt;xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=fullName&gt;表示的列表<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>菜单中存储的对象。"
  overload: System.Windows.Forms.Menu.MenuItems*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)
  id: MergeMenu(System.Windows.Forms.Menu)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: MergeMenu(Menu)
  nameWithType: Menu.MergeMenu(Menu)
  fullName: System.Windows.Forms.Menu.MergeMenu(Menu)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "合并<xref href=&quot;System.Windows.Forms.MenuItem&quot;></xref>的一个菜单的当前菜单上的对象。"
  remarks: "此方法将合并<xref:System.Windows.Forms.MenuItem>对象从一个与当前菜单的菜单。</xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem>对象的值根据进行合并<xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=fullName>和<xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=fullName>属性。</xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=fullName> </xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=fullName></xref:System.Windows.Forms.MenuItem>       合并带有那些其活动的 MDI 子窗体的多文档界面 (MDI) 父窗体菜单通常为了菜单合并。 这是由.NET Framework 公共语言运行时自动执行。 例如，如果一个 MDI 父窗体包含一组用于处理文件的菜单和 MDI 子窗体还具有与文件相关的菜单项，菜单集将自动合并为单个文件菜单设置在 MDI 父窗体中显示的子窗体时。       如果正在合并两个不是 MDI 应用程序的一部分的菜单结构，你可以使用 MergeMenu 方法。 此实现可以由<xref:System.Windows.Forms.MainMenu>或<xref:System.Windows.Forms.ContextMenu>以合并两个或多个对象从<xref:System.Windows.Forms.Menu>.</xref:System.Windows.Forms.Menu>派生的类</xref:System.Windows.Forms.ContextMenu></xref:System.Windows.Forms.MainMenu>调用       合并两个<xref:System.Windows.Forms.MenuItem>对象，请使用<xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=fullName>方法。</xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=fullName> </xref:System.Windows.Forms.MenuItem>"
  example:
  - "This example creates two menus, `mainMenu1` and `mainMenu2`. The first menu contains one <xref:System.Windows.Forms.MenuItem>, `File`, and the second contains one <xref:System.Windows.Forms.MenuItem>, `Edit`. Using the MergeMenu method, `mainMenu2` is merged with `mainMenu1`. When displayed, `mainMenu1` will contain the two menu items, `File` and `Edit`. This example requires that you have created a <xref:System.Windows.Forms.Form> named `Form1`.  \n  \n [!code-cs[MergeMenu#1](~/add/codesnippet/csharp/m-system.windows.forms.m_23_1.cs)]\n [!code-cpp[MergeMenu#1](~/add/codesnippet/cpp/m-system.windows.forms.m_23_1.cpp)]\n [!code-vb[MergeMenu#1](~/add/codesnippet/visualbasic/m-system.windows.forms.m_23_1.vb)]"
  syntax:
    content: public virtual void MergeMenu (System.Windows.Forms.Menu menuSrc);
    parameters:
    - id: menuSrc
      type: System.Windows.Forms.Menu
      description: "<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>与当前菜单的菜单项合并的菜单项。"
  overload: System.Windows.Forms.Menu.MergeMenu*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "它尝试与其自身菜单合并在一起。"
  platform:
  - net462
- uid: System.Windows.Forms.Menu.Name
  id: Name
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Name
  nameWithType: Menu.Name
  fullName: System.Windows.Forms.Menu.Name
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置的名称<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。"
  remarks: "在设计时，此属性设置为该控件的编程标识符。 但是，此属性没有任何影响在控件上在运行时。"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "表示名称的字符串。"
  overload: System.Windows.Forms.Menu.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  id: ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: ProcessCmdKey(Message,Keys)
  nameWithType: Menu.ProcessCmdKey(Message,Keys)
  fullName: System.Windows.Forms.Menu.ProcessCmdKey(Message,Keys)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "处理命令键。"
  syntax:
    content: protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);
    parameters:
    - id: msg
      type: System.Windows.Forms.Message
      description: "A <xref href=&quot;System.Windows.Forms.Message&quot;> </xref>，通过引用，它表示要处理的窗口消息传递。"
    - id: keyData
      type: System.Windows.Forms.Keys
      description: "之一<xref href=&quot;System.Windows.Forms.Keys&quot;></xref>这些值表示要处理的键。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果字符已由控件; 处理否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.Menu.ProcessCmdKey*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.Tag
  id: Tag
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: Tag
  nameWithType: Menu.Tag
  fullName: System.Windows.Forms.Menu.Tag
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取或设置与控件关联的用户定义的数据。"
  syntax:
    content: public object Tag { get; set; }
    return:
      type: System.Object
      description: "表示数据的对象。"
  overload: System.Windows.Forms.Menu.Tag*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.Menu.ToString
  id: ToString
  parent: System.Windows.Forms.Menu
  langs:
  - csharp
  name: ToString()
  nameWithType: Menu.ToString()
  fullName: System.Windows.Forms.Menu.ToString()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "返回<xref:System.String>表示<xref href=&quot;System.Windows.Forms.Menu&quot;></xref>控件。</xref:System.String>"
  remarks: "ToString 方法将返回<xref:System.String>，包括类型和中的项的数目<xref:System.Windows.Forms.Menu.MenuItems%2A>的控件属性。</xref:System.Windows.Forms.Menu.MenuItems%2A> </xref:System.String>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A <xref:System.String>，表示当前<xref href=&quot;System.Windows.Forms.Menu&quot;> </xref>。</xref:System.String>"
  overload: System.Windows.Forms.Menu.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.Component
  isExternal: false
  name: System.ComponentModel.Component
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Menu(MenuItem[])
  nameWithType: Menu.Menu(MenuItem[])
  fullName: System.Windows.Forms.Menu.Menu(MenuItem[])
- uid: System.Windows.Forms.MenuItem[]
  parent: System.Windows.Forms
  isExternal: false
  name: MenuItem
  nameWithType: MenuItem
  fullName: System.Windows.Forms.MenuItem[]
  spec.csharp:
  - uid: System.Windows.Forms.MenuItem
    name: MenuItem
    nameWithType: MenuItem
    fullName: MenuItem[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: CloneMenu(Menu)
  nameWithType: Menu.CloneMenu(Menu)
  fullName: System.Windows.Forms.Menu.CloneMenu(Menu)
- uid: System.Windows.Forms.Menu
  parent: System.Windows.Forms
  isExternal: false
  name: Menu
  nameWithType: Menu
  fullName: System.Windows.Forms.Menu
- uid: System.Windows.Forms.Menu.CreateMenuHandle
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: CreateMenuHandle()
  nameWithType: Menu.CreateMenuHandle()
  fullName: System.Windows.Forms.Menu.CreateMenuHandle()
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Windows.Forms.Menu.Dispose(System.Boolean)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Menu.Dispose(Boolean)
  fullName: System.Windows.Forms.Menu.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.Menu.FindHandle
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindHandle
  nameWithType: Menu.FindHandle
  fullName: System.Windows.Forms.Menu.FindHandle
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindMenuItem(Int32,IntPtr)
  nameWithType: Menu.FindMenuItem(Int32,IntPtr)
  fullName: System.Windows.Forms.Menu.FindMenuItem(Int32,IntPtr)
- uid: System.Windows.Forms.MenuItem
  parent: System.Windows.Forms
  isExternal: false
  name: MenuItem
  nameWithType: MenuItem
  fullName: System.Windows.Forms.MenuItem
- uid: System.Windows.Forms.Menu.FindMergePosition(System.Int32)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindMergePosition(Int32)
  nameWithType: Menu.FindMergePosition(Int32)
  fullName: System.Windows.Forms.Menu.FindMergePosition(Int32)
- uid: System.Windows.Forms.Menu.FindShortcut
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindShortcut
  nameWithType: Menu.FindShortcut
  fullName: System.Windows.Forms.Menu.FindShortcut
- uid: System.Windows.Forms.Menu.GetContextMenu
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: GetContextMenu()
  nameWithType: Menu.GetContextMenu()
  fullName: System.Windows.Forms.Menu.GetContextMenu()
- uid: System.Windows.Forms.ContextMenu
  parent: System.Windows.Forms
  isExternal: false
  name: ContextMenu
  nameWithType: ContextMenu
  fullName: System.Windows.Forms.ContextMenu
- uid: System.Windows.Forms.Menu.GetMainMenu
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: GetMainMenu()
  nameWithType: Menu.GetMainMenu()
  fullName: System.Windows.Forms.Menu.GetMainMenu()
- uid: System.Windows.Forms.MainMenu
  parent: System.Windows.Forms
  isExternal: false
  name: MainMenu
  nameWithType: MainMenu
  fullName: System.Windows.Forms.MainMenu
- uid: System.Windows.Forms.Menu.Handle
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Handle
  nameWithType: Menu.Handle
  fullName: System.Windows.Forms.Menu.Handle
- uid: System.Windows.Forms.Menu.IsParent
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: IsParent
  nameWithType: Menu.IsParent
  fullName: System.Windows.Forms.Menu.IsParent
- uid: System.Windows.Forms.Menu.MdiListItem
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MdiListItem
  nameWithType: Menu.MdiListItem
  fullName: System.Windows.Forms.Menu.MdiListItem
- uid: System.Windows.Forms.Menu.MenuItems
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MenuItems
  nameWithType: Menu.MenuItems
  fullName: System.Windows.Forms.Menu.MenuItems
- uid: System.Windows.Forms.Menu.MenuItemCollection
  parent: System.Windows.Forms
  isExternal: false
  name: Menu+MenuItemCollection
  nameWithType: Menu+MenuItemCollection
  fullName: System.Windows.Forms.Menu+MenuItemCollection
- uid: System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MergeMenu(Menu)
  nameWithType: Menu.MergeMenu(Menu)
  fullName: System.Windows.Forms.Menu.MergeMenu(Menu)
- uid: System.Windows.Forms.Menu.Name
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Name
  nameWithType: Menu.Name
  fullName: System.Windows.Forms.Menu.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: ProcessCmdKey(Message,Keys)
  nameWithType: Menu.ProcessCmdKey(Message,Keys)
  fullName: System.Windows.Forms.Menu.ProcessCmdKey(Message,Keys)
- uid: System.Windows.Forms.Message
  parent: System.Windows.Forms
  isExternal: false
  name: Message
  nameWithType: Message
  fullName: System.Windows.Forms.Message
- uid: System.Windows.Forms.Keys
  parent: System.Windows.Forms
  isExternal: false
  name: Keys
  nameWithType: Keys
  fullName: System.Windows.Forms.Keys
- uid: System.Windows.Forms.Menu.Tag
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Tag
  nameWithType: Menu.Tag
  fullName: System.Windows.Forms.Menu.Tag
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Forms.Menu.ToString
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: ToString()
  nameWithType: Menu.ToString()
  fullName: System.Windows.Forms.Menu.ToString()
- uid: System.Windows.Forms.Menu.#ctor*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Menu
  nameWithType: Menu.Menu
- uid: System.Windows.Forms.Menu.CloneMenu*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: CloneMenu
  nameWithType: Menu.CloneMenu
- uid: System.Windows.Forms.Menu.CreateMenuHandle*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: CreateMenuHandle
  nameWithType: Menu.CreateMenuHandle
- uid: System.Windows.Forms.Menu.Dispose*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Dispose
  nameWithType: Menu.Dispose
- uid: System.Windows.Forms.Menu.FindMenuItem*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindMenuItem
  nameWithType: Menu.FindMenuItem
- uid: System.Windows.Forms.Menu.FindMergePosition*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: FindMergePosition
  nameWithType: Menu.FindMergePosition
- uid: System.Windows.Forms.Menu.GetContextMenu*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: GetContextMenu
  nameWithType: Menu.GetContextMenu
- uid: System.Windows.Forms.Menu.GetMainMenu*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: GetMainMenu
  nameWithType: Menu.GetMainMenu
- uid: System.Windows.Forms.Menu.Handle*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Handle
  nameWithType: Menu.Handle
- uid: System.Windows.Forms.Menu.IsParent*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: IsParent
  nameWithType: Menu.IsParent
- uid: System.Windows.Forms.Menu.MdiListItem*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MdiListItem
  nameWithType: Menu.MdiListItem
- uid: System.Windows.Forms.Menu.MenuItems*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MenuItems
  nameWithType: Menu.MenuItems
- uid: System.Windows.Forms.Menu.MergeMenu*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: MergeMenu
  nameWithType: Menu.MergeMenu
- uid: System.Windows.Forms.Menu.Name*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Name
  nameWithType: Menu.Name
- uid: System.Windows.Forms.Menu.ProcessCmdKey*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: ProcessCmdKey
  nameWithType: Menu.ProcessCmdKey
- uid: System.Windows.Forms.Menu.Tag*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: Tag
  nameWithType: Menu.Tag
- uid: System.Windows.Forms.Menu.ToString*
  parent: System.Windows.Forms.Menu
  isExternal: false
  name: ToString
  nameWithType: Menu.ToString
