### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  id: LinqDataSourceInsertEventArgs
  children:
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs
  nameWithType: LinqDataSourceInsertEventArgs
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  type: Class
  summary: "提供有关数据<xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Inserting&quot;></xref>事件。"
  remarks: "LinqDataSourceInsertEventArgs 对象传递给任何事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Inserting> <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>属性包含要插入的数据。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A>       你可以使用 LinqDataSourceInsertEventArgs 对象中的数据源执行插入操作之前检查数据。 然后可以验证数据、 检查的数据类中，验证错误或更改在更新之前的值。 你也可以取消插入操作。       如果表示数据源的对象之前它将插入的数据，<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A>属性包含<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>类</xref:System.Web.UI.WebControls.LinqDataSourceValidationException>的实例</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A>引发验证异常 你可以检索通过所有验证异常<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 如果不验证引发异常，<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A>属性包含`null`。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception%2A> 如果你处理验证异常，同时不想要重新引发的异常，设置<xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A>属性`true`。</xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled%2A>"
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The object from the <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_258_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_258_1.vb)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: 'public class LinqDataSourceInsertEventArgs : System.ComponentModel.CancelEventArgs'
  inheritance:
  - System.ComponentModel.CancelEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  id: '#ctor(System.Object)'
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs(Object)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&quot;></xref>类。"
  syntax:
    content: public LinqDataSourceInsertEventArgs (object newObject);
    parameters:
    - id: newObject
      type: System.Object
      description: "一个包含要插入的数据的对象。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  id: '#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)'
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&quot;></xref>类，并指定提供的异常。"
  syntax:
    content: public LinqDataSourceInsertEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);
    parameters:
    - id: exception
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "验证要插入的数据时出现异常。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取在执行插入操作之前验证数据时引发的异常。"
  remarks: "如果在执行插入操作之前，将引发验证异常，该异常存储在异常属性。 中的处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件，你可以检索通过异常属性的异常。</xref:System.Web.UI.WebControls.LinqDataSource.Inserting>"
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }
    return:
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "异常，如果出现错误;否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否处理了该异常并，它应不会再次引发。"
  remarks: "你可以创建事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件以检查插入操作之前发生的验证异常。</xref:System.Web.UI.WebControls.LinqDataSource.Inserting> 如果你处理的异常，并且不希望它再次引发，ExceptionHandled 属性设置为`true`。 如果你未设置为 ExceptionHandled 属性`true`，该异常将传播到调用堆栈中的下一步事件处理程序。"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Inserting(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceInsertEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message + \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Inserting(object sender,   \n        LinqDataSourceInsertEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果处理了该异常;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  id: NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  langs:
  - csharp
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取包含要插入的数据的对象。"
  remarks: "NewObject 属性包含将被插入到数据源的数据。 创建处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Inserting>事件并检索 NewObject 属性，以便验证数据，更改的数据，或数据操作执行之前取消插入操作。</xref:System.Web.UI.WebControls.LinqDataSource.Inserting>       NewObject 属性返回类型<xref:System.Object>.</xref:System.Object>的对象 您可以强制转换为的类型表示的数据类的此对象。"
  example:
  - "The following example shows a handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> event. The object from the NewObject property is cast to a type named `Product`. The `DateModified` property of the `Product` object is set to the current date and time.  \n  \n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_170_1.cs)]\n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_170_1.vb)]"
  syntax:
    content: public object NewObject { get; }
    return:
      type: System.Object
      description: "一个包含要插入的数据的对象。"
  overload: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.CancelEventArgs
  isExternal: false
  name: System.ComponentModel.CancelEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Object)
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs(Object)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs(LinqDataSourceValidationException)
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceValidationException
  nameWithType: LinqDataSourceValidationException
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: LinqDataSourceInsertEventArgs
  nameWithType: LinqDataSourceInsertEventArgs.LinqDataSourceInsertEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.Exception*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceInsertEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceInsertEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject*
  parent: System.Web.UI.WebControls.LinqDataSourceInsertEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceInsertEventArgs.NewObject
