### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.MetadataImporter
  id: MetadataImporter
  children:
  - System.ServiceModel.Description.MetadataImporter.Errors
  - System.ServiceModel.Description.MetadataImporter.ImportAllContracts
  - System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints
  - System.ServiceModel.Description.MetadataImporter.KnownContracts
  - System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
  - System.ServiceModel.Description.MetadataImporter.State
  langs:
  - csharp
  name: MetadataImporter
  nameWithType: MetadataImporter
  fullName: System.ServiceModel.Description.MetadataImporter
  type: Class
  summary: "导入到的元数据&lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName&gt;对象。"
  remarks: "使用 MetadataImporter 抽象类的实现导入服务元数据。 从 MetadataImporter 类派生的类型实现支持对导入元数据格式利用 WS 策略导入中的逻辑[!INCLUDE[indigo1](~/add/includes/ajax-current-ext-md.md)]。       MetadataImporter 实现收集附加到中的服务元数据的策略表达式<xref:System.ServiceModel.Description.PolicyConversionContext?displayProperty=fullName>对象。</xref:System.ServiceModel.Description.PolicyConversionContext?displayProperty=fullName> MetadataImporter 然后处理的调用的实现中导入元数据一部分策略<xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=fullName>接口中<xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=fullName>属性。</xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=fullName>       你可以添加对将新策略断言导入 MetadataImporter，通过添加您自己的实现支持<xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=fullName>接口<xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=fullName>MetadataImporter 实例上的属性。</xref:System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.IPolicyImportExtension?displayProperty=fullName> 或者，你可以在应用程序配置文件中注册策略导入扩展。       <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>类型是附带 MetadataImporter 抽象类的实现[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]。</xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>类型可以导入 WSDL 元数据与捆绑中的附加策略<xref:System.ServiceModel.Description.MetadataSet?displayProperty=fullName>对象。</xref:System.ServiceModel.Description.MetadataSet?displayProperty=fullName> </xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>       你可以添加对导入 WSDL 扩展，通过实现支持<xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>接口，然后将添加到实现<xref:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions%2A?displayProperty=fullName>属性你<xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>实例。</xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> </xref:System.ServiceModel.Description.WsdlImporter.WsdlImportExtensions%2A?displayProperty=fullName> </xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName> <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>还可以加载的实现<xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName>接口在应用程序配置文件中注册。</xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=fullName> </xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName>      1> [!NOTE]&1;> MetadataImporter 构造函数在内部，因为你不能从派生 MetadataImporter 在此版本中。"
  example:
  - "The following example shows the use of the <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=fullName> derived class to import metadata using custom state, checking the <xref:System.ServiceModel.Description.MetadataImporter.Errors%2A> property, compiling imported metadata to managed types and saving the result to a code file.  \n  \n [!code-cs[C_CustomWSDLExtensions#8](~/add/codesnippet/csharp/c_customwsdlextensions.client/client.cs#8)]"
  syntax:
    content: public abstract class MetadataImporter
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.Errors
  id: Errors
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: Errors
  nameWithType: MetadataImporter.Errors
  fullName: System.ServiceModel.Description.MetadataImporter.Errors
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取一个值，该值指示是否没有错误导入元数据。"
  remarks: "之后导入元数据和使用元数据之前，始终检查错误属性。"
  syntax:
    content: public System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MetadataConversionError> Errors { get; }
    return:
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.MetadataConversionError}
      description: "集合<xref href=&quot;System.ServiceModel.Description.MetadataConversionError&quot;></xref>对象。"
  overload: System.ServiceModel.Description.MetadataImporter.Errors*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllContracts
  id: ImportAllContracts
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: ImportAllContracts()
  nameWithType: MetadataImporter.ImportAllContracts()
  fullName: System.ServiceModel.Description.MetadataImporter.ImportAllContracts()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "当在派生类中重写，则返回从元数据导入的协定的集合。"
  syntax:
    content: public abstract System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ContractDescription> ImportAllContracts ();
    parameters: []
    return:
      type: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ContractDescription}
      description: "从元数据导入的协定。"
  overload: System.ServiceModel.Description.MetadataImporter.ImportAllContracts*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints
  id: ImportAllEndpoints
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: ImportAllEndpoints()
  nameWithType: MetadataImporter.ImportAllEndpoints()
  fullName: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints()
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "当在派生类中重写，在元数据中返回所有终结点。"
  remarks: "实现 ImportAllEndpoints 方法可在导入元数据中返回所有终结点。 已作为服务终结点导入的元数据无法用于创建运行时或导出元数据，因为导入的终结点不包含托管的类型信息。 若要创建客户端或服务运行时或者若要生成元数据，请使用元数据，必须先生成和编译的元数据的代码并使用该类型信息创建新的<xref:System.ServiceModel.Description.ContractDescription?displayProperty=fullName>对象使用<xref:System.ServiceModel.Description.ContractDescription.GetContract%2A>.</xref:System.ServiceModel.Description.ContractDescription.GetContract%2A> </xref:System.ServiceModel.Description.ContractDescription?displayProperty=fullName>"
  syntax:
    content: public abstract System.ServiceModel.Description.ServiceEndpointCollection ImportAllEndpoints ();
    parameters: []
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "集合&lt;xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=fullName&gt;由服务发布的对象。"
  overload: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.KnownContracts
  id: KnownContracts
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: KnownContracts
  nameWithType: MetadataImporter.KnownContracts
  fullName: System.ServiceModel.Description.MetadataImporter.KnownContracts
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取按导入程序就会了解有关的名称排列的协定字典。"
  remarks: "KnownContracts 属性用于添加或移除协定说明和导入程序可以引用其关联的 XML 名称。"
  syntax:
    content: public System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription> KnownContracts { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription}
      description: "按 XML 限定名称列出的协定字典。"
  overload: System.ServiceModel.Description.MetadataImporter.KnownContracts*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
  id: PolicyImportExtensions
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: PolicyImportExtensions
  nameWithType: MetadataImporter.PolicyImportExtensions
  fullName: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取策略导入程序导入程序调用用于处理策略断言的集合。"
  remarks: "使用 PolicyImportExtensions 属性添加或删除调用以处理元数据中的策略断言的策略导入程序。"
  syntax:
    content: public System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IPolicyImportExtension> PolicyImportExtensions { get; }
    return:
      type: System.Collections.Generic.KeyedByTypeCollection{System.ServiceModel.Description.IPolicyImportExtension}
      description: "策略导入程序的集合， <xref href=&quot;System.ServiceModel.Description.MetadataImporter&quot;> </xref>用于处理策略断言。"
  overload: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataImporter.State
  id: State
  parent: System.ServiceModel.Description.MetadataImporter
  langs:
  - csharp
  name: State
  nameWithType: MetadataImporter.State
  fullName: System.ServiceModel.Description.MetadataImporter.State
  type: Property
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "获取或设置在导入元数据中使用的对象的集合。"
  remarks: "使用`State`属性可添加或移除导入元数据中使用的对象。"
  example:
  - "The following example shows the use of the State property to add a custom <xref:System.Runtime.Serialization.XsdDataContractImporter?displayProperty=fullName> to import data structures in a particular way.  \n  \n [!code-cs[C_CustomWSDLExtensions#8](~/add/codesnippet/csharp/c_customwsdlextensions.client/client.cs#8)]"
  syntax:
    content: public System.Collections.Generic.Dictionary<object,object> State { get; }
    return:
      type: System.Collections.Generic.Dictionary{System.Object,System.Object}
      description: "由类型键控的对象的字典。"
  overload: System.ServiceModel.Description.MetadataImporter.State*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ServiceModel.Description.MetadataImporter.Errors
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: Errors
  nameWithType: MetadataImporter.Errors
  fullName: System.ServiceModel.Description.MetadataImporter.Errors
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.MetadataConversionError}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<MetadataConversionError>
  nameWithType: Collection<MetadataConversionError>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.MetadataConversionError>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.MetadataConversionError>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.MetadataConversionError
    name: MetadataConversionError
    nameWithType: MetadataConversionError
    fullName: MetadataConversionError
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllContracts
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: ImportAllContracts()
  nameWithType: MetadataImporter.ImportAllContracts()
  fullName: System.ServiceModel.Description.MetadataImporter.ImportAllContracts()
- uid: System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ContractDescription}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: Collection<ContractDescription>
  nameWithType: Collection<ContractDescription>
  fullName: System.Collections.ObjectModel.Collection<System.ServiceModel.Description.ContractDescription>
  spec.csharp:
  - uid: System.Collections.ObjectModel.Collection`1
    name: Collection
    nameWithType: Collection
    fullName: Collection<System.ServiceModel.Description.ContractDescription>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ContractDescription
    name: ContractDescription
    nameWithType: ContractDescription
    fullName: ContractDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: ImportAllEndpoints()
  nameWithType: MetadataImporter.ImportAllEndpoints()
  fullName: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints()
- uid: System.ServiceModel.Description.ServiceEndpointCollection
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceEndpointCollection
  nameWithType: ServiceEndpointCollection
  fullName: System.ServiceModel.Description.ServiceEndpointCollection
- uid: System.ServiceModel.Description.MetadataImporter.KnownContracts
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: KnownContracts
  nameWithType: MetadataImporter.KnownContracts
  fullName: System.ServiceModel.Description.MetadataImporter.KnownContracts
- uid: System.Collections.Generic.Dictionary{System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<XmlQualifiedName,ContractDescription>
  nameWithType: Dictionary<XmlQualifiedName,ContractDescription>
  fullName: System.Collections.Generic.Dictionary<System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.Xml.XmlQualifiedName,System.ServiceModel.Description.ContractDescription>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xml.XmlQualifiedName
    name: XmlQualifiedName
    nameWithType: XmlQualifiedName
    fullName: XmlQualifiedName
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.ServiceModel.Description.ContractDescription
    name: ContractDescription
    nameWithType: ContractDescription
    fullName: ContractDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: PolicyImportExtensions
  nameWithType: MetadataImporter.PolicyImportExtensions
  fullName: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions
- uid: System.Collections.Generic.KeyedByTypeCollection{System.ServiceModel.Description.IPolicyImportExtension}
  parent: System.Collections.Generic
  isExternal: false
  name: KeyedByTypeCollection<IPolicyImportExtension>
  nameWithType: KeyedByTypeCollection<IPolicyImportExtension>
  fullName: System.Collections.Generic.KeyedByTypeCollection<System.ServiceModel.Description.IPolicyImportExtension>
  spec.csharp:
  - uid: System.Collections.Generic.KeyedByTypeCollection`1
    name: KeyedByTypeCollection
    nameWithType: KeyedByTypeCollection
    fullName: KeyedByTypeCollection<System.ServiceModel.Description.IPolicyImportExtension>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.IPolicyImportExtension
    name: IPolicyImportExtension
    nameWithType: IPolicyImportExtension
    fullName: IPolicyImportExtension
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.State
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: State
  nameWithType: MetadataImporter.State
  fullName: System.ServiceModel.Description.MetadataImporter.State
- uid: System.Collections.Generic.Dictionary{System.Object,System.Object}
  parent: System.Collections.Generic
  isExternal: true
  name: Dictionary<Object,Object>
  nameWithType: Dictionary<Object,Object>
  fullName: System.Collections.Generic.Dictionary<System.Object,System.Object>
  spec.csharp:
  - uid: System.Collections.Generic.Dictionary`2
    name: Dictionary
    nameWithType: Dictionary
    fullName: Dictionary<System.Object,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.Description.MetadataImporter.Errors*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: Errors
  nameWithType: MetadataImporter.Errors
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllContracts*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: ImportAllContracts
  nameWithType: MetadataImporter.ImportAllContracts
- uid: System.ServiceModel.Description.MetadataImporter.ImportAllEndpoints*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: ImportAllEndpoints
  nameWithType: MetadataImporter.ImportAllEndpoints
- uid: System.ServiceModel.Description.MetadataImporter.KnownContracts*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: KnownContracts
  nameWithType: MetadataImporter.KnownContracts
- uid: System.ServiceModel.Description.MetadataImporter.PolicyImportExtensions*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: PolicyImportExtensions
  nameWithType: MetadataImporter.PolicyImportExtensions
- uid: System.ServiceModel.Description.MetadataImporter.State*
  parent: System.ServiceModel.Description.MetadataImporter
  isExternal: false
  name: State
  nameWithType: MetadataImporter.State
