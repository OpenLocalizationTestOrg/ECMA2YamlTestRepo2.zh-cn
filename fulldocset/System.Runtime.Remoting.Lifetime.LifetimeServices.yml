### YamlMime:ManagedReference
items:
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices
  id: LifetimeServices
  children:
  - System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor
  - System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
  - System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
  - System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
  - System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
  langs:
  - csharp
  name: LifetimeServices
  nameWithType: LifetimeServices
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices
  type: Class
  summary: "控件的.net 远程处理生存期服务。"
  remarks: "分布式的垃圾回收是负责控制服务器应用程序的生存期，并在它们的生存期结束时删除它们。 传统上，分布式的垃圾回收使用引用计数和 ping 进行控制。 这适用于有几个客户端每个对象，但也有数千个每个每个对象的客户端时无法正常工作。 当客户端的数量增加时，生存期服务可以假定传统的分布式垃圾回收器中和规模的函数。       生存期服务将与每个远程激活对象关联的租约。 当租约已过期时，将删除该对象。      1> [!NOTE]&1;> 此类，使链接要求。 如果直接调用方没有基础结构的权限，将引发安全异常。 请参阅[链接需求](~/add/includes/ajax-current-ext-md.md)有关详细信息。"
  example:
  - >-
    [!code-cpp[System.Runtime.Remoting.Lifetime#2](~/add/codesnippet/cpp/t-system.runtime.remotin_69_1.cpp)]
     [!code-vb[System.Runtime.Remoting.Lifetime#2](~/add/codesnippet/visualbasic/t-system.runtime.remotin_69_1.vb)]
     [!code-cs[System.Runtime.Remoting.Lifetime#2](~/add/codesnippet/csharp/t-system.runtime.remotin_69_1.cs)]
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      [System.Security.SecurityCritical]

      public sealed class LifetimeServices
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor
  id: '#ctor'
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: LifetimeServices()
  nameWithType: LifetimeServices.LifetimeServices()
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LifetimeServices()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "创建的实例<xref href=&quot;System.Runtime.Remoting.Lifetime.LifetimeServices&quot;> </xref>。"
  syntax:
    content: public LifetimeServices ();
    parameters: []
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
  id: LeaseManagerPollTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: LeaseManagerPollTime
  nameWithType: LifetimeServices.LeaseManagerPollTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "获取或设置要清除过期的租约的租约管理器每次激活之间的时间间隔。"
  remarks: "当前的属性定义从该处的租用管理器将变为活动状态，以清除过期的租约的频率。 例如，如果 LeaseManagerPollTime 设置为 100 秒，租约列表中将检查清理和续订每隔 100 秒。       LeaseManagerPollTime 属性的默认值为 10 秒。"
  syntax:
    content: public static TimeSpan LeaseManagerPollTime { get; set; }
    return:
      type: System.TimeSpan
      description: "默认时间长度的租用管理器将休眠后检查到期租约。"
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "至少一个调用堆栈中较高的调用方没有权限来配置远程处理类型和信道。 仅在设置属性值时，引发此异常。"
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
  id: LeaseTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: LeaseTime
  nameWithType: LifetimeServices.LeaseTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "获取或设置的初始的租约时间跨度<xref href=&quot;System.AppDomain&quot;> </xref>。"
  remarks: "默认租约时间跨度为 5 分钟。"
  syntax:
    content: public static TimeSpan LeaseTime { get; set; }
    return:
      type: System.TimeSpan
      description: "初始租约<xref:System.TimeSpan>可以有租约中的对象的<xref href=&quot;System.AppDomain&quot;> </xref>。</xref:System.TimeSpan>"
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "至少一个调用堆栈中较高的调用方没有权限来配置远程处理类型和信道。 仅在设置属性值时，引发此异常。"
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
  id: RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: RenewOnCallTime
  nameWithType: LifetimeServices.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "获取或设置每次调用在该服务器对象上开始依据扩展租约的时间量。"
  remarks: "通过该扩展的生存期租约的默认值续订时间为 2 分钟。"
  example:
  - >-
    [!code-cpp[ILease_ILease#3](~/add/codesnippet/cpp/p-system.runtime.remotin_103_1.cpp)]
     [!code-cs[ILease_ILease#3](~/add/codesnippet/csharp/p-system.runtime.remotin_103_1.cs)]
     [!code-vb[ILease_ILease#3](~/add/codesnippet/visualbasic/p-system.runtime.remotin_103_1.vb)]
  syntax:
    content: public static TimeSpan RenewOnCallTime { get; set; }
    return:
      type: System.TimeSpan
      description: "<xref:System.TimeSpan>通过的生存期租约在当前<xref href=&quot;System.AppDomain&quot;></xref>扩展每次调用之后。</xref:System.TimeSpan>"
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "至少一个调用堆栈中较高的调用方没有权限来配置远程处理类型和信道。 仅在设置属性值时，引发此异常。"
  platform:
  - net462
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
  id: SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  langs:
  - csharp
  name: SponsorshipTimeout
  nameWithType: LifetimeServices.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Runtime.Remoting.Lifetime
  summary: "获取或设置的租用管理器等待发起人返回延续租用时间的时间量。"
  remarks: "发起人调用操作已超时的默认时间为 2 分钟。"
  example:
  - >-
    [!code-cpp[ILease_ILease#3](~/add/codesnippet/cpp/p-system.runtime.remotin_75_1.cpp)]
     [!code-cs[ILease_ILease#3](~/add/codesnippet/csharp/p-system.runtime.remotin_75_1.cs)]
     [!code-vb[ILease_ILease#3](~/add/codesnippet/visualbasic/p-system.runtime.remotin_75_1.vb)]
  syntax:
    content: public static TimeSpan SponsorshipTimeout { get; set; }
    return:
      type: System.TimeSpan
      description: "初始赞助超时中。"
  overload: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "至少一个调用堆栈中较高的调用方没有权限来配置远程处理类型和信道。 仅在设置属性值时，引发此异常。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LifetimeServices()
  nameWithType: LifetimeServices.LifetimeServices()
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LifetimeServices()
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LeaseManagerPollTime
  nameWithType: LifetimeServices.LeaseManagerPollTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LeaseTime
  nameWithType: LifetimeServices.LeaseTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: RenewOnCallTime
  nameWithType: LifetimeServices.RenewOnCallTime
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: LifetimeServices.SponsorshipTimeout
  fullName: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.#ctor*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LifetimeServices
  nameWithType: LifetimeServices.LifetimeServices
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseManagerPollTime*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LeaseManagerPollTime
  nameWithType: LifetimeServices.LeaseManagerPollTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.LeaseTime*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: LeaseTime
  nameWithType: LifetimeServices.LeaseTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.RenewOnCallTime*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: RenewOnCallTime
  nameWithType: LifetimeServices.RenewOnCallTime
- uid: System.Runtime.Remoting.Lifetime.LifetimeServices.SponsorshipTimeout*
  parent: System.Runtime.Remoting.Lifetime.LifetimeServices
  isExternal: false
  name: SponsorshipTimeout
  nameWithType: LifetimeServices.SponsorshipTimeout
