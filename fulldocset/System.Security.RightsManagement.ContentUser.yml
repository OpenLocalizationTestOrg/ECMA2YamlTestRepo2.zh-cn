### YamlMime:ManagedReference
items:
- uid: System.Security.RightsManagement.ContentUser
  id: ContentUser
  children:
  - System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)
  - System.Security.RightsManagement.ContentUser.AnyoneUser
  - System.Security.RightsManagement.ContentUser.AuthenticationType
  - System.Security.RightsManagement.ContentUser.Equals(System.Object)
  - System.Security.RightsManagement.ContentUser.GetHashCode
  - System.Security.RightsManagement.ContentUser.IsAuthenticated
  - System.Security.RightsManagement.ContentUser.Name
  - System.Security.RightsManagement.ContentUser.OwnerUser
  langs:
  - csharp
  name: ContentUser
  nameWithType: ContentUser
  fullName: System.Security.RightsManagement.ContentUser
  type: Class
  summary: "表示用户组以授予对权限管理内容访问权限。"
  remarks: "与其他<xref:System.Security.RightsManagement>类型，内容是仅可用于完全信任应用程序。</xref:System.Security.RightsManagement>"
  example:
  - "The following example shows how to use <xref:System.Security.RightsManagement.UnsignedPublishLicense.Owner%2A> property to assign a variable of this type.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubUnPubLic](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubunpublic)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubUnPubLic](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubunpublic)]"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public class ContentUser
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)
  id: '#ctor(System.String,System.Security.RightsManagement.AuthenticationType)'
  parent: System.Security.RightsManagement.ContentUser
  langs:
  - csharp
  name: ContentUser(String,AuthenticationType)
  nameWithType: ContentUser.ContentUser(String,AuthenticationType)
  fullName: System.Security.RightsManagement.ContentUser.ContentUser(String,AuthenticationType)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "初始化的新实例<xref href=&quot;System.Security.RightsManagement.ContentUser&quot;></xref>类。"
  remarks: "用户或组`name`通常采用单个电子邮件地址的形式 (如johndoe@contoso.com) 或电子邮件分发列表 (如marketing@contoso.com)。"
  example:
  - "The following example shows how to use this constructor to create a secure environment.  \n  \n [!code-vb[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/visualbasic/rmpackagepublish/window1.xaml.vb#rmpkgpubsecenv)]\n [!code-cs[RightsManagedPackagePublish#RmPkgPubSecEnv](~/add/codesnippet/csharp/RmPackagePublish/Window1.xaml.cs#rmpkgpubsecenv)]"
  syntax:
    content: public ContentUser (string name, System.Security.RightsManagement.AuthenticationType authenticationType);
    parameters:
    - id: name
      type: System.String
      description: "用户或组的名称。"
    - id: authenticationType
      type: System.Security.RightsManagement.AuthenticationType
      description: "用于身份验证方法。"
  overload: System.Security.RightsManagement.ContentUser.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.ContentUser.AnyoneUser
  id: AnyoneUser
  parent: System.Security.RightsManagement.ContentUser
  langs:
  - csharp
  name: AnyoneUser
  nameWithType: ContentUser.AnyoneUser
  fullName: System.Security.RightsManagement.ContentUser.AnyoneUser
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取实例的&quot;任何人&quot; <xref href=&quot;System.Security.RightsManagement.ContentUser&quot;> </xref>角色。"
  remarks: "AnyoneUser 具有<xref:System.Security.RightsManagement.ContentUser.AuthenticationType%2A>&quot;内部&quot;和<xref:System.Security.RightsManagement.ContentUser.Name%2A>&quot;任何人&quot;。</xref:System.Security.RightsManagement.ContentUser.Name%2A> </xref:System.Security.RightsManagement.ContentUser.AuthenticationType%2A>       如果<xref:System.Security.RightsManagement.ContentUser.AuthenticationType%2A>&quot;内部&quot;与<xref:System.Security.RightsManagement.ContentUser.Name%2A>&quot;任何人&quot;在发布期间授予权限，则身份验证服务器将发出<xref:System.Security.RightsManagement.UseLicense>到任何请求，并将附加到请求的用户的许可证。</xref:System.Security.RightsManagement.UseLicense> </xref:System.Security.RightsManagement.ContentUser.Name%2A> </xref:System.Security.RightsManagement.ContentUser.AuthenticationType%2A>"
  syntax:
    content: public static System.Security.RightsManagement.ContentUser AnyoneUser { get; }
    return:
      type: System.Security.RightsManagement.ContentUser
      description: "&quot;任何人&quot;的实例<xref href=&quot;System.Security.RightsManagement.ContentUser&quot;></xref>角色。"
  overload: System.Security.RightsManagement.ContentUser.AnyoneUser*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.ContentUser.AuthenticationType
  id: AuthenticationType
  parent: System.Security.RightsManagement.ContentUser
  langs:
  - csharp
  name: AuthenticationType
  nameWithType: ContentUser.AuthenticationType
  fullName: System.Security.RightsManagement.ContentUser.AuthenticationType
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取<xref href=&quot;System.Security.RightsManagement.AuthenticationType&quot;></xref>指定给&lt;xref:System.Security.RightsManagement.ContentUser.%23ctor%2A&gt;构造函数。"
  syntax:
    content: public System.Security.RightsManagement.AuthenticationType AuthenticationType { get; }
    return:
      type: System.Security.RightsManagement.AuthenticationType
      description: "<xref href=&quot;System.Security.RightsManagement.AuthenticationType&quot;> </xref>指定给&lt;xref:System.Security.RightsManagement.ContentUser.%23ctor%2A&gt;构造函数。"
  overload: System.Security.RightsManagement.ContentUser.AuthenticationType*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.ContentUser.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Security.RightsManagement.ContentUser
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: ContentUser.Equals(Object)
  fullName: System.Security.RightsManagement.ContentUser.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Security.RightsManagement.ContentUser&quot;></xref>等效于另一个给定实例。"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要比较相等的用户实例。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<> *1> 和<> *1> 都是相同的此用户和给定的用户; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.RightsManagement.ContentUser.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.ContentUser.GetHashCode
  id: GetHashCode
  parent: System.Security.RightsManagement.ContentUser
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: ContentUser.GetHashCode()
  fullName: System.Security.RightsManagement.ContentUser.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "返回计算所得的哈希代码基于用户<> *1> 和<> *1>。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "从用户计算的哈希代码<> *1> 和<> *1>。"
  overload: System.Security.RightsManagement.ContentUser.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.ContentUser.IsAuthenticated
  id: IsAuthenticated
  parent: System.Security.RightsManagement.ContentUser
  langs:
  - csharp
  name: IsAuthenticated()
  nameWithType: ContentUser.IsAuthenticated()
  fullName: System.Security.RightsManagement.ContentUser.IsAuthenticated()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "返回一个值，该值指示是否对用户当前身份验证。"
  remarks: "给定的用户<xref:System.Security.RightsManagement.ContentUser.Name%2A>进行身份验证基于给定<xref:System.Security.RightsManagement.ContentUser.AuthenticationType%2A>.</xref:System.Security.RightsManagement.ContentUser.AuthenticationType%2A> </xref:System.Security.RightsManagement.ContentUser.Name%2A>       用户已经过身份验证并 IsAuthenticated 后`true`，用户对话框并提示确认创建一种<xref:System.Security.RightsManagement.SecureEnvironment>。</xref:System.Security.RightsManagement.SecureEnvironment>时不再显示身份验证"
  syntax:
    content: public bool IsAuthenticated ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果用户当前已验证身份;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。  默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>直到身份验证。"
  overload: System.Security.RightsManagement.ContentUser.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.ContentUser.Name
  id: Name
  parent: System.Security.RightsManagement.ContentUser
  langs:
  - csharp
  name: Name
  nameWithType: ContentUser.Name
  fullName: System.Security.RightsManagement.ContentUser.Name
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取指定的用户或组名称&lt;xref:System.Security.RightsManagement.ContentUser.%23ctor%2A&gt;构造函数。"
  syntax:
    content: public string Name { get; }
    return:
      type: System.String
      description: "指定到的用户或组名称&lt;xref:System.Security.RightsManagement.ContentUser.%23ctor%2A&gt;构造函数。"
  overload: System.Security.RightsManagement.ContentUser.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Security.RightsManagement.ContentUser.OwnerUser
  id: OwnerUser
  parent: System.Security.RightsManagement.ContentUser
  langs:
  - csharp
  name: OwnerUser
  nameWithType: ContentUser.OwnerUser
  fullName: System.Security.RightsManagement.ContentUser.OwnerUser
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Security.RightsManagement
  summary: "获取&quot;所有者&quot;的实例<xref href=&quot;System.Security.RightsManagement.ContentUser&quot;></xref>角色。"
  remarks: "OwnerUser 具有<xref:System.Security.RightsManagement.ContentUser.AuthenticationType%2A>&quot;内部&quot;和<xref:System.Security.RightsManagement.ContentUser.Name%2A>&quot;所有者&quot;。</xref:System.Security.RightsManagement.ContentUser.Name%2A> </xref:System.Security.RightsManagement.ContentUser.AuthenticationType%2A>       服务器端模板使用 OwnerUser 来创建受保护的文档时向提供特殊权限的内容的作者或发布者。"
  syntax:
    content: public static System.Security.RightsManagement.ContentUser OwnerUser { get; }
    return:
      type: System.Security.RightsManagement.ContentUser
      description: "&quot;所有者&quot;的实例<xref href=&quot;System.Security.RightsManagement.ContentUser&quot;></xref>角色。"
  overload: System.Security.RightsManagement.ContentUser.OwnerUser*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.RightsManagement.ContentUser.#ctor(System.String,System.Security.RightsManagement.AuthenticationType)
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: ContentUser(String,AuthenticationType)
  nameWithType: ContentUser.ContentUser(String,AuthenticationType)
  fullName: System.Security.RightsManagement.ContentUser.ContentUser(String,AuthenticationType)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.RightsManagement.AuthenticationType
  parent: System.Security.RightsManagement
  isExternal: false
  name: AuthenticationType
  nameWithType: AuthenticationType
  fullName: System.Security.RightsManagement.AuthenticationType
- uid: System.Security.RightsManagement.ContentUser.AnyoneUser
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: AnyoneUser
  nameWithType: ContentUser.AnyoneUser
  fullName: System.Security.RightsManagement.ContentUser.AnyoneUser
- uid: System.Security.RightsManagement.ContentUser
  parent: System.Security.RightsManagement
  isExternal: false
  name: ContentUser
  nameWithType: ContentUser
  fullName: System.Security.RightsManagement.ContentUser
- uid: System.Security.RightsManagement.ContentUser.AuthenticationType
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: AuthenticationType
  nameWithType: ContentUser.AuthenticationType
  fullName: System.Security.RightsManagement.ContentUser.AuthenticationType
- uid: System.Security.RightsManagement.ContentUser.Equals(System.Object)
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: Equals(Object)
  nameWithType: ContentUser.Equals(Object)
  fullName: System.Security.RightsManagement.ContentUser.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.RightsManagement.ContentUser.GetHashCode
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: GetHashCode()
  nameWithType: ContentUser.GetHashCode()
  fullName: System.Security.RightsManagement.ContentUser.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.RightsManagement.ContentUser.IsAuthenticated
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: IsAuthenticated()
  nameWithType: ContentUser.IsAuthenticated()
  fullName: System.Security.RightsManagement.ContentUser.IsAuthenticated()
- uid: System.Security.RightsManagement.ContentUser.Name
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: Name
  nameWithType: ContentUser.Name
  fullName: System.Security.RightsManagement.ContentUser.Name
- uid: System.Security.RightsManagement.ContentUser.OwnerUser
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: OwnerUser
  nameWithType: ContentUser.OwnerUser
  fullName: System.Security.RightsManagement.ContentUser.OwnerUser
- uid: System.Security.RightsManagement.ContentUser.#ctor*
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: ContentUser
  nameWithType: ContentUser.ContentUser
- uid: System.Security.RightsManagement.ContentUser.AnyoneUser*
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: AnyoneUser
  nameWithType: ContentUser.AnyoneUser
- uid: System.Security.RightsManagement.ContentUser.AuthenticationType*
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: AuthenticationType
  nameWithType: ContentUser.AuthenticationType
- uid: System.Security.RightsManagement.ContentUser.Equals*
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: Equals
  nameWithType: ContentUser.Equals
- uid: System.Security.RightsManagement.ContentUser.GetHashCode*
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: GetHashCode
  nameWithType: ContentUser.GetHashCode
- uid: System.Security.RightsManagement.ContentUser.IsAuthenticated*
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: IsAuthenticated
  nameWithType: ContentUser.IsAuthenticated
- uid: System.Security.RightsManagement.ContentUser.Name*
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: Name
  nameWithType: ContentUser.Name
- uid: System.Security.RightsManagement.ContentUser.OwnerUser*
  parent: System.Security.RightsManagement.ContentUser
  isExternal: false
  name: OwnerUser
  nameWithType: ContentUser.OwnerUser
