### YamlMime:ManagedReference
items:
- uid: System.Collections.DictionaryBase
  id: DictionaryBase
  children:
  - System.Collections.DictionaryBase.#ctor
  - System.Collections.DictionaryBase.Clear
  - System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  - System.Collections.DictionaryBase.Count
  - System.Collections.DictionaryBase.Dictionary
  - System.Collections.DictionaryBase.GetEnumerator
  - System.Collections.DictionaryBase.InnerHashtable
  - System.Collections.DictionaryBase.OnClear
  - System.Collections.DictionaryBase.OnClearComplete
  - System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  - System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  - System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  - System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  - System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  - System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  - System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  - System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  - System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  name: DictionaryBase
  nameWithType: DictionaryBase
  fullName: System.Collections.DictionaryBase
  type: Class
  summary: "提供<xref uid=&quot;langword_csharp_abstract&quot; name=&quot;abstract&quot; href=&quot;&quot;></xref>键/值对的强类型集合的基类。"
  remarks: "（有关在 Visual Basic 中的每个） 的 C# 语言的 foreach 语句返回集合中元素的类型的对象。 由于 DictionaryBase 的每个元素是键/值对，元素类型不是键的类型或值的类型。 相反，元素类型是<xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry>       `foreach`语句是枚举数，仅允许从，不写入集合读取周围的包装器。      1> [!NOTE]&1;> 由于可以继承密钥并且不能更改其行为，使用比较可保证其绝对唯一性<xref:System.Type.Equals%2A>方法。</xref:System.Type.Equals%2A>"
  example:
  - "The following code example implements the DictionaryBase class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/t-system.collections.dic_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/t-system.collections.dic_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/t-system.collections.dic_1.vb)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class DictionaryBase : System.Collections.IDictionary
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.#ctor
  id: '#ctor'
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: DictionaryBase()
  nameWithType: DictionaryBase.DictionaryBase()
  fullName: System.Collections.DictionaryBase.DictionaryBase()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "初始化的新实例<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>类。"
  remarks: "此构造函数是 o （1） 操作。"
  syntax:
    content: protected DictionaryBase ();
    parameters: []
  overload: System.Collections.DictionaryBase.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.Clear
  id: Clear
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: Clear()
  nameWithType: DictionaryBase.Clear()
  fullName: System.Collections.DictionaryBase.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "清除的内容<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "<xref:System.Collections.DictionaryBase.Count%2A>是设置为零，并且集合的元素对其他对象的引用也被释放。</xref:System.Collections.DictionaryBase.Count%2A>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.DictionaryBase.Count%2A>。</xref:System.Collections.DictionaryBase.Count%2A>"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.DictionaryBase.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: DictionaryBase.CopyTo(Array,Int32)
  fullName: System.Collections.DictionaryBase.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "副本<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>元素的一维<xref:System.Array>的指定索引处。</xref:System.Array>"
  remarks: "元素被复制到<xref:System.Array>与在其中的枚举数循环访问<xref:System.Collections.DictionaryBase>.</xref:System.Collections.DictionaryBase>相同的顺序</xref:System.Array>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.DictionaryBase.Count%2A>。</xref:System.Collections.DictionaryBase.Count%2A>"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "一维<xref:System.Array>的目标<xref:System.Collections.DictionaryEntry>从复制的对象<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。</xref:System.Collections.DictionaryEntry> </xref:System.Array> <xref:System.Array>必须具有从零开始的索引。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "中的从零开始索引`array`复制开始处。"
  overload: System.Collections.DictionaryBase.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多维的。       -源中的元素的数目<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>大于从的可用空间<code>index</code>到目标的末尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "源类型<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>无法自动转换为目标的类型<code> array </code>。"
  platform:
  - net462
- uid: System.Collections.DictionaryBase.Count
  id: Count
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: Count
  nameWithType: DictionaryBase.Count
  fullName: System.Collections.DictionaryBase.Count
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取包含中的元素数<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "中包含的元素数<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  overload: System.Collections.DictionaryBase.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.Dictionary
  id: Dictionary
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: Dictionary
  nameWithType: DictionaryBase.Dictionary
  fullName: System.Collections.DictionaryBase.Dictionary
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取列表中包含的元素<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "仅在字典属性，返回的实例上但不是能在返回的实例调用 On * 方法<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A>       检索此属性的值是一个 o （1） 操作。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/p-system.collections.dic_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/p-system.collections.dic_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/p-system.collections.dic_1.vb)]"
  syntax:
    content: protected System.Collections.IDictionary Dictionary { get; }
    return:
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>表示<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例本身。</xref:System.Collections.IDictionary>"
  overload: System.Collections.DictionaryBase.Dictionary*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: DictionaryBase.GetEnumerator()
  fullName: System.Collections.DictionaryBase.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返回<xref:System.Collections.IDictionaryEnumerator>，它循环访问<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "`foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A>  在此位置上，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，则枚举数将失效且不可恢复，而且其行为是不确定。       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以锁定在整个枚举期间的集合。  若要允许访问集合以进行读取和写入的多个线程，则必须实现自己的同步。       此方法为 o （1） 运算。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/m-system.collections.dic_3_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/m-system.collections.dic_3_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/m-system.collections.dic_3_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "<xref:System.Collections.IDictionaryEnumerator>为<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.DictionaryBase.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.InnerHashtable
  id: InnerHashtable
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: InnerHashtable
  nameWithType: DictionaryBase.InnerHashtable
  fullName: System.Collections.DictionaryBase.InnerHashtable
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取列表中包含的元素<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在 InnerHashtable 属性返回的实例。</xref:System.Collections.DictionaryBase.Dictionary%2A>       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: protected System.Collections.Hashtable InnerHashtable { get; }
    return:
      type: System.Collections.Hashtable
      description: "A <xref href=&quot;System.Collections.Hashtable&quot;> </xref>表示<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例本身。"
  overload: System.Collections.DictionaryBase.InnerHashtable*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnClear
  id: OnClear
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnClear()
  nameWithType: DictionaryBase.OnClear()
  fullName: System.Collections.DictionaryBase.OnClear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "清除的内容之前执行其他自定义进程<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现需要通过执行一些操作之前清除集合的派生类中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  syntax:
    content: protected virtual void OnClear ();
    parameters: []
  overload: System.Collections.DictionaryBase.OnClear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnClearComplete
  id: OnClearComplete
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnClearComplete()
  nameWithType: DictionaryBase.OnClearComplete()
  fullName: System.Collections.DictionaryBase.OnClearComplete()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "在清除的内容之后执行其他自定义进程<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现需要通过执行一些操作之后清除集合的派生类中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  syntax:
    content: protected virtual void OnClearComplete ();
    parameters: []
  overload: System.Collections.DictionaryBase.OnClearComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  id: OnGet(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnGet(Object,Object)
  nameWithType: DictionaryBase.OnGet(Object,Object)
  fullName: System.Collections.DictionaryBase.OnGet(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取具有指定的键和值中的元素<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现返回`currentValue`。 它旨在由派生类检索指定的元素时执行其他操作中被重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  syntax:
    content: protected virtual object OnGet (object key, object currentValue);
    parameters:
    - id: key
      type: System.Object
      description: "要获取的元素的键。"
    - id: currentValue
      type: System.Object
      description: "与关联的元素的当前值`key`。"
    return:
      type: System.Object
      description: "<xref:System.Object>包含带有指定的键和值的元素。</xref:System.Object>"
  overload: System.Collections.DictionaryBase.OnGet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  id: OnInsert(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnInsert(Object,Object)
  nameWithType: DictionaryBase.OnInsert(Object,Object)
  fullName: System.Collections.DictionaryBase.OnInsert(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "在插入新元素插入之前执行其他自定义进程<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现需要通过执行一些操作，才能插入指定的元素的派生类中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/m-system.collections.dic_0_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/m-system.collections.dic_0_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/m-system.collections.dic_0_1.vb)]"
  syntax:
    content: protected virtual void OnInsert (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "要插入的元素的键。"
    - id: value
      type: System.Object
      description: "要插入的元素的值。"
  overload: System.Collections.DictionaryBase.OnInsert*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  id: OnInsertComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnInsertComplete(Object,Object)
  nameWithType: DictionaryBase.OnInsertComplete(Object,Object)
  fullName: System.Collections.DictionaryBase.OnInsertComplete(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "在插入新元素插入后执行其他自定义进程<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现需要通过之后插入指定的元素执行某些操作在派生类中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  syntax:
    content: protected virtual void OnInsertComplete (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "要插入的元素的键。"
    - id: value
      type: System.Object
      description: "要插入的元素的值。"
  overload: System.Collections.DictionaryBase.OnInsertComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  id: OnRemove(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnRemove(Object,Object)
  nameWithType: DictionaryBase.OnRemove(Object,Object)
  fullName: System.Collections.DictionaryBase.OnRemove(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "在删除中的元素之前执行其他自定义进程<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现需要由派生类中移除指定的元素之前执行一些操作中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/m-system.collections.dic_1_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/m-system.collections.dic_1_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/m-system.collections.dic_1_1.vb)]"
  syntax:
    content: protected virtual void OnRemove (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "要移除的元素的键。"
    - id: value
      type: System.Object
      description: "要移除的元素的值。"
  overload: System.Collections.DictionaryBase.OnRemove*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  id: OnRemoveComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnRemoveComplete(Object,Object)
  nameWithType: DictionaryBase.OnRemoveComplete(Object,Object)
  fullName: System.Collections.DictionaryBase.OnRemoveComplete(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "删除中的元素后执行其他自定义进程<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现需要通过执行一些操作删除指定的元素之后的派生类中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  syntax:
    content: protected virtual void OnRemoveComplete (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "要移除的元素的键。"
    - id: value
      type: System.Object
      description: "要移除的元素的值。"
  overload: System.Collections.DictionaryBase.OnRemoveComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  id: OnSet(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnSet(Object,Object,Object)
  nameWithType: DictionaryBase.OnSet(Object,Object,Object)
  fullName: System.Collections.DictionaryBase.OnSet(Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "在中设置一个值之前执行其他自定义进程<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现需要的设置指定的元素之前执行一些操作派生类中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/576c3070-5898-49fc-92c2-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/576c3070-5898-49fc-92c2-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/576c3070-5898-49fc-92c2-_1.vb)]"
  syntax:
    content: protected virtual void OnSet (object key, object oldValue, object newValue);
    parameters:
    - id: key
      type: System.Object
      description: "要查找的元素的键。"
    - id: oldValue
      type: System.Object
      description: "与关联的元素的旧值`key`。"
    - id: newValue
      type: System.Object
      description: "与关联的元素的新值`key`。"
  overload: System.Collections.DictionaryBase.OnSet*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  id: OnSetComplete(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnSetComplete(Object,Object,Object)
  nameWithType: DictionaryBase.OnSetComplete(Object,Object,Object)
  fullName: System.Collections.DictionaryBase.OnSetComplete(Object,Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "在中设置一个值后执行其他自定义进程<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>实例。"
  remarks: "此方法的默认实现需要的设置指定的元素后执行一些操作派生类中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  syntax:
    content: protected virtual void OnSetComplete (object key, object oldValue, object newValue);
    parameters:
    - id: key
      type: System.Object
      description: "要查找的元素的键。"
    - id: oldValue
      type: System.Object
      description: "与关联的元素的旧值`key`。"
    - id: newValue
      type: System.Object
      description: "与关联的元素的新值`key`。"
  overload: System.Collections.DictionaryBase.OnSetComplete*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  id: OnValidate(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: OnValidate(Object,Object)
  nameWithType: DictionaryBase.OnValidate(Object,Object)
  fullName: System.Collections.DictionaryBase.OnValidate(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "在验证具有指定的键和值的元素时，请执行其他自定义进程。"
  remarks: "此方法的默认实现需要由派生类时验证指定的元素执行某些操作中重写。       仅在返回的实例上调用 On * 方法<xref:System.Collections.DictionaryBase.Dictionary%2A>属性，但不是能在返回的实例<xref:System.Collections.DictionaryBase.InnerHashtable%2A>属性。</xref:System.Collections.DictionaryBase.InnerHashtable%2A> </xref:System.Collections.DictionaryBase.Dictionary%2A>       此方法的默认实现是一个 o （1） 操作。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/m-system.collections.dic_2_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/m-system.collections.dic_2_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/m-system.collections.dic_2_1.vb)]"
  syntax:
    content: protected virtual void OnValidate (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "要验证的元素的键。"
    - id: value
      type: System.Object
      description: "要验证的元素的值。"
  overload: System.Collections.DictionaryBase.OnValidate*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: DictionaryBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取一个值，该值指示是否访问<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象已同步 （线程安全）。"
  remarks: "A<xref:System.Collections.DictionaryBase>不同步对象。</xref:System.Collections.DictionaryBase> 派生的类可以提供的同步的版本<xref:System.Collections.DictionaryBase>类使用<xref:System.Collections.ICollection.SyncRoot%2A>属性。</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.DictionaryBase>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cs[System.Collections.DictionaryBase#3](~/add/codesnippet/csharp/f850b608-c07e-40f9-af58-_1.cs)]\n [!code-cpp[System.Collections.DictionaryBase#3](~/add/codesnippet/cpp/f850b608-c07e-40f9-af58-_1.cpp)]\n [!code-vb[System.Collections.DictionaryBase#3](~/add/codesnippet/visualbasic/f850b608-c07e-40f9-af58-_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果访问<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象已同步 （线程安全）; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: DictionaryBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取可以用于对访问进行同步的对象<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象。"
  remarks: "派生的类可以提供自己的同步的版本<xref:System.Collections.DictionaryBase>类使用<xref:System.Collections.ICollection.SyncRoot%2A>属性。</xref:System.Collections.ICollection.SyncRoot%2A> </xref:System.Collections.DictionaryBase> 同步代码必须在执行操作<xref:System.Collections.ICollection.SyncRoot%2A>属性<xref:System.Collections.DictionaryBase>对象，不是直接对<xref:System.Collections.DictionaryBase>对象。</xref:System.Collections.DictionaryBase> </xref:System.Collections.DictionaryBase> </xref:System.Collections.ICollection.SyncRoot%2A> 这可确保正确地执行操作的从其他对象派生的集合。 具体地说，这样可保持正确的同步，与可能同时对修改其他线程<xref:System.Collections.DictionaryBase>对象。</xref:System.Collections.DictionaryBase>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.ICollection.SyncRoot%2A> property during the entire enumeration.  \n  \n [!code-cs[System.Collections.DictionaryBase#3](~/add/codesnippet/csharp/86708232-6546-45cc-abc0-_1.cs)]\n [!code-cpp[System.Collections.DictionaryBase#3](~/add/codesnippet/cpp/86708232-6546-45cc-abc0-_1.cpp)]\n [!code-vb[System.Collections.DictionaryBase#3](~/add/codesnippet/visualbasic/86708232-6546-45cc-abc0-_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "可以用于对访问进行同步的对象<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象。"
  overload: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  id: System#Collections#IDictionary#Add(System.Object,System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "添加一个带有指定的键和值转换为元素<xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>。"
  remarks: "具有其状态和其哈希代码值之间没有关联的对象通常不应作为键。 例如，<xref:System.String>对象要优于<xref:System.Text.StringBuilder>作为键使用的对象。</xref:System.Text.StringBuilder> </xref:System.String>       你还可以使用<xref:System.Collections.IDictionary.Item%2A>中不存在要添加新元素的键的值设置属性<xref:System.Collections.DictionaryBase>; 例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue`。</xref:System.Collections.DictionaryBase> </xref:System.Collections.IDictionary.Item%2A> 但是，如果指定的键已存在于<xref:System.Collections.DictionaryBase>，则设置<xref:System.Collections.IDictionary.Item%2A>属性将会覆盖旧值。</xref:System.Collections.IDictionary.Item%2A> </xref:System.Collections.DictionaryBase> 与此相反，<xref:System.Collections.IDictionary.Add%2A>方法不会修改现有元素。</xref:System.Collections.IDictionary.Add%2A>       此方法为 o （1） 运算。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/c65f1d46-c6ba-40bd-bf67-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/c65f1d46-c6ba-40bd-bf67-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/c65f1d46-c6ba-40bd-bf67-_1.vb)]"
  syntax:
    content: void IDictionary.Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "要添加的元素的键。"
    - id: value
      type: System.Object
      description: "要添加的元素的值。"
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中已存在具有相同键的元素<xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>是只读的。       -或- <xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>具有固定的大小。"
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  id: System#Collections#IDictionary#Contains(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Contains(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Contains(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "确定是否<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>包含特定键。"
  remarks: "此方法为 o （1） 运算。       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`key`以确定是否`item`存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`key`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/c59cd535-1a58-4e00-98b8-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/c59cd535-1a58-4e00-98b8-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/c59cd535-1a58-4e00-98b8-_1.vb)]"
  syntax:
    content: bool IDictionary.Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要查找中的键<xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>包含具有指定的元素键; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  id: System#Collections#IDictionary#IsFixedSize
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsFixedSize
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsFixedSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象具有固定的大小。"
  remarks: "具有固定大小的集合不允许添加或移除元素后集合创建后，但允许修改现有元素。       具有固定大小的集合是只是一个集合的包装器防止添加和移除元素;因此，如果对基础集合，包括添加或移除元素，进行更改的固定大小的集合将反映这些更改。       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: bool System.Collections.IDictionary.IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象具有固定大小; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  id: System#Collections#IDictionary#IsReadOnly
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsReadOnly
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsReadOnly
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象是只读的。"
  remarks: "集合是只读的不允许添加、 移除或修改元素的集合在创建后。       集合是只读的是只是一个集合与防止集合; 进行修改的包装因此，如果对基础集合进行更改，只读集合将反映这些更改。       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: bool System.Collections.IDictionary.IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象是只读的; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  id: System#Collections#IDictionary#Item(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Item(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Item(Object)
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取或设置与指定键关联的值。"
  remarks: "此属性提供能够通过使用以下语法访问集合中的特定元素︰ `myCollection[key]`。       你还可以使用<xref:System.Collections.IDictionary.Item%2A>中不存在要添加新元素的键的值设置属性<xref:System.Collections.DictionaryBase>; 例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue`。</xref:System.Collections.DictionaryBase> </xref:System.Collections.IDictionary.Item%2A> 但是，如果指定的键已存在于<xref:System.Collections.DictionaryBase>，则设置<xref:System.Collections.IDictionary.Item%2A>属性将会覆盖旧值。</xref:System.Collections.IDictionary.Item%2A> </xref:System.Collections.DictionaryBase> 与此相反，<xref:System.Collections.IDictionary.Add%2A>方法不会修改现有元素。</xref:System.Collections.IDictionary.Add%2A>       检索此属性的值的运算 o （1）;设置属性也是 o （1） 运算。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/24404b11-3020-40f8-8aa1-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/24404b11-3020-40f8-8aa1-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/24404b11-3020-40f8-8aa1-_1.vb)]"
  syntax:
    content: object System.Collections.IDictionary.Item[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "密钥要获取或设置其值。"
    return:
      type: System.Object
      description: "与指定键关联的值。 如果未找到指定的键，尝试获取它将返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，并尝试将其设置创建一个使用指定的键的新元素。"
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "将属性设置和<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>是只读的。       -或-设置该属性， <code> key </code>不存在于集合中，与<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>具有固定的大小。"
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  id: System#Collections#IDictionary#Keys
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Keys
  nameWithType: DictionaryBase.System.Collections.IDictionary.Keys
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Keys
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取<xref:System.Collections.ICollection>对象，其中包含中的键<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象。</xref:System.Collections.ICollection>"
  remarks: "中的键的顺序<xref:System.Collections.ICollection>对象未指定，但它是中的关联值顺序相同<xref:System.Collections.ICollection>返回对象<xref:System.Collections.IDictionary.Values%2A>属性。</xref:System.Collections.IDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       返回<xref:System.Collections.ICollection>不是静态的副本; 相反，<xref:System.Collections.ICollection>引用回原始中的键<xref:System.Collections.DictionaryBase>对象。</xref:System.Collections.DictionaryBase> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> 因此，更改为<xref:System.Collections.DictionaryBase>继续才会反映在返回<xref:System.Collections.ICollection>。</xref:System.Collections.ICollection> </xref:System.Collections.DictionaryBase>       检索此属性的值是一个 o （1） 操作。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/55fc7d60-7b22-451a-9b28-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/55fc7d60-7b22-451a-9b28-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/55fc7d60-7b22-451a-9b28-_1.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>对象，其中包含中的键<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象。</xref:System.Collections.ICollection>"
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  id: System#Collections#IDictionary#Remove(System.Object)
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Remove(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Remove(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "移除带有指定键的元素<xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>。"
  remarks: "如果<xref:System.Collections.DictionaryBase>不具有指定键，包含的元素<xref:System.Collections.DictionaryBase>保持不变。</xref:System.Collections.DictionaryBase> </xref:System.Collections.DictionaryBase> 不引发异常。       此方法为 o （1） 运算。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/ce3b6ffc-125d-4340-aa5a-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/ce3b6ffc-125d-4340-aa5a-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/ce3b6ffc-125d-4340-aa5a-_1.vb)]"
  syntax:
    content: void IDictionary.Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要移除的元素的键。"
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "<xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>是只读的。       -或- <xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>具有固定的大小。"
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  id: System#Collections#IDictionary#Values
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IDictionary.Values
  nameWithType: DictionaryBase.System.Collections.IDictionary.Values
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Values
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "获取<xref:System.Collections.ICollection>包含中的值的对象<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象。</xref:System.Collections.ICollection>"
  remarks: "中的值的顺序<xref:System.Collections.ICollection>对象未指定，但它是中的关联键顺序相同<xref:System.Collections.ICollection>返回对象<xref:System.Collections.IDictionary.Keys%2A>属性。</xref:System.Collections.IDictionary.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       返回<xref:System.Collections.ICollection>不是静态的副本; 相反，<xref:System.Collections.ICollection>引用回原来的值<xref:System.Collections.DictionaryBase>对象。</xref:System.Collections.DictionaryBase> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection> 因此，更改为<xref:System.Collections.DictionaryBase>继续才会反映在返回<xref:System.Collections.ICollection>。</xref:System.Collections.ICollection> </xref:System.Collections.DictionaryBase>       检索此属性的值是一个 o （1） 操作。"
  example:
  - "The following code example implements the <xref:System.Collections.DictionaryBase> class and uses that implementation to create a dictionary of <xref:System.String> keys and values that have a <xref:System.String.Length%2A> property of 5 characters or less.  \n  \n [!code-cpp[System.Collections.DictionaryBase#1](~/add/codesnippet/cpp/48c1eb68-69bc-40ec-afd8-_1.cpp)]\n [!code-cs[System.Collections.DictionaryBase#1](~/add/codesnippet/csharp/48c1eb68-69bc-40ec-afd8-_1.cs)]\n [!code-vb[System.Collections.DictionaryBase#1](~/add/codesnippet/visualbasic/48c1eb68-69bc-40ec-afd8-_1.vb)]"
  syntax:
    content: System.Collections.ICollection System.Collections.IDictionary.Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>包含中的值的对象<xref href=&quot;System.Collections.DictionaryBase&quot;></xref>对象。</xref:System.Collections.ICollection>"
  overload: System.Collections.DictionaryBase.System#Collections#IDictionary#Values*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.DictionaryBase
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Collections
  summary: "返回<xref:System.Collections.IEnumerator>，它循环访问<xref href=&quot;System.Collections.DictionaryBase&quot;> </xref>。</xref:System.Collections.IEnumerator>"
  remarks: "`foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。 因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A> 在此位置，调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，枚举数将失效下, 一个调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>到 如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       此方法为 o （1） 运算。"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.DictionaryBase&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Collections.DictionaryBase.#ctor
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: DictionaryBase()
  nameWithType: DictionaryBase.DictionaryBase()
  fullName: System.Collections.DictionaryBase.DictionaryBase()
- uid: System.Collections.DictionaryBase.Clear
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Clear()
  nameWithType: DictionaryBase.Clear()
  fullName: System.Collections.DictionaryBase.Clear()
- uid: System.Collections.DictionaryBase.CopyTo(System.Array,System.Int32)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: DictionaryBase.CopyTo(Array,Int32)
  fullName: System.Collections.DictionaryBase.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.DictionaryBase.Count
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Count
  nameWithType: DictionaryBase.Count
  fullName: System.Collections.DictionaryBase.Count
- uid: System.Collections.DictionaryBase.Dictionary
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Dictionary
  nameWithType: DictionaryBase.Dictionary
  fullName: System.Collections.DictionaryBase.Dictionary
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Collections.DictionaryBase.GetEnumerator
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: GetEnumerator()
  nameWithType: DictionaryBase.GetEnumerator()
  fullName: System.Collections.DictionaryBase.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.DictionaryBase.InnerHashtable
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: InnerHashtable
  nameWithType: DictionaryBase.InnerHashtable
  fullName: System.Collections.DictionaryBase.InnerHashtable
- uid: System.Collections.Hashtable
  parent: System.Collections
  isExternal: false
  name: Hashtable
  nameWithType: Hashtable
  fullName: System.Collections.Hashtable
- uid: System.Collections.DictionaryBase.OnClear
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnClear()
  nameWithType: DictionaryBase.OnClear()
  fullName: System.Collections.DictionaryBase.OnClear()
- uid: System.Collections.DictionaryBase.OnClearComplete
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnClearComplete()
  nameWithType: DictionaryBase.OnClearComplete()
  fullName: System.Collections.DictionaryBase.OnClearComplete()
- uid: System.Collections.DictionaryBase.OnGet(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnGet(Object,Object)
  nameWithType: DictionaryBase.OnGet(Object,Object)
  fullName: System.Collections.DictionaryBase.OnGet(Object,Object)
- uid: System.Collections.DictionaryBase.OnInsert(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnInsert(Object,Object)
  nameWithType: DictionaryBase.OnInsert(Object,Object)
  fullName: System.Collections.DictionaryBase.OnInsert(Object,Object)
- uid: System.Collections.DictionaryBase.OnInsertComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnInsertComplete(Object,Object)
  nameWithType: DictionaryBase.OnInsertComplete(Object,Object)
  fullName: System.Collections.DictionaryBase.OnInsertComplete(Object,Object)
- uid: System.Collections.DictionaryBase.OnRemove(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnRemove(Object,Object)
  nameWithType: DictionaryBase.OnRemove(Object,Object)
  fullName: System.Collections.DictionaryBase.OnRemove(Object,Object)
- uid: System.Collections.DictionaryBase.OnRemoveComplete(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnRemoveComplete(Object,Object)
  nameWithType: DictionaryBase.OnRemoveComplete(Object,Object)
  fullName: System.Collections.DictionaryBase.OnRemoveComplete(Object,Object)
- uid: System.Collections.DictionaryBase.OnSet(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnSet(Object,Object,Object)
  nameWithType: DictionaryBase.OnSet(Object,Object,Object)
  fullName: System.Collections.DictionaryBase.OnSet(Object,Object,Object)
- uid: System.Collections.DictionaryBase.OnSetComplete(System.Object,System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnSetComplete(Object,Object,Object)
  nameWithType: DictionaryBase.OnSetComplete(Object,Object,Object)
  fullName: System.Collections.DictionaryBase.OnSetComplete(Object,Object,Object)
- uid: System.Collections.DictionaryBase.OnValidate(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnValidate(Object,Object)
  nameWithType: DictionaryBase.OnValidate(Object,Object)
  fullName: System.Collections.DictionaryBase.OnValidate(Object,Object)
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: DictionaryBase.System.Collections.ICollection.IsSynchronized
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.IsSynchronized
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: DictionaryBase.System.Collections.ICollection.SyncRoot
  fullName: System.Collections.DictionaryBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add(System.Object,System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Add(Object,Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Add(Object,Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Add(Object,Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains(System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Contains(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Contains(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Contains(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsFixedSize
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsReadOnly
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item(System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Item(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Item(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Item(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: DictionaryBase.System.Collections.IDictionary.Keys
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove(System.Object)
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Remove(Object)
  nameWithType: DictionaryBase.System.Collections.IDictionary.Remove(Object)
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Remove(Object)
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Values
  nameWithType: DictionaryBase.System.Collections.IDictionary.Values
  fullName: System.Collections.DictionaryBase.System.Collections.IDictionary.Values
- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.DictionaryBase.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.DictionaryBase.#ctor*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: DictionaryBase
  nameWithType: DictionaryBase.DictionaryBase
- uid: System.Collections.DictionaryBase.Clear*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Clear
  nameWithType: DictionaryBase.Clear
- uid: System.Collections.DictionaryBase.CopyTo*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: CopyTo
  nameWithType: DictionaryBase.CopyTo
- uid: System.Collections.DictionaryBase.Count*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Count
  nameWithType: DictionaryBase.Count
- uid: System.Collections.DictionaryBase.Dictionary*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: Dictionary
  nameWithType: DictionaryBase.Dictionary
- uid: System.Collections.DictionaryBase.GetEnumerator*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: GetEnumerator
  nameWithType: DictionaryBase.GetEnumerator
- uid: System.Collections.DictionaryBase.InnerHashtable*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: InnerHashtable
  nameWithType: DictionaryBase.InnerHashtable
- uid: System.Collections.DictionaryBase.OnClear*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnClear
  nameWithType: DictionaryBase.OnClear
- uid: System.Collections.DictionaryBase.OnClearComplete*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnClearComplete
  nameWithType: DictionaryBase.OnClearComplete
- uid: System.Collections.DictionaryBase.OnGet*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnGet
  nameWithType: DictionaryBase.OnGet
- uid: System.Collections.DictionaryBase.OnInsert*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnInsert
  nameWithType: DictionaryBase.OnInsert
- uid: System.Collections.DictionaryBase.OnInsertComplete*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnInsertComplete
  nameWithType: DictionaryBase.OnInsertComplete
- uid: System.Collections.DictionaryBase.OnRemove*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnRemove
  nameWithType: DictionaryBase.OnRemove
- uid: System.Collections.DictionaryBase.OnRemoveComplete*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnRemoveComplete
  nameWithType: DictionaryBase.OnRemoveComplete
- uid: System.Collections.DictionaryBase.OnSet*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnSet
  nameWithType: DictionaryBase.OnSet
- uid: System.Collections.DictionaryBase.OnSetComplete*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnSetComplete
  nameWithType: DictionaryBase.OnSetComplete
- uid: System.Collections.DictionaryBase.OnValidate*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: OnValidate
  nameWithType: DictionaryBase.OnValidate
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#IsSynchronized*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: DictionaryBase.System.Collections.ICollection.IsSynchronized
- uid: System.Collections.DictionaryBase.System#Collections#ICollection#SyncRoot*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: DictionaryBase.System.Collections.ICollection.SyncRoot
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Add*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Add
  nameWithType: DictionaryBase.System.Collections.IDictionary.Add
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Contains*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Contains
  nameWithType: DictionaryBase.System.Collections.IDictionary.Contains
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsFixedSize*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.IsFixedSize
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsFixedSize
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#IsReadOnly*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.IsReadOnly
  nameWithType: DictionaryBase.System.Collections.IDictionary.IsReadOnly
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Item*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Item
  nameWithType: DictionaryBase.System.Collections.IDictionary.Item
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Keys*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Keys
  nameWithType: DictionaryBase.System.Collections.IDictionary.Keys
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Remove*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Remove
  nameWithType: DictionaryBase.System.Collections.IDictionary.Remove
- uid: System.Collections.DictionaryBase.System#Collections#IDictionary#Values*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IDictionary.Values
  nameWithType: DictionaryBase.System.Collections.IDictionary.Values
- uid: System.Collections.DictionaryBase.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.DictionaryBase
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: DictionaryBase.System.Collections.IEnumerable.GetEnumerator
