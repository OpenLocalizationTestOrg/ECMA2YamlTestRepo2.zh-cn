### YamlMime:ManagedReference
items:
- uid: System.Data.SqlClient.SqlDataAdapter
  id: SqlDataAdapter
  children:
  - System.Data.SqlClient.SqlDataAdapter.#ctor
  - System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)
  - System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  - System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)
  - System.Data.SqlClient.SqlDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.SqlClient.SqlDataAdapter.ClearBatch
  - System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.SqlClient.SqlDataAdapter.DeleteCommand
  - System.Data.SqlClient.SqlDataAdapter.ExecuteBatch
  - System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.SqlClient.SqlDataAdapter.InitializeBatching
  - System.Data.SqlClient.SqlDataAdapter.InsertCommand
  - System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.SqlClient.SqlDataAdapter.RowUpdated
  - System.Data.SqlClient.SqlDataAdapter.RowUpdating
  - System.Data.SqlClient.SqlDataAdapter.SelectCommand
  - System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone
  - System.Data.SqlClient.SqlDataAdapter.TerminateBatching
  - System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize
  - System.Data.SqlClient.SqlDataAdapter.UpdateCommand
  langs:
  - csharp
  name: SqlDataAdapter
  nameWithType: SqlDataAdapter
  fullName: System.Data.SqlClient.SqlDataAdapter
  type: Class
  summary: "表示一组数据命令和用于填充的数据库连接<xref href=&quot;System.Data.DataSet&quot;></xref>和更新 SQL Server 数据库。 此类不能被继承。"
  remarks: "SqlDataAdapter，用作之间的桥梁<xref:System.Data.DataSet>和用于检索和保存数据的 SQL Server。</xref:System.Data.DataSet> SqlDataAdapter 通过映射提供此桥<xref:System.Data.Common.DbDataAdapter.Fill%2A>的更改中的数据<xref:System.Data.DataSet>以匹配数据源中的数据和<xref:System.Data.Common.DbDataAdapter.Update%2A>，其中更改要匹配中的数据的数据源中的数据<xref:System.Data.DataSet>，对数据源使用相应的 TRANSACT-SQL 语句。</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 在行的基础上执行更新。 对于每个插入、 修改和删除的行，<xref:System.Data.Common.DbDataAdapter.Update%2A>方法确定已对其执行的更改的类型 (`Insert`， `Update`，或`Delete`)。</xref:System.Data.Common.DbDataAdapter.Update%2A> 具体取决于的更改，类型`Insert`， `Update`，或`Delete`命令模板执行传播到数据源已修改的行。 当 SqlDataAdapter 填充<xref:System.Data.DataSet>，它创建必要的表和列返回的数据如果不存在。</xref:System.Data.DataSet> 但是，主键信息除非不包含隐式创建的架构中的<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性设置为<xref:System.Data.MissingSchemaAction>。</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 你还可以创建的架构 SqlDataAdapter <xref:System.Data.DataSet>，包括主键信息、 使用数据填充它之前`FillSchema`。</xref:System.Data.DataSet> 有关详细信息，请参阅[将现有约束添加到数据集](~/add/includes/ajax-current-ext-md.md)。       结合使用 SqlDataAdapter<xref:System.Data.SqlClient.SqlConnection>和<xref:System.Data.SqlClient.SqlCommand>以连接到 SQL Server 数据库时提高性能。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlConnection>      1> [!NOTE]&1;> 如果使用的 SQL Server 存储过程来编辑或删除数据使用`DataAdapter`，请确保不要在存储的过程定义中使用 SET NOCOUNT ON。 这将导致受影响的行返回数为零，这`DataAdapter`将解释为并发冲突。 在这种情况，<xref:System.Data.DBConcurrencyException>将引发。</xref:System.Data.DBConcurrencyException>       此外包括 SqlDataAdapter <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>， <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>， <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>， <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>，和<xref:System.Data.Common.DataAdapter.TableMappings%2A>属性以便于加载和更新的数据。</xref:System.Data.Common.DataAdapter.TableMappings%2A> </xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>       当创建 SqlDataAdapter 的实例时，读/写属性设置为初始值。 有关这些值的列表，请参阅 SqlDataAdapter 构造函数。       <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>， <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A>，和<xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>是泛型的模板，将自动填入从每个已修改的行的各个值通过参数机制。</xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>       为你传播到数据源每个列<xref:System.Data.Common.DbDataAdapter.Update%2A>，应将参数添加到`InsertCommand`， `UpdateCommand`，或`DeleteCommand`。</xref:System.Data.Common.DbDataAdapter.Update%2A> <xref:System.Data.Common.DbParameter.SourceColumn%2A>属性<xref:System.Data.Common.DbParameter>对象应设置为列的名称。</xref:System.Data.Common.DbParameter> </xref:System.Data.Common.DbParameter.SourceColumn%2A> 此设置指示参数的值未手动设置，但获取自当前处理的行中的特定列。      1> [!NOTE]&1;><xref:System.InvalidOperationException>如果，会发生<xref:System.Data.Common.DbDataAdapter.Fill%2A>调用方法和表包含在客户端计算机不可用的用户定义的类型。</xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.InvalidOperationException> 有关详细信息，请参阅[创建和使用用户定义类型](http://go.microsoft.com/fwlink/?LinkId=139492)SQL Server 联机丛书中。"
  example:
  - "The following example uses the <xref:System.Data.SqlClient.SqlCommand>, SqlDataAdapter, and <xref:System.Data.SqlClient.SqlConnection> to select records from a database and populate a <xref:System.Data.DataSet> with the selected rows. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \n  \n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.sqlclient._14_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.sqlclient._14_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowUpdated")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.SqlDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.SqlDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class SqlDataAdapter : System.Data.Common.DbDataAdapter, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  - System.Data.Common.DbDataAdapter
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: SqlDataAdapter()
  nameWithType: SqlDataAdapter.SqlDataAdapter()
  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref>类。"
  remarks: "实例时<xref:System.Data.SqlClient.SqlDataAdapter>创建以下读/写属性设置为以下的初始值。</xref:System.Data.SqlClient.SqlDataAdapter>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以更改任何通过单独属性调用这些属性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._37_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter.SqlDataAdapter Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._37_1.cs)]"
  syntax:
    content: public SqlDataAdapter ();
    parameters: []
  overload: System.Data.SqlClient.SqlDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)
  id: '#ctor(System.Data.SqlClient.SqlCommand)'
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: SqlDataAdapter(SqlCommand)
  nameWithType: SqlDataAdapter.SqlDataAdapter(SqlCommand)
  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(SqlCommand)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref>使用指定的类<xref href=&quot;System.Data.SqlClient.SqlCommand&quot;></xref>作为<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>属性。</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>"
  remarks: "此实现的<xref:System.Data.SqlClient.SqlDataAdapter>构造函数集<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>属性中指定的值`selectCommand`参数。</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter>       实例时<xref:System.Data.SqlClient.SqlDataAdapter>创建以下读/写属性设置为以下的初始值。</xref:System.Data.SqlClient.SqlDataAdapter>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以更改任何通过单独属性调用这些属性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>       当<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>（或任何其他命令属性） 分配到以前创建<xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlCommand>不克隆。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>保留以前创建的引用<xref:System.Data.SqlClient.SqlCommand>对象。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.  \n  \n [!code-cs[Classic WebData SqlDataAdapter.SqlDataAdapter1 Example#1](~/add/codesnippet/csharp/9d168a15-4587-40fd-a80e-_1.cs)]\n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter1 Example#1](~/add/codesnippet/visualbasic/9d168a15-4587-40fd-a80e-_1.vb)]"
  syntax:
    content: public SqlDataAdapter (System.Data.SqlClient.SqlCommand selectCommand);
    parameters:
    - id: selectCommand
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>的 Transact SQL SELECT 语句或存储的过程并被设置为<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>属性<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref>。</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>"
  overload: System.Data.SqlClient.SqlDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  id: '#ctor(System.String,System.Data.SqlClient.SqlConnection)'
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: SqlDataAdapter(String,SqlConnection)
  nameWithType: SqlDataAdapter.SqlDataAdapter(String,SqlConnection)
  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(String,SqlConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref>类，该类具有<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>和<xref href=&quot;System.Data.SqlClient.SqlConnection&quot;></xref>对象。</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>"
  remarks: "此实现的<xref:System.Data.SqlClient.SqlDataAdapter>打开和关闭<xref:System.Data.SqlClient.SqlConnection>如果尚未打开。</xref:System.Data.SqlClient.SqlConnection> </xref:System.Data.SqlClient.SqlDataAdapter> 这很有用的应用程序必须调用中<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法为两个或多个<xref:System.Data.SqlClient.SqlDataAdapter>对象。</xref:System.Data.SqlClient.SqlDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 如果<xref:System.Data.SqlClient.SqlConnection>是已打开，你必须明确地调用**关闭**或**释放**关闭它。</xref:System.Data.SqlClient.SqlConnection>       实例时<xref:System.Data.SqlClient.SqlDataAdapter>创建以下读/写属性设置为以下的初始值。</xref:System.Data.SqlClient.SqlDataAdapter>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      你可以更改通过单独属性调用这些属性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter3 Example#1](~/add/codesnippet/visualbasic/fa8f1b27-cd12-4c35-bbde-_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter.SqlDataAdapter3 Example#1](~/add/codesnippet/csharp/fa8f1b27-cd12-4c35-bbde-_1.cs)]"
  syntax:
    content: public SqlDataAdapter (string selectCommandText, System.Data.SqlClient.SqlConnection selectConnection);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "A<xref:System.String>即 TRANSACT-SQL SELECT 语句或存储的过程用于<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>属性<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref>。</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> </xref:System.String>"
    - id: selectConnection
      type: System.Data.SqlClient.SqlConnection
      description: "A <xref href=&quot;System.Data.SqlClient.SqlConnection&quot;> </xref>表示的连接。 如果你的连接字符串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，你可以使用<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>来传递用户 ID 和密码比更安全地将用户 ID 和密码指定为连接字符串中的文本。"
  overload: System.Data.SqlClient.SqlDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: SqlDataAdapter(String,String)
  nameWithType: SqlDataAdapter.SqlDataAdapter(String,String)
  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "初始化的新实例<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref>类，该类具有<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>和连接字符串。</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>"
  remarks: "此重载<xref:System.Data.SqlClient.SqlDataAdapter>构造函数使用`selectCommandText`参数设置<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>属性。</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A> </xref:System.Data.SqlClient.SqlDataAdapter> <xref:System.Data.SqlClient.SqlDataAdapter>将创建和维护与创建的连接`selectConnectionString`参数。</xref:System.Data.SqlClient.SqlDataAdapter>       实例时<xref:System.Data.SqlClient.SqlDataAdapter>创建以下读/写属性设置为以下的初始值。</xref:System.Data.SqlClient.SqlDataAdapter>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以更改任何通过单独属性调用这些属性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData SqlDataAdapter.SqlDataAdapter2 Example#1](~/add/codesnippet/visualbasic/m-system.data.sqlclient._6_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter.SqlDataAdapter2 Example#1](~/add/codesnippet/csharp/m-system.data.sqlclient._6_1.cs)]"
  syntax:
    content: public SqlDataAdapter (string selectCommandText, string selectConnectionString);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "A<xref:System.String>即 TRANSACT-SQL SELECT 语句或存储的过程用于<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*>属性<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;> </xref>。</xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand*> </xref:System.String>"
    - id: selectConnectionString
      type: System.String
      description: "连接字符串中。 如果你的连接字符串不使用<xref uid=&quot;langword_csharp_Integrated Security = true&quot; name=&quot;Integrated Security = true&quot; href=&quot;&quot;> </xref>，你可以使用&lt;xref:System.Data.SqlClient.SqlDataAdapter.%23ctor%2A&gt;和<xref href=&quot;System.Data.SqlClient.SqlCredential&quot;></xref>来传递用户 ID 和密码比更安全地将用户 ID 和密码指定为连接字符串中的文本。"
  overload: System.Data.SqlClient.SqlDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.AddToBatch(System.Data.IDbCommand)
  id: AddToBatch(System.Data.IDbCommand)
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: AddToBatch(IDbCommand)
  nameWithType: SqlDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.SqlClient.SqlDataAdapter.AddToBatch(IDbCommand)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override int AddToBatch (System.Data.IDbCommand command);
    parameters:
    - id: command
      type: System.Data.IDbCommand
      description: "要添加。"
    return:
      type: System.Int32
      description: "要添加。"
  overload: System.Data.SqlClient.SqlDataAdapter.AddToBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.ClearBatch
  id: ClearBatch
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: ClearBatch()
  nameWithType: SqlDataAdapter.ClearBatch()
  fullName: System.Data.SqlClient.SqlDataAdapter.ClearBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void ClearBatch ();
    parameters: []
  overload: System.Data.SqlClient.SqlDataAdapter.ClearBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: SqlDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "要添加。"
    - id: command
      type: System.Data.IDbCommand
      description: "要添加。"
    - id: statementType
      type: System.Data.StatementType
      description: "要添加。"
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "要添加。"
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "要添加。"
  overload: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: SqlDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "要添加。"
    - id: command
      type: System.Data.IDbCommand
      description: "要添加。"
    - id: statementType
      type: System.Data.StatementType
      description: "要添加。"
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "要添加。"
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "要添加。"
  overload: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: SqlDataAdapter.DeleteCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置的 TRANSACT-SQL 语句或存储的过程以从数据集中删除记录。"
  remarks: "期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>DeleteCommand 可以设置<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>属性，然后使用<xref:System.Data.SqlClient.SqlCommandBuilder>.</xref:System.Data.SqlClient.SqlCommandBuilder></xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>时自动生成</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然后，将不设置任何其他命令生成的<xref:System.Data.SqlClient.SqlCommandBuilder>.</xref:System.Data.SqlClient.SqlCommandBuilder> 此生成的逻辑需要要<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中存在的键列信息 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/add/includes/ajax-current-ext-md.md)。       当分配 DeleteCommand 到以前创建<xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlCommand>不克隆。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand> DeleteCommand 保留以前创建的引用<xref:System.Data.SqlClient.SqlCommand>对象。</xref:System.Data.SqlClient.SqlCommand>       为你传播到数据源每个列<xref:System.Data.Common.DbDataAdapter.Update%2A>，应将参数添加到`InsertCommand`， `UpdateCommand`，或`DeleteCommand`。</xref:System.Data.Common.DbDataAdapter.Update%2A> `SourceColumn`参数的属性应设置为列的名称。 这指示参数的值未手动设置，但获取自当前处理的行中的特定列。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and DeleteCommand properties. It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.  \n  \n [!code-vb[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._16_1.vb)]\n [!code-cs[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/csharp/p-system.data.sqlclient._16_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlCommand DeleteCommand { get; set; }
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>删除对应于数据库中的记录已删除的行中的<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.SqlClient.SqlDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch
  id: ExecuteBatch
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: ExecuteBatch()
  nameWithType: SqlDataAdapter.ExecuteBatch()
  fullName: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override int ExecuteBatch ();
    parameters: []
    return:
      type: System.Int32
      description: "要添加。"
  overload: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  id: GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: SqlDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(Int32,Int32)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override System.Data.IDataParameter GetBatchedParameter (int commandIdentifier, int parameterIndex);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "要添加。"
    - id: parameterIndex
      type: System.Int32
      description: "要添加。"
    return:
      type: System.Data.IDataParameter
      description: "要添加。"
  overload: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  id: GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: SqlDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override bool GetBatchedRecordsAffected (int commandIdentifier, out int recordsAffected, out Exception error);
    parameters:
    - id: commandIdentifier
      type: System.Int32
      description: "要添加。"
    - id: recordsAffected
      type: System.Int32
      description: "要添加。"
    - id: error
      type: System.Exception
      description: "要添加。"
    return:
      type: System.Boolean
      description: "要添加。"
  overload: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.InitializeBatching
  id: InitializeBatching
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: InitializeBatching()
  nameWithType: SqlDataAdapter.InitializeBatching()
  fullName: System.Data.SqlClient.SqlDataAdapter.InitializeBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void InitializeBatching ();
    parameters: []
  overload: System.Data.SqlClient.SqlDataAdapter.InitializeBatching*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: SqlDataAdapter.InsertCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置的 TRANSACT-SQL 语句或存储的过程以将新记录插入到数据源。"
  remarks: "期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>InsertCommand 可以设置<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>属性，然后使用<xref:System.Data.SqlClient.SqlCommandBuilder>.</xref:System.Data.SqlClient.SqlCommandBuilder></xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>时自动生成</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然后，将不设置任何其他命令生成的<xref:System.Data.SqlClient.SqlCommandBuilder>.</xref:System.Data.SqlClient.SqlCommandBuilder> 此生成的逻辑需要要<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中存在的键列信息 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/add/includes/ajax-current-ext-md.md)。       当分配 InsertCommand 到以前创建<xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlCommand>不克隆。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand> InsertCommand 保留以前创建的引用<xref:System.Data.SqlClient.SqlCommand>对象。</xref:System.Data.SqlClient.SqlCommand>       如果执行此命令返回行，这些行可以添加到<xref:System.Data.DataSet>具体取决于你如何设置**UpdatedRowSource**属性<xref:System.Data.SqlClient.SqlCommand>对象。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.DataSet>       为你传播到数据源每个列<xref:System.Data.Common.DbDataAdapter.Update%2A>，应将参数添加到`InsertCommand`， `UpdateCommand`，或`DeleteCommand`。</xref:System.Data.Common.DbDataAdapter.Update%2A> `SourceColumn`参数的属性应设置为列的名称。 这指示参数的值未手动设置，但获取自当前处理的行中的特定列。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, InsertCommand, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties. It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.  \n  \n [!code-vb[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._33_1.vb)]\n [!code-cs[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/csharp/p-system.data.sqlclient._33_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlCommand InsertCommand { get; set; }
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>将记录插入数据库中的新行对应<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.SqlClient.SqlDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: SqlDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "要添加。"
  overload: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: SqlDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "要添加。"
  overload: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.RowUpdated
  id: RowUpdated
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: RowUpdated
  nameWithType: SqlDataAdapter.RowUpdated
  fullName: System.Data.SqlClient.SqlDataAdapter.RowUpdated
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "期间出现<xref:System.Data.Common.DbDataAdapter.Update*>针对数据源执行命令后。</xref:System.Data.Common.DbDataAdapter.Update*> 尝试更新进行，因此，事件将激发。"
  remarks: "使用时<xref:System.Data.Common.DbDataAdapter.Update%2A>，有两个事件发生每个更新的数据行。</xref:System.Data.Common.DbDataAdapter.Update%2A> 执行的顺序，如下所示是︰ 1。  中的值<xref:System.Data.DataRow>移动到的参数值。</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  该命令执行。      4.  如果该命令设置为`FirstReturnedRecord`，第一个返回结果置于<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  如果有输出参数，请在放入<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>调用。</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows how to use both the <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> and RowUpdated events.  \n  \n The <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdating> event returns this output:  \n  \n event args: (command=System.Data.SqlClient.SqlCommand commandType=2 status=0)  \n  \n The RowUpdated event returns this output:  \n  \n event args: (command=System.Data.SqlClient.SqlCommand commandType=2 recordsAffected=1 row=System.Data.DataRow[37] status=0)  \n  \n [!code-vb[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._0_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.sqlclient._0_1.cs)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowUpdatedEventHandler RowUpdated;
    return:
      type: System.Data.SqlClient.SqlRowUpdatedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.RowUpdating
  id: RowUpdating
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: RowUpdating
  nameWithType: SqlDataAdapter.RowUpdating
  fullName: System.Data.SqlClient.SqlDataAdapter.RowUpdating
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "期间出现<xref:System.Data.Common.DbDataAdapter.Update*>针对数据源执行命令之前。</xref:System.Data.Common.DbDataAdapter.Update*> 尝试更新进行，因此，事件将激发。"
  remarks: "使用时<xref:System.Data.Common.DbDataAdapter.Update%2A>，有两个事件发生每个更新的数据行。</xref:System.Data.Common.DbDataAdapter.Update%2A> 执行的顺序，如下所示是︰ 1。  中的值<xref:System.Data.DataRow>移动到的参数值。</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  该命令执行。      4.  如果该命令设置为`FirstReturnedRecord`，第一个返回结果置于<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  如果有输出参数，请在放入<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>调用。</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows how to use both the RowUpdating and <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> events.  \n  \n The RowUpdating event returns this output:  \n  \n event args: (command=System.Data.SqlClient.SqlCommand commandType=2 status=0)  \n  \n The <xref:System.Data.SqlClient.SqlDataAdapter.RowUpdated> event returns this output:  \n  \n event args: (command=System.Data.SqlClient.SqlCommand commandType=2 recordsAffected=1 row=System.Data.DataRow[37] status=0)  \n  \n [!code-vb[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.sqlclient._1_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.sqlclient._1_1.cs)]"
  syntax:
    content: public event System.Data.SqlClient.SqlRowUpdatingEventHandler RowUpdating;
    return:
      type: System.Data.SqlClient.SqlRowUpdatingEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: SqlDataAdapter.SelectCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置的 TRANSACT-SQL 语句或存储的过程用于选择数据源中的记录。"
  remarks: "当分配 SelectCommand 到以前创建<xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlCommand>不克隆。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand> SelectCommand 保留以前创建的引用<xref:System.Data.SqlClient.SqlCommand>对象。</xref:System.Data.SqlClient.SqlCommand>       如果 SelectCommand 不返回任何行，没有表将添加到<xref:System.Data.DataSet>，并且不引发任何异常。</xref:System.Data.DataSet>"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the SelectCommand, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.UpdateCommand%2A>, and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties. It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.  \n  \n [!code-vb[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._23_1.vb)]\n [!code-cs[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/csharp/p-system.data.sqlclient._23_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlCommand SelectCommand { get; set; }
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Fill*>从放置中的数据库选择记录<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Fill*>"
  overload: System.Data.SqlClient.SqlDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "有关此成员的说明，请参阅<xref:System.Data.IDbDataAdapter.DeleteCommand*>。</xref:System.Data.IDbDataAdapter.DeleteCommand*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.SqlClient.SqlDataAdapter>实例被强制转换为<xref:System.Data.IDbDataAdapter>接口。</xref:System.Data.IDbDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>若要删除已删除的行在数据集中的数据源中的记录。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "有关此成员的说明，请参阅<xref:System.Data.IDbDataAdapter.InsertCommand*>。</xref:System.Data.IDbDataAdapter.InsertCommand*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.SqlClient.SqlDataAdapter>实例被强制转换为<xref:System.Data.IDbDataAdapter>接口。</xref:System.Data.IDbDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>以插入新行在数据集中的数据源中的记录。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "有关此成员的说明，请参阅<xref:System.Data.IDbDataAdapter.SelectCommand*>。</xref:System.Data.IDbDataAdapter.SelectCommand*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.SqlClient.SqlDataAdapter>实例被强制转换为<xref:System.Data.IDbDataAdapter>接口。</xref:System.Data.IDbDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>从放置在数据集中的数据源选择记录。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "有关此成员的说明，请参阅<xref:System.Data.IDbDataAdapter.UpdateCommand*>。</xref:System.Data.IDbDataAdapter.UpdateCommand*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.SqlClient.SqlDataAdapter>实例被强制转换为<xref:System.Data.IDbDataAdapter>接口。</xref:System.Data.IDbDataAdapter> </xref:System.Data.SqlClient.SqlDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref:System.Data.IdbCommand>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>以更新已修改的行在数据集中的数据源中的记录。</xref:System.Data.Common.DbDataAdapter.Update*> </xref:System.Data.IdbCommand>"
  overload: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: SqlDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "有关此成员的说明，请参阅<xref:System.ICloneable.Clone*>。</xref:System.ICloneable.Clone*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.SqlClient.SqlDataAdapter>实例被强制转换为<xref:System.ICloneable>接口。</xref:System.ICloneable> </xref:System.Data.SqlClient.SqlDataAdapter>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "当前实例副本的新对象。"
  overload: System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.TerminateBatching
  id: TerminateBatching
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: TerminateBatching()
  nameWithType: SqlDataAdapter.TerminateBatching()
  fullName: System.Data.SqlClient.SqlDataAdapter.TerminateBatching()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  syntax:
    content: protected override void TerminateBatching ();
    parameters: []
  overload: System.Data.SqlClient.SqlDataAdapter.TerminateBatching*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize
  id: UpdateBatchSize
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: UpdateBatchSize
  nameWithType: SqlDataAdapter.UpdateBatchSize
  fullName: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置每个往返中处理的行数，到服务器。"
  remarks: "获取或设置一个值，启用或禁用批处理支持，并指定可以在批处理中执行的命令数。       使用 UpdateBatchSize 属性使用从一种<xref:System.Data.DataSet>。</xref:System.Data.DataSet>更改更新数据源 这可以通过减少服务器的往返次数来提高应用程序性能。       执行极大的批处理会降低性能。 因此，你应进行测试以得到最佳的批大小设置之前实现应用程序。       <xref:System.ArgumentOutOfRangeException>如果的值设置为一个数字，将引发小于零。</xref:System.ArgumentOutOfRangeException>"
  syntax:
    content: public override int UpdateBatchSize { get; set; }
    return:
      type: System.Int32
      description: "要处理每个批的行数。       <table><thead><tr><th> 值是       </th><th> 效果       </th></tr></thead><tbody><tr><td> 0       </td><td> 批大小上没有任何限制...       </td></tr><tr><td> 1       </td><td> 禁用批量更新。       </td></tr><tr><td> &gt;1       </td><td> 一次使用的 UpdateBatchSize 操作批发送更改。       </td></tr></tbody></table>       所有命令时将此值设置为 1 以外的值，与都关联<xref href=&quot;System.Data.SqlClient.SqlDataAdapter&quot;></xref>必须具有其**UpdatedRowSource**属性设置为<xref uid=&quot;langword_csharp_None&quot; name=&quot;None&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_OutputParameters&quot; name=&quot;OutputParameters&quot; href=&quot;&quot;> </xref>。 否则引发异常。"
  overload: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize*
  exceptions: []
  platform:
  - net462
- uid: System.Data.SqlClient.SqlDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: SqlDataAdapter.UpdateCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.SqlClient
  summary: "获取或设置的 TRANSACT-SQL 语句或存储的过程用于更新数据源中的记录。"
  remarks: "期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>UpdateCommand 可以设置<xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>属性，然后使用<xref:System.Data.SqlClient.SqlCommandBuilder>.</xref:System.Data.SqlClient.SqlCommandBuilder></xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>时自动生成</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然后，将不设置任何其他命令生成的<xref:System.Data.SqlClient.SqlCommandBuilder>.</xref:System.Data.SqlClient.SqlCommandBuilder> 此生成的逻辑需要要<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中存在的键列信息 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/add/includes/ajax-current-ext-md.md)。       当分配 UpdateCommand 到以前创建<xref:System.Data.SqlClient.SqlCommand>、<xref:System.Data.SqlClient.SqlCommand>不克隆。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.SqlClient.SqlCommand> 限于 UpdateCommand 保留以前创建的引用<xref:System.Data.SqlClient.SqlCommand>对象。</xref:System.Data.SqlClient.SqlCommand>      1> [!NOTE]&1;> 如果执行此命令返回行，更新的行可能会与合并<xref:System.Data.DataSet>具体取决于你如何设置**UpdatedRowSource**属性<xref:System.Data.SqlClient.SqlCommand>对象。</xref:System.Data.SqlClient.SqlCommand> </xref:System.Data.DataSet>       为你传播到数据源每个列<xref:System.Data.Common.DbDataAdapter.Update%2A>，应将参数添加到`InsertCommand`， `UpdateCommand`，或`DeleteCommand`。</xref:System.Data.Common.DbDataAdapter.Update%2A>       `SourceColumn`参数的属性应设置为列的名称。 这指示参数的值不是手动设置，而来自当前处理的行中的特定列。"
  example:
  - "The following example creates a <xref:System.Data.SqlClient.SqlDataAdapter> and sets the <xref:System.Data.SqlClient.SqlDataAdapter.SelectCommand%2A>, <xref:System.Data.SqlClient.SqlDataAdapter.InsertCommand%2A>, UpdateCommand and <xref:System.Data.SqlClient.SqlDataAdapter.DeleteCommand%2A> properties. It assumes you have already created a <xref:System.Data.SqlClient.SqlConnection> object.  \n  \n [!code-vb[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/visualbasic/p-system.data.sqlclient._31_1.vb)]\n [!code-cs[DataWorks SqlDataAdapter.Command#1](~/add/codesnippet/csharp/p-system.data.sqlclient._31_1.cs)]"
  syntax:
    content: public System.Data.SqlClient.SqlCommand UpdateCommand { get; set; }
    return:
      type: System.Data.SqlClient.SqlCommand
      description: "A <xref href=&quot;System.Data.SqlClient.SqlCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>更新对应于数据库中的记录经过修改的行中的<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.SqlClient.SqlDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.Common.DbDataAdapter
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: SqlDataAdapter()
  nameWithType: SqlDataAdapter.SqlDataAdapter()
  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter()
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.Data.SqlClient.SqlCommand)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: SqlDataAdapter(SqlCommand)
  nameWithType: SqlDataAdapter.SqlDataAdapter(SqlCommand)
  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(SqlCommand)
- uid: System.Data.SqlClient.SqlCommand
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlCommand
  nameWithType: SqlCommand
  fullName: System.Data.SqlClient.SqlCommand
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.Data.SqlClient.SqlConnection)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: SqlDataAdapter(String,SqlConnection)
  nameWithType: SqlDataAdapter.SqlDataAdapter(String,SqlConnection)
  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(String,SqlConnection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.SqlClient.SqlConnection
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlConnection
  nameWithType: SqlConnection
  fullName: System.Data.SqlClient.SqlConnection
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor(System.String,System.String)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: SqlDataAdapter(String,String)
  nameWithType: SqlDataAdapter.SqlDataAdapter(String,String)
  fullName: System.Data.SqlClient.SqlDataAdapter.SqlDataAdapter(String,String)
- uid: System.Data.SqlClient.SqlDataAdapter.AddToBatch(System.Data.IDbCommand)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: AddToBatch(IDbCommand)
  nameWithType: SqlDataAdapter.AddToBatch(IDbCommand)
  fullName: System.Data.SqlClient.SqlDataAdapter.AddToBatch(IDbCommand)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.SqlClient.SqlDataAdapter.ClearBatch
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: ClearBatch()
  nameWithType: SqlDataAdapter.ClearBatch()
  fullName: System.Data.SqlClient.SqlDataAdapter.ClearBatch()
- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: SqlDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: SqlDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.SqlClient.SqlDataAdapter.DeleteCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataAdapter.DeleteCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.DeleteCommand
- uid: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: ExecuteBatch()
  nameWithType: SqlDataAdapter.ExecuteBatch()
  fullName: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch()
- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: GetBatchedParameter(Int32,Int32)
  nameWithType: SqlDataAdapter.GetBatchedParameter(Int32,Int32)
  fullName: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter(Int32,Int32)
- uid: System.Data.IDataParameter
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter
- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected(Int32,Int32,Exception)
  nameWithType: SqlDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
  fullName: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected(Int32,Int32,Exception)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Data.SqlClient.SqlDataAdapter.InitializeBatching
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: InitializeBatching()
  nameWithType: SqlDataAdapter.InitializeBatching()
  fullName: System.Data.SqlClient.SqlDataAdapter.InitializeBatching()
- uid: System.Data.SqlClient.SqlDataAdapter.InsertCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataAdapter.InsertCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.InsertCommand
- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: SqlDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: SqlDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.SqlClient.SqlDataAdapter.RowUpdated
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: RowUpdated
  nameWithType: SqlDataAdapter.RowUpdated
  fullName: System.Data.SqlClient.SqlDataAdapter.RowUpdated
- uid: System.Data.SqlClient.SqlRowUpdatedEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowUpdatedEventHandler
  nameWithType: SqlRowUpdatedEventHandler
  fullName: System.Data.SqlClient.SqlRowUpdatedEventHandler
- uid: System.Data.SqlClient.SqlDataAdapter.RowUpdating
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: RowUpdating
  nameWithType: SqlDataAdapter.RowUpdating
  fullName: System.Data.SqlClient.SqlDataAdapter.RowUpdating
- uid: System.Data.SqlClient.SqlRowUpdatingEventHandler
  parent: System.Data.SqlClient
  isExternal: false
  name: SqlRowUpdatingEventHandler
  nameWithType: SqlRowUpdatingEventHandler
  fullName: System.Data.SqlClient.SqlRowUpdatingEventHandler
- uid: System.Data.SqlClient.SqlDataAdapter.SelectCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataAdapter.SelectCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.SelectCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: SqlDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.SqlClient.SqlDataAdapter.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.SqlClient.SqlDataAdapter.TerminateBatching
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: TerminateBatching()
  nameWithType: SqlDataAdapter.TerminateBatching()
  fullName: System.Data.SqlClient.SqlDataAdapter.TerminateBatching()
- uid: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: SqlDataAdapter.UpdateBatchSize
  fullName: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize
- uid: System.Data.SqlClient.SqlDataAdapter.UpdateCommand
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataAdapter.UpdateCommand
  fullName: System.Data.SqlClient.SqlDataAdapter.UpdateCommand
- uid: System.Data.SqlClient.SqlDataAdapter.#ctor*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: SqlDataAdapter
  nameWithType: SqlDataAdapter.SqlDataAdapter
- uid: System.Data.SqlClient.SqlDataAdapter.AddToBatch*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: AddToBatch
  nameWithType: SqlDataAdapter.AddToBatch
- uid: System.Data.SqlClient.SqlDataAdapter.ClearBatch*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: ClearBatch
  nameWithType: SqlDataAdapter.ClearBatch
- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: SqlDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.SqlClient.SqlDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: SqlDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.SqlClient.SqlDataAdapter.DeleteCommand*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: SqlDataAdapter.DeleteCommand
- uid: System.Data.SqlClient.SqlDataAdapter.ExecuteBatch*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: ExecuteBatch
  nameWithType: SqlDataAdapter.ExecuteBatch
- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedParameter*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: GetBatchedParameter
  nameWithType: SqlDataAdapter.GetBatchedParameter
- uid: System.Data.SqlClient.SqlDataAdapter.GetBatchedRecordsAffected*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: GetBatchedRecordsAffected
  nameWithType: SqlDataAdapter.GetBatchedRecordsAffected
- uid: System.Data.SqlClient.SqlDataAdapter.InitializeBatching*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: InitializeBatching
  nameWithType: SqlDataAdapter.InitializeBatching
- uid: System.Data.SqlClient.SqlDataAdapter.InsertCommand*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: SqlDataAdapter.InsertCommand
- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdated*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: SqlDataAdapter.OnRowUpdated
- uid: System.Data.SqlClient.SqlDataAdapter.OnRowUpdating*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: SqlDataAdapter.OnRowUpdating
- uid: System.Data.SqlClient.SqlDataAdapter.SelectCommand*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: SqlDataAdapter.SelectCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: SqlDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.SqlClient.SqlDataAdapter.System#ICloneable#Clone*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: SqlDataAdapter.System.ICloneable.Clone
- uid: System.Data.SqlClient.SqlDataAdapter.TerminateBatching*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: TerminateBatching
  nameWithType: SqlDataAdapter.TerminateBatching
- uid: System.Data.SqlClient.SqlDataAdapter.UpdateBatchSize*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: UpdateBatchSize
  nameWithType: SqlDataAdapter.UpdateBatchSize
- uid: System.Data.SqlClient.SqlDataAdapter.UpdateCommand*
  parent: System.Data.SqlClient.SqlDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: SqlDataAdapter.UpdateCommand
