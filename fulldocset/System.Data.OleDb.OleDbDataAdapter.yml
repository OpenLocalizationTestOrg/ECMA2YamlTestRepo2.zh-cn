### YamlMime:ManagedReference
items:
- uid: System.Data.OleDb.OleDbDataAdapter
  id: OleDbDataAdapter
  children:
  - System.Data.OleDb.OleDbDataAdapter.#ctor
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  - System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  - System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  - System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  - System.Data.OleDb.OleDbDataAdapter.InsertCommand
  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  - System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  - System.Data.OleDb.OleDbDataAdapter.RowUpdated
  - System.Data.OleDb.OleDbDataAdapter.RowUpdating
  - System.Data.OleDb.OleDbDataAdapter.SelectCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  - System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  - System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  - System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  langs:
  - csharp
  name: OleDbDataAdapter
  nameWithType: OleDbDataAdapter
  fullName: System.Data.OleDb.OleDbDataAdapter
  type: Class
  summary: "表示一组数据命令和用于填充的数据库连接<xref href=&quot;System.Data.DataSet&quot;></xref>和更新数据源。"
  remarks: "OleDbDataAdapter 用作之间的桥梁<xref:System.Data.DataSet>和用于检索和保存数据的数据源。</xref:System.Data.DataSet> OleDbDataAdapter 通过使用提供此桥<xref:System.Data.Common.DbDataAdapter.Fill%2A>将数据从数据源到<xref:System.Data.DataSet>，并使用<xref:System.Data.Common.DbDataAdapter.Update%2A>发送中所做更改<xref:System.Data.DataSet>回数据源。</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.Fill%2A>       当 OleDbDataAdapter 填充<xref:System.Data.DataSet>，如果不存在，它将创建相应的表和列返回的数据。</xref:System.Data.DataSet> 但是，主键信息除非不包含隐式创建的架构中的<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性设置为<xref:System.Data.MissingSchemaAction>。</xref:System.Data.MissingSchemaAction> </xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> 你还可以创建的<xref:System.Data.DataSet>，包括主前的关键信息，填充它使用<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>.</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>处理数据</xref:System.Data.DataSet>的架构 OleDbDataAdapter 有关详细信息，请参阅[将现有约束添加到数据集](~/add/includes/ajax-current-ext-md.md)。       请注意某些 OLE DB 访问接口，包括 MSDataShape 提供程序，不返回基表或主键信息。 因此，OleDbDataAdapter 无法正确设置<xref:System.Data.DataTable.PrimaryKey%2A>的时间为任何创建<xref:System.Data.DataTable>。</xref:System.Data.DataTable>属性</xref:System.Data.DataTable.PrimaryKey%2A> 在这些情况下应显式指定<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中的表的主键       此外包括 OleDbDataAdapter <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>， <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>， <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>， <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>，和<xref:System.Data.Common.DataAdapter.TableMappings%2A>属性以便于加载和更新的数据。</xref:System.Data.Common.DataAdapter.TableMappings%2A> </xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>       当你创建的 OleDbDataAdapter 实例时，则将属性设置为其初始值。 有关这些值的列表，请参阅 OleDbDataAdapter 构造函数。"
  example:
  - "The following example uses the <xref:System.Data.OleDb.OleDbCommand>, OleDbDataAdapter and <xref:System.Data.OleDb.OleDbConnection>, to select records from an Access data source, and populate a <xref:System.Data.DataSet> with the selected rows. The filled <xref:System.Data.DataSet> is then returned. To accomplish this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is an SQL SELECT statement.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.oledb.oled_7_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.oledb.oled_7_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("RowUpdated")]

      [System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      [System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]

      public sealed class OleDbDataAdapter : System.Data.Common.DbDataAdapter, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DataAdapter
  - System.Data.Common.DbDataAdapter
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DataAdapter.AcceptChangesDuringFill
  - System.Data.Common.DataAdapter.AcceptChangesDuringUpdate
  - System.Data.Common.DataAdapter.CloneInternals
  - System.Data.Common.DataAdapter.ContinueUpdateOnError
  - System.Data.Common.DataAdapter.CreateTableMappings
  - System.Data.Common.DataAdapter.Fill(System.Data.DataSet,System.String,System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.Fill(System.Data.DataTable[],System.Data.IDataReader,System.Int32,System.Int32)
  - System.Data.Common.DataAdapter.FillError
  - System.Data.Common.DataAdapter.FillLoadOption
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDataReader)
  - System.Data.Common.DataAdapter.HasTableMappings
  - System.Data.Common.DataAdapter.MissingMappingAction
  - System.Data.Common.DataAdapter.MissingSchemaAction
  - System.Data.Common.DataAdapter.OnFillError(System.Data.FillErrorEventArgs)
  - System.Data.Common.DataAdapter.ResetFillLoadOption
  - System.Data.Common.DataAdapter.ReturnProviderSpecificTypes
  - System.Data.Common.DataAdapter.ShouldSerializeAcceptChangesDuringFill
  - System.Data.Common.DataAdapter.ShouldSerializeFillLoadOption
  - System.Data.Common.DataAdapter.ShouldSerializeTableMappings
  - System.Data.Common.DataAdapter.System#Data#IDataAdapter#TableMappings
  - System.Data.Common.DataAdapter.TableMappings
  - System.Data.Common.DbDataAdapter.AddToBatch(System.Data.IDbCommand)
  - System.Data.Common.DbDataAdapter.ClearBatch
  - System.Data.Common.DbDataAdapter.DefaultSourceTableName
  - System.Data.Common.DbDataAdapter.Dispose(System.Boolean)
  - System.Data.Common.DbDataAdapter.ExecuteBatch
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.Int32,System.Int32,System.String,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Data.DataTable[],System.Int32,System.Int32,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.Fill(System.Int32,System.Int32,System.Data.DataTable[])
  - System.Data.Common.DbDataAdapter.FillCommandBehavior
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.Data.IDbCommand,System.String,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType,System.String)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType)
  - System.Data.Common.DbDataAdapter.FillSchema(System.Data.DataTable,System.Data.SchemaType,System.Data.IDbCommand,System.Data.CommandBehavior)
  - System.Data.Common.DbDataAdapter.GetBatchedParameter(System.Int32,System.Int32)
  - System.Data.Common.DbDataAdapter.GetBatchedRecordsAffected(System.Int32,System.Int32@,System.Exception@)
  - System.Data.Common.DbDataAdapter.GetFillParameters
  - System.Data.Common.DbDataAdapter.InitializeBatching
  - System.Data.Common.DbDataAdapter.TerminateBatching
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[])
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataRow[],System.Data.Common.DataTableMapping)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataSet,System.String)
  - System.Data.Common.DbDataAdapter.Update(System.Data.DataTable)
  - System.Data.Common.DbDataAdapter.UpdateBatchSize
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor
  id: '#ctor'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter()
  nameWithType: OleDbDataAdapter.OleDbDataAdapter()
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新实例<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;></xref>类。"
  remarks: "当你创建的实例<xref:System.Data.OleDb.OleDbDataAdapter>，以下的读/写属性设置为以下的初始值。</xref:System.Data.OleDb.OleDbDataAdapter>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以更改任何通过单独属性调用这些属性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_28_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_28_1.cs)]"
  syntax:
    content: public OleDbDataAdapter ();
    parameters: []
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  id: '#ctor(System.Data.OleDb.OleDbCommand)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(OleDbCommand)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新实例<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;></xref>使用指定的类<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;></xref>作为<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>属性。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
  remarks: "此实现的<xref:System.Data.OleDb.OleDbDataAdapter>构造函数集<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>属性中指定的值`selectCommand`参数。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter>       当你创建的实例<xref:System.Data.OleDb.OleDbDataAdapter>，以下的读/写属性设置为以下的初始值。</xref:System.Data.OleDb.OleDbDataAdapter>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以更改任何通过单独属性调用这些属性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_17_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_17_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (System.Data.OleDb.OleDbCommand selectCommand);
    parameters:
    - id: selectCommand
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref> ，SELECT 语句或存储的过程，并被设置为<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>属性<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  id: '#ctor(System.String,System.Data.OleDb.OleDbConnection)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(String,OleDbConnection)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新实例<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;></xref>以<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>类"
  remarks: "此实现的<xref:System.Data.OleDb.OleDbDataAdapter>打开和关闭<xref:System.Data.OleDb.OleDbConnection>如果尚未打开。</xref:System.Data.OleDb.OleDbConnection> </xref:System.Data.OleDb.OleDbDataAdapter> 这很有用的应用程序必须调用中<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法为两个或多个<xref:System.Data.OleDb.OleDbDataAdapter>对象。</xref:System.Data.OleDb.OleDbDataAdapter> </xref:System.Data.Common.DbDataAdapter.Fill%2A> 如果<xref:System.Data.OleDb.OleDbConnection>是已打开，你必须明确地调用<xref:System.Data.OleDb.OleDbConnection.Close%2A>或**释放**关闭它。</xref:System.Data.OleDb.OleDbConnection.Close%2A> </xref:System.Data.OleDb.OleDbConnection>       当你创建的实例<xref:System.Data.OleDb.OleDbDataAdapter>，以下的读/写属性设置为以下的初始值。</xref:System.Data.OleDb.OleDbDataAdapter>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      你可以更改通过单独属性调用这些属性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/visualbasic/f3cd089b-2d52-49c5-b101-_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/add/codesnippet/csharp/f3cd089b-2d52-49c5-b101-_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (string selectCommandText, System.Data.OleDb.OleDbConnection selectConnection);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "一个字符串，表示的 SQL SELECT 语句或存储的过程用于<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>属性<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
    - id: selectConnection
      type: System.Data.OleDb.OleDbConnection
      description: "<xref href=&quot;System.Data.OleDb.OleDbConnection&quot;> </xref>表示的连接。"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OleDbDataAdapter(String,String)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)
  type: Constructor
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "初始化的新实例<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;></xref>以<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>.</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>类"
  remarks: "此重载<xref:System.Data.OleDb.OleDbDataAdapter>构造函数使用`selectConnectionString`参数设置<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>属性。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> </xref:System.Data.OleDb.OleDbDataAdapter> 但是，它不开放连接。 你仍必须显式打开连接。       当你创建的实例<xref:System.Data.OleDb.OleDbDataAdapter>，以下的读/写属性设置为以下的初始值。</xref:System.Data.OleDb.OleDbDataAdapter>      |属性 |初始值 |  |----------------|-------------------|  |<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  |<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|      您可以更改任何通过单独属性调用这些属性的值。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets some of its properties.  \n  \n [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/visualbasic/m-system.data.oledb.oled_4_1.vb)]\n [!code-cs[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/add/codesnippet/csharp/m-system.data.oledb.oled_4_1.cs)]"
  syntax:
    content: public OleDbDataAdapter (string selectCommandText, string selectConnectionString);
    parameters:
    - id: selectCommandText
      type: System.String
      description: "一个字符串，表示的 SQL SELECT 语句或存储的过程用于<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>属性<xref href=&quot;System.Data.OleDb.OleDbDataAdapter&quot;> </xref>。</xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand*>"
    - id: selectConnectionString
      type: System.String
      description: "连接字符串中。"
  overload: System.Data.OleDb.OleDbDataAdapter.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "要添加。"
    - id: command
      type: System.Data.IDbCommand
      description: "要添加。"
    - id: statementType
      type: System.Data.StatementType
      description: "要添加。"
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "要添加。"
    return:
      type: System.Data.Common.RowUpdatedEventArgs
      description: "要添加。"
  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  id: CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);
    parameters:
    - id: dataRow
      type: System.Data.DataRow
      description: "要添加。"
    - id: command
      type: System.Data.IDbCommand
      description: "要添加。"
    - id: statementType
      type: System.Data.StatementType
      description: "要添加。"
    - id: tableMapping
      type: System.Data.Common.DataTableMapping
      description: "要添加。"
    return:
      type: System.Data.Common.RowUpdatingEventArgs
      description: "要添加。"
  overload: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  id: DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置的 SQL 语句或存储的过程以从数据集中删除的记录。"
  remarks: "期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>DeleteCommand 可以设置<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>属性，然后使用<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>时自动生成</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然后，将不设置任何其他命令生成的<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 此生成的逻辑需要要<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中存在的键列信息 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/add/includes/ajax-current-ext-md.md)。       当分配 DeleteCommand 到以前创建<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>不克隆。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> DeleteCommand 保留以前创建的引用<xref:System.Data.OleDb.OleDbCommand>对象。</xref:System.Data.OleDb.OleDbCommand>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and DeleteCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_21_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_21_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand DeleteCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>以删除对应的数据源中的记录已删除的行中的<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  id: Fill(System.Data.DataTable,System.Object)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: Fill(DataTable,Object)
  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "添加或刷新中的行<xref href=&quot;System.Data.DataTable&quot;></xref>以与 ADO 中匹配<xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref>对象使用指定<xref href=&quot;System.Data.DataTable&quot;></xref>和 ADO 对象。"
  remarks: "ActiveX 数据对象 (ADO) 和 ADO.NET 之间的链接是一个单向操作，因为在可以将数据复制到的 ADO <xref:System.Data.DataSet>，但必须由 ADO.NET 处理数据的任何更新。</xref:System.Data.DataSet>       Fill 方法的此重载不会关闭输入`Recordset`填充操作完成。       当处理返回多个结果，填充此实现的批处理 SQL 语句和<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>为 OLE DB.NET Framework 数据提供程序检索仅第一个结果的架构信息。</xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       填充操作的行添加到指定目标<xref:System.Data.DataTable>对象在<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它尚不存在。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> 当你创建<xref:System.Data.DataTable>对象，该填充操作通常只创建列名称元数据。</xref:System.Data.DataTable> 但是，如果<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>       你可以使用的填充方法多次<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 如果存在主键，传入行与已存在的匹配行合并。 如果不存在任何主键，传入行追加到<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 如果主键信息存在，则协调任何重复的行，并且只能出现在<xref:System.Data.DataTable>对应于<xref:System.Data.DataSet>.</xref:System.Data.DataSet></xref:System.Data.DataTable>中的一次 主键信息可能被设置通过<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，通过指定<xref:System.Data.DataTable.PrimaryKey%2A>属性<xref:System.Data.DataTable>，或通过设置<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性`AddWithKey`。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       如果<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>返回 OUTER JOIN 的结果`DataAdapter`未设置<xref:System.Data.DataTable.PrimaryKey%2A>值生成<xref:System.Data.DataTable>。</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/add/includes/ajax-current-ext-md.md)。       用于 OLE DB，正常使用.NET Framework 数据提供程序`AddWithKey`需要本机 OLE DB 访问接口程序设置 DBPROP_UNIQUEROWS 属性时，获取所需的主要密钥信息，然后确定哪些列是主键列，通过检查在 DBCOLUMN_KEYCOLUMN `IColumnsRowset`。 或者用户可能显式设置的时间为每个<xref:System.Data.DataTable>。</xref:System.Data.DataTable>主键约束 这将确保传入与现有记录匹配的记录进行更新，而不是追加。       如果<xref:System.Data.OleDb.OleDbDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式&quot;*columnname*1&quot;，&quot;*columnname*2&quot;，&quot;*columnname*3&quot;，依次类推。</xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter> 空的列名称添加到<xref:System.Data.DataTable>，第一列中，使用空字符串后跟&quot;1&quot;、&quot;2&quot;、&quot;3&quot;等为后续的空列。</xref:System.Data.DataTable>       ADO 中的值`Recordset`或`Record`对象将转换为公共语言运行时类型中<xref:System.Data.DataSet>.</xref:System.Data.DataSet>的存储      1> [!CAUTION]&1;> 填充方法的此重载不隐式调用`Close`ADO 对象填充操作完成时。 因此，始终调用`Close`在完成使用 ADO 时`Recordset`或`Record`对象。 这可确保基础连接到数据源发布及时，而且还可以防止可能的访问冲突，由于非托管现有的引用仍然存在时，垃圾回收正在回收的 ADO 对象。       当调用`TableMappings.Add`方法`DataAdapter`和显式源表参数映射为空字符串，使用源表中，已成功填充数据集，但将填充数据集不包含任何内容。 例如，在以下示例中，`rDataSet`将填充任何内容。      ```   rAdapter.TableMappings.Add(&quot;source table&quot;, &quot;&quot;);   rAdapter.Fill(rDataSet, &quot;source table&quot;);      ```此示例演示处理多个结果时如何可以跳过的结果。       下面的示例使用<xref:System.Data.OleDb.OleDbDataAdapter>以填充<xref:System.Data.DataTable>使用 ADO `Recordset`。</xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter> 此示例假定你已经创建了 ADO `Recordset`。      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        Dim custTable As DataTable = New DataTable(&quot;Customers&quot;)        custTable.Columns.Add(&quot;CustomerID&quot;, Type.GetType(&quot;System.String&quot;))        custTable.Columns.Add(&quot;CompanyName&quot;, Type.GetType(&quot;System.String&quot;))        custDS.Tables.Add(custTable)        &quot;Use ADO objects from ADO library (msado15.dll) imported        &quot; as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1)        adoRS.Open(&quot;SELECT CustomerID, CompanyName FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custTable, adoRS)        adoRS.Close()        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        DataTable custTable = new DataTable(&quot;Customers&quot;);        custTable.Columns.Add(&quot;CustomerID&quot;, typeof(String));        custTable.Columns.Add(&quot;CompanyName&quot;, typeof(String));        custDS.Tables.Add(custTable);        //Use ADO objects from ADO library (msado15.dll) imported        //  as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1);        adoRS.Open(&quot;SELECT CustomerID, CompanyName FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custTable, adoRS);        adoRS.Close();        adoConn.Close();   ```"
  syntax:
    content: public int Fill (System.Data.DataTable dataTable, object ADODBRecordSet);
    parameters:
    - id: dataTable
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>填写记录并且，如果它是必需的架构。"
    - id: ADODBRecordSet
      type: System.Object
      description: "An ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref> object."
    return:
      type: System.Int32
      description: "行数已成功刷新到<xref href=&quot;System.Data.DataTable&quot;> </xref>。 这不包括由语句不返回行受影响的行。"
  overload: System.Data.OleDb.OleDbDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  id: Fill(System.Data.DataSet,System.Object,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: Fill(DataSet,Object,String)
  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "添加或刷新中的行<xref href=&quot;System.Data.DataSet&quot;></xref>以与 ADO 中匹配<xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref>或<xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref>对象使用指定<xref href=&quot;System.Data.DataSet&quot;> </xref>，ADO 对象，并且源表名。"
  remarks: "ActiveX 数据对象 (ADO) 和 ADO.NET 之间的链接是一个单向操作，因为在可以将数据复制到的 ADO <xref:System.Data.DataSet>，但必须由 ADO.NET 处理数据的任何更新。</xref:System.Data.DataSet>       <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>方法循环访问多个结果通过调用`NextRecordset`方法`Recordset`，关闭输入`Recordset`完成<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>操作。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>       <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>操作将行添加到指定目标<xref:System.Data.DataTable>对象在<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它尚不存在。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> </xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 当你创建<xref:System.Data.DataTable>对象，<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>操作通常只创建列名称元数据。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.DataTable> 但是，如果<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>       如果主键信息存在，则协调任何重复的行，并且只能出现在<xref:System.Data.DataTable>对应于<xref:System.Data.DataSet>.</xref:System.Data.DataSet></xref:System.Data.DataTable>中的一次 主键信息可能被设置通过<xref:System.Data.Common.DbDataAdapter.FillSchema%2A>，通过指定<xref:System.Data.DataTable.PrimaryKey%2A>属性<xref:System.Data.DataTable>，或通过设置<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>属性`AddWithKey`。</xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> </xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.Common.DbDataAdapter.FillSchema%2A>       用于 OLE DB，正常使用.NET Framework 数据提供程序`AddWithKey`需要本机 OLE DB 访问接口，通过设置 DBPROP_UNIQUEROWS 属性时，获取所需的主要密钥信息，然后确定哪些列是主键列，通过检查在 DBCOLUMN_KEYCOLUMN **IColumnsRowset**。 或者用户可能显式设置的时间为每个<xref:System.Data.DataTable>。</xref:System.Data.DataTable>主键约束 这可确保传入与现有记录匹配的记录进行更新，而不是追加。       如果<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>返回 OUTER JOIN 的结果`DataAdapter`未设置<xref:System.Data.DataTable.PrimaryKey%2A>值生成<xref:System.Data.DataTable>。</xref:System.Data.DataTable> </xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/add/includes/ajax-current-ext-md.md)。       如果`Recordset`的开始之前关闭<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>操作，不会产生错误。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> 这是处理多个结果所必需的因为不返回行的查询指示通过关闭`Recordset`。 <xref:System.Data.OleDb.OleDbDataAdapter>只调用`NextRecordset`上的已关闭`Recordset`，继续进行处理。</xref:System.Data.OleDb.OleDbDataAdapter>       如果填充数据集时遇到错误，错误发生之前添加的行将保留在<xref:System.Data.DataSet>.</xref:System.Data.DataSet> 该操作的其余部分将会中止。       如果<xref:System.Data.Common.DbDataAdapter>对象在填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称的后续列，请使用模式&quot;*columnname*1&quot;，&quot;*columnname*2&quot;，&quot;*columnname*3&quot;，依次类推。</xref:System.Data.DataTable> </xref:System.Data.Common.DbDataAdapter> 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式&quot;Column1&quot;、&quot;Column2&quot;等。</xref:System.Data.DataSet> 多个结果集添加到时<xref:System.Data.DataSet>每个结果集放置在单独的表。</xref:System.Data.DataSet> 通过将整数值追加到指定的表名 （例如，&quot;Table&quot;、&quot;Table1&quot;、&quot;Table2&quot;等。） 命名额外的结果集。 使用列和表名称的应用程序应确保这些命名模式的冲突不会发生。       ADO 中的值`Recordset`或`Record`对象将转换为公共语言运行时类型中<xref:System.Data.DataSet>.</xref:System.Data.DataSet>的存储      1> [!NOTE]&1;> 的此重载<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>方法隐式调用`Close`ADO 对象填充操作完成时。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>       下面的示例使用<xref:System.Data.OleDb.OleDbDataAdapter>以填充<xref:System.Data.DataSet>使用 ADO `Recordset` ，它是一种 ADO`Record`对象。</xref:System.Data.DataSet> </xref:System.Data.OleDb.OleDbDataAdapter> 此示例假定你已经创建了 ADO`RecordSet`和`Record`对象。      ```vb#   Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()        Dim custDS As DataSet = New DataSet        &quot;Use ADO objects from ADO library (msado15.dll) imported        &quot; as.NET library ADODB.dll using TlbImp.exe        Dim adoConn As ADODB.Connection = New ADODB.Connection()        Dim adoRS As ADODB.Recordset = New ADODB.Recordset()        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1)        adoRS.Open(&quot;SELECT * FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)        custDA.Fill(custDS, adoRS, &quot;Customers&quot;)        adoConn.Close()   ```      ```c#   OleDbDataAdapter custDA = new OleDbDataAdapter();        DataSet custDS = new DataSet();        //Use ADO objects from ADO library (msado15.dll) imported        // as.NET library ADODB.dll using TlbImp.exe        ADODB.Connection adoConn = new ADODB.Connection();        ADODB.Recordset adoRS = new ADODB.Recordset();        adoConn.Open(&quot;Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;&quot;, &quot;&quot;, &quot;&quot;, -1);        adoRS.Open(&quot;SELECT * FROM Customers&quot;, adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);        custDA.Fill(custDS, adoRS, &quot;Customers&quot;);        adoConn.Close();   ```"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref>填写记录并且，如果它是必需的架构。"
    - id: ADODBRecordSet
      type: System.Object
      description: "An ADO <xref uid=&quot;langword_csharp_Recordset&quot; name=&quot;Recordset&quot; href=&quot;&quot;></xref> or <xref uid=&quot;langword_csharp_Record&quot; name=&quot;Record&quot; href=&quot;&quot;></xref> object."
    - id: srcTable
      type: System.String
      description: "用于表映射的源表。"
    return:
      type: System.Int32
      description: "行数已成功添加到或在刷新<xref href=&quot;System.Data.DataSet&quot;> </xref>。 这不包括由语句不返回行受影响的行。"
  overload: System.Data.OleDb.OleDbDataAdapter.Fill*
  exceptions:
  - type: System.SystemException
    commentId: T:System.SystemException
    description: "源表无效。"
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  id: InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置的 SQL 语句或存储的过程用于将新记录插入到数据源。"
  remarks: "期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>InsertCommand 可以设置<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>属性，然后使用<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>时自动生成</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然后，将不设置任何其他命令生成的<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 此生成的逻辑需要要<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中存在的键列信息 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/add/includes/ajax-current-ext-md.md)。       当分配 InsertCommand 到以前创建<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>不克隆。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> InsertCommand 保留以前创建的引用<xref:System.Data.OleDb.OleDbCommand>对象。</xref:System.Data.OleDb.OleDbCommand>      1> [!NOTE]&1;> 如果执行此命令返回行，这些行可能添加到<xref:System.Data.DataSet>具体取决于你如何设置<xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>属性<xref:System.Data.OleDb.OleDbCommand>对象。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and InsertCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_9_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_9_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand InsertCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>对应中新行的数据源中插入记录<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  id: OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatedEventArgs
      description: "要添加。"
  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  id: OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  syntax:
    content: protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);
    parameters:
    - id: value
      type: System.Data.Common.RowUpdatingEventArgs
      description: "要添加。"
  overload: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  id: RowUpdated
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: RowUpdated
  nameWithType: OleDbDataAdapter.RowUpdated
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "期间出现<xref:System.Data.Common.DbDataAdapter.Update*>针对数据源执行命令后。</xref:System.Data.Common.DbDataAdapter.Update*> 由尝试更新。 因此，发生该事件时。"
  remarks: "当你使用<xref:System.Data.Common.DbDataAdapter.Update%2A>，有两个事件发生每个更新的数据行。</xref:System.Data.Common.DbDataAdapter.Update%2A> 执行的顺序，如下所示是︰ 1。  中的值<xref:System.Data.DataRow>移动到的参数值。</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  该命令执行。      4.  如果该命令设置为`FirstReturnedRecord`，第一个返回结果置于<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  如果有输出参数，请在放入<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>调用。</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows the <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> and RowUpdated events being used.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_1_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_1_1.vb)]"
  syntax:
    content: public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated;
    return:
      type: System.Data.OleDb.OleDbRowUpdatedEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  id: RowUpdating
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: RowUpdating
  nameWithType: OleDbDataAdapter.RowUpdating
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  type: Event
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "期间出现<xref:System.Data.Common.DbDataAdapter.Update*>针对数据源执行命令之前。</xref:System.Data.Common.DbDataAdapter.Update*> 由尝试更新。 因此，发生该事件时。"
  remarks: "当你使用<xref:System.Data.Common.DbDataAdapter.Update%2A>，有两个事件发生每个更新的数据行。</xref:System.Data.Common.DbDataAdapter.Update%2A> 执行的顺序，如下所示是︰ 1。  中的值<xref:System.Data.DataRow>移动到的参数值。</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  该命令执行。      4.  如果该命令设置为`FirstReturnedRecord`，第一个返回结果置于<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  如果有输出参数，请在放入<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>调用。</xref:System.Data.DataRow.AcceptChanges%2A>"
  example:
  - "The following example shows the RowUpdating and <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> events being used.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/csharp/e-system.data.oledb.oled_0_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/add/codesnippet/visualbasic/e-system.data.oledb.oled_0_1.vb)]"
  syntax:
    content: public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating;
    return:
      type: System.Data.OleDb.OleDbRowUpdatingEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  id: SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置的 SQL 语句或存储的过程用于选择数据源中的记录。"
  remarks: "当分配 SelectCommand 到以前创建<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>不克隆。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> SelectCommand 保留以前创建的引用<xref:System.Data.OleDb.OleDbCommand>对象。</xref:System.Data.OleDb.OleDbCommand>       如果 SelectCommand 不返回任何行，没有表将添加到<xref:System.Data.DataSet>，并且不引发任何异常。</xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the SelectCommand and <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_3_1.cs)]\n [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_3_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand SelectCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Fill*>从放置中的数据源选择记录<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Fill*>"
  overload: System.Data.OleDb.OleDbDataAdapter.SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  id: System#Data#IDbDataAdapter#DeleteCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "有关此成员的说明，请参阅<xref:System.Data.IDbDataAdapter.DeleteCommand*>。</xref:System.Data.IDbDataAdapter.DeleteCommand*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.OleDb.OleDbDataAdapter>实例被强制转换为<xref:System.Data.IDbDataAdapter>接口。</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>更新期间用于删除已删除的行在数据集中的数据源中的记录。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  id: System#Data#IDbDataAdapter#InsertCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "有关此成员的说明，请参阅<xref:System.Data.IDbDataAdapter.InsertCommand*>。</xref:System.Data.IDbDataAdapter.InsertCommand*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.OleDb.OleDbDataAdapter>实例被强制转换为<xref:System.Data.IDbDataAdapter>接口。</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> ，在更新过程中，用于从数据源用于放置在数据集中插入记录。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  id: System#Data#IDbDataAdapter#SelectCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "有关此成员的说明，请参阅<xref:System.Data.IDbDataAdapter.SelectCommand*>。</xref:System.Data.IDbDataAdapter.SelectCommand*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.OleDb.OleDbDataAdapter>实例被强制转换为<xref:System.Data.IDbDataAdapter>接口。</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref> ，在更新过程中，用于从数据源用于放置在数据集中选择的记录。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  id: System#Data#IDbDataAdapter#UpdateCommand
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "有关此成员的说明，请参阅<xref:System.Data.IDbDataAdapter.UpdateCommand*>。</xref:System.Data.IDbDataAdapter.UpdateCommand*>"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.OleDb.OleDbDataAdapter>实例被强制转换为<xref:System.Data.IDbDataAdapter>接口。</xref:System.Data.IDbDataAdapter> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }
    return:
      type: System.Data.IDbCommand
      description: "<xref href=&quot;System.Data.IDbCommand&quot;> </xref>修改的行在数据集中的数据源中更新来更新记录期间使用。"
  overload: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "有关此成员的说明，请参阅&lt;xref:System.ICloneable.Clone%2A?displayProperty=fullName&gt;。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.OleDb.OleDbDataAdapter>实例被强制转换为<xref:System.ICloneable>接口。</xref:System.ICloneable> </xref:System.Data.OleDb.OleDbDataAdapter>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "一个新<xref:System.Object>，它是此实例的副本。</xref:System.Object>"
  overload: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  id: UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  langs:
  - csharp
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data.OleDb
  summary: "获取或设置的 SQL 语句或存储的过程用于更新数据源中的记录。"
  remarks: "期间<xref:System.Data.Common.DbDataAdapter.Update%2A>，如果未设置此属性和主键信息位于<xref:System.Data.DataSet>UpdateCommand 可以设置<xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>属性，然后使用<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder></xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>时自动生成</xref:System.Data.DataSet></xref:System.Data.Common.DbDataAdapter.Update%2A> 然后，将不设置任何其他命令生成的<xref:System.Data.OleDb.OleDbCommandBuilder>.</xref:System.Data.OleDb.OleDbCommandBuilder> 此生成的逻辑需要要<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中存在的键列信息 有关详细信息，请参阅[使用 Commandbuilder 生成命令](~/add/includes/ajax-current-ext-md.md)。       当分配 UpdateCommand 到以前创建<xref:System.Data.OleDb.OleDbCommand>、<xref:System.Data.OleDb.OleDbCommand>不克隆。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand> 限于 UpdateCommand 保留以前创建的引用<xref:System.Data.OleDb.OleDbCommand>对象。</xref:System.Data.OleDb.OleDbCommand>      1> [!NOTE]&1;> 如果执行此命令返回行，这些行可能会与合并<xref:System.Data.DataSet>具体取决于你如何设置<xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A>属性<xref:System.Data.OleDb.OleDbCommand>对象。</xref:System.Data.OleDb.OleDbCommand> </xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> </xref:System.Data.DataSet>"
  example:
  - "The following example creates an <xref:System.Data.OleDb.OleDbDataAdapter> and sets the <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> and UpdateCommand properties. It assumes that you have already created an <xref:System.Data.OleDb.OleDbConnection> object.  \n  \n [!code-cs[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/csharp/p-system.data.oledb.oled_7_1.cs)]\n [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/add/codesnippet/visualbasic/p-system.data.oledb.oled_7_1.vb)]"
  syntax:
    content: public System.Data.OleDb.OleDbCommand UpdateCommand { get; set; }
    return:
      type: System.Data.OleDb.OleDbCommand
      description: "<xref href=&quot;System.Data.OleDb.OleDbCommand&quot;> </xref>过程中使用<xref:System.Data.Common.DbDataAdapter.Update*>以更新对应的数据源中的记录经过修改的行中的<xref href=&quot;System.Data.DataSet&quot;> </xref>。</xref:System.Data.Common.DbDataAdapter.Update*>"
  overload: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbDataAdapter
  isExternal: false
  name: System.Data.Common.DbDataAdapter
- uid: System.SystemException
  parent: System
  isExternal: false
  name: SystemException
  nameWithType: SystemException
  fullName: System.SystemException
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter()
  nameWithType: OleDbDataAdapter.OleDbDataAdapter()
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter()
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(OleDbCommand)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(OleDbCommand)
- uid: System.Data.OleDb.OleDbCommand
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbCommand
  nameWithType: OleDbCommand
  fullName: System.Data.OleDb.OleDbCommand
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(String,OleDbConnection)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,OleDbConnection)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OleDb.OleDbConnection
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbConnection
  nameWithType: OleDbConnection
  fullName: System.Data.OleDb.OleDbConnection
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter(String,String)
  nameWithType: OleDbDataAdapter.OleDbDataAdapter(String,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.OleDbDataAdapter(String,String)
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatedEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatedEventArgs
  nameWithType: RowUpdatedEventArgs
  fullName: System.Data.Common.RowUpdatedEventArgs
- uid: System.Data.DataRow
  parent: System.Data
  isExternal: false
  name: DataRow
  nameWithType: DataRow
  fullName: System.Data.DataRow
- uid: System.Data.IDbCommand
  parent: System.Data
  isExternal: false
  name: IDbCommand
  nameWithType: IDbCommand
  fullName: System.Data.IDbCommand
- uid: System.Data.StatementType
  parent: System.Data
  isExternal: false
  name: StatementType
  nameWithType: StatementType
  fullName: System.Data.StatementType
- uid: System.Data.Common.DataTableMapping
  parent: System.Data.Common
  isExternal: false
  name: DataTableMapping
  nameWithType: DataTableMapping
  fullName: System.Data.Common.DataTableMapping
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
  fullName: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(DataRow,IDbCommand,StatementType,DataTableMapping)
- uid: System.Data.Common.RowUpdatingEventArgs
  parent: System.Data.Common
  isExternal: false
  name: RowUpdatingEventArgs
  nameWithType: RowUpdatingEventArgs
  fullName: System.Data.Common.RowUpdatingEventArgs
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill(DataTable,Object)
  nameWithType: OleDbDataAdapter.Fill(DataTable,Object)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataTable,Object)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill(DataSet,Object,String)
  nameWithType: OleDbDataAdapter.Fill(DataSet,Object,String)
  fullName: System.Data.OleDb.OleDbDataAdapter.Fill(DataSet,Object,String)
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdated(RowUpdatedEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(RowUpdatedEventArgs)
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdating(RowUpdatingEventArgs)
  nameWithType: OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
  fullName: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(RowUpdatingEventArgs)
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdated
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: RowUpdated
  nameWithType: OleDbDataAdapter.RowUpdated
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdated
- uid: System.Data.OleDb.OleDbRowUpdatedEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbRowUpdatedEventHandler
  nameWithType: OleDbRowUpdatedEventHandler
  fullName: System.Data.OleDb.OleDbRowUpdatedEventHandler
- uid: System.Data.OleDb.OleDbDataAdapter.RowUpdating
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: RowUpdating
  nameWithType: OleDbDataAdapter.RowUpdating
  fullName: System.Data.OleDb.OleDbDataAdapter.RowUpdating
- uid: System.Data.OleDb.OleDbRowUpdatingEventHandler
  parent: System.Data.OleDb
  isExternal: false
  name: OleDbRowUpdatingEventHandler
  nameWithType: OleDbRowUpdatingEventHandler
  fullName: System.Data.OleDb.OleDbRowUpdatingEventHandler
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone()
  fullName: System.Data.OleDb.OleDbDataAdapter.System.ICloneable.Clone()
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
  fullName: System.Data.OleDb.OleDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.#ctor*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OleDbDataAdapter
  nameWithType: OleDbDataAdapter.OleDbDataAdapter
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatedEvent
  nameWithType: OleDbDataAdapter.CreateRowUpdatedEvent
- uid: System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: CreateRowUpdatingEvent
  nameWithType: OleDbDataAdapter.CreateRowUpdatingEvent
- uid: System.Data.OleDb.OleDbDataAdapter.DeleteCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: DeleteCommand
  nameWithType: OleDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.Fill*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: Fill
  nameWithType: OleDbDataAdapter.Fill
- uid: System.Data.OleDb.OleDbDataAdapter.InsertCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: InsertCommand
  nameWithType: OleDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdated*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdated
  nameWithType: OleDbDataAdapter.OnRowUpdated
- uid: System.Data.OleDb.OleDbDataAdapter.OnRowUpdating*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: OnRowUpdating
  nameWithType: OleDbDataAdapter.OnRowUpdating
- uid: System.Data.OleDb.OleDbDataAdapter.SelectCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: SelectCommand
  nameWithType: OleDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.DeleteCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.DeleteCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.InsertCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.InsertCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.SelectCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.SelectCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.Data.IDbDataAdapter.UpdateCommand
  nameWithType: OleDbDataAdapter.System.Data.IDbDataAdapter.UpdateCommand
- uid: System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OleDbDataAdapter.System.ICloneable.Clone
- uid: System.Data.OleDb.OleDbDataAdapter.UpdateCommand*
  parent: System.Data.OleDb.OleDbDataAdapter
  isExternal: false
  name: UpdateCommand
  nameWithType: OleDbDataAdapter.UpdateCommand
