### YamlMime:ManagedReference
items:
- uid: System.Runtime.Hosting.ApplicationActivator
  id: ApplicationActivator
  children:
  - System.Runtime.Hosting.ApplicationActivator.#ctor
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  - System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  - System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  langs:
  - csharp
  name: ApplicationActivator
  nameWithType: ApplicationActivator
  fullName: System.Runtime.Hosting.ApplicationActivator
  type: Class
  summary: "对于基于清单的程序集的激活提供基类。"
  remarks: "没有在每个 ApplicationActivator 类的一个指定的实例<xref:System.AppDomain>调用路由到的所有激活。</xref:System.AppDomain> <xref:System.AppDomainManager>当前<xref:System.AppDomain>可以为此目的提供其自己的自定义 ApplicationActivator。</xref:System.AppDomain> </xref:System.AppDomainManager> 如果未提供自定义 ApplicationActivator，创建一个实例的默认值 ApplicationActivator 是。       以下步骤介绍的默认行为<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>方法实现︰ 1。</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>  检查是否<xref:System.ActivationContext>的外接程序要激活的匹配项<xref:System.ActivationContext>的当前域; 否则，请转到步骤 2。</xref:System.ActivationContext> </xref:System.ActivationContext> 否则为执行的程序集，并返回结果包装在一个对象句柄。      2.  激活外接程序中新的<xref:System.AppDomain>。</xref:System.AppDomain> 采取以下步骤来初始化新<xref:System.AppDomain>使用<xref:System.Runtime.Hosting.ActivationArguments>以进行添加。</xref:System.Runtime.Hosting.ActivationArguments> </xref:System.AppDomain>          1.  创建新<xref:System.AppDomainSetup>对象使用的<xref:System.Runtime.Hosting.ActivationArguments>对象，其中包含外接程序的激活上下文</xref:System.Runtime.Hosting.ActivationArguments></xref:System.AppDomainSetup>          2.  调用<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法来创建新的域使用<xref:System.AppDomainSetup>对象。</xref:System.AppDomainSetup> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          3.  <xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>方法调用<xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName>方法来获取<xref:System.Security.Policy.ApplicationTrust>外接程序的对象</xref:System.Security.Policy.ApplicationTrust></xref:System.Security.HostSecurityManager.DetermineApplicationTrust%2A?displayProperty=fullName></xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> 如果<xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A>属性返回`true`外, 接程序执行。</xref:System.Security.Policy.ApplicationTrust.IsApplicationTrustedToRun%2A> 如果没有，<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>引发<xref:System.Security.Policy.PolicyException>，该值指示无法获取执行权限。</xref:System.Security.Policy.PolicyException> </xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>          4.  如果外接程序受信任运行，然后新<xref:System.AppDomain>创建并配置为<xref:System.ActivationContext>的外接程序和外接程序是在加载和执行。</xref:System.ActivationContext> </xref:System.AppDomain>          5.  返回的结果的外接程序激活，包装在对象句柄。       自定义激活器可以定制外接程序到一组特定的情况下的激活。 例如，自定义激活器无法找到的现有<xref:System.AppDomain>激活该外接程序而不是每次创建新域。</xref:System.AppDomain>       以下步骤描述的行为的激活外接程序中的现有自定义 ApplicationActivator <xref:System.AppDomain>: 1。</xref:System.AppDomain>  自定义激活器找到的域具有相同<xref:System.ActivationContext>作为正在激活的外接程序。</xref:System.ActivationContext>      2.  如果<xref:System.ActivationContext>已永远不会出现之前在过程中，自定义激活器创建新<xref:System.AppDomain>的此<xref:System.ActivationContext>通过调用<xref:System.AppDomain.CreateDomain%2A>方法直接，或委派此活动向<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A>在基的类。</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper%2A> </xref:System.AppDomain.CreateDomain%2A> </xref:System.ActivationContext> </xref:System.AppDomain> </xref:System.ActivationContext>      3.  如果没有具有相同的现有域<xref:System.ActivationContext>，然后激活器可以委派<xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A>方法调用的目标域 ApplicationActivator。</xref:System.Runtime.Hosting.ApplicationActivator.CreateInstance%2A> </xref:System.ActivationContext> 请注意，这将是到驻留在目标<xref:System.AppDomain>.</xref:System.AppDomain> ApplicationActivator 的跨域调用"
  example:
  - "The following code example shows how to obtain an ApplicationActivator object from the current <xref:System.AppDomain.DomainManager%2A> for a manifest-based application.  \n  \n [!code-vb[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/visualbasic/t-system.runtime.hosting_0_1.vb)]\n [!code-cs[System.Runtime.Hosting.ApplicationActivator#1](~/add/codesnippet/csharp/t-system.runtime.hosting_0_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public class ApplicationActivator
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  id: '#ctor'
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "初始化的新实例<xref href=&quot;System.Runtime.Hosting.ApplicationActivator&quot;></xref>类。"
  syntax:
    content: public ApplicationActivator ();
    parameters: []
  overload: System.Runtime.Hosting.ApplicationActivator.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  id: CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "创建应用程序将激活的实例使用指定的激活上下文。"
  remarks: "此方法适用于基于清单的应用程序的激活。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref> ，它标识要激活的应用程序。"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> ，它是应用程序执行的返回值的包装器。 返回值必须是打开包装才能访问真实对象。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  id: CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "创建使用指定的激活上下文和自定义激活数据激活，应用程序的实例。"
  remarks: "此方法适用于基于清单的应用程序的激活。 激活数据包含如 URL 的查询字符串部分的信息。"
  syntax:
    content: public virtual System.Runtime.Remoting.ObjectHandle CreateInstance (ActivationContext activationContext, string[] activationCustomData);
    parameters:
    - id: activationContext
      type: System.ActivationContext
      description: "<xref href=&quot;System.ActivationContext&quot;> </xref> ，它标识要激活的应用程序。"
    - id: activationCustomData
      type: System.String[]
      description: "自定义激活数据。"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> ，它是应用程序执行的返回值的包装器。 返回值必须是打开包装才能访问真实对象。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>activationContext</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  id: CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  langs:
  - csharp
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Hosting
  summary: "创建使用指定的应用程序的实例<xref href=&quot;System.AppDomainSetup&quot;></xref>对象。"
  remarks: "此方法适用于基于清单的应用程序的激活。"
  syntax:
    content: protected static System.Runtime.Remoting.ObjectHandle CreateInstanceHelper (AppDomainSetup adSetup);
    parameters:
    - id: adSetup
      type: System.AppDomainSetup
      description: "<xref href=&quot;System.AppDomainSetup&quot;> </xref>对象，其<xref:System.AppDomainSetup.ActivationArguments*>属性标识要激活的应用程序。</xref:System.AppDomainSetup.ActivationArguments*>"
    return:
      type: System.Runtime.Remoting.ObjectHandle
      description: "<xref href=&quot;System.Runtime.Remoting.ObjectHandle&quot;> </xref> ，它是应用程序执行的返回值的包装器。 返回值必须是打开包装才能访问真实对象。"
  overload: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <xref:System.AppDomainSetup.ActivationArguments*> property of <code>adSetup </code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.</xref:System.AppDomainSetup.ActivationArguments*>"
  - type: System.Security.Policy.PolicyException
    commentId: T:System.Security.Policy.PolicyException
    description: "应用程序实例无法执行，因为当前的应用程序域上的策略设置不提供用于运行此应用程序的权限。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Security.Policy.PolicyException
  parent: System.Security.Policy
  isExternal: false
  name: PolicyException
  nameWithType: PolicyException
  fullName: System.Security.Policy.PolicyException
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator()
  nameWithType: ApplicationActivator.ApplicationActivator()
  fullName: System.Runtime.Hosting.ApplicationActivator.ApplicationActivator()
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext)
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext)
- uid: System.Runtime.Remoting.ObjectHandle
  parent: System.Runtime.Remoting
  isExternal: false
  name: ObjectHandle
  nameWithType: ObjectHandle
  fullName: System.Runtime.Remoting.ObjectHandle
- uid: System.ActivationContext
  parent: System
  isExternal: false
  name: ActivationContext
  nameWithType: ActivationContext
  fullName: System.ActivationContext
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance(System.ActivationContext,System.String[])
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance(ActivationContext,String[])
  nameWithType: ApplicationActivator.CreateInstance(ActivationContext,String[])
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstance(ActivationContext,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(System.AppDomainSetup)
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper(AppDomainSetup)
  nameWithType: ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
  fullName: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper(AppDomainSetup)
- uid: System.AppDomainSetup
  parent: System
  isExternal: false
  name: AppDomainSetup
  nameWithType: AppDomainSetup
  fullName: System.AppDomainSetup
- uid: System.Runtime.Hosting.ApplicationActivator.#ctor*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: ApplicationActivator
  nameWithType: ApplicationActivator.ApplicationActivator
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstance*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstance
  nameWithType: ApplicationActivator.CreateInstance
- uid: System.Runtime.Hosting.ApplicationActivator.CreateInstanceHelper*
  parent: System.Runtime.Hosting.ApplicationActivator
  isExternal: false
  name: CreateInstanceHelper
  nameWithType: ApplicationActivator.CreateInstanceHelper
