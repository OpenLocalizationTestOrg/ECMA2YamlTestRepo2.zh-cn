### YamlMime:ManagedReference
items:
- uid: System.Data.EntityKey
  id: EntityKey
  children:
  - System.Data.EntityKey.#ctor
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  - System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  - System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  - System.Data.EntityKey.EntityContainerName
  - System.Data.EntityKey.EntityKeyValues
  - System.Data.EntityKey.EntityNotValidKey
  - System.Data.EntityKey.EntitySetName
  - System.Data.EntityKey.Equals(System.Data.EntityKey)
  - System.Data.EntityKey.Equals(System.Object)
  - System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  - System.Data.EntityKey.GetHashCode
  - System.Data.EntityKey.IsTemporary
  - System.Data.EntityKey.NoEntitySetKey
  - System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  - System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  - System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  langs:
  - csharp
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
  type: Class
  summary: "提供对一个对象，它的实体类型实例的持久引用。"
  remarks: "EntityKey 对象是不可变;也就是说，它们在构造之后不能修改它们。       有关详细信息，请参阅[使用实体键](http://msdn.microsoft.com/en-us/fe3f4206-d277-43a1-a72f-4e86fdf12b9f)。"
  example:
  - "These examples are based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The examples show you how to create and use an EntityKey.  \n  \n [!code-vb[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#entitykeyclass_trygetobjectbykey)]\n [!code-cs[DP ObjectServices Concepts#EntityKeyClass_TryGetObjectByKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#entitykeyclass_trygetobjectbykey)]  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{ConcatKeyValue()}")]

      [System.Runtime.Serialization.DataContract(IsReference=true)]

      public sealed class EntityKey : IEquatable<System.Data.EntityKey>
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Data.EntityKey>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor
  id: '#ctor'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "初始化的新实例<xref href=&quot;System.Data.EntityKey&quot;></xref>类。"
  syntax:
    content: public EntityKey ();
    parameters: []
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "初始化的新实例<xref href=&quot;System.Data.EntityKey&quot;></xref>使用实体集名称和泛型类<xref:System.Collections.Generic.KeyValuePair>集合。</xref:System.Collections.Generic.KeyValuePair>"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<string,object>> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A<xref:System.String>是由实体容器名称限定的实体集名称。</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
      description: "泛型<xref:System.Collections.Generic.KeyValuePair>集合。</xref:System.Collections.Generic.KeyValuePair>       每个键/值对具有同名的键和值作为该属性的值之间的属性。 应该有一个属于每个属性对<xref href=&quot;System.Data.EntityKey&quot;> </xref>。 键/值对的顺序并不重要，但应包含每个键属性。 属性名称都是不使用实体类型名称或架构名称限定的简单名称。"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  id: '#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "初始化的新实例<xref href=&quot;System.Data.EntityKey&quot;></xref>使用实体集名称的类和&lt;xref:System.Collections.Generic.IEnumerable%601&gt;集合<xref href=&quot;System.Data.EntityKeyMember&quot;></xref>对象。"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember> entityKeyValues);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A<xref:System.String>是由实体容器名称限定的实体集名称。</xref:System.String>"
    - id: entityKeyValues
      type: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
      description: "&lt;Xref:System.Collections.Generic.IEnumerable%601&gt;集合<xref href=&quot;System.Data.EntityKeyMember&quot;></xref>用来初始化键的对象。"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  id: '#ctor(System.String,System.String,System.Object)'
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
  type: Constructor
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "初始化的新实例<xref href=&quot;System.Data.EntityKey&quot;></xref>类使用的实体集名称和特定实体键对。"
  remarks: ''
  example:
  - "This example is based on the [AdventureWorks Sales Model](http://msdn.microsoft.com/en-us/f16cd988-673f-4376-b034-129ca93c7832). The example shows you how to create and use an <xref:System.Data.EntityKey>.  \n  \n [!code-vb[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/visualbasic/objectservicesconceptsvb/Source.vb#addobjectusingkey)]\n [!code-cs[DP ObjectServices Concepts#AddObjectUsingKey](~/add/codesnippet/csharp/objectservicesconceptscs/Source.cs#addobjectusingkey)]"
  syntax:
    content: public EntityKey (string qualifiedEntitySetName, string keyName, object keyValue);
    parameters:
    - id: qualifiedEntitySetName
      type: System.String
      description: "A<xref:System.String>是由实体容器名称限定的实体集名称。</xref:System.String>"
    - id: keyName
      type: System.String
      description: "A <xref:System.String>，它是密钥的名称。</xref:System.String>"
    - id: keyValue
      type: System.Object
      description: "<xref:System.Object>，它是键值。</xref:System.Object>"
  overload: System.Data.EntityKey.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityContainerName
  id: EntityContainerName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "获取或设置实体容器的名称。"
  syntax:
    content: public string EntityContainerName { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>是向其实体的实体容器的名称的值<xref href=&quot;System.Data.EntityKey&quot;></xref>所属。</xref:System.String>"
  overload: System.Data.EntityKey.EntityContainerName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityKeyValues
  id: EntityKeyValues
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "获取或设置与此关联的键值<xref href=&quot;System.Data.EntityKey&quot;> </xref>。"
  remarks: "<xref:System.Data.EntityKey>类包含一份构成此类型的实体的逻辑键指定的值。</xref:System.Data.EntityKey>       成员<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>每个具有属性名称和中的值<xref:System.Collections.Generic.KeyValuePair%602>，其中键是属性名称，值是对象上的该属性的实际值。</xref:System.Collections.Generic.KeyValuePair%602> </xref:System.Collections.ObjectModel.ReadOnlyCollection%601>"
  syntax:
    content: public System.Data.EntityKeyMember[] EntityKeyValues { get; set; }
    return:
      type: System.Data.EntityKeyMember[]
      description: "A &lt;xref:System.Collections.ObjectModel.ReadOnlyCollection%601&gt;的键值的这<xref href=&quot;System.Data.EntityKey&quot;> </xref>。"
  overload: System.Data.EntityKey.EntityKeyValues*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntityNotValidKey
  id: EntityNotValidKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "一个简单<xref href=&quot;System.Data.EntityKey&quot;></xref>标识产生从失败的实体[将](~/add/includes/ajax-current-ext-md.md)操作。"
  remarks: "有多种方法可获得无效实体。 最常见情况的情形是[!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)]查询使用[将](../Topic/TREAT%20\\(Entity%20SQL\\).md)运算符来解释为特定类型的多态类型的实例和该实例不匹配。 ([将](../Topic/TREAT%20\\(Entity%20SQL\\).md)类似于 C#`as`运算符)。 在这种情况下，查询将返回的实体中不是有效，以及生成的实体的实体键设置为 EntityNotValidKey。"
  syntax:
    content: public static readonly System.Data.EntityKey EntityNotValidKey;
    return:
      type: System.Data.EntityKey
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.EntitySetName
  id: EntitySetName
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "获取或设置实体集的名称。"
  syntax:
    content: public string EntitySetName { get; set; }
    return:
      type: System.String
      description: "A<xref:System.String>是实体的名称的值为实体设置到<xref href=&quot;System.Data.EntityKey&quot;></xref>所属。</xref:System.String>"
  overload: System.Data.EntityKey.EntitySetName*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  id: Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "返回一个值，该值指示此实例是否等于指定<xref href=&quot;System.Data.EntityKey&quot;> </xref>。"
  remarks: "临时键具有与永久键比较语义不同︰ 的临时键使用引用相等性。 也就是说，两个引用对同一个临时<xref:System.Data.EntityKey>实例是否相等的但没有其他<xref:System.Data.EntityKey>实例是否相等。</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -永久键确定基于包含键属性和<xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet>的值的相等性 也就是说，你可以拥有两个单独<xref:System.Data.EntityKey>的实例相等，如果它们的实体集相同并且键值相等。</xref:System.Data.EntityKey>       此外，临时键具有无<xref:System.Data.Metadata.Edm.EntitySet>或键值，但永久键执行的操作。</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public bool Equals (System.Data.EntityKey other);
    parameters:
    - id: other
      type: System.Data.EntityKey
      description: "<xref href=&quot;System.Data.EntityKey&quot;> </xref>对象与此实例进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此实例和<code> other </code>具有相等的值; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "返回一个值，该值指示此实例是否与指定的对象相等。"
  remarks: "临时键具有与永久键比较语义不同︰ 的临时键使用引用相等性。 也就是说，两个引用对同一个临时<xref:System.Data.EntityKey>实例是否相等的但没有其他<xref:System.Data.EntityKey>实例是否相等。</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -永久键确定基于包含键属性和<xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet>的值的相等性 也就是说，你可以拥有两个单独<xref:System.Data.EntityKey>的实例相等，如果其<xref:System.Data.Metadata.Edm.EntitySet>对象是否相同并且键值相等。</xref:System.Data.Metadata.Edm.EntitySet> </xref:System.Data.EntityKey>       此外，临时键具有无<xref:System.Data.Metadata.Edm.EntitySet>或键值，但永久键执行的操作。</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "<xref:System.Object>与此实例进行比较。</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果此实例和<code> obj </code>具有相等的值; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.EntityKey.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  id: GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "获取从给定的元数据工作区中将设置为此实体键的实体。"
  remarks: "基于实体容器名称访问的实体集和实体集的键的名称。"
  syntax:
    content: public System.Data.Metadata.Edm.EntitySet GetEntitySet (System.Data.Metadata.Edm.MetadataWorkspace metadataWorkspace);
    parameters:
    - id: metadataWorkspace
      type: System.Data.Metadata.Edm.MetadataWorkspace
      description: "包含该实体元数据工作区。"
    return:
      type: System.Data.Metadata.Edm.EntitySet
      description: "<xref href=&quot;System.Data.Metadata.Edm.EntitySet&quot;> </xref>实体键。"
  overload: System.Data.EntityKey.GetEntitySet*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "在指定的元数据工作区中找不到实体集。"
  platform:
  - net462
- uid: System.Data.EntityKey.GetHashCode
  id: GetHashCode
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "用作当前的哈希函数<xref href=&quot;System.Data.EntityKey&quot;></xref>对象。 GetHashCode 适合于哈希算法和哈希表之类的数据结构。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "当前的哈希代码<xref href=&quot;System.Data.EntityKey&quot;> </xref>。"
  overload: System.Data.EntityKey.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.IsTemporary
  id: IsTemporary
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
  type: Property
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Data.EntityKey&quot;></xref>是临时。"
  remarks: "创建新实体后，[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]定义临时项，并将 IsTemporary 属性设置为`true`。 当调用<xref:System.Data.Objects.ObjectContext.SaveChanges%2A>方法，[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]分配永久密钥，并将 IsTemporary 属性设置为`false`。</xref:System.Data.Objects.ObjectContext.SaveChanges%2A>      1> [!NOTE]&1;> 临时键通过该框架自动构造; 它们不能由用户直接构造。       临时键具有与永久键比较语义不同︰ 的临时键使用引用相等性。 也就是说，两个引用对同一个临时<xref:System.Data.EntityKey>实例是否相等的但没有其他<xref:System.Data.EntityKey>实例是否相等。</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -永久键确定基于包含键属性和<xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet>的值的相等性 也就是说，你可以拥有两个单独<xref:System.Data.EntityKey>的实例相等，如果它们的实体集相同并且键值相等。</xref:System.Data.EntityKey>       此外，临时键具有无<xref:System.Data.Metadata.Edm.EntitySet>或键值，但永久键执行的操作。</xref:System.Data.Metadata.Edm.EntitySet>       当<xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>方法调用实体的<xref:System.Data.Objects.ObjectStateEntry>，从实体转换<xref:System.Data.EntityState>状态<xref:System.Data.EntityState>状态，[!INCLUDE[adonet_ef](~/add/includes/adonet-ef-md.md)]自动计算新的永久键的实体并同步所有临时键引用。</xref:System.Data.EntityState> </xref:System.Data.EntityState> </xref:System.Data.Objects.ObjectStateEntry> </xref:System.Data.Objects.ObjectStateEntry.AcceptChanges%2A>"
  syntax:
    content: public bool IsTemporary { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Data.EntityKey&quot;></xref>临时; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.EntityKey.IsTemporary*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.NoEntitySetKey
  id: NoEntitySetKey
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
  type: Field
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "单一实例<xref href=&quot;System.Data.EntityKey&quot;></xref>通过只读实体标识。"
  remarks: "只读实体标识无效每种方式，只不过它不是与实际实体集相关联的实体。 这可以作为结果的一部分发生[!INCLUDE[esql](~/add/includes/ajax-current-ext-md.md)]构造并返回实体实例 （而不是数据库表中检索到的实体） 查询的文本中所指定的查询。 关联与某个实体集之前，没有实体集的实体无法持久化到数据库。 因此，对象具体化程序对待这种类型的实体就像<xref:System.Data.Objects.MergeOption>指定合并选项，而不考虑指定的实际的合并选项。</xref:System.Data.Objects.MergeOption> 将创建一个实体对象，但将不会解析其标识和它将不会添加到状态管理器作为具体化过程的一部分。"
  syntax:
    content: public static readonly System.Data.EntityKey NoEntitySetKey;
    return:
      type: System.Data.EntityKey
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  id: OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "用于反序列化的帮助器方法<xref href=&quot;System.Data.EntityKey&quot;> </xref>。"
  remarks: "OnDeserialized <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey>反序列化时对象服务使用 有关详细信息，请参阅[序列化对象](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)。"
  syntax:
    content: public void OnDeserialized (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "描述源和给定的序列化流的目标，并提供其他调用方定义的上下文。"
  overload: System.Data.EntityKey.OnDeserialized*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  id: OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
  type: Method
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "用于反序列化的帮助器方法<xref href=&quot;System.Data.EntityKey&quot;> </xref>。"
  remarks: "OnDeserializing <xref:System.Data.EntityKey>.</xref:System.Data.EntityKey>反序列化时对象服务使用 有关详细信息，请参阅[序列化对象](http://msdn.microsoft.com/en-us/06c77f9b-5b2e-4c78-b3e3-8c148ba0ea99)。"
  syntax:
    content: public void OnDeserializing (System.Runtime.Serialization.StreamingContext context);
    parameters:
    - id: context
      type: System.Runtime.Serialization.StreamingContext
      description: "描述源和目标的给定序列化流中，并提供其他调用方定义的上下文。"
  overload: System.Data.EntityKey.OnDeserializing*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "比较两个<xref href=&quot;System.Data.EntityKey&quot;></xref>对象。"
  remarks: "临时键具有与永久键比较语义不同︰ 的临时键使用引用相等性。 也就是说，两个引用对同一个临时<xref:System.Data.EntityKey>实例是否相等的但没有其他<xref:System.Data.EntityKey>实例是否相等。</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -永久键确定基于包含键属性和<xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet>的值的相等性 也就是说，你可以拥有两个单独<xref:System.Data.EntityKey>的实例相等，如果它们的实体集相同并且键值相等。</xref:System.Data.EntityKey>       此外，临时键具有无<xref:System.Data.Metadata.Edm.EntitySet>或键值，但永久键执行的操作。</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Equality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref>进行比较。"
    - id: key2
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref>进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  id: op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  langs:
  - csharp
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
  type: Operator
  assemblies:
  - System.Data.Entity
  namespace: System.Data
  summary: "比较两个<xref href=&quot;System.Data.EntityKey&quot;></xref>对象。"
  remarks: "临时键具有与永久键比较语义不同︰ 的临时键使用引用相等性。 也就是说，两个引用对同一个临时<xref:System.Data.EntityKey>实例是否相等的但没有其他<xref:System.Data.EntityKey>实例是否相等。</xref:System.Data.EntityKey> </xref:System.Data.EntityKey>      -永久键确定基于包含键属性和<xref:System.Data.Metadata.Edm.EntitySet>.</xref:System.Data.Metadata.Edm.EntitySet>的值的相等性 也就是说，你可以拥有两个单独<xref:System.Data.EntityKey>的实例相等，如果它们的实体集相同并且键值相等。</xref:System.Data.EntityKey>       此外，临时键具有无<xref:System.Data.Metadata.Edm.EntitySet>或键值，但常规键执行的操作。</xref:System.Data.Metadata.Edm.EntitySet>"
  syntax:
    content: public static bool op_Inequality (System.Data.EntityKey key1, System.Data.EntityKey key2);
    parameters:
    - id: key1
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref>进行比较。"
    - id: key2
      type: System.Data.EntityKey
      description: "A <xref href=&quot;System.Data.EntityKey&quot;> </xref>进行比较。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <code>key1</code> and <code>key2</code> values are not equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Data.EntityKey.op_Inequality*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.EntityKey.#ctor
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey()
  nameWithType: EntityKey.EntityKey()
  fullName: System.Data.EntityKey.EntityKey()
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<KeyValuePair<String,Object>>)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<KeyValuePair<String,Object>>
  nameWithType: IEnumerable<KeyValuePair<String,Object>>
  fullName: System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Collections.Generic.KeyValuePair<System.String,System.Object>>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.KeyValuePair`2
    name: KeyValuePair
    nameWithType: KeyValuePair
    fullName: KeyValuePair<System.String,System.Object>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember})
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,IEnumerable<EntityKeyMember>)
  nameWithType: EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
  fullName: System.Data.EntityKey.EntityKey(String,IEnumerable<EntityKeyMember>)
- uid: System.Collections.Generic.IEnumerable{System.Data.EntityKeyMember}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<EntityKeyMember>
  nameWithType: IEnumerable<EntityKeyMember>
  fullName: System.Collections.Generic.IEnumerable<System.Data.EntityKeyMember>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Data.EntityKeyMember>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Data.EntityKey.#ctor(System.String,System.String,System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey(String,String,Object)
  nameWithType: EntityKey.EntityKey(String,String,Object)
  fullName: System.Data.EntityKey.EntityKey(String,String,Object)
- uid: System.Data.EntityKey.EntityContainerName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
  fullName: System.Data.EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
  fullName: System.Data.EntityKey.EntityKeyValues
- uid: System.Data.EntityKeyMember[]
  parent: System.Data
  isExternal: false
  name: EntityKeyMember
  nameWithType: EntityKeyMember
  fullName: System.Data.EntityKeyMember[]
  spec.csharp:
  - uid: System.Data.EntityKeyMember
    name: EntityKeyMember
    nameWithType: EntityKeyMember
    fullName: EntityKeyMember[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.EntityKey.EntityNotValidKey
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityNotValidKey
  nameWithType: EntityKey.EntityNotValidKey
  fullName: System.Data.EntityKey.EntityNotValidKey
- uid: System.Data.EntityKey
  parent: System.Data
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey
  fullName: System.Data.EntityKey
- uid: System.Data.EntityKey.EntitySetName
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
  fullName: System.Data.EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals(System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(EntityKey)
  nameWithType: EntityKey.Equals(EntityKey)
  fullName: System.Data.EntityKey.Equals(EntityKey)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.EntityKey.Equals(System.Object)
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals(Object)
  nameWithType: EntityKey.Equals(Object)
  fullName: System.Data.EntityKey.Equals(Object)
- uid: System.Data.EntityKey.GetEntitySet(System.Data.Metadata.Edm.MetadataWorkspace)
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet(MetadataWorkspace)
  nameWithType: EntityKey.GetEntitySet(MetadataWorkspace)
  fullName: System.Data.EntityKey.GetEntitySet(MetadataWorkspace)
- uid: System.Data.Metadata.Edm.EntitySet
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: EntitySet
  nameWithType: EntitySet
  fullName: System.Data.Metadata.Edm.EntitySet
- uid: System.Data.Metadata.Edm.MetadataWorkspace
  parent: System.Data.Metadata.Edm
  isExternal: false
  name: MetadataWorkspace
  nameWithType: MetadataWorkspace
  fullName: System.Data.Metadata.Edm.MetadataWorkspace
- uid: System.Data.EntityKey.GetHashCode
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode()
  nameWithType: EntityKey.GetHashCode()
  fullName: System.Data.EntityKey.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.EntityKey.IsTemporary
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
  fullName: System.Data.EntityKey.IsTemporary
- uid: System.Data.EntityKey.NoEntitySetKey
  parent: System.Data.EntityKey
  isExternal: false
  name: NoEntitySetKey
  nameWithType: EntityKey.NoEntitySetKey
  fullName: System.Data.EntityKey.NoEntitySetKey
- uid: System.Data.EntityKey.OnDeserialized(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized(StreamingContext)
  nameWithType: EntityKey.OnDeserialized(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserialized(StreamingContext)
- uid: System.Runtime.Serialization.StreamingContext
  parent: System.Runtime.Serialization
  isExternal: true
  name: StreamingContext
  nameWithType: StreamingContext
  fullName: System.Runtime.Serialization.StreamingContext
- uid: System.Data.EntityKey.OnDeserializing(System.Runtime.Serialization.StreamingContext)
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing(StreamingContext)
  nameWithType: EntityKey.OnDeserializing(StreamingContext)
  fullName: System.Data.EntityKey.OnDeserializing(StreamingContext)
- uid: System.Data.EntityKey.op_Equality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Equality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Equality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.op_Inequality(System.Data.EntityKey,System.Data.EntityKey)
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality(EntityKey,EntityKey)
  nameWithType: EntityKey.op_Inequality(EntityKey,EntityKey)
  fullName: System.Data.EntityKey.op_Inequality(EntityKey,EntityKey)
- uid: System.Data.EntityKey.#ctor*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKey
  nameWithType: EntityKey.EntityKey
- uid: System.Data.EntityKey.EntityContainerName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityContainerName
  nameWithType: EntityKey.EntityContainerName
- uid: System.Data.EntityKey.EntityKeyValues*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntityKeyValues
  nameWithType: EntityKey.EntityKeyValues
- uid: System.Data.EntityKey.EntitySetName*
  parent: System.Data.EntityKey
  isExternal: false
  name: EntitySetName
  nameWithType: EntityKey.EntitySetName
- uid: System.Data.EntityKey.Equals*
  parent: System.Data.EntityKey
  isExternal: false
  name: Equals
  nameWithType: EntityKey.Equals
- uid: System.Data.EntityKey.GetEntitySet*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetEntitySet
  nameWithType: EntityKey.GetEntitySet
- uid: System.Data.EntityKey.GetHashCode*
  parent: System.Data.EntityKey
  isExternal: false
  name: GetHashCode
  nameWithType: EntityKey.GetHashCode
- uid: System.Data.EntityKey.IsTemporary*
  parent: System.Data.EntityKey
  isExternal: false
  name: IsTemporary
  nameWithType: EntityKey.IsTemporary
- uid: System.Data.EntityKey.OnDeserialized*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserialized
  nameWithType: EntityKey.OnDeserialized
- uid: System.Data.EntityKey.OnDeserializing*
  parent: System.Data.EntityKey
  isExternal: false
  name: OnDeserializing
  nameWithType: EntityKey.OnDeserializing
- uid: System.Data.EntityKey.op_Equality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Equality
  nameWithType: EntityKey.op_Equality
- uid: System.Data.EntityKey.op_Inequality*
  parent: System.Data.EntityKey
  isExternal: false
  name: op_Inequality
  nameWithType: EntityKey.op_Inequality
