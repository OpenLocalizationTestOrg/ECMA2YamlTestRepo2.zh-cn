### YamlMime:ManagedReference
items:
- uid: Microsoft.JScript.ScriptObject
  id: ScriptObject
  children:
  - Microsoft.JScript.ScriptObject.engine
  - Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  - Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetParent
  - Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)
  - Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  - Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  - Microsoft.JScript.ScriptObject.Item(System.Double)
  - Microsoft.JScript.ScriptObject.Item(System.Int32)
  - Microsoft.JScript.ScriptObject.Item(System.Object[])
  - Microsoft.JScript.ScriptObject.Item(System.String)
  - Microsoft.JScript.ScriptObject.parent
  - Microsoft.JScript.ScriptObject.UnderlyingSystemType
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)
  - Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)
  langs:
  - csharp
  name: ScriptObject
  nameWithType: ScriptObject
  fullName: Microsoft.JScript.ScriptObject
  type: Class
  summary: "支持的所有 JScript 类。 这是所有 JScript 类的最终基类。 此类所属的对象和函数的类别。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class ScriptObject : System.Reflection.IReflect
  inheritance:
  - System.Object
  implements:
  - System.Reflection.IReflect
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.engine
  id: engine
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: engine
  nameWithType: ScriptObject.engine
  fullName: Microsoft.JScript.ScriptObject.engine
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "存储对脚本引擎的引用。"
  syntax:
    content: public Microsoft.JScript.Vsa.VsaEngine engine;
    return:
      type: Microsoft.JScript.Vsa.VsaEngine
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)
  id: GetField(System.String,System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetField(String,BindingFlags)
  nameWithType: ScriptObject.GetField(String,BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetField(String,BindingFlags)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取具有指定的名称的字段。"
  syntax:
    content: public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "要获取的字段的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    return:
      type: System.Reflection.FieldInfo
      description: "具有指定的字段<code> name </code>，或如果该脚本对象不包含该字段为 null。"
  overload: Microsoft.JScript.ScriptObject.GetField*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)
  id: GetFields(System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetFields(BindingFlags)
  nameWithType: ScriptObject.GetFields(BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetFields(BindingFlags)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取一个数组<xref:System.Reflection.FieldInfo>对应于当前的脚本对象的所有字段的对象。</xref:System.Reflection.FieldInfo>"
  syntax:
    content: public virtual System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    return:
      type: System.Reflection.FieldInfo[]
      description: "包含当前的脚本对象的所有字段的对象数组。"
  overload: Microsoft.JScript.ScriptObject.GetFields*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)
  id: GetMember(System.String,System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetMember(String,BindingFlags)
  nameWithType: ScriptObject.GetMember(String,BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetMember(String,BindingFlags)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "当在派生类中重写，获取一个数组<xref:System.Reflection.MemberInfo>对应于匹配指定的名称的所有成员的对象。</xref:System.Reflection.MemberInfo>"
  syntax:
    content: public abstract System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "要搜索的成员名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    return:
      type: System.Reflection.MemberInfo[]
      description: "匹配的对象的数组<code> name </code>自变量。"
  overload: Microsoft.JScript.ScriptObject.GetMember*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)
  id: GetMembers(System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetMembers(BindingFlags)
  nameWithType: ScriptObject.GetMembers(BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetMembers(BindingFlags)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "当在派生类中重写，获取一个数组<xref:System.Reflection.MemberInfo>对应于当前的脚本对象的所有成员的对象。</xref:System.Reflection.MemberInfo>"
  syntax:
    content: public abstract System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    return:
      type: System.Reflection.MemberInfo[]
      description: "包含当前的脚本对象的所有成员的对象数组。"
  overload: Microsoft.JScript.ScriptObject.GetMembers*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)
  id: GetMethod(System.String,System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetMethod(String,BindingFlags)
  nameWithType: ScriptObject.GetMethod(String,BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetMethod(String,BindingFlags)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取具有指定的名称的方法。"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "要获取的方法的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    return:
      type: System.Reflection.MethodInfo
      description: "具有指定的方法<code> name </code>，如果该脚本对象不包含方法则为 null。"
  overload: Microsoft.JScript.ScriptObject.GetMethod*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  id: GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: ScriptObject.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: Microsoft.JScript.ScriptObject.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取使用指定的选择条件中具有指定的名称的方法。"
  syntax:
    content: public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "要搜索的方法名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    - id: binder
      type: System.Reflection.Binder
      description: "执行从实参类型到形参类型的类型转换的对象。"
    - id: types
      type: System.Type[]
      description: "中用于查找匹配方法的参数类型。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "启用绑定，以便与在其中修改类型的参数签名一起工作的参数修饰符的数组。"
    return:
      type: System.Reflection.MethodInfo
      description: "具有指定的方法<code> name </code>，如果该脚本对象不包含方法则为 null。"
  overload: Microsoft.JScript.ScriptObject.GetMethod*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)
  id: GetMethods(System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetMethods(BindingFlags)
  nameWithType: ScriptObject.GetMethods(BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetMethods(BindingFlags)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取一个数组<xref:System.Reflection.MethodInfo>对应于当前的脚本对象的所有方法的对象。</xref:System.Reflection.MethodInfo>"
  syntax:
    content: public virtual System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    return:
      type: System.Reflection.MethodInfo[]
      description: "包含当前的脚本对象的所有方法的对象数组。"
  overload: Microsoft.JScript.ScriptObject.GetMethods*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetParent
  id: GetParent
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetParent()
  nameWithType: ScriptObject.GetParent()
  fullName: Microsoft.JScript.ScriptObject.GetParent()
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取对父对象的引用。"
  remarks: "父级是脚本对象向其委托，它未实现本身的属性或方法的请求的对象。 例如，当创建<xref:Microsoft.JScript.NumberObject>通过使用<xref:Microsoft.JScript.NumberConstructor>，则父级是一种<xref:Microsoft.JScript.NumberPrototype>。</xref:Microsoft.JScript.NumberPrototype> </xref:Microsoft.JScript.NumberConstructor> </xref:Microsoft.JScript.NumberObject>"
  syntax:
    content: public Microsoft.JScript.ScriptObject GetParent ();
    parameters: []
    return:
      type: Microsoft.JScript.ScriptObject
      description: "对父对象的引用。"
  overload: Microsoft.JScript.ScriptObject.GetParent*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)
  id: GetProperties(System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetProperties(BindingFlags)
  nameWithType: ScriptObject.GetProperties(BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetProperties(BindingFlags)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取一个数组<xref:System.Reflection.PropertyInfo>对应于当前的脚本对象的所有属性的对象。</xref:System.Reflection.PropertyInfo>"
  syntax:
    content: public virtual System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    return:
      type: System.Reflection.PropertyInfo[]
      description: "包含当前的脚本对象的所有属性的对象数组。"
  overload: Microsoft.JScript.ScriptObject.GetProperties*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)
  id: GetProperty(System.String,System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetProperty(String,BindingFlags)
  nameWithType: ScriptObject.GetProperty(String,BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetProperty(String,BindingFlags)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取具有指定的名称的属性。"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);
    parameters:
    - id: name
      type: System.String
      description: "要获取的属性的名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    return:
      type: System.Reflection.PropertyInfo
      description: "具有指定的属性<code> name </code>，如果该脚本对象不包含属性则为 null。"
  overload: Microsoft.JScript.ScriptObject.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  id: GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: ScriptObject.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: Microsoft.JScript.ScriptObject.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取使用指定的选择条件中具有指定的名称的属性。"
  syntax:
    content: public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);
    parameters:
    - id: name
      type: System.String
      description: "要搜索的属性名称。"
    - id: bindingAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    - id: binder
      type: System.Reflection.Binder
      description: "执行从实参类型到形参类型的类型转换的对象。"
    - id: returnType
      type: System.Type
      description: "该属性必须具有的返回值的类型。"
    - id: types
      type: System.Type[]
      description: "要搜索的属性索引类型。 用于索引属性，例如一个类的索引器。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "启用绑定，以便与在其中修改类型的参数签名一起工作的参数修饰符的数组。"
    return:
      type: System.Reflection.PropertyInfo
      description: "具有指定的属性<code> name </code>，如果该脚本对象不包含属性则为 null。"
  overload: Microsoft.JScript.ScriptObject.GetProperty*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  id: InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: ScriptObject.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: Microsoft.JScript.ScriptObject.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "调用指定的成员。"
  syntax:
    content: public virtual object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo locale, string[] namedParameters);
    parameters:
    - id: name
      type: System.String
      description: "要调用的成员的名称。"
    - id: invokeAttr
      type: System.Reflection.BindingFlags
      description: "指定如何通过反射执行成员搜索枚举值的按位组合。"
    - id: binder
      type: System.Reflection.Binder
      description: "执行从实参类型到形参类型的类型转换的对象。"
    - id: target
      type: System.Object
      description: "对其调用成员的对象。 这必须是当前的脚本对象。"
    - id: args
      type: System.Object[]
      description: "包含要调用的数量、 顺序和成员的参数的类型的对象数组。 如果任何参数，这是一个空数组。"
    - id: modifiers
      type: System.Reflection.ParameterModifier[]
      description: "具有相同的长度，作为参数参数数组。 它表示被调用的成员的自变量的元数据中的属性。"
    - id: locale
      type: System.Globalization.CultureInfo
      description: "提供有关特定区域性或区域设置信息。 用于正确地设置数字、 日期和字符串的格式。"
    - id: namedParameters
      type: System.String[]
      description: "参数的数组。"
    return:
      type: System.Object
      description: "对成员的调用返回值。"
  overload: Microsoft.JScript.ScriptObject.InvokeMember*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.Item(System.Double)
  id: Item(System.Double)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: Item(Double)
  nameWithType: ScriptObject.Item(Double)
  fullName: Microsoft.JScript.ScriptObject.Item(Double)
  type: Property
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取或设置属于脚本对象，该对象指定由指定<xref:System.Double>索引值。</xref:System.Double>"
  syntax:
    content: public object this[double index] { get; set; }
    parameters:
    - id: index
      type: System.Double
      description: "成员的索引。"
    return:
      type: System.Object
      description: "位于成员的值<code> index </code>。"
  overload: Microsoft.JScript.ScriptObject.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: ScriptObject.Item(Int32)
  fullName: Microsoft.JScript.ScriptObject.Item(Int32)
  type: Property
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取或设置属于脚本对象，该对象指定由指定<xref:System.Int32>索引值。</xref:System.Int32>"
  syntax:
    content: public object this[int index] { get; set; }
    parameters:
    - id: index
      type: System.Int32
      description: "成员的索引。"
    return:
      type: System.Object
      description: "位于成员的值<code> index </code>。"
  overload: Microsoft.JScript.ScriptObject.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.Item(System.Object[])
  id: Item(System.Object[])
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: Item(Object[])
  nameWithType: ScriptObject.Item(Object[])
  fullName: Microsoft.JScript.ScriptObject.Item(Object[])
  type: Property
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取或设置由指定的名称，该脚本对象的成员<xref:System.Double>索引值，或<xref:System.Int32>索引值。</xref:System.Int32> </xref:System.Double>"
  remarks: "如果`pars`数组有多个元素，最后一个元素为此属性的自变量。"
  syntax:
    content: public object this[object[] pars] { get; set; }
    parameters:
    - id: pars
      type: System.Object[]
      description: "名称或成员的索引。"
    return:
      type: System.Object
      description: "中指定的成员的值<code> pars </code>。"
  overload: Microsoft.JScript.ScriptObject.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.Item(System.String)
  id: Item(System.String)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: Item(String)
  nameWithType: ScriptObject.Item(String)
  fullName: Microsoft.JScript.ScriptObject.Item(String)
  type: Property
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取或设置由指定的名称指定的脚本对象的成员。"
  syntax:
    content: public object this[string name] { get; set; }
    parameters:
    - id: name
      type: System.String
      description: "成员的名称。"
    return:
      type: System.Object
      description: "名为成员的值<code> name </code>。"
  overload: Microsoft.JScript.ScriptObject.Item*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.parent
  id: parent
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: parent
  nameWithType: ScriptObject.parent
  fullName: Microsoft.JScript.ScriptObject.parent
  type: Field
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "将存储对父对象的引用。"
  remarks: "父级是脚本对象向其委托，它未实现本身的属性或方法的请求的对象。 例如，当创建<xref:Microsoft.JScript.NumberObject>通过使用<xref:Microsoft.JScript.NumberConstructor>，则父级是一种<xref:Microsoft.JScript.NumberPrototype>。</xref:Microsoft.JScript.NumberPrototype> </xref:Microsoft.JScript.NumberConstructor> </xref:Microsoft.JScript.NumberObject>"
  syntax:
    content: protected Microsoft.JScript.ScriptObject parent;
    return:
      type: Microsoft.JScript.ScriptObject
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.UnderlyingSystemType
  id: UnderlyingSystemType
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: UnderlyingSystemType
  nameWithType: ScriptObject.UnderlyingSystemType
  fullName: Microsoft.JScript.ScriptObject.UnderlyingSystemType
  type: Property
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "获取脚本对象的类型。"
  syntax:
    content: public virtual Type UnderlyingSystemType { get; }
    return:
      type: System.Type
      description: "脚本对象的类型。"
  overload: Microsoft.JScript.ScriptObject.UnderlyingSystemType*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)
  id: WrapMembers(System.Reflection.MemberInfo,System.Object)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: WrapMembers(MemberInfo,Object)
  nameWithType: ScriptObject.WrapMembers(MemberInfo,Object)
  fullName: Microsoft.JScript.ScriptObject.WrapMembers(MemberInfo,Object)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "创建已包装的对象包含与指定的对象的指定的成员。"
  remarks: "此方法支持不包含要将其存储，然后返回其值，就像它是其自己的成员的其他对象。"
  syntax:
    content: protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo member, object obj);
    parameters:
    - id: member
      type: System.Reflection.MemberInfo
      description: "要包装的成员。"
    - id: obj
      type: System.Object
      description: "对象的`member`上定义。"
    return:
      type: System.Reflection.MemberInfo[]
      description: "已包装的对象，其中包含成员信息的一个元素数组和<code> obj </code>。"
  overload: Microsoft.JScript.ScriptObject.WrapMembers*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)
  id: WrapMembers(System.Reflection.MemberInfo[],System.Object)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: WrapMembers(MemberInfo[],Object)
  nameWithType: ScriptObject.WrapMembers(MemberInfo[],Object)
  fullName: Microsoft.JScript.ScriptObject.WrapMembers(MemberInfo[],Object)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "创建包含指定的成员以及指定的对象的已包装对象的数组。"
  remarks: "此方法支持不包含这些成员将其存储，然后返回其值，就像它们是其自己的其他对象。"
  syntax:
    content: protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo[] members, object obj);
    parameters:
    - id: members
      type: System.Reflection.MemberInfo[]
      description: "要包装的成员。"
    - id: obj
      type: System.Object
      description: "对象的`members`上定义。"
    return:
      type: System.Reflection.MemberInfo[]
      description: "数组的已包装的对象，其中每个包含成员信息和一份<code> obj </code>。"
  overload: Microsoft.JScript.ScriptObject.WrapMembers*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)
  id: WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)
  parent: Microsoft.JScript.ScriptObject
  langs:
  - csharp
  name: WrapMembers(MemberInfo[],Object,SimpleHashtable)
  nameWithType: ScriptObject.WrapMembers(MemberInfo[],Object,SimpleHashtable)
  fullName: Microsoft.JScript.ScriptObject.WrapMembers(MemberInfo[],Object,SimpleHashtable)
  type: Method
  assemblies:
  - Microsoft.JScript
  namespace: Microsoft.JScript
  summary: "创建包含指定的成员以及指定的对象中，缓存中指定的数据存储的结果的已包装对象的数组。"
  remarks: "此方法支持不包含这些成员将其存储，然后返回其值，就像它们是其自己的其他对象。"
  syntax:
    content: protected static System.Reflection.MemberInfo[] WrapMembers (System.Reflection.MemberInfo[] members, object obj, Microsoft.JScript.SimpleHashtable cache);
    parameters:
    - id: members
      type: System.Reflection.MemberInfo[]
      description: "要包装的成员。"
    - id: obj
      type: System.Object
      description: "对象的`members`上定义。"
    - id: cache
      type: Microsoft.JScript.SimpleHashtable
      description: "已包装的对象的临时数据存储。"
    return:
      type: System.Reflection.MemberInfo[]
      description: "数组的已包装的对象，其中每个包含成员信息和一份<code> obj </code>。"
  overload: Microsoft.JScript.ScriptObject.WrapMembers*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: Microsoft.JScript.ScriptObject.engine
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: engine
  nameWithType: ScriptObject.engine
  fullName: Microsoft.JScript.ScriptObject.engine
- uid: Microsoft.JScript.Vsa.VsaEngine
  parent: Microsoft.JScript.Vsa
  isExternal: false
  name: VsaEngine
  nameWithType: VsaEngine
  fullName: Microsoft.JScript.Vsa.VsaEngine
- uid: Microsoft.JScript.ScriptObject.GetField(System.String,System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetField(String,BindingFlags)
  nameWithType: ScriptObject.GetField(String,BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetField(String,BindingFlags)
- uid: System.Reflection.FieldInfo
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Reflection.BindingFlags
  parent: System.Reflection
  isExternal: false
  name: BindingFlags
  nameWithType: BindingFlags
  fullName: System.Reflection.BindingFlags
- uid: Microsoft.JScript.ScriptObject.GetFields(System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetFields(BindingFlags)
  nameWithType: ScriptObject.GetFields(BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetFields(BindingFlags)
- uid: System.Reflection.FieldInfo[]
  parent: System.Reflection
  isExternal: true
  name: FieldInfo
  nameWithType: FieldInfo
  fullName: System.Reflection.FieldInfo[]
  spec.csharp:
  - uid: System.Reflection.FieldInfo
    name: FieldInfo
    nameWithType: FieldInfo
    fullName: FieldInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.JScript.ScriptObject.GetMember(System.String,System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMember(String,BindingFlags)
  nameWithType: ScriptObject.GetMember(String,BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetMember(String,BindingFlags)
- uid: System.Reflection.MemberInfo[]
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo[]
  spec.csharp:
  - uid: System.Reflection.MemberInfo
    name: MemberInfo
    nameWithType: MemberInfo
    fullName: MemberInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.JScript.ScriptObject.GetMembers(System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMembers(BindingFlags)
  nameWithType: ScriptObject.GetMembers(BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetMembers(BindingFlags)
- uid: Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMethod(String,BindingFlags)
  nameWithType: ScriptObject.GetMethod(String,BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetMethod(String,BindingFlags)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: Microsoft.JScript.ScriptObject.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  nameWithType: ScriptObject.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
  fullName: Microsoft.JScript.ScriptObject.GetMethod(String,BindingFlags,Binder,Type[],ParameterModifier[])
- uid: System.Reflection.Binder
  parent: System.Reflection
  isExternal: false
  name: Binder
  nameWithType: Binder
  fullName: System.Reflection.Binder
- uid: System.Type[]
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type[]
  spec.csharp:
  - uid: System.Type
    name: Type
    nameWithType: Type
    fullName: Type[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Reflection.ParameterModifier[]
  parent: System.Reflection
  isExternal: false
  name: ParameterModifier
  nameWithType: ParameterModifier
  fullName: System.Reflection.ParameterModifier[]
  spec.csharp:
  - uid: System.Reflection.ParameterModifier
    name: ParameterModifier
    nameWithType: ParameterModifier
    fullName: ParameterModifier[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.JScript.ScriptObject.GetMethods(System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMethods(BindingFlags)
  nameWithType: ScriptObject.GetMethods(BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetMethods(BindingFlags)
- uid: System.Reflection.MethodInfo[]
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo[]
  spec.csharp:
  - uid: System.Reflection.MethodInfo
    name: MethodInfo
    nameWithType: MethodInfo
    fullName: MethodInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.JScript.ScriptObject.GetParent
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetParent()
  nameWithType: ScriptObject.GetParent()
  fullName: Microsoft.JScript.ScriptObject.GetParent()
- uid: Microsoft.JScript.ScriptObject
  parent: Microsoft.JScript
  isExternal: false
  name: ScriptObject
  nameWithType: ScriptObject
  fullName: Microsoft.JScript.ScriptObject
- uid: Microsoft.JScript.ScriptObject.GetProperties(System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetProperties(BindingFlags)
  nameWithType: ScriptObject.GetProperties(BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetProperties(BindingFlags)
- uid: System.Reflection.PropertyInfo[]
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo[]
  spec.csharp:
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    nameWithType: PropertyInfo
    fullName: PropertyInfo[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetProperty(String,BindingFlags)
  nameWithType: ScriptObject.GetProperty(String,BindingFlags)
  fullName: Microsoft.JScript.ScriptObject.GetProperty(String,BindingFlags)
- uid: System.Reflection.PropertyInfo
  parent: System.Reflection
  isExternal: true
  name: PropertyInfo
  nameWithType: PropertyInfo
  fullName: System.Reflection.PropertyInfo
- uid: Microsoft.JScript.ScriptObject.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  nameWithType: ScriptObject.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
  fullName: Microsoft.JScript.ScriptObject.GetProperty(String,BindingFlags,Binder,Type,Type[],ParameterModifier[])
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: Microsoft.JScript.ScriptObject.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  nameWithType: ScriptObject.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
  fullName: Microsoft.JScript.ScriptObject.InvokeMember(String,BindingFlags,Binder,Object,Object[],ParameterModifier[],CultureInfo,String[])
- uid: System.Object[]
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object[]
  spec.csharp:
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: Object[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: Microsoft.JScript.ScriptObject.Item(System.Double)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: Item(Double)
  nameWithType: ScriptObject.Item(Double)
  fullName: Microsoft.JScript.ScriptObject.Item(Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: Microsoft.JScript.ScriptObject.Item(System.Int32)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: Item(Int32)
  nameWithType: ScriptObject.Item(Int32)
  fullName: Microsoft.JScript.ScriptObject.Item(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.JScript.ScriptObject.Item(System.Object[])
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: Item(Object[])
  nameWithType: ScriptObject.Item(Object[])
  fullName: Microsoft.JScript.ScriptObject.Item(Object[])
- uid: Microsoft.JScript.ScriptObject.Item(System.String)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: Item(String)
  nameWithType: ScriptObject.Item(String)
  fullName: Microsoft.JScript.ScriptObject.Item(String)
- uid: Microsoft.JScript.ScriptObject.parent
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: parent
  nameWithType: ScriptObject.parent
  fullName: Microsoft.JScript.ScriptObject.parent
- uid: Microsoft.JScript.ScriptObject.UnderlyingSystemType
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: ScriptObject.UnderlyingSystemType
  fullName: Microsoft.JScript.ScriptObject.UnderlyingSystemType
- uid: Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo,System.Object)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: WrapMembers(MemberInfo,Object)
  nameWithType: ScriptObject.WrapMembers(MemberInfo,Object)
  fullName: Microsoft.JScript.ScriptObject.WrapMembers(MemberInfo,Object)
- uid: System.Reflection.MemberInfo
  parent: System.Reflection
  isExternal: true
  name: MemberInfo
  nameWithType: MemberInfo
  fullName: System.Reflection.MemberInfo
- uid: Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: WrapMembers(MemberInfo[],Object)
  nameWithType: ScriptObject.WrapMembers(MemberInfo[],Object)
  fullName: Microsoft.JScript.ScriptObject.WrapMembers(MemberInfo[],Object)
- uid: Microsoft.JScript.ScriptObject.WrapMembers(System.Reflection.MemberInfo[],System.Object,Microsoft.JScript.SimpleHashtable)
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: WrapMembers(MemberInfo[],Object,SimpleHashtable)
  nameWithType: ScriptObject.WrapMembers(MemberInfo[],Object,SimpleHashtable)
  fullName: Microsoft.JScript.ScriptObject.WrapMembers(MemberInfo[],Object,SimpleHashtable)
- uid: Microsoft.JScript.SimpleHashtable
  parent: Microsoft.JScript
  isExternal: false
  name: SimpleHashtable
  nameWithType: SimpleHashtable
  fullName: Microsoft.JScript.SimpleHashtable
- uid: Microsoft.JScript.ScriptObject.GetField*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetField
  nameWithType: ScriptObject.GetField
- uid: Microsoft.JScript.ScriptObject.GetFields*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetFields
  nameWithType: ScriptObject.GetFields
- uid: Microsoft.JScript.ScriptObject.GetMember*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMember
  nameWithType: ScriptObject.GetMember
- uid: Microsoft.JScript.ScriptObject.GetMembers*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMembers
  nameWithType: ScriptObject.GetMembers
- uid: Microsoft.JScript.ScriptObject.GetMethod*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMethod
  nameWithType: ScriptObject.GetMethod
- uid: Microsoft.JScript.ScriptObject.GetMethods*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetMethods
  nameWithType: ScriptObject.GetMethods
- uid: Microsoft.JScript.ScriptObject.GetParent*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetParent
  nameWithType: ScriptObject.GetParent
- uid: Microsoft.JScript.ScriptObject.GetProperties*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetProperties
  nameWithType: ScriptObject.GetProperties
- uid: Microsoft.JScript.ScriptObject.GetProperty*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: GetProperty
  nameWithType: ScriptObject.GetProperty
- uid: Microsoft.JScript.ScriptObject.InvokeMember*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: InvokeMember
  nameWithType: ScriptObject.InvokeMember
- uid: Microsoft.JScript.ScriptObject.Item*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: Item
  nameWithType: ScriptObject.Item
- uid: Microsoft.JScript.ScriptObject.UnderlyingSystemType*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: UnderlyingSystemType
  nameWithType: ScriptObject.UnderlyingSystemType
- uid: Microsoft.JScript.ScriptObject.WrapMembers*
  parent: Microsoft.JScript.ScriptObject
  isExternal: false
  name: WrapMembers
  nameWithType: ScriptObject.WrapMembers
