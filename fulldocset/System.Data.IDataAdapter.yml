### YamlMime:ManagedReference
items:
- uid: System.Data.IDataAdapter
  id: IDataAdapter
  children:
  - System.Data.IDataAdapter.Fill(System.Data.DataSet)
  - System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  - System.Data.IDataAdapter.GetFillParameters
  - System.Data.IDataAdapter.MissingMappingAction
  - System.Data.IDataAdapter.MissingSchemaAction
  - System.Data.IDataAdapter.TableMappings
  - System.Data.IDataAdapter.Update(System.Data.DataSet)
  langs:
  - csharp
  name: IDataAdapter
  nameWithType: IDataAdapter
  fullName: System.Data.IDataAdapter
  type: Interface
  summary: "允许对象实现 DataAdapter，和表示一组方法和映射操作相关的属性，用于填充和更新的<xref href=&quot;System.Data.DataSet&quot;></xref>和更新数据源。       <xref href=&quot;System.Data.IDbDataAdapter&quot;></xref>实例是否为数据源 （或类似于） 使用文本命令的关系数据库 (如[!INCLUDE[tsql](~/add/includes/tsql-md.md)])，而 IDataAdapter 实例可以使用任何类型的数据源。"
  remarks: "IDataAdapter 接口允许继承类实现 DataAdapter 类，该类表示数据源和一种<xref:System.Data.DataSet>。</xref:System.Data.DataSet>之间桥 有关 DataAdapter 类的详细信息，请参阅[填充数据集从 DataAdapter](~/add/includes/ajax-current-ext-md.md)。       应用程序不会直接创建 IDataAdapter 接口的实例，但实现继承 IDataAdapter 的类的实例。       继承 IDataAdapter 的类必须实现继承的成员，且通常会定义其他成员来添加提供程序特定的功能。 例如，IDataAdapter 接口定义<xref:System.Data.IDataAdapter.Fill%2A>采用的方法<xref:System.Data.DataSet>作为参数。</xref:System.Data.DataSet> </xref:System.Data.IDataAdapter.Fill%2A> 反过来，<xref:System.Data.OleDb.OleDbDataAdapter>类继承<xref:System.Data.Common.DbDataAdapter.Fill%2A>方法和还定义了两个其他重载<xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A>作为参数的 ADO 记录集对象的方法。</xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> </xref:System.Data.Common.DbDataAdapter.Fill%2A> </xref:System.Data.OleDb.OleDbDataAdapter>"
  example:
  - "The following example uses the derived classes, <xref:System.Data.SqlClient.SqlCommand>, <xref:System.Data.SqlClient.SqlDataAdapter>, and <xref:System.Data.SqlClient.SqlConnection>, to select records from a database. The filled <xref:System.Data.DataSet> is then returned. To do this, the method is passed an initialized <xref:System.Data.DataSet>, a connection string, and a query string that is a Transact-SQL SELECT statement.  \n  \n [!code-vb[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/visualbasic/t-system.data.idataadapter_1.vb)]\n [!code-cs[Classic WebData SqlDataAdapter Example#1](~/add/codesnippet/csharp/t-system.data.idataadapter_1.cs)]"
  syntax:
    content: public interface IDataAdapter
  implements: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  id: Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "添加或更新中的行<xref href=&quot;System.Data.DataSet&quot;></xref>以匹配在数据源中使用<xref href=&quot;System.Data.DataSet&quot;></xref>名称，然后创建<xref href=&quot;System.Data.DataTable&quot;></xref>名为&quot;Table&quot;。"
  remarks: "填充从数据源使用指定的一个关联的 SELECT 语句中检索行<xref:System.Data.IDbDataAdapter.SelectCommand%2A>属性。</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 与 SELECT 语句关联的连接对象必须是有效，但它不需要处于打开状态。 如果连接已关闭调用填充之前，其打开以检索数据，然后再将关闭。 如果连接是打开的调用填充之前，它保持打开状态。       然后该填充操作的行添加到目标<xref:System.Data.DataTable>中的对象<xref:System.Data.DataSet>，则创建<xref:System.Data.DataTable>对象如果它们尚不存在。</xref:System.Data.DataTable> </xref:System.Data.DataSet> </xref:System.Data.DataTable> 在创建时<xref:System.Data.DataTable>对象，该填充操作通常会创建唯一的列名称元数据。</xref:System.Data.DataTable> 但是，如果<xref:System.Data.IDataAdapter.MissingSchemaAction%2A>属性设置为`AddWithKey`，还会创建相应的主键约束。</xref:System.Data.IDataAdapter.MissingSchemaAction%2A>       如果`SelectCommand`返回 OUTER JOIN 的结果`DataAdapter`未设置<xref:System.Data.DataTable.PrimaryKey%2A>为生成<xref:System.Data.DataTable>。</xref:System.Data.DataTable>值</xref:System.Data.DataTable.PrimaryKey%2A> 您必须显式定义为主键，以确保正确解析重复行。 有关详细信息，请参阅[定义主键](~/add/includes/ajax-current-ext-md.md)。       如果<xref:System.Data.IDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称为连续列，请使用模式&quot;columnname1&quot;、&quot;columnname2&quot;、&quot;columnname3&quot;，依次类推。</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式&quot;Column1&quot;、&quot;Column2&quot;等。</xref:System.Data.DataSet> 多个结果集添加到时<xref:System.Data.DataSet>，每个结果集放在单独的表。</xref:System.Data.DataSet> 额外的结果集通过将整数值追加到指定的表名 （例如，&quot;表&quot;、&quot;Table1&quot;、&quot;Table2&quot;等） 进行命名。 使用列和表名以确保不会发生冲突，这些命名模式时，应用程序应小心。       当 SELECT 语句用于填充<xref:System.Data.DataSet>返回多个结果，如一批 SQL 语句中，如果其中一个结果包含错误，所有的后续结果跳过并且不添加到<xref:System.Data.DataSet>。</xref:System.Data.DataSet> </xref:System.Data.DataSet>       你可以使用的填充方法多次<xref:System.Data.DataTable>。</xref:System.Data.DataTable> 如果存在主键，传入行与已存在的匹配行合并。 如果不存在任何主键，传入行追加到<xref:System.Data.DataTable>。</xref:System.Data.DataTable>      1> [!NOTE]&1;> 时处理批处理 SQL 语句返回多个结果，填充的实现和<xref:System.Data.IDataAdapter.FillSchema%2A>.NET Framework 数据提供程序检索仅第一个结果的架构信息。</xref:System.Data.IDataAdapter.FillSchema%2A>"
  syntax:
    content: public int Fill (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "A <xref href=&quot;System.Data.DataSet&quot;> </xref>填写记录，如有必要，架构。"
    return:
      type: System.Int32
      description: "行数已成功添加到或在刷新<xref href=&quot;System.Data.DataSet&quot;> </xref>。 这不包括由语句不返回行受影响的行。"
  overload: System.Data.IDataAdapter.Fill*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  id: FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "将添加<xref href=&quot;System.Data.DataTable&quot;></xref>名指定为&quot;Table&quot; <xref href=&quot;System.Data.DataSet&quot;> </xref>和配置架构的架构以匹配数据源中根据指定<xref href=&quot;System.Data.SchemaType&quot;> </xref>。"
  remarks: "FillSchema 方法从数据源使用<xref:System.Data.IDbDataAdapter.SelectCommand%2A>.</xref:System.Data.IDbDataAdapter.SelectCommand%2A>中检索架构 与相关的连接对象<xref:System.Data.IDbDataAdapter.SelectCommand%2A>必须有效，但它不需要才能打开。</xref:System.Data.IDbDataAdapter.SelectCommand%2A> 如果连接已关闭调用 FillSchema 之前，其打开以检索数据，然后再将关闭。 如果调用 FillSchema 之前它保持打开状态。       FillSchema 操作将添加<xref:System.Data.DataTable>到目标<xref:System.Data.DataSet>.</xref:System.Data.DataSet> </xref:System.Data.DataTable> 然后，它添加到列<xref:System.Data.DataColumnCollection>的<xref:System.Data.DataTable>并配置以下<xref:System.Data.DataColumn>如果它们在数据源中存在的属性:- <xref:System.Data.DataColumn.AllowDBNull%2A>- <xref:System.Data.DataColumn.AutoIncrement%2A>.</xref:System.Data.DataColumn.AutoIncrement%2A> </xref:System.Data.DataColumn.AllowDBNull%2A> </xref:System.Data.DataColumn> </xref:System.Data.DataTable> </xref:System.Data.DataColumnCollection> 必须设置<xref:System.Data.DataColumn.AutoIncrementStep%2A>和<xref:System.Data.DataColumn.AutoIncrementSeed%2A>单独。</xref:System.Data.DataColumn.AutoIncrementSeed%2A> </xref:System.Data.DataColumn.AutoIncrementStep%2A>      - <xref:System.Data.DataColumn.MaxLength%2A>- <xref:System.Data.DataColumn.ReadOnly%2A>- <xref:System.Data.DataColumn.Unique%2A>FillSchema 还配置<xref:System.Data.DataTable.PrimaryKey%2A>和<xref:System.Data.DataTable.Constraints%2A>属性根据下列规则:-如果一个或多个主键列返回的<xref:System.Data.IDbDataAdapter.SelectCommand%2A>、 用作<xref:System.Data.DataTable>.</xref:System.Data.DataTable>的主键列</xref:System.Data.IDbDataAdapter.SelectCommand%2A></xref:System.Data.DataTable.Constraints%2A></xref:System.Data.DataTable.PrimaryKey%2A></xref:System.Data.DataColumn.Unique%2A></xref:System.Data.DataColumn.ReadOnly%2A></xref:System.Data.DataColumn.MaxLength%2A>      -在返回任何主键列但唯一列，如果唯一的所有列都都不可以为 null，为主键都将使用唯一的列。 如果任何列都可以为 null，<xref:System.Data.UniqueConstraint>添加到<xref:System.Data.ConstraintCollection>，但<xref:System.Data.DataTable.PrimaryKey%2A>未设置属性。</xref:System.Data.DataTable.PrimaryKey%2A> </xref:System.Data.ConstraintCollection> </xref:System.Data.UniqueConstraint>      -如果返回主键列和唯一列，以联系<xref:System.Data.DataTable>。</xref:System.Data.DataTable>使用作为主键列的主键列       请注意，主键和唯一约束添加到<xref:System.Data.ConstraintCollection>根据以前的规则，但其他约束类型不会添加。</xref:System.Data.ConstraintCollection>       如果唯一聚集索引定义的一列或 SQL Server 表中的列，并且对一组单独的列，定义主键约束，则将返回的聚集索引中列的名称。 若要返回的名称或主键列的名称，用于指定主键索引的名称的 SELECT 语句中的查询提示。 有关如何指定查询提示的详细信息，请参阅[查询提示 (TRANSACT-SQL)](http://msdn.microsoft.com/library/ms181714.aspx)。       如果<xref:System.Data.IDataAdapter>填充时遇到重复的列<xref:System.Data.DataTable>，它会生成名称为连续列，请使用模式&quot;columnname1&quot;、&quot;columnname2&quot;、&quot;columnname3&quot;，依次类推。</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter> 如果传入的数据包含未命名的列，它们都将置于<xref:System.Data.DataSet>根据模式&quot;Column1&quot;、&quot;Column2&quot;等。</xref:System.Data.DataSet> 多个结果集添加到时<xref:System.Data.DataSet>，每个结果集放在单独的表。</xref:System.Data.DataSet> 额外的结果集通过将整数值追加到指定的表名 （例如，&quot;表&quot;、&quot;Table1&quot;、&quot;Table2&quot;等） 进行命名。 使用列和表名以确保不会发生冲突，这些命名模式时，应用程序应小心。       FillSchema 返回任何行。 使用<xref:System.Data.IDataAdapter.Fill%2A>方法以将行添加到一种<xref:System.Data.DataTable>。</xref:System.Data.DataTable> </xref:System.Data.IDataAdapter.Fill%2A>"
  syntax:
    content: public System.Data.DataTable[] FillSchema (System.Data.DataSet dataSet, System.Data.SchemaType schemaType);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref>要填充数据源的架构。"
    - id: schemaType
      type: System.Data.SchemaType
      description: "之一<xref href=&quot;System.Data.SchemaType&quot;></xref>值。"
    return:
      type: System.Data.DataTable[]
      description: "数组<xref href=&quot;System.Data.DataTable&quot;></xref>从数据源返回包含架构信息的对象。"
  overload: System.Data.IDataAdapter.FillSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.GetFillParameters
  id: GetFillParameters
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "获取在执行 SQL SELECT 语句时，由用户设置的参数。"
  remarks: "```  \nprivate static void GetParameters(String connectiongString) {  \n           using (SqlConnection conn = new SqlConnection(connectiongString)) {  \n              String queryString = \"Select [CourseID],[Title],[Credits] from [MySchool].[dbo].[Course] where [Year]=@Year and [Credits]>=@Credits\";   \n              SqlParameter year = new SqlParameter(\"@Year\", 2012);   \n              SqlParameter credits = new SqlParameter(\"@Credits\", SqlDbType.Int, 4, \"Credits\");   \n              credits.Value = 4; SqlCommand command = new SqlCommand(queryString, conn);   \n              command.Parameters.Add(year);   \n              command.Parameters.Add(credits);   \n              IDbDataAdapter mySchool = new SqlDataAdapter(command);   \n              IDataParameter[] parameters = mySchool.GetFillParameters();  \n              Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", \"ParameterName\", \"SourceColumn\", \"Direction\", \"DbType\", \"Value\");   \n              foreach (IDataParameter parameter in parameters) {   \n                 Console.WriteLine(\"{0,-15}{1,-15}{2,-15}{3,-15}{4,-15}\", parameter.ParameterName, parameter.SourceColumn, parameter.Direction, parameter.DbType, parameter.Value);   \n              }  \n           }  \n        }  \n```"
  syntax:
    content: public System.Data.IDataParameter[] GetFillParameters ();
    parameters: []
    return:
      type: System.Data.IDataParameter[]
      description: "数组<xref href=&quot;System.Data.IDataParameter&quot;></xref>由用户设置对象包含的参数。"
  overload: System.Data.IDataAdapter.GetFillParameters*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingMappingAction
  id: MissingMappingAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指示或指定是否未映射的源的表或列都传递与其源名一起以进行筛选或引发错误。"
  remarks: "<xref:System.Data.IDataAdapter.TableMappings%2A>属性提供了返回的记录和<xref:System.Data.DataSet>.</xref:System.Data.DataSet>之间的主映射</xref:System.Data.IDataAdapter.TableMappings%2A>"
  syntax:
    content: public System.Data.MissingMappingAction MissingMappingAction { get; set; }
    return:
      type: System.Data.MissingMappingAction
      description: "之一<xref href=&quot;System.Data.MissingMappingAction&quot;></xref>值。 默认值是<xref uid=&quot;langword_csharp_Passthrough&quot; name=&quot;Passthrough&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.IDataAdapter.MissingMappingAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "设置的值不是一个<xref href=&quot;System.Data.MissingMappingAction&quot;></xref>值。"
  platform:
  - net462
- uid: System.Data.IDataAdapter.MissingSchemaAction
  id: MissingSchemaAction
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指示或指定是否缺少源表、 列和它们之间的关系添加到数据集架构，将被忽略，或导致引发引发错误。"
  syntax:
    content: public System.Data.MissingSchemaAction MissingSchemaAction { get; set; }
    return:
      type: System.Data.MissingSchemaAction
      description: "之一<xref href=&quot;System.Data.MissingSchemaAction&quot;></xref>值。 默认值是<xref uid=&quot;langword_csharp_Add&quot; name=&quot;Add&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.IDataAdapter.MissingSchemaAction*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "设置的值不是一个<xref href=&quot;System.Data.MissingSchemaAction&quot;></xref>值。"
  platform:
  - net462
- uid: System.Data.IDataAdapter.TableMappings
  id: TableMappings
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
  type: Property
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "指示源表映射到数据集表的方式。"
  remarks: "<xref:System.Data.IDataAdapter>仅映射用于名为&quot;Table&quot;的源表。</xref:System.Data.IDataAdapter> 所有 SELECT、 INSERT、 DELETE 和 UPDATE 语句返回的数据必须使用来完成一致列命名。 返回记录中的列名称必须是唯一的否则具有相同名称的列覆盖以前的数据。 上<xref:System.Data.IDataAdapter.Update%2A>、 表映射到名为&quot;Table&quot;的源表将具有已对帐其更改只。</xref:System.Data.IDataAdapter.Update%2A>"
  syntax:
    content: public System.Data.ITableMappingCollection TableMappings { get; }
    return:
      type: System.Data.ITableMappingCollection
      description: "一个集合，提供返回的记录之间的主映射和<xref href=&quot;System.Data.DataSet&quot;> </xref>。 默认值为空集合。"
  overload: System.Data.IDataAdapter.TableMappings*
  exceptions: []
  platform:
  - net462
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  id: Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  langs:
  - csharp
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
  type: Method
  assemblies:
  - System.Data
  namespace: System.Data
  summary: "调用相应的 INSERT、 UPDATE 或 DELETE 语句，为每个插入、 更新或删除行中指定<xref href=&quot;System.Data.DataSet&quot;></xref>从<xref href=&quot;System.Data.DataTable&quot;></xref>名为&quot;Table&quot;。"
  remarks: "当应用程序调用更新方法，<xref:System.Data.IDataAdapter>检查<xref:System.Data.DataRow.RowState%2A>属性，并执行所需的 INSERT、 UPDATE 或 DELETE 语句以迭代方式对于每一行，根据在<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中配置的索引顺序</xref:System.Data.DataRow.RowState%2A></xref:System.Data.IDataAdapter> 例如，更新可能会执行 DELETE 语句，接着是 INSERT 语句，则另一个 DELETE 语句，由于<xref:System.Data.DataTable>.</xref:System.Data.DataTable>中行的排序       请注意，作为批处理进程; 不执行这些语句单独更新每个行。 应用程序可以调用<xref:System.Data.DataSet.GetChanges%2A>方法如果你必须控制的语句类型 （例如，插入更新之前） 的序列。</xref:System.Data.DataSet.GetChanges%2A> 有关详细信息，请参阅[使用 Dataadapter 更新数据源](~/add/includes/ajax-current-ext-md.md)。       如果尚未指定 INSERT、 UPDATE 或 DELETE 语句，<xref:System.Data.Common.DataAdapter.Update%2A>方法生成异常。</xref:System.Data.Common.DataAdapter.Update%2A> 但是，你可以创建<xref:System.Data.SqlClient.SqlCommandBuilder>或<xref:System.Data.OleDb.OleDbCommandBuilder>对象以自动生成单表更新的 SQL 语句，如果你设置`SelectCommand`.NET Framework 数据提供程序的属性。</xref:System.Data.OleDb.OleDbCommandBuilder> </xref:System.Data.SqlClient.SqlCommandBuilder> 然后，由 CommandBuilder 生成未设置任何其他 SQL 语句。 此生成的逻辑需要要<xref:System.Data.DataSet>.</xref:System.Data.DataSet>中存在的键列信息 有关详细信息请参阅[使用 Commandbuilder 生成命令](~/add/includes/ajax-current-ext-md.md)。       <xref:System.Data.Common.DataAdapter.Update%2A>方法从第一个映射，然后再执行更新中列出的表中检索行。</xref:System.Data.Common.DataAdapter.Update%2A> <xref:System.Data.Common.DataAdapter.Update%2A>然后更新使用的值的行<xref:System.Data.IDbCommand.UpdatedRowSource%2A>属性。</xref:System.Data.IDbCommand.UpdatedRowSource%2A> </xref:System.Data.Common.DataAdapter.Update%2A> 将忽略所有附加的行返回。       任何数据加载回后<xref:System.Data.DataSet>、<xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件时，允许用户检查经协调<xref:System.Data.DataSet>行和任何输出参数返回命令。</xref:System.Data.DataSet> </xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> </xref:System.Data.DataSet> 行已成功更新后，会接受对该行的更改。       使用更新，执行顺序时，如下所示︰ 1。  中的值<xref:System.Data.DataRow>移动到的参数值。</xref:System.Data.DataRow>      2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A>      3.  该命令执行。      4.  如果该命令设置为`FirstReturnedRecord`，则第一个返回结果置于<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      5.  如果没有输出参数，它们都将置于<xref:System.Data.DataRow>.</xref:System.Data.DataRow>      6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>引发事件。</xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A>      7.  <xref:System.Data.DataRow.AcceptChanges%2A>调用。</xref:System.Data.DataRow.AcceptChanges%2A>       与<xref:System.Data.IDataAdapter>通常具有与其相关联的参数集合</xref:System.Data.IDataAdapter>关联的每个命令 参数映射到当前行通过`SourceColumn`和`SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类。 `SourceColumn`是指<xref:System.Data.DataTable>列，<xref:System.Data.IDataAdapter>获取当前行的参数值的引用。</xref:System.Data.IDataAdapter> </xref:System.Data.DataTable>       `SourceColumn`在应用任何表映射之前是指未映射的列名称。 如果`SourceColumn`引用不存在的列中，执行的操作取决于下列情况之一<xref:System.Data.MissingMappingAction>值。</xref:System.Data.MissingMappingAction>      |枚举值 |执行操作 |  |-----------------------|------------------|  |`MissingMappingAction.Passthrough`|如果不不存在任何映射在<xref:System.Data.DataSet>中使用的源列名称和表名称。 |  |`MissingMappingAction.Ignore`|A<xref:System.SystemException>生成。</xref:System.SystemException> </xref:System.Data.DataSet> 当显式设置映射时，缺少映射的输入的参数通常是错误的原因。 |  |`MissingMappingAction.Error`|生成<xref:System.SystemException>。 |      `SourceColumn`属性还用于映射输出的值或输入/输出参数回`DataSet`。</xref:System.SystemException> 如果它引用不存在的列，则会生成异常。       `SourceVersion`的.NET Framework 数据提供程序的属性`Parameter`类确定是否使用`Original`， `Current`，或`Proposed`的列值的版本。 此功能常用要包含在 UPDATE 语句，以检查存在开放式并发冲突的 WHERE 子句中的原始值。      1> [!NOTE]&1;> 更新行时出错，如果引发异常，并执行更新，则停止。 若要继续执行更新操作不会遇到错误时生成异常，设置<xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A>属性`true`之前调用<xref:System.Data.Common.DbDataAdapter.Update%2A>.</xref:System.Data.Common.DbDataAdapter.Update%2A> </xref:System.Data.Common.DataAdapter.ContinueUpdateOnError%2A> 你还可能响应中的每个行基础上的错误`RowUpdated`DataAdapter 事件。 若要继续执行更新操作而不生成了异常`RowUpdated`事件中，设置<xref:System.Data.Common.RowUpdatedEventArgs.Status%2A><xref:System.Data.Common.RowUpdatedEventArgs>到<xref:System.Data.UpdateStatus>。</xref:System.Data.UpdateStatus></xref:System.Data.Common.RowUpdatedEventArgs>属性</xref:System.Data.Common.RowUpdatedEventArgs.Status%2A>"
  example:
  - "The following example uses the derived class, <xref:System.Data.OleDb.OleDbDataAdapter>, to <xref:System.Data.Common.DataAdapter.Update%2A> the data source. This example assumes that you have created an <xref:System.Data.OleDb.OleDbDataAdapter> and a <xref:System.Data.DataSet>.  \n  \n [!code-cs[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/csharp/m-system.data.idataadapt_1.cs)]\n [!code-vb[Classic WebData DataAdapter.IDataAdapter.Update Example#1](~/add/codesnippet/visualbasic/m-system.data.idataadapt_1.vb)]"
  syntax:
    content: public int Update (System.Data.DataSet dataSet);
    parameters:
    - id: dataSet
      type: System.Data.DataSet
      description: "<xref href=&quot;System.Data.DataSet&quot;> </xref>用于更新数据源。"
    return:
      type: System.Int32
      description: "已成功从更新的行数<xref href=&quot;System.Data.DataSet&quot;> </xref>。"
  overload: System.Data.IDataAdapter.Update*
  exceptions:
  - type: System.Data.DBConcurrencyException
    commentId: T:System.Data.DBConcurrencyException
    description: "尝试执行的 INSERT、 UPDATE 或 DELETE 语句导致受影响的零个记录。"
  platform:
  - net462
references:
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.DBConcurrencyException
  parent: System.Data
  isExternal: false
  name: DBConcurrencyException
  nameWithType: DBConcurrencyException
  fullName: System.Data.DBConcurrencyException
- uid: System.Data.IDataAdapter.Fill(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill(DataSet)
  nameWithType: IDataAdapter.Fill(DataSet)
  fullName: System.Data.IDataAdapter.Fill(DataSet)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.DataSet
  parent: System.Data
  isExternal: false
  name: DataSet
  nameWithType: DataSet
  fullName: System.Data.DataSet
- uid: System.Data.IDataAdapter.FillSchema(System.Data.DataSet,System.Data.SchemaType)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema(DataSet,SchemaType)
  nameWithType: IDataAdapter.FillSchema(DataSet,SchemaType)
  fullName: System.Data.IDataAdapter.FillSchema(DataSet,SchemaType)
- uid: System.Data.DataTable[]
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable[]
  spec.csharp:
  - uid: System.Data.DataTable
    name: DataTable
    nameWithType: DataTable
    fullName: DataTable[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.SchemaType
  parent: System.Data
  isExternal: false
  name: SchemaType
  nameWithType: SchemaType
  fullName: System.Data.SchemaType
- uid: System.Data.IDataAdapter.GetFillParameters
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters()
  nameWithType: IDataAdapter.GetFillParameters()
  fullName: System.Data.IDataAdapter.GetFillParameters()
- uid: System.Data.IDataParameter[]
  parent: System.Data
  isExternal: false
  name: IDataParameter
  nameWithType: IDataParameter
  fullName: System.Data.IDataParameter[]
  spec.csharp:
  - uid: System.Data.IDataParameter
    name: IDataParameter
    nameWithType: IDataParameter
    fullName: IDataParameter[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.IDataAdapter.MissingMappingAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
  fullName: System.Data.IDataAdapter.MissingMappingAction
- uid: System.Data.MissingMappingAction
  parent: System.Data
  isExternal: false
  name: MissingMappingAction
  nameWithType: MissingMappingAction
  fullName: System.Data.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
  fullName: System.Data.IDataAdapter.MissingSchemaAction
- uid: System.Data.MissingSchemaAction
  parent: System.Data
  isExternal: false
  name: MissingSchemaAction
  nameWithType: MissingSchemaAction
  fullName: System.Data.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
  fullName: System.Data.IDataAdapter.TableMappings
- uid: System.Data.ITableMappingCollection
  parent: System.Data
  isExternal: false
  name: ITableMappingCollection
  nameWithType: ITableMappingCollection
  fullName: System.Data.ITableMappingCollection
- uid: System.Data.IDataAdapter.Update(System.Data.DataSet)
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update(DataSet)
  nameWithType: IDataAdapter.Update(DataSet)
  fullName: System.Data.IDataAdapter.Update(DataSet)
- uid: System.Data.IDataAdapter.Fill*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Fill
  nameWithType: IDataAdapter.Fill
- uid: System.Data.IDataAdapter.FillSchema*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: FillSchema
  nameWithType: IDataAdapter.FillSchema
- uid: System.Data.IDataAdapter.GetFillParameters*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: GetFillParameters
  nameWithType: IDataAdapter.GetFillParameters
- uid: System.Data.IDataAdapter.MissingMappingAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingMappingAction
  nameWithType: IDataAdapter.MissingMappingAction
- uid: System.Data.IDataAdapter.MissingSchemaAction*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: MissingSchemaAction
  nameWithType: IDataAdapter.MissingSchemaAction
- uid: System.Data.IDataAdapter.TableMappings*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: TableMappings
  nameWithType: IDataAdapter.TableMappings
- uid: System.Data.IDataAdapter.Update*
  parent: System.Data.IDataAdapter
  isExternal: false
  name: Update
  nameWithType: IDataAdapter.Update
