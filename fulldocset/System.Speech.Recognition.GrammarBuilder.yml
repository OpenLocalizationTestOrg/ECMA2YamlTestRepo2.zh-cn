### YamlMime:ManagedReference
items:
- uid: System.Speech.Recognition.GrammarBuilder
  id: GrammarBuilder
  children:
  - System.Speech.Recognition.GrammarBuilder.#ctor
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  - System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  - System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  - System.Speech.Recognition.GrammarBuilder.AppendDictation
  - System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  - System.Speech.Recognition.GrammarBuilder.AppendWildcard
  - System.Speech.Recognition.GrammarBuilder.Culture
  - System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  - System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  - System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  langs:
  - csharp
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
  type: Class
  summary: "提供用于以编程方式生成语音识别语法的约束的机制。"
  remarks: "在使用定义的 XML 格式通常创作语音识别语法[语音识别语法规范 (SRGS) 版本 1.0](http://go.microsoft.com/fwlink/?LinkId=201761)。 如果你熟悉 SRGS 但想要以编程方式生成语法，你可以使用<xref:System.Speech.Recognition.SrgsGrammar>命名空间，其成员紧密对应的元素和特性定义 SRGS。</xref:System.Speech.Recognition.SrgsGrammar> 如果你不熟悉 SRGS，或者你想创作的语法与你可以有效地的轻量、 编程方法来完成许多常见方案;你可以使用 GrammarBuilder 和<xref:System.Speech.Recognition.Choices>类。</xref:System.Speech.Recognition.Choices>       使用 GrammarBuilder 对象生成组成一个层次结构树<xref:System.Speech.Recognition.Choices>对象，其中包含与前导码和在每个节点的后 amble 短语交织在一起并使用传递的含义的语义值设定种子的备用短语回流到应用程序。</xref:System.Speech.Recognition.Choices>       若要使用 GrammarBuilder 创建<xref:System.Speech.Recognition.Grammar>对象，请使用以下步骤。</xref:System.Speech.Recognition.Grammar>      1.  创建 GrammarBuilder 对象。      2.  将约束追加到 GrammarBuilder，如<xref:System.String>对象， <xref:System.Speech.Recognition.Choices>， <xref:System.Speech.Recognition.SemanticResultKey>， <xref:System.Speech.Recognition.SemanticResultValue>， <xref:System.Speech.Recognition.DictationGrammar>，和其他 GrammarBuilder 对象的定义的语法的约束。</xref:System.Speech.Recognition.DictationGrammar> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> </xref:System.String>      3.  使用之一<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数来创建<xref:System.Speech.Recognition.Grammar>对象从已完成的 GrammarBuilder 语法。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar.%23ctor%2A>       使用 GrammarBuilder 创作是最适合于具有包含列表或可能是列表的列表，一项规则的语法。 若要以编程方式生成具有多个规则，或者需要以使的内部规则引用的语法，使用的类<xref:System.Speech.Recognition.SrgsGrammar>命名空间。</xref:System.Speech.Recognition.SrgsGrammar>       通过从某些其他类隐式转换，或将一个包含约束语法的第二个对象与结合使用 GrammarBuilder，也可以获取的 GrammarBuilder 实例... 有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符和<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>方法。</xref:System.Speech.Recognition.GrammarBuilder.Add%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>       若要将规则添加到现有 GrammarBuilder，使用<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>， <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>，和<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>方法。</xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> </xref:System.Speech.Recognition.GrammarBuilder.Add%2A>      1> [!IMPORTANT]&1;> 语音识别器可以使用包含具有相同的密钥名称重复语义元素或多个可以反复修改相同的语义元素的值的语义元素语音识别语法时引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。       若要帮助进行调试，<xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>属性返回字符串形式 GrammarBuilder 的当前状态。</xref:System.Speech.Recognition.GrammarBuilder.DebugShowPhrases%2A>       有关生成和使用语音识别语法的详细信息，请参阅[语音识别](http://msdn.microsoft.com/en-us/6a7dc524-07fc-4862-8d48-8c10dc64b919)和[创建 GrammarBuilder 语法](http://msdn.microsoft.com/en-us/7e2cc577-cb05-4318-9da3-7c8675d3d9ae)。"
  example:
  - "The following example uses  GrammarBuilder and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two GrammarBuilder objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with GrammarBuilder.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a GrammarBuilder constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: >-
      [System.Diagnostics.DebuggerDisplay("{DebugSummary}")]

      public class GrammarBuilder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor
  id: '#ctor'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder()
  nameWithType: GrammarBuilder.GrammarBuilder()
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder()
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化一个新的空实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>类。"
  remarks: "若要将规则添加到现有<xref:System.Speech.Recognition.GrammarBuilder>对象，请使用<xref:System.Speech.Recognition.GrammarBuilder.Add%2A>， <xref:System.Speech.Recognition.GrammarBuilder.Append%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A>， <xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>，和<xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A>方法，与<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendWildcard%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A> </xref:System.Speech.Recognition.GrammarBuilder.AppendDictation%2A> </xref:System.Speech.Recognition.GrammarBuilder.Append%2A> </xref:System.Speech.Recognition.GrammarBuilder.Add%2A> </xref:System.Speech.Recognition.GrammarBuilder>      1> [!IMPORTANT]&1;> 语音识别器可以使用包含具有相同的密钥名称重复语义元素或多个可以反复修改相同的语义元素的值的语义元素语音识别语法时引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any one of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  GrammarBuilder bothPhrases = new GrammarBuilder();  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  bothPhrases.Append(bothChoices);  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  id: '#ctor(System.Speech.Recognition.Choices)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(Choices)
  nameWithType: GrammarBuilder.GrammarBuilder(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(Choices)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>从一组的替代项的类。"
  remarks: "有关生成包含的替代项语音识别语法的详细信息，请参阅[使用选项创建 GrammarBuilder 语法](http://msdn.microsoft.com/en-us/5b18db18-a5f6-46a3-aa77-6d3141544efd)。"
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n The example uses a <xref:System.Speech.Recognition.Choices> object  to create a list of acceptable values for *colorChoice* from an array of <xref:System.String> objects. A <xref:System.Speech.Recognition.Choices> object is analogous to the `one-of` element in the SRGS specification, and contains a set of alternate phrases, any of which can be recognized when spoken. The example also uses a <xref:System.Speech.Recognition.Choices> object to group an array of two <xref:System.Speech.Recognition.GrammarBuilder> objects into a pair of alternative phrases that the resultant grammar can recognize. Alternate words or phrases are a component of most grammars, and the <xref:System.Speech.Recognition.Choices> object provides this functionality for grammars constructed with <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.GrammarBuilder> constructed from a <xref:System.Speech.Recognition.Choices> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.Choices alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.Choices
      description: "替代项集。"
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  id: '#ctor(System.Speech.Recognition.SemanticResultKey)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(SemanticResultKey)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultKey)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>从语义的注册表项的类。"
  remarks: "当你创建<xref:System.Speech.Recognition.GrammarBuilder>实例从<xref:System.Speech.Recognition.SemanticResultValue>对象，将语义信息添加到可以识别结果中返回的语法。</xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 你可以访问在识别结果中使用的语义信息<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>，这是可用的处理程序中`SpeechRecognized`事件。</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 如果<xref:System.Speech.Recognition.GrammarBuilder>定义<xref:System.Speech.Recognition.SemanticResultKey>，这可以用于检索与键关联的识别结果中的语义信息。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> 请参阅示例<xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>，并还会看到<xref:System.Speech.Recognition.SemanticResultValue>和<xref:System.Speech.Recognition.SemanticResultKey>。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>      1> [!IMPORTANT]&1;> 构造时<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *colorChoice*\" and \"Set background to *colorChoice*\", where *colorChoice* is selected from a set of colors. The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.  \n  \n The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user. For example, if the input contains the phrase, \"Set background to red\", the recognition result contains the semantic value of \"#FF0000\", which you can retrieve using a handler for the `SpeechRecognized` event.  \n  \n The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`. Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  // Include semantic information about each of the colors.  \n  Choices colorChoice = new Choices();  \n  \n  GrammarBuilder colorBuilder = new GrammarBuilder(\"red\");  \n  SemanticResultValue colorValue =  \n    new SemanticResultValue(colorBuilder, \"#FF0000\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"green\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#00FF00\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"blue\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#0000FF\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices object for the two alternative phrases.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  // Create the semantic key for referencing the color information.  \n  SemanticResultKey colorKey =  \n    new SemanticResultKey(\"ColorCode\", bothPhrases);  \n  bothPhrases = new GrammarBuilder(colorKey);  \n  \n  // Construct the Grammar object from the GrammarBuilder.  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.SemanticResultKey key);
    parameters:
    - id: key
      type: System.Speech.Recognition.SemanticResultKey
      description: "语义的键。"
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  id: '#ctor(System.Speech.Recognition.SemanticResultValue)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(SemanticResultValue)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultValue)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>从语义值的类。"
  remarks: "当你创建<xref:System.Speech.Recognition.GrammarBuilder>实例从<xref:System.Speech.Recognition.SemanticResultValue>对象，将语义信息添加到可以识别结果中返回的语法。</xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 你可以访问在识别结果中使用的语义信息<xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A>属性<xref:System.Speech.Recognition.RecognizedPhrase>，这是可用的处理程序中`SpeechRecognized`事件。</xref:System.Speech.Recognition.RecognizedPhrase> </xref:System.Speech.Recognition.RecognizedPhrase.Semantics%2A> 如果<xref:System.Speech.Recognition.GrammarBuilder>定义<xref:System.Speech.Recognition.SemanticResultKey>，这可以用于检索与键关联的识别结果中的语义信息。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.GrammarBuilder> 请参阅示例<xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>，并还会看到<xref:System.Speech.Recognition.SemanticResultValue>和<xref:System.Speech.Recognition.SemanticResultKey>。</xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder.Append%28System.Speech.Recognition.SemanticResultKey%29>      1> [!IMPORTANT]&1;> 构造时<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *colorChoice*\" and \"Set background to *colorChoice*\", where *colorChoice* is selected from a set of colors. The grammar lets a user speak any of several color names, and returns semantic information about the recognized color name to the application.  \n  \n The example uses a single <xref:System.Speech.Recognition.SemanticResultKey> with which you can retrieve the <xref:System.Speech.Recognition.SemanticValue> that is associated with the color spoken by the user. For example, if the input contains the phrase, \"Set background to red\", the recognition result contains the semantic value of \"#FF0000\", which you can retrieve using a handler for the `SpeechRecognized` event.  \n  \n The example uses <xref:System.String>, <xref:System.Speech.Recognition.Choices>, <xref:System.Speech.Recognition.SemanticResultKey>, <xref:System.Speech.Recognition.SemanticResultValue>, and <xref:System.Speech.Recognition.GrammarBuilder> objects to build the constraints that are all contained in the last <xref:System.Speech.Recognition.GrammarBuilder> object, `bothPhrases`. Finally, the example constructs a <xref:System.Speech.Recognition.Grammar> object from the completed <xref:System.Speech.Recognition.GrammarBuilder>.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  // Include semantic information about each of the colors.  \n  Choices colorChoice = new Choices();  \n  \n  GrammarBuilder colorBuilder = new GrammarBuilder(\"red\");  \n  SemanticResultValue colorValue =  \n    new SemanticResultValue(colorBuilder, \"#FF0000\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"green\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#00FF00\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  colorBuilder = new GrammarBuilder(\"blue\");  \n  colorValue = new SemanticResultValue(colorBuilder, \"#0000FF\");  \n  colorChoice.Add(new GrammarBuilder(colorValue));  \n  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  // Create the semantic key for referencing the color information.  \n  SemanticResultKey colorKey =  \n    new SemanticResultKey(\"ColorCode\", bothPhrases);  \n  bothPhrases = new GrammarBuilder(colorKey);  \n  \n  // Construct the grammar from the grammar builder.  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.SemanticResultValue value);
    parameters:
    - id: value
      type: System.Speech.Recognition.SemanticResultValue
      description: "语义的值或名称/值对。"
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String)
  nameWithType: GrammarBuilder.GrammarBuilder(String)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>单词的序列中的类。"
  remarks: "短语表示语音识别语法可以识别的精确的口头的短语。 有关生成包含字符串语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)。"
  example:
  - "The following example uses  <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects to construct a grammar that can recognize either of the two phrases, \"Make background *colorChoice*\" or \"Set background to *colorChoice*\".  \n  \n After creating a list of acceptable values for *colorChoice* using a <xref:System.Speech.Recognition.Choices> object, the example initializes two <xref:System.Speech.Recognition.GrammarBuilder> objects, `makePhrase` and `setPhrase`, using a string as an argument.  \n  \n The example finally creates a <xref:System.Speech.Recognition.Grammar> object from a <xref:System.Speech.Recognition.Choices> object cast to a <xref:System.Speech.Recognition.GrammarBuilder> object.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  GrammarBuilder colorElement = new GrammarBuilder(colorChoice);  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase = new GrammarBuilder(\"Make background\");  \n  makePhrase.Append(colorElement);  \n  GrammarBuilder setPhrase = new GrammarBuilder(\"Set background to\");  \n  setPhrase.Append(colorElement);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  Grammar grammar = new Grammar((GrammarBuilder)bothChoices);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n  \n```"
  syntax:
    content: public GrammarBuilder (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "单词的序列。"
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  id: '#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>子集的一组单词的类。"
  remarks: "`phrase`参数表示语音识别语法可以识别的短语。 `subsetMatchingMode`参数指定要朗读若要实现的整个短语成功识别的短语的子集。 可以使用此语法创建与具有较长的名称，而无需用户说出整个名称，以匹配项的项的列表。       有关匹配的模式的详细信息，请参阅<xref:System.Speech.Recognition.SubsetMatchingMode>。</xref:System.Speech.Recognition.SubsetMatchingMode> 有关生成包含字符串语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)。"
  example:
  - "The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value and a grammar for choosing between the matching mode grammars. If the value of `phrase` is \"one two three four five six seven\", then the Subsequence grammar recognizes the input \"two three four\", but not the input \"one three five\". However, the Ordered Subset grammar recognizes both of these inputs.  \n  \n```c#  \n  \nprivate static IEnumerable<Grammar>  \n  CreateMatchingModeGrammars(string phrase)  \n{  \n  List<Grammar> grammars = new List<Grammar>(5);  \n  \n  Choices modeChoice = new Choices();  \n  Type enumType = typeof(SubsetMatchingMode);  \n  foreach (SubsetMatchingMode mode in Enum.GetValues(enumType))  \n  {  \n    string modeName = Enum.GetName(enumType, mode);  \n    modeName = BreakAtCaps(modeName);  \n  \n    GrammarBuilder builder = new GrammarBuilder(phrase, mode);  \n    Grammar modeGrammar = new Grammar(builder);  \n    modeGrammar.Name = modeName;  \n    modeGrammar.Enabled = false;  \n    grammars.Add(modeGrammar);  \n  \n    modeChoice.Add(modeName);  \n  }  \n  \n  Grammar choiceGrammar = new Grammar(modeChoice);  \n  choiceGrammar.Name = \"choice\";  \n  grammars.Add(choiceGrammar);  \n  \n  return grammars;  \n}  \n  \n// Insert spaces preceding each uppercase letter in a string.   \nprivate static string BreakAtCaps(string item)  \n{  \n  if (item == null || item.Length == 0)  \n  {  \n    return item;  \n  }  \n  \n  StringBuilder sb = new StringBuilder(item[0].ToString());  \n  for (int i = 1; i < item.Length; i++)  \n  {  \n    char c = item[i];  \n    if (char.IsUpper(c))  \n    {  \n      sb.Append(\" \");  \n    }  \n    sb.Append(c);  \n  }  \n  \n  return sb.ToString();  \n}  \n```"
  syntax:
    content: public GrammarBuilder (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);
    parameters:
    - id: phrase
      type: System.String
      description: "单词的序列。"
    - id: subsetMatchingCriteria
      type: System.Speech.Recognition.SubsetMatchingMode
      description: "匹配模式语音识别语法使用来识别的短语。"
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  id: '#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>从重复元素的类。"
  remarks: "如果值`minRepeat`为 0，则新<xref:System.Speech.Recognition.GrammarBuilder>表示可选元素。</xref:System.Speech.Recognition.GrammarBuilder>       值`minRepeat`必须大于或等于 0 且小于或等于的值`maxRepeat`。      1> [!IMPORTANT]&1;> 时指定的重复<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza. It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word \"pizza\".  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object from a string array of alternative toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "重复的元素。"
    - id: minRepeat
      type: System.Int32
      description: "输入匹配的元素定义的最小次数`builder`必须进行以构成匹配项。"
    - id: maxRepeat
      type: System.Int32
      description: "输入匹配的元素定义的最大次数`builder`可以发生以构成匹配项。"
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  id: '#ctor(System.String,System.Int32,System.Int32)'
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: GrammarBuilder(String,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  type: Constructor
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "初始化的新实例<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>类从序列中的单词<xref:System.String>，并指定多少次<xref:System.String>可以重复。</xref:System.String> </xref:System.String>"
  remarks: "如果值`minRepeat`为 0，则新<xref:System.Speech.Recognition.GrammarBuilder>表示可选元素。</xref:System.Speech.Recognition.GrammarBuilder>       值`minRepeat`必须大于或等于 0 且小于或等于的值`maxRepeat`。 有关生成包含字符串语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)。"
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza. It starts with an optional, opening phrase, followed by one to four toppings, and closes with the word \"pizza\".  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public GrammarBuilder (string phrase, int minRepeat, int maxRepeat);
    parameters:
    - id: phrase
      type: System.String
      description: "重复的单词中的顺序。"
    - id: minRepeat
      type: System.Int32
      description: "输入匹配短语最小次数必须进行以构成匹配项。"
    - id: maxRepeat
      type: System.Int32
      description: "输入匹配短语的最大次数会以构成匹配项。"
  overload: System.Speech.Recognition.GrammarBuilder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(Choices,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>包含<xref href=&quot;System.Speech.Recognition.Choices&quot;></xref>对象后跟<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类隐式转换:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      1> [!IMPORTANT]&1;> 时合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[GrammarBuilder 语法添加语义](https://msdn.microsoft.com/library/hh361581.aspx)。"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "第一个语法元素，它表示一组备选方案。"
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "第二个语法元素。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>的序列<code> choices </code>元素跟<code> builder </code>元素。"
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,Choices)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>包含<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象后跟<xref href=&quot;System.Speech.Recognition.Choices&quot;></xref>对象。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类隐式转换:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      1> [!IMPORTANT]&1;> 时合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例与其他语法元素，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "第一个语法元素。"
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "第二个语法元素，它表示一组备选方案。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>的序列<code> builder </code>元素跟<code> choices </code>元素。"
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> ，其中包含两个序列<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类隐式转换:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder1`或`builder2`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      1> [!IMPORTANT]&1;> 时合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例与其他语法元素，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);
    parameters:
    - id: builder1
      type: System.Speech.Recognition.GrammarBuilder
      description: "第一个语法元素。"
    - id: builder2
      type: System.Speech.Recognition.GrammarBuilder
      description: "第二个语法元素。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>的序列<code> builder1 </code>元素跟<code> builder2 </code>元素。"
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  id: Add(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(GrammarBuilder,String)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>包含<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象后跟一个短语。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类隐式转换:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (System.Speech.Recognition.GrammarBuilder builder, string phrase);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "第一个语法元素。"
    - id: phrase
      type: System.String
      description: "第二个语法元素，它表示一组单词。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>的序列<code> builder </code>元素跟<code> phrase </code>元素。"
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  id: Add(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Add(String,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(String,GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> ，其中包含短语跟<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类隐式转换:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder>       有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>和<xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Addition%2A> </xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects. The explicit cast operators in the calls to the <xref:System.Speech.Recognition.GrammarBuilder.Add%2A> methods are optional.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] {\"red\", \"green\", \"blue\"});  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    GrammarBuilder.Add((GrammarBuilder)\"Make background\", colorChoice);  \n  GrammarBuilder setPhrase =  \n    GrammarBuilder.Add(\"Set background to\", (GrammarBuilder)colorChoice);  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] {makePhrase, setPhrase});  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder Add (string phrase, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: phrase
      type: System.String
      description: "第一个语法元素，它表示一组单词。"
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "第二个语法元素。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "A <xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>的序列<code> phrase </code>元素跟<code> builder </code>元素。"
  overload: System.Speech.Recognition.GrammarBuilder.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  id: Append(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(Choices)
  nameWithType: GrammarBuilder.Append(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(Choices)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将追加一组的语法元素的当前序列的替代方法。"
  remarks: "`alternateChoices`添加到元素的当前序列的末尾。      1> [!IMPORTANT]&1;> 时追加<xref:System.Speech.Recognition.Choices>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.Choices> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. The example highlights the use of the Append method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.Choices alternateChoices);
    parameters:
    - id: alternateChoices
      type: System.Speech.Recognition.Choices
      description: "要追加的替代项集。"
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  id: Append(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(GrammarBuilder)
  nameWithType: GrammarBuilder.Append(GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将语法元素追加到当前的语法元素序列。"
  remarks: "`builder`添加到当前的语法元素序列的末尾。      1> [!NOTE]&1;> 时追加<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[使用 SemanticResultKey 和 SemanticResultValue 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "要追加的语法元素。"
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  id: Append(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(SemanticResultKey)
  nameWithType: GrammarBuilder.Append(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultKey)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将语义密钥追加到当前的语法元素序列。"
  remarks: "`key`添加到元素的当前序列的末尾。      1> [!IMPORTANT]&1;> 时追加<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\" The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.  \n  \n```c#  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create a Choices object and add  cities and airport codes  \n        // using SemanticResultValue objects.  \n        Choices cities = new Choices();  \n        cities.Add(new SemanticResultValue(\"Chicago\", \"ORD\"));  \n        cities.Add(new SemanticResultValue(\"Boston\", \"BOS\"));  \n        cities.Add(new SemanticResultValue(\"Miami\", \"MIA\"));  \n        cities.Add(new SemanticResultValue(\"Dallas\", \"DFW\"));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=   \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Configure the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Load the grammar object and start recognition.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n        recognizer.RecognizeAsync();  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.SemanticResultKey key);
    parameters:
    - id: key
      type: System.Speech.Recognition.SemanticResultKey
      description: "要追加的语义键。"
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  id: Append(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(SemanticResultValue)
  nameWithType: GrammarBuilder.Append(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultValue)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将语义值追加到当前的语法元素序列。"
  remarks: "`value`添加到元素的当前序列的末尾。      1> [!IMPORTANT]&1;> 时追加<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example is part of a console application for choosing origin and destination cities for a flight. The application recognizes phrases such as \"I want to fly from Miami to Chicago.\" The handler for the <xref:System.Speech.Recognition.SpeechRecognitionEngine.SpeechRecognized> event uses the <xref:System.Speech.Recognition.SemanticResultKey> to extract the airport code specified in the <xref:System.Speech.Recognition.SemanticResultValue> for the origin and destination cities.  \n  \n```c#  \n  \nusing System;  \nusing System.Speech.Recognition;  \n  \nnamespace SampleRecognition  \n{  \n  class Program  \n  {  \n    static void Main(string[] args)  \n  \n    // Initialize an in-process speech recognition engine.  \n    {  \n      using (SpeechRecognitionEngine recognizer =  \n         new SpeechRecognitionEngine())  \n      {  \n  \n        // Create GrammarBuilder objects and append SemanticResultValue objects   \n        // that contain cities and airport codes.  \n  \n        GrammarBuilder chicago = new GrammarBuilder();  \n        chicago.Append(new SemanticResultValue(\"Chicago\", \"ORD\"));  \n  \n        GrammarBuilder boston = new GrammarBuilder();  \n        boston.Append(new SemanticResultValue(\"Boston\", \"BOS\"));  \n  \n        GrammarBuilder miami = new GrammarBuilder();  \n        miami.Append(new SemanticResultValue(\"Miami\", \"MIA\"));  \n  \n        GrammarBuilder dallas = new GrammarBuilder();  \n        dallas.Append(new SemanticResultValue(\"Dallas\", \"DFW\"));  \n  \n        // Create a Choices object and add the cities using implicit conversion from   \n        // SemanticResultValue to GrammarBuilder.  \n        Choices cities = new Choices();  \n        cities.Add(new Choices(new GrammarBuilder[] { chicago, boston, miami, dallas }));  \n  \n        // Build the phrase and add SemanticResultKeys.  \n        GrammarBuilder chooseCities = new GrammarBuilder();  \n        chooseCities.Append(\"I want to fly from\");  \n        chooseCities.Append(new SemanticResultKey(\"origin\", cities));  \n        chooseCities.Append(\"to\");  \n        chooseCities.Append(new SemanticResultKey(\"destination\", cities));  \n  \n        // Build a Grammar object from the GrammarBuilder.  \n        Grammar bookFlight = new Grammar(chooseCities);  \n        bookFlight.Name = \"Book Flight\";  \n  \n        // Add a handler for the LoadGrammarCompleted event.  \n        recognizer.LoadGrammarCompleted +=   \n          new EventHandler<LoadGrammarCompletedEventArgs>(recognizer_LoadGrammarCompleted);  \n  \n        // Add a handler for the SpeechRecognized event.  \n        recognizer.SpeechRecognized +=   \n          new EventHandler<SpeechRecognizedEventArgs>(recognizer_SpeechRecognized);  \n  \n        // Configure the input to the recognizer.  \n        recognizer.SetInputToDefaultAudioDevice();  \n  \n        // Load the grammar object and start recognition.  \n        recognizer.LoadGrammarAsync(bookFlight);  \n        recognizer.RecognizeAsync();  \n  \n        // Keep the console window open.  \n        Console.ReadLine();  \n      }  \n    }  \n    // Handle the LoadGrammarCompleted event.  \n    static void recognizer_LoadGrammarCompleted(object sender, LoadGrammarCompletedEventArgs e)  \n    {  \n      Console.WriteLine(\"Grammar loaded: \" + e.Grammar.Name);  \n      Console.WriteLine();  \n    }  \n  \n    // Handle the SpeechRecognized event.  \n    static void recognizer_SpeechRecognized(object sender, SpeechRecognizedEventArgs e)  \n    {  \n      Console.WriteLine(\"Speech recognized:  \" + e.Result.Text);  \n      Console.WriteLine();  \n      Console.WriteLine(\"Semantic results:\");  \n      Console.WriteLine(\"  The flight origin is \" + e.Result.Semantics[\"origin\"].Value);  \n      Console.WriteLine(\"  The flight destination is \" + e.Result.Semantics[\"destination\"].Value);  \n    }  \n  }  \n}  \n  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.SemanticResultValue value);
    parameters:
    - id: value
      type: System.Speech.Recognition.SemanticResultValue
      description: "要追加的语义值。"
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String)
  id: Append(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String)
  nameWithType: GrammarBuilder.Append(String)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "向当前的语法元素序列中追加一个短语。"
  remarks: '`phrase`添加到元素的当前序列的末尾。'
  syntax:
    content: public void Append (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "要追加的单词的序列。"
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  id: Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.Append(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,SubsetMatchingMode)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将短语的子集的元素追加到当前的语法元素序列。"
  remarks: "该子集元素已添加到元素的当前序列的末尾。 有关生成使用字符串语音识别语法的详细信息，请参阅[使用字符串创建 GrammarBuilder 语法](http://msdn.microsoft.com/en-us/0d87b445-a342-4369-9b3f-91d07fd7e114)。       有关使用子集匹配模式的详细信息，请参阅<xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=fullName>。</xref:System.Speech.Recognition.SubsetMatchingMode?displayProperty=fullName>"
  example:
  - "The following example creates a speech recognition grammar for each <xref:System.Speech.Recognition.SubsetMatchingMode> value. For example, the generated grammar `OrderedSubset` recognizes the phrases, \"three four five\" and \"one three five\", and the grammar `Subsequence` recognizes the phrase \"three four five\", but not the phrase, \"one three five\".  \n  \n```c#  \n  \nprivate Grammar[] CreateSubsetMatchTest()  \n{  \n  List<Grammar> grammars = new List<Grammar>(4);  \n  \n  string phrase = \"one two three four five six\";  \n  foreach (SubsetMatchingMode mode in  \n    Enum.GetValues(typeof(SubsetMatchingMode)))  \n  {  \n    GrammarBuilder gb = new GrammarBuilder();  \n    gb.Append(phrase, mode);  \n  \n    Grammar grammar = new Grammar(gb);  \n    grammar.Name = mode.ToString();  \n    grammars.Add(grammar);  \n  }  \n  \n  return grammars.ToArray();  \n}  \n```"
  syntax:
    content: public void Append (string phrase, System.Speech.Recognition.SubsetMatchingMode subsetMatchingCriteria);
    parameters:
    - id: phrase
      type: System.String
      description: "要追加的单词的序列。"
    - id: subsetMatchingCriteria
      type: System.Speech.Recognition.SubsetMatchingMode
      description: "匹配模式语法使用来识别的短语。"
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  id: Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将重复的语法元素追加到当前的语法元素序列。"
  remarks: "值`minRepeat`必须大于或等于 0 且小于或等于的值`maxRepeat`。      1> [!IMPORTANT]&1;> 时追加<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例到<xref:System.Speech.Recognition.GrammarBuilder>对象，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (System.Speech.Recognition.GrammarBuilder builder, int minRepeat, int maxRepeat);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "要追加的重复的语法元素。"
    - id: minRepeat
      type: System.Int32
      description: "输入匹配的元素定义的最小次数`builder`必须进行以构成匹配项。"
    - id: maxRepeat
      type: System.Int32
      description: "输入匹配的元素定义的最大次数`builder`可以发生以构成匹配项。"
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  id: Append(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Append(String,Int32,Int32)
  nameWithType: GrammarBuilder.Append(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,Int32,Int32)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将重复的短语追加到当前的语法元素序列。"
  remarks: "值`minRepeat`必须大于或等于 0 且小于或等于的值`maxRepeat`。"
  example:
  - "The following example creates a speech recognition grammar for phrases such as \"Call James at work\" and \"Call Anne on her cell phone\", where the word \"phone\" is optional. <xref:System.Speech.Recognition.GrammarBuilder> and <xref:System.Speech.Recognition.Choices> objects are used to construct the grammar. The example highlights the use of the <xref:System.Speech.Recognition.GrammarBuilder.Append%2A> method.  \n  \n```c#  \n  \npublic static Grammar CreatePhonePhrase()  \n{  \n  // Create alternatives for person names, locations, devices, and pronouns.  \n  Choices personChoice = new Choices(new string[] {\"Anne\", \"James\", \"Mary\", \"Sam\"});  \n  Choices locationChoice = new Choices(new string[] {\"home\", \"work\"});  \n  Choices deviceChoice = new Choices(new string[] {\"home\", \"work\", \"cell\"});  \n  Choices pronounChoice = new Choices(new string[] {\"his\", \"her\"});  \n  \n  // Create a phrase for the receiving device, which optionally contains the word \"phone\".  \n  GrammarBuilder devicePhrase = new GrammarBuilder(pronounChoice);  \n  devicePhrase.Append(deviceChoice);  \n  devicePhrase.Append(\"phone\", 0, 1);  \n  \n  // Create alternatives for phrases specifying a device or a location.  \n  GrammarBuilder atLocation = new GrammarBuilder(\"at\");  \n  atLocation.Append(locationChoice);  \n  \n  GrammarBuilder onDevice = new GrammarBuilder(\"on\");  \n  onDevice.Append(devicePhrase);  \n  \n  Choices howChoice = new Choices(new GrammarBuilder[] {atLocation, onDevice});  \n  \n  // Build the final phrase.  \n  GrammarBuilder callWho = new GrammarBuilder(\"Call\");  \n  callWho.Append(personChoice);  \n  callWho.Append(howChoice);  \n  \n  // Create the Grammar object.  \n  Grammar callGrammar = new Grammar(callWho);  \n  callGrammar.Name = \"Call Grammar\";  \n  \n  return callGrammar;  \n}  \n```"
  syntax:
    content: public void Append (string phrase, int minRepeat, int maxRepeat);
    parameters:
    - id: phrase
      type: System.String
      description: "要追加的单词重复的序列。"
    - id: minRepeat
      type: System.Int32
      description: "输入匹配的最小次数`phrase`必须进行以构成匹配项。"
    - id: maxRepeat
      type: System.Int32
      description: "输入匹配的最大次数`phrase`可以发生以构成匹配项。"
  overload: System.Speech.Recognition.GrammarBuilder.Append*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation
  id: AppendDictation
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendDictation()
  nameWithType: GrammarBuilder.AppendDictation()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将默认听写语法追加到当前的语法元素序列。"
  remarks: "听写语法的详细信息，请参阅<xref:System.Speech.Recognition.DictationGrammar>。</xref:System.Speech.Recognition.DictationGrammar>"
  example:
  - "The following example creates a speech recognition grammar that incorporates dictation.  \n  \n```c#  \n  \nGrammarBuilder builder = new GrammarBuilder();  \nbuilder.Append(\"begin\");  \nbuilder.AppendDictation();  \nbuilder.Append(\"end\");  \nGrammar grammarWithDictation = new Grammar(builder);  \ngrammarWithDictation.Name = \"Grammar with Dictation\";  \n```"
  syntax:
    content: public void AppendDictation ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  id: AppendDictation(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendDictation(String)
  nameWithType: GrammarBuilder.AppendDictation(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将指定的听写语法追加到当前的语法元素序列。"
  remarks: "若要使用的拼写听写语法，设置`category`到`spelling`。       听写语法的详细信息，请参阅<xref:System.Speech.Recognition.DictationGrammar>。</xref:System.Speech.Recognition.DictationGrammar>"
  example:
  - "The following example creates a speech recognition grammar that incorporates the spelling dictation grammar rules.  \n  \n```c#  \n  \nGrammarBuilder builder = new GrammarBuilder();  \nbuilder.Append(\"begin\");  \nbuilder.AppendDictation(\"spelling\");  \nbuilder.Append(\"end\");  \nGrammar grammarWithDictation = new Grammar(builder);  \ngrammarWithDictation.Name = \"Grammar with Dictation\";  \n```"
  syntax:
    content: public void AppendDictation (string category);
    parameters:
    - id: category
      type: System.String
      description: "要追加的听写语法的类别。"
  overload: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  id: AppendRuleReference(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendRuleReference(String)
  nameWithType: GrammarBuilder.AppendRuleReference(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "向当前的语法元素序列中追加的语法定义文件。"
  remarks: "通过提供的 URI`path`参数可能为本地或远程。 应用程序必须具有读取访问权限指定的语法文件的位置。       W3C 语音识别语法规范 (SRGS) 表示可以定义根规则。 此方法将追加的语法，其根规则，语法元素的当前序列开头。 若要将追加指定的语法规则，请使用<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>方法。</xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>"
  example:
  - "The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml. The content of the cities.grxml file appears below the C# code example.  \n  \n```c#  \n  \nprivate static Grammar CreateCitiesGrammar1()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  builder.AppendRuleReference(\"file://c:/temp/cities.grxml\");  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"Cities Grammar 1\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-16\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.grxml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public void AppendRuleReference (string path);
    parameters:
    - id: path
      type: System.String
      description: "路径或通用资源标识符 (URI) 描述中受支持的格式语音识别语法的文件。"
  overload: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  id: AppendRuleReference(System.String,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendRuleReference(String,String)
  nameWithType: GrammarBuilder.AppendRuleReference(String,String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String,String)
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "将指定的规则的语法定义文件追加到当前序列的语法元素。"
  remarks: "通过提供的 URI`path`参数可能为本地或远程。 应用程序必须具有读取访问权限指定的语法文件的位置。       你可以使用使用<xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>方法要追加其根规则开头的语法文件。</xref:System.Speech.Recognition.GrammarBuilder.AppendRuleReference%2A>"
  example:
  - "The following C# example creates a speech recognition grammar that uses the rule named `Cities` in a local SRGS file, cities.grxml. The content of the cities.grxml file appears below the C# code example.  \n  \n```c#  \n  \nprivate static Grammar CreateCitiesGrammar2()  \n{  \n  GrammarBuilder builder = new GrammarBuilder();  \n  builder.Append(\"Does\");  \n  builder.AppendRuleReference(@\"c:\\temp\\cities.grxml\", \"Cities\");  \n  builder.Append(\"have a shuttle\");  \n  \n  Grammar citiesGrammar = new Grammar(builder);  \n  citiesGrammar.Name = \"Cities Grammar 2\";  \n  return citiesGrammar;  \n}  \n```  \n  \n```xml  \n  \n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>  \n<grammar version=\"1.0\" xml:lang=\"en-US\"  \n         xmlns=\"http://www.w3.org/2001/06/grammar\"  \n         tag-format=\"semantics/1.0\" root=\"Main\">  \n  \n  <!-- cities.grxml:   \n    Defines an SRGS grammar for requesting a flight. This grammar includes  \n    a Cities rule that lists the cities that can be used for departures  \n    and destinations. -->  \n  \n  <rule id=\"Main\">  \n    <item>  \n      I would like to fly from <ruleref uri=\"#Cities\"/>  \n      to <ruleref uri=\"#Cities\"/>  \n    </item>  \n  </rule>  \n  \n  <rule id=\"Cities\" scope=\"public\">  \n    <one-of>  \n      <item> Seattle </item>  \n      <item> Los Angeles </item>  \n      <item> New York </item>  \n      <item> Miami </item>  \n    </one-of>  \n  </rule>  \n</grammar>  \n```"
  syntax:
    content: public void AppendRuleReference (string path, string rule);
    parameters:
    - id: path
      type: System.String
      description: "文件路径或通用资源标识符 (URI) 描述中受支持的格式语音识别语法的文件。"
    - id: rule
      type: System.String
      description: "要追加，规则的标识符或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>要追加的语法文件的默认根规则。"
  overload: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard
  id: AppendWildcard
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: AppendWildcard()
  nameWithType: GrammarBuilder.AppendWildcard()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendWildcard()
  type: Method
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "追加相匹配的语法元素的当前序列任何输入识别语法元素。"
  remarks: "通配符元素添加到元素的当前序列的末尾。       通配符元素都与匹配任何说出的词语。 它不匹配背景噪音或静默。"
  example:
  - "The following example creates a grammar that accepts password input as a wildcard. The example attaches a <xref:System.Speech.Recognition.Grammar.SpeechRecognized?displayProperty=fullName> event handler to the grammar that validates the password input.  \n  \n```c#  \nprivate Grammar CreatePasswordGrammar()  \n{  \n  GrammarBuilder wildcardBuilder = new GrammarBuilder();  \n  wildcardBuilder.AppendWildcard();  \n  SemanticResultKey passwordKey =  \n    new SemanticResultKey(\"Password\", wildcardBuilder);  \n  \n  GrammarBuilder passwordBuilder =  \n    new GrammarBuilder(\"My Password is\");  \n  passwordBuilder.Append(passwordKey);  \n  \n  Grammar passwordGrammar = new Grammar(passwordBuilder);  \n  passwordGrammar.Name = \"Password input\";  \n  \n  passwordGrammar.SpeechRecognized +=  \n    new EventHandler<SpeechRecognizedEventArgs>(  \n      PasswordInputHandler);  \n  \n  return passwordGrammar;  \n}  \n  \n// Handle the SpeechRecognized event for the password grammar.  \nprivate void PasswordInputHandler(object sender, SpeechRecognizedEventArgs e)  \n{  \n  if (e.Result == null) return;  \n  \n  RecognitionResult result = e.Result;  \n  SemanticValue semantics = e.Result.Semantics;  \n  \n  if (semantics.ContainsKey(\"Password\"))  \n  {  \n    RecognizedAudio passwordAudio =  \n      result.GetAudioForWordRange(  \n        result.Words[3], result.Words[result.Words.Count - 1]);  \n  \n    if (IsValidPassword(passwordAudio))  \n    {  \n      Console.WriteLine(\"Password accepted.\");  \n  \n      // Add code to handle a valid password here.  \n    }  \n    else  \n    {  \n      Console.WriteLine(\"Invalid password.\");  \n  \n      // Add code to handle an invalid password here.  \n    }  \n  }  \n}  \n  \n// Validate the password input.   \nprivate bool IsValidPassword(RecognizedAudio passwordAudio)  \n{  \n  Console.WriteLine(\"Validating password.\");  \n  \n  // Add password validation code here.  \n  \n  return false;  \n}  \n```"
  syntax:
    content: public void AppendWildcard ();
    parameters: []
  overload: System.Speech.Recognition.GrammarBuilder.AppendWildcard*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.Culture
  id: Culture
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: Culture
  nameWithType: GrammarBuilder.Culture
  fullName: System.Speech.Recognition.GrammarBuilder.Culture
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取或设置语音识别语法的区域性。"
  remarks: "<xref:System.Speech.Recognition.Grammar.%23ctor%2A>构造函数创建<xref:System.Speech.Recognition.Grammar>可由语音识别器的相应的区域性的对象。</xref:System.Speech.Recognition.Grammar> </xref:System.Speech.Recognition.Grammar.%23ctor%2A> 仅的区域性属性<xref:System.Speech.Recognition.GrammarBuilder>提供如语法构造函数的参数用于设置生成的语音识别语法的区域性。</xref:System.Speech.Recognition.GrammarBuilder>       Microsoft Windows 和 System.Speech API 接受所有有效的语言-国家/地区代码。 若要执行使用中指定的语言的语音识别`Culture`属性、 语音识别引擎支持，必须安装语言-国家/地区代码。 随 Microsoft Windows 7 的语音识别引擎使用以下语言-国家/地区代码。      -EN-GB。 英语 （英国）-EN-US。 英语 （美国）-DE-DE。 德语 （德国）-ES-ES。 西班牙语 （西班牙）-fr 法属 法语 （法国）-JA-JP。 日语 （日本）-ZH-CN。 中文 （中国）-ZH-TW。 此外允许&quot;en&quot;、&quot;fr&quot;或&quot;es&quot;等的中文 （台湾） 两个字母的语言代码。"
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza with up to four toppings. It specifically sets the <xref:System.Speech.Recognition.GrammarBuilder> object's culture to English (United States).  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public System.Globalization.CultureInfo Culture { get; set; }
    return:
      type: System.Globalization.CultureInfo
      description: "区域性<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>。 默认值是正在执行线程的<xref:System.Threading.Thread.CurrentUICulture*>属性。</xref:System.Threading.Thread.CurrentUICulture*>"
  overload: System.Speech.Recognition.GrammarBuilder.Culture*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  id: DebugShowPhrases
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
  fullName: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  type: Property
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "获取一个字符串，显示的内容和所包含的语法结构<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example creates a speech recognition grammar for ordering a pizza with up to four toppings. It writes the status of the <xref:System.Speech.Recognition.GrammarBuilder> to the console before creating the grammar. This method generates the following output:  \n  \n-   `GrammarBuilder status: I would like a [cheese,mushroom,tomato,onion,anchovy,chic ken,pepperoni] and [cheese,mushroom,tomato,onion,anchovy,chicken,pepperoni] pizza`  \n  \n```c#  \n  \nprivate static Grammar CreatePizzaGrammar()  \n{  \n  \n  // Create a Choices object with alternatives for toppings.  \n  Choices toppings = new Choices(new string[] {  \n    \"cheese\", \"mushroom\", \"tomato\", \"onion\",  \n    \"anchovy\", \"chicken\", \"pepperoni\"});  \n  \n  // Create a GrammarBuilder and append the Choices object.  \n  GrammarBuilder andToppings = new GrammarBuilder(\"and\", 0, 1);  \n  andToppings.Append(toppings);  \n  \n  // Construct the phrase.  \n  GrammarBuilder gb = new GrammarBuilder(\"I would like a\", 0, 1);  \n  gb.Append(toppings);  \n  gb.Append(new GrammarBuilder(andToppings, 0, 3));  \n  gb.Append(\"pizza\");  \n  \n  // Write the contents and structure of the GrammarBuilder to the console.  \n  Console.WriteLine(\"Grammar content and structure: {0}\", gb.DebugShowPhrases);  \n  \n  // Create the Grammar from the GrammarBuilder.  \n  Grammar grammar = new Grammar(gb);  \n  grammar.Name = \"Pizza Order\";  \n  \n  return grammar;  \n}  \n```"
  syntax:
    content: public string DebugShowPhrases { get; }
    return:
      type: System.String
      description: "当前内容和结构<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>。"
  overload: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>包含<xref href=&quot;System.Speech.Recognition.Choices&quot;></xref>对象后跟<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类的转换。</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> 有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      1> [!IMPORTANT]&1;> 时合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.Choices choices, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "第一个语法元素，它表示一组备选方案。"
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "第二个语法元素。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "返回<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>的序列<code> choices </code>参数跟<code> builder </code>参数。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>包含<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>跟<xref href=&quot;System.Speech.Recognition.Choices&quot;> </xref>。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类的转换:- <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices></xref:System.Speech.Recognition.GrammarBuilder> 有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      1> [!IMPORTANT]&1;> 时合并<xref:System.Speech.Recognition.Choices>和<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> </xref:System.Speech.Recognition.Choices> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] { \"red\", \"green\", \"blue\" });  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    (GrammarBuilder)\"Make background\" + colorChoice;  \n  GrammarBuilder setPhrase =  \n    \"Set background to\" + (GrammarBuilder)colorChoice;  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the grammar from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder, System.Speech.Recognition.Choices choices);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "第一个语法元素。"
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "第二个语法元素，它表示一组可选元素。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "返回<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>的序列<code> builder </code>参数跟<code> choices </code>参数。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> ，其中包含两个序列<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>对象。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类的转换。</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder1`和`builder2`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> 有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>      1> [!IMPORTANT]&1;> 时合并<xref:System.Speech.Recognition.GrammarBuilder>包含的对象<xref:System.Speech.Recognition.SemanticResultValue>或<xref:System.Speech.Recognition.SemanticResultKey>实例，请确保你避免使用同一密钥名称或多个可以反复修改的语义元素创建重复的语义元素<xref:System.Speech.Recognition.SemanticValue.Value%2A>属性<xref:System.Speech.Recognition.SemanticValue>对象。</xref:System.Speech.Recognition.SemanticValue> </xref:System.Speech.Recognition.SemanticValue.Value%2A> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.GrammarBuilder> 如果遇到这些情况下，在语音识别器可以引发异常。 有关生成包含语义信息语音识别语法的详细信息，请参阅[了解 SemanticResultValue 和 SemanticResultKey 对象](http://msdn.microsoft.com/en-us/0fea1236-5261-4608-89b3-9ce9ffc22a1c)。"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder1, System.Speech.Recognition.GrammarBuilder builder2);
    parameters:
    - id: builder1
      type: System.Speech.Recognition.GrammarBuilder
      description: "第一个语法元素。"
    - id: builder2
      type: System.Speech.Recognition.GrammarBuilder
      description: "第二个语法元素。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "返回<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>的序列<code> builder1 </code>参数跟<code> builder2 </code>参数。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  id: op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(GrammarBuilder,String)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,String)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>包含<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>跟一个短语。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类的转换。</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> 有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (System.Speech.Recognition.GrammarBuilder builder, string phrase);
    parameters:
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "第一个语法元素。"
    - id: phrase
      type: System.String
      description: "第二个语法元素，它表示一组单词。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "返回<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>的序列<code> builder </code>参数跟<code> phrase </code>参数。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  id: op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Addition(String,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(String,GrammarBuilder)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  summary: "创建一个新<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref> ，其中包含短语跟<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;> </xref>。"
  remarks: "<xref:System.Speech.Recognition.GrammarBuilder>支持从以下类的转换。</xref:System.Speech.Recognition.GrammarBuilder>      - <xref:System.Speech.Recognition.Choices>- <xref:System.Speech.Recognition.SemanticResultKey>- <xref:System.Speech.Recognition.SemanticResultValue>-<xref:System.String>此方法接受上面所列对象`builder`参数。</xref:System.String> </xref:System.Speech.Recognition.SemanticResultValue> </xref:System.Speech.Recognition.SemanticResultKey> </xref:System.Speech.Recognition.Choices> 有关详细信息，请参阅<xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>运算符。</xref:System.Speech.Recognition.GrammarBuilder.op_Implicit%2A>"
  example:
  - "The following example creates a speech recognition grammar that can recognize the two phrases, \"Make background *color*\" and \"Set background to *color*\", where *color* is selected from a set of colors. Various types are used to build the final grammar, such as [String](http://go.microsoft.com/fwlink/?LinkId=159733), <xref:System.Speech.Recognition.Choices>, and <xref:System.Speech.Recognition.GrammarBuilder> objects.  \n  \n```c#  \n  \nprivate Grammar CreateColorGrammar()  \n{  \n  \n  // Create a set of color choices.  \n  Choices colorChoice = new Choices(new string[] { \"red\", \"green\", \"blue\" });  \n  \n  // Create grammar builders for the two versions of the phrase.  \n  GrammarBuilder makePhrase =  \n    (GrammarBuilder)\"Make background\" + colorChoice;  \n  GrammarBuilder setPhrase =  \n    \"Set background to\" + (GrammarBuilder)colorChoice;  \n  \n  // Create a Choices for the two alternative phrases, convert the Choices  \n  // to a GrammarBuilder, and construct the Grammar object from the result.  \n  Choices bothChoices = new Choices(new GrammarBuilder[] { makePhrase, setPhrase });  \n  GrammarBuilder bothPhrases = new GrammarBuilder(bothChoices);  \n  \n  Grammar grammar = new Grammar(bothPhrases);  \n  grammar.Name = \"backgroundColor\";  \n  return grammar;  \n}  \n```"
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Addition (string phrase, System.Speech.Recognition.GrammarBuilder builder);
    parameters:
    - id: phrase
      type: System.String
      description: "第一个语法元素，它表示一组单词。"
    - id: builder
      type: System.Speech.Recognition.GrammarBuilder
      description: "第二个语法元素。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "返回<xref href=&quot;System.Speech.Recognition.GrammarBuilder&quot;></xref>的序列<code> phrase </code>参数跟<code> builder </code>参数。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  id: op_Implicit(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(Choices)
  nameWithType: GrammarBuilder.op_Implicit(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(Choices)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.Choices choices);
    parameters:
    - id: choices
      type: System.Speech.Recognition.Choices
      description: "要添加。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "要添加。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  id: op_Implicit(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(SemanticResultKey)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultKey)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.SemanticResultKey semanticKey);
    parameters:
    - id: semanticKey
      type: System.Speech.Recognition.SemanticResultKey
      description: "要添加。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "要添加。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  id: op_Implicit(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(SemanticResultValue)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultValue)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (System.Speech.Recognition.SemanticResultValue semanticValue);
    parameters:
    - id: semanticValue
      type: System.Speech.Recognition.SemanticResultValue
      description: "要添加。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "要添加。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  id: op_Implicit(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  langs:
  - csharp
  name: op_Implicit(String)
  nameWithType: GrammarBuilder.op_Implicit(String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(String)
  type: Operator
  assemblies:
  - System.Speech
  namespace: System.Speech.Recognition
  syntax:
    content: public static System.Speech.Recognition.GrammarBuilder op_Implicit (string phrase);
    parameters:
    - id: phrase
      type: System.String
      description: "要添加。"
    return:
      type: System.Speech.Recognition.GrammarBuilder
      description: "要添加。"
  overload: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Speech.Recognition.GrammarBuilder.#ctor
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder()
  nameWithType: GrammarBuilder.GrammarBuilder()
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder()
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(Choices)
  nameWithType: GrammarBuilder.GrammarBuilder(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(Choices)
- uid: System.Speech.Recognition.Choices
  parent: System.Speech.Recognition
  isExternal: false
  name: Choices
  nameWithType: Choices
  fullName: System.Speech.Recognition.Choices
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(SemanticResultKey)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultKey)
- uid: System.Speech.Recognition.SemanticResultKey
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticResultKey
  nameWithType: SemanticResultKey
  fullName: System.Speech.Recognition.SemanticResultKey
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(SemanticResultValue)
  nameWithType: GrammarBuilder.GrammarBuilder(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(SemanticResultValue)
- uid: System.Speech.Recognition.SemanticResultValue
  parent: System.Speech.Recognition
  isExternal: false
  name: SemanticResultValue
  nameWithType: SemanticResultValue
  fullName: System.Speech.Recognition.SemanticResultValue
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String)
  nameWithType: GrammarBuilder.GrammarBuilder(String)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,SubsetMatchingMode)
- uid: System.Speech.Recognition.SubsetMatchingMode
  parent: System.Speech.Recognition
  isExternal: false
  name: SubsetMatchingMode
  nameWithType: SubsetMatchingMode
  fullName: System.Speech.Recognition.SubsetMatchingMode
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(GrammarBuilder,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder
  parent: System.Speech.Recognition
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder
  fullName: System.Speech.Recognition.GrammarBuilder
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Speech.Recognition.GrammarBuilder.#ctor(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder(String,Int32,Int32)
  nameWithType: GrammarBuilder.GrammarBuilder(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.GrammarBuilder(String,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(Choices,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,Choices)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(GrammarBuilder,String)
  nameWithType: GrammarBuilder.Add(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(GrammarBuilder,String)
- uid: System.Speech.Recognition.GrammarBuilder.Add(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add(String,GrammarBuilder)
  nameWithType: GrammarBuilder.Add(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Add(String,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(Choices)
  nameWithType: GrammarBuilder.Append(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(Choices)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(GrammarBuilder)
  nameWithType: GrammarBuilder.Append(GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(SemanticResultKey)
  nameWithType: GrammarBuilder.Append(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultKey)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(SemanticResultValue)
  nameWithType: GrammarBuilder.Append(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(SemanticResultValue)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String)
  nameWithType: GrammarBuilder.Append(String)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Speech.Recognition.SubsetMatchingMode)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String,SubsetMatchingMode)
  nameWithType: GrammarBuilder.Append(String,SubsetMatchingMode)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,SubsetMatchingMode)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.Speech.Recognition.GrammarBuilder,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(GrammarBuilder,Int32,Int32)
  nameWithType: GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(GrammarBuilder,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.Append(System.String,System.Int32,System.Int32)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append(String,Int32,Int32)
  nameWithType: GrammarBuilder.Append(String,Int32,Int32)
  fullName: System.Speech.Recognition.GrammarBuilder.Append(String,Int32,Int32)
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation()
  nameWithType: GrammarBuilder.AppendDictation()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation()
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation(String)
  nameWithType: GrammarBuilder.AppendDictation(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendDictation(String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference(String)
  nameWithType: GrammarBuilder.AppendRuleReference(String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(System.String,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference(String,String)
  nameWithType: GrammarBuilder.AppendRuleReference(String,String)
  fullName: System.Speech.Recognition.GrammarBuilder.AppendRuleReference(String,String)
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendWildcard()
  nameWithType: GrammarBuilder.AppendWildcard()
  fullName: System.Speech.Recognition.GrammarBuilder.AppendWildcard()
- uid: System.Speech.Recognition.GrammarBuilder.Culture
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Culture
  nameWithType: GrammarBuilder.Culture
  fullName: System.Speech.Recognition.GrammarBuilder.Culture
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
  fullName: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.Choices,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(Choices,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(Choices,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(Choices,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,Choices)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,Choices)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.Speech.Recognition.GrammarBuilder,System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(GrammarBuilder,String)
  nameWithType: GrammarBuilder.op_Addition(GrammarBuilder,String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(GrammarBuilder,String)
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition(System.String,System.Speech.Recognition.GrammarBuilder)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition(String,GrammarBuilder)
  nameWithType: GrammarBuilder.op_Addition(String,GrammarBuilder)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Addition(String,GrammarBuilder)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.Choices)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(Choices)
  nameWithType: GrammarBuilder.op_Implicit(Choices)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(Choices)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultKey)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(SemanticResultKey)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultKey)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultKey)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.Speech.Recognition.SemanticResultValue)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(SemanticResultValue)
  nameWithType: GrammarBuilder.op_Implicit(SemanticResultValue)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(SemanticResultValue)
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit(System.String)
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit(String)
  nameWithType: GrammarBuilder.op_Implicit(String)
  fullName: System.Speech.Recognition.GrammarBuilder.op_Implicit(String)
- uid: System.Speech.Recognition.GrammarBuilder.#ctor*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: GrammarBuilder
  nameWithType: GrammarBuilder.GrammarBuilder
- uid: System.Speech.Recognition.GrammarBuilder.Add*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Add
  nameWithType: GrammarBuilder.Add
- uid: System.Speech.Recognition.GrammarBuilder.Append*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Append
  nameWithType: GrammarBuilder.Append
- uid: System.Speech.Recognition.GrammarBuilder.AppendDictation*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendDictation
  nameWithType: GrammarBuilder.AppendDictation
- uid: System.Speech.Recognition.GrammarBuilder.AppendRuleReference*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendRuleReference
  nameWithType: GrammarBuilder.AppendRuleReference
- uid: System.Speech.Recognition.GrammarBuilder.AppendWildcard*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: AppendWildcard
  nameWithType: GrammarBuilder.AppendWildcard
- uid: System.Speech.Recognition.GrammarBuilder.Culture*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: Culture
  nameWithType: GrammarBuilder.Culture
- uid: System.Speech.Recognition.GrammarBuilder.DebugShowPhrases*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: DebugShowPhrases
  nameWithType: GrammarBuilder.DebugShowPhrases
- uid: System.Speech.Recognition.GrammarBuilder.op_Addition*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Addition
  nameWithType: GrammarBuilder.op_Addition
- uid: System.Speech.Recognition.GrammarBuilder.op_Implicit*
  parent: System.Speech.Recognition.GrammarBuilder
  isExternal: false
  name: op_Implicit
  nameWithType: GrammarBuilder.op_Implicit
