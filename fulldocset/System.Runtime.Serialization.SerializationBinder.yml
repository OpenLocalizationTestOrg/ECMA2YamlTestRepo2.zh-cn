### YamlMime:ManagedReference
items:
- uid: System.Runtime.Serialization.SerializationBinder
  id: SerializationBinder
  children:
  - System.Runtime.Serialization.SerializationBinder.#ctor
  - System.Runtime.Serialization.SerializationBinder.BindToName(System.Type,System.String@,System.String@)
  - System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)
  langs:
  - csharp
  name: SerializationBinder
  nameWithType: SerializationBinder
  fullName: System.Runtime.Serialization.SerializationBinder
  type: Class
  summary: "允许用户控制类加载和强制要加载哪些类。"
  remarks: "序列化期间，格式化程序传输创建正确类型和版本的对象的实例所需的信息。 此信息通常包括完整类型名称和程序集名称的对象。 程序集名称包括名称、 版本和强名称 (请参阅[强名称程序集](~/add/includes/ajax-current-ext-md.md)) 的程序集的哈希。 默认情况下，反序列化使用此信息来创建相同对象 （具有限制的安全策略的任何程序集加载例外） 的实例。 某些用户要求需要的控制要加载，哪些类或者因为已经在程序集或类的一个不同版本之间移动了类是在服务器和客户端上。       SerializationBinder 还可以用于安全。 当你尝试反序列化来自受信任的源的数据时，则可能存在某些安全攻击。 联编程序为你检查应用程序域中正在加载哪些类型的机会。 您然后可以维护的被拒绝的类型的列表或列表的允许的类型并限制正在加载哪些类型和实例化。 此外你应注意哪些信息被放在网络上，你可能想要保护 （使用传输或消息安全） 在网络上发送类型名称或其他数据时。      1> [!WARNING]&1;> 仅使用 SerializationBinder，如果你是完全确定哪些信息正在序列化。 恶意类型可能导致意外的行为。       这是一个抽象基类。 所有活页夹外还扩展此类。"
  example:
  - >-
    [!code-vb[SerializationBinder Example#1](~/add/codesnippet/visualbasic/t-system.runtime.seriali_11_1.vb)]
     [!code-cpp[SerializationBinder Example#1](~/add/codesnippet/cpp/t-system.runtime.seriali_11_1.cpp)]
     [!code-cs[SerializationBinder Example#1](~/add/codesnippet/csharp/t-system.runtime.seriali_11_1.cs)]
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class SerializationBinder
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Runtime.Serialization.SerializationBinder.#ctor
  id: '#ctor'
  parent: System.Runtime.Serialization.SerializationBinder
  langs:
  - csharp
  name: SerializationBinder()
  nameWithType: SerializationBinder.SerializationBinder()
  fullName: System.Runtime.Serialization.SerializationBinder.SerializationBinder()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "初始化的新实例<xref href=&quot;System.Runtime.Serialization.SerializationBinder&quot;></xref>类。"
  syntax:
    content: protected SerializationBinder ();
    parameters: []
  overload: System.Runtime.Serialization.SerializationBinder.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.SerializationBinder.BindToName(System.Type,System.String@,System.String@)
  id: BindToName(System.Type,System.String@,System.String@)
  parent: System.Runtime.Serialization.SerializationBinder
  langs:
  - csharp
  name: BindToName(Type,String,String)
  nameWithType: SerializationBinder.BindToName(Type,String,String)
  fullName: System.Runtime.Serialization.SerializationBinder.BindToName(Type,String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "当在派生类中重写，控制为类型将序列化对象绑定。"
  syntax:
    content: public virtual void BindToName (Type serializedType, out string assemblyName, out string typeName);
    parameters:
    - id: serializedType
      type: System.Type
      description: "格式化程序创建的新实例的对象的类型。"
    - id: assemblyName
      type: System.String
      description: "指定<xref:System.Reflection.Assembly>序列化的对象的名称。</xref:System.Reflection.Assembly>"
    - id: typeName
      type: System.String
      description: "指定<xref:System.Type>序列化的对象的名称。</xref:System.Type>"
  overload: System.Runtime.Serialization.SerializationBinder.BindToName*
  exceptions: []
  platform:
  - net462
- uid: System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)
  id: BindToType(System.String,System.String)
  parent: System.Runtime.Serialization.SerializationBinder
  langs:
  - csharp
  name: BindToType(String,String)
  nameWithType: SerializationBinder.BindToType(String,String)
  fullName: System.Runtime.Serialization.SerializationBinder.BindToType(String,String)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Runtime.Serialization
  summary: "当在派生类中重写，控制为类型将序列化对象绑定。"
  remarks: ''
  example:
  - SerializationBinder Example#1
  syntax:
    content: public abstract Type BindToType (string assemblyName, string typeName);
    parameters:
    - id: assemblyName
      type: System.String
      description: "指定<xref:System.Reflection.Assembly>序列化的对象的名称。</xref:System.Reflection.Assembly>"
    - id: typeName
      type: System.String
      description: "指定<xref:System.Type>序列化的对象的名称。</xref:System.Type>"
    return:
      type: System.Type
      description: "格式化程序创建的新实例的对象的类型。"
  overload: System.Runtime.Serialization.SerializationBinder.BindToType*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Runtime.Serialization.SerializationBinder.#ctor
  parent: System.Runtime.Serialization.SerializationBinder
  isExternal: false
  name: SerializationBinder()
  nameWithType: SerializationBinder.SerializationBinder()
  fullName: System.Runtime.Serialization.SerializationBinder.SerializationBinder()
- uid: System.Runtime.Serialization.SerializationBinder.BindToName(System.Type,System.String@,System.String@)
  parent: System.Runtime.Serialization.SerializationBinder
  isExternal: false
  name: BindToName(Type,String,String)
  nameWithType: SerializationBinder.BindToName(Type,String,String)
  fullName: System.Runtime.Serialization.SerializationBinder.BindToName(Type,String,String)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Runtime.Serialization.SerializationBinder.BindToType(System.String,System.String)
  parent: System.Runtime.Serialization.SerializationBinder
  isExternal: false
  name: BindToType(String,String)
  nameWithType: SerializationBinder.BindToType(String,String)
  fullName: System.Runtime.Serialization.SerializationBinder.BindToType(String,String)
- uid: System.Runtime.Serialization.SerializationBinder.#ctor*
  parent: System.Runtime.Serialization.SerializationBinder
  isExternal: false
  name: SerializationBinder
  nameWithType: SerializationBinder.SerializationBinder
- uid: System.Runtime.Serialization.SerializationBinder.BindToName*
  parent: System.Runtime.Serialization.SerializationBinder
  isExternal: false
  name: BindToName
  nameWithType: SerializationBinder.BindToName
- uid: System.Runtime.Serialization.SerializationBinder.BindToType*
  parent: System.Runtime.Serialization.SerializationBinder
  isExternal: false
  name: BindToType
  nameWithType: SerializationBinder.BindToType
