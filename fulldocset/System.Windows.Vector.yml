### YamlMime:ManagedReference
items:
- uid: System.Windows.Vector
  id: Vector
  children:
  - System.Windows.Vector.#ctor(System.Double,System.Double)
  - System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)
  - System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.Divide(System.Windows.Vector,System.Double)
  - System.Windows.Vector.Equals(System.Object)
  - System.Windows.Vector.Equals(System.Windows.Vector)
  - System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.GetHashCode
  - System.Windows.Vector.Length
  - System.Windows.Vector.LengthSquared
  - System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)
  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)
  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  - System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.Negate
  - System.Windows.Vector.Normalize
  - System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)
  - System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)
  - System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)
  - System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)
  - System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)
  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)
  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  - System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)
  - System.Windows.Vector.Parse(System.String)
  - System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)
  - System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)
  - System.Windows.Vector.ToString
  - System.Windows.Vector.ToString(System.IFormatProvider)
  - System.Windows.Vector.X
  - System.Windows.Vector.Y
  langs:
  - csharp
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
  type: Struct
  summary: "表示在偏移量[!INCLUDE[TLA#tla_2d](~/add/includes/tlasharptla-2d-md.md)]空间。"
  remarks: "A<xref:System.Windows.Point>表示固定的位置，但方向和量值 （例如，速度或加速） 向量表示。</xref:System.Windows.Point> 因此，一条线段的终结点是点，但其区别是一个向量;即的方向和长度的行段。       在 XAML 中，之间的分隔符<xref:System.Windows.Vector.X%2A>和<xref:System.Windows.Vector.Y%2A>向量的值可以是逗号或空格。</xref:System.Windows.Vector.Y%2A> </xref:System.Windows.Vector.X%2A>       某些区域性可能会使用逗号字符作为小数分隔符而不是句点字符。 XAML 处理固定区域性为 EN-US 在大多数 XAML 处理器实现中，默认设置，并且需要要将小数分隔符的段。 你应避免使用逗号字符作为小数分隔符如果在 XAML 中，指定一个向量，因为，将能与一个向量属性值的字符串类型转换冲突<xref:System.Windows.Vector.X%2A>和<xref:System.Windows.Vector.Y%2A>组件。</xref:System.Windows.Vector.Y%2A> </xref:System.Windows.Vector.X%2A>      <a name=&quot;xamlAttributeUsage_Vector&quot;></a># # XAML 属性用法```   <object property=&quot;x,y&quot;/>   -or-   <object property=&quot;x y&quot;/>   ``` <a name=&quot;xamlValues_Vector&quot;> </a> # # XAML 值*x*向量的 X 分量。       有关详细信息，请参阅<xref:System.Windows.Vector.X%2A>属性。</xref:System.Windows.Vector.X%2A>       *y*向量的 Y 分量。 有关详细信息，请参阅<xref:System.Windows.Vector.Y%2A>属性。</xref:System.Windows.Vector.Y%2A>"
  example:
  - "The following example shows how to add two Vector structures.  \n  \n [!code-cs[VectorSample#10](~/add/codesnippet/csharp/MilVectorSample/Window1.xaml.cs#10)]\n [!code-vb[VectorSample#10](~/add/codesnippet/visualbasic/milvectorsample/window1.xaml.vb#10)]"
  syntax:
    content: >-
      [System.ComponentModel.TypeConverter(typeof(System.Windows.VectorConverter))]

      [System.Windows.Markup.ValueSerializer(typeof(System.Windows.Converters.VectorValueSerializer))]

      public struct Vector : IFormattable
  inheritance:
  - System.ValueType
  implements:
  - System.IFormattable
  platform:
  - net462
- uid: System.Windows.Vector.#ctor(System.Double,System.Double)
  id: '#ctor(System.Double,System.Double)'
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Vector(Double,Double)
  nameWithType: Vector.Vector(Double,Double)
  fullName: System.Windows.Vector.Vector(Double,Double)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.Vector&quot;></xref>结构。"
  remarks: ''
  example:
  - "The following example shows how to create two vectors and add them together.  \n  \n [!code-cs[VectorExamples_snip#AddTwoVectorsExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#addtwovectorsexample_csharp)]"
  syntax:
    content: public Vector (double x, double y);
    parameters:
    - id: x
      type: System.Double
      description: "<xref:System.Windows.Vector.X*>-新的偏移量<xref href=&quot;System.Windows.Vector&quot;> </xref>。</xref:System.Windows.Vector.X*>"
    - id: y
      type: System.Double
      description: "<xref:System.Windows.Vector.Y*>-新的偏移量<xref href=&quot;System.Windows.Vector&quot;> </xref>。</xref:System.Windows.Vector.Y*>"
  overload: System.Windows.Vector.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)
  id: Add(System.Windows.Vector,System.Windows.Point)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Add(Vector,Point)
  nameWithType: Vector.Add(Vector,Point)
  fullName: System.Windows.Vector.Add(Vector,Point)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "按指定向量平移指定的点，并返回所产生的点。"
  remarks: ''
  example:
  - "The following example shows how to use this method to add a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.  \n  \n [!code-cs[VectorExamples_snip#AddPointAndVectorExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#addpointandvectorexample_csharp)]"
  syntax:
    content: public static System.Windows.Point Add (System.Windows.Vector vector, System.Windows.Point point);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要指定的点的平移的量。"
    - id: point
      type: System.Windows.Point
      description: "要转换的点。"
    return:
      type: System.Windows.Point
      description: "转换的结果<code> point </code>通过<code> vector </code>。"
  overload: System.Windows.Vector.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)
  id: Add(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Add(Vector,Vector)
  nameWithType: Vector.Add(Vector,Vector)
  fullName: System.Windows.Vector.Add(Vector,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将添加两个向量，并将结果作为返回<xref href=&quot;System.Windows.Vector&quot;></xref>结构。"
  remarks: ''
  example:
  - "The following example shows how to use this method to add two <xref:System.Windows.Vector> structures.  \n  \n [!code-cs[VectorExamples_snip#AddTwoVectorsExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#addtwovectorsexample_csharp)]"
  syntax:
    content: public static System.Windows.Vector Add (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要相加的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要相加的第二个向量。"
    return:
      type: System.Windows.Vector
      description: "The sum of <code>vector1</code> and <code>vector2</code>."
  overload: System.Windows.Vector.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)
  id: AngleBetween(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: AngleBetween(Vector,Vector)
  nameWithType: Vector.AngleBetween(Vector,Vector)
  fullName: System.Windows.Vector.AngleBetween(Vector,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "检索表示以度为单位，两个指定向量之间的角度。"
  remarks: ''
  example:
  - "The following example shows how to use this method to get the angle between two <xref:System.Windows.Vector> structures.  \n  \n [!code-cs[VectorExamples_snip#AngleBetweenExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#anglebetweenexample_csharp)]"
  syntax:
    content: public static double AngleBetween (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要评估的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要评估的第二个向量。"
    return:
      type: System.Double
      description: "以度为单位的角度之间<code> vector1 </code>和<code> vector2 </code>。"
  overload: System.Windows.Vector.AngleBetween*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)
  id: CrossProduct(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: CrossProduct(Vector,Vector)
  nameWithType: Vector.CrossProduct(Vector,Vector)
  fullName: System.Windows.Vector.CrossProduct(Vector,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "计算两个向量的叉积。"
  remarks: ''
  example:
  - "The following example shows how to use this method to calculate the cross product of two <xref:System.Windows.Vector> structures.  \n  \n [!code-cs[VectorExamples_snip#CrossProductExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#crossproductexample_csharp)]"
  syntax:
    content: public static double CrossProduct (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要评估的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要评估的第二个向量。"
    return:
      type: System.Double
      description: "The cross product of <code>vector1</code> and <code>vector2</code>. 以下公式用于计算叉积︰`(Vector1.X * Vector2.Y) - (Vector1.Y * Vector2.X)`"
  overload: System.Windows.Vector.CrossProduct*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)
  id: Determinant(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Determinant(Vector,Vector)
  nameWithType: Vector.Determinant(Vector,Vector)
  fullName: System.Windows.Vector.Determinant(Vector,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "计算两个向量的行列式。"
  remarks: ''
  example:
  - "The following example shows how to calculate the determinant of two <xref:System.Windows.Vector> structures.  \n  \n [!code-cs[VectorExamples_snip#DeterminantExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#determinantexample_csharp)]"
  syntax:
    content: public static double Determinant (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要评估的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要评估的第二个向量。"
    return:
      type: System.Double
      description: "The determinant of <code>vector1</code> and <code>vector2</code>."
  overload: System.Windows.Vector.Determinant*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Divide(System.Windows.Vector,System.Double)
  id: Divide(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Divide(Vector,Double)
  nameWithType: Vector.Divide(Vector,Double)
  fullName: System.Windows.Vector.Divide(Vector,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定的向量除以指定标量和返回结果作为<xref href=&quot;System.Windows.Vector&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to use this method to divide a <xref:System.Windows.Vector> by a scalar.  \n  \n [!code-cs[VectorExamples_snip#DivideExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#divideexample_csharp)]"
  syntax:
    content: public static System.Windows.Vector Divide (System.Windows.Vector vector, double scalar);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "将向量结构。"
    - id: scalar
      type: System.Double
      description: "依据的数量`vector`划分。"
    return:
      type: System.Windows.Vector
      description: "The result of dividing <code>vector</code> by <code>scalar</code>."
  overload: System.Windows.Vector.Divide*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Vector.Equals(Object)
  fullName: System.Windows.Vector.Equals(Object)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "确定是否指定<xref:System.Object>是<xref href=&quot;System.Windows.Vector&quot;></xref>结构以及，如果是，是否具有相同<> *1> 和<> *1> 作为此向量的值。</xref:System.Object>"
  remarks: "向量的<xref:System.Windows.Vector.X%2A>和<xref:System.Windows.Vector.Y%2A>属性描述了使用<xref:System.Double>值。</xref:System.Double> </xref:System.Windows.Vector.Y%2A> </xref:System.Windows.Vector.X%2A> 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Windows.Vector>逻辑上相等的结构可能会失败。</xref:System.Windows.Vector> </xref:System.Double>"
  example:
  - "The following example shows how to use this method to check whether a <xref:System.Windows.Vector> and an <xref:System.Object> are equal.  \n  \n [!code-cs[VectorExamples_snip#EqualsExample2_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#equalsexample2_csharp)]"
  syntax:
    content: public override bool Equals (object o);
    parameters:
    - id: o
      type: System.Object
      description: "要比较的向量。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> o </code>是<xref href=&quot;System.Windows.Vector&quot;></xref>且具有相同<> *1> 和<> *1> 值作为此向量; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Vector.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Equals(System.Windows.Vector)
  id: Equals(System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Equals(Vector)
  nameWithType: Vector.Equals(Vector)
  fullName: System.Windows.Vector.Equals(Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较相等的两个向量。"
  remarks: "向量的<xref:System.Windows.Vector.X%2A>和<xref:System.Windows.Vector.Y%2A>属性描述了使用<xref:System.Double>值。</xref:System.Double> </xref:System.Windows.Vector.Y%2A> </xref:System.Windows.Vector.X%2A> 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Windows.Vector>逻辑上相等的结构可能会失败。</xref:System.Windows.Vector> </xref:System.Double>"
  example:
  - "The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.  \n  \n [!code-cs[VectorExamples_snip#EqualsExample2_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#equalsexample2_csharp)]"
  syntax:
    content: public bool Equals (System.Windows.Vector value);
    parameters:
    - id: value
      type: System.Windows.Vector
      description: "要与此向量进行比较的向量。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> value </code>具有相同<> *1> 和<> *1> 值作为此向量; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Vector.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)
  id: Equals(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Equals(Vector,Vector)
  nameWithType: Vector.Equals(Vector,Vector)
  fullName: System.Windows.Vector.Equals(Vector,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较两个指定的向量相等。"
  remarks: "向量的<xref:System.Windows.Vector.X%2A>和<xref:System.Windows.Vector.Y%2A>属性描述了使用<xref:System.Double>值。</xref:System.Double> </xref:System.Windows.Vector.Y%2A> </xref:System.Windows.Vector.X%2A> 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Double>逻辑上相等的结构可能会失败。</xref:System.Double> </xref:System.Double>"
  example:
  - "The following example shows how to use this method to check whether two <xref:System.Windows.Vector> structures are equal.  \n  \n [!code-cs[VectorExamples_snip#EqualsExample1_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#equalsexample1_csharp)]"
  syntax:
    content: public static bool Equals (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要比较的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要比较的第二个向量。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if t he <>*> and <>*> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Vector.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.GetHashCode
  id: GetHashCode
  parent: System.Windows.Vector
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Vector.GetHashCode()
  fullName: System.Windows.Vector.GetHashCode()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回此向量的哈希代码。"
  remarks: ''
  example:
  - "The following example shows how to get the hash code of a <xref:System.Windows.Vector>.  \n  \n [!code-cs[VectorExamples_snip#GetHashCodeExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#gethashcodeexample_csharp)]"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "此实例的哈希代码。"
  overload: System.Windows.Vector.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Length
  id: Length
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Length
  nameWithType: Vector.Length
  fullName: System.Windows.Vector.Length
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取此向量的长度。"
  remarks: "向量的长度有时称为严重性。"
  example:
  - "The following example shows how use this property to get the length of a vector.  \n  \n [!code-vb[VectorExamples_snip#LengthExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#lengthexample)]\n [!code-cs[VectorExamples_snip#LengthExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#lengthexample)]"
  syntax:
    content: public double Length { get; }
    return:
      type: System.Double
      description: "此向量的长度。"
  overload: System.Windows.Vector.Length*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.LengthSquared
  id: LengthSquared
  parent: System.Windows.Vector
  langs:
  - csharp
  name: LengthSquared
  nameWithType: Vector.LengthSquared
  fullName: System.Windows.Vector.LengthSquared
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取此向量的长度的平方。"
  remarks: "向量的长度有时称为其大小。"
  example:
  - "The following example shows how to use this property to get the square of the length of a vector.  \n  \n [!code-vb[VectorExamples_snip#LengthSquaredExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#lengthsquaredexample)]\n [!code-cs[VectorExamples_snip#LengthSquaredExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#lengthsquaredexample)]"
  syntax:
    content: public double LengthSquared { get; }
    return:
      type: System.Double
      description: "平方<xref:System.Windows.Vector.Length*>此向量。</xref:System.Windows.Vector.Length*>"
  overload: System.Windows.Vector.LengthSquared*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)
  id: Multiply(System.Double,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Multiply(Double,Vector)
  nameWithType: Vector.Multiply(Double,Vector)
  fullName: System.Windows.Vector.Multiply(Double,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定向量乘以指定的标量，并返回结果<xref href=&quot;System.Windows.Vector&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to use this method to multiply a scalar by a <xref:System.Windows.Vector>.  \n  \n [!code-cs[VectorExamples_snip#MultiplyVectorByScalarExample2_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#multiplyvectorbyscalarexample2_csharp)]"
  syntax:
    content: public static System.Windows.Vector Multiply (double scalar, System.Windows.Vector vector);
    parameters:
    - id: scalar
      type: System.Double
      description: "要相乘的标量。"
    - id: vector
      type: System.Windows.Vector
      description: "要相乘的向量。"
    return:
      type: System.Windows.Vector
      description: "相乘的结果<code> scalar </code>和<code> vector </code>。"
  overload: System.Windows.Vector.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)
  id: Multiply(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Multiply(Vector,Double)
  nameWithType: Vector.Multiply(Vector,Double)
  fullName: System.Windows.Vector.Multiply(Vector,Double)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定的向量乘以指定标量，并返回结果<xref href=&quot;System.Windows.Vector&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a scalar.  \n  \n [!code-cs[VectorExamples_snip#MultiplyVectorByScalarExample1_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#multiplyvectorbyscalarexample1_csharp)]"
  syntax:
    content: public static System.Windows.Vector Multiply (System.Windows.Vector vector, double scalar);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要相乘的向量。"
    - id: scalar
      type: System.Double
      description: "要相乘的标量。"
    return:
      type: System.Windows.Vector
      description: "相乘的结果<code> vector </code>和<code> scalar </code>。"
  overload: System.Windows.Vector.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  id: Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Multiply(Vector,Matrix)
  nameWithType: Vector.Multiply(Vector,Matrix)
  fullName: System.Windows.Vector.Multiply(Vector,Matrix)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定向量使用指定的坐标空间转换<xref href=&quot;System.Windows.Media.Matrix&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Media.Matrix>.  \n  \n [!code-cs[VectorExamples_snip#MultiplyVectorByMatrixExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#multiplyvectorbymatrixexample_csharp)]"
  syntax:
    content: public static System.Windows.Vector Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要转换的向量结构。"
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "要应用到的转换`vector`。"
    return:
      type: System.Windows.Vector
      description: "转换的结果<code> vector </code>通过<code> matrix </code>。"
  overload: System.Windows.Vector.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)
  id: Multiply(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Multiply(Vector,Vector)
  nameWithType: Vector.Multiply(Vector,Vector)
  fullName: System.Windows.Vector.Multiply(Vector,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "计算两个指定向量的点积，并将结果作为一种<xref:System.Double>。</xref:System.Double>返回"
  remarks: ''
  example:
  - "The following example shows how to use this method to multiply a <xref:System.Windows.Vector> by a <xref:System.Windows.Vector>.  \n  \n [!code-cs[VectorExamples_snip#GetDotProductExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#getdotproductexample_csharp)]"
  syntax:
    content: public static double Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要相乘的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要相乘的第二个向量结构。"
    return:
      type: System.Double
      description: "A<xref:System.Double>包含的标量的点积<code> vector1 </code>和<code> vector2 </code>，使用以下公式计算︰ `(vector1.X * vector2.X) + (vector1.Y * vector2.Y)` </xref:System.Double>"
  overload: System.Windows.Vector.Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Negate
  id: Negate
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Negate()
  nameWithType: Vector.Negate()
  fullName: System.Windows.Vector.Negate()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "对此向量求反。 向量具有相同作为量值之前，但其方向现在是相反。"
  remarks: ''
  example:
  - "The following example shows how to use this method to negate a vector.  \n  \n [!code-cs[VectorExamples_snip#NegateExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#negateexample_csharp)]"
  syntax:
    content: public void Negate ();
    parameters: []
  overload: System.Windows.Vector.Negate*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Normalize
  id: Normalize
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Normalize()
  nameWithType: Vector.Normalize()
  fullName: System.Windows.Vector.Normalize()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "规范化此向量。"
  remarks: "规范化的向量维护其方向但其<xref:System.Windows.Vector.Length%2A>成为 1。</xref:System.Windows.Vector.Length%2A> 所得的向量情况通常称作单元向量。 一个向量，规范化除以<xref:System.Windows.Vector.Length%2A>.</xref:System.Windows.Vector.Length%2A>由其自身的向量"
  example:
  - "The following example shows how to use this method to normalize a vector.  \n  \n [!code-cs[VectorExamples_snip#NormalizeExample_csharp](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#normalizeexample_csharp)]"
  syntax:
    content: public void Normalize ();
    parameters: []
  overload: System.Windows.Vector.Normalize*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)
  id: op_Addition(System.Windows.Vector,System.Windows.Point)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Addition(Vector,Point)
  nameWithType: Vector.op_Addition(Vector,Point)
  fullName: System.Windows.Vector.op_Addition(Vector,Point)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "平移指定向量的点，并返回所产生的点。"
  remarks: ''
  example:
  - "The following example shows how to use this operator (+) to translate a <xref:System.Windows.Point> structure to a <xref:System.Windows.Vector> structure.  \n  \n [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedadditionoperatorexample2)]\n [!code-cs[VectorExamples_snip#OverloadedAdditionOperatorExample2](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedadditionoperatorexample2)]"
  syntax:
    content: public static System.Windows.Point op_Addition (System.Windows.Vector vector, System.Windows.Point point);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "用于转换的向量`point`。"
    - id: point
      type: System.Windows.Point
      description: "要转换的点。"
    return:
      type: System.Windows.Point
      description: "转换的结果<code> point </code>通过<code> vector </code>。"
  overload: System.Windows.Vector.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)
  id: op_Addition(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Addition(Vector,Vector)
  nameWithType: Vector.op_Addition(Vector,Vector)
  fullName: System.Windows.Vector.op_Addition(Vector,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将两个向量，并返回结果作为一个向量。"
  remarks: ''
  example:
  - "The following example shows how to use this operator (+) to add two <xref:System.Windows.Vector> structures and return a <xref:System.Windows.Vector>.  \n  \n [!code-vb[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedadditionoperatorexample1)]\n [!code-cs[VectorExamples_snip#OverloadedAdditionOperatorExample1](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedadditionoperatorexample1)]"
  syntax:
    content: public static System.Windows.Vector op_Addition (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要相加的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要相加的第二个向量。"
    return:
      type: System.Windows.Vector
      description: "The sum of <code>vector1</code> and <code>vector2</code>."
  overload: System.Windows.Vector.op_Addition*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)
  id: op_Division(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Division(Vector,Double)
  nameWithType: Vector.op_Division(Vector,Double)
  fullName: System.Windows.Vector.op_Division(Vector,Double)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定的向量除以指定标量并返回所得的向量。"
  remarks: ''
  example:
  - "The following example shows how to use this operator (/) to divide a <xref:System.Windows.Vector> structure by a scalar.  \n  \n [!code-vb[VectorExamples_snip#OverloadedDivisionOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadeddivisionoperatorexample)]\n [!code-cs[VectorExamples_snip#OverloadedDivisionOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadeddivisionoperatorexample)]"
  syntax:
    content: public static System.Windows.Vector op_Division (System.Windows.Vector vector, double scalar);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要将划分的向量。"
    - id: scalar
      type: System.Double
      description: "依据标量`vector`将被分割。"
    return:
      type: System.Windows.Vector
      description: "The result of dividing <code>vector</code> by <code>scalar</code>."
  overload: System.Windows.Vector.op_Division*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)
  id: op_Equality(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Equality(Vector,Vector)
  nameWithType: Vector.op_Equality(Vector,Vector)
  fullName: System.Windows.Vector.op_Equality(Vector,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较相等的两个向量。"
  remarks: "向量的<xref:System.Windows.Vector.X%2A>和<xref:System.Windows.Vector.Y%2A>属性描述了使用<xref:System.Double>值。</xref:System.Double> </xref:System.Windows.Vector.Y%2A> </xref:System.Windows.Vector.X%2A> 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Windows.Vector>逻辑上相等的结构可能会失败。</xref:System.Windows.Vector> </xref:System.Double>"
  example:
  - "The following example shows how to use this operator (==) to check whether two <xref:System.Windows.Vector> structures are equal.  \n  \n [!code-vb[VectorExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedequalityoperatorexample)]\n [!code-cs[VectorExamples_snip#OverloadedEqualityOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedequalityoperatorexample)]"
  syntax:
    content: public static bool op_Equality (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要比较的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要比较的第二个向量。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <>*> and <>*> components of <code>vector1</code> and <code>vector2</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Vector.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)
  id: op_Explicit(System.Windows.Vector to System.Windows.Point)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Explicit(Vector)
  nameWithType: Vector.op_Explicit(Vector)
  fullName: System.Windows.Vector.op_Explicit(Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: public static System.Windows.Point op_Explicit (System.Windows.Vector vector);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要添加。"
    return:
      type: System.Windows.Point
      description: "要添加。"
  overload: System.Windows.Vector.op_Explicit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)
  id: op_Explicit(System.Windows.Vector to System.Windows.Size)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Explicit(Vector)
  nameWithType: Vector.op_Explicit(Vector)
  fullName: System.Windows.Vector.op_Explicit(Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  syntax:
    content: public static System.Windows.Size op_Explicit (System.Windows.Vector vector);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要添加。"
    return:
      type: System.Windows.Size
      description: "要添加。"
  overload: System.Windows.Vector.op_Explicit*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)
  id: op_Inequality(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Inequality(Vector,Vector)
  nameWithType: Vector.op_Inequality(Vector,Vector)
  fullName: System.Windows.Vector.op_Inequality(Vector,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "比较两个向量不相等。"
  remarks: "向量的<xref:System.Windows.Vector.X%2A>和<xref:System.Windows.Vector.Y%2A>属性描述了使用<xref:System.Double>值。</xref:System.Double> </xref:System.Windows.Vector.Y%2A> </xref:System.Windows.Vector.X%2A> 因为的值<xref:System.Double>它，比较两个执行算术运算时可能会丢失精度<xref:System.Windows.Vector>逻辑上相等的结构可能会失败。</xref:System.Windows.Vector> </xref:System.Double>"
  example:
  - "The following example shows how to use this operator (!=) to check whether two <xref:System.Windows.Vector> structures are not equal.  \n  \n [!code-vb[VectorExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedinequalityoperatorexample)]\n [!code-cs[VectorExamples_snip#OverloadedInequalityOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedinequalityoperatorexample)]"
  syntax:
    content: public static bool op_Inequality (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要比较的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要比较的第二个向量。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the <>*> and <>*> components of <code>vector1</code> and <code>vector2</code> are different; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Windows.Vector.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)
  id: op_Multiply(System.Double,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Multiply(Double,Vector)
  nameWithType: Vector.op_Multiply(Double,Vector)
  fullName: System.Windows.Vector.op_Multiply(Double,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定向量乘以指定的标量并返回所得的向量。"
  remarks: ''
  example:
  - "The following example shows how to use this operator (*) to multiply a scalar by a <xref:System.Windows.Vector> structure.  \n  \n [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedmultiplicationoperatorexample2)]\n [!code-cs[VectorExamples_snip#OverloadedMultiplicationOperatorExample2](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedmultiplicationoperatorexample2)]"
  syntax:
    content: public static System.Windows.Vector op_Multiply (double scalar, System.Windows.Vector vector);
    parameters:
    - id: scalar
      type: System.Double
      description: "要相乘的标量。"
    - id: vector
      type: System.Windows.Vector
      description: "要相乘的向量。"
    return:
      type: System.Windows.Vector
      description: "相乘的结果<code> scalar </code>和<code> vector </code>。"
  overload: System.Windows.Vector.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)
  id: op_Multiply(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Multiply(Vector,Double)
  nameWithType: Vector.op_Multiply(Vector,Double)
  fullName: System.Windows.Vector.op_Multiply(Vector,Double)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定的向量乘以指定标量并返回所得的向量。"
  remarks: ''
  example:
  - "The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a scalar.  \n  \n [!code-vb[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedmultiplicationoperatorexample1)]\n [!code-cs[VectorExamples_snip#OverloadedMultiplicationOperatorExample1](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedmultiplicationoperatorexample1)]"
  syntax:
    content: public static System.Windows.Vector op_Multiply (System.Windows.Vector vector, double scalar);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要相乘的向量。"
    - id: scalar
      type: System.Double
      description: "要相乘的标量。"
    return:
      type: System.Windows.Vector
      description: "相乘的结果<code> vector </code>和<code> scalar </code>。"
  overload: System.Windows.Vector.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  id: op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Multiply(Vector,Matrix)
  nameWithType: Vector.op_Multiply(Vector,Matrix)
  fullName: System.Windows.Vector.op_Multiply(Vector,Matrix)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将指定向量使用指定的坐标空间转换<xref href=&quot;System.Windows.Media.Matrix&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Media.Matrix> structure.  \n  \n [!code-vb[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedmultiplyvectorbymatrixoperatorexample)]\n [!code-cs[VectorExamples_snip#OverloadedMultiplyVectorByMatrixOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedmultiplyvectorbymatrixoperatorexample)]"
  syntax:
    content: public static System.Windows.Vector op_Multiply (System.Windows.Vector vector, System.Windows.Media.Matrix matrix);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要变换的向量。"
    - id: matrix
      type: System.Windows.Media.Matrix
      description: "要应用到的转换`vector`。"
    return:
      type: System.Windows.Vector
      description: "转换的结果<code> vector </code>通过<code> matrix </code>。"
  overload: System.Windows.Vector.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)
  id: op_Multiply(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Multiply(Vector,Vector)
  nameWithType: Vector.op_Multiply(Vector,Vector)
  fullName: System.Windows.Vector.op_Multiply(Vector,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "计算两个指定的向量结构的点积，并将结果作为一种<xref:System.Double>。</xref:System.Double>返回"
  remarks: ''
  example:
  - "The following example shows how to use this operator (*) to multiply a <xref:System.Windows.Vector> structure by a <xref:System.Windows.Vector>.  \n  \n [!code-vb[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedoperatorgetdotproductexample)]\n [!code-cs[VectorExamples_snip#OverloadedOperatorGetDotProductExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedoperatorgetdotproductexample)]"
  syntax:
    content: public static double op_Multiply (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "要相乘的第一个向量。"
    - id: vector2
      type: System.Windows.Vector
      description: "要相乘的第二个向量。"
    return:
      type: System.Double
      description: "返回<xref:System.Double>包含的标量的点积<code> vector1 </code>和<code> vector2 </code>，使用以下公式计算︰ `vector1.X * vector2.X + vector1.Y * vector2.Y` </xref:System.Double>"
  overload: System.Windows.Vector.op_Multiply*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)
  id: op_Subtraction(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_Subtraction(Vector,Vector)
  nameWithType: Vector.op_Subtraction(Vector,Vector)
  fullName: System.Windows.Vector.op_Subtraction(Vector,Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "向量中减去一个指定从另一个。"
  remarks: ''
  example:
  - "The following example shows how to use this operator (-) to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.  \n  \n [!code-vb[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadedsubtractionoperatorexample)]\n [!code-cs[VectorExamples_snip#OverloadedSubtractionOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadedsubtractionoperatorexample)]"
  syntax:
    content: public static System.Windows.Vector op_Subtraction (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "从中向量`vector2`减去。"
    - id: vector2
      type: System.Windows.Vector
      description: "要从中减去的向量`vector1`。"
    return:
      type: System.Windows.Vector
      description: "The difference between <code>vector1</code> and <code>vector2</code>."
  overload: System.Windows.Vector.op_Subtraction*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)
  id: op_UnaryNegation(System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: op_UnaryNegation(Vector)
  nameWithType: Vector.op_UnaryNegation(Vector)
  fullName: System.Windows.Vector.op_UnaryNegation(Vector)
  type: Operator
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "对指定的向量求反。"
  remarks: ''
  example:
  - "The following example shows how to use this negation operator to negate a <xref:System.Windows.Vector> structure.  \n  \n [!code-vb[VectorExamples_snip#OverloadedNegationOperatorExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#overloadednegationoperatorexample)]\n [!code-cs[VectorExamples_snip#OverloadedNegationOperatorExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#overloadednegationoperatorexample)]"
  syntax:
    content: public static System.Windows.Vector op_UnaryNegation (System.Windows.Vector vector);
    parameters:
    - id: vector
      type: System.Windows.Vector
      description: "要求反的向量。"
    return:
      type: System.Windows.Vector
      description: "一个具有向量<> *1> 和<> *1> 相反的值的<> *1> 和<> *1> 的值<code> vector </code>。"
  overload: System.Windows.Vector.op_UnaryNegation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Parse(System.String)
  id: Parse(System.String)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Parse(String)
  nameWithType: Vector.Parse(String)
  fullName: System.Windows.Vector.Parse(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "将向量的字符串表示形式转换为等效<xref href=&quot;System.Windows.Vector&quot;></xref>结构。"
  remarks: ''
  example:
  - "The following example shows how to use this method to convert a string representation of a vector into a <xref:System.Windows.Vector> structure.  \n  \n [!code-vb[VectorExamples_snip#ParseExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#parseexample)]\n [!code-cs[VectorExamples_snip#ParseExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#parseexample)]"
  syntax:
    content: public static System.Windows.Vector Parse (string source);
    parameters:
    - id: source
      type: System.String
      description: "向量的字符串表示形式。"
    return:
      type: System.Windows.Vector
      description: "等效于<xref href=&quot;System.Windows.Vector&quot;></xref>结构。"
  overload: System.Windows.Vector.Parse*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)
  id: Subtract(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Subtract(Vector,Vector)
  nameWithType: Vector.Subtract(Vector,Vector)
  fullName: System.Windows.Vector.Subtract(Vector,Vector)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "向量中减去另一个指定向量中指定的向量。"
  remarks: ''
  example:
  - "The following example shows how to use this method to subtract a <xref:System.Windows.Vector> structure from a <xref:System.Windows.Vector> structure.  \n  \n [!code-vb[VectorExamples_snip#SubtractExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#subtractexample)]\n [!code-cs[VectorExamples_snip#SubtractExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#subtractexample)]"
  syntax:
    content: public static System.Windows.Vector Subtract (System.Windows.Vector vector1, System.Windows.Vector vector2);
    parameters:
    - id: vector1
      type: System.Windows.Vector
      description: "从中向量`vector2`减去。"
    - id: vector2
      type: System.Windows.Vector
      description: "要从中减去的向量`vector1`。"
    return:
      type: System.Windows.Vector
      description: "The difference between <code>vector1</code> and <code>vector2</code>."
  overload: System.Windows.Vector.Subtract*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)
  id: System#IFormattable#ToString(System.String,System.IFormatProvider)
  isEii: true
  parent: System.Windows.Vector
  langs:
  - csharp
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Vector.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Vector.System.IFormattable.ToString(String,IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "此成员支持[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]基础结构，不应在代码中直接使用。 有关此成员的说明，请参阅<xref:System.IFormattable.ToString*>。</xref:System.IFormattable.ToString*>"
  syntax:
    content: string IFormattable.ToString (string format, IFormatProvider provider);
    parameters:
    - id: format
      type: System.String
      description: "指定要使用的格式的字符串。       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>若要使用的类型定义的默认格式<xref:System.IFormattable>实现。</xref:System.IFormattable>"
    - id: provider
      type: System.IFormatProvider
      description: "<xref uid=&quot;langword_csharp_IFormatProvider&quot; name=&quot;IFormatProvider&quot; href=&quot;&quot;> </xref>用于设置格式的值。       - <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>从操作系统的当前区域设置获取数字格式信息。"
    return:
      type: System.String
      description: "包含指定的格式中的当前实例的值的字符串。"
  overload: System.Windows.Vector.System#IFormattable#ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.ToString
  id: ToString
  parent: System.Windows.Vector
  langs:
  - csharp
  name: ToString()
  nameWithType: Vector.ToString()
  fullName: System.Windows.Vector.ToString()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回的字符串表示形式这<xref href=&quot;System.Windows.Vector&quot;></xref>结构。"
  remarks: ''
  example:
  - "The following example shows how to use this method to get a string representation of a <xref:System.Windows.Vector>.  \n  \n [!code-vb[VectorExamples_snip#ToStringExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#tostringexample)]\n [!code-cs[VectorExamples_snip#ToStringExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#tostringexample)]"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "一个字符串，表示<> *1> 和<> *1> 值<xref href=&quot;System.Windows.Vector&quot;> </xref>。"
  overload: System.Windows.Vector.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.ToString(System.IFormatProvider)
  id: ToString(System.IFormatProvider)
  parent: System.Windows.Vector
  langs:
  - csharp
  name: ToString(IFormatProvider)
  nameWithType: Vector.ToString(IFormatProvider)
  fullName: System.Windows.Vector.ToString(IFormatProvider)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "返回的字符串表示形式这<xref href=&quot;System.Windows.Vector&quot;></xref>使用指定的格式设置信息的结构。"
  syntax:
    content: public string ToString (IFormatProvider provider);
    parameters:
    - id: provider
      type: System.IFormatProvider
      description: "区域性特定格式设置信息。"
    return:
      type: System.String
      description: "一个字符串，表示<> *1> 和<> *1> 值<xref href=&quot;System.Windows.Vector&quot;> </xref>。"
  overload: System.Windows.Vector.ToString*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.X
  id: X
  parent: System.Windows.Vector
  langs:
  - csharp
  name: X
  nameWithType: Vector.X
  fullName: System.Windows.Vector.X
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取或设置此向量的 X 分量。"
  remarks: ''
  example:
  - "The following example shows how to check two <xref:System.Windows.Vector> structures for equality.  \n  \n [!code-vb[VectorExamples_snip#VectorEqualityExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#vectorequalityexample)]\n [!code-cs[VectorExamples_snip#VectorEqualityExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#vectorequalityexample)]"
  syntax:
    content: public double X { get; set; }
    return:
      type: System.Double
      description: "此向量的 X 分量。 默认值为 0"
  overload: System.Windows.Vector.X*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Vector.Y
  id: Y
  parent: System.Windows.Vector
  langs:
  - csharp
  name: Y
  nameWithType: Vector.Y
  fullName: System.Windows.Vector.Y
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.Windows
  summary: "获取或设置此向量的 Y 分量。"
  remarks: ''
  example:
  - "The following example shows how to check two <xref:System.Windows.Vector> structures for equality.  \n  \n [!code-vb[VectorExamples_snip#VectorEqualityExample](~/add/codesnippet/visualbasic/vectorexamples_snip/vectorexample.vb#vectorequalityexample)]\n [!code-cs[VectorExamples_snip#VectorEqualityExample](~/add/codesnippet/csharp/VectorExamples_snip/VectorExample.cs#vectorequalityexample)]"
  syntax:
    content: public double Y { get; set; }
    return:
      type: System.Double
      description: "此向量的 Y 分量。 默认值为 0"
  overload: System.Windows.Vector.Y*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ValueType
  isExternal: false
  name: System.ValueType
- uid: System.Windows.Vector.#ctor(System.Double,System.Double)
  parent: System.Windows.Vector
  isExternal: false
  name: Vector(Double,Double)
  nameWithType: Vector.Vector(Double,Double)
  fullName: System.Windows.Vector.Vector(Double,Double)
- uid: System.Double
  parent: System
  isExternal: true
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Point)
  parent: System.Windows.Vector
  isExternal: false
  name: Add(Vector,Point)
  nameWithType: Vector.Add(Vector,Point)
  fullName: System.Windows.Vector.Add(Vector,Point)
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Vector
  parent: System.Windows
  isExternal: false
  name: Vector
  nameWithType: Vector
  fullName: System.Windows.Vector
- uid: System.Windows.Vector.Add(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: Add(Vector,Vector)
  nameWithType: Vector.Add(Vector,Vector)
  fullName: System.Windows.Vector.Add(Vector,Vector)
- uid: System.Windows.Vector.AngleBetween(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: AngleBetween(Vector,Vector)
  nameWithType: Vector.AngleBetween(Vector,Vector)
  fullName: System.Windows.Vector.AngleBetween(Vector,Vector)
- uid: System.Windows.Vector.CrossProduct(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: CrossProduct(Vector,Vector)
  nameWithType: Vector.CrossProduct(Vector,Vector)
  fullName: System.Windows.Vector.CrossProduct(Vector,Vector)
- uid: System.Windows.Vector.Determinant(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: Determinant(Vector,Vector)
  nameWithType: Vector.Determinant(Vector,Vector)
  fullName: System.Windows.Vector.Determinant(Vector,Vector)
- uid: System.Windows.Vector.Divide(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  isExternal: false
  name: Divide(Vector,Double)
  nameWithType: Vector.Divide(Vector,Double)
  fullName: System.Windows.Vector.Divide(Vector,Double)
- uid: System.Windows.Vector.Equals(System.Object)
  parent: System.Windows.Vector
  isExternal: false
  name: Equals(Object)
  nameWithType: Vector.Equals(Object)
  fullName: System.Windows.Vector.Equals(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Vector.Equals(System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: Equals(Vector)
  nameWithType: Vector.Equals(Vector)
  fullName: System.Windows.Vector.Equals(Vector)
- uid: System.Windows.Vector.Equals(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: Equals(Vector,Vector)
  nameWithType: Vector.Equals(Vector,Vector)
  fullName: System.Windows.Vector.Equals(Vector,Vector)
- uid: System.Windows.Vector.GetHashCode
  parent: System.Windows.Vector
  isExternal: false
  name: GetHashCode()
  nameWithType: Vector.GetHashCode()
  fullName: System.Windows.Vector.GetHashCode()
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Vector.Length
  parent: System.Windows.Vector
  isExternal: false
  name: Length
  nameWithType: Vector.Length
  fullName: System.Windows.Vector.Length
- uid: System.Windows.Vector.LengthSquared
  parent: System.Windows.Vector
  isExternal: false
  name: LengthSquared
  nameWithType: Vector.LengthSquared
  fullName: System.Windows.Vector.LengthSquared
- uid: System.Windows.Vector.Multiply(System.Double,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: Multiply(Double,Vector)
  nameWithType: Vector.Multiply(Double,Vector)
  fullName: System.Windows.Vector.Multiply(Double,Vector)
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  isExternal: false
  name: Multiply(Vector,Double)
  nameWithType: Vector.Multiply(Vector,Double)
  fullName: System.Windows.Vector.Multiply(Vector,Double)
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  parent: System.Windows.Vector
  isExternal: false
  name: Multiply(Vector,Matrix)
  nameWithType: Vector.Multiply(Vector,Matrix)
  fullName: System.Windows.Vector.Multiply(Vector,Matrix)
- uid: System.Windows.Media.Matrix
  parent: System.Windows.Media
  isExternal: false
  name: Matrix
  nameWithType: Matrix
  fullName: System.Windows.Media.Matrix
- uid: System.Windows.Vector.Multiply(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: Multiply(Vector,Vector)
  nameWithType: Vector.Multiply(Vector,Vector)
  fullName: System.Windows.Vector.Multiply(Vector,Vector)
- uid: System.Windows.Vector.Negate
  parent: System.Windows.Vector
  isExternal: false
  name: Negate()
  nameWithType: Vector.Negate()
  fullName: System.Windows.Vector.Negate()
- uid: System.Windows.Vector.Normalize
  parent: System.Windows.Vector
  isExternal: false
  name: Normalize()
  nameWithType: Vector.Normalize()
  fullName: System.Windows.Vector.Normalize()
- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Point)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Addition(Vector,Point)
  nameWithType: Vector.op_Addition(Vector,Point)
  fullName: System.Windows.Vector.op_Addition(Vector,Point)
- uid: System.Windows.Vector.op_Addition(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Addition(Vector,Vector)
  nameWithType: Vector.op_Addition(Vector,Vector)
  fullName: System.Windows.Vector.op_Addition(Vector,Vector)
- uid: System.Windows.Vector.op_Division(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Division(Vector,Double)
  nameWithType: Vector.op_Division(Vector,Double)
  fullName: System.Windows.Vector.op_Division(Vector,Double)
- uid: System.Windows.Vector.op_Equality(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Equality(Vector,Vector)
  nameWithType: Vector.op_Equality(Vector,Vector)
  fullName: System.Windows.Vector.op_Equality(Vector,Vector)
- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Point)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Explicit(Vector)
  nameWithType: Vector.op_Explicit(Vector)
  fullName: System.Windows.Vector.op_Explicit(Vector)
- uid: System.Windows.Vector.op_Explicit(System.Windows.Vector to System.Windows.Size)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Explicit(Vector)
  nameWithType: Vector.op_Explicit(Vector)
  fullName: System.Windows.Vector.op_Explicit(Vector)
- uid: System.Windows.Size
  parent: System.Windows
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Windows.Size
- uid: System.Windows.Vector.op_Inequality(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Inequality(Vector,Vector)
  nameWithType: Vector.op_Inequality(Vector,Vector)
  fullName: System.Windows.Vector.op_Inequality(Vector,Vector)
- uid: System.Windows.Vector.op_Multiply(System.Double,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Multiply(Double,Vector)
  nameWithType: Vector.op_Multiply(Double,Vector)
  fullName: System.Windows.Vector.op_Multiply(Double,Vector)
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Double)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Multiply(Vector,Double)
  nameWithType: Vector.op_Multiply(Vector,Double)
  fullName: System.Windows.Vector.op_Multiply(Vector,Double)
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Media.Matrix)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Multiply(Vector,Matrix)
  nameWithType: Vector.op_Multiply(Vector,Matrix)
  fullName: System.Windows.Vector.op_Multiply(Vector,Matrix)
- uid: System.Windows.Vector.op_Multiply(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Multiply(Vector,Vector)
  nameWithType: Vector.op_Multiply(Vector,Vector)
  fullName: System.Windows.Vector.op_Multiply(Vector,Vector)
- uid: System.Windows.Vector.op_Subtraction(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: op_Subtraction(Vector,Vector)
  nameWithType: Vector.op_Subtraction(Vector,Vector)
  fullName: System.Windows.Vector.op_Subtraction(Vector,Vector)
- uid: System.Windows.Vector.op_UnaryNegation(System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: op_UnaryNegation(Vector)
  nameWithType: Vector.op_UnaryNegation(Vector)
  fullName: System.Windows.Vector.op_UnaryNegation(Vector)
- uid: System.Windows.Vector.Parse(System.String)
  parent: System.Windows.Vector
  isExternal: false
  name: Parse(String)
  nameWithType: Vector.Parse(String)
  fullName: System.Windows.Vector.Parse(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Vector.Subtract(System.Windows.Vector,System.Windows.Vector)
  parent: System.Windows.Vector
  isExternal: false
  name: Subtract(Vector,Vector)
  nameWithType: Vector.Subtract(Vector,Vector)
  fullName: System.Windows.Vector.Subtract(Vector,Vector)
- uid: System.Windows.Vector.System#IFormattable#ToString(System.String,System.IFormatProvider)
  parent: System.Windows.Vector
  isExternal: false
  name: System.IFormattable.ToString(String,IFormatProvider)
  nameWithType: Vector.System.IFormattable.ToString(String,IFormatProvider)
  fullName: System.Windows.Vector.System.IFormattable.ToString(String,IFormatProvider)
- uid: System.IFormatProvider
  parent: System
  isExternal: true
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Windows.Vector.ToString
  parent: System.Windows.Vector
  isExternal: false
  name: ToString()
  nameWithType: Vector.ToString()
  fullName: System.Windows.Vector.ToString()
- uid: System.Windows.Vector.ToString(System.IFormatProvider)
  parent: System.Windows.Vector
  isExternal: false
  name: ToString(IFormatProvider)
  nameWithType: Vector.ToString(IFormatProvider)
  fullName: System.Windows.Vector.ToString(IFormatProvider)
- uid: System.Windows.Vector.X
  parent: System.Windows.Vector
  isExternal: false
  name: X
  nameWithType: Vector.X
  fullName: System.Windows.Vector.X
- uid: System.Windows.Vector.Y
  parent: System.Windows.Vector
  isExternal: false
  name: Y
  nameWithType: Vector.Y
  fullName: System.Windows.Vector.Y
- uid: System.Windows.Vector.#ctor*
  parent: System.Windows.Vector
  isExternal: false
  name: Vector
  nameWithType: Vector.Vector
- uid: System.Windows.Vector.Add*
  parent: System.Windows.Vector
  isExternal: false
  name: Add
  nameWithType: Vector.Add
- uid: System.Windows.Vector.AngleBetween*
  parent: System.Windows.Vector
  isExternal: false
  name: AngleBetween
  nameWithType: Vector.AngleBetween
- uid: System.Windows.Vector.CrossProduct*
  parent: System.Windows.Vector
  isExternal: false
  name: CrossProduct
  nameWithType: Vector.CrossProduct
- uid: System.Windows.Vector.Determinant*
  parent: System.Windows.Vector
  isExternal: false
  name: Determinant
  nameWithType: Vector.Determinant
- uid: System.Windows.Vector.Divide*
  parent: System.Windows.Vector
  isExternal: false
  name: Divide
  nameWithType: Vector.Divide
- uid: System.Windows.Vector.Equals*
  parent: System.Windows.Vector
  isExternal: false
  name: Equals
  nameWithType: Vector.Equals
- uid: System.Windows.Vector.GetHashCode*
  parent: System.Windows.Vector
  isExternal: false
  name: GetHashCode
  nameWithType: Vector.GetHashCode
- uid: System.Windows.Vector.Length*
  parent: System.Windows.Vector
  isExternal: false
  name: Length
  nameWithType: Vector.Length
- uid: System.Windows.Vector.LengthSquared*
  parent: System.Windows.Vector
  isExternal: false
  name: LengthSquared
  nameWithType: Vector.LengthSquared
- uid: System.Windows.Vector.Multiply*
  parent: System.Windows.Vector
  isExternal: false
  name: Multiply
  nameWithType: Vector.Multiply
- uid: System.Windows.Vector.Negate*
  parent: System.Windows.Vector
  isExternal: false
  name: Negate
  nameWithType: Vector.Negate
- uid: System.Windows.Vector.Normalize*
  parent: System.Windows.Vector
  isExternal: false
  name: Normalize
  nameWithType: Vector.Normalize
- uid: System.Windows.Vector.op_Addition*
  parent: System.Windows.Vector
  isExternal: false
  name: op_Addition
  nameWithType: Vector.op_Addition
- uid: System.Windows.Vector.op_Division*
  parent: System.Windows.Vector
  isExternal: false
  name: op_Division
  nameWithType: Vector.op_Division
- uid: System.Windows.Vector.op_Equality*
  parent: System.Windows.Vector
  isExternal: false
  name: op_Equality
  nameWithType: Vector.op_Equality
- uid: System.Windows.Vector.op_Explicit*
  parent: System.Windows.Vector
  isExternal: false
  name: op_Explicit
  nameWithType: Vector.op_Explicit
- uid: System.Windows.Vector.op_Inequality*
  parent: System.Windows.Vector
  isExternal: false
  name: op_Inequality
  nameWithType: Vector.op_Inequality
- uid: System.Windows.Vector.op_Multiply*
  parent: System.Windows.Vector
  isExternal: false
  name: op_Multiply
  nameWithType: Vector.op_Multiply
- uid: System.Windows.Vector.op_Subtraction*
  parent: System.Windows.Vector
  isExternal: false
  name: op_Subtraction
  nameWithType: Vector.op_Subtraction
- uid: System.Windows.Vector.op_UnaryNegation*
  parent: System.Windows.Vector
  isExternal: false
  name: op_UnaryNegation
  nameWithType: Vector.op_UnaryNegation
- uid: System.Windows.Vector.Parse*
  parent: System.Windows.Vector
  isExternal: false
  name: Parse
  nameWithType: Vector.Parse
- uid: System.Windows.Vector.Subtract*
  parent: System.Windows.Vector
  isExternal: false
  name: Subtract
  nameWithType: Vector.Subtract
- uid: System.Windows.Vector.System#IFormattable#ToString*
  parent: System.Windows.Vector
  isExternal: false
  name: System.IFormattable.ToString
  nameWithType: Vector.System.IFormattable.ToString
- uid: System.Windows.Vector.ToString*
  parent: System.Windows.Vector
  isExternal: false
  name: ToString
  nameWithType: Vector.ToString
- uid: System.Windows.Vector.X*
  parent: System.Windows.Vector
  isExternal: false
  name: X
  nameWithType: Vector.X
- uid: System.Windows.Vector.Y*
  parent: System.Windows.Vector
  isExternal: false
  name: Y
  nameWithType: Vector.Y
