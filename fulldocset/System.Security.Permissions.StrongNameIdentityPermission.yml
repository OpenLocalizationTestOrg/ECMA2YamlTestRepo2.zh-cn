### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.StrongNameIdentityPermission
  id: StrongNameIdentityPermission
  children:
  - System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)
  - System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  - System.Security.Permissions.StrongNameIdentityPermission.Copy
  - System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)
  - System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)
  - System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)
  - System.Security.Permissions.StrongNameIdentityPermission.Name
  - System.Security.Permissions.StrongNameIdentityPermission.PublicKey
  - System.Security.Permissions.StrongNameIdentityPermission.ToXml
  - System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)
  - System.Security.Permissions.StrongNameIdentityPermission.Version
  langs:
  - csharp
  name: StrongNameIdentityPermission
  nameWithType: StrongNameIdentityPermission
  fullName: System.Security.Permissions.StrongNameIdentityPermission
  type: Class
  summary: "定义强名称标识权限。 此类不能被继承。"
  remarks: "> [!IMPORTANT]1> 第一页为[!INCLUDE[net_v40_long](~/add/includes/net-v40-long-md.md)]，不使用标识权限。   >> 在.NET framework 1.0 和 1.1 版中，标识权限不能有<xref:System.Security.Permissions.PermissionState>权限状态值。</xref:System.Security.Permissions.PermissionState> 在.NET Framework 2.0 及更高版本中，标识权限可以具有任何权限状态值。  这意味着，在版本 2.0 和更高版本中，标识权限具有相同的行为实现的权限<xref:System.Security.Permissions.IUnrestrictedPermission>接口。</xref:System.Security.Permissions.IUnrestrictedPermission> 也就是说，要求的标识始终成功，而不考虑程序集，标识程序集已被授予完全信任。       使用 StrongNameIdentityPermission 确认调用代码是在特定强名称的代码的程序集中。 仅当堆栈中的所有程序集具有正确的证据，以满足此要求，有关 StrongNameIdentityPermission 的完整要求都会成功。 链接要求使用<xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute>属性成功仅当直接调用方具有正确的证据。</xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute>       强名称标识基于称为二进制大型对象 (BLOB)，它与的名称和版本特定的程序集 （可选） 结合的加密公共密钥。 密钥定义唯一的命名空间，并提供强名称为正版，因为该名称定义必须由相应的私钥进行签名的程序集中的验证。       请注意，强名称密钥的有效性不依赖或一定颁发密钥的任何证书上的信任关系。       在.NET framework 1.0 和 1.1 版中，对标识权限的要求是有效的这是调用程序集是完全受信任时如此。 即，即使调用程序集具有完全信任，则将失败对标识权限的请求，如果程序集不符合要求的条件。 中的.NET Framework 版本 2.0 及更高版本，标识权限的需求较为低效如果调用程序集具有完全信任权限。 这样可确保所有权限的一致性，并消除标识权限的处理方式。       强名称的完整说明，请参阅<xref:System.Security.Policy.StrongName>引用页。</xref:System.Security.Policy.StrongName> 有关强名称的程序集的详细信息，请参阅[强名称程序集](~/add/includes/ajax-current-ext-md.md)。       StrongNameIdentityPermission 类用于定义强名称对要求访问的一种类型的公共成员。 <xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute>属性可以用于定义强名称程序集级别的要求。</xref:System.Security.Permissions.StrongNameIdentityPermissionAttribute> 在.NET Framework 2.0 及更高版本中，你还可以使用<xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute>特性来指定该程序集中的所有非公共类型都是对另一个程序集可见。</xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> 有关详细信息，请参阅[友元程序集](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class StrongNameIdentityPermission : System.Security.CodeAccessPermission
  inheritance:
  - System.Object
  - System.Security.CodeAccessPermission
  implements: []
  inheritedMembers:
  - System.Security.CodeAccessPermission.Assert
  - System.Security.CodeAccessPermission.Demand
  - System.Security.CodeAccessPermission.Deny
  - System.Security.CodeAccessPermission.Equals(System.Object)
  - System.Security.CodeAccessPermission.GetHashCode
  - System.Security.CodeAccessPermission.PermitOnly
  - System.Security.CodeAccessPermission.RevertAll
  - System.Security.CodeAccessPermission.RevertAssert
  - System.Security.CodeAccessPermission.RevertDeny
  - System.Security.CodeAccessPermission.RevertPermitOnly
  - System.Security.CodeAccessPermission.ToString
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)
  id: '#ctor(System.Security.Permissions.PermissionState)'
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: StrongNameIdentityPermission(PermissionState)
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新实例<xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;></xref>使用指定的类<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  remarks: "创建完全受限制 (`None`) 或`Unrestricted`权限。      1> [!NOTE] 1> 在.NET Framework 1.0 和 1.1 版中，标识权限不能具有<xref:System.Security.Permissions.PermissionState>权限状态值。</xref:System.Security.Permissions.PermissionState> 在.NET Framework 2.0 及更高版本中，标识权限可以具有任何权限状态值。  这意味着，在版本 2.0 和更高版本中，标识权限具有相同的行为实现的权限<xref:System.Security.Permissions.IUnrestrictedPermission>接口。</xref:System.Security.Permissions.IUnrestrictedPermission> 也就是说，要求的标识始终成功，而不考虑程序集，标识程序集已被授予完全信任。       在.NET framework 1.0 和 1.1 版中，对标识权限的要求是有效，调用程序集是完全受信任时也如此。 即，尽管调用程序集具有完全信任，则将失败标识权限的要求，如果程序集不符合要求的条件。 中的.NET Framework 版本 2.0 及更高版本，标识权限的需求较为低效如果调用程序集具有完全信任权限。 这可确保对所有其他权限，消除标识权限的处理方式的一致性。       使用此构造函数中包含的权限状态值<xref:System.Security.Permissions.PermissionState>创建匹配没有强名称标识权限。</xref:System.Security.Permissions.PermissionState> 如果随后将设置<xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A>和<xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A>可以由权限表示属性，一个特定强名称标识。</xref:System.Security.Permissions.StrongNameIdentityPermission.Version%2A> </xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A>"
  example:
  - "The following code example shows the use of the StrongNameIdentityPermission constructor.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/visualbasic/ecc5c20f-4468-431e-a2f0-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/cpp/ecc5c20f-4468-431e-a2f0-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#7](~/add/codesnippet/csharp/ecc5c20f-4468-431e-a2f0-_1.cs)]"
  syntax:
    content: public StrongNameIdentityPermission (System.Security.Permissions.PermissionState state);
    parameters:
    - id: state
      type: System.Security.Permissions.PermissionState
      description: "之一<xref href=&quot;System.Security.Permissions.PermissionState&quot;></xref>值。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> state </code>参数不是有效的值的<xref href=&quot;System.Security.Permissions.PermissionState&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  id: '#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)'
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "初始化的新实例<xref href=&quot;System.Security.Permissions.StrongNameIdentityPermission&quot;></xref>指定强名称标识的类。"
  remarks: "`name`和`version`参数可以是`null`仅当公钥用于标识程序集。 空字符串 (&quot;&quot;) 不应使用代替了`null`。 如果`name`为空字符串，<xref:System.ArgumentException>引发。</xref:System.ArgumentException>       名称和版本号的程序集的详细信息，请参阅[强名称程序集](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example shows the use of the StrongNameIdentityPermission constructor.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/visualbasic/f67888ca-a49f-49ea-a115-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/cpp/f67888ca-a49f-49ea-a115-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#8](~/add/codesnippet/csharp/f67888ca-a49f-49ea-a115-_1.cs)]"
  syntax:
    content: public StrongNameIdentityPermission (System.Security.Permissions.StrongNamePublicKeyBlob blob, string name, Version version);
    parameters:
    - id: blob
      type: System.Security.Permissions.StrongNamePublicKeyBlob
      description: "定义强名称标识命名空间中的公共密钥。"
    - id: name
      type: System.String
      description: "强名称标识的简单名称部分。 这对应于程序集的名称。"
    - id: version
      type: System.Version
      description: "标识的版本号。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>blob</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> name </code>参数为空字符串 (&quot;&quot;)。"
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy
  id: Copy
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Copy()
  nameWithType: StrongNameIdentityPermission.Copy()
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Copy()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建并返回当前权限的相同副本。"
  remarks: "与原始权限情况下，一份权限表示对资源的相同的访问权限。"
  example:
  - "The following code example shows the behavior of the Copy method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/visualbasic/m-system.security.permis_15_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/cpp/m-system.security.permis_15_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#5](~/add/codesnippet/csharp/m-system.security.permis_15_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Copy ();
    parameters: []
    return:
      type: System.Security.IPermission
      description: "当前权限的副本。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.Copy*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)
  id: FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: FromXml(SecurityElement)
  nameWithType: StrongNameIdentityPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.FromXml(SecurityElement)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "重新构造具有指定状态的 XML 编码的权限。"
  remarks: "应用程序代码不使用此方法。"
  example:
  - "The following code example shows the behavior of the FromXml method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/visualbasic/ed9c932c-08d5-452f-8a11-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/cpp/ed9c932c-08d5-452f-8a11-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/csharp/ed9c932c-08d5-452f-8a11-_1.cs)]"
  syntax:
    content: public override void FromXml (System.Security.SecurityElement e);
    parameters:
    - id: e
      type: System.Security.SecurityElement
      description: "编码用于重新构造权限的 XML。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.FromXml*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>e</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> e </code>参数不是有效的权限元素。       -或- <code> e </code>参数的版本号无效。"
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)
  id: Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Intersect(IPermission)
  nameWithType: StrongNameIdentityPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Intersect(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建并返回是当前权限和指定的权限的交集的权限。"
  remarks: "以下两个权限的交集是描述组的二者共同描述的操作的权限。 仅通过两个原始权限的请求将通过该交集。       两个相同的强名称标识权限的交集是相同的权限。 （不是通配符） 的两个不同的交集表达式是空的权限。 通配符表达式和匹配的强名称的交集是强名称。 两个匹配的通配符表达式的交集是更长的时间，更具体的两个表达式。"
  example:
  - "The following code example shows the results of the use of the Intersect method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/visualbasic/fc41bc4b-3965-4525-8b6a-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/cpp/fc41bc4b-3965-4525-8b6a-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#4](~/add/codesnippet/csharp/fc41bc4b-3965-4525-8b6a-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Intersect (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "要与当前权限相交的权限。 它必须与当前权限属于同一类型。"
    return:
      type: System.Security.IPermission
      description: "表示当前权限和指定的权限的交集的一个新权限或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果交集为空。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.Intersect*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>参数不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且不是与当前权限属于同一类型。"
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)
  id: IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: IsSubsetOf(IPermission)
  nameWithType: StrongNameIdentityPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "确定当前权限是否为指定权限的子集。"
  remarks: "如果当前权限指定一组完全包含在指定权限的操作，当前权限是指定权限的子集。 例如，视为相同的其他属性，使用的标识<xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A>包含通配符表达式 MyCompany.MyDepartment.* 属性标识为具有标识的子集<xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A>属性 MyCompany.MyDepartment.MyFile。</xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A> </xref:System.Security.Permissions.StrongNameIdentityPermission.Name%2A>"
  example:
  - "The following code example shows the results of the use of the IsSubsetOf method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/visualbasic/e4452cd4-0b1f-49b1-baf5-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/cpp/e4452cd4-0b1f-49b1-baf5-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#2](~/add/codesnippet/csharp/e4452cd4-0b1f-49b1-baf5-_1.cs)]"
  syntax:
    content: public override bool IsSubsetOf (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "将要测试子集关系的权限。 此权限必须是与当前权限属于同一类型。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果当前权限是指定权限; 的子集否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>参数不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且不是与当前权限属于同一类型。"
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Name
  id: Name
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Name
  nameWithType: StrongNameIdentityPermission.Name
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Name
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取或设置强名称标识的简单名称部分。"
  remarks: "名称属性的值可以是一个确切的名称，或可通过在最后一个位置; 通配符字符修改例如，MyCompany.MyDepartment.MyFile 和 MyCompany.MyDepartment.* 是有效的名称。 如果你尝试将名称属性设置为一个空字符串 (&quot;&quot;)、<xref:System.ArgumentException>引发。</xref:System.ArgumentException>"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "标识的简单名称。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.Name*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "值为空字符串 (&quot;&quot;)。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "无法检索此属性值，因为它包含标识不明确。"
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey
  id: PublicKey
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: PublicKey
  nameWithType: StrongNameIdentityPermission.PublicKey
  fullName: System.Security.Permissions.StrongNameIdentityPermission.PublicKey
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取或设置定义强名称标识命名空间的公钥 blob。"
  syntax:
    content: public System.Security.Permissions.StrongNamePublicKeyBlob PublicKey { get; set; }
    return:
      type: System.Security.Permissions.StrongNamePublicKeyBlob
      description: "A <xref href=&quot;System.Security.Permissions.StrongNamePublicKeyBlob&quot;> </xref>包含公钥的标识，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果没有任何键。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.PublicKey*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "属性值设置为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "无法检索此属性值，因为它包含标识不明确。"
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml
  id: ToXml
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: ToXml()
  nameWithType: StrongNameIdentityPermission.ToXml()
  fullName: System.Security.Permissions.StrongNameIdentityPermission.ToXml()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建权限及其当前状态的 XML 编码。"
  remarks: "此方法通常不使用由应用程序代码中。"
  example:
  - "The following code example shows the behavior of the ToXml method.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/visualbasic/m-system.security.permis_20_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/cpp/m-system.security.permis_20_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#6](~/add/codesnippet/csharp/m-system.security.permis_20_1.cs)]"
  syntax:
    content: public override System.Security.SecurityElement ToXml ();
    parameters: []
    return:
      type: System.Security.SecurityElement
      description: "权限，包括任何状态信息的 XML 编码。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.ToXml*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)
  id: Union(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Union(IPermission)
  nameWithType: StrongNameIdentityPermission.Union(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Union(IPermission)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "创建兼具当前权限和指定的权限的权限。"
  remarks: "对联合的调用的结果是由当前权限和指定的权限表示所表示的所有操作的权限。 任何请求都会通过任一权限传递其联合。       权限的联合和`null`是不是权限`null`。 该权限的子集和权限的联合是包含其他权限。 任何其他组合会导致<xref:System.ArgumentException>所引发异常。</xref:System.ArgumentException>"
  example:
  - "The following code example shows the results of the use of the Union method, not how to use the method. This example is part of a larger example provided for the <xref:System.Security.Permissions.StrongNameIdentityPermission> class. The best use for this example is to build and execute the entire example, and view its output.  \n  \n> [!NOTE]\n>  The code example is intended to show the behavior of the method, not to demonstrate its use. In general, the methods of permission classes are used by the security infrastructure; they are not typically used in applications.  \n  \n [!code-vb[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/visualbasic/3b1a04e0-7bea-4a40-8e18-_1.vb)]\n [!code-cpp[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/cpp/3b1a04e0-7bea-4a40-8e18-_1.cpp)]\n [!code-cs[System.Security.Permissions.StrongNameIdentityPermission#3](~/add/codesnippet/csharp/3b1a04e0-7bea-4a40-8e18-_1.cs)]"
  syntax:
    content: public override System.Security.IPermission Union (System.Security.IPermission target);
    parameters:
    - id: target
      type: System.Security.IPermission
      description: "若要与当前权限合并的权限。 它必须与当前权限属于同一类型。"
    return:
      type: System.Security.IPermission
      description: "表示同时兼具当前权限和指定的权限的新权限。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.Union*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> target </code>参数不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>并且不是与当前权限属于同一类型。       -或-这两个权限不相等且是其中一个是另一个的子集。"
  platform:
  - net462
- uid: System.Security.Permissions.StrongNameIdentityPermission.Version
  id: Version
  parent: System.Security.Permissions.StrongNameIdentityPermission
  langs:
  - csharp
  name: Version
  nameWithType: StrongNameIdentityPermission.Version
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Version
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "获取或设置标识的版本号。"
  syntax:
    content: public Version Version { get; set; }
    return:
      type: System.Version
      description: "标识的版本。"
  overload: System.Security.Permissions.StrongNameIdentityPermission.Version*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "无法检索此属性值，因为它包含标识不明确。"
  platform:
  - net462
references:
- uid: System.Security.CodeAccessPermission
  isExternal: false
  name: System.Security.CodeAccessPermission
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.PermissionState)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: StrongNameIdentityPermission(PermissionState)
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(PermissionState)
- uid: System.Security.Permissions.PermissionState
  parent: System.Security.Permissions
  isExternal: false
  name: PermissionState
  nameWithType: PermissionState
  fullName: System.Security.Permissions.PermissionState
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor(System.Security.Permissions.StrongNamePublicKeyBlob,System.String,System.Version)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.StrongNameIdentityPermission(StrongNamePublicKeyBlob,String,Version)
- uid: System.Security.Permissions.StrongNamePublicKeyBlob
  parent: System.Security.Permissions
  isExternal: false
  name: StrongNamePublicKeyBlob
  nameWithType: StrongNamePublicKeyBlob
  fullName: System.Security.Permissions.StrongNamePublicKeyBlob
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Version
  parent: System
  isExternal: true
  name: Version
  nameWithType: Version
  fullName: System.Version
- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Copy()
  nameWithType: StrongNameIdentityPermission.Copy()
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Copy()
- uid: System.Security.IPermission
  parent: System.Security
  isExternal: false
  name: IPermission
  nameWithType: IPermission
  fullName: System.Security.IPermission
- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml(System.Security.SecurityElement)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: FromXml(SecurityElement)
  nameWithType: StrongNameIdentityPermission.FromXml(SecurityElement)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.FromXml(SecurityElement)
- uid: System.Security.SecurityElement
  parent: System.Security
  isExternal: false
  name: SecurityElement
  nameWithType: SecurityElement
  fullName: System.Security.SecurityElement
- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Intersect(IPermission)
  nameWithType: StrongNameIdentityPermission.Intersect(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Intersect(IPermission)
- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: IsSubsetOf(IPermission)
  nameWithType: StrongNameIdentityPermission.IsSubsetOf(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf(IPermission)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Permissions.StrongNameIdentityPermission.Name
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Name
  nameWithType: StrongNameIdentityPermission.Name
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Name
- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: PublicKey
  nameWithType: StrongNameIdentityPermission.PublicKey
  fullName: System.Security.Permissions.StrongNameIdentityPermission.PublicKey
- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: ToXml()
  nameWithType: StrongNameIdentityPermission.ToXml()
  fullName: System.Security.Permissions.StrongNameIdentityPermission.ToXml()
- uid: System.Security.Permissions.StrongNameIdentityPermission.Union(System.Security.IPermission)
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Union(IPermission)
  nameWithType: StrongNameIdentityPermission.Union(IPermission)
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Union(IPermission)
- uid: System.Security.Permissions.StrongNameIdentityPermission.Version
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Version
  nameWithType: StrongNameIdentityPermission.Version
  fullName: System.Security.Permissions.StrongNameIdentityPermission.Version
- uid: System.Security.Permissions.StrongNameIdentityPermission.#ctor*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: StrongNameIdentityPermission
  nameWithType: StrongNameIdentityPermission.StrongNameIdentityPermission
- uid: System.Security.Permissions.StrongNameIdentityPermission.Copy*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Copy
  nameWithType: StrongNameIdentityPermission.Copy
- uid: System.Security.Permissions.StrongNameIdentityPermission.FromXml*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: FromXml
  nameWithType: StrongNameIdentityPermission.FromXml
- uid: System.Security.Permissions.StrongNameIdentityPermission.Intersect*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Intersect
  nameWithType: StrongNameIdentityPermission.Intersect
- uid: System.Security.Permissions.StrongNameIdentityPermission.IsSubsetOf*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: IsSubsetOf
  nameWithType: StrongNameIdentityPermission.IsSubsetOf
- uid: System.Security.Permissions.StrongNameIdentityPermission.Name*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Name
  nameWithType: StrongNameIdentityPermission.Name
- uid: System.Security.Permissions.StrongNameIdentityPermission.PublicKey*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: PublicKey
  nameWithType: StrongNameIdentityPermission.PublicKey
- uid: System.Security.Permissions.StrongNameIdentityPermission.ToXml*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: ToXml
  nameWithType: StrongNameIdentityPermission.ToXml
- uid: System.Security.Permissions.StrongNameIdentityPermission.Union*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Union
  nameWithType: StrongNameIdentityPermission.Union
- uid: System.Security.Permissions.StrongNameIdentityPermission.Version*
  parent: System.Security.Permissions.StrongNameIdentityPermission
  isExternal: false
  name: Version
  nameWithType: StrongNameIdentityPermission.Version
