### YamlMime:ManagedReference
items:
- uid: System.Web.HttpContext
  id: HttpContext
  children:
  - System.Web.HttpContext.#ctor(System.Web.HttpWorkerRequest)
  - System.Web.HttpContext.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)
  - System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})
  - System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task},System.Web.WebSockets.AspNetWebSocketOptions)
  - System.Web.HttpContext.AddError(System.Exception)
  - System.Web.HttpContext.AddOnRequestCompleted(System.Action{System.Web.HttpContext})
  - System.Web.HttpContext.AllErrors
  - System.Web.HttpContext.AllowAsyncDuringSyncStages
  - System.Web.HttpContext.Application
  - System.Web.HttpContext.ApplicationInstance
  - System.Web.HttpContext.AsyncPreloadMode
  - System.Web.HttpContext.Cache
  - System.Web.HttpContext.ClearError
  - System.Web.HttpContext.Current
  - System.Web.HttpContext.CurrentHandler
  - System.Web.HttpContext.CurrentNotification
  - System.Web.HttpContext.DisposeOnPipelineCompleted(System.IDisposable)
  - System.Web.HttpContext.Error
  - System.Web.HttpContext.GetAppConfig(System.String)
  - System.Web.HttpContext.GetConfig(System.String)
  - System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)
  - System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  - System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)
  - System.Web.HttpContext.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  - System.Web.HttpContext.GetSection(System.String)
  - System.Web.HttpContext.Handler
  - System.Web.HttpContext.IsCustomErrorEnabled
  - System.Web.HttpContext.IsDebuggingEnabled
  - System.Web.HttpContext.IsPostNotification
  - System.Web.HttpContext.IsWebSocketRequest
  - System.Web.HttpContext.IsWebSocketRequestUpgrading
  - System.Web.HttpContext.Items
  - System.Web.HttpContext.PageInstrumentation
  - System.Web.HttpContext.PreviousHandler
  - System.Web.HttpContext.Profile
  - System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)
  - System.Web.HttpContext.Request
  - System.Web.HttpContext.Response
  - System.Web.HttpContext.RewritePath(System.String)
  - System.Web.HttpContext.RewritePath(System.String,System.Boolean)
  - System.Web.HttpContext.RewritePath(System.String,System.String,System.String)
  - System.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)
  - System.Web.HttpContext.Server
  - System.Web.HttpContext.Session
  - System.Web.HttpContext.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)
  - System.Web.HttpContext.SkipAuthorization
  - System.Web.HttpContext.System#IServiceProvider#GetService(System.Type)
  - System.Web.HttpContext.ThreadAbortOnTimeout
  - System.Web.HttpContext.Timestamp
  - System.Web.HttpContext.Trace
  - System.Web.HttpContext.User
  - System.Web.HttpContext.WebSocketNegotiatedProtocol
  - System.Web.HttpContext.WebSocketRequestedProtocols
  langs:
  - csharp
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
  type: Class
  summary: "封装有关个别 HTTP 请求的所有 HTTP 特定信息。"
  remarks: "继承的类<xref:System.Web.IHttpModule>和<xref:System.Web.IHttpHandler>接口为当前 HTTP 请求提供对 HttpContext 对象的引用。</xref:System.Web.IHttpHandler> </xref:System.Web.IHttpModule> 对象提供对内部函数访问<xref:System.Web.HttpContext.Request%2A>， <xref:System.Web.HttpContext.Response%2A>，和<xref:System.Web.HttpContext.Server%2A>请求的属性。</xref:System.Web.HttpContext.Server%2A> </xref:System.Web.HttpContext.Response%2A> </xref:System.Web.HttpContext.Request%2A>"
  example:
  - "A Visual Studio Web site project with source code is available to accompany this topic: [Download](http://go.microsoft.com/fwlink/?LinkId=192422).  \n  \n The following example demonstrates how to access and display properties of the HttpContext object. The context of the current HTTP request is accessed by using the <xref:System.Web.UI.Page.Context%2A> property of the <xref:System.Web.UI.Page> object.  \n  \n [!code-vb[System.Web.HttpContext#1](~/add/codesnippet/visualbasic/t-system.web.httpcontext_1.aspx)]\n [!code-cs[System.Web.HttpContext#1](~/add/codesnippet/csharp/t-system.web.httpcontext_1.aspx)]"
  syntax:
    content: 'public sealed class HttpContext : IServiceProvider'
  inheritance:
  - System.Object
  implements:
  - System.IServiceProvider
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.HttpContext.#ctor(System.Web.HttpWorkerRequest)
  id: '#ctor(System.Web.HttpWorkerRequest)'
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: HttpContext(HttpWorkerRequest)
  nameWithType: HttpContext.HttpContext(HttpWorkerRequest)
  fullName: System.Web.HttpContext.HttpContext(HttpWorkerRequest)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "初始化的新实例<xref href=&quot;System.Web.HttpContext&quot;></xref>类，该类使用指定的辅助请求对象。"
  syntax:
    content: public HttpContext (System.Web.HttpWorkerRequest wr);
    parameters:
    - id: wr
      type: System.Web.HttpWorkerRequest
      description: "<xref href=&quot;System.Web.HttpWorkerRequest&quot;> </xref>为当前 HTTP 请求的对象。"
  overload: System.Web.HttpContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)
  id: '#ctor(System.Web.HttpRequest,System.Web.HttpResponse)'
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: HttpContext(HttpRequest,HttpResponse)
  nameWithType: HttpContext.HttpContext(HttpRequest,HttpResponse)
  fullName: System.Web.HttpContext.HttpContext(HttpRequest,HttpResponse)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "初始化的新实例<xref href=&quot;System.Web.HttpContext&quot;></xref>通过使用指定的请求和响应对象的类。"
  syntax:
    content: public HttpContext (System.Web.HttpRequest request, System.Web.HttpResponse response);
    parameters:
    - id: request
      type: System.Web.HttpRequest
      description: "<xref href=&quot;System.Web.HttpRequest&quot;> </xref>为当前 HTTP 请求的对象。"
    - id: response
      type: System.Web.HttpResponse
      description: "<xref href=&quot;System.Web.HttpResponse&quot;> </xref>为当前 HTTP 请求的对象。"
  overload: System.Web.HttpContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})
  id: AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  nameWithType: HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  fullName: System.Web.HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "接受<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>请求使用指定的用户函数。"
  remarks: "调用此方法等效于调用<xref:System.Web.HttpContext.AcceptWebSocketRequest%2A>方法重载并传入`null`为`options`参数。</xref:System.Web.HttpContext.AcceptWebSocketRequest%2A>"
  syntax:
    content: public void AcceptWebSocketRequest (Func<System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task> userFunc);
    parameters:
    - id: userFunc
      type: System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task}
      description: "用户函数。"
  overload: System.Web.HttpContext.AcceptWebSocketRequest*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>userFunc</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "请求不是<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>请求。"
  platform:
  - net462
- uid: System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task},System.Web.WebSockets.AspNetWebSocketOptions)
  id: AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task},System.Web.WebSockets.AspNetWebSocketOptions)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  nameWithType: HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  fullName: System.Web.HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "接受<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>请求使用的指定的用户函数和选项对象。"
  syntax:
    content: public void AcceptWebSocketRequest (Func<System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task> userFunc, System.Web.WebSockets.AspNetWebSocketOptions options);
    parameters:
    - id: userFunc
      type: System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task}
      description: "用户函数。"
    - id: options
      type: System.Web.WebSockets.AspNetWebSocketOptions
      description: "Options 对象中。"
  overload: System.Web.HttpContext.AcceptWebSocketRequest*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>userFunc</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "请求不是<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>请求。"
  platform:
  - net462
- uid: System.Web.HttpContext.AddError(System.Exception)
  id: AddError(System.Exception)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AddError(Exception)
  nameWithType: HttpContext.AddError(Exception)
  fullName: System.Web.HttpContext.AddError(Exception)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "将异常添加到当前 HTTP 请求的异常集合中。"
  syntax:
    content: public void AddError (Exception errorInfo);
    parameters:
    - id: errorInfo
      type: System.Exception
      description: "<xref:System.Exception>将添加到异常集合中的。</xref:System.Exception>"
  overload: System.Web.HttpContext.AddError*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.AddOnRequestCompleted(System.Action{System.Web.HttpContext})
  id: AddOnRequestCompleted(System.Action{System.Web.HttpContext})
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AddOnRequestCompleted(Action<HttpContext>)
  nameWithType: HttpContext.AddOnRequestCompleted(Action<HttpContext>)
  fullName: System.Web.HttpContext.AddOnRequestCompleted(Action<HttpContext>)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "引发请求的 HTTP 部分结束时发生的虚拟事件。"
  remarks: "此事件之前发生<xref:System.Web.WebSockets.AspNetWebSocket>连接开始。</xref:System.Web.WebSockets.AspNetWebSocket>"
  syntax:
    content: public System.Web.ISubscriptionToken AddOnRequestCompleted (Action<System.Web.HttpContext> callback);
    parameters:
    - id: callback
      type: System.Action{System.Web.HttpContext}
      description: "HTTP 上下文对象。"
    return:
      type: System.Web.ISubscriptionToken
      description: "订阅标记。"
  overload: System.Web.HttpContext.AddOnRequestCompleted*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>callback</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.HttpContext.AllErrors
  id: AllErrors
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AllErrors
  nameWithType: HttpContext.AllErrors
  fullName: System.Web.HttpContext.AllErrors
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取在处理 HTTP 请求时累积的错误数组。"
  syntax:
    content: public Exception[] AllErrors { get; }
    return:
      type: System.Exception[]
      description: "数组<xref:System.Exception>为当前 HTTP 请求的对象。</xref:System.Exception>"
  overload: System.Web.HttpContext.AllErrors*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.AllowAsyncDuringSyncStages
  id: AllowAsyncDuringSyncStages
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AllowAsyncDuringSyncStages
  nameWithType: HttpContext.AllowAsyncDuringSyncStages
  fullName: System.Web.HttpContext.AllowAsyncDuringSyncStages
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，该值指示 ASP.NET 请求处理非预期的过程中是否允许异步操作。"
  remarks: "如果未将此标志设置为`true`，当它检测到误用异步 API 的应用程序时，ASP.NET 将引发异常。 如果你尝试在部分中的请求处理管道，其中异步操作不需要，调用异步方法，或者没有仍未完成的异步工作时异步模块或处理程序发出信号，完成，则可以发生此问题。 此行为旨在作为网络安全，以让你知道在早期，是否你在编写异步代码不符合预期模式，并且可能具有负的负面影响中。"
  syntax:
    content: public bool AllowAsyncDuringSyncStages { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>当异步 API 时并不期望; 一次使用时，ASP.NET 将引发异常否则为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.AllowAsyncDuringSyncStages*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Application
  id: Application
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Application
  nameWithType: HttpContext.Application
  fullName: System.Web.HttpContext.Application
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.HttpApplicationState&quot;></xref>为当前 HTTP 请求的对象。"
  syntax:
    content: public System.Web.HttpApplicationState Application { get; }
    return:
      type: System.Web.HttpApplicationState
      description: "<xref href=&quot;System.Web.HttpApplicationState&quot;> </xref>为当前 HTTP 请求。       若要获取<xref href=&quot;System.Web.HttpApplication&quot;></xref>对象为当前 HTTP 请求，请使用<xref:System.Web.HttpContext.ApplicationInstance*>。</xref:System.Web.HttpContext.ApplicationInstance*> (ASP.NET 使用<xref uid=&quot;langword_csharp_ApplicationInstance&quot; name=&quot;ApplicationInstance&quot; href=&quot;&quot;></xref>而不是<xref uid=&quot;langword_csharp_Application&quot; name=&quot;Application&quot; href=&quot;&quot;></xref>作为属性名来引用当前<xref href=&quot;System.Web.HttpApplication&quot;></xref>实例，以避免 ASP.NET 与经典 ASP 之间产生混淆。 在经典 ASP 中， <xref uid=&quot;langword_csharp_Application&quot; name=&quot;Application&quot; href=&quot;&quot;> </xref>引用全局应用程序状态字典。)"
  overload: System.Web.HttpContext.Application*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.ApplicationInstance
  id: ApplicationInstance
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: ApplicationInstance
  nameWithType: HttpContext.ApplicationInstance
  fullName: System.Web.HttpContext.ApplicationInstance
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置<xref href=&quot;System.Web.HttpApplication&quot;></xref>为当前 HTTP 请求的对象。"
  syntax:
    content: public System.Web.HttpApplication ApplicationInstance { get; set; }
    return:
      type: System.Web.HttpApplication
      description: "<xref href=&quot;System.Web.HttpApplication&quot;> </xref>为当前 HTTP 请求。       ASP.NET 使用<xref uid=&quot;langword_csharp_ApplicationInstance&quot; name=&quot;ApplicationInstance&quot; href=&quot;&quot;></xref>而不是<xref uid=&quot;langword_csharp_Application&quot; name=&quot;Application&quot; href=&quot;&quot;></xref>作为属性名来引用当前<xref href=&quot;System.Web.HttpApplication&quot;></xref>实例，以避免 ASP.NET 与经典 ASP 之间产生混淆。 在经典 ASP 中， <xref uid=&quot;langword_csharp_Application&quot; name=&quot;Application&quot; href=&quot;&quot;> </xref>引用全局应用程序状态字典。"
  overload: System.Web.HttpContext.ApplicationInstance*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在集成模式下，在 IIS 7.0 下运行 Web 应用程序并尝试将属性值从将非 null 值赋予更改<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Web.HttpContext.AsyncPreloadMode
  id: AsyncPreloadMode
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: AsyncPreloadMode
  nameWithType: HttpContext.AsyncPreloadMode
  fullName: System.Web.HttpContext.AsyncPreloadMode
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置包含适用于异步预加载模式的标志的对象。"
  remarks: "第一次访问此属性时，包含有关异步预加载模式的标志的对象从加载<xref:System.Web.Configuration.HttpRuntimeSection.AsyncPreloadMode%2A>在配置文件中设置。</xref:System.Web.Configuration.HttpRuntimeSection.AsyncPreloadMode%2A>       尽管可以以编程方式设置此属性，更改属性值仅起如果之前设置属性`ExecuteRequestHandler`ASP.NET 请求管道中的步骤。"
  syntax:
    content: public System.Web.Configuration.AsyncPreloadModeFlags AsyncPreloadMode { get; set; }
    return:
      type: System.Web.Configuration.AsyncPreloadModeFlags
      description: "一个对象，其中包含适用于异步预加载模式的标志。"
  overload: System.Web.HttpContext.AsyncPreloadMode*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Cache
  id: Cache
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Cache
  nameWithType: HttpContext.Cache
  fullName: System.Web.HttpContext.Cache
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.Caching.Cache&quot;></xref>当前的应用程序域的对象。"
  remarks: "一个实例<xref:System.Web.Caching.Cache>每个应用程序域的类。</xref:System.Web.Caching.Cache> 因此，<xref:System.Web.Caching.Cache>缓存属性所返回的对象是<xref:System.Web.Caching.Cache>应用程序域中的所有请求的对象。</xref:System.Web.Caching.Cache> </xref:System.Web.Caching.Cache>"
  syntax:
    content: public System.Web.Caching.Cache Cache { get; }
    return:
      type: System.Web.Caching.Cache
      description: "<xref href=&quot;System.Web.Caching.Cache&quot;> </xref>当前的应用程序域。"
  overload: System.Web.HttpContext.Cache*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.ClearError
  id: ClearError
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: ClearError()
  nameWithType: HttpContext.ClearError()
  fullName: System.Web.HttpContext.ClearError()
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "清除当前 HTTP 请求的所有错误。"
  syntax:
    content: public void ClearError ();
    parameters: []
  overload: System.Web.HttpContext.ClearError*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Current
  id: Current
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Current
  nameWithType: HttpContext.Current
  fullName: System.Web.HttpContext.Current
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置<xref href=&quot;System.Web.HttpContext&quot;></xref>为当前 HTTP 请求的对象。"
  remarks: "此属性是类的静态属性<xref:System.Web.HttpContext>类。</xref:System.Web.HttpContext> 属性存储<xref:System.Web.HttpContext>适用于当前请求的实例。</xref:System.Web.HttpContext> 此实例的属性是<xref:System.Web.HttpContext>类</xref:System.Web.HttpContext>的非静态属性       你还可以使用<xref:System.Web.UI.Page.Context%2A?displayProperty=fullName>属性来访问<xref:System.Web.HttpContext>为当前 HTTP 请求的对象。</xref:System.Web.HttpContext> </xref:System.Web.UI.Page.Context%2A?displayProperty=fullName>"
  example:
  - "The following code example uses the Current property to access the <xref:System.Web.HttpContext.AddError%2A?displayProperty=fullName> and <xref:System.Web.HttpContext.ClearError%2A?displayProperty=fullName> methods and the <xref:System.Web.HttpContext.AllErrors%2A?displayProperty=fullName> property. The example creates three custom exceptions using the <xref:System.Web.HttpContext.AddError%2A> method and uses the <xref:System.Web.HttpContext.AllErrors%2A> property to load these exceptions to an array. It then writes the array to the containing page and uses the <xref:System.Web.HttpContext.ClearError%2A> method to clear all the errors from the <xref:System.Web.UI.Page.Context%2A> property.  \n  \n```c#  \nprotected void Page_Load(object sender, EventArgs e)  \n{  \n    HttpContext context = HttpContext.Current;  \n    Response.Write(\"<p>HttpContext.Current Example:</p>\");  \n  \n    // Add three custom exceptions.  \n    context.AddError(new Exception(\"New Exception #1\"));  \n    context.AddError(new Exception(\"New Exception #2\"));  \n    context.AddError(new Exception(\"New Exception #3\"));  \n  \n    // Capture all the new Exceptions in an array.  \n    Exception[] errs = context.AllErrors;  \n  \n    foreach (Exception ex in errs)  \n    {  \n        Response.Write(\"<p>\" + Server.HtmlEncode(ex.ToString()) + \"</p>\");  \n    }  \n  \n    // Clear the exceptions so ASP.NET won't handle them.  \n    context.ClearError();  \n}  \n```  \n  \n```vb  \nProtected Sub Page_Load(sender As Object, e As EventArgs)  \nDim context As HttpContext = HttpContext.Current  \nResponse.Write(\"<p>HttpContext.Current Example:</p>\")  \n  \n' Add three custom exceptions.  \ncontext.AddError(New Exception(\"New Exception #1\"))  \ncontext.AddError(New Exception(\"New Exception #2\"))  \ncontext.AddError(New Exception(\"New Exception #3\"))  \n  \n' Capture all the new Exceptions in an array.  \nDim errs As Exception() = context.AllErrors  \n  \nFor Each ex As Exception In errs  \nResponse.Write(\"<p>\" & Server.HtmlEncode(ex.ToString()) & \"</p>\")  \nNext  \n  \n' Clear the exceptions so ASP.NET won't handle them.  \ncontext.ClearError()  \nEnd Sub  \n  \n```"
  syntax:
    content: public static System.Web.HttpContext Current { get; set; }
    return:
      type: System.Web.HttpContext
      description: "<xref href=&quot;System.Web.HttpContext&quot;> </xref>为当前 HTTP 请求的实例。"
  overload: System.Web.HttpContext.Current*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.CurrentHandler
  id: CurrentHandler
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: CurrentHandler
  nameWithType: HttpContext.CurrentHandler
  fullName: System.Web.HttpContext.CurrentHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.IHttpHandler&quot;></xref>对象，表示当前正在执行的处理程序。"
  remarks: "可能不同于引用的处理程序的当前正在执行的处理程序引用的 CurrentHandler 属性<xref:System.Web.HttpContext.Handler%2A>属性。</xref:System.Web.HttpContext.Handler%2A> 这会时发生另一个处理程序请求了使用<xref:System.Web.HttpServerUtility.Execute%2A>方法或<xref:System.Web.HttpServerUtility.Transfer%2A>方法。</xref:System.Web.HttpServerUtility.Transfer%2A> </xref:System.Web.HttpServerUtility.Execute%2A> 当前正在执行的处理程序完成处理，将还原先前已确定处理程序。"
  syntax:
    content: public System.Web.IHttpHandler CurrentHandler { get; }
    return:
      type: System.Web.IHttpHandler
      description: "<xref href=&quot;System.Web.IHttpHandler&quot;> </xref> ，表示当前正在执行的处理程序。"
  overload: System.Web.HttpContext.CurrentHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.CurrentNotification
  id: CurrentNotification
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: CurrentNotification
  nameWithType: HttpContext.CurrentNotification
  fullName: System.Web.HttpContext.CurrentNotification
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.RequestNotification&quot;></xref>值，该值指示当前<xref href=&quot;System.Web.HttpApplication&quot;></xref>正在处理的事件。"
  remarks: "CurrentNotification 属性需要中的集成的管道模式[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]并且至少.NET Framework 版本 3.0。 如果可能，该属性返回<xref:System.Web.RequestNotification>值。</xref:System.Web.RequestNotification> CurrentNotification 属性的值，该值指示在哪个事件<xref:System.Web.HttpApplication>实例当前正在处理请求。</xref:System.Web.HttpApplication>       CurrentNotification 属性不应设置。 相反，通过来设置[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]ASP.NET 管道中的请求的处理过程中。 设置 CurrentNotification 属性将导致编译错误。       CurrentNotification 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates how to use the CurrentNotification property to determine what event of the <xref:System.Web.HttpApplication> object that is handling the current request is being processed. In the example, the event handler handles several events of the <xref:System.Web.HttpApplication> object, and the CurrentNotification property determines what code is invoked for each event being handled.  \n  \n [!code-cs[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/csharp/p-system.web.httpcontext_0_1.cs)]\n [!code-vb[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/visualbasic/p-system.web.httpcontext_0_1.vb)]"
  syntax:
    content: public System.Web.RequestNotification CurrentNotification { get; }
    return:
      type: System.Web.RequestNotification
      description: "之一<xref href=&quot;System.Web.RequestNotification&quot;></xref>值。"
  overload: System.Web.HttpContext.CurrentNotification*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该操作要求中的集成的管道模式[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]并且至少.NET Framework 版本 3.0。"
  platform:
  - net462
- uid: System.Web.HttpContext.DisposeOnPipelineCompleted(System.IDisposable)
  id: DisposeOnPipelineCompleted(System.IDisposable)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: DisposeOnPipelineCompleted(IDisposable)
  nameWithType: HttpContext.DisposeOnPipelineCompleted(IDisposable)
  fullName: System.Web.HttpContext.DisposeOnPipelineCompleted(IDisposable)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使对象的<xref:System.IDisposable.Dispose*>方法时要调用<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>此请求的连接部分完成。</xref:System.IDisposable.Dispose*>"
  remarks: "<xref:System.IDisposable.Dispose%2A>在请求的 HTTP 一部分之后调用的目标对象的方法和<xref:System.Web.WebSockets.AspNetWebSocket>连接已结束。</xref:System.Web.WebSockets.AspNetWebSocket> </xref:System.IDisposable.Dispose%2A> <xref:System.Web.HttpContext>对象不是可用于检查。</xref:System.Web.HttpContext>"
  syntax:
    content: public System.Web.ISubscriptionToken DisposeOnPipelineCompleted (IDisposable target);
    parameters:
    - id: target
      type: System.IDisposable
      description: "对象其<xref:System.IDisposable.Dispose*>方法时，必须调用<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>的请求的连接部分完成。</xref:System.IDisposable.Dispose*>"
    return:
      type: System.Web.ISubscriptionToken
      description: "订阅标记。"
  overload: System.Web.HttpContext.DisposeOnPipelineCompleted*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Error
  id: Error
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Error
  nameWithType: HttpContext.Error
  fullName: System.Web.HttpContext.Error
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取 HTTP 过程中累积的第一个错误 （如果有） 在处理请求。"
  syntax:
    content: public Exception Error { get; }
    return:
      type: System.Exception
      description: "第一个<xref:System.Exception>当前 HTTP 请求/响应过程; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果在处理 HTTP 请求期间没有发生任何错误。</xref:System.Exception> 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.Error*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.GetAppConfig(System.String)
  id: GetAppConfig(System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetAppConfig(String)
  nameWithType: HttpContext.GetAppConfig(String)
  fullName: System.Web.HttpContext.GetAppConfig(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "返回请求的当前应用程序的配置信息。"
  remarks: "GetAppConfig 方法已被否决。 使用<xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A>方法<xref:System.Web.Configuration.WebConfigurationManager>类，以获取当前应用程序的配置信息。</xref:System.Web.Configuration.WebConfigurationManager> </xref:System.Web.Configuration.WebConfigurationManager.GetWebApplicationSection%2A>"
  syntax:
    content: public static object GetAppConfig (string name);
    parameters:
    - id: name
      type: System.String
      description: "为其请求信息的应用程序配置标记。"
    return:
      type: System.Object
      description: "包含配置信息的对象。 （强制转换为相应的配置类型在使用之前返回的配置节。）"
  overload: System.Web.HttpContext.GetAppConfig*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.GetConfig(System.String)
  id: GetConfig(System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetConfig(String)
  nameWithType: HttpContext.GetConfig(String)
  fullName: System.Web.HttpContext.GetConfig(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "返回请求的当前 HTTP 请求的配置信息。"
  remarks: "GetConfig 方法已被否决。 使用<xref:System.Web.HttpContext.GetSection%2A>方法以获取当前 HTTP 请求的配置信息。</xref:System.Web.HttpContext.GetSection%2A>"
  syntax:
    content: public object GetConfig (string name);
    parameters:
    - id: name
      type: System.String
      description: "为其请求信息的配置标记。"
    return:
      type: System.Object
      description: "指定<xref href=&quot;System.Configuration.ConfigurationSection&quot;> </xref>， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>如果该节不存在，或如果该节不在运行时可访问，则内部对象。 （强制转换为相应的配置类型在使用之前返回的对象。）"
  overload: System.Web.HttpContext.GetConfig*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)
  id: GetGlobalResourceObject(System.String,System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetGlobalResourceObject(String,String)
  nameWithType: HttpContext.GetGlobalResourceObject(String,String)
  fullName: System.Web.HttpContext.GetGlobalResourceObject(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个应用程序级别资源对象基于指定<> *1> 和<> *1> 属性。"
  remarks: "GetGlobalResourceObject 方法返回一个全局资源使用中指定的区域性<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>属性。</xref:System.Globalization.CultureInfo.CurrentUICulture%2A>      1> [!NOTE]&1;> 在某些编辑环境，如[!INCLUDE[vwprvw](~/add/includes/vwprvw-md.md)]，编辑器可能引发设计时<xref:System.Resources.MissingManifestResourceException>异常在全局资源键名称中使用句点 （.） 如果。</xref:System.Resources.MissingManifestResourceException> 但是，这不会影响你能够编辑或保存该文件，并且你可以忽略此错误。"
  syntax:
    content: public static object GetGlobalResourceObject (string classKey, string resourceKey);
    parameters:
    - id: classKey
      type: System.String
      description: "一个字符串，表示<xref:System.Web.Compilation.ResourceExpressionFields.ClassKey*>请求的资源对象的属性。</xref:System.Web.Compilation.ResourceExpressionFields.ClassKey*>"
    - id: resourceKey
      type: System.String
      description: "一个字符串，表示<xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>请求的资源对象的属性。</xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>"
    return:
      type: System.Object
      description: "<xref:System.Object>，表示请求的应用程序级别资源对象; 否则为 null，如果未找到资源对象，或找到资源对象但其没有请求的属性。</xref:System.Object>"
  overload: System.Web.HttpContext.GetGlobalResourceObject*
  exceptions:
  - type: System.Resources.MissingManifestResourceException
    commentId: T:System.Resources.MissingManifestResourceException
    description: "A resource object with the specified <code>classKey</code> parameter was not found.  \n  \n \\- or -  \n  \n The main assembly does not contain the resources for the neutral culture, and these resources are required because the appropriate satellite assembly is missing."
  platform:
  - net462
- uid: System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  id: GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetGlobalResourceObject(String,String,CultureInfo)
  nameWithType: HttpContext.GetGlobalResourceObject(String,String,CultureInfo)
  fullName: System.Web.HttpContext.GetGlobalResourceObject(String,String,CultureInfo)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个应用程序级别资源对象基于指定<> *1> 和<> *1> 属性，然后在<xref:System.Globalization.CultureInfo>对象。</xref:System.Globalization.CultureInfo>"
  remarks: "<xref:System.Globalization.CultureInfo>对象表示为其本地化资源的区域性。</xref:System.Globalization.CultureInfo> 如果没有为此区域性本地化该资源，查找将按照回退过程找到适当的资源。 有关详细信息，请参阅[打包和部署资源](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 编辑器可能在某些编辑环境，如 Visual Web Developer 中，引发设计时<xref:System.Resources.MissingManifestResourceException>异常在全局资源键名称中使用句点 （.） 如果。</xref:System.Resources.MissingManifestResourceException> 但是，这不会影响你能够编辑或保存该文件，并且你可以忽略此错误。"
  syntax:
    content: public static object GetGlobalResourceObject (string classKey, string resourceKey, System.Globalization.CultureInfo culture);
    parameters:
    - id: classKey
      type: System.String
      description: "一个字符串，表示<xref:System.Web.Compilation.ResourceExpressionFields.ClassKey*>请求的资源对象的属性。</xref:System.Web.Compilation.ResourceExpressionFields.ClassKey*>"
    - id: resourceKey
      type: System.String
      description: "一个字符串，表示<xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>请求的资源对象的属性。</xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "一个字符串，表示<xref:System.Globalization.CultureInfo>请求的资源的对象。</xref:System.Globalization.CultureInfo>"
    return:
      type: System.Object
      description: "<xref:System.Object>表示请求的应用程序级别资源对象，它是针对指定区域性本地化; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果未找到资源对象，或如果找到了资源对象但其没有请求的属性。</xref:System.Object>"
  overload: System.Web.HttpContext.GetGlobalResourceObject*
  exceptions:
  - type: System.Resources.MissingManifestResourceException
    commentId: T:System.Resources.MissingManifestResourceException
    description: "A resource object for which the specified <code>classKey</code> parameter was not found.  \n  \n \\- or -  \n  \n The main assembly does not contain the resources for the neutral culture, and these resources are required because the appropriate satellite assembly is missing."
  platform:
  - net462
- uid: System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)
  id: GetLocalResourceObject(System.String,System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetLocalResourceObject(String,String)
  nameWithType: HttpContext.GetLocalResourceObject(String,String)
  fullName: System.Web.HttpContext.GetLocalResourceObject(String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个页级别资源对象基于指定<> *1> 和<> *1> 属性。"
  remarks: "使用中指定的区域性的 GetLocalResourceObject 方法返回的本地资源<xref:System.Globalization.CultureInfo.CurrentUICulture%2A>属性。</xref:System.Globalization.CultureInfo.CurrentUICulture%2A>"
  syntax:
    content: public static object GetLocalResourceObject (string virtualPath, string resourceKey);
    parameters:
    - id: virtualPath
      type: System.String
      description: "<xref:System.Web.Compilation.ExpressionBuilderContext.VirtualPath*>本地资源对象的属性。</xref:System.Web.Compilation.ExpressionBuilderContext.VirtualPath*>"
    - id: resourceKey
      type: System.String
      description: "一个字符串，表示<xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>所请求的资源对象的属性</xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>"
    return:
      type: System.Object
      description: "<xref:System.Object>，表示所请求的页级别资源对象; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找到匹配的资源对象但不是<code> resourceKey </code>参数。</xref:System.Object>"
  overload: System.Web.HttpContext.GetLocalResourceObject*
  exceptions:
  - type: System.Resources.MissingManifestResourceException
    commentId: T:System.Resources.MissingManifestResourceException
    description: "未找到资源对象指定<code> virtualPath </code>参数。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定<code> virtualPath </code>参数不在当前应用程序的根目录。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到页面的资源类。"
  platform:
  - net462
- uid: System.Web.HttpContext.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  id: GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetLocalResourceObject(String,String,CultureInfo)
  nameWithType: HttpContext.GetLocalResourceObject(String,String,CultureInfo)
  fullName: System.Web.HttpContext.GetLocalResourceObject(String,String,CultureInfo)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个页级别资源对象基于指定<> *1> 和<> *1> 属性，然后在<xref:System.Globalization.CultureInfo>对象。</xref:System.Globalization.CultureInfo>"
  remarks: "如果没有为此区域性本地化该资源，查找将按照回退过程找到适当的资源。 有关详细信息，请参阅[打包和部署资源](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public static object GetLocalResourceObject (string virtualPath, string resourceKey, System.Globalization.CultureInfo culture);
    parameters:
    - id: virtualPath
      type: System.String
      description: "<xref:System.Web.Compilation.ExpressionBuilderContext.VirtualPath*>本地资源对象的属性。</xref:System.Web.Compilation.ExpressionBuilderContext.VirtualPath*>"
    - id: resourceKey
      type: System.String
      description: "一个字符串，表示<xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>请求的资源对象的属性。</xref:System.Web.Compilation.ResourceExpressionFields.ResourceKey*>"
    - id: culture
      type: System.Globalization.CultureInfo
      description: "一个字符串，表示<xref:System.Globalization.CultureInfo>所请求的资源对象的对象。</xref:System.Globalization.CultureInfo>"
    return:
      type: System.Object
      description: "<xref:System.Object>，表示请求的本地资源对象，其指定区域性本地化; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找到匹配的资源对象但不是<code> resourceKey </code>参数。</xref:System.Object>"
  overload: System.Web.HttpContext.GetLocalResourceObject*
  exceptions:
  - type: System.Resources.MissingManifestResourceException
    commentId: T:System.Resources.MissingManifestResourceException
    description: "未找到资源对象指定<code> virtualPath </code>参数。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定<code> virtualPath </code>参数不在当前应用程序的根目录。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "找不到页面的资源类。"
  platform:
  - net462
- uid: System.Web.HttpContext.GetSection(System.String)
  id: GetSection(System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: GetSection(String)
  nameWithType: HttpContext.GetSection(String)
  fullName: System.Web.HttpContext.GetSection(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取当前应用程序的默认配置的指定的配置节。"
  syntax:
    content: public object GetSection (string sectionName);
    parameters:
    - id: sectionName
      type: System.String
      description: "配置节路径 （以 XPath 格式） 和配置元素名称。"
    return:
      type: System.Object
      description: "指定<xref href=&quot;System.Configuration.ConfigurationSection&quot;> </xref>， <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>如果该节不存在，或如果该节不在运行时可访问，则内部对象。"
  overload: System.Web.HttpContext.GetSection*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Handler
  id: Handler
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Handler
  nameWithType: HttpContext.Handler
  fullName: System.Web.HttpContext.Handler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置<xref href=&quot;System.Web.IHttpHandler&quot;></xref>负责处理 HTTP 请求的对象。"
  remarks: "处理程序属性包含对的处理程序处理 HTTP 请求的引用。 通过使用了元素，或通过使用在用户代码中定义的自定义处理程序，可以指定的处理程序。 有关处理程序的详细信息，请参阅[HTTP 处理程序和 HTTP 模块概述](~/add/includes/ajax-current-ext-md.md)。       对处理程序属性的引用将保持不变即使当前页已更改的服务器端方法，如<xref:System.Web.HttpServerUtility.Execute%2A>方法或<xref:System.Web.HttpServerUtility.Transfer%2A>方法。</xref:System.Web.HttpServerUtility.Transfer%2A> </xref:System.Web.HttpServerUtility.Execute%2A>"
  syntax:
    content: public System.Web.IHttpHandler Handler { get; set; }
    return:
      type: System.Web.IHttpHandler
      description: "<xref href=&quot;System.Web.IHttpHandler&quot;> </xref>负责处理 HTTP 请求。"
  overload: System.Web.HttpContext.Handler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.IsCustomErrorEnabled
  id: IsCustomErrorEnabled
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsCustomErrorEnabled
  nameWithType: HttpContext.IsCustomErrorEnabled
  fullName: System.Web.HttpContext.IsCustomErrorEnabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个值，该值指示是否为当前 HTTP 请求启用自定义错误。"
  syntax:
    content: public bool IsCustomErrorEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了自定义错误，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.IsCustomErrorEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.IsDebuggingEnabled
  id: IsDebuggingEnabled
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsDebuggingEnabled
  nameWithType: HttpContext.IsDebuggingEnabled
  fullName: System.Web.HttpContext.IsDebuggingEnabled
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个值，该值指示当前 HTTP 请求是否处于调试模式。"
  syntax:
    content: public bool IsDebuggingEnabled { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果请求处于调试模式;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.IsDebuggingEnabled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.IsPostNotification
  id: IsPostNotification
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsPostNotification
  nameWithType: HttpContext.IsPostNotification
  fullName: System.Web.HttpContext.IsPostNotification
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个值，是当前进程在 ASP.NET 中的点紧后面管道<xref href=&quot;System.Web.HttpApplication&quot;></xref>事件已完成处理。"
  remarks: "中的集成模式仅支持 IsPostNotification 属性[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]并且至少.NET Framework 3.0。 如果可能，该属性返回一个布尔值，该值指示是否在事件<xref:System.Web.HttpApplication>对象已完成处理。</xref:System.Web.HttpApplication>       IsPostNotification 属性不应设置。 相反，它由提供[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]到每个通知的 ASP.NET 运行时。 设置 IsPostNotification 属性将导致编译错误。       在方案中其中多个事件的<xref:System.Web.HttpApplication>对象由一个事件处理程序处理，则可以使用与<xref:System.Web.RequestNotification>枚举准确确定其中的应用程序生命周期中当前请求是</xref:System.Web.RequestNotification>结合使用的 IsPostNotification 属性</xref:System.Web.HttpApplication>       IsPostNotification 是.NET Framework 3.5 版中引入的。  有关详细信息，请参阅[版本和依赖关系](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example demonstrates how to use the IsPostNotification property to determine when an event of the <xref:System.Web.HttpApplication> object has finished processing all the associated event handlers. The custom event handler in this example handles several events of the <xref:System.Web.HttpApplication> object, and the IsPostNotification property is used to determine what code is invoked after a specific event is handled.  \n  \n [!code-cs[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/csharp/p-system.web.httpcontext_2_1.cs)]\n [!code-vb[System.Web.HttpResponse.IsPostNotification#1](~/add/codesnippet/visualbasic/p-system.web.httpcontext_2_1.vb)]"
  syntax:
    content: public bool IsPostNotification { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果启用了自定义错误，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.IsPostNotification*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "该操作要求中的集成的管道模式[!INCLUDE[iisver](~/add/includes/ajax-current-ext-md.md)]并且至少.NET Framework 3.0。"
  platform:
  - net462
- uid: System.Web.HttpContext.IsWebSocketRequest
  id: IsWebSocketRequest
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsWebSocketRequest
  nameWithType: HttpContext.IsWebSocketRequest
  fullName: System.Web.HttpContext.IsWebSocketRequest
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个值，该值指示请求是否<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>请求。"
  remarks: "此方法返回`true`如果请求包含初始<xref:System.Web.WebSockets.AspNetWebSocket>握手和`WebSocket`的 IIS 模块处于主动状态。</xref:System.Web.WebSockets.AspNetWebSocket>"
  syntax:
    content: public bool IsWebSocketRequest { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果请求<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>请求; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.IsWebSocketRequest*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.IsWebSocketRequestUpgrading
  id: IsWebSocketRequestUpgrading
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: IsWebSocketRequestUpgrading
  nameWithType: HttpContext.IsWebSocketRequestUpgrading
  fullName: System.Web.HttpContext.IsWebSocketRequestUpgrading
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取一个值，该值指示是否从 HTTP 连接到升级连接<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>连接。"
  syntax:
    content: public bool IsWebSocketRequestUpgrading { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果连接正在升级;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.IsWebSocketRequestUpgrading*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Items
  id: Items
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Items
  nameWithType: HttpContext.Items
  fullName: System.Web.HttpContext.Items
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取可以用于组织和共享之间的数据的键/值集合<xref href=&quot;System.Web.IHttpModule&quot;></xref>接口和<xref href=&quot;System.Web.IHttpHandler&quot;></xref>在 HTTP 请求过程的接口。"
  syntax:
    content: public System.Collections.IDictionary Items { get; }
    return:
      type: System.Collections.IDictionary
      description: "<xref:System.Collections.IDictionary>键/值集合，按指定的键提供对集合中个别值的访问。</xref:System.Collections.IDictionary>"
  overload: System.Web.HttpContext.Items*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.PageInstrumentation
  id: PageInstrumentation
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: PageInstrumentation
  nameWithType: HttpContext.PageInstrumentation
  fullName: System.Web.HttpContext.PageInstrumentation
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取此请求的页检测服务实例的引用。"
  syntax:
    content: public System.Web.Instrumentation.PageInstrumentationService PageInstrumentation { get; }
    return:
      type: System.Web.Instrumentation.PageInstrumentationService
      description: "此请求页检测服务实例。"
  overload: System.Web.HttpContext.PageInstrumentation*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.PreviousHandler
  id: PreviousHandler
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: PreviousHandler
  nameWithType: HttpContext.PreviousHandler
  fullName: System.Web.HttpContext.PreviousHandler
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.IHttpHandler&quot;></xref>父处理程序的对象。"
  remarks: "执行当前请求前 PreviousHandler 属性对应于上次处理程序。"
  syntax:
    content: public System.Web.IHttpHandler PreviousHandler { get; }
    return:
      type: System.Web.IHttpHandler
      description: "<xref href=&quot;System.Web.IHttpHandler&quot;> </xref>实例，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果不找到任何以前的处理程序。"
  overload: System.Web.HttpContext.PreviousHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Profile
  id: Profile
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Profile
  nameWithType: HttpContext.Profile
  fullName: System.Web.HttpContext.Profile
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.Profile.ProfileBase&quot;></xref>当前用户配置文件的对象。"
  remarks: "配置文件属性用于持久存储的使用类型安全的 API 的结构化数据。 当访问配置文件属性时，但未指定任何值，则返回的空实例`null`不会返回。"
  syntax:
    content: public System.Web.Profile.ProfileBase Profile { get; }
    return:
      type: System.Web.Profile.ProfileBase
      description: "A <xref href=&quot;System.Web.Profile.ProfileBase&quot;> </xref>如果应用程序配置文件包含的定义配置文件的属性; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.Profile*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)
  id: RemapHandler(System.Web.IHttpHandler)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RemapHandler(IHttpHandler)
  nameWithType: HttpContext.RemapHandler(IHttpHandler)
  fullName: System.Web.HttpContext.RemapHandler(IHttpHandler)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用此选项可指定的处理程序请求。"
  remarks: "如果你设置`handler`到`null`，默认处理程序用于处理该请求。 你可以设置`handler`到异步处理程序或同步的处理程序。 处理程序必须实现<xref:System.Web.IHttpHandler>接口。</xref:System.Web.IHttpHandler>"
  syntax:
    content: public void RemapHandler (System.Web.IHttpHandler handler);
    parameters:
    - id: handler
      type: System.Web.IHttpHandler
      description: "应处理该请求的对象。"
  overload: System.Web.HttpContext.RemapHandler*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "RemapHandler 方法之后调用<xref href=&quot;System.Web.HttpApplication.MapRequestHandler&quot;></xref>发生事件。"
  platform:
  - net462
- uid: System.Web.HttpContext.Request
  id: Request
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Request
  nameWithType: HttpContext.Request
  fullName: System.Web.HttpContext.Request
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.HttpRequest&quot;></xref>为当前 HTTP 请求的对象。"
  remarks: "请求属性提供以编程方式访问的属性和方法的<xref:System.Web.HttpRequest>类。</xref:System.Web.HttpRequest> 因为 ASP.NET 页包含对的默认引用<xref:System.Web>命名空间 (其中包含<xref:System.Web.HttpContext>类)，你可以引用的<xref:System.Web.HttpRequest>上一个.aspx 页面，而无需使用完全限定的类参考<xref:System.Web.HttpContext>.</xref:System.Web.HttpContext></xref:System.Web.HttpRequest>成员</xref:System.Web.HttpContext></xref:System.Web> 例如，你可以使用`Request.Browser`用于获得客户端浏览器的功能。 但是，如果你想要使用的成员<xref:System.Web.HttpRequest>从 ASP.NET 代码隐藏模块，你必须包括对引用<xref:System.Web>模块和对当前处于活动状态的请求/响应上下文和中的类的完全限定的引用命名空间中<xref:System.Web>你想要使用。</xref:System.Web> </xref:System.Web> </xref:System.Web.HttpRequest> 例如，在代码隐藏页必须指定完全限定的名称`HttpContext.Current.Request.Browser`。      1> [!NOTE]&1;> ASP.NET 将引发异常，如果你尝试使用此属性时<xref:System.Web.HttpRequest>对象不可用。</xref:System.Web.HttpRequest> 例如，这是在 Application_Start 方法的 Global.asax 文件中，或者从 Application_Start 方法调用的方法中则为 true。 在该时间具有尚未创建任何 HTTP 请求。"
  syntax:
    content: public System.Web.HttpRequest Request { get; }
    return:
      type: System.Web.HttpRequest
      description: "<xref href=&quot;System.Web.HttpRequest&quot;> </xref>为当前 HTTP 请求。"
  overload: System.Web.HttpContext.Request*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "在 IIS 7 下在集成模式下运行 Web 应用程序。"
  platform:
  - net462
- uid: System.Web.HttpContext.Response
  id: Response
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Response
  nameWithType: HttpContext.Response
  fullName: System.Web.HttpContext.Response
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.HttpResponse&quot;></xref>当前 HTTP 响应的对象。"
  remarks: "响应属性提供以编程方式访问的属性和方法的<xref:System.Web.HttpResponse>类。</xref:System.Web.HttpResponse> 因为 ASP.NET 页包含对的默认引用<xref:System.Web>命名空间 (其中包含<xref:System.Web.HttpContext>类)，你可以引用的<xref:System.Web.HttpContext>上一个.aspx 页面，而无需使用完全限定的类参考<xref:System.Web.HttpContext>.</xref:System.Web.HttpContext></xref:System.Web.HttpContext>成员</xref:System.Web.HttpContext></xref:System.Web> 例如，你可以使用`Response.Write(&quot;some output&quot;)`要写入 HTTP 输出流的输出。 但是，如果你想要使用的成员<xref:System.Web.HttpResponse>从 ASP.NET 代码隐藏模块，你必须包括对引用<xref:System.Web>模块和对当前处于活动状态的请求/响应上下文和中的类的完全限定的引用命名空间中<xref:System.Web>你想要使用。</xref:System.Web> </xref:System.Web> </xref:System.Web.HttpResponse> 例如，在代码隐藏页必须指定完全限定的名称`HttpContext.Current.Response.Write(&quot;some output&quot;)`。"
  syntax:
    content: public System.Web.HttpResponse Response { get; }
    return:
      type: System.Web.HttpResponse
      description: "<xref href=&quot;System.Web.HttpResponse&quot;> </xref>当前 HTTP 响应。"
  overload: System.Web.HttpContext.Response*
  exceptions:
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "在 IIS 7 下在集成模式下运行 Web 应用程序。"
  platform:
  - net462
- uid: System.Web.HttpContext.RewritePath(System.String)
  id: RewritePath(System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RewritePath(String)
  nameWithType: HttpContext.RewritePath(String)
  fullName: System.Web.HttpContext.RewritePath(String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "重写使用给定的路径的 URL。"
  remarks: "RewritePath 方法将对资源的请求重定向到不同于由所请求 URL 指示的路径。 如果你必须重置虚拟路径，以便从服务器资源的客户端的请求正确解析，请使用采用此方法的重载`rebaseClientPath`参数并将参数设置为`false`。       URL 重写可当你想要重新构建 Web 应用程序中的页和你想要确保已将加入书签旧 Url 的人可以仍使用它们后您移动页面的不同而不同。 URL 重写时，可用于以透明方式将请求转发到新页的位置。       如果你想要使站点能够使用搜索引擎，会更加友好的用户进行了优化的 Url，更可靠的替代方法是使用 ASP.NET 路由。 有关详细信息，请参阅[ASP.NET 路由](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following example shows how to use the RewritePath method to enable a Web site to respond to URLs that do not reflect the file structure in the Web site. The first block of code is an ASP.NET Web page that is named RewritePath.aspx. It requires a query string. If the name of your site is WebSite1, the URL `http://localhost/WebSite1/RewritePath.aspx?page=1` displays \"Page 1\" in the browser. The block of code that follows the Web page is the `Application_BeginRequest` event handler in the Global.asax file. This code intercepts requests for URLs such as `http://localhost/WebSite1/page1` and converts them to the form that is required for RewritePath.aspx before they are processed. Therefore, the URL `http://localhost/WebSite1/page1` invokes RewritePath.aspx with the query-string parameter that displays \"Page 1\" in the browser. If a URL such as `http://localhost/WebSite1/page1` is received, an overload of RewritePath is invoked that enables you to provide a value for the <xref:System.Web.HttpRequest.PathInfo%2A> property as well as a query string parameter.  \n  \n [!code-cs[HttpContext_RewritePath#2](~/add/codesnippet/csharp/m-system.web.httpcontext_1.aspx)]\n [!code-vb[HttpContext_RewritePath#2](~/add/codesnippet/visualbasic/m-system.web.httpcontext_1.aspx)]  \n  \n [!code-vb[HttpContext_RewritePath#1](~/add/codesnippet/visualbasic/m-system.web.httpcontext_2.asax)]\n [!code-cs[HttpContext_RewritePath#1](~/add/codesnippet/csharp/m-system.web.httpcontext_2.asax)]"
  syntax:
    content: public void RewritePath (string path);
    parameters:
    - id: path
      type: System.String
      description: "内部重写路径。"
  overload: System.Web.HttpContext.RewritePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code> path </code>参数不在当前应用程序的根目录。"
  platform:
  - net462
- uid: System.Web.HttpContext.RewritePath(System.String,System.Boolean)
  id: RewritePath(System.String,System.Boolean)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RewritePath(String,Boolean)
  nameWithType: HttpContext.RewritePath(String,Boolean)
  fullName: System.Web.HttpContext.RewritePath(String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "重写使用给定的路径和一个布尔值，指定是否修改服务器资源的虚拟路径的 URL。"
  remarks: "调用 RewritePath 方法<xref:System.Web.HttpContext.RewritePath%28System.String%29?displayProperty=fullName>方法替换`rebaseClientPath`参数设置为`true`。</xref:System.Web.HttpContext.RewritePath%28System.String%29?displayProperty=fullName> 若要确保不会修改用于构造资源路径的虚拟路径，将设置`rebaseClientPath`参数`false`。 在其中你可能想要设置的常见方案`rebaseClientPath`到`false`时会需要重写 URL，并且是使用主题，并将 URL 重定向到位于比请求的资源的其他文件夹中的资源。       URL 重写可当你想要重新构建 Web 应用程序中的页和你想要确保已将加入书签旧 Url 的人可以仍使用它们后您移动页面的不同而不同。 URL 重写时，可用于以透明方式将请求转发到新页的位置。       如果你想要使站点能够使用搜索引擎，会更加友好的用户进行了优化的 Url，更可靠的替代方法是使用 ASP.NET 路由。 有关详细信息，请参阅[ASP.NET 路由](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - For a code example, see the <xref:System.Web.HttpContext.RewritePath%28System.String%29> method overload.
  syntax:
    content: public void RewritePath (string path, bool rebaseClientPath);
    parameters:
    - id: path
      type: System.String
      description: "内部重写路径。"
    - id: rebaseClientPath
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要重置虚拟路径;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>保持虚拟路径不变。"
  overload: System.Web.HttpContext.RewritePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>path</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code> path </code>参数不在当前应用程序的根目录。"
  platform:
  - net462
- uid: System.Web.HttpContext.RewritePath(System.String,System.String,System.String)
  id: RewritePath(System.String,System.String,System.String)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RewritePath(String,String,String)
  nameWithType: HttpContext.RewritePath(String,String,String)
  fullName: System.Web.HttpContext.RewritePath(String,String,String)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "使用给定的路径、 路径信息和查询字符串信息重写 URL。"
  remarks: "RewritePath 方法而无需更改 URL 重对资源的请求定向到另一个资源。       `filePath`参数不包括`pathInfo`参数内容。 有关 URL http://www.microsoft.com/virdir/page.html/tail，`filePath`参数是 http://www.microsoft.com/virdir/page.html，和`pathInfo`参数是结尾。       URL 重写可当你想要重新构建 Web 应用程序中的页和你想要确保已将加入书签旧 Url 的人可以仍使用它们后您移动页面的不同而不同。 URL 重写时，可用于以透明方式将请求转发到新页的位置。       如果你想要使站点能够使用搜索引擎，会更加友好的用户进行了优化的 Url，更可靠的替代方法是使用 ASP.NET 路由。 有关详细信息，请参阅[ASP.NET 路由](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - For a code example, including an example of this method overload, see the <xref:System.Web.HttpContext.RewritePath%28System.String%29> method overload.
  syntax:
    content: public void RewritePath (string filePath, string pathInfo, string queryString);
    parameters:
    - id: filePath
      type: System.String
      description: "内部重写路径。"
    - id: pathInfo
      type: System.String
      description: "资源的附加路径信息。 有关详细信息，请参阅<xref:System.Web.HttpRequest.PathInfo*>。</xref:System.Web.HttpRequest.PathInfo*>"
    - id: queryString
      type: System.String
      description: "请求查询字符串。"
  overload: System.Web.HttpContext.RewritePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> path </code>参数不在当前应用程序的根目录。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code> filePath </code>参数不在当前应用程序的根目录。"
  platform:
  - net462
- uid: System.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)
  id: RewritePath(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: RewritePath(String,String,String,Boolean)
  nameWithType: HttpContext.RewritePath(String,String,String,Boolean)
  fullName: System.Web.HttpContext.RewritePath(String,String,String,Boolean)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "重写 URL 使用给定虚拟路径、 路径信息、 查询字符串信息和一个布尔值，指定是否将客户端文件路径设置为重写路径。"
  remarks: "`filePath`参数不包括的内容`pathInfo`参数。 有关 URL http://www.microsoft.com/virdir/page.html/tail，`filePath`参数是 http://www.microsoft.com/virdir/page.html，和`pathInfo`参数是结尾。       若要确保不会修改用于构造资源路径的虚拟路径，将设置`setClientFilePath`参数`false`。 在其中你可能想要设置的常见方案`setClientFilePath`到`false`时会需要重写 URL，并且是使用主题，并将 URL 重定向到位于比请求的资源的其他文件夹中的资源。       URL 重写可当你想要重新构建 Web 应用程序中的页和你想要确保已将加入书签旧 Url 的人可以仍使用它们后您移动页面的不同而不同。 URL 重写时，可用于以透明方式将请求转发到新页的位置。       如果你想要使站点能够使用搜索引擎，会更加友好的用户进行了优化的 Url，更可靠的替代方法是使用 ASP.NET 路由。 有关详细信息，请参阅[ASP.NET 路由](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - For a code example, see the <xref:System.Web.HttpContext.RewritePath%28System.String%29> method overload.
  syntax:
    content: public void RewritePath (string filePath, string pathInfo, string queryString, bool setClientFilePath);
    parameters:
    - id: filePath
      type: System.String
      description: "服务请求资源的虚拟路径。"
    - id: pathInfo
      type: System.String
      description: "要用于 URL 重定向的附加路径信息。 有关详细信息，请参阅<xref:System.Web.HttpRequest.PathInfo*>。</xref:System.Web.HttpRequest.PathInfo*>"
    - id: queryString
      type: System.String
      description: "要用于 URL 重定向请求查询字符串。"
    - id: setClientFilePath
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要设置用于客户端资源的值的文件路径`filePath`参数; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.RewritePath*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code> path </code>参数不在当前应用程序的根目录。"
  - type: System.Web.HttpException
    commentId: T:System.Web.HttpException
    description: "<code> filePath </code>参数不在当前应用程序的根目录。"
  platform:
  - net462
- uid: System.Web.HttpContext.Server
  id: Server
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Server
  nameWithType: HttpContext.Server
  fullName: System.Web.HttpContext.Server
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.HttpServerUtility&quot;></xref>对象，提供用于处理 Web 请求的方法。"
  remarks: "服务器属性提供以编程方式访问的属性和方法的<xref:System.Web.HttpServerUtility>类。</xref:System.Web.HttpServerUtility> 因为 ASP.NET 页包含对的默认引用<xref:System.Web>命名空间 (其中包含<xref:System.Web.HttpContext>类)，你可以引用的<xref:System.Web.HttpContext>上一个.aspx 页面，而无需使用完全限定的类参考<xref:System.Web.HttpContext>.</xref:System.Web.HttpContext></xref:System.Web.HttpContext>成员</xref:System.Web.HttpContext></xref:System.Web> 例如，你可以使用`Server.CreateObject(&quot;MyCOMComponent&quot;)`在服务器上创建 COM 对象的实例。 但是，如果你想要使用的成员<xref:System.Web.HttpServerUtility>从 ASP.NET 代码隐藏模块，你必须包括对引用<xref:System.Web>模块和对当前处于活动状态的请求/响应上下文和中的类的完全限定的引用命名空间中<xref:System.Web>你想要使用。</xref:System.Web> </xref:System.Web> </xref:System.Web.HttpServerUtility> 例如，在代码隐藏页必须指定完全限定的名称`HttpContext.Current.Server.CreateObject(&quot;MyCOMComponent&quot;)`。"
  syntax:
    content: public System.Web.HttpServerUtility Server { get; }
    return:
      type: System.Web.HttpServerUtility
      description: "<xref href=&quot;System.Web.HttpServerUtility&quot;> </xref>为当前 HTTP 请求。"
  overload: System.Web.HttpContext.Server*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Session
  id: Session
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Session
  nameWithType: HttpContext.Session
  fullName: System.Web.HttpContext.Session
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.SessionState.HttpSessionState&quot;></xref>为当前 HTTP 请求的对象。"
  remarks: "会话属性提供以编程方式访问的属性和方法的<xref:System.Web.SessionState.HttpSessionState>类。</xref:System.Web.SessionState.HttpSessionState>       若要使用会话状态，你必须启用它。 有关如何启用会话状态的信息，请参阅**配置会话状态**中[ASP.NET 会话状态概述](~/add/includes/ajax-current-ext-md.md)。       有关如何将值保存在会话状态的信息，请参阅[如何︰ 保存会话状态中的值](~/add/includes/ajax-current-ext-md.md)。 有关如何从会话状态中读取值的信息，请参阅[如何︰ 从会话状态的读取值](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following examples show how to save values in session state and how to read values from session state.  \n  \n These examples require:  \n  \n-   An ASP.NET application that has session state enabled.  \n  \n-   A Web Forms page class that has access to the <xref:System.Web.UI.Page.Session%2A?displayProperty=fullName> property, or any class that has access to the <xref:System.Web.HttpContext.Current%2A?displayProperty=fullName> property.  \n  \n```c#  \nstring firstName = \"Jeff\";  \nstring lastName = \"Smith\";  \nstring city = \"Seattle\";  \n  \n// Save to session state in a Web Forms page class.  \nSession[\"FirstName\"] = firstName;  \nSession[\"LastName\"] = lastName;  \nSession[\"City\"] = city;  \n  \n// Read from session state in a Web Forms page class.  \nfirstName = (string)(Session[\"FirstName\"]);  \nlastName = (string)(Session[\"LastName\"]);  \ncity = (string)(Session[\"City\"]);  \n  \n// Outside of Web Forms page class, use HttpContext.Current.  \nHttpContext context = HttpContext.Current;  \ncontext.Session[\"FirstName\"] = firstName;  \nfirstName = (string)(context.Session[\"FirstName\"]);  \n  \n```  \n  \n```vb#  \nDim firstName As String = \"Jeff\"  \nDim lastName As String = \"Smith\"  \nDim city As String = \"Seattle\"  \n  \n' Save to session state in a Web Forms page class.  \nSession(\"FirstName\") = firstName  \nSession(\"LastName\") = lastName  \nSession(\"City\") = city  \n  \n' Read from session state in a Web Forms page class.  \nfirstName = DirectCast(Session(\"FirstName\"), String)  \nlastName = DirectCast(Session(\"LastName\"), String)  \ncity = DirectCast(Session(\"City\"), String)  \n  \n' Outside of Web Forms page class, use HttpContext.Current.  \nDim context As HttpContext = HttpContext.Current  \ncontext.Session(\"FirstName\") = firstName  \nfirstName = DirectCast(context.Session(\"FirstName\"), String)  \n  \n```"
  syntax:
    content: public System.Web.SessionState.HttpSessionState Session { get; }
    return:
      type: System.Web.SessionState.HttpSessionState
      description: "<xref href=&quot;System.Web.SessionState.HttpSessionState&quot;> </xref>为当前 HTTP 请求的对象。"
  overload: System.Web.HttpContext.Session*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)
  id: SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: SetSessionStateBehavior(SessionStateBehavior)
  nameWithType: HttpContext.SetSessionStateBehavior(SessionStateBehavior)
  fullName: System.Web.HttpContext.SetSessionStateBehavior(SessionStateBehavior)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "设置为支持 HTTP 请求必需的会话状态行为的类型。"
  remarks: "在 ASP.NET 默认实现中，HTTP 请求处理程序指示是否它通过实现需要会话状态<xref:System.Web.SessionState.IRequiresSessionState>接口或<xref:System.Web.SessionState.IReadOnlySessionState>接口。</xref:System.Web.SessionState.IReadOnlySessionState> </xref:System.Web.SessionState.IRequiresSessionState> SetSessionStateBehavior 方法和<xref:System.Web.SessionState.SessionStateBehavior>枚举让你提供有关哪种类型的会话状态支持是处理请求所必需的更多详细信息。</xref:System.Web.SessionState.SessionStateBehavior> 有关详细信息，请参阅<xref:System.Web.SessionState.SessionStateBehavior>枚举。</xref:System.Web.SessionState.SessionStateBehavior>       前，必须调用 SetSessionStateBehavior 方法<xref:System.Web.HttpApplication.AcquireRequestState>管道事件。</xref:System.Web.HttpApplication.AcquireRequestState> 或此事件发生后会发生的调用将导致<xref:System.InvalidOperationException>异常。</xref:System.InvalidOperationException>"
  syntax:
    content: public void SetSessionStateBehavior (System.Web.SessionState.SessionStateBehavior sessionStateBehavior);
    parameters:
    - id: sessionStateBehavior
      type: System.Web.SessionState.SessionStateBehavior
      description: "指定哪种类型的会话状态行为的枚举值之一是必需的。"
  overload: System.Web.HttpContext.SetSessionStateBehavior*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "该方法调用后<xref href=&quot;System.Web.HttpApplication.AcquireRequestState&quot;></xref>事件被引发。"
  platform:
  - net462
- uid: System.Web.HttpContext.SkipAuthorization
  id: SkipAuthorization
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: SkipAuthorization
  nameWithType: HttpContext.SkipAuthorization
  fullName: System.Web.HttpContext.SkipAuthorization
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，指定是否<xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;></xref>对象应跳过对当前请求的授权检查。"
  remarks: "SkipAuthorization 属性旨在需要重定向到一个页面，让匿名连接的身份验证模块用于高级用途。 窗体身份验证模块和 Passport 身份验证模块时设置这两 SkipAuthorization 重定向到配置的登录页。 设置 SkipAuthorization 需要`ControlPrincipal`标志设置。 璝惠`ControlPrincipal`标志，请参阅<xref:System.Security.Permissions.SecurityPermissionFlag>。</xref:System.Security.Permissions.SecurityPermissionFlag>"
  syntax:
    content: public bool SkipAuthorization { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Web.Security.UrlAuthorizationModule&quot;></xref>应跳过授权检查; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.SkipAuthorization*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.System#IServiceProvider#GetService(System.Type)
  id: System#IServiceProvider#GetService(System.Type)
  isEii: true
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: System.IServiceProvider.GetService(Type)
  nameWithType: HttpContext.System.IServiceProvider.GetService(Type)
  fullName: System.Web.HttpContext.System.IServiceProvider.GetService(Type)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "返回当前服务类型的对象。"
  remarks: "此方法可用于访问基础<xref:System.Web.HttpWorkerRequest>对象。</xref:System.Web.HttpWorkerRequest>"
  syntax:
    content: object IServiceProvider.GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "一种<xref href=&quot;System.Web.HttpContext&quot;></xref>服务设置为服务提供程序。"
    return:
      type: System.Object
      description: "A <xref href=&quot;System.Web.HttpContext&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果找到服务。"
  overload: System.Web.HttpContext.System#IServiceProvider#GetService*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.ThreadAbortOnTimeout
  id: ThreadAbortOnTimeout
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: ThreadAbortOnTimeout
  nameWithType: HttpContext.ThreadAbortOnTimeout
  fullName: System.Web.HttpContext.ThreadAbortOnTimeout
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置一个值，指定 ASP.NET 运行时是否应调用&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;请求超时时，为处理此请求的线程上。"
  remarks: "处理程序和使用的模块中<xref:System.Web.HttpRequest.TimedOutToken%2A?displayProperty=fullName>属性来实现协作取消，您可能希望禁用<xref:System.Threading.Thread.Abort%2A?displayProperty=fullName>请求超时时，默认情况下执行 ASP.NET 的行为。</xref:System.Threading.Thread.Abort%2A?displayProperty=fullName> </xref:System.Web.HttpRequest.TimedOutToken%2A?displayProperty=fullName> 此属性设置为`false`可以帮助你确保取消和清理例程将不被中断 asp.net 的情况下运行。       如果将此属性设置为`false`，ASP.NET 将不自动显示&quot;请求的操作已超时&quot;错误页这是发生超时时。 应用程序负责适当地设置响应内容。"
  syntax:
    content: public bool ThreadAbortOnTimeout { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果&lt;xref:System.Threading.Thread.Abort%2A?displayProperty=fullName&gt;时在线程超时时; 否则为将调用<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.HttpContext.ThreadAbortOnTimeout*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Timestamp
  id: Timestamp
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Timestamp
  nameWithType: HttpContext.Timestamp
  fullName: System.Web.HttpContext.Timestamp
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取当前 HTTP 请求的初始时间戳。"
  remarks: "时间戳属性返回的时间戳是服务器的本地时间和的实例化过程中进行设置<xref:System.Web.HttpContext>对象。</xref:System.Web.HttpContext> 本地时间等于的 UTC 时间加上 UTC 偏移量。"
  syntax:
    content: public DateTime Timestamp { get; }
    return:
      type: System.DateTime
      description: "当前 HTTP 请求的时间戳。"
  overload: System.Web.HttpContext.Timestamp*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.Trace
  id: Trace
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: Trace
  nameWithType: HttpContext.Trace
  fullName: System.Web.HttpContext.Trace
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取<xref href=&quot;System.Web.TraceContext&quot;></xref>当前 HTTP 响应的对象。"
  syntax:
    content: public System.Web.TraceContext Trace { get; }
    return:
      type: System.Web.TraceContext
      description: "<xref href=&quot;System.Web.TraceContext&quot;> </xref>当前 HTTP 响应。"
  overload: System.Web.HttpContext.Trace*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.User
  id: User
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: User
  nameWithType: HttpContext.User
  fullName: System.Web.HttpContext.User
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取或设置当前 HTTP 请求的安全信息。"
  remarks: "用户属性提供以编程方式访问的属性和方法<xref:System.Security.Principal.IPrincipal>接口。</xref:System.Security.Principal.IPrincipal>       因为 ASP.NET 页包含对的默认引用<xref:System.Web>命名空间 (其中包含<xref:System.Web.HttpContext>类)，你可以引用的<xref:System.Web.HttpContext>上一个.aspx 页面，而无需使用完全限定的类参考<xref:System.Web.HttpContext>.</xref:System.Web.HttpContext></xref:System.Web.HttpContext>成员</xref:System.Web.HttpContext></xref:System.Web> 例如，你可以使用`User.Identity.Name`运行获取代表当前进程的用户的名称。 但是，如果你想要使用的成员<xref:System.Security.Principal.IPrincipal>从 ASP.NET 代码隐藏模块，你必须包括对引用<xref:System.Web>模块和对当前处于活动状态的请求/响应上下文和中的类的完全限定的引用命名空间中<xref:System.Web>你想要使用。</xref:System.Web> </xref:System.Web> </xref:System.Security.Principal.IPrincipal> 例如，在代码隐藏页必须指定完全限定的名称`HttpContext.Current.User.Identity.Name`。"
  example:
  - "The following example shows how to access properties of the current user through the User property. Those properties are used to set the title of the Web page.  \n  \n If the application uses Windows authentication, the user name includes the domain. For example, the page title would be “Home page for DOMAIN\\username”.  \n  \n [!code-cs[System.Web.HttpContext.User#1](~/add/codesnippet/csharp/p-system.web.httpcontext_1_1.cs)]\n [!code-vb[System.Web.HttpContext.User#1](~/add/codesnippet/visualbasic/p-system.web.httpcontext_1_1.vb)]"
  syntax:
    content: public System.Security.Principal.IPrincipal User { get; set; }
    return:
      type: System.Security.Principal.IPrincipal
      description: "当前 HTTP 请求的安全信息。"
  overload: System.Web.HttpContext.User*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.WebSocketNegotiatedProtocol
  id: WebSocketNegotiatedProtocol
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: WebSocketNegotiatedProtocol
  nameWithType: HttpContext.WebSocketNegotiatedProtocol
  fullName: System.Web.HttpContext.WebSocketNegotiatedProtocol
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取已从服务器发送到的客户端的协商的协议<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>连接。"
  syntax:
    content: public string WebSocketNegotiatedProtocol { get; }
    return:
      type: System.String
      description: "协商的协议。"
  overload: System.Web.HttpContext.WebSocketNegotiatedProtocol*
  exceptions: []
  platform:
  - net462
- uid: System.Web.HttpContext.WebSocketRequestedProtocols
  id: WebSocketRequestedProtocols
  parent: System.Web.HttpContext
  langs:
  - csharp
  name: WebSocketRequestedProtocols
  nameWithType: HttpContext.WebSocketRequestedProtocols
  fullName: System.Web.HttpContext.WebSocketRequestedProtocols
  type: Property
  assemblies:
  - System.Web
  namespace: System.Web
  summary: "获取客户端请求的协议的有序列的表。"
  syntax:
    content: public System.Collections.Generic.IList<string> WebSocketRequestedProtocols { get; }
    return:
      type: System.Collections.Generic.IList{System.String}
      description: "请求的协议，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果这不是<xref href=&quot;System.Web.WebSockets.AspNetWebSocket&quot;></xref>请求或如果没有列表不存在。"
  overload: System.Web.HttpContext.WebSocketRequestedProtocols*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Resources.MissingManifestResourceException
  isExternal: true
  name: System.Resources.MissingManifestResourceException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.HttpException
  parent: System.Web
  isExternal: false
  name: HttpException
  nameWithType: HttpException
  fullName: System.Web.HttpException
- uid: System.Web.HttpContext.#ctor(System.Web.HttpWorkerRequest)
  parent: System.Web.HttpContext
  isExternal: false
  name: HttpContext(HttpWorkerRequest)
  nameWithType: HttpContext.HttpContext(HttpWorkerRequest)
  fullName: System.Web.HttpContext.HttpContext(HttpWorkerRequest)
- uid: System.Web.HttpWorkerRequest
  parent: System.Web
  isExternal: false
  name: HttpWorkerRequest
  nameWithType: HttpWorkerRequest
  fullName: System.Web.HttpWorkerRequest
- uid: System.Web.HttpContext.#ctor(System.Web.HttpRequest,System.Web.HttpResponse)
  parent: System.Web.HttpContext
  isExternal: false
  name: HttpContext(HttpRequest,HttpResponse)
  nameWithType: HttpContext.HttpContext(HttpRequest,HttpResponse)
  fullName: System.Web.HttpContext.HttpContext(HttpRequest,HttpResponse)
- uid: System.Web.HttpRequest
  parent: System.Web
  isExternal: false
  name: HttpRequest
  nameWithType: HttpRequest
  fullName: System.Web.HttpRequest
- uid: System.Web.HttpResponse
  parent: System.Web
  isExternal: false
  name: HttpResponse
  nameWithType: HttpResponse
  fullName: System.Web.HttpResponse
- uid: System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task})
  parent: System.Web.HttpContext
  isExternal: false
  name: AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  nameWithType: HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
  fullName: System.Web.HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>)
- uid: System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task}
  parent: System
  isExternal: true
  name: Func<AspNetWebSocketContext,Task>
  nameWithType: Func<AspNetWebSocketContext,Task>
  fullName: System.Func<System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: Func<System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.WebSockets.AspNetWebSocketContext
    name: AspNetWebSocketContext
    nameWithType: AspNetWebSocketContext
    fullName: AspNetWebSocketContext
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.HttpContext.AcceptWebSocketRequest(System.Func{System.Web.WebSockets.AspNetWebSocketContext,System.Threading.Tasks.Task},System.Web.WebSockets.AspNetWebSocketOptions)
  parent: System.Web.HttpContext
  isExternal: false
  name: AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  nameWithType: HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
  fullName: System.Web.HttpContext.AcceptWebSocketRequest(Func<AspNetWebSocketContext,Task>,AspNetWebSocketOptions)
- uid: System.Web.WebSockets.AspNetWebSocketOptions
  parent: System.Web.WebSockets
  isExternal: false
  name: AspNetWebSocketOptions
  nameWithType: AspNetWebSocketOptions
  fullName: System.Web.WebSockets.AspNetWebSocketOptions
- uid: System.Web.HttpContext.AddError(System.Exception)
  parent: System.Web.HttpContext
  isExternal: false
  name: AddError(Exception)
  nameWithType: HttpContext.AddError(Exception)
  fullName: System.Web.HttpContext.AddError(Exception)
- uid: System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Web.HttpContext.AddOnRequestCompleted(System.Action{System.Web.HttpContext})
  parent: System.Web.HttpContext
  isExternal: false
  name: AddOnRequestCompleted(Action<HttpContext>)
  nameWithType: HttpContext.AddOnRequestCompleted(Action<HttpContext>)
  fullName: System.Web.HttpContext.AddOnRequestCompleted(Action<HttpContext>)
- uid: System.Web.ISubscriptionToken
  parent: System.Web
  isExternal: false
  name: ISubscriptionToken
  nameWithType: ISubscriptionToken
  fullName: System.Web.ISubscriptionToken
- uid: System.Action{System.Web.HttpContext}
  parent: System
  isExternal: true
  name: Action<HttpContext>
  nameWithType: Action<HttpContext>
  fullName: System.Action<System.Web.HttpContext>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: Action<System.Web.HttpContext>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Web.HttpContext
    name: HttpContext
    nameWithType: HttpContext
    fullName: HttpContext
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.HttpContext.AllErrors
  parent: System.Web.HttpContext
  isExternal: false
  name: AllErrors
  nameWithType: HttpContext.AllErrors
  fullName: System.Web.HttpContext.AllErrors
- uid: System.Exception[]
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception[]
  spec.csharp:
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: Exception[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Web.HttpContext.AllowAsyncDuringSyncStages
  parent: System.Web.HttpContext
  isExternal: false
  name: AllowAsyncDuringSyncStages
  nameWithType: HttpContext.AllowAsyncDuringSyncStages
  fullName: System.Web.HttpContext.AllowAsyncDuringSyncStages
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.HttpContext.Application
  parent: System.Web.HttpContext
  isExternal: false
  name: Application
  nameWithType: HttpContext.Application
  fullName: System.Web.HttpContext.Application
- uid: System.Web.HttpApplicationState
  parent: System.Web
  isExternal: false
  name: HttpApplicationState
  nameWithType: HttpApplicationState
  fullName: System.Web.HttpApplicationState
- uid: System.Web.HttpContext.ApplicationInstance
  parent: System.Web.HttpContext
  isExternal: false
  name: ApplicationInstance
  nameWithType: HttpContext.ApplicationInstance
  fullName: System.Web.HttpContext.ApplicationInstance
- uid: System.Web.HttpApplication
  parent: System.Web
  isExternal: false
  name: HttpApplication
  nameWithType: HttpApplication
  fullName: System.Web.HttpApplication
- uid: System.Web.HttpContext.AsyncPreloadMode
  parent: System.Web.HttpContext
  isExternal: false
  name: AsyncPreloadMode
  nameWithType: HttpContext.AsyncPreloadMode
  fullName: System.Web.HttpContext.AsyncPreloadMode
- uid: System.Web.Configuration.AsyncPreloadModeFlags
  parent: System.Web.Configuration
  isExternal: false
  name: AsyncPreloadModeFlags
  nameWithType: AsyncPreloadModeFlags
  fullName: System.Web.Configuration.AsyncPreloadModeFlags
- uid: System.Web.HttpContext.Cache
  parent: System.Web.HttpContext
  isExternal: false
  name: Cache
  nameWithType: HttpContext.Cache
  fullName: System.Web.HttpContext.Cache
- uid: System.Web.Caching.Cache
  parent: System.Web.Caching
  isExternal: false
  name: Cache
  nameWithType: Cache
  fullName: System.Web.Caching.Cache
- uid: System.Web.HttpContext.ClearError
  parent: System.Web.HttpContext
  isExternal: false
  name: ClearError()
  nameWithType: HttpContext.ClearError()
  fullName: System.Web.HttpContext.ClearError()
- uid: System.Web.HttpContext.Current
  parent: System.Web.HttpContext
  isExternal: false
  name: Current
  nameWithType: HttpContext.Current
  fullName: System.Web.HttpContext.Current
- uid: System.Web.HttpContext
  parent: System.Web
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext
  fullName: System.Web.HttpContext
- uid: System.Web.HttpContext.CurrentHandler
  parent: System.Web.HttpContext
  isExternal: false
  name: CurrentHandler
  nameWithType: HttpContext.CurrentHandler
  fullName: System.Web.HttpContext.CurrentHandler
- uid: System.Web.IHttpHandler
  parent: System.Web
  isExternal: false
  name: IHttpHandler
  nameWithType: IHttpHandler
  fullName: System.Web.IHttpHandler
- uid: System.Web.HttpContext.CurrentNotification
  parent: System.Web.HttpContext
  isExternal: false
  name: CurrentNotification
  nameWithType: HttpContext.CurrentNotification
  fullName: System.Web.HttpContext.CurrentNotification
- uid: System.Web.RequestNotification
  parent: System.Web
  isExternal: false
  name: RequestNotification
  nameWithType: RequestNotification
  fullName: System.Web.RequestNotification
- uid: System.Web.HttpContext.DisposeOnPipelineCompleted(System.IDisposable)
  parent: System.Web.HttpContext
  isExternal: false
  name: DisposeOnPipelineCompleted(IDisposable)
  nameWithType: HttpContext.DisposeOnPipelineCompleted(IDisposable)
  fullName: System.Web.HttpContext.DisposeOnPipelineCompleted(IDisposable)
- uid: System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Web.HttpContext.Error
  parent: System.Web.HttpContext
  isExternal: false
  name: Error
  nameWithType: HttpContext.Error
  fullName: System.Web.HttpContext.Error
- uid: System.Web.HttpContext.GetAppConfig(System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetAppConfig(String)
  nameWithType: HttpContext.GetAppConfig(String)
  fullName: System.Web.HttpContext.GetAppConfig(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.HttpContext.GetConfig(System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetConfig(String)
  nameWithType: HttpContext.GetConfig(String)
  fullName: System.Web.HttpContext.GetConfig(String)
- uid: System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetGlobalResourceObject(String,String)
  nameWithType: HttpContext.GetGlobalResourceObject(String,String)
  fullName: System.Web.HttpContext.GetGlobalResourceObject(String,String)
- uid: System.Web.HttpContext.GetGlobalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetGlobalResourceObject(String,String,CultureInfo)
  nameWithType: HttpContext.GetGlobalResourceObject(String,String,CultureInfo)
  fullName: System.Web.HttpContext.GetGlobalResourceObject(String,String,CultureInfo)
- uid: System.Globalization.CultureInfo
  parent: System.Globalization
  isExternal: true
  name: CultureInfo
  nameWithType: CultureInfo
  fullName: System.Globalization.CultureInfo
- uid: System.Web.HttpContext.GetLocalResourceObject(System.String,System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetLocalResourceObject(String,String)
  nameWithType: HttpContext.GetLocalResourceObject(String,String)
  fullName: System.Web.HttpContext.GetLocalResourceObject(String,String)
- uid: System.Web.HttpContext.GetLocalResourceObject(System.String,System.String,System.Globalization.CultureInfo)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetLocalResourceObject(String,String,CultureInfo)
  nameWithType: HttpContext.GetLocalResourceObject(String,String,CultureInfo)
  fullName: System.Web.HttpContext.GetLocalResourceObject(String,String,CultureInfo)
- uid: System.Web.HttpContext.GetSection(System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: GetSection(String)
  nameWithType: HttpContext.GetSection(String)
  fullName: System.Web.HttpContext.GetSection(String)
- uid: System.Web.HttpContext.Handler
  parent: System.Web.HttpContext
  isExternal: false
  name: Handler
  nameWithType: HttpContext.Handler
  fullName: System.Web.HttpContext.Handler
- uid: System.Web.HttpContext.IsCustomErrorEnabled
  parent: System.Web.HttpContext
  isExternal: false
  name: IsCustomErrorEnabled
  nameWithType: HttpContext.IsCustomErrorEnabled
  fullName: System.Web.HttpContext.IsCustomErrorEnabled
- uid: System.Web.HttpContext.IsDebuggingEnabled
  parent: System.Web.HttpContext
  isExternal: false
  name: IsDebuggingEnabled
  nameWithType: HttpContext.IsDebuggingEnabled
  fullName: System.Web.HttpContext.IsDebuggingEnabled
- uid: System.Web.HttpContext.IsPostNotification
  parent: System.Web.HttpContext
  isExternal: false
  name: IsPostNotification
  nameWithType: HttpContext.IsPostNotification
  fullName: System.Web.HttpContext.IsPostNotification
- uid: System.Web.HttpContext.IsWebSocketRequest
  parent: System.Web.HttpContext
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpContext.IsWebSocketRequest
  fullName: System.Web.HttpContext.IsWebSocketRequest
- uid: System.Web.HttpContext.IsWebSocketRequestUpgrading
  parent: System.Web.HttpContext
  isExternal: false
  name: IsWebSocketRequestUpgrading
  nameWithType: HttpContext.IsWebSocketRequestUpgrading
  fullName: System.Web.HttpContext.IsWebSocketRequestUpgrading
- uid: System.Web.HttpContext.Items
  parent: System.Web.HttpContext
  isExternal: false
  name: Items
  nameWithType: HttpContext.Items
  fullName: System.Web.HttpContext.Items
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  nameWithType: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Web.HttpContext.PageInstrumentation
  parent: System.Web.HttpContext
  isExternal: false
  name: PageInstrumentation
  nameWithType: HttpContext.PageInstrumentation
  fullName: System.Web.HttpContext.PageInstrumentation
- uid: System.Web.Instrumentation.PageInstrumentationService
  parent: System.Web.Instrumentation
  isExternal: false
  name: PageInstrumentationService
  nameWithType: PageInstrumentationService
  fullName: System.Web.Instrumentation.PageInstrumentationService
- uid: System.Web.HttpContext.PreviousHandler
  parent: System.Web.HttpContext
  isExternal: false
  name: PreviousHandler
  nameWithType: HttpContext.PreviousHandler
  fullName: System.Web.HttpContext.PreviousHandler
- uid: System.Web.HttpContext.Profile
  parent: System.Web.HttpContext
  isExternal: false
  name: Profile
  nameWithType: HttpContext.Profile
  fullName: System.Web.HttpContext.Profile
- uid: System.Web.Profile.ProfileBase
  parent: System.Web.Profile
  isExternal: false
  name: ProfileBase
  nameWithType: ProfileBase
  fullName: System.Web.Profile.ProfileBase
- uid: System.Web.HttpContext.RemapHandler(System.Web.IHttpHandler)
  parent: System.Web.HttpContext
  isExternal: false
  name: RemapHandler(IHttpHandler)
  nameWithType: HttpContext.RemapHandler(IHttpHandler)
  fullName: System.Web.HttpContext.RemapHandler(IHttpHandler)
- uid: System.Web.HttpContext.Request
  parent: System.Web.HttpContext
  isExternal: false
  name: Request
  nameWithType: HttpContext.Request
  fullName: System.Web.HttpContext.Request
- uid: System.Web.HttpContext.Response
  parent: System.Web.HttpContext
  isExternal: false
  name: Response
  nameWithType: HttpContext.Response
  fullName: System.Web.HttpContext.Response
- uid: System.Web.HttpContext.RewritePath(System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath(String)
  nameWithType: HttpContext.RewritePath(String)
  fullName: System.Web.HttpContext.RewritePath(String)
- uid: System.Web.HttpContext.RewritePath(System.String,System.Boolean)
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath(String,Boolean)
  nameWithType: HttpContext.RewritePath(String,Boolean)
  fullName: System.Web.HttpContext.RewritePath(String,Boolean)
- uid: System.Web.HttpContext.RewritePath(System.String,System.String,System.String)
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath(String,String,String)
  nameWithType: HttpContext.RewritePath(String,String,String)
  fullName: System.Web.HttpContext.RewritePath(String,String,String)
- uid: System.Web.HttpContext.RewritePath(System.String,System.String,System.String,System.Boolean)
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath(String,String,String,Boolean)
  nameWithType: HttpContext.RewritePath(String,String,String,Boolean)
  fullName: System.Web.HttpContext.RewritePath(String,String,String,Boolean)
- uid: System.Web.HttpContext.Server
  parent: System.Web.HttpContext
  isExternal: false
  name: Server
  nameWithType: HttpContext.Server
  fullName: System.Web.HttpContext.Server
- uid: System.Web.HttpServerUtility
  parent: System.Web
  isExternal: false
  name: HttpServerUtility
  nameWithType: HttpServerUtility
  fullName: System.Web.HttpServerUtility
- uid: System.Web.HttpContext.Session
  parent: System.Web.HttpContext
  isExternal: false
  name: Session
  nameWithType: HttpContext.Session
  fullName: System.Web.HttpContext.Session
- uid: System.Web.SessionState.HttpSessionState
  parent: System.Web.SessionState
  isExternal: false
  name: HttpSessionState
  nameWithType: HttpSessionState
  fullName: System.Web.SessionState.HttpSessionState
- uid: System.Web.HttpContext.SetSessionStateBehavior(System.Web.SessionState.SessionStateBehavior)
  parent: System.Web.HttpContext
  isExternal: false
  name: SetSessionStateBehavior(SessionStateBehavior)
  nameWithType: HttpContext.SetSessionStateBehavior(SessionStateBehavior)
  fullName: System.Web.HttpContext.SetSessionStateBehavior(SessionStateBehavior)
- uid: System.Web.SessionState.SessionStateBehavior
  parent: System.Web.SessionState
  isExternal: false
  name: SessionStateBehavior
  nameWithType: SessionStateBehavior
  fullName: System.Web.SessionState.SessionStateBehavior
- uid: System.Web.HttpContext.SkipAuthorization
  parent: System.Web.HttpContext
  isExternal: false
  name: SkipAuthorization
  nameWithType: HttpContext.SkipAuthorization
  fullName: System.Web.HttpContext.SkipAuthorization
- uid: System.Web.HttpContext.System#IServiceProvider#GetService(System.Type)
  parent: System.Web.HttpContext
  isExternal: false
  name: System.IServiceProvider.GetService(Type)
  nameWithType: HttpContext.System.IServiceProvider.GetService(Type)
  fullName: System.Web.HttpContext.System.IServiceProvider.GetService(Type)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Web.HttpContext.ThreadAbortOnTimeout
  parent: System.Web.HttpContext
  isExternal: false
  name: ThreadAbortOnTimeout
  nameWithType: HttpContext.ThreadAbortOnTimeout
  fullName: System.Web.HttpContext.ThreadAbortOnTimeout
- uid: System.Web.HttpContext.Timestamp
  parent: System.Web.HttpContext
  isExternal: false
  name: Timestamp
  nameWithType: HttpContext.Timestamp
  fullName: System.Web.HttpContext.Timestamp
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Web.HttpContext.Trace
  parent: System.Web.HttpContext
  isExternal: false
  name: Trace
  nameWithType: HttpContext.Trace
  fullName: System.Web.HttpContext.Trace
- uid: System.Web.TraceContext
  parent: System.Web
  isExternal: false
  name: TraceContext
  nameWithType: TraceContext
  fullName: System.Web.TraceContext
- uid: System.Web.HttpContext.User
  parent: System.Web.HttpContext
  isExternal: false
  name: User
  nameWithType: HttpContext.User
  fullName: System.Web.HttpContext.User
- uid: System.Security.Principal.IPrincipal
  parent: System.Security.Principal
  isExternal: true
  name: IPrincipal
  nameWithType: IPrincipal
  fullName: System.Security.Principal.IPrincipal
- uid: System.Web.HttpContext.WebSocketNegotiatedProtocol
  parent: System.Web.HttpContext
  isExternal: false
  name: WebSocketNegotiatedProtocol
  nameWithType: HttpContext.WebSocketNegotiatedProtocol
  fullName: System.Web.HttpContext.WebSocketNegotiatedProtocol
- uid: System.Web.HttpContext.WebSocketRequestedProtocols
  parent: System.Web.HttpContext
  isExternal: false
  name: WebSocketRequestedProtocols
  nameWithType: HttpContext.WebSocketRequestedProtocols
  fullName: System.Web.HttpContext.WebSocketRequestedProtocols
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Web.HttpContext.#ctor*
  parent: System.Web.HttpContext
  isExternal: false
  name: HttpContext
  nameWithType: HttpContext.HttpContext
- uid: System.Web.HttpContext.AcceptWebSocketRequest*
  parent: System.Web.HttpContext
  isExternal: false
  name: AcceptWebSocketRequest
  nameWithType: HttpContext.AcceptWebSocketRequest
- uid: System.Web.HttpContext.AddError*
  parent: System.Web.HttpContext
  isExternal: false
  name: AddError
  nameWithType: HttpContext.AddError
- uid: System.Web.HttpContext.AddOnRequestCompleted*
  parent: System.Web.HttpContext
  isExternal: false
  name: AddOnRequestCompleted
  nameWithType: HttpContext.AddOnRequestCompleted
- uid: System.Web.HttpContext.AllErrors*
  parent: System.Web.HttpContext
  isExternal: false
  name: AllErrors
  nameWithType: HttpContext.AllErrors
- uid: System.Web.HttpContext.AllowAsyncDuringSyncStages*
  parent: System.Web.HttpContext
  isExternal: false
  name: AllowAsyncDuringSyncStages
  nameWithType: HttpContext.AllowAsyncDuringSyncStages
- uid: System.Web.HttpContext.Application*
  parent: System.Web.HttpContext
  isExternal: false
  name: Application
  nameWithType: HttpContext.Application
- uid: System.Web.HttpContext.ApplicationInstance*
  parent: System.Web.HttpContext
  isExternal: false
  name: ApplicationInstance
  nameWithType: HttpContext.ApplicationInstance
- uid: System.Web.HttpContext.AsyncPreloadMode*
  parent: System.Web.HttpContext
  isExternal: false
  name: AsyncPreloadMode
  nameWithType: HttpContext.AsyncPreloadMode
- uid: System.Web.HttpContext.Cache*
  parent: System.Web.HttpContext
  isExternal: false
  name: Cache
  nameWithType: HttpContext.Cache
- uid: System.Web.HttpContext.ClearError*
  parent: System.Web.HttpContext
  isExternal: false
  name: ClearError
  nameWithType: HttpContext.ClearError
- uid: System.Web.HttpContext.Current*
  parent: System.Web.HttpContext
  isExternal: false
  name: Current
  nameWithType: HttpContext.Current
- uid: System.Web.HttpContext.CurrentHandler*
  parent: System.Web.HttpContext
  isExternal: false
  name: CurrentHandler
  nameWithType: HttpContext.CurrentHandler
- uid: System.Web.HttpContext.CurrentNotification*
  parent: System.Web.HttpContext
  isExternal: false
  name: CurrentNotification
  nameWithType: HttpContext.CurrentNotification
- uid: System.Web.HttpContext.DisposeOnPipelineCompleted*
  parent: System.Web.HttpContext
  isExternal: false
  name: DisposeOnPipelineCompleted
  nameWithType: HttpContext.DisposeOnPipelineCompleted
- uid: System.Web.HttpContext.Error*
  parent: System.Web.HttpContext
  isExternal: false
  name: Error
  nameWithType: HttpContext.Error
- uid: System.Web.HttpContext.GetAppConfig*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetAppConfig
  nameWithType: HttpContext.GetAppConfig
- uid: System.Web.HttpContext.GetConfig*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetConfig
  nameWithType: HttpContext.GetConfig
- uid: System.Web.HttpContext.GetGlobalResourceObject*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetGlobalResourceObject
  nameWithType: HttpContext.GetGlobalResourceObject
- uid: System.Web.HttpContext.GetLocalResourceObject*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetLocalResourceObject
  nameWithType: HttpContext.GetLocalResourceObject
- uid: System.Web.HttpContext.GetSection*
  parent: System.Web.HttpContext
  isExternal: false
  name: GetSection
  nameWithType: HttpContext.GetSection
- uid: System.Web.HttpContext.Handler*
  parent: System.Web.HttpContext
  isExternal: false
  name: Handler
  nameWithType: HttpContext.Handler
- uid: System.Web.HttpContext.IsCustomErrorEnabled*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsCustomErrorEnabled
  nameWithType: HttpContext.IsCustomErrorEnabled
- uid: System.Web.HttpContext.IsDebuggingEnabled*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsDebuggingEnabled
  nameWithType: HttpContext.IsDebuggingEnabled
- uid: System.Web.HttpContext.IsPostNotification*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsPostNotification
  nameWithType: HttpContext.IsPostNotification
- uid: System.Web.HttpContext.IsWebSocketRequest*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsWebSocketRequest
  nameWithType: HttpContext.IsWebSocketRequest
- uid: System.Web.HttpContext.IsWebSocketRequestUpgrading*
  parent: System.Web.HttpContext
  isExternal: false
  name: IsWebSocketRequestUpgrading
  nameWithType: HttpContext.IsWebSocketRequestUpgrading
- uid: System.Web.HttpContext.Items*
  parent: System.Web.HttpContext
  isExternal: false
  name: Items
  nameWithType: HttpContext.Items
- uid: System.Web.HttpContext.PageInstrumentation*
  parent: System.Web.HttpContext
  isExternal: false
  name: PageInstrumentation
  nameWithType: HttpContext.PageInstrumentation
- uid: System.Web.HttpContext.PreviousHandler*
  parent: System.Web.HttpContext
  isExternal: false
  name: PreviousHandler
  nameWithType: HttpContext.PreviousHandler
- uid: System.Web.HttpContext.Profile*
  parent: System.Web.HttpContext
  isExternal: false
  name: Profile
  nameWithType: HttpContext.Profile
- uid: System.Web.HttpContext.RemapHandler*
  parent: System.Web.HttpContext
  isExternal: false
  name: RemapHandler
  nameWithType: HttpContext.RemapHandler
- uid: System.Web.HttpContext.Request*
  parent: System.Web.HttpContext
  isExternal: false
  name: Request
  nameWithType: HttpContext.Request
- uid: System.Web.HttpContext.Response*
  parent: System.Web.HttpContext
  isExternal: false
  name: Response
  nameWithType: HttpContext.Response
- uid: System.Web.HttpContext.RewritePath*
  parent: System.Web.HttpContext
  isExternal: false
  name: RewritePath
  nameWithType: HttpContext.RewritePath
- uid: System.Web.HttpContext.Server*
  parent: System.Web.HttpContext
  isExternal: false
  name: Server
  nameWithType: HttpContext.Server
- uid: System.Web.HttpContext.Session*
  parent: System.Web.HttpContext
  isExternal: false
  name: Session
  nameWithType: HttpContext.Session
- uid: System.Web.HttpContext.SetSessionStateBehavior*
  parent: System.Web.HttpContext
  isExternal: false
  name: SetSessionStateBehavior
  nameWithType: HttpContext.SetSessionStateBehavior
- uid: System.Web.HttpContext.SkipAuthorization*
  parent: System.Web.HttpContext
  isExternal: false
  name: SkipAuthorization
  nameWithType: HttpContext.SkipAuthorization
- uid: System.Web.HttpContext.System#IServiceProvider#GetService*
  parent: System.Web.HttpContext
  isExternal: false
  name: System.IServiceProvider.GetService
  nameWithType: HttpContext.System.IServiceProvider.GetService
- uid: System.Web.HttpContext.ThreadAbortOnTimeout*
  parent: System.Web.HttpContext
  isExternal: false
  name: ThreadAbortOnTimeout
  nameWithType: HttpContext.ThreadAbortOnTimeout
- uid: System.Web.HttpContext.Timestamp*
  parent: System.Web.HttpContext
  isExternal: false
  name: Timestamp
  nameWithType: HttpContext.Timestamp
- uid: System.Web.HttpContext.Trace*
  parent: System.Web.HttpContext
  isExternal: false
  name: Trace
  nameWithType: HttpContext.Trace
- uid: System.Web.HttpContext.User*
  parent: System.Web.HttpContext
  isExternal: false
  name: User
  nameWithType: HttpContext.User
- uid: System.Web.HttpContext.WebSocketNegotiatedProtocol*
  parent: System.Web.HttpContext
  isExternal: false
  name: WebSocketNegotiatedProtocol
  nameWithType: HttpContext.WebSocketNegotiatedProtocol
- uid: System.Web.HttpContext.WebSocketRequestedProtocols*
  parent: System.Web.HttpContext
  isExternal: false
  name: WebSocketRequestedProtocols
  nameWithType: HttpContext.WebSocketRequestedProtocols
