### YamlMime:ManagedReference
items:
- uid: Microsoft.VisualBasic.Devices.Keyboard
  id: Keyboard
  children:
  - Microsoft.VisualBasic.Devices.Keyboard.#ctor
  - Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  - Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  - Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  - Microsoft.VisualBasic.Devices.Keyboard.NumLock
  - Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  - Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  - Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  - Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  langs:
  - csharp
  name: Keyboard
  nameWithType: Keyboard
  fullName: Microsoft.VisualBasic.Devices.Keyboard
  type: Class
  summary: "提供用于访问键盘，如密钥当前已按下，和一种方法可以将击键发送到活动窗口的当前状态的属性。"
  remarks: "`My.Computer.Keyboard`计算机的键盘为接口提供的对象。 属性`My.Computer.Keyboard`提供几个特殊键的状态有关的信息。 `My.Computer.Keyboard.SendKeys`方法使你可以将密钥发送到活动窗口，就像它们具有已键入键盘上输入一样。      ## 任务的任务涉及示例的下表列出`My.Computer.Keyboard`对象。      |||  |-|-|  |到 |请参阅 |  |将击键发送到应用程序 |[如何︰ 启动应用程序并将其发送击键 (Visual Basic 中)](~/add/includes/ajax-current-ext-md.md)|     # # 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.CtrlKeyDown` property to determine if the computer's CTRL key is pressed.  \n  \n [!code-vb[VbVbalrMyComputer#36](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#36)]"
  syntax:
    content: public class Keyboard
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor
  id: '#ctor'
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: Keyboard()
  nameWithType: Keyboard.Keyboard()
  fullName: Microsoft.VisualBasic.Devices.Keyboard.Keyboard()
  type: Constructor
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "初始化的新实例<xref href=&quot;Microsoft.VisualBasic.Devices.Keyboard&quot;></xref>类。"
  syntax:
    content: public Keyboard ();
    parameters: []
  overload: Microsoft.VisualBasic.Devices.Keyboard.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  id: AltKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "获取<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ，该值指示是否按下 ALT 键。"
  remarks: "`My.Computer.Keyboard.AltKeyDown`属性提供的功能类似于<xref:System.Windows.Forms.Control.ModifierKeys%2A>属性。</xref:System.Windows.Forms.Control.ModifierKeys%2A>      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.AltKeyDown` property to determine if the computer's ALT key is down.  \n  \n [!code-vb[VbVbalrMyComputer#23](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#23)]"
  syntax:
    content: public bool AltKeyDown { get; }
    return:
      type: System.Boolean
      description: 'A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref>值︰ <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref> ALT 键，则向下; 否则为如果<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。'
  overload: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  id: CapsLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "获取<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ，该值指示是否 CAPS LOCK 打开。"
  remarks: "返回仅 caps LOCK 键的状态。      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.CapsLock` property to determine if the computer's CAPS LOCK is turned on.  \n  \n [!code-vb[VbVbalrMyComputer#50](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#50)]"
  syntax:
    content: public bool CapsLock { get; }
    return:
      type: System.Boolean
      description: 'A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref>值︰ <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;> </xref>如果 CAPS LOCK 打开; 否则为<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。'
  overload: Microsoft.VisualBasic.Devices.Keyboard.CapsLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  id: CtrlKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "获取<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ，该值指示是否按下 CTRL 键。"
  remarks: "`My.Computer.Keyboard.CtrlKeyDown`属性提供的功能类似于<xref:System.Windows.Forms.Control.ModifierKeys%2A>属性。</xref:System.Windows.Forms.Control.ModifierKeys%2A>      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.CtrlKeyDown` property to determine if the computer's CTRL key is down.  \n  \n [!code-vb[VbVbalrMyComputer#34](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#34)]"
  syntax:
    content: public bool CtrlKeyDown { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果 CTRL 键关闭;否则为<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  id: NumLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "获取<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ，该值指示 NUM LOCK 键是否亮起。"
  remarks: "返回仅 NUM LOCK 键的状态。      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.NumLock` property to determine if the computer's NUM LOCK key is on.  \n  \n [!code-vb[VbVbalrMyComputer#48](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#48)]"
  syntax:
    content: public bool NumLock { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果 NUM LOCK 位于;否则为<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.NumLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  id: ScrollLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "获取<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ，该值指示 SCROLL LOCK 键是否已开启。"
  remarks: "返回仅 SCROLL LOCK 键的状态。      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.ScrollLock` property to determine if the computer's SCROLL LOCK key is on.  \n  \n [!code-vb[VbVbalrMyComputer#31](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#31)]"
  syntax:
    content: public bool ScrollLock { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果 SCROLL LOCK 位于;否则为<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  id: SendKeys(System.String)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: SendKeys(String)
  nameWithType: Keyboard.SendKeys(String)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "向活动窗口时，发送一个或多个击键，就像在键盘上键入。"
  remarks: "`My.Computer.Keyboard.SendKeys`方法提供的功能类似于<xref:System.Windows.Forms.SendKeys.Send%2A>和<xref:System.Windows.Forms.SendKeys.SendWait%2A>方法。</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys.Send%2A>       `wait`参数非常有用，如果在你的应用程序可以继续之前，必须完成其他应用程序。      1> [!NOTE]&1;> 由于没有激活其他应用程序的托管的方法，你可以使用此类当前应用程序中的，手动选择窗口发送键，或使用 Windows API 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。 有关详细信息，请参阅[演练︰ 调用 Windows Api](~/add/includes/ajax-current-ext-md.md)。       `keys`自变量可以指定任何单个项或任何与键组合 ALT、 CTRL 或 SHIFT （或这些密钥的任意组合）。 每个键表示由一个或多个字符，如`a`字符&quot;a&quot;，或`{ENTER}`ENTER 键。       若要将某个键组合使用 shift 键，在前面使用的键代码`+`（加号）。 若要将某个键组合使用 CTRL，在前面使用的键代码`^`（插入符号）。 若要将某个键与 ALT 组合，在前面使用的键代码`%`（百分号）。 若要指定重复键，使用该窗体`{`*键数*`}`。 必须放置之间留一个空格*密钥*和*数*。 例如，`{LEFT 42}`意味着&quot;按向左的箭头键 42 次&quot;;`{h 10}`表示&quot;按 &quot;h&quot; 10 次。&quot;       下表列出可用于指定当按下 （如 ENTER 或选项卡上） 的相应密钥时不会显示的字符的代码。      |||  |-|-|  |密钥 |代码 |  |退格符 |{退格符} 或 {BS} |  |中断 |{中断} |  |CAPS LOCK |{CAPSLOCK} |  |清除 |{清除} |  |删除 |{删除} 或 {DEL} |  |向下箭头 |{向下} |  |结束 |{结束} |  |Enter 键 （数字键盘） |{输入} |  |输入 | ~ |  |ESC |{转义} 或 {ESC} |  |帮助 |{帮助} |  |主页 |{主页} |  |单元 |{插入} |  |向的左键 |{LEFT} |  |NUM LOCK |{NUMLOCK} |  |向下翻页 |{PGDN} |  |向上翻页 |{PGUP} |  |返回 |{返回} |  |右箭头 |{RIGHT} |  |SCROLL LOCK |{SCROLLLOCK} |  |选项卡 |{选项卡} |  |向上键 |{最多} |  |F1 到 F15 |{F1} 通过 {F15} |     # # 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.SendKeys` method to send keystrokes to an external application, the Calculator application, started by the `Shell` function.  \n  \n [!code-vb[VbVbalrMyComputer#25](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#25)]  \n  \n A <xref:System.ArgumentException> exception is raised if an application with the requested process identifier cannot be found.  \n  \n The call to the `Shell` function requires full trust (<xref:System.Security.SecurityException> class)."
  syntax:
    content: public void SendKeys (string keys);
    parameters:
    - id: keys
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ，它定义要发送的键。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分信任情况下存在顺序用户缺少必要的权限。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  id: SendKeys(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: SendKeys(String,Boolean)
  nameWithType: Keyboard.SendKeys(String,Boolean)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String,Boolean)
  type: Method
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "向活动窗口时，发送一个或多个击键，就像在键盘上键入。"
  remarks: "`My.Computer.Keyboard.SendKeys`方法提供的功能类似于<xref:System.Windows.Forms.SendKeys.Send%2A>和<xref:System.Windows.Forms.SendKeys.SendWait%2A>方法。</xref:System.Windows.Forms.SendKeys.SendWait%2A> </xref:System.Windows.Forms.SendKeys.Send%2A>       `wait`参数非常有用，如果在你的应用程序可以继续之前，必须完成其他应用程序。      1> [!NOTE]&1;> 由于没有激活其他应用程序的托管的方法，你可以使用此类当前应用程序中的，手动选择窗口发送键，或使用 Windows API 方法，如`FindWindow`和`SetForegroundWindow`、 将焦点强制上其他应用程序。 有关详细信息，请参阅[演练︰ 调用 Windows Api](~/add/includes/ajax-current-ext-md.md)。       `keys`自变量可以指定任何单个项或任何与键组合 ALT、 CTRL 或 SHIFT （或这些密钥的任意组合）。 每个键表示由一个或多个字符，如`a`字符&quot;a&quot;，或`{ENTER}`ENTER 键。       若要将某个键组合使用 shift 键，在前面使用的键代码`+`（加号）。 若要将某个键组合使用 CTRL，在前面使用的键代码`^`（插入符号）。 若要将某个键与 ALT 组合，在前面使用的键代码`%`（百分号）。 若要指定重复键，使用该窗体`{`*键数*`}`。 必须放置之间留一个空格*密钥*和*数*。 例如，`{LEFT 42}`意味着&quot;按向左的箭头键 42 次&quot;;`{h 10}`表示&quot;按 &quot;h&quot; 10 次。&quot;       下表列出可用于指定当按下 （如 ENTER 或选项卡上） 的相应密钥时不会显示的字符的代码。      |||  |-|-|  |密钥 |代码 |  |退格符 |{退格符} 或 {BS} |  |中断 |{中断} |  |CAPS LOCK |{CAPSLOCK} |  |清除 |{清除} |  |删除 |{删除} 或 {DEL} |  |向下箭头 |{向下} |  |结束 |{结束} |  |Enter 键 （数字键盘） |{输入} |  |输入 | ~ |  |ESC |{转义} 或 {ESC} |  |帮助 |{帮助} |  |主页 |{主页} |  |单元 |{插入} |  |向的左键 |{LEFT} |  |NUM LOCK |{NUMLOCK} |  |向下翻页 |{PGDN} |  |向上翻页 |{PGUP} |  |返回 |{返回} |  |右箭头 |{RIGHT} |  |SCROLL LOCK |{SCROLLLOCK} |  |选项卡 |{选项卡} |  |向上键 |{最多} |  |F1 到 F15 |{F1} 通过 {F15} |     # # 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.SendKeys` method to send keystrokes to an external application, the Calculator application, started by the `Shell` function.  \n  \n [!code-vb[VbVbalrMyComputer#25](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#25)]  \n  \n A <xref:System.ArgumentException> exception is raised if an application with the requested process identifier cannot be found.  \n  \n The call to the `Shell` function requires full trust (<xref:System.Security.SecurityException> class)."
  syntax:
    content: public void SendKeys (string keys, bool wait);
    parameters:
    - id: keys
      type: System.String
      description: "A <xref uid=&quot;langword_csharp_String&quot; name=&quot;String&quot; href=&quot;&quot;> </xref> ，它定义要发送的键。"
    - id: wait
      type: System.Boolean
      description: "可选。 A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ，它指定是否要等待的时间击键得到处理之前应用程序才能继续。 <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>默认情况下。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "部分信任情况下存在顺序用户缺少必要的权限。"
  platform:
  - net462
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  id: ShiftKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  langs:
  - csharp
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  type: Property
  assemblies:
  - Microsoft.VisualBasic
  namespace: Microsoft.VisualBasic.Devices
  summary: "获取<xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;> </xref> ，该值指示是否按下 SHIFT 键。"
  remarks: "`My.Computer.Keyboard.ShiftKeyDown`属性提供的功能类似于<xref:System.Windows.Forms.Control.ModifierKeys%2A>属性。</xref:System.Windows.Forms.Control.ModifierKeys%2A>      ## 项目类型的可用性 | | |  |-|-|  |项目类型 |可用 |  |Windows 应用程序 |**Yes**|  |类库 |**Yes**|  |控制台应用程序 |**Yes**|  |Windows 控件库 |**Yes**|  |Web 控件库 |否 |  |Windows 服务 |**Yes**|  |网站 |否 |"
  example:
  - "This example uses the `My.Computer.Keyboard.ShiftKeyDown` property to determine if one of the computer's SHIFT keys is down.  \n  \n [!code-vb[VbVbalrMyComputer#47](~/add/codesnippet/visualbasic/VbVbalrMyComputer/Class2.vb#47)]"
  syntax:
    content: public bool ShiftKeyDown { get; }
    return:
      type: System.Boolean
      description: "A <xref uid=&quot;langword_csharp_Boolean&quot; name=&quot;Boolean&quot; href=&quot;&quot;></xref> value. <xref uid=&quot;langword_csharp_True&quot; name=&quot;True&quot; href=&quot;&quot;></xref>如果 SHIFT 键关闭;否则为<xref uid=&quot;langword_csharp_False&quot; name=&quot;False&quot; href=&quot;&quot;> </xref>。"
  overload: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: Keyboard()
  nameWithType: Keyboard.Keyboard()
  fullName: Microsoft.VisualBasic.Devices.Keyboard.Keyboard()
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CapsLock
  nameWithType: Keyboard.CapsLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CapsLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: NumLock
  nameWithType: Keyboard.NumLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.NumLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys(String)
  nameWithType: Keyboard.SendKeys(String)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(System.String,System.Boolean)
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys(String,Boolean)
  nameWithType: Keyboard.SendKeys(String,Boolean)
  fullName: Microsoft.VisualBasic.Devices.Keyboard.SendKeys(String,Boolean)
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
  fullName: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.#ctor*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: Keyboard
  nameWithType: Keyboard.Keyboard
- uid: Microsoft.VisualBasic.Devices.Keyboard.AltKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: AltKeyDown
  nameWithType: Keyboard.AltKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.CapsLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CapsLock
  nameWithType: Keyboard.CapsLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.CtrlKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: CtrlKeyDown
  nameWithType: Keyboard.CtrlKeyDown
- uid: Microsoft.VisualBasic.Devices.Keyboard.NumLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: NumLock
  nameWithType: Keyboard.NumLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.ScrollLock*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ScrollLock
  nameWithType: Keyboard.ScrollLock
- uid: Microsoft.VisualBasic.Devices.Keyboard.SendKeys*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: SendKeys
  nameWithType: Keyboard.SendKeys
- uid: Microsoft.VisualBasic.Devices.Keyboard.ShiftKeyDown*
  parent: Microsoft.VisualBasic.Devices.Keyboard
  isExternal: false
  name: ShiftKeyDown
  nameWithType: Keyboard.ShiftKeyDown
