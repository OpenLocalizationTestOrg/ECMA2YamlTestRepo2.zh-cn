### YamlMime:ManagedReference
items:
- uid: System.Windows.DependencyPropertyChangedEventHandler
  id: DependencyPropertyChangedEventHandler
  langs:
  - csharp
  name: DependencyPropertyChangedEventHandler
  nameWithType: DependencyPropertyChangedEventHandler
  fullName: System.Windows.DependencyPropertyChangedEventHandler
  type: Delegate
  summary: "表示将处理事件的方法时引发<xref href=&quot;System.Windows.DependencyProperty&quot;></xref>更改对特定<xref href=&quot;System.Windows.DependencyObject&quot;></xref>实现。"
  remarks: "此委托是报告依赖项属性更改的特定事件的处理程序签名。       使用此处理程序的事件公开为[!INCLUDE[TLA#tla_clr](~/add/includes/tlasharptla-clr-md.md)]事件，不是路由事件。 通常这些事件遵循命名模式`Is(` *PropertyName*`)Changed`，其中*PropertyName*是<xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName>的已更改的属性。</xref:System.Windows.DependencyProperty.Name%2A?displayProperty=fullName> 事件的自变量用来查询的属性的旧和新值由特定的事件报告。 通常存在 1:1 的对应关系之间没有属性所做的更改和报告的更改的特定事件。 也很有可能，但通常情况下具有相同的事件报告更改到多个属性。 在这种情况下，<xref:System.Windows.DependencyPropertyChangedEventArgs>应检查以确定已更改的属性。</xref:System.Windows.DependencyPropertyChangedEventArgs>       事件数据类<xref:System.Windows.DependencyPropertyChangedEventArgs>比此委托只需使用更为广泛。</xref:System.Windows.DependencyPropertyChangedEventArgs> <xref:System.Windows.DependencyPropertyChangedEventArgs>此外用于通信的数据<xref:System.Windows.PropertyChangedCallback>实现，后者是自定义功能和内部结构的一部分的[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]属性系统，并通过<xref:System.Windows.DependencyObject.OnPropertyChanged%2A>虚拟方法，可以重写以任何依赖项属性的对象上发生更改时提供特定于类的通知。</xref:System.Windows.DependencyObject.OnPropertyChanged%2A> </xref:System.Windows.PropertyChangedCallback></xref:System.Windows.DependencyPropertyChangedEventArgs>"
  syntax:
    content: public delegate void DependencyPropertyChangedEventHandler(object sender, DependencyPropertyChangedEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
