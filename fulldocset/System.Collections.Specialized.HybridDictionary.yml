### YamlMime:ManagedReference
items:
- uid: System.Collections.Specialized.HybridDictionary
  id: HybridDictionary
  children:
  - System.Collections.Specialized.HybridDictionary.#ctor
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  - System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  - System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  - System.Collections.Specialized.HybridDictionary.Clear
  - System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  - System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  - System.Collections.Specialized.HybridDictionary.Count
  - System.Collections.Specialized.HybridDictionary.GetEnumerator
  - System.Collections.Specialized.HybridDictionary.IsFixedSize
  - System.Collections.Specialized.HybridDictionary.IsReadOnly
  - System.Collections.Specialized.HybridDictionary.IsSynchronized
  - System.Collections.Specialized.HybridDictionary.Item(System.Object)
  - System.Collections.Specialized.HybridDictionary.Keys
  - System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  - System.Collections.Specialized.HybridDictionary.SyncRoot
  - System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  - System.Collections.Specialized.HybridDictionary.Values
  langs:
  - csharp
  name: HybridDictionary
  nameWithType: HybridDictionary
  fullName: System.Collections.Specialized.HybridDictionary
  type: Class
  summary: "实现<xref uid=&quot;langword_csharp_IDictionary&quot; name=&quot;IDictionary&quot; href=&quot;&quot;></xref>使用<xref href=&quot;System.Collections.Specialized.ListDictionary&quot;></xref>集合时小型，，然后切换到<xref href=&quot;System.Collections.Hashtable&quot;></xref>当集合变大。"
  remarks: "此类字典中的元素数是未知的情况下，建议。 它利用改进性能的<xref:System.Collections.Specialized.ListDictionary>使用小型集合，并提供切换到<xref:System.Collections.Hashtable>可处理更大集合<xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary>更好</xref:System.Collections.Hashtable>的灵活性</xref:System.Collections.Specialized.ListDictionary>       如果集合的初始大小大于为 a <xref:System.Collections.Specialized.ListDictionary>、 集合存储在<xref:System.Collections.Hashtable>以避免复制<xref:System.Collections.Specialized.ListDictionary>到一种<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable></xref:System.Collections.Specialized.ListDictionary>中的元素的开销</xref:System.Collections.Hashtable></xref:System.Collections.Specialized.ListDictionary>的最佳大小       构造函数接受一个布尔型参数，用户可以指定在比较字符串时，集合是否忽略大小写。 如果该集合为区分大小写，它使用<xref:System.Object.GetHashCode%2A?displayProperty=fullName>和<xref:System.Object.Equals%2A?displayProperty=fullName>.</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName>的密钥的实现 如果该集合为不区分大小写，它将执行简单序号不区分大小写比较，其中遵从固定区域性的大小写规则。 默认情况下，该集合是区分大小写。 有关固定区域性的详细信息，请参阅<xref:System.Globalization.CultureInfo?displayProperty=fullName>。</xref:System.Globalization.CultureInfo?displayProperty=fullName>       密钥不能为 null，但值可以。       `foreach` C# 语言的语句 (`For Each`在 Visual Basic 中) 返回集合中的元素的类型的对象。 由于 HybridDictionary 的每个元素是键/值对，元素类型不是键的类型或值的类型。 相反，元素类型是<xref:System.Collections.DictionaryEntry>.</xref:System.Collections.DictionaryEntry> 例如︰ [!code-cpp [System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/cpp/t-system.collections.spe_3_1.cpp)][!code-cs[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/csharp/t-system.collections.spe_3_1.cs)][!code-vb[System.Collections.Specialized.HybridDictionary2#2](~/add/codesnippet/visualbasic/t-system.collections.spe_3_1.vb) ] `foreach`语句是枚举数，仅允许从，不写入集合读取周围的包装器。    "
  example:
  - "The following code example demonstrates several of the properties and methods of HybridDictionary.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/cpp/t-system.collections.spe_3_2.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/csharp/t-system.collections.spe_3_2.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/visualbasic/t-system.collections.spe_3_2.vb)]"
  syntax:
    content: 'public class HybridDictionary : System.Collections.IDictionary'
  inheritance:
  - System.Object
  implements:
  - System.Collections.IDictionary
  inheritedMembers: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.#ctor
  id: '#ctor'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: HybridDictionary()
  nameWithType: HybridDictionary.HybridDictionary()
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary()
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "创建一个空区分大小写<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
  remarks: "默认情况下，集合是区分大小写，并使用密钥的实现<xref:System.Object.GetHashCode%2A?displayProperty=fullName>作为哈希代码提供程序和密钥的实现<xref:System.Object.Equals%2A?displayProperty=fullName>用作比较器。</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName>       比较器确定两个键是否相等。 中的所有键<xref:System.Collections.Specialized.HybridDictionary>必须是唯一的。</xref:System.Collections.Specialized.HybridDictionary>       此构造函数是 o （1） 操作。"
  example:
  - "The following code example demonstrates several of the properties and methods of <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/cpp/m-system.collections.spe_9_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/csharp/m-system.collections.spe_9_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary2#1](~/add/codesnippet/visualbasic/m-system.collections.spe_9_1.vb)]"
  syntax:
    content: public HybridDictionary ();
    parameters: []
  overload: System.Collections.Specialized.HybridDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  id: '#ctor(System.Boolean)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: HybridDictionary(Boolean)
  nameWithType: HybridDictionary.HybridDictionary(Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "创建一个空<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>与指定的区分大小写。"
  remarks: "如果`caseInsensitive`是`false`，该集合使用的<xref:System.Object.GetHashCode%2A?displayProperty=fullName>和<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName>的密钥的实现 如果`caseInsensitive`是`true`，集合执行简单序号不区分大小写比较，其中遵从固定区域性的大小写规则。 有关固定区域性的详细信息，请参阅<xref:System.Globalization.CultureInfo?displayProperty=fullName>。</xref:System.Globalization.CultureInfo?displayProperty=fullName>       此构造函数是 o （1） 操作。"
  syntax:
    content: public HybridDictionary (bool caseInsensitive);
    parameters:
    - id: caseInsensitive
      type: System.Boolean
      description: "一个布尔值，表示是否<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>不区分大小写。"
  overload: System.Collections.Specialized.HybridDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: HybridDictionary(Int32)
  nameWithType: HybridDictionary.HybridDictionary(Int32)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "创建区分大小写<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>具有指定的初始大小。"
  remarks: "如果集合的初始大小大于为 a <xref:System.Collections.Specialized.ListDictionary>、 集合存储在<xref:System.Collections.Hashtable>以避免复制<xref:System.Collections.Specialized.ListDictionary>到<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable></xref:System.Collections.Specialized.ListDictionary>中的元素的开销</xref:System.Collections.Hashtable></xref:System.Collections.Specialized.ListDictionary>的最佳大小       默认情况下，集合是区分大小写，并使用密钥的实现<xref:System.Object.GetHashCode%2A?displayProperty=fullName>作为哈希代码提供程序和密钥的实现<xref:System.Object.Equals%2A?displayProperty=fullName>用作比较器。</xref:System.Object.Equals%2A?displayProperty=fullName> </xref:System.Object.GetHashCode%2A?displayProperty=fullName>       比较器确定两个键是否相等。 中的所有键<xref:System.Collections.Specialized.HybridDictionary>必须是唯一的。</xref:System.Collections.Specialized.HybridDictionary>       此构造函数是 O (`n`) 操作，其中`n`是`initialSize`。"
  syntax:
    content: public HybridDictionary (int initialSize);
    parameters:
    - id: initialSize
      type: System.Int32
      description: "大概项数， <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>最初可以包含。"
  overload: System.Collections.Specialized.HybridDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  id: '#ctor(System.Int32,System.Boolean)'
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: HybridDictionary(Int32,Boolean)
  nameWithType: HybridDictionary.HybridDictionary(Int32,Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "创建<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>与指定的初始大小和区分大小写。"
  remarks: "如果集合的初始大小大于为 a <xref:System.Collections.Specialized.ListDictionary>、 集合存储在<xref:System.Collections.Hashtable>以避免复制<xref:System.Collections.Specialized.ListDictionary>到<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable></xref:System.Collections.Specialized.ListDictionary>中的元素的开销</xref:System.Collections.Hashtable></xref:System.Collections.Specialized.ListDictionary>的最佳大小       如果`caseInsensitive`是`false`，该集合使用的<xref:System.Object.GetHashCode%2A?displayProperty=fullName>和<xref:System.Object.Equals%2A?displayProperty=fullName>。</xref:System.Object.Equals%2A?displayProperty=fullName></xref:System.Object.GetHashCode%2A?displayProperty=fullName>的密钥的实现 如果`caseInsensitive`是`true`，集合执行简单序号不区分大小写比较，其中遵从固定区域性的大小写规则。 有关固定区域性的详细信息，请参阅<xref:System.Globalization.CultureInfo?displayProperty=fullName>。</xref:System.Globalization.CultureInfo?displayProperty=fullName>       此构造函数是 O (`n`) 操作，其中`n`是`initialSize`。"
  syntax:
    content: public HybridDictionary (int initialSize, bool caseInsensitive);
    parameters:
    - id: initialSize
      type: System.Int32
      description: "大概项数， <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>最初可以包含。"
    - id: caseInsensitive
      type: System.Boolean
      description: "一个布尔值，表示是否<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>不区分大小写。"
  overload: System.Collections.Specialized.HybridDictionary.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  id: Add(System.Object,System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Add(Object,Object)
  nameWithType: HybridDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.HybridDictionary.Add(Object,Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "将添加一个具有指定的键和值转换为项<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
  remarks: "具有其状态和其哈希代码值之间没有关联的对象通常不应作为键。 例如，字符串对象作为键要优于使用 StringBuilder 对象。       密钥不能为`null`，但值可以。       你还可以使用<xref:System.Collections.Specialized.HybridDictionary.Item%2A>中不存在要添加新元素的键的值设置属性<xref:System.Collections.Specialized.HybridDictionary>; 例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue`。</xref:System.Collections.Specialized.HybridDictionary> </xref:System.Collections.Specialized.HybridDictionary.Item%2A> 但是，如果指定的键已存在于<xref:System.Collections.Specialized.HybridDictionary>，则设置<xref:System.Collections.Specialized.HybridDictionary.Item%2A>属性将会覆盖旧值。</xref:System.Collections.Specialized.HybridDictionary.Item%2A> </xref:System.Collections.Specialized.HybridDictionary> 与此相反，Add 方法不会修改现有元素。       当元素的数目变为大于为 a <xref:System.Collections.Specialized.ListDictionary>、 元素从<xref:System.Collections.Specialized.ListDictionary>一种<xref:System.Collections.Hashtable>。</xref:System.Collections.Hashtable>到</xref:System.Collections.Specialized.ListDictionary>复制</xref:System.Collections.Specialized.ListDictionary>的最佳大小 但是，这仅发生一次。 如果集合已存储<xref:System.Collections.Hashtable>和元素的数目低于为的<xref:System.Collections.Specialized.ListDictionary>，该集合将保持在<xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable></xref:System.Collections.Specialized.ListDictionary>的最佳大小</xref:System.Collections.Hashtable>       此方法为 o （1） 运算。"
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/200580ad-8659-4e63-8e92-_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/200580ad-8659-4e63-8e92-_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/200580ad-8659-4e63-8e92-_1.vb)]"
  syntax:
    content: public void Add (object key, object value);
    parameters:
    - id: key
      type: System.Object
      description: "要添加的条目的键。"
    - id: value
      type: System.Object
      description: "要添加的条目的值。 该值可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.HybridDictionary.Add*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "中已存在具有相同键的项<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Clear
  id: Clear
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Clear()
  nameWithType: HybridDictionary.Clear()
  fullName: System.Collections.Specialized.HybridDictionary.Clear()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "移除所有项从<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
  remarks: "<xref:System.Collections.Specialized.HybridDictionary.Count%2A>是设置为零，并且集合的元素对其他对象的引用也被释放。</xref:System.Collections.Specialized.HybridDictionary.Count%2A>       如果集合已存储在<xref:System.Collections.Hashtable>集合保留在<xref:System.Collections.Hashtable>.</xref:System.Collections.Hashtable> 、</xref:System.Collections.Hashtable>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.HybridDictionary.Count%2A>。</xref:System.Collections.Specialized.HybridDictionary.Count%2A>"
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_31_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_31_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_31_1.vb)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Collections.Specialized.HybridDictionary.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: HybridDictionary.Contains(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Contains(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "确定是否<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>包含特定键。"
  remarks: "此方法为 o （1） 运算。       从.NET Framework 2.0 开始，此方法使用集合的对象<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`key`以确定是否`item`存在。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A> 在.NET Framework 的早期版本，通过进行此决定<xref:System.Object.Equals%2A>和<xref:System.IComparable.CompareTo%2A>方法`item`参数的集合中的对象。</xref:System.IComparable.CompareTo%2A> </xref:System.Object.Equals%2A>"
  example:
  - "The following code example searches for an element in a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/cpp/m-system.collections.spe_37_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/csharp/m-system.collections.spe_37_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Contains#1](~/add/codesnippet/visualbasic/m-system.collections.spe_37_1.vb)]"
  syntax:
    content: public bool Contains (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要查找中的键<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>包含一个具有指定的项键; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.HybridDictionary.Contains*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  id: CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: CopyTo(Array,Int32)
  nameWithType: HybridDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.HybridDictionary.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "副本<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>条目到一维<xref:System.Array>实例的指定索引处。</xref:System.Array>"
  remarks: "元素被复制到<xref:System.Array>与在其中的枚举数循环访问<xref:System.Collections.Specialized.HybridDictionary>.</xref:System.Collections.Specialized.HybridDictionary>相同的顺序</xref:System.Array>       若要复制仅在密钥<xref:System.Collections.Specialized.HybridDictionary>，使用`HybridDictionary.Keys.CopyTo`。</xref:System.Collections.Specialized.HybridDictionary>       若要仅中的值复制<xref:System.Collections.Specialized.HybridDictionary>，使用`HybridDictionary.Values.CopyTo`。</xref:System.Collections.Specialized.HybridDictionary>       此方法为 O (`n`) 操作，其中`n`为<xref:System.Collections.Specialized.HybridDictionary.Count%2A>。</xref:System.Collections.Specialized.HybridDictionary.Count%2A>"
  example:
  - "The following code example copies the elements of a <xref:System.Collections.Specialized.HybridDictionary> to an array.  \n  \n [!code-cs[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/csharp/0bfe553c-62f4-44ed-b908-_1.cs)]\n [!code-cpp[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/cpp/0bfe553c-62f4-44ed-b908-_1.cpp)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_CopyTo#1](~/add/codesnippet/visualbasic/0bfe553c-62f4-44ed-b908-_1.vb)]"
  syntax:
    content: public void CopyTo (Array array, int index);
    parameters:
    - id: array
      type: System.Array
      description: "一维<xref:System.Array>的目标<xref:System.Collections.DictionaryEntry>从复制的对象<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。</xref:System.Collections.DictionaryEntry> </xref:System.Array> <xref:System.Array>必须具有从零开始的索引。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "中的从零开始索引`array`复制开始处。"
  overload: System.Collections.Specialized.HybridDictionary.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>array</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>index</code>小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>array</code>是多维的。       -源中的元素的数目<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>大于从的可用空间<code>arrayIndex</code>到目标的末尾<code>array</code>。"
  - type: System.InvalidCastException
    commentId: T:System.InvalidCastException
    description: "源类型<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>无法自动转换为目标的类型<code> array </code>。"
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Count
  id: Count
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Count
  nameWithType: HybridDictionary.Count
  fullName: System.Collections.Specialized.HybridDictionary.Count
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取中包含的键/值对的数目<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_9_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_9_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_9_1.vb)]"
  syntax:
    content: public int Count { get; }
    return:
      type: System.Int32
      description: "中包含的键/值对的数目<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。       检索此属性的值是一个 o （1） 操作。"
  overload: System.Collections.Specialized.HybridDictionary.Count*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator
  id: GetEnumerator
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: GetEnumerator()
  nameWithType: HybridDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "返回<xref:System.Collections.IDictionaryEnumerator>，它循环访问<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。</xref:System.Collections.IDictionaryEnumerator>"
  remarks: "`foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A>  在此位置上，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，<xref:System.Collections.IEnumerator.Current%2A>是不确定的。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，则枚举数将失效且不可恢复，而且其行为是不确定。       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。  若要确保枚举过程中的线程安全性，可以锁定在整个枚举期间的集合。  若要允许访问集合以进行读取和写入的多个线程，则必须实现自己的同步。       此方法为 o （1） 运算。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/m-system.collections.spe_19_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/m-system.collections.spe_19_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/m-system.collections.spe_19_1.vb)]"
  syntax:
    content: public System.Collections.IDictionaryEnumerator GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IDictionaryEnumerator
      description: "An <xref:System.Collections.IDictionaryEnumerator> for the <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>.</xref:System.Collections.IDictionaryEnumerator>"
  overload: System.Collections.Specialized.HybridDictionary.GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize
  id: IsFixedSize
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: IsFixedSize
  nameWithType: HybridDictionary.IsFixedSize
  fullName: System.Collections.Specialized.HybridDictionary.IsFixedSize
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>具有固定的大小。"
  remarks: "<xref:System.Collections.Specialized.HybridDictionary>实现 IsFixedSize 属性，因为它必需的<xref:System.Collections.IDictionary?displayProperty=fullName>接口。</xref:System.Collections.IDictionary?displayProperty=fullName></xref:System.Collections.Specialized.HybridDictionary>       具有固定大小的集合不允许添加或移除元素后的集合在创建，但是允许修改现有元素。       具有固定大小的集合是只是一个集合的包装器防止添加和移除元素;因此，如果对基础集合，包括添加或移除元素，进行更改的固定大小的集合将反映这些更改。       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: public bool IsFixedSize { get; }
    return:
      type: System.Boolean
      description: "此属性始终返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.HybridDictionary.IsFixedSize*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly
  id: IsReadOnly
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: HybridDictionary.IsReadOnly
  fullName: System.Collections.Specialized.HybridDictionary.IsReadOnly
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>是只读的。"
  remarks: "<xref:System.Collections.Specialized.HybridDictionary>实现 IsReadOnly 属性，因为它必需的<xref:System.Collections.IDictionary?displayProperty=fullName>接口。</xref:System.Collections.IDictionary?displayProperty=fullName></xref:System.Collections.Specialized.HybridDictionary>       集合是只读的不允许添加、 移除或修改元素的集合在创建后。       集合是只读的是只是一个集合与防止集合; 进行修改的包装因此，如果对基础集合进行更改，只读集合将反映这些更改。       检索此属性的值是一个 o （1） 操作。"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "此属性始终返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.HybridDictionary.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized
  id: IsSynchronized
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: IsSynchronized
  nameWithType: HybridDictionary.IsSynchronized
  fullName: System.Collections.Specialized.HybridDictionary.IsSynchronized
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>是同步的 （线程安全）。"
  remarks: "<xref:System.Collections.Specialized.HybridDictionary>实现 IsSynchronized 属性，因为它必需的<xref:System.Collections.ICollection?displayProperty=fullName>接口。</xref:System.Collections.ICollection?displayProperty=fullName></xref:System.Collections.Specialized.HybridDictionary>       派生的类可以提供的同步的版本<xref:System.Collections.Specialized.HybridDictionary>使用<xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A>属性。</xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> </xref:System.Collections.Specialized.HybridDictionary>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock the collection using the <xref:System.Collections.Specialized.HybridDictionary.SyncRoot%2A> during the entire enumeration.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/cpp/p-system.collections.spe_5_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/csharp/p-system.collections.spe_5_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/visualbasic/p-system.collections.spe_5_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public bool IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "此属性始终返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Collections.Specialized.HybridDictionary.IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Item(System.Object)
  id: Item(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Item(Object)
  nameWithType: HybridDictionary.Item(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Item(Object)
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取或设置与指定键关联的值。"
  remarks: "此属性提供能够通过使用以下语法访问集合中的特定元素︰ `myCollection[key]`。       你还可以使用项目属性来添加新元素中不存在的键的值设置<xref:System.Collections.Specialized.HybridDictionary>; 例如， `myCollection[&quot;myNonexistentKey&quot;] = myValue`。</xref:System.Collections.Specialized.HybridDictionary> 但是，如果指定的键已存在于<xref:System.Collections.Specialized.HybridDictionary>，设置项目属性将覆盖旧值。</xref:System.Collections.Specialized.HybridDictionary> 与此相反，<xref:System.Collections.Specialized.HybridDictionary.Add%2A>方法不会修改现有元素。</xref:System.Collections.Specialized.HybridDictionary.Add%2A>       密钥不能为`null`，但值可以。 来区分`null`返回因为找不到指定的键和`null`返回指定键的值是因为`null`，使用<xref:System.Collections.Specialized.HybridDictionary.Contains%2A>方法来确定在列表中是否存在的项。</xref:System.Collections.Specialized.HybridDictionary.Contains%2A>       C# 语言使用关键字来定义而不是实现项属性的索引器。 Visual Basic 实现为默认属性，它提供相同的索引功能的项。       检索此属性的值的运算 o （1）;设置属性也是 o （1） 运算。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_27_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_27_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_27_1.vb)]"
  syntax:
    content: public object this[object key] { get; set; }
    parameters:
    - id: key
      type: System.Object
      description: "密钥要获取或设置其值。"
    return:
      type: System.Object
      description: "与指定键关联的值。 如果未找到指定的键，尝试获取它将返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，并尝试将其设置创建一个使用指定的键的新条目。"
  overload: System.Collections.Specialized.HybridDictionary.Item*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Keys
  id: Keys
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Keys
  nameWithType: HybridDictionary.Keys
  fullName: System.Collections.Specialized.HybridDictionary.Keys
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取<xref:System.Collections.ICollection>包含中的键<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。</xref:System.Collections.ICollection>"
  remarks: "中的值的顺序<xref:System.Collections.ICollection>未指定，但它是中的关联值顺序相同<xref:System.Collections.ICollection>返回<xref:System.Collections.Specialized.HybridDictionary.Values%2A>方法。</xref:System.Collections.Specialized.HybridDictionary.Values%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       返回<xref:System.Collections.ICollection>不是静态的副本; 相反，<xref:System.Collections.ICollection>引用回原始<xref:System.Collections.Specialized.HybridDictionary>.</xref:System.Collections.Specialized.HybridDictionary>中的键</xref:System.Collections.ICollection></xref:System.Collections.ICollection> 因此，更改为<xref:System.Collections.Specialized.HybridDictionary>继续才会反映在<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Specialized.HybridDictionary>       检索此属性的值是一个 o （1） 操作。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_20_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_20_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_20_1.vb)]"
  syntax:
    content: public System.Collections.ICollection Keys { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>包含中的键<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.HybridDictionary.Keys*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: HybridDictionary.Remove(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Remove(Object)
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "具有指定键中移除的项<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
  remarks: "如果<xref:System.Collections.Specialized.HybridDictionary>不具有指定键，包含的元素<xref:System.Collections.Specialized.HybridDictionary>保持不变。</xref:System.Collections.Specialized.HybridDictionary> </xref:System.Collections.Specialized.HybridDictionary> 不引发异常。       如果集合已存储<xref:System.Collections.Hashtable>和元素的数目低于为的<xref:System.Collections.Specialized.ListDictionary>，该集合将保持在<xref:System.Collections.Hashtable>以避免复制<xref:System.Collections.Hashtable>回<xref:System.Collections.Specialized.ListDictionary>.</xref:System.Collections.Specialized.ListDictionary></xref:System.Collections.Hashtable>中的元素的开销</xref:System.Collections.Hashtable></xref:System.Collections.Specialized.ListDictionary>的最佳大小</xref:System.Collections.Hashtable>       此方法为 o （1） 运算。"
  example:
  - "The following code example adds to and removes elements from a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/cpp/m-system.collections.spe_0_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/csharp/m-system.collections.spe_0_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_AddRemove#1](~/add/codesnippet/visualbasic/m-system.collections.spe_0_1.vb)]"
  syntax:
    content: public void Remove (object key);
    parameters:
    - id: key
      type: System.Object
      description: "要移除的项的键。"
  overload: System.Collections.Specialized.HybridDictionary.Remove*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.SyncRoot
  id: SyncRoot
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: SyncRoot
  nameWithType: HybridDictionary.SyncRoot
  fullName: System.Collections.Specialized.HybridDictionary.SyncRoot
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取可以用于对访问进行同步的对象<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
  remarks: "派生的类可以提供自己的同步的版本<xref:System.Collections.Specialized.HybridDictionary>使用 SyncRoot 属性。</xref:System.Collections.Specialized.HybridDictionary> 同步代码必须对执行操作的 SyncRoot <xref:System.Collections.Specialized.HybridDictionary>，不是直接对<xref:System.Collections.Specialized.HybridDictionary>.</xref:System.Collections.Specialized.HybridDictionary> </xref:System.Collections.Specialized.HybridDictionary> 这可确保正确地执行操作的从其他对象派生的集合。 具体地说，这样可保持正确的同步，与可能同时对修改其他线程<xref:System.Collections.Specialized.HybridDictionary>对象。</xref:System.Collections.Specialized.HybridDictionary>       枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。"
  example:
  - "The following code example shows how to lock the collection using the SyncRoot during the entire enumeration.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/cpp/p-system.collections.spe_22_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/csharp/p-system.collections.spe_22_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary2#3](~/add/codesnippet/visualbasic/p-system.collections.spe_22_1.vb)]  \n  \n Retrieving the value of this property is an O(1) operation."
  syntax:
    content: public object SyncRoot { get; }
    return:
      type: System.Object
      description: "可以用于对访问进行同步的对象<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。"
  overload: System.Collections.Specialized.HybridDictionary.SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "返回<xref:System.Collections.IEnumerator>，它循环访问<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。</xref:System.Collections.IEnumerator>"
  remarks: "`foreach` C# 语言的语句 (`for each`在 Visual Basic 中) 隐藏了枚举数的复杂性。  因此，使用`foreach`建议，而不是直接操作枚举数。       枚举器可用于读取集合中中的数据，但它们不能用于修改基础集合。       最初，枚举数定位在集合中的第一个元素之前。 <xref:System.Collections.IEnumerator.Reset%2A>此外会回此位置的枚举数。</xref:System.Collections.IEnumerator.Reset%2A> 在此位置，调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</xref:System.Collections.IEnumerator.Current%2A> 因此，你必须调用<xref:System.Collections.IEnumerator.MoveNext%2A>的第一个元素的集合，然后再读取<xref:System.Collections.IEnumerator.Current%2A>.</xref:System.Collections.IEnumerator.Current%2A>的值枚举器向前移动</xref:System.Collections.IEnumerator.MoveNext%2A>       <xref:System.Collections.IEnumerator.Current%2A>返回相同的对象之前<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>称为。</xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.MoveNext%2A></xref:System.Collections.IEnumerator.Current%2A> <xref:System.Collections.IEnumerator.MoveNext%2A>设置<xref:System.Collections.IEnumerator.Current%2A>到下一个元素。</xref:System.Collections.IEnumerator.Current%2A></xref:System.Collections.IEnumerator.MoveNext%2A>       如果<xref:System.Collections.IEnumerator.MoveNext%2A>越过的末尾的集合，枚举数定位在集合中的最后一个元素的后面和<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 当枚举器位于此位置上，后续调用<xref:System.Collections.IEnumerator.MoveNext%2A>还返回`false`。</xref:System.Collections.IEnumerator.MoveNext%2A> 如果最后一次调用到<xref:System.Collections.IEnumerator.MoveNext%2A>返回`false`，则调用<xref:System.Collections.IEnumerator.Current%2A>引发异常。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A> 若要设置<xref:System.Collections.IEnumerator.Current%2A>可以再次，集合的第一个元素调用<xref:System.Collections.IEnumerator.Reset%2A>后, 跟<xref:System.Collections.IEnumerator.MoveNext%2A>.</xref:System.Collections.IEnumerator.MoveNext%2A> </xref:System.Collections.IEnumerator.Reset%2A> </xref:System.Collections.IEnumerator.Current%2A>       只要集合保持不变，枚举数就保持有效。 如果对集合进行更改，如添加、 修改或删除元素，枚举数将失效下, 一个调用<xref:System.Collections.IEnumerator.MoveNext%2A>或<xref:System.Collections.IEnumerator.Reset%2A>引发<xref:System.InvalidOperationException>.</xref:System.InvalidOperationException></xref:System.Collections.IEnumerator.Reset%2A></xref:System.Collections.IEnumerator.MoveNext%2A>到 如果之间修改集合<xref:System.Collections.IEnumerator.MoveNext%2A>和<xref:System.Collections.IEnumerator.Current%2A>，<xref:System.Collections.IEnumerator.Current%2A>返回到，设置的元素，即使枚举数已经无效。</xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.Current%2A> </xref:System.Collections.IEnumerator.MoveNext%2A>       枚举数没有对集合; 独占访问权因此，枚举整个集合本质上不是一个线程安全的过程。 即使某个集合已同步，其他线程仍可以修改集合，这会导致枚举数引发异常。 若要确保枚举过程中的线程安全性，可以在整个枚举期间锁定集合，或者捕获由其他线程进行的更改导致的异常。       此方法为 o （1） 运算。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/cfcf8780-64b5-47b8-8217-_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/cfcf8780-64b5-47b8-8217-_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/cfcf8780-64b5-47b8-8217-_1.vb)]"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "An <xref:System.Collections.IEnumerator> for the <xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;></xref>.</xref:System.Collections.IEnumerator>"
  overload: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Collections.Specialized.HybridDictionary.Values
  id: Values
  parent: System.Collections.Specialized.HybridDictionary
  langs:
  - csharp
  name: Values
  nameWithType: HybridDictionary.Values
  fullName: System.Collections.Specialized.HybridDictionary.Values
  type: Property
  assemblies:
  - System
  namespace: System.Collections.Specialized
  summary: "获取<xref:System.Collections.ICollection>包含中的值<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。</xref:System.Collections.ICollection>"
  remarks: "中的值的顺序<xref:System.Collections.ICollection>未指定，但它是中的关联键顺序相同<xref:System.Collections.ICollection>返回<xref:System.Collections.Specialized.HybridDictionary.Keys%2A>方法。</xref:System.Collections.Specialized.HybridDictionary.Keys%2A> </xref:System.Collections.ICollection> </xref:System.Collections.ICollection>       返回<xref:System.Collections.ICollection>不是静态的副本; 相反，<xref:System.Collections.ICollection>引用回原始<xref:System.Collections.Specialized.HybridDictionary>.</xref:System.Collections.Specialized.HybridDictionary>中的值</xref:System.Collections.ICollection></xref:System.Collections.ICollection> 因此，更改为<xref:System.Collections.Specialized.HybridDictionary>继续才会反映在<xref:System.Collections.ICollection>.</xref:System.Collections.ICollection> </xref:System.Collections.Specialized.HybridDictionary>       检索此属性的值是一个 o （1） 操作。"
  example:
  - "The following code example enumerates the elements of a <xref:System.Collections.Specialized.HybridDictionary>.  \n  \n [!code-cpp[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/cpp/p-system.collections.spe_14_1.cpp)]\n [!code-cs[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/csharp/p-system.collections.spe_14_1.cs)]\n [!code-vb[System.Collections.Specialized.HybridDictionary_Enumerator#1](~/add/codesnippet/visualbasic/p-system.collections.spe_14_1.vb)]"
  syntax:
    content: public System.Collections.ICollection Values { get; }
    return:
      type: System.Collections.ICollection
      description: "<xref:System.Collections.ICollection>包含中的值<xref href=&quot;System.Collections.Specialized.HybridDictionary&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Collections.Specialized.HybridDictionary.Values*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidCastException
  isExternal: true
  name: System.InvalidCastException
- uid: System.Collections.Specialized.HybridDictionary.#ctor
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary()
  nameWithType: HybridDictionary.HybridDictionary()
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary()
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Boolean)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary(Boolean)
  nameWithType: HybridDictionary.HybridDictionary(Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary(Int32)
  nameWithType: HybridDictionary.HybridDictionary(Int32)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Specialized.HybridDictionary.#ctor(System.Int32,System.Boolean)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary(Int32,Boolean)
  nameWithType: HybridDictionary.HybridDictionary(Int32,Boolean)
  fullName: System.Collections.Specialized.HybridDictionary.HybridDictionary(Int32,Boolean)
- uid: System.Collections.Specialized.HybridDictionary.Add(System.Object,System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Add(Object,Object)
  nameWithType: HybridDictionary.Add(Object,Object)
  fullName: System.Collections.Specialized.HybridDictionary.Add(Object,Object)
- uid: System.Collections.Specialized.HybridDictionary.Clear
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Clear()
  nameWithType: HybridDictionary.Clear()
  fullName: System.Collections.Specialized.HybridDictionary.Clear()
- uid: System.Collections.Specialized.HybridDictionary.Contains(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Contains(Object)
  nameWithType: HybridDictionary.Contains(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Contains(Object)
- uid: System.Collections.Specialized.HybridDictionary.CopyTo(System.Array,System.Int32)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: CopyTo(Array,Int32)
  nameWithType: HybridDictionary.CopyTo(Array,Int32)
  fullName: System.Collections.Specialized.HybridDictionary.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Collections.Specialized.HybridDictionary.Count
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Count
  nameWithType: HybridDictionary.Count
  fullName: System.Collections.Specialized.HybridDictionary.Count
- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: GetEnumerator()
  nameWithType: HybridDictionary.GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.GetEnumerator()
- uid: System.Collections.IDictionaryEnumerator
  parent: System.Collections
  isExternal: true
  name: IDictionaryEnumerator
  nameWithType: IDictionaryEnumerator
  fullName: System.Collections.IDictionaryEnumerator
- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: HybridDictionary.IsFixedSize
  fullName: System.Collections.Specialized.HybridDictionary.IsFixedSize
- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: HybridDictionary.IsReadOnly
  fullName: System.Collections.Specialized.HybridDictionary.IsReadOnly
- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: HybridDictionary.IsSynchronized
  fullName: System.Collections.Specialized.HybridDictionary.IsSynchronized
- uid: System.Collections.Specialized.HybridDictionary.Item(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Item(Object)
  nameWithType: HybridDictionary.Item(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Item(Object)
- uid: System.Collections.Specialized.HybridDictionary.Keys
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Keys
  nameWithType: HybridDictionary.Keys
  fullName: System.Collections.Specialized.HybridDictionary.Keys
- uid: System.Collections.ICollection
  parent: System.Collections
  isExternal: true
  name: ICollection
  nameWithType: ICollection
  fullName: System.Collections.ICollection
- uid: System.Collections.Specialized.HybridDictionary.Remove(System.Object)
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Remove(Object)
  nameWithType: HybridDictionary.Remove(Object)
  fullName: System.Collections.Specialized.HybridDictionary.Remove(Object)
- uid: System.Collections.Specialized.HybridDictionary.SyncRoot
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: HybridDictionary.SyncRoot
  fullName: System.Collections.Specialized.HybridDictionary.SyncRoot
- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Collections.Specialized.HybridDictionary.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Collections.Specialized.HybridDictionary.Values
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Values
  nameWithType: HybridDictionary.Values
  fullName: System.Collections.Specialized.HybridDictionary.Values
- uid: System.Collections.Specialized.HybridDictionary.#ctor*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: HybridDictionary
  nameWithType: HybridDictionary.HybridDictionary
- uid: System.Collections.Specialized.HybridDictionary.Add*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Add
  nameWithType: HybridDictionary.Add
- uid: System.Collections.Specialized.HybridDictionary.Clear*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Clear
  nameWithType: HybridDictionary.Clear
- uid: System.Collections.Specialized.HybridDictionary.Contains*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Contains
  nameWithType: HybridDictionary.Contains
- uid: System.Collections.Specialized.HybridDictionary.CopyTo*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: CopyTo
  nameWithType: HybridDictionary.CopyTo
- uid: System.Collections.Specialized.HybridDictionary.Count*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Count
  nameWithType: HybridDictionary.Count
- uid: System.Collections.Specialized.HybridDictionary.GetEnumerator*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: GetEnumerator
  nameWithType: HybridDictionary.GetEnumerator
- uid: System.Collections.Specialized.HybridDictionary.IsFixedSize*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsFixedSize
  nameWithType: HybridDictionary.IsFixedSize
- uid: System.Collections.Specialized.HybridDictionary.IsReadOnly*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsReadOnly
  nameWithType: HybridDictionary.IsReadOnly
- uid: System.Collections.Specialized.HybridDictionary.IsSynchronized*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: IsSynchronized
  nameWithType: HybridDictionary.IsSynchronized
- uid: System.Collections.Specialized.HybridDictionary.Item*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Item
  nameWithType: HybridDictionary.Item
- uid: System.Collections.Specialized.HybridDictionary.Keys*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Keys
  nameWithType: HybridDictionary.Keys
- uid: System.Collections.Specialized.HybridDictionary.Remove*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Remove
  nameWithType: HybridDictionary.Remove
- uid: System.Collections.Specialized.HybridDictionary.SyncRoot*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: SyncRoot
  nameWithType: HybridDictionary.SyncRoot
- uid: System.Collections.Specialized.HybridDictionary.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: HybridDictionary.System.Collections.IEnumerable.GetEnumerator
- uid: System.Collections.Specialized.HybridDictionary.Values*
  parent: System.Collections.Specialized.HybridDictionary
  isExternal: false
  name: Values
  nameWithType: HybridDictionary.Values
