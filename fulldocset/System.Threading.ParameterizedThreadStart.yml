### YamlMime:ManagedReference
items:
- uid: System.Threading.ParameterizedThreadStart
  id: ParameterizedThreadStart
  langs:
  - csharp
  name: ParameterizedThreadStart
  nameWithType: ParameterizedThreadStart
  fullName: System.Threading.ParameterizedThreadStart
  type: Delegate
  summary: "表示在执行的方法<xref href=&quot;System.Threading.Thread&quot;> </xref>。"
  remarks: "创建一个托管的线程时，由表示的线程执行的方法:-<xref:System.Threading.ThreadStart>委托传递给<xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName>构造函数。</xref:System.Threading.Thread.%23ctor%28System.Threading.ThreadStart%29?displayProperty=fullName> </xref:System.Threading.ThreadStart>  该操作没有参数，将返回的任何方法`void`在 C# 或`Sub`Visual Basic 中的过程可以表示该委托。      -传递到 a ParameterizedThreadStart 委托<xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName>构造函数。</xref:System.Threading.Thread.%23ctor%28System.Threading.ParameterizedThreadStart%2CSystem.Int32%29?displayProperty=fullName> 只有一个参数类型的任何方法<xref:System.Object>并且返回 void 在 C# 或 Visual Basic 中的 Sub 过程可以表示该委托。</xref:System.Object>       线程不会开始执行之前<xref:System.Threading.Thread.Start%2A?displayProperty=fullName>调用方法。</xref:System.Threading.Thread.Start%2A?displayProperty=fullName> <xref:System.Threading.ThreadStart>或的线程上调用 ParameterizedThreadStart 委托和委托所表示的方法的第一个行处开始执行。</xref:System.Threading.ThreadStart> 对于 ParameterizedThreadStart 委托，该对象传递给<xref:System.Threading.Thread.Start%28System.Object%29>方法传递给委托。</xref:System.Threading.Thread.Start%28System.Object%29>      1> [!NOTE]&1;> Visual Basic 和 C# 用户可以省略<xref:System.Threading.ThreadStart>或 ParameterizedThreadStart 委托构造函数创建线程时。</xref:System.Threading.ThreadStart> 在 Visual Basic 中，使用`AddressOf`运算符传递到你的方法时<xref:System.Threading.Thread.%23ctor%2A>构造函数; 例如， `Dim t As New Thread(AddressOf ThreadProc)`。</xref:System.Threading.Thread.%23ctor%2A> 在 C# 中，只需指定线程过程的名称。 编译器选择正确的委托构造函数。      1> [!NOTE]&1;> ParameterizedThreadStart 委托的实例方法是在 c + + 中创建的构造函数的第一个参数时，实例变量。 对于静态方法，构造函数的第一个参数为零。 对于静态方法，委托构造函数只需要一个参数︰ 回调方法中，由类名称限定的地址。       ParameterizedThreadStart 委托和<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>方法重载进行轻松地将数据传递给一个线程的过程，但这种技术是不安全的类型，因为可以将任何对象传递到<xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName>。</xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> </xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=fullName> 若要将数据传递给一个线程的过程更可靠方法是放入一个辅助对象的线程的过程和数据字段。 有关详细信息，请参阅[创建线程并在启动时传递数据](~/add/includes/ajax-current-ext-md.md)。       ParameterizedThreadStart 委托支持单个参数。 通过进行以下情况之一，该参数传递给 ParameterizedThreadStart 多个数据项:-的数组。      的如果所有的数据项均为相同类型集合类型。      -一个元组类型，例如<xref:System.Tuple%602>或<xref:System.Tuple%604>。</xref:System.Tuple%604> </xref:System.Tuple%602>"
  example:
  - "The following code example uses a ParameterizedThreadStart delegate with to execute a static method and an instance method. The first ParameterizedThreadStart delegate is represented by the static `DoWork` method and the second is represented by the instance `DoMoreWork` method. Both methods match the ParameterizedThreadStart delegate signature; that is, they have a single parameter of type <xref:System.Object> and don't return a value.  \n  \n> [!NOTE]\n>  The Visual Basic and C# compilers infer the ParameterizedThreadStart delegate from the signatures of the `DoWork` and `DoMoreWork` methods, and call the correct constructor. Thus, there is no explicit constructor call in the code.  \n  \n [!code-cpp[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/cpp/t-system.threading.param_1.cpp)]\n [!code-vb[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/visualbasic/t-system.threading.param_1.vb)]\n [!code-cs[System.Threading.ParameterizedThreadStart#1](~/add/codesnippet/csharp/t-system.threading.param_1.cs)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(false)]

      public delegate void ParameterizedThreadStart(object obj);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
