### YamlMime:ManagedReference
items:
- uid: System.Windows.VisualState
  id: VisualState
  children:
  - System.Windows.VisualState.#ctor
  - System.Windows.VisualState.Name
  - System.Windows.VisualState.Storyboard
  langs:
  - csharp
  name: VisualState
  nameWithType: VisualState
  fullName: System.Windows.VisualState
  type: Class
  summary: "当处于特定状态时表示控件的可视外观。"
  remarks: "VisualState 指定控件时处于某个特定状态的外观。 例如，当<xref:System.Windows.Controls.Button>是按下，其边框可能是不同于普通的颜色。</xref:System.Windows.Controls.Button>  VisualState 类具有<xref:System.Windows.VisualState.Storyboard%2A>属性，可更改控件的外观。</xref:System.Windows.VisualState.Storyboard%2A> 当控制权交给由指定的状态<xref:System.Windows.VisualState.Name%2A?displayProperty=fullName>属性，<xref:System.Windows.VisualState.Storyboard%2A>开始。</xref:System.Windows.VisualState.Storyboard%2A> </xref:System.Windows.VisualState.Name%2A?displayProperty=fullName> 当控件退出状态，<xref:System.Windows.VisualState.Storyboard%2A>停止。</xref:System.Windows.VisualState.Storyboard%2A>       <xref:System.Windows.VisualStateGroup.States%2A?displayProperty=fullName>属性包含 VisualState 对象。</xref:System.Windows.VisualStateGroup.States%2A?displayProperty=fullName> <xref:System.Windows.VisualStateGroup>对象添加到<xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=fullName>的附加属性定义的时间为<xref:System.Windows.FrameworkElement>。</xref:System.Windows.FrameworkElement> </xref:System.Windows.VisualStateManager.VisualStateGroups%2A?displayProperty=fullName></xref:System.Windows.VisualStateGroup> 你可以将 VisualState 对象添加到任何<xref:System.Windows.FrameworkElement>，但它们通常是使用中<xref:System.Windows.Controls.ControlTemplate>的一种<xref:System.Windows.Controls.Control>。</xref:System.Windows.Controls.Control> </xref:System.Windows.Controls.ControlTemplate> </xref:System.Windows.FrameworkElement> 有关如何创建<xref:System.Windows.Controls.ControlTemplate>和 VisualState 对象的现有控件，请参阅[通过创建 ControlTemplate 自定义现有的控件的外观](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.Controls.ControlTemplate> 有关使用 VisualState 示例对象之外<xref:System.Windows.Controls.ControlTemplate>，请参阅<xref:System.Windows.VisualStateManager>类。</xref:System.Windows.VisualStateManager> </xref:System.Windows.Controls.ControlTemplate>"
  example:
  - "The following example creates a <xref:System.Windows.VisualStateGroup> in the <xref:System.Windows.Controls.ControlTemplate> of a <xref:System.Windows.Controls.Button> called `CommonStates` and adds VisualState objects for the states, `Normal`, `Pressed`, and `MouseOver`. The <xref:System.Windows.Controls.Button> also defines a state called `Disabled` that is in the `CommonStates`<xref:System.Windows.VisualStateGroup>, but the example omits it for brevity. For the entire example, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md).  \n  \n [!code-xml[VSMButtonTemplate#10](~/add/codesnippet/xaml/vsmbuttontemplate/buttonstages.xaml#10)]"
  syntax:
    content: >-
      [System.Windows.Markup.ContentProperty("Storyboard")]

      [System.Windows.Markup.RuntimeNameProperty("Name")]

      public class VisualState : System.Windows.DependencyObject
  inheritance:
  - System.Object
  - System.Windows.Threading.DispatcherObject
  - System.Windows.DependencyObject
  implements: []
  inheritedMembers:
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.ClearValue(System.Windows.DependencyPropertyKey)
  - System.Windows.DependencyObject.CoerceValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.DependencyObjectType
  - System.Windows.DependencyObject.Equals(System.Object)
  - System.Windows.DependencyObject.GetHashCode
  - System.Windows.DependencyObject.GetLocalValueEnumerator
  - System.Windows.DependencyObject.GetValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.InvalidateProperty(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.IsSealed
  - System.Windows.DependencyObject.OnPropertyChanged(System.Windows.DependencyPropertyChangedEventArgs)
  - System.Windows.DependencyObject.ReadLocalValue(System.Windows.DependencyProperty)
  - System.Windows.DependencyObject.SetCurrentValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyProperty,System.Object)
  - System.Windows.DependencyObject.SetValue(System.Windows.DependencyPropertyKey,System.Object)
  - System.Windows.DependencyObject.ShouldSerializeProperty(System.Windows.DependencyProperty)
  - System.Windows.Threading.DispatcherObject.CheckAccess
  - System.Windows.Threading.DispatcherObject.Dispatcher
  - System.Windows.Threading.DispatcherObject.VerifyAccess
  platform:
  - net462
- uid: System.Windows.VisualState.#ctor
  id: '#ctor'
  parent: System.Windows.VisualState
  langs:
  - csharp
  name: VisualState()
  nameWithType: VisualState.VisualState()
  fullName: System.Windows.VisualState.VisualState()
  type: Constructor
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "初始化的新实例<xref href=&quot;System.Windows.VisualState&quot;></xref>类。"
  syntax:
    content: public VisualState ();
    parameters: []
  overload: System.Windows.VisualState.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.VisualState.Name
  id: Name
  parent: System.Windows.VisualState
  langs:
  - csharp
  name: Name
  nameWithType: VisualState.Name
  fullName: System.Windows.VisualState.Name
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置的名称<xref href=&quot;System.Windows.VisualState&quot;> </xref>。"
  remarks: "指定通过将传递<xref:System.Windows.VisualState>到<xref:System.Windows.VisualStateManager>。</xref:System.Windows.VisualStateManager></xref:System.Windows.VisualState>程序的名称应输入元素的可视状态       当<xref:System.Windows.Controls.Control>使用<xref:System.Windows.VisualStateManager>中<xref:System.Windows.Controls.ControlTemplate>，控件作者应指定的<xref:System.Windows.VisualState>对象控件预期中找到其<xref:System.Windows.Controls.ControlTemplate>置于<xref:System.Windows.TemplateVisualStateAttribute>上其类签名。</xref:System.Windows.TemplateVisualStateAttribute> </xref:System.Windows.Controls.ControlTemplate> </xref:System.Windows.VisualState> </xref:System.Windows.Controls.ControlTemplate> </xref:System.Windows.VisualStateManager> </xref:System.Windows.Controls.Control> <xref:System.Windows.Controls.ControlTemplate>作者定义新<xref:System.Windows.VisualState>对象，并将名称属性设置为指定的值<xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=fullName>属性。</xref:System.Windows.TemplateVisualStateAttribute.Name%2A?displayProperty=fullName> </xref:System.Windows.VisualState></xref:System.Windows.Controls.ControlTemplate>       若要查找包含的控件的可视状态的名称[!INCLUDE[TLA2#tla_winclient](~/add/includes/tla2sharptla-winclient-md.md)]，请参阅[控件样式和模板](~/add/includes/ajax-current-ext-md.md)。 有关如何创建<xref:System.Windows.Controls.ControlTemplate>和<xref:System.Windows.VisualState>对象的现有控件，请参阅[通过创建 ControlTemplate 自定义现有的控件的外观](~/add/includes/ajax-current-ext-md.md)。</xref:System.Windows.VisualState> </xref:System.Windows.Controls.ControlTemplate>"
  example:
  - "The following example creates a <xref:System.Windows.VisualStateGroup> in the <xref:System.Windows.Controls.ControlTemplate> of a <xref:System.Windows.Controls.Button> called `CommonStates` and adds <xref:System.Windows.VisualState> objects for the states, `Normal`, `Pressed`, and `MouseOver`. The <xref:System.Windows.Controls.Button> also defines a state called `Disabled` that is in the `CommonStates`<xref:System.Windows.VisualStateGroup>, but the example omits it for brevity. For the entire example, see [Customizing the Appearance of an Existing Control by Creating a ControlTemplate](../Topic/Customizing%20the%20Appearance%20of%20an%20Existing%20Control%20by%20Creating%20a%20ControlTemplate.md).  \n  \n [!code-xml[VSMButtonTemplate#10](~/add/codesnippet/xaml/vsmbuttontemplate/buttonstages.xaml#10)]"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "名称<xref href=&quot;System.Windows.VisualState&quot;> </xref>。"
  overload: System.Windows.VisualState.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.VisualState.Storyboard
  id: Storyboard
  parent: System.Windows.VisualState
  langs:
  - csharp
  name: Storyboard
  nameWithType: VisualState.Storyboard
  fullName: System.Windows.VisualState.Storyboard
  type: Property
  assemblies:
  - PresentationFramework
  namespace: System.Windows
  summary: "获取或设置<xref href=&quot;System.Windows.Media.Animation.Storyboard&quot;></xref>中表示的状态时，它定义控件的外观<xref href=&quot;System.Windows.VisualState&quot;> </xref>。"
  remarks: "当控制权交给由指定的状态<xref:System.Windows.VisualState.Name%2A?displayProperty=fullName>属性，情节提要开始。</xref:System.Windows.VisualState.Name%2A?displayProperty=fullName> 当控件退出该状态时，将停止情节提要。"
  example:
  - "The following example creates a simple <xref:System.Windows.Controls.ControlTemplate> for a <xref:System.Windows.Controls.Button> that contains one <xref:System.Windows.Controls.Grid>.  The <xref:System.Windows.VisualState> called `MouseOver` has a Storyboard that changes the color of the <xref:System.Windows.Controls.Grid> from green to red when the user puts the mouse over the <xref:System.Windows.Controls.Button>.  The <xref:System.Windows.VisualState> called `Normal` is included so that when the user moves the mouse off the button, the <xref:System.Windows.Controls.Grid> returns to green.  \n  \n [!code-xml[VSMButtonTemplate#11](~/add/codesnippet/xaml/vsmbuttontemplate/window1.xaml#11)]"
  syntax:
    content: public System.Windows.Media.Animation.Storyboard Storyboard { get; set; }
    return:
      type: System.Windows.Media.Animation.Storyboard
      description: "定义控件的外观，由表示的状态中时情节提要<xref href=&quot;System.Windows.VisualState&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.VisualState.Storyboard*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.DependencyObject
  isExternal: false
  name: System.Windows.DependencyObject
- uid: System.Windows.VisualState.#ctor
  parent: System.Windows.VisualState
  isExternal: false
  name: VisualState()
  nameWithType: VisualState.VisualState()
  fullName: System.Windows.VisualState.VisualState()
- uid: System.Windows.VisualState.Name
  parent: System.Windows.VisualState
  isExternal: false
  name: Name
  nameWithType: VisualState.Name
  fullName: System.Windows.VisualState.Name
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.VisualState.Storyboard
  parent: System.Windows.VisualState
  isExternal: false
  name: Storyboard
  nameWithType: VisualState.Storyboard
  fullName: System.Windows.VisualState.Storyboard
- uid: System.Windows.Media.Animation.Storyboard
  parent: System.Windows.Media.Animation
  isExternal: false
  name: Storyboard
  nameWithType: Storyboard
  fullName: System.Windows.Media.Animation.Storyboard
- uid: System.Windows.VisualState.#ctor*
  parent: System.Windows.VisualState
  isExternal: false
  name: VisualState
  nameWithType: VisualState.VisualState
- uid: System.Windows.VisualState.Name*
  parent: System.Windows.VisualState
  isExternal: false
  name: Name
  nameWithType: VisualState.Name
- uid: System.Windows.VisualState.Storyboard*
  parent: System.Windows.VisualState
  isExternal: false
  name: Storyboard
  nameWithType: VisualState.Storyboard
