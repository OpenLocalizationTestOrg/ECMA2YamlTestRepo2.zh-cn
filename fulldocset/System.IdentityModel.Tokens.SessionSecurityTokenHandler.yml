### YamlMime:ManagedReference
items:
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  id: SessionSecurityTokenHandler
  children:
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  - System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  langs:
  - csharp
  name: SessionSecurityTokenHandler
  nameWithType: SessionSecurityTokenHandler
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  type: Class
  summary: "A <xref href=&quot;System.IdentityModel.Tokens.SecurityTokenHandler&quot;> </xref> ，用于处理类型的安全令牌<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  remarks: "The SessionSecurityTokenHandler class serializes, deserializes, and validates session tokens. Session tokens are tokens of type <xref:System.IdentityModel.Tokens.SessionSecurityToken>. The SessionSecurityTokenHandler class serializes the tokens to and from cookie format. By default, the class serializes tokens into WS-Secure Conversation Feb2005 or WS-Secure Conversation 1.3 `<wsc:SecurityContextToken>` elements. Session tokens are used by the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> (WSFAM) and the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) to store information about a session, this is primarily the <xref:System.Security.Claims.ClaimsPrincipal> associated with the authenticated user and the session start and expiration times.  \n  \n In passive scenarios, the <xref:System.IdentityModel.Services.WSFederationAuthenticationModule> calls into the <xref:System.IdentityModel.Services.SessionAuthenticationModule> (SAM) from the authentication pipeline to create a session token from the <xref:System.Security.Claims.ClaimsPrincipal> that represents the authenticated user. The SAM uses its configured SessionSecurityTokenHandler to create the token and to serialize it into a cookie (and to deserialize the token from a cookie on subsequent requests). The SAM uses an instance of its configured <xref:System.IdentityModel.Services.CookieHandler> class to write the cookie back to the HTTP Response. This cookie is then returned to the client and on subsequent requests the client can present the cookie rather than making a round trip back to the identity provider to re-obtain a security token. For more information about how sessions operate with WIF, see [WIF Session Management](~/add/includes/ajax-current-ext-md.md).  \n  \n> [!NOTE]\n>  The \\<securityTokenHandlers> configuration element can be used to specify a SessionSecurityTokenHandler that has the responsibility for securing the application’s sessions. Developers should use caution when changing this configuration setting, as a misconfigured system could result in application compromise. For example, specifying a derived  HYPERLINK \"http://msdn.microsoft.com/en-us/library/hh193426%28v=vs.110%29.aspx\" \\t \"_blank\" SessionSecurityTokenHandler and passing an empty Transforms (CookieTransform) collection to the base, would result in the users identity being serialized into a cookie that was not protected. This could allow an attacker to modify the identity and therefore change access privileges.  \n  \n If the session token is in reference mode, that is, its <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> property is `true`, the session token handler only serializes properties of the session token that are needed to regenerate its key in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>. In the default case, the <xref:System.IdentityModel.Tokens.SessionSecurityTokenCacheKey> class is used to represent cache keys, and the token handler writes the <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName> and <xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName> properties of the token. If the session token is not in reference mode, that is, the <xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> property is `false`, then, in addition to the properties mentioned previously, the handler invokes the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method on a byte array serialized from the token and stores the resulting value in the cookie as well. For more details about how the token is serialized, see the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName> method.  \n  \n The <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> property gets the list of transforms that are applied to the session token in the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> method. All transforms derive from the <xref:System.IdentityModel.CookieTransform> class. In the default case the <xref:System.IdentityModel.DeflateCookieTransform> and the <xref:System.IdentityModel.ProtectedDataCookieTransform> are applied. The <xref:System.IdentityModel.ProtectedDataCookieTransform> uses the Data Protection API (DPAPI) to protect the cookie material. DPAPI uses a key that is specific to the computer on which it is running in its protection algorithms. For this reason, the default session token handler is not usable in Web farm scenarios because, in such scenarios, tokens written on one computer may need to be read on another computer. You can use many strategies to circumvent this issue. For example, you can:  \n  \n-   Replace the default SessionSecurityTokenHandler with the <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler>. The <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> enables you to specify signing and encryption keys under the ASP.NET `<machineKey>` element in the configuration file.  \n  \n-   Provide a handler for the <xref:System.IdentityModel.Services.FederatedAuthentication.FederationConfigurationCreated?displayProperty=fullName> event in the global.asax.cs file and replace the default session token handler with an instance of SessionSecurityTokenHandler that has a list of transforms that includes the <xref:System.IdentityModel.RsaSignatureCookieTransform> and the <xref:System.IdentityModel.RsaEncryptionCookieTransform>. You can create the new instance by invoking one of the constructors that takes a list of transforms.  \n  \n-   Derive a custom transform from the <xref:System.IdentityModel.CookieTransform> base class and use the method above to include it in the list of transforms to be applied.  \n  \n-   Derive a custom token handler from SessionSecurityTokenHandler and implement your own mechanism.  \n  \n For more information about using sessions in Web farm scenarios, see [WIF and Web Farms](~/add/includes/ajax-current-ext-md.md).  \n  \n The SessionSecurityTokenHandler is included in the default token handler collection; however, you can replace it with a custom session token handler by first specifying a [\\&lt;remove\\&gt;](../Topic/%3Cremove%3E.md) element under the [\\&lt;securityTokenHandlers\\&gt;](../Topic/%3CsecurityTokenHandlers%3E.md) element to remove the default handler from the collection and then adding your custom token handler using the [\\&lt;add\\&gt;](../Topic/%3Cadd%3E.md) element. By default, you can specify the default token lifetime by including the [\\&lt;sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md) element under the `<add>` element. You can design a custom token handler to take custom configuration elements under the `<add>` element by overriding the <xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A> method to provide the logic to process them."
  example:
  - "The following XML shows how to replace the default session security token handler in a token handler collection with an instance of the <xref:System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler> class in configuration.  \n  \n```xml  \n<securityTokenHandlers>  \n  <remove type=\"System.IdentityModel.Tokens.SessionSecurityTokenHandler, System.IdentityModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />  \n  <add type=\"System.IdentityModel.Services.Tokens.MachineKeySessionSecurityTokenHandler, System.IdentityModel.Services, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089\" />  \n</securityTokenHandlers>  \n```"
  syntax:
    content: 'public class SessionSecurityTokenHandler : System.IdentityModel.Tokens.SecurityTokenHandler'
  inheritance:
  - System.Object
  - System.IdentityModel.Tokens.SecurityTokenHandler
  implements: []
  inheritedMembers:
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.CanWriteKeyIdentifierClause(System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.Configuration
  - System.IdentityModel.Tokens.SecurityTokenHandler.ContainingCollection
  - System.IdentityModel.Tokens.SecurityTokenHandler.CreateSecurityTokenReference(System.IdentityModel.Tokens.SecurityToken,System.Boolean)
  - System.IdentityModel.Tokens.SecurityTokenHandler.DetectReplayedToken(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadKeyIdentifierClause(System.Xml.XmlReader)
  - System.IdentityModel.Tokens.SecurityTokenHandler.ReadToken(System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationFailure(System.IdentityModel.Tokens.SecurityToken,System.String)
  - System.IdentityModel.Tokens.SecurityTokenHandler.TraceTokenValidationSuccess(System.IdentityModel.Tokens.SecurityToken)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteKeyIdentifierClause(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityKeyIdentifierClause)
  - System.IdentityModel.Tokens.SecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SecurityToken)
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  id: '#ctor'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler()
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "初始化的新实例<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>类，该类使用默认 cookie 转换和令牌的生存期。"
  remarks: "<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>和<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>属性初始化为<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime>和<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms>。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public SessionSecurityTokenHandler ();
    parameters: []
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "初始化的新实例<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>类，该类使用指定的 cookie 转换。"
  remarks: "<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>属性初始化为<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime>.</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> transforms);
    parameters:
    - id: transforms
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "要在编码或解码 cookie 时应用转换。 集<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>属性。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>transforms</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  id: '#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)'
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  type: Constructor
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "初始化的新实例<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler&quot;></xref>类，该类使用指定的 cookie 转换和令牌生存期。"
  syntax:
    content: public SessionSecurityTokenHandler (System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> transforms, TimeSpan tokenLifetime);
    parameters:
    - id: transforms
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "要在编码或解码 cookie 时应用转换。 集<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>属性。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
    - id: tokenLifetime
      type: System.TimeSpan
      description: "默认令牌生存期。 集<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*>属性。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>transforms</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>tokenLifetime</code>小于或等于&lt;xref:System.TimeSpan.Zero?displayProperty=fullName&gt;。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  id: ApplyTransforms(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ApplyTransforms(Byte[],Boolean)
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "将应用指定的转换<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>属性来进行编码或解码指定的 cookie。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  remarks: "当编码 cookie 转换中出现的顺序应用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>属性。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 如果解码 cookie，则会按相反的顺序进行应用。       从调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>和[qualifyHint = False & 自动升级 = True](~/add/includes/ajax-current-ext-md.md)方法进行编码和解码 cookie 材料。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: protected virtual byte[] ApplyTransforms (byte[] cookie, bool outbound);
    parameters:
    - id: cookie
      type: System.Byte[]
      description: "将转换的 cookie。"
    - id: outbound
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果进行编码后应 cookie;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果 cookie 应进行解码。"
    return:
      type: System.Byte[]
      description: "已编码或解码的 cookie。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>属性是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  id: CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "返回一个值，该值指示是否将读取器定位在<xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;></xref>元素。"
  syntax:
    content: public override bool CanReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>通过传入<xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>。</xref:System.Xml.XmlReader> 读取器应位于<xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;></xref>元素。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果读取器指向<xref uid=&quot;langword_csharp_&lt;wsc:SecurityContextToken&gt;&quot; name=&quot;&lt;wsc:SecurityContextToken&gt;&quot; href=&quot;&quot;></xref>元素; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  id: CanValidateToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取一个值，该值指示此处理程序是否支持验证的类型的令牌<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  syntax:
    content: public override bool CanValidateToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果处理程序支持的类型的令牌验证<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  id: CanWriteToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取一个值，该值指示此处理程序是否可以编写类型的令牌<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  syntax:
    content: public override bool CanWriteToken { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果处理程序可以编写类型的令牌<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  id: CookieElementName
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取 cookie 元素的名称。"
  remarks: "在使用此属性<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>和<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A>方法，以确定在其下编码令牌材料应写入或读取的元素。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: public virtual string CookieElementName { get; }
    return:
      type: System.String
      description: "Cookie 元素的名称。 默认值元素名称是&quot;Cookie&quot;。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  id: CookieNamespace
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取 cookie 元素的命名空间。"
  remarks: "在使用此属性<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>和<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A>方法，以确定在其下编码令牌材料应写入或读取的元素的命名空间。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%2A>"
  syntax:
    content: public virtual string CookieNamespace { get; }
    return:
      type: System.String
      description: "Cookie 元素的命名空间。 默认命名空间为&quot;http://schemas.microsoft.com/ws/2006/05/security&quot;。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  id: CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "创建<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>基于令牌的有效期的指定的声明主体和时间范围。"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SessionSecurityToken CreateSessionSecurityToken (System.Security.Claims.ClaimsPrincipal principal, string context, string endpointId, DateTime validFrom, DateTime validTo);
    parameters:
    - id: principal
      type: System.Security.Claims.ClaimsPrincipal
      description: "声明主体中。"
    - id: context
      type: System.String
      description: "调用方定义的上下文字符串。"
    - id: endpointId
      type: System.String
      description: "终结点的作用范围令牌的标识符。"
    - id: validFrom
      type: System.DateTime
      description: "令牌生效时间即时。"
    - id: validTo
      type: System.DateTime
      description: "时间点之后令牌将不再有效。"
    return:
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "已创建的会话安全令牌。 新的会话令牌上的属性将根据指定的参数。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>principal</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>属性是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  id: CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "创建基于指定的令牌描述符的安全令牌。"
  remarks: '创建并返回会话安全令牌的令牌描述符中使用以下属性︰ <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=fullName>，和<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=fullName>。</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A?displayProperty=fullName> 如果<xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=fullName>属性设置`true`上指定的令牌处理程序配置<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A>属性，从创建的启动上下文<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=fullName>属性，保存在会话令牌。</xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Token%2A?displayProperty=fullName> </xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration%2A> </xref:System.IdentityModel.Tokens.SecurityTokenHandlerConfiguration.SaveBootstrapContext%2A?displayProperty=fullName>'
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken CreateToken (System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);
    parameters:
    - id: tokenDescriptor
      type: System.IdentityModel.Tokens.SecurityTokenDescriptor
      description: "从中创建令牌令牌描述符。"
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "已创建的安全令牌。 这将是实例<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>tokenDescriptor</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>属性是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  id: DefaultCookieTransforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultCookieTransforms
  nameWithType: SessionSecurityTokenHandler.DefaultCookieTransforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  type: Field
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "一个读取包含要应用于 cookie 的默认转换的列表的集合<xref href=&quot;System.IdentityModel.DeflateCookieTransform&quot;></xref>和<xref href=&quot;System.IdentityModel.ProtectedDataCookieTransform&quot;> </xref>。"
  syntax:
    content: public static readonly System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> DefaultCookieTransforms;
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  id: DefaultLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  type: Field
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "一个指定十小时的 cookie 的默认生存时间的常数。"
  syntax:
    content: public static readonly TimeSpan DefaultLifetime;
    return:
      type: System.TimeSpan
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  id: DefaultTokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取默认令牌生存期。"
  syntax:
    content: public static TimeSpan DefaultTokenLifetime { get; }
    return:
      type: System.TimeSpan
      description: "默认令牌生存期。 Always <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime&quot;></xref>."
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  id: GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: GetTokenTypeIdentifiers()
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取可由此处理程序处理的令牌类型的令牌类型 Uri。"
  remarks: '支持以下类型 Uri:&quot;http://schemas.microsoft.com/ws/2006/05/servicemodel/tokens/SecureConversation&quot;、&quot;http://docs.oasis-open.org/ws-sx/ws-secureconversation/200512/sct&quot;和&quot;http://schemas.xmlsoap.org/ws/2005/02/sc/sct&quot;。'
  syntax:
    content: public override string[] GetTokenTypeIdentifiers ();
    parameters: []
    return:
      type: System.String[]
      description: "可以通过此处理程序处理的令牌类型的令牌类型标识符 Uri。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  id: LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "从 XML 加载自定义配置。"
  remarks: "配置基础结构初始化调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler>实例。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler> 初始化<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>属性从`lifetime`属性[ \\&lt; sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md)配置文件中的元素。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime%2A>"
  syntax:
    content: public override void LoadCustomConfiguration (System.Xml.XmlNodeList customConfigElements);
    parameters:
    - id: customConfigElements
      type: System.Xml.XmlNodeList
      description: "自定义配置元素中。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>customConfigElements</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "通过指定的配置<code> customConfigElements </code>无效。 例如，它不包含<xref uid=&quot;langword_csharp_&lt;sessionTokenRequirement&gt;&quot; name=&quot;&lt;sessionTokenRequirement&gt;&quot; href=&quot;&quot;></xref>元素，它包含多个<xref uid=&quot;langword_csharp_&lt;sessionTokenRequirement&gt;&quot; name=&quot;&lt;sessionTokenRequirement&gt;&quot; href=&quot;&quot;></xref>元素中，有效<xref:System.TimeSpan>值无法读取从<xref uid=&quot;langword_csharp_lifetime&quot; name=&quot;lifetime&quot; href=&quot;&quot;></xref>属性，或<xref uid=&quot;langword_csharp_lifetime&quot; name=&quot;lifetime&quot; href=&quot;&quot;></xref>属性指定一个值，小于比&lt;xref:System.TimeSpan.Zero?displayProperty=fullName&gt;。</xref:System.TimeSpan>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  id: ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "读取<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>使用指定的 XML 读取器。"
  remarks: "读取器必须定位在 Ws-secure Conversation Feb2005 或 Ws-secure Conversation 1.3`<wsc:SecurityContextToken>`元素。       默认实现调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>使用默认的标记解析程序的方法。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>通过传入<xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>。</xref:System.Xml.XmlReader>"
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "已读取的实例的会话安全令牌<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "读取器未定位在<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>或<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>无法读取。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(Byte[],SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "读取<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>从通过使用指定的标记解析程序的字节流。"
  remarks: "默认实现将创建<xref:System.Xml.XmlDictionaryReader>通过令牌并调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName>方法。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%29?displayProperty=fullName> </xref:System.Xml.XmlDictionaryReader>"
  syntax:
    content: public virtual System.IdentityModel.Tokens.SecurityToken ReadToken (byte[] token, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);
    parameters:
    - id: token
      type: System.Byte[]
      description: "包含标记的字节流。"
    - id: tokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "若要使用令牌解析程序。"
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>读取。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  id: ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ReadToken(XmlReader,SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "读取<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>使用指定的 XML 读取器和令牌解析程序。"
  remarks: "读取器必须定位在 Ws-secure Conversation Feb2005 或 Ws-secure Conversation 1.3`<wsc:SecurityContextToken>`元素。       如果缓存的令牌材料，它是从缓存中读取令牌，这是实例的<xref:System.IdentityModel.Tokens.SessionSecurityTokenCache>类。</xref:System.IdentityModel.Tokens.SessionSecurityTokenCache> 否则，从子元素的读取令牌材料`<wsc:SecurityContextToken>`由指定的元素<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>和<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A>属性和<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>方法调用来解码 cookie。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>       有关如何将会话令牌序列化为`<SecurityContextToken`元素，请参阅<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>方法。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>"
  syntax:
    content: public override System.IdentityModel.Tokens.SecurityToken ReadToken (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenResolver tokenResolver);
    parameters:
    - id: reader
      type: System.Xml.XmlReader
      description: "<xref:System.Xml.XmlReader>通过传入<xref href=&quot;System.IdentityModel.Tokens.SecurityToken&quot;> </xref>。</xref:System.Xml.XmlReader>"
    - id: tokenResolver
      type: System.IdentityModel.Selectors.SecurityTokenResolver
      description: "A <xref href=&quot;System.IdentityModel.Selectors.SecurityTokenResolver&quot;> </xref>可用于解析<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
    return:
      type: System.IdentityModel.Tokens.SecurityToken
      description: "已读取的实例的会话安全令牌<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>reader</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>tokenResolver</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "读取器未定位在<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>或<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>无法读取。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  id: SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: SetTransforms(IEnumerable<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "设置将应用于 cookie 的转换。"
  remarks: "设置的转换由列表<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A>属性。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms%2A> 转换将应用它们出现在列表中编码 cookie 时并按相反的顺序解码 cookie 时的顺序。      1> [!WARNING]&1;> 如果`transforms`参数是`null`，将从引发异常<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>方法调用来进行编码或解码 cookie 时。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>"
  syntax:
    content: protected void SetTransforms (System.Collections.Generic.IEnumerable<System.IdentityModel.CookieTransform> transforms);
    parameters:
    - id: transforms
      type: System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform}
      description: "要使用的转换。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  id: TokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取或设置令牌生存期。"
  remarks: "默认情况下，如果[ \\&lt; sessionTokenRequirement\\&gt;](../Topic/%3CsessionTokenRequirement%3E.md)元素指定在配置文件中，令牌生存期限制属性初始化为的值`lifetime`属性通过<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A>方法。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration%2A>"
  syntax:
    content: public virtual TimeSpan TokenLifetime { get; set; }
    return:
      type: System.TimeSpan
      description: "令牌生存期。 默认值是<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "尝试设置时间跨度小于或等于零，则会发生。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  id: TokenType
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取此处理程序处理的令牌的类型。"
  syntax:
    content: public override Type TokenType { get; }
    return:
      type: System.Type
      description: "The <xref:System.Type> of <xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;></xref>.</xref:System.Type>"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  id: Transforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  type: Property
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "获取将应用于 cookie 的转换。"
  remarks: "转换应用于<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>方法。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>"
  syntax:
    content: public System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform> Transforms { get; }
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
      description: "转换将应用于 cookie 的列表。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*
  exceptions: []
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  id: ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateSession(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "确定与指定标记关联的会话是否仍然有效。 通过检查来确定有效性<> *1> 和<> *1> 属性指定的标记。 如果在会话不再有效，将引发异常。"
  remarks: "令牌不是有效如果其<xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>属性设置为一个值，便会比<xref:System.DateTime.UtcNow%2A>，或如果<xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>属性设置为发生这种情况早于<xref:System.DateTime.UtcNow%2A>.</xref:System.DateTime.UtcNow%2A>值</xref:System.IdentityModel.Tokens.SecurityToken.ValidTo%2A>其</xref:System.DateTime.UtcNow%2A></xref:System.IdentityModel.Tokens.SecurityToken.ValidFrom%2A>       从调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A>方法以验证该会话。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%2A>"
  syntax:
    content: protected virtual void ValidateSession (System.IdentityModel.Tokens.SessionSecurityToken securityToken);
    parameters:
    - id: securityToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "要检查的标记。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>securityToken</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>属性是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.IdentityModel.Tokens.SecurityTokenHandler.Configuration*>"
  - type: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenNotYetValidException
    description: "<> </> *1> 的令牌属性不晚于<> *1>。"
  - type: System.IdentityModel.Tokens.SecurityTokenExpiredException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenExpiredException
    description: "<> </> *1> 的令牌属性不早于<> *1>。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  id: ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateToken(SecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "验证指定的令牌，并返回其声明。"
  remarks: "调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A>方法来验证令牌。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession%2A>"
  syntax:
    content: public override System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateToken (System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "要验证的标记。 必须是可从<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "令牌中包含的标识。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: >-
      <code>token</code>
          <xref uid="langword_csharp_null" name="null" href=""></xref>.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>不可从<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  id: ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: ValidateToken(SessionSecurityToken,String)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "验证指定的会话令牌并返回其声明。"
  remarks: "执行检查，以确保指定的标记的作用域为指定的终结点 ID 并且，如果是这样，调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>方法; 否则，将引发一种<xref:System.IdentityModel.Tokens.SecurityTokenException>。</xref:System.IdentityModel.Tokens.SecurityTokenException> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken%28System.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>      1> [!IMPORTANT]&1;> 会话的令牌，<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>属性都`null`或视为空全局划分作用域。</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A> 这会带来潜在的安全风险。 因此你应确保<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>属性设置在会话令牌中。</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId%2A>"
  syntax:
    content: public virtual System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity> ValidateToken (System.IdentityModel.Tokens.SessionSecurityToken token, string endpointId);
    parameters:
    - id: token
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "要验证的标记。 必须是可从<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
    - id: endpointId
      type: System.String
      description: "终结点的作用范围令牌的标识符。"
    return:
      type: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
      description: "令牌中包含的标识。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>token</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>endpointId</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>不可从<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  - type: System.IdentityModel.Tokens.SecurityTokenException
    commentId: T:System.IdentityModel.Tokens.SecurityTokenException
    description: "<xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId*>属性指定的标记不是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>或空并且为其值是不同于指定的<code> endpointId </code>参数。</xref:System.IdentityModel.Tokens.SessionSecurityToken.EndpointId*>"
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  id: WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "将指定的标记序列化到字节数组。"
  remarks: "将指定的标记序列化为通过创建和 XML 编写器，通过<xref:System.IO.MemoryStream>和调用<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName>方法。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken%28System.Xml.XmlWriter%2CSystem.IdentityModel.Tokens.SecurityToken%29?displayProperty=fullName> </xref:System.IO.MemoryStream> 请参阅该重载，以更多详细信息。"
  syntax:
    content: public virtual byte[] WriteToken (System.IdentityModel.Tokens.SessionSecurityToken sessionToken);
    parameters:
    - id: sessionToken
      type: System.IdentityModel.Tokens.SessionSecurityToken
      description: "要写入的标记。"
    return:
      type: System.Byte[]
      description: "编码的字节数组。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>sessiontoken</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  id: WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  langs:
  - csharp
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  type: Method
  assemblies:
  - System.IdentityModel
  namespace: System.IdentityModel.Tokens
  summary: "使用指定的 XML 编写器序列化指定的标记。"
  remarks: "默认实现序列化为指定的标记的 Ws-secure Conversation Feb2005 或 Ws-secure Conversation 1.3`<wsc:SecurityContextToken>`元素，具体取决于值<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=fullName>属性。</xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion%2A?displayProperty=fullName> <xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=fullName>属性序列化为`Id`属性。</xref:System.IdentityModel.Tokens.SessionSecurityToken.Id%2A?displayProperty=fullName> <xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName>属性序列化为`<Identifier>`子元素。</xref:System.IdentityModel.Tokens.SessionSecurityToken.ContextId%2A?displayProperty=fullName> 如果不是`null`<xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName>属性序列化为`<Instance>`元素。</xref:System.IdentityModel.Tokens.SessionSecurityToken.KeyGeneration%2A?displayProperty=fullName> 最后，如果<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>属性是`false`，整个令牌序列化到二进制数组传递给的<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A>方法进行编码。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms%2A> </xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName> 编码后的标记然后作为 base64 编码值写入到的元素和命名空间指定<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A>和<xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A>属性。</xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace%2A> </xref:System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName%2A> 如果<xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>属性是`true`，令牌不序列化。</xref:System.IdentityModel.Tokens.SessionSecurityToken.IsReferenceMode%2A?displayProperty=fullName>"
  syntax:
    content: public override void WriteToken (System.Xml.XmlWriter writer, System.IdentityModel.Tokens.SecurityToken token);
    parameters:
    - id: writer
      type: System.Xml.XmlWriter
      description: "用于序列化令牌 XML 编写器。"
    - id: token
      type: System.IdentityModel.Tokens.SecurityToken
      description: "要序列化的令牌。 实例<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。"
  overload: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>writer</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>token</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "<code>token</code>不可从<xref href=&quot;System.IdentityModel.Tokens.SessionSecurityToken&quot;> </xref>。       -或-<xref:System.IdentityModel.Tokens.SessionSecurityToken.SecureConversationVersion*>的令牌指定不受处理程序的 Ws-secure Conversation 的版本。"
  platform:
  - net462
references:
- uid: System.IdentityModel.Tokens.SecurityTokenHandler
  isExternal: false
  name: System.IdentityModel.Tokens.SecurityTokenHandler
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IdentityModel.Tokens.SecurityTokenException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenException
  nameWithType: SecurityTokenException
  fullName: System.IdentityModel.Tokens.SecurityTokenException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenNotYetValidException
  nameWithType: SecurityTokenNotYetValidException
  fullName: System.IdentityModel.Tokens.SecurityTokenNotYetValidException
- uid: System.IdentityModel.Tokens.SecurityTokenExpiredException
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenExpiredException
  nameWithType: SecurityTokenExpiredException
  fullName: System.IdentityModel.Tokens.SecurityTokenExpiredException
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler()
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler()
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<CookieTransform>
  nameWithType: ReadOnlyCollection<CookieTransform>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.IdentityModel.CookieTransform>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.IdentityModel.CookieTransform>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CookieTransform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor(System.Collections.ObjectModel.ReadOnlyCollection{System.IdentityModel.CookieTransform},System.TimeSpan)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SessionSecurityTokenHandler(ReadOnlyCollection<CookieTransform>,TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(System.Byte[],System.Boolean)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ApplyTransforms(Byte[],Boolean)
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms(Byte[],Boolean)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.CanReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken(XmlReader)
- uid: System.Xml.XmlReader
  parent: System.Xml
  isExternal: true
  name: XmlReader
  nameWithType: XmlReader
  fullName: System.Xml.XmlReader
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(System.Security.Claims.ClaimsPrincipal,System.String,System.String,System.DateTime,System.DateTime)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken(ClaimsPrincipal,String,String,DateTime,DateTime)
- uid: System.IdentityModel.Tokens.SessionSecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SessionSecurityToken
  nameWithType: SessionSecurityToken
  fullName: System.IdentityModel.Tokens.SessionSecurityToken
- uid: System.Security.Claims.ClaimsPrincipal
  parent: System.Security.Claims
  isExternal: false
  name: ClaimsPrincipal
  nameWithType: ClaimsPrincipal
  fullName: System.Security.Claims.ClaimsPrincipal
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(System.IdentityModel.Tokens.SecurityTokenDescriptor)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateToken(SecurityTokenDescriptor)
  nameWithType: SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken(SecurityTokenDescriptor)
- uid: System.IdentityModel.Tokens.SecurityToken
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityToken
  nameWithType: SecurityToken
  fullName: System.IdentityModel.Tokens.SecurityToken
- uid: System.IdentityModel.Tokens.SecurityTokenDescriptor
  parent: System.IdentityModel.Tokens
  isExternal: false
  name: SecurityTokenDescriptor
  nameWithType: SecurityTokenDescriptor
  fullName: System.IdentityModel.Tokens.SecurityTokenDescriptor
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultCookieTransforms
  nameWithType: SessionSecurityTokenHandler.DefaultCookieTransforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultCookieTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers()
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers()
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(System.Xml.XmlNodeList)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: LoadCustomConfiguration(XmlNodeList)
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration(XmlNodeList)
- uid: System.Xml.XmlNodeList
  parent: System.Xml
  isExternal: false
  name: XmlNodeList
  nameWithType: XmlNodeList
  fullName: System.Xml.XmlNodeList
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Byte[],System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(Byte[],SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(Byte[],SecurityTokenResolver)
- uid: System.IdentityModel.Selectors.SecurityTokenResolver
  parent: System.IdentityModel.Selectors
  isExternal: false
  name: SecurityTokenResolver
  nameWithType: SecurityTokenResolver
  fullName: System.IdentityModel.Selectors.SecurityTokenResolver
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenResolver)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken(XmlReader,SecurityTokenResolver)
  nameWithType: SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken(XmlReader,SecurityTokenResolver)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform})
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SetTransforms(IEnumerable<CookieTransform>)
  nameWithType: SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms(IEnumerable<CookieTransform>)
- uid: System.Collections.Generic.IEnumerable{System.IdentityModel.CookieTransform}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<CookieTransform>
  nameWithType: IEnumerable<CookieTransform>
  fullName: System.Collections.Generic.IEnumerable<System.IdentityModel.CookieTransform>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.IdentityModel.CookieTransform>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IdentityModel.CookieTransform
    name: CookieTransform
    nameWithType: CookieTransform
    fullName: CookieTransform
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateSession(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession(SessionSecurityToken)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken(SecurityToken)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SecurityToken)
- uid: System.Collections.ObjectModel.ReadOnlyCollection{System.Security.Claims.ClaimsIdentity}
  parent: System.Collections.ObjectModel
  isExternal: true
  name: ReadOnlyCollection<ClaimsIdentity>
  nameWithType: ReadOnlyCollection<ClaimsIdentity>
  fullName: System.Collections.ObjectModel.ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  spec.csharp:
  - uid: System.Collections.ObjectModel.ReadOnlyCollection`1
    name: ReadOnlyCollection
    nameWithType: ReadOnlyCollection
    fullName: ReadOnlyCollection<System.Security.Claims.ClaimsIdentity>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Security.Claims.ClaimsIdentity
    name: ClaimsIdentity
    nameWithType: ClaimsIdentity
    fullName: ClaimsIdentity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(System.IdentityModel.Tokens.SessionSecurityToken,System.String)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken(SessionSecurityToken,String)
  nameWithType: SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken(SessionSecurityToken,String)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.IdentityModel.Tokens.SessionSecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken(SessionSecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(SessionSecurityToken)
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(System.Xml.XmlWriter,System.IdentityModel.Tokens.SecurityToken)
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken(XmlWriter,SecurityToken)
  nameWithType: SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
  fullName: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken(XmlWriter,SecurityToken)
- uid: System.Xml.XmlWriter
  parent: System.Xml
  isExternal: true
  name: XmlWriter
  nameWithType: XmlWriter
  fullName: System.Xml.XmlWriter
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.#ctor*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SessionSecurityTokenHandler
  nameWithType: SessionSecurityTokenHandler.SessionSecurityTokenHandler
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ApplyTransforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ApplyTransforms
  nameWithType: SessionSecurityTokenHandler.ApplyTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanReadToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanReadToken
  nameWithType: SessionSecurityTokenHandler.CanReadToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanValidateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanValidateToken
  nameWithType: SessionSecurityTokenHandler.CanValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CanWriteToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CanWriteToken
  nameWithType: SessionSecurityTokenHandler.CanWriteToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieElementName*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieElementName
  nameWithType: SessionSecurityTokenHandler.CookieElementName
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CookieNamespace*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CookieNamespace
  nameWithType: SessionSecurityTokenHandler.CookieNamespace
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateSessionSecurityToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateSessionSecurityToken
  nameWithType: SessionSecurityTokenHandler.CreateSessionSecurityToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.CreateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: CreateToken
  nameWithType: SessionSecurityTokenHandler.CreateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.DefaultTokenLifetime*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: DefaultTokenLifetime
  nameWithType: SessionSecurityTokenHandler.DefaultTokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.GetTokenTypeIdentifiers*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: GetTokenTypeIdentifiers
  nameWithType: SessionSecurityTokenHandler.GetTokenTypeIdentifiers
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.LoadCustomConfiguration*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: LoadCustomConfiguration
  nameWithType: SessionSecurityTokenHandler.LoadCustomConfiguration
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ReadToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ReadToken
  nameWithType: SessionSecurityTokenHandler.ReadToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.SetTransforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: SetTransforms
  nameWithType: SessionSecurityTokenHandler.SetTransforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenLifetime*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenLifetime
  nameWithType: SessionSecurityTokenHandler.TokenLifetime
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.TokenType*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: TokenType
  nameWithType: SessionSecurityTokenHandler.TokenType
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.Transforms*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: Transforms
  nameWithType: SessionSecurityTokenHandler.Transforms
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateSession*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateSession
  nameWithType: SessionSecurityTokenHandler.ValidateSession
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.ValidateToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: ValidateToken
  nameWithType: SessionSecurityTokenHandler.ValidateToken
- uid: System.IdentityModel.Tokens.SessionSecurityTokenHandler.WriteToken*
  parent: System.IdentityModel.Tokens.SessionSecurityTokenHandler
  isExternal: false
  name: WriteToken
  nameWithType: SessionSecurityTokenHandler.WriteToken
