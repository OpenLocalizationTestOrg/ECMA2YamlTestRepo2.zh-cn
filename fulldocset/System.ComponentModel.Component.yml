### YamlMime:ManagedReference
items:
- uid: System.ComponentModel.Component
  id: Component
  children:
  - System.ComponentModel.Component.#ctor
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Dispose(System.Boolean)
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.Finalize
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  langs:
  - csharp
  name: Component
  nameWithType: Component
  fullName: System.ComponentModel.Component
  type: Class
  summary: "提供的基实现<xref href=&quot;System.ComponentModel.IComponent&quot;></xref>接口并启用应用程序之间共享的对象。"
  remarks: "组件是在公共语言运行时由引用封送的所有组件的基类。 组件是可远程处理，派生自<xref:System.MarshalByRefObject>类。</xref:System.MarshalByRefObject> 组件提供的实现<xref:System.ComponentModel.IComponent>接口。</xref:System.ComponentModel.IComponent> <xref:System.ComponentModel.MarshalByValueComponent>提供的实现<xref:System.ComponentModel.IComponent>，通过值将封送。</xref:System.ComponentModel.IComponent> </xref:System.ComponentModel.MarshalByValueComponent>       你可以托管在实现任何对象的组件<xref:System.ComponentModel.IContainer>接口，并且可以查询和从其容器获取服务。</xref:System.ComponentModel.IContainer> 容器创建<xref:System.ComponentModel.ISite>为它包含每个组件。</xref:System.ComponentModel.ISite> 容器使用站点来管理组件，并且该组件用于与其容器进行通信。       组件应显式释放资源，通过调用其<xref:System.ComponentModel.Component.Dispose%2A>方法，而无需等待自动内存管理通过隐式调用<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> 当<xref:System.ComponentModel.Container>将被释放中的所有组件<xref:System.ComponentModel.Container>同时会释放。</xref:System.ComponentModel.Container> </xref:System.ComponentModel.Container>"
  syntax:
    content: >-
      [System.ComponentModel.DesignerCategory("Component")]

      [System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)]

      [System.Runtime.InteropServices.ComVisible(true)]

      public class Component : MarshalByRefObject, IDisposable, System.ComponentModel.IComponent
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.ComponentModel.IComponent
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.ComponentModel.Component.#ctor
  id: '#ctor'
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Component()
  nameWithType: Component.Component()
  fullName: System.ComponentModel.Component.Component()
  type: Constructor
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "初始化的新实例<xref href=&quot;System.ComponentModel.Component&quot;></xref>类。"
  syntax:
    content: public Component ();
    parameters: []
  overload: System.ComponentModel.Component.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.CanRaiseEvents
  id: CanRaiseEvents
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: CanRaiseEvents
  nameWithType: Component.CanRaiseEvents
  fullName: System.ComponentModel.Component.CanRaiseEvents
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取一个值，该值指示组件是否可以引发事件。"
  remarks: "此属性的默认实现始终返回`true`。 继承自的类<xref:System.ComponentModel.Component>类应重写此属性以提供禁用引发事件的功能。</xref:System.ComponentModel.Component> 例如，在<xref:System.Windows.Forms.Control>类，如果控件承载 ActiveX 控件，作为<xref:System.Windows.Forms.Control.CanRaiseEvents%2A>属性返回`false`如果 ActiveX 控件拥有冻结其事件。</xref:System.Windows.Forms.Control.CanRaiseEvents%2A> </xref:System.Windows.Forms.Control>"
  syntax:
    content: protected virtual bool CanRaiseEvents { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该组件可以引发事件;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Component.CanRaiseEvents*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Container
  id: Container
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Container
  nameWithType: Component.Container
  fullName: System.ComponentModel.Component.Container
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取<xref href=&quot;System.ComponentModel.IContainer&quot;></xref>包含<xref href=&quot;System.ComponentModel.Component&quot;> </xref>。"
  remarks: "在第一个中先进先出列表，它还定义容器内的组件的顺序中，容器中的组件进行跟踪。 添加的最后一个组件是在列表中的最后一个组件。"
  syntax:
    content: public System.ComponentModel.IContainer Container { get; }
    return:
      type: System.ComponentModel.IContainer
      description: "<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>包含<xref href=&quot;System.ComponentModel.Component&quot;> </xref>(如果有） 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.ComponentModel.Component&quot;></xref>未封装在<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>。"
  overload: System.ComponentModel.Component.Container*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.DesignMode
  id: DesignMode
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: DesignMode
  nameWithType: Component.DesignMode
  fullName: System.ComponentModel.Component.DesignMode
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取一个值，该值指示是否<xref href=&quot;System.ComponentModel.Component&quot;></xref>目前处于设计模式。"
  remarks: "设计模式指示器存储在<xref:System.ComponentModel.ISite>; 因此，如果<xref:System.ComponentModel.Component>没有<xref:System.ComponentModel.ISite>与它关联，此属性的值是`false`。</xref:System.ComponentModel.ISite> </xref:System.ComponentModel.Component> </xref:System.ComponentModel.ISite>"
  syntax:
    content: protected bool DesignMode { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.ComponentModel.Component&quot;></xref>处于设计模式; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.ComponentModel.Component.DesignMode*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Dispose
  id: Dispose
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Dispose()
  nameWithType: Component.Dispose()
  fullName: System.ComponentModel.Component.Dispose()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "释放使用的所有资源<xref href=&quot;System.ComponentModel.Component&quot;> </xref>。"
  remarks: "在完成使用<xref:System.ComponentModel.Component>.</xref:System.ComponentModel.Component>时调用的 Dispose Dispose 方法离开<xref:System.ComponentModel.Component>中不可用状态。</xref:System.ComponentModel.Component> 调用 Dispose 后，必须释放对所有引用<xref:System.ComponentModel.Component>以便垃圾回收器才能回收的内存，<xref:System.ComponentModel.Component>占用。</xref:System.ComponentModel.Component> </xref:System.ComponentModel.Component> 有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.ComponentModel.Component>。</xref:System.ComponentModel.Component>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.ComponentModel.Component>对象的`Finalize`方法。</xref:System.ComponentModel.Component>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.ComponentModel.Component.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Component.Dispose(Boolean)
  fullName: System.ComponentModel.Component.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "释放由非托管的资源<xref href=&quot;System.ComponentModel.Component&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.ComponentModel.Component.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.ComponentModel.Component>引用。</xref:System.ComponentModel.Component> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.ComponentModel.Component.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Disposed
  id: Disposed
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Disposed
  nameWithType: Component.Disposed
  fullName: System.ComponentModel.Component.Disposed
  type: Event
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "通过调用释放组件时发生<xref:System.ComponentModel.Component.Dispose*>方法。</xref:System.ComponentModel.Component.Dispose*>"
  remarks: '在创建已释放的委托时，需要标识处理事件的方法。 若要将事件与事件处理程序关联，添加到事件的委托的一个实例。 除非移除了该委托，称为每当发生该事件时，事件处理程序。 有关事件处理程序委托的详细信息，请参阅[NIB︰ 事件和委托](http://msdn.microsoft.com/en-us/d98fd58b-fa4f-4598-8378-addf4355a115)。'
  syntax:
    content: public event EventHandler Disposed;
    return:
      type: System.EventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Events
  id: Events
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Events
  nameWithType: Component.Events
  fullName: System.ComponentModel.Component.Events
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取的事件处理程序附加到此列表<xref href=&quot;System.ComponentModel.Component&quot;> </xref>。"
  remarks: '有关处理事件的详细信息，请参阅[NIB︰ 使用事件](http://msdn.microsoft.com/en-us/01e4f1bc-e55e-413f-98c7-6588493e5f67)。'
  syntax:
    content: protected System.ComponentModel.EventHandlerList Events { get; }
    return:
      type: System.ComponentModel.EventHandlerList
      description: "<xref href=&quot;System.ComponentModel.EventHandlerList&quot;> </xref>为此组件提供委托。"
  overload: System.ComponentModel.Component.Events*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Finalize
  id: Finalize
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Finalize()
  nameWithType: Component.Finalize()
  fullName: System.ComponentModel.Component.Finalize()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "释放非托管的资源并执行其他清理操作之前<xref href=&quot;System.ComponentModel.Component&quot;></xref>通过垃圾回收回收。"
  remarks: "此方法将替代<xref:System.Object.Finalize%2A>.</xref:System.Object.Finalize%2A> 应用程序代码不应调用此方法。对象的`Finalize`方法过程中将自动调用垃圾回收，除非已通过调用禁用垃圾回收器的终止<xref:System.GC.SuppressFinalize%2A>方法。</xref:System.GC.SuppressFinalize%2A>       有关详细信息，请参阅[Finalize 方法和析构函数](http://msdn.microsoft.com/en-us/fd376774-1643-499b-869e-9546a3aeea70)，[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)，和[重写 Finalize 方法](http://msdn.microsoft.com/en-us/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)。"
  syntax:
    content: ~Component ();
    parameters: []
  overload: System.ComponentModel.Component.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.GetService(System.Type)
  id: GetService(System.Type)
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: GetService(Type)
  nameWithType: Component.GetService(Type)
  fullName: System.ComponentModel.Component.GetService(Type)
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回一个对象，表示由提供的服务<xref href=&quot;System.ComponentModel.Component&quot;></xref>或通过其<xref href=&quot;System.ComponentModel.Container&quot;> </xref>。"
  remarks: "此方法由派生类中重写。"
  syntax:
    content: protected virtual object GetService (Type service);
    parameters:
    - id: service
      type: System.Type
      description: "由提供的服务<xref href=&quot;System.ComponentModel.Component&quot;> </xref>。"
    return:
      type: System.Object
      description: "<xref:System.Object>表示由提供的服务<xref href=&quot;System.ComponentModel.Component&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.ComponentModel.Component&quot;></xref>不提供指定的服务。</xref:System.Object>"
  overload: System.ComponentModel.Component.GetService*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.Site
  id: Site
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: Site
  nameWithType: Component.Site
  fullName: System.ComponentModel.Component.Site
  type: Property
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "获取或设置<xref href=&quot;System.ComponentModel.ISite&quot;></xref>的<xref href=&quot;System.ComponentModel.Component&quot;> </xref>。"
  remarks: "<xref:System.ComponentModel.Component>将具有<xref:System.ComponentModel.ISite>如果它已添加到<xref:System.ComponentModel.IContainer>，并<xref:System.ComponentModel.IContainer>将分配<xref:System.ComponentModel.ISite>到它。</xref:System.ComponentModel.ISite> </xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.ISite> </xref:System.ComponentModel.Component> <xref:System.ComponentModel.IContainer>负责将分配<xref:System.ComponentModel.ISite>到<xref:System.ComponentModel.Component>。</xref:System.ComponentModel.Component> </xref:System.ComponentModel.ISite> </xref:System.ComponentModel.IContainer> 更改的组件的值<xref:System.ComponentModel.ISite>不一定不更改站点的名称<xref:System.ComponentModel.Component>分配给。</xref:System.ComponentModel.Component> </xref:System.ComponentModel.ISite> 站点属性应设置只能由<xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer>       该属性值将`null`如果<xref:System.ComponentModel.Component>从其<xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer>删除</xref:System.ComponentModel.Component> 分配`null`到此属性不一定会删除<xref:System.ComponentModel.Component>从<xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.Component>       A<xref:System.ComponentModel.Component>可能或可能不具有名称。</xref:System.ComponentModel.Component> 如果<xref:System.ComponentModel.Component>是指定一个名称，名称必须是唯一的而其他<xref:System.ComponentModel.Component>对象内其<xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.Component> </xref:System.ComponentModel.Component> <xref:System.ComponentModel.ISite>存储的<xref:System.ComponentModel.Component>; 因此，可以仅将名称，<xref:System.ComponentModel.Component>如果它有一个<xref:System.ComponentModel.ISite>与之关联的</xref:System.ComponentModel.ISite></xref:System.ComponentModel.Component></xref:System.ComponentModel.Component>名称</xref:System.ComponentModel.ISite>"
  syntax:
    content: public virtual System.ComponentModel.ISite Site { get; set; }
    return:
      type: System.ComponentModel.ISite
      description: "<xref href=&quot;System.ComponentModel.ISite&quot;> </xref>与关联<xref href=&quot;System.ComponentModel.Component&quot;> </xref>，或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.ComponentModel.Component&quot;></xref>未封装在<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>、 <xref href=&quot;System.ComponentModel.Component&quot;> </xref>没有<xref href=&quot;System.ComponentModel.ISite&quot;></xref>与之关联，或<xref href=&quot;System.ComponentModel.Component&quot;></xref>从删除其<xref href=&quot;System.ComponentModel.IContainer&quot;> </xref>。"
  overload: System.ComponentModel.Component.Site*
  exceptions: []
  platform:
  - net462
- uid: System.ComponentModel.Component.ToString
  id: ToString
  parent: System.ComponentModel.Component
  langs:
  - csharp
  name: ToString()
  nameWithType: Component.ToString()
  fullName: System.ComponentModel.Component.ToString()
  type: Method
  assemblies:
  - System
  namespace: System.ComponentModel
  summary: "返回<xref:System.String>包含名称的<xref href=&quot;System.ComponentModel.Component&quot;> </xref>，如果任何。</xref:System.String> 此方法不应被替代。"
  remarks: "A<xref:System.ComponentModel.Component>可能或可能不具有名称。</xref:System.ComponentModel.Component> 如果<xref:System.ComponentModel.Component>是指定一个名称，名称是唯一的其他<xref:System.ComponentModel.Component>对象内其<xref:System.ComponentModel.IContainer>.</xref:System.ComponentModel.IContainer></xref:System.ComponentModel.Component>间</xref:System.ComponentModel.Component>       <xref:System.ComponentModel.ISite>存储的<xref:System.ComponentModel.Component>。</xref:System.ComponentModel.Component>的名称</xref:System.ComponentModel.ISite> <xref:System.ComponentModel.Component>只能具有<xref:System.ComponentModel.ISite>如果它已添加到<xref:System.ComponentModel.IContainer>，并<xref:System.ComponentModel.IContainer>将分配<xref:System.ComponentModel.ISite>到它。</xref:System.ComponentModel.ISite> </xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.IContainer> </xref:System.ComponentModel.ISite> </xref:System.ComponentModel.Component>"
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: "A<xref:System.String>包含名称的<xref href=&quot;System.ComponentModel.Component&quot;> </xref>(如果有） 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.ComponentModel.Component&quot;></xref>是未命名。</xref:System.String>"
  overload: System.ComponentModel.Component.ToString*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.ComponentModel.Component.#ctor
  parent: System.ComponentModel.Component
  isExternal: false
  name: Component()
  nameWithType: Component.Component()
  fullName: System.ComponentModel.Component.Component()
- uid: System.ComponentModel.Component.CanRaiseEvents
  parent: System.ComponentModel.Component
  isExternal: false
  name: CanRaiseEvents
  nameWithType: Component.CanRaiseEvents
  fullName: System.ComponentModel.Component.CanRaiseEvents
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.ComponentModel.Component.Container
  parent: System.ComponentModel.Component
  isExternal: false
  name: Container
  nameWithType: Component.Container
  fullName: System.ComponentModel.Component.Container
- uid: System.ComponentModel.IContainer
  parent: System.ComponentModel
  isExternal: false
  name: IContainer
  nameWithType: IContainer
  fullName: System.ComponentModel.IContainer
- uid: System.ComponentModel.Component.DesignMode
  parent: System.ComponentModel.Component
  isExternal: false
  name: DesignMode
  nameWithType: Component.DesignMode
  fullName: System.ComponentModel.Component.DesignMode
- uid: System.ComponentModel.Component.Dispose
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose()
  nameWithType: Component.Dispose()
  fullName: System.ComponentModel.Component.Dispose()
- uid: System.ComponentModel.Component.Dispose(System.Boolean)
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Component.Dispose(Boolean)
  fullName: System.ComponentModel.Component.Dispose(Boolean)
- uid: System.ComponentModel.Component.Disposed
  parent: System.ComponentModel.Component
  isExternal: false
  name: Disposed
  nameWithType: Component.Disposed
  fullName: System.ComponentModel.Component.Disposed
- uid: System.EventHandler
  parent: System
  isExternal: true
  name: EventHandler
  nameWithType: EventHandler
  fullName: System.EventHandler
- uid: System.ComponentModel.Component.Events
  parent: System.ComponentModel.Component
  isExternal: false
  name: Events
  nameWithType: Component.Events
  fullName: System.ComponentModel.Component.Events
- uid: System.ComponentModel.EventHandlerList
  parent: System.ComponentModel
  isExternal: false
  name: EventHandlerList
  nameWithType: EventHandlerList
  fullName: System.ComponentModel.EventHandlerList
- uid: System.ComponentModel.Component.Finalize
  parent: System.ComponentModel.Component
  isExternal: false
  name: Finalize()
  nameWithType: Component.Finalize()
  fullName: System.ComponentModel.Component.Finalize()
- uid: System.ComponentModel.Component.GetService(System.Type)
  parent: System.ComponentModel.Component
  isExternal: false
  name: GetService(Type)
  nameWithType: Component.GetService(Type)
  fullName: System.ComponentModel.Component.GetService(Type)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ComponentModel.Component.Site
  parent: System.ComponentModel.Component
  isExternal: false
  name: Site
  nameWithType: Component.Site
  fullName: System.ComponentModel.Component.Site
- uid: System.ComponentModel.ISite
  parent: System.ComponentModel
  isExternal: false
  name: ISite
  nameWithType: ISite
  fullName: System.ComponentModel.ISite
- uid: System.ComponentModel.Component.ToString
  parent: System.ComponentModel.Component
  isExternal: false
  name: ToString()
  nameWithType: Component.ToString()
  fullName: System.ComponentModel.Component.ToString()
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.ComponentModel.Component.#ctor*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Component
  nameWithType: Component.Component
- uid: System.ComponentModel.Component.CanRaiseEvents*
  parent: System.ComponentModel.Component
  isExternal: false
  name: CanRaiseEvents
  nameWithType: Component.CanRaiseEvents
- uid: System.ComponentModel.Component.Container*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Container
  nameWithType: Component.Container
- uid: System.ComponentModel.Component.DesignMode*
  parent: System.ComponentModel.Component
  isExternal: false
  name: DesignMode
  nameWithType: Component.DesignMode
- uid: System.ComponentModel.Component.Dispose*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Dispose
  nameWithType: Component.Dispose
- uid: System.ComponentModel.Component.Events*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Events
  nameWithType: Component.Events
- uid: System.ComponentModel.Component.Finalize*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Finalize
  nameWithType: Component.Finalize
- uid: System.ComponentModel.Component.GetService*
  parent: System.ComponentModel.Component
  isExternal: false
  name: GetService
  nameWithType: Component.GetService
- uid: System.ComponentModel.Component.Site*
  parent: System.ComponentModel.Component
  isExternal: false
  name: Site
  nameWithType: Component.Site
- uid: System.ComponentModel.Component.ToString*
  parent: System.ComponentModel.Component
  isExternal: false
  name: ToString
  nameWithType: Component.ToString
