### YamlMime:ManagedReference
items:
- uid: System.Windows.Forms.BindingContext
  id: BindingContext
  children:
  - System.Windows.Forms.BindingContext.#ctor
  - System.Windows.Forms.BindingContext.Add(System.Object,System.Windows.Forms.BindingManagerBase)
  - System.Windows.Forms.BindingContext.AddCore(System.Object,System.Windows.Forms.BindingManagerBase)
  - System.Windows.Forms.BindingContext.Clear
  - System.Windows.Forms.BindingContext.ClearCore
  - System.Windows.Forms.BindingContext.CollectionChanged
  - System.Windows.Forms.BindingContext.Contains(System.Object)
  - System.Windows.Forms.BindingContext.Contains(System.Object,System.String)
  - System.Windows.Forms.BindingContext.IsReadOnly
  - System.Windows.Forms.BindingContext.Item(System.Object)
  - System.Windows.Forms.BindingContext.Item(System.Object,System.String)
  - System.Windows.Forms.BindingContext.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)
  - System.Windows.Forms.BindingContext.Remove(System.Object)
  - System.Windows.Forms.BindingContext.RemoveCore(System.Object)
  - System.Windows.Forms.BindingContext.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  - System.Windows.Forms.BindingContext.System#Collections#ICollection#Count
  - System.Windows.Forms.BindingContext.System#Collections#ICollection#IsSynchronized
  - System.Windows.Forms.BindingContext.System#Collections#ICollection#SyncRoot
  - System.Windows.Forms.BindingContext.System#Collections#IEnumerable#GetEnumerator
  - System.Windows.Forms.BindingContext.UpdateBinding(System.Windows.Forms.BindingContext,System.Windows.Forms.Binding)
  langs:
  - csharp
  name: BindingContext
  nameWithType: BindingContext
  fullName: System.Windows.Forms.BindingContext
  type: Class
  summary: "管理的集合<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>继承自任何对象的对象<xref href=&quot;System.Windows.Forms.Control&quot;></xref>类。"
  remarks: "每个 Windows 窗体具有至少一个 BindingContext 对象，用于管理<xref:System.Windows.Forms.BindingManagerBase>窗体的对象。</xref:System.Windows.Forms.BindingManagerBase> 因为<xref:System.Windows.Forms.BindingManagerBase>类为抽象，类的返回类型的<xref:System.Windows.Forms.BindingContext.Item%2A>属性是其中一种<xref:System.Windows.Forms.CurrencyManager>或一种<xref:System.Windows.Forms.PropertyManager>。</xref:System.Windows.Forms.PropertyManager> </xref:System.Windows.Forms.CurrencyManager> </xref:System.Windows.Forms.BindingContext.Item%2A> </xref:System.Windows.Forms.BindingManagerBase> 如果数据源是一个对象，可以返回一个属性 （而不是对象的列表中），<xref:System.Type>一种<xref:System.Windows.Forms.PropertyManager>。</xref:System.Windows.Forms.PropertyManager> </xref:System.Type> 例如，如果你指定<xref:System.Windows.Forms.TextBox>作为数据源，<xref:System.Windows.Forms.PropertyManager>返回。</xref:System.Windows.Forms.PropertyManager> </xref:System.Windows.Forms.TextBox> 另一方面，如果数据源是一个对象，实现<xref:System.Collections.IList>或<xref:System.ComponentModel.IBindingList>、<xref:System.Windows.Forms.CurrencyManager>返回。</xref:System.Windows.Forms.CurrencyManager> </xref:System.ComponentModel.IBindingList> </xref:System.Collections.IList>       对于 Windows 窗体上每个数据源，没有单个<xref:System.Windows.Forms.CurrencyManager>或<xref:System.Windows.Forms.PropertyManager>。</xref:System.Windows.Forms.PropertyManager> </xref:System.Windows.Forms.CurrencyManager> 因为可能存在与 Windows 窗体关联的多个数据源，BindingContext 可让你检索任何特定<xref:System.Windows.Forms.CurrencyManager>与数据源关联。</xref:System.Windows.Forms.CurrencyManager>      1> [!NOTE]&1;> 时使用<xref:System.Windows.Forms.BindingContext.Item%2A>BindingContext 创建一个新属性，<xref:System.Windows.Forms.BindingManagerBase>如果尚不存在。</xref:System.Windows.Forms.BindingManagerBase> </xref:System.Windows.Forms.BindingContext.Item%2A> 返回的对象可能不会管理列表 （或任何列表），在你计划，这可能导致某些混淆。 若要防止返回无效<xref:System.Windows.Forms.BindingManagerBase>，使用<xref:System.Windows.Forms.BindingContext.Contains%2A>方法可确定所要的<xref:System.Windows.Forms.BindingManagerBase>已存在。</xref:System.Windows.Forms.BindingManagerBase> </xref:System.Windows.Forms.BindingContext.Contains%2A> </xref:System.Windows.Forms.BindingManagerBase>       如果您使用容器控件，如<xref:System.Windows.Forms.GroupBox>， <xref:System.Windows.Forms.Panel>，或<xref:System.Windows.Forms.TabControl>，用于包含数据绑定控件，你可以创建为只是该容器控件及其控件 BindingContext。</xref:System.Windows.Forms.TabControl> </xref:System.Windows.Forms.Panel> </xref:System.Windows.Forms.GroupBox> 然后，通过其自己来管理你的窗体的每个部分<xref:System.Windows.Forms.BindingManagerBase>.</xref:System.Windows.Forms.BindingManagerBase> 请参阅<xref:System.Windows.Forms.BindingContext.%23ctor%2A>有关创建多个详细信息的构造函数<xref:System.Windows.Forms.BindingManagerBase>同一数据源的对象。</xref:System.Windows.Forms.BindingManagerBase> </xref:System.Windows.Forms.BindingContext.%23ctor%2A>       如果你添加<xref:System.Windows.Forms.TextBox>控制到窗体并将其绑定到数据集中，表的列控件与该表单 BindingContext。</xref:System.Windows.Forms.TextBox> BindingContext，，后者与特定于<xref:System.Windows.Forms.CurrencyManager>为该数据关联。</xref:System.Windows.Forms.CurrencyManager> 当你查询`Position`属性<xref:System.Windows.Forms.CurrencyManager>，它将报告该绑定的当前记录<xref:System.Windows.Forms.TextBox>控件。</xref:System.Windows.Forms.TextBox> </xref:System.Windows.Forms.CurrencyManager> 在下面的代码示例中，<xref:System.Windows.Forms.TextBox>控件绑定到`FirstName`列`Customers`表上`dataSet1`通过它位于窗体 BindingContext 的数据集。</xref:System.Windows.Forms.TextBox>      ```vb#   TextBox1.DataBindings.Add(&quot;Text&quot;, dataSet1, &quot;Customers.FirstName&quot;)      ```      ```c#   textBox1.DataBindings.Add(&quot;Text&quot;, dataSet1, &quot;Customers.FirstName&quot;);      ```      ```cpp   textBox1->DataBindings->Add(&quot;Text&quot;, dataSet1, &quot;Customers.FirstName&quot;);   ```你可以添加第二个<xref:System.Windows.Forms.TextBox>控件 (`TextBox2`) 到窗体并将其绑定到`LastName`列`Customers`同一数据集中的表。</xref:System.Windows.Forms.TextBox> BindingContext 是感知的第一个绑定 (`TextBox1`到`Customers.FirstName`)，因此它将使用相同<xref:System.Windows.Forms.CurrencyManager>，如两个文本框绑定到同一数据集 (`DataSet1`)。</xref:System.Windows.Forms.CurrencyManager>      ```vb#   TextBox2.DataBindings.Add(&quot;Text&quot;, dataSet1, &quot;Customers.LastName&quot;)      ```      ```c#   textBox2.DataBindings.Add(&quot;Text&quot;, dataSet1, &quot;Customers.LastName&quot;);      ```      ```cpp   textBox2->DataBindings->Add(&quot;Text&quot;, dataSet1, &quot;Customers.LastName&quot;);   ```如果将绑定`TextBox2`到不同的数据集，BindingContext 创建和管理第二个<xref:System.Windows.Forms.CurrencyManager>.</xref:System.Windows.Forms.CurrencyManager>       务必要保持一致有关如何设置<xref:System.Windows.Forms.ListControl.DataSource%2A>和<xref:System.Windows.Forms.ListControl.DisplayMember%2A>属性; 否则，BindingContext 创建多个货币管理器相同的数据集，这会导致错误。</xref:System.Windows.Forms.ListControl.DisplayMember%2A> </xref:System.Windows.Forms.ListControl.DataSource%2A> 下面的代码示例演示了几种方法设置的属性和其关联的 BindingContext 对象。 只要你在整个代码是一致，可以设置使用的以下方法之一的属性。      ```vb#   ComboBox1.DataSource = DataSet1   ComboBox1.DisplayMember = &quot;Customers.FirstName&quot;   Me.BindingContext(dataSet1, &quot;Customers&quot;).Position = 1      ```      ```c#   comboBox1.DataSource = DataSet1;   comboBox1.DisplayMember = &quot;Customers.FirstName&quot;;   this.BindingContext[dataSet1, &quot;Customers&quot;].Position = 1;      ```      ```cpp   comboBox1->DataSource = dataSet1;   comboBox1->DisplayMember = &quot;Customers.FirstName&quot;;   this->BindingContext->get_Item(dataSet1, &quot;Customers&quot;)->Position = 1;      ```      ```vb#   ComboBox1.DataSource = DataSet1.Customers   ComboBox1.DisplayMember = &quot;FirstName&quot;   Me.BindingContext(dataSet1.Customers).Position = 1      ```      ```c#   comboBox1.DataSource = DataSet1.Customers;   comboBox1.DisplayMember = &quot;FirstName&quot;;   this.BindingContext[dataSet1.Customers].Position = 1;      ```      ```cpp   comboBox1->DataSource = dataSet1->Customers;   comboBox1->DisplayMember = &quot;FirstName&quot;;   this->BindingContext->get_Item(dataSet1->Customers)->Position = 1;      ```      > [!NOTE]1> 大多数 Windows 窗体应用程序将通过一种<xref:System.Windows.Forms.BindingSource>。</xref:System.Windows.Forms.BindingSource>绑定 <xref:System.Windows.Forms.BindingSource>组件封装<xref:System.Windows.Forms.CurrencyManager>并公开<xref:System.Windows.Forms.CurrencyManager>编程接口。</xref:System.Windows.Forms.CurrencyManager> </xref:System.Windows.Forms.CurrencyManager> </xref:System.Windows.Forms.BindingSource> 使用时<xref:System.Windows.Forms.BindingSource>绑定，应使用通过公开的成员<xref:System.Windows.Forms.BindingSource>操作&quot;货币&quot;(即， `Position`) 而不是通过 BindingContext。</xref:System.Windows.Forms.BindingSource> </xref:System.Windows.Forms.BindingSource>"
  example:
  - "The following code example creates four <xref:System.Windows.Forms.Binding> objects to bind five controls—a <xref:System.Windows.Forms.DateTimePicker> and four <xref:System.Windows.Forms.TextBox> controls—to several data sources. The BindingContext is then used to get the <xref:System.Windows.Forms.BindingManagerBase> for each data source.  \n  \n [!code-cpp[Classic BindingContext Example#1](~/add/codesnippet/cpp/t-system.windows.forms.b_7_1.cpp)]\n [!code-cs[Classic BindingContext Example#1](~/add/codesnippet/csharp/t-system.windows.forms.b_7_1.cs)]\n [!code-vb[Classic BindingContext Example#1](~/add/codesnippet/visualbasic/t-system.windows.forms.b_7_1.vb)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("CollectionChanged")]

      public class BindingContext : System.Collections.ICollection
  inheritance:
  - System.Object
  implements:
  - System.Collections.ICollection
  inheritedMembers: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.#ctor
  id: '#ctor'
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: BindingContext()
  nameWithType: BindingContext.BindingContext()
  fullName: System.Windows.Forms.BindingContext.BindingContext()
  type: Constructor
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "初始化的新实例<xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref>类。"
  remarks: "如果你想要具有多个<xref:System.Windows.Forms.BindingManagerBase>实例相同的数据源，创建新的<xref:System.Windows.Forms.BindingContext>和将其设置为<xref:System.Windows.Forms.Control.BindingContext%2A>从<xref:System.Windows.Forms.Control>类</xref:System.Windows.Forms.Control>继承的对象属性</xref:System.Windows.Forms.Control.BindingContext%2A></xref:System.Windows.Forms.BindingContext></xref:System.Windows.Forms.BindingManagerBase> 例如，如果你有两个<xref:System.Windows.Forms.BindingManagerBase>对象 (从两个不同<xref:System.Windows.Forms.BindingContext>对象)，你可以设置<xref:System.Windows.Forms.BindingManagerBase.Position%2A>的每个属性<xref:System.Windows.Forms.BindingManagerBase>为不同的值。</xref:System.Windows.Forms.BindingManagerBase> </xref:System.Windows.Forms.BindingManagerBase.Position%2A> </xref:System.Windows.Forms.BindingContext> </xref:System.Windows.Forms.BindingManagerBase> 这将导致每个组的数据绑定控件以显示相同的数据源中的不同值。"
  example:
  - "The following code example creates two new <xref:System.Windows.Forms.BindingContext> objects and assigns each object to the <xref:System.Windows.Forms.BindingContext> property of a <xref:System.Windows.Forms.GroupBox> control. `GroupBox1` contains `TextBox1`, and `GroupBox2` contains `TextBox2` (which is accomplished by using the <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> method of the <xref:System.Windows.Forms.Control.ControlCollection> class). The example then adds <xref:System.Windows.Forms.Binding> objects to the two <xref:System.Windows.Forms.TextBox> controls, binding each to the same data source and data member. The example also shows two event handlers that use the <xref:System.Windows.Forms.BindingContext> from the <xref:System.Windows.Forms.GroupBox> controls to set the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property on different <xref:System.Windows.Forms.BindingManagerBase> objects.  \n  \n [!code-cs[Classic BindingContext.BindingContext Example#1](~/add/codesnippet/csharp/m-system.windows.forms.b_17_1.cs)]\n [!code-cpp[Classic BindingContext.BindingContext Example#1](~/add/codesnippet/cpp/m-system.windows.forms.b_17_1.cpp)]\n [!code-vb[Classic BindingContext.BindingContext Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.b_17_1.vb)]"
  syntax:
    content: public BindingContext ();
    parameters: []
  overload: System.Windows.Forms.BindingContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.Add(System.Object,System.Windows.Forms.BindingManagerBase)
  id: Add(System.Object,System.Windows.Forms.BindingManagerBase)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: Add(Object,BindingManagerBase)
  nameWithType: BindingContext.Add(Object,BindingManagerBase)
  fullName: System.Windows.Forms.BindingContext.Add(Object,BindingManagerBase)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将添加<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>与对集合的特定数据源关联。"
  syntax:
    content: protected void Add (object dataSource, System.Windows.Forms.BindingManagerBase listManager);
    parameters:
    - id: dataSource
      type: System.Object
      description: "<xref:System.Object>与关联<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>。</xref:System.Object>"
    - id: listManager
      type: System.Windows.Forms.BindingManagerBase
      description: "The <xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref> to add."
  overload: System.Windows.Forms.BindingContext.Add*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.AddCore(System.Object,System.Windows.Forms.BindingManagerBase)
  id: AddCore(System.Object,System.Windows.Forms.BindingManagerBase)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: AddCore(Object,BindingManagerBase)
  nameWithType: BindingContext.AddCore(Object,BindingManagerBase)
  fullName: System.Windows.Forms.BindingContext.AddCore(Object,BindingManagerBase)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将添加<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>与对集合的特定数据源关联。"
  syntax:
    content: protected virtual void AddCore (object dataSource, System.Windows.Forms.BindingManagerBase listManager);
    parameters:
    - id: dataSource
      type: System.Object
      description: "与关联的对象<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>。"
    - id: listManager
      type: System.Windows.Forms.BindingManagerBase
      description: "The <xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref> to add."
  overload: System.Windows.Forms.BindingContext.AddCore*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>dataSource</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       <code>listManager</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.Clear
  id: Clear
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: Clear()
  nameWithType: BindingContext.Clear()
  fullName: System.Windows.Forms.BindingContext.Clear()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "清除集合中的任何<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>对象。"
  syntax:
    content: protected void Clear ();
    parameters: []
  overload: System.Windows.Forms.BindingContext.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.ClearCore
  id: ClearCore
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: ClearCore()
  nameWithType: BindingContext.ClearCore()
  fullName: System.Windows.Forms.BindingContext.ClearCore()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "清除集合。"
  syntax:
    content: protected virtual void ClearCore ();
    parameters: []
  overload: System.Windows.Forms.BindingContext.ClearCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.CollectionChanged
  id: CollectionChanged
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: CollectionChanged
  nameWithType: BindingContext.CollectionChanged
  fullName: System.Windows.Forms.BindingContext.CollectionChanged
  type: Event
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "始终引发<xref:System.NotImplementedException>时处理。</xref:System.NotImplementedException>"
  remarks: "CollectionChanged 事件已过时，并始终引发<xref:System.NotImplementedException>时处理。</xref:System.NotImplementedException> 有关处理事件的详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public event System.ComponentModel.CollectionChangeEventHandler CollectionChanged;
    return:
      type: System.ComponentModel.CollectionChangeEventHandler
      description: "要添加。"
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "在所有情况下发生。"
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.Contains(System.Object)
  id: Contains(System.Object)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: Contains(Object)
  nameWithType: BindingContext.Contains(Object)
  fullName: System.Windows.Forms.BindingContext.Contains(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref>包含<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>与指定的数据源相关联。"
  remarks: "请参阅<xref:System.Windows.Forms.Binding>有关列表的可能的数据源和有关创建控件和数据源之间的绑定信息的类。</xref:System.Windows.Forms.Binding>       请参阅<xref:System.Windows.Forms.BindingContext.Item%2A>属性以获取有关返回信息<xref:System.Windows.Forms.BindingManagerBase>仅将数据源使用。</xref:System.Windows.Forms.BindingManagerBase> </xref:System.Windows.Forms.BindingContext.Item%2A>"
  example:
  - "The following code example uses the Contains method to determine whether a <xref:System.Windows.Forms.BindingManagerBase> exists for each control on a form. The example passes each <xref:System.Data.DataTable> in a <xref:System.Data.DataSet> to the method.  \n  \n [!code-vb[Classic BindingContext.Contains Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.b_9_1.vb)]\n [!code-cs[Classic BindingContext.Contains Example#1](~/add/codesnippet/csharp/m-system.windows.forms.b_9_1.cs)]\n [!code-cpp[Classic BindingContext.Contains Example#1](~/add/codesnippet/cpp/m-system.windows.forms.b_9_1.cpp)]"
  syntax:
    content: public bool Contains (object dataSource);
    parameters:
    - id: dataSource
      type: System.Object
      description: "<xref:System.Object>表示数据源。</xref:System.Object>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref>包含指定<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.BindingContext.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.Contains(System.Object,System.String)
  id: Contains(System.Object,System.String)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: Contains(Object,String)
  nameWithType: BindingContext.Contains(Object,String)
  fullName: System.Windows.Forms.BindingContext.Contains(Object,String)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref>包含<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>与指定的数据源和数据成员相关联。"
  remarks: "请参阅<xref:System.Windows.Forms.Binding>类有关的可能的数据源的列表和有关创建控件和数据源之间的绑定信息。</xref:System.Windows.Forms.Binding>       请参阅<xref:System.Windows.Forms.BindingContext.Item%2A>属性以获取有关返回信息<xref:System.Windows.Forms.BindingManagerBase>使用数据源和数据成员。</xref:System.Windows.Forms.BindingManagerBase> </xref:System.Windows.Forms.BindingContext.Item%2A>"
  example:
  - "The following code example uses the <xref:System.Windows.Forms.BindingContext.Contains%2A> method to test whether a specific <xref:System.Windows.Forms.BindingManagerBase> exists before attempting to get it through the <xref:System.Windows.Forms.BindingContext.Item%2A> property.  \n  \n [!code-cs[Classic BindingContext.Contains1 Example#1](~/add/codesnippet/csharp/m-system.windows.forms.b_18_1.cs)]\n [!code-vb[Classic BindingContext.Contains1 Example#1](~/add/codesnippet/visualbasic/m-system.windows.forms.b_18_1.vb)]\n [!code-cpp[Classic BindingContext.Contains1 Example#1](~/add/codesnippet/cpp/m-system.windows.forms.b_18_1.cpp)]"
  syntax:
    content: public bool Contains (object dataSource, string dataMember);
    parameters:
    - id: dataSource
      type: System.Object
      description: "<xref:System.Object>表示数据源。</xref:System.Object>"
    - id: dataMember
      type: System.String
      description: "所需解析为特定的信息<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref>包含指定<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.BindingContext.Contains*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.IsReadOnly
  id: IsReadOnly
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: IsReadOnly
  nameWithType: BindingContext.IsReadOnly
  fullName: System.Windows.Forms.BindingContext.IsReadOnly
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示集合是否只读的。"
  remarks: "此属性派生自<xref:System.Collections.ICollection>，并被重写始终返回`false`。</xref:System.Collections.ICollection>"
  syntax:
    content: public bool IsReadOnly { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该集合为只读的;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.BindingContext.IsReadOnly*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.Item(System.Object)
  id: Item(System.Object)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: Item(Object)
  nameWithType: BindingContext.Item(Object)
  fullName: System.Windows.Forms.BindingContext.Item(Object)
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>指定的数据源与该键相关联。"
  remarks: "使用此重载，如果<xref:System.Windows.Forms.BindingManagerBase>你想不需要导航路径。</xref:System.Windows.Forms.BindingManagerBase> 例如，如果<xref:System.Windows.Forms.BindingManagerBase>管理一套<xref:System.Windows.Forms.Binding>对象使用<xref:System.Collections.ArrayList>或<xref:System.Data.DataTable>作为<xref:System.Windows.Forms.Binding.DataSource%2A>，因此不需要任何导航路径。</xref:System.Windows.Forms.Binding.DataSource%2A> </xref:System.Data.DataTable> </xref:System.Collections.ArrayList> </xref:System.Windows.Forms.Binding> </xref:System.Windows.Forms.BindingManagerBase>      1> [!NOTE]&1;> Item 属性将始终返回<xref:System.Windows.Forms.BindingManagerBase>，并且永远不会返回`null`。</xref:System.Windows.Forms.BindingManagerBase>       请参阅<xref:System.Windows.Forms.Binding>类有关的可能的数据源的列表和有关创建控件和数据源之间的绑定信息。</xref:System.Windows.Forms.Binding>"
  example:
  - "The following code example returns three <xref:System.Windows.Forms.BindingManagerBase> objects: one for a <xref:System.Data.DataView>, one for an <xref:System.Collections.ArrayList>, and one for the <xref:System.Windows.Forms.Binding.DataSource%2A> of a <xref:System.Windows.Forms.Binding> that belongs to a <xref:System.Windows.Forms.TextBox> control.  \n  \n [!code-cs[Classic BindingContext.this Example#1](~/add/codesnippet/csharp/p-system.windows.forms.b_30_1.cs)]\n [!code-cpp[Classic BindingContext.this Example#1](~/add/codesnippet/cpp/p-system.windows.forms.b_30_1.cpp)]\n [!code-vb[Classic BindingContext.this Example#1](~/add/codesnippet/visualbasic/p-system.windows.forms.b_30_1.vb)]"
  syntax:
    content: public System.Windows.Forms.BindingManagerBase this[object dataSource] { get; }
    parameters:
    - id: dataSource
      type: System.Object
      description: "与特定关联的数据源<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>。"
    return:
      type: System.Windows.Forms.BindingManagerBase
      description: "A <xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>为指定的数据源。"
  overload: System.Windows.Forms.BindingContext.Item*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.Item(System.Object,System.String)
  id: Item(System.Object,System.String)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: Item(Object,String)
  nameWithType: BindingContext.Item(Object,String)
  fullName: System.Windows.Forms.BindingContext.Item(Object,String)
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>指定的数据源和数据成员与该键相关联。"
  remarks: "使用此重载时<xref:System.Windows.Forms.BindingManagerBase>管理一套<xref:System.Windows.Forms.Binding>为其数据源包含多个对象的对象。</xref:System.Windows.Forms.Binding> </xref:System.Windows.Forms.BindingManagerBase> 例如，<xref:System.Data.DataSet>可以包含多个<xref:System.Data.DataTable>对象所链接的<xref:System.Data.DataRelation>对象。</xref:System.Data.DataRelation> </xref:System.Data.DataTable> </xref:System.Data.DataSet> 在这种情况下，导航路径需要<xref:System.Windows.Forms.BindingContext>返回正确的<xref:System.Windows.Forms.BindingManagerBase>.</xref:System.Windows.Forms.BindingManagerBase></xref:System.Windows.Forms.BindingContext>启用      1> [!NOTE]&1;> Item 属性将始终返回<xref:System.Windows.Forms.BindingManagerBase>，当`dataMember`参数才有效。</xref:System.Windows.Forms.BindingManagerBase> 它将永远不会返回`null`。       请参阅<xref:System.Windows.Forms.Binding>类有关的可能的数据源的列表和有关创建控件和数据源之间的绑定信息。</xref:System.Windows.Forms.Binding>       如果所需<xref:System.Windows.Forms.BindingManagerBase>管理列表中，导航路径还必须以列表结尾。</xref:System.Windows.Forms.BindingManagerBase> 例如，下面的 C# 代码将绑定<xref:System.Windows.Forms.TextBox>控件添加到订单日期的订单表中。</xref:System.Windows.Forms.TextBox> 导航路径包括<xref:System.Data.DataTable.TableName%2A>、 <xref:System.Data.DataRelation.RelationName%2A>，和<xref:System.Data.DataColumn.ColumnName%2A>.</xref:System.Data.DataColumn.ColumnName%2A> </xref:System.Data.DataRelation.RelationName%2A> </xref:System.Data.DataTable.TableName%2A> 但是，<xref:System.Windows.Forms.BindingManagerBase>必须仅使用检索<xref:System.Data.DataTable.TableName%2A>和<xref:System.Data.DataRelation.RelationName%2A>（解析为一个列表）。</xref:System.Data.DataRelation.RelationName%2A> </xref:System.Data.DataTable.TableName%2A> </xref:System.Windows.Forms.BindingManagerBase>      ```   // The navigation path for a Binding ends with a property.   textBox1.DataBindings.Add   (&quot;Text&quot;, dataSet1, &quot;Customers.custToOrders.OrderDate&quot;);   // The navigation path for the BindingManagerBase ends with a list.   BindingManagerBase bmOrders = this.BindingContext   [dataSet1, &quot;Customers.custToOrders&quot;];   ```当返回的<xref:System.Windows.Forms.BindingManagerBase>，则应该使用相同的数据源作为<xref:System.Windows.Forms.Binding>和修改导航路径。</xref:System.Windows.Forms.Binding> </xref:System.Windows.Forms.BindingManagerBase>       使用<xref:System.Windows.Forms.BindingContext.Contains%2A>方法可确定所需<xref:System.Windows.Forms.BindingManagerBase>已存在。</xref:System.Windows.Forms.BindingManagerBase> </xref:System.Windows.Forms.BindingContext.Contains%2A>"
  example:
  - "The following code example demonstrates how to use the Item to retrieve the <xref:System.Windows.Forms.BindingManagerBase> for a particular binding. It also shows how to handle the <xref:System.Windows.Forms.BindingManagerBase.BindingComplete> event for the <xref:System.Windows.Forms.BindingManagerBase> to ensure multiple controls bound to the same data source remain synchronized when one of the control values is changed. To run this example, paste the code into a Windows Form and call the `InitializeControlsAndData` method from the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.  \n  \n [!code-vb[System.Windows.Forms.BindingSourceMultipleControls#11](~/add/codesnippet/visualbasic/p-system.windows.forms.b_17_1.vb)]\n [!code-cs[System.Windows.Forms.BindingSourceMultipleControls#11](~/add/codesnippet/csharp/p-system.windows.forms.b_17_1.cs)]"
  syntax:
    content: public System.Windows.Forms.BindingManagerBase this[object dataSource, string dataMember] { get; }
    parameters:
    - id: dataSource
      type: System.Object
      description: "与特定关联的数据源<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>。"
    - id: dataMember
      type: System.String
      description: "包含可解析为特定的信息的导航路径<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>。"
    return:
      type: System.Windows.Forms.BindingManagerBase
      description: "<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;> </xref>为指定的数据源和数据成员。"
  overload: System.Windows.Forms.BindingContext.Item*
  exceptions:
  - type: System.Exception
    commentId: T:System.Exception
    description: "指定<code> dataMember </code>的数据源中不存在。"
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)
  id: OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: OnCollectionChanged(CollectionChangeEventArgs)
  nameWithType: BindingContext.OnCollectionChanged(CollectionChangeEventArgs)
  fullName: System.Windows.Forms.BindingContext.OnCollectionChanged(CollectionChangeEventArgs)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "引发<xref href=&quot;System.Windows.Forms.BindingContext.CollectionChanged&quot;></xref>事件。"
  remarks: "引发事件时，将调用事件处理程序，通过委托。 有关详细信息，请参阅[处理和引发事件](~/add/includes/ajax-current-ext-md.md)。       OnCollectionChanged 方法还允许派生的类对事件进行处理而不必附加委托。 这是处理派生类中的事件的首选的技术。"
  syntax:
    content: protected virtual void OnCollectionChanged (System.ComponentModel.CollectionChangeEventArgs ccevent);
    parameters:
    - id: ccevent
      type: System.ComponentModel.CollectionChangeEventArgs
      description: "A <xref href=&quot;System.ComponentModel.CollectionChangeEventArgs&quot;> </xref>包含事件数据。"
  overload: System.Windows.Forms.BindingContext.OnCollectionChanged*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.Remove(System.Object)
  id: Remove(System.Object)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: Remove(Object)
  nameWithType: BindingContext.Remove(Object)
  fullName: System.Windows.Forms.BindingContext.Remove(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "删除<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>与指定的数据源相关联。"
  syntax:
    content: protected void Remove (object dataSource);
    parameters:
    - id: dataSource
      type: System.Object
      description: "与数据源关联<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>删除。"
  overload: System.Windows.Forms.BindingContext.Remove*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.RemoveCore(System.Object)
  id: RemoveCore(System.Object)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: RemoveCore(Object)
  nameWithType: BindingContext.RemoveCore(Object)
  fullName: System.Windows.Forms.BindingContext.RemoveCore(Object)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "删除<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>与指定的数据源相关联。"
  syntax:
    content: protected virtual void RemoveCore (object dataSource);
    parameters:
    - id: dataSource
      type: System.Object
      description: "与数据源关联<xref href=&quot;System.Windows.Forms.BindingManagerBase&quot;></xref>删除。"
  overload: System.Windows.Forms.BindingContext.RemoveCore*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  id: System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  isEii: true
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: BindingContext.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Windows.Forms.BindingContext.System.Collections.ICollection.CopyTo(Array,Int32)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将集合中的元素复制到指定的数组，从集合索引处开始。"
  remarks: ''
  example:
  - >-
    [!code-cs[Classic BindingContext.ICollection.CopyTo Example#1](~/add/codesnippet/csharp/030fb284-4e33-401e-88b7-_1.cs)]
     [!code-cpp[Classic BindingContext.ICollection.CopyTo Example#1](~/add/codesnippet/cpp/030fb284-4e33-401e-88b7-_1.cpp)]
     [!code-vb[Classic BindingContext.ICollection.CopyTo Example#1](~/add/codesnippet/visualbasic/030fb284-4e33-401e-88b7-_1.vb)]
  syntax:
    content: void ICollection.CopyTo (Array ar, int index);
    parameters:
    - id: ar
      type: System.Array
      description: "<xref:System.Array>将复制到。</xref:System.Array>"
    - id: index
      type: System.Int32
      description: "要开始从复制的集合索引。"
  overload: System.Windows.Forms.BindingContext.System#Collections#ICollection#CopyTo*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#Count
  id: System#Collections#ICollection#Count
  isEii: true
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: System.Collections.ICollection.Count
  nameWithType: BindingContext.System.Collections.ICollection.Count
  fullName: System.Windows.Forms.BindingContext.System.Collections.ICollection.Count
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取的总数<xref href=&quot;System.Windows.Forms.CurrencyManager&quot;></xref>管理的对象<xref href=&quot;System.Windows.Forms.BindingContext&quot;> </xref>。"
  remarks: ''
  example:
  - "The following code example returns the number of <xref:System.Windows.Forms.CurrencyManager> objects managed by the <xref:System.Windows.Forms.BindingContext>.  \n  \n [!code-vb[Classic BindingContext.ICollection.Count Example#1](~/add/codesnippet/visualbasic/24e4ccaa-040d-4b41-b443-_1.vb)]\n [!code-cpp[Classic BindingContext.ICollection.Count Example#1](~/add/codesnippet/cpp/24e4ccaa-040d-4b41-b443-_1.cpp)]\n [!code-cs[Classic BindingContext.ICollection.Count Example#1](~/add/codesnippet/csharp/24e4ccaa-040d-4b41-b443-_1.cs)]"
  syntax:
    content: int System.Collections.ICollection.Count { get; }
    return:
      type: System.Int32
      description: "由管理的数据源数<xref href=&quot;System.Windows.Forms.BindingContext&quot;> </xref>。"
  overload: System.Windows.Forms.BindingContext.System#Collections#ICollection#Count*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#IsSynchronized
  id: System#Collections#ICollection#IsSynchronized
  isEii: true
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: BindingContext.System.Collections.ICollection.IsSynchronized
  fullName: System.Windows.Forms.BindingContext.System.Collections.ICollection.IsSynchronized
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取一个值，该值指示是否同步集合。"
  remarks: "此属性派生自<xref:System.Collections.ICollection>，并被重写始终返回`false`。</xref:System.Collections.ICollection>"
  syntax:
    content: bool System.Collections.ICollection.IsSynchronized { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该集合为线程安全的;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Forms.BindingContext.System#Collections#ICollection#IsSynchronized*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#SyncRoot
  id: System#Collections#ICollection#SyncRoot
  isEii: true
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: System.Collections.ICollection.SyncRoot
  nameWithType: BindingContext.System.Collections.ICollection.SyncRoot
  fullName: System.Windows.Forms.BindingContext.System.Collections.ICollection.SyncRoot
  type: Property
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取用于同步 （线程安全） 的对象。"
  syntax:
    content: object System.Collections.ICollection.SyncRoot { get; }
    return:
      type: System.Object
      description: "此属性派生自<xref:System.Collections.ICollection>，并被重写始终返回<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。</xref:System.Collections.ICollection>"
  overload: System.Windows.Forms.BindingContext.System#Collections#ICollection#SyncRoot*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: BindingContext.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Windows.Forms.BindingContext.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "获取集合的枚举数。"
  remarks: "<xref:System.Collections.IEnumerator>返回的方法可用于循环访问该集合由<xref:System.Windows.Forms.BindingContext>.</xref:System.Windows.Forms.BindingContext> IEnumerable.GetEnumerator</xref:System.Collections.IEnumerator>"
  example:
  - "The following code example uses the IEnumerable.GetEnumerator method to return an <xref:System.Collections.IEnumerator> for the <xref:System.Windows.Forms.BindingContext>.  \n  \n [!code-cs[Classic BindingContext.IEnumerable.GetEnumerator Example#1](~/add/codesnippet/csharp/dec1c1ce-5dab-481d-86dd-_1.cs)]\n [!code-cpp[Classic BindingContext.IEnumerable.GetEnumerator Example#1](~/add/codesnippet/cpp/dec1c1ce-5dab-481d-86dd-_1.cpp)]\n [!code-vb[Classic BindingContext.IEnumerable.GetEnumerator Example#1](~/add/codesnippet/visualbasic/dec1c1ce-5dab-481d-86dd-_1.vb)]"
  syntax:
    content: System.Collections.IEnumerator IEnumerable.GetEnumerator ();
    parameters: []
    return:
      type: System.Collections.IEnumerator
      description: "<xref:System.Collections.IEnumerator>找不到。</xref:System.Collections.IEnumerator>"
  overload: System.Windows.Forms.BindingContext.System#Collections#IEnumerable#GetEnumerator*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Forms.BindingContext.UpdateBinding(System.Windows.Forms.BindingContext,System.Windows.Forms.Binding)
  id: UpdateBinding(System.Windows.Forms.BindingContext,System.Windows.Forms.Binding)
  parent: System.Windows.Forms.BindingContext
  langs:
  - csharp
  name: UpdateBinding(BindingContext,Binding)
  nameWithType: BindingContext.UpdateBinding(BindingContext,Binding)
  fullName: System.Windows.Forms.BindingContext.UpdateBinding(BindingContext,Binding)
  type: Method
  assemblies:
  - System.Windows.Forms
  namespace: System.Windows.Forms
  summary: "将相关联<xref href=&quot;System.Windows.Forms.Binding&quot;></xref>用新<xref href=&quot;System.Windows.Forms.BindingContext&quot;> </xref>。"
  remarks: "此方法可用于更新组件实现的绑定<xref:System.Windows.Forms.IBindableComponent>，当其<xref:System.Windows.Forms.BindingContext>更改。</xref:System.Windows.Forms.BindingContext> </xref:System.Windows.Forms.IBindableComponent>"
  syntax:
    content: public static void UpdateBinding (System.Windows.Forms.BindingContext newBindingContext, System.Windows.Forms.Binding binding);
    parameters:
    - id: newBindingContext
      type: System.Windows.Forms.BindingContext
      description: "新<xref href=&quot;System.Windows.Forms.BindingContext&quot;></xref>要与关联<xref href=&quot;System.Windows.Forms.Binding&quot;> </xref>。"
    - id: binding
      type: System.Windows.Forms.Binding
      description: "<xref href=&quot;System.Windows.Forms.Binding&quot;> </xref>要与新关联<xref href=&quot;System.Windows.Forms.BindingContext&quot;> </xref>。"
  overload: System.Windows.Forms.BindingContext.UpdateBinding*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.Exception
  isExternal: true
  name: System.Exception
- uid: System.Windows.Forms.BindingContext.#ctor
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: BindingContext()
  nameWithType: BindingContext.BindingContext()
  fullName: System.Windows.Forms.BindingContext.BindingContext()
- uid: System.Windows.Forms.BindingContext.Add(System.Object,System.Windows.Forms.BindingManagerBase)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Add(Object,BindingManagerBase)
  nameWithType: BindingContext.Add(Object,BindingManagerBase)
  fullName: System.Windows.Forms.BindingContext.Add(Object,BindingManagerBase)
- uid: System.Windows.Forms.BindingManagerBase
  parent: System.Windows.Forms
  isExternal: false
  name: BindingManagerBase
  nameWithType: BindingManagerBase
  fullName: System.Windows.Forms.BindingManagerBase
- uid: System.Windows.Forms.BindingContext.AddCore(System.Object,System.Windows.Forms.BindingManagerBase)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: AddCore(Object,BindingManagerBase)
  nameWithType: BindingContext.AddCore(Object,BindingManagerBase)
  fullName: System.Windows.Forms.BindingContext.AddCore(Object,BindingManagerBase)
- uid: System.Windows.Forms.BindingContext.Clear
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Clear()
  nameWithType: BindingContext.Clear()
  fullName: System.Windows.Forms.BindingContext.Clear()
- uid: System.Windows.Forms.BindingContext.ClearCore
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: ClearCore()
  nameWithType: BindingContext.ClearCore()
  fullName: System.Windows.Forms.BindingContext.ClearCore()
- uid: System.Windows.Forms.BindingContext.CollectionChanged
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: CollectionChanged
  nameWithType: BindingContext.CollectionChanged
  fullName: System.Windows.Forms.BindingContext.CollectionChanged
- uid: System.ComponentModel.CollectionChangeEventHandler
  parent: System.ComponentModel
  isExternal: false
  name: CollectionChangeEventHandler
  nameWithType: CollectionChangeEventHandler
  fullName: System.ComponentModel.CollectionChangeEventHandler
- uid: System.Windows.Forms.BindingContext.Contains(System.Object)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Contains(Object)
  nameWithType: BindingContext.Contains(Object)
  fullName: System.Windows.Forms.BindingContext.Contains(Object)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Forms.BindingContext.Contains(System.Object,System.String)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Contains(Object,String)
  nameWithType: BindingContext.Contains(Object,String)
  fullName: System.Windows.Forms.BindingContext.Contains(Object,String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Windows.Forms.BindingContext.IsReadOnly
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: IsReadOnly
  nameWithType: BindingContext.IsReadOnly
  fullName: System.Windows.Forms.BindingContext.IsReadOnly
- uid: System.Windows.Forms.BindingContext.Item(System.Object)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Item(Object)
  nameWithType: BindingContext.Item(Object)
  fullName: System.Windows.Forms.BindingContext.Item(Object)
- uid: System.Windows.Forms.BindingContext.Item(System.Object,System.String)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Item(Object,String)
  nameWithType: BindingContext.Item(Object,String)
  fullName: System.Windows.Forms.BindingContext.Item(Object,String)
- uid: System.Windows.Forms.BindingContext.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: OnCollectionChanged(CollectionChangeEventArgs)
  nameWithType: BindingContext.OnCollectionChanged(CollectionChangeEventArgs)
  fullName: System.Windows.Forms.BindingContext.OnCollectionChanged(CollectionChangeEventArgs)
- uid: System.ComponentModel.CollectionChangeEventArgs
  parent: System.ComponentModel
  isExternal: false
  name: CollectionChangeEventArgs
  nameWithType: CollectionChangeEventArgs
  fullName: System.ComponentModel.CollectionChangeEventArgs
- uid: System.Windows.Forms.BindingContext.Remove(System.Object)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Remove(Object)
  nameWithType: BindingContext.Remove(Object)
  fullName: System.Windows.Forms.BindingContext.Remove(Object)
- uid: System.Windows.Forms.BindingContext.RemoveCore(System.Object)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: RemoveCore(Object)
  nameWithType: BindingContext.RemoveCore(Object)
  fullName: System.Windows.Forms.BindingContext.RemoveCore(Object)
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#CopyTo(System.Array,System.Int32)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.ICollection.CopyTo(Array,Int32)
  nameWithType: BindingContext.System.Collections.ICollection.CopyTo(Array,Int32)
  fullName: System.Windows.Forms.BindingContext.System.Collections.ICollection.CopyTo(Array,Int32)
- uid: System.Array
  parent: System
  isExternal: true
  name: Array
  nameWithType: Array
  fullName: System.Array
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#Count
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: BindingContext.System.Collections.ICollection.Count
  fullName: System.Windows.Forms.BindingContext.System.Collections.ICollection.Count
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#IsSynchronized
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: BindingContext.System.Collections.ICollection.IsSynchronized
  fullName: System.Windows.Forms.BindingContext.System.Collections.ICollection.IsSynchronized
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#SyncRoot
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: BindingContext.System.Collections.ICollection.SyncRoot
  fullName: System.Windows.Forms.BindingContext.System.Collections.ICollection.SyncRoot
- uid: System.Windows.Forms.BindingContext.System#Collections#IEnumerable#GetEnumerator
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator()
  nameWithType: BindingContext.System.Collections.IEnumerable.GetEnumerator()
  fullName: System.Windows.Forms.BindingContext.System.Collections.IEnumerable.GetEnumerator()
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  nameWithType: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Windows.Forms.BindingContext.UpdateBinding(System.Windows.Forms.BindingContext,System.Windows.Forms.Binding)
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: UpdateBinding(BindingContext,Binding)
  nameWithType: BindingContext.UpdateBinding(BindingContext,Binding)
  fullName: System.Windows.Forms.BindingContext.UpdateBinding(BindingContext,Binding)
- uid: System.Windows.Forms.BindingContext
  parent: System.Windows.Forms
  isExternal: false
  name: BindingContext
  nameWithType: BindingContext
  fullName: System.Windows.Forms.BindingContext
- uid: System.Windows.Forms.Binding
  parent: System.Windows.Forms
  isExternal: false
  name: Binding
  nameWithType: Binding
  fullName: System.Windows.Forms.Binding
- uid: System.Windows.Forms.BindingContext.#ctor*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: BindingContext
  nameWithType: BindingContext.BindingContext
- uid: System.Windows.Forms.BindingContext.Add*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Add
  nameWithType: BindingContext.Add
- uid: System.Windows.Forms.BindingContext.AddCore*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: AddCore
  nameWithType: BindingContext.AddCore
- uid: System.Windows.Forms.BindingContext.Clear*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Clear
  nameWithType: BindingContext.Clear
- uid: System.Windows.Forms.BindingContext.ClearCore*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: ClearCore
  nameWithType: BindingContext.ClearCore
- uid: System.Windows.Forms.BindingContext.Contains*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Contains
  nameWithType: BindingContext.Contains
- uid: System.Windows.Forms.BindingContext.IsReadOnly*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: IsReadOnly
  nameWithType: BindingContext.IsReadOnly
- uid: System.Windows.Forms.BindingContext.Item*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Item
  nameWithType: BindingContext.Item
- uid: System.Windows.Forms.BindingContext.OnCollectionChanged*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: OnCollectionChanged
  nameWithType: BindingContext.OnCollectionChanged
- uid: System.Windows.Forms.BindingContext.Remove*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: Remove
  nameWithType: BindingContext.Remove
- uid: System.Windows.Forms.BindingContext.RemoveCore*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: RemoveCore
  nameWithType: BindingContext.RemoveCore
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#CopyTo*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.ICollection.CopyTo
  nameWithType: BindingContext.System.Collections.ICollection.CopyTo
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#Count*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.ICollection.Count
  nameWithType: BindingContext.System.Collections.ICollection.Count
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#IsSynchronized*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.ICollection.IsSynchronized
  nameWithType: BindingContext.System.Collections.ICollection.IsSynchronized
- uid: System.Windows.Forms.BindingContext.System#Collections#ICollection#SyncRoot*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.ICollection.SyncRoot
  nameWithType: BindingContext.System.Collections.ICollection.SyncRoot
- uid: System.Windows.Forms.BindingContext.System#Collections#IEnumerable#GetEnumerator*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: System.Collections.IEnumerable.GetEnumerator
  nameWithType: BindingContext.System.Collections.IEnumerable.GetEnumerator
- uid: System.Windows.Forms.BindingContext.UpdateBinding*
  parent: System.Windows.Forms.BindingContext
  isExternal: false
  name: UpdateBinding
  nameWithType: BindingContext.UpdateBinding
