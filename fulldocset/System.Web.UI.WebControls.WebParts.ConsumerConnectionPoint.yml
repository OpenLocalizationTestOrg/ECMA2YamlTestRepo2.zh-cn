### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  id: ConsumerConnectionPoint
  children:
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  - System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  langs:
  - csharp
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  type: Class
  summary: "定义使服务器控件充当使用者以形成与提供程序的连接的连接点对象。"
  remarks: "在两个服务器控件之间的每个 Web 部件连接，每个控件必须具有 （以及其他要求） 关联的连接点对象，使它可连接到另一个控件并可提供或使用数据，具体取决于是否将控件指定为提供程序或连接的使用者。 A<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>对象通常包含控件可以如何连接到另一个控件，它可以共享的数据的类型的详细信息。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> 作为在连接中，使用者的控件，其连接点必须是 ConsumerConnectionPoint 对象。 Web 部件连接和连接点上的信息，请参阅下面的另请参阅部分中列出的主题。       若要创建 ConsumerConnectionPoint 对象，几个步骤是必需的︰ 1。  允许使用者控件引用接口实例。 A<xref:System.Web.UI.WebControls.WebParts.WebPart>或其他服务器控件 (将添加到的服务器任何的控件类型<xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase>区域可用) 必须能够使用的特定接口实例的数据。</xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> </xref:System.Web.UI.WebControls.WebParts.WebPart> 控件不需要实现接口，;仅提供程序必须实现它。 使用者也可以使用确切的接口类型提供程序提供服务; 如果不是，请<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象可以用于将数据从提供程序的接口类型的使用者理解的类型转换。</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 启用使用者的典型方法是声明一个私有字段以包含所需的接口类型的引用。      2.  标识一个回调方法。 使用者中的方法必须标识为要与该提供程序建立连接的回调方法。 此方法检索提供程序实现，并将分配它给 （例如） 该私有字段创建第一步中接口的实例。 标识使用者中的回调方法的 Web 部件方法是将添加`ConnectionConsumer`元数据属性 (由定义<xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute>类) 到接收接口实例的方法。</xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> 添加属性后，所需的唯一参数是要使用的使用者连接点的显示名称。 此外可添加可选参数，例如 id。      3.  进程和输出接口实例中的数据。 根据需要对数据执行任何内部处理，然后通常使用者控件将呈现到页的数据。 执行此操作的常用方法是重写控件的<xref:System.Web.UI.Control.OnPreRender%2A>方法。</xref:System.Web.UI.Control.OnPreRender%2A>          1> [!NOTE]&1;> 在过程中发出同步请求，使用者应请求数据直接从提供程序期间或之后<xref:System.Web.UI.Control.PreRender>事件。</xref:System.Web.UI.Control.PreRender> 过程的异步请求，如果在呈现过程中，将提供程序的回调方法未调用的任意位置开发人员可以假定已向使用者发送任何数据。       控件具有已配置为使用者后，该控件可以参与 （假设，提供者控件也配置并且可用） 的连接。 若要创建的网页上的标记的静态声明性的连接，开发人员可以使用`<asp:webpartconnection>`元素。 如果`ConnectionConsumer`标识回叫方法的使用者源代码中的属性指定的 ID 的连接点，则该值必须分配给`ConsumerConnectionPointID`属性中`<asp:webpartconnection>`页面上的元素。 开发人员可能会指定一个使用者连接点的 ID 的原因是在使用者控件中定义的多个连接点。 如果为使用者控件中的使用者连接点不指定 ID，值没有要分配给`ConsumerConnectionPointID`属性页中，因为将使用从获取的默认值创建连接<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>字段。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID>       若要在代码中创建的连接，开发人员必须创建一个新的 ConsumerConnectionPoint 对象通过调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法并传递到该使用者控件，以及 ID 或使用者控件中的定义 ConsumerConnectionPoint 对象的索引的 ID。</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> 返回的 ConsumerConnectionPoint 对象，以及对使用者控件的引用、 提供程序控件和相应的参考<xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>对象，都传递给<xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A>方法来创建一个新<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> </xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> </xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint>       开发人员可以使用使用者连接点，以声明方式或以编程方式建立连接的一部分，但用户可以与使用者连接点建立连接通过用户界面 (UI) 还进行交互。 如果开发人员声明<xref:System.Web.UI.WebControls.WebParts.ConnectionsZone>控件在网页上，它提供对用户创建连接的运行时用户界面。</xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> 如果用户选择提供程序控制通过单击建立连接的起始点作为其连接谓词 （它们还可以选择使用者; 没有任何区别中生成连接），在 UI 中，他们将看到具有的可用使用者连接点 （或如果有多个快照的点） 的显示名称的下拉列表控件提供程序可以发送到的数据。 用户必须选择要建立连接的使用者连接点。       ConsumerConnectionPoint 对象将直接与一个特定的使用者控件相关联，并将连接的详细信息存储在它继承自基的<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>的属性 例如，在继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>属性，使用者连接点保存的界面，它使用的类型。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> 如果提供程序和连接中的使用者同时了解接口类型，这些控件是兼容并能够建立直接连接。 如果提供程序和使用者不能具有相同的接口类型，它们是不兼容，并且必须使用<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>要转换的提供程序连接点对象<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A>到使用者可以使用的类型的属性。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> </xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> 另一个重要的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A>属性，它提供一个友好名称以显示在 UI 中供用户从中选择的使用者连接点时创建连接。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> 显示名称是必需的参数，开发人员添加时`ConnectionConsumer`属性设为使用者控件中的回调方法。 继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A>属性也十分有用，因为上述，由于其提供的唯一标识符的使用者连接点的事件中使用者具有多个连接点。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> 使用者可以有多个 ConsumerConnectionPoint 对象定义中，然后在此情况下，当开发人员将添加`ConnectionConsumer`属性到方法时，它们应指定一个要区分每个连接点的 ID 值。 另一个值得注意的继承的属性是<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A>属性，它指示使用者连接点是否可以同时连接到多个提供程序。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> 此属性值是`false`默认情况下，使用者连接点 (而它默认为`true`提供程序连接点)。       ConsumerConnectionPoint 类会将多个唯一的方法添加到成员它将继承<xref:System.Web.UI.WebControls.WebParts.ConnectionPoint>类。</xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A>方法将调用者自身定义回调方法，以从提供程序检索接口实例。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>方法返回一个布尔值，该值指示连接点是否能够建立连接，基于关联的使用者控件的当前状态。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A>"
  example:
  - "The following code example shows simple ways to create a connection declaratively, programmatically, or through the UI, in each case making use of a consumer connection point.  \n  \n The example has four parts:  \n  \n-   A user control that enables you to change the Web Parts display mode on a page.  \n  \n-   Source code for an interface and two <xref:System.Web.UI.WebControls.WebParts.WebPart> controls acting as the provider and the consumer for a connection.  \n  \n-   A Web page to host all the controls and run the code example.  \n  \n-   An explanation of how to run the example page.  \n  \n The first part of this code example is the user control that enables users to change display modes on a Web page. Save the following source code to an .ascx file, giving it the file name that is assigned to the `Src` attribute of the `Register` directive for this user control, which is near the top of the hosting Web page. For details about display modes and a description of the source code in this control, see [Walkthrough: Changing Display Modes on a Web Parts Page](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_1.ascx)]\n [!code-vb[WebParts_ConnectionPoint_Overview#6](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_1.ascx)]  \n  \n The second part of the code example is the source code for the interface and controls. The source file contains a simple interface named `IZipCode`. There is also a <xref:System.Web.UI.WebControls.WebParts.WebPart> class named `ZipCodeWebPart` that implements the interface and acts as the provider control. The other <xref:System.Web.UI.WebControls.WebParts.WebPart> class is named `WeatherWebPart`, and it acts as the consumer for the connection. This class has a method named `GetZipCode` that gets an instance of the `IZipCode` interface from the provider control. Note that this method is marked as the consumer's connection point method with a `ConnectionConsumer` attribute in its metadata. This is the mechanism for identifying the connection point method in the consumer control.  \n  \n For the code example to run, you must compile this source code. You can compile it explicitly and put the resulting assembly in your Web site's Bin folder or the global assembly cache. Alternatively, you can put the source code in your site's App_Code folder, where it will be dynamically compiled at run time. This code example uses dynamic compilation. For a walkthrough that demonstrates how to compile, see [Walkthrough: Developing and Using a Custom Web Server Control](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_2.vb)]\n [!code-cs[WebParts_ConnectionPoint_Overview#2](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_2.cs)]  \n  \n The third part of the code example is the Web page. Near the top are `Register` directives to register the custom controls that form the connection, and the user control that enables users to change display modes on the page. The connection itself is created declaratively within the `<staticconnections>` element on the page. This demonstrates one way of creating a connection--note the `ConsumerConnectionPointID` attribute in the `<asp:webpartconnection>` element. You can also create the connection programmatically; the code for doing that is in the `Button1_Click` method. In this case, a ConsumerConnectionPoint object is created and then passed to a method that creates the actual connection. Whether the connection is created declaratively or programmatically, connection points must always be specified for both the provider and the consumer. The `Button2_Click` method accesses the <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> objects for both the provider and the consumer, and writes some of their property values to a label in the page.  \n  \n [!code-vb[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_376_3.aspx)]\n [!code-cs[WebParts_ConnectionPoint_Overview#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_376_3.aspx)]  \n  \n After you load the page in a browser, click the **Connection Point Details** button. Information about the provider and consumer connection points established in the declarative connection appears. Next, use the **Display Mode** drop-down control to switch the page into connect mode. On the verbs menu of the **ZIP Code Provider**<xref:System.Web.UI.WebControls.WebParts.WebPart> control (represented by a downward arrow in the title bar), click the connect verb. The connection UI appears, created automatically by the `<asp:connectionszone>` control declared in the page. This is another way of creating a connection (through the UI), along with the declarative and programmatic methods discussed earlier. Click the **Disconnect** button to terminate the existing static connection. Click the **Create a Connection to a Consumer** link. The UI now displays a drop-down control that lists the consumer connection point display name. Select the connection point in the drop-down list, and then click **Connect** to complete the connection. Next, click **Disconnect** again. Click the **Dynamic Connection** button to create a connection programmatically. Use the **Display Mode** control to return the page to browse mode. Click the **Connection Point Details** button again, to indicate details about the consumer connection point object once more.  \n  \n The example has demonstrated establishing a connection and using a consumer connection point in three ways: a static connection declared in the Web page markup; a connection created in code that used a ConsumerConnectionPoint object; and a connection created by a user through the connection UI."
  syntax:
    content: 'public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint'
  inheritance:
  - System.Object
  - System.Web.UI.WebControls.WebParts.ConnectionPoint
  implements: []
  inheritedMembers:
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ControlType
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.GetEnabled(System.Web.UI.Control)
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.ID
  - System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  id: '#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)'
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  type: Constructor
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;></xref>类。"
  remarks: "ConsumerConnectionPoint 构造函数的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类只需调用基构造函数，传递到它的各种参数，并初始化基的类。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       基类构造函数检查大量的连接点的参数，并可能会引发几个例外。 有关可能的异常的列表，请参阅异常部分。       你可以调用 ConsumerConnectionPoint 构造函数来创建您自己的实例的<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 但是，在你所在只需建立的连接并不扩展类的情况下，应调用<xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>方法从提供程序返回连接点对象。</xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A>"
  example:
  - "The following code example demonstrates how to derive from the <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class to create a custom provider connection point.  \n  \n The code example has three parts:  \n  \n-   A source file that contains a provider <xref:System.Web.UI.WebControls.WebParts.WebPart> control, a consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> control, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> object.  \n  \n-   A Web page that hosts the controls in a static connection.  \n  \n-   An explanation of how to run the example code.  \n  \n The first part of the code example is the source for the provider and consumer <xref:System.Web.UI.WebControls.WebParts.WebPart> controls, and a custom <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> class, named `TableConsumerConnectionPoint`. Note that the constructor of the `TableConsumerConnectionPoint` class calls the base constructor, passing it the required parameters as indicated in the Parameters section. Also note that in the `TableConsumer` class, the `SetConnectionInterface` method is specified as the callback method for connections, and the `ConnectionConsumer` attribute declares the custom `TableConsumerConnectionPoint` as a parameter. This demonstrates how to create a custom consumer connection point and then associate it with a consumer control. This example assumes that the source code is dynamically compiled, so you should place the source code file in an App_Code subfolder of your Web application.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_1.cs)]  \n  \n The second part of the code example is the Web page that hosts the custom controls in a static Web parts connection. At the top of the page is a `Register` directive to declare a prefix and the namespace for the custom controls. The connection is declared by using an `<asp:webpartconnection>` element, and the provider and consumer controls are declared within an `<asp:webpartzone>` element.  \n  \n [!code-cs[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/add/codesnippet/csharp/e8ae1165-f151-4ac1-9590-_2.aspx)]  \n  \n Load the page in a browser. The connection between the controls already exists, and the consumer displays the data from the provider, because the connection was declared as a static connection in the page."
  syntax:
    content: public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);
    parameters:
    - id: callbackMethod
      type: System.Reflection.MethodInfo
      description: "将接口实例返回给使用者以建立连接的使用者控件中的方法。"
    - id: interfaceType
      type: System.Type
      description: "<xref:System.Type>的使用者收到来自提供程序的接口。</xref:System.Type>"
    - id: controlType
      type: System.Type
      description: "<xref:System.Type>的使用者连接点与之关联的使用者控件。</xref:System.Type>"
    - id: displayName
      type: System.String
      description: "用户在连接用户界面 (UI) 中显示的使用者连接点友好显示名称。"
    - id: id
      type: System.String
      description: "使用者连接点的唯一标识符。"
    - id: allowsMultipleConnections
      type: System.Boolean
      description: "一个布尔值，该值指示是否可以使用者连接点与提供程序的多个并发连接。"
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>callbackMethod</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>interfaceType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>controlType</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n <code>displayName</code> is <xref uid=\"langword_csharp_null\" name=\"null\" href=\"\"></xref> or an empty string (\"\")."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>controlType </code>不是与使用者控件相同的类型 （或有效的类派生自它）。"
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  id: SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "调用的使用者控件中的回调方法和从提供者控件检索接口实例。"
  remarks: "此方法从提供程序包含数据的使用者控件接收接口实例。       调用 SetObject 方法<xref:System.Web.UI.WebControls.WebParts.WebPartConnection>对象时连接正在激活。</xref:System.Web.UI.WebControls.WebParts.WebPartConnection> 这是一个是初始化的连接和启用共享数据的两个控件的一部分的关键步骤。       连接中的使用者控件必须能够使用相同类型的接口作为提供程序。 如果不存在，会不兼容的控件和<xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>对象必须用于建立连接。</xref:System.Web.UI.WebControls.WebParts.WebPartTransformer>"
  syntax:
    content: public virtual void SetObject (System.Web.UI.Control control, object data);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "与使用者连接点关联的使用者控件。"
    - id: data
      type: System.Object
      description: "从提供程序控制返回的接口实例。"
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>control</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  id: SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  langs:
  - csharp
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  type: Method
  assemblies:
  - System.Web
  namespace: System.Web.UI.WebControls.WebParts
  summary: "确定使用者连接点是否为当前能够建立的连接。"
  remarks: "SupportsConnection 方法实现始终返回`true`在所有情况下，对于<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> 此方法的目的是让该状态检查`control`和`secondaryInterfaces`的某些关键点，以确定是否<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>对象是目前能够创建的连接。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>       可以有方案其中`control`处于状态可能会使其无法建立连接，或在何处`secondaryInterfaces`可以建立连接之前，必须存在。 在这种情况下，开发人员可以继承<xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>类，并重写 SupportsConnection 方法，提供一个自定义实现，以确定何时准备好支持连接的连接点。</xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint>"
  syntax:
    content: public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);
    parameters:
    - id: control
      type: System.Web.UI.Control
      description: "与关联的使用者控件<xref href=&quot;System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint&quot;> </xref>。"
    - id: secondaryInterfaces
      type: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
      description: "A <xref href=&quot;System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&quot;> </xref>的参与连接任何辅助接口。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果连接点当前可以建立连接;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.UI.WebControls.WebParts.ConnectionPoint
  isExternal: false
  name: System.Web.UI.WebControls.WebParts.ConnectionPoint
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.ConsumerConnectionPoint(MethodInfo,Type,Type,String,String,Boolean)
- uid: System.Reflection.MethodInfo
  parent: System.Reflection
  isExternal: true
  name: MethodInfo
  nameWithType: MethodInfo
  fullName: System.Reflection.MethodInfo
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject(Control,Object)
  nameWithType: ConsumerConnectionPoint.SetObject(Control,Object)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(Control,Object)
- uid: System.Web.UI.Control
  parent: System.Web.UI
  isExternal: false
  name: Control
  nameWithType: Control
  fullName: System.Web.UI.Control
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection(Control,ConnectionInterfaceCollection)
  nameWithType: ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
  fullName: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(Control,ConnectionInterfaceCollection)
- uid: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
  parent: System.Web.UI.WebControls.WebParts
  isExternal: false
  name: ConnectionInterfaceCollection
  nameWithType: ConnectionInterfaceCollection
  fullName: System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: ConsumerConnectionPoint
  nameWithType: ConsumerConnectionPoint.ConsumerConnectionPoint
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SetObject
  nameWithType: ConsumerConnectionPoint.SetObject
- uid: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection*
  parent: System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint
  isExternal: false
  name: SupportsConnection
  nameWithType: ConsumerConnectionPoint.SupportsConnection
