### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ManipulationDeltaEventArgs
  id: ManipulationDeltaEventArgs
  children:
  - System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  - System.Windows.Input.ManipulationDeltaEventArgs.Complete
  - System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  - System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  - System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  - System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  - System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  - System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  - System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  - System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  - System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  langs:
  - csharp
  name: ManipulationDeltaEventArgs
  nameWithType: ManipulationDeltaEventArgs
  fullName: System.Windows.Input.ManipulationDeltaEventArgs
  type: Class
  summary: "提供有关数据<xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;></xref>事件。"
  remarks: "ManipulationDeltaEventArgs 类包含有关操作的位置中的更改数据。 <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A>属性包含自上一个发生的更改<xref:System.Windows.UIElement.ManipulationDelta>发生事件。</xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> <xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A>属性包含所发生的当前操作的总更改。</xref:System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation%2A> 你可以使用其中一个属性可以转换操作的对象。       您可以通过调用结束操作<xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A>方法或强制进行惯性通过调用操作<xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A>方法。</xref:System.Windows.Input.ManipulationDeltaEventArgs.StartInertia%2A> </xref:System.Windows.Input.ManipulationDeltaEventArgs.Complete%2A>"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the <xref:System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation%2A> property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. The example also checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: 'public sealed class ManipulationDeltaEventArgs : System.Windows.Input.InputEventArgs'
  inheritance:
  - System.EventArgs
  - System.Windows.RoutedEventArgs
  - System.Windows.Input.InputEventArgs
  implements: []
  inheritedMembers:
  - System.Windows.Input.InputEventArgs.Device
  - System.Windows.Input.InputEventArgs.Timestamp
  - System.Windows.RoutedEventArgs.Handled
  - System.Windows.RoutedEventArgs.OnSetSource(System.Object)
  - System.Windows.RoutedEventArgs.OriginalSource
  - System.Windows.RoutedEventArgs.RoutedEvent
  - System.Windows.RoutedEventArgs.Source
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  id: Cancel
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Cancel()
  nameWithType: ManipulationDeltaEventArgs.Cancel()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "取消操作。"
  remarks: "如果方法成功，则默认<xref:System.Windows.Input.TouchDevice>把以前触控事件做为鼠标或鼠标移动事件的元素且不发生未来操作事件。</xref:System.Windows.Input.TouchDevice> 触摸不能提升为鼠标事件，如果<xref:System.Windows.UIElement.ManipulationCompleted>在惯性期间发生的事件。</xref:System.Windows.UIElement.ManipulationCompleted>"
  syntax:
    content: public bool Cancel ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果已成功取消操作;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete
  id: Complete
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Complete()
  nameWithType: ManipulationDeltaEventArgs.Complete()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "完成而不发生惯性操作。"
  remarks: "你可以调用来结束操作的完整方法。 例如，当对象达到窗口的边缘，你可以调用完成，以防止该对象转出屏幕。"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Complete*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  id: CumulativeManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取当前操作的累计的更改。"
  remarks: "CumulativeManipulation 属性包含所发生的当前操作的总更改。 你可以使用 CumulativeManipulation 转换操作的对象。"
  syntax:
    content: public System.Windows.Input.ManipulationDelta CumulativeManipulation { get; }
    return:
      type: System.Windows.Input.ManipulationDelta
      description: "当前操作的累计的更改。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  id: DeltaManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取当前操作的最新更改。"
  remarks: "DeltaManipulation 属性包含自上一个发生的更改<xref:System.Windows.UIElement.ManipulationDelta>发生事件。</xref:System.Windows.UIElement.ManipulationDelta> 此属性可用于转换操作的对象。"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example uses the DeltaManipulation property to move, resize, and rotate a <xref:System.Windows.Shapes.Rectangle>. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public System.Windows.Input.ManipulationDelta DeltaManipulation { get; }
    return:
      type: System.Windows.Input.ManipulationDelta
      description: "当前操作的最新更改。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  id: InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  syntax:
    content: protected override void InvokeEventHandler (Delegate genericHandler, object genericTarget);
    parameters:
    - id: genericHandler
      type: System.Delegate
      description: "要添加。"
    - id: genericTarget
      type: System.Object
      description: "要添加。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  id: IsInertial
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取一个值，该值指示是否<xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;></xref>在惯性期间发生的事件。"
  remarks: "你可以使用此方法以确定是否<xref:System.Windows.UIElement.ManipulationDelta>事件发生惯性期间或在用户已获得的元素与联系<xref:System.Windows.UIElement.ManipulationDelta>事件。</xref:System.Windows.UIElement.ManipulationDelta> </xref:System.Windows.UIElement.ManipulationDelta>"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event. The example checks whether the <xref:System.Windows.UIElement.ManipulationDelta> event occurred during inertia and whether the rectangle is touching the edge of a window. If those cases are true, the application stops the manipulation to prevent the rectangle from leaving the visible area of the application. This example is part of a larger example in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-cs[BasicManipulation#ManipulationDelta](~/add/codesnippet/csharp/basicmanipulation/mainwindow.xaml.cs#manipulationdelta)]\n [!code-vb[BasicManipulation#ManipulationDelta](~/add/codesnippet/visualbasic/basicmanipulation/mainwindow.xaml.vb#manipulationdelta)]"
  syntax:
    content: public bool IsInertial { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<xref href=&quot;System.Windows.UIElement.ManipulationDelta&quot;></xref>在惯性; 期间发生的事件<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>用户具有与联系时如果发生该事件时<xref href=&quot;System.Windows.UIElement&quot;> </xref>。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  id: ManipulationContainer
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取定义操作的坐标的容器。"
  syntax:
    content: public System.Windows.IInputElement ManipulationContainer { get; }
    return:
      type: System.Windows.IInputElement
      description: "定义操作的坐标的容器。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  id: ManipulationOrigin
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取操作所源自的点。"
  syntax:
    content: public System.Windows.Point ManipulationOrigin { get; }
    return:
      type: System.Windows.Point
      description: "操作产生的点。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  id: Manipulators
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取表示触摸联系人的操作的对象的集合。"
  syntax:
    content: public System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator> Manipulators { get; }
    return:
      type: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}
      description: "表示操作的触摸屏输入联系人对象的集合。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  id: ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: ReportBoundaryFeedback(ManipulationDelta)
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "指定操作已经超出某些边界。"
  remarks: "ReportBoundaryFeedback 方法用于指示元素已移出某些边界。  例如，如果用户移动的元素的边界之外<xref:System.Windows.Window>，你可以调用此方法以报告到窗口。</xref:System.Windows.Window>  当您调用 ReportBoundaryFeedback，<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件发生。</xref:System.Windows.UIElement.ManipulationBoundaryFeedback>  默认情况下，<xref:System.Windows.Window>订阅<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>事件，以便向已达到边界的用户提供可视反馈。</xref:System.Windows.UIElement.ManipulationBoundaryFeedback> </xref:System.Windows.Window>  你可以订阅<xref:System.Windows.UIElement.ManipulationBoundaryFeedback>来实现自定义行为。</xref:System.Windows.UIElement.ManipulationBoundaryFeedback>"
  example:
  - "The following example shows an event handler for the <xref:System.Windows.UIElement.ManipulationDelta> event that calls the ReportBoundaryFeedback method when the user moves the element over the edge of its container.  To test this example, follow the steps in [Walkthrough: Creating Your First Touch Application](~/add/includes/ajax-current-ext-md.md) and replace the code in step 5 with this code.  \n  \n [!code-cs[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/csharp/basicmanipulation/reportboundaryfeedbackexample.xaml.cs#reportboundaryfeedback)]\n [!code-vb[BasicManipulation#ReportBoundaryFeedback](~/add/codesnippet/visualbasic/basicmanipulation/reportboundaryfeedbackexample.xaml.vb#reportboundaryfeedback)]"
  syntax:
    content: public void ReportBoundaryFeedback (System.Windows.Input.ManipulationDelta unusedManipulation);
    parameters:
    - id: unusedManipulation
      type: System.Windows.Input.ManipulationDelta
      description: "表示移到边界外的操作的一部分。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>unusedManipulation</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  id: StartInertia
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: StartInertia()
  nameWithType: ManipulationDeltaEventArgs.StartInertia()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "通过忽略后续的联系人动作数并引发操作启动惯性<xref href=&quot;System.Windows.UIElement.ManipulationInertiaStarting&quot;></xref>事件。"
  syntax:
    content: public void StartInertia ();
    parameters: []
  overload: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*
  exceptions: []
  platform:
  - net462
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  id: Velocities
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  langs:
  - csharp
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  type: Property
  assemblies:
  - PresentationCore
  namespace: System.Windows.Input
  summary: "获取操作的最新更改的速率。"
  syntax:
    content: public System.Windows.Input.ManipulationVelocities Velocities { get; }
    return:
      type: System.Windows.Input.ManipulationVelocities
      description: "对操作的最新更改的速率。"
  overload: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Windows.Input.InputEventArgs
  isExternal: false
  name: System.Windows.Input.InputEventArgs
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Cancel()
  nameWithType: ManipulationDeltaEventArgs.Cancel()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Cancel()
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Complete()
  nameWithType: ManipulationDeltaEventArgs.Complete()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Complete()
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation
- uid: System.Windows.Input.ManipulationDelta
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationDelta
  nameWithType: ManipulationDelta
  fullName: System.Windows.Input.ManipulationDelta
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(System.Delegate,System.Object)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: InvokeEventHandler(Delegate,Object)
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler(Delegate,Object)
- uid: System.Delegate
  parent: System
  isExternal: true
  name: Delegate
  nameWithType: Delegate
  fullName: System.Delegate
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer
- uid: System.Windows.IInputElement
  parent: System.Windows
  isExternal: false
  name: IInputElement
  nameWithType: IInputElement
  fullName: System.Windows.IInputElement
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin
- uid: System.Windows.Point
  parent: System.Windows
  isExternal: false
  name: Point
  nameWithType: Point
  fullName: System.Windows.Point
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators
- uid: System.Collections.Generic.IEnumerable{System.Windows.Input.IManipulator}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<IManipulator>
  nameWithType: IEnumerable<IManipulator>
  fullName: System.Collections.Generic.IEnumerable<System.Windows.Input.IManipulator>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Windows.Input.IManipulator>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Windows.Input.IManipulator
    name: IManipulator
    nameWithType: IManipulator
    fullName: IManipulator
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(System.Windows.Input.ManipulationDelta)
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ReportBoundaryFeedback(ManipulationDelta)
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback(ManipulationDelta)
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: StartInertia()
  nameWithType: ManipulationDeltaEventArgs.StartInertia()
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia()
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
  fullName: System.Windows.Input.ManipulationDeltaEventArgs.Velocities
- uid: System.Windows.Input.ManipulationVelocities
  parent: System.Windows.Input
  isExternal: false
  name: ManipulationVelocities
  nameWithType: ManipulationVelocities
  fullName: System.Windows.Input.ManipulationVelocities
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Cancel*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Cancel
  nameWithType: ManipulationDeltaEventArgs.Cancel
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Complete*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Complete
  nameWithType: ManipulationDeltaEventArgs.Complete
- uid: System.Windows.Input.ManipulationDeltaEventArgs.CumulativeManipulation*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: CumulativeManipulation
  nameWithType: ManipulationDeltaEventArgs.CumulativeManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.DeltaManipulation*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: DeltaManipulation
  nameWithType: ManipulationDeltaEventArgs.DeltaManipulation
- uid: System.Windows.Input.ManipulationDeltaEventArgs.InvokeEventHandler*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: InvokeEventHandler
  nameWithType: ManipulationDeltaEventArgs.InvokeEventHandler
- uid: System.Windows.Input.ManipulationDeltaEventArgs.IsInertial*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: IsInertial
  nameWithType: ManipulationDeltaEventArgs.IsInertial
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationContainer*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationContainer
  nameWithType: ManipulationDeltaEventArgs.ManipulationContainer
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ManipulationOrigin*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ManipulationOrigin
  nameWithType: ManipulationDeltaEventArgs.ManipulationOrigin
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Manipulators*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Manipulators
  nameWithType: ManipulationDeltaEventArgs.Manipulators
- uid: System.Windows.Input.ManipulationDeltaEventArgs.ReportBoundaryFeedback*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: ReportBoundaryFeedback
  nameWithType: ManipulationDeltaEventArgs.ReportBoundaryFeedback
- uid: System.Windows.Input.ManipulationDeltaEventArgs.StartInertia*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: StartInertia
  nameWithType: ManipulationDeltaEventArgs.StartInertia
- uid: System.Windows.Input.ManipulationDeltaEventArgs.Velocities*
  parent: System.Windows.Input.ManipulationDeltaEventArgs
  isExternal: false
  name: Velocities
  nameWithType: ManipulationDeltaEventArgs.Velocities
