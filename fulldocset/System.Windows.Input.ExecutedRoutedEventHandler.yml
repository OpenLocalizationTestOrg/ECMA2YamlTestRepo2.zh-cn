### YamlMime:ManagedReference
items:
- uid: System.Windows.Input.ExecutedRoutedEventHandler
  id: ExecutedRoutedEventHandler
  langs:
  - csharp
  name: ExecutedRoutedEventHandler
  nameWithType: ExecutedRoutedEventHandler
  fullName: System.Windows.Input.ExecutedRoutedEventHandler
  type: Delegate
  summary: "表示将处理的方法<xref href=&quot;System.Windows.Input.CommandBinding.Executed&quot;></xref>和<xref href=&quot;System.Windows.Input.CommandBinding.PreviewExecuted&quot;></xref>路由事件以及相关附加的事件。"
  remarks: "此委托包含一种<xref:System.Windows.Input.RoutedCommand>。</xref:System.Windows.Input.RoutedCommand>实现逻辑  将实施逻辑分离命令中允许的命令从不同源和类型，调用，并且允许的命令逻辑集中。       此委托还用于<xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName>和<xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=fullName>，这是上附加事件<xref:System.Windows.Input.CommandManager>实现很多命令的基础结构的类。</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.PreviewExecuted?displayProperty=fullName> </xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName> 但大多数实际的处理程序将处理<xref:System.Windows.Input.CommandBinding.Executed>从特定的事件<xref:System.Windows.Input.CommandBinding>，而不是在工作<xref:System.Windows.Input.CommandManager>级别。</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.Executed>       在<xref:System.Windows.Input.ExecutedRoutedEventArgs>，以下属性通常是感兴趣的编写事件处理程序为执行命令的结果的路由事件时:-<xref:System.Windows.RoutedEventArgs.Source%2A>报告执行了该命令的目标。</xref:System.Windows.RoutedEventArgs.Source%2A> </xref:System.Windows.Input.ExecutedRoutedEventArgs> 一旦执行该命令，你可以认为的<xref:System.Windows.RoutedEventArgs.Source%2A>的详细信息通常在路由事件条款引发路由的事件的对象。</xref:System.Windows.RoutedEventArgs.Source%2A>      -<xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A>报告执行的命令。</xref:System.Windows.Input.ExecutedRoutedEventArgs.Command%2A> 如果使用命令绑定，并且您编写可能处理多个命令的处理程序，此属性很有用。      -<xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A>报告正在执行的命令传递的任何特定于命令的参数。</xref:System.Windows.Input.ExecutedRoutedEventArgs.Parameter%2A> 并非所有命令都使用或需要特定于命令的参数。      -<xref:System.Windows.RoutedEventArgs.Handled%2A>报告是否由路由不同元素已进行处理源于执行命令的路由的事件。</xref:System.Windows.RoutedEventArgs.Handled%2A> 对于路由的事件处理程序，它是建议的做法，能够处理设置的事件时执行有意义的工作的处理程序<xref:System.Windows.RoutedEventArgs.Handled%2A>到`true`。</xref:System.Windows.RoutedEventArgs.Handled%2A> 这将阻止事件再次沿路由的处理事件的典型处理。 处理路由的事件的详细信息，请参阅[标记作为 Handled，和类处理的路由事件](~/add/includes/ajax-current-ext-md.md)。       此委托还表示处理程序<xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName>和<xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=fullName>，这是上附加事件<xref:System.Windows.Input.CommandManager>实现很多命令的基础结构的类。</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandManager.PreviewExecutedEvent?displayProperty=fullName> </xref:System.Windows.Input.CommandManager.Executed?displayProperty=fullName> 但大多数实际的处理程序将处理<xref:System.Windows.Input.CommandBinding.Executed>从特定的事件<xref:System.Windows.Input.CommandBinding>，而不是在工作<xref:System.Windows.Input.CommandManager>级别。</xref:System.Windows.Input.CommandManager> </xref:System.Windows.Input.CommandBinding> </xref:System.Windows.Input.CommandBinding.Executed>       有关命令的详细信息，请参阅[命令概述](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "This example creates an ExecutedRoutedEventHandler that sets a visual property on the target when the command is executed. The example also includes the <xref:System.Windows.Input.CanExecuteRoutedEventHandler> for the same command.  \n  \n [!code-vb[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/add/codesnippet/visualbasic/custom_routedcommand/window1.xaml.vb#custom_routedcommandhandlers)]\n [!code-cs[Custom_RoutedCommand#Custom_RoutedCommandHandlers](~/add/codesnippet/csharp/Custom_RoutedCommand/Window1.xaml.cs#custom_routedcommandhandlers)]"
  syntax:
    content: public delegate void ExecutedRoutedEventHandler(object sender, ExecutedRoutedEventArgs e);
  inheritance:
  - System.Delegate
  platform:
  - net462
references:
- uid: System.Delegate
  isExternal: false
  name: System.Delegate
