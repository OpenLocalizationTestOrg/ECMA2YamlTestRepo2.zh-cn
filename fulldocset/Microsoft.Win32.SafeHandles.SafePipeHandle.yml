### YamlMime:ManagedReference
items:
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle
  id: SafePipeHandle
  children:
  - Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)
  - Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle
  langs:
  - csharp
  name: SafePipeHandle
  nameWithType: SafePipeHandle
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle
  type: Class
  summary: "表示管道句柄的包装类。"
  remarks: "此类派生自<xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.</xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid> 值为 0 或-1 是无效的管道句柄。      1> [!IMPORTANT]&1;> 此类型实现<xref:System.IDisposable>接口。</xref:System.IDisposable> 完成后使用类型的操作后，你应释放类型直接或间接。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</xref:System.IDisposable.Dispose%2A> 若要间接释放类型，使用一种语言构造如`using`（在 C# 中) 或`Using`（在 Visual Basic 中)。 有关详细信息，请参阅中的&quot;使用实现 IDisposable 的对象&quot;部分<xref:System.IDisposable>接口主题。</xref:System.IDisposable>"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public sealed class SafePipeHandle : Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  inheritance:
  - System.Runtime.InteropServices.SafeHandle
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  implements: []
  inheritedMembers:
  - Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.IsInvalid
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)
  id: '#ctor(System.IntPtr,System.Boolean)'
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  langs:
  - csharp
  name: SafePipeHandle(IntPtr,Boolean)
  nameWithType: SafePipeHandle.SafePipeHandle(IntPtr,Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle.SafePipeHandle(IntPtr,Boolean)
  type: Constructor
  assemblies:
  - System.Core
  namespace: Microsoft.Win32.SafeHandles
  summary: "初始化的新实例<xref href=&quot;Microsoft.Win32.SafeHandles.SafePipeHandle&quot;></xref>类。"
  syntax:
    content: public SafePipeHandle (IntPtr preexistingHandle, bool ownsHandle);
    parameters:
    - id: preexistingHandle
      type: System.IntPtr
      description: "<xref:System.IntPtr>对象，表示要使用的预先存在的句柄。</xref:System.IntPtr>"
    - id: ownsHandle
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要在终止阶段; 可靠地释放句柄<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要阻止可靠释放 （不推荐）。"
  overload: Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor*
  exceptions: []
  platform:
  - net462
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle
  id: ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  langs:
  - csharp
  name: ReleaseHandle()
  nameWithType: SafePipeHandle.ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle()
  type: Method
  assemblies:
  - System.Core
  namespace: Microsoft.Win32.SafeHandles
  syntax:
    content: protected override bool ReleaseHandle ();
    parameters: []
    return:
      type: System.Boolean
      description: "要添加。"
  overload: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle*
  exceptions: []
  platform:
  - net462
references:
- uid: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
  isExternal: false
  name: Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor(System.IntPtr,System.Boolean)
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  isExternal: false
  name: SafePipeHandle(IntPtr,Boolean)
  nameWithType: SafePipeHandle.SafePipeHandle(IntPtr,Boolean)
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle.SafePipeHandle(IntPtr,Boolean)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  isExternal: false
  name: ReleaseHandle()
  nameWithType: SafePipeHandle.ReleaseHandle()
  fullName: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle()
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.#ctor*
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  isExternal: false
  name: SafePipeHandle
  nameWithType: SafePipeHandle.SafePipeHandle
- uid: Microsoft.Win32.SafeHandles.SafePipeHandle.ReleaseHandle*
  parent: Microsoft.Win32.SafeHandles.SafePipeHandle
  isExternal: false
  name: ReleaseHandle
  nameWithType: SafePipeHandle.ReleaseHandle
