### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.CryptoAPITransform
  id: CryptoAPITransform
  children:
  - System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  - System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  - System.Security.Cryptography.CryptoAPITransform.Clear
  - System.Security.Cryptography.CryptoAPITransform.Dispose
  - System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  - System.Security.Cryptography.CryptoAPITransform.KeyHandle
  - System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  - System.Security.Cryptography.CryptoAPITransform.Reset
  - System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  - System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  langs:
  - csharp
  name: CryptoAPITransform
  nameWithType: CryptoAPITransform
  fullName: System.Security.Cryptography.CryptoAPITransform
  type: Class
  summary: "执行加密转换的数据。 此类不能被继承。"
  remarks: ''
  example:
  - "The following code example demonstrates how to use members of the CryptoAPITransform class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/csharp/t-system.security.crypto_128_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/visualbasic/t-system.security.crypto_128_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#1](~/add/codesnippet/cpp/t-system.security.crypto_128_1.cpp)]"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public sealed class CryptoAPITransform : System.Security.Cryptography.ICryptoTransform
  inheritance:
  - System.Object
  implements:
  - System.Security.Cryptography.ICryptoTransform
  inheritedMembers: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  id: CanReuseTransform
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
  fullName: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取一个值，该值指示是否可以重复使用当前转换。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the CanReuseTransform property to determine if the current transform can be reused. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/csharp/p-system.security.crypto_33_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/visualbasic/p-system.security.crypto_33_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#2](~/add/codesnippet/cpp/p-system.security.crypto_33_1.cpp)]"
  syntax:
    content: public bool CanReuseTransform { get; }
    return:
      type: System.Boolean
      description: "Always <xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>."
  overload: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  id: CanTransformMultipleBlocks
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取一个值，该值指示是否可以转换多个块。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the CanTransformMultipleBlocks property to determine if multiple blocks can be transformed. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/csharp/p-system.security.crypto_68_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/visualbasic/p-system.security.crypto_68_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#3](~/add/codesnippet/cpp/p-system.security.crypto_68_1.cpp)]"
  syntax:
    content: public bool CanTransformMultipleBlocks { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果可以转换多个块;，否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.Clear
  id: Clear
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Clear()
  nameWithType: CryptoAPITransform.Clear()
  fullName: System.Security.Cryptography.CryptoAPITransform.Clear()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "释放使用的所有资源<xref href=&quot;System.Security.Cryptography.CryptoAPITransform&quot;></xref>方法。"
  remarks: "此方法是对<xref:System.IDisposable.Dispose%2A?displayProperty=fullName>.</xref:System.IDisposable.Dispose%2A?displayProperty=fullName>的简单调用       调用`Dispose`允许使用的资源<xref:System.Security.Cryptography.CryptoAPITransform>可以重新分配用于其他目的。</xref:System.Security.Cryptography.CryptoAPITransform> 有关详细信息`Dispose`，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to call the Clear method to release the resources used by the current transform. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/csharp/m-system.security.crypto_94_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/visualbasic/m-system.security.crypto_94_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#7](~/add/codesnippet/cpp/m-system.security.crypto_94_1.cpp)]"
  syntax:
    content: public void Clear ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Clear*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose
  id: Dispose
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Dispose()
  nameWithType: CryptoAPITransform.Dispose()
  fullName: System.Security.Cryptography.CryptoAPITransform.Dispose()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "释放当前实例所使用的所有资源<xref href=&quot;System.Security.Cryptography.CryptoAPITransform&quot;></xref>类。"
  remarks: "调用`Dispose`在完成使用<xref:System.Security.Cryptography.CryptoAPITransform>.</xref:System.Security.Cryptography.CryptoAPITransform>时 `Dispose`方法使<xref:System.Security.Cryptography.CryptoAPITransform>中不可用状态。</xref:System.Security.Cryptography.CryptoAPITransform> 在调用`Dispose`，必须释放对所有引用<xref:System.Security.Cryptography.CryptoAPITransform>以便垃圾回收器才能回收的内存，<xref:System.Security.Cryptography.CryptoAPITransform>占用。</xref:System.Security.Cryptography.CryptoAPITransform> </xref:System.Security.Cryptography.CryptoAPITransform>       有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用`Dispose`在发布到<xref:System.Security.Cryptography.CryptoAPITransform>。</xref:System.Security.Cryptography.CryptoAPITransform>最后一个引用之前 否则，它所使用的资源之前，不会释放垃圾回收器调用<xref:System.Security.Cryptography.CryptoAPITransform>对象的`Finalize`方法。</xref:System.Security.Cryptography.CryptoAPITransform>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  id: InputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取输入的块大小。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the InputBlockSize property to retrieve the input block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/csharp/p-system.security.crypto_98_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/visualbasic/p-system.security.crypto_98_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#4](~/add/codesnippet/cpp/p-system.security.crypto_98_1.cpp)]"
  syntax:
    content: public int InputBlockSize { get; }
    return:
      type: System.Int32
      description: "输入的块大小 （字节）。"
  overload: System.Security.Cryptography.CryptoAPITransform.InputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  id: KeyHandle
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
  fullName: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取密钥句柄。"
  syntax:
    content: public IntPtr KeyHandle { get; }
    return:
      type: System.IntPtr
      description: "密钥句柄。"
  overload: System.Security.Cryptography.CryptoAPITransform.KeyHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  id: OutputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "获取输出块大小。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the OutputBlockSize property to retrieve the output block size. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/csharp/p-system.security.crypto_55_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/visualbasic/p-system.security.crypto_55_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#6](~/add/codesnippet/cpp/p-system.security.crypto_55_1.cpp)]"
  syntax:
    content: public int OutputBlockSize { get; }
    return:
      type: System.Int32
      description: "以字节为单位的输出块大小。"
  overload: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.Reset
  id: Reset
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: Reset()
  nameWithType: CryptoAPITransform.Reset()
  fullName: System.Security.Cryptography.CryptoAPITransform.Reset()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "重置的内部状态<xref href=&quot;System.Security.Cryptography.CryptoAPITransform&quot;> </xref> ，以便它可再次执行不同的加密或解密。"
  remarks: "当调用 TransformFinalBlock 时，将自动调用重置方法。 `Reset`时，例如，加密的输入的数据是否垃圾回收，且无法进行解密，不会调用方法。 在这种情况下，将引发异常和`Reset`不调用。 你可以选择手动调用`Reset`在此情况下的方法。"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Security.Cryptography.CryptoAPITransform.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  id: TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "计算输入的字节数组的指定区域转换并将生成的转换复制到输出字节数组的指定区域。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the TransformBlock method to transform the bytes from `currentPosition` in the `sourceBytes` array, writing the bytes to the `targetBytes` array. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/csharp/cb78acec-9bf8-4488-8243-_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/visualbasic/cb78acec-9bf8-4488-8243-_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#8](~/add/codesnippet/cpp/cb78acec-9bf8-4488-8243-_1.cpp)]"
  syntax:
    content: public int TransformBlock (byte[] inputBuffer, int inputOffset, int inputCount, byte[] outputBuffer, int outputOffset);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "在其上执行的操作上输入。"
    - id: inputOffset
      type: System.Int32
      description: "偏移量从此处开始使用中的数据的输入的字节数组。"
    - id: inputCount
      type: System.Int32
      description: "要用作数据的输入的字节数组中的字节数。"
    - id: outputBuffer
      type: System.Byte[]
      description: "要将数据写入到输出。"
    - id: outputOffset
      type: System.Int32
      description: "为输出字节数组，从此处开始写入从数据偏移量。"
    return:
      type: System.Int32
      description: "写入的字节数。"
  overload: System.Security.Cryptography.CryptoAPITransform.TransformBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -or-       The <code>outputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "输入缓冲区的长度小于输入的偏移量和输入的计数的总和。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>inputOffset</code>超出了范围。 此参数要求的非负数。"
  platform:
  - net462
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  id: TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  langs:
  - csharp
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Security.Cryptography
  summary: "计算指定的字节数组的指定区域转换。"
  remarks: ''
  example:
  - "The following code example demonstrates how to call the TransformFinalBlock method to transform the final block of bytes. This code example is part of a larger example provided for the <xref:System.Security.Cryptography.CryptoAPITransform> class.  \n  \n [!code-cs[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/csharp/58c95bd3-abbd-4afc-91d8-_1.cs)]\n [!code-vb[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/visualbasic/58c95bd3-abbd-4afc-91d8-_1.vb)]\n [!code-cpp[System.Security.Cryptography.CryptoAPITransform#9](~/add/codesnippet/cpp/58c95bd3-abbd-4afc-91d8-_1.cpp)]"
  syntax:
    content: public byte[] TransformFinalBlock (byte[] inputBuffer, int inputOffset, int inputCount);
    parameters:
    - id: inputBuffer
      type: System.Byte[]
      description: "在其上执行的操作上输入。"
    - id: inputOffset
      type: System.Int32
      description: "偏移量从此处开始使用中的数据的字节数组。"
    - id: inputCount
      type: System.Int32
      description: "要用作数据的字节数组中的字节数。"
    return:
      type: System.Byte[]
      description: "计算所得的转换。"
  overload: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>inputBuffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> inputOffset </code>参数小于零。       -或- <code> inputCount </code>参数小于零。       -或者-输入缓冲区的长度小于输入的偏移量和输入的计数的总和。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<xref href=&quot;System.Security.Cryptography.PaddingMode&quot;> </xref>填充无效。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> inputOffset </code>参数的值超出范围。 此参数要求的非负数。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
  fullName: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
  fullName: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.CryptoAPITransform.Clear
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Clear()
  nameWithType: CryptoAPITransform.Clear()
  fullName: System.Security.Cryptography.CryptoAPITransform.Clear()
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Dispose()
  nameWithType: CryptoAPITransform.Dispose()
  fullName: System.Security.Cryptography.CryptoAPITransform.Dispose()
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.InputBlockSize
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
  fullName: System.Security.Cryptography.CryptoAPITransform.KeyHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
  fullName: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.Reset
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Reset()
  nameWithType: CryptoAPITransform.Reset()
  fullName: System.Security.Cryptography.CryptoAPITransform.Reset()
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  nameWithType: CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformBlock(Byte[],Int32,Int32,Byte[],Int32)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformFinalBlock(Byte[],Int32,Int32)
  nameWithType: CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.CryptoAPITransform.CanReuseTransform*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanReuseTransform
  nameWithType: CryptoAPITransform.CanReuseTransform
- uid: System.Security.Cryptography.CryptoAPITransform.CanTransformMultipleBlocks*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: CanTransformMultipleBlocks
  nameWithType: CryptoAPITransform.CanTransformMultipleBlocks
- uid: System.Security.Cryptography.CryptoAPITransform.Clear*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Clear
  nameWithType: CryptoAPITransform.Clear
- uid: System.Security.Cryptography.CryptoAPITransform.Dispose*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Dispose
  nameWithType: CryptoAPITransform.Dispose
- uid: System.Security.Cryptography.CryptoAPITransform.InputBlockSize*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: InputBlockSize
  nameWithType: CryptoAPITransform.InputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.KeyHandle*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: KeyHandle
  nameWithType: CryptoAPITransform.KeyHandle
- uid: System.Security.Cryptography.CryptoAPITransform.OutputBlockSize*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: OutputBlockSize
  nameWithType: CryptoAPITransform.OutputBlockSize
- uid: System.Security.Cryptography.CryptoAPITransform.Reset*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: Reset
  nameWithType: CryptoAPITransform.Reset
- uid: System.Security.Cryptography.CryptoAPITransform.TransformBlock*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformBlock
  nameWithType: CryptoAPITransform.TransformBlock
- uid: System.Security.Cryptography.CryptoAPITransform.TransformFinalBlock*
  parent: System.Security.Cryptography.CryptoAPITransform
  isExternal: false
  name: TransformFinalBlock
  nameWithType: CryptoAPITransform.TransformFinalBlock
