### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.PackageStore
  id: PackageStore
  children:
  - System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  - System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  - System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  langs:
  - csharp
  name: PackageStore
  nameWithType: PackageStore
  fullName: System.IO.Packaging.PackageStore
  type: Class
  summary: "表示应用程序特定的集合<xref href=&quot;System.IO.Packaging.Package&quot;></xref>与结合使用的实例<xref href=&quot;System.IO.Packaging.PackWebRequest&quot;> </xref>。"
  remarks: "PackageStore 定义是开放的且应用程序中处于活动状态的引用集合的包。  包添加到 PackageStore 是访问由其密钥的 URI 值。  PackageStore 支持三种常见用途︰ 1。  访问<xref:System.IO.Packaging.PackagePart>通过<xref:System.IO.Packaging.PackWebRequest>.</xref:System.IO.Packaging.PackWebRequest>的数据</xref:System.IO.Packaging.PackagePart>      2.  应用程序获取的实例<xref:System.IO.Packaging.Package>给定包的 URI。</xref:System.IO.Packaging.Package>      3.  创建和存储在<xref:System.IO.MemoryStream>。</xref:System.IO.MemoryStream>访问包       若要提高性能并重复的文件打开/关闭操作的开销降到最低，PackageStore 用来管理的包访问实例<xref:System.IO.Packaging.PackWebRequest>，直接按应用程序。</xref:System.IO.Packaging.PackWebRequest>  在访问在包中，数据时<xref:System.IO.Packaging.Package>地址的请求<xref:System.IO.Packaging.PackagePart><xref:System.IO.Packaging.PackagePart.Uri%2A>首先会检查以确定包是否已定义，而在 PackageStore 中打开。</xref:System.IO.Packaging.PackagePart.Uri%2A> </xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.Package>  如果包定义为在 PackageStore 中打开，则可以直接而无需重复打开和关闭每个请求的包访问请求的部分。       如果你的应用程序打开的包<xref:System.IO.Packaging.Package.Open%2A?displayProperty=fullName>，<xref:System.IO.Packaging.PackageStore.AddPackage%2A>可以调用以将包添加到 PackageStore。</xref:System.IO.Packaging.PackageStore.AddPackage%2A> </xref:System.IO.Packaging.Package.Open%2A?displayProperty=fullName>  <xref:System.IO.Packaging.PackageStore.RemovePackage%2A>应更高版本调用以从之前调用<xref:System.IO.Packaging.Package.Close%2A?displayProperty=fullName>.</xref:System.IO.Packaging.Package.Close%2A?displayProperty=fullName> PackageStore 删除包</xref:System.IO.Packaging.PackageStore.RemovePackage%2A>       使用 XPS 包打开<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>构造函数将自动添加和删除从 PackageStore，创建和释放文档时。</xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>  (不需要调用<xref:System.IO.Packaging.PackageStore.AddPackage%2A>或<xref:System.IO.Packaging.PackageStore.RemovePackage%2A>单独打开的 XPS 包与<xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A>构造函数。)</xref:System.Windows.Xps.Packaging.XpsDocument.%23ctor%2A> </xref:System.IO.Packaging.PackageStore.RemovePackage%2A> </xref:System.IO.Packaging.PackageStore.AddPackage%2A>     通过 PackageStore 访问包的文件 I/O 权限保持为打开状态时为包设置的 I/O 权限相同。  PackageStore 仅提供对已添加存储的包的引用。  它是由应用程序正确打开、 更新和关闭每个包。       结合使用时，可以在多线程环境中访问程序包添加到 PackageStore[!INCLUDE[TLA2#tla_xaml](~/add/includes/tla2sharptla-xaml-md.md)]如<xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>.</xref:System.Windows.Markup.XamlReader.Load%2A?displayProperty=fullName>分析器  在多线程环境操作时，应用程序必须已锁定之前访问包。"
  syntax:
    content: >-
      [System.Security.SecurityCritical(System.Security.SecurityCriticalScope.Everything)]

      public static class PackageStore
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  id: AddPackage(System.Uri,System.IO.Packaging.Package)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: AddPackage(Uri,Package)
  nameWithType: PackageStore.AddPackage(Uri,Package)
  fullName: System.IO.Packaging.PackageStore.AddPackage(Uri,Package)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "将添加<xref href=&quot;System.IO.Packaging.Package&quot;></xref>到存储区。"
  remarks: "`packageUri`定义包的密钥进行比较时调用<xref:System.IO.Packaging.PackWebRequest>.</xref:System.IO.Packaging.PackWebRequest>的 URI       如果`packageUri`匹配项<xref:System.IO.Packaging.PackagePart.Uri%2A><xref:System.IO.Packaging.PackagePart>的<xref:System.IO.Packaging.PackWebRequest>调用，<xref:System.IO.Packaging.PackageStore>用于访问请求的部件</xref:System.IO.Packaging.PackageStore>中定义的包</xref:System.IO.Packaging.PackWebRequest>中</xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.PackagePart.Uri%2A>       如果`packageUri`<xref:System.IO.Packaging.PackagePart.Uri%2A><xref:System.IO.Packaging.PackagePart>中<xref:System.IO.Packaging.PackWebRequest>调用，用指定的 URI 的包打开访问请求的部件</xref:System.IO.Packaging.PackWebRequest></xref:System.IO.Packaging.PackagePart></xref:System.IO.Packaging.PackagePart.Uri%2A>不匹配       **安全说明**此方法要求<xref:System.Security.Permissions.EnvironmentPermission>为所有自定义<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 类型。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package> </xref:System.Security.Permissions.EnvironmentPermission>"
  example:
  - "The following example shows how to use the AddPackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewDecrypt](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewdecrypt)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewDecrypt](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewdecrypt)]"
  syntax:
    content: public static void AddPackage (Uri uri, System.IO.Packaging.Package package);
    parameters:
    - id: uri
      type: System.Uri
      description: "密钥[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的`package`中的比较<xref href=&quot;System.IO.Packaging.PackWebRequest&quot;> </xref>。"
    - id: package
      type: System.IO.Packaging.Package
      description: "要添加到存储的包。"
  overload: System.IO.Packaging.PackageStore.AddPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>package</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>是无效的包[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "具有指定的包<code> packageUri </code>已在存储中。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  id: GetPackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: GetPackage(Uri)
  nameWithType: PackageStore.GetPackage(Uri)
  fullName: System.IO.Packaging.PackageStore.GetPackage(Uri)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "返回<xref href=&quot;System.IO.Packaging.Package&quot;></xref>与指定[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]从存储区。"
  remarks: "`packageUri`匹配的 Uri 中指定<xref:System.IO.Packaging.PackageStore.AddPackage%2A>方法调用。</xref:System.IO.Packaging.PackageStore.AddPackage%2A>       **安全说明**此方法要求<xref:System.Security.Permissions.EnvironmentPermission>为所有自定义<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 类型。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package> </xref:System.Security.Permissions.EnvironmentPermission>"
  example:
  - "The following example shows how to use the GetPackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewopendoc)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewOpenDoc](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewopendoc)]"
  syntax:
    content: public static System.IO.Packaging.Package GetPackage (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]要返回的包。"
    return:
      type: System.IO.Packaging.Package
      description: "与指定包<code> packageUri </code>; 或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果指定的包<code> packageUri </code>不是存储区。"
  overload: System.IO.Packaging.PackageStore.GetPackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>packageUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>是无效的包[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。"
  platform:
  - net462
- uid: System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  id: RemovePackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  langs:
  - csharp
  name: RemovePackage(Uri)
  nameWithType: PackageStore.RemovePackage(Uri)
  fullName: System.IO.Packaging.PackageStore.RemovePackage(Uri)
  type: Method
  assemblies:
  - PresentationCore
  namespace: System.IO.Packaging
  summary: "删除<xref href=&quot;System.IO.Packaging.Package&quot;></xref>与指定[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]从存储区。"
  remarks: "`packageUri`匹配的 Uri 中指定<xref:System.IO.Packaging.PackageStore.AddPackage%2A>方法调用。</xref:System.IO.Packaging.PackageStore.AddPackage%2A>       **安全说明**此方法要求<xref:System.Security.Permissions.EnvironmentPermission>为所有自定义<xref:System.IO.Packaging.Package>(非<xref:System.IO.Packaging.ZipPackage>) 类型。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package> </xref:System.Security.Permissions.EnvironmentPermission>"
  example:
  - "The following example shows how to use the RemovePackage method.  \n  \n [!code-vb[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/add/codesnippet/visualbasic/rmpackageviewer/window1.xaml.vb#rmpkgviewclosedoc)]\n [!code-cs[RightsManagedPackageViewer#RmPkgViewCloseDoc](~/add/codesnippet/csharp/RmPackageViewer/Window1.xaml.cs#rmpkgviewclosedoc)]"
  syntax:
    content: public static void RemovePackage (Uri uri);
    parameters:
    - id: uri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]的要删除的包。"
  overload: System.IO.Packaging.PackageStore.RemovePackage*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>packageUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>packageUri</code>是无效的包[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.IO.Packaging.PackageStore.AddPackage(System.Uri,System.IO.Packaging.Package)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: AddPackage(Uri,Package)
  nameWithType: PackageStore.AddPackage(Uri,Package)
  fullName: System.IO.Packaging.PackageStore.AddPackage(Uri,Package)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Packaging.PackageStore.GetPackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: GetPackage(Uri)
  nameWithType: PackageStore.GetPackage(Uri)
  fullName: System.IO.Packaging.PackageStore.GetPackage(Uri)
- uid: System.IO.Packaging.PackageStore.RemovePackage(System.Uri)
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: RemovePackage(Uri)
  nameWithType: PackageStore.RemovePackage(Uri)
  fullName: System.IO.Packaging.PackageStore.RemovePackage(Uri)
- uid: System.IO.Packaging.PackageStore.AddPackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: AddPackage
  nameWithType: PackageStore.AddPackage
- uid: System.IO.Packaging.PackageStore.GetPackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: GetPackage
  nameWithType: PackageStore.GetPackage
- uid: System.IO.Packaging.PackageStore.RemovePackage*
  parent: System.IO.Packaging.PackageStore
  isExternal: false
  name: RemovePackage
  nameWithType: PackageStore.RemovePackage
