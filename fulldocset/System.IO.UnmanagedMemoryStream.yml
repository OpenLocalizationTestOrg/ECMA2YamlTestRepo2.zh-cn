### YamlMime:ManagedReference
items:
- uid: System.IO.UnmanagedMemoryStream
  id: UnmanagedMemoryStream
  children:
  - System.IO.UnmanagedMemoryStream.#ctor
  - System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.CanRead
  - System.IO.UnmanagedMemoryStream.CanSeek
  - System.IO.UnmanagedMemoryStream.CanWrite
  - System.IO.UnmanagedMemoryStream.Capacity
  - System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  - System.IO.UnmanagedMemoryStream.Flush
  - System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  - System.IO.UnmanagedMemoryStream.Length
  - System.IO.UnmanagedMemoryStream.Position
  - System.IO.UnmanagedMemoryStream.PositionPointer
  - System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.ReadByte
  - System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  - System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  - System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  - System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  - System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
  langs:
  - csharp
  name: UnmanagedMemoryStream
  nameWithType: UnmanagedMemoryStream
  fullName: System.IO.UnmanagedMemoryStream
  type: Class
  summary: "提供从托管代码访问非托管内存块的能力。"
  remarks: "此类支持对非托管内存使用现有的基于流的模型的访问，并且不需要的非托管内存中的内容复制到堆。      1> [!IMPORTANT]&1;> 此类型实现<xref:System.IDisposable>接口。</xref:System.IDisposable> 完成后使用类型的操作后，你应释放类型直接或间接。 若要直接释放类型，调用其<xref:System.IDisposable.Dispose%2A>中的方法`try` / `catch`块。</xref:System.IDisposable.Dispose%2A> 若要间接释放类型，使用一种语言构造如`using`（在 C# 中) 或`Using`（在 Visual Basic 中)。 有关详细信息，请参阅中的&quot;使用实现 IDisposable 的对象&quot;部分<xref:System.IDisposable>接口主题。</xref:System.IDisposable>"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the UnmanagedMemoryStream class.  A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream#1](~/add/codesnippet/csharp/t-system.io.unmanagedmem_1.cs)]"
  syntax:
    content: 'public class UnmanagedMemoryStream : System.IO.Stream'
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.#ctor
  id: '#ctor'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: UnmanagedMemoryStream()
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream()
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream()
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新实例<xref href=&quot;System.IO.UnmanagedMemoryStream&quot;></xref>类。"
  syntax:
    content: protected UnmanagedMemoryStream ();
    parameters: []
  overload: System.IO.UnmanagedMemoryStream.#ctor*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有所要求的权限。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
  id: '#ctor(System.Byte*,System.Int64)'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: UnmanagedMemoryStream(Byte*,Int64)
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*,Int64)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*,Int64)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新实例<xref href=&quot;System.IO.UnmanagedMemoryStream&quot;></xref>类使用指定的位置和内存长度。"
  remarks: "此构造函数创建的新实例<xref:System.IO.UnmanagedMemoryStream>类，并且默认情况下设置<xref:System.IO.UnmanagedMemoryStream.CanWrite%2A>属性`false`和<xref:System.IO.UnmanagedMemoryStream.CanRead%2A>属性`true`。</xref:System.IO.UnmanagedMemoryStream.CanRead%2A> </xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> </xref:System.IO.UnmanagedMemoryStream> <xref:System.IO.UnmanagedMemoryStream.Length%2A>属性设置为的值`length`参数并且不能更改。</xref:System.IO.UnmanagedMemoryStream.Length%2A>"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream_Example#00](~/add/codesnippet/csharp/m-system.io.unmanagedmem_4_1.cs)]"
  syntax:
    content: public UnmanagedMemoryStream (byte* pointer, long length);
    parameters:
    - id: pointer
      type: System.Byte*
      description: "指向非托管的内存位置的指针。"
    - id: length
      type: System.Int64
      description: "若要使用的内存的长度。"
  overload: System.IO.UnmanagedMemoryStream.#ctor*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有所要求的权限。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>pointer</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>length</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>length</code> is large enough to cause an overflow."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: UnmanagedMemoryStream(SafeBuffer,Int64,Int64)
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer,Int64,Int64)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer,Int64,Int64)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新实例<xref href=&quot;System.IO.UnmanagedMemoryStream&quot;></xref>具有指定的偏移量和长度的安全缓冲区中的类。"
  syntax:
    content: public UnmanagedMemoryStream (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "要包含非托管的内存流的缓冲区。"
    - id: offset
      type: System.Int64
      description: "中用于启动非托管的内存流缓冲区的字节位置。"
    - id: length
      type: System.Int64
      description: "非托管的内存流的长度。"
  overload: System.IO.UnmanagedMemoryStream.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  id: '#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: UnmanagedMemoryStream(Byte*,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*,Int64,Int64,FileAccess)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新实例<xref href=&quot;System.IO.UnmanagedMemoryStream&quot;></xref>类使用指定的位置、 内存长度、 内存的总量和文件访问值。"
  remarks: "`length`参数定义中使用的当前内存量。 如果读取或追加到流中，数据`length`值应该等于从读取的流中的有效数据量或保留。 写入流，则此值应为零。       `capacity`参数指示可用的总内存量。 此值可以描述的长度超过指定的长度的区域，或指示可以追加到的区域。 任何尝试写入超出此值将失败。       `access`参数集<xref:System.IO.UnmanagedMemoryStream.CanRead%2A>，和<xref:System.IO.UnmanagedMemoryStream.CanWrite%2A>属性。</xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> </xref:System.IO.UnmanagedMemoryStream.CanRead%2A> 请注意该指定<xref:System.IO.FileAccess>不保证的流将是可写。</xref:System.IO.FileAccess> 访问参数允许实施者创建其实现可以匹配实际流公开的对象。"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class.  A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream#1](~/add/codesnippet/csharp/62930bcb-5dff-4d38-8341-_1.cs)]"
  syntax:
    content: public UnmanagedMemoryStream (byte* pointer, long length, long capacity, System.IO.FileAccess access);
    parameters:
    - id: pointer
      type: System.Byte*
      description: "指向非托管的内存位置的指针。"
    - id: length
      type: System.Int64
      description: "若要使用的内存的长度。"
    - id: capacity
      type: System.Int64
      description: "分配给流的内存总量。"
    - id: access
      type: System.IO.FileAccess
      description: "之一<xref href=&quot;System.IO.FileAccess&quot;></xref>值。"
  overload: System.IO.UnmanagedMemoryStream.#ctor*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有所要求的权限。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>pointer</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>length</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>capacity</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>length</code> value is greater than the <code>capacity</code> value."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: '#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)'
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: UnmanagedMemoryStream(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer,Int64,Int64,FileAccess)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新实例<xref href=&quot;System.IO.UnmanagedMemoryStream&quot;></xref>在指定的偏移量、 长度，具有的安全缓冲区中类和文件访问。"
  syntax:
    content: public UnmanagedMemoryStream (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "要包含非托管的内存流的缓冲区。"
    - id: offset
      type: System.Int64
      description: "中用于启动非托管的内存流缓冲区的字节位置。"
    - id: length
      type: System.Int64
      description: "非托管的内存流的长度。"
    - id: access
      type: System.IO.FileAccess
      description: "文件访问权限的非托管的内存流的模式。"
  overload: System.IO.UnmanagedMemoryStream.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.CanRead
  id: CanRead
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: CanRead
  nameWithType: UnmanagedMemoryStream.CanRead
  fullName: System.IO.UnmanagedMemoryStream.CanRead
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "获取一个值，该值指示流是否支持读取。"
  remarks: "此属性指示当前的流对象是否支持读取。"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class. In this example, an <xref:System.IO.UnmanagedMemoryStream> object is passed to a method which checks the CanRead property before attempting to display the contents to the console.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream_Example#00](~/add/codesnippet/csharp/p-system.io.unmanagedmem_2_1.cs)]"
  syntax:
    content: public override bool CanRead { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果对象由构造函数创建<code> access </code>不包括读取流的参数和器关闭流; 否则为如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.UnmanagedMemoryStream.CanRead*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.CanSeek
  id: CanSeek
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: CanSeek
  nameWithType: UnmanagedMemoryStream.CanSeek
  fullName: System.IO.UnmanagedMemoryStream.CanSeek
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "获取一个值，该值指示流是否支持查找。"
  remarks: "此属性指示当前的流对象是否支持查找。"
  syntax:
    content: public override bool CanSeek { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果流已关闭;否则为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.UnmanagedMemoryStream.CanSeek*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.CanWrite
  id: CanWrite
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: CanWrite
  nameWithType: UnmanagedMemoryStream.CanWrite
  fullName: System.IO.UnmanagedMemoryStream.CanWrite
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "获取一个值，该值指示流是否支持写入。"
  remarks: "此属性指示当前的流对象是否支持写入。"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class. In this example, an <xref:System.IO.UnmanagedMemoryStream> object is passed to a method which checks the CanWrite property before attempting to write the data to the stream.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream_Example#00](~/add/codesnippet/csharp/p-system.io.unmanagedmem_0_1.cs)]"
  syntax:
    content: public override bool CanWrite { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>如果对象由构造函数创建<code> access </code>支持写入，或者由不带参数，构造函数的参数值或如果器关闭流; 否则为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.UnmanagedMemoryStream.CanWrite*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Capacity
  id: Capacity
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Capacity
  nameWithType: UnmanagedMemoryStream.Capacity
  fullName: System.IO.UnmanagedMemoryStream.Capacity
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "获取流长度 （大小） 或分配给流 （容量） 的内存总量。"
  remarks: "此属性返回`capacity`为构造函数提供的值。 如果没有`capacity`初始化流时指定的值，则此属性返回的流长度。"
  syntax:
    content: public long Capacity { get; }
    return:
      type: System.Int64
      description: "大小或容量的流。"
  overload: System.IO.UnmanagedMemoryStream.Capacity*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: UnmanagedMemoryStream.Dispose(Boolean)
  fullName: System.IO.UnmanagedMemoryStream.Dispose(Boolean)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "释放由非托管的资源<xref href=&quot;System.IO.UnmanagedMemoryStream&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.ComponentModel.Component.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.ComponentModel.Component.Dispose%2A> <xref:System.ComponentModel.Component.Dispose%2A>调用与受保护的 Dispose 方法`disposing`参数设置为`true`。</xref:System.ComponentModel.Component.Dispose%2A> <xref:System.Object.Finalize%2A>调用与 Dispose`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.IO.UnmanagedMemoryStream>引用。</xref:System.IO.UnmanagedMemoryStream> 此方法调用<xref:System.ComponentModel.Component.Dispose%2A>每个引用对象的方法。</xref:System.ComponentModel.Component.Dispose%2A>"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.IO.UnmanagedMemoryStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Flush
  id: Flush
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Flush()
  nameWithType: UnmanagedMemoryStream.Flush()
  fullName: System.IO.UnmanagedMemoryStream.Flush()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "重写<xref:System.IO.Stream.Flush*>方法，以便不执行任何操作。</xref:System.IO.Stream.Flush*>"
  remarks: "此方法的此类不执行任何操作，但包含<xref:System.IO.Stream>基本类。</xref:System.IO.Stream> 由于任何数据写入 RAM，此方法是冗余的。"
  syntax:
    content: public override void Flush ();
    parameters: []
  overload: System.IO.UnmanagedMemoryStream.Flush*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  id: FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: FlushAsync(CancellationToken)
  nameWithType: UnmanagedMemoryStream.FlushAsync(CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.FlushAsync(CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "重写&lt;xref:System.IO.Stream.FlushAsync%2A?displayProperty=fullName&gt;方法，以便该操作已取消，如果指定，但不执行任何其他操作。       可以开始于[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]"
  remarks: "如果未取消该操作，<xref:System.IO.UnmanagedMemoryStream>调用<xref:System.IO.UnmanagedMemoryStream.Flush%2A>方法，这意味着不执行任何操作。</xref:System.IO.UnmanagedMemoryStream.Flush%2A> </xref:System.IO.UnmanagedMemoryStream>"
  syntax:
    content: public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "要监视取消请求的标记。 默认值为<xref:System.Threading.CancellationToken.None*>。</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步刷新操作的任务。"
  overload: System.IO.UnmanagedMemoryStream.FlushAsync*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  id: Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Initialize(Byte*,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryStream.Initialize(Byte*,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.Initialize(Byte*,Int64,Int64,FileAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新实例<xref href=&quot;System.IO.UnmanagedMemoryStream&quot;></xref>使用指向非托管的内存位置的类。"
  remarks: "此方法相当于<xref:System.IO.UnmanagedMemoryStream.%23ctor%2A>构造函数。</xref:System.IO.UnmanagedMemoryStream.%23ctor%2A> 它支持需要初始化之前设置流变量的指针，因此，不能调用参数化构造函数的方法。 此类方法应使用默认构造函数，<xref:System.IO.UnmanagedMemoryStream.%23ctor>初始化指针，，然后调用初始化方法。</xref:System.IO.UnmanagedMemoryStream.%23ctor>"
  syntax:
    content: protected void Initialize (byte* pointer, long length, long capacity, System.IO.FileAccess access);
    parameters:
    - id: pointer
      type: System.Byte*
      description: "指向非托管的内存位置的指针。"
    - id: length
      type: System.Int64
      description: "若要使用的内存的长度。"
    - id: capacity
      type: System.Int64
      description: "分配给流的内存总量。"
    - id: access
      type: System.IO.FileAccess
      description: "之一<xref href=&quot;System.IO.FileAccess&quot;></xref>值。"
  overload: System.IO.UnmanagedMemoryStream.Initialize*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "用户没有所要求的权限。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>pointer</code> value is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>length</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>capacity</code> value is less than zero.  \n  \n \\- or -  \n  \n The <code>length</code> value is large enough to cause an overflow."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  id: Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Initialize(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryStream.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "初始化的新实例<xref href=&quot;System.IO.UnmanagedMemoryStream&quot;></xref>在指定的偏移量、 长度，具有的安全缓冲区中类和文件访问。"
  syntax:
    content: protected void Initialize (System.Runtime.InteropServices.SafeBuffer buffer, long offset, long length, System.IO.FileAccess access);
    parameters:
    - id: buffer
      type: System.Runtime.InteropServices.SafeBuffer
      description: "要包含非托管的内存流的缓冲区。"
    - id: offset
      type: System.Int64
      description: "中用于启动非托管的内存流缓冲区的字节位置。"
    - id: length
      type: System.Int64
      description: "非托管的内存流的长度。"
    - id: access
      type: System.IO.FileAccess
      description: "文件访问权限的非托管的内存流的模式。"
  overload: System.IO.UnmanagedMemoryStream.Initialize*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Length
  id: Length
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Length
  nameWithType: UnmanagedMemoryStream.Length
  fullName: System.IO.UnmanagedMemoryStream.Length
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "在流中获取数据的长度。"
  remarks: "如果流已初始化，因为保持不变，此属性将返回提供给构造函数的长度值。 如果发生了更改写入流，此属性将反映对数据的长度的任何更改。"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream_Example#00](~/add/codesnippet/csharp/p-system.io.unmanagedmem_1_1.cs)]"
  syntax:
    content: public override long Length { get; }
    return:
      type: System.Int64
      description: "流中的数据的长度。"
  overload: System.IO.UnmanagedMemoryStream.Length*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Position
  id: Position
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Position
  nameWithType: UnmanagedMemoryStream.Position
  fullName: System.IO.UnmanagedMemoryStream.Position
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "获取或设置流中的当前位置。"
  remarks: "初始化流时，此属性设置为零。       虽然你可以设置流的容量超出流的当前位置，你将无法访问该区域使用<xref:System.IO.UnmanagedMemoryStream.Read%2A>和<xref:System.IO.UnmanagedMemoryStream.Write%2A>方法。</xref:System.IO.UnmanagedMemoryStream.Write%2A> </xref:System.IO.UnmanagedMemoryStream.Read%2A> <xref:System.IO.UnmanagedMemoryStream.Read%2A>将返回 0，<xref:System.IO.UnmanagedMemoryStream.Write%2A>将引发一种<xref:System.NotSupportedException>。</xref:System.NotSupportedException> </xref:System.IO.UnmanagedMemoryStream.Write%2A></xref:System.IO.UnmanagedMemoryStream.Read%2A> 此支持是主要用于与基本的流操作的设计和代码兼容性。"
  syntax:
    content: public override long Position { get; set; }
    return:
      type: System.Int64
      description: "流中当前位置。"
  overload: System.IO.UnmanagedMemoryStream.Position*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "该位置设置为一个值，小于零，或位置大于<xref:System.Int32.MaxValue>或导致溢出时添加到当前的指针。</xref:System.Int32.MaxValue>"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.PositionPointer
  id: PositionPointer
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: PositionPointer
  nameWithType: UnmanagedMemoryStream.PositionPointer
  fullName: System.IO.UnmanagedMemoryStream.PositionPointer
  type: Property
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "获取或设置一个字节的指针的指向流基于流中的当前位置。"
  remarks: "若要将指针返回到整个流，将设置<xref:System.IO.UnmanagedMemoryStream.Position%2A>属性为零，并调用此属性，然后。</xref:System.IO.UnmanagedMemoryStream.Position%2A>"
  syntax:
    content: public byte* PositionPointer { get; set; }
    return:
      type: System.Byte*
      description: "一个字节的指针。"
  overload: System.IO.UnmanagedMemoryStream.PositionPointer*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "当前的位置大于流的容量。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "位置正在设置不是当前流中的有效位置。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "将指针设置为低于值的流的起始位置。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "流已初始化，以用于一种<xref:System.Runtime.InteropServices.SafeBuffer>。</xref:System.Runtime.InteropServices.SafeBuffer> PositionPointer 属性是仅对使用初始化的流有效<xref:System.Byte>指针。</xref:System.Byte>"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  id: Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Read(Byte[],Int32,Int32)
  nameWithType: UnmanagedMemoryStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryStream.Read(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "指定的数目的字节读入指定的数组。"
  remarks: "`offset`参数指定了中的字节的偏移量`array`从此处开始读取，参数 （缓冲区索引） 和`count`参数指定了最大要从此流中读取的字节数。 如果已到达流结尾，则返回的值是实际数字节，则为零。 如果读取的操作成功，是通过读取的字节数高级流的当前位置。 如果发生异常，则流的当前位置不变。       Read 方法将返回仅在到达流的末尾后的零。 否则，读取始终至少&1; 个字节从流中读取在返回之前。 如果没有数据时调用读取流中可用，该方法将可以返回至少一个字节的数据一直阻止。 实现可以自由地返回少于所请求的字节，即使尚未达到流结尾。"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class.  A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream#1](~/add/codesnippet/csharp/m-system.io.unmanagedmem_2_1.cs)]"
  syntax:
    content: public override int Read (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "此方法返回时，包含之间的值的指定的字节数组`offset`和 (`offset`  +  `count` -1) 由从当前源中读取的字节替换。 此参数传递时未经初始化。"
    - id: offset
      type: System.Int32
      description: "中的从零开始的字节偏移量`buffer`从此处开始存储读取的数据从当前流。"
    - id: count
      type: System.Int32
      description: "最大要从当前流中读取的字节数。"
    return:
      type: System.Int32
      description: "读取到缓冲区的字节总数。 这可能小于请求的字节数如果很多字节当前不可用，或为零 (0) 如果已到达流结尾。"
  overload: System.IO.UnmanagedMemoryStream.Read*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The underlying memory does not support reading.  \n  \n \\- or -  \n  \n The <xref:System.IO.UnmanagedMemoryStream.CanRead*> property is set to <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>buffer</code> parameter is set to <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The <code>offset</code> parameter is less than zero.  \n  \n \\- or -  \n  \n The <code>count</code> parameter is less than zero."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "减缓冲区数组的长度<code> offset </code>参数是小于<code> count </code>参数。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: UnmanagedMemoryStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "以异步方式将指定的数目的字节读入指定的数组。       可以开始于[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]"
  remarks: "如果读取操作过程中发生异常，它将设置为<xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName>返回的任务的属性。</xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName>"
  syntax:
    content: public override System.Threading.Tasks.Task<int> ReadAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "要写入到数据的缓冲区。"
    - id: offset
      type: System.Int32
      description: "中的字节偏移量`buffer`从此处开始写入从流读取的数据。"
    - id: count
      type: System.Int32
      description: "最大读取的字节数。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "要监视取消请求的标记。 默认值为<xref:System.Threading.CancellationToken.None*>。</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "一个任务，它表示异步读取操作。 值<code> TResult </code>参数包含读入缓冲区的字节总数。 结果值可能小于请求的字节数的如果当前可用字节数小于所请求的数目，或如果已到达流结尾，它可以是 0 （零）。"
  overload: System.IO.UnmanagedMemoryStream.ReadAsync*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.ReadByte
  id: ReadByte
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: ReadByte()
  nameWithType: UnmanagedMemoryStream.ReadByte()
  fullName: System.IO.UnmanagedMemoryStream.ReadByte()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "从流中读取一个字节和流中的位置提升一个字节，或如果已到达流结尾返回-1。"
  remarks: "使用此方法从流中返回整数值。"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class. In this example, an <xref:System.IO.UnmanagedMemoryStream> object is passed to a method which checks the <xref:System.IO.UnmanagedMemoryStream.CanRead%2A> property before attempting to read and display the contents to the console.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream_Example#00](~/add/codesnippet/csharp/m-system.io.unmanagedmem_1_1.cs)]"
  syntax:
    content: public override int ReadByte ();
    parameters: []
    return:
      type: System.Int32
      description: "无符号的字节的强制转换为<xref:System.Int32>对象或如果到达流结尾-1。</xref:System.Int32>"
  overload: System.IO.UnmanagedMemoryStream.ReadByte*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The underlying memory does not support reading.  \n  \n \\- or -  \n  \n The current position is at the end of the stream."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  id: Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Seek(Int64,SeekOrigin)
  nameWithType: UnmanagedMemoryStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.UnmanagedMemoryStream.Seek(Int64,SeekOrigin)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "将当前流的当前位置设置为给定的值。"
  remarks: "有关查找的详细信息，请参阅<xref:System.IO.FileStream.Seek%2A>。</xref:System.IO.FileStream.Seek%2A>"
  syntax:
    content: public override long Seek (long offset, System.IO.SeekOrigin loc);
    parameters:
    - id: offset
      type: System.Int64
      description: "相对于点`origin`从此处开始查找。"
    - id: loc
      type: System.IO.SeekOrigin
      description: "将开始、 结束时或当前位置指定为的参考点`origin`，使用类型<xref:System.IO.SeekOrigin>.</xref:System.IO.SeekOrigin>的值"
    return:
      type: System.Int64
      description: "流中的新位置。"
  overload: System.IO.UnmanagedMemoryStream.Seek*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "尝试在流开头之前寻找。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> offset </code>值大于流的最大大小。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>loc</code>是无效的。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  id: SetLength(System.Int64)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: SetLength(Int64)
  nameWithType: UnmanagedMemoryStream.SetLength(Int64)
  fullName: System.IO.UnmanagedMemoryStream.SetLength(Int64)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "将流的长度设置为指定的值。"
  remarks: "如果给定的值小于当前流的长度，则流将被截断。 如果给定的值大于当前流的长度，则流被扩展。 如果流已展开，旧和新的长度之间流的内容是不确定的。       写入和查找有关 SetLength 工作，必须支持流。"
  syntax:
    content: public override void SetLength (long value);
    parameters:
    - id: value
      type: System.Int64
      description: "流的长度。"
  overload: System.IO.UnmanagedMemoryStream.SetLength*
  exceptions:
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生了 I/O 错误。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The underlying memory does not support writing.  \n  \n \\- or -  \n  \n An attempt is made to write to the stream and the <xref:System.IO.UnmanagedMemoryStream.CanWrite*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The specified <code>value</code> exceeds the capacity of the stream.  \n  \n \\- or -  \n  \n The specified <code>value</code> is negative."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  id: Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: Write(Byte[],Int32,Int32)
  nameWithType: UnmanagedMemoryStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryStream.Write(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "将字节块写入当前流使用缓冲区中的数据。"
  remarks: "在流中当前位置发生写操作。"
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class.  A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream#1](~/add/codesnippet/csharp/m-system.io.unmanagedmem_3_1.cs)]"
  syntax:
    content: public override void Write (byte[] buffer, int offset, int count);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "中要将字节复制到当前流的字节数组。"
    - id: offset
      type: System.Int32
      description: "从此处开始将字节复制到当前流的缓冲区中的偏移量。"
    - id: count
      type: System.Int32
      description: "要写入当前流的字节数。"
  overload: System.IO.UnmanagedMemoryStream.Write*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The underlying memory does not support writing.  \n  \n \\- or -  \n  \n An attempt is made to write to the stream and the <xref:System.IO.UnmanagedMemoryStream.CanWrite*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The <code>count</code> value is greater than the capacity of the stream.  \n  \n \\- or -  \n  \n The position is at the end of the stream capacity."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "发生 I/O 错误。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "一个指定的参数小于零。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code> offset </code>参数的长度减<code> buffer </code>参数是小于<code> count </code>参数。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>buffer</code> parameter is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  id: WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: UnmanagedMemoryStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "以异步方式将一个字节序列写入当前流，使此流中的当前位置提升写入字节数，并监视取消请求。       可以开始于[!INCLUDE[net_2015](~/add/includes/net-2015-md.md)]"
  remarks: "如果在写入操作期间发生异常，它将设置为<xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName>返回的任务的属性。</xref:System.Threading.Tasks.Task.Exception%2A?displayProperty=fullName>"
  syntax:
    content: public override System.Threading.Tasks.Task WriteAsync (byte[] buffer, int offset, int count, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: buffer
      type: System.Byte[]
      description: "要写入数据的缓冲区。"
    - id: offset
      type: System.Int32
      description: "中的从零开始的字节偏移量`buffer`从此处开始将字节复制到流。"
    - id: count
      type: System.Int32
      description: "最大写入的字节数。"
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: "要监视取消请求的标记。 默认值为<xref:System.Threading.CancellationToken.None*>。</xref:System.Threading.CancellationToken.None*>"
    return:
      type: System.Threading.Tasks.Task
      description: "表示异步写入操作的任务。"
  overload: System.IO.UnmanagedMemoryStream.WriteAsync*
  exceptions: []
  platform:
  - net462
- uid: System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
  id: WriteByte(System.Byte)
  parent: System.IO.UnmanagedMemoryStream
  langs:
  - csharp
  name: WriteByte(Byte)
  nameWithType: UnmanagedMemoryStream.WriteByte(Byte)
  fullName: System.IO.UnmanagedMemoryStream.WriteByte(Byte)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.IO
  summary: "将一个字节写入文件流中的当前位置。"
  remarks: ''
  example:
  - "The following code example demonstrates how to read from and write to unmanaged memory using the <xref:System.IO.UnmanagedMemoryStream> class. A block of unmanaged memory is allocated and de-allocated using the <xref:System.Runtime.InteropServices.Marshal> class. In this example, an <xref:System.IO.UnmanagedMemoryStream> object is passed to a method which checks the <xref:System.IO.UnmanagedMemoryStream.CanWrite%2A> property before attempting to write the data to the stream.  \n  \n [!code-cs[System.IO.UnmanagedMemoryStream_Example#00](~/add/codesnippet/csharp/m-system.io.unmanagedmem_0_1.cs)]"
  syntax:
    content: public override void WriteByte (byte value);
    parameters:
    - id: value
      type: System.Byte
      description: "一个字节值写入到流。"
  overload: System.IO.UnmanagedMemoryStream.WriteByte*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "流已关闭。"
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: "The underlying memory does not support writing.  \n  \n \\- or -  \n  \n An attempt is made to write to the stream and the <xref:System.IO.UnmanagedMemoryStream.CanWrite*> property is <xref uid=\"langword_csharp_false\" name=\"false\" href=\"\"></xref>.  \n  \n \\- or -  \n  \n The current position is at the end of the capacity of the stream."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "提供<code> value </code>导致流超过其最大容量。"
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IndexOutOfRangeException
  isExternal: true
  name: System.IndexOutOfRangeException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.NotSupportedException
  isExternal: true
  name: System.NotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.IO.UnmanagedMemoryStream.#ctor
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: UnmanagedMemoryStream()
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream()
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream()
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: UnmanagedMemoryStream(Byte*,Int64)
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*,Int64)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*,Int64)
- uid: System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: UnmanagedMemoryStream(SafeBuffer,Int64,Int64)
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer,Int64,Int64)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer,Int64,Int64)
- uid: System.Runtime.InteropServices.SafeBuffer
  parent: System.Runtime.InteropServices
  isExternal: true
  name: SafeBuffer
  nameWithType: SafeBuffer
  fullName: System.Runtime.InteropServices.SafeBuffer
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: UnmanagedMemoryStream(Byte*,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(Byte*,Int64,Int64,FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.UnmanagedMemoryStream.#ctor(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: UnmanagedMemoryStream(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.UnmanagedMemoryStream(SafeBuffer,Int64,Int64,FileAccess)
- uid: System.IO.UnmanagedMemoryStream.CanRead
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: CanRead
  nameWithType: UnmanagedMemoryStream.CanRead
  fullName: System.IO.UnmanagedMemoryStream.CanRead
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.UnmanagedMemoryStream.CanSeek
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: CanSeek
  nameWithType: UnmanagedMemoryStream.CanSeek
  fullName: System.IO.UnmanagedMemoryStream.CanSeek
- uid: System.IO.UnmanagedMemoryStream.CanWrite
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: CanWrite
  nameWithType: UnmanagedMemoryStream.CanWrite
  fullName: System.IO.UnmanagedMemoryStream.CanWrite
- uid: System.IO.UnmanagedMemoryStream.Capacity
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Capacity
  nameWithType: UnmanagedMemoryStream.Capacity
  fullName: System.IO.UnmanagedMemoryStream.Capacity
- uid: System.IO.UnmanagedMemoryStream.Dispose(System.Boolean)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: UnmanagedMemoryStream.Dispose(Boolean)
  fullName: System.IO.UnmanagedMemoryStream.Dispose(Boolean)
- uid: System.IO.UnmanagedMemoryStream.Flush
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Flush()
  nameWithType: UnmanagedMemoryStream.Flush()
  fullName: System.IO.UnmanagedMemoryStream.Flush()
- uid: System.IO.UnmanagedMemoryStream.FlushAsync(System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: FlushAsync(CancellationToken)
  nameWithType: UnmanagedMemoryStream.FlushAsync(CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.FlushAsync(CancellationToken)
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Byte*,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Initialize(Byte*,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryStream.Initialize(Byte*,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.Initialize(Byte*,Int64,Int64,FileAccess)
- uid: System.IO.UnmanagedMemoryStream.Initialize(System.Runtime.InteropServices.SafeBuffer,System.Int64,System.Int64,System.IO.FileAccess)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Initialize(SafeBuffer,Int64,Int64,FileAccess)
  nameWithType: UnmanagedMemoryStream.Initialize(SafeBuffer,Int64,Int64,FileAccess)
  fullName: System.IO.UnmanagedMemoryStream.Initialize(SafeBuffer,Int64,Int64,FileAccess)
- uid: System.IO.UnmanagedMemoryStream.Length
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Length
  nameWithType: UnmanagedMemoryStream.Length
  fullName: System.IO.UnmanagedMemoryStream.Length
- uid: System.IO.UnmanagedMemoryStream.Position
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Position
  nameWithType: UnmanagedMemoryStream.Position
  fullName: System.IO.UnmanagedMemoryStream.Position
- uid: System.IO.UnmanagedMemoryStream.PositionPointer
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: PositionPointer
  nameWithType: UnmanagedMemoryStream.PositionPointer
  fullName: System.IO.UnmanagedMemoryStream.PositionPointer
- uid: System.IO.UnmanagedMemoryStream.Read(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Read(Byte[],Int32,Int32)
  nameWithType: UnmanagedMemoryStream.Read(Byte[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryStream.Read(Byte[],Int32,Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.UnmanagedMemoryStream.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: ReadAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: UnmanagedMemoryStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.ReadAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: true
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: Task<System.Int32>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IO.UnmanagedMemoryStream.ReadByte
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: ReadByte()
  nameWithType: UnmanagedMemoryStream.ReadByte()
  fullName: System.IO.UnmanagedMemoryStream.ReadByte()
- uid: System.IO.UnmanagedMemoryStream.Seek(System.Int64,System.IO.SeekOrigin)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Seek(Int64,SeekOrigin)
  nameWithType: UnmanagedMemoryStream.Seek(Int64,SeekOrigin)
  fullName: System.IO.UnmanagedMemoryStream.Seek(Int64,SeekOrigin)
- uid: System.IO.SeekOrigin
  parent: System.IO
  isExternal: true
  name: SeekOrigin
  nameWithType: SeekOrigin
  fullName: System.IO.SeekOrigin
- uid: System.IO.UnmanagedMemoryStream.SetLength(System.Int64)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: SetLength(Int64)
  nameWithType: UnmanagedMemoryStream.SetLength(Int64)
  fullName: System.IO.UnmanagedMemoryStream.SetLength(Int64)
- uid: System.IO.UnmanagedMemoryStream.Write(System.Byte[],System.Int32,System.Int32)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Write(Byte[],Int32,Int32)
  nameWithType: UnmanagedMemoryStream.Write(Byte[],Int32,Int32)
  fullName: System.IO.UnmanagedMemoryStream.Write(Byte[],Int32,Int32)
- uid: System.IO.UnmanagedMemoryStream.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: WriteAsync(Byte[],Int32,Int32,CancellationToken)
  nameWithType: UnmanagedMemoryStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
  fullName: System.IO.UnmanagedMemoryStream.WriteAsync(Byte[],Int32,Int32,CancellationToken)
- uid: System.IO.UnmanagedMemoryStream.WriteByte(System.Byte)
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: WriteByte(Byte)
  nameWithType: UnmanagedMemoryStream.WriteByte(Byte)
  fullName: System.IO.UnmanagedMemoryStream.WriteByte(Byte)
- uid: System.Byte
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.IO.UnmanagedMemoryStream.#ctor*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: UnmanagedMemoryStream
  nameWithType: UnmanagedMemoryStream.UnmanagedMemoryStream
- uid: System.IO.UnmanagedMemoryStream.CanRead*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: CanRead
  nameWithType: UnmanagedMemoryStream.CanRead
- uid: System.IO.UnmanagedMemoryStream.CanSeek*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: CanSeek
  nameWithType: UnmanagedMemoryStream.CanSeek
- uid: System.IO.UnmanagedMemoryStream.CanWrite*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: CanWrite
  nameWithType: UnmanagedMemoryStream.CanWrite
- uid: System.IO.UnmanagedMemoryStream.Capacity*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Capacity
  nameWithType: UnmanagedMemoryStream.Capacity
- uid: System.IO.UnmanagedMemoryStream.Dispose*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Dispose
  nameWithType: UnmanagedMemoryStream.Dispose
- uid: System.IO.UnmanagedMemoryStream.Flush*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Flush
  nameWithType: UnmanagedMemoryStream.Flush
- uid: System.IO.UnmanagedMemoryStream.FlushAsync*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: FlushAsync
  nameWithType: UnmanagedMemoryStream.FlushAsync
- uid: System.IO.UnmanagedMemoryStream.Initialize*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Initialize
  nameWithType: UnmanagedMemoryStream.Initialize
- uid: System.IO.UnmanagedMemoryStream.Length*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Length
  nameWithType: UnmanagedMemoryStream.Length
- uid: System.IO.UnmanagedMemoryStream.Position*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Position
  nameWithType: UnmanagedMemoryStream.Position
- uid: System.IO.UnmanagedMemoryStream.PositionPointer*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: PositionPointer
  nameWithType: UnmanagedMemoryStream.PositionPointer
- uid: System.IO.UnmanagedMemoryStream.Read*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Read
  nameWithType: UnmanagedMemoryStream.Read
- uid: System.IO.UnmanagedMemoryStream.ReadAsync*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: ReadAsync
  nameWithType: UnmanagedMemoryStream.ReadAsync
- uid: System.IO.UnmanagedMemoryStream.ReadByte*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: ReadByte
  nameWithType: UnmanagedMemoryStream.ReadByte
- uid: System.IO.UnmanagedMemoryStream.Seek*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Seek
  nameWithType: UnmanagedMemoryStream.Seek
- uid: System.IO.UnmanagedMemoryStream.SetLength*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: SetLength
  nameWithType: UnmanagedMemoryStream.SetLength
- uid: System.IO.UnmanagedMemoryStream.Write*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: Write
  nameWithType: UnmanagedMemoryStream.Write
- uid: System.IO.UnmanagedMemoryStream.WriteAsync*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: WriteAsync
  nameWithType: UnmanagedMemoryStream.WriteAsync
- uid: System.IO.UnmanagedMemoryStream.WriteByte*
  parent: System.IO.UnmanagedMemoryStream
  isExternal: false
  name: WriteByte
  nameWithType: UnmanagedMemoryStream.WriteByte
