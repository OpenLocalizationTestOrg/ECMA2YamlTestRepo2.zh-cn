### YamlMime:ManagedReference
items:
- uid: System.Data.OracleClient.OracleConnection
  id: OracleConnection
  children:
  - System.Data.OracleClient.OracleConnection.#ctor
  - System.Data.OracleClient.OracleConnection.#ctor(System.String)
  - System.Data.OracleClient.OracleConnection.BeginDbTransaction(System.Data.IsolationLevel)
  - System.Data.OracleClient.OracleConnection.BeginTransaction
  - System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)
  - System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)
  - System.Data.OracleClient.OracleConnection.ClearAllPools
  - System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)
  - System.Data.OracleClient.OracleConnection.Close
  - System.Data.OracleClient.OracleConnection.ConnectionString
  - System.Data.OracleClient.OracleConnection.ConnectionTimeout
  - System.Data.OracleClient.OracleConnection.CreateCommand
  - System.Data.OracleClient.OracleConnection.CreateDbCommand
  - System.Data.OracleClient.OracleConnection.Database
  - System.Data.OracleClient.OracleConnection.DataSource
  - System.Data.OracleClient.OracleConnection.Dispose(System.Boolean)
  - System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  - System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)
  - System.Data.OracleClient.OracleConnection.GetSchema
  - System.Data.OracleClient.OracleConnection.GetSchema(System.String)
  - System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])
  - System.Data.OracleClient.OracleConnection.InfoMessage
  - System.Data.OracleClient.OracleConnection.Open
  - System.Data.OracleClient.OracleConnection.ServerVersion
  - System.Data.OracleClient.OracleConnection.State
  - System.Data.OracleClient.OracleConnection.System#ICloneable#Clone
  langs:
  - csharp
  name: OracleConnection
  nameWithType: OracleConnection
  fullName: System.Data.OracleClient.OracleConnection
  type: Class
  summary: "表示与数据库的开放连接。 此类不能被继承。"
  remarks: "此类型已弃用，将.NET Framework 的未来版本中删除。 有关详细信息，请参阅[Oracle 和 ADO.NET](~/add/includes/ajax-current-ext-md.md)。       OracleConnection 对象表示的唯一连接到 Oracle 数据库。 对于客户端/服务器数据库系统，它相当于网络连接到服务器。       创建 OracleConnection 对象的实例的应用程序可以设置声明性或命令性安全要求，要求所有直接和间接调用方拥有足够权限的代码。 OracleConnection 通过使用创建的安全要求<xref:System.Data.OracleClient.OraclePermission>对象。</xref:System.Data.OracleClient.OraclePermission> 用户可以验证他们的代码通过使用具有足够的权限<xref:System.Data.OracleClient.OraclePermissionAttribute>对象。</xref:System.Data.OracleClient.OraclePermissionAttribute> 用户和管理员还可以使用代码访问安全策略工具 (Caspol.exe) 来修改在计算机、 用户和企业级别的安全策略。 有关详细信息，请参阅[安全](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 与不同**连接**对象在其他.NET Framework 数据提供程序 （SQL Server、 OLE DB 和 ODBC），OracleConnection 不支持<xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A>属性。</xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> 将连接超时设置作为属性或连接字符串中不起作用，而返回的值始终为零。 OracleConnection 也不支持<xref:System.Data.OracleClient.OracleConnection.Database%2A>属性或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法。</xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> </xref:System.Data.OracleClient.OracleConnection.Database%2A>       如果 OracleConnection 对象超出范围，它保持打开状态。 因此，你始终应通过调用关闭 OracleConnection 对象<xref:System.Data.OracleClient.OracleConnection.Close%2A>或**释放**，或通过使用中的 OracleConnection 对象`Using`语句。</xref:System.Data.OracleClient.OracleConnection.Close%2A> 否则，在垃圾回收可能不会立即释放它们。 如果在连接的数目等待垃圾回收器删除达到最大连接数，这种延迟可能导致错误。 与此相反，通过调用关闭连接<xref:System.Data.OracleClient.OracleConnection.Close%2A>更有效地使用本机资源增强可伸缩性并提高应用程序的总体性能。</xref:System.Data.OracleClient.OracleConnection.Close%2A> 若要确保始终关闭连接，打开的内部连接`Using`块。      1> [!NOTE]&1;> 若要将高性能应用程序的部署，通常需要使用连接池。 但是，在将用于 Oracle.NET Framework 数据提供程序，你不必启用连接池，因为提供程序会自动管理。"
  example:
  - "The following example creates an <xref:System.Data.OracleClient.OracleCommand> and an OracleConnection. The OracleConnection is opened and set as the <xref:System.Data.OracleClient.OracleCommand.Connection%2A?displayProperty=fullName> property. The example then calls <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>, and closes the connection. To accomplish this, the <xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> is passed a connection string and a query string that is an SQL INSERT statement.  \n  \n [!code-vb[Classic WebData OracleConnection#1](~/add/codesnippet/visualbasic/t-system.data.oracleclie_5_1.vb)]\n [!code-cs[Classic WebData OracleConnection#1](~/add/codesnippet/csharp/t-system.data.oracleclie_5_1.cs)]"
  syntax:
    content: >-
      [System.ComponentModel.DefaultEvent("InfoMessage")]

      [System.Obsolete("OracleConnection has been deprecated. http://go.microsoft.com/fwlink/?LinkID=144260", false)]

      public sealed class OracleConnection : System.Data.Common.DbConnection, ICloneable
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  - System.ComponentModel.Component
  - System.Data.Common.DbConnection
  implements:
  - System.ICloneable
  inheritedMembers:
  - System.ComponentModel.Component.CanRaiseEvents
  - System.ComponentModel.Component.Container
  - System.ComponentModel.Component.DesignMode
  - System.ComponentModel.Component.Dispose
  - System.ComponentModel.Component.Disposed
  - System.ComponentModel.Component.Events
  - System.ComponentModel.Component.GetService(System.Type)
  - System.ComponentModel.Component.Site
  - System.ComponentModel.Component.ToString
  - System.Data.Common.DbConnection.DbProviderFactory
  - System.Data.Common.DbConnection.OnStateChange(System.Data.StateChangeEventArgs)
  - System.Data.Common.DbConnection.OpenAsync
  - System.Data.Common.DbConnection.OpenAsync(System.Threading.CancellationToken)
  - System.Data.Common.DbConnection.StateChange
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction
  - System.Data.Common.DbConnection.System#Data#IDbConnection#BeginTransaction(System.Data.IsolationLevel)
  - System.Data.Common.DbConnection.System#Data#IDbConnection#CreateCommand
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.#ctor
  id: '#ctor'
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: OracleConnection()
  nameWithType: OracleConnection.OracleConnection()
  fullName: System.Data.OracleClient.OracleConnection.OracleConnection()
  type: Constructor
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "初始化的新实例<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;> </xref>。"
  remarks: ''
  example:
  - "The following example creates and opens an <xref:System.Data.OracleClient.OracleConnection>.  \n  \n [!code-vb[Classic WebData OracleConnection.OracleConnection1#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_0_1.vb)]\n [!code-cs[Classic WebData OracleConnection.OracleConnection1#1](~/add/codesnippet/csharp/m-system.data.oracleclie_0_1.cs)]"
  syntax:
    content: public OracleConnection ();
    parameters: []
  overload: System.Data.OracleClient.OracleConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: OracleConnection(String)
  nameWithType: OracleConnection.OracleConnection(String)
  fullName: System.Data.OracleClient.OracleConnection.OracleConnection(String)
  type: Constructor
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "初始化的新实例<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;></xref>类指定的连接字符串。"
  remarks: ''
  example:
  - "The following example creates and opens an <xref:System.Data.OracleClient.OracleConnection>.  \n  \n [!code-vb[Classic WebData OracleConnection.OracleConnection1#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_9_1.vb)]\n [!code-cs[Classic WebData OracleConnection.OracleConnection1#1](~/add/codesnippet/csharp/m-system.data.oracleclie_9_1.cs)]"
  syntax:
    content: public OracleConnection (string connectionString);
    parameters:
    - id: connectionString
      type: System.String
      description: "用于打开数据库的连接。"
  overload: System.Data.OracleClient.OracleConnection.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.BeginDbTransaction(System.Data.IsolationLevel)
  id: BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OracleConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.OracleClient.OracleConnection.BeginDbTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  syntax:
    content: protected override System.Data.Common.DbTransaction BeginDbTransaction (System.Data.IsolationLevel isolationLevel);
    parameters:
    - id: isolationLevel
      type: System.Data.IsolationLevel
      description: "要添加。"
    return:
      type: System.Data.Common.DbTransaction
      description: "要添加。"
  overload: System.Data.OracleClient.OracleConnection.BeginDbTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.BeginTransaction
  id: BeginTransaction
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: BeginTransaction()
  nameWithType: OracleConnection.BeginTransaction()
  fullName: System.Data.OracleClient.OracleConnection.BeginTransaction()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "开始在数据库事务。"
  remarks: "若要提交或回滚事务，必须显式使用<xref:System.Data.OracleClient.OracleTransaction.Commit%2A>或<xref:System.Data.OracleClient.OracleTransaction.Rollback%2A>方法。</xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> </xref:System.Data.OracleClient.OracleTransaction.Commit%2A>       若要确保.NET Framework Data Provider for Oracle 事务管理模型正常运行，请避免使用其他事务管理模型，如提供的数据库。      1> [!NOTE]&1;> 如果你不指定隔离级别，则使用默认隔离级别。 若要使用 BeginTransaction 方法指定隔离级别，使用<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>重载。</xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>"
  example:
  - "The following example creates an <xref:System.Data.OracleClient.OracleConnection> and an <xref:System.Data.OracleClient.OracleTransaction>. It also demonstrates how to use the BeginTransaction, <xref:System.Data.OracleClient.OracleTransaction.Commit%2A>, and <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.  \n  \n [!code-vb[Classic WebData OracleConnection.BeginTransaction#1](~/add/codesnippet/visualbasic/m-system.data.oracleclie_11_1.vb)]\n [!code-cs[Classic WebData OracleConnection.BeginTransaction#1](~/add/codesnippet/csharp/m-system.data.oracleclie_11_1.cs)]"
  syntax:
    content: public System.Data.OracleClient.OracleTransaction BeginTransaction ();
    parameters: []
    return:
      type: System.Data.OracleClient.OracleTransaction
      description: "表示新事务的对象。"
  overload: System.Data.OracleClient.OracleConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不支持并行事务。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)
  id: BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: BeginTransaction(IsolationLevel)
  nameWithType: OracleConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.OracleClient.OracleConnection.BeginTransaction(IsolationLevel)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "在指定的数据库开始一个事务<xref href=&quot;System.Data.IsolationLevel&quot;></xref>值。"
  remarks: "若要提交或回滚事务，必须显式使用<xref:System.Data.OracleClient.OracleTransaction.Commit%2A>或<xref:System.Data.OracleClient.OracleTransaction.Rollback%2A>方法。</xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> </xref:System.Data.OracleClient.OracleTransaction.Commit%2A>       若要确保.NET Framework Data Provider for Oracle 事务管理模型正常运行，请避免使用其他事务管理模型，如提供的数据库。"
  example:
  - "The following example creates an <xref:System.Data.OracleClient.OracleConnection> and an <xref:System.Data.OracleClient.OracleTransaction>. It also demonstrates how to use the <xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>, <xref:System.Data.OracleClient.OracleTransaction.Commit%2A>, and <xref:System.Data.OracleClient.OracleTransaction.Rollback%2A> methods.  \n  \n [!code-vb[Classic WebData OracleConnection.BeginTransaction#1](~/add/codesnippet/visualbasic/12fabef6-623c-46b8-b1c3-_1.vb)]\n [!code-cs[Classic WebData OracleConnection.BeginTransaction#1](~/add/codesnippet/csharp/12fabef6-623c-46b8-b1c3-_1.cs)]"
  syntax:
    content: public System.Data.OracleClient.OracleTransaction BeginTransaction (System.Data.IsolationLevel il);
    parameters:
    - id: il
      type: System.Data.IsolationLevel
      description: "此连接的事务隔离级别。"
    return:
      type: System.Data.OracleClient.OracleTransaction
      description: "表示新事务的对象。"
  overload: System.Data.OracleClient.OracleConnection.BeginTransaction*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "不支持并行事务。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)
  id: ChangeDatabase(System.String)
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: ChangeDatabase(String)
  nameWithType: OracleConnection.ChangeDatabase(String)
  fullName: System.Data.OracleClient.OracleConnection.ChangeDatabase(String)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "更改当前数据库已打开<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;> </xref>。"
  remarks: "`value`参数必须包含有效的数据库名称，并且不能包含 null 值、 空字符串 (&quot;&quot;)，或只有空白字符的字符串。      1> [!NOTE]&1;> 与不同**连接**中的其他.NET Framework 数据提供程序 （SQL Server、 OLE DB 和 ODBC），对象<xref:System.Data.OracleClient.OracleConnection>不支持<xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A>属性。</xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> </xref:System.Data.OracleClient.OracleConnection> 将连接超时设置作为属性或连接字符串中不起作用，而返回的值始终为零。 <xref:System.Data.OracleClient.OracleConnection>也不支持<xref:System.Data.OracleClient.OracleConnection.Database%2A>属性或 ChangeDatabase 方法。</xref:System.Data.OracleClient.OracleConnection.Database%2A></xref:System.Data.OracleClient.OracleConnection>"
  syntax:
    content: public override void ChangeDatabase (string value);
    parameters:
    - id: value
      type: System.String
      description: "要使用而不是当前数据库的数据库的名称。"
  overload: System.Data.OracleClient.OracleConnection.ChangeDatabase*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "数据库名称无效。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "连接未打开。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "无法更改数据库。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.ClearAllPools
  id: ClearAllPools
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: ClearAllPools()
  nameWithType: OracleConnection.ClearAllPools()
  fullName: System.Data.OracleClient.OracleConnection.ClearAllPools()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "清空连接池。"
  remarks: "ClearAllPools 重置 （或清空） 的连接池。 如果连接中正在使用的调用时，它们进行相应的标记，并且被丢弃时<xref:System.Data.OracleClient.OracleConnection.Close%2A>对其调用。</xref:System.Data.OracleClient.OracleConnection.Close%2A>"
  syntax:
    content: public static void ClearAllPools ();
    parameters: []
  overload: System.Data.OracleClient.OracleConnection.ClearAllPools*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)
  id: ClearPool(System.Data.OracleClient.OracleConnection)
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: ClearPool(OracleConnection)
  nameWithType: OracleConnection.ClearPool(OracleConnection)
  fullName: System.Data.OracleClient.OracleConnection.ClearPool(OracleConnection)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "清空与指定的连接关联的连接池。"
  remarks: "ClearPool 方法清除与关联的连接池`connection`。 如果其他连接与关联`connection`是在调用时使用，它们进行相应的标记，是被丢弃时<xref:System.Data.OracleClient.OracleConnection.Close%2A>对其调用。</xref:System.Data.OracleClient.OracleConnection.Close%2A>"
  syntax:
    content: public static void ClearPool (System.Data.OracleClient.OracleConnection connection);
    parameters:
    - id: connection
      type: System.Data.OracleClient.OracleConnection
      description: "<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;> </xref>从池中清除。"
  overload: System.Data.OracleClient.OracleConnection.ClearPool*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.Close
  id: Close
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: Close()
  nameWithType: OracleConnection.Close()
  fullName: System.Data.OracleClient.OracleConnection.Close()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "关闭到数据库的连接。"
  remarks: "Close 方法回滚任何挂起的事务。 然后，它将释放到连接池，连接或关闭的连接，如果禁用连接池。       应用程序可以多次调用关闭，而不会生成异常。      1> [!NOTE]&1;> 时用于 Oracle.NET Framework 数据提供程序，不需要启用连接池，因为提供程序会自动管理。      1> [!CAUTION]&1;> 不在调用关闭<xref:System.Data.OracleClient.OracleConnection>、 <xref:System.Data.OracleClient.OracleDataReader>，或在任何其他托管的对象`Finalize`你类方法</xref:System.Data.OracleClient.OracleDataReader></xref:System.Data.OracleClient.OracleConnection> 在终结器中，你应仅释放类直接拥有的非托管的资源。 如果你的类不拥有任何非托管的资源，不包括`Finalize`在类定义的方法。 有关详细信息，请参阅[垃圾回收](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override void Close ();
    parameters: []
  overload: System.Data.OracleClient.OracleConnection.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.ConnectionString
  id: ConnectionString
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: ConnectionString
  nameWithType: OracleConnection.ConnectionString
  fullName: System.Data.OracleClient.OracleConnection.ConnectionString
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取或设置用于打开 Oracle 数据库的字符串。"
  remarks: "仅当连接关闭时，可以设置 ConnectionString。       ConnectionString 属性可用于连接到数据库。 下面的示例演示一个典型的连接字符串。      ```   &quot;Data Source=Oracle8i;Integrated Security=yes&quot;   ```许多字符串中指定的设置具有相应的只读属性 (例如， `Data Source=MyServer`，它对应于<xref:System.Data.OracleClient.OracleConnection.DataSource%2A>属性)。</xref:System.Data.OracleClient.OracleConnection.DataSource%2A> 连接字符串设置时，所有这些属性被更新，除非错误检测到，在这种情况下会更新任何属性。 <xref:System.Data.OracleClient.OracleConnection>属性只返回默认设置或连接字符串中指定这些设置。</xref:System.Data.OracleClient.OracleConnection>       所有连接字符串值 （和相关的属性），包括密码重置已关闭的连接的连接字符串将重都置。       在设置之后立即分析连接字符串。 如果如分析时发现错误在语法中，运行时异常， <xref:System.ArgumentException>，生成。</xref:System.ArgumentException> 仅当尝试打开连接时，可以找到其他错误。       连接字符串的基本格式是用分号分隔的关键字/值对一系列。 等号 （=） 连接每个关键字和它的值。 若要包含的值包含分号、 单引号字符或双引号字符，则该值必须括在双引号内。 如果值包含分号和双引号字符，则该值可以被括在单引号中。 单引号也是有用如果双引号字符开头的值。 相反，如果值开头为单引号，则可以使用双引号。 如果值包含单引号和双引号字符，用于将值括起来的引号字符必须成对出现每次它出现时的值中。       若要包含前导或尾随空格的字符串值，则该值必须括在单引号或双引号中。 忽略任何前导空格或尾随空格围绕整数、 布尔值或枚举的值，即使用引号括起来。 但是，将保留在字符串文字关键字或值中的空间。 不使用分隔符，除非引号字符不是在值的第一个或最后一个字符等情况下，可能的连接字符串中使用单引号或双引号`Data Source= my&quot;Server`或`Data Source= my&quot;Server`。       若要包含等号 （=） 中的关键字或值，它前面必须是另一个等号。 例如，在假设的连接字符串```   &quot;key==word=value&quot;   ```关键字是&quot;键 = word&quot;，值为&quot;value&quot;。       如果连接字符串中的关键字/值对中的特定关键字出现多次，最后一个匹配项用于设置的值。       关键字是区分大小写。       下表列出 ConnectionString 中的值的有效名称。      |名称 |默认 |说明 |  |----------|-------------|-----------------|  |数据源<br /><br /> -或者-<br /><br /> 服务器 | |要连接到的 Oracle 实例的名称或网络地址。 |  |集成安全性 |false |连接是否是安全的连接，或不。<br /><br /> 可识别的值为`true`（强烈建议）， `false`， `yes`，和`no`。 |  |密码 | |日志记录 Oracle 帐户的密码。 若要维护高级别的安全性，我们强烈建议你改为使用集成安全性关键字。 |  |持久性安全信息 |false |当设置为`false`或`no`（强烈建议），如果连接是打开的或者一直处于打开<xref:System.Data.OracleClient.OracleConnection.State%2A>.</xref:System.Data.OracleClient.OracleConnection.State%2A>不作为连接的一部分返回安全敏感信息，如密码 重置连接字符串将所有的连接字符串值，包括密码重置。<br /><br /> 可识别的值为`true`， `false`， `yes`，和`no`。 |  |Unicode |false |指定适用于 Oracle 的.NET Framework 数据提供程序是否使用 UTF16 模式 API 调用。 此关键字将被忽略，除非使用 Oracle9i 客户端软件。 |  |用户 ID | |Oracle 登录帐户。 若要维护高级别的安全性，我们强烈建议你改为使用集成安全性关键字。 |      下表列出连接池内 ConnectionString 的值的有效的名称。      |名称 |默认 |说明 |  |----------|-------------|-----------------|  |连接生存期 |&0; |如果连接返回到池，其创建时间将比较当前时间，并且，如果时间跨度 （以秒为单位） 超过指定的值，连接将被破坏`Connection Lifetime`。 这可强制运行服务器和刚联机的服务器之间的负载平衡的群集配置中。<br /><br /> 零值将使池的连接具有最大连接超时。 |  |登记 |true |当`true`或`yes`，池进程中自动登记创建线程的当前事务上下文中的连接。<br /><br /> 可识别的值为`true`， `false`， `yes`，和`no`。 |  |最大池大小 |&100; |连接池中所允许的最大数量。 设置`Max Pool Size`ConnectionString 的值可能会影响性能。 如果你计划创建和主动使用超过 100 个连接，则应增加`Max Pool Size`总数接近于应用程序的稳定状态连接使用情况的值。 |  |最小池大小 | 0 |连接池中所允许的最小数。 |  |池 |true |当`true`或`yes`、<xref:System.Data.OracleClient.OracleConnection>对象绘制从相应的池中，或如有必要，被创建并添加到相应的池中。</xref:System.Data.OracleClient.OracleConnection><br /><br /> 可识别的值为`true`， `false`， `yes`，和`no`。 |      在设置关键字或连接池需要一个布尔值的值时，你可以使用是而不是 &quot;true&quot;，和否而不是 &quot;false&quot;。 整数值表示为字符串。"
  example:
  - "The following example creates an <xref:System.Data.OracleClient.OracleConnection> and sets some of its properties in the connection string.  \n  \n [!code-vb[Classic WebData OracleConnection.DataSource#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_15_1.vb)]\n [!code-cs[Classic WebData OracleConnection.DataSource#1](~/add/codesnippet/csharp/p-system.data.oracleclie_15_1.cs)]"
  syntax:
    content: public override string ConnectionString { get; set; }
    return:
      type: System.String
      description: "建立初始连接所需的包括设置，如服务器名称，Oracle 连接字符串。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Data.OracleClient.OracleConnection.ConnectionString*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.ConnectionTimeout
  id: ConnectionTimeout
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: ConnectionTimeout
  nameWithType: OracleConnection.ConnectionTimeout
  fullName: System.Data.OracleClient.OracleConnection.ConnectionTimeout
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取等待建立的连接在终止尝试并生成错误之前的时间。"
  remarks: "你可以通过使用连接等待的时间量设置为超时`Connect Timeout`或`Connection Timeout`连接字符串中的关键字。 值为 0 表示没有限制，，应当避免在<xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>由于尝试连接将无限期等待。</xref:System.Data.OracleClient.OracleConnection.ConnectionString%2A>      1> [!NOTE]&1;> 与不同`Connection`中的其他.NET Framework 数据提供程序 （SQL Server、 OLE DB 和 ODBC），对象<xref:System.Data.OracleClient.OracleConnection>不支持 ConnectionTimeout 属性。</xref:System.Data.OracleClient.OracleConnection> 设置使用属性或连接字符串中的连接超时不起作用，而返回的值始终为零。 <xref:System.Data.OracleClient.OracleConnection>也不支持<xref:System.Data.OracleClient.OracleConnection.Database%2A>属性或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法。</xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A> </xref:System.Data.OracleClient.OracleConnection.Database%2A></xref:System.Data.OracleClient.OracleConnection>"
  syntax:
    content: public override int ConnectionTimeout { get; }
    return:
      type: System.Int32
      description: "（以秒为单位） 的时间等待连接打开。 默认值为 15 秒。"
  overload: System.Data.OracleClient.OracleConnection.ConnectionTimeout*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "指定的值小于 0。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.CreateCommand
  id: CreateCommand
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: CreateCommand()
  nameWithType: OracleConnection.CreateCommand()
  fullName: System.Data.OracleClient.OracleConnection.CreateCommand()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "创建并返回<xref href=&quot;System.Data.OracleClient.OracleCommand&quot;></xref>与关联的对象<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;> </xref>。"
  syntax:
    content: public System.Data.OracleClient.OracleCommand CreateCommand ();
    parameters: []
    return:
      type: System.Data.OracleClient.OracleCommand
      description: "<xref href=&quot;System.Data.OracleClient.OracleCommand&quot;> </xref>对象。"
  overload: System.Data.OracleClient.OracleConnection.CreateCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.CreateDbCommand
  id: CreateDbCommand
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: CreateDbCommand()
  nameWithType: OracleConnection.CreateDbCommand()
  fullName: System.Data.OracleClient.OracleConnection.CreateDbCommand()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  syntax:
    content: protected override System.Data.Common.DbCommand CreateDbCommand ();
    parameters: []
    return:
      type: System.Data.Common.DbCommand
      description: "要添加。"
  overload: System.Data.OracleClient.OracleConnection.CreateDbCommand*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.Database
  id: Database
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: Database
  nameWithType: OracleConnection.Database
  fullName: System.Data.OracleClient.OracleConnection.Database
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取当前数据库或打开连接后要使用的数据库的名称。"
  remarks: "数据库属性会动态更新。 如果你更改当前数据库使用 SQL 语句或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法，发送一条信息性消息，并自动更新的属性。</xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>      1> [!NOTE]&1;> 与不同`Connection`中的其他.NET Framework 数据提供程序 （SQL Server、 OLE DB 和 ODBC），对象<xref:System.Data.OracleClient.OracleConnection>不支持<xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A>属性。</xref:System.Data.OracleClient.OracleConnection.ConnectionTimeout%2A> </xref:System.Data.OracleClient.OracleConnection> 设置使用属性或连接字符串中的连接超时不起作用，而返回的值始终为零。 <xref:System.Data.OracleClient.OracleConnection>也不支持一种数据库属性或<xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A>方法。</xref:System.Data.OracleClient.OracleConnection.ChangeDatabase%2A></xref:System.Data.OracleClient.OracleConnection>"
  syntax:
    content: public override string Database { get; }
    return:
      type: System.String
      description: "当前数据库或数据库打开连接后要使用的名称的名称。 默认值为空字符串。"
  overload: System.Data.OracleClient.OracleConnection.Database*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.DataSource
  id: DataSource
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: DataSource
  nameWithType: OracleConnection.DataSource
  fullName: System.Data.OracleClient.OracleConnection.DataSource
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取要连接到 Oracle 服务器的名称。"
  remarks: ''
  example:
  - "The following example creates an <xref:System.Data.OracleClient.OracleConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData OracleConnection.DataSource#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_7_1.vb)]\n [!code-cs[Classic WebData OracleConnection.DataSource#1](~/add/codesnippet/csharp/p-system.data.oracleclie_7_1.cs)]"
  syntax:
    content: public override string DataSource { get; }
    return:
      type: System.String
      description: "要连接到 Oracle 服务器的名称。 默认值为空字符串 (&quot;&quot;)。"
  overload: System.Data.OracleClient.OracleConnection.DataSource*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: OracleConnection.Dispose(Boolean)
  fullName: System.Data.OracleClient.OracleConnection.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "要添加。"
  overload: System.Data.OracleClient.OracleConnection.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  id: EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OracleConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(ITransaction)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "在为分布式事务的指定事务中登记。"
  remarks: "新增 ADO.NET 2.0 中功能支持使用<xref:System.Data.Common.DbConnection.EnlistTransaction%2A>方法在分布式事务中登记。</xref:System.Data.Common.DbConnection.EnlistTransaction%2A> 因为它登记中的连接<xref:System.Transactions.Transaction>实例， **EnlistTransaction**中可用的功能利用<xref:System.Transactions>命名空间用于管理分布式事务，使其优于**EnlistDistributedTransaction**为此目的。</xref:System.Transactions> </xref:System.Transactions.Transaction> 有关详细信息，请参阅[分布式事务](~/add/includes/ajax-current-ext-md.md)。       你可以继续使用 EnlistDistributedTransaction 方法，如果禁用了自动登记的现有分布式事务中登记。 在现有分布式事务中登记可以确保，如果事务是提交还是回滚，数据源的代码所做的修改是也提交或回滚。       EnlistDistributedTransaction 返回异常，如果<xref:System.Data.OracleClient.OracleConnection>已经启动了使用<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>.</xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>在某个事务</xref:System.Data.OracleClient.OracleConnection> 但是，如果事务是在数据源上开始的本地事务 (例如，通过显式执行 BEGIN TRANSACTION 语句使用<xref:System.Data.OracleClient.OracleCommand>对象)，EnlistDistributedTransaction 回滚该本地事务并根据请求在现有分布式事务中登记。</xref:System.Data.OracleClient.OracleCommand> 不会收到通知，该本地事务已回滚，并且会负责管理任何本地事务没有启动使用<xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>.</xref:System.Data.OracleClient.OracleConnection.BeginTransaction%2A>"
  syntax:
    content: public void EnlistDistributedTransaction (System.EnterpriseServices.ITransaction distributedTransaction);
    parameters:
    - id: distributedTransaction
      type: System.EnterpriseServices.ITransaction
      description: "对现有的引用<xref href=&quot;System.EnterpriseServices.ITransaction&quot;></xref>用于登记的。"
  overload: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)
  id: EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: EnlistTransaction(Transaction)
  nameWithType: OracleConnection.EnlistTransaction(Transaction)
  fullName: System.Data.OracleClient.OracleConnection.EnlistTransaction(Transaction)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "在为分布式事务的指定事务中登记。"
  remarks: "新增 ADO.NET 2.0 中功能支持使用<xref:System.Data.Common.DbConnection.EnlistTransaction%2A>方法在分布式事务中登记。</xref:System.Data.Common.DbConnection.EnlistTransaction%2A> 因为它登记中的连接<xref:System.Transactions.Transaction>实例， **EnlistTransaction**中可用的功能利用<xref:System.Transactions>命名空间用于管理分布式事务，使其优于**EnlistDistributedTransaction**，它使用**System.EnterpriseServices.ITransaction**对象。</xref:System.Transactions> </xref:System.Transactions.Transaction> 它还具有略有不同的语义︰ 后在事务中显式登记连接，不能取消登记或第一个事务完成之前在另一个事务中登记。 有关分布式事务的详细信息，请参阅[分布式事务](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public override void EnlistTransaction (System.Transactions.Transaction transaction);
    parameters:
    - id: transaction
      type: System.Transactions.Transaction
      description: "对现有的引用<xref href=&quot;System.Transactions.Transaction&quot;></xref>用于登记的。"
  overload: System.Data.OracleClient.OracleConnection.EnlistTransaction*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.GetSchema
  id: GetSchema
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: GetSchema()
  nameWithType: OracleConnection.GetSchema()
  fullName: System.Data.OracleClient.OracleConnection.GetSchema()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "返回此数据源的架构信息<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;> </xref>。"
  syntax:
    content: public override System.Data.DataTable GetSchema ();
    parameters: []
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>包含架构信息。"
  overload: System.Data.OracleClient.OracleConnection.GetSchema*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.GetSchema(System.String)
  id: GetSchema(System.String)
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: GetSchema(String)
  nameWithType: OracleConnection.GetSchema(String)
  fullName: System.Data.OracleClient.OracleConnection.GetSchema(String)
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "返回此数据源的架构信息<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;></xref>使用架构名称指定的字符串。"
  remarks: "使用 GetSchema 查询区分大小写。 由于 Oracle 的处理的事例时首次创建架构，这可能导致意外的结果。       如果架构创建不带引号`,`Oracle 以大写形式存储的对象名称。 如果创建包含引号的架构，Oracle 提供的大小写方面存储的对象名称。       例如，假设你创建一个名为 MyTable，使用以下两个语句之一表︰ `CREATE TABLE MyTable ...` `CREATE TABLE &quot;MyTable&quot; ...`检索有关通过此表信息**GetSchema**方法中第一种情况，你将必须作为自变量中传递&quot;MYTABLE&quot;。        在第二种情况，你必须在作为参数传递&quot;MyTable&quot;。"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName);
    parameters:
    - id: collectionName
      type: System.String
      description: "指定要返回的架构的名称。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>包含架构信息。"
  overload: System.Data.OracleClient.OracleConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>指定为 null。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])
  id: GetSchema(System.String,System.String[])
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: GetSchema(String,String[])
  nameWithType: OracleConnection.GetSchema(String,String[])
  fullName: System.Data.OracleClient.OracleConnection.GetSchema(String,String[])
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "返回此数据源的架构信息<xref href=&quot;System.Data.OracleClient.OracleConnection&quot;></xref>架构名称和指定的字符串数组的限制值使用指定的字符串。"
  remarks: "`restrictionValues`参数可以提供的值所指定的特定集合的限制集合的 n 深度。 为了对给定的限制，设置值和设置的其他限制的值，你需要设置前面的限制条件为 null，然后为你想要为指定值的限制中的相应值。       此示例为&quot;表&quot;集合。 如果&quot;Tables&quot;集合具有 3 限制︰ 数据库、 所有者和表名称;你想要取回仅与&quot;Carl&quot;的所有者关联的表，然后你将需要以通过 （至少） 的以下值︰ null，&quot;Carl&quot;。 如果未传入限制值，默认值用于该限制。 这将是相同的映射与传入 null，这是不同于传入的参数值为空字符串。 在这种情况下，空字符串 (&quot;&quot;) 被视为可为指定的参数的值。       查询使用<xref:System.Data.OracleClient.OracleConnection.GetSchema%2A>区分大小写。</xref:System.Data.OracleClient.OracleConnection.GetSchema%2A> 由于 Oracle 的处理的事例时首次创建架构，这可能导致意外的结果。       如果架构创建不带引号`,`Oracle 以大写形式存储的对象名称。 如果创建包含引号的架构，Oracle 提供的大小写方面存储的对象名称。       例如，假设你创建一个名为 MyTable，使用以下两个语句之一表︰ `CREATE TABLE MyTable ...` `CREATE TABLE &quot;MyTable&quot; ...`检索有关通过此表信息**GetSchema**方法中第一种情况，你将必须作为自变量中传递&quot;MYTABLE&quot;。        在第二种情况，你必须在作为参数传递&quot;MyTable&quot;。"
  syntax:
    content: public override System.Data.DataTable GetSchema (string collectionName, string[] restrictionValues);
    parameters:
    - id: collectionName
      type: System.String
      description: "指定要返回的架构的名称。"
    - id: restrictionValues
      type: System.String[]
      description: "请求的架构的限制值的一组。"
    return:
      type: System.Data.DataTable
      description: "A <xref href=&quot;System.Data.DataTable&quot;> </xref>包含架构信息。"
  overload: System.Data.OracleClient.OracleConnection.GetSchema*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>collectionName</code>指定为 null。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.InfoMessage
  id: InfoMessage
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: InfoMessage
  nameWithType: OracleConnection.InfoMessage
  fullName: System.Data.OracleClient.OracleConnection.InfoMessage
  type: Event
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "当 Oracle 发送警告或信息性消息时发生。"
  remarks: "由于数据提供程序获得成功与信息消息时，适用于 Oracle 的.NET Framework 数据提供程序使用 Oracle 调用接口 (OCI)，则会生成 InfoMessage 事件。 示例将创建包含语法错误的存储的过程。 调用<xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A>方法将成功。</xref:System.Data.OracleClient.OracleCommand.ExecuteNonQuery%2A> 但是会通知你语法错误生成 InfoMessage 事件。       想要处理警告或信息性消息由服务器发送客户端应创建<xref:System.Data.OracleClient.OracleInfoMessageEventHandler>委托来侦听此事件。</xref:System.Data.OracleClient.OracleInfoMessageEventHandler>"
  syntax:
    content: public event System.Data.OracleClient.OracleInfoMessageEventHandler InfoMessage;
    return:
      type: System.Data.OracleClient.OracleInfoMessageEventHandler
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.Open
  id: Open
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: Open()
  nameWithType: OracleConnection.Open()
  fullName: System.Data.OracleClient.OracleConnection.Open()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "指定受支持<xref:System.Data.OracleClient.OracleConnection.ConnectionString*>。</xref:System.Data.OracleClient.OracleConnection.ConnectionString*>属性设置打开与数据库的连接"
  remarks: "<xref:System.Data.OracleClient.OracleConnection>从连接池中绘制的开放连接，如果有的话。</xref:System.Data.OracleClient.OracleConnection> 否则，它在建立新连接到数据库。      1> [!NOTE]&1;> 如果<xref:System.Data.OracleClient.OracleConnection>超出范围，它表示的连接不会关闭自动。</xref:System.Data.OracleClient.OracleConnection> 因此，你显式必须通过调用<xref:System.Data.OracleClient.OracleConnection.Close%2A>.</xref:System.Data.OracleClient.OracleConnection.Close%2A>关闭连接"
  syntax:
    content: public override void Open ();
    parameters: []
  overload: System.Data.OracleClient.OracleConnection.Open*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "连接未打开。"
  - type: System.Data.OracleClient.OracleException
    commentId: T:System.Data.OracleClient.OracleException
    description: "无法更改数据库。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.ServerVersion
  id: ServerVersion
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: ServerVersion
  nameWithType: OracleConnection.ServerVersion
  fullName: System.Data.OracleClient.OracleConnection.ServerVersion
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取一个字符串，该字符串包含客户端连接到服务器的版本。"
  remarks: "ServerVersion 属性是在 Oracle 版本格式。 例如，对于 Oracle8 版本的格式是窗体中的字符串&quot;8.1.7.0.0 Oracle8 释放 8.1.7.0.0-生产。&quot;"
  example:
  - "The following example creates an <xref:System.Data.OracleClient.OracleConnection> and displays some of its read-only properties.  \n  \n [!code-vb[Classic WebData OracleConnection.ServerVersion#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_3_1.vb)]\n [!code-cs[Classic WebData OracleConnection.ServerVersion#1](~/add/codesnippet/csharp/p-system.data.oracleclie_3_1.cs)]"
  syntax:
    content: public override string ServerVersion { get; }
    return:
      type: System.String
      description: "连接的服务器的版本。"
  overload: System.Data.OracleClient.OracleConnection.ServerVersion*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "连接已关闭。"
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.State
  id: State
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: State
  nameWithType: OracleConnection.State
  fullName: System.Data.OracleClient.OracleConnection.State
  type: Property
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "获取连接的当前状态。"
  remarks: "允许的状态更改是:-从`Closed`到`Open`，使用`Open`方法<xref:System.Data.OracleClient.OracleConnection>对象。</xref:System.Data.OracleClient.OracleConnection>      -从`Open`到`Closed`，使用<xref:System.Data.OracleClient.OracleConnection.Close%2A>方法<xref:System.Data.OracleClient.OracleConnection>对象。</xref:System.Data.OracleClient.OracleConnection> </xref:System.Data.OracleClient.OracleConnection.Close%2A>"
  example:
  - "The following example creates an instance of a derived class, <xref:System.Data.OracleClient.OracleConnection>, sets its <xref:System.Data.IDbConnection.ConnectionString%2A>, and displays its State.  \n  \n [!code-cs[Classic WebData OracleConnection.State#1](~/add/codesnippet/csharp/p-system.data.oracleclie_9_1.cs)]\n [!code-vb[Classic WebData OracleConnection.State#1](~/add/codesnippet/visualbasic/p-system.data.oracleclie_9_1.vb)]"
  syntax:
    content: public override System.Data.ConnectionState State { get; }
    return:
      type: System.Data.ConnectionState
      description: "按位组合<xref href=&quot;System.Data.ConnectionState&quot;></xref>值。 默认值是<xref uid=&quot;langword_csharp_Closed&quot; name=&quot;Closed&quot; href=&quot;&quot;> </xref>。"
  overload: System.Data.OracleClient.OracleConnection.State*
  exceptions: []
  platform:
  - net462
- uid: System.Data.OracleClient.OracleConnection.System#ICloneable#Clone
  id: System#ICloneable#Clone
  isEii: true
  parent: System.Data.OracleClient.OracleConnection
  langs:
  - csharp
  name: System.ICloneable.Clone()
  nameWithType: OracleConnection.System.ICloneable.Clone()
  fullName: System.Data.OracleClient.OracleConnection.System.ICloneable.Clone()
  type: Method
  assemblies:
  - System.Data.OracleClient
  namespace: System.Data.OracleClient
  summary: "创建当前实例副本的新对象。"
  remarks: "此成员是显式接口成员的实现。 可以使用它时，才<xref:System.Data.OracleClient.OracleConnection>实例被强制转换为<xref:System.ICloneable>接口。</xref:System.ICloneable> </xref:System.Data.OracleClient.OracleConnection>"
  syntax:
    content: object ICloneable.Clone ();
    parameters: []
    return:
      type: System.Object
      description: "此实例副本的新对象..."
  overload: System.Data.OracleClient.OracleConnection.System#ICloneable#Clone*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Data.Common.DbConnection
  isExternal: false
  name: System.Data.Common.DbConnection
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Data.OracleClient.OracleException
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleException
  nameWithType: OracleException
  fullName: System.Data.OracleClient.OracleException
- uid: System.Data.OracleClient.OracleConnection.#ctor
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: OracleConnection()
  nameWithType: OracleConnection.OracleConnection()
  fullName: System.Data.OracleClient.OracleConnection.OracleConnection()
- uid: System.Data.OracleClient.OracleConnection.#ctor(System.String)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: OracleConnection(String)
  nameWithType: OracleConnection.OracleConnection(String)
  fullName: System.Data.OracleClient.OracleConnection.OracleConnection(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Data.OracleClient.OracleConnection.BeginDbTransaction(System.Data.IsolationLevel)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: BeginDbTransaction(IsolationLevel)
  nameWithType: OracleConnection.BeginDbTransaction(IsolationLevel)
  fullName: System.Data.OracleClient.OracleConnection.BeginDbTransaction(IsolationLevel)
- uid: System.Data.Common.DbTransaction
  parent: System.Data.Common
  isExternal: false
  name: DbTransaction
  nameWithType: DbTransaction
  fullName: System.Data.Common.DbTransaction
- uid: System.Data.IsolationLevel
  parent: System.Data
  isExternal: false
  name: IsolationLevel
  nameWithType: IsolationLevel
  fullName: System.Data.IsolationLevel
- uid: System.Data.OracleClient.OracleConnection.BeginTransaction
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: BeginTransaction()
  nameWithType: OracleConnection.BeginTransaction()
  fullName: System.Data.OracleClient.OracleConnection.BeginTransaction()
- uid: System.Data.OracleClient.OracleTransaction
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleTransaction
  nameWithType: OracleTransaction
  fullName: System.Data.OracleClient.OracleTransaction
- uid: System.Data.OracleClient.OracleConnection.BeginTransaction(System.Data.IsolationLevel)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: BeginTransaction(IsolationLevel)
  nameWithType: OracleConnection.BeginTransaction(IsolationLevel)
  fullName: System.Data.OracleClient.OracleConnection.BeginTransaction(IsolationLevel)
- uid: System.Data.OracleClient.OracleConnection.ChangeDatabase(System.String)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ChangeDatabase(String)
  nameWithType: OracleConnection.ChangeDatabase(String)
  fullName: System.Data.OracleClient.OracleConnection.ChangeDatabase(String)
- uid: System.Data.OracleClient.OracleConnection.ClearAllPools
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ClearAllPools()
  nameWithType: OracleConnection.ClearAllPools()
  fullName: System.Data.OracleClient.OracleConnection.ClearAllPools()
- uid: System.Data.OracleClient.OracleConnection.ClearPool(System.Data.OracleClient.OracleConnection)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ClearPool(OracleConnection)
  nameWithType: OracleConnection.ClearPool(OracleConnection)
  fullName: System.Data.OracleClient.OracleConnection.ClearPool(OracleConnection)
- uid: System.Data.OracleClient.OracleConnection
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleConnection
  nameWithType: OracleConnection
  fullName: System.Data.OracleClient.OracleConnection
- uid: System.Data.OracleClient.OracleConnection.Close
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: Close()
  nameWithType: OracleConnection.Close()
  fullName: System.Data.OracleClient.OracleConnection.Close()
- uid: System.Data.OracleClient.OracleConnection.ConnectionString
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OracleConnection.ConnectionString
  fullName: System.Data.OracleClient.OracleConnection.ConnectionString
- uid: System.Data.OracleClient.OracleConnection.ConnectionTimeout
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OracleConnection.ConnectionTimeout
  fullName: System.Data.OracleClient.OracleConnection.ConnectionTimeout
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Data.OracleClient.OracleConnection.CreateCommand
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: CreateCommand()
  nameWithType: OracleConnection.CreateCommand()
  fullName: System.Data.OracleClient.OracleConnection.CreateCommand()
- uid: System.Data.OracleClient.OracleCommand
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleCommand
  nameWithType: OracleCommand
  fullName: System.Data.OracleClient.OracleCommand
- uid: System.Data.OracleClient.OracleConnection.CreateDbCommand
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: CreateDbCommand()
  nameWithType: OracleConnection.CreateDbCommand()
  fullName: System.Data.OracleClient.OracleConnection.CreateDbCommand()
- uid: System.Data.Common.DbCommand
  parent: System.Data.Common
  isExternal: false
  name: DbCommand
  nameWithType: DbCommand
  fullName: System.Data.Common.DbCommand
- uid: System.Data.OracleClient.OracleConnection.Database
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: Database
  nameWithType: OracleConnection.Database
  fullName: System.Data.OracleClient.OracleConnection.Database
- uid: System.Data.OracleClient.OracleConnection.DataSource
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: DataSource
  nameWithType: OracleConnection.DataSource
  fullName: System.Data.OracleClient.OracleConnection.DataSource
- uid: System.Data.OracleClient.OracleConnection.Dispose(System.Boolean)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: OracleConnection.Dispose(Boolean)
  fullName: System.Data.OracleClient.OracleConnection.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(System.EnterpriseServices.ITransaction)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: EnlistDistributedTransaction(ITransaction)
  nameWithType: OracleConnection.EnlistDistributedTransaction(ITransaction)
  fullName: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction(ITransaction)
- uid: System.EnterpriseServices.ITransaction
  parent: System.EnterpriseServices
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: System.EnterpriseServices.ITransaction
- uid: System.Data.OracleClient.OracleConnection.EnlistTransaction(System.Transactions.Transaction)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: EnlistTransaction(Transaction)
  nameWithType: OracleConnection.EnlistTransaction(Transaction)
  fullName: System.Data.OracleClient.OracleConnection.EnlistTransaction(Transaction)
- uid: System.Transactions.Transaction
  parent: System.Transactions
  isExternal: false
  name: Transaction
  nameWithType: Transaction
  fullName: System.Transactions.Transaction
- uid: System.Data.OracleClient.OracleConnection.GetSchema
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: GetSchema()
  nameWithType: OracleConnection.GetSchema()
  fullName: System.Data.OracleClient.OracleConnection.GetSchema()
- uid: System.Data.DataTable
  parent: System.Data
  isExternal: false
  name: DataTable
  nameWithType: DataTable
  fullName: System.Data.DataTable
- uid: System.Data.OracleClient.OracleConnection.GetSchema(System.String)
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: GetSchema(String)
  nameWithType: OracleConnection.GetSchema(String)
  fullName: System.Data.OracleClient.OracleConnection.GetSchema(String)
- uid: System.Data.OracleClient.OracleConnection.GetSchema(System.String,System.String[])
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: GetSchema(String,String[])
  nameWithType: OracleConnection.GetSchema(String,String[])
  fullName: System.Data.OracleClient.OracleConnection.GetSchema(String,String[])
- uid: System.String[]
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String[]
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Data.OracleClient.OracleConnection.InfoMessage
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: InfoMessage
  nameWithType: OracleConnection.InfoMessage
  fullName: System.Data.OracleClient.OracleConnection.InfoMessage
- uid: System.Data.OracleClient.OracleInfoMessageEventHandler
  parent: System.Data.OracleClient
  isExternal: false
  name: OracleInfoMessageEventHandler
  nameWithType: OracleInfoMessageEventHandler
  fullName: System.Data.OracleClient.OracleInfoMessageEventHandler
- uid: System.Data.OracleClient.OracleConnection.Open
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: Open()
  nameWithType: OracleConnection.Open()
  fullName: System.Data.OracleClient.OracleConnection.Open()
- uid: System.Data.OracleClient.OracleConnection.ServerVersion
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OracleConnection.ServerVersion
  fullName: System.Data.OracleClient.OracleConnection.ServerVersion
- uid: System.Data.OracleClient.OracleConnection.State
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: State
  nameWithType: OracleConnection.State
  fullName: System.Data.OracleClient.OracleConnection.State
- uid: System.Data.ConnectionState
  parent: System.Data
  isExternal: false
  name: ConnectionState
  nameWithType: ConnectionState
  fullName: System.Data.ConnectionState
- uid: System.Data.OracleClient.OracleConnection.System#ICloneable#Clone
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: System.ICloneable.Clone()
  nameWithType: OracleConnection.System.ICloneable.Clone()
  fullName: System.Data.OracleClient.OracleConnection.System.ICloneable.Clone()
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Data.OracleClient.OracleConnection.#ctor*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: OracleConnection
  nameWithType: OracleConnection.OracleConnection
- uid: System.Data.OracleClient.OracleConnection.BeginDbTransaction*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: BeginDbTransaction
  nameWithType: OracleConnection.BeginDbTransaction
- uid: System.Data.OracleClient.OracleConnection.BeginTransaction*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: BeginTransaction
  nameWithType: OracleConnection.BeginTransaction
- uid: System.Data.OracleClient.OracleConnection.ChangeDatabase*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ChangeDatabase
  nameWithType: OracleConnection.ChangeDatabase
- uid: System.Data.OracleClient.OracleConnection.ClearAllPools*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ClearAllPools
  nameWithType: OracleConnection.ClearAllPools
- uid: System.Data.OracleClient.OracleConnection.ClearPool*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ClearPool
  nameWithType: OracleConnection.ClearPool
- uid: System.Data.OracleClient.OracleConnection.Close*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: Close
  nameWithType: OracleConnection.Close
- uid: System.Data.OracleClient.OracleConnection.ConnectionString*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ConnectionString
  nameWithType: OracleConnection.ConnectionString
- uid: System.Data.OracleClient.OracleConnection.ConnectionTimeout*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ConnectionTimeout
  nameWithType: OracleConnection.ConnectionTimeout
- uid: System.Data.OracleClient.OracleConnection.CreateCommand*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: CreateCommand
  nameWithType: OracleConnection.CreateCommand
- uid: System.Data.OracleClient.OracleConnection.CreateDbCommand*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: CreateDbCommand
  nameWithType: OracleConnection.CreateDbCommand
- uid: System.Data.OracleClient.OracleConnection.Database*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: Database
  nameWithType: OracleConnection.Database
- uid: System.Data.OracleClient.OracleConnection.DataSource*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: DataSource
  nameWithType: OracleConnection.DataSource
- uid: System.Data.OracleClient.OracleConnection.Dispose*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: Dispose
  nameWithType: OracleConnection.Dispose
- uid: System.Data.OracleClient.OracleConnection.EnlistDistributedTransaction*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: EnlistDistributedTransaction
  nameWithType: OracleConnection.EnlistDistributedTransaction
- uid: System.Data.OracleClient.OracleConnection.EnlistTransaction*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: EnlistTransaction
  nameWithType: OracleConnection.EnlistTransaction
- uid: System.Data.OracleClient.OracleConnection.GetSchema*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: GetSchema
  nameWithType: OracleConnection.GetSchema
- uid: System.Data.OracleClient.OracleConnection.Open*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: Open
  nameWithType: OracleConnection.Open
- uid: System.Data.OracleClient.OracleConnection.ServerVersion*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: ServerVersion
  nameWithType: OracleConnection.ServerVersion
- uid: System.Data.OracleClient.OracleConnection.State*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: State
  nameWithType: OracleConnection.State
- uid: System.Data.OracleClient.OracleConnection.System#ICloneable#Clone*
  parent: System.Data.OracleClient.OracleConnection
  isExternal: false
  name: System.ICloneable.Clone
  nameWithType: OracleConnection.System.ICloneable.Clone
