### YamlMime:ManagedReference
items:
- uid: System.Transactions.CommittableTransaction
  id: CommittableTransaction
  children:
  - System.Transactions.CommittableTransaction.#ctor
  - System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  - System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  - System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  - System.Transactions.CommittableTransaction.Commit
  - System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  - System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  - System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  - System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  langs:
  - csharp
  name: CommittableTransaction
  nameWithType: CommittableTransaction
  fullName: System.Transactions.CommittableTransaction
  type: Class
  summary: "描述可提交的事务。"
  remarks: "CommittableTransaction 类提供了一种显式方法为应用程序使用事务，而不是使用<xref:System.Transactions.TransactionScope>类隐式。</xref:System.Transactions.TransactionScope> 与不同<xref:System.Transactions.TransactionScope>类，应用程序编写器需要明确调用<xref:System.Transactions.CommittableTransaction.Commit%2A>和<xref:System.Transactions.Transaction.Rollback%2A>方法以提交或中止事务。</xref:System.Transactions.Transaction.Rollback%2A> </xref:System.Transactions.CommittableTransaction.Commit%2A> </xref:System.Transactions.TransactionScope> 但是，只有一个事务的创建者可以提交事务。 副本可提交的事务，因此，通过获取<xref:System.Transactions.Transaction.Clone%2A>方法不是可提交。</xref:System.Transactions.Transaction.Clone%2A>      1> [!NOTE]&1;> 建议你创建使用隐式事务<xref:System.Transactions.TransactionScope>类，以便为你自动管理的环境事务上下文。</xref:System.Transactions.TransactionScope> 你还应使用<xref:System.Transactions.TransactionScope>和<xref:System.Transactions.DependentTransaction>跨多个函数调用或多个线程调用需要在同一事务的使用的应用程序的类。</xref:System.Transactions.DependentTransaction> </xref:System.Transactions.TransactionScope> 在此模型上的详细信息，请参阅[实现隐式事务使用事务范围](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主题。       创建 CommittableTransaction 不会自动设置环境事务，这是你的代码中执行的事务。 你可以获取或设置通过调用静态的环境事务<xref:System.Transactions.Transaction.Current%2A>的全局属性<xref:System.Transactions.Transaction>对象。</xref:System.Transactions.Transaction> </xref:System.Transactions.Transaction.Current%2A> 有关环境事务的详细信息，请参阅的&quot;使用 TransactionScopeOption 管理事务流&quot;部分[实现隐式事务使用事务范围](http://msdn.microsoft.com/en-us/1ddba95e-7587-48b2-8838-708c275e7199)主题。 如果未设置环境事务，在资源管理器上的任何操作不是该事务的一部分。 你需要显式设置或重置环境事务，以确保在正确的事务上下文下运行资源管理器。       除非 CommittableTransaction 已提交，否则仍然被锁定事务所涉及的所有资源。       CommittableTransaction 对象不能重复使用。 一旦具有已提交或回滚，不能在事务中再次使用或设置为当前的环境事务上下文。"
  example:
  - "The following sample creates two new instances of CommittableTransaction, commits and rolls back them respectively.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: 'public sealed class CommittableTransaction : System.Transactions.Transaction, IAsyncResult'
  inheritance:
  - System.Object
  - System.Transactions.Transaction
  implements:
  - System.IAsyncResult
  inheritedMembers:
  - System.Transactions.Transaction.Clone
  - System.Transactions.Transaction.Current
  - System.Transactions.Transaction.DependentClone(System.Transactions.DependentCloneOption)
  - System.Transactions.Transaction.Dispose
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistDurable(System.Guid,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification)
  - System.Transactions.Transaction.EnlistPromotableSinglePhase(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.IEnlistmentNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.EnlistVolatile(System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.Equals(System.Object)
  - System.Transactions.Transaction.GetHashCode
  - System.Transactions.Transaction.GetPromotedToken
  - System.Transactions.Transaction.IsolationLevel
  - System.Transactions.Transaction.op_Equality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.op_Inequality(System.Transactions.Transaction,System.Transactions.Transaction)
  - System.Transactions.Transaction.PromoteAndEnlistDurable(System.Guid,System.Transactions.IPromotableSinglePhaseNotification,System.Transactions.ISinglePhaseNotification,System.Transactions.EnlistmentOptions)
  - System.Transactions.Transaction.PromoterType
  - System.Transactions.Transaction.Rollback
  - System.Transactions.Transaction.Rollback(System.Exception)
  - System.Transactions.Transaction.SetDistributedTransactionIdentifier(System.Transactions.IPromotableSinglePhaseNotification,System.Guid)
  - System.Transactions.Transaction.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)
  - System.Transactions.Transaction.TransactionCompleted
  - System.Transactions.Transaction.TransactionInformation
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor
  id: '#ctor'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.CommittableTransaction&quot;></xref>类。"
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> and commits it.  \n  \n [!code-cs[Tx_CommittableTx#1](~/add/codesnippet/csharp/m-system.transactions.co_1.cs)]\n [!code-vb[Tx_CommittableTx#1](~/add/codesnippet/visualbasic/m-system.transactions.co_1.vb)]"
  syntax:
    content: public CommittableTransaction ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "尝试创建一个在 Windows 98、 Windows 98 Second Edition 或 Windows Millennium Edition 的事务。"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  id: '#ctor(System.TimeSpan)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.CommittableTransaction&quot;></xref>使用指定的类<code> timeout </code>值。"
  syntax:
    content: public CommittableTransaction (TimeSpan timeout);
    parameters:
    - id: timeout
      type: System.TimeSpan
      description: "最大事务可以存在之前被中止, 的时间量。"
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "尝试创建一个在 Windows 98、 Windows 98 Second Edition 或 Windows Millennium Edition 的事务。"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  id: '#ctor(System.Transactions.TransactionOptions)'
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
  type: Constructor
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "初始化的新实例<xref href=&quot;System.Transactions.CommittableTransaction&quot;></xref>类指定的事务选项。"
  remarks: ''
  example:
  - "The following sample creates a new instance of <xref:System.Transactions.CommittableTransaction> with options, and aborts it.  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public CommittableTransaction (System.Transactions.TransactionOptions options);
    parameters:
    - id: options
      type: System.Transactions.TransactionOptions
      description: "A <xref href=&quot;System.Transactions.TransactionOptions&quot;> </xref>结构，描述要用于新事务的事务选项。"
  overload: System.Transactions.CommittableTransaction.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "尝试创建一个在 Windows 98、 Windows 98 Second Edition 或 Windows Millennium Edition 的事务。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>options</code>是无效的。"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  id: BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "开始异步提交事务的尝试。"
  remarks: "完成事务之前，此方法将立即返回。 然后，在另一个线程，提交此事务和`asyncCallback`完成后调用委托。 调用此方法后，你不会收到事务结果之前调用<xref:System.Transactions.CommittableTransaction.EndCommit%2A>.</xref:System.Transactions.CommittableTransaction.EndCommit%2A>      1> [!NOTE]&1;> 提交进程可能会同步完成此方法调用中。"
  syntax:
    content: public IAsyncResult BeginCommit (AsyncCallback asyncCallback, object asyncState);
    parameters:
    - id: asyncCallback
      type: System.AsyncCallback
      description: "<xref:System.AsyncCallback>事务完成时调用的委托。</xref:System.AsyncCallback> 此参数可以为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，在这种情况下应用程序不会通知的事务的完成。 相反，应用程序必须使用<xref:System.IAsyncResult>接口来完成检查，并相应地，等待或调用<xref:System.Transactions.CommittableTransaction.EndCommit*>要等待的时间完成。</xref:System.Transactions.CommittableTransaction.EndCommit*> </xref:System.IAsyncResult>"
    - id: asyncState
      type: System.Object
      description: "一个对象，它可能包含与异步提交关联的任意状态信息。 此对象传递给回调，且在不被解释<xref href=&quot;System.Transactions&quot;> </xref>。 允许的 null 引用。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>检查异步操作的状态，或者要等待的时间才能完成该操作可由调用方的接口。</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.BeginCommit*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.Commit
  id: Commit
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "尝试提交事务。"
  remarks: "当调用此方法时，参与该事务已注册的所有对象进行轮询，并能够独立地指示它们对提交或回滚事务的投票。 如果任何参与者投票回滚事务，将回滚，此方法将引发<xref:System.Transactions.TransactionException>异常。</xref:System.Transactions.TransactionException> 为事务正常出现这种情况，你的代码应捕获和处理此类异常。       提交和<xref:System.Transactions.CommittableTransaction.EndCommit%2A>阻止，直到事务处理的第一阶段已完成。</xref:System.Transactions.CommittableTransaction.EndCommit%2A> 第一阶段结束后所有的资源管理器并在事务中的登记具有投票事务结果和<xref:System.Transactions.TransactionManager>持久决定提交或中止事务。</xref:System.Transactions.TransactionManager> 处理的第二阶段始终是异步的。 因此，没有能保证数据在给定的事务中提交从将立即可用之后时使用另一个事务来查看此数据。       因为此方法阻止事务处理的第一阶段完成之前，应格外小心使用此方法在 Windows 窗体 (WinForm) 应用程序或死锁时可能会发生。 如果调用中一个 WinForm 控件事件 （例如，单击的按钮），此方法，并且使用同步<xref:System.Windows.Forms.Control.Invoke%2A>方法来指示要执行中间处理将发生死锁的事务，一些 UI 任务 （例如，不断变化的颜色） 的控件。</xref:System.Windows.Forms.Control.Invoke%2A> 这是因为<xref:System.Windows.Forms.Control.Invoke%2A>方法是同步方法，并阻止工作线程，直到用户界面线程完成其作业。</xref:System.Windows.Forms.Control.Invoke%2A> 但是，在我们的方案，UI 线程正在还等待工作线程以提交事务。 结果是，所有线程都无法继续并且作用域将无限期等待完成的提交。 应使用<xref:System.Windows.Forms.Control.BeginInvoke%2A>而非<xref:System.Windows.Forms.Control.Invoke%2A>只要有可能，因为它是异步的因此不太容易发生死锁。</xref:System.Windows.Forms.Control.Invoke%2A> </xref:System.Windows.Forms.Control.BeginInvoke%2A>"
  syntax:
    content: public void Commit ();
    parameters: []
  overload: System.Transactions.CommittableTransaction.Commit*
  exceptions:
  - type: System.Transactions.TransactionInDoubtException
    commentId: T:System.Transactions.TransactionInDoubtException
    description: "在事务上调用了提交和该事务才成为<xref href=&quot;System.Transactions.TransactionStatus&quot;> </xref>。"
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "提交称为，事务能够回滚第一次。"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  id: EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
  type: Method
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "结束异步提交事务的尝试。"
  remarks: "在作为参数传递给指定的回调委托，应调用此方法<xref:System.Transactions.CommittableTransaction.BeginCommit%2A>方法，在完成后与异步提交关联的任何清理工作。</xref:System.Transactions.CommittableTransaction.BeginCommit%2A> 你可以提前调用此方法，而无需等待委托。 如果调用此方法时，事务未完成，此方法将等待它完成。      1> [!CAUTION]&1;><xref:System.IAsyncResult.CompletedSynchronously%2A>属性返回`asyncResult`始终`false`，即使该操作同步完成。</xref:System.IAsyncResult.CompletedSynchronously%2A>       <xref:System.Transactions.CommittableTransaction.Commit%2A>和 EndCommit 阻止，直到事务处理的第一阶段已完成。</xref:System.Transactions.CommittableTransaction.Commit%2A> 第一阶段结束后所有的资源管理器并在事务中的登记具有投票事务结果和<xref:System.Transactions.TransactionManager>持久决定提交或中止事务。</xref:System.Transactions.TransactionManager> 处理的第二阶段始终是异步的。 因此，没有能保证数据在给定的事务中提交从将立即可用之后时使用另一个事务来查看此数据。"
  syntax:
    content: public void EndCommit (IAsyncResult asyncResult);
    parameters:
    - id: asyncResult
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>对象与异步提交关联。</xref:System.IAsyncResult>"
  overload: System.Transactions.CommittableTransaction.EndCommit*
  exceptions:
  - type: System.Transactions.TransactionAbortedException
    commentId: T:System.Transactions.TransactionAbortedException
    description: "<xref:System.Transactions.CommittableTransaction.BeginCommit*>调用和事务回滚第一次。</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  id: System#IAsyncResult#AsyncState
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取作为最后一个参数提供的对象<xref:System.Transactions.CommittableTransaction.BeginCommit*>方法调用。</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  syntax:
    content: object System.IAsyncResult.AsyncState { get; }
    return:
      type: System.Object
      description: "作为最后一个参数提供的对象<xref:System.Transactions.CommittableTransaction.BeginCommit*>方法调用。</xref:System.Transactions.CommittableTransaction.BeginCommit*>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  id: System#IAsyncResult#AsyncWaitHandle
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取<xref:System.Threading.WaitHandle>用于等待异步操作以完成。</xref:System.Threading.WaitHandle>"
  syntax:
    content: System.Threading.WaitHandle System.IAsyncResult.AsyncWaitHandle { get; }
    return:
      type: System.Threading.WaitHandle
      description: "A<xref:System.Threading.WaitHandle>用于等待异步操作以完成。</xref:System.Threading.WaitHandle>"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  id: System#IAsyncResult#CompletedSynchronously
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取一个指示是否已同步完成异步提交操作。"
  syntax:
    content: bool System.IAsyncResult.CompletedSynchronously { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果同步进行; 完成异步提交操作否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 此属性始终返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>即使操作同步完成。"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  exceptions: []
  platform:
  - net462
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  id: System#IAsyncResult#IsCompleted
  isEii: true
  parent: System.Transactions.CommittableTransaction
  langs:
  - csharp
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
  type: Property
  assemblies:
  - System.Transactions
  namespace: System.Transactions
  summary: "获取异步提交操作已完成的指示。"
  syntax:
    content: bool System.IAsyncResult.IsCompleted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果该操作已完成;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Transactions.Transaction
  isExternal: false
  name: System.Transactions.Transaction
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Transactions.TransactionInDoubtException
  parent: System.Transactions
  isExternal: false
  name: TransactionInDoubtException
  nameWithType: TransactionInDoubtException
  fullName: System.Transactions.TransactionInDoubtException
- uid: System.Transactions.TransactionAbortedException
  parent: System.Transactions
  isExternal: false
  name: TransactionAbortedException
  nameWithType: TransactionAbortedException
  fullName: System.Transactions.TransactionAbortedException
- uid: System.Transactions.CommittableTransaction.#ctor
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction()
  nameWithType: CommittableTransaction.CommittableTransaction()
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction()
- uid: System.Transactions.CommittableTransaction.#ctor(System.TimeSpan)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TimeSpan)
  nameWithType: CommittableTransaction.CommittableTransaction(TimeSpan)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Transactions.CommittableTransaction.#ctor(System.Transactions.TransactionOptions)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction(TransactionOptions)
  nameWithType: CommittableTransaction.CommittableTransaction(TransactionOptions)
  fullName: System.Transactions.CommittableTransaction.CommittableTransaction(TransactionOptions)
- uid: System.Transactions.TransactionOptions
  parent: System.Transactions
  isExternal: false
  name: TransactionOptions
  nameWithType: TransactionOptions
  fullName: System.Transactions.TransactionOptions
- uid: System.Transactions.CommittableTransaction.BeginCommit(System.AsyncCallback,System.Object)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit(AsyncCallback,Object)
  nameWithType: CommittableTransaction.BeginCommit(AsyncCallback,Object)
  fullName: System.Transactions.CommittableTransaction.BeginCommit(AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Transactions.CommittableTransaction.Commit
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit()
  nameWithType: CommittableTransaction.Commit()
  fullName: System.Transactions.CommittableTransaction.Commit()
- uid: System.Transactions.CommittableTransaction.EndCommit(System.IAsyncResult)
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit(IAsyncResult)
  nameWithType: CommittableTransaction.EndCommit(IAsyncResult)
  fullName: System.Transactions.CommittableTransaction.EndCommit(IAsyncResult)
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Threading.WaitHandle
  parent: System.Threading
  isExternal: true
  name: WaitHandle
  nameWithType: WaitHandle
  fullName: System.Threading.WaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
  fullName: System.Transactions.CommittableTransaction.System.IAsyncResult.IsCompleted
- uid: System.Transactions.CommittableTransaction.#ctor*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: CommittableTransaction
  nameWithType: CommittableTransaction.CommittableTransaction
- uid: System.Transactions.CommittableTransaction.BeginCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: BeginCommit
  nameWithType: CommittableTransaction.BeginCommit
- uid: System.Transactions.CommittableTransaction.Commit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: Commit
  nameWithType: CommittableTransaction.Commit
- uid: System.Transactions.CommittableTransaction.EndCommit*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: EndCommit
  nameWithType: CommittableTransaction.EndCommit
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncState*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncState
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncState
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#AsyncWaitHandle*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.AsyncWaitHandle
  nameWithType: CommittableTransaction.System.IAsyncResult.AsyncWaitHandle
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#CompletedSynchronously*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.CompletedSynchronously
  nameWithType: CommittableTransaction.System.IAsyncResult.CompletedSynchronously
- uid: System.Transactions.CommittableTransaction.System#IAsyncResult#IsCompleted*
  parent: System.Transactions.CommittableTransaction
  isExternal: false
  name: System.IAsyncResult.IsCompleted
  nameWithType: CommittableTransaction.System.IAsyncResult.IsCompleted
