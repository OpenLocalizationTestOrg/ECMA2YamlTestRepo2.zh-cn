### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Dispatcher.ICallContextInitializer
  id: ICallContextInitializer
  children:
  - System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)
  - System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)
  langs:
  - csharp
  name: ICallContextInitializer
  nameWithType: ICallContextInitializer
  fullName: System.ServiceModel.Dispatcher.ICallContextInitializer
  type: Interface
  summary: "定义初始化和回收线程本地存储使用的线程来调用用户代码的方法。"
  remarks: "实现 ICallContextInitializer 接口并将其添加到<xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=fullName>属性来初始化和清理调用用户代码的线程的线程本地存储。</xref:System.ServiceModel.Dispatcher.DispatchOperation.CallContextInitializers%2A?displayProperty=fullName> 典型用法是设置某些值，如模拟或更改<xref:System.Globalization.CultureInfo?displayProperty=fullName>.</xref:System.Globalization.CultureInfo?displayProperty=fullName> 如果你想要建立某种自定义上下文，这是初始化静态上下文属性，它是然后开发人员可以在操作过程中的扩展点。"
  syntax:
    content: public interface ICallContextInitializer
  implements: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)
  id: AfterInvoke(System.Object)
  parent: System.ServiceModel.Dispatcher.ICallContextInitializer
  langs:
  - csharp
  name: AfterInvoke(Object)
  nameWithType: ICallContextInitializer.AfterInvoke(Object)
  fullName: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "实现它来参与清理调用该操作的线程。"
  remarks: "使用此方法以执行任何必要清理操作线程。"
  syntax:
    content: public void AfterInvoke (object correlationState);
    parameters:
    - id: correlationState
      type: System.Object
      description: "从返回的关联对象<xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke*>方法。</xref:System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke*>"
  overload: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)
  id: BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.ICallContextInitializer
  langs:
  - csharp
  name: BeforeInvoke(InstanceContext,IClientChannel,Message)
  nameWithType: ICallContextInitializer.BeforeInvoke(InstanceContext,IClientChannel,Message)
  fullName: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(InstanceContext,IClientChannel,Message)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Dispatcher
  summary: "实现它来参与初始化操作线程。"
  remarks: "实现 BeforeInvoke 方法可初始化和清理调用用户代码的线程的线程本地存储。 典型用法是设置某些值，如模拟或更改<xref:System.Globalization.CultureInfo?displayProperty=fullName>.</xref:System.Globalization.CultureInfo?displayProperty=fullName> 如果你想要建立某种自定义上下文，这是初始化静态上下文属性，它是然后开发人员可以在操作过程中的扩展点。"
  syntax:
    content: public object BeforeInvoke (System.ServiceModel.InstanceContext instanceContext, System.ServiceModel.IClientChannel channel, System.ServiceModel.Channels.Message message);
    parameters:
    - id: instanceContext
      type: System.ServiceModel.InstanceContext
      description: "操作服务实例。"
    - id: channel
      type: System.ServiceModel.IClientChannel
      description: "客户端通道。"
    - id: message
      type: System.ServiceModel.Channels.Message
      description: "传入的消息。"
    return:
      type: System.Object
      description: "返回作为参数传递的相关对象<xref:System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke*>方法。</xref:System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke*>"
  overload: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(System.Object)
  parent: System.ServiceModel.Dispatcher.ICallContextInitializer
  isExternal: false
  name: AfterInvoke(Object)
  nameWithType: ICallContextInitializer.AfterInvoke(Object)
  fullName: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke(Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(System.ServiceModel.InstanceContext,System.ServiceModel.IClientChannel,System.ServiceModel.Channels.Message)
  parent: System.ServiceModel.Dispatcher.ICallContextInitializer
  isExternal: false
  name: BeforeInvoke(InstanceContext,IClientChannel,Message)
  nameWithType: ICallContextInitializer.BeforeInvoke(InstanceContext,IClientChannel,Message)
  fullName: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke(InstanceContext,IClientChannel,Message)
- uid: System.ServiceModel.InstanceContext
  parent: System.ServiceModel
  isExternal: true
  name: InstanceContext
  nameWithType: InstanceContext
  fullName: System.ServiceModel.InstanceContext
- uid: System.ServiceModel.IClientChannel
  parent: System.ServiceModel
  isExternal: true
  name: IClientChannel
  nameWithType: IClientChannel
  fullName: System.ServiceModel.IClientChannel
- uid: System.ServiceModel.Channels.Message
  parent: System.ServiceModel.Channels
  isExternal: true
  name: Message
  nameWithType: Message
  fullName: System.ServiceModel.Channels.Message
- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.AfterInvoke*
  parent: System.ServiceModel.Dispatcher.ICallContextInitializer
  isExternal: false
  name: AfterInvoke
  nameWithType: ICallContextInitializer.AfterInvoke
- uid: System.ServiceModel.Dispatcher.ICallContextInitializer.BeforeInvoke*
  parent: System.ServiceModel.Dispatcher.ICallContextInitializer
  isExternal: false
  name: BeforeInvoke
  nameWithType: ICallContextInitializer.BeforeInvoke
