### YamlMime:ManagedReference
items:
- uid: System.Globalization.SortVersion
  id: SortVersion
  children:
  - System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)
  - System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)
  - System.Globalization.SortVersion.Equals(System.Object)
  - System.Globalization.SortVersion.FullVersion
  - System.Globalization.SortVersion.GetHashCode
  - System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  - System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  - System.Globalization.SortVersion.SortId
  langs:
  - csharp
  name: SortVersion
  nameWithType: SortVersion
  fullName: System.Globalization.SortVersion
  type: Class
  summary: "提供有关的 Unicode 版本的信息用于比较和排序字符串。"
  remarks: "从[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]通过[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]、 每个版本的.net Framework 包含的表包含排序权重和字符串标准化和上的数据基于 Unicode 的特定版本。 在[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]，这些表是否存在取决于操作系统:-在[!INCLUDE[win7](~/add/includes/win7-md.md)]和以前版本的 Windows 操作系统，表继续要用于比较和排序字符串。      -在[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]，.NET Framework 委托的字符串比较和排序到操作系统的操作。       因此，字符串比较的结果可以依赖不仅基于.NET Framework 版本中，而且还在操作系统版本上，以下表所示。 请注意，此列表受支持的 Unicode 版本的适用于字符的比较和排序仅;它不适用于分类的 Unicode 字符按类别。      |.NET Framework 版本 |操作系统 |Unicode 版本 |  |----------------------------|----------------------|---------------------|  |[!INCLUDE[net_v40_short](~/add/includes/net-v40-short-md.md)]|所有操作系统 |Unicode 5.0 |  |[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]和更高版本的.NET Framework |[!INCLUDE[win7](~/add/includes/win7-md.md)]|Unicode 5.0 |  |[!INCLUDE[net_v45](~/add/includes/ajax-current-ext-md.md)]和更高版本的.NET Framework |[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]和更高版本的 Windows 操作系统版本 |Unicode 6.0 |      上[!INCLUDE[win8](~/add/includes/ajax-current-ext-md.md)]，这是因为的 Unicode 版本的用于字符串比较和排序取决于操作系统的版本，字符串比较的结果可能会有所不同即使对于特定版本的.NET framework 运行的应用程序。       SortVersion 类提供有关.NET Framework 用于字符串比较和排序的 Unicode 版本信息。 它允许开发人员编写的应用程序可以检测和成功处理中用于比较和排序应用程序的字符串的 Unicode 版本的更改。       你可以实例化两种方式 SortVersion 对象:-通过调用<xref:System.Globalization.SortVersion.%23ctor%2A>构造函数，该实例化新 SortVersion 对象基于版本号和排序 id。</xref:System.Globalization.SortVersion.%23ctor%2A> 在重新创建中保存的数据的 SortVersion 对象时，此构造函数将最为有用。      -通过检索的值的<xref:System.Globalization.CompareInfo.Version%2A?displayProperty=fullName>属性。</xref:System.Globalization.CompareInfo.Version%2A?displayProperty=fullName> 此属性提供有关使用.NET Framework 应用程序正在其运行的 Unicode 版本的信息。       SortVersion 类具有两个属性，<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>，这表示存在 Unicode 版本和用于字符串比较的特定区域性。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> <xref:System.Globalization.SortVersion.FullVersion%2A>属性是反映用于字符串比较的 Unicode 版本的任意数值和<xref:System.Globalization.SortVersion.SortId%2A>属性是一个任意<xref:System.Guid>反映其约定用于字符串比较的区域性。</xref:System.Guid> </xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> 仅当通过比较两个 SortVersion 对象时，这两个属性的值是重要<xref:System.Globalization.SortVersion.Equals%2A>方法，<xref:System.Globalization.SortVersion.op_Equality%2A>运算符，或<xref:System.Globalization.SortVersion.op_Inequality%2A>运算符。</xref:System.Globalization.SortVersion.op_Inequality%2A> </xref:System.Globalization.SortVersion.op_Equality%2A> </xref:System.Globalization.SortVersion.Equals%2A>       通常，您使用了一个 SortVersion 对象保存或检索某种形式的区分区域性的、 有序的字符串数据时，如索引或文本字符串本身。 这需要执行下列步骤︰ 1。  保存后的有序的字符串数据，<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>属性值还会保存。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A>      2.  检索已排序的字符串数据时，你可以重新创建用于对字符串进行排序通过调用的 SortVersion 对象<xref:System.Globalization.SortVersion.%23ctor%2A>构造函数。</xref:System.Globalization.SortVersion.%23ctor%2A>      3.  此新实例化的 SortVersion 对象进行比较以反映其约定用于排序的字符串数据的区域性的 SortVersion 对象。      4.  如果两个 SortVersion 对象是否不相等，则必须重新排序的字符串数据。       示例进行了说明。"
  example:
  - "The following example contains a portion of the source code from an application that uses the SortVersion class to ensure that the native names of <xref:System.Globalization.RegionInfo> objects are ordered appropriately for the current system and current culture. It uses the <xref:System.IO.BinaryReader> and <xref:System.IO.BinaryWriter> objects to store and retrieve ordered data from a data file named `Regions.dat` rather than retrieving and ordering data each time the application is run. The example first checks to determine whether the data file exists. If it does not, it creates the data and sets the `reindex` flag, which indicates that the data must be resorted and saved again. Otherwise, it retrieves the data and compares the saved SortVersion object with the SortVersion object for the current culture on the current system. If they are not equal, or if the `reindex` flag had been set previously, it resorts the <xref:System.Globalization.RegionInfo> data.  \n  \n [!code-cs[System.Globalization.SortVersion#1](~/add/codesnippet/csharp/t-system.globalization.s_0_1.cs)]\n [!code-vb[System.Globalization.SortVersion#1](~/add/codesnippet/visualbasic/t-system.globalization.s_0_1.vb)]"
  syntax:
    content: 'public sealed class SortVersion : IEquatable<System.Globalization.SortVersion>'
  inheritance:
  - System.Object
  implements:
  - System.IEquatable<System.Globalization.SortVersion>
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)
  id: '#ctor(System.Int32,System.Guid)'
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: SortVersion(Int32,Guid)
  nameWithType: SortVersion.SortVersion(Int32,Guid)
  fullName: System.Globalization.SortVersion.SortVersion(Int32,Guid)
  type: Constructor
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "创建的新实例<xref href=&quot;System.Globalization.SortVersion&quot;></xref>类。"
  remarks: "此构造函数实例化的<xref:System.Globalization.SortVersion>对象与指定的版本和排序 id。</xref:System.Globalization.SortVersion> `fullVersion`自变量分配给<xref:System.Globalization.SortVersion.FullVersion%2A>属性。</xref:System.Globalization.SortVersion.FullVersion%2A> `sortId`自变量分配给<xref:System.Globalization.SortVersion.SortId%2A>属性。</xref:System.Globalization.SortVersion.SortId%2A>       此构造函数可用于重新创建<xref:System.Globalization.SortVersion>对象从已序列化或保存的数据。</xref:System.Globalization.SortVersion> 然后可以与当前的应用程序版本，以确定是否有可用的用于显示和排序应用程序的字符串的 Unicode 版本的比较此版本。"
  syntax:
    content: public SortVersion (int fullVersion, Guid sortId);
    parameters:
    - id: fullVersion
      type: System.Int32
      description: "版本号。"
    - id: sortId
      type: System.Guid
      description: "排序 id。"
  overload: System.Globalization.SortVersion.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)
  id: Equals(System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: Equals(SortVersion)
  nameWithType: SortVersion.Equals(SortVersion)
  fullName: System.Globalization.SortVersion.Equals(SortVersion)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Globalization.SortVersion&quot;></xref>实例是否等于指定<xref href=&quot;System.Globalization.SortVersion&quot;></xref>对象。"
  remarks: "两个<xref:System.Globalization.SortVersion>对象相等，如果其<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>属性是否相等。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> </xref:System.Globalization.SortVersion>"
  syntax:
    content: public bool Equals (System.Globalization.SortVersion other);
    parameters:
    - id: other
      type: System.Globalization.SortVersion
      description: "要与此实例进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> other </code>表示相同的版本与此实例; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.SortVersion.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: SortVersion.Equals(Object)
  fullName: System.Globalization.SortVersion.Equals(Object)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回一个值，该值指示是否这<xref href=&quot;System.Globalization.SortVersion&quot;></xref>实例是否等于指定的对象。"
  remarks: "两个<xref:System.Globalization.SortVersion>对象相等，如果其<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>属性是否相等。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> </xref:System.Globalization.SortVersion>"
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: "要与此实例进行比较的对象。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> obj </code>是<xref href=&quot;System.Globalization.SortVersion&quot;></xref>对象，表示相同的版本与此实例; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.SortVersion.Equals*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.FullVersion
  id: FullVersion
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: FullVersion
  nameWithType: SortVersion.FullVersion
  fullName: System.Globalization.SortVersion.FullVersion
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取完整版本数<xref href=&quot;System.Globalization.SortVersion&quot;></xref>对象。"
  remarks: "FullVersion 属性的值反映用于规范化和比较字符串的 Unicode 版本。"
  syntax:
    content: public int FullVersion { get; }
    return:
      type: System.Int32
      description: "此版本号<xref href=&quot;System.Globalization.SortVersion&quot;></xref>对象。"
  overload: System.Globalization.SortVersion.FullVersion*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.GetHashCode
  id: GetHashCode
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: SortVersion.GetHashCode()
  fullName: System.Globalization.SortVersion.GetHashCode()
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回此实例的哈希代码。"
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: "32 位有符号的整数哈希代码。"
  overload: System.Globalization.SortVersion.GetHashCode*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  id: op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: op_Equality(SortVersion,SortVersion)
  nameWithType: SortVersion.op_Equality(SortVersion,SortVersion)
  fullName: System.Globalization.SortVersion.op_Equality(SortVersion,SortVersion)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指示两个<xref href=&quot;System.Globalization.SortVersion&quot;></xref>实例是否相等。"
  remarks: "两个<xref:System.Globalization.SortVersion>对象是否相等，如果二者都`null`，或者，如果其<xref:System.Globalization.SortVersion.FullVersion%2A>和<xref:System.Globalization.SortVersion.SortId%2A>属性是否相等。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> </xref:System.Globalization.SortVersion>"
  syntax:
    content: public static bool op_Equality (System.Globalization.SortVersion left, System.Globalization.SortVersion right);
    parameters:
    - id: left
      type: System.Globalization.SortVersion
      description: "要比较的第一个实例。"
    - id: right
      type: System.Globalization.SortVersion
      description: "要比较的第二个实例。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>if the values of <code>left</code> and <code>right</code> are equal; otherwise, <xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;></xref>."
  overload: System.Globalization.SortVersion.op_Equality*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  id: op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: op_Inequality(SortVersion,SortVersion)
  nameWithType: SortVersion.op_Inequality(SortVersion,SortVersion)
  fullName: System.Globalization.SortVersion.op_Inequality(SortVersion,SortVersion)
  type: Operator
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "指示两个<xref href=&quot;System.Globalization.SortVersion&quot;></xref>实例是否不相等。"
  remarks: "两个<xref:System.Globalization.SortVersion>对象是否不相等，如果有`null`和另一个则不，或如果它们具有不同<xref:System.Globalization.SortVersion.FullVersion%2A>或<xref:System.Globalization.SortVersion.SortId%2A>属性值。</xref:System.Globalization.SortVersion.SortId%2A> </xref:System.Globalization.SortVersion.FullVersion%2A> </xref:System.Globalization.SortVersion>"
  syntax:
    content: public static bool op_Inequality (System.Globalization.SortVersion left, System.Globalization.SortVersion right);
    parameters:
    - id: left
      type: System.Globalization.SortVersion
      description: "要比较的第一个实例。"
    - id: right
      type: System.Globalization.SortVersion
      description: "要比较的第二个实例。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果值<code> left </code>和<code> right </code>不相等; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.SortVersion.op_Inequality*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.SortVersion.SortId
  id: SortId
  parent: System.Globalization.SortVersion
  langs:
  - csharp
  name: SortId
  nameWithType: SortVersion.SortId
  fullName: System.Globalization.SortVersion.SortId
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取此全局唯一标识符<xref href=&quot;System.Globalization.SortVersion&quot;></xref>对象。"
  remarks: "SortId 属性的值反映其约定影响字符串比较和排序的区域性。"
  syntax:
    content: public Guid SortId { get; }
    return:
      type: System.Guid
      description: "此全局唯一标识符<xref href=&quot;System.Globalization.SortVersion&quot;></xref>对象。"
  overload: System.Globalization.SortVersion.SortId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Globalization.SortVersion.#ctor(System.Int32,System.Guid)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: SortVersion(Int32,Guid)
  nameWithType: SortVersion.SortVersion(Int32,Guid)
  fullName: System.Globalization.SortVersion.SortVersion(Int32,Guid)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Guid
  parent: System
  isExternal: true
  name: Guid
  nameWithType: Guid
  fullName: System.Guid
- uid: System.Globalization.SortVersion.Equals(System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: Equals(SortVersion)
  nameWithType: SortVersion.Equals(SortVersion)
  fullName: System.Globalization.SortVersion.Equals(SortVersion)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.SortVersion
  parent: System.Globalization
  isExternal: false
  name: SortVersion
  nameWithType: SortVersion
  fullName: System.Globalization.SortVersion
- uid: System.Globalization.SortVersion.Equals(System.Object)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: Equals(Object)
  nameWithType: SortVersion.Equals(Object)
  fullName: System.Globalization.SortVersion.Equals(Object)
- uid: System.Globalization.SortVersion.FullVersion
  parent: System.Globalization.SortVersion
  isExternal: false
  name: FullVersion
  nameWithType: SortVersion.FullVersion
  fullName: System.Globalization.SortVersion.FullVersion
- uid: System.Globalization.SortVersion.GetHashCode
  parent: System.Globalization.SortVersion
  isExternal: false
  name: GetHashCode()
  nameWithType: SortVersion.GetHashCode()
  fullName: System.Globalization.SortVersion.GetHashCode()
- uid: System.Globalization.SortVersion.op_Equality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: op_Equality(SortVersion,SortVersion)
  nameWithType: SortVersion.op_Equality(SortVersion,SortVersion)
  fullName: System.Globalization.SortVersion.op_Equality(SortVersion,SortVersion)
- uid: System.Globalization.SortVersion.op_Inequality(System.Globalization.SortVersion,System.Globalization.SortVersion)
  parent: System.Globalization.SortVersion
  isExternal: false
  name: op_Inequality(SortVersion,SortVersion)
  nameWithType: SortVersion.op_Inequality(SortVersion,SortVersion)
  fullName: System.Globalization.SortVersion.op_Inequality(SortVersion,SortVersion)
- uid: System.Globalization.SortVersion.SortId
  parent: System.Globalization.SortVersion
  isExternal: false
  name: SortId
  nameWithType: SortVersion.SortId
  fullName: System.Globalization.SortVersion.SortId
- uid: System.Globalization.SortVersion.#ctor*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: SortVersion
  nameWithType: SortVersion.SortVersion
- uid: System.Globalization.SortVersion.Equals*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: Equals
  nameWithType: SortVersion.Equals
- uid: System.Globalization.SortVersion.FullVersion*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: FullVersion
  nameWithType: SortVersion.FullVersion
- uid: System.Globalization.SortVersion.GetHashCode*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: GetHashCode
  nameWithType: SortVersion.GetHashCode
- uid: System.Globalization.SortVersion.op_Equality*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: op_Equality
  nameWithType: SortVersion.op_Equality
- uid: System.Globalization.SortVersion.op_Inequality*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: op_Inequality
  nameWithType: SortVersion.op_Inequality
- uid: System.Globalization.SortVersion.SortId*
  parent: System.Globalization.SortVersion
  isExternal: false
  name: SortId
  nameWithType: SortVersion.SortId
