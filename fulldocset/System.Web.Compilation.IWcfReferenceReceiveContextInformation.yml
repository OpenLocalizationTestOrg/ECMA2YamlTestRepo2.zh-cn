### YamlMime:ManagedReference
items:
- uid: System.Web.Compilation.IWcfReferenceReceiveContextInformation
  id: IWcfReferenceReceiveContextInformation
  children:
  - System.Web.Compilation.IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation(System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.IServiceProvider)
  langs:
  - csharp
  name: IWcfReferenceReceiveContextInformation
  nameWithType: IWcfReferenceReceiveContextInformation
  fullName: System.Web.Compilation.IWcfReferenceReceiveContextInformation
  type: Interface
  summary: "定义实现，若要获取附加上下文信息的接口。"
  remarks: "此接口允许 WSDL 导入程序 mechanismto 接收额外的上下文信息来提供更好的代理生成和更好的开发人员体验，在 Visual Studio。 如果 WSDL 导入程序实现 IWcfReferenceReceiveContextInformation 接口，`ReceiveImportContextInformation`方法将由 WCF 代理生成器的任何方法之前调用<xref:System.ServiceModel.Description.IWsdlImportExtension>和<xref:System.ServiceModel.Description.IPolicyImportExtension>称为。</xref:System.ServiceModel.Description.IPolicyImportExtension> </xref:System.ServiceModel.Description.IWsdlImportExtension>       附加上下文信息引用的参数传递给`ReceiveImportContextInformation`方法。 参数包括的任何扩展名为的文件和一个实现的对象的引用的内容<xref:System.IServiceProvider>接口。</xref:System.IServiceProvider> 传递给方法的任何扩展文件特定于导入程序，用于存储所需的任何附加信息。 即 Visual Studio 不控制这些文件的内容，并不直接使用它们。      1> [!NOTE]&1;> 导入程序指 WCF 扩展性机制。 此机制允许你自定义从描述服务的元数据 (WSDL/XSD) 文档生成代理代码的方式。 有关详细信息，请参阅[导入 WCF 扩展的自定义元数据](http://go.microsoft.com/fwlink/?LinkId=92310)MSDN 上。"
  syntax:
    content: public interface IWcfReferenceReceiveContextInformation
  implements: []
  platform:
  - net462
- uid: System.Web.Compilation.IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation(System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.IServiceProvider)
  id: ReceiveImportContextInformation(System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.IServiceProvider)
  parent: System.Web.Compilation.IWcfReferenceReceiveContextInformation
  langs:
  - csharp
  name: ReceiveImportContextInformation(IDictionary<String,Byte>,IServiceProvider)
  nameWithType: IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation(IDictionary<String,Byte>,IServiceProvider)
  fullName: System.Web.Compilation.IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation(IDictionary<String,Byte>,IServiceProvider)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Compilation
  summary: "获取附加上下文信息。"
  remarks: "`serviceReferenceExtensionFileContents`参数提供的与 WCF 服务引用，如 Reference.config 或已通过扩展性添加的自定义扩展文件.svcmap 文件相关联的任何扩展文件内容。      1> [!NOTE]&1;> 收到的服务提供程序特定于 Visual Studio 的任何接口在 ASP.NET 生成提供程序的上下文中运行时将不可用到导入扩展。 在 ASP.NET 项目中编译的 WCF 服务引用时，这种情况。"
  syntax:
    content: public void ReceiveImportContextInformation (System.Collections.Generic.IDictionary<string,byte[]> serviceReferenceExtensionFileContents, IServiceProvider serviceProvider);
    parameters:
    - id: serviceReferenceExtensionFileContents
      type: System.Collections.Generic.IDictionary{System.String,System.Byte[]}
      description: "提供内容的任何扩展名为的文件与 WCF 服务引用的.svcmap 文件关联。"
    - id: serviceProvider
      type: System.IServiceProvider
      description: "对 Visual Studio 服务提供商，以查询有关其他信息的引用。"
  overload: System.Web.Compilation.IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Web.Compilation.IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation(System.Collections.Generic.IDictionary{System.String,System.Byte[]},System.IServiceProvider)
  parent: System.Web.Compilation.IWcfReferenceReceiveContextInformation
  isExternal: false
  name: ReceiveImportContextInformation(IDictionary<String,Byte>,IServiceProvider)
  nameWithType: IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation(IDictionary<String,Byte>,IServiceProvider)
  fullName: System.Web.Compilation.IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation(IDictionary<String,Byte>,IServiceProvider)
- uid: System.Collections.Generic.IDictionary{System.String,System.Byte[]}
  parent: System.Collections.Generic
  isExternal: true
  name: IDictionary<String,Byte>
  nameWithType: IDictionary<String,Byte>
  fullName: System.Collections.Generic.IDictionary<System.String,System.Byte[]>
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary<System.String,System.Byte[]>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IServiceProvider
  parent: System
  isExternal: true
  name: IServiceProvider
  nameWithType: IServiceProvider
  fullName: System.IServiceProvider
- uid: System.Web.Compilation.IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation*
  parent: System.Web.Compilation.IWcfReferenceReceiveContextInformation
  isExternal: false
  name: ReceiveImportContextInformation
  nameWithType: IWcfReferenceReceiveContextInformation.ReceiveImportContextInformation
