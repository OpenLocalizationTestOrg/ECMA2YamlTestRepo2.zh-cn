### YamlMime:ManagedReference
items:
- uid: System.Security.Cryptography.ECDsaCng
  id: ECDsaCng
  children:
  - System.Security.Cryptography.ECDsaCng.#ctor
  - System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  - System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  - System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  - System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)
  - System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDsaCng.HashAlgorithm
  - System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsaCng.Key
  - System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])
  - System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)
  - System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)
  - System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  - System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)
  - System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  - System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])
  - System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])
  - System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  - System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  langs:
  - csharp
  name: ECDsaCng
  nameWithType: ECDsaCng
  fullName: System.Security.Cryptography.ECDsaCng
  type: Class
  summary: "提供下一代加密技术 (CNG) 实现的椭圆曲线数字签名算法 (ECDSA)。"
  remarks: "此类派生自<xref:System.Security.Cryptography.ECDsa>抽象基的类。</xref:System.Security.Cryptography.ECDsa>"
  example:
  - "The following example shows how to use the ECDsaCng class to sign a message and how to use the signature to verify that the message has not been altered.  \n  \n [!code-cs[ECDsaCng#1](~/add/codesnippet/csharp/t-system.security.crypto_32_1.cs)]\n [!code-vb[ECDsaCng#1](~/add/codesnippet/visualbasic/t-system.security.crypto_32_1.vb)]"
  syntax:
    content: 'public sealed class ECDsaCng : System.Security.Cryptography.ECDsa'
  inheritance:
  - System.Object
  - System.Security.Cryptography.AsymmetricAlgorithm
  - System.Security.Cryptography.ECDsa
  implements: []
  inheritedMembers:
  - System.Security.Cryptography.AsymmetricAlgorithm.Clear
  - System.Security.Cryptography.AsymmetricAlgorithm.Dispose
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySize
  - System.Security.Cryptography.AsymmetricAlgorithm.KeySizeValue
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizes
  - System.Security.Cryptography.AsymmetricAlgorithm.LegalKeySizesValue
  - System.Security.Cryptography.ECDsa.Create
  - System.Security.Cryptography.ECDsa.Create(System.String)
  - System.Security.Cryptography.ECDsa.KeyExchangeAlgorithm
  - System.Security.Cryptography.ECDsa.SignatureAlgorithm
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.SignData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  - System.Security.Cryptography.ECDsa.VerifyData(System.IO.Stream,System.Byte[],System.Security.Cryptography.HashAlgorithmName)
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.#ctor
  id: '#ctor'
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ECDsaCng()
  nameWithType: ECDsaCng.ECDsaCng()
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng()
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref>使用随机密钥对的类。"
  remarks: "随机密钥对具有 521 位的公钥长度。"
  syntax:
    content: public ECDsaCng ();
    parameters: []
  overload: System.Security.Cryptography.ECDsaCng.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "在此系统上不支持加密下一代 (CNG) 类。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ECDsaCng(Int32)
  nameWithType: ECDsaCng.ECDsaCng(Int32)
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(Int32)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref>使用随机密钥对，使用指定的密钥大小的类。"
  remarks: "随机密钥对将具有所定义的公共密钥长度`keySize`参数。"
  syntax:
    content: public ECDsaCng (int keySize);
    parameters:
    - id: keySize
      type: System.Int32
      description: "密钥的大小。 有效密钥大小是 256、 384 和 521 位。"
  overload: System.Security.Cryptography.ECDsaCng.#ctor*
  exceptions:
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "在此系统上不支持加密下一代 (CNG) 类。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "<code>keySize</code>指定的长度无效。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  id: '#ctor(System.Security.Cryptography.CngKey)'
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ECDsaCng(CngKey)
  nameWithType: ECDsaCng.ECDsaCng(CngKey)
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(CngKey)
  type: Constructor
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "初始化的新实例<xref href=&quot;System.Security.Cryptography.ECDsaCng&quot;></xref>使用指定的类<xref href=&quot;System.Security.Cryptography.CngKey&quot;></xref>对象。"
  syntax:
    content: public ECDsaCng (System.Security.Cryptography.CngKey key);
    parameters:
    - id: key
      type: System.Security.Cryptography.CngKey
      description: "将用作为当前对象执行的加密操作的输入的密钥。"
  overload: System.Security.Cryptography.ECDsaCng.#ctor*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>key</code>未指定的椭圆曲线数字签名算法 (ECDSA) 组。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>key</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.PlatformNotSupportedException
    commentId: T:System.PlatformNotSupportedException
    description: "在此系统上不支持加密下一代 (CNG) 类。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: ECDsaCng.Dispose(Boolean)
  fullName: System.Security.Cryptography.ECDsaCng.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "要添加。"
  overload: System.Security.Cryptography.ECDsaCng.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)
  id: FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: FromXmlString(String)
  nameWithType: ECDsaCng.FromXmlString(String)
  fullName: System.Security.Cryptography.ECDsaCng.FromXmlString(String)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "未实现此方法。"
  remarks: "若要反序列化的 XML 密钥，使用<xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29>重载。</xref:System.Security.Cryptography.ECDsaCng.FromXmlString%28System.String%2CSystem.Security.Cryptography.ECKeyXmlFormat%29>"
  syntax:
    content: public override void FromXmlString (string xmlString);
    parameters:
    - id: xmlString
      type: System.String
      description: "基于 XML 的密钥信息进行反序列化。"
  overload: System.Security.Cryptography.ECDsaCng.FromXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "此实例不重写此方法。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  id: FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: FromXmlString(String,ECKeyXmlFormat)
  nameWithType: ECDsaCng.FromXmlString(String,ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDsaCng.FromXmlString(String,ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "将通过使用指定的格式反序列化的 XML 字符串中的密钥信息。"
  syntax:
    content: public void FromXmlString (string xml, System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: xml
      type: System.String
      description: "基于 XML 的密钥信息进行反序列化。"
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: "指定的 XML 字符串的格式的枚举值之一。 当前接受的唯一格式<xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;> </xref>。"
  overload: System.Security.Cryptography.ECDsaCng.FromXmlString*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xml</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>format</code>指定的格式无效。 唯一接受的值是<xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;> </xref>。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他错误。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm
  id: HashAlgorithm
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: HashAlgorithm
  nameWithType: ECDsaCng.HashAlgorithm
  fullName: System.Security.Cryptography.ECDsaCng.HashAlgorithm
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "获取或设置要在签名和验证数据时使用的哈希算法。"
  remarks: "此属性接受以下算法︰ <xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>， <xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A>，和<xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A>。</xref:System.Security.Cryptography.CngAlgorithm.Sha512%2A> </xref:System.Security.Cryptography.CngAlgorithm.Sha384%2A> </xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A> </xref:System.Security.Cryptography.CngAlgorithm.Sha1%2A> </xref:System.Security.Cryptography.CngAlgorithm.MD5%2A>       此外可以使用其他自定义的哈希算法。       默认算法是<xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>.</xref:System.Security.Cryptography.CngAlgorithm.Sha256%2A>       如果在签名或验证已哈希处理的数据，则不会使用此属性。"
  syntax:
    content: public System.Security.Cryptography.CngAlgorithm HashAlgorithm { get; set; }
    return:
      type: System.Security.Cryptography.CngAlgorithm
      description: "一个指定的哈希算法的对象。"
  overload: System.Security.Cryptography.ECDsaCng.HashAlgorithm*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "值是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsaCng.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsaCng.HashData(Stream,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (System.IO.Stream data, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "要添加。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "要添加。"
    return:
      type: System.Byte[]
      description: "要添加。"
  overload: System.Security.Cryptography.ECDsaCng.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  id: HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsaCng.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsaCng.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  syntax:
    content: protected override byte[] HashData (byte[] data, int offset, int count, System.Security.Cryptography.HashAlgorithmName hashAlgorithm);
    parameters:
    - id: data
      type: System.Byte[]
      description: "要添加。"
    - id: offset
      type: System.Int32
      description: "要添加。"
    - id: count
      type: System.Int32
      description: "要添加。"
    - id: hashAlgorithm
      type: System.Security.Cryptography.HashAlgorithmName
      description: "要添加。"
    return:
      type: System.Byte[]
      description: "要添加。"
  overload: System.Security.Cryptography.ECDsaCng.HashData*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.Key
  id: Key
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: Key
  nameWithType: ECDsaCng.Key
  fullName: System.Security.Cryptography.ECDsaCng.Key
  type: Property
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "获取或设置用于签名和验证数据时的密钥。"
  syntax:
    content: public System.Security.Cryptography.CngKey Key { get; }
    return:
      type: System.Security.Cryptography.CngKey
      description: "一个指定的键的对象。"
  overload: System.Security.Cryptography.ECDsaCng.Key*
  exceptions: []
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])
  id: SignData(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: SignData(Byte[])
  nameWithType: ECDsaCng.SignData(Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.SignData(Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "生成指定的数据的签名。"
  remarks: "此方法由哈希输入的数据使用生成指定的数据的签名<xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>属性，，然后对结果进行签名。</xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>       <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>标志是必需的如果由不随机生成的下一代加密技术 (CNG) 密钥<xref:System.Security.Cryptography.ECDsaCng>对象。</xref:System.Security.Cryptography.ECDsaCng> </xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>"
  syntax:
    content: public byte[] SignData (byte[] data);
    parameters:
    - id: data
      type: System.Byte[]
      description: "要进行签名的消息数据。"
    return:
      type: System.Byte[]
      description: "指定数据的数字签名。"
  overload: System.Security.Cryptography.ECDsaCng.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "与实例相关联的密钥信息没有私钥。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)
  id: SignData(System.IO.Stream)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: SignData(Stream)
  nameWithType: ECDsaCng.SignData(Stream)
  fullName: System.Security.Cryptography.ECDsaCng.SignData(Stream)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "生成指定的数据流，读取到流末尾的签名。"
  remarks: "此方法由哈希输入的数据使用将生成为指定的数据的流的签名<xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>属性，，然后对结果进行签名。</xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>       <xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>标志是必需的如果由不随机生成的下一代加密技术 (CNG) 密钥<xref:System.Security.Cryptography.ECDsaCng>对象。</xref:System.Security.Cryptography.ECDsaCng> </xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>"
  syntax:
    content: public byte[] SignData (System.IO.Stream data);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "要进行签名的数据流。"
    return:
      type: System.Byte[]
      description: "用于指定的数据流的数字签名。"
  overload: System.Security.Cryptography.ECDsaCng.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "与实例相关联的密钥信息没有私钥。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)
  id: SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: SignData(Byte[],Int32,Int32)
  nameWithType: ECDsaCng.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ECDsaCng.SignData(Byte[],Int32,Int32)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "生成的数据，从指定的偏移量开始的指定长度的数字签名。"
  remarks: "此方法由哈希输入的数据使用生成指定的数据的签名<xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>属性，然后再签名结果<xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>标志是必需的如果由不随机生成的下一代加密技术 (CNG) 密钥<xref:System.Security.Cryptography.ECDsaCng>对象。</xref:System.Security.Cryptography.ECDsaCng> </xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName> </xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>"
  syntax:
    content: public byte[] SignData (byte[] data, int offset, int count);
    parameters:
    - id: data
      type: System.Byte[]
      description: "要进行签名的消息数据。"
    - id: offset
      type: System.Int32
      description: "在其中开始签名字符串中的位置。"
    - id: count
      type: System.Int32
      description: "中后面的字符的字符串的长度`offset`中将签名。"
    return:
      type: System.Byte[]
      description: "用于指定长度的数据的数字签名。"
  overload: System.Security.Cryptography.ECDsaCng.SignData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>count</code>或<code>offset</code>导致超出边界的数据字符串读取。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "与实例相关联的密钥信息没有私钥。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  id: SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: SignHash(Byte[])
  nameWithType: ECDsaCng.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.SignHash(Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "生成指定的哈希值的签名。"
  remarks: "<xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>标志是必需的如果由不随机生成的下一代加密技术 (CNG) 密钥<xref:System.Security.Cryptography.ECDsaCng>对象。</xref:System.Security.Cryptography.ECDsaCng> </xref:System.Security.Permissions.KeyContainerPermissionFlags?displayProperty=fullName>"
  syntax:
    content: public override byte[] SignHash (byte[] hash);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "待签名数据的哈希值。"
    return:
      type: System.Byte[]
      description: "指定的哈希值的数字签名。"
  overload: System.Security.Cryptography.ECDsaCng.SignHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hash</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "与实例相关联的密钥信息没有私钥。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)
  id: ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ToXmlString(Boolean)
  nameWithType: ECDsaCng.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.ECDsaCng.ToXmlString(Boolean)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "未实现此方法。"
  remarks: "若要将当前的密钥转换为 XML 表示形式，使用<xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29>重载。</xref:System.Security.Cryptography.ECDsaCng.ToXmlString%28System.Security.Cryptography.ECKeyXmlFormat%29>"
  syntax:
    content: public override string ToXmlString (bool includePrivateParameters);
    parameters:
    - id: includePrivateParameters
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要包含专用参数;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.String
      description: "不适用。"
  overload: System.Security.Cryptography.ECDsaCng.ToXmlString*
  exceptions:
  - type: System.NotImplementedException
    commentId: T:System.NotImplementedException
    description: "未实现此方法。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  id: ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDsaCng.ToXmlString(ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDsaCng.ToXmlString(ECKeyXmlFormat)
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "使用指定的格式序列化的 XML 字符串将密钥信息。"
  syntax:
    content: public string ToXmlString (System.Security.Cryptography.ECKeyXmlFormat format);
    parameters:
    - id: format
      type: System.Security.Cryptography.ECKeyXmlFormat
      description: "指定的 XML 字符串的格式的枚举值之一。 当前接受的唯一格式<xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;> </xref>。"
    return:
      type: System.String
      description: "一个包含键信息、 序列化到根据请求的格式的 XML 字符串的字符串对象。"
  overload: System.Security.Cryptography.ECDsaCng.ToXmlString*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>format</code>指定的格式无效。 唯一接受的值是<xref href=&quot;System.Security.Cryptography.ECKeyXmlFormat&quot;> </xref>。"
  - type: System.Security.Cryptography.CryptographicException
    commentId: T:System.Security.Cryptography.CryptographicException
    description: "所有其他错误。"
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])
  id: VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: VerifyData(Byte[],Byte[])
  nameWithType: ECDsaCng.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "验证指定的数据的数字签名。"
  remarks: "此方法将生成由哈希输入的数据使用给定的数据的签名<xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>属性，，然后对结果进行签名。</xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>"
  syntax:
    content: public bool VerifyData (byte[] data, byte[] signature);
    parameters:
    - id: data
      type: System.Byte[]
      description: "已签名数据。"
    - id: signature
      type: System.Byte[]
      description: "要验证的签名。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果签名有效，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.ECDsaCng.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>or <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])
  id: VerifyData(System.IO.Stream,System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: VerifyData(Stream,Byte[])
  nameWithType: ECDsaCng.VerifyData(Stream,Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Stream,Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "验证指定的数据流，读取到流末尾的数字签名。"
  remarks: "此方法进行哈希处理的输入的数据使用<xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>之前验证的属性。</xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>"
  syntax:
    content: public bool VerifyData (System.IO.Stream data, byte[] signature);
    parameters:
    - id: data
      type: System.IO.Stream
      description: "已签名的数据流。"
    - id: signature
      type: System.Byte[]
      description: "要验证的签名。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果签名有效，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.ECDsaCng.VerifyData*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>or <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  id: VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: VerifyData(Byte[],Int32,Int32,Byte[])
  nameWithType: ECDsaCng.VerifyData(Byte[],Int32,Int32,Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Byte[],Int32,Int32,Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "验证数据，从指定的偏移量开始的指定长度的签名。"
  remarks: "此方法进行哈希处理的输入的数据使用<xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>之前验证的属性。</xref:System.Security.Cryptography.ECDsaCng.HashAlgorithm%2A>"
  syntax:
    content: public bool VerifyData (byte[] data, int offset, int count, byte[] signature);
    parameters:
    - id: data
      type: System.Byte[]
      description: "已签名数据。"
    - id: offset
      type: System.Int32
      description: "已签名的数据开始处的数据中的位置。"
    - id: count
      type: System.Int32
      description: "长度的数据，以字符为单位，以下`offset`中将签名。"
    - id: signature
      type: System.Byte[]
      description: "要验证的签名。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果签名有效，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.ECDsaCng.VerifyData*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>offset</code>或<code>count</code>小于零。       -<code>offset</code>或<code>count</code>大于中传递的字节数组的长度<code>data</code>参数。"
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>data</code>or <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  id: VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  langs:
  - csharp
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsaCng.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.VerifyHash(Byte[],Byte[])
  type: Method
  assemblies:
  - System.Core
  namespace: System.Security.Cryptography
  summary: "验证指定的数字签名对指定的哈希值。"
  syntax:
    content: public override bool VerifyHash (byte[] hash, byte[] signature);
    parameters:
    - id: hash
      type: System.Byte[]
      description: "要验证数据哈希值。"
    - id: signature
      type: System.Byte[]
      description: "数据的哈希值验证数字签名。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果签名有效，则为否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Security.Cryptography.ECDsaCng.VerifyHash*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>hash</code>or <code>signature</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Security.Cryptography.ECDsa
  isExternal: false
  name: System.Security.Cryptography.ECDsa
- uid: System.PlatformNotSupportedException
  isExternal: true
  name: System.PlatformNotSupportedException
- uid: System.Security.Cryptography.CryptographicException
  parent: System.Security.Cryptography
  isExternal: false
  name: CryptographicException
  nameWithType: CryptographicException
  fullName: System.Security.Cryptography.CryptographicException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.NotImplementedException
  isExternal: true
  name: System.NotImplementedException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.Security.Cryptography.ECDsaCng.#ctor
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng()
  nameWithType: ECDsaCng.ECDsaCng()
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng()
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Int32)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng(Int32)
  nameWithType: ECDsaCng.ECDsaCng(Int32)
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(Int32)
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Security.Cryptography.ECDsaCng.#ctor(System.Security.Cryptography.CngKey)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng(CngKey)
  nameWithType: ECDsaCng.ECDsaCng(CngKey)
  fullName: System.Security.Cryptography.ECDsaCng.ECDsaCng(CngKey)
- uid: System.Security.Cryptography.CngKey
  parent: System.Security.Cryptography
  isExternal: false
  name: CngKey
  nameWithType: CngKey
  fullName: System.Security.Cryptography.CngKey
- uid: System.Security.Cryptography.ECDsaCng.Dispose(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: ECDsaCng.Dispose(Boolean)
  fullName: System.Security.Cryptography.ECDsaCng.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: FromXmlString(String)
  nameWithType: ECDsaCng.FromXmlString(String)
  fullName: System.Security.Cryptography.ECDsaCng.FromXmlString(String)
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString(System.String,System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: FromXmlString(String,ECKeyXmlFormat)
  nameWithType: ECDsaCng.FromXmlString(String,ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDsaCng.FromXmlString(String,ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECKeyXmlFormat
  parent: System.Security.Cryptography
  isExternal: false
  name: ECKeyXmlFormat
  nameWithType: ECKeyXmlFormat
  fullName: System.Security.Cryptography.ECKeyXmlFormat
- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDsaCng.HashAlgorithm
  fullName: System.Security.Cryptography.ECDsaCng.HashAlgorithm
- uid: System.Security.Cryptography.CngAlgorithm
  parent: System.Security.Cryptography
  isExternal: false
  name: CngAlgorithm
  nameWithType: CngAlgorithm
  fullName: System.Security.Cryptography.CngAlgorithm
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.IO.Stream,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashData(Stream,HashAlgorithmName)
  nameWithType: ECDsaCng.HashData(Stream,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsaCng.HashData(Stream,HashAlgorithmName)
- uid: System.Byte[]
  parent: System
  isExternal: true
  name: Byte
  nameWithType: Byte
  fullName: System.Byte[]
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: Byte[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.Security.Cryptography.HashAlgorithmName
  parent: System.Security.Cryptography
  isExternal: false
  name: HashAlgorithmName
  nameWithType: HashAlgorithmName
  fullName: System.Security.Cryptography.HashAlgorithmName
- uid: System.Security.Cryptography.ECDsaCng.HashData(System.Byte[],System.Int32,System.Int32,System.Security.Cryptography.HashAlgorithmName)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashData(Byte[],Int32,Int32,HashAlgorithmName)
  nameWithType: ECDsaCng.HashData(Byte[],Int32,Int32,HashAlgorithmName)
  fullName: System.Security.Cryptography.ECDsaCng.HashData(Byte[],Int32,Int32,HashAlgorithmName)
- uid: System.Security.Cryptography.ECDsaCng.Key
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: Key
  nameWithType: ECDsaCng.Key
  fullName: System.Security.Cryptography.ECDsaCng.Key
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignData(Byte[])
  nameWithType: ECDsaCng.SignData(Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.SignData(Byte[])
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.IO.Stream)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignData(Stream)
  nameWithType: ECDsaCng.SignData(Stream)
  fullName: System.Security.Cryptography.ECDsaCng.SignData(Stream)
- uid: System.Security.Cryptography.ECDsaCng.SignData(System.Byte[],System.Int32,System.Int32)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignData(Byte[],Int32,Int32)
  nameWithType: ECDsaCng.SignData(Byte[],Int32,Int32)
  fullName: System.Security.Cryptography.ECDsaCng.SignData(Byte[],Int32,Int32)
- uid: System.Security.Cryptography.ECDsaCng.SignHash(System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignHash(Byte[])
  nameWithType: ECDsaCng.SignHash(Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.SignHash(Byte[])
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Boolean)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ToXmlString(Boolean)
  nameWithType: ECDsaCng.ToXmlString(Boolean)
  fullName: System.Security.Cryptography.ECDsaCng.ToXmlString(Boolean)
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString(System.Security.Cryptography.ECKeyXmlFormat)
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ToXmlString(ECKeyXmlFormat)
  nameWithType: ECDsaCng.ToXmlString(ECKeyXmlFormat)
  fullName: System.Security.Cryptography.ECDsaCng.ToXmlString(ECKeyXmlFormat)
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyData(Byte[],Byte[])
  nameWithType: ECDsaCng.VerifyData(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Byte[],Byte[])
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.IO.Stream,System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyData(Stream,Byte[])
  nameWithType: ECDsaCng.VerifyData(Stream,Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Stream,Byte[])
- uid: System.Security.Cryptography.ECDsaCng.VerifyData(System.Byte[],System.Int32,System.Int32,System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyData(Byte[],Int32,Int32,Byte[])
  nameWithType: ECDsaCng.VerifyData(Byte[],Int32,Int32,Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.VerifyData(Byte[],Int32,Int32,Byte[])
- uid: System.Security.Cryptography.ECDsaCng.VerifyHash(System.Byte[],System.Byte[])
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyHash(Byte[],Byte[])
  nameWithType: ECDsaCng.VerifyHash(Byte[],Byte[])
  fullName: System.Security.Cryptography.ECDsaCng.VerifyHash(Byte[],Byte[])
- uid: System.Security.Cryptography.ECDsaCng.#ctor*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ECDsaCng
  nameWithType: ECDsaCng.ECDsaCng
- uid: System.Security.Cryptography.ECDsaCng.Dispose*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: Dispose
  nameWithType: ECDsaCng.Dispose
- uid: System.Security.Cryptography.ECDsaCng.FromXmlString*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: FromXmlString
  nameWithType: ECDsaCng.FromXmlString
- uid: System.Security.Cryptography.ECDsaCng.HashAlgorithm*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashAlgorithm
  nameWithType: ECDsaCng.HashAlgorithm
- uid: System.Security.Cryptography.ECDsaCng.HashData*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: HashData
  nameWithType: ECDsaCng.HashData
- uid: System.Security.Cryptography.ECDsaCng.Key*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: Key
  nameWithType: ECDsaCng.Key
- uid: System.Security.Cryptography.ECDsaCng.SignData*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignData
  nameWithType: ECDsaCng.SignData
- uid: System.Security.Cryptography.ECDsaCng.SignHash*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: SignHash
  nameWithType: ECDsaCng.SignHash
- uid: System.Security.Cryptography.ECDsaCng.ToXmlString*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: ToXmlString
  nameWithType: ECDsaCng.ToXmlString
- uid: System.Security.Cryptography.ECDsaCng.VerifyData*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyData
  nameWithType: ECDsaCng.VerifyData
- uid: System.Security.Cryptography.ECDsaCng.VerifyHash*
  parent: System.Security.Cryptography.ECDsaCng
  isExternal: false
  name: VerifyHash
  nameWithType: ECDsaCng.VerifyHash
