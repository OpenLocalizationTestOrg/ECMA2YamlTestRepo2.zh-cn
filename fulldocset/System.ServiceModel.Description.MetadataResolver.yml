### YamlMime:ManagedReference
items:
- uid: System.ServiceModel.Description.MetadataResolver
  id: MetadataResolver
  children:
  - System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)
  - System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)
  - System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)
  - System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)
  - System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)
  - System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)
  - System.ServiceModel.Description.MetadataResolver.EndResolve(System.IAsyncResult)
  - System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress)
  - System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.ServiceModel.EndpointAddress)
  - System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient)
  - System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)
  - System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)
  - System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient)
  langs:
  - csharp
  name: MetadataResolver
  nameWithType: MetadataResolver
  fullName: System.ServiceModel.Description.MetadataResolver
  type: Class
  summary: "检索和导入元数据作为<xref:System.ServiceModel.Description.ServiceEndpoint>对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "MetadataResolver 类用于快速从元数据导入服务的终结点。 此类下载，并将转换到的元数据<xref:System.ServiceModel.Description.ServiceEndpoint>对象。</xref:System.ServiceModel.Description.ServiceEndpoint> 若要下载元数据并处理该信息<xref:System.ServiceModel.Description.MetadataSet?displayProperty=fullName>，请参阅<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataSet?displayProperty=fullName>作为"
  example:
  - "The following code example shows the use of the MetadataResolver class to return metadata as a collection of <xref:System.ServiceModel.Description.ServiceEndpoint> objects that are then used to connect to a service instance.  \n  \n [!code-cs[MetadataResolver#1](~/add/codesnippet/csharp/metadataresolver.client/client.cs#1)]  \n  \n The following code example shows the use of the MetadataResolver to download and return metadata as a collection of <xref:System.ServiceModel.Description.ServiceEndpoint> objects using an HTTP GET request rather than WS-Transfer.  \n  \n [!code-cs[MetadataResolver#2](~/add/codesnippet/csharp/metadataresolver.client/client.cs#2)]"
  syntax:
    content: public static class MetadataResolver
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)
  id: BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "开始将元数据地址解析的异步调用<xref:System.ServiceModel.Description.ServiceEndpoint>为指定的协定，使用指定的地址和异步语句和委托的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "有关<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>用于检索元数据和默认值<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>为<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>。</xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>默认设置       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.ServiceModel.EndpointAddress address, AsyncCallback callback, object asyncState);
    parameters:
    - id: contracts
      type: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.ServiceModel.EndpointAddress
      description: "元数据地址中。"
    - id: callback
      type: System.AsyncCallback
      description: "在调用完成时调用的异步回调委托。"
    - id: asyncState
      type: System.Object
      description: "与异步调用关联的状态。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>引用异步解析操作。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Description.MetadataResolver.BeginResolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址、 协定或回调是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contracts</code>为空的至少一个成员<code>contracts</code>是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，或<code>contracts</code>包含多个具有相同的名称和命名空间的协定。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)
  id: BeginResolve(System.Type,System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: BeginResolve(Type,EndpointAddress,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(Type,EndpointAddress,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(Type,EndpointAddress,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "开始将元数据地址解析的异步调用<xref:System.ServiceModel.Description.ServiceEndpoint>使用指定的地址和异步语句和委托的指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "有关<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>用于检索元数据和默认值<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>为<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>。</xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>默认设置       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。       此方法要求您指定协定类型。 你可以通过声明服务接口在客户端代码或通过使用指定协定[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]由 Svcutil.exe 生成的客户端。 如果接口发生更改 （添加一个新的操作，例如） 必须更新在客户端代码的接口，或者生成一个新[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]客户端。 如果不这样做，是引发异常。 例如，必须实现称为 ICalculator 定义 add （）、 Sub()、 Mult() 和 div （） 的服务协定的服务。 创建客户端应用程序，并生成[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]客户端。 然后，你将方法添加到 ICalculator 称为 echo （） 中。 然后，如果你编写的应用程序调用<xref:System.ServiceModel.Description.MetadataResolver.Resolve%28System.Type%2CSystem.ServiceModel.EndpointAddress%29>而不会生成一个新[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]客户端则会得到以下异常。</xref:System.ServiceModel.Description.MetadataResolver.Resolve%28System.Type%2CSystem.ServiceModel.EndpointAddress%29>       `Unhandled Exception: System.ServiceModel.Description.WsdlImporter+WsdlImportException: Cannot locate operation Echo in Contract ICalculator`。"
  syntax:
    content: public static IAsyncResult BeginResolve (Type contract, System.ServiceModel.EndpointAddress address, AsyncCallback callback, object asyncState);
    parameters:
    - id: contract
      type: System.Type
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.ServiceModel.EndpointAddress
      description: "元数据地址中。"
    - id: callback
      type: System.AsyncCallback
      description: "在调用完成时调用的异步回调委托。"
    - id: asyncState
      type: System.Object
      description: "与异步调用关联的状态。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>引用异步解析操作。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Description.MetadataResolver.BeginResolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址、 协定或回调是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)
  id: BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "开始将元数据地址解析的异步调用<xref:System.ServiceModel.Description.ServiceEndpoint>为指定的协定，使用指定的地址，对象<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClient&quot;> </xref>，异步语句和委托。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "默认值<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>为<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>。</xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName> </xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client, AsyncCallback callback, object asyncState);
    parameters:
    - id: contracts
      type: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.ServiceModel.EndpointAddress
      description: "元数据地址中。"
    - id: client
      type: System.ServiceModel.Description.MetadataExchangeClient
      description: "<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClient&quot;> </xref>用于检索元数据。"
    - id: callback
      type: System.AsyncCallback
      description: "在调用完成时调用的异步回调委托。"
    - id: asyncState
      type: System.Object
      description: "与异步调用关联的状态。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>引用异步解析操作。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Description.MetadataResolver.BeginResolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址、 协定、 客户端或回调是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contracts</code>为空的至少一个成员<code>contracts</code>为 null，或<code>contracts</code>包含多个具有相同的名称和命名空间的协定。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)
  id: BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "开始将元数据地址解析的异步调用<xref:System.ServiceModel.Description.ServiceEndpoint>为指定的协定，使用指定的地址，对象<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClientMode&quot;></xref>值、 异步语句和委托。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "上的默认设置<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>用于检索元数据。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState);
    parameters:
    - id: contracts
      type: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.Uri
      description: "元数据地址中。"
    - id: mode
      type: System.ServiceModel.Description.MetadataExchangeClientMode
      description: "检索的模式。"
    - id: callback
      type: System.AsyncCallback
      description: "在调用完成时调用的异步回调委托。"
    - id: asyncState
      type: System.Object
      description: "与异步调用关联的状态。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>引用异步解析操作。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Description.MetadataResolver.BeginResolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址、 协定或回调是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contracts</code>为空的至少一个成员<code>contracts</code>为 null，或<code>contracts</code>包含多个具有相同的名称和命名空间的协定。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)
  id: BeginResolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: BeginResolve(Type,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(Type,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(Type,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "开始将元数据地址解析的异步调用<xref:System.ServiceModel.Description.ServiceEndpoint>对于指定的协定，使用指定的地址，对象<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClientMode&quot;> </xref>，异步语句和委托。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "上的默认设置<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>用于检索元数据。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static IAsyncResult BeginResolve (Type contract, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, AsyncCallback callback, object asyncState);
    parameters:
    - id: contract
      type: System.Type
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.Uri
      description: "元数据地址中。"
    - id: mode
      type: System.ServiceModel.Description.MetadataExchangeClientMode
      description: "检索的模式。"
    - id: callback
      type: System.AsyncCallback
      description: "在调用完成时调用的异步回调委托。"
    - id: asyncState
      type: System.Object
      description: "与异步调用关联的状态。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>引用异步解析操作。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Description.MetadataResolver.BeginResolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址、 协定或回调是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)
  id: BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient,AsyncCallback,Object)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "开始将元数据地址解析的异步调用<xref:System.ServiceModel.Description.ServiceEndpoint>为指定的协定，使用指定的地址，对象<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClient&quot;> </xref>， <xref href=&quot;System.ServiceModel.Description.MetadataExchangeClientMode&quot;> </xref>，异步语句和委托。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static IAsyncResult BeginResolve (System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client, AsyncCallback callback, object asyncState);
    parameters:
    - id: contracts
      type: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.Uri
      description: "元数据地址中。"
    - id: mode
      type: System.ServiceModel.Description.MetadataExchangeClientMode
      description: "检索的模式。"
    - id: client
      type: System.ServiceModel.Description.MetadataExchangeClient
      description: "<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClient&quot;> </xref>用于检索元数据。"
    - id: callback
      type: System.AsyncCallback
      description: "在调用完成时调用的异步回调委托。"
    - id: asyncState
      type: System.Object
      description: "与异步调用关联的状态。"
    return:
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>引用异步解析操作。</xref:System.IAsyncResult>"
  overload: System.ServiceModel.Description.MetadataResolver.BeginResolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址、 协定或回调是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contracts</code>为空的至少一个成员<code>contracts</code>为 null，或<code>contracts</code>包含多个具有相同的名称和命名空间的协定。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.EndResolve(System.IAsyncResult)
  id: EndResolve(System.IAsyncResult)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: EndResolve(IAsyncResult)
  nameWithType: MetadataResolver.EndResolve(IAsyncResult)
  fullName: System.ServiceModel.Description.MetadataResolver.EndResolve(IAsyncResult)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "完成的异步调用可将元数据解析为终结点的集合。"
  remarks: "结束对之一的异步调用<xref:System.ServiceModel.Description.MetadataResolver.BeginResolve%2A>方法。</xref:System.ServiceModel.Description.MetadataResolver.BeginResolve%2A>"
  syntax:
    content: public static System.ServiceModel.Description.ServiceEndpointCollection EndResolve (IAsyncResult result);
    parameters:
    - id: result
      type: System.IAsyncResult
      description: "<xref:System.IAsyncResult>从调用中接收到的对象<xref:System.ServiceModel.Description.MetadataResolver.BeginResolve*>方法。</xref:System.ServiceModel.Description.MetadataResolver.BeginResolve*> </xref:System.IAsyncResult>"
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "集合<xref:System.ServiceModel.Description.ServiceEndpoint>对象的元数据中包含的终结点。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.Description.MetadataResolver.EndResolve*
  exceptions: []
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress)
  id: Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: Resolve(IEnumerable<ContractDescription>,EndpointAddress)
  nameWithType: MetadataResolver.Resolve(IEnumerable<ContractDescription>,EndpointAddress)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(IEnumerable<ContractDescription>,EndpointAddress)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "将元数据地址解析<xref:System.ServiceModel.Description.ServiceEndpoint>为使用指定的元数据地址指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "有关<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>用于检索元数据和默认值<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>为<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>。</xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>默认设置       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.ServiceModel.EndpointAddress address);
    parameters:
    - id: contracts
      type: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.ServiceModel.EndpointAddress
      description: "元数据地址中。"
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "集合<xref:System.ServiceModel.Description.ServiceEndpoint>指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.Description.MetadataResolver.Resolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址或协定集合是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contracts</code>为空的至少一个成员<code>contracts</code>为 null，或<code>contracts</code>包含多个具有相同的名称和命名空间的协定。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.ServiceModel.EndpointAddress)
  id: Resolve(System.Type,System.ServiceModel.EndpointAddress)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: Resolve(Type,EndpointAddress)
  nameWithType: MetadataResolver.Resolve(Type,EndpointAddress)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(Type,EndpointAddress)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "下载并可将元数据地址解析为的集合<xref:System.ServiceModel.Description.ServiceEndpoint>指定地址处指定的协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "Resolve 方法用于指定下载和解析元数据时要使用的协定和元数据地址。       有关<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>用于检索元数据和默认值<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>为<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>。</xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName></xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>默认设置       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。       此方法要求您指定协定类型。 你可以通过声明服务接口在客户端代码或通过使用指定协定[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]由 Svcutil.exe 生成的客户端。 如果接口发生更改 （添加一个新的操作，例如） 必须更新在客户端代码的接口，或者生成一个新[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]客户端。 如果不这样做，是引发异常。 例如，必须实现称为 ICalculator 定义 add （）、 Sub()、 Mult() 和 div （） 的服务协定的服务。 创建客户端应用程序，并生成[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]客户端。 然后，你将方法添加到 ICalculator 称为 echo （） 中。 然后，如果你编写应用程序调用解决而不会生成一个新[!INCLUDE[indigo2](~/add/includes/ajax-current-ext-md.md)]客户端则会得到以下异常。       `Unhandled Exception: System.ServiceModel.Description.WsdlImporter+WsdlImportException: Cannot locate operation Echo in Contract ICalculator`。"
  example:
  - "The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> class to return metadata as a collection of <xref:System.ServiceModel.Description.ServiceEndpoint> objects that are then used to connect to a service instance.  \n  \n [!code-cs[MetadataResolver#1](~/add/codesnippet/csharp/metadataresolver.client/client.cs#1)]"
  syntax:
    content: public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (Type contract, System.ServiceModel.EndpointAddress address);
    parameters:
    - id: contract
      type: System.Type
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.ServiceModel.EndpointAddress
      description: "元数据地址中。"
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "集合<xref:System.ServiceModel.Description.ServiceEndpoint>指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.Description.MetadataResolver.Resolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址或协定是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient)
  id: Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: Resolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient)
  nameWithType: MetadataResolver.Resolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "将元数据地址解析<xref:System.ServiceModel.Description.ServiceEndpoint>为使用指定的元数据地址指定协定的对象和<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClient&quot;> </xref>。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "默认值<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>为<xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>。</xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName> </xref:System.ServiceModel.Description.MetadataExchangeClientMode?displayProperty=fullName>       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, System.ServiceModel.EndpointAddress address, System.ServiceModel.Description.MetadataExchangeClient client);
    parameters:
    - id: contracts
      type: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.ServiceModel.EndpointAddress
      description: "元数据地址中。"
    - id: client
      type: System.ServiceModel.Description.MetadataExchangeClient
      description: "<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClient&quot;> </xref>用于检索元数据。"
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "集合<xref:System.ServiceModel.Description.ServiceEndpoint>指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.Description.MetadataResolver.Resolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址、 协定集合，或客户端为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contracts</code>为空的至少一个成员<code>contracts</code>为 null，或<code>contracts</code>包含多个具有相同的名称和命名空间的协定。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)
  id: Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode)
  nameWithType: MetadataResolver.Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "将元数据地址解析<xref:System.ServiceModel.Description.ServiceEndpoint>为指定协定使用指定的地址和传输模式的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "上的默认设置<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>用于检索元数据。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode);
    parameters:
    - id: contracts
      type: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.Uri
      description: "元数据地址中。"
    - id: mode
      type: System.ServiceModel.Description.MetadataExchangeClientMode
      description: "检索的模式。"
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "集合<xref:System.ServiceModel.Description.ServiceEndpoint>指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.Description.MetadataResolver.Resolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址或协定集合是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contracts</code>为空的至少一个成员<code>contracts</code>为 null，或<code>contracts</code>包含多个具有相同的名称和命名空间的协定。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)
  id: Resolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: Resolve(Type,Uri,MetadataExchangeClientMode)
  nameWithType: MetadataResolver.Resolve(Type,Uri,MetadataExchangeClientMode)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(Type,Uri,MetadataExchangeClientMode)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "将元数据地址解析<xref:System.ServiceModel.Description.ServiceEndpoint>使用指定的地址和传输模式的指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "Resolve 方法用于指定一个协定，和地址，以及要使用的下载机制。       上的默认设置<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>用于检索元数据。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>       若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  example:
  - "The following code example shows the use of the <xref:System.ServiceModel.Description.MetadataResolver> to download and return metadata as a collection of <xref:System.ServiceModel.Description.ServiceEndpoint> objects using an HTTP GET request rather than WS-Transfer.  \n  \n [!code-cs[MetadataResolver#2](~/add/codesnippet/csharp/metadataresolver.client/client.cs#2)]"
  syntax:
    content: public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (Type contract, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode);
    parameters:
    - id: contract
      type: System.Type
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.Uri
      description: "元数据地址中。"
    - id: mode
      type: System.ServiceModel.Description.MetadataExchangeClientMode
      description: "检索的模式。"
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "集合<xref:System.ServiceModel.Description.ServiceEndpoint>指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.Description.MetadataResolver.Resolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址或协定是<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  platform:
  - net462
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient)
  id: Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient)
  parent: System.ServiceModel.Description.MetadataResolver
  langs:
  - csharp
  name: Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient)
  nameWithType: MetadataResolver.Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient)
  type: Method
  assemblies:
  - System.ServiceModel
  namespace: System.ServiceModel.Description
  summary: "将元数据地址解析<xref:System.ServiceModel.Description.ServiceEndpoint>为使用指定的地址、 传输模式和传输客户端指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  remarks: "若要下载元数据，而不是将信息解析为<xref:System.ServiceModel.Description.ServiceEndpoint>对象，请使用<xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName>直接。</xref:System.ServiceModel.Description.MetadataExchangeClient?displayProperty=fullName> </xref:System.ServiceModel.Description.ServiceEndpoint>      1> [!NOTE]&1;> 如果没有任何终结点已导入或者如果没有任何终结点与约定相匹配，则返回空集合。 如果返回了空集合，则写入一个警告跟踪。"
  syntax:
    content: public static System.ServiceModel.Description.ServiceEndpointCollection Resolve (System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription> contracts, Uri address, System.ServiceModel.Description.MetadataExchangeClientMode mode, System.ServiceModel.Description.MetadataExchangeClient client);
    parameters:
    - id: contracts
      type: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
      description: "为其下载和解析元数据协定。"
    - id: address
      type: System.Uri
      description: "元数据地址中。"
    - id: mode
      type: System.ServiceModel.Description.MetadataExchangeClientMode
      description: "检索的模式。"
    - id: client
      type: System.ServiceModel.Description.MetadataExchangeClient
      description: "<xref href=&quot;System.ServiceModel.Description.MetadataExchangeClient&quot;> </xref>用于检索元数据。"
    return:
      type: System.ServiceModel.Description.ServiceEndpointCollection
      description: "集合<xref:System.ServiceModel.Description.ServiceEndpoint>指定协定的对象。</xref:System.ServiceModel.Description.ServiceEndpoint>"
  overload: System.ServiceModel.Description.MetadataResolver.Resolve*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "地址、 协定集合，或客户端为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>contracts</code>为空的至少一个成员<code>contracts</code>为 null，或<code>contracts</code>包含多个具有相同的名称和命名空间的协定。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,AsyncCallback,Object)
- uid: System.IAsyncResult
  parent: System
  isExternal: true
  name: IAsyncResult
  nameWithType: IAsyncResult
  fullName: System.IAsyncResult
- uid: System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<ContractDescription>
  nameWithType: IEnumerable<ContractDescription>
  fullName: System.Collections.Generic.IEnumerable<System.ServiceModel.Description.ContractDescription>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.ServiceModel.Description.ContractDescription>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.ServiceModel.Description.ContractDescription
    name: ContractDescription
    nameWithType: ContractDescription
    fullName: ContractDescription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.ServiceModel.EndpointAddress
  parent: System.ServiceModel
  isExternal: true
  name: EndpointAddress
  nameWithType: EndpointAddress
  fullName: System.ServiceModel.EndpointAddress
- uid: System.AsyncCallback
  parent: System
  isExternal: true
  name: AsyncCallback
  nameWithType: AsyncCallback
  fullName: System.AsyncCallback
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.ServiceModel.EndpointAddress,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: BeginResolve(Type,EndpointAddress,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(Type,EndpointAddress,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(Type,EndpointAddress,AsyncCallback,Object)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient,AsyncCallback,Object)
- uid: System.ServiceModel.Description.MetadataExchangeClient
  parent: System.ServiceModel.Description
  isExternal: false
  name: MetadataExchangeClient
  nameWithType: MetadataExchangeClient
  fullName: System.ServiceModel.Description.MetadataExchangeClient
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.ServiceModel.Description.MetadataExchangeClientMode
  parent: System.ServiceModel.Description
  isExternal: false
  name: MetadataExchangeClientMode
  nameWithType: MetadataExchangeClientMode
  fullName: System.ServiceModel.Description.MetadataExchangeClientMode
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: BeginResolve(Type,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(Type,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(Type,Uri,MetadataExchangeClientMode,AsyncCallback,Object)
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient,System.AsyncCallback,System.Object)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient,AsyncCallback,Object)
  nameWithType: MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient,AsyncCallback,Object)
  fullName: System.ServiceModel.Description.MetadataResolver.BeginResolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient,AsyncCallback,Object)
- uid: System.ServiceModel.Description.MetadataResolver.EndResolve(System.IAsyncResult)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: EndResolve(IAsyncResult)
  nameWithType: MetadataResolver.EndResolve(IAsyncResult)
  fullName: System.ServiceModel.Description.MetadataResolver.EndResolve(IAsyncResult)
- uid: System.ServiceModel.Description.ServiceEndpointCollection
  parent: System.ServiceModel.Description
  isExternal: false
  name: ServiceEndpointCollection
  nameWithType: ServiceEndpointCollection
  fullName: System.ServiceModel.Description.ServiceEndpointCollection
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: Resolve(IEnumerable<ContractDescription>,EndpointAddress)
  nameWithType: MetadataResolver.Resolve(IEnumerable<ContractDescription>,EndpointAddress)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(IEnumerable<ContractDescription>,EndpointAddress)
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.ServiceModel.EndpointAddress)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: Resolve(Type,EndpointAddress)
  nameWithType: MetadataResolver.Resolve(Type,EndpointAddress)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(Type,EndpointAddress)
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.ServiceModel.EndpointAddress,System.ServiceModel.Description.MetadataExchangeClient)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: Resolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient)
  nameWithType: MetadataResolver.Resolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(IEnumerable<ContractDescription>,EndpointAddress,MetadataExchangeClient)
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode)
  nameWithType: MetadataResolver.Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode)
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Type,System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: Resolve(Type,Uri,MetadataExchangeClientMode)
  nameWithType: MetadataResolver.Resolve(Type,Uri,MetadataExchangeClientMode)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(Type,Uri,MetadataExchangeClientMode)
- uid: System.ServiceModel.Description.MetadataResolver.Resolve(System.Collections.Generic.IEnumerable{System.ServiceModel.Description.ContractDescription},System.Uri,System.ServiceModel.Description.MetadataExchangeClientMode,System.ServiceModel.Description.MetadataExchangeClient)
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient)
  nameWithType: MetadataResolver.Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient)
  fullName: System.ServiceModel.Description.MetadataResolver.Resolve(IEnumerable<ContractDescription>,Uri,MetadataExchangeClientMode,MetadataExchangeClient)
- uid: System.ServiceModel.Description.MetadataResolver.BeginResolve*
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: BeginResolve
  nameWithType: MetadataResolver.BeginResolve
- uid: System.ServiceModel.Description.MetadataResolver.EndResolve*
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: EndResolve
  nameWithType: MetadataResolver.EndResolve
- uid: System.ServiceModel.Description.MetadataResolver.Resolve*
  parent: System.ServiceModel.Description.MetadataResolver
  isExternal: false
  name: Resolve
  nameWithType: MetadataResolver.Resolve
