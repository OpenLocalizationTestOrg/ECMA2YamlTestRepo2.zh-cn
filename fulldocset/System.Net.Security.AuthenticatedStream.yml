### YamlMime:ManagedReference
items:
- uid: System.Net.Security.AuthenticatedStream
  id: AuthenticatedStream
  children:
  - System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  - System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  - System.Net.Security.AuthenticatedStream.InnerStream
  - System.Net.Security.AuthenticatedStream.IsAuthenticated
  - System.Net.Security.AuthenticatedStream.IsEncrypted
  - System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  - System.Net.Security.AuthenticatedStream.IsServer
  - System.Net.Security.AuthenticatedStream.IsSigned
  - System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  langs:
  - csharp
  name: AuthenticatedStream
  nameWithType: AuthenticatedStream
  fullName: System.Net.Security.AuthenticatedStream
  type: Class
  summary: "提供用于通过流传递凭据和请求或客户端-服务器应用程序用于执行身份验证方法。"
  remarks: "此抽象类提供方法和属性所共有的经过身份验证流。       经过身份验证的流可以提供身份验证、 数据签名和加密服务，这可以帮助维护的完整性和保密性使用<xref:System.Net.Security.AuthenticatedStream.InnerStream%2A>.</xref:System.Net.Security.AuthenticatedStream.InnerStream%2A>传输的数据       由客户端和服务器上支持的安全协议以及从 AuthenticatedStream 派生的类实现的安全协议将确定应用程序可以使用的安全功能。 <xref:System.Net.Security.NegotiateStream>和<xref:System.Net.Security.SslStream>类从 AuthenticatedStream 继承和实现 Negotiate 和安全套接字层安全协议，分别。</xref:System.Net.Security.SslStream> </xref:System.Net.Security.NegotiateStream>"
  example:
  - "The following code example demonstrates displaying the properties of an authenticated stream.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/t-system.net.security.au_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/t-system.net.security.au_1.cs)]"
  syntax:
    content: 'public abstract class AuthenticatedStream : System.IO.Stream'
  inheritance:
  - System.IO.Stream
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  id: '#ctor(System.IO.Stream,System.Boolean)'
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: AuthenticatedStream(Stream,Boolean)
  nameWithType: AuthenticatedStream.AuthenticatedStream(Stream,Boolean)
  fullName: System.Net.Security.AuthenticatedStream.AuthenticatedStream(Stream,Boolean)
  type: Constructor
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "初始化的新实例<xref href=&quot;System.Net.Security.AuthenticatedStream&quot;></xref>类。"
  remarks: "当指定`true`为`leaveStreamOpen`参数，关闭<xref:System.Net.Security.AuthenticatedStream>不起任何作用`innerStream`流。</xref:System.Net.Security.AuthenticatedStream>       此构造函数供经过身份验证流的实施者，并可以通过从<xref:System.Net.Security.AuthenticatedStream>.</xref:System.Net.Security.AuthenticatedStream>派生的类调用"
  syntax:
    content: protected AuthenticatedStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);
    parameters:
    - id: innerStream
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>使用对象<xref href=&quot;System.Net.Security.AuthenticatedStream&quot;></xref>用于发送和接收数据。</xref:System.IO.Stream>"
    - id: leaveInnerStreamOpen
      type: System.Boolean
      description: "A <xref:System.Boolean>，该值指示是否关闭此<xref href=&quot;System.Net.Security.AuthenticatedStream&quot;></xref>对象也会关闭`innerStream`。</xref:System.Boolean>"
  overload: System.Net.Security.AuthenticatedStream.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>innerStream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>.       -<code>innerStream</code>等同于<xref:System.IO.Stream.Null>。"
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: AuthenticatedStream.Dispose(Boolean)
  fullName: System.Net.Security.AuthenticatedStream.Dispose(Boolean)
  type: Method
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "释放由非托管的资源<xref href=&quot;System.Net.Security.AuthenticatedStream&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共`Dispose()`方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> `Dispose()`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数为 true 时，此方法释放由任何托管对象持有的全部资源此<xref:System.Net.Security.AuthenticatedStream>引用。</xref:System.Net.Security.AuthenticatedStream> 此方法调用`Dispose()`每个引用对象的方法。"
  syntax:
    content: protected override void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Net.Security.AuthenticatedStream.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.InnerStream
  id: InnerStream
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: InnerStream
  nameWithType: AuthenticatedStream.InnerStream
  fullName: System.Net.Security.AuthenticatedStream.InnerStream
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取由此流<xref href=&quot;System.Net.Security.AuthenticatedStream&quot;></xref>用于发送和接收数据。"
  remarks: "<xref:System.Net.Security.AuthenticatedStream>可以使用此属性来访问流传递到<xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>。</xref:System.Net.Security.AuthenticatedStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29></xref:System.Net.Security.AuthenticatedStream>从继承的类"
  syntax:
    content: protected System.IO.Stream InnerStream { get; }
    return:
      type: System.IO.Stream
      description: "A<xref:System.IO.Stream>对象。</xref:System.IO.Stream>"
  overload: System.Net.Security.AuthenticatedStream.InnerStream*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated
  id: IsAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsAuthenticated
  nameWithType: AuthenticatedStream.IsAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示身份验证是否成功。</xref:System.Boolean>"
  remarks: "中从<xref:System.Net.Security.AuthenticatedStream>.</xref:System.Net.Security.AuthenticatedStream>继承的类定义调用来执行身份验证的方法"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_3_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_3_1.cs)]"
  syntax:
    content: public abstract bool IsAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果发生了成功的身份验证;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.AuthenticatedStream.IsAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted
  id: IsEncrypted
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsEncrypted
  nameWithType: AuthenticatedStream.IsEncrypted
  fullName: System.Net.Security.AuthenticatedStream.IsEncrypted
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否已发送数据，使用此<xref href=&quot;System.Net.Security.AuthenticatedStream&quot;></xref>进行加密。</xref:System.Boolean>"
  remarks: "加密有助于保护的数据; 的隐私也就是说，它可帮助确保，在传输过程中的数据时，它不能破译由第三方。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_0_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_0_1.cs)]"
  syntax:
    content: public abstract bool IsEncrypted { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果正在通过网络传输之前加密和解密数据在它到达远程终结点;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.AuthenticatedStream.IsEncrypted*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  id: IsMutuallyAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsMutuallyAuthenticated
  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否已验证服务器和客户端。</xref:System.Boolean>"
  remarks: "并非所有的安全协议支持相互身份验证。 若要确定是否继承自的类中实现的安全协议支持相互身份验证<xref:System.Net.Security.AuthenticatedStream>，检查类文档。</xref:System.Net.Security.AuthenticatedStream>"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_4_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_4_1.cs)]"
  syntax:
    content: public abstract bool IsMutuallyAuthenticated { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果客户端和服务器进行了身份验证;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsServer
  id: IsServer
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsServer
  nameWithType: AuthenticatedStream.IsServer
  fullName: System.Net.Security.AuthenticatedStream.IsServer
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否为服务器已验证的连接的本地端。</xref:System.Boolean>"
  remarks: "大多数用于客户端服务器身份验证的安全协议定义特定的行为和需求提供基于您在客户端或服务器的身份验证的凭据。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_2_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_2_1.cs)]"
  syntax:
    content: public abstract bool IsServer { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果本地终结点进行身份验证作为身份验证的客户端-服务器连接; 的服务器端<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果的本地终结点与客户端进行身份验证。"
  overload: System.Net.Security.AuthenticatedStream.IsServer*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.IsSigned
  id: IsSigned
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: IsSigned
  nameWithType: AuthenticatedStream.IsSigned
  fullName: System.Net.Security.AuthenticatedStream.IsSigned
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取<xref:System.Boolean>值，该值指示是否使用此流发送的数据进行签名。</xref:System.Boolean>"
  remarks: "数据签名有助于保护的数据中; 完整性也就是说，它可帮助收件人确定是否数据已被篡改在传输过程中。"
  example:
  - "The following code example demonstrates displaying the value of this property.  \n  \n [!code-cpp[NclNegoAsyncClient#6](~/add/codesnippet/cpp/p-system.net.security.au_1_1.cpp)]\n [!code-cs[NclNegoAsyncClient#6](~/add/codesnippet/csharp/p-system.net.security.au_1_1.cs)]"
  syntax:
    content: public abstract bool IsSigned { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果数据在传输; 前已签名否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.AuthenticatedStream.IsSigned*
  exceptions: []
  platform:
  - net462
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  id: LeaveInnerStreamOpen
  parent: System.Net.Security.AuthenticatedStream
  langs:
  - csharp
  name: LeaveInnerStreamOpen
  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen
  fullName: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  type: Property
  assemblies:
  - System
  namespace: System.Net.Security
  summary: "获取流使用的是否<xref href=&quot;System.Net.Security.AuthenticatedStream&quot;></xref>为发送和接收数据具有已保持打开状态。"
  remarks: "当设置为`true`，关闭此类的实例后，传递到此类的构造函数的流将不会关闭。 当设置为`false`，关闭此类的实例也将关闭基础的传输流。 此属性的默认值是`false`。"
  syntax:
    content: public bool LeaveInnerStreamOpen { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果内部流都具有已保持打开状态;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen*
  exceptions: []
  platform:
  - net462
references:
- uid: System.IO.Stream
  isExternal: false
  name: System.IO.Stream
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.Net.Security.AuthenticatedStream.#ctor(System.IO.Stream,System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: AuthenticatedStream(Stream,Boolean)
  nameWithType: AuthenticatedStream.AuthenticatedStream(Stream,Boolean)
  fullName: System.Net.Security.AuthenticatedStream.AuthenticatedStream(Stream,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Net.Security.AuthenticatedStream.Dispose(System.Boolean)
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: AuthenticatedStream.Dispose(Boolean)
  fullName: System.Net.Security.AuthenticatedStream.Dispose(Boolean)
- uid: System.Net.Security.AuthenticatedStream.InnerStream
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: InnerStream
  nameWithType: AuthenticatedStream.InnerStream
  fullName: System.Net.Security.AuthenticatedStream.InnerStream
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: AuthenticatedStream.IsAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsEncrypted
  nameWithType: AuthenticatedStream.IsEncrypted
  fullName: System.Net.Security.AuthenticatedStream.IsEncrypted
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated
  fullName: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsServer
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsServer
  nameWithType: AuthenticatedStream.IsServer
  fullName: System.Net.Security.AuthenticatedStream.IsServer
- uid: System.Net.Security.AuthenticatedStream.IsSigned
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsSigned
  nameWithType: AuthenticatedStream.IsSigned
  fullName: System.Net.Security.AuthenticatedStream.IsSigned
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: LeaveInnerStreamOpen
  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen
  fullName: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen
- uid: System.Net.Security.AuthenticatedStream.#ctor*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: AuthenticatedStream
  nameWithType: AuthenticatedStream.AuthenticatedStream
- uid: System.Net.Security.AuthenticatedStream.Dispose*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: Dispose
  nameWithType: AuthenticatedStream.Dispose
- uid: System.Net.Security.AuthenticatedStream.InnerStream*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: InnerStream
  nameWithType: AuthenticatedStream.InnerStream
- uid: System.Net.Security.AuthenticatedStream.IsAuthenticated*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsAuthenticated
  nameWithType: AuthenticatedStream.IsAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsEncrypted*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsEncrypted
  nameWithType: AuthenticatedStream.IsEncrypted
- uid: System.Net.Security.AuthenticatedStream.IsMutuallyAuthenticated*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsMutuallyAuthenticated
  nameWithType: AuthenticatedStream.IsMutuallyAuthenticated
- uid: System.Net.Security.AuthenticatedStream.IsServer*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsServer
  nameWithType: AuthenticatedStream.IsServer
- uid: System.Net.Security.AuthenticatedStream.IsSigned*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: IsSigned
  nameWithType: AuthenticatedStream.IsSigned
- uid: System.Net.Security.AuthenticatedStream.LeaveInnerStreamOpen*
  parent: System.Net.Security.AuthenticatedStream
  isExternal: false
  name: LeaveInnerStreamOpen
  nameWithType: AuthenticatedStream.LeaveInnerStreamOpen
