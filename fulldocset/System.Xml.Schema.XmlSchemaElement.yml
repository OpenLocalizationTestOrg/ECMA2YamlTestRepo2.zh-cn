### YamlMime:ManagedReference
items:
- uid: System.Xml.Schema.XmlSchemaElement
  id: XmlSchemaElement
  children:
  - System.Xml.Schema.XmlSchemaElement.#ctor
  - System.Xml.Schema.XmlSchemaElement.Block
  - System.Xml.Schema.XmlSchemaElement.BlockResolved
  - System.Xml.Schema.XmlSchemaElement.Constraints
  - System.Xml.Schema.XmlSchemaElement.DefaultValue
  - System.Xml.Schema.XmlSchemaElement.ElementSchemaType
  - System.Xml.Schema.XmlSchemaElement.ElementType
  - System.Xml.Schema.XmlSchemaElement.Final
  - System.Xml.Schema.XmlSchemaElement.FinalResolved
  - System.Xml.Schema.XmlSchemaElement.FixedValue
  - System.Xml.Schema.XmlSchemaElement.Form
  - System.Xml.Schema.XmlSchemaElement.IsAbstract
  - System.Xml.Schema.XmlSchemaElement.IsNillable
  - System.Xml.Schema.XmlSchemaElement.Name
  - System.Xml.Schema.XmlSchemaElement.QualifiedName
  - System.Xml.Schema.XmlSchemaElement.RefName
  - System.Xml.Schema.XmlSchemaElement.SchemaType
  - System.Xml.Schema.XmlSchemaElement.SchemaTypeName
  - System.Xml.Schema.XmlSchemaElement.SubstitutionGroup
  langs:
  - csharp
  name: XmlSchemaElement
  nameWithType: XmlSchemaElement
  fullName: System.Xml.Schema.XmlSchemaElement
  type: Class
  summary: "表示<xref uid=&quot;langword_csharp_element&quot; name=&quot;element&quot; href=&quot;&quot;></xref>从 XML 架构由万维网联合会 (W3C) 指定的元素。 此类是所有微粒类型的基类，并用于描述 XML 文档中的元素。"
  remarks: "> [!IMPORTANT]1>-不要使用来自未知或不受信任的源或位置的架构。 这样会危及你的代码的安全性。   1>-（包括内联架构） 的 XML 架构的本质上就容易受到拒绝服务攻击;不要在不受信任的情况下接受它们。   1>-架构验证错误消息和异常可能会公开有关内容模型或架构文件的 URI 路径的敏感信息。 请注意不要公开此信息来不受信任的调用方。"
  example:
  - "The following example creates the `element` element.  \n  \n [!code-cs[Classic WebData XmlSchemaElement Example#1](~/add/codesnippet/csharp/t-system.xml.schema.xmls_2_1.cs)]\n [!code-cpp[Classic WebData XmlSchemaElement Example#1](~/add/codesnippet/cpp/t-system.xml.schema.xmls_2_1.cpp)]\n [!code-vb[Classic WebData XmlSchemaElement Example#1](~/add/codesnippet/visualbasic/t-system.xml.schema.xmls_2_1.vb)]  \n  \n The following XML file is used for the preceding code example.  \n  \n [!code-xml[Classic WebData XmlSchemaElement Example#2](~/add/codesnippet/xml/t-system.xml.schema.xmls_2_2.xsd)]"
  syntax:
    content: 'public class XmlSchemaElement : System.Xml.Schema.XmlSchemaParticle'
  inheritance:
  - System.Object
  - System.Xml.Schema.XmlSchemaObject
  - System.Xml.Schema.XmlSchemaAnnotated
  - System.Xml.Schema.XmlSchemaParticle
  implements: []
  inheritedMembers:
  - System.Xml.Schema.XmlSchemaAnnotated.Annotation
  - System.Xml.Schema.XmlSchemaAnnotated.Id
  - System.Xml.Schema.XmlSchemaAnnotated.UnhandledAttributes
  - System.Xml.Schema.XmlSchemaObject.LineNumber
  - System.Xml.Schema.XmlSchemaObject.LinePosition
  - System.Xml.Schema.XmlSchemaObject.Namespaces
  - System.Xml.Schema.XmlSchemaObject.Parent
  - System.Xml.Schema.XmlSchemaObject.SourceUri
  - System.Xml.Schema.XmlSchemaParticle.MaxOccurs
  - System.Xml.Schema.XmlSchemaParticle.MaxOccursString
  - System.Xml.Schema.XmlSchemaParticle.MinOccurs
  - System.Xml.Schema.XmlSchemaParticle.MinOccursString
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.#ctor
  id: '#ctor'
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: XmlSchemaElement()
  nameWithType: XmlSchemaElement.XmlSchemaElement()
  fullName: System.Xml.Schema.XmlSchemaElement.XmlSchemaElement()
  type: Constructor
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "初始化的新实例<xref href=&quot;System.Xml.Schema.XmlSchemaElement&quot;></xref>类。"
  syntax:
    content: public XmlSchemaElement ();
    parameters: []
  overload: System.Xml.Schema.XmlSchemaElement.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.Block
  id: Block
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: Block
  nameWithType: XmlSchemaElement.Block
  fullName: System.Xml.Schema.XmlSchemaElement.Block
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置<xref uid=&quot;langword_csharp_Block&quot; name=&quot;Block&quot; href=&quot;&quot;></xref>派生。"
  remarks: "此属性可以包含以下值: |枚举 |说明 |  |----------|-----------------|  |`None`|使用通过定义派生限制`BlockDefault`的架构，如果它存在的属性。 |  |`Empty`|没有上替代此元素的限制。 |  |`Substitution`|此元素不能被替换的替换派生的类型。 |  |`Extension`|通过扩展而派生的类型时不能替换此元素。 |  |`Restriction`|通过限制派生的类型时不能替换此元素。 |  |`All`|`#all`. 此元素无法替换由无论何种派生方法的任何类型。 |      此属性不会阻止派生，但阻止派生替换实例中的类型。 不支持列表和联合值`block`属性。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaDerivationMethod Block { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaDerivationMethod
      description: "用于阻止类型派生的属性。 默认值是<xref uid=&quot;langword_csharp_XmlSchemaDerivationMethod.None&quot; name=&quot;XmlSchemaDerivationMethod.None&quot; href=&quot;&quot;> </xref>。       可选。"
  overload: System.Xml.Schema.XmlSchemaElement.Block*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.BlockResolved
  id: BlockResolved
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: BlockResolved
  nameWithType: XmlSchemaElement.BlockResolved
  fullName: System.Xml.Schema.XmlSchemaElement.BlockResolved
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取的编译后值<xref uid=&quot;langword_csharp_Block&quot; name=&quot;Block&quot; href=&quot;&quot;></xref>属性。"
  remarks: "此值指示怎样强制实施类型时`xsi:type`实例文档中使用。 例如，如果值为受限制，可以使用仅特定定义的类型，通过限制从特定定义的类型不是类型派生。       此属性可以包含下表中显示的值。 默认值是`None`。 此属性上不允许列表和联合派生方法。      |枚举 |说明 |  |----------|-----------------|  |`Empty`|没有上替代此元素的限制。 |  |`Substitution`|此元素不能被替换的替换派生的类型。 |  |`Extension`|通过扩展而派生的类型时不能替换此元素。 |  |`Restriction`|通过限制派生的类型时不能替换此元素。 |  |`All`|`#all`. 此元素无法替换由无论何种派生方法的任何类型。 |"
  syntax:
    content: public System.Xml.Schema.XmlSchemaDerivationMethod BlockResolved { get; }
    return:
      type: System.Xml.Schema.XmlSchemaDerivationMethod
      description: "编译后值的<xref uid=&quot;langword_csharp_Block&quot; name=&quot;Block&quot; href=&quot;&quot;></xref>属性。 默认值是<xref uid=&quot;langword_csharp_BlockDefault&quot; name=&quot;BlockDefault&quot; href=&quot;&quot;></xref>值上<xref uid=&quot;langword_csharp_schema&quot; name=&quot;schema&quot; href=&quot;&quot;></xref>元素。"
  overload: System.Xml.Schema.XmlSchemaElement.BlockResolved*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.Constraints
  id: Constraints
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: Constraints
  nameWithType: XmlSchemaElement.Constraints
  fullName: System.Xml.Schema.XmlSchemaElement.Constraints
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取元素的约束的集合。"
  remarks: "返回元素的约束集合。 Can be any of `XmlSchemaKey`, `XmlSchemaKeyref`, or `XmlSchemaUnique`."
  syntax:
    content: public System.Xml.Schema.XmlSchemaObjectCollection Constraints { get; }
    return:
      type: System.Xml.Schema.XmlSchemaObjectCollection
      description: "约束的集合。"
  overload: System.Xml.Schema.XmlSchemaElement.Constraints*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.DefaultValue
  id: DefaultValue
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: DefaultValue
  nameWithType: XmlSchemaElement.DefaultValue
  fullName: System.Xml.Schema.XmlSchemaElement.DefaultValue
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置元素的默认值，如果其内容是简单类型或元素的内容是<xref uid=&quot;langword_csharp_textOnly&quot; name=&quot;textOnly&quot; href=&quot;&quot;> </xref>。"
  remarks: "`fixed`和`default`属性是互相排斥。 如果此元素包含简单类型，此值必须是该类型的有效的值。"
  syntax:
    content: public string DefaultValue { get; set; }
    return:
      type: System.String
      description: "元素的默认值。 默认值为空引用。       可选。"
  overload: System.Xml.Schema.XmlSchemaElement.DefaultValue*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.ElementSchemaType
  id: ElementSchemaType
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: ElementSchemaType
  nameWithType: XmlSchemaElement.ElementSchemaType
  fullName: System.Xml.Schema.XmlSchemaElement.ElementSchemaType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;></xref>对象，表示元素的类型基于<> *1> 或<> *1> 的元素的值。"
  remarks: "此属性是后架构验证信息集属性。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaType ElementSchemaType { get; }
    return:
      type: System.Xml.Schema.XmlSchemaType
      description: "<xref href=&quot;System.Xml.Schema.XmlSchemaType&quot;> </xref>对象。"
  overload: System.Xml.Schema.XmlSchemaElement.ElementSchemaType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.ElementType
  id: ElementType
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: ElementType
  nameWithType: XmlSchemaElement.ElementType
  fullName: System.Xml.Schema.XmlSchemaElement.ElementType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取一个公共语言运行时 (CLR) 对象基于<xref href=&quot;System.Xml.Schema.XmlSchemaElement&quot;></xref>或<xref href=&quot;System.Xml.Schema.XmlSchemaElement&quot;></xref>的元素，它保存编译后值的<xref uid=&quot;langword_csharp_ElementType&quot; name=&quot;ElementType&quot; href=&quot;&quot;></xref>属性。"
  remarks: "该对象可以为<xref:System.Xml.Schema.XmlSchemaDatatype>如果元素具有的内置 XML 架构类型或<xref:System.Xml.Schema.XmlSchemaSimpleType>如果元素具有的用户定义的类型。</xref:System.Xml.Schema.XmlSchemaSimpleType> </xref:System.Xml.Schema.XmlSchemaDatatype>       此属性是后架构验证信息集属性。      1> [!IMPORTANT] 1> ElementType 属性已过时的.NET framework 2.0 版中，并已替换为<xref:System.Xml.Schema.XmlSchemaElement.ElementSchemaType%2A>属性。</xref:System.Xml.Schema.XmlSchemaElement.ElementSchemaType%2A>"
  syntax:
    content: public object ElementType { get; }
    return:
      type: System.Object
      description: "公共语言运行时对象中。 编译后值的<xref uid=&quot;langword_csharp_ElementType&quot; name=&quot;ElementType&quot; href=&quot;&quot;></xref>属性。"
  overload: System.Xml.Schema.XmlSchemaElement.ElementType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.Final
  id: Final
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: Final
  nameWithType: XmlSchemaElement.Final
  fullName: System.Xml.Schema.XmlSchemaElement.Final
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置<xref uid=&quot;langword_csharp_Final&quot; name=&quot;Final&quot; href=&quot;&quot;></xref>属性以指示是否允许任何进一步的派生。"
  remarks: "此属性可以包含下表中显示的值。      |枚举 |说明 |  |----------|-----------------|  |`None`|使用通过定义派生限制`FinalDefault`的架构，如果它存在的属性。 |  |`Empty`|没有在此元素的派生限制。 |  |`Extension`|此元素不能通过扩展而派生。 |  |`Restriction`|此元素不能通过限制派生。 |  |`All`|`#all`. 此元素不能通过任何派生方法派生。 |      另请参阅<xref:System.Xml.Schema.XmlSchemaElement>.</xref:System.Xml.Schema.XmlSchemaElement> `Substitution``List`，和`Union`派生方法不允许用于此属性。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaDerivationMethod Final { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaDerivationMethod
      description: "<xref uid=&quot;langword_csharp_Final&quot; name=&quot;Final&quot; href=&quot;&quot;> </xref>属性。 默认值是<xref uid=&quot;langword_csharp_XmlSchemaDerivationMethod.None&quot; name=&quot;XmlSchemaDerivationMethod.None&quot; href=&quot;&quot;> </xref>。       可选。"
  overload: System.Xml.Schema.XmlSchemaElement.Final*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.FinalResolved
  id: FinalResolved
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: FinalResolved
  nameWithType: XmlSchemaElement.FinalResolved
  fullName: System.Xml.Schema.XmlSchemaElement.FinalResolved
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取的编译后值<xref uid=&quot;langword_csharp_Final&quot; name=&quot;Final&quot; href=&quot;&quot;></xref>属性。"
  remarks: "此值指示如何的类型是受限制类型扩展通过限制时。 此属性可以包含以下值。      |枚举 |说明 |  |----------|-----------------|  |`Empty`|没有在此元素的派生限制。 |  |`Extension`|此元素不能通过扩展而派生。 |  |`Restriction`|此元素不能通过限制派生。 |  |`All`|`#all`. 此元素不能通过任何派生方法派生。 |      替换、 列表和联合派生方法不允许用于此属性。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaDerivationMethod FinalResolved { get; }
    return:
      type: System.Xml.Schema.XmlSchemaDerivationMethod
      description: "编译后值的<xref uid=&quot;langword_csharp_Final&quot; name=&quot;Final&quot; href=&quot;&quot;></xref>属性。 默认值是<xref uid=&quot;langword_csharp_FinalDefault&quot; name=&quot;FinalDefault&quot; href=&quot;&quot;></xref>值上<xref uid=&quot;langword_csharp_schema&quot; name=&quot;schema&quot; href=&quot;&quot;></xref>元素。"
  overload: System.Xml.Schema.XmlSchemaElement.FinalResolved*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.FixedValue
  id: FixedValue
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: FixedValue
  nameWithType: XmlSchemaElement.FixedValue
  fullName: System.Xml.Schema.XmlSchemaElement.FixedValue
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置的固定的值。"
  remarks: "内容应该是简单类型或`textOnly`。 `fixed`和`default`属性是互相排斥。"
  syntax:
    content: public string FixedValue { get; set; }
    return:
      type: System.String
      description: "该键预先确定的且不可更改的固定的值。 默认值为空引用。       可选。"
  overload: System.Xml.Schema.XmlSchemaElement.FixedValue*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.Form
  id: Form
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: Form
  nameWithType: XmlSchemaElement.Form
  fullName: System.Xml.Schema.XmlSchemaElement.Form
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置元素的窗体。"
  remarks: "默认值为的值`elementFormDefault`属性，则为`schema`包含该元素的元素。 默认值是`Unqualified`。      |枚举 |说明 |  |----------|-----------------|  |`Qualified`|必须用命名空间前缀限定元素。 |  |`Unqualified`|元素不需要用命名空间前缀限定。 |      不设置的值，包含的元素是否`schema`元素。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaForm Form { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaForm
      description: "窗体中的元素。 默认值是&lt;xref:System.Xml.Schema.XmlSchema.ElementFormDefault%2A?displayProperty=fullName&gt;值。       可选。"
  overload: System.Xml.Schema.XmlSchemaElement.Form*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.IsAbstract
  id: IsAbstract
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: IsAbstract
  nameWithType: XmlSchemaElement.IsAbstract
  fullName: System.Xml.Schema.XmlSchemaElement.IsAbstract
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置信息以指示是否可以在实例文档中使用该元素。"
  syntax:
    content: public bool IsAbstract { get; set; }
    return:
      type: System.Boolean
      description: "如果<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，元素不能出现在实例文档。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。       可选。"
  overload: System.Xml.Schema.XmlSchemaElement.IsAbstract*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.IsNillable
  id: IsNillable
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: IsNillable
  nameWithType: XmlSchemaElement.IsNillable
  fullName: System.Xml.Schema.XmlSchemaElement.IsNillable
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置信息，该值指示如果<xref uid=&quot;langword_csharp_xsi:nil&quot; name=&quot;xsi:nil&quot; href=&quot;&quot;></xref>实例数据中可能出现。 指示是否显式 nil 值可以分配给此元素。"
  remarks: "这适用于元素内容并且不元素的特性。"
  syntax:
    content: public bool IsNillable { get; set; }
    return:
      type: System.Boolean
      description: "如果 nillable 是<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>，这使元素具有的实例<xref uid=&quot;langword_csharp_nil&quot; name=&quot;nil&quot; href=&quot;&quot;></xref>属性设置为<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;> </xref>。 <xref uid=&quot;langword_csharp_nil&quot; name=&quot;nil&quot; href=&quot;&quot;> </xref>属性定义的 XML 架构命名空间的一部分为实例。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。       可选。"
  overload: System.Xml.Schema.XmlSchemaElement.IsNillable*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.Name
  id: Name
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: Name
  nameWithType: XmlSchemaElement.Name
  fullName: System.Xml.Schema.XmlSchemaElement.Name
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置元素的名称。"
  remarks: "World Wide Web Consortium (W3C) XML 命名空间规范中定义的名称必须是 NCName （无冒号名称）。 `Name`和`RefName`属性是互相排斥。"
  syntax:
    content: public string Name { get; set; }
    return:
      type: System.String
      description: "元素的名称。 默认值是<xref uid=&quot;langword_csharp_String.Empty&quot; name=&quot;String.Empty&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xml.Schema.XmlSchemaElement.Name*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.QualifiedName
  id: QualifiedName
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: QualifiedName
  nameWithType: XmlSchemaElement.QualifiedName
  fullName: System.Xml.Schema.XmlSchemaElement.QualifiedName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取给定元素的实际限定的名称。"
  remarks: "QualifiedName 是的名称，`ref`特性引用了。 限定的名称包含的元素的 NCName。 例如，元素名称 =&quot;NCName&quot;和用于描述前缀`targetNamespace`的架构。 此属性将保存编译后值的`QualifiedName`属性。"
  syntax:
    content: public System.Xml.XmlQualifiedName QualifiedName { get; }
    return:
      type: System.Xml.XmlQualifiedName
      description: "元素的限定的名称。 编译后值的<xref uid=&quot;langword_csharp_QualifiedName&quot; name=&quot;QualifiedName&quot; href=&quot;&quot;></xref>属性。"
  overload: System.Xml.Schema.XmlSchemaElement.QualifiedName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.RefName
  id: RefName
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: RefName
  nameWithType: XmlSchemaElement.RefName
  fullName: System.Xml.Schema.XmlSchemaElement.RefName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置该架构中声明的元素 （或指定命名空间指示的另一个架构） 的引用名称。"
  remarks: "`RefName`必须是 QName。 `RefName`可以包括命名空间前缀。 If `RefName` attribute is present, all `complexType`, `simpleType`, `key`, `keyref`, `unique`, `nillable`, `default`, `fixed`, `form`, `block`, and `type` must be absent. 如果`RefName`存在， `minOccurs`， `maxOccurs`，和`id`允许。 若要使用的现有元素定义某个元素声明，请使用`RefName`特性以指定现有元素定义。       不设置的值，包含的元素是否`schema`元素。"
  syntax:
    content: public System.Xml.XmlQualifiedName RefName { get; set; }
    return:
      type: System.Xml.XmlQualifiedName
      description: "元素的引用名称。"
  overload: System.Xml.Schema.XmlSchemaElement.RefName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.SchemaType
  id: SchemaType
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: SchemaType
  nameWithType: XmlSchemaElement.SchemaType
  fullName: System.Xml.Schema.XmlSchemaElement.SchemaType
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置元素的类型。 这可以是复杂类型或简单类型。"
  remarks: "若要使用的现有声明元素`simpleType`或`complexType`定义，但使用`SchemaType`属性来指定现有的类型。 如果`RefName`属性是否存在、 `complexType`， `simpleType`， `key`， `keyref`，和`unique`元素和`nillable`， `default`， `fixed`， `form`， `block`，和`SchemaType`属性不能出现。"
  syntax:
    content: public System.Xml.Schema.XmlSchemaType SchemaType { get; set; }
    return:
      type: System.Xml.Schema.XmlSchemaType
      description: "元素的类型。"
  overload: System.Xml.Schema.XmlSchemaElement.SchemaType*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.SchemaTypeName
  id: SchemaTypeName
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: SchemaTypeName
  nameWithType: XmlSchemaElement.SchemaTypeName
  fullName: System.Xml.Schema.XmlSchemaElement.SchemaTypeName
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置在此架构或由指定的命名空间指示的另一个架构中定义的内置数据类型的名称。"
  syntax:
    content: public System.Xml.XmlQualifiedName SchemaTypeName { get; set; }
    return:
      type: System.Xml.XmlQualifiedName
      description: "内置数据类型的名称。"
  overload: System.Xml.Schema.XmlSchemaElement.SchemaTypeName*
  exceptions: []
  platform:
  - net462
- uid: System.Xml.Schema.XmlSchemaElement.SubstitutionGroup
  id: SubstitutionGroup
  parent: System.Xml.Schema.XmlSchemaElement
  langs:
  - csharp
  name: SubstitutionGroup
  nameWithType: XmlSchemaElement.SubstitutionGroup
  fullName: System.Xml.Schema.XmlSchemaElement.SubstitutionGroup
  type: Property
  assemblies:
  - System.Xml
  namespace: System.Xml.Schema
  summary: "获取或设置此元素由替换元素的名称。"
  remarks: "此元素必须具有相同类型或从指定的元素的类型派生的类型。 此值必须是 QName。       不设置的值，包含的元素是否`schema`元素。"
  syntax:
    content: public System.Xml.XmlQualifiedName SubstitutionGroup { get; set; }
    return:
      type: System.Xml.XmlQualifiedName
      description: "此元素由替换元素的限定的名称。       可选。"
  overload: System.Xml.Schema.XmlSchemaElement.SubstitutionGroup*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Xml.Schema.XmlSchemaParticle
  isExternal: false
  name: System.Xml.Schema.XmlSchemaParticle
- uid: System.Xml.Schema.XmlSchemaElement.#ctor
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: XmlSchemaElement()
  nameWithType: XmlSchemaElement.XmlSchemaElement()
  fullName: System.Xml.Schema.XmlSchemaElement.XmlSchemaElement()
- uid: System.Xml.Schema.XmlSchemaElement.Block
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Block
  nameWithType: XmlSchemaElement.Block
  fullName: System.Xml.Schema.XmlSchemaElement.Block
- uid: System.Xml.Schema.XmlSchemaDerivationMethod
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaDerivationMethod
  nameWithType: XmlSchemaDerivationMethod
  fullName: System.Xml.Schema.XmlSchemaDerivationMethod
- uid: System.Xml.Schema.XmlSchemaElement.BlockResolved
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: BlockResolved
  nameWithType: XmlSchemaElement.BlockResolved
  fullName: System.Xml.Schema.XmlSchemaElement.BlockResolved
- uid: System.Xml.Schema.XmlSchemaElement.Constraints
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Constraints
  nameWithType: XmlSchemaElement.Constraints
  fullName: System.Xml.Schema.XmlSchemaElement.Constraints
- uid: System.Xml.Schema.XmlSchemaObjectCollection
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaObjectCollection
  nameWithType: XmlSchemaObjectCollection
  fullName: System.Xml.Schema.XmlSchemaObjectCollection
- uid: System.Xml.Schema.XmlSchemaElement.DefaultValue
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: DefaultValue
  nameWithType: XmlSchemaElement.DefaultValue
  fullName: System.Xml.Schema.XmlSchemaElement.DefaultValue
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xml.Schema.XmlSchemaElement.ElementSchemaType
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: ElementSchemaType
  nameWithType: XmlSchemaElement.ElementSchemaType
  fullName: System.Xml.Schema.XmlSchemaElement.ElementSchemaType
- uid: System.Xml.Schema.XmlSchemaType
  parent: System.Xml.Schema
  isExternal: false
  name: XmlSchemaType
  nameWithType: XmlSchemaType
  fullName: System.Xml.Schema.XmlSchemaType
- uid: System.Xml.Schema.XmlSchemaElement.ElementType
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: ElementType
  nameWithType: XmlSchemaElement.ElementType
  fullName: System.Xml.Schema.XmlSchemaElement.ElementType
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Xml.Schema.XmlSchemaElement.Final
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Final
  nameWithType: XmlSchemaElement.Final
  fullName: System.Xml.Schema.XmlSchemaElement.Final
- uid: System.Xml.Schema.XmlSchemaElement.FinalResolved
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: FinalResolved
  nameWithType: XmlSchemaElement.FinalResolved
  fullName: System.Xml.Schema.XmlSchemaElement.FinalResolved
- uid: System.Xml.Schema.XmlSchemaElement.FixedValue
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: FixedValue
  nameWithType: XmlSchemaElement.FixedValue
  fullName: System.Xml.Schema.XmlSchemaElement.FixedValue
- uid: System.Xml.Schema.XmlSchemaElement.Form
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Form
  nameWithType: XmlSchemaElement.Form
  fullName: System.Xml.Schema.XmlSchemaElement.Form
- uid: System.Xml.Schema.XmlSchemaForm
  parent: System.Xml.Schema
  isExternal: true
  name: XmlSchemaForm
  nameWithType: XmlSchemaForm
  fullName: System.Xml.Schema.XmlSchemaForm
- uid: System.Xml.Schema.XmlSchemaElement.IsAbstract
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: IsAbstract
  nameWithType: XmlSchemaElement.IsAbstract
  fullName: System.Xml.Schema.XmlSchemaElement.IsAbstract
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xml.Schema.XmlSchemaElement.IsNillable
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: IsNillable
  nameWithType: XmlSchemaElement.IsNillable
  fullName: System.Xml.Schema.XmlSchemaElement.IsNillable
- uid: System.Xml.Schema.XmlSchemaElement.Name
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Name
  nameWithType: XmlSchemaElement.Name
  fullName: System.Xml.Schema.XmlSchemaElement.Name
- uid: System.Xml.Schema.XmlSchemaElement.QualifiedName
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: QualifiedName
  nameWithType: XmlSchemaElement.QualifiedName
  fullName: System.Xml.Schema.XmlSchemaElement.QualifiedName
- uid: System.Xml.XmlQualifiedName
  parent: System.Xml
  isExternal: true
  name: XmlQualifiedName
  nameWithType: XmlQualifiedName
  fullName: System.Xml.XmlQualifiedName
- uid: System.Xml.Schema.XmlSchemaElement.RefName
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: RefName
  nameWithType: XmlSchemaElement.RefName
  fullName: System.Xml.Schema.XmlSchemaElement.RefName
- uid: System.Xml.Schema.XmlSchemaElement.SchemaType
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: SchemaType
  nameWithType: XmlSchemaElement.SchemaType
  fullName: System.Xml.Schema.XmlSchemaElement.SchemaType
- uid: System.Xml.Schema.XmlSchemaElement.SchemaTypeName
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: SchemaTypeName
  nameWithType: XmlSchemaElement.SchemaTypeName
  fullName: System.Xml.Schema.XmlSchemaElement.SchemaTypeName
- uid: System.Xml.Schema.XmlSchemaElement.SubstitutionGroup
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: SubstitutionGroup
  nameWithType: XmlSchemaElement.SubstitutionGroup
  fullName: System.Xml.Schema.XmlSchemaElement.SubstitutionGroup
- uid: System.Xml.Schema.XmlSchemaElement.#ctor*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: XmlSchemaElement
  nameWithType: XmlSchemaElement.XmlSchemaElement
- uid: System.Xml.Schema.XmlSchemaElement.Block*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Block
  nameWithType: XmlSchemaElement.Block
- uid: System.Xml.Schema.XmlSchemaElement.BlockResolved*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: BlockResolved
  nameWithType: XmlSchemaElement.BlockResolved
- uid: System.Xml.Schema.XmlSchemaElement.Constraints*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Constraints
  nameWithType: XmlSchemaElement.Constraints
- uid: System.Xml.Schema.XmlSchemaElement.DefaultValue*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: DefaultValue
  nameWithType: XmlSchemaElement.DefaultValue
- uid: System.Xml.Schema.XmlSchemaElement.ElementSchemaType*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: ElementSchemaType
  nameWithType: XmlSchemaElement.ElementSchemaType
- uid: System.Xml.Schema.XmlSchemaElement.ElementType*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: ElementType
  nameWithType: XmlSchemaElement.ElementType
- uid: System.Xml.Schema.XmlSchemaElement.Final*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Final
  nameWithType: XmlSchemaElement.Final
- uid: System.Xml.Schema.XmlSchemaElement.FinalResolved*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: FinalResolved
  nameWithType: XmlSchemaElement.FinalResolved
- uid: System.Xml.Schema.XmlSchemaElement.FixedValue*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: FixedValue
  nameWithType: XmlSchemaElement.FixedValue
- uid: System.Xml.Schema.XmlSchemaElement.Form*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Form
  nameWithType: XmlSchemaElement.Form
- uid: System.Xml.Schema.XmlSchemaElement.IsAbstract*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: IsAbstract
  nameWithType: XmlSchemaElement.IsAbstract
- uid: System.Xml.Schema.XmlSchemaElement.IsNillable*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: IsNillable
  nameWithType: XmlSchemaElement.IsNillable
- uid: System.Xml.Schema.XmlSchemaElement.Name*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: Name
  nameWithType: XmlSchemaElement.Name
- uid: System.Xml.Schema.XmlSchemaElement.QualifiedName*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: QualifiedName
  nameWithType: XmlSchemaElement.QualifiedName
- uid: System.Xml.Schema.XmlSchemaElement.RefName*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: RefName
  nameWithType: XmlSchemaElement.RefName
- uid: System.Xml.Schema.XmlSchemaElement.SchemaType*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: SchemaType
  nameWithType: XmlSchemaElement.SchemaType
- uid: System.Xml.Schema.XmlSchemaElement.SchemaTypeName*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: SchemaTypeName
  nameWithType: XmlSchemaElement.SchemaTypeName
- uid: System.Xml.Schema.XmlSchemaElement.SubstitutionGroup*
  parent: System.Xml.Schema.XmlSchemaElement
  isExternal: false
  name: SubstitutionGroup
  nameWithType: XmlSchemaElement.SubstitutionGroup
