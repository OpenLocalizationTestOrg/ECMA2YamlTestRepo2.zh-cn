### YamlMime:ManagedReference
items:
- uid: System.Drawing.BufferedGraphicsContext
  id: BufferedGraphicsContext
  children:
  - System.Drawing.BufferedGraphicsContext.#ctor
  - System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)
  - System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)
  - System.Drawing.BufferedGraphicsContext.Dispose
  - System.Drawing.BufferedGraphicsContext.Finalize
  - System.Drawing.BufferedGraphicsContext.Invalidate
  - System.Drawing.BufferedGraphicsContext.MaximumBuffer
  langs:
  - csharp
  name: BufferedGraphicsContext
  nameWithType: BufferedGraphicsContext
  fullName: System.Drawing.BufferedGraphicsContext
  type: Class
  summary: "提供用于创建可用来进行双缓冲图形缓冲区的方法。"
  remarks: "BufferedGraphicsContext 类可以实现自定义双缓冲图形。 使用双缓冲的图形的可以减少或消除闪烁引起重绘显示图面。      1> [!NOTE]&1;> 使用双缓冲的最简单方法是设置<xref:System.Windows.Forms.ControlStyles>控制控件使用的样式标志<xref:System.Windows.Forms.Control.SetStyle%2A>方法。</xref:System.Windows.Forms.Control.SetStyle%2A> </xref:System.Windows.Forms.ControlStyles> 设置<xref:System.Windows.Forms.ControlStyles>控件的控件的样式标志将重定向为通过一个默认的图形缓冲区，该控件的所有绘制工作，而无需任何其他代码。</xref:System.Windows.Forms.ControlStyles> 此标志设置为`true`默认情况下。       BufferedGraphicsContext 类提供用于创建和配置图形缓冲区的方法。 <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法创建<xref:System.Drawing.BufferedGraphics>，这是包装器还提供了可用于写入到缓冲区和呈现其内容写入输出设备的方法的图形缓冲区。</xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>       你可以从静态检索当前的应用程序域 BufferedGraphicsContext<xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName>属性。</xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName> 对于如动画的图形密集型应用程序，你可以创建专用的 BufferedGraphicsContext 使用构造函数中，但对于大多数应用程序<xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName>属性就够用了。</xref:System.Drawing.BufferedGraphicsManager.Current%2A?displayProperty=fullName>       绘制缓冲的图形和自定义缓冲实现的详细信息，请参阅[双缓冲图形](~/add/includes/ajax-current-ext-md.md)和[如何︰ 手动管理缓冲图形](~/add/includes/ajax-current-ext-md.md)。"
  example:
  - "The following code example demonstrates how to acquire the BufferedGraphicsContext for the current application domain. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#1](~/add/codesnippet/csharp/t-system.drawing.buffere_2_1.cs)]\n [!code-cpp[BufferingExamples#1](~/add/codesnippet/cpp/t-system.drawing.buffere_2_1.cpp)]\n [!code-vb[BufferingExamples#1](~/add/codesnippet/visualbasic/t-system.drawing.buffere_2_1.vb)]"
  syntax:
    content: 'public sealed class BufferedGraphicsContext : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.#ctor
  id: '#ctor'
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: BufferedGraphicsContext()
  nameWithType: BufferedGraphicsContext.BufferedGraphicsContext()
  fullName: System.Drawing.BufferedGraphicsContext.BufferedGraphicsContext()
  type: Constructor
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "初始化的新实例<xref href=&quot;System.Drawing.BufferedGraphicsContext&quot;></xref>类。"
  remarks: "对于如动画的图形密集型应用程序，你有时可以提高性能通过使用专用<xref:System.Drawing.BufferedGraphicsContext>而不是受支持<xref:System.Drawing.BufferedGraphicsManager>。</xref:System.Drawing.BufferedGraphicsManager>提供的默认实例</xref:System.Drawing.BufferedGraphicsContext> 这允许您创建和管理单独的图形缓冲区。      1> [!NOTE]&1;> 都应该调用<xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>使用专用的<xref:System.Drawing.BufferedGraphicsContext>.</xref:System.Drawing.BufferedGraphicsContext>完毕</xref:System.Drawing.BufferedGraphicsContext.Dispose%2A>       有关专用的图形缓冲区的详细信息，请参阅[如何︰ 手动管理缓冲图形](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public BufferedGraphicsContext ();
    parameters: []
  overload: System.Drawing.BufferedGraphicsContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)
  id: Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Allocate(Graphics,Rectangle)
  nameWithType: BufferedGraphicsContext.Allocate(Graphics,Rectangle)
  fullName: System.Drawing.BufferedGraphicsContext.Allocate(Graphics,Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "创建使用指定的像素格式的指定大小的图形缓冲区<xref href=&quot;System.Drawing.Graphics&quot;> </xref>。"
  remarks: "当你调用具有一个矩形的分配方法其大小超过的值<xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>属性、 一个临时<xref:System.Drawing.BufferedGraphicsContext>创建以分配缓冲区，并提供一个临时的上下文缓冲区。</xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> 新<xref:System.Drawing.BufferedGraphicsContext>不同于<xref:System.Drawing.BufferedGraphicsContext>应用程序域和它自动释放时<xref:System.Drawing.BufferedGraphics>返回释放方法分配。</xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext>"
  example:
  - "The following code example demonstrates creating a graphics buffer using the Allocate method. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#3](~/add/codesnippet/csharp/99d851e4-d9e2-4d32-8fa3-_1.cs)]\n [!code-cpp[BufferingExamples#3](~/add/codesnippet/cpp/99d851e4-d9e2-4d32-8fa3-_1.cpp)]\n [!code-vb[BufferingExamples#3](~/add/codesnippet/visualbasic/99d851e4-d9e2-4d32-8fa3-_1.vb)]"
  syntax:
    content: public System.Drawing.BufferedGraphics Allocate (System.Drawing.Graphics targetGraphics, System.Drawing.Rectangle targetRectangle);
    parameters:
    - id: targetGraphics
      type: System.Drawing.Graphics
      description: "<xref href=&quot;System.Drawing.Graphics&quot;> </xref>以匹配的新缓冲区的像素格式。"
    - id: targetRectangle
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref> ，表示要创建的缓冲区大小。"
    return:
      type: System.Drawing.BufferedGraphics
      description: "A <xref href=&quot;System.Drawing.BufferedGraphics&quot;> </xref>可用来绘制到指定的尺寸的缓冲区。"
  overload: System.Drawing.BufferedGraphicsContext.Allocate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)
  id: Allocate(System.IntPtr,System.Drawing.Rectangle)
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Allocate(IntPtr,Rectangle)
  nameWithType: BufferedGraphicsContext.Allocate(IntPtr,Rectangle)
  fullName: System.Drawing.BufferedGraphicsContext.Allocate(IntPtr,Rectangle)
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "创建使用指定的像素格式的指定大小的图形缓冲区<xref href=&quot;System.Drawing.Graphics&quot;> </xref>。"
  remarks: "当调用<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>方法替换其大小超过的值的矩形的<xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A>属性、 一个临时<xref:System.Drawing.BufferedGraphicsContext>创建以分配缓冲区，并提供一个临时的上下文缓冲区。</xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext.MaximumBuffer%2A> </xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> 新<xref:System.Drawing.BufferedGraphicsContext>不同于<xref:System.Drawing.BufferedGraphicsContext>应用程序域和它自动释放时<xref:System.Drawing.BufferedGraphics>返回<xref:System.Drawing.BufferedGraphicsContext.Allocate%2A>释放方法。</xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> </xref:System.Drawing.BufferedGraphics> </xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext>"
  example:
  - "The following code example demonstrates creating a graphics buffer using the <xref:System.Drawing.BufferedGraphicsContext.Allocate%2A> method. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#4](~/add/codesnippet/csharp/5334a85f-cb42-4a29-8bd2-_1.cs)]\n [!code-cpp[BufferingExamples#4](~/add/codesnippet/cpp/5334a85f-cb42-4a29-8bd2-_1.cpp)]\n [!code-vb[BufferingExamples#4](~/add/codesnippet/visualbasic/5334a85f-cb42-4a29-8bd2-_1.vb)]"
  syntax:
    content: public System.Drawing.BufferedGraphics Allocate (IntPtr targetDC, System.Drawing.Rectangle targetRectangle);
    parameters:
    - id: targetDC
      type: System.IntPtr
      description: "<xref:System.IntPtr>到设备上下文，以匹配的新缓冲区的像素格式。</xref:System.IntPtr>"
    - id: targetRectangle
      type: System.Drawing.Rectangle
      description: "A <xref href=&quot;System.Drawing.Rectangle&quot;> </xref> ，表示要创建的缓冲区大小。"
    return:
      type: System.Drawing.BufferedGraphics
      description: "A <xref href=&quot;System.Drawing.BufferedGraphics&quot;> </xref>可用来绘制到指定的尺寸的缓冲区。"
  overload: System.Drawing.BufferedGraphicsContext.Allocate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Dispose
  id: Dispose
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Dispose()
  nameWithType: BufferedGraphicsContext.Dispose()
  fullName: System.Drawing.BufferedGraphicsContext.Dispose()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "释放使用的所有资源<xref href=&quot;System.Drawing.BufferedGraphicsContext&quot;> </xref>。"
  remarks: "在完成使用<xref:System.Drawing.BufferedGraphicsContext>.</xref:System.Drawing.BufferedGraphicsContext>时调用的 Dispose Dispose 方法离开<xref:System.Drawing.BufferedGraphicsContext>中不可用状态。</xref:System.Drawing.BufferedGraphicsContext> 调用 Dispose 后，必须释放对所有引用<xref:System.Drawing.BufferedGraphicsContext>以便垃圾回收器才能回收的内存，<xref:System.Drawing.BufferedGraphicsContext>占用。</xref:System.Drawing.BufferedGraphicsContext> </xref:System.Drawing.BufferedGraphicsContext> 有关详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)和[实现 Dispose 方法](~/add/includes/ajax-current-ext-md.md)。      1> [!NOTE]&1;> 始终调用释放在发布到<xref:System.Drawing.BufferedGraphicsContext>。</xref:System.Drawing.BufferedGraphicsContext>最后一个引用之前 否则，它所使用的资源不会被释放之前垃圾回收器调用<xref:System.Object.Finalize%2A>的<xref:System.Drawing.BufferedGraphicsContext>。</xref:System.Drawing.BufferedGraphicsContext>方法</xref:System.Object.Finalize%2A>"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Drawing.BufferedGraphicsContext.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Finalize
  id: Finalize
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Finalize()
  nameWithType: BufferedGraphicsContext.Finalize()
  fullName: System.Drawing.BufferedGraphicsContext.Finalize()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "允许该对象尝试释放资源并在被垃圾回收回收之前执行其他清理操作。"
  syntax:
    content: ~BufferedGraphicsContext ();
    parameters: []
  overload: System.Drawing.BufferedGraphicsContext.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.Invalidate
  id: Invalidate
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: Invalidate()
  nameWithType: BufferedGraphicsContext.Invalidate()
  fullName: System.Drawing.BufferedGraphicsContext.Invalidate()
  type: Method
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "释放当前图形缓冲区，如果缓冲区已分配和尚未释放。"
  remarks: "只要它是免费的; 如果图形缓冲区正在使用中，它将被标记为可供使用否则，它将处理立即。"
  syntax:
    content: public void Invalidate ();
    parameters: []
  overload: System.Drawing.BufferedGraphicsContext.Invalidate*
  exceptions: []
  platform:
  - net462
- uid: System.Drawing.BufferedGraphicsContext.MaximumBuffer
  id: MaximumBuffer
  parent: System.Drawing.BufferedGraphicsContext
  langs:
  - csharp
  name: MaximumBuffer
  nameWithType: BufferedGraphicsContext.MaximumBuffer
  fullName: System.Drawing.BufferedGraphicsContext.MaximumBuffer
  type: Property
  assemblies:
  - System.Drawing
  namespace: System.Drawing
  summary: "获取或设置要使用的缓冲区的最大大小。"
  remarks: "此属性，可获取或设置应保留在内存中缓冲区的最大尺寸。 你可以分配任何大小的缓冲区，但是任何缓冲的维度大于 MaximumBuffer 大小将暂时使用，使用之后删除时<xref:System.Drawing.BufferedGraphics>释放对象。</xref:System.Drawing.BufferedGraphics>"
  example:
  - "The following example demonstrates setting the maximum size for the buffer for a <xref:System.Drawing.BufferedGraphicsContext>. This code is part of a larger example provided for the <xref:System.Drawing.BufferedGraphics> class.  \n  \n [!code-cs[BufferingExamples#2](~/add/codesnippet/csharp/p-system.drawing.buffere_0_1.cs)]\n [!code-cpp[BufferingExamples#2](~/add/codesnippet/cpp/p-system.drawing.buffere_0_1.cpp)]\n [!code-vb[BufferingExamples#2](~/add/codesnippet/visualbasic/p-system.drawing.buffere_0_1.vb)]"
  syntax:
    content: public System.Drawing.Size MaximumBuffer { get; set; }
    return:
      type: System.Drawing.Size
      description: "A <xref href=&quot;System.Drawing.Size&quot;> </xref> ，该值指示缓冲区维度的最大大小。"
  overload: System.Drawing.BufferedGraphicsContext.MaximumBuffer*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "高度或大小的宽度小于或等于零。"
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Drawing.BufferedGraphicsContext.#ctor
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: BufferedGraphicsContext()
  nameWithType: BufferedGraphicsContext.BufferedGraphicsContext()
  fullName: System.Drawing.BufferedGraphicsContext.BufferedGraphicsContext()
- uid: System.Drawing.BufferedGraphicsContext.Allocate(System.Drawing.Graphics,System.Drawing.Rectangle)
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Allocate(Graphics,Rectangle)
  nameWithType: BufferedGraphicsContext.Allocate(Graphics,Rectangle)
  fullName: System.Drawing.BufferedGraphicsContext.Allocate(Graphics,Rectangle)
- uid: System.Drawing.BufferedGraphics
  parent: System.Drawing
  isExternal: false
  name: BufferedGraphics
  nameWithType: BufferedGraphics
  fullName: System.Drawing.BufferedGraphics
- uid: System.Drawing.Graphics
  parent: System.Drawing
  isExternal: false
  name: Graphics
  nameWithType: Graphics
  fullName: System.Drawing.Graphics
- uid: System.Drawing.Rectangle
  parent: System.Drawing
  isExternal: false
  name: Rectangle
  nameWithType: Rectangle
  fullName: System.Drawing.Rectangle
- uid: System.Drawing.BufferedGraphicsContext.Allocate(System.IntPtr,System.Drawing.Rectangle)
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Allocate(IntPtr,Rectangle)
  nameWithType: BufferedGraphicsContext.Allocate(IntPtr,Rectangle)
  fullName: System.Drawing.BufferedGraphicsContext.Allocate(IntPtr,Rectangle)
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Drawing.BufferedGraphicsContext.Dispose
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Dispose()
  nameWithType: BufferedGraphicsContext.Dispose()
  fullName: System.Drawing.BufferedGraphicsContext.Dispose()
- uid: System.Drawing.BufferedGraphicsContext.Finalize
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Finalize()
  nameWithType: BufferedGraphicsContext.Finalize()
  fullName: System.Drawing.BufferedGraphicsContext.Finalize()
- uid: System.Drawing.BufferedGraphicsContext.Invalidate
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Invalidate()
  nameWithType: BufferedGraphicsContext.Invalidate()
  fullName: System.Drawing.BufferedGraphicsContext.Invalidate()
- uid: System.Drawing.BufferedGraphicsContext.MaximumBuffer
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: MaximumBuffer
  nameWithType: BufferedGraphicsContext.MaximumBuffer
  fullName: System.Drawing.BufferedGraphicsContext.MaximumBuffer
- uid: System.Drawing.Size
  parent: System.Drawing
  isExternal: false
  name: Size
  nameWithType: Size
  fullName: System.Drawing.Size
- uid: System.Drawing.BufferedGraphicsContext.#ctor*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: BufferedGraphicsContext
  nameWithType: BufferedGraphicsContext.BufferedGraphicsContext
- uid: System.Drawing.BufferedGraphicsContext.Allocate*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Allocate
  nameWithType: BufferedGraphicsContext.Allocate
- uid: System.Drawing.BufferedGraphicsContext.Dispose*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Dispose
  nameWithType: BufferedGraphicsContext.Dispose
- uid: System.Drawing.BufferedGraphicsContext.Finalize*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Finalize
  nameWithType: BufferedGraphicsContext.Finalize
- uid: System.Drawing.BufferedGraphicsContext.Invalidate*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: Invalidate
  nameWithType: BufferedGraphicsContext.Invalidate
- uid: System.Drawing.BufferedGraphicsContext.MaximumBuffer*
  parent: System.Drawing.BufferedGraphicsContext
  isExternal: false
  name: MaximumBuffer
  nameWithType: BufferedGraphicsContext.MaximumBuffer
