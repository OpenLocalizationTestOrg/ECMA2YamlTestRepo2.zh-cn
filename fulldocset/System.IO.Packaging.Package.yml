### YamlMime:ManagedReference
items:
- uid: System.IO.Packaging.Package
  id: Package
  children:
  - System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  - System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  - System.IO.Packaging.Package.Close
  - System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  - System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  - System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  - System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  - System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  - System.IO.Packaging.Package.DeletePart(System.Uri)
  - System.IO.Packaging.Package.DeletePartCore(System.Uri)
  - System.IO.Packaging.Package.DeleteRelationship(System.String)
  - System.IO.Packaging.Package.Dispose(System.Boolean)
  - System.IO.Packaging.Package.FileOpenAccess
  - System.IO.Packaging.Package.Flush
  - System.IO.Packaging.Package.FlushCore
  - System.IO.Packaging.Package.GetPart(System.Uri)
  - System.IO.Packaging.Package.GetPartCore(System.Uri)
  - System.IO.Packaging.Package.GetParts
  - System.IO.Packaging.Package.GetPartsCore
  - System.IO.Packaging.Package.GetRelationship(System.String)
  - System.IO.Packaging.Package.GetRelationships
  - System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  - System.IO.Packaging.Package.Open(System.IO.Stream)
  - System.IO.Packaging.Package.Open(System.String)
  - System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  - System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  - System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  - System.IO.Packaging.Package.PackageProperties
  - System.IO.Packaging.Package.PartExists(System.Uri)
  - System.IO.Packaging.Package.RelationshipExists(System.String)
  - System.IO.Packaging.Package.System#IDisposable#Dispose
  langs:
  - csharp
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
  type: Class
  summary: "表示可以存储多个数据对象的容器。"
  remarks: "包是一个抽象类，可用于将对象组织成单个实体的可移植性和高效地访问定义的物理格式。       ZIP 文件是包的主物理格式。  其他包实现可能使用其他物理格式，如 XML 文档、 数据库或 Web 服务。       类似的文件系统中的文件夹和文件的分层组织将引用包中包含的项。       尽管包本身是一个抽象类，<xref:System.IO.Packaging.ZipPackage>派生的类用作默认<xref:System.IO.Packaging.Package.Open%2A>方法。</xref:System.IO.Packaging.Package.Open%2A> </xref:System.IO.Packaging.ZipPackage>       A <xref:System.IO.Packaging.PackagePart>（&quot;部件&quot;） 是抽象类，表示存储在包中的对象。</xref:System.IO.Packaging.PackagePart>       A <xref:System.IO.Packaging.PackageRelationship>（&quot;关系&quot;） 定义的源包之间的关联或<xref:System.IO.Packaging.PackagePart>和目标对象。</xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.PackageRelationship>  A<xref:System.IO.Packaging.PackageRelationship>可以是两个类型之一，其中每个可以是两种形式之一:-包级别关系 (由<xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=fullName>方法) 为相关包:-目标包中的一部分。</xref:System.IO.Packaging.Package.CreateRelationship%2A?displayProperty=fullName> </xref:System.IO.Packaging.PackageRelationship>          的包外部目标资源。      -A 一部分级别的关系 (由<xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=fullName>方法) 相关源<xref:System.IO.Packaging.PackagePart>为:-另一个目标包中的一部分。</xref:System.IO.Packaging.PackagePart> </xref:System.IO.Packaging.PackagePart.CreateRelationship%2A?displayProperty=fullName>          的包外部目标资源。       关系的源包或源<xref:System.IO.Packaging.PackagePart>被视为关系的&quot;所有者&quot;。</xref:System.IO.Packaging.PackagePart>  当删除源对象时，还删除源对象拥有的所有关系。  创建或删除的关系的过程不会以物理方式更改以任何方式的源或目标对象。       A <xref:System.IO.Packaging.PackageDigitalSignature>（&quot;数字签名&quot;） 是复合，这些部件和关系表示包含包的数字签名。</xref:System.IO.Packaging.PackageDigitalSignature>  数字签名标识发起方，并验证已签名的部件和包中包含的关系具有尚未修改。       包还支持数字权限管理 (DRM)，以便使内容元素中的包进行加密的特定访问权限授予给授权用户。       根据包的体系结构，<xref:System.Windows.Xps.Packaging.XpsDocument>是一种包类型设计用来存储基于打开的文档[XML 纸张规范 (XPS)](http://go.microsoft.com/fwlink/?LinkID=65761)。</xref:System.Windows.Xps.Packaging.XpsDocument>       [!INCLUDE[TLA#tla_avalonwinfx](~/add/includes/tlasharptla-avalonwinfx-md.md)]使用包来存储内容、 资源和关系的页和默认情况下使用标准的 ZIP 文件的文档。 与任何 ZIP 文件一样，你的应用程序可以使用<xref:System.IO.Packaging>类来存储和 （可选） 保护的任何类型或单个高效访问容器中的数据文件数。</xref:System.IO.Packaging>       有关详细信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows the basic steps for creating a Package.  In this example, a package is created to contain a document together with a graphic image that is displayed as part of the document.  (This is similar to the case in which an HTML file has an \\<IMG> tag that references an external image file.)  Two <xref:System.IO.Packaging.PackageRelationship> elements are also included in the package.  The first, a \"package-level\" relationship, defines the document part as the package's root element.  A second, \"part-level\" relationship defines the association between the document part (the \"source\" of the part-level relationship) and its use of the image part (the \"target\" of the part-level relationship).  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: 'public abstract class Package : IDisposable'
  inheritance:
  - System.Object
  implements:
  - System.IDisposable
  inheritedMembers: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  id: '#ctor(System.IO.FileAccess)'
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Package(FileAccess)
  nameWithType: Package.Package(FileAccess)
  fullName: System.IO.Packaging.Package.Package(FileAccess)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "初始化的新实例<xref href=&quot;System.IO.Packaging.Package&quot;></xref>类，该类使用给定<xref href=&quot;System.IO.FileAccess&quot;> </xref>。"
  remarks: "包是受保护构造函数的<xref:System.IO.Packaging.Package>抽象基的类。</xref:System.IO.Packaging.Package> 派生类中调用时，包构造函数初始化派生类的新实例。"
  syntax:
    content: protected Package (System.IO.FileAccess openFileAccess);
    parameters:
    - id: openFileAccess
      type: System.IO.FileAccess
      description: "包文件 IO 权限。"
  overload: System.IO.Packaging.Package.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> openFileAccess </code>无效。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  id: '#ctor(System.IO.FileAccess,System.Boolean)'
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Package(FileAccess,Boolean)
  nameWithType: Package.Package(FileAccess,Boolean)
  fullName: System.IO.Packaging.Package.Package(FileAccess,Boolean)
  type: Constructor
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "初始化的新实例<xref href=&quot;System.IO.Packaging.Package&quot;></xref>类，该类使用给定<xref href=&quot;System.IO.FileAccess&quot;></xref>和流式处理选项。"
  remarks: "包是受保护构造函数的<xref:System.IO.Packaging.Package>抽象基类的抽象基类</xref:System.IO.Packaging.Package> 派生类中调用时，包构造函数初始化派生类的新实例。"
  syntax:
    content: protected Package (System.IO.FileAccess openFileAccess, bool streaming);
    parameters:
    - id: openFileAccess
      type: System.IO.FileAccess
      description: "包文件 IO 权限。"
    - id: streaming
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要打开的流式处理; 包否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.Package.#ctor*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> openFileAccess </code>无效。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Close
  id: Close
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Close()
  nameWithType: Package.Close()
  fullName: System.IO.Packaging.Package.Close()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "保存并关闭包加上所有基础的一部分流。"
  remarks: "有关<xref:System.IO.Packaging.Package>类关闭和<xref:System.IO.Packaging.Package.Dispose%2A>执行相同的操作-没有理由调用<xref:System.IO.Packaging.Package.Dispose%2A>如果调用关闭，或者反之亦然。</xref:System.IO.Packaging.Package.Dispose%2A> </xref:System.IO.Packaging.Package.Dispose%2A> </xref:System.IO.Packaging.Package>       关闭和<xref:System.IO.Packaging.Package.Dispose%2A>内部调用<xref:System.IO.Packaging.Package.Flush%2A>.</xref:System.IO.Packaging.Package.Flush%2A> </xref:System.IO.Packaging.Package.Dispose%2A>      1> [!NOTE]&1;>`using`语句 (不同于`using`命名空间指令) 关闭的建议的方法是和<xref:System.IO.Packaging.Package.Dispose%2A>包。</xref:System.IO.Packaging.Package.Dispose%2A>  [写入包的示例](http://go.microsoft.com/fwlink/?LinkID=160055)和[读取包的示例](http://go.microsoft.com/fwlink/?LinkID=160034)演示如何关闭和释放使用的包`using`语句。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.IO.Packaging.Package.Close*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  id: CreatePart(System.Uri,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePart(Uri,String)
  nameWithType: Package.CreatePart(Uri,String)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用给定的 URI 和内容类型创建新的未压缩的部件。"
  remarks: "CreatePart 初始化空<xref:System.IO.Stream>的新的部件</xref:System.IO.Stream>  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>方法可以用于获取对与部件关联的流实例的引用</xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>       <xref:System.IO.Packaging.PackagePart.CompressionOption%2A>为<xref:System.IO.Packaging.CompressionOption?displayProperty=fullName>。</xref:System.IO.Packaging.CompressionOption?displayProperty=fullName></xref:System.IO.Packaging.PackagePart.CompressionOption%2A>部分       有关包部件的其他信息，请参阅部分 1.1 中可供下载的开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.PackagePart> and then store data into the part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepart)]\n [!code-cs[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepart)]"
  syntax:
    content: public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]的新部件。"
    - id: contentType
      type: System.String
      description: "数据流的内容类型。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "新创建的部件。"
  overload: System.IO.Packaging.Package.CreatePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>or <code>contentType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "具有指定的部件<code> partUri </code>包中已存在。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只读的 （不能添加新的一部分）。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  id: CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePart(Uri,String,CompressionOption)
  nameWithType: Package.CreatePart(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String,CompressionOption)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用给定的 URI、 内容类型和压缩选项创建新的部件。"
  remarks: "默认值为<xref:System.IO.Packaging.ZipPackage>派生类，CreatePart 方法仅支持两个`compressionOption`值，<xref:System.IO.Packaging.CompressionOption>或<xref:System.IO.Packaging.CompressionOption>压缩。</xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.ZipPackage>  其他<xref:System.IO.Packaging.CompressionOption>值<xref:System.IO.Packaging.CompressionOption>， <xref:System.IO.Packaging.CompressionOption>，或<xref:System.IO.Packaging.CompressionOption>使用<xref:System.IO.Packaging.CompressionOption>压缩。</xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption>       CreatePart 空创建<xref:System.IO.Stream>为新的部件</xref:System.IO.Stream>  <xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>方法可以用于获取对与部件关联的流实例的引用</xref:System.IO.Packaging.PackagePart.GetStream%2A?displayProperty=fullName>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.PackagePart> and then store data into the part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepart)]\n [!code-cs[PackageWrite#PackageWriteCreatePart](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepart)]"
  syntax:
    content: public System.IO.Packaging.PackagePart CreatePart (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]的新部件。"
    - id: contentType
      type: System.String
      description: "数据流的内容类型。"
    - id: compressionOption
      type: System.IO.Packaging.CompressionOption
      description: "对于数据流，压缩选项<xref href=&quot;System.IO.Packaging.CompressionOption&quot;></xref>或<xref href=&quot;System.IO.Packaging.CompressionOption&quot;></xref>压缩。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "新创建的部件。"
  overload: System.IO.Packaging.Package.CreatePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>or <code>contentType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "具有指定的部件<code> partUri </code>包中已存在。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code> compressionOption </code>值无效。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只读的 （不能添加新的一部分）。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  id: CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreatePartCore(Uri,String,CompressionOption)
  nameWithType: Package.CreatePartCore(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePartCore(Uri,String,CompressionOption)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "当在派生类中重写，在包中创建新的部件。"
  remarks: "<xref:System.IO.Packaging.Package.CreatePart%2A>在派生类中实现方法若要创建的物理格式部件</xref:System.IO.Packaging.Package.CreatePart%2A>调用派生的 CreatePartCore 方法       默认情况下，<xref:System.IO.Packaging.ZipPackage>派生的抽象类实现<xref:System.IO.Packaging.Package>提供和使用类。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在默认操作中，<xref:System.IO.Packaging.Package.CreatePart%2A>内部调用的 CreatePartCore<xref:System.IO.Packaging.ZipPackage>类以 ZIP 文件中创建新的部件。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.CreatePart%2A>       默认值为<xref:System.IO.Packaging.ZipPackage>派生类，CreatePartCore 方法仅支持两个`compressionOption`值，<xref:System.IO.Packaging.CompressionOption>或<xref:System.IO.Packaging.CompressionOption>压缩。</xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.ZipPackage>  其他<xref:System.IO.Packaging.CompressionOption>值<xref:System.IO.Packaging.CompressionOption>， <xref:System.IO.Packaging.CompressionOption>，或<xref:System.IO.Packaging.CompressionOption>使用<xref:System.IO.Packaging.CompressionOption>压缩。</xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption> </xref:System.IO.Packaging.CompressionOption>       有关包模型和包部件的详细信息，请参阅下载的开放式打包约定 (OPC) 规范的第 1 章[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart CreatePartCore (Uri partUri, string contentType, System.IO.Packaging.CompressionOption compressionOption);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]正在创建的部分。"
    - id: contentType
      type: System.String
      description: "数据流的内容类型。"
    - id: compressionOption
      type: System.IO.Packaging.CompressionOption
      description: "数据的流的压缩选项。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "所创建的部件。"
  overload: System.IO.Packaging.Package.CreatePartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  id: CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreateRelationship(Uri,TargetMode,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用给定的 URI、 目标模式和关系类型创建包级别关系到这一部分。"
  remarks: "包级别关系定义包和相关联的目标一部分或资源之间的关联。  包级别关系可以是两种形式之一。      -之间<xref:System.IO.Packaging.Package>到包中的目标部件。</xref:System.IO.Packaging.Package>      -之间<xref:System.IO.Packaging.Package>到包外部的目标资源。</xref:System.IO.Packaging.Package>       在包关系包被视为关系&quot;所有者&quot;。  当删除包时，还删除归包的所有关系。       CreateRelationship 不会以物理方式更改目标部分或以任何方式的资源。       关系的目标不能为另一个关系。       如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode>，`targetUri`必须根据格式是相对 URI [RFC 3986](http://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 构成格式规范。</xref:System.IO.Packaging.TargetMode>  内部的相对 URI 可以是可以是绝对路径开头正斜杠 （&quot;/&quot;） 字符如&quot;/ page1.xaml&quot;或&quot;/ images/picture4.jpg&quot;，或相对路径，如&quot;.../ imagespicture1.jpg&quot;可解析根据包根目录 （&quot;/&quot;） 的基 uri。       如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode>，`targetUri`可以是绝对或相对的 URI 格式根据[RFC 3986](http://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 构成格式规范。</xref:System.IO.Packaging.TargetMode>  &quot;http://www.microsoft.com/page2.xml&quot;是一个绝对 URI，它引用的外部的目标资源&quot;page2.xml&quot;的一个示例。  &quot;images/picture1.jpg&quot;是一个相对的 URI，也引用外部的目标资源&quot;1.jpg&quot;但哪些解析对包本身的 URI 的示例。       `relationshipType`必须是[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]，形成根据[RFC 3986](http://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 构成格式规范。  下表显示包级别`relationshipType`开放式打包约定 (OPC) 规范所定义的 Uri。      |包级别关系 |关系类型 URI |  |---------------------------------|---------------------------|  |核心属性 | http://schemas.openxmlformats.org/package/2006/relationships/meta 数据/核心-属性 |  |数字签名 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-签名/签名 |  |数字签名证书 | http://schemas.openxmlformats.org/package/2006/relationships/digit/证书签名 al |  |数字签名源 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 签名/同源 |  | 缩略图 | http://schemas.openxmlformats.org/package/2006/relationships/meta 数据/缩略图 |      有关打包和包关系的详细信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范在[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example illustrates how to use CreateRelationship to create a <xref:System.IO.Packaging.PackageRelationship> between a <xref:System.IO.Packaging.Package> and a root document part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackagerelationship)]\n [!code-cs[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackagerelationship)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType);
    parameters:
    - id: targetUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]目标部分。"
    - id: targetMode
      type: System.IO.Packaging.TargetMode
      description: "指示是否目标部分是<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>或<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>到包。"
    - id: relationshipType
      type: System.String
      description: "一个 URI，用来唯一定义关系的角色。"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "与指定的一部分的包级别关系。"
  overload: System.IO.Packaging.Package.CreateRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetUri</code>or <code>relationshipType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>targetUri</code> part is a <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>, or <code>targetMode</code> is <xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref> and <code>targetUri</code> is an absolute URI."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> targetMode </code>无效。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只读的。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  id: CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: CreateRelationship(Uri,TargetMode,String,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String,String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用给定的 URI，目标模式、 关系类型创建到这一部分的包级别关系和[!INCLUDE[TLA#tla_id](~/add/includes/tlasharptla-id-md.md)]。"
  remarks: "包级别关系定义包和相关联的目标一部分或资源之间的关联。  包级别关系可以是两种形式之一。      -之间<xref:System.IO.Packaging.Package>到包中的目标部件。</xref:System.IO.Packaging.Package>      -之间<xref:System.IO.Packaging.Package>到包外部的目标资源。</xref:System.IO.Packaging.Package>       在包关系包被视为关系&quot;所有者&quot;。  当删除包时，还删除归包的所有关系。       CreateRelationship 不会以物理方式更改目标部分或以任何方式的资源。       关系的目标不能为另一个关系。       `id`必须是有效的 XML 标识符。  `id`类型是 xsd:ID 并且必须遵循的命名约定规定在 XML 架构第 2 部分︰ 数据类型规范 (请参阅[http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/))。       如果`id`指定为`null`将自动生成唯一 ID。  `id`指定一个空字符串无效。       如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode>，`targetUri`必须根据格式是相对 URI [RFC 3986](http://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 构成格式规范。</xref:System.IO.Packaging.TargetMode>  内部的相对 URI 可以是可以是绝对路径开头正斜杠 （&quot;/&quot;） 字符如&quot;/ page1.xaml&quot;或&quot;/ images/picture4.jpg&quot;，或相对路径，如&quot;.../ imagespicture1.jpg&quot;可解析根据包根目录 （&quot;/&quot;） 的基 uri。       如果`targetMode`指定为<xref:System.IO.Packaging.TargetMode>，`targetUri`可以是绝对或相对的 URI 格式根据[RFC 3986](http://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 构成格式规范。</xref:System.IO.Packaging.TargetMode>  &quot;http://www.microsoft.com/page2.xml&quot;是一个绝对 URI，它引用的外部的目标资源&quot;page2.xml&quot;的一个示例。  &quot;images/picture1.jpg&quot;是一个相对的 URI，也引用外部的目标资源&quot;1.jpg&quot;但哪些解析对包本身的 URI 的示例。       `relationshipType`必须根据格式是 URI [RFC 3986](http://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 构成格式规范。  下表显示包级别`relationshipType`开放式打包约定 (OPC) 规范所定义的 Uri。      |包级别关系 |关系类型 URI |  |---------------------------------|---------------------------|  |核心属性 | http://schemas.openxmlformats.org/package/2006/relationships/meta 数据/核心-属性 |  |数字签名 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-签名/签名 |  |数字签名证书 | http://schemas.openxmlformats.org/package/2006/relationships/digit/证书签名 al |  |数字签名源 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 签名/同源 |  | 缩略图 | http://schemas.openxmlformats.org/package/2006/relationships/meta 数据/缩略图 |      有关打包和包关系的其他信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example illustrates how to use <xref:System.IO.Packaging.Package.CreateRelationship%2A> to create a <xref:System.IO.Packaging.PackageRelationship> between a <xref:System.IO.Packaging.Package> and a root document part.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackagerelationship)]\n [!code-cs[packagewrite#PackageWriteCreatePackageRelationship](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackagerelationship)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationship CreateRelationship (Uri targetUri, System.IO.Packaging.TargetMode targetMode, string relationshipType, string id);
    parameters:
    - id: targetUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]目标部分。"
    - id: targetMode
      type: System.IO.Packaging.TargetMode
      description: "指示是否目标部分是<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>或<xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref>到包。"
    - id: relationshipType
      type: System.String
      description: "一个 URI，用来唯一定义关系的角色。"
    - id: id
      type: System.String
      description: "唯一的 XML 标识符。"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "与指定的一部分的包级别关系。"
  overload: System.IO.Packaging.Package.CreateRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>targetUri</code>or <code>relationshipType</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "The <code>targetUri</code> part is a <xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>, or <code>targetMode</code> is <xref href=&quot;System.IO.Packaging.TargetMode&quot;></xref> and <code>targetUri</code> is an absolute URI."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值<code> targetMode </code>无效。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只读的。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>不是有效的 XML 标识符;或具有指定的部件<code>id</code>包中已存在。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeletePart(System.Uri)
  id: DeletePart(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeletePart(Uri)
  nameWithType: Package.DeletePart(Uri)
  fullName: System.IO.Packaging.Package.DeletePart(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "从包中删除具有给定的 URI 的部件。"
  remarks: "`partUri`必须是相对的 URI 的绝对路径，以正斜杠 （&quot;/&quot;） 启动字符组成。  绝对路径是相对于包根，并且根据正确[RFC 3986](http://tools.ietf.org/html/rfc3986)统一资源标识符 (URI) 构成格式规范。  &quot;/ page1.xaml&quot;和&quot;/ images/picture4.jpg&quot;是有效的部件 Uri 的示例。       如果具有指定的部件，会引发任何异常`partUri`包中没有。  (你可以使用<xref:System.IO.Packaging.Package.PartExists%2A>方法来确定是否具有指定的部件`partUri`包中。)</xref:System.IO.Packaging.Package.PartExists%2A>     有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public void DeletePart (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]要删除的部件。"
  overload: System.IO.Packaging.Package.DeletePart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA2#tla_uri](~/add/includes/tla2sharptla-uri-md.md)]."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只读的。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeletePartCore(System.Uri)
  id: DeletePartCore(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeletePartCore(Uri)
  nameWithType: Package.DeletePartCore(Uri)
  fullName: System.IO.Packaging.Package.DeletePartCore(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "当在派生类中重写，将删除具有给定的 URI 的部件。"
  remarks: "默认情况下，<xref:System.IO.Packaging.ZipPackage>派生的抽象类实现<xref:System.IO.Packaging.Package>提供和使用类。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在默认操作中，<xref:System.IO.Packaging.Package.DeletePart%2A>内部调用的<xref:System.IO.Packaging.ZipPackage>类来执行实际的删除操作的物理格式在派生类中实现</xref:System.IO.Packaging.ZipPackage>的 DeletePartCore</xref:System.IO.Packaging.Package.DeletePart%2A>       有关包模型和包部件的详细信息，请参阅下载的开放式打包约定 (OPC) 规范的第 1 章[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: protected abstract void DeletePartCore (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "<xref:System.IO.Packaging.PackagePart.Uri*>的<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>删除。</xref:System.IO.Packaging.PackagePart.Uri*>"
  overload: System.IO.Packaging.Package.DeletePartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.DeleteRelationship(System.String)
  id: DeleteRelationship(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: DeleteRelationship(String)
  nameWithType: Package.DeleteRelationship(String)
  fullName: System.IO.Packaging.Package.DeleteRelationship(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "删除包级别关系。"
  remarks: "包级别关系定义包和相关联的目标一部分或资源之间的关联。  包级别关系可以是两种形式之一。      -之间<xref:System.IO.Packaging.Package>到包中的目标部件。</xref:System.IO.Packaging.Package>      -之间<xref:System.IO.Packaging.Package>到包外部的目标资源。</xref:System.IO.Packaging.Package>       在包关系包被视为关系&quot;所有者&quot;。  当删除包时，还删除归包的所有关系。       如果与指定的关系，则会引发任何异常`id`包中没有。       DeleteRelationship 不会以物理方式更改以任何方式的目标部分。       有关包关系的详细信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public void DeleteRelationship (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>的<xref href=&quot;System.IO.Packaging.PackageRelationship&quot;></xref>删除。</xref:System.IO.Packaging.PackageRelationship.Id*>"
  overload: System.IO.Packaging.Package.DeleteRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只读的。"
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>不是有效的 XML 标识符。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: Package.Dispose(Boolean)
  fullName: System.IO.Packaging.Package.Dispose(Boolean)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "刷新并将所有部件和关系的内容保存、 关闭包，并释放所有资源。"
  remarks: "若要确保所有更改都正确都保存，释放还完成，将刷新，并关闭所有部件和包中包含的关系。       有关<xref:System.IO.Packaging.Package>类，释放和<xref:System.IO.Packaging.Package.Close%2A>执行相同的操作-无需调用 Dispose，如果调用<xref:System.IO.Packaging.Package.Close%2A>，反之亦然。</xref:System.IO.Packaging.Package.Close%2A> </xref:System.IO.Packaging.Package.Close%2A> </xref:System.IO.Packaging.Package>       <xref:System.IO.Packaging.Package.Close%2A>并释放内部调用<xref:System.IO.Packaging.Package.Flush%2A>.</xref:System.IO.Packaging.Package.Flush%2A></xref:System.IO.Packaging.Package.Close%2A>       分配和管理非内存资源的派生的类应重写此方法来调用 Dispose 时释放资源。 此外应调用派生类重写<xref:System.IO.Packaging.Package.Flush%2A>和基类的 Dispose 方法，以确保始终执行基类清除。</xref:System.IO.Packaging.Package.Flush%2A>      1> [!NOTE]&1;>`using`语句 (不同于`using`命名空间指令) 的建议的方法是<xref:System.IO.Packaging.Package.Close%2A>和释放包。</xref:System.IO.Packaging.Package.Close%2A> [写入包的示例](http://go.microsoft.com/fwlink/?LinkID=160055)演示如何关闭并释放使用的包`using`语句。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.IO.Packaging.Package.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.FileOpenAccess
  id: FileOpenAccess
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
  fullName: System.IO.Packaging.Package.FileOpenAccess
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "获取为包设置的文件访问权限。"
  remarks: "FileOpenAccess 属性具有没有默认值。  中指定文件访问设置<xref:System.IO.Packaging.Package.%23ctor%2A>构造函数调用时创建新包，或在<xref:System.IO.Packaging.Package.Open%2A>调用时打开现有的包。</xref:System.IO.Packaging.Package.Open%2A> </xref:System.IO.Packaging.Package.%23ctor%2A>"
  syntax:
    content: public System.IO.FileAccess FileOpenAccess { get; }
    return:
      type: System.IO.FileAccess
      description: 'One of the <xref href=&quot;System.IO.FileAccess&quot;></xref> values: <xref href=&quot;System.IO.FileAccess&quot;></xref>, <xref href=&quot;System.IO.FileAccess&quot;></xref>, or <xref href=&quot;System.IO.FileAccess&quot;></xref>.'
  overload: System.IO.Packaging.Package.FileOpenAccess*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Flush
  id: Flush
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Flush()
  nameWithType: Package.Flush()
  fullName: System.IO.Packaging.Package.Flush()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "包中保存所有部件和关系包含的内容。"
  remarks: "刷新内部调用派生的类的<xref:System.IO.Packaging.Package.FlushCore%2A>实现来执行实际的特定格式的刷新操作。</xref:System.IO.Packaging.Package.FlushCore%2A>  派生的类的<xref:System.IO.Packaging.Package.FlushCore%2A>方法负责实际将部件和关系内容保存到特定物理派生的类实现。</xref:System.IO.Packaging.Package.FlushCore%2A>       默认情况下，<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供基本类并将其用于。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage> 在默认操作中，刷新内部调用<xref:System.IO.Packaging.Package.FlushCore%2A>ZIP 文件包中保存的部件和关系。</xref:System.IO.Packaging.Package.FlushCore%2A>       自动调用刷新<xref:System.IO.Packaging.Package.Close%2A>和<xref:System.IO.Packaging.Package.Dispose%2A>方法。</xref:System.IO.Packaging.Package.Dispose%2A> </xref:System.IO.Packaging.Package.Close%2A>  当<xref:System.IO.Packaging.Package.Close%2A>或<xref:System.IO.Packaging.Package.Dispose%2A>称为无需单独调用刷新。</xref:System.IO.Packaging.Package.Dispose%2A> </xref:System.IO.Packaging.Package.Close%2A>"
  syntax:
    content: public void Flush ();
    parameters: []
  overload: System.IO.Packaging.Package.Flush*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只读的并且不能修改。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.FlushCore
  id: FlushCore
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: FlushCore()
  nameWithType: Package.FlushCore()
  fullName: System.IO.Packaging.Package.FlushCore()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "当在派生类中重写，将所有部件和关系的内容保存到派生的类存储区。"
  remarks: "FlushCore 调用的<xref:System.IO.Packaging.Package.Flush%2A>方法来执行实际的刷新操作在派生类中实现的物理格式</xref:System.IO.Packaging.Package.Flush%2A>"
  syntax:
    content: protected abstract void FlushCore ();
    parameters: []
  overload: System.IO.Packaging.Package.FlushCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPart(System.Uri)
  id: GetPart(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPart(Uri)
  nameWithType: Package.GetPart(Uri)
  fullName: System.IO.Packaging.Package.GetPart(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "返回与给定的 URI 部分。"
  remarks: "<xref:System.InvalidOperationException>如果具有指定的部件，则引发`partUri`不存在。</xref:System.InvalidOperationException>       <xref:System.IO.Packaging.Package.PartExists%2A>方法可以用于确定是否`partUri`引用现有部件</xref:System.IO.Packaging.Package.PartExists%2A>       默认情况下，<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供基本类并将其用于。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  默认操作中，在内部调用 GetPart<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>类从 ZIP 文件返回请求的一部分。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.GetPartCore%2A>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to locate, retrieve, and read parts that are contained in a package.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public System.IO.Packaging.PackagePart GetPart (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]要返回的部件。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "使用指定的部分<code> partUri </code>。"
  overload: System.IO.Packaging.Package.GetPart*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "具有指定的部件<code> partUri </code>包中没有。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只写。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPartCore(System.Uri)
  id: GetPartCore(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPartCore(Uri)
  nameWithType: Package.GetPartCore(Uri)
  fullName: System.IO.Packaging.Package.GetPartCore(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "当在派生类中重写，返回由给定的 URI 的部分。"
  remarks: "默认情况下，<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供和使用类。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在默认操作中，<xref:System.IO.Packaging.Package.GetPart%2A>内部调用的 GetPartCore<xref:System.IO.Packaging.ZipPackage>类检索从 ZIP 文件的一部分。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.GetPart%2A>       有关包模型和包部件的详细信息，请参阅下载的开放式打包约定 (OPC) 规范的第 1 章[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart GetPartCore (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "[!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]要检索的部件。"
    return:
      type: System.IO.Packaging.PackagePart
      description: "请求的一部分;或<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>，如果具有指定的部件<code> partUri </code>包中没有。"
  overload: System.IO.Packaging.Package.GetPartCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetParts
  id: GetParts
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetParts()
  nameWithType: Package.GetParts()
  fullName: System.IO.Packaging.Package.GetParts()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "返回包中的所有部分的集合。"
  remarks: "GetParts 返回一个包含的所有部件的集合中包包括<xref:System.IO.Packaging.PackageRelationship>部件。</xref:System.IO.Packaging.PackageRelationship>       将永远不会返回 GetParts `null`; 但是，如果包中不包含任何部分，则返回的集合将包含零个元素。       默认情况下，<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供基本类并将其用于。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  默认操作中，在调用 GetParts<xref:System.IO.Packaging.Package.GetPartsCore%2A>方法<xref:System.IO.Packaging.ZipPackage>类以返回从 ZIP 文件的部分。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.GetPartsCore%2A>       有关包和包部件的详细信息，请参阅部分 1.1 可供下载的开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to use the GetParts method to obtain a collection of the parts that are contained in a <xref:System.IO.Packaging.Package>.  For the complete program source code, see [Creating a Package with a Digital Signature Sample](http://go.microsoft.com/fwlink/?LinkID=159966).  \n  \n [!code-cs[XpsCreate#XpsCreateAddPkgContent](~/add/codesnippet/csharp/XpsCreate/XpsCreate.cs#xpscreateaddpkgcontent)]"
  syntax:
    content: public System.IO.Packaging.PackagePartCollection GetParts ();
    parameters: []
    return:
      type: System.IO.Packaging.PackagePartCollection
      description: "所有的集合<xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref>包中包含的元素。"
  overload: System.IO.Packaging.Package.GetParts*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只写。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetPartsCore
  id: GetPartsCore
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetPartsCore()
  nameWithType: Package.GetPartsCore()
  fullName: System.IO.Packaging.Package.GetPartsCore()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "当在派生类中重写，请在包中返回所有部分的数组。"
  remarks: "<xref:System.IO.Packaging.Package.GetParts%2A>在派生类中实现方法以访问并返回部件的物理格式的数组</xref:System.IO.Packaging.Package.GetParts%2A>调用派生的类 GetPartsCore 实现       默认情况下，<xref:System.IO.Packaging.ZipPackage>派生的抽象实现<xref:System.IO.Packaging.Package>提供和使用类。</xref:System.IO.Packaging.Package> </xref:System.IO.Packaging.ZipPackage>  在默认操作中，<xref:System.IO.Packaging.Package.GetParts%2A>内部调用<xref:System.IO.Packaging.Package.GetPartCore%2A>的<xref:System.IO.Packaging.ZipPackage>类从 ZIP 文件中检索部分。</xref:System.IO.Packaging.ZipPackage> </xref:System.IO.Packaging.Package.GetPartCore%2A> </xref:System.IO.Packaging.Package.GetParts%2A>       有关包模型和包部件的详细信息，请参阅下载的开放式打包约定 (OPC) 规范的第 1 章[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: protected abstract System.IO.Packaging.PackagePart[] GetPartsCore ();
    parameters: []
    return:
      type: System.IO.Packaging.PackagePart[]
      description: "包中包含的所有部分的数组。"
  overload: System.IO.Packaging.Package.GetPartsCore*
  exceptions: []
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationship(System.String)
  id: GetRelationship(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationship(String)
  nameWithType: Package.GetRelationship(String)
  fullName: System.IO.Packaging.Package.GetRelationship(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "返回与给定的标识符的包级别关系。"
  remarks: "`id`必须是有效的 XML 标识符。  `id`类型是 xsd:ID 并且必须遵循的命名约定规定在 XML 架构第 2 部分︰ 数据类型规范 (请参阅[http://www.w3.org/TR/xmlschema-2/#ID](http://www.w3.org/TR/xmlschema-2/#ID))。       有关打包和包关系的其他信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public System.IO.Packaging.PackageRelationship GetRelationship (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>要返回的关系。</xref:System.IO.Packaging.PackageRelationship.Id*>"
    return:
      type: System.IO.Packaging.PackageRelationship
      description: "使用指定的包级别关系<code> id </code>。"
  overload: System.IO.Packaging.Package.GetRelationship*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>不是有效的 XML 标识符。"
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "使用指定的关系<code> id </code>包中没有。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只写。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationships
  id: GetRelationships
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationships()
  nameWithType: Package.GetRelationships()
  fullName: System.IO.Packaging.Package.GetRelationships()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "返回所有包级别关系的集合。"
  remarks: "将永远不会返回 GetRelationships `null`; 但是，如果包中不包含任何包级别关系，则返回的集合可能包含零个元素。       包级别关系定义包和相关联的目标一部分或资源之间的关联。  包级别关系可以是两种形式之一。      -之间<xref:System.IO.Packaging.Package>到包中的目标部件。</xref:System.IO.Packaging.Package>      -之间<xref:System.IO.Packaging.Package>到包外部的目标资源。</xref:System.IO.Packaging.Package>       在包关系包被视为关系&quot;所有者&quot;。  当删除包时，还删除归包的所有关系。  创建或删除的关系的过程不会以物理方式更改目标部分或以任何方式的资源。       有关打包和包关系的其他信息，请参阅部分 1.3 可供下载的开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public System.IO.Packaging.PackageRelationshipCollection GetRelationships ();
    parameters: []
    return:
      type: System.IO.Packaging.PackageRelationshipCollection
      description: "包中包含的所有包级别关系的集合。"
  overload: System.IO.Packaging.Package.GetRelationships*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只写。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  id: GetRelationshipsByType(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: GetRelationshipsByType(String)
  nameWithType: Package.GetRelationshipsByType(String)
  fullName: System.IO.Packaging.Package.GetRelationshipsByType(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "返回与给定的<xref:System.IO.Packaging.PackageRelationship.RelationshipType*>.</xref:System.IO.Packaging.PackageRelationship.RelationshipType*>相匹配的所有包级别关系的集合"
  remarks: "<xref:System.IO.Packaging.Package.GetRelationships%2A>将永远不会返回`null`; 但是，返回的集合可能包含零个元素是否存在具有指定任何包级别关系`relationshipType`。</xref:System.IO.Packaging.Package.GetRelationships%2A>       下表显示包级别`relationshipType`开放式打包约定 (OPC) 规范所定义的 Uri。      |包级别关系 |关系类型 URI |  |---------------------------------|---------------------------|  |核心属性 | http://schemas.openxmlformats.org/package/2006/relationships/meta 数据/核心-属性 |  |数字签名 | http://schemas.openxmlformats.org/package/2006/relationships/digit al-签名/签名 |  |数字签名证书 | http://schemas.openxmlformats.org/package/2006/relationships/digit/证书签名 al |  |数字签名源 | http://schemas.openxmlformats.org/package/2006/relationships/digit al 签名/同源 |  | 缩略图 | http://schemas.openxmlformats.org/package/2006/relationships/meta 数据/缩略图 |      有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to retrieve the relationships that have been defined for the package.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public System.IO.Packaging.PackageRelationshipCollection GetRelationshipsByType (string relationshipType);
    parameters:
    - id: relationshipType
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.RelationshipType*>以匹配，并返回集合中。</xref:System.IO.Packaging.PackageRelationship.RelationshipType*>"
    return:
      type: System.IO.Packaging.PackageRelationshipCollection
      description: "具有指定的包级别关系的集合<code> relationshipType </code>。"
  overload: System.IO.Packaging.Package.GetRelationshipsByType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>relationshipType</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>relationshipType</code>为一个空字符串。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只写。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream)
  id: Open(System.IO.Stream)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream)
  nameWithType: Package.Open(Stream)
  fullName: System.IO.Packaging.Package.Open(Stream)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "打开给定的 IO 流上的包。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是由 Open 方法的默认包类型。</xref:System.IO.Packaging.ZipPackage>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "对其以打开包的 IO 流。"
    return:
      type: System.IO.Packaging.Package
      description: "打开的包。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "要打开的包需要读取或读/写权限和指定<code> stream </code>是只写的; 或要打开的包需要写或读/写权限和指定<code> stream </code>是只读的。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String)
  id: Open(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String)
  nameWithType: Package.Open(String)
  fullName: System.IO.Packaging.Package.Open(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "打开位于给定的路径和文件名称的包。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是由 Open 方法的默认包类型。</xref:System.IO.Packaging.ZipPackage>       这<xref:System.IO.Packaging.Package.Open%2A>方法打开包具有默认特性<xref:System.IO.FileMode>， <xref:System.IO.FileAccess>，和<xref:System.IO.FileShare>（若要指定不同的特性，请使用其他 Open 方法重载之一）。</xref:System.IO.FileShare> </xref:System.IO.FileAccess> </xref:System.IO.FileMode> </xref:System.IO.Packaging.Package.Open%2A>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path);
    parameters:
    - id: path
      type: System.String
      description: "包的路径和文件名称。"
    return:
      type: System.IO.Packaging.Package
      description: "打开的包。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  id: Open(System.IO.Stream,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream,FileMode)
  nameWithType: Package.Open(Stream,FileMode)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用给定的 IO 流和文件模式中打开包。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是由 Open 方法的默认包类型。</xref:System.IO.Packaging.ZipPackage>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "对其以打开包的 IO 流。"
    - id: packageMode
      type: System.IO.FileMode
      description: "要在其中打开包文件模式。"
    return:
      type: System.IO.Packaging.Package
      description: "打开的包。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>packageMode</code>值不是有效的。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "要打开的包需要读取或读/写权限和指定<code> stream </code>是只写的; 或要打开的包需要写或读/写权限和指定<code> stream </code>是只读的。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  id: Open(System.String,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode)
  nameWithType: Package.Open(String,FileMode)
  fullName: System.IO.Packaging.Package.Open(String,FileMode)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "打开位于使用给定的文件模式的给定路径的包。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是由 Open 方法的默认包类型。</xref:System.IO.Packaging.ZipPackage>       此 Open 方法打开包具有默认特性<xref:System.IO.FileAccess>和<xref:System.IO.FileShare>（若要指定不同的特性，请使用其他 Open 方法重载之一）。</xref:System.IO.FileShare> </xref:System.IO.FileAccess>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode);
    parameters:
    - id: path
      type: System.String
      description: "包的路径和文件名称。"
    - id: packageMode
      type: System.IO.FileMode
      description: "要在其中打开包文件模式。"
    return:
      type: System.IO.Packaging.Package
      description: "打开的包。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "值，则为<code> packageMode </code>无效。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(Stream,FileMode,FileAccess)
  nameWithType: Package.Open(Stream,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "使用给定的 IO 流、 文件模式和文件访问设置中打开包。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是由 Open 方法的默认包类型。</xref:System.IO.Packaging.ZipPackage>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public static System.IO.Packaging.Package Open (System.IO.Stream stream, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);
    parameters:
    - id: stream
      type: System.IO.Stream
      description: "对其以打开包的 IO 流。"
    - id: packageMode
      type: System.IO.FileMode
      description: "要在其中打开包文件模式。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "要在其中打开包文件访问。"
    return:
      type: System.IO.Packaging.Package
      description: "打开的包。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>stream</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value for <code>packageMode</code> or <code>packageAccess</code> is not valid."
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "要打开的包需要读取或读/写权限和指定<code> stream </code>是只写的; 或要打开的包需要写或读/写权限和指定<code> stream </code>是只读的。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess)
  nameWithType: Package.Open(String,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "打开位于使用给定的文件模式和文件访问设置的给定路径的包。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是由 Open 方法的默认包类型。</xref:System.IO.Packaging.ZipPackage>       此打开方法的默认打开包<xref:System.IO.FileShare>属性 (以指定不同的属性使用<xref:System.IO.Packaging.Package.Open%2A>方法重载)。</xref:System.IO.Packaging.Package.Open%2A> </xref:System.IO.FileShare>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to open and read a <xref:System.IO.Packaging.Package> that contains <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Reading a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160034).  \n  \n [!code-vb[PackageRead#PackageReadUsing](~/add/codesnippet/visualbasic/packageread/packageread.vb#packagereadusing)]\n [!code-cs[PackageRead#PackageReadUsing](~/add/codesnippet/csharp/PackageRead/PackageRead.cs#packagereadusing)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess);
    parameters:
    - id: path
      type: System.String
      description: "包的路径和文件名称。"
    - id: packageMode
      type: System.IO.FileMode
      description: "要在其中打开包文件模式。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "要在其中打开包文件访问。"
    return:
      type: System.IO.Packaging.Package
      description: "打开的包。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "Value for <code>packageMode</code> or <code>packageAccess</code> is not valid."
  platform:
  - net462
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  id: Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: Package.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess,FileShare)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "打开给定路径使用给定的文件模式、 文件访问和设置的文件共享位于的包。"
  remarks: "<xref:System.IO.Packaging.ZipPackage>是由 Open 方法的默认包类型。</xref:System.IO.Packaging.ZipPackage>       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  example:
  - "The following example shows how to create a new <xref:System.IO.Packaging.Package> that incorporates <xref:System.IO.Packaging.PackageRelationship> and <xref:System.IO.Packaging.PackagePart> elements together with stored data.  For the complete sample, see [Writing a Package Sample](http://go.microsoft.com/fwlink/?LinkID=160055).  \n  \n [!code-vb[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/visualbasic/packagewrite/packagewrite.vb#packagewritecreatepackage)]\n [!code-cs[PackageWrite#PackageWriteCreatePackage](~/add/codesnippet/csharp/PackageWrite/PackageWrite.cs#packagewritecreatepackage)]"
  syntax:
    content: public static System.IO.Packaging.Package Open (string path, System.IO.FileMode packageMode, System.IO.FileAccess packageAccess, System.IO.FileShare packageShare);
    parameters:
    - id: path
      type: System.String
      description: "包的路径和文件名称。"
    - id: packageMode
      type: System.IO.FileMode
      description: "要在其中打开包文件模式。"
    - id: packageAccess
      type: System.IO.FileAccess
      description: "要在其中打开包文件访问。"
    - id: packageShare
      type: System.IO.FileShare
      description: "共享模式下在其中打开包文件。"
    return:
      type: System.IO.Packaging.Package
      description: "打开的包。"
  overload: System.IO.Packaging.Package.Open*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>path</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "The value for <code>packageMode</code>, <code>packageAccess</code>, or <code>packageShare</code> is not valid."
  platform:
  - net462
- uid: System.IO.Packaging.Package.PackageProperties
  id: PackageProperties
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: PackageProperties
  nameWithType: Package.PackageProperties
  fullName: System.IO.Packaging.Package.PackageProperties
  type: Property
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "获取包的核心属性。"
  remarks: "有关核心包属性的其他信息，请参阅第 3.1 节中可供下载的开放式打包约定 (OPC) 规范在[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public System.IO.Packaging.PackageProperties PackageProperties { get; }
    return:
      type: System.IO.Packaging.PackageProperties
      description: "包的核心属性。"
  overload: System.IO.Packaging.Package.PackageProperties*
  exceptions:
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.PartExists(System.Uri)
  id: PartExists(System.Uri)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: PartExists(Uri)
  nameWithType: Package.PartExists(Uri)
  fullName: System.IO.Packaging.Package.PartExists(Uri)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指示包中是否存在具有给定的 URI 的部件。"
  remarks: "`partUri`应该以正斜杠字符开头&quot;/&quot;且绝对于包的根目录。       有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public virtual bool PartExists (Uri partUri);
    parameters:
    - id: partUri
      type: System.Uri
      description: "<xref:System.Uri>要检查为的部件的</xref:System.Uri>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果具有指定的部件<code> partUri </code>在包中; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.Package.PartExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>partUri</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>partUri</code>is not a valid <xref href=&quot;System.IO.Packaging.PackagePart&quot;></xref> [!INCLUDE[TLA#tla_uri](~/add/includes/tlasharptla-uri-md.md)]."
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只写的 （不能读取信息）。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.RelationshipExists(System.String)
  id: RelationshipExists(System.String)
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: RelationshipExists(String)
  nameWithType: Package.RelationshipExists(String)
  fullName: System.IO.Packaging.Package.RelationshipExists(String)
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "指示包中是否包含具有给定 ID 的包级别关系。"
  remarks: "有关其他信息，请参阅下载开放式打包约定 (OPC) 规范[http://go.microsoft.com/fwlink/?LinkID=71255](http://go.microsoft.com/fwlink/?LinkID=71255)。"
  syntax:
    content: public bool RelationshipExists (string id);
    parameters:
    - id: id
      type: System.String
      description: "<xref:System.IO.Packaging.PackageRelationship.Id*>要检查为的关系</xref:System.IO.Packaging.PackageRelationship.Id*>"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果与指定的包级别关系<code> id </code>在包中; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.IO.Packaging.Package.RelationshipExists*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>id</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.Xml.XmlException
    commentId: T:System.Xml.XmlException
    description: "<code>id</code>不是有效的 XML 标识符。"
  - type: System.ObjectDisposedException
    commentId: T:System.ObjectDisposedException
    description: "包未打开 (<>*1> 或<> *1> 已调用)。"
  - type: System.IO.IOException
    commentId: T:System.IO.IOException
    description: "包是只写。"
  platform:
  - net462
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose
  id: System#IDisposable#Dispose
  isEii: true
  parent: System.IO.Packaging.Package
  langs:
  - csharp
  name: System.IDisposable.Dispose()
  nameWithType: Package.System.IDisposable.Dispose()
  fullName: System.IO.Packaging.Package.System.IDisposable.Dispose()
  type: Method
  assemblies:
  - WindowsBase
  namespace: System.IO.Packaging
  summary: "此成员支持[!INCLUDE[TLA#tla_winclient](~/add/includes/ajax-current-ext-md.md)]基础结构，不应在应用程序使用。  使用类型安全<xref:System.IO.Packaging.Package.Dispose*>方法相反。</xref:System.IO.Packaging.Package.Dispose*>"
  syntax:
    content: void IDisposable.Dispose ();
    parameters: []
  overload: System.IO.Packaging.Package.System#IDisposable#Dispose*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.ObjectDisposedException
  isExternal: true
  name: System.ObjectDisposedException
- uid: System.IO.IOException
  isExternal: true
  name: System.IO.IOException
- uid: System.Xml.XmlException
  isExternal: true
  name: System.Xml.XmlException
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package(FileAccess)
  nameWithType: Package.Package(FileAccess)
  fullName: System.IO.Packaging.Package.Package(FileAccess)
- uid: System.IO.FileAccess
  parent: System.IO
  isExternal: false
  name: FileAccess
  nameWithType: FileAccess
  fullName: System.IO.FileAccess
- uid: System.IO.Packaging.Package.#ctor(System.IO.FileAccess,System.Boolean)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package(FileAccess,Boolean)
  nameWithType: Package.Package(FileAccess,Boolean)
  fullName: System.IO.Packaging.Package.Package(FileAccess,Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IO.Packaging.Package.Close
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Close()
  nameWithType: Package.Close()
  fullName: System.IO.Packaging.Package.Close()
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart(Uri,String)
  nameWithType: Package.CreatePart(Uri,String)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String)
- uid: System.IO.Packaging.PackagePart
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePart
  nameWithType: PackagePart
  fullName: System.IO.Packaging.PackagePart
- uid: System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IO.Packaging.Package.CreatePart(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart(Uri,String,CompressionOption)
  nameWithType: Package.CreatePart(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePart(Uri,String,CompressionOption)
- uid: System.IO.Packaging.CompressionOption
  parent: System.IO.Packaging
  isExternal: false
  name: CompressionOption
  nameWithType: CompressionOption
  fullName: System.IO.Packaging.CompressionOption
- uid: System.IO.Packaging.Package.CreatePartCore(System.Uri,System.String,System.IO.Packaging.CompressionOption)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePartCore(Uri,String,CompressionOption)
  nameWithType: Package.CreatePartCore(Uri,String,CompressionOption)
  fullName: System.IO.Packaging.Package.CreatePartCore(Uri,String,CompressionOption)
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship(Uri,TargetMode,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String)
- uid: System.IO.Packaging.PackageRelationship
  parent: System.IO.Packaging
  isExternal: false
  name: PackageRelationship
  nameWithType: PackageRelationship
  fullName: System.IO.Packaging.PackageRelationship
- uid: System.IO.Packaging.TargetMode
  parent: System.IO.Packaging
  isExternal: false
  name: TargetMode
  nameWithType: TargetMode
  fullName: System.IO.Packaging.TargetMode
- uid: System.IO.Packaging.Package.CreateRelationship(System.Uri,System.IO.Packaging.TargetMode,System.String,System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship(Uri,TargetMode,String,String)
  nameWithType: Package.CreateRelationship(Uri,TargetMode,String,String)
  fullName: System.IO.Packaging.Package.CreateRelationship(Uri,TargetMode,String,String)
- uid: System.IO.Packaging.Package.DeletePart(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePart(Uri)
  nameWithType: Package.DeletePart(Uri)
  fullName: System.IO.Packaging.Package.DeletePart(Uri)
- uid: System.IO.Packaging.Package.DeletePartCore(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePartCore(Uri)
  nameWithType: Package.DeletePartCore(Uri)
  fullName: System.IO.Packaging.Package.DeletePartCore(Uri)
- uid: System.IO.Packaging.Package.DeleteRelationship(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeleteRelationship(String)
  nameWithType: Package.DeleteRelationship(String)
  fullName: System.IO.Packaging.Package.DeleteRelationship(String)
- uid: System.IO.Packaging.Package.Dispose(System.Boolean)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: Package.Dispose(Boolean)
  fullName: System.IO.Packaging.Package.Dispose(Boolean)
- uid: System.IO.Packaging.Package.FileOpenAccess
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
  fullName: System.IO.Packaging.Package.FileOpenAccess
- uid: System.IO.Packaging.Package.Flush
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Flush()
  nameWithType: Package.Flush()
  fullName: System.IO.Packaging.Package.Flush()
- uid: System.IO.Packaging.Package.FlushCore
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FlushCore()
  nameWithType: Package.FlushCore()
  fullName: System.IO.Packaging.Package.FlushCore()
- uid: System.IO.Packaging.Package.GetPart(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPart(Uri)
  nameWithType: Package.GetPart(Uri)
  fullName: System.IO.Packaging.Package.GetPart(Uri)
- uid: System.IO.Packaging.Package.GetPartCore(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartCore(Uri)
  nameWithType: Package.GetPartCore(Uri)
  fullName: System.IO.Packaging.Package.GetPartCore(Uri)
- uid: System.IO.Packaging.Package.GetParts
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetParts()
  nameWithType: Package.GetParts()
  fullName: System.IO.Packaging.Package.GetParts()
- uid: System.IO.Packaging.PackagePartCollection
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePartCollection
  nameWithType: PackagePartCollection
  fullName: System.IO.Packaging.PackagePartCollection
- uid: System.IO.Packaging.Package.GetPartsCore
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartsCore()
  nameWithType: Package.GetPartsCore()
  fullName: System.IO.Packaging.Package.GetPartsCore()
- uid: System.IO.Packaging.PackagePart[]
  parent: System.IO.Packaging
  isExternal: false
  name: PackagePart
  nameWithType: PackagePart
  fullName: System.IO.Packaging.PackagePart[]
  spec.csharp:
  - uid: System.IO.Packaging.PackagePart
    name: PackagePart
    nameWithType: PackagePart
    fullName: PackagePart[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.IO.Packaging.Package.GetRelationship(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationship(String)
  nameWithType: Package.GetRelationship(String)
  fullName: System.IO.Packaging.Package.GetRelationship(String)
- uid: System.IO.Packaging.Package.GetRelationships
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationships()
  nameWithType: Package.GetRelationships()
  fullName: System.IO.Packaging.Package.GetRelationships()
- uid: System.IO.Packaging.PackageRelationshipCollection
  parent: System.IO.Packaging
  isExternal: false
  name: PackageRelationshipCollection
  nameWithType: PackageRelationshipCollection
  fullName: System.IO.Packaging.PackageRelationshipCollection
- uid: System.IO.Packaging.Package.GetRelationshipsByType(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationshipsByType(String)
  nameWithType: Package.GetRelationshipsByType(String)
  fullName: System.IO.Packaging.Package.GetRelationshipsByType(String)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream)
  nameWithType: Package.Open(Stream)
  fullName: System.IO.Packaging.Package.Open(Stream)
- uid: System.IO.Packaging.Package
  parent: System.IO.Packaging
  isExternal: false
  name: Package
  nameWithType: Package
  fullName: System.IO.Packaging.Package
- uid: System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO.Packaging.Package.Open(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String)
  nameWithType: Package.Open(String)
  fullName: System.IO.Packaging.Package.Open(String)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream,FileMode)
  nameWithType: Package.Open(Stream,FileMode)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode)
- uid: System.IO.FileMode
  parent: System.IO
  isExternal: false
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode)
  nameWithType: Package.Open(String,FileMode)
  fullName: System.IO.Packaging.Package.Open(String,FileMode)
- uid: System.IO.Packaging.Package.Open(System.IO.Stream,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(Stream,FileMode,FileAccess)
  nameWithType: Package.Open(Stream,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(Stream,FileMode,FileAccess)
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode,FileAccess)
  nameWithType: Package.Open(String,FileMode,FileAccess)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess)
- uid: System.IO.Packaging.Package.Open(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open(String,FileMode,FileAccess,FileShare)
  nameWithType: Package.Open(String,FileMode,FileAccess,FileShare)
  fullName: System.IO.Packaging.Package.Open(String,FileMode,FileAccess,FileShare)
- uid: System.IO.FileShare
  parent: System.IO
  isExternal: false
  name: FileShare
  nameWithType: FileShare
  fullName: System.IO.FileShare
- uid: System.IO.Packaging.Package.PackageProperties
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PackageProperties
  nameWithType: Package.PackageProperties
  fullName: System.IO.Packaging.Package.PackageProperties
- uid: System.IO.Packaging.PackageProperties
  parent: System.IO.Packaging
  isExternal: false
  name: PackageProperties
  nameWithType: PackageProperties
  fullName: System.IO.Packaging.PackageProperties
- uid: System.IO.Packaging.Package.PartExists(System.Uri)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PartExists(Uri)
  nameWithType: Package.PartExists(Uri)
  fullName: System.IO.Packaging.Package.PartExists(Uri)
- uid: System.IO.Packaging.Package.RelationshipExists(System.String)
  parent: System.IO.Packaging.Package
  isExternal: false
  name: RelationshipExists(String)
  nameWithType: Package.RelationshipExists(String)
  fullName: System.IO.Packaging.Package.RelationshipExists(String)
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose
  parent: System.IO.Packaging.Package
  isExternal: false
  name: System.IDisposable.Dispose()
  nameWithType: Package.System.IDisposable.Dispose()
  fullName: System.IO.Packaging.Package.System.IDisposable.Dispose()
- uid: System.IO.Packaging.Package.#ctor*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Package
  nameWithType: Package.Package
- uid: System.IO.Packaging.Package.Close*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Close
  nameWithType: Package.Close
- uid: System.IO.Packaging.Package.CreatePart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePart
  nameWithType: Package.CreatePart
- uid: System.IO.Packaging.Package.CreatePartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreatePartCore
  nameWithType: Package.CreatePartCore
- uid: System.IO.Packaging.Package.CreateRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: CreateRelationship
  nameWithType: Package.CreateRelationship
- uid: System.IO.Packaging.Package.DeletePart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePart
  nameWithType: Package.DeletePart
- uid: System.IO.Packaging.Package.DeletePartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeletePartCore
  nameWithType: Package.DeletePartCore
- uid: System.IO.Packaging.Package.DeleteRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: DeleteRelationship
  nameWithType: Package.DeleteRelationship
- uid: System.IO.Packaging.Package.Dispose*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Dispose
  nameWithType: Package.Dispose
- uid: System.IO.Packaging.Package.FileOpenAccess*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FileOpenAccess
  nameWithType: Package.FileOpenAccess
- uid: System.IO.Packaging.Package.Flush*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Flush
  nameWithType: Package.Flush
- uid: System.IO.Packaging.Package.FlushCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: FlushCore
  nameWithType: Package.FlushCore
- uid: System.IO.Packaging.Package.GetPart*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPart
  nameWithType: Package.GetPart
- uid: System.IO.Packaging.Package.GetPartCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartCore
  nameWithType: Package.GetPartCore
- uid: System.IO.Packaging.Package.GetParts*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetParts
  nameWithType: Package.GetParts
- uid: System.IO.Packaging.Package.GetPartsCore*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetPartsCore
  nameWithType: Package.GetPartsCore
- uid: System.IO.Packaging.Package.GetRelationship*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationship
  nameWithType: Package.GetRelationship
- uid: System.IO.Packaging.Package.GetRelationships*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationships
  nameWithType: Package.GetRelationships
- uid: System.IO.Packaging.Package.GetRelationshipsByType*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: GetRelationshipsByType
  nameWithType: Package.GetRelationshipsByType
- uid: System.IO.Packaging.Package.Open*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: Open
  nameWithType: Package.Open
- uid: System.IO.Packaging.Package.PackageProperties*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PackageProperties
  nameWithType: Package.PackageProperties
- uid: System.IO.Packaging.Package.PartExists*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: PartExists
  nameWithType: Package.PartExists
- uid: System.IO.Packaging.Package.RelationshipExists*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: RelationshipExists
  nameWithType: Package.RelationshipExists
- uid: System.IO.Packaging.Package.System#IDisposable#Dispose*
  parent: System.IO.Packaging.Package
  isExternal: false
  name: System.IDisposable.Dispose
  nameWithType: Package.System.IDisposable.Dispose
