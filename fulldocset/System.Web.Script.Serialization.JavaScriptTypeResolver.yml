### YamlMime:ManagedReference
items:
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver
  id: JavaScriptTypeResolver
  children:
  - System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor
  - System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)
  - System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)
  langs:
  - csharp
  name: JavaScriptTypeResolver
  nameWithType: JavaScriptTypeResolver
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver
  type: Class
  summary: "提供用于实现自定义类型解析程序的抽象基类。"
  remarks: "JavaScriptTypeResolver 类提供的服务:-将托管类型转换的类型为字符串值通过信息<xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A>方法。</xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A>      -将字符串值解析为相应托管类型通过<xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A>方法。</xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A>       当<xref:System.Web.Script.Serialization.JavaScriptSerializer>对象将序列化自定义类型，它可以选择性地包含在序列化的 JavaScript 对象表示法 (JSON) 字符串中包含类型信息的值。</xref:System.Web.Script.Serialization.JavaScriptSerializer> 在反序列化期间<xref:System.Web.Script.Serialization.JavaScriptSerializer>然后托管此字符串值，以便确定适当的引用，可以键入的 JSON 字符串转换到。</xref:System.Web.Script.Serialization.JavaScriptSerializer>       如果你提供到类型解析程序<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例，将使用序列化程序<xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A>和<xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A>方法之间进行映射的托管的类型和字符串值在序列化和反序列化过程中，分别。</xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType%2A> </xref:System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId%2A> </xref:System.Web.Script.Serialization.JavaScriptSerializer>       JavaScriptTypeResolver 类是类的基类<xref:System.Web.Script.Serialization.SimpleTypeResolver>类，该类提供使用托管的类型程序集限定名称的类型冲突解决程序的实现。</xref:System.Web.Script.Serialization.SimpleTypeResolver>"
  example:
  - "The following example demonstrates how to create a custom type resolver.  \n  \n [!code-vb[System.Web.Script.Serialization.TypeResolver#2](~/add/codesnippet/visualbasic/t-system.web.script.seri_0_1.vb)]\n [!code-cs[System.Web.Script.Serialization.TypeResolver#2](~/add/codesnippet/csharp/t-system.web.script.seri_0_1.cs)]"
  syntax:
    content: public abstract class JavaScriptTypeResolver
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor
  id: '#ctor'
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  langs:
  - csharp
  name: JavaScriptTypeResolver()
  nameWithType: JavaScriptTypeResolver.JavaScriptTypeResolver()
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.JavaScriptTypeResolver()
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "初始化的新实例<xref href=&quot;System.Web.Script.Serialization.JavaScriptTypeResolver&quot;></xref>类。"
  syntax:
    content: protected JavaScriptTypeResolver ();
    parameters: []
  overload: System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)
  id: ResolveType(System.String)
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  langs:
  - csharp
  name: ResolveType(String)
  nameWithType: JavaScriptTypeResolver.ResolveType(String)
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(String)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "当在派生类中重写，则返回<xref:System.Type>与指定的类型名称相关联的对象。</xref:System.Type>"
  remarks: "当关联的类型解析程序<xref:System.Web.Script.Serialization.JavaScriptSerializer>实例，在该示例循环访问 JSON 字符串以确定特定于托管的 JSON 类型应转换到的目标的类型时序列化程序使用 ResolveType 方法。</xref:System.Web.Script.Serialization.JavaScriptSerializer>"
  syntax:
    content: public abstract Type ResolveType (string id);
    parameters:
    - id: id
      type: System.String
      description: "托管类型的名称。"
    return:
      type: System.Type
      description: "<xref:System.Type>与指定的类型名称相关联的对象。</xref:System.Type>"
  overload: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType*
  exceptions: []
  platform:
  - net462
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)
  id: ResolveTypeId(System.Type)
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  langs:
  - csharp
  name: ResolveTypeId(Type)
  nameWithType: JavaScriptTypeResolver.ResolveTypeId(Type)
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(Type)
  type: Method
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.Script.Serialization
  summary: "当在派生类中重写，返回指定的类型名称<xref:System.Type>对象。</xref:System.Type>"
  remarks: "如果 ResolveTypeId 方法返回`null`或<xref:System.String>，则类型解析程序不支持的类型。</xref:System.String>"
  syntax:
    content: public abstract string ResolveTypeId (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要解析的托管的类型。"
    return:
      type: System.String
      description: "指定的托管类型的名称。"
  overload: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId*
  exceptions: []
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  isExternal: false
  name: JavaScriptTypeResolver()
  nameWithType: JavaScriptTypeResolver.JavaScriptTypeResolver()
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.JavaScriptTypeResolver()
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(System.String)
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  isExternal: false
  name: ResolveType(String)
  nameWithType: JavaScriptTypeResolver.ResolveType(String)
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType(String)
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(System.Type)
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  isExternal: false
  name: ResolveTypeId(Type)
  nameWithType: JavaScriptTypeResolver.ResolveTypeId(Type)
  fullName: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId(Type)
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.#ctor*
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  isExternal: false
  name: JavaScriptTypeResolver
  nameWithType: JavaScriptTypeResolver.JavaScriptTypeResolver
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveType*
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  isExternal: false
  name: ResolveType
  nameWithType: JavaScriptTypeResolver.ResolveType
- uid: System.Web.Script.Serialization.JavaScriptTypeResolver.ResolveTypeId*
  parent: System.Web.Script.Serialization.JavaScriptTypeResolver
  isExternal: false
  name: ResolveTypeId
  nameWithType: JavaScriptTypeResolver.ResolveTypeId
