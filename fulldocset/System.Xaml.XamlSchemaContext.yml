### YamlMime:ManagedReference
items:
- uid: System.Xaml.XamlSchemaContext
  id: XamlSchemaContext
  children:
  - System.Xaml.XamlSchemaContext.#ctor
  - System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  - System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  - System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  - System.Xaml.XamlSchemaContext.Finalize
  - System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  - System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  - System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  - System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  - System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  - System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  - System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  - System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  - System.Xaml.XamlSchemaContext.ReferenceAssemblies
  - System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  - System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  langs:
  - csharp
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext
  fullName: System.Xaml.XamlSchemaContext
  type: Class
  summary: "定义可重用的上下文，用于解释或映射 XAML 类型和支持这些程序集中的类型。"
  remarks: "XAML 架构上下文提供了一个架构或词汇对于 XAML 与特定的分析器实现之间的抽象层。 方法是插入架构上下文的概念，可与不同的 XAML 分析器，架构和架构上下文填入与特定的 XAML 分析器进行交互所需的详细信息。 例如，XAML 架构上下文提供了查询与 XAML 概念或 CLR 绑定到 XAML 类型系统相关的 Api。 XAML 架构上下文也是负责维护的加载程序集，它定义其中 XAML 分析器查找后备类型的程序集列表。"
  syntax:
    content: public class XamlSchemaContext
  inheritance:
  - System.Object
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor
  id: '#ctor'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext()
  nameWithType: XamlSchemaContext.XamlSchemaContext()
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext()
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>类。"
  syntax:
    content: public XamlSchemaContext ();
    parameters: []
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(IEnumerable<Assembly>)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>类，基于一组引用程序集。"
  syntax:
    content: public XamlSchemaContext (System.Collections.Generic.IEnumerable<System.Reflection.Assembly> referenceAssemblies);
    parameters:
    - id: referenceAssemblies
      type: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
      description: "程序集的信息项的可枚举集合。 指定每个程序集信息项<xref:System.Reflection.Assembly>值。</xref:System.Reflection.Assembly>"
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  id: '#ctor(System.Xaml.XamlSchemaContextSettings)'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>基于设置对象上的类。"
  remarks: "此设置对象存储有关文本转换器和标记扩展有关的架构上下文的细节信息的信息。 有关详细信息，请参阅<xref:System.Xaml.XamlSchemaContextSettings>。</xref:System.Xaml.XamlSchemaContextSettings>"
  syntax:
    content: public XamlSchemaContext (System.Xaml.XamlSchemaContextSettings settings);
    parameters:
    - id: settings
      type: System.Xaml.XamlSchemaContextSettings
      description: "设置对象，用于构造<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>。"
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  id: '#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)'
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  type: Constructor
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "初始化的新实例<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>基于一组引用程序集和设置对象的类。"
  syntax:
    content: public XamlSchemaContext (System.Collections.Generic.IEnumerable<System.Reflection.Assembly> referenceAssemblies, System.Xaml.XamlSchemaContextSettings settings);
    parameters:
    - id: referenceAssemblies
      type: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
      description: "程序集信息的可枚举集合。 指定每个程序集信息项<xref:System.Reflection.Assembly>值。</xref:System.Reflection.Assembly>"
    - id: settings
      type: System.Xaml.XamlSchemaContextSettings
      description: "设置对象，用于构造<xref href=&quot;System.Xaml.XamlSchemaContext&quot;> </xref>。"
  overload: System.Xaml.XamlSchemaContext.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.Finalize
  id: Finalize
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: Finalize()
  nameWithType: XamlSchemaContext.Finalize()
  fullName: System.Xaml.XamlSchemaContext.Finalize()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "提供一个非标准<xref uid=&quot;langword_csharp_Finalize&quot; name=&quot;Finalize&quot; href=&quot;&quot;></xref>不会调用的实现<xref uid=&quot;langword_csharp_Dispose&quot; name=&quot;Dispose&quot; href=&quot;&quot;> </xref>。"
  remarks: "通过自动垃圾回收或手动操作，则不应释放 XAML 架构上下文。 尽管 XAML 架构上下文不具有任何非托管的资源，但<xref:System.Windows.Markup.XamlDeferLoadAttribute>属性可能仍处于活动状态，并释放的 XAML 架构上下文可能会妨碍相关的延迟加载操作。</xref:System.Windows.Markup.XamlDeferLoadAttribute>       <xref:System.AppDomain.AssemblyLoad>通过此实现清理作为弱引用内部挂钩的事件处理程序。</xref:System.AppDomain.AssemblyLoad>"
  syntax:
    content: ~XamlSchemaContext ();
    parameters: []
  overload: System.Xaml.XamlSchemaContext.Finalize*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  id: FullyQualifyAssemblyNamesInClrNamespaces
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  fullName: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，指定 XAML 架构及其上下文是否在查找 API 返回的值中使用完全限定程序集名称。"
  remarks: "此属性返回<xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>建立的设置中的值<xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>构造函数签名。</xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> </xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName> 如果其他签名已用于构造，或如果<xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>未特别设置`true`，此属性的值是`false`。</xref:System.Xaml.XamlSchemaContextSettings.FullyQualifyAssemblyNamesInClrNamespaces%2A?displayProperty=fullName>       此属性的值会影响受<xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>。</xref:System.Xaml.XamlSchemaContext.GetAllXamlNamespaces%2A>返回的字符串 如果 FullyQualifyAssemblyNamesInClrNamespaces `true`，字符串的程序集部分报告<xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName>.</xref:System.Reflection.Assembly.FullName%2A?displayProperty=fullName>的等效项"
  syntax:
    content: public bool FullyQualifyAssemblyNamesInClrNamespaces { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果 XAML 架构和其上下文查找 Api; 返回的值中使用完全限定程序集名称否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  id: GetAllXamlNamespaces
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetAllXamlNamespaces()
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces()
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces()
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "搜索此保留的程序集<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>并返回一组命名空间。"
  remarks: "如果它们将传递中构造或属性的设置，则此方法将仅搜索的引用程序集。 如果为引用程序集不建立了任何程序集，此方法的逻辑检查所有已加载的程序集位置这<xref:System.Xaml.XamlSchemaContext>处于活动状态。</xref:System.Xaml.XamlSchemaContext>"
  syntax:
    content: public virtual System.Collections.Generic.IEnumerable<string> GetAllXamlNamespaces ();
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: "命名空间标识符的可枚举集合。 以字符串形式提供这些标识符。"
  overload: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  id: GetAllXamlTypes(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetAllXamlTypes(String)
  nameWithType: XamlSchemaContext.GetAllXamlTypes(String)
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlTypes(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "搜索此保留的程序集<xref href=&quot;System.Xaml.XamlSchemaContext&quot;></xref>并从指定的 XAML 命名空间中返回的一组类型。"
  syntax:
    content: public virtual System.Collections.Generic.ICollection<System.Xaml.XamlType> GetAllXamlTypes (string xamlNamespace);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "要返回的类型的 XAML 命名空间。"
    return:
      type: System.Collections.Generic.ICollection{System.Xaml.XamlType}
      description: "XAML 类型的可枚举集合。 由集中每个 XAML 类型<xref href=&quot;System.Xaml.XamlType&quot;></xref>对象。"
  overload: System.Xaml.XamlSchemaContext.GetAllXamlTypes*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  id: GetPreferredPrefix(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetPreferredPrefix(String)
  nameWithType: XamlSchemaContext.GetPreferredPrefix(String)
  fullName: System.Xaml.XamlSchemaContext.GetPreferredPrefix(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取被报告为使用者，它们将映射指定的 XAML 命名空间时要使用的首选前缀的字符串。"
  remarks: "信息的最直接的使用者通常是 XAML 编写器。 其他间接使用者包含设计工具。       作为公共语言运行时 (CLR) 的 XAML 绑定的一部分，你可以通过应用指定此信息<xref:System.Windows.Markup.XmlnsPrefixAttribute>程序集级别。</xref:System.Windows.Markup.XmlnsPrefixAttribute>"
  syntax:
    content: public virtual string GetPreferredPrefix (string xmlns);
    parameters:
    - id: xmlns
      type: System.String
      description: "要获取的首选的前缀的 XAML 命名空间。"
    return:
      type: System.String
      description: "一个字符串，它们将映射指定的 XAML 命名空间的标记时，应使用使用者使用。"
  overload: System.Xaml.XamlSchemaContext.GetPreferredPrefix*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xmlns</code>为 null。"
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  id: GetValueConverter``1(System.Type,System.Xaml.XamlType)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetValueConverter(Type,XamlType)
  nameWithType: XamlSchemaContext.GetValueConverter(Type,XamlType)
  fullName: System.Xaml.XamlSchemaContext.GetValueConverter(Type,XamlType)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  syntax:
    content: 'protected System.Xaml.Schema.XamlValueConverter<TConverterBase> GetValueConverter<TConverterBase> (Type converterType, System.Xaml.XamlType targetType) where TConverterBase : class;'
    parameters:
    - id: converterType
      type: System.Type
      description: "要添加。"
    - id: targetType
      type: System.Xaml.XamlType
      description: "要添加。"
    return:
      type: System.Xaml.Schema.XamlValueConverter`1
      description: "要添加。"
  overload: System.Xaml.XamlSchemaContext.GetValueConverter<TConverterBase>*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  id: GetXamlDirective(System.String,System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlDirective(String,String)
  nameWithType: XamlSchemaContext.GetXamlDirective(String,String)
  fullName: System.Xaml.XamlSchemaContext.GetXamlDirective(String,String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlDirective&quot;></xref>表示指令，用于 XAML 语言或特定实现的值。"
  remarks: "如果创建派生的类中重写此方法<xref:System.Xaml.XamlDirective>作为 XAML 类型系统扩展方案的一部分。</xref:System.Xaml.XamlDirective>"
  syntax:
    content: public virtual System.Xaml.XamlDirective GetXamlDirective (string xamlNamespace, string name);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "包含已命名的指令的 XAML 命名空间。"
    - id: name
      type: System.String
      description: "要获取的指令的名称。"
    return:
      type: System.Xaml.XamlDirective
      description: "A <xref href=&quot;System.Xaml.XamlDirective&quot;> </xref>表示请求的指令的对象。"
  overload: System.Xaml.XamlSchemaContext.GetXamlDirective*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlNamespace</code>or <code>name</code> is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  id: GetXamlType(System.Type)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(Type)
  nameWithType: XamlSchemaContext.GetXamlType(Type)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(Type)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlType&quot;></xref>基于 CLR 类型标识符。"
  remarks: "此重载假设你正在使用 CLR 的后备类型系统。 如果不使用的 CLR 类型系统，使用<xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>。</xref:System.Xaml.XamlSchemaContext.GetXamlType%28System.Xaml.Schema.XamlTypeName%29>"
  syntax:
    content: public virtual System.Xaml.XamlType GetXamlType (Type type);
    parameters:
    - id: type
      type: System.Type
      description: "要获取的类型<xref href=&quot;System.Xaml.XamlType&quot;></xref>有关。"
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>匹配输入<code> type </code>。"
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>type</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  id: GetXamlType(System.Xaml.Schema.XamlTypeName)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(XamlTypeName)
  nameWithType: XamlSchemaContext.GetXamlType(XamlTypeName)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(XamlTypeName)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlType&quot;></xref>基于 XAML 系统类型名称。"
  syntax:
    content: public System.Xaml.XamlType GetXamlType (System.Xaml.Schema.XamlTypeName xamlTypeName);
    parameters:
    - id: xamlTypeName
      type: System.Xaml.Schema.XamlTypeName
      description: "要获取的 XAML 类型名称<xref href=&quot;System.Xaml.XamlType&quot;></xref>有关。"
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>匹配输入<code> xamlTypeName </code>。"
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "A component of <code>xamlTypeName</code> (<>*> or <>*>) is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlTypeName</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  id: GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: GetXamlType(String,String,XamlType[])
  nameWithType: XamlSchemaContext.GetXamlType(String,String,XamlType[])
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(String,String,XamlType[])
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回<xref href=&quot;System.Xaml.XamlType&quot;></xref>基于 XAML 命名空间和类型名称的字符串。 此签名可以指定的类型参数的情况下所需的类型是泛型类型的情况。"
  syntax:
    content: protected virtual System.Xaml.XamlType GetXamlType (string xamlNamespace, string name, System.Xaml.XamlType[] typeArguments);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "包含所需的类型的 XAML 命名空间。"
    - id: name
      type: System.String
      description: "所需的类型字符串名称。"
    - id: typeArguments
      type: System.Xaml.XamlType[]
      description: "泛型类型初始化类型参数。"
    return:
      type: System.Xaml.XamlType
      description: "<xref href=&quot;System.Xaml.XamlType&quot;> </xref>与输入的条件匹配。"
  overload: System.Xaml.XamlSchemaContext.GetXamlType*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  id: OnAssemblyResolve(System.String)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: OnAssemblyResolve(String)
  nameWithType: XamlSchemaContext.OnAssemblyResolve(String)
  fullName: System.Xaml.XamlSchemaContext.OnAssemblyResolve(String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "当操作使用此架构上下文来解析需要解析的 XAML 命名空间，它所包含的程序集时调用。"
  remarks: "基础的程序集解析技术，这是一个内部 API，已对不同的字符串形式的程序集名称的内置容差，因为基于<xref:System.Reflection.AssemblyName>构造行为。</xref:System.Reflection.AssemblyName>       此 API 的目的是能够首次解析针对已知的程序集，如针对而不是针对全局程序集缓存的引用程序集。 如果填充的引用程序集的列表，则默认实现可以访问的已知的引用程序集。"
  syntax:
    content: protected virtual System.Reflection.Assembly OnAssemblyResolve (string assemblyName);
    parameters:
    - id: assemblyName
      type: System.String
      description: "要加载的程序集的名称。 请参阅备注。"
    return:
      type: System.Reflection.Assembly
      description: "解析的程序集。"
  overload: System.Xaml.XamlSchemaContext.OnAssemblyResolve*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  id: ReferenceAssemblies
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
  fullName: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取 XAML 架构上下文的引用程序集的可枚举集合。"
  syntax:
    content: public System.Collections.Generic.IList<System.Reflection.Assembly> ReferenceAssemblies { get; }
    return:
      type: System.Collections.Generic.IList{System.Reflection.Assembly}
      description: "架构上下文的引用程序集的可枚举集合。 指定每个程序集信息项<xref:System.Reflection.Assembly>值。</xref:System.Reflection.Assembly>"
  overload: System.Xaml.XamlSchemaContext.ReferenceAssemblies*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  id: SupportMarkupExtensionsWithDuplicateArity
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  fullName: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  type: Property
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "获取一个值，指定拥有带相同 arity （多个输入参数） 的两个构造函数的标记扩展支持 XAML 架构和它的上下文。"
  remarks: "此属性返回<xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>建立的设置中的值<xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29>构造函数签名。</xref:System.Xaml.XamlSchemaContext.%23ctor%28System.Xaml.XamlSchemaContextSettings%29> </xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName> 如果其他签名用于构造，或如果<xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>未特别设置`true`，此属性的值是`false`。</xref:System.Xaml.XamlSchemaContextSettings.SupportMarkupExtensionsWithDuplicateArity%2A?displayProperty=fullName>       XAML 规范 [MS-XAML] 第节 6.6.7.2 未专门得到解决重复 arity 的标记扩展。 这是因为形成的标记扩展的 XAML 信息项而不考虑在标记扩展实现中可能存在的重复 arity 等同。 仅实际调用标记扩展并将其`ProvideValue`公开与重复 arity 相关联的任何问题。 处理重复 arity 的行为因此是不确定，并且仍最多每个实现的 XAML 架构上下文和其 XAML 编写器集成。 默认 XAML 架构上下文的.NET Framework XAML 服务操作实现不支持重复 arity;处理具有基础重复 arity 的标记扩展用法时，各种.NET Framework XAML 服务 Api 将引发异常。       有关定义标记扩展的详细信息，请参阅[的标记扩展 XAML 概述](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public bool SupportMarkupExtensionsWithDuplicateArity { get; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果架构上下文允许有重复 arity; 的标记扩展否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。 默认值是<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity*
  exceptions: []
  platform:
  - net462
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  id: TryGetCompatibleXamlNamespace(System.String,System.String@)
  parent: System.Xaml.XamlSchemaContext
  langs:
  - csharp
  name: TryGetCompatibleXamlNamespace(String,String)
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  fullName: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  type: Method
  assemblies:
  - System.Xaml
  namespace: System.Xaml
  summary: "返回兼容的 XAML 命名空间的请求成功与否。 请求成功报告作为输出参数的 XAML 命名空间。"
  remarks: "此方法在内部，使用以下查找顺序︰ 1。  已由早期查找填充一个内部实现的兼容性字典。      2.  <xref:System.Windows.Markup.XmlnsCompatibleWithAttribute>参数评估。</xref:System.Windows.Markup.XmlnsCompatibleWithAttribute>       如果不发现任何其他兼容的命名空间，并且此方法返回`false`、`compatibleNamespace`参数输出可能具有相同的值作为`xamlNamespace`输入。"
  syntax:
    content: public virtual bool TryGetCompatibleXamlNamespace (string xamlNamespace, out string compatibleNamespace);
    parameters:
    - id: xamlNamespace
      type: System.String
      description: "<xref uid=&quot;langword_csharp_xmlns&quot; name=&quot;xmlns&quot; href=&quot;&quot;> </xref>要检查是否存在兼容结果的 XAML 命名空间的字符串。"
    - id: compatibleNamespace
      type: System.String
      description: "此方法返回时， <xref uid=&quot;langword_csharp_xmlns&quot; name=&quot;xmlns&quot; href=&quot;&quot;> </xref>兼容的 XAML 命名空间请求字符串。 这可能是等于`xamlNamespace`如果该方法返回<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> compatibleNamespace </code>包含可用的结果; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>xamlNamespace</code>is <xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;></xref>."
  platform:
  - net462
references:
- uid: System.Object
  isExternal: false
  name: System.Object
- uid: System.ArgumentNullException
  isExternal: true
  name: System.ArgumentNullException
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.Xaml.XamlSchemaContext.#ctor
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext()
  nameWithType: XamlSchemaContext.XamlSchemaContext()
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext()
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(IEnumerable<Assembly>)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>)
- uid: System.Collections.Generic.IEnumerable{System.Reflection.Assembly}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<Assembly>
  nameWithType: IEnumerable<Assembly>
  fullName: System.Collections.Generic.IEnumerable<System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.Reflection.Assembly>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Xaml.XamlSchemaContextSettings)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(XamlSchemaContextSettings)
- uid: System.Xaml.XamlSchemaContextSettings
  parent: System.Xaml
  isExternal: false
  name: XamlSchemaContextSettings
  nameWithType: XamlSchemaContextSettings
  fullName: System.Xaml.XamlSchemaContextSettings
- uid: System.Xaml.XamlSchemaContext.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.Assembly},System.Xaml.XamlSchemaContextSettings)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  nameWithType: XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
  fullName: System.Xaml.XamlSchemaContext.XamlSchemaContext(IEnumerable<Assembly>,XamlSchemaContextSettings)
- uid: System.Xaml.XamlSchemaContext.Finalize
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: Finalize()
  nameWithType: XamlSchemaContext.Finalize()
  fullName: System.Xaml.XamlSchemaContext.Finalize()
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
  fullName: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlNamespaces()
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces()
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces()
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<String>
  nameWithType: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable<System.String>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: String
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlTypes(String)
  nameWithType: XamlSchemaContext.GetAllXamlTypes(String)
  fullName: System.Xaml.XamlSchemaContext.GetAllXamlTypes(String)
- uid: System.Collections.Generic.ICollection{System.Xaml.XamlType}
  parent: System.Collections.Generic
  isExternal: true
  name: ICollection<XamlType>
  nameWithType: ICollection<XamlType>
  fullName: System.Collections.Generic.ICollection<System.Xaml.XamlType>
  spec.csharp:
  - uid: System.Collections.Generic.ICollection`1
    name: ICollection
    nameWithType: ICollection
    fullName: ICollection<System.Xaml.XamlType>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetPreferredPrefix(String)
  nameWithType: XamlSchemaContext.GetPreferredPrefix(String)
  fullName: System.Xaml.XamlSchemaContext.GetPreferredPrefix(String)
- uid: System.Xaml.XamlSchemaContext.GetValueConverter``1(System.Type,System.Xaml.XamlType)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetValueConverter(Type,XamlType)
  nameWithType: XamlSchemaContext.GetValueConverter(Type,XamlType)
  fullName: System.Xaml.XamlSchemaContext.GetValueConverter(Type,XamlType)
- uid: System.Xaml.Schema.XamlValueConverter`1
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlValueConverter<TConverterBase>
  nameWithType: XamlValueConverter<TConverterBase>
  fullName: System.Xaml.Schema.XamlValueConverter<TConverterBase>
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  nameWithType: Type
  fullName: System.Type
- uid: System.Xaml.XamlType
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective(System.String,System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlDirective(String,String)
  nameWithType: XamlSchemaContext.GetXamlDirective(String,String)
  fullName: System.Xaml.XamlSchemaContext.GetXamlDirective(String,String)
- uid: System.Xaml.XamlDirective
  parent: System.Xaml
  isExternal: false
  name: XamlDirective
  nameWithType: XamlDirective
  fullName: System.Xaml.XamlDirective
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Type)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(Type)
  nameWithType: XamlSchemaContext.GetXamlType(Type)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(Type)
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.Xaml.Schema.XamlTypeName)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(XamlTypeName)
  nameWithType: XamlSchemaContext.GetXamlType(XamlTypeName)
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(XamlTypeName)
- uid: System.Xaml.Schema.XamlTypeName
  parent: System.Xaml.Schema
  isExternal: false
  name: XamlTypeName
  nameWithType: XamlTypeName
  fullName: System.Xaml.Schema.XamlTypeName
- uid: System.Xaml.XamlSchemaContext.GetXamlType(System.String,System.String,System.Xaml.XamlType[])
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType(String,String,XamlType[])
  nameWithType: XamlSchemaContext.GetXamlType(String,String,XamlType[])
  fullName: System.Xaml.XamlSchemaContext.GetXamlType(String,String,XamlType[])
- uid: System.Xaml.XamlType[]
  parent: System.Xaml
  isExternal: false
  name: XamlType
  nameWithType: XamlType
  fullName: System.Xaml.XamlType[]
  spec.csharp:
  - uid: System.Xaml.XamlType
    name: XamlType
    nameWithType: XamlType
    fullName: XamlType[]
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve(System.String)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: OnAssemblyResolve(String)
  nameWithType: XamlSchemaContext.OnAssemblyResolve(String)
  fullName: System.Xaml.XamlSchemaContext.OnAssemblyResolve(String)
- uid: System.Reflection.Assembly
  parent: System.Reflection
  isExternal: true
  name: Assembly
  nameWithType: Assembly
  fullName: System.Reflection.Assembly
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
  fullName: System.Xaml.XamlSchemaContext.ReferenceAssemblies
- uid: System.Collections.Generic.IList{System.Reflection.Assembly}
  parent: System.Collections.Generic
  isExternal: true
  name: IList<Assembly>
  nameWithType: IList<Assembly>
  fullName: System.Collections.Generic.IList<System.Reflection.Assembly>
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: IList<System.Reflection.Assembly>
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Reflection.Assembly
    name: Assembly
    nameWithType: Assembly
    fullName: Assembly
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
  fullName: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(System.String,System.String@)
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: TryGetCompatibleXamlNamespace(String,String)
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
  fullName: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace(String,String)
- uid: System.Xaml.XamlSchemaContext.#ctor*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: XamlSchemaContext
  nameWithType: XamlSchemaContext.XamlSchemaContext
- uid: System.Xaml.XamlSchemaContext.Finalize*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: Finalize
  nameWithType: XamlSchemaContext.Finalize
- uid: System.Xaml.XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: FullyQualifyAssemblyNamesInClrNamespaces
  nameWithType: XamlSchemaContext.FullyQualifyAssemblyNamesInClrNamespaces
- uid: System.Xaml.XamlSchemaContext.GetAllXamlNamespaces*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlNamespaces
  nameWithType: XamlSchemaContext.GetAllXamlNamespaces
- uid: System.Xaml.XamlSchemaContext.GetAllXamlTypes*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetAllXamlTypes
  nameWithType: XamlSchemaContext.GetAllXamlTypes
- uid: System.Xaml.XamlSchemaContext.GetPreferredPrefix*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetPreferredPrefix
  nameWithType: XamlSchemaContext.GetPreferredPrefix
- uid: System.Xaml.XamlSchemaContext.GetValueConverter<TConverterBase>*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetValueConverter<TConverterBase>
  nameWithType: XamlSchemaContext.GetValueConverter<TConverterBase>
- uid: System.Xaml.XamlSchemaContext.GetXamlDirective*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlDirective
  nameWithType: XamlSchemaContext.GetXamlDirective
- uid: System.Xaml.XamlSchemaContext.GetXamlType*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: GetXamlType
  nameWithType: XamlSchemaContext.GetXamlType
- uid: System.Xaml.XamlSchemaContext.OnAssemblyResolve*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: OnAssemblyResolve
  nameWithType: XamlSchemaContext.OnAssemblyResolve
- uid: System.Xaml.XamlSchemaContext.ReferenceAssemblies*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: ReferenceAssemblies
  nameWithType: XamlSchemaContext.ReferenceAssemblies
- uid: System.Xaml.XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: SupportMarkupExtensionsWithDuplicateArity
  nameWithType: XamlSchemaContext.SupportMarkupExtensionsWithDuplicateArity
- uid: System.Xaml.XamlSchemaContext.TryGetCompatibleXamlNamespace*
  parent: System.Xaml.XamlSchemaContext
  isExternal: false
  name: TryGetCompatibleXamlNamespace
  nameWithType: XamlSchemaContext.TryGetCompatibleXamlNamespace
