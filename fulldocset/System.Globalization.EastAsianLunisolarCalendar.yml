### YamlMime:ManagedReference
items:
- uid: System.Globalization.EastAsianLunisolarCalendar
  id: EastAsianLunisolarCalendar
  children:
  - System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.AlgorithmType
  - System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)
  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)
  - System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)
  - System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)
  - System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)
  - System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)
  - System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)
  - System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax
  langs:
  - csharp
  name: EastAsianLunisolarCalendar
  nameWithType: EastAsianLunisolarCalendar
  fullName: System.Globalization.EastAsianLunisolarCalendar
  type: Class
  summary: "表示将时间划分为月、 日、 年和纪元，并具有基于太阳和月亮周期的日期的日历。"
  remarks: "EastAsianLunisolarCalendar 类支持除了太阳年和阴历月甲子循环的年 （重复每隔 60 年）。 在日历中每个太阳年都与一个甲子年关联 (请参阅<xref:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear%2A>)，一个天干 (请参阅<xref:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem%2A>)，和地面分支 (请参阅<xref:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch%2A>)。</xref:System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch%2A> </xref:System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem%2A> </xref:System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear%2A>      1> [!NOTE]&1;> 有关使用信息<xref:System.Globalization.HebrewCalendar>类和其他日历.NET Framework 中的类，请参阅[使用日历](~/add/includes/ajax-current-ext-md.md)。</xref:System.Globalization.HebrewCalendar>       每一年可以有一年中，任何月后的闰月并且每个月可以闰日。 例如，<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法返回一个正整数，表示关联的指定日期的月份。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> 如果一年中，在第八个和第 9 个月之间存在闰月<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法闰第八个月的 9 和 10 第 9 个月的第八个月份返回 8。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>       每个<xref:System.Globalization.CultureInfo>支持一组的日历。</xref:System.Globalization.CultureInfo> 目前，派生 EastAsianLunisolarCalendar 阴阳历类都可由任何区域性支持的<xref:System.Globalization.CultureInfo>类。</xref:System.Globalization.CultureInfo> 因此，此类并从它派生的那些可仅用于计算日期在东亚阴阳历。 此类支持多个&quot;get&quot;方法，可描述<xref:System.DateTime>中通过阴阳历，并<xref:System.Globalization.EastAsianLunisolarCalendar.ToDateTime%2A>将从一种<xref:System.DateTime>。</xref:System.DateTime>阴阳历数据转换的方法</xref:System.Globalization.EastAsianLunisolarCalendar.ToDateTime%2A>中使用的术语</xref:System.DateTime>"
  syntax:
    content: >-
      [System.Runtime.InteropServices.ComVisible(true)]

      public abstract class EastAsianLunisolarCalendar : System.Globalization.Calendar
  inheritance:
  - System.Globalization.Calendar
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)
  id: AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: AddMonths(DateTime,Int32)
  nameWithType: EastAsianLunisolarCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.AddMonths(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算指定离开指定日期的月份数的日期。"
  remarks: "日部分的生成<xref:System.DateTime>如果结果的日期不是有效的一天中生成月份影响。</xref:System.DateTime> 在这种情况下，日部分将更改为在生成每年的生成的每月最后一个有效的一天。 <xref:System.DateTime>如果外部的指定<xref:System.DateTime>。</xref:System.DateTime>年，则结果月份影响</xref:System.DateTime>生成的年份部分 此实现支持仅当前纪元。 因此，<xref:System.ArgumentException>如果结果年份外部的指定<xref:System.DateTime>。</xref:System.DateTime>纪元，则引发</xref:System.ArgumentException> 时间的日部分的生成<xref:System.DateTime>与指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>       例如，如果指定的月份是年 10 月，其中包含 31 天，指定的日期是该月的三十第一天和的值`months`参数为 6，则结果年份是一个超过指定的年份，结果月份是年 4 月，和结果的日期是 30 日，即年 4 月的最后一天。       如果值`months`参数是负数，<xref:System.DateTime>早于指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>生成       <xref:System.DateTime.Kind%2A>属性的返回<xref:System.DateTime>值始终等于<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>属性`time`通过调用的参数<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如以下示例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#5](~/add/codesnippet/visualbasic/d86a04c2-1ef4-4a8d-ab7c-_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#5  ](~/add/codesnippet/csharp/d86a04c2-1ef4-4a8d-ab7c-_1.cs)]"
  syntax:
    content: public override DateTime AddMonths (DateTime time, int months);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>要向其中添加`months`。</xref:System.DateTime>"
    - id: months
      type: System.Int32
      description: "要添加的月份数。"
    return:
      type: System.DateTime
      description: "一个新<xref:System.DateTime>中时得到的添加指定的月数到<code> time </code>参数。</xref:System.DateTime>"
  overload: System.Globalization.EastAsianLunisolarCalendar.AddMonths*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "结果超出所支持的一种<xref:System.DateTime>。</xref:System.DateTime>范围"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>months</code>小于-120000 或大于 120000。       -<code>time</code>是小于<xref:System.Globalization.Calendar.MinSupportedDateTime*>或大于<xref:System.Globalization.Calendar.MaxSupportedDateTime*>。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)
  id: AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: AddYears(DateTime,Int32)
  nameWithType: EastAsianLunisolarCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.AddYears(DateTime,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算指定的离开指定日期的年数的日期。"
  remarks: "日部分的生成<xref:System.DateTime>如果结果的日期不是有效的一天中生成月份影响。</xref:System.DateTime> 在这种情况下，日部分将更改为在生成每年的生成的每月最后一个有效的一天。 月部分的生成<xref:System.DateTime>与指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime> 此实现支持仅当前纪元。 因此，<xref:System.ArgumentException>如果结果年份外部的指定<xref:System.DateTime>。</xref:System.DateTime>纪元，则引发</xref:System.ArgumentException> 时间的日部分的生成<xref:System.DateTime>与指定<xref:System.DateTime>.</xref:System.DateTime>相同</xref:System.DateTime>       例如，年 2 月有 28 天，但在闰年时它有 29 天。 如果指定的日期是闰年中的年 2 月 29 日和的值`years`参数为 1，则得到的日期将在下一年中的年 2 月的二十一第八天。       如果`years`为负，<xref:System.DateTime>早于指定<xref:System.DateTime>.</xref:System.DateTime></xref:System.DateTime>生成       <xref:System.DateTime.Kind%2A>属性的返回<xref:System.DateTime>值始终等于<xref:System.DateTimeKind?displayProperty=fullName>.</xref:System.DateTimeKind?displayProperty=fullName> </xref:System.DateTime> </xref:System.DateTime.Kind%2A> 您可以保留<xref:System.DateTime.Kind%2A>属性`time`通过调用的参数<xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName>方法，如以下示例所示。</xref:System.DateTime.SpecifyKind%2A?displayProperty=fullName> </xref:System.DateTime.Kind%2A>       [!code-vb[System.Globalization.Calendar.AddMethods#8](~/add/codesnippet/visualbasic/6f9d0244-83a4-4a86-acea-_1.vb)][!code-cs[System.Globalization.Calendar.AddMethods#8  ](~/add/codesnippet/csharp/6f9d0244-83a4-4a86-acea-_1.cs)]"
  syntax:
    content: public override DateTime AddYears (DateTime time, int years);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>要向其中添加`years`。</xref:System.DateTime>"
    - id: years
      type: System.Int32
      description: "若要添加的年份数。"
    return:
      type: System.DateTime
      description: "一个新<xref:System.DateTime>中时得到的添加指定的年份数到<code> time </code>参数。</xref:System.DateTime>"
  overload: System.Globalization.EastAsianLunisolarCalendar.AddYears*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "结果超出所支持的一种<xref:System.DateTime>。</xref:System.DateTime>范围"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>是小于<xref:System.Globalization.Calendar.MinSupportedDateTime*>或大于<xref:System.Globalization.Calendar.MaxSupportedDateTime*>。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType
  id: AlgorithmType
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: AlgorithmType
  nameWithType: EastAsianLunisolarCalendar.AlgorithmType
  fullName: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取一个值，该值指示当前日历是阳历、 阴历还是二者的组合。"
  syntax:
    content: public override System.Globalization.CalendarAlgorithmType AlgorithmType { get; }
    return:
      type: System.Globalization.CalendarAlgorithmType
      description: "始终返回<xref href=&quot;System.Globalization.CalendarAlgorithmType&quot;> </xref>。"
  overload: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)
  id: GetCelestialStem(System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetCelestialStem(Int32)
  nameWithType: EastAsianLunisolarCalendar.GetCelestialStem(Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算甲子 （60 年） 循环中的指定年份的天干。"
  syntax:
    content: public int GetCelestialStem (int sexagenaryYear);
    parameters:
    - id: sexagenaryYear
      type: System.Int32
      description: "一个表示甲子循环中的每一年的 1 到 60 之间的整数。"
    return:
      type: System.Int32
      description: "一个介于 1 到 10。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>sexagenaryYear</code>是小于 1 或大于 60。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)
  id: GetDayOfMonth(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetDayOfMonth(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算指定日期的月份日期。"
  syntax:
    content: public override int GetDayOfMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "表示的天中指定的月份的 1 到 31 之间的一个整数<code> time </code>参数。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)
  id: GetDayOfWeek(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetDayOfWeek(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算日期中指定的日期是星期几。"
  syntax:
    content: public override DayOfWeek GetDayOfWeek (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.DayOfWeek
      description: "之一<xref:System.DayOfWeek>这些值表示中指定星期几<code> time </code>参数。</xref:System.DayOfWeek>"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>time</code>是小于<xref:System.Globalization.Calendar.MinSupportedDateTime*>或大于<xref:System.Globalization.Calendar.MaxSupportedDateTime*>。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)
  id: GetDayOfYear(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetDayOfYear(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算的年份中指定日期的日期。"
  remarks: "每年的日期被指从该年度的第一天的天数。 例如，第一个月的第一天的 GetDayOfYear 返回 1，和上个月的最后一天的 GetDayOfYear 这一年，这是相同的值由<xref:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear%2A>.</xref:System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear%2A>返回总天数"
  syntax:
    content: public override int GetDayOfYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个介于 1 到 354 在平年或从 1 到闰年，表示的年份中指定的天中的 384 <code> time </code>参数。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  id: GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算中的指定的年和纪元的指定月份的天数。"
  remarks: "如果`month`参数为第二个月时，为方法返回 28 或 29，具体取决于是否`year`参数是否为闰年。"
  syntax:
    content: public override int GetDaysInMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "从 1 到 12 在平年或从 1 到 13 闰年中一个整数，用于表示月份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Int32
      description: "在指定月份的指定的年和纪元的天数。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code><code>month</code>，或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)
  id: GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetDaysInYear(Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算指定的纪元年份中的天数。"
  remarks: "GetDaysInYear 方法返回 365 或 366，具体取决于是否`year`参数是否为闰年。"
  syntax:
    content: public override int GetDaysInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Int32
      description: "指定的纪元年份中天数。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)
  id: GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetLeapMonth(Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算指定的年和纪元的闰月。"
  remarks: "在支持闰月日历，在某个特定的月份之后或在每一年中的任何月份之后发生的闰月。 例如，<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法返回一个介于 1 到 13，该值指示指定的日期与关联的月份。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A> 如果一年中，在第八个和第 9 个月之间存在闰月<xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>方法闰第八个月的 9 和 10 第 9 个月的第八个月份返回 8。</xref:System.Globalization.EastAsianLunisolarCalendar.GetMonth%2A>"
  syntax:
    content: public override int GetLeapMonth (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Int32
      description: "从 1 到 13，该值指示指定的纪元年份中的闰月一个正整数。       -或-如果此日历不支持闰月，或者为零<code> year </code>和<code> era </code>参数未指定为闰年。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)
  id: GetMonth(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetMonth(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetMonth(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonth(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回在指定日期的月份。"
  syntax:
    content: public override int GetMonth (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个从 1 到 13 的整数，表示中指定的月份<code> time </code>参数。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetMonth*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)
  id: GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算指定的年和纪元中的月数。"
  syntax:
    content: public override int GetMonthsInYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Int32
      description: "指定纪元中的指定年份中的月数。 返回值为 12 个月在平年或闰年中 13 个月。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)
  id: GetSexagenaryYear(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetSexagenaryYear(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算中甲子 （60 年） 循环，对应于指定日期的年份。"
  syntax:
    content: public virtual int GetSexagenaryYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "A<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "介于 1 到 60 之间对应于甲子循环中<code> date </code>参数。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)
  id: GetTerrestrialBranch(System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetTerrestrialBranch(Int32)
  nameWithType: EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "计算甲子 （60 年） 循环中的指定年份的地面分支。"
  syntax:
    content: public int GetTerrestrialBranch (int sexagenaryYear);
    parameters:
    - id: sexagenaryYear
      type: System.Int32
      description: "一个表示甲子循环中的每一年的 1 到 60 之间的整数。"
    return:
      type: System.Int32
      description: "从 1 到 12 的整数。"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>sexagenaryYear</code>是小于 1 或大于 60。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)
  id: GetYear(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: GetYear(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetYear(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetYear(DateTime)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回在指定日期的年份。"
  syntax:
    content: public override int GetYear (DateTime time);
    parameters:
    - id: time
      type: System.DateTime
      description: "<xref:System.DateTime>读取。</xref:System.DateTime>"
    return:
      type: System.Int32
      description: "一个整数，表示的年份中的指定<xref:System.DateTime>。</xref:System.DateTime>"
  overload: System.Globalization.EastAsianLunisolarCalendar.GetYear*
  exceptions: []
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  id: IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定纪元中指定的日期是否为闰日。"
  syntax:
    content: public override bool IsLeapDay (int year, int month, int day, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "一个从 1 到 13 表示月份的整数。"
    - id: day
      type: System.Int32
      description: "一个表示一天的 1 到 31 之间的整数。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的日期是闰日，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code><code>month</code>， <code>day</code>，或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  id: IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定的纪元年份中指定的月份是否为闰月。"
  syntax:
    content: public override bool IsLeapMonth (int year, int month, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "一个从 1 到 13 表示月份的整数。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果<code> month </code>参数为闰月; 否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code><code>month</code>，或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)
  id: IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: IsLeapYear(Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "确定指定纪元中的指定的年份是否为闰年。"
  syntax:
    content: public override bool IsLeapYear (int year, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果指定的年是闰年，则否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  id: ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "返回<xref:System.DateTime>，设置为指定的日期、 时间和纪元。</xref:System.DateTime>"
  remarks: "都传递可以转换为公历日期的当前日历中的任何日期。 公历日期可以随后用于，例如，比较不同日历中的日期或在特定日历中创建等效的日期。"
  syntax:
    content: public override DateTime ToDateTime (int year, int month, int day, int hour, int minute, int second, int millisecond, int era);
    parameters:
    - id: year
      type: System.Int32
      description: "一个整数，表示的年份。"
    - id: month
      type: System.Int32
      description: "一个从 1 到 13 表示月份的整数。"
    - id: day
      type: System.Int32
      description: "一个表示一天的 1 到 31 之间的整数。"
    - id: hour
      type: System.Int32
      description: "一个整数，表示小时的 0 到 23 之间。"
    - id: minute
      type: System.Int32
      description: "表示分钟的 0 到 59 之间的一个整数。"
    - id: second
      type: System.Int32
      description: "一个表示秒的 0 到 59 之间的整数。"
    - id: millisecond
      type: System.Int32
      description: "一个表示毫秒的 0 到 999 之间的整数。"
    - id: era
      type: System.Int32
      description: "一个整数，表示纪元。"
    return:
      type: System.DateTime
      description: "A <xref:System.DateTime>，设置为指定的日期、 时间和纪元。</xref:System.DateTime>"
  overload: System.Globalization.EastAsianLunisolarCalendar.ToDateTime*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code><code>month</code>， <code>day</code>， <code>hour</code>， <code>minute</code>， <code>second</code>， <code>millisecond</code>，或<code>era</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)
  id: ToFourDigitYear(System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: ToFourDigitYear(Int32)
  nameWithType: EastAsianLunisolarCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(Int32)
  type: Method
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "将指定的年份转换为四位数年份。"
  remarks: "ToFourDigitYear 方法使用<xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A>属性来确定相应的纪元。</xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A>       ToFourDigitYear 支持两位数年份或四位数年份。 将两位数年份值 (小于 100) 传递会导致方法的值转换为一个四位数字值根据<xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A>值，该值表示相应的纪元。</xref:System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax%2A> 如果应用程序提供在 ToFourDigitYear 到了受支持的日历的范围内的四位数年份值，该方法将返回实际的输入的值。 如果应用程序提供一个四位数字值超出了支持的日历，或者它提供了负值，则该方法将引发异常。"
  syntax:
    content: public override int ToFourDigitYear (int year);
    parameters:
    - id: year
      type: System.Int32
      description: "两位数或四位整数，它表示要转换的年份。"
    return:
      type: System.Int32
      description: "一个整数，包含的四位数字表示形式<code> year </code>参数。"
  overload: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>year</code>超出了此日历支持的范围。"
  platform:
  - net462
- uid: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax
  id: TwoDigitYearMax
  parent: System.Globalization.EastAsianLunisolarCalendar
  langs:
  - csharp
  name: TwoDigitYearMax
  nameWithType: EastAsianLunisolarCalendar.TwoDigitYearMax
  fullName: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax
  type: Property
  assemblies:
  - mscorlib
  namespace: System.Globalization
  summary: "获取或设置可以用两位数年份表示的 100 年范围内的最后一年。"
  remarks: "此属性允许两位数年份，要正确转换为 4 位数年份。 例如，在公历日历中，如果此属性设置为 2029，100 年范围是从 1930年为 2029年。 因此，为 30 的 2 位值被解释为 1930，而 29 一个 2 位数字值被解释为 2029年。       此属性的初始值被派生自控制面板的区域和语言选项部分中的设置。 但是，该信息可以更改<xref:System.AppDomain>.</xref:System.AppDomain>的生命周期内 <xref:System.Globalization.EastAsianLunisolarCalendar>类不会检测系统设置中的更改自动。</xref:System.Globalization.EastAsianLunisolarCalendar>"
  syntax:
    content: public override int TwoDigitYearMax { get; set; }
    return:
      type: System.Int32
      description: "可以用两位数年份表示的 100 年范围内的最后一年。"
  overload: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "当前<xref href=&quot;System.Globalization.EastAsianLunisolarCalendar&quot;></xref>是只读的。"
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "在集运算中的值是小于 99 或大于当前日历中的最大支持年份。"
  platform:
  - net462
references:
- uid: System.Globalization.Calendar
  isExternal: false
  name: System.Globalization.Calendar
- uid: System.ArgumentException
  isExternal: true
  name: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  isExternal: true
  name: System.ArgumentOutOfRangeException
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Globalization.EastAsianLunisolarCalendar.AddMonths(System.DateTime,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: AddMonths(DateTime,Int32)
  nameWithType: EastAsianLunisolarCalendar.AddMonths(DateTime,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.AddMonths(DateTime,Int32)
- uid: System.DateTime
  parent: System
  isExternal: true
  name: DateTime
  nameWithType: DateTime
  fullName: System.DateTime
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Globalization.EastAsianLunisolarCalendar.AddYears(System.DateTime,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: AddYears(DateTime,Int32)
  nameWithType: EastAsianLunisolarCalendar.AddYears(DateTime,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.AddYears(DateTime,Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: EastAsianLunisolarCalendar.AlgorithmType
  fullName: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType
- uid: System.Globalization.CalendarAlgorithmType
  parent: System.Globalization
  isExternal: false
  name: CalendarAlgorithmType
  nameWithType: CalendarAlgorithmType
  fullName: System.Globalization.CalendarAlgorithmType
- uid: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetCelestialStem(Int32)
  nameWithType: EastAsianLunisolarCalendar.GetCelestialStem(Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem(Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDayOfMonth(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth(DateTime)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDayOfWeek(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek(DateTime)
- uid: System.DayOfWeek
  parent: System
  isExternal: true
  name: DayOfWeek
  nameWithType: DayOfWeek
  fullName: System.DayOfWeek
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDayOfYear(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetDayOfYear(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear(DateTime)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDaysInMonth(Int32,Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.GetDaysInMonth(Int32,Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth(Int32,Int32,Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDaysInYear(Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.GetDaysInYear(Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear(Int32,Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetLeapMonth(Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.GetLeapMonth(Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth(Int32,Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonth(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetMonth(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetMonth(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonth(DateTime)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetMonthsInYear(Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.GetMonthsInYear(Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear(Int32,Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetSexagenaryYear(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear(DateTime)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetTerrestrialBranch(Int32)
  nameWithType: EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch(Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.GetYear(System.DateTime)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetYear(DateTime)
  nameWithType: EastAsianLunisolarCalendar.GetYear(DateTime)
  fullName: System.Globalization.EastAsianLunisolarCalendar.GetYear(DateTime)
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: IsLeapDay(Int32,Int32,Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay(Int32,Int32,Int32,Int32)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: IsLeapMonth(Int32,Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.IsLeapMonth(Int32,Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth(Int32,Int32,Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: IsLeapYear(Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.IsLeapYear(Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear(Int32,Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  nameWithType: EastAsianLunisolarCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.ToDateTime(Int32,Int32,Int32,Int32,Int32,Int32,Int32,Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(System.Int32)
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: ToFourDigitYear(Int32)
  nameWithType: EastAsianLunisolarCalendar.ToFourDigitYear(Int32)
  fullName: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear(Int32)
- uid: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: EastAsianLunisolarCalendar.TwoDigitYearMax
  fullName: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax
- uid: System.Globalization.EastAsianLunisolarCalendar.AddMonths*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: AddMonths
  nameWithType: EastAsianLunisolarCalendar.AddMonths
- uid: System.Globalization.EastAsianLunisolarCalendar.AddYears*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: AddYears
  nameWithType: EastAsianLunisolarCalendar.AddYears
- uid: System.Globalization.EastAsianLunisolarCalendar.AlgorithmType*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: AlgorithmType
  nameWithType: EastAsianLunisolarCalendar.AlgorithmType
- uid: System.Globalization.EastAsianLunisolarCalendar.GetCelestialStem*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetCelestialStem
  nameWithType: EastAsianLunisolarCalendar.GetCelestialStem
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfMonth*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDayOfMonth
  nameWithType: EastAsianLunisolarCalendar.GetDayOfMonth
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfWeek*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDayOfWeek
  nameWithType: EastAsianLunisolarCalendar.GetDayOfWeek
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDayOfYear*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDayOfYear
  nameWithType: EastAsianLunisolarCalendar.GetDayOfYear
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInMonth*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDaysInMonth
  nameWithType: EastAsianLunisolarCalendar.GetDaysInMonth
- uid: System.Globalization.EastAsianLunisolarCalendar.GetDaysInYear*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetDaysInYear
  nameWithType: EastAsianLunisolarCalendar.GetDaysInYear
- uid: System.Globalization.EastAsianLunisolarCalendar.GetLeapMonth*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetLeapMonth
  nameWithType: EastAsianLunisolarCalendar.GetLeapMonth
- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonth*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetMonth
  nameWithType: EastAsianLunisolarCalendar.GetMonth
- uid: System.Globalization.EastAsianLunisolarCalendar.GetMonthsInYear*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetMonthsInYear
  nameWithType: EastAsianLunisolarCalendar.GetMonthsInYear
- uid: System.Globalization.EastAsianLunisolarCalendar.GetSexagenaryYear*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetSexagenaryYear
  nameWithType: EastAsianLunisolarCalendar.GetSexagenaryYear
- uid: System.Globalization.EastAsianLunisolarCalendar.GetTerrestrialBranch*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetTerrestrialBranch
  nameWithType: EastAsianLunisolarCalendar.GetTerrestrialBranch
- uid: System.Globalization.EastAsianLunisolarCalendar.GetYear*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: GetYear
  nameWithType: EastAsianLunisolarCalendar.GetYear
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapDay*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: IsLeapDay
  nameWithType: EastAsianLunisolarCalendar.IsLeapDay
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapMonth*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: IsLeapMonth
  nameWithType: EastAsianLunisolarCalendar.IsLeapMonth
- uid: System.Globalization.EastAsianLunisolarCalendar.IsLeapYear*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: IsLeapYear
  nameWithType: EastAsianLunisolarCalendar.IsLeapYear
- uid: System.Globalization.EastAsianLunisolarCalendar.ToDateTime*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: ToDateTime
  nameWithType: EastAsianLunisolarCalendar.ToDateTime
- uid: System.Globalization.EastAsianLunisolarCalendar.ToFourDigitYear*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: ToFourDigitYear
  nameWithType: EastAsianLunisolarCalendar.ToFourDigitYear
- uid: System.Globalization.EastAsianLunisolarCalendar.TwoDigitYearMax*
  parent: System.Globalization.EastAsianLunisolarCalendar
  isExternal: false
  name: TwoDigitYearMax
  nameWithType: EastAsianLunisolarCalendar.TwoDigitYearMax
