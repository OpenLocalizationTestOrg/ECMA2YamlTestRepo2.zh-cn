### YamlMime:ManagedReference
items:
- uid: System.Messaging.MessageQueueEnumerator
  id: MessageQueueEnumerator
  children:
  - System.Messaging.MessageQueueEnumerator.Close
  - System.Messaging.MessageQueueEnumerator.Current
  - System.Messaging.MessageQueueEnumerator.Dispose
  - System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  - System.Messaging.MessageQueueEnumerator.LocatorHandle
  - System.Messaging.MessageQueueEnumerator.MoveNext
  - System.Messaging.MessageQueueEnumerator.Reset
  - System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  langs:
  - csharp
  name: MessageQueueEnumerator
  nameWithType: MessageQueueEnumerator
  fullName: System.Messaging.MessageQueueEnumerator
  type: Class
  summary: "提供一个只进游标，用于枚举消息队列。"
  remarks: "与网络上的队列进行动态交互使用 MessageQueueEnumerator。 方法可通过<xref:System.Messaging.MessageQueue>该类可以返回包含队列或包含队列集合调用了指定的方法时的快照的数组的动态列表的任一 MessageQueueEnumerator。</xref:System.Messaging.MessageQueue>       没有任何已定义的排序的网络中的队列。 它们不是有序，例如，通过计算机、 标签、 公共或私有状态或其他用户可访问的条件。 MessageQueueEnumerator 是光标，初始化为动态列表的开头。 你可以将光标移到枚举的第一个队列中通过调用<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>.</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A> 枚举数已初始化后，你可以使用<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>来单步执行其余的队列的前滚。</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>       不能与 MessageQueueEnumerator 逐步向后。 游标只允许通过队列枚举向前移动。 但是，你可以调用<xref:System.Messaging.MessageQueueEnumerator.Reset%2A>重置枚举，并将光标放在再次列表的开头。</xref:System.Messaging.MessageQueueEnumerator.Reset%2A> 枚举数是动态的因为可以通过枚举器访问的队列中追加光标的当前位置之外。 光标的当前位置不能访问不事先调用 Reset 之前插入队列。"
  example:
  - "The following code example iterates through all the message queues in the network, and examines the path for each queue. Finally, it displays the number of public queues on the network.  \n  \n [!code-cs[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/csharp/t-system.messaging.messa_7_1.cs)]\n [!code-cpp[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/cpp/t-system.messaging.messa_7_1.cpp)]\n [!code-vb[MessageQueue.GetMessageQueueEnumerator_noparms#1](~/add/codesnippet/visualbasic/t-system.messaging.messa_7_1.vb)]"
  syntax:
    content: 'public class MessageQueueEnumerator : MarshalByRefObject, IDisposable, System.Collections.IEnumerator'
  inheritance:
  - System.Object
  - System.MarshalByRefObject
  implements:
  - System.Collections.IEnumerator
  - System.IDisposable
  inheritedMembers:
  - System.MarshalByRefObject.CreateObjRef(System.Type)
  - System.MarshalByRefObject.GetLifetimeService
  - System.MarshalByRefObject.InitializeLifetimeService
  - System.MarshalByRefObject.MemberwiseClone(System.Boolean)
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Close
  id: Close
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放与枚举器关联的资源。"
  remarks: "打开的句柄，操作系统会保留<xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A>，对光标的生存期内队列的枚举数。</xref:System.Messaging.MessageQueueEnumerator.LocatorHandle%2A> 当你完成使用枚举器时，调用接近释放与句柄关联的资源。"
  syntax:
    content: public void Close ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Close*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Current
  id: Current
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "获取当前<xref href=&quot;System.Messaging.MessageQueue&quot;></xref>枚举。"
  remarks: "创建枚举器时，它不指向任何内容，因此当前无效，将引发异常，如果访问它。 必须调用<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>将光标定位在枚举中的第一个队列。</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>       对当前具有到任何干预调用的多个调用<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>将返回相同<xref:System.Messaging.MessageQueue>对象。</xref:System.Messaging.MessageQueue> </xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>"
  syntax:
    content: public System.Messaging.MessageQueue Current { get; }
    return:
      type: System.Messaging.MessageQueue
      description: "将光标当前定位队列。"
  overload: System.Messaging.MessageQueueEnumerator.Current*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: "在首次调用之前调用当前<> *1>。光标位于之前在枚举中的第一个队列。      -或-在调用之后调用当前<> *1> 已经返回 false （指示光标是否位于后在枚举中的最后一个队列）。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  id: Dispose
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放使用的所有资源<xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref>。"
  remarks: "调用 Dispose 允许使用的资源<xref:System.Messaging.MessageQueueEnumerator>可以重新分配用于其他目的。</xref:System.Messaging.MessageQueueEnumerator> 有关释放的详细信息，请参阅[清洗向上非托管资源](~/add/includes/ajax-current-ext-md.md)。"
  syntax:
    content: public void Dispose ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "释放由非托管的资源<xref href=&quot;System.Messaging.MessageQueueEnumerator&quot;> </xref> ，还可以释放托管的资源。"
  remarks: "此方法称为由公共<xref:System.Messaging.MessageQueueEnumerator.Dispose%2A>方法和<xref:System.Object.Finalize%2A>方法。</xref:System.Object.Finalize%2A> </xref:System.Messaging.MessageQueueEnumerator.Dispose%2A> `Dispose`调用受保护`Dispose(Boolean)`方法替换`disposing`参数设置为`true`。 <xref:System.Object.Finalize%2A>调用`Dispose`与`disposing`设置为`false`。</xref:System.Object.Finalize%2A>       当`disposing`参数是`true`，此方法释放由任何托管对象持有的全部资源此<xref:System.Messaging.MessageQueueEnumerator>引用。</xref:System.Messaging.MessageQueueEnumerator> 此方法调用`Dispose`每个引用对象的方法。"
  syntax:
    content: protected virtual void Dispose (bool disposing);
    parameters:
    - id: disposing
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>若要释放托管和非托管资源;<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>若要仅释放非托管的资源。"
  overload: System.Messaging.MessageQueueEnumerator.Dispose*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  id: LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "获取本机消息队列句柄用于定位在网络中的队列。"
  remarks: "当不再需要此<xref:System.Messaging.MessageQueueEnumerator>实例时，调用<xref:System.Messaging.MessageQueueEnumerator.Close%2A>来释放此资源的句柄。</xref:System.Messaging.MessageQueueEnumerator.Close%2A> </xref:System.Messaging.MessageQueueEnumerator>"
  syntax:
    content: public IntPtr LocatorHandle { get; }
    return:
      type: System.IntPtr
      description: "当前队列本机句柄。"
  overload: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  exceptions:
  - type: System.Messaging.MessageQueueException
    commentId: T:System.Messaging.MessageQueueException
    description: "句柄不存在。"
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用代码没有浏览权限。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  id: MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "如果当前可用，将枚举数推进到枚举中的下一个队列。"
  remarks: "MoveNext 返回`false`立即如果与枚举没有任何队列。       将返回 MoveNext`true`直到它已达到集合的末尾。 然后，它将返回`false`每个连续调用。 但是后返回 MoveNext `false`，则访问<xref:System.Messaging.MessageQueueEnumerator.Current%2A>属性将引发异常。</xref:System.Messaging.MessageQueueEnumerator.Current%2A>       创建后，枚举数从概念上讲定位早于第一个<xref:System.Messaging.MessageQueue>MoveNext 调用第一个枚举，以及使到视图枚举的第一个队列。</xref:System.Messaging.MessageQueue>"
  syntax:
    content: public bool MoveNext ();
    parameters: []
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果枚举数已成功地推进到下一个队列中;，<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>如果枚举数已达到枚举末尾。"
  overload: System.Messaging.MessageQueueEnumerator.MoveNext*
  exceptions:
  - type: System.Security.SecurityException
    commentId: T:System.Security.SecurityException
    description: "调用代码没有浏览权限。"
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.Reset
  id: Reset
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
  type: Method
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "重置光标，使它指向在枚举的开头。"
  remarks: "一个枚举器会只进方向移动。 使用此方法返回的队列的枚举的起始位置。       重置将光标置于在列表中的第一个队列。 不需要调用<xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>在调用重置移动光标后转发到枚举中的第一个队列。</xref:System.Messaging.MessageQueueEnumerator.MoveNext%2A>"
  syntax:
    content: public void Reset ();
    parameters: []
  overload: System.Messaging.MessageQueueEnumerator.Reset*
  exceptions: []
  platform:
  - net462
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  id: System#Collections#IEnumerator#Current
  isEii: true
  parent: System.Messaging.MessageQueueEnumerator
  langs:
  - csharp
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
  type: Property
  assemblies:
  - System.Messaging
  namespace: System.Messaging
  summary: "获取当前<xref href=&quot;System.Messaging.MessageQueue&quot;></xref>枚举。"
  syntax:
    content: object System.Collections.IEnumerator.Current { get; }
    return:
      type: System.Object
      description: "将光标当前定位队列。"
  overload: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  exceptions: []
  platform:
  - net462
references:
- uid: System.MarshalByRefObject
  isExternal: false
  name: System.MarshalByRefObject
- uid: System.InvalidOperationException
  isExternal: true
  name: System.InvalidOperationException
- uid: System.Messaging.MessageQueueException
  parent: System.Messaging
  isExternal: false
  name: MessageQueueException
  nameWithType: MessageQueueException
  fullName: System.Messaging.MessageQueueException
- uid: System.Security.SecurityException
  isExternal: true
  name: System.Security.SecurityException
- uid: System.Messaging.MessageQueueEnumerator.Close
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close()
  nameWithType: MessageQueueEnumerator.Close()
  fullName: System.Messaging.MessageQueueEnumerator.Close()
- uid: System.Messaging.MessageQueueEnumerator.Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueue
  parent: System.Messaging
  isExternal: false
  name: MessageQueue
  nameWithType: MessageQueue
  fullName: System.Messaging.MessageQueue
- uid: System.Messaging.MessageQueueEnumerator.Dispose
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose()
  nameWithType: MessageQueueEnumerator.Dispose()
  fullName: System.Messaging.MessageQueueEnumerator.Dispose()
- uid: System.Messaging.MessageQueueEnumerator.Dispose(System.Boolean)
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose(Boolean)
  nameWithType: MessageQueueEnumerator.Dispose(Boolean)
  fullName: System.Messaging.MessageQueueEnumerator.Dispose(Boolean)
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
  fullName: System.Messaging.MessageQueueEnumerator.LocatorHandle
- uid: System.IntPtr
  parent: System
  isExternal: true
  name: IntPtr
  nameWithType: IntPtr
  fullName: System.IntPtr
- uid: System.Messaging.MessageQueueEnumerator.MoveNext
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext()
  nameWithType: MessageQueueEnumerator.MoveNext()
  fullName: System.Messaging.MessageQueueEnumerator.MoveNext()
- uid: System.Messaging.MessageQueueEnumerator.Reset
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset()
  nameWithType: MessageQueueEnumerator.Reset()
  fullName: System.Messaging.MessageQueueEnumerator.Reset()
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
  fullName: System.Messaging.MessageQueueEnumerator.System.Collections.IEnumerator.Current
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Messaging.MessageQueueEnumerator.Close*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Close
  nameWithType: MessageQueueEnumerator.Close
- uid: System.Messaging.MessageQueueEnumerator.Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Current
  nameWithType: MessageQueueEnumerator.Current
- uid: System.Messaging.MessageQueueEnumerator.Dispose*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Dispose
  nameWithType: MessageQueueEnumerator.Dispose
- uid: System.Messaging.MessageQueueEnumerator.LocatorHandle*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: LocatorHandle
  nameWithType: MessageQueueEnumerator.LocatorHandle
- uid: System.Messaging.MessageQueueEnumerator.MoveNext*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: MoveNext
  nameWithType: MessageQueueEnumerator.MoveNext
- uid: System.Messaging.MessageQueueEnumerator.Reset*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: Reset
  nameWithType: MessageQueueEnumerator.Reset
- uid: System.Messaging.MessageQueueEnumerator.System#Collections#IEnumerator#Current*
  parent: System.Messaging.MessageQueueEnumerator
  isExternal: false
  name: System.Collections.IEnumerator.Current
  nameWithType: MessageQueueEnumerator.System.Collections.IEnumerator.Current
