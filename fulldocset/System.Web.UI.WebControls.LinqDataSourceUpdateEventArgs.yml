### YamlMime:ManagedReference
items:
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  id: LinqDataSourceUpdateEventArgs
  children:
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  - System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs
  nameWithType: LinqDataSourceUpdateEventArgs
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  type: Class
  summary: "提供有关数据<xref href=&quot;System.Web.UI.WebControls.LinqDataSource.Updating&quot;></xref>事件。"
  remarks: "LinqDataSourceUpdateEventArgs 对象传递给任何事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Updating> 你可以使用 LinqDataSourceUpdateEventArgs 对象中的数据源执行更新操作之前检查数据。 然后可以验证数据、 检查由数据类中，引发验证异常或更改在更新之前的值。 你也可以取消更新操作。       <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A>对象包含最初从数据源检索的数据。</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>对象包含在更新操作期间将数据源中保存的数据。</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A>       如果表示数据源的对象引发验证异常，然后更新<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>属性包含的<xref:System.Web.UI.WebControls.LinqDataSourceValidationException>类</xref:System.Web.UI.WebControls.LinqDataSourceValidationException>实例</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>的数据 你可以检索通过所有验证异常<xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A>属性。</xref:System.Web.UI.WebControls.LinqDataSourceValidationException.InnerExceptions%2A> 如果不验证引发异常，<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A>属性包含`null`。</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception%2A> 如果你处理验证异常，同时不想要重新引发的异常，设置<xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>属性`true`。</xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled%2A>       默认情况下，<xref:System.Web.UI.WebControls.LinqDataSource>除外，在网页上的原始视图中值从数据源控件存储状态其<xref:System.Data.Linq.Mapping.ColumnAttribute>属性标记为`UpdateCheck.Never`。</xref:System.Data.Linq.Mapping.ColumnAttribute> </xref:System.Web.UI.WebControls.LinqDataSource> LINQ to SQL 会自动将更新的数据之前检查数据的完整性。 通过比较中的数据源视图状态中存储的原始值的当前值执行此操作。 如果数据源中的值已更改，LINQ to SQL 将引发异常。 可以通过创建的处理程序中执行其他数据验证<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件。</xref:System.Web.UI.WebControls.LinqDataSource.Updating>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/t-system.web.ui.webcontr_352_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/t-system.web.ui.webcontr_352_1.cs)]  \n  \n The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: 'public class LinqDataSourceUpdateEventArgs : System.ComponentModel.CancelEventArgs'
  inheritance:
  - System.ComponentModel.CancelEventArgs
  implements: []
  inheritedMembers: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  id: '#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)'
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&quot;></xref>使用指定异常类。"
  syntax:
    content: public LinqDataSourceUpdateEventArgs (System.Web.UI.WebControls.LinqDataSourceValidationException exception);
    parameters:
    - id: exception
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "验证要更新的数据时出现异常。"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  id: '#ctor(System.Object,System.Object)'
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: LinqDataSourceUpdateEventArgs(Object,Object)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  type: Constructor
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "初始化的新实例<xref href=&quot;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&quot;></xref>类。"
  syntax:
    content: public LinqDataSourceUpdateEventArgs (object originalObject, object newObject);
    parameters:
    - id: originalObject
      type: System.Object
      description: "中指定的类型的对象<xref:System.Web.UI.WebControls.LinqDataSource.TableName*>属性，它包含从数据源检索的初始值。</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
    - id: newObject
      type: System.Object
      description: "中指定的类型的对象<xref:System.Web.UI.WebControls.LinqDataSource.TableName*>包含将保存在数据源的值的属性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  id: Exception
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取在执行更新操作之前验证数据时引发的异常。"
  remarks: "如果更新操作执行之前引发验证异常，则异常将存储在异常属性。 中的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件，你可以检索通过异常属性的异常。</xref:System.Web.UI.WebControls.LinqDataSource.Updating>"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public System.Web.UI.WebControls.LinqDataSourceValidationException Exception { get; }
    return:
      type: System.Web.UI.WebControls.LinqDataSourceValidationException
      description: "异常，如果出现错误;否则为<xref uid=&quot;langword_csharp_null&quot; name=&quot;null&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  id: ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取或设置一个值，该值指示是否处理了该异常并，它应不会再次引发。"
  remarks: "你可以创建的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件以检查该更新操作之前发生的验证异常。</xref:System.Web.UI.WebControls.LinqDataSource.Updating> 如果你处理的异常，并且不希望它再次引发，ExceptionHandled 属性设置为`true`。 如果你未设置为 ExceptionHandled 属性`true`，该异常将传播到调用堆栈中的下一步事件处理程序。"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. It displays any validation exception messages by using a <xref:System.Web.UI.WebControls.Label> control.  \n  \n```vb#  \nProtected Sub LinqDataSource_Updating(ByVal sender As Object, _  \n        ByVal e As LinqDataSourceUpdateEventArgs)  \n    If (e.Exception IsNot Nothing) Then  \n        For Each innerException As KeyValuePair(Of String, Exception) _  \n               In e.Exception.InnerExceptions  \n            Label1.Text &= innerException.Key & \": \" & _  \n                innerException.Value.Message & \"<br />\"  \n        Next  \n        e.ExceptionHandled = True  \n    End If  \nEnd Sub  \n```  \n  \n [C#]  \n  \n```  \nprotected void LinqDataSource_Updating(object sender,   \n        LinqDataSourceUpdateEventArgs e)  \n{  \n    if (e.Exception != null)  \n    {  \n        foreach (KeyValuePair<string, Exception> innerException in   \n             e.Exception.InnerExceptions)  \n        {  \n        Label1.Text += innerException.Key + \": \" +   \n            innerException.Value.Message + \"<br />\";  \n        }  \n        e.ExceptionHandled = true;  \n    }  \n}  \n```"
  syntax:
    content: public bool ExceptionHandled { get; set; }
    return:
      type: System.Boolean
      description: "<xref uid=&quot;langword_csharp_true&quot; name=&quot;true&quot; href=&quot;&quot;></xref>如果处理了该异常;否则为<xref uid=&quot;langword_csharp_false&quot; name=&quot;false&quot; href=&quot;&quot;> </xref>。"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  id: NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取包含将保存在数据源的值的对象。"
  remarks: "创建的事件处理程序<xref:System.Web.UI.WebControls.LinqDataSource.Updating>事件和检索 NewObject 属性以验证数据。</xref:System.Web.UI.WebControls.LinqDataSource.Updating> 你还可以更改的数据或取消更新操作。"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> property and the NewObject property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the NewObject property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_1298_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_1298_1.cs)]"
  syntax:
    content: public object NewObject { get; }
    return:
      type: System.Object
      description: "中指定的类型的对象<xref:System.Web.UI.WebControls.LinqDataSource.TableName*>属性，它包含要保存的数据。</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject*
  exceptions: []
  platform:
  - net462
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  id: OriginalObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  langs:
  - csharp
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  type: Property
  assemblies:
  - System.Web.Extensions
  namespace: System.Web.UI.WebControls
  summary: "获取包含最初已从数据源检索的值的对象。"
  remarks: "可以使用 OriginalObject 属性检查针对数据源中的当前值的原始值并将取消更新操作，或采取其他操作。       属性包含的属性的值 OriginalObject 在视图中保持在 Web 页的状态。 在这些情况下保持属性:-数据绑定控件中显示时。      -如果<xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName>属性<xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName>属性设置为`Always`或`WhenChanged`。</xref:System.Data.Linq.Mapping.ColumnAttribute?displayProperty=fullName> </xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A?displayProperty=fullName>       如果<xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A>属性设置为`Never`和的值不显示数据绑定控件中，值不存储在 Web 页。</xref:System.Data.Linq.Mapping.ColumnAttribute.UpdateCheck%2A> 在这种情况下，不能将它分配给 OriginalObject 属性。"
  example:
  - "The following example shows an event handler for the <xref:System.Web.UI.WebControls.LinqDataSource.Updating> event. The example shows how to compare properties from the OriginalObject property and the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property to determine whether the value in the `Category` property has changed. If so, the `CategoryChanged` property of the object in the <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> property is set to `true`.  \n  \n [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/visualbasic/p-system.web.ui.webcontr_761_1.vb)]\n [!code-cs[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/add/codesnippet/csharp/p-system.web.ui.webcontr_761_1.cs)]"
  syntax:
    content: public object OriginalObject { get; }
    return:
      type: System.Object
      description: "中指定的类型的对象<xref:System.Web.UI.WebControls.LinqDataSource.TableName*>包含从数据源中检索到的数据的属性。</xref:System.Web.UI.WebControls.LinqDataSource.TableName*>"
  overload: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject*
  exceptions: []
  platform:
  - net462
references:
- uid: System.ComponentModel.CancelEventArgs
  isExternal: false
  name: System.ComponentModel.CancelEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Web.UI.WebControls.LinqDataSourceValidationException)
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(LinqDataSourceValidationException)
- uid: System.Web.UI.WebControls.LinqDataSourceValidationException
  parent: System.Web.UI.WebControls
  isExternal: false
  name: LinqDataSourceValidationException
  nameWithType: LinqDataSourceValidationException
  fullName: System.Web.UI.WebControls.LinqDataSourceValidationException
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor(System.Object,System.Object)
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs(Object,Object)
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs(Object,Object)
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
  fullName: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.#ctor*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: LinqDataSourceUpdateEventArgs
  nameWithType: LinqDataSourceUpdateEventArgs.LinqDataSourceUpdateEventArgs
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.Exception*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: Exception
  nameWithType: LinqDataSourceUpdateEventArgs.Exception
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.ExceptionHandled*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: ExceptionHandled
  nameWithType: LinqDataSourceUpdateEventArgs.ExceptionHandled
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: NewObject
  nameWithType: LinqDataSourceUpdateEventArgs.NewObject
- uid: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject*
  parent: System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs
  isExternal: false
  name: OriginalObject
  nameWithType: LinqDataSourceUpdateEventArgs.OriginalObject
