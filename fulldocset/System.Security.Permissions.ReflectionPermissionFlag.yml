### YamlMime:ManagedReference
items:
- uid: System.Security.Permissions.ReflectionPermissionFlag
  id: ReflectionPermissionFlag
  children:
  - System.Security.Permissions.ReflectionPermissionFlag.AllFlags
  - System.Security.Permissions.ReflectionPermissionFlag.MemberAccess
  - System.Security.Permissions.ReflectionPermissionFlag.NoFlags
  - System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit
  - System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess
  - System.Security.Permissions.ReflectionPermissionFlag.TypeInformation
  langs:
  - csharp
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
  type: Enum
  summary: "指定允许的使用<xref href=&quot;System.Reflection&quot;></xref>和<xref href=&quot;System.Reflection.Emit&quot;></xref>命名空间。"
  remarks: "此枚举由<xref:System.Security.Permissions.ReflectionPermission>和<xref:System.Security.Permissions.ReflectionPermissionAttribute>类。</xref:System.Security.Permissions.ReflectionPermissionAttribute> </xref:System.Security.Permissions.ReflectionPermission> 如果没有<xref:System.Security.Permissions.ReflectionPermission>授予，反射允许所有类型和成员，但都允许仅对可见类型和成员的调用操作。</xref:System.Security.Permissions.ReflectionPermission> 有关详细信息，请参阅[反射的安全注意事项](~/add/includes/ajax-current-ext-md.md)。      1> [!CAUTION]&1;> 由于<xref:System.Security.Permissions.ReflectionPermission>可以提供访问私有类的成员，我们建议你授予<xref:System.Security.Permissions.ReflectionPermission>Internet 代码只能与 RestrictedMemberAccess 标志，而不使用任何其他标志。</xref:System.Security.Permissions.ReflectionPermission> </xref:System.Security.Permissions.ReflectionPermission>       RestrictedMemberAccess 标志在中引入[!INCLUDE[net_v20SP1_short](~/add/includes/net-v20sp1-short-md.md)]。 若要使用此标志，你的应用程序应面向[!INCLUDE[net_v35_long](~/add/includes/ajax-current-ext-md.md)]或更高版本。      1> [!IMPORTANT]&1;> AllFlags 不包括 RestrictedMemberAccess 标志。 若要获取此枚举中包括所有标志掩码，你必须使用带有 RestrictedMemberAccess AllFlags 的组合。       从开始[!INCLUDE[net_v20SP1_short](~/add/includes/net-v20sp1-short-md.md)]，ReflectionEmit 标志不再需要发出的代码，除非发出调试符号。 若要使用此功能，你的应用程序应面向[!INCLUDE[net_v35_short](~/add/includes/net-v35-short-md.md)]或更高版本。       从开始[!INCLUDE[dnprdnlong](~/add/includes/dnprdnlong-md.md)]，TypeInformation 标志不再需要反映非公共类型和成员; 标志具有已标记为已过时。"
  example:
  - "The following example shows how to use the ReflectionPermissionFlag enumeration to initialize a new instance of the <xref:System.Security.Permissions.ReflectionPermission> class that represents the right to perform restricted member access. This example is part of a larger example that is provided for the <xref:System.Security.Permissions.ReflectionPermission> class.  \n  \n For an example that shows how to use the RestrictedMemberAccess flag with Internet code, see [Walkthrough: Emitting Code in Partial Trust Scenarios](~/add/includes/ajax-current-ext-md.md).  \n  \n [!code-vb[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/visualbasic/t-system.security.permis_18_1.vb)]\n [!code-cs[System.Security.Permissions.ReflectionPermission#8](~/add/codesnippet/csharp/t-system.security.permis_18_1.cs)]"
  syntax:
    content: >-
      [System.Flags]

      [System.Runtime.InteropServices.ComVisible(true)]

      public enum ReflectionPermissionFlag
  inheritance:
  - System.Enum
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionFlag.AllFlags
  id: AllFlags
  parent: System.Security.Permissions.ReflectionPermissionFlag
  langs:
  - csharp
  name: AllFlags
  nameWithType: ReflectionPermissionFlag.AllFlags
  fullName: System.Security.Permissions.ReflectionPermissionFlag.AllFlags
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "<xref uid=&quot;langword_csharp_TypeInformation&quot; name=&quot;TypeInformation&quot; href=&quot;&quot;></xref>, <xref uid=&quot;langword_csharp_MemberAccess&quot; name=&quot;MemberAccess&quot; href=&quot;&quot;></xref>, and <xref uid=&quot;langword_csharp_ReflectionEmit&quot; name=&quot;ReflectionEmit&quot; href=&quot;&quot;></xref> are set. AllFlags 不包括 RestrictedMemberAccess。"
  syntax:
    content: AllFlags
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionFlag.MemberAccess
  id: MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionFlag
  langs:
  - csharp
  name: MemberAccess
  nameWithType: ReflectionPermissionFlag.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionFlag.MemberAccess
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "允许在所有成员上的调用操作，而不考虑授予集。 如果未设置此标志，仅适用于可见成员允许调用操作。"
  syntax:
    content: MemberAccess
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionFlag.NoFlags
  id: NoFlags
  parent: System.Security.Permissions.ReflectionPermissionFlag
  langs:
  - csharp
  name: NoFlags
  nameWithType: ReflectionPermissionFlag.NoFlags
  fullName: System.Security.Permissions.ReflectionPermissionFlag.NoFlags
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "允许的类型和成员的枚举。 允许对可见类型和成员的调用操作。"
  syntax:
    content: NoFlags
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit
  id: ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionFlag
  langs:
  - csharp
  name: ReflectionEmit
  nameWithType: ReflectionPermissionFlag.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "允许发出调试符号。 开头[!INCLUDE[net_v20sp1_long](~/add/includes/net-v20sp1-long-md.md)]，此标志不再需要发出代码。"
  syntax:
    content: ReflectionEmit
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess
  id: RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionFlag
  langs:
  - csharp
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionFlag.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "部分受信任的代码提供受限制的成员访问。 部分受信任的代码可以访问非公共类型和成员，但仅当的授予集的部分受信任的代码中包含的非公共类型和正在访问的成员的程序集的授予集包括的所有权限。 此标志是在新[!INCLUDE[net_v20SP1_short](~/add/includes/net-v20sp1-short-md.md)]。"
  syntax:
    content: RestrictedMemberAccess
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "要添加。"
  exceptions: []
  platform:
  - net462
- uid: System.Security.Permissions.ReflectionPermissionFlag.TypeInformation
  id: TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionFlag
  langs:
  - csharp
  name: TypeInformation
  nameWithType: ReflectionPermissionFlag.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionFlag.TypeInformation
  type: Field
  assemblies:
  - mscorlib
  namespace: System.Security.Permissions
  summary: "此标志已废弃不用。 不不需要以枚举类型和成员并检查其元数据的任何标志。 请改用 NoFlags。"
  syntax:
    content: TypeInformation
    return:
      type: System.Security.Permissions.ReflectionPermissionFlag
      description: "要添加。"
  exceptions: []
  platform:
  - net462
references:
- uid: System.Enum
  isExternal: false
  name: System.Enum
- uid: System.Security.Permissions.ReflectionPermissionFlag.AllFlags
  parent: System.Security.Permissions.ReflectionPermissionFlag
  isExternal: false
  name: AllFlags
  nameWithType: ReflectionPermissionFlag.AllFlags
  fullName: System.Security.Permissions.ReflectionPermissionFlag.AllFlags
- uid: System.Security.Permissions.ReflectionPermissionFlag
  parent: System.Security.Permissions
  isExternal: false
  name: ReflectionPermissionFlag
  nameWithType: ReflectionPermissionFlag
  fullName: System.Security.Permissions.ReflectionPermissionFlag
- uid: System.Security.Permissions.ReflectionPermissionFlag.MemberAccess
  parent: System.Security.Permissions.ReflectionPermissionFlag
  isExternal: false
  name: MemberAccess
  nameWithType: ReflectionPermissionFlag.MemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionFlag.MemberAccess
- uid: System.Security.Permissions.ReflectionPermissionFlag.NoFlags
  parent: System.Security.Permissions.ReflectionPermissionFlag
  isExternal: false
  name: NoFlags
  nameWithType: ReflectionPermissionFlag.NoFlags
  fullName: System.Security.Permissions.ReflectionPermissionFlag.NoFlags
- uid: System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit
  parent: System.Security.Permissions.ReflectionPermissionFlag
  isExternal: false
  name: ReflectionEmit
  nameWithType: ReflectionPermissionFlag.ReflectionEmit
  fullName: System.Security.Permissions.ReflectionPermissionFlag.ReflectionEmit
- uid: System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess
  parent: System.Security.Permissions.ReflectionPermissionFlag
  isExternal: false
  name: RestrictedMemberAccess
  nameWithType: ReflectionPermissionFlag.RestrictedMemberAccess
  fullName: System.Security.Permissions.ReflectionPermissionFlag.RestrictedMemberAccess
- uid: System.Security.Permissions.ReflectionPermissionFlag.TypeInformation
  parent: System.Security.Permissions.ReflectionPermissionFlag
  isExternal: false
  name: TypeInformation
  nameWithType: ReflectionPermissionFlag.TypeInformation
  fullName: System.Security.Permissions.ReflectionPermissionFlag.TypeInformation
